# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Releases::V1::Entities::Release`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Releases::V1::Entities::Release`.

class Hydro::Schemas::Github::Releases::V1::Entities::Release
  sig do
    params(
      author_id: T.nilable(Integer),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      generated_notes_state: T.nilable(String),
      id: T.nilable(Integer),
      name: T.nilable(String),
      prerelease: T.nilable(T::Boolean),
      published_at: T.nilable(Google::Protobuf::Timestamp),
      repository_id: T.nilable(Integer),
      state: T.nilable(T.any(Symbol, Integer)),
      tag_name: T.nilable(String),
      target_commitish: T.nilable(String),
      updated_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(author_id: nil, created_at: nil, generated_notes_state: nil, id: nil, name: nil, prerelease: nil, published_at: nil, repository_id: nil, state: nil, tag_name: nil, target_commitish: nil, updated_at: nil); end

  sig { returns(Integer) }
  def author_id; end

  sig { params(value: Integer).void }
  def author_id=(value); end

  sig { void }
  def clear_author_id; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_generated_notes_state; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_prerelease; end

  sig { void }
  def clear_published_at; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_state; end

  sig { void }
  def clear_tag_name; end

  sig { void }
  def clear_target_commitish; end

  sig { void }
  def clear_updated_at; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(String) }
  def generated_notes_state; end

  sig { params(value: String).void }
  def generated_notes_state=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def prerelease; end

  sig { params(value: T::Boolean).void }
  def prerelease=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def published_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def published_at=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def state=(value); end

  sig { returns(String) }
  def tag_name; end

  sig { params(value: String).void }
  def tag_name=(value); end

  sig { returns(String) }
  def target_commitish; end

  sig { params(value: String).void }
  def target_commitish=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end
end

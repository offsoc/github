syntax = "proto3";

package billing_platform.api.v1;

option go_package = "lib/twirp/proto";
option ruby_package = "BillingPlatform::Api::V1";

import "proto/base.proto";

service UsageApi {
  rpc GetUsageTotal(GetUsageRequest) returns (GetUsageResponse);
  rpc GetUsageLineItems(GetUsageRequest) returns (GetUsageLineItemsResponse);
  rpc GetDiscountTotal(GetUsageRequest) returns (GetDiscountTotalResponse);
  rpc GetDiscountLineItems(GetUsageRequest) returns (GetDiscountLineItemsResponse);
  rpc GetUsageEventItems(GetUsageRequest) returns (GetUsageLineItemsResponse);
  rpc GetInvoice(GetInvoiceRequest) returns (GetInvoiceResponse);
  rpc GetRepoUsage(GetRepoUsageRequest) returns (GetRepoUsageResponse);
  rpc GetWatermarkLevel(GetWatermarkLevelRequest) returns (GetWatermarkLevelResponse);
  rpc GetNetUsageLineItems(GetUsageRequest) returns (GetNetUsageLineItemsResponse);
  rpc GetTopOrgRepoUsageLineItems(TopOrgRepoUsageRequest) returns (TopOrgRepoUsageResponse);
  rpc GetUsageChartData(GetUsageChartDataRequest) returns (GetUsageChartDataResponse);
}

message GetUsageRequest {
    string usageEntityId = 1;
    string product = 2;
    string sku = 3;
    int64 year = 4;
    int64 month = 5;
    int64 day = 6;
    int64 hour = 7;
    base.BillingPeriod billingPeriod = 8;
    int64 repoId = 9;
    int64 orgId = 10;
    base.UsageGroupBy groupBy = 11;
    bool includeQuantityGetUsageTotal = 12;
}

message GetUsageChartDataRequest {
    string usageEntityId = 1;
    string product = 2;
    string sku = 3;
    int64 year = 4;
    int64 month = 5;
    int64 day = 6;
    int64 hour = 7;
    base.BillingPeriod billingPeriod = 8;
    int64 repoId = 9;
    int64 orgId = 10;
    base.UsageGroupBy groupBy = 11;
    string costCenterId = 12;
    repeated string filteredOrgs = 13;
    repeated string filteredRepos = 14;
}

message GetUsageResponse {
    string product = 1;
    string sku = 2;
    double quantity = 3;
    double fullQuantity = 7;
    double billableAmount = 4;
    bool hitCache = 5;
    base.UnitType unitType = 6;
}

message GetUsageLineItemsResponse {
    repeated BillingItem billingItems = 1;
}

message GetDiscountLineItemsResponse {
    repeated DiscountItem discountItems = 1;
}

message GetNetUsageLineItemsResponse {
    repeated NetUsageItem netUsageItems = 1;
}

message GetDiscountTotalResponse {
    string product = 1;
    string sku = 2;
    double quantity = 3;
    double discountAmount = 5;
    bool hitCache = 6;
    base.UnitType unitType = 7;
}

message GetRepoUsageRequest {
    string usageEntityId = 1;
    int64 year = 2;
    int64 month = 3;
    int64 day = 4;
    int64 hour = 5;
    base.BillingPeriod billingPeriod = 6;
}

message GetRepoUsageResponse {
    repeated RepoUsage repoUsages = 1;
}

message GetInvoiceRequest {
    string customerId = 1;
    int64 year = 2;
    int64 month = 3;
}

message GetInvoiceResponse {
    Invoice invoice = 1;
}

message GetWatermarkLevelRequest {
    string usageEntityId = 1;
    string sku = 2;
    int64 repoId = 6;
    int64 orgId = 7;
}

message GetWatermarkLevelResponse {
    string sku = 2;
    double quantity = 3;
}

message GetUsageChartDataResponse {
    repeated UsageChartDataset usageChartData = 1;
}

message Invoice {
    string customerId = 1;
    int64 year = 2;
    int64 month = 3;
    UsageTotal usageTotal = 4;
    map<string, ProductTotal> ProductTotals = 5;
}

message ProductTotal {
    string product = 1;
    UsageTotal usageTotal = 2;
    map<string, SkuTotal> SkuTotals = 3;
}

message SkuTotal {
    string sku = 1;
    UsageTotal usageTotal = 2;
    repeated BillingItem billingItems = 3;
}

message UsageTotal {
    double gross = 1;
    double discount = 2;
    double net = 3;
    double quantity = 4;
}

message DiscountItem {
    string sku = 1;
    string product = 2;
    double quantity = 3;
    double discountAmount = 4;
    int64 usageAt = 5;
    base.Key selfReference = 6;
    base.UnitType unitType = 7;
}

message BillingItem {
    string usageEntityId = 1;
    string sku = 2;
    string product = 3;
    double quantity = 4;
    double fullQuantity = 13;
    double billedAmount = 5;
    double appliedCostPerQuantity = 6;
    int64 usageAt = 7;
    base.Key selfReference = 8;
    string friendlySkuName = 9;
    int64 repoId = 10;
    int64 orgId = 11;
    base.UnitType unitType = 12;
}

message NetUsageItem {
    string usageEntityId = 1;
    string sku = 2;
    string product = 3;
    double quantity = 4;
    double fullQuantity = 5;
    double grossAmount = 6;
    double discountAmount = 7;
    double netAmount = 8;
    double appliedCostPerQuantity = 9;
    int64 usageAt = 10;
    base.Key selfReference = 11;
    string friendlySkuName = 12;
    int64 repoId = 13;
    int64 orgId = 14;
    base.UnitType unitType = 15;
}

message RepoUsage {
    int64 repoId = 1;
    int64 orgId = 2;
    double quantity = 3;
    double billedAmount = 4;
    base.Key selfReference = 5;
    int64 usageAt = 6;
}

message TopOrgRepoUsageRequest {
    int64 customerId = 1;
    string costCenterId = 2;
    int32 limit = 3;
    int64 year = 4;
    int64 month = 5;
    int64 day = 6;
    int64 hour = 7;
    base.BillingPeriod billingPeriod = 8;
    base.UsageGroupBy groupBy = 9;
    repeated int64 organizationIds = 10;
}

message TopOrgRepoUsage {
    int64 orgId = 1;
    int64 repoId = 2;
    double billedAmount = 3;
    int64 usageAt = 4;
}

message TopOrgRepoUsageResponse {
    repeated TopOrgRepoUsage topUsages = 1;
    repeated BillingItem otherUsages = 2;
}

message UsageChartDataset {
    string name = 1;
    repeated UsageChartData data = 2;
}

message UsageChartData {
    int64 x = 1;
    double y = 2;
    CustomFields custom = 3;
}

message CustomFields {
    string discountAmount = 1;
    string grossAmount = 2;
    string totalAmount = 3;
}

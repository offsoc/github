# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::Gitauth::V1::HostStatus`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::Gitauth::V1::HostStatus`.

class GitHub::Spokes::Proto::Gitauth::V1::HostStatus
  sig do
    params(
      error_result: T.nilable(GitHub::Spokes::Proto::Gitauth::V1::ErrorResult),
      host: T.nilable(String),
      ok_result: T.nilable(GitHub::Spokes::Proto::Gitauth::V1::OkResult),
      path: T.nilable(String),
      replica_name: T.nilable(String)
    ).void
  end
  def initialize(error_result: nil, host: nil, ok_result: nil, path: nil, replica_name: nil); end

  sig { void }
  def clear_error_result; end

  sig { void }
  def clear_host; end

  sig { void }
  def clear_ok_result; end

  sig { void }
  def clear_path; end

  sig { void }
  def clear_replica_name; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Gitauth::V1::ErrorResult)) }
  def error_result; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Gitauth::V1::ErrorResult)).void }
  def error_result=(value); end

  sig { returns(String) }
  def host; end

  sig { params(value: String).void }
  def host=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Gitauth::V1::OkResult)) }
  def ok_result; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Gitauth::V1::OkResult)).void }
  def ok_result=(value); end

  sig { returns(String) }
  def path; end

  sig { params(value: String).void }
  def path=(value); end

  sig { returns(String) }
  def replica_name; end

  sig { params(value: String).void }
  def replica_name=(value); end

  sig { returns(T.nilable(Symbol)) }
  def result; end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::Entities::ProtectedBranch`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::Entities::ProtectedBranch`.

class Hydro::Schemas::Github::V1::Entities::ProtectedBranch
  sig do
    params(
      admin_enforced: T.nilable(T::Boolean),
      allow_deletions_enforcement_level: T.nilable(T.any(Symbol, Integer)),
      allow_force_pushes_enforcement_level: T.nilable(T.any(Symbol, Integer)),
      authorized_actors_only: T.nilable(T::Boolean),
      authorized_dismissal_actors_only: T.nilable(T::Boolean),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      dismiss_stale_reviews_on_push: T.nilable(T::Boolean),
      id: T.nilable(Integer),
      ignore_approvals_from_contributors: T.nilable(T::Boolean),
      linear_history_requirement_enforcement_level: T.nilable(T.any(Symbol, Integer)),
      merge_queue_enforcement_level: T.nilable(T.any(Symbol, Integer)),
      name: T.nilable(String),
      pull_request_reviews_enforcement_level: T.nilable(T.any(Symbol, Integer)),
      repository_id: T.nilable(Integer),
      require_code_owner_review: T.nilable(T::Boolean),
      require_last_push_approval: T.nilable(T::Boolean),
      required_approving_review_count: T.nilable(Integer),
      required_deployments_enforcement_level: T.nilable(T.any(Symbol, Integer)),
      required_review_thread_resolution_enforcement_level: T.nilable(T.any(Symbol, Integer)),
      required_status_checks_enforcement_level: T.nilable(T.any(Symbol, Integer)),
      signature_requirement_enforcement_level: T.nilable(T.any(Symbol, Integer)),
      strict_required_status_checks_policy: T.nilable(T::Boolean),
      updated_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(admin_enforced: nil, allow_deletions_enforcement_level: nil, allow_force_pushes_enforcement_level: nil, authorized_actors_only: nil, authorized_dismissal_actors_only: nil, created_at: nil, dismiss_stale_reviews_on_push: nil, id: nil, ignore_approvals_from_contributors: nil, linear_history_requirement_enforcement_level: nil, merge_queue_enforcement_level: nil, name: nil, pull_request_reviews_enforcement_level: nil, repository_id: nil, require_code_owner_review: nil, require_last_push_approval: nil, required_approving_review_count: nil, required_deployments_enforcement_level: nil, required_review_thread_resolution_enforcement_level: nil, required_status_checks_enforcement_level: nil, signature_requirement_enforcement_level: nil, strict_required_status_checks_policy: nil, updated_at: nil); end

  sig { returns(T::Boolean) }
  def admin_enforced; end

  sig { params(value: T::Boolean).void }
  def admin_enforced=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def allow_deletions_enforcement_level; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def allow_deletions_enforcement_level=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def allow_force_pushes_enforcement_level; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def allow_force_pushes_enforcement_level=(value); end

  sig { returns(T::Boolean) }
  def authorized_actors_only; end

  sig { params(value: T::Boolean).void }
  def authorized_actors_only=(value); end

  sig { returns(T::Boolean) }
  def authorized_dismissal_actors_only; end

  sig { params(value: T::Boolean).void }
  def authorized_dismissal_actors_only=(value); end

  sig { void }
  def clear_admin_enforced; end

  sig { void }
  def clear_allow_deletions_enforcement_level; end

  sig { void }
  def clear_allow_force_pushes_enforcement_level; end

  sig { void }
  def clear_authorized_actors_only; end

  sig { void }
  def clear_authorized_dismissal_actors_only; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_dismiss_stale_reviews_on_push; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_ignore_approvals_from_contributors; end

  sig { void }
  def clear_linear_history_requirement_enforcement_level; end

  sig { void }
  def clear_merge_queue_enforcement_level; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_pull_request_reviews_enforcement_level; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_require_code_owner_review; end

  sig { void }
  def clear_require_last_push_approval; end

  sig { void }
  def clear_required_approving_review_count; end

  sig { void }
  def clear_required_deployments_enforcement_level; end

  sig { void }
  def clear_required_review_thread_resolution_enforcement_level; end

  sig { void }
  def clear_required_status_checks_enforcement_level; end

  sig { void }
  def clear_signature_requirement_enforcement_level; end

  sig { void }
  def clear_strict_required_status_checks_policy; end

  sig { void }
  def clear_updated_at; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def dismiss_stale_reviews_on_push; end

  sig { params(value: T::Boolean).void }
  def dismiss_stale_reviews_on_push=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def ignore_approvals_from_contributors; end

  sig { params(value: T::Boolean).void }
  def ignore_approvals_from_contributors=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def linear_history_requirement_enforcement_level; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def linear_history_requirement_enforcement_level=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def merge_queue_enforcement_level; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def merge_queue_enforcement_level=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def pull_request_reviews_enforcement_level; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def pull_request_reviews_enforcement_level=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T::Boolean) }
  def require_code_owner_review; end

  sig { params(value: T::Boolean).void }
  def require_code_owner_review=(value); end

  sig { returns(T::Boolean) }
  def require_last_push_approval; end

  sig { params(value: T::Boolean).void }
  def require_last_push_approval=(value); end

  sig { returns(Integer) }
  def required_approving_review_count; end

  sig { params(value: Integer).void }
  def required_approving_review_count=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def required_deployments_enforcement_level; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def required_deployments_enforcement_level=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def required_review_thread_resolution_enforcement_level; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def required_review_thread_resolution_enforcement_level=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def required_status_checks_enforcement_level; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def required_status_checks_enforcement_level=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def signature_requirement_enforcement_level; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def signature_requirement_enforcement_level=(value); end

  sig { returns(T::Boolean) }
  def strict_required_status_checks_policy; end

  sig { params(value: T::Boolean).void }
  def strict_required_status_checks_policy=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Api::App::PlatformTypes::RepositoryStack`.
# Please instead update this file by running `bin/tapioca dsl Api::App::PlatformTypes::RepositoryStack`.

class Api::App::PlatformTypes::RepositoryStack < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(T.nilable(String)) }
  def color; end

  sig { returns(T::Boolean) }
  def color?; end

  sig { returns(T.nilable(Integer)) }
  def database_id; end

  sig { returns(T::Boolean) }
  def database_id?; end

  sig { returns(T.nilable(String)) }
  def description; end

  sig { returns(T::Boolean) }
  def description?; end

  sig { returns(T::Boolean) }
  def featured; end

  sig { returns(T::Boolean) }
  def featured?; end

  sig { returns(T::Boolean) }
  def has_verified_owner; end

  sig { returns(T::Boolean) }
  def has_verified_owner?; end

  sig { returns(T.nilable(String)) }
  def icon_color; end

  sig { returns(T::Boolean) }
  def icon_color?; end

  sig { returns(T.nilable(String)) }
  def icon_name; end

  sig { returns(T::Boolean) }
  def icon_name?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T::Boolean) }
  def is_listed; end

  sig { returns(T::Boolean) }
  def is_listed?; end

  sig { returns(String) }
  def name; end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(Api::App::PlatformTypes::Repository) }
  def repository; end

  sig { returns(T::Boolean) }
  def repository?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def resource_path; end

  sig { returns(T::Boolean) }
  def resource_path?; end

  sig { returns(String) }
  def security_email; end

  sig { returns(T::Boolean) }
  def security_email?; end

  sig { returns(T.nilable(String)) }
  def slug; end

  sig { returns(T::Boolean) }
  def slug?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def url; end

  sig { returns(T::Boolean) }
  def url?; end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::References::V1::UpdateRefRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::References::V1::UpdateRefRequest`.

class GitHub::Spokes::Proto::References::V1::UpdateRefRequest
  sig do
    params(
      fast_forward: T.nilable(T.any(Symbol, Integer)),
      ref_update: T.nilable(GitHub::Spokes::Proto::References::V1::UpdateRefOpUpdate),
      ref_verify: T.nilable(GitHub::Spokes::Proto::References::V1::UpdateRefOpVerify),
      ref_verify_update: T.nilable(GitHub::Spokes::Proto::References::V1::UpdateRefOpVerifyUpdate),
      reference: T.nilable(GitHub::Spokes::Proto::Types::V1::Reference)
    ).void
  end
  def initialize(fast_forward: nil, ref_update: nil, ref_verify: nil, ref_verify_update: nil, reference: nil); end

  sig { void }
  def clear_fast_forward; end

  sig { void }
  def clear_ref_update; end

  sig { void }
  def clear_ref_verify; end

  sig { void }
  def clear_ref_verify_update; end

  sig { void }
  def clear_reference; end

  sig { returns(T.any(Symbol, Integer)) }
  def fast_forward; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def fast_forward=(value); end

  sig { returns(T.nilable(Symbol)) }
  def operation; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::References::V1::UpdateRefOpUpdate)) }
  def ref_update; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::References::V1::UpdateRefOpUpdate)).void }
  def ref_update=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::References::V1::UpdateRefOpVerify)) }
  def ref_verify; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::References::V1::UpdateRefOpVerify)).void }
  def ref_verify=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::References::V1::UpdateRefOpVerifyUpdate)) }
  def ref_verify_update; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::References::V1::UpdateRefOpVerifyUpdate)).void }
  def ref_verify_update=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Reference)) }
  def reference; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Reference)).void }
  def reference=(value); end
end

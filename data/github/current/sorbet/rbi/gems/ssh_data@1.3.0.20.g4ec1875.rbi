# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ssh_data` gem.
# Please instead update this file by running `bin/tapioca gem ssh_data`.

# source://ssh_data//lib/ssh_data.rb#4
module SSHData
  extend ::SSHData

  # Break down a key in OpenSSH authorized_keys format (see sshd(8) manual
  # page).
  #
  # key - An OpenSSH formatted public key or certificate, including algo,
  #       base64 encoded key and optional comment.
  #
  # Returns an Array containing the algorithm String , the raw key or
  # certificate String and the comment String or nil.
  #
  # source://ssh_data//lib/ssh_data.rb#13
  def key_parts(key); end
end

# source://ssh_data//lib/ssh_data/error.rb#5
class SSHData::AlgorithmError < ::SSHData::Error; end

# source://ssh_data//lib/ssh_data/certificate.rb#5
class SSHData::Certificate
  # Intialize a new Certificate instance.
  #
  # algo:             - The certificate's String algorithm id (one of ALGO_RSA,
  #                     ALGO_DSA, ALGO_ECDSA256, ALGO_ECDSA384, ALGO_ECDSA521,
  #                     or ALGO_ED25519)
  # nonce:            - The certificate's String nonce field.
  # public_key:       - The certificate's public key as an PublicKey::Base
  #                     subclass instance.
  # serial:           - The certificate's Integer serial field.
  # type:             - The certificate's Integer type field (one of TYPE_USER
  #                     or TYPE_HOST).
  # key_id:           - The certificate's String key_id field.
  # valid_principals: - The Array of Strings valid_principles field from the
  #                     certificate.
  # valid_after:      - The certificate's Time valid_after field.
  # valid_before:     - The certificate's Time valid_before field.
  # critical_options: - The Hash critical_options field from the certificate.
  # extensions:       - The Hash extensions field from the certificate.
  # reserved:         - The certificate's String reserved field.
  # ca_key:           - The issuing CA's public key as a PublicKey::Base
  #                     subclass instance.
  # signature:        - The certificate's String signature field.
  #
  # Returns nothing.
  #
  # @return [Certificate] a new instance of Certificate
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#106
  def initialize(public_key:, key_id:, algo: T.unsafe(nil), nonce: T.unsafe(nil), serial: T.unsafe(nil), type: T.unsafe(nil), valid_principals: T.unsafe(nil), valid_after: T.unsafe(nil), valid_before: T.unsafe(nil), critical_options: T.unsafe(nil), extensions: T.unsafe(nil), reserved: T.unsafe(nil), ca_key: T.unsafe(nil), signature: T.unsafe(nil)); end

  # Returns the value of attribute algo.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def algo; end

  # Check if the given IP address is allowed for use with this certificate.
  #
  # address - A String IP address.
  #
  # Returns boolean.
  #
  # @return [Boolean]
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#213
  def allowed_source_address?(address); end

  # Returns the value of attribute ca_key.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def ca_key; end

  # Returns the value of attribute critical_options.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def critical_options; end

  # Returns the value of attribute extensions.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def extensions; end

  # The force-command critical option, if present.
  #
  # Returns a String or nil.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#175
  def force_command; end

  # Returns the value of attribute key_id.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def key_id; end

  # Returns the value of attribute nonce.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def nonce; end

  # OpenSSH certificate in authorized_keys format (see sshd(8) manual page).
  #
  # comment - Optional String comment to append.
  #
  # Returns a String key.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#128
  def openssh(comment: T.unsafe(nil)); end

  # Returns the value of attribute public_key.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def public_key; end

  # Returns the value of attribute reserved.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def reserved; end

  # RFC4253 binary encoding of the certificate.
  #
  # Returns a binary String.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#135
  def rfc4253; end

  # Returns the value of attribute serial.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def serial; end

  # Sign this certificate with a private key.
  #
  # private_key - An SSHData::PrivateKey::Base subclass instance.
  # algo:       - Optionally specify the signature algorithm to use.
  #
  # Returns nothing.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#160
  def sign(private_key, algo: T.unsafe(nil)); end

  # Returns the value of attribute signature.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def signature; end

  # The source-address critical option, if present.
  #
  # Returns an Array of IPAddr instances or nil.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#187
  def source_address; end

  # Returns the value of attribute type.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def type; end

  # Returns the value of attribute valid_after.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def valid_after; end

  # Returns the value of attribute valid_before.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def valid_before; end

  # Returns the value of attribute valid_principals.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#32
  def valid_principals; end

  # Verify the certificate's signature.
  #
  # Returns boolean.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#168
  def verify; end

  private

  # Helper for getting the RFC4253 encoded public key with the first field
  # (the algorithm) stripped off.
  #
  # Returns a String.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#235
  def public_key_without_algo; end

  # The portion of the certificate over which the signature is calculated.
  #
  # Returns a binary String.
  #
  # source://ssh_data//lib/ssh_data/certificate.rb#226
  def signed_data; end

  class << self
    # source://ssh_data//lib/ssh_data/certificate.rb#45
    def parse(cert, unsafe_no_verify: T.unsafe(nil)); end

    # Parse an OpenSSH certificate in authorized_keys format (see sshd(8) manual
    # page).
    #
    # cert              - An OpenSSH formatted certificate, including key algo,
    #                     base64 encoded key and optional comment.
    # unsafe_no_verify: - Bool of whether to skip verifying certificate signature
    #                     (Default false)
    #
    # Returns a Certificate instance.
    #
    # source://ssh_data//lib/ssh_data/certificate.rb#45
    def parse_openssh(cert, unsafe_no_verify: T.unsafe(nil)); end

    # Parse an RFC 4253 binary SSH certificate.
    #
    # cert              - A RFC 4253 binary certificate String.
    # unsafe_no_verify: - Bool of whether to skip verifying certificate
    #                     signature (Default false)
    #
    # Returns a Certificate instance.
    #
    # source://ssh_data//lib/ssh_data/certificate.rb#66
    def parse_rfc4253(raw, unsafe_no_verify: T.unsafe(nil)); end
  end
end

# source://ssh_data//lib/ssh_data/certificate.rb#24
SSHData::Certificate::ALGOS = T.let(T.unsafe(nil), Array)

# source://ssh_data//lib/ssh_data/certificate.rb#16
SSHData::Certificate::ALGO_DSA = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/certificate.rb#17
SSHData::Certificate::ALGO_ECDSA256 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/certificate.rb#18
SSHData::Certificate::ALGO_ECDSA384 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/certificate.rb#19
SSHData::Certificate::ALGO_ECDSA521 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/certificate.rb#20
SSHData::Certificate::ALGO_ED25519 = T.let(T.unsafe(nil), String)

# Certificate algorithm identifiers
#
# source://ssh_data//lib/ssh_data/certificate.rb#15
SSHData::Certificate::ALGO_RSA = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/certificate.rb#21
SSHData::Certificate::ALGO_SKECDSA256 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/certificate.rb#22
SSHData::Certificate::ALGO_SKED25519 = T.let(T.unsafe(nil), String)

# Special values for valid_before and valid_after.
#
# source://ssh_data//lib/ssh_data/certificate.rb#7
SSHData::Certificate::BEGINNING_OF_TIME = T.let(T.unsafe(nil), Time)

# source://ssh_data//lib/ssh_data/certificate.rb#29
SSHData::Certificate::CRITICAL_OPTION_FORCE_COMMAND = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/certificate.rb#30
SSHData::Certificate::CRITICAL_OPTION_SOURCE_ADDRESS = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/certificate.rb#8
SSHData::Certificate::END_OF_TIME = T.let(T.unsafe(nil), Time)

# source://ssh_data//lib/ssh_data/certificate.rb#12
SSHData::Certificate::TYPE_HOST = T.let(T.unsafe(nil), Integer)

# Integer certificate types
#
# source://ssh_data//lib/ssh_data/certificate.rb#11
SSHData::Certificate::TYPE_USER = T.let(T.unsafe(nil), Integer)

# source://ssh_data//lib/ssh_data/error.rb#3
class SSHData::DecodeError < ::SSHData::Error; end

# source://ssh_data//lib/ssh_data/error.rb#6
class SSHData::DecryptError < ::SSHData::Error; end

# source://ssh_data//lib/ssh_data/encoding.rb#2
module SSHData::Encoding
  extend ::SSHData::Encoding

  # Decode the fields in a certificate.
  #
  # raw    - Binary String certificate as described by RFC4253 section 6.6.
  # offset - Integer number of bytes into `raw` at which we should start
  #          reading.
  #
  # Returns an Array containing a Hash describing the certificate and the
  # Integer number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#352
  def decode_certificate(raw, offset = T.unsafe(nil)); end

  # Decode all of the given fields from raw.
  #
  # raw    - A binary String.
  # fields - An Array of Arrays, each containing a symbol describing the field
  #          and a Symbol describing the type of the field (:mpint, :string,
  #          :uint64, or :uint32).
  # offset - The offset into raw at which to read (default 0).
  #
  # Returns an Array containing a Hash mapping the provided field keys to the
  # decoded values and the Integer number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#394
  def decode_fields(raw, fields, offset = T.unsafe(nil)); end

  # Read a series of strings out of the provided raw data.
  #
  # raw    - A binary String.
  # offset - The offset into raw at which to read (default 0).
  #
  # Returns an Array including the Array of decoded Strings and the Integer
  # number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#499
  def decode_list(raw, offset = T.unsafe(nil)); end

  # raw    - A binary String.
  # offset - The offset into raw at which to read (default 0).
  #
  # Returns an Array including the decoded mpint as an OpenSSL::BN and the
  # Integer number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#534
  def decode_mpint(raw, offset = T.unsafe(nil)); end

  # Read the specified number of strings out of the provided raw data.
  #
  # raw    - A binary String.
  # offset - The offset into raw at which to read (default 0).
  # n      - The Integer number of Strings to read.
  #
  # Returns an Array including the Array of decoded Strings and the Integer
  # number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#596
  def decode_n_strings(raw, offset = T.unsafe(nil), n); end

  # Decode an OpenSSH private key.
  #
  # raw - The binary String private key.
  #
  # Returns an Array containing a Hash describing the private key and the
  # Integer number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#188
  def decode_openssh_private_key(raw); end

  # source://ssh_data//lib/ssh_data/encoding.rb#329
  def decode_openssh_signature(raw, offset = T.unsafe(nil)); end

  # Read a series of key/value pairs out of the provided raw data.
  #
  # raw    - A binary String.
  # offset - The offset into raw at which to read (default 0).
  #
  # Returns an Array including the Hash of decoded keys/values and the Integer
  # number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#615
  def decode_options(raw, offset = T.unsafe(nil)); end

  # Get the raw data from a PEM encoded blob.
  #
  # pem  - The PEM encoded String to decode.
  # type - The String PEM type we're expecting.
  #
  # Returns the decoded String.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#164
  def decode_pem(pem, type); end

  # Decode the fields in a public key.
  #
  # raw    - Binary String public key as described by RFC4253 section 6.6.
  # algo   - String public key algorithm identifier (optional).
  # offset - Integer number of bytes into `raw` at which we should start
  #          reading.
  #
  # Returns an Array containing a Hash describing the public key and the
  # Integer number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#288
  def decode_public_key(raw, offset = T.unsafe(nil), algo = T.unsafe(nil)); end

  # Decode the signature.
  #
  # raw    - The binary String signature as described by RFC4253 section 6.6.
  # offset - Integer number of bytes into `raw` at which we should start
  #          reading.
  #
  # Returns an Array containing the decoded algorithm String, the decoded binary
  # signature String, and the Integer number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#257
  def decode_signature(raw, offset = T.unsafe(nil)); end

  # Read a string out of the provided raw data.
  #
  # raw    - A binary String.
  # offset - The offset into raw at which to read (default 0).
  #
  # Returns an Array including the decoded String and the Integer number of
  # bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#465
  def decode_string(raw, offset = T.unsafe(nil)); end

  # Decode the fields in a public key encoded as an SSH string.
  #
  # raw    - Binary public key as described by RFC4253 section 6.6 wrapped in
  #          an SSH string..
  # algo   - String public key algorithm identifier (optional).
  # offset - Integer number of bytes into `raw` at which we should start
  #          reading.
  #
  # Returns an Array containing a Hash describing the public key and the
  # Integer number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#318
  def decode_string_public_key(raw, offset = T.unsafe(nil), algo = T.unsafe(nil)); end

  # Read a time from the provided raw data.
  #
  # raw    - A binary String.
  # offset - The offset into raw at which to read (default 0).
  #
  # Returns an Array including the decoded Time and the Integer number of
  # bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#574
  def decode_time(raw, offset = T.unsafe(nil)); end

  # Read a uint32 from the provided raw data.
  #
  # raw    - A binary String.
  # offset - The offset into raw at which to read (default 0).
  #
  # Returns an Array including the decoded uint32 as an Integer and the
  # Integer number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#692
  def decode_uint32(raw, offset = T.unsafe(nil)); end

  # Read a uint64 from the provided raw data.
  #
  # raw    - A binary String.
  # offset - The offset into raw at which to read (default 0).
  #
  # Returns an Array including the decoded uint64 as an Integer and the
  # Integer number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#666
  def decode_uint64(raw, offset = T.unsafe(nil)); end

  # Read a uint8 from the provided raw data.
  #
  # raw    - A binary String.
  # offset - The offset into raw at which to read (default 0).
  #
  # Returns an Array including the decoded uint8 as an Integer and the
  # Integer number of bytes read.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#718
  def decode_uint8(raw, offset = T.unsafe(nil)); end

  # Encode the series of fields into a binary string.
  #
  # fields - A series of Arrays, each containing a Symbol type and a value to
  #          encode.
  #
  # Returns a binary String.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#433
  def encode_fields(*fields); end

  # Encode a list of strings.
  #
  # value - The Array of Strings to encode.
  #
  # Returns an encoded representation of the list.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#523
  def encode_list(value); end

  # Encode a BN as an mpint.
  #
  # value - The OpenSSL::BN value to encode.
  #
  # Returns an encoded representation of the BN.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#563
  def encode_mpint(value); end

  # Encode series of key/value pairs.
  #
  # value - The Hash value to encode.
  #
  # Returns an encoded representation of the Hash.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#650
  def encode_options(value); end

  # Encoding a signature.
  #
  # algo       - The String signature algorithm.
  # signature  - The String signature blob.
  #
  # Returns an encoded String.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#275
  def encode_signature(algo, signature); end

  # Encoding a string.
  #
  # value - The String value to encode.
  #
  # Returns an encoded representation of the String.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#488
  def encode_string(value); end

  # Encode a time.
  #
  # value - The Time value to encode.
  #
  # Returns an encoded representation of the Time.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#584
  def encode_time(value); end

  # Encoding an integer as a uint32.
  #
  # value - The Integer value to encode.
  #
  # Returns an encoded representation of the value.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#707
  def encode_uint32(value); end

  # Encoding an integer as a uint64.
  #
  # value - The Integer value to encode.
  #
  # Returns an encoded representation of the value.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#681
  def encode_uint64(value); end

  # Encoding an integer as a uint8.
  #
  # value - The Integer value to encode.
  #
  # Returns an encoded representation of the value.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#733
  def encode_uint8(value); end

  # Get the type from a PEM encoded blob.
  #
  # pem - A PEM encoded String.
  #
  # Returns a String PEM type.
  #
  # source://ssh_data//lib/ssh_data/encoding.rb#143
  def pem_type(pem); end
end

# source://ssh_data//lib/ssh_data/encoding.rb#107
SSHData::Encoding::CERT_ALGO_BY_PUBLIC_KEY_ALGO = T.let(T.unsafe(nil), Hash)

# Fields in a DSA public key
#
# source://ssh_data//lib/ssh_data/encoding.rb#65
SSHData::Encoding::DSA_KEY_FIELDS = T.let(T.unsafe(nil), Array)

# Fields in a DSA private key
#
# source://ssh_data//lib/ssh_data/encoding.rb#37
SSHData::Encoding::DSA_PRIVATE_KEY_FIELDS = T.let(T.unsafe(nil), Array)

# Fields in an ECDSA public key
#
# source://ssh_data//lib/ssh_data/encoding.rb#73
SSHData::Encoding::ECDSA_KEY_FIELDS = T.let(T.unsafe(nil), Array)

# Fields in a ECDSA private key
#
# source://ssh_data//lib/ssh_data/encoding.rb#46
SSHData::Encoding::ECDSA_PRIVATE_KEY_FIELDS = T.let(T.unsafe(nil), Array)

# Fields in a ED25519 public key
#
# source://ssh_data//lib/ssh_data/encoding.rb#86
SSHData::Encoding::ED25519_KEY_FIELDS = T.let(T.unsafe(nil), Array)

# Fields in a ED25519 private key
#
# source://ssh_data//lib/ssh_data/encoding.rb#53
SSHData::Encoding::ED25519_PRIVATE_KEY_FIELDS = T.let(T.unsafe(nil), Array)

# source://ssh_data//lib/ssh_data/encoding.rb#129
SSHData::Encoding::KEY_FIELDS_BY_PRIVATE_KEY_ALGO = T.let(T.unsafe(nil), Hash)

# source://ssh_data//lib/ssh_data/encoding.rb#118
SSHData::Encoding::KEY_FIELDS_BY_PUBLIC_KEY_ALGO = T.let(T.unsafe(nil), Hash)

# source://ssh_data//lib/ssh_data/encoding.rb#19
SSHData::Encoding::OPENSSH_PRIVATE_KEY_FIELDS = T.let(T.unsafe(nil), Array)

# Fields in an OpenSSL private key
# https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.key
#
# source://ssh_data//lib/ssh_data/encoding.rb#5
SSHData::Encoding::OPENSSH_PRIVATE_KEY_MAGIC = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/encoding.rb#10
SSHData::Encoding::OPENSSH_SIGNATURE_FIELDS = T.let(T.unsafe(nil), Array)

# source://ssh_data//lib/ssh_data/encoding.rb#7
SSHData::Encoding::OPENSSH_SIGNATURE_MAGIC = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/encoding.rb#8
SSHData::Encoding::OPENSSH_SIGNATURE_VERSION = T.let(T.unsafe(nil), Integer)

# source://ssh_data//lib/ssh_data/encoding.rb#96
SSHData::Encoding::PUBLIC_KEY_ALGO_BY_CERT_ALGO = T.let(T.unsafe(nil), Hash)

# Fields in an RSA public key
#
# source://ssh_data//lib/ssh_data/encoding.rb#59
SSHData::Encoding::RSA_KEY_FIELDS = T.let(T.unsafe(nil), Array)

# Fields in an RSA private key
#
# source://ssh_data//lib/ssh_data/encoding.rb#27
SSHData::Encoding::RSA_PRIVATE_KEY_FIELDS = T.let(T.unsafe(nil), Array)

# Fields in an SK-ECDSA public key
#
# source://ssh_data//lib/ssh_data/encoding.rb#79
SSHData::Encoding::SKECDSA_KEY_FIELDS = T.let(T.unsafe(nil), Array)

# Fields in a SK-ED25519 public key
#
# source://ssh_data//lib/ssh_data/encoding.rb#91
SSHData::Encoding::SKED25519_KEY_FIELDS = T.let(T.unsafe(nil), Array)

# source://ssh_data//lib/ssh_data/error.rb#2
class SSHData::Error < ::StandardError; end

# source://ssh_data//lib/ssh_data/private_key.rb#2
module SSHData::PrivateKey
  class << self
    # source://ssh_data//lib/ssh_data/private_key.rb#50
    def from_data(data); end

    # Parse an SSH private key.
    #
    # key - A PEM or OpenSSH encoded private key.
    #
    # Returns an Array of PrivateKey::Base subclass instances.
    #
    # source://ssh_data//lib/ssh_data/private_key.rb#14
    def parse(key); end

    # Parse an OpenSSH formatted private key.
    #
    # key - An OpenSSH encoded private key.
    #
    # Returns an Array of PrivateKey::Base subclass instances.
    #
    # source://ssh_data//lib/ssh_data/private_key.rb#39
    def parse_openssh(key); end
  end
end

# source://ssh_data//lib/ssh_data/private_key/base.rb#3
class SSHData::PrivateKey::Base
  # @return [Base] a new instance of Base
  #
  # source://ssh_data//lib/ssh_data/private_key/base.rb#6
  def initialize(**kwargs); end

  # Returns the value of attribute algo.
  #
  # source://ssh_data//lib/ssh_data/private_key/base.rb#4
  def algo; end

  # Returns the value of attribute comment.
  #
  # source://ssh_data//lib/ssh_data/private_key/base.rb#4
  def comment; end

  # Issue a certificate using this private key.
  #
  # signature_algo: - Optionally specify the signature algorithm to use.
  # kwargs          - See SSHData::Certificate.new.
  #
  # Returns a SSHData::Certificate instance.
  #
  # source://ssh_data//lib/ssh_data/private_key/base.rb#34
  def issue_certificate(signature_algo: T.unsafe(nil), **kwargs); end

  # Returns the value of attribute public_key.
  #
  # source://ssh_data//lib/ssh_data/private_key/base.rb#4
  def public_key; end

  # Make an SSH signature.
  #
  # signed_data - The String message over which to calculated the signature.
  # algo:       - Optionally specify the signature algorithm to use.
  #
  # Returns a binary String signature.
  #
  # source://ssh_data//lib/ssh_data/private_key/base.rb#24
  def sign(signed_data, algo: T.unsafe(nil)); end

  class << self
    # Generate a new private key.
    #
    # Returns a PublicKey::Base subclass instance.
    #
    # source://ssh_data//lib/ssh_data/private_key/base.rb#14
    def generate(**kwargs); end
  end
end

# source://ssh_data//lib/ssh_data/private_key/dsa.rb#3
class SSHData::PrivateKey::DSA < ::SSHData::PrivateKey::Base
  # @return [DSA] a new instance of DSA
  #
  # source://ssh_data//lib/ssh_data/private_key/dsa.rb#42
  def initialize(algo:, p:, q:, g:, x:, y:, comment:); end

  # Returns the value of attribute g.
  #
  # source://ssh_data//lib/ssh_data/private_key/dsa.rb#4
  def g; end

  # Returns the value of attribute openssl.
  #
  # source://ssh_data//lib/ssh_data/private_key/dsa.rb#4
  def openssl; end

  # Returns the value of attribute p.
  #
  # source://ssh_data//lib/ssh_data/private_key/dsa.rb#4
  def p; end

  # Returns the value of attribute q.
  #
  # source://ssh_data//lib/ssh_data/private_key/dsa.rb#4
  def q; end

  # Make an SSH signature.
  #
  # signed_data - The String message over which to calculated the signature.
  #
  # Returns a binary String signature.
  #
  # @raise [AlgorithmError]
  #
  # source://ssh_data//lib/ssh_data/private_key/dsa.rb#65
  def sign(signed_data, algo: T.unsafe(nil)); end

  # Returns the value of attribute x.
  #
  # source://ssh_data//lib/ssh_data/private_key/dsa.rb#4
  def x; end

  # Returns the value of attribute y.
  #
  # source://ssh_data//lib/ssh_data/private_key/dsa.rb#4
  def y; end

  private

  # source://ssh_data//lib/ssh_data/private_key/dsa.rb#75
  def asn1; end

  class << self
    # Import an openssl private key.
    #
    # key - An OpenSSL::PKey::DSA instance.
    #
    # Returns a DSA instance.
    #
    # source://ssh_data//lib/ssh_data/private_key/dsa.rb#30
    def from_openssl(key); end

    # Generate a new private key.
    #
    # Returns a PublicKey::Base subclass instance.
    #
    # source://ssh_data//lib/ssh_data/private_key/dsa.rb#9
    def generate; end
  end
end

# source://ssh_data//lib/ssh_data/private_key.rb#5
SSHData::PrivateKey::DSA_PEM_TYPE = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/private_key/ecdsa.rb#3
class SSHData::PrivateKey::ECDSA < ::SSHData::PrivateKey::Base
  # @return [ECDSA] a new instance of ECDSA
  #
  # source://ssh_data//lib/ssh_data/private_key/ecdsa.rb#38
  def initialize(algo:, curve:, public_key:, private_key:, comment:); end

  # Returns the value of attribute curve.
  #
  # source://ssh_data//lib/ssh_data/private_key/ecdsa.rb#4
  def curve; end

  # Returns the value of attribute openssl.
  #
  # source://ssh_data//lib/ssh_data/private_key/ecdsa.rb#4
  def openssl; end

  # Returns the value of attribute private_key_bytes.
  #
  # source://ssh_data//lib/ssh_data/private_key/ecdsa.rb#4
  def private_key_bytes; end

  # Returns the value of attribute public_key_bytes.
  #
  # source://ssh_data//lib/ssh_data/private_key/ecdsa.rb#4
  def public_key_bytes; end

  # Make an SSH signature.
  #
  # signed_data - The String message over which to calculated the signature.
  #
  # Returns a binary String signature.
  #
  # @raise [AlgorithmError]
  #
  # source://ssh_data//lib/ssh_data/private_key/ecdsa.rb#71
  def sign(signed_data, algo: T.unsafe(nil)); end

  private

  # source://ssh_data//lib/ssh_data/private_key/ecdsa.rb#81
  def asn1; end

  class << self
    # Import an openssl private key.
    #
    # key - An OpenSSL::PKey::EC instance.
    #
    # Returns a DSA instance.
    #
    # source://ssh_data//lib/ssh_data/private_key/ecdsa.rb#25
    def from_openssl(key); end

    # Generate a new private key.
    #
    # curve - The String curve to use. One of SSHData::PublicKey::NISTP256,
    #         SSHData::PublicKey::NISTP384, or SSHData::PublicKey::NISTP521.
    #
    # Returns a PublicKey::Base subclass instance.
    #
    # @raise [AlgorithmError]
    #
    # source://ssh_data//lib/ssh_data/private_key/ecdsa.rb#12
    def generate(curve); end
  end
end

# source://ssh_data//lib/ssh_data/private_key.rb#6
SSHData::PrivateKey::ECDSA_PEM_TYPE = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/private_key/ed25519.rb#3
class SSHData::PrivateKey::ED25519 < ::SSHData::PrivateKey::Base
  # @return [ED25519] a new instance of ED25519
  #
  # source://ssh_data//lib/ssh_data/private_key/ed25519.rb#28
  def initialize(algo:, pk:, sk:, comment:); end

  # Returns the value of attribute ed25519_key.
  #
  # source://ssh_data//lib/ssh_data/private_key/ed25519.rb#4
  def ed25519_key; end

  # Returns the value of attribute pk.
  #
  # source://ssh_data//lib/ssh_data/private_key/ed25519.rb#4
  def pk; end

  # Make an SSH signature.
  #
  # signed_data - The String message over which to calculated the signature.
  #
  # Returns a binary String signature.
  #
  # @raise [AlgorithmError]
  #
  # source://ssh_data//lib/ssh_data/private_key/ed25519.rb#59
  def sign(signed_data, algo: T.unsafe(nil)); end

  # Returns the value of attribute sk.
  #
  # source://ssh_data//lib/ssh_data/private_key/ed25519.rb#4
  def sk; end

  class << self
    # Create from a ::Ed25519::SigningKey instance.
    #
    # key - A ::Ed25519::SigningKey instance.
    #
    # Returns a ED25519 instance.
    #
    # source://ssh_data//lib/ssh_data/private_key/ed25519.rb#19
    def from_ed25519(key); end

    # Generate a new private key.
    #
    # Returns a PublicKey::Base subclass instance.
    #
    # source://ssh_data//lib/ssh_data/private_key/ed25519.rb#9
    def generate; end
  end
end

# source://ssh_data//lib/ssh_data/private_key.rb#7
SSHData::PrivateKey::ENCRYPTED_PEM_TYPE = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/private_key.rb#3
SSHData::PrivateKey::OPENSSH_PEM_TYPE = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/private_key/rsa.rb#3
class SSHData::PrivateKey::RSA < ::SSHData::PrivateKey::Base
  # @return [RSA] a new instance of RSA
  #
  # source://ssh_data//lib/ssh_data/private_key/rsa.rb#40
  def initialize(algo:, n:, e:, d:, iqmp:, p:, q:, comment:); end

  # Returns the value of attribute d.
  #
  # source://ssh_data//lib/ssh_data/private_key/rsa.rb#4
  def d; end

  # Returns the value of attribute e.
  #
  # source://ssh_data//lib/ssh_data/private_key/rsa.rb#4
  def e; end

  # Returns the value of attribute iqmp.
  #
  # source://ssh_data//lib/ssh_data/private_key/rsa.rb#4
  def iqmp; end

  # Returns the value of attribute n.
  #
  # source://ssh_data//lib/ssh_data/private_key/rsa.rb#4
  def n; end

  # Returns the value of attribute openssl.
  #
  # source://ssh_data//lib/ssh_data/private_key/rsa.rb#4
  def openssl; end

  # Returns the value of attribute p.
  #
  # source://ssh_data//lib/ssh_data/private_key/rsa.rb#4
  def p; end

  # Returns the value of attribute q.
  #
  # source://ssh_data//lib/ssh_data/private_key/rsa.rb#4
  def q; end

  # Make an SSH signature.
  #
  # signed_data - The String message over which to calculated the signature.
  #
  # Returns a binary String signature.
  #
  # @raise [AlgorithmError]
  #
  # source://ssh_data//lib/ssh_data/private_key/rsa.rb#64
  def sign(signed_data, algo: T.unsafe(nil)); end

  private

  # source://ssh_data//lib/ssh_data/private_key/rsa.rb#90
  def asn1; end

  # CRT coefficient for faster RSA operations. Used by OpenSSL, but not
  # OpenSSH.
  #
  # Returns an OpenSSL::BN instance.
  #
  # source://ssh_data//lib/ssh_data/private_key/rsa.rb#78
  def dmp1; end

  # CRT coefficient for faster RSA operations. Used by OpenSSL, but not
  # OpenSSH.
  #
  # Returns an OpenSSL::BN instance.
  #
  # source://ssh_data//lib/ssh_data/private_key/rsa.rb#86
  def dmq1; end

  class << self
    # Import an openssl private key.
    #
    # key - An OpenSSL::PKey::RSA instance.
    #
    # Returns a RSA instance.
    #
    # source://ssh_data//lib/ssh_data/private_key/rsa.rb#27
    def from_openssl(key); end

    # Generate a new private key.
    #
    # size                    - The Integer key size to generate.
    # unsafe_allow_small_key: - Bool of whether to allow keys of less than
    #                           2048 bits.
    #
    # Returns a PublicKey::Base subclass instance.
    #
    # source://ssh_data//lib/ssh_data/private_key/rsa.rb#14
    def generate(size, unsafe_allow_small_key: T.unsafe(nil)); end
  end
end

# source://ssh_data//lib/ssh_data/private_key.rb#4
SSHData::PrivateKey::RSA_PEM_TYPE = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/public_key.rb#2
module SSHData::PublicKey
  class << self
    # source://ssh_data//lib/ssh_data/public_key.rb#59
    def from_data(data); end

    # source://ssh_data//lib/ssh_data/public_key.rb#30
    def parse(key); end

    # Parse an OpenSSH public key in authorized_keys format (see sshd(8) manual
    # page).
    #
    # key - An OpenSSH formatted public key, including algo, base64 encoded key
    #       and optional comment.
    #
    # Returns a PublicKey::Base subclass instance.
    #
    # source://ssh_data//lib/ssh_data/public_key.rb#30
    def parse_openssh(key); end

    # Parse an RFC 4253 binary SSH public key.
    #
    # key - A RFC 4253 binary public key String.
    #
    # Returns a PublicKey::Base subclass instance.
    #
    # source://ssh_data//lib/ssh_data/public_key.rb#49
    def parse_rfc4253(raw); end
  end
end

# source://ssh_data//lib/ssh_data/public_key.rb#18
SSHData::PublicKey::ALGOS = T.let(T.unsafe(nil), Array)

# source://ssh_data//lib/ssh_data/public_key.rb#5
SSHData::PublicKey::ALGO_DSA = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/public_key.rb#6
SSHData::PublicKey::ALGO_ECDSA256 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/public_key.rb#7
SSHData::PublicKey::ALGO_ECDSA384 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/public_key.rb#8
SSHData::PublicKey::ALGO_ECDSA521 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/public_key.rb#9
SSHData::PublicKey::ALGO_ED25519 = T.let(T.unsafe(nil), String)

# Public key algorithm identifiers
#
# source://ssh_data//lib/ssh_data/public_key.rb#4
SSHData::PublicKey::ALGO_RSA = T.let(T.unsafe(nil), String)

# RSA SHA2 *signature* algorithms used with ALGO_RSA keys.
# https://tools.ietf.org/html/draft-rsa-dsa-sha2-256-02
#
# source://ssh_data//lib/ssh_data/public_key.rb#15
SSHData::PublicKey::ALGO_RSA_SHA2_256 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/public_key.rb#16
SSHData::PublicKey::ALGO_RSA_SHA2_512 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/public_key.rb#11
SSHData::PublicKey::ALGO_SKECDSA256 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/public_key.rb#10
SSHData::PublicKey::ALGO_SKED25519 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/public_key/base.rb#3
class SSHData::PublicKey::Base
  # @return [Base] a new instance of Base
  #
  # source://ssh_data//lib/ssh_data/public_key/base.rb#6
  def initialize(**kwargs); end

  # Is this public key equal to another public key?
  #
  # other - Another SSHData::PublicKey::Base instance to compare with.
  #
  # Returns boolean.
  #
  # source://ssh_data//lib/ssh_data/public_key/base.rb#66
  def ==(other); end

  # Returns the value of attribute algo.
  #
  # source://ssh_data//lib/ssh_data/public_key/base.rb#4
  def algo; end

  # Calculate the fingerprint of this public key.
  #
  # md5: - Bool of whether to generate an MD5 fingerprint instead of the
  #        default SHA256.
  #
  # Returns a String fingerprint.
  #
  # source://ssh_data//lib/ssh_data/public_key/base.rb#16
  def fingerprint(md5: T.unsafe(nil)); end

  # OpenSSH public key in authorized_keys format (see sshd(8) manual page).
  #
  # comment - Optional String comment to append.
  #
  # Returns a String key.
  #
  # source://ssh_data//lib/ssh_data/public_key/base.rb#57
  def openssh(comment: T.unsafe(nil)); end

  # RFC4253 binary encoding of the public key.
  #
  # Returns a binary String.
  #
  # source://ssh_data//lib/ssh_data/public_key/base.rb#48
  def rfc4253; end

  # Make an SSH signature.
  #
  # signed_data - The String message over which to calculated the signature.
  #
  # Returns a binary String signature.
  #
  # source://ssh_data//lib/ssh_data/public_key/base.rb#31
  def sign(signed_data); end

  # Verify an SSH signature.
  #
  # signed_data - The String message that the signature was calculated over.
  # signature   - The binary String signature with SSH encoding.
  #
  # Returns boolean.
  #
  # source://ssh_data//lib/ssh_data/public_key/base.rb#41
  def verify(signed_data, signature); end
end

# source://ssh_data//lib/ssh_data/public_key/dsa.rb#3
class SSHData::PublicKey::DSA < ::SSHData::PublicKey::Base
  # @return [DSA] a new instance of DSA
  #
  # source://ssh_data//lib/ssh_data/public_key/dsa.rb#52
  def initialize(algo:, p:, q:, g:, y:); end

  # Is this public key equal to another public key?
  #
  # other - Another SSHData::PublicKey::Base instance to compare with.
  #
  # Returns boolean.
  #
  # source://ssh_data//lib/ssh_data/public_key/dsa.rb#101
  def ==(other); end

  # Returns the value of attribute g.
  #
  # source://ssh_data//lib/ssh_data/public_key/dsa.rb#4
  def g; end

  # Returns the value of attribute openssl.
  #
  # source://ssh_data//lib/ssh_data/public_key/dsa.rb#4
  def openssl; end

  # Returns the value of attribute p.
  #
  # source://ssh_data//lib/ssh_data/public_key/dsa.rb#4
  def p; end

  # Returns the value of attribute q.
  #
  # source://ssh_data//lib/ssh_data/public_key/dsa.rb#4
  def q; end

  # RFC4253 binary encoding of the public key.
  #
  # Returns a binary String.
  #
  # source://ssh_data//lib/ssh_data/public_key/dsa.rb#86
  def rfc4253; end

  # Verify an SSH signature.
  #
  # signed_data - The String message that the signature was calculated over.
  # signature   - The binary String signature with SSH encoding.
  #
  # Returns boolean.
  #
  # source://ssh_data//lib/ssh_data/public_key/dsa.rb#73
  def verify(signed_data, signature); end

  # Returns the value of attribute y.
  #
  # source://ssh_data//lib/ssh_data/public_key/dsa.rb#4
  def y; end

  private

  # source://ssh_data//lib/ssh_data/public_key/dsa.rb#107
  def asn1; end

  class << self
    # Convert an SSH encoded DSA signature to DER encoding for verification with
    # OpenSSL.
    #
    # sig - A binary String signature from an SSH packet.
    #
    # Returns a binary String signature, as expected by OpenSSL.
    #
    # source://ssh_data//lib/ssh_data/public_key/dsa.rb#12
    def openssl_signature(sig); end

    # Convert an DER encoded DSA signature, as generated by OpenSSL to SSH
    # encoding.
    #
    # sig - A binary String signature, as generated by OpenSSL.
    #
    # Returns a binary String signature, as found in an SSH packet.
    #
    # source://ssh_data//lib/ssh_data/public_key/dsa.rb#32
    def ssh_signature(sig); end
  end
end

# source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#3
class SSHData::PublicKey::ECDSA < ::SSHData::PublicKey::Base
  # @return [ECDSA] a new instance of ECDSA
  #
  # source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#78
  def initialize(algo:, curve:, public_key:); end

  # Is this public key equal to another public key?
  #
  # other - Another SSHData::PublicKey::Base instance to compare with.
  #
  # Returns boolean.
  #
  # source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#127
  def ==(other); end

  # Returns the value of attribute curve.
  #
  # source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#4
  def curve; end

  # The digest algorithm to use with this key's curve.
  #
  # Returns an OpenSSL::Digest.
  #
  # source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#134
  def digest; end

  # Returns the value of attribute openssl.
  #
  # source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#4
  def openssl; end

  # Returns the value of attribute public_key_bytes.
  #
  # source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#4
  def public_key_bytes; end

  # RFC4253 binary encoding of the public key.
  #
  # Returns a binary String.
  #
  # source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#114
  def rfc4253; end

  # Verify an SSH signature.
  #
  # signed_data - The String message that the signature was calculated over.
  # signature   - The binary String signature with SSH encoding.
  #
  # Returns boolean.
  #
  # source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#99
  def verify(signed_data, signature); end

  private

  # source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#140
  def asn1; end

  class << self
    # source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#68
    def check_algorithm!(algo, curve); end

    # Convert an SSH encoded ECDSA signature to DER encoding for verification with
    # OpenSSL.
    #
    # sig - A binary String signature from an SSH packet.
    #
    # Returns a binary String signature, as expected by OpenSSL.
    #
    # source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#34
    def openssl_signature(sig); end

    # Convert an DER encoded ECDSA signature, as generated by OpenSSL to SSH
    # encoding.
    #
    # sig - A binary String signature, as generated by OpenSSL.
    #
    # Returns a binary String signature, as found in an SSH packet.
    #
    # source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#54
    def ssh_signature(sig); end
  end
end

# source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#16
SSHData::PublicKey::ECDSA::CURVE_FOR_OPENSSL_CURVE_NAME = T.let(T.unsafe(nil), Hash)

# source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#22
SSHData::PublicKey::ECDSA::DIGEST_FOR_CURVE = T.let(T.unsafe(nil), Hash)

# source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#6
SSHData::PublicKey::ECDSA::NISTP256 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#7
SSHData::PublicKey::ECDSA::NISTP384 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#8
SSHData::PublicKey::ECDSA::NISTP521 = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/public_key/ecdsa.rb#10
SSHData::PublicKey::ECDSA::OPENSSL_CURVE_NAME_FOR_CURVE = T.let(T.unsafe(nil), Hash)

# source://ssh_data//lib/ssh_data/public_key/ed25519.rb#3
class SSHData::PublicKey::ED25519 < ::SSHData::PublicKey::Base
  # @return [ED25519] a new instance of ED25519
  #
  # source://ssh_data//lib/ssh_data/public_key/ed25519.rb#23
  def initialize(algo:, pk:); end

  # Is this public key equal to another public key?
  #
  # other - Another SSHData::PublicKey::Base instance to compare with.
  #
  # Returns boolean.
  #
  # source://ssh_data//lib/ssh_data/public_key/ed25519.rb#73
  def ==(other); end

  # Returns the value of attribute ed25519_key.
  #
  # source://ssh_data//lib/ssh_data/public_key/ed25519.rb#4
  def ed25519_key; end

  # Returns the value of attribute pk.
  #
  # source://ssh_data//lib/ssh_data/public_key/ed25519.rb#4
  def pk; end

  # RFC4253 binary encoding of the public key.
  #
  # Returns a binary String.
  #
  # source://ssh_data//lib/ssh_data/public_key/ed25519.rb#61
  def rfc4253; end

  # Verify an SSH signature.
  #
  # signed_data - The String message that the signature was calculated over.
  # signature   - The binary String signature with SSH encoding.
  #
  # Returns boolean.
  #
  # source://ssh_data//lib/ssh_data/public_key/ed25519.rb#43
  def verify(signed_data, signature); end

  class << self
    # source://ssh_data//lib/ssh_data/public_key/ed25519.rb#19
    def algorithm_identifier; end

    # Assert that the ed25519 gem has been loaded.
    #
    # Returns nothing, raises AlgorithmError.
    #
    # @raise [AlgorithmError]
    #
    # source://ssh_data//lib/ssh_data/public_key/ed25519.rb#15
    def ed25519_gem_required!; end

    # ed25519 isn't a hard requirement for using this Gem. We only do actual
    # validation with the key if the ed25519 Gem has been loaded.
    #
    # @return [Boolean]
    #
    # source://ssh_data//lib/ssh_data/public_key/ed25519.rb#8
    def enabled?; end
  end
end

# source://ssh_data//lib/ssh_data/public_key/rsa.rb#3
class SSHData::PublicKey::RSA < ::SSHData::PublicKey::Base
  # @return [RSA] a new instance of RSA
  #
  # source://ssh_data//lib/ssh_data/public_key/rsa.rb#12
  def initialize(algo:, e:, n:); end

  # Is this public key equal to another public key?
  #
  # other - Another SSHData::PublicKey::Base instance to compare with.
  #
  # Returns boolean.
  #
  # source://ssh_data//lib/ssh_data/public_key/rsa.rb#65
  def ==(other); end

  # Returns the value of attribute e.
  #
  # source://ssh_data//lib/ssh_data/public_key/rsa.rb#4
  def e; end

  # Returns the value of attribute n.
  #
  # source://ssh_data//lib/ssh_data/public_key/rsa.rb#4
  def n; end

  # Returns the value of attribute openssl.
  #
  # source://ssh_data//lib/ssh_data/public_key/rsa.rb#4
  def openssl; end

  # RFC4253 binary encoding of the public key.
  #
  # Returns a binary String.
  #
  # source://ssh_data//lib/ssh_data/public_key/rsa.rb#52
  def rfc4253; end

  # Verify an SSH signature.
  #
  # signed_data - The String message that the signature was calculated over.
  # signature   - The binary String signature with SSH encoding.
  #
  # Returns boolean.
  #
  # source://ssh_data//lib/ssh_data/public_key/rsa.rb#32
  def verify(signed_data, signature); end

  private

  # source://ssh_data//lib/ssh_data/public_key/rsa.rb#71
  def asn1; end
end

# source://ssh_data//lib/ssh_data/public_key/rsa.rb#6
SSHData::PublicKey::RSA::ALGO_DIGESTS = T.let(T.unsafe(nil), Hash)

# source://ssh_data//lib/ssh_data/public_key/skecdsa.rb#3
class SSHData::PublicKey::SKECDSA < ::SSHData::PublicKey::ECDSA
  include ::SSHData::PublicKey::SecurityKey

  # @return [SKECDSA] a new instance of SKECDSA
  #
  # source://ssh_data//lib/ssh_data/public_key/skecdsa.rb#21
  def initialize(algo:, curve:, public_key:, application:); end

  # source://ssh_data//lib/ssh_data/public_key/skecdsa.rb#59
  def ==(other); end

  # Returns the value of attribute application.
  #
  # source://ssh_data//lib/ssh_data/public_key/skecdsa.rb#5
  def application; end

  # RFC4253 binary encoding of the public key.
  #
  # Returns a binary String.
  #
  # source://ssh_data//lib/ssh_data/public_key/skecdsa.rb#29
  def rfc4253; end

  # @raise [UnsupportedError]
  #
  # source://ssh_data//lib/ssh_data/public_key/skecdsa.rb#38
  def verify(signed_data, signature, **opts); end

  class << self
    # source://ssh_data//lib/ssh_data/public_key/skecdsa.rb#11
    def check_algorithm!(algo, curve); end
  end
end

# source://ssh_data//lib/ssh_data/public_key/skecdsa.rb#7
SSHData::PublicKey::SKECDSA::OPENSSL_CURVE_NAME_FOR_CURVE = T.let(T.unsafe(nil), Hash)

# source://ssh_data//lib/ssh_data/public_key/sked25519.rb#3
class SSHData::PublicKey::SKED25519 < ::SSHData::PublicKey::ED25519
  include ::SSHData::PublicKey::SecurityKey

  # @return [SKED25519] a new instance of SKED25519
  #
  # source://ssh_data//lib/ssh_data/public_key/sked25519.rb#7
  def initialize(algo:, pk:, application:); end

  # source://ssh_data//lib/ssh_data/public_key/sked25519.rb#53
  def ==(other); end

  # Returns the value of attribute application.
  #
  # source://ssh_data//lib/ssh_data/public_key/sked25519.rb#5
  def application; end

  # RFC4253 binary encoding of the public key.
  #
  # Returns a binary String.
  #
  # source://ssh_data//lib/ssh_data/public_key/sked25519.rb#19
  def rfc4253; end

  # @raise [UnsupportedError]
  #
  # source://ssh_data//lib/ssh_data/public_key/sked25519.rb#27
  def verify(signed_data, signature, **opts); end

  class << self
    # source://ssh_data//lib/ssh_data/public_key/sked25519.rb#12
    def algorithm_identifier; end
  end
end

# source://ssh_data//lib/ssh_data/public_key/security_key.rb#3
module SSHData::PublicKey::SecurityKey
  # source://ssh_data//lib/ssh_data/public_key/security_key.rb#14
  def build_signing_blob(application, signed_data, signature); end
end

# Defaults to match OpenSSH, user presence is required by verification is not.
#
# source://ssh_data//lib/ssh_data/public_key/security_key.rb#6
SSHData::PublicKey::SecurityKey::DEFAULT_SK_VERIFY_OPTS = T.let(T.unsafe(nil), Hash)

# source://ssh_data//lib/ssh_data/public_key/security_key.rb#11
SSHData::PublicKey::SecurityKey::SK_FLAG_USER_PRESENCE = T.let(T.unsafe(nil), Integer)

# source://ssh_data//lib/ssh_data/public_key/security_key.rb#12
SSHData::PublicKey::SecurityKey::SK_FLAG_USER_VERIFICATION = T.let(T.unsafe(nil), Integer)

# source://ssh_data//lib/ssh_data/signature.rb#4
class SSHData::Signature
  # @raise [UnsupportedError]
  # @return [Signature] a new instance of Signature
  #
  # source://ssh_data//lib/ssh_data/signature.rb#50
  def initialize(sigversion:, publickey:, namespace:, reserved:, hash_algorithm:, signature:); end

  # Returns the value of attribute hash_algorithm.
  #
  # source://ssh_data//lib/ssh_data/signature.rb#23
  def hash_algorithm; end

  # Returns the value of attribute namespace.
  #
  # source://ssh_data//lib/ssh_data/signature.rb#23
  def namespace; end

  # Gets the public key from the signature.
  # If the signature was created from a certificate, this will be an
  # SSHData::Certificate. Otherwise, this will be a PublicKey algorithm.
  #
  # source://ssh_data//lib/ssh_data/signature.rb#110
  def public_key; end

  # Returns the value of attribute reserved.
  #
  # source://ssh_data//lib/ssh_data/signature.rb#23
  def reserved; end

  # Returns the value of attribute signature.
  #
  # source://ssh_data//lib/ssh_data/signature.rb#23
  def signature; end

  # Returns the value of attribute sigversion.
  #
  # source://ssh_data//lib/ssh_data/signature.rb#23
  def sigversion; end

  # source://ssh_data//lib/ssh_data/signature.rb#73
  def verify(signed_data, **opts); end

  private

  # source://ssh_data//lib/ssh_data/signature.rb#114
  def load_public_key; end

  class << self
    # source://ssh_data//lib/ssh_data/signature.rb#40
    def parse_blob(blob); end

    # Parses a PEM armored SSH signature.
    # pem - A PEM encoded SSH signature.
    #
    # Returns a Signature instance.
    #
    # source://ssh_data//lib/ssh_data/signature.rb#29
    def parse_pem(pem); end
  end
end

# source://ssh_data//lib/ssh_data/signature.rb#8
SSHData::Signature::MAX_SUPPORTED_VERSION = T.let(T.unsafe(nil), Integer)

# source://ssh_data//lib/ssh_data/signature.rb#7
SSHData::Signature::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Integer)

# source://ssh_data//lib/ssh_data/signature.rb#5
SSHData::Signature::PEM_TYPE = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/signature.rb#18
SSHData::Signature::PERMITTED_RSA_SIGNATURE_ALGORITHMS = T.let(T.unsafe(nil), Array)

# source://ssh_data//lib/ssh_data/signature.rb#6
SSHData::Signature::SIGNATURE_PREAMBLE = T.let(T.unsafe(nil), String)

# Spec: no SHA1 or SHA384. In practice, OpenSSH is always going to use SHA512.
# Note the actual signing / verify primitive may use a different hash algorithm.
# https://github.com/openssh/openssh-portable/blob/b7ffbb17e37f59249c31f1ff59d6c5d80888f689/PROTOCOL.sshsig#L67
#
# source://ssh_data//lib/ssh_data/signature.rb#13
SSHData::Signature::SUPPORTED_HASH_ALGORITHMS = T.let(T.unsafe(nil), Hash)

# source://ssh_data//lib/ssh_data/error.rb#7
class SSHData::UnsupportedError < ::SSHData::Error; end

# source://ssh_data//lib/ssh_data/version.rb#2
SSHData::VERSION = T.let(T.unsafe(nil), String)

# source://ssh_data//lib/ssh_data/error.rb#4
class SSHData::VerifyError < ::SSHData::Error; end

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: spokes-api/commits/v1/commits_api.proto

require 'google/protobuf'

require 'spokes-api/types/v1/cursor_pb'
require 'spokes-api/types/v1/object_id_pb'
require 'spokes-api/types/v1/path_pb'
require 'spokes-api/types/v1/repository_pb'
require 'spokes-api/types/v1/revision_pb'
require 'spokes-api/types/v1/request_context_pb'
require 'spokes-api/types/selectors/v1/object_id_selector_pb'
require 'spokes-api/types/selectors/v1/revision_selector_pb'
require 'spokes-api/types/selectors/v1/revision_and_path_selector_pb'
require 'spokes-api/types/selectors/v1/push_selector_pb'
require 'spokes-api/types/selectors/v1/fork_push_selector_pb'
require 'spokes-api/types/selectors/v1/historical_push_selector_pb'
require 'spokes-api/types/selectors/v1/universal_selector_pb'
require 'spokes-api/types/selectors/v1/quarantine_commits_selector_pb'
require 'spokes-api/commits/v1/commit_item_pb'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("spokes-api/commits/v1/commits_api.proto", :syntax => :proto3) do
    add_message "github.spokes.commits.v1.CheckCommitReachabilityRequest" do
      optional :repository, :message, 1, "github.spokes.types.v1.Repository"
      optional :cursor, :message, 2, "github.spokes.types.v1.Cursor"
      optional :request_context, :message, 4, "github.spokes.types.v1.RequestContext"
      oneof :selector do
        optional :object_id_selector, :message, 3, "github.spokes.types.selectors.v1.ObjectIDSelector"
      end
    end
    add_message "github.spokes.commits.v1.CheckCommitReachabilityResponse" do
      repeated :commits, :message, 1, "github.spokes.types.v1.ObjectID"
      optional :next_cursor, :message, 2, "github.spokes.types.v1.Cursor"
    end
    add_message "github.spokes.commits.v1.ListCommitsRequest" do
      optional :repository, :message, 1, "github.spokes.types.v1.Repository"
      optional :cursor, :message, 2, "github.spokes.types.v1.Cursor"
      optional :request_context, :message, 7, "github.spokes.types.v1.RequestContext"
      oneof :selector do
        optional :object_id_selector, :message, 3, "github.spokes.types.selectors.v1.ObjectIDSelector"
        optional :push_selector, :message, 4, "github.spokes.types.selectors.v1.PushSelector"
        optional :universal_selector, :message, 5, "github.spokes.types.selectors.v1.UniversalSelector"
        optional :revision_selector, :message, 6, "github.spokes.types.selectors.v1.RevisionSelector"
        optional :fork_push_selector, :message, 8, "github.spokes.types.selectors.v1.ForkPushSelector"
        optional :historical_push_selector, :message, 9, "github.spokes.types.selectors.v1.HistoricalPushSelector"
        optional :revision_and_path_selector, :message, 10, "github.spokes.types.selectors.v1.RevisionAndPathSelector"
        optional :quarantine_commits_selector, :message, 11, "github.spokes.types.selectors.v1.QuarantineCommitsSelector"
      end
    end
    add_message "github.spokes.commits.v1.ListCommitsResponse" do
      repeated :commits, :message, 1, "github.spokes.commits.v1.CommitItem"
      optional :next_cursor, :message, 2, "github.spokes.types.v1.Cursor"
    end
    add_message "github.spokes.commits.v1.ListContributorsRequest" do
      optional :repository, :message, 1, "github.spokes.types.v1.Repository"
      optional :cursor, :message, 5, "github.spokes.types.v1.Cursor"
      optional :request_context, :message, 4, "github.spokes.types.v1.RequestContext"
      oneof :selector do
        optional :push_selector, :message, 2, "github.spokes.types.selectors.v1.PushSelector"
        optional :historical_push_selector, :message, 3, "github.spokes.types.selectors.v1.HistoricalPushSelector"
      end
    end
    add_message "github.spokes.commits.v1.ListContributorsResponse" do
      repeated :contributors, :message, 1, "github.spokes.commits.v1.Contributor"
      optional :next_cursor, :message, 2, "github.spokes.types.v1.Cursor"
    end
    add_message "github.spokes.commits.v1.Contributor" do
      optional :email_bytes, :bytes, 2
    end
    add_message "github.spokes.commits.v1.AheadBehindRequest" do
      optional :repository, :message, 1, "github.spokes.types.v1.Repository"
      optional :request_context, :message, 3, "github.spokes.types.v1.RequestContext"
      oneof :selector do
        optional :base_and_tips_selector, :message, 2, "github.spokes.commits.v1.BaseAndTipsSelector"
      end
    end
    add_message "github.spokes.commits.v1.BaseAndTipsSelector" do
      optional :base, :message, 2, "github.spokes.types.v1.Revision"
      repeated :tips, :message, 3, "github.spokes.types.v1.Revision"
    end
    add_message "github.spokes.commits.v1.AheadBehindResponse" do
      repeated :ahead_behind_pairs, :message, 1, "github.spokes.commits.v1.AheadBehindPair"
    end
    add_message "github.spokes.commits.v1.AheadBehindPair" do
      optional :tip, :message, 1, "github.spokes.types.v1.Revision"
      optional :ahead, :uint32, 2
      optional :behind, :uint32, 3
    end
    add_message "github.spokes.commits.v1.AheadBehindContainsRequest" do
      optional :repository, :message, 1, "github.spokes.types.v1.Repository"
      optional :request_context, :message, 3, "github.spokes.types.v1.RequestContext"
      oneof :selector do
        optional :base_and_tips_selector, :message, 2, "github.spokes.commits.v1.BaseAndTipsSelector"
      end
    end
    add_message "github.spokes.commits.v1.AheadBehindContainsResponse" do
      repeated :tips, :message, 1, "github.spokes.types.v1.Revision"
    end
    add_message "github.spokes.commits.v1.BlameTreeRequest" do
      optional :repository, :message, 1, "github.spokes.types.v1.Repository"
      optional :request_context, :message, 3, "github.spokes.types.v1.RequestContext"
      oneof :selector do
        optional :blame_tree_selector, :message, 2, "github.spokes.commits.v1.BlameTreeSelector"
      end
    end
    add_message "github.spokes.commits.v1.BlameTreeSelector" do
      optional :commit, :message, 1, "github.spokes.types.v1.Revision"
      optional :path, :message, 2, "github.spokes.types.v1.Path"
      optional :recursive, :bool, 3
    end
    add_message "github.spokes.commits.v1.BlameTreeResponse" do
      repeated :pairs, :message, 1, "github.spokes.commits.v1.CommitPathPair"
    end
    add_message "github.spokes.commits.v1.CommitPathPair" do
      optional :oid, :message, 1, "github.spokes.types.v1.ObjectID"
      optional :path, :message, 2, "github.spokes.types.v1.Path"
    end
  end
end

module GitHub
  module Spokes
    module Proto
      module Commits
        module V1
          CheckCommitReachabilityRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.CheckCommitReachabilityRequest").msgclass
          CheckCommitReachabilityResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.CheckCommitReachabilityResponse").msgclass
          ListCommitsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.ListCommitsRequest").msgclass
          ListCommitsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.ListCommitsResponse").msgclass
          ListContributorsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.ListContributorsRequest").msgclass
          ListContributorsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.ListContributorsResponse").msgclass
          Contributor = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.Contributor").msgclass
          AheadBehindRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.AheadBehindRequest").msgclass
          BaseAndTipsSelector = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.BaseAndTipsSelector").msgclass
          AheadBehindResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.AheadBehindResponse").msgclass
          AheadBehindPair = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.AheadBehindPair").msgclass
          AheadBehindContainsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.AheadBehindContainsRequest").msgclass
          AheadBehindContainsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.AheadBehindContainsResponse").msgclass
          BlameTreeRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.BlameTreeRequest").msgclass
          BlameTreeSelector = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.BlameTreeSelector").msgclass
          BlameTreeResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.BlameTreeResponse").msgclass
          CommitPathPair = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.commits.v1.CommitPathPair").msgclass
        end
      end
    end
  end
end

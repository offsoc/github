# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `gemoji` gem.
# Please instead update this file by running `bin/tapioca gem gemoji`.

# source://gemoji//lib/emoji/character.rb#3
module Emoji
  extend ::Emoji

  # source://gemoji//lib/emoji.rb#14
  def all; end

  # Public: Initialize an Emoji::Character instance and yield it to the block.
  # The character is added to the `Emoji.all` set.
  #
  # source://gemoji//lib/emoji.rb#23
  def create(name); end

  # source://gemoji//lib/emoji.rb#10
  def data_file; end

  # Public: Yield an emoji to the block and update the indices in case its
  # aliases or unicode_aliases lists changed.
  #
  # @yield [emoji]
  #
  # source://gemoji//lib/emoji.rb#31
  def edit_emoji(emoji); end

  # Public: Find an emoji by its aliased name. Return nil if missing.
  #
  # source://gemoji//lib/emoji.rb#48
  def find_by_alias(name); end

  # Public: Find an emoji by its unicode character. Return nil if missing.
  #
  # source://gemoji//lib/emoji.rb#53
  def find_by_unicode(unicode); end

  private

  # source://gemoji//lib/emoji.rb#127
  def names_index; end

  # source://gemoji//lib/emoji.rb#76
  def parse_data_file; end

  # source://gemoji//lib/emoji.rb#132
  def unicodes_index; end
end

# source://gemoji//lib/emoji/character.rb#4
class Emoji::Character
  # @return [Character] a new instance of Character
  #
  # source://gemoji//lib/emoji/character.rb#80
  def initialize(name); end

  # source://gemoji//lib/emoji/character.rb#36
  def add_alias(name); end

  # source://gemoji//lib/emoji/character.rb#76
  def add_tag(tag); end

  # source://gemoji//lib/emoji/character.rb#68
  def add_unicode_alias(str); end

  # A list of names uniquely referring to this emoji.
  #
  # source://gemoji//lib/emoji/character.rb#20
  def aliases; end

  # The category for this emoji as per Apple's character palette
  #
  # source://gemoji//lib/emoji/character.rb#23
  def category; end

  # The category for this emoji as per Apple's character palette
  #
  # source://gemoji//lib/emoji/character.rb#23
  def category=(_arg0); end

  # True if the emoji is not a standard Emoji character.
  #
  # @return [Boolean]
  #
  # source://gemoji//lib/emoji/character.rb#12
  def custom?; end

  # The Unicode description text
  #
  # source://gemoji//lib/emoji/character.rb#26
  def description; end

  # The Unicode description text
  #
  # source://gemoji//lib/emoji/character.rb#26
  def description=(_arg0); end

  # source://gemoji//lib/emoji/character.rb#92
  def hex_inspect; end

  # source://gemoji//lib/emoji/character.rb#98
  def image_filename; end

  # Sets the attribute image_filename
  #
  # @param value the value to set the attribute image_filename to.
  #
  # source://gemoji//lib/emoji/character.rb#96
  def image_filename=(_arg0); end

  # source://gemoji//lib/emoji/character.rb#87
  def inspect; end

  # The iOS version where this emoji first debuted
  #
  # source://gemoji//lib/emoji/character.rb#32
  def ios_version; end

  # The iOS version where this emoji first debuted
  #
  # source://gemoji//lib/emoji/character.rb#32
  def ios_version=(_arg0); end

  # source://gemoji//lib/emoji/character.rb#34
  def name; end

  # Raw Unicode string for an emoji. Nil if emoji is non-standard.
  #
  # source://gemoji//lib/emoji/character.rb#44
  def raw; end

  # Raw Unicode strings for each skin tone variant of this emoji. The result is an empty array
  # unless the emoji supports skin tones.
  #
  # Note: for emojis that depict multiple people (e.g. couples or families), this will not produce
  # every possible permutation of skin tone per person.
  #
  # source://gemoji//lib/emoji/character.rb#51
  def raw_skin_tone_variants; end

  # Sets the attribute skin_tones
  #
  # @param value the value to set the attribute skin_tones to.
  #
  # source://gemoji//lib/emoji/character.rb#17
  def skin_tones=(_arg0); end

  # True if the emoji supports Fitzpatrick scale skin tone modifiers
  #
  # @return [Boolean]
  #
  # source://gemoji//lib/emoji/character.rb#15
  def skin_tones?; end

  # A list of tags associated with an emoji. Multiple emojis can share the
  # same tags.
  #
  # source://gemoji//lib/emoji/character.rb#74
  def tags; end

  # A list of Unicode strings that uniquely refer to this emoji.
  #
  # source://gemoji//lib/emoji/character.rb#41
  def unicode_aliases; end

  # The Unicode spec version where this emoji first debuted
  #
  # source://gemoji//lib/emoji/character.rb#29
  def unicode_version; end

  # The Unicode spec version where this emoji first debuted
  #
  # source://gemoji//lib/emoji/character.rb#29
  def unicode_version=(_arg0); end

  private

  # source://gemoji//lib/emoji/character.rb#122
  def default_image_filename; end

  class << self
    # Inspect individual Unicode characters in a string by dumping its
    # codepoints in hexadecimal format.
    #
    # source://gemoji//lib/emoji/character.rb#7
    def hex_inspect(str); end
  end
end

# source://gemoji//lib/emoji/character.rb#110
Emoji::Character::PEOPLE_HOLDING_HANDS = T.let(T.unsafe(nil), String)

# source://gemoji//lib/emoji/character.rb#112
Emoji::Character::SKIN_TONES = T.let(T.unsafe(nil), Array)

# source://gemoji//lib/emoji/character.rb#108
Emoji::Character::VARIATION_SELECTOR_16 = T.let(T.unsafe(nil), String)

# source://gemoji//lib/emoji/character.rb#109
Emoji::Character::ZERO_WIDTH_JOINER = T.let(T.unsafe(nil), String)

# source://gemoji//lib/emoji.rb#59
Emoji::SKIN_TONE_RE = T.let(T.unsafe(nil), Regexp)

# Characters which must have VARIATION_SELECTOR_16 to render as color emoji:
#
# source://gemoji//lib/emoji.rb#62
Emoji::TEXT_GLYPHS = T.let(T.unsafe(nil), Array)

# source://gemoji//lib/emoji.rb#58
Emoji::VARIATION_SELECTOR_16 = T.let(T.unsafe(nil), String)

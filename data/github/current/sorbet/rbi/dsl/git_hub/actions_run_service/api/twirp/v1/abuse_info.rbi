# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::ActionsRunService::Api::Twirp::V1::AbuseInfo`.
# Please instead update this file by running `bin/tapioca dsl GitHub::ActionsRunService::Api::Twirp::V1::AbuseInfo`.

class GitHub::ActionsRunService::Api::Twirp::V1::AbuseInfo
  sig do
    params(
      actor: T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::AbuseInfoIdentity),
      billing_plan_owner: T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::AbuseInfoIdentity),
      target_repo_owner: T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::AbuseInfoIdentity),
      target_repository: T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::TargetRepository),
      target_repository_tier: T.nilable(Integer),
      trigger_event: T.nilable(String),
      trigger_event_action: T.nilable(String),
      workflow_execution_id: T.nilable(String),
      workflow_file_path: T.nilable(String)
    ).void
  end
  def initialize(actor: nil, billing_plan_owner: nil, target_repo_owner: nil, target_repository: nil, target_repository_tier: nil, trigger_event: nil, trigger_event_action: nil, workflow_execution_id: nil, workflow_file_path: nil); end

  sig { returns(T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::AbuseInfoIdentity)) }
  def actor; end

  sig { params(value: T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::AbuseInfoIdentity)).void }
  def actor=(value); end

  sig { returns(T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::AbuseInfoIdentity)) }
  def billing_plan_owner; end

  sig { params(value: T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::AbuseInfoIdentity)).void }
  def billing_plan_owner=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_billing_plan_owner; end

  sig { void }
  def clear_target_repo_owner; end

  sig { void }
  def clear_target_repository; end

  sig { void }
  def clear_target_repository_tier; end

  sig { void }
  def clear_trigger_event; end

  sig { void }
  def clear_trigger_event_action; end

  sig { void }
  def clear_workflow_execution_id; end

  sig { void }
  def clear_workflow_file_path; end

  sig { returns(T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::AbuseInfoIdentity)) }
  def target_repo_owner; end

  sig { params(value: T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::AbuseInfoIdentity)).void }
  def target_repo_owner=(value); end

  sig { returns(T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::TargetRepository)) }
  def target_repository; end

  sig { params(value: T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::TargetRepository)).void }
  def target_repository=(value); end

  sig { returns(Integer) }
  def target_repository_tier; end

  sig { params(value: Integer).void }
  def target_repository_tier=(value); end

  sig { returns(String) }
  def trigger_event; end

  sig { params(value: String).void }
  def trigger_event=(value); end

  sig { returns(String) }
  def trigger_event_action; end

  sig { params(value: String).void }
  def trigger_event_action=(value); end

  sig { returns(String) }
  def workflow_execution_id; end

  sig { params(value: String).void }
  def workflow_execution_id=(value); end

  sig { returns(String) }
  def workflow_file_path; end

  sig { params(value: String).void }
  def workflow_file_path=(value); end
end

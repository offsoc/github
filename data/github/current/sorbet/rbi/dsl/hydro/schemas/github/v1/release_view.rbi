# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::ReleaseView`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::ReleaseView`.

class Hydro::Schemas::Github::V1::ReleaseView
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      body: T.nilable(String),
      release: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release),
      repository: T.nilable(Hydro::Schemas::Github::V2::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      spamurai_form_signals: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals),
      specimen_body: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)
    ).void
  end
  def initialize(actor: nil, body: nil, release: nil, repository: nil, request_context: nil, spamurai_form_signals: nil, specimen_body: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def body; end

  sig { params(value: String).void }
  def body=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_body; end

  sig { void }
  def clear_release; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_spamurai_form_signals; end

  sig { void }
  def clear_specimen_body; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)) }
  def release; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)).void }
  def release=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V2::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V2::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)) }
  def spamurai_form_signals; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)).void }
  def spamurai_form_signals=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)) }
  def specimen_body; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)).void }
  def specimen_body=(value); end
end

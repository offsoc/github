{"version":3,"file":"network-configurations-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/is-hash-navigation/is-hash-navigation.ts","ui/packages/network-configurations/classes/network-configuration.ts","ui/packages/network-configurations/App.tsx","ui/packages/network-configurations/constants/network-configuration-consts.ts","ui/packages/network-configurations/components/AzureIcon.tsx","ui/packages/network-configurations/components/DeleteDialog.tsx","ui/packages/network-configurations/constants/private-network-consts.ts","ui/packages/network-configurations/helpers/network-configuration-helpers.ts","ui/packages/network-configurations/components/DisableDialog.tsx","ui/packages/network-configurations/components/NetworkConfigurationListItem.tsx","ui/packages/network-configurations/routes/NetworkConfigurations.tsx","ui/packages/network-configurations/components/PrivateNetworkSummary.tsx","ui/packages/network-configurations/components/PrivateNetworkItem.tsx","ui/packages/network-configurations/components/PrivateNetworkList.tsx","ui/packages/network-configurations/components/AllowedServicesOptions.tsx","ui/packages/network-configurations/components/AddPrivateNetworkDialog.tsx","ui/packages/network-configurations/components/NetworkConfigurationHeading.tsx","ui/packages/network-configurations/routes/CreatePrivateNetwork.tsx","ui/packages/network-configurations/components/RunnerGroupListItem.tsx","ui/packages/network-configurations/routes/NetworkConfigurationSettings.tsx","ui/packages/network-configurations/routes/EditNetworkConfigurationSettings.tsx","ui/packages/network-configurations/constants/hosted-compute-networking-consts.ts","ui/packages/network-configurations/components/DisableHostedComputeNetworkingDialog.tsx","ui/packages/network-configurations/routes/EditHostedComputeNetworkingPolicySettings.tsx","ui/packages/network-configurations/components/stafftools/StaffToolsNetworkConfigurationListItem.tsx","ui/packages/network-configurations/routes/stafftools/StaffToolsHostedComputeNetworking.tsx","ui/packages/network-configurations/network-configurations.ts","ui/packages/use-csrf-token/use-csrf-token.ts","ui/packages/use-debounce/use-debounce.ts","ui/packages/use-navigate/use-navigate.ts","ui/packages/use-tracking-ref/use-tracking-ref.ts","ui/packages/verified-fetch/verified-fetch.ts","ui/packages/list-view/src/ListItem/Description.module.css","ui/packages/list-view/src/ListItem/Description.tsx","ui/packages/list-view/src/ListItem/LeadingContent.module.css","ui/packages/list-view/src/ListItem/LeadingContent.tsx","ui/packages/list-view/src/ListItem/LeadingVisual.module.css","ui/packages/list-view/src/ListItem/UnreadIndicator.module.css","ui/packages/list-view/src/ListItem/UnreadIndicator.tsx","ui/packages/list-view/src/ListItem/LeadingVisual.tsx","ui/packages/list-view/src/ListItem/MainContent.module.css","ui/packages/list-view/src/ListItem/MainContent.tsx","ui/packages/list-view/src/ListItem/Metadata.module.css","ui/packages/list-view/src/ListItem/Metadata.tsx","ui/packages/list-view/src/ListItem/TrailingBadge.module.css","ui/packages/list-view/src/ListItem/TrailingBadge.tsx","ui/packages/list-view/src/ListView/Metadata.tsx","ui/packages/list-view/src/density-gap.module.css","ui/packages/list-view/src/ListView/ActionBar.module.css","ui/packages/list-view/src/ListView/ActionBar.tsx","ui/packages/list-view/src/ListView/Metadata.module.css","ui/packages/list-view/src/ListView/SectionFilters.module.css","ui/packages/list-view/src/ListView/SectionFilters.tsx","ui/packages/list-view/src/ListView/SelectAllCheckbox.module.css","ui/packages/list-view/src/ListView/SelectAllCheckbox.tsx","ui/packages/react-core/JsonRoute.tsx"],"sourcesContent":["// Check if the navigation is only a hash change.\nconst isHashNavigation = (currentUrl: string, targetUrl: string): boolean => {\n  const current = new URL(currentUrl, window.location.origin)\n  const target = new URL(targetUrl, window.location.origin)\n  const hasHash = target.href.includes('#')\n\n  return (\n    hasHash && current.host === target.host && current.pathname === target.pathname && current.search === target.search\n  )\n}\n\nexport default isHashNavigation\n","export type RunnerGroup = {\n  id: string\n  name: string\n  allowPublic: boolean\n  visibility: string\n  selectedTargetsCount: number\n}\n\nexport enum ComputeService {\n  None = 'none',\n  Actions = 'actions',\n  Codespaces = 'codespaces',\n}\n\nexport class NetworkConfiguration {\n  id: string\n  name: string\n  createdOn: string\n  computeService: ComputeService\n  service: string\n  runnerGroups: RunnerGroup[]\n  constructor(\n    id: string,\n    name: string,\n    createdOn: string,\n    computeService: ComputeService,\n    service: string,\n    runnerGroups: RunnerGroup[],\n  ) {\n    this.id = id\n    this.name = name\n    this.createdOn = createdOn\n    this.computeService = computeService\n    this.service = service\n    this.runnerGroups = runnerGroups\n  }\n}\n","import type React from 'react'\n\n/**\n * The App component is used to render content which should be present on _all_ routes within this app\n */\nexport function App(props: {children?: React.ReactNode}) {\n  return <>{props.children}</>\n}\n\ntry{ App.displayName ||= 'App' } catch {}","export const NetworkConfigurationConsts = {\n  hostedComputeNetworkingTitle: 'Hosted compute networking',\n  networkConfigurationsDescription:\n    'Set up the required network settings for your GitHub-hosted compute with network configurations.',\n  learnMoreLink: 'https://github.co/actions-azure-vnet',\n  learnMore: 'Learn more about network configurations.',\n  runnerGroupNetworkingLink: 'https://github.co/runner-group-networking',\n  createNetworkConfiguration: 'Create configuration',\n  searchBoxPlaceholder: 'Search network configurations',\n  comingSoonLink: 'https://github.com/github/roadmap/issues/821',\n  runnerGroupItemUrl: (path: string, runnerGroupId: string) => `${path}/${runnerGroupId}`,\n  noNetworkConfigurationsAdded: 'No network configurations added',\n  noNetworkConfigurationsAddedDescriptionBusiness:\n    'Network configurations associated with your GitHub Enterprise account will be listed here.',\n  noNetworkConfigurationsAddedDescriptionOrg:\n    'Network configurations created in your organization will be listed here.',\n  azurePrivateNetwork: 'Azure private network',\n  azurePrivateNetworkDescription:\n    'Connect your Azure Virtual Network to align hosted runners with your network policies.',\n  azurePrivateNetworkDescriptionServiceAgnostic:\n    'Connect your Azure Virtual Network to align hosted compute services with your network policies.',\n  githubHostedPrivateNetwork: 'GitHub-hosted private network',\n  githubHostedPrivateNetworkDescription:\n    'Control outbound communication and monitor network logs for GitHub-hosted runners.',\n  backToNetworkingLabel: 'Back to Hosted compute networking',\n  nameLabel: 'Configuration name',\n  networkSettingsUrl: (path: string, networkId: string) => `${path}/${networkId}`,\n  editNetworkConfigurationPath: (path: string, configurationId: string) => `${path}/${configurationId}/edit`,\n  newNetworkConfiguration: 'New network configuration',\n  disableNetworkConfiguration: 'Disable',\n  deleteNetworkConfiguration: 'Delete configuration',\n  formLink: 'https://github.co/vnet-region-form',\n  docLink:\n    'https://docs.github.com/en/enterprise-cloud@latest/admin/configuration/configuring-private-networking-for-hosted-compute-products/troubleshooting-azure-private-network-configurations-for-github-hosted-runners-in-your-enterprise#supported-regions',\n  errorDisplayNameInUse: 'A network configuration with this name already exists. Please choose a different name.',\n  errorNetworkResourceInUse:\n    'A network configuration using this private network already exists. Please choose a different private network.',\n  errorUnsupportedResourceLocation: (location: string): string =>\n    `The private network's location '${location}' is not currently supported.`,\n  errorDuplicateLocation: (location: string): string =>\n    `This configuration already includes a network in '${location}'.`,\n  statusConfigBannerMessage:\n    'We are investigating issues with the network configuration setup process. ' +\n    'Operations on network configurations may be slow or fail. ' +\n    'Downstream services (Actions and Codespaces) that use network configurations should continue to function normally.',\n  statusAllVNetBannerMessage:\n    'We are investigating issues with the network configurations. ' +\n    'Operations on network configurations may be slow or fail. ' +\n    'Actions and Codespaces functionality using network configuratons may also be impacted.',\n  orgDisabledEmptyStateCardTitle: 'No network configurations available',\n  orgDisabledEmptyStateCardDescription: 'This setting has been disabled by enterprise administrators.',\n}\n","const iconPath = (\n  <>\n    <path\n      fill=\"#656D76\"\n      fillRule=\"evenodd\"\n      d=\"M5.502.434h5.02a1.142 1.142 0 0 1 1.082.777l4.336 12.85a1.14 1.14 0 0 1-1.082 1.506H9.963v-.004a1.185 1.185 0 0 1-.102.004h-.019a1.14 1.14 0 0 1-.68-.225l-3.19-2.37-.615 1.818a1.142 1.142 0 0 1-1.082.778H1.142A1.142 1.142 0 0 1 .06 14.06L4.397 1.21A1.142 1.142 0 0 1 5.479.435h.023Zm-.44 10.795 4.61 3.425c.05.037.109.056.17.056h.02a.286.286 0 0 0 .27-.376l-2.336-6.92-.934 2.418-.106.274h-3.19l1.496 1.123Zm9.796 3.482h-3.89a1.128 1.128 0 0 0-.025-.651L6.633 1.29h3.888a.285.285 0 0 1 .27.195l4.338 12.849a.286.286 0 0 1-.271.377Z\"\n    />\n  </>\n)\n\nexport function AzureIcon() {\n  return (\n    <svg aria-label=\"Azure icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n      {iconPath}\n    </svg>\n  )\n}\n\ntry{ AzureIcon.displayName ||= 'AzureIcon' } catch {}","import {Octicon, Box, Button, Text, FormControl, TextInput, Flash} from '@primer/react'\nimport {XIcon} from '@primer/octicons-react'\nimport {useCallback, useState} from 'react'\nimport {Dialog} from '@primer/react/experimental'\n// eslint-disable-next-line no-restricted-imports\nimport {useToastContext} from '@github-ui/toast/ToastContext'\nimport {verifiedFetchJSON} from '@github-ui/verified-fetch'\nimport {useNavigate} from '@github-ui/use-navigate'\n\ninterface IDeleteDialogProps {\n  setShowDeleteDialog: (showDialog: boolean) => void\n  name: string\n  id: string\n  removeNetworkConfigurationPath: string\n  networkConfigurationsPath?: string | null\n  removeNetworkConfigurationFunction?: (networkId: string) => void | null\n  enabledForCodespaces: boolean\n}\n\nexport function DeleteDialog(props: IDeleteDialogProps) {\n  const {addToast} = useToastContext()\n  const navigate = useNavigate()\n  const [isCorrectConfirmationDelete, setIsCorrectConfirmationDelete] = useState(false)\n  const [submitClickedDelete, setSubmitClickedDelete] = useState(false)\n  const onDeleteDialogClose = useCallback(() => {\n    setIsCorrectConfirmationDelete(false)\n    setSubmitClickedDelete(false)\n    props.setShowDeleteDialog(false)\n  }, [props])\n  const removeNetworkConfiguration = async () => {\n    setSubmitClickedDelete(true)\n    if (isCorrectConfirmationDelete) {\n      props.setShowDeleteDialog(false)\n      try {\n        const result = await verifiedFetchJSON(props.removeNetworkConfigurationPath, {\n          method: 'DELETE',\n          body: {\n            configurationId: props.id,\n          },\n        })\n        if (result.ok) {\n          if (props.removeNetworkConfigurationFunction) {\n            props.removeNetworkConfigurationFunction(props.id)\n          } else if (props.networkConfigurationsPath) {\n            navigate(props.networkConfigurationsPath)\n          }\n        } else {\n          // eslint-disable-next-line @github-ui/dotcom-primer/toast-migration\n          addToast({\n            type: 'error',\n            message: 'There was an error deleting the network configuration',\n          })\n        }\n      } catch (e) {\n        // eslint-disable-next-line @github-ui/dotcom-primer/toast-migration\n        addToast({\n          type: 'error',\n          message: 'There was an error deleting the network configuration',\n        })\n      }\n    }\n  }\n  const renderFooter = () => {\n    return (\n      <Dialog.Footer sx={{display: 'flex', flexDirection: 'column', gap: 2, justifyContent: 'flex-start'}}>\n        <FormControl required>\n          <FormControl.Label sx={{fontWeight: 'normal'}}>\n            Please type <b>{props.name}</b> to confirm.\n          </FormControl.Label>\n          <TextInput\n            block\n            aria-label={`Please type ${props.name} to confirm`}\n            name={`Please type ${props.name} to confirm`}\n            onChange={e => setIsCorrectConfirmationDelete(e.target.value.trim() === props.name)}\n          />\n          {submitClickedDelete && !isCorrectConfirmationDelete && (\n            <FormControl.Validation variant=\"error\">Must match {props.name}</FormControl.Validation>\n          )}\n        </FormControl>\n        <Button block variant=\"danger\" onClick={removeNetworkConfiguration} className=\"ml-0\">\n          I understand, delete this network configuration\n        </Button>\n      </Dialog.Footer>\n    )\n  }\n  return (\n    <Dialog\n      title=\"Delete network configuration\"\n      onClose={onDeleteDialogClose}\n      width=\"large\"\n      renderFooter={renderFooter}\n    >\n      <div>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 3,\n          }}\n        >\n          <Flash variant=\"warning\">\n            Deleting a network configuration will remove it from your enterprise account and from all organizations that\n            have access to this configuration.\n          </Flash>\n          <Box sx={{display: 'flex', flexDirection: 'row'}}>\n            <Octicon icon={XIcon} size={16} sx={{color: 'danger.fg', mt: 1, mb: 1}} />\n            <Text sx={{pl: 2}}>\n              All associated <strong>workflows</strong> using this configuration will stop running.\n            </Text>\n          </Box>\n          {props.enabledForCodespaces && (\n            <Box sx={{display: 'flex', flexDirection: 'row'}}>\n              <Octicon icon={XIcon} size={16} sx={{color: 'danger.fg', mt: 1, mb: 1}} />\n              <Text sx={{pl: 2}}>\n                <strong>Codespaces</strong> configured to use this configuration will no longer have access to internal\n                resources granted to the given configuration.\n              </Text>\n            </Box>\n          )}\n          {props.enabledForCodespaces ? (\n            <div>\n              Before deleting, please consider updating the network settings for runner groups using this configuration\n              as well as updating or removing any codespaces org policies that reference this configuration.\n            </div>\n          ) : (\n            <div>\n              Before disabling, please consider updating the network settings for runner groups using this\n              configuration.\n            </div>\n          )}\n        </Box>\n      </div>\n    </Dialog>\n  )\n}\n\ntry{ DeleteDialog.displayName ||= 'DeleteDialog' } catch {}","export const PrivateNetworkConsts = {\n  addPrivateNetworkButton: 'Add private network',\n  azureNetworkResourceIdLabel: 'Network settings resource ID',\n  azureRegionLabel: 'Region',\n  azureSubscriptionIdLabel: 'Azure subscription ID',\n  resourceNameLabel: 'Resource name',\n  filterResultMessage: (count: number, searchText: string) =>\n    `${count} ${count === 1 ? 'result' : 'results'} result for all networks matching ${searchText}`,\n  backToNetworkingLabel: 'Back to networking',\n  emptySearchDescription: 'Please provide different search criteria.',\n  emptySearchTitle: \"This account doesn't have any networks that match.\",\n  invalidNameError:\n    'Must be 1-100 characters, and may only contain letters, numbers, periods (.), hyphens (-), and underscores (_).',\n  unexpectedErrorOccurred: 'An unexpected error occurred: ',\n  resourceIdLearnMoreText: 'Learn more on how to get the resource ID.',\n  resourceIdLearnMoreLink: 'https://github.co/VNET_resourceID',\n  learnMoreLink: 'https://github.co/actions-azure-vnet',\n  settingsIdNotFound: 'No resource with the given ID was found.',\n  nameLabel: 'Name',\n  networkSettingsDescription:\n    'Control access to your network by selecting the services that are able to use your shared virtual network.',\n  networkSettingsTitle: 'Network Settings',\n  NetworkSettingsUrl: (businessSlug: string, networkId: string) =>\n    `/enterprises/${businessSlug}/settings/private_networks/${networkId}`,\n  settingsIdAlreadyInUse: 'A network configuration associated with this resource ID already exists.',\n  settingsIdAlreadyInCurrentConfiguration: 'this resource ID is already associated with this configuration.',\n  settingsBelongsToAnotherOrg: 'The private network is registered to another enterprise or organization.',\n  privateNetworkPreviewTitle: 'Private network preview',\n  resourceGroupLabel: 'Resource group',\n  saveChangesButton: 'Save changes',\n  searchBoxPlaceholder: 'Find private network...',\n  servicesAllowedDescription:\n    'Network configuration can be enabled for services. If not selected, network configuration will not be available.',\n  servicesAllowedTitle: 'Services allowed',\n  settingsIdCaption: 'Where can I get the resource ID?',\n  setUpPrivateNetworkTitle: 'New network configuration',\n  setUpPrivateNetworkDescription:\n    'Connect your Azure Virtual Network to align hosted runners to GitHub Actions with your network policies.',\n  setUpPrivateNetworkDescriptionServiceAgnostic:\n    'Connect your Azure Virtual Network to align hosted compute services with your network policies.',\n  subnetLabel: 'Subnet',\n  successResult: 'Success',\n  apiErrorResult: 'apiErrorResult',\n  networkAlreadyRegisteredResult: 'networkAlreadyRegisteredResult',\n  validSettingsId: 'Resource ID is valid',\n  virtualNetworkLabel: 'Virtual network',\n  azurePrivateNetworking: 'Azure Virtual Networks',\n  azurePrivateNetworkingDescription:\n    'Add an Azure Virtual Network to align hosted runners with your Azure network policies.',\n  azurePrivateNetworkingDescriptionServiceAgnostic:\n    'Add an Azure Virtual Network to align hosted compute services with your Azure network policies.',\n  azurePrivateNetworkingNotEmptyError: 'Azure Virtual Network must not be empty.',\n  addAzureVirtualNetwork: 'Add Azure Virtual Network',\n  addAzurePrivateNetwork: 'Add Azure Private Network',\n  noAzurePrivateNetworksAdded: 'No Azure private network added',\n  errorOnResourceIdOrName: 'The resource Id or Name have errors',\n  createConfiguration: 'Create configuration',\n  allowedServicesNoneLabel: 'None',\n  allowedServicesNoneDescription: 'Disable this configuration.',\n  allowedServicesActionsLabel: 'GitHub Actions',\n  allowedServicesActionsDescription:\n    'Allow usage of this configuration when creating runner groups for GitHub-hosted runners.',\n  allowedServicesCodespacesLabel: 'GitHub Codespaces',\n  allowedServicesCodespacesDescription: 'Allow usage of this configuration when creating Codespaces.',\n}\n","import {verifiedFetchJSON} from '@github-ui/verified-fetch'\nimport {PrivateNetworkConsts} from '../constants/private-network-consts'\nimport {NetworkConfigurationConsts} from '../constants/network-configuration-consts'\nimport type {ComputeService} from '../classes/network-configuration'\n\nexport enum PrivateNetworkValidationResult {\n  None,\n  Success,\n  MissingNetwork,\n  NetworkResourceInUse,\n  UnsupportedResourceLocation,\n  DuplicateLocation,\n}\n\nexport enum NameValidationResult {\n  None,\n  Success,\n  InvalidName,\n  DisplayNameInUse,\n}\n\nexport function hasNameValidationError(result: NameValidationResult): boolean {\n  return result !== NameValidationResult.Success && result !== NameValidationResult.None\n}\n\nexport function getNameValidationError(result: NameValidationResult): string {\n  switch (result) {\n    case NameValidationResult.InvalidName:\n      return PrivateNetworkConsts.invalidNameError\n    case NameValidationResult.DisplayNameInUse:\n      return NetworkConfigurationConsts.errorDisplayNameInUse\n    default:\n      return ''\n  }\n}\n\nexport function hasPrivateNetworkValidationError(result: PrivateNetworkValidationResult): boolean {\n  return result !== PrivateNetworkValidationResult.Success && result !== PrivateNetworkValidationResult.None\n}\n\nexport function getPrivateNetworkValidationError(\n  result: PrivateNetworkValidationResult,\n  privateNetworkLocation?: string,\n): string {\n  switch (result) {\n    case PrivateNetworkValidationResult.MissingNetwork:\n      return PrivateNetworkConsts.azurePrivateNetworkingNotEmptyError\n    case PrivateNetworkValidationResult.NetworkResourceInUse:\n      return NetworkConfigurationConsts.errorNetworkResourceInUse\n    case PrivateNetworkValidationResult.UnsupportedResourceLocation:\n      // private network shouldn't be null here, but safe-navigate just in case\n      return NetworkConfigurationConsts.errorUnsupportedResourceLocation(privateNetworkLocation ?? 'unknown')\n    case PrivateNetworkValidationResult.DuplicateLocation:\n      return NetworkConfigurationConsts.errorDuplicateLocation(privateNetworkLocation ?? 'unknown')\n    default:\n      return ''\n  }\n}\n\n// Validates the name. If the url isn't passed, the validation will only check the name format.\nexport async function validateNetworkConfigurationName(name: string, findUrl?: string): Promise<NameValidationResult> {\n  const regex = /^[a-zA-Z0-9._-]{1,100}$/\n  if (!regex.test(name.trim())) {\n    return NameValidationResult.InvalidName\n  }\n\n  if (!findUrl) {\n    return NameValidationResult.Success\n  }\n\n  // Check if the name is already in use\n  try {\n    const result = await verifiedFetchJSON(`${findUrl}?name=${name}`, {\n      method: 'GET',\n    })\n    if (result.ok) {\n      const data = await result.json()\n      if (data.networkConfigurations.length > 0) {\n        return NameValidationResult.DisplayNameInUse\n      } else {\n        return NameValidationResult.Success\n      }\n    } else {\n      // Checking validation failed, so we don't know if the name is in use or not. We'll\n      // assume it's not and let the submit fail if it is.\n      return NameValidationResult.Success\n    }\n  } catch (e: unknown) {\n    // Checking validation failed, so we don't know if the name is in use or not. We'll\n    // assume it's not and let the submit fail if it is.\n    return NameValidationResult.Success\n  }\n}\n\nexport interface ICreateOrUpdateSuccess {\n  success: true\n  link: string\n}\nexport interface ICreateOrUpdateFailure {\n  success: false\n  code: string\n  message: string\n}\nexport type CreateOrUpdateResult = ICreateOrUpdateSuccess | ICreateOrUpdateFailure\nexport interface IUpdatePayload {\n  configurationId: string\n  privateNetworkIds?: string[]\n  name?: string\n  computeService: ComputeService\n}\nexport interface ICreatePayload {\n  privateNetworkIds: string[]\n  computeService: ComputeService\n  name: string\n}\n\nexport async function createOrUpdateNetworkConfiguration(\n  createOrUpdateUrl: string,\n  listNetworkConfigurationsUrl: string,\n  payload: ICreatePayload | IUpdatePayload,\n): Promise<CreateOrUpdateResult> {\n  try {\n    const result = await verifiedFetchJSON(createOrUpdateUrl, {\n      method: 'POST',\n      body: payload,\n    })\n    const data = await result.json()\n    if (result.ok) {\n      // Location should always be included, but fallback just in case\n      const link = result.headers.get('Location') ?? listNetworkConfigurationsUrl\n      return {\n        success: true,\n        link,\n      }\n    } else {\n      return {\n        success: false,\n        code: data.error.code,\n        message: data.error.message ?? JSON.stringify(data.error),\n      }\n    }\n  } catch (e: unknown) {\n    const message = e instanceof Error ? e.message : JSON.stringify(e)\n    return {\n      success: false,\n      code: 'unknown',\n      message,\n    }\n  }\n}\n","import {Octicon, Box, Button, Text, FormControl, TextInput} from '@primer/react'\nimport {CheckIcon, XIcon} from '@primer/octicons-react'\nimport {useCallback, useState} from 'react'\nimport {Dialog} from '@primer/react/experimental'\nimport {ComputeService} from '../classes/network-configuration'\n// eslint-disable-next-line no-restricted-imports\nimport {useToastContext} from '@github-ui/toast/ToastContext'\nimport type {IUpdatePayload} from '../helpers/network-configuration-helpers'\nimport {createOrUpdateNetworkConfiguration} from '../helpers/network-configuration-helpers'\n\ninterface IDisableDialogProps {\n  setShowDisableDialog: (showDialog: boolean) => void\n  name: string\n  id: string\n  networkConfigurationsPath: string\n  updateNetworkConfigurationPath: string\n  setConfigurationDisabled: (disabled: boolean) => void\n}\n\nexport function DisableDialog(props: IDisableDialogProps) {\n  const {addToast} = useToastContext()\n  const [isCorrectConfirmation, setIsCorrectConfirmation] = useState(false)\n  const [submitClicked, setSubmitClicked] = useState(false)\n  const onDisableDialogClose = useCallback(() => {\n    setIsCorrectConfirmation(false)\n    setSubmitClicked(false)\n    props.setShowDisableDialog(false)\n  }, [props])\n\n  const updateNetworkConfiguration = async () => {\n    setSubmitClicked(true)\n    if (isCorrectConfirmation) {\n      props.setShowDisableDialog(false)\n      try {\n        const requestBody: IUpdatePayload = {\n          configurationId: props.id,\n          computeService: ComputeService.None,\n        }\n\n        const result = await createOrUpdateNetworkConfiguration(\n          props.updateNetworkConfigurationPath,\n          props.networkConfigurationsPath,\n          requestBody,\n        )\n\n        if (result.success) {\n          if (props.setConfigurationDisabled) {\n            props.setConfigurationDisabled(true)\n          }\n          // eslint-disable-next-line @github-ui/dotcom-primer/toast-migration\n          addToast({\n            type: 'success',\n            message: 'Service updated successfully',\n          })\n        } else {\n          // eslint-disable-next-line @github-ui/dotcom-primer/toast-migration\n          addToast({\n            type: 'error',\n            message: 'There was an error updating the service',\n          })\n        }\n      } catch (e) {\n        // eslint-disable-next-line @github-ui/dotcom-primer/toast-migration\n        addToast({\n          type: 'error',\n          message: 'There was an error updating the service',\n        })\n      }\n    }\n  }\n  const renderFooter = () => {\n    return (\n      <Dialog.Footer sx={{display: 'flex', flexDirection: 'column', gap: 2, justifyContent: 'flex-start'}}>\n        <FormControl required>\n          <FormControl.Label sx={{fontWeight: 'normal'}}>\n            Please type <b>{props.name}</b> to confirm.\n          </FormControl.Label>\n          <TextInput\n            block\n            aria-label={`Please type ${props.name} to confirm`}\n            name={`Please type ${props.name} to confirm`}\n            onChange={e => setIsCorrectConfirmation(e.target.value.trim() === props.name)}\n          />\n          {submitClicked && !isCorrectConfirmation && (\n            <FormControl.Validation variant=\"error\">Must match {props.name}</FormControl.Validation>\n          )}\n        </FormControl>\n        <Button block variant=\"danger\" onClick={updateNetworkConfiguration} className=\"ml-0\">\n          I understand, disable this network configuration\n        </Button>\n      </Dialog.Footer>\n    )\n  }\n  return (\n    <Dialog\n      title=\"Disable network configurations\"\n      onClose={onDisableDialogClose}\n      renderFooter={renderFooter}\n      width=\"large\"\n    >\n      <div>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 3,\n          }}\n        >\n          <Box sx={{display: 'flex', flexDirection: 'row'}}>\n            <Octicon icon={XIcon} size={16} sx={{color: 'danger.fg', mt: 1, mb: 1}} />\n            <Text sx={{pl: 2}}>\n              All associated <strong>workflows</strong> using this configuration will stop running.\n            </Text>\n          </Box>\n          <Box sx={{display: 'flex', flexDirection: 'row'}}>\n            <Octicon icon={CheckIcon} size={16} sx={{color: 'success.fg', mt: 1, mb: 1}} />\n            <Text sx={{pl: 2}}>\n              This network configuration will still be available and can be accessed inside the enterprise account.\n            </Text>\n          </Box>\n          <div>\n            Before disabling, please consider updating the network settings for runner groups using this configuration.\n          </div>\n        </Box>\n      </div>\n    </Dialog>\n  )\n}\n\ntry{ DisableDialog.displayName ||= 'DisableDialog' } catch {}","import {ListItemDescription} from '@github-ui/list-view/ListItemDescription'\nimport {ListItemLeadingContent} from '@github-ui/list-view/ListItemLeadingContent'\nimport {ListItemLeadingVisual} from '@github-ui/list-view/ListItemLeadingVisual'\nimport {ListItemMainContent} from '@github-ui/list-view/ListItemMainContent'\nimport {ListItemTitle} from '@github-ui/list-view/ListItemTitle'\nimport {ListItemMetadata} from '@github-ui/list-view/ListItemMetadata'\nimport {ListItemTrailingBadge} from '@github-ui/list-view/ListItemTrailingBadge'\nimport {ListItem} from '@github-ui/list-view/ListItem'\nimport {ActionList, IconButton, Box, ActionMenu, RelativeTime} from '@primer/react'\nimport {AzureIcon} from './AzureIcon'\nimport {KebabHorizontalIcon, PencilIcon} from '@primer/octicons-react'\nimport {NetworkConfigurationConsts} from '../constants/network-configuration-consts'\nimport {useNavigate} from '@github-ui/use-navigate'\nimport {DeleteDialog} from './DeleteDialog'\nimport {DisableDialog} from './DisableDialog'\nimport type {NetworkConfiguration} from '../classes/network-configuration'\nimport {useState} from 'react'\n// eslint-disable-next-line no-restricted-imports\nimport {useToastContext} from '@github-ui/toast/ToastContext'\nimport {ComputeService} from '../classes/network-configuration'\nimport {createOrUpdateNetworkConfiguration, type IUpdatePayload} from '../helpers/network-configuration-helpers'\n\ninterface INetworkConfigurationListItemProps {\n  networkConfigurationsPath: string\n  networkConfig: NetworkConfiguration\n  updateNetworkConfigurationPath: string\n  removeNetworkConfigurationPath: string\n  removeNetworkConfigurationFunction: (networkId: string) => void\n  enabledForCodespaces: boolean\n  canEditNetworkConfiguration: boolean\n}\n\nexport function NetworkConfigurationListItem(props: INetworkConfigurationListItemProps) {\n  const {addToast} = useToastContext()\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false)\n  const [showDisableDialog, setShowDisableDialog] = useState(false)\n  const navigate = useNavigate()\n  const [configurationDisabled, setConfigurationDisabled] = useState(\n    props.networkConfig.computeService === ComputeService.None,\n  )\n  const networkSettingsUrl = NetworkConfigurationConsts.networkSettingsUrl(\n    props.networkConfigurationsPath,\n    props.networkConfig.id,\n  )\n  const editNetworkConfigurationPath = NetworkConfigurationConsts.editNetworkConfigurationPath(\n    props.networkConfigurationsPath,\n    props.networkConfig.id,\n  )\n  const enableDisableActionsForConfiguration = async () => {\n    if (!configurationDisabled) {\n      setShowDisableDialog(true)\n    } else {\n      try {\n        const requestBody: IUpdatePayload = {\n          configurationId: props.networkConfig.id,\n          computeService: ComputeService.Actions,\n        }\n\n        const result = await createOrUpdateNetworkConfiguration(\n          props.updateNetworkConfigurationPath,\n          props.networkConfigurationsPath,\n          requestBody,\n        )\n        if (result.success) {\n          // eslint-disable-next-line @github-ui/dotcom-primer/toast-migration\n          addToast({\n            type: 'success',\n            message: 'Service updated successfully',\n          })\n          setConfigurationDisabled(false)\n        } else {\n          // eslint-disable-next-line @github-ui/dotcom-primer/toast-migration\n          addToast({\n            type: 'error',\n            message: 'There was an error updating the service',\n          })\n        }\n      } catch (e) {\n        // eslint-disable-next-line @github-ui/dotcom-primer/toast-migration\n        addToast({\n          type: 'error',\n          message: 'There was an error updating the service',\n        })\n      }\n    }\n  }\n  return (\n    <>\n      {showDisableDialog && (\n        <DisableDialog\n          setShowDisableDialog={setShowDisableDialog}\n          name={props.networkConfig.name}\n          id={props.networkConfig.id}\n          networkConfigurationsPath={props.networkConfigurationsPath}\n          updateNetworkConfigurationPath={props.updateNetworkConfigurationPath}\n          setConfigurationDisabled={setConfigurationDisabled}\n        />\n      )}\n      {showDeleteDialog && (\n        <DeleteDialog\n          setShowDeleteDialog={setShowDeleteDialog}\n          name={props.networkConfig.name}\n          id={props.networkConfig.id}\n          removeNetworkConfigurationPath={props.removeNetworkConfigurationPath}\n          removeNetworkConfigurationFunction={props.removeNetworkConfigurationFunction}\n          enabledForCodespaces={props.enabledForCodespaces}\n        />\n      )}\n      <ListItem\n        title={\n          <ListItemTitle\n            value={props.networkConfig.name}\n            onClick={() => navigate(networkSettingsUrl)}\n            trailingBadges={\n              !props.enabledForCodespaces && configurationDisabled\n                ? [<ListItemTrailingBadge key=\"disabled\" title=\"Disabled\" variant=\"attention\" />]\n                : undefined\n            }\n          />\n        }\n        metadata={\n          props.canEditNetworkConfiguration && (\n            <ListItemMetadata alignment=\"right\">\n              <Box sx={{pl: 1}}>\n                {/* eslint-disable-next-line primer-react/a11y-remove-disable-tooltip */}\n                <IconButton\n                  unsafeDisableTooltip={true}\n                  icon={PencilIcon}\n                  aria-label=\"Edit icon\"\n                  size=\"medium\"\n                  variant=\"invisible\"\n                  sx={{color: 'fg.muted'}}\n                  onClick={() => navigate(editNetworkConfigurationPath)}\n                />\n              </Box>\n              <div>\n                <ActionMenu>\n                  <ActionMenu.Anchor>\n                    {/* eslint-disable-next-line primer-react/a11y-remove-disable-tooltip */}\n                    <IconButton\n                      unsafeDisableTooltip={true}\n                      icon={KebabHorizontalIcon}\n                      variant=\"invisible\"\n                      aria-label=\"Disable Delete menu\"\n                      sx={{color: 'fg.muted'}}\n                    />\n                  </ActionMenu.Anchor>\n                  <ActionMenu.Overlay width=\"auto\">\n                    <ActionList>\n                      {!props.enabledForCodespaces && (\n                        <ActionList.Item onSelect={enableDisableActionsForConfiguration}>\n                          {configurationDisabled ? 'Enable' : 'Disable'}\n                        </ActionList.Item>\n                      )}\n                      <ActionList.Item variant=\"danger\" onSelect={() => setShowDeleteDialog(true)}>\n                        {NetworkConfigurationConsts.deleteNetworkConfiguration}\n                      </ActionList.Item>\n                    </ActionList>\n                  </ActionMenu.Overlay>\n                </ActionMenu>\n              </div>\n            </ListItemMetadata>\n          )\n        }\n      >\n        <ListItemLeadingContent>\n          <ListItemLeadingVisual icon={AzureIcon} description=\"Azure Icon\" />\n        </ListItemLeadingContent>\n        <ListItemMainContent>\n          <ListItemDescription>\n            {props.networkConfig.service} · Created{' '}\n            <RelativeTime date={new Date(props.networkConfig.createdOn)} tense=\"past\" />\n          </ListItemDescription>\n        </ListItemMainContent>\n      </ListItem>\n    </>\n  )\n}\n\ntry{ NetworkConfigurationListItem.displayName ||= 'NetworkConfigurationListItem' } catch {}","import {\n  ActionMenu,\n  ActionList,\n  Box,\n  Flash,\n  Heading,\n  Link,\n  Octicon,\n  PageLayout,\n  Pagination,\n  TextInput,\n} from '@primer/react'\nimport {SearchIcon, MarkGithubIcon, LinkExternalIcon, AlertIcon, ShieldLockIcon} from '@primer/octicons-react'\nimport {useNavigate} from '@github-ui/use-navigate'\nimport {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {useEffect, useState} from 'react'\nimport type {NetworkConfiguration} from '../classes/network-configuration'\nimport {NetworkConfigurationConsts} from '../constants/network-configuration-consts'\nimport {AzureIcon} from '../components/AzureIcon'\nimport {ListView} from '@github-ui/list-view'\nimport {ListViewMetadata} from '@github-ui/list-view/ListViewMetadata'\nimport {announce} from '@github-ui/aria-live'\nimport {NetworkConfigurationListItem} from '../components/NetworkConfigurationListItem'\n\nexport interface NetworkConfigurationsPayload {\n  networks: NetworkConfiguration[]\n  removeNetworkConfigurationPath: string\n  updateNetworkConfigurationPath: string\n  newPrivateNetworkPath: string\n  networkConfigurationsPath: string\n  enabledForCodespaces: boolean\n  displayConfigStatusBanner: boolean\n  displayAllVNetStatusBanner: boolean\n  canEditNetworkConfiguration: boolean\n  isBusiness: boolean\n}\n\nlet removeNetworkConfigurationPath = ''\nexport function NetworkConfigurations() {\n  const payload = useRoutePayload<NetworkConfigurationsPayload>()\n  const [networkConfigurations, setNetworkConfigurations] = useState<NetworkConfiguration[]>(payload.networks ?? [])\n  const [searchText, setSearchText] = useState('')\n  const defaultNetworkConfigurationPerPage = 25\n\n  removeNetworkConfigurationPath = payload.removeNetworkConfigurationPath\n\n  const removeNetworkConfiguration = async (networkId: string) => {\n    setNetworkConfigurations(networkConfigurations.filter(item => item.id !== networkId))\n  }\n\n  const serviceAgnostic = payload.enabledForCodespaces\n  const [totalNetworkConfigurations, setTotalNetworkConfigurations] = useState(networkConfigurations.length)\n  const pageCount = Math.ceil(totalNetworkConfigurations / defaultNetworkConfigurationPerPage)\n  const [currentPage, setCurrentPage] = useState(1)\n  //Set the message to the higher impact text, AllVNet, if both flags are set.\n  const statusBannerMessage = payload.displayAllVNetStatusBanner\n    ? NetworkConfigurationConsts.statusAllVNetBannerMessage\n    : NetworkConfigurationConsts.statusConfigBannerMessage\n  return (\n    <PageLayout containerWidth=\"full\" padding=\"none\" sx={{p: 0}}>\n      <PageLayout.Header>\n        {(payload.displayConfigStatusBanner || payload.displayAllVNetStatusBanner) && (\n          <Flash variant=\"warning\" sx={{alignItems: 'center', display: 'flex', mb: 4}}>\n            <Octicon icon={AlertIcon} />\n            <div>\n              <p>\n                <b>Warning:</b> {statusBannerMessage}\n              </p>\n            </div>\n          </Flash>\n        )}\n        <div className=\"border-bottom\">\n          <Heading as=\"h2\" className=\"h2 text-normal\">\n            {NetworkConfigurationConsts.hostedComputeNetworkingTitle}\n          </Heading>\n          <p className=\"color-fg-muted mb-2\">\n            {NetworkConfigurationConsts.networkConfigurationsDescription}{' '}\n            <Link inline href={NetworkConfigurationConsts.learnMoreLink}>\n              {NetworkConfigurationConsts.learnMore}\n            </Link>\n          </p>\n        </div>\n      </PageLayout.Header>\n      <PageLayout.Content as=\"div\">\n        {networkConfigurations.length === 0 && (\n          <EmptyStateCard\n            newPrivateNetworkPath={payload.newPrivateNetworkPath}\n            serviceAgnostic={serviceAgnostic}\n            isBusiness={payload.isBusiness}\n            canEditNetworkConfiguration={payload.canEditNetworkConfiguration}\n          />\n        )}\n        {networkConfigurations.length > 0 && (\n          <div>\n            <Box sx={{display: 'flex', flexDirection: 'row', justifyContent: 'end', pb: '17px'}}>\n              <TextInput\n                block\n                leadingVisual={SearchIcon}\n                aria-label={NetworkConfigurationConsts.searchBoxPlaceholder}\n                name=\"privateNetwork\"\n                placeholder={NetworkConfigurationConsts.searchBoxPlaceholder}\n                onChange={e => setSearchText(e.target.value)}\n              />\n              {payload.canEditNetworkConfiguration && (\n                <Box sx={{ml: 2}}>\n                  <NetworkConfigurationActionMenu\n                    newPrivateNetworkPath={payload.newPrivateNetworkPath}\n                    serviceAgnostic={serviceAgnostic}\n                  />\n                </Box>\n              )}\n            </Box>\n            <NetworkConfigurationList\n              networkConfigurationsPath={payload.networkConfigurationsPath}\n              searchText={searchText}\n              networks={networkConfigurations}\n              updateNetworkConfigurationPath={payload.updateNetworkConfigurationPath}\n              removeNetworkConfigurationFunction={removeNetworkConfiguration}\n              enabledForCodespaces={payload.enabledForCodespaces}\n              pageNumber={currentPage}\n              setTotalNetworkConfigurations={setTotalNetworkConfigurations}\n              defaultNetworkConfigurationPerPage={defaultNetworkConfigurationPerPage}\n              canEditNetworkConfiguration={payload.canEditNetworkConfiguration}\n            />\n          </div>\n        )}\n      </PageLayout.Content>\n      <PageLayout.Footer>\n        {pageCount > 1 && (\n          <Pagination\n            pageCount={pageCount}\n            currentPage={currentPage}\n            onPageChange={(e, newPage) => {\n              e.preventDefault()\n              if (currentPage !== newPage) {\n                setCurrentPage(newPage)\n              }\n            }}\n            showPages={{narrow: false}}\n          />\n        )}\n      </PageLayout.Footer>\n    </PageLayout>\n  )\n}\n\nfunction EmptyStateCard({\n  newPrivateNetworkPath,\n  serviceAgnostic,\n  isBusiness,\n  canEditNetworkConfiguration,\n}: {\n  newPrivateNetworkPath: string\n  serviceAgnostic: boolean\n  isBusiness: boolean\n  canEditNetworkConfiguration: boolean\n}) {\n  return (\n    <Box\n      sx={{\n        border: '1px solid var(--borderColor-default, var(--color-border-default))',\n        borderRadius: '6px',\n        p: 132,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      {canEditNetworkConfiguration ? (\n        <>\n          <Box sx={{gap: 1, textAlign: 'center'}}>\n            <Box sx={{fontSize: 3, color: 'fg.default', fontWeight: 'bold'}}>\n              {NetworkConfigurationConsts.noNetworkConfigurationsAdded}\n            </Box>\n            <Box sx={{color: 'fg.muted', flexWrap: 'wrap', fontSize: '14px'}}>\n              {isBusiness\n                ? NetworkConfigurationConsts.noNetworkConfigurationsAddedDescriptionBusiness\n                : NetworkConfigurationConsts.noNetworkConfigurationsAddedDescriptionOrg}\n            </Box>\n          </Box>\n          <Box sx={{p: 5}}>\n            <NetworkConfigurationActionMenu\n              newPrivateNetworkPath={newPrivateNetworkPath}\n              serviceAgnostic={serviceAgnostic}\n            />\n          </Box>\n        </>\n      ) : (\n        <OrgDisabledEmptyStateCard />\n      )}\n    </Box>\n  )\n}\n\nfunction NetworkConfigurationActionMenu({\n  newPrivateNetworkPath,\n  serviceAgnostic,\n}: {\n  newPrivateNetworkPath: string\n  serviceAgnostic: boolean\n}) {\n  const navigate = useNavigate()\n  return (\n    <ActionMenu>\n      <ActionMenu.Button variant=\"primary\">{NetworkConfigurationConsts.newNetworkConfiguration}</ActionMenu.Button>\n      <ActionMenu.Overlay width=\"medium\">\n        <ActionList>\n          <ActionList.LinkItem onClick={() => navigate(newPrivateNetworkPath)}>\n            {NetworkConfigurationConsts.azurePrivateNetwork}\n            <ActionList.LeadingVisual>\n              <AzureIcon />\n            </ActionList.LeadingVisual>\n            <ActionList.Description variant=\"block\">\n              {serviceAgnostic\n                ? NetworkConfigurationConsts.azurePrivateNetworkDescriptionServiceAgnostic\n                : NetworkConfigurationConsts.azurePrivateNetworkDescription}\n            </ActionList.Description>\n          </ActionList.LinkItem>\n          <ActionList.Divider />\n          <ActionList.Group>\n            <ActionList.GroupHeading>Available in 2024</ActionList.GroupHeading>\n            <ActionList.LinkItem onClick={() => navigate(NetworkConfigurationConsts.comingSoonLink)}>\n              <Box sx={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n                <span>{NetworkConfigurationConsts.githubHostedPrivateNetwork}</span>\n                <Octicon icon={LinkExternalIcon} size={16} sx={{color: 'fg.subtle'}} />\n              </Box>\n              <ActionList.LeadingVisual>\n                <MarkGithubIcon size={16} />\n              </ActionList.LeadingVisual>\n              <ActionList.Description variant=\"block\">\n                {NetworkConfigurationConsts.githubHostedPrivateNetworkDescription}\n              </ActionList.Description>\n            </ActionList.LinkItem>\n          </ActionList.Group>\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>\n  )\n}\n\nfunction NetworkConfigurationList({\n  networkConfigurationsPath,\n  searchText,\n  networks,\n  updateNetworkConfigurationPath,\n  removeNetworkConfigurationFunction,\n  enabledForCodespaces,\n  pageNumber,\n  setTotalNetworkConfigurations,\n  defaultNetworkConfigurationPerPage,\n  canEditNetworkConfiguration,\n}: {\n  networkConfigurationsPath: string\n  searchText: string\n  networks: NetworkConfiguration[]\n  updateNetworkConfigurationPath: string\n  removeNetworkConfigurationFunction: (networkId: string) => void\n  enabledForCodespaces: boolean\n  pageNumber: number\n  setTotalNetworkConfigurations: (page: number) => void\n  defaultNetworkConfigurationPerPage: number\n  canEditNetworkConfiguration: boolean\n}) {\n  const filteredNetworks = networks.filter(\n    item => !searchText || item.name.toLowerCase().includes(searchText.toLowerCase()),\n  )\n  const itemCount = filteredNetworks.length\n  const title = `${itemCount} ${itemCount === 1 ? 'item' : 'items'}`\n  announce(title)\n  const page = itemCount > 0 && !searchText ? pageNumber : 1\n  const filteredNetworksSlice = getNetworkConfigurationsChunk(\n    filteredNetworks,\n    defaultNetworkConfigurationPerPage,\n    page,\n  )\n\n  useEffect(() => {\n    setTotalNetworkConfigurations(itemCount)\n  }, [setTotalNetworkConfigurations, itemCount])\n\n  return (\n    <Box sx={{border: '1px solid', borderColor: 'border.muted', borderRadius: 2}}>\n      <ListView metadata={<ListViewMetadata title={title} assistiveAnnouncement={title} />} title={title}>\n        {filteredNetworksSlice.map(item => (\n          <NetworkConfigurationListItem\n            networkConfigurationsPath={networkConfigurationsPath}\n            key={item.id}\n            networkConfig={item}\n            updateNetworkConfigurationPath={updateNetworkConfigurationPath}\n            removeNetworkConfigurationPath={removeNetworkConfigurationPath}\n            removeNetworkConfigurationFunction={removeNetworkConfigurationFunction}\n            enabledForCodespaces={enabledForCodespaces}\n            canEditNetworkConfiguration={canEditNetworkConfiguration}\n          />\n        ))}\n      </ListView>\n    </Box>\n  )\n}\n\nfunction getNetworkConfigurationsChunk(\n  networkConfigurations: NetworkConfiguration[],\n  itemsPerPage: number,\n  pageNumber: number,\n) {\n  const start = (pageNumber - 1) * itemsPerPage\n  return networkConfigurations.slice(start, start + itemsPerPage)\n}\n\nfunction OrgDisabledEmptyStateCard() {\n  return (\n    <Box sx={{gap: 1, textAlign: 'center'}}>\n      <Box sx={{fontSize: 3, color: 'fg.default', fontWeight: 'bold'}}>\n        {NetworkConfigurationConsts.orgDisabledEmptyStateCardTitle}\n      </Box>\n      <Box sx={{color: 'fg.muted', flexWrap: 'wrap', fontSize: '14px'}}>\n        <Octicon icon={ShieldLockIcon} sx={{pr: 1}} />\n        {NetworkConfigurationConsts.orgDisabledEmptyStateCardDescription}\n      </Box>\n    </Box>\n  )\n}\n\ntry{ NetworkConfigurations.displayName ||= 'NetworkConfigurations' } catch {}\ntry{ EmptyStateCard.displayName ||= 'EmptyStateCard' } catch {}\ntry{ NetworkConfigurationActionMenu.displayName ||= 'NetworkConfigurationActionMenu' } catch {}\ntry{ NetworkConfigurationList.displayName ||= 'NetworkConfigurationList' } catch {}\ntry{ OrgDisabledEmptyStateCard.displayName ||= 'OrgDisabledEmptyStateCard' } catch {}","import {Box, FormControl, TextInput} from '@primer/react'\nimport {PrivateNetworkConsts} from '../constants/private-network-consts'\nimport type {PrivateNetwork} from '../classes/private-network'\n\ninterface IPrivateNetworkSummaryProps {\n  privateNetwork: PrivateNetwork | null\n}\n\nexport function PrivateNetworkSummary(props: IPrivateNetworkSummaryProps) {\n  return (\n    <>\n      <FormControl>\n        <FormControl.Label>{PrivateNetworkConsts.resourceNameLabel}</FormControl.Label>\n        <TextInput readOnly contrast sx={{width: '100%'}} value={props.privateNetwork?.resourceName ?? ''} />\n      </FormControl>\n      <FormControl>\n        <FormControl.Label>{PrivateNetworkConsts.azureSubscriptionIdLabel}</FormControl.Label>\n        <TextInput readOnly contrast sx={{width: '100%'}} value={props.privateNetwork?.subscription ?? ''} />\n      </FormControl>\n      <Box sx={{display: 'grid', gridTemplateColumns: '1fr 1fr', columnGap: 2, rowGap: 3}}>\n        <FormControl>\n          <FormControl.Label>{PrivateNetworkConsts.virtualNetworkLabel}</FormControl.Label>\n          <TextInput readOnly contrast sx={{width: '100%'}} value={props.privateNetwork?.virtualNetwork ?? ''} />\n        </FormControl>\n        <FormControl>\n          <FormControl.Label>{PrivateNetworkConsts.subnetLabel}</FormControl.Label>\n          <TextInput readOnly contrast sx={{width: '100%'}} value={props.privateNetwork?.subnet ?? ''} />\n        </FormControl>\n        <FormControl>\n          <FormControl.Label>{PrivateNetworkConsts.resourceGroupLabel}</FormControl.Label>\n          <TextInput readOnly contrast sx={{width: '100%'}} value={props.privateNetwork?.resourceGroup ?? ''} />\n        </FormControl>\n        <FormControl>\n          <FormControl.Label>{PrivateNetworkConsts.azureRegionLabel}</FormControl.Label>\n          <TextInput readOnly contrast sx={{width: '100%'}} value={props.privateNetwork?.location ?? ''} />\n        </FormControl>\n      </Box>\n    </>\n  )\n}\n\ntry{ PrivateNetworkSummary.displayName ||= 'PrivateNetworkSummary' } catch {}","import {Box, Button, FormControl, IconButton, TextInput} from '@primer/react'\nimport {PackageIcon, TrashIcon} from '@primer/octicons-react'\nimport {ListItemDescription} from '@github-ui/list-view/ListItemDescription'\nimport {ListItemLeadingContent} from '@github-ui/list-view/ListItemLeadingContent'\nimport {ListItemLeadingVisual} from '@github-ui/list-view/ListItemLeadingVisual'\nimport {ListItemMainContent} from '@github-ui/list-view/ListItemMainContent'\nimport {ListItemTitle} from '@github-ui/list-view/ListItemTitle'\nimport {ListItemMetadata} from '@github-ui/list-view/ListItemMetadata'\nimport {ListItem} from '@github-ui/list-view/ListItem'\nimport type {PrivateNetwork} from '../classes/private-network'\nimport {Dialog} from '@primer/react/experimental'\nimport {useCallback, useState} from 'react'\nimport {PrivateNetworkConsts} from '../constants/private-network-consts'\nimport {PrivateNetworkSummary} from './PrivateNetworkSummary'\n\ninterface IPrivateNetworkItemProps {\n  privateNetwork: PrivateNetwork\n  onRemove?: (removedPrivateNetwork: PrivateNetwork) => void\n}\n\nconst formBoxStyle = {\n  display: 'grid',\n  gridTemplateColumns: '1fr',\n  borderColor: 'border.default',\n  rowGap: 3,\n}\n\nexport function PrivateNetworkItem(props: IPrivateNetworkItemProps) {\n  const [showEditDialog, setShowEditDialog] = useState<boolean>(false)\n  const onEditDialogClose = useCallback(() => {\n    setShowEditDialog(false)\n  }, [])\n  const renderFooter = () => {\n    if (props.onRemove) {\n      return (\n        <Dialog.Footer\n          sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Button variant=\"danger\" onClick={() => props.onRemove && props.onRemove(props.privateNetwork)}>\n            Remove network\n          </Button>\n          <Button onClick={() => setShowEditDialog(false)}>Close</Button>\n        </Dialog.Footer>\n      )\n    }\n    return null\n  }\n  return (\n    <>\n      {showEditDialog && (\n        <Dialog\n          title={props.privateNetwork.resourceName}\n          onClose={onEditDialogClose}\n          renderFooter={renderFooter}\n          width=\"large\"\n        >\n          <Box sx={formBoxStyle}>\n            <FormControl>\n              <FormControl.Label>{PrivateNetworkConsts.azureNetworkResourceIdLabel}</FormControl.Label>\n              <TextInput type=\"text\" readOnly contrast sx={{width: '100%'}} value={props.privateNetwork.id} />\n            </FormControl>\n            <PrivateNetworkSummary privateNetwork={props.privateNetwork} />\n          </Box>\n        </Dialog>\n      )}\n      <ListItem\n        title={\n          <ListItemTitle\n            value={props.privateNetwork.resourceName}\n            onClick={() => setShowEditDialog(true)}\n            containerSx={{display: 'flex', flexDirection: 'row'}}\n            anchorSx={{flexGrow: 1}}\n          />\n        }\n        metadata={\n          <ListItemMetadata alignment=\"right\">\n            {props.onRemove && (\n              // eslint-disable-next-line primer-react/a11y-remove-disable-tooltip\n              <IconButton\n                unsafeDisableTooltip={true}\n                icon={TrashIcon}\n                aria-label=\"Delete icon\"\n                size=\"medium\"\n                variant=\"invisible\"\n                onClick={() => props.onRemove && props.onRemove(props.privateNetwork)}\n                sx={{color: 'fg.muted'}}\n              />\n            )}\n          </ListItemMetadata>\n        }\n      >\n        <ListItemLeadingContent>\n          <ListItemLeadingVisual icon={PackageIcon} description=\"Private Network Icon\" />\n        </ListItemLeadingContent>\n        <ListItemMainContent>\n          <ListItemDescription>\n            Subscription: {props.privateNetwork.subscription} · Region: {props.privateNetwork.location} · Subnet:{' '}\n            {props.privateNetwork.subnet}\n          </ListItemDescription>\n        </ListItemMainContent>\n      </ListItem>\n    </>\n  )\n}\n\ntry{ PrivateNetworkItem.displayName ||= 'PrivateNetworkItem' } catch {}","import {Box, Button} from '@primer/react'\nimport {ListView} from '@github-ui/list-view'\nimport type {PrivateNetwork} from '../classes/private-network'\nimport {PrivateNetworkConsts} from '../constants/private-network-consts'\nimport {PrivateNetworkItem} from './PrivateNetworkItem'\n\ninterface ICommonProps {\n  ariaLabelledBy?: string\n  ariaDescribedBy?: string\n  validationStatus?: 'error' | 'success'\n}\nexport interface IEmptyStateCardProps extends ICommonProps {\n  privateNetworks: []\n  enabledForCodespaces: boolean\n  onShowNewDialog: () => void\n}\nexport interface IPopulatedListProps extends ICommonProps {\n  privateNetworks: PrivateNetwork[]\n  onRemove?: (removedPrivateNetwork: PrivateNetwork) => void\n}\nexport type IPrivateNetworkListProps = IEmptyStateCardProps | IPopulatedListProps\n\nexport function PrivateNetworkList(props: IPrivateNetworkListProps) {\n  return (\n    <Box\n      sx={{\n        border: '1px solid',\n        borderColor: props.validationStatus === 'error' ? 'danger.emphasis' : 'border.default',\n        borderRadius: '6px',\n        width: '100%',\n      }}\n    >\n      {props.privateNetworks.length === 0 ? (\n        <EmptyStateCard {...(props as IEmptyStateCardProps)} />\n      ) : (\n        <ListView title=\"Private Network List\" variant=\"default\" ariaLabelledBy={props.ariaLabelledBy}>\n          {props.privateNetworks.map(network => {\n            return (\n              <PrivateNetworkItem\n                key={network.id}\n                privateNetwork={network}\n                onRemove={(props as IPopulatedListProps).onRemove}\n              />\n            )\n          })}\n        </ListView>\n      )}\n    </Box>\n  )\n}\n\nfunction EmptyStateCard(cardProps: IEmptyStateCardProps) {\n  return (\n    <Box\n      sx={{\n        padding: 48,\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <Box sx={{fontSize: '16px', color: 'fg.default', fontWeight: 'bold'}}>\n        {PrivateNetworkConsts.noAzurePrivateNetworksAdded}\n      </Box>\n      {!cardProps.enabledForCodespaces && (\n        <Button\n          onClick={() => cardProps.onShowNewDialog()}\n          aria-labelledby={cardProps.ariaLabelledBy}\n          aria-describedby={cardProps.ariaDescribedBy}\n          sx={{marginTop: 3}}\n        >\n          {PrivateNetworkConsts.addAzureVirtualNetwork}\n        </Button>\n      )}\n    </Box>\n  )\n}\n\ntry{ PrivateNetworkList.displayName ||= 'PrivateNetworkList' } catch {}\ntry{ EmptyStateCard.displayName ||= 'EmptyStateCard' } catch {}","import {Box, FormControl, RadioGroup, Radio, Label} from '@primer/react'\nimport {PrivateNetworkConsts} from '../constants/private-network-consts'\nimport {ComputeService} from '../classes/network-configuration'\n\ninterface IAllowedServicesOptionsProps {\n  enabledForCodespaces: boolean\n  actionsSelectable: boolean\n  selectedService: ComputeService\n  setSelectedService: (service: ComputeService) => void\n}\n\nexport function AllowedServicesOptions(props: IAllowedServicesOptionsProps) {\n  // Codespaces feature flag is off -- nothing the user can change\n  if (!props.enabledForCodespaces) {\n    return null\n  }\n  return (\n    <Box sx={{mt: '16px', display: 'flex', flexDirection: 'column'}}>\n      <RadioGroup name={props.selectedService} onChange={s => props.setSelectedService(s as ComputeService)}>\n        <RadioGroup.Label>Services</RadioGroup.Label>\n        <RadioGroup.Caption>Select the GitHub service to use with the network.</RadioGroup.Caption>\n        <Box\n          sx={{\n            borderWidth: 1,\n            borderStyle: 'solid',\n            borderColor: 'border.default',\n            borderRadius: 2,\n          }}\n        >\n          <FormControl key={ComputeService.None} sx={{margin: '16px'}}>\n            <Radio value={ComputeService.None} defaultChecked={props.selectedService === ComputeService.None} />\n            <FormControl.Label>{PrivateNetworkConsts.allowedServicesNoneLabel}</FormControl.Label>\n            <FormControl.Caption>{PrivateNetworkConsts.allowedServicesNoneDescription}</FormControl.Caption>\n          </FormControl>\n          <FormControl disabled={!props.actionsSelectable} key={ComputeService.Actions} sx={{margin: '16px'}}>\n            <Radio value={ComputeService.Actions} defaultChecked={props.selectedService === ComputeService.Actions} />\n            <FormControl.Label>{PrivateNetworkConsts.allowedServicesActionsLabel}</FormControl.Label>\n            <FormControl.Caption>{PrivateNetworkConsts.allowedServicesActionsDescription}</FormControl.Caption>\n          </FormControl>\n          <FormControl key={ComputeService.Codespaces} sx={{margin: '16px'}}>\n            <Radio\n              value={ComputeService.Codespaces}\n              defaultChecked={props.selectedService === ComputeService.Codespaces}\n            />\n            <FormControl.Label>\n              {PrivateNetworkConsts.allowedServicesCodespacesLabel} <Label variant=\"success\">Beta</Label>\n            </FormControl.Label>\n            <FormControl.Caption>{PrivateNetworkConsts.allowedServicesCodespacesDescription}</FormControl.Caption>\n          </FormControl>\n        </Box>\n      </RadioGroup>\n    </Box>\n  )\n}\n\ntry{ AllowedServicesOptions.displayName ||= 'AllowedServicesOptions' } catch {}","import {Box, Flash, FormControl, Link, TextInput} from '@primer/react'\nimport {useState, useCallback} from 'react'\nimport {verifiedFetchJSON} from '@github-ui/verified-fetch'\nimport type {PrivateNetwork} from '../classes/private-network'\nimport {PrivateNetworkConsts} from '../constants/private-network-consts'\nimport {PrivateNetworkSummary} from '../components/PrivateNetworkSummary'\nimport {NetworkConfigurationConsts} from '../constants/network-configuration-consts'\nimport {Dialog} from '@primer/react/experimental'\n\nconst formBoxStyle = {\n  display: 'grid',\n  gridTemplateColumns: '1fr',\n  borderColor: 'border.default',\n  rowGap: 3,\n}\n\nenum ValidationResult {\n  None,\n  Success,\n  EmptyId,\n  NotFound,\n  NetworkAlreadyRegistered, // Network is registered to a different configuration\n  NetworkAlreadyInConfiguration, // Network is already in the configuration\n  NetworkInDifferentOrg,\n  ApiError,\n}\n\nexport interface IAddPrivateNetworkDialogProps {\n  newPrivateNetworkPath: string\n  onAdd: (privateNetwork: PrivateNetwork) => void\n  onDismiss: () => void\n  currentResourceId?: string | null\n  existingPrivateNetwork: PrivateNetwork[]\n}\n\nexport function AddPrivateNetworkDialog(props: IAddPrivateNetworkDialogProps) {\n  const [resourceIdValidationResult, setResourceIdValidationResult] = useState(ValidationResult.None)\n  const [validationDetails, setValidationDetails] = useState<string>('')\n  const [resourceIdLoading, setResourceIdLoading] = useState<boolean>(false)\n  const [privateNetwork, setPrivateNetwork] = useState<PrivateNetwork | null>(null)\n\n  const validateResourceId = async (settingsIdString: string) => {\n    clearForm()\n    if (settingsIdString.trim() === '') {\n      setResourceIdValidationResult(ValidationResult.EmptyId)\n      return\n    }\n    setResourceIdLoading(true)\n    try {\n      if (props.existingPrivateNetwork.find(network => network.id === settingsIdString)) {\n        setResourceIdValidationResult(ValidationResult.NetworkAlreadyInConfiguration)\n        return\n      }\n\n      const result = await verifiedFetchJSON(props.newPrivateNetworkPath, {\n        method: 'PUT',\n        body: {\n          networkSettingsId: settingsIdString,\n        },\n      })\n\n      const data = await result.json()\n      if (result.ok) {\n        if (props.currentResourceId === data.privateNetwork.id) {\n          setResourceIdValidationResult(ValidationResult.Success)\n          setPrivateNetwork(data.privateNetwork)\n        } else if (data.privateNetwork.networkConfigurationId) {\n          setResourceIdValidationResult(ValidationResult.NetworkAlreadyRegistered)\n        } else {\n          setResourceIdValidationResult(ValidationResult.Success)\n          setPrivateNetwork(data.privateNetwork)\n        }\n      } else {\n        switch (data.error.code) {\n          case 'NotFound':\n            setResourceIdValidationResult(ValidationResult.NotFound)\n            break\n          case 'InvalidOrganizationId':\n          case 'InvalidBusinessId':\n            setResourceIdValidationResult(ValidationResult.NetworkInDifferentOrg)\n            break\n          default:\n            setValidationDetails(data.error.message)\n            setResourceIdValidationResult(ValidationResult.ApiError)\n            break\n        }\n      }\n    } catch (e: unknown) {\n      const message = e instanceof Error ? e.message : JSON.stringify(e)\n      setValidationDetails(message)\n      setResourceIdValidationResult(ValidationResult.ApiError)\n    } finally {\n      setResourceIdLoading(false)\n    }\n  }\n\n  function clearForm() {\n    setResourceIdLoading(false)\n    setValidationDetails('')\n    setResourceIdValidationResult(ValidationResult.None)\n    setPrivateNetwork(null)\n  }\n\n  const onDismiss = props.onDismiss\n  const onNewDialogClose = useCallback(() => {\n    clearForm()\n    onDismiss()\n  }, [onDismiss])\n\n  const getFormValidationComponent = () => {\n    switch (resourceIdValidationResult) {\n      case ValidationResult.Success:\n        return (\n          <FormControl.Validation id=\"settings-id-input-validation\" variant=\"success\">\n            {PrivateNetworkConsts.validSettingsId}\n          </FormControl.Validation>\n        )\n      case ValidationResult.NotFound:\n        return (\n          <FormControl.Validation id=\"settings-id-input-validation\" variant=\"error\">\n            {PrivateNetworkConsts.settingsIdNotFound}\n          </FormControl.Validation>\n        )\n      case ValidationResult.NetworkAlreadyRegistered:\n        return (\n          <FormControl.Validation id=\"settings-id-input-validation\" variant=\"error\">\n            {PrivateNetworkConsts.settingsIdAlreadyInUse}\n          </FormControl.Validation>\n        )\n      case ValidationResult.NetworkAlreadyInConfiguration:\n        return (\n          <FormControl.Validation id=\"settings-id-input-validation\" variant=\"error\">\n            {PrivateNetworkConsts.settingsIdAlreadyInCurrentConfiguration}\n          </FormControl.Validation>\n        )\n      case ValidationResult.NetworkInDifferentOrg:\n        return (\n          <FormControl.Validation id=\"settings-id-input-validation\" variant=\"error\">\n            {PrivateNetworkConsts.settingsBelongsToAnotherOrg}\n          </FormControl.Validation>\n        )\n      case ValidationResult.ApiError:\n        return (\n          <FormControl.Validation id=\"settings-id-input-validation\" variant=\"error\">\n            <p>\n              {PrivateNetworkConsts.unexpectedErrorOccurred}\n              {validationDetails}\n            </p>\n            <Link href={PrivateNetworkConsts.resourceIdLearnMoreLink}>\n              {PrivateNetworkConsts.resourceIdLearnMoreText}\n            </Link>\n          </FormControl.Validation>\n        )\n      case ValidationResult.None:\n      case ValidationResult.EmptyId:\n      default:\n        return <></>\n    }\n  }\n\n  return (\n    <Dialog\n      title={PrivateNetworkConsts.addAzureVirtualNetwork}\n      onClose={onNewDialogClose}\n      width=\"large\"\n      footerButtons={[\n        {\n          buttonType: 'normal',\n          content: 'Cancel',\n          onClick: onNewDialogClose,\n        },\n        {\n          buttonType: 'primary',\n          content: 'Add Azure Virtual Network',\n          onClick: () => props.onAdd(privateNetwork!),\n          disabled: resourceIdValidationResult !== ValidationResult.Success,\n        },\n      ]}\n    >\n      <div>\n        <Box sx={{pb: 2}}>\n          <Flash>\n            Limited Azure regions are supported during public beta, to request an additional region{' '}\n            <Link inline href={NetworkConfigurationConsts.formLink}>\n              please fill out this form\n            </Link>\n            . You can view{' '}\n            <Link inline href={NetworkConfigurationConsts.docLink}>\n              supported regions in our docs\n            </Link>\n            .\n          </Flash>\n        </Box>\n        <Box sx={formBoxStyle}>\n          <FormControl required>\n            <FormControl.Label>{PrivateNetworkConsts.azureNetworkResourceIdLabel}</FormControl.Label>\n            <TextInput\n              sx={{width: '100%'}}\n              onBlur={e => validateResourceId(e.target.value.trim())}\n              aria-invalid={\n                resourceIdValidationResult !== ValidationResult.None &&\n                resourceIdValidationResult !== ValidationResult.Success\n              }\n              loading={resourceIdLoading}\n            />\n            {getFormValidationComponent()}\n            {(resourceIdValidationResult === ValidationResult.None ||\n              resourceIdValidationResult === ValidationResult.EmptyId) && (\n              <FormControl.Caption id=\"settings-id-input-caption\">\n                <Link href={PrivateNetworkConsts.resourceIdLearnMoreLink}>\n                  {PrivateNetworkConsts.settingsIdCaption}\n                </Link>\n              </FormControl.Caption>\n            )}\n          </FormControl>\n          <PrivateNetworkSummary privateNetwork={privateNetwork} />\n        </Box>\n      </div>\n    </Dialog>\n  )\n}\n\ntry{ AddPrivateNetworkDialog.displayName ||= 'AddPrivateNetworkDialog' } catch {}","import {Breadcrumbs, Link} from '@primer/react'\nimport {ArrowLeftIcon} from '@primer/octicons-react'\n\ninterface INetworkConfigurationHeadingProps {\n  link: string\n  previousPageText: string\n  currentPageText: string\n  isBusiness: boolean\n}\n\nexport function NetworkConfigurationHeading(props: INetworkConfigurationHeadingProps) {\n  return (\n    <>\n      {props.isBusiness ? (\n        <div className=\"pb-3\">\n          <Link href={props.link}>\n            <ArrowLeftIcon size={16} className=\"mr-2\" />\n            Back to {props.previousPageText}\n          </Link>\n        </div>\n      ) : (\n        <Breadcrumbs sx={{mb: 3}}>\n          <Breadcrumbs.Item href={props.link}>{props.previousPageText}</Breadcrumbs.Item>\n          <Breadcrumbs.Item selected>{props.currentPageText}</Breadcrumbs.Item>\n        </Breadcrumbs>\n      )}\n    </>\n  )\n}\n\ntry{ NetworkConfigurationHeading.displayName ||= 'NetworkConfigurationHeading' } catch {}","import {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {Box, Button, Flash, FormControl, Heading, PageLayout, TextInput, Tooltip} from '@primer/react'\nimport {AlertIcon} from '@primer/octicons-react'\nimport {PrivateNetworkConsts} from '../constants/private-network-consts'\nimport {useEffect, useRef, useState} from 'react'\nimport {useNavigate} from '@github-ui/use-navigate'\nimport {PrivateNetworkList} from '../components/PrivateNetworkList'\nimport {NetworkConfigurationConsts} from '../constants/network-configuration-consts'\nimport type {PrivateNetwork} from '../classes/private-network'\nimport {AllowedServicesOptions} from '../components/AllowedServicesOptions'\nimport {AddPrivateNetworkDialog} from '../components/AddPrivateNetworkDialog'\nimport {NetworkConfigurationHeading} from '../components/NetworkConfigurationHeading'\nimport {ComputeService} from '../classes/network-configuration'\nimport {\n  PrivateNetworkValidationResult,\n  NameValidationResult,\n  hasNameValidationError,\n  getNameValidationError,\n  hasPrivateNetworkValidationError,\n  getPrivateNetworkValidationError,\n  validateNetworkConfigurationName,\n  createOrUpdateNetworkConfiguration,\n} from '../helpers/network-configuration-helpers'\n\nexport interface CreatePrivateNetworkPayload {\n  networkConfigurationsPath: string\n  newPrivateNetworkPath: string\n  updateNetworkConfigurationPath: string\n  findNetworkConfigurationPath: string\n  enabledForCodespaces: boolean\n  computeService: ComputeService\n  isBusiness: boolean\n}\n\nexport function CreatePrivateNetwork() {\n  const nameInputRef = useRef<HTMLInputElement>(null)\n  const navigate = useNavigate()\n  const payload = useRoutePayload<CreatePrivateNetworkPayload>()\n  const [nameValidationResult, setNameValidationResult] = useState(NameValidationResult.None)\n  const [nameValidationIsBusy, setNameValidationIsBusy] = useState(false)\n  const [creationErrorMessage, setCreationErrorMessage] = useState('')\n  const [networkConfigurationName, setNetworkConfigurationName] = useState('')\n  const [showNewDialog, setShowNewDialog] = useState<boolean>(false)\n  const [privateNetworks, setPrivateNetworks] = useState<PrivateNetwork[]>([])\n  const [privateNetworkValidationResult, setPrivateNetworkValidationResult] = useState(\n    PrivateNetworkValidationResult.None,\n  )\n  const serviceAgnostic = payload.enabledForCodespaces\n  const [selectedService, setSelectedService] = useState<ComputeService>(\n    payload.enabledForCodespaces ? ComputeService.None : ComputeService.Actions,\n  )\n  const [canAddNewNetwork, setCanAddNewNetwork] = useState<boolean>(\n    selectedService === ComputeService.Codespaces || privateNetworks.length === 0,\n  )\n\n  useEffect(() => {\n    setCanAddNewNetwork(selectedService === ComputeService.Codespaces || privateNetworks.length === 0)\n  }, [selectedService, privateNetworks])\n\n  const newNetworkButtonClick = () => {\n    if (canAddNewNetwork) {\n      setShowNewDialog(true)\n    }\n  }\n\n  const registerNetworkConfiguration = async () => {\n    // Validation\n    if (privateNetworks.length === 0) {\n      // This is the only place we can do this, but don't return so we can focus the name field if it's invalid\n      setPrivateNetworkValidationResult(PrivateNetworkValidationResult.MissingNetwork)\n      return\n    }\n\n    if (nameValidationResult === NameValidationResult.None) {\n      // Skip server-side checks\n      await validateName(networkConfigurationName, true)\n      return\n    }\n\n    // Handle invalid values\n    if (hasNameValidationError(nameValidationResult)) {\n      nameInputRef.current?.focus()\n      return\n    }\n\n    const result = await createOrUpdateNetworkConfiguration(\n      payload.updateNetworkConfigurationPath,\n      payload.networkConfigurationsPath,\n      {\n        privateNetworkIds: privateNetworks.map(n => n.id),\n        computeService: selectedService,\n        name: networkConfigurationName.trim(),\n      },\n    )\n\n    if (result.success) {\n      setCreationErrorMessage('')\n      navigate(result.link)\n    } else {\n      switch (result.code) {\n        case 'NetworkResourceInUse':\n          setPrivateNetworkValidationResult(PrivateNetworkValidationResult.NetworkResourceInUse)\n          break\n        case 'UnsupportedResourceLocation':\n          setPrivateNetworkValidationResult(PrivateNetworkValidationResult.UnsupportedResourceLocation)\n          break\n        case 'DisplayNameInUse':\n          setNameValidationResult(NameValidationResult.DisplayNameInUse)\n          nameInputRef.current?.focus()\n          break\n        default:\n          setCreationErrorMessage(`There was an error creating the network configuration: ${result.message}`)\n          break\n      }\n    }\n  }\n\n  const onNewDialogClose = () => {\n    setShowNewDialog(false)\n  }\n\n  const onNewDialogAccept = (newPrivateNetwork: PrivateNetwork) => {\n    setPrivateNetworks(networks => [...networks, newPrivateNetwork])\n    setPrivateNetworkValidationResult(PrivateNetworkValidationResult.None)\n    setShowNewDialog(false)\n  }\n\n  const removePrivateNetwork = (removedPrivateNetwork: PrivateNetwork) => {\n    setPrivateNetworks(privateNetworks.filter(n => n.id !== removedPrivateNetwork.id))\n    setPrivateNetworkValidationResult(PrivateNetworkValidationResult.None)\n  }\n\n  async function validateName(name: string, formatOnly?: boolean): Promise<void> {\n    setNameValidationIsBusy(true)\n    try {\n      const validationResult = formatOnly\n        ? await validateNetworkConfigurationName(name)\n        : await validateNetworkConfigurationName(name, payload.findNetworkConfigurationPath)\n      setNameValidationResult(validationResult)\n      if (validationResult === NameValidationResult.Success) {\n        setNetworkConfigurationName(name)\n      } else {\n        setNetworkConfigurationName('')\n      }\n    } finally {\n      setNameValidationIsBusy(false)\n    }\n  }\n\n  const addNewNetworkButton = (\n    <Button\n      onClick={newNetworkButtonClick}\n      aria-labelledby=\"private-network-title\"\n      aria-describedby=\"private-network-caption private-network-validation\"\n      variant=\"primary\"\n      inactive={!canAddNewNetwork}\n    >\n      {PrivateNetworkConsts.addAzureVirtualNetwork}\n    </Button>\n  )\n\n  return (\n    <PageLayout containerWidth=\"full\" padding=\"none\">\n      <PageLayout.Header>\n        <div className=\"border-bottom\">\n          <NetworkConfigurationHeading\n            link={payload.networkConfigurationsPath}\n            previousPageText={NetworkConfigurationConsts.hostedComputeNetworkingTitle}\n            currentPageText={NetworkConfigurationConsts.newNetworkConfiguration}\n            isBusiness={payload.isBusiness}\n          />\n          <Heading as=\"h2\" className=\"h2 text-normal\">\n            {NetworkConfigurationConsts.newNetworkConfiguration}\n          </Heading>\n          <p className=\"color-fg-muted mb-2\">\n            {serviceAgnostic\n              ? PrivateNetworkConsts.setUpPrivateNetworkDescriptionServiceAgnostic\n              : PrivateNetworkConsts.setUpPrivateNetworkDescription}\n          </p>\n        </div>\n      </PageLayout.Header>\n      <PageLayout.Content as=\"div\">\n        {creationErrorMessage.trim().length > 0 && (\n          <div className=\"pb-4\">\n            <Flash variant=\"danger\">\n              <AlertIcon size={16} />\n              {creationErrorMessage}\n            </Flash>\n          </div>\n        )}\n        <Box sx={{mb: '16px'}} aria-live=\"polite\">\n          <FormControl required>\n            <FormControl.Label>{NetworkConfigurationConsts.nameLabel}</FormControl.Label>\n            <TextInput\n              type=\"text\"\n              sx={{width: '30%'}}\n              onBlur={e => validateName(e.target.value)}\n              aria-describedby=\"name-input-caption name-input-validation\"\n              loading={nameValidationIsBusy}\n              ref={nameInputRef}\n            />\n            {hasNameValidationError(nameValidationResult) && (\n              <FormControl.Validation id=\"name-input-validation\" variant=\"error\">\n                {getNameValidationError(nameValidationResult)}\n              </FormControl.Validation>\n            )}\n            {!hasNameValidationError(nameValidationResult) && (\n              <FormControl.Caption id=\"name-input-caption\">{PrivateNetworkConsts.invalidNameError}</FormControl.Caption>\n            )}\n          </FormControl>\n        </Box>\n        <div>\n          <Box sx={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n            <div>\n              <strong id=\"private-network-title\">{PrivateNetworkConsts.azurePrivateNetworking}</strong>\n              <p className=\"color-fg-muted text-small\" id=\"private-network-caption\">\n                {serviceAgnostic\n                  ? PrivateNetworkConsts.azurePrivateNetworkingDescriptionServiceAgnostic\n                  : PrivateNetworkConsts.azurePrivateNetworkingDescription}\n              </p>\n            </div>\n            {payload.enabledForCodespaces && (\n              <Box sx={{justifyContent: 'flex-end'}}>\n                {canAddNewNetwork ? (\n                  addNewNetworkButton\n                ) : (\n                  <Tooltip aria-label=\"Support for multiple networks is currently only available with Codespaces\" wrap>\n                    {addNewNetworkButton}\n                  </Tooltip>\n                )}\n              </Box>\n            )}\n          </Box>\n          {showNewDialog && (\n            <AddPrivateNetworkDialog\n              newPrivateNetworkPath={payload.newPrivateNetworkPath}\n              onDismiss={onNewDialogClose}\n              onAdd={onNewDialogAccept}\n              currentResourceId={null}\n              existingPrivateNetwork={privateNetworks}\n            />\n          )}\n          <div aria-live=\"polite\">\n            <FormControl required>\n              <FormControl.Label visuallyHidden={true}>{PrivateNetworkConsts.azurePrivateNetworking}</FormControl.Label>\n              <PrivateNetworkList\n                privateNetworks={privateNetworks}\n                validationStatus={\n                  hasPrivateNetworkValidationError(privateNetworkValidationResult) ? 'error' : 'success'\n                }\n                onRemove={removePrivateNetwork}\n                onShowNewDialog={() => setShowNewDialog(true)}\n                enabledForCodespaces={payload.enabledForCodespaces}\n                ariaLabelledBy=\"private-network-title\"\n                ariaDescribedBy=\"private-network-caption private-network-validation\"\n              />\n              {hasPrivateNetworkValidationError(privateNetworkValidationResult) && (\n                <FormControl.Validation id=\"private-network-validation\" variant=\"error\">\n                  {getPrivateNetworkValidationError(\n                    privateNetworkValidationResult,\n                    privateNetworks[privateNetworks.length - 1]?.location,\n                  )}\n                </FormControl.Validation>\n              )}\n            </FormControl>\n          </div>\n          {payload.enabledForCodespaces && (\n            <AllowedServicesOptions\n              enabledForCodespaces={payload.enabledForCodespaces}\n              actionsSelectable={privateNetworks.length <= 1}\n              selectedService={selectedService}\n              setSelectedService={setSelectedService}\n            />\n          )}\n        </div>\n      </PageLayout.Content>\n      <PageLayout.Footer>\n        <Button variant=\"primary\" onClick={registerNetworkConfiguration}>\n          {PrivateNetworkConsts.createConfiguration}\n        </Button>\n      </PageLayout.Footer>\n    </PageLayout>\n  )\n}\n\ntry{ CreatePrivateNetwork.displayName ||= 'CreatePrivateNetwork' } catch {}","import {ListItemDescription} from '@github-ui/list-view/ListItemDescription'\nimport {ListItemMainContent} from '@github-ui/list-view/ListItemMainContent'\nimport {ListItemTitle} from '@github-ui/list-view/ListItemTitle'\nimport {ListItemMetadata} from '@github-ui/list-view/ListItemMetadata'\nimport {ListItem} from '@github-ui/list-view/ListItem'\nimport {IconButton} from '@primer/react'\nimport {LinkExternalIcon} from '@primer/octicons-react'\nimport {NetworkConfigurationConsts} from '../constants/network-configuration-consts'\nimport {useNavigate} from '@github-ui/use-navigate'\n\ninterface IRunnerGroupListItemProps {\n  runnerGroupPath: string\n  id: string\n  name: string\n  allowPublic: boolean\n  visibility: string\n  selectedTargetsCount: number\n}\n\nexport function RunnerGroupListItem(props: IRunnerGroupListItemProps) {\n  const navigate = useNavigate()\n  const publicRepo = props.allowPublic ? 'including' : 'excluding'\n  const numberOfSelected = props.visibility === 'Selected' ? ` (${props.selectedTargetsCount})` : ''\n  const runnerGroupItemUrl = NetworkConfigurationConsts.runnerGroupItemUrl(props.runnerGroupPath, props.id)\n  return (\n    <>\n      <ListItem\n        title={<ListItemTitle value={props.name} onClick={() => navigate(runnerGroupItemUrl)} />}\n        metadata={\n          <ListItemMetadata alignment=\"right\">\n            {/* eslint-disable-next-line primer-react/a11y-remove-disable-tooltip */}\n            <IconButton\n              unsafeDisableTooltip={true}\n              icon={LinkExternalIcon}\n              aria-label=\"Edit icon\"\n              size=\"medium\"\n              variant=\"invisible\"\n              sx={{color: 'fg.muted'}}\n              onClick={() => navigate(runnerGroupItemUrl)}\n            />\n          </ListItemMetadata>\n        }\n        sx={{pl: 2}}\n      >\n        <ListItemMainContent>\n          <ListItemDescription>\n            {props.visibility} organization{numberOfSelected}, {publicRepo} public repositories\n          </ListItemDescription>\n        </ListItemMainContent>\n      </ListItem>\n    </>\n  )\n}\n\ntry{ RunnerGroupListItem.displayName ||= 'RunnerGroupListItem' } catch {}","import {\n  ActionMenu,\n  ActionList,\n  Box,\n  Button,\n  Flash,\n  Heading,\n  IconButton,\n  Link,\n  Octicon,\n  PageLayout,\n  RelativeTime,\n} from '@primer/react'\nimport {Blankslate} from '@primer/react/drafts'\nimport type {NetworkConfiguration, RunnerGroup} from '../classes/network-configuration'\nimport type {PrivateNetwork} from '../classes/private-network'\nimport {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {KebabHorizontalIcon, AlertIcon} from '@primer/octicons-react'\nimport {NetworkConfigurationConsts} from '../constants/network-configuration-consts'\nimport {DisableDialog} from '../components/DisableDialog'\nimport {DeleteDialog} from '../components/DeleteDialog'\nimport {useState} from 'react'\nimport {useNavigate} from '@github-ui/use-navigate'\n// eslint-disable-next-line no-restricted-imports\nimport {useToastContext} from '@github-ui/toast/ToastContext'\nimport {ListView} from '@github-ui/list-view'\nimport {ListViewMetadata} from '@github-ui/list-view/ListViewMetadata'\nimport {RunnerGroupListItem} from '../components/RunnerGroupListItem'\nimport {PrivateNetworkList} from '../components/PrivateNetworkList'\nimport {NetworkConfigurationHeading} from '../components/NetworkConfigurationHeading'\nimport {ComputeService} from '../classes/network-configuration'\nimport {createOrUpdateNetworkConfiguration, type IUpdatePayload} from '../helpers/network-configuration-helpers'\n\nexport interface NetworkConfigurationSettingsPayload {\n  networkConfiguration: NetworkConfiguration\n  privateNetworks: PrivateNetwork[]\n  networkConfigurationsPath: string\n  updateNetworkConfigurationPath: string\n  removeNetworkConfigurationPath: string\n  runnerGroupPath: string\n  enabledForCodespaces: boolean\n  isBusiness: boolean\n  canEditNetworkConfiguration: boolean\n}\n\nexport function NetworkConfigurationSettings() {\n  const payload = useRoutePayload<NetworkConfigurationSettingsPayload>()\n  const navigate = useNavigate()\n  const {addToast} = useToastContext()\n  const [configurationDisabled, setConfigurationDisabled] = useState(\n    payload.networkConfiguration.computeService === ComputeService.None,\n  )\n  const runnerGroups: RunnerGroup[] = payload.networkConfiguration.runnerGroups\n  const enableConfigurationForActions = async () => {\n    try {\n      const request_body: IUpdatePayload = {\n        configurationId: payload.networkConfiguration.id,\n        computeService: ComputeService.Actions,\n      }\n\n      const result = await createOrUpdateNetworkConfiguration(\n        payload.updateNetworkConfigurationPath,\n        payload.networkConfigurationsPath,\n        request_body,\n      )\n\n      if (result.success) {\n        setConfigurationDisabled(false)\n        // eslint-disable-next-line @github-ui/dotcom-primer/toast-migration\n        addToast({\n          type: 'success',\n          message: 'Service updated successfully',\n        })\n      } else {\n        // eslint-disable-next-line @github-ui/dotcom-primer/toast-migration\n        addToast({\n          type: 'error',\n          message: 'There was an error updating the service',\n        })\n      }\n    } catch (e) {\n      // eslint-disable-next-line @github-ui/dotcom-primer/toast-migration\n      addToast({\n        type: 'error',\n        message: 'There was an error updating the service',\n      })\n    }\n  }\n\n  const navigateToEdit = () => {\n    navigate(\n      NetworkConfigurationConsts.editNetworkConfigurationPath(\n        payload.networkConfigurationsPath,\n        payload.networkConfiguration.id,\n      ),\n    )\n  }\n\n  return (\n    <PageLayout containerWidth=\"full\" sx={{padding: 0}}>\n      <PageLayout.Header>\n        <NetworkConfigurationHeading\n          link={payload.networkConfigurationsPath}\n          previousPageText={NetworkConfigurationConsts.hostedComputeNetworkingTitle}\n          currentPageText={payload.networkConfiguration.name}\n          isBusiness={payload.isBusiness}\n        />\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            borderBottom: '1px solid var(--borderColor-default, var(--color-border-default))',\n          }}\n        >\n          <div>\n            <Heading as=\"h2\" className=\"h2 text-normal\">\n              {payload.networkConfiguration.name}\n            </Heading>\n            <p className=\"color-fg-muted\">\n              {payload.networkConfiguration.service} created{' '}\n              <RelativeTime date={new Date(payload.networkConfiguration.createdOn)} tense=\"past\" />\n            </p>\n          </div>\n          {payload.canEditNetworkConfiguration && (\n            <Box sx={{display: 'flex', flexDirection: 'row', gap: 2}}>\n              <Button onClick={navigateToEdit}>Edit configuration</Button>\n              {!configurationDisabled && !payload.enabledForCodespaces ? (\n                <DisableDeleteActionMenu\n                  name={payload.networkConfiguration.name}\n                  id={payload.networkConfiguration.id}\n                  removeNetworkConfigurationPath={payload.removeNetworkConfigurationPath}\n                  updateNetworkConfigurationPath={payload.updateNetworkConfigurationPath}\n                  networkConfigurationsPath={payload.networkConfigurationsPath}\n                  setConfigurationDisabled={setConfigurationDisabled}\n                  enabledForCodespaces={payload.enabledForCodespaces}\n                />\n              ) : (\n                <DeleteActionMenu\n                  name={payload.networkConfiguration.name}\n                  id={payload.networkConfiguration.id}\n                  removeNetworkConfigurationPath={payload.removeNetworkConfigurationPath}\n                  networkConfigurationsPath={payload.networkConfigurationsPath}\n                  enabledForCodespaces={payload.enabledForCodespaces}\n                />\n              )}\n            </Box>\n          )}\n        </Box>\n      </PageLayout.Header>\n      <PageLayout.Content as=\"div\">\n        <ConfigDisabledFlash\n          enabledForCodespaces={payload.enabledForCodespaces}\n          configurationDisabled={configurationDisabled}\n          enableConfigurationForActions={enableConfigurationForActions}\n          canEditNetworkConfiguration={payload.canEditNetworkConfiguration}\n        />\n        <Box sx={{display: 'flex', flexDirection: 'column', gap: 5}}>\n          <Box sx={{display: 'flex', flexDirection: 'column', gap: 2}}>\n            <strong>Azure Virtual Network</strong>\n            <PrivateNetworkList privateNetworks={payload.privateNetworks} />\n          </Box>\n          {(!payload.enabledForCodespaces ||\n            payload.networkConfiguration.computeService === ComputeService.Actions) && (\n            <div>\n              <Box sx={{pb: 3}}>\n                <Heading as=\"h3\" sx={{fontSize: 3, fontWeight: 'normal'}}>\n                  Runner groups using this configuration\n                </Heading>\n                <p className=\"color-fg-muted mb-0\">\n                  Assign this configuration to a runner group to apply the network settings to GitHub-hosted runners.{' '}\n                  <Link inline href={NetworkConfigurationConsts.runnerGroupNetworkingLink}>\n                    Learn about assigning a network configuration to a runner group\n                  </Link>\n                </p>\n              </Box>\n              {runnerGroups.length > 0 ? (\n                <Box sx={{border: '1px solid', borderColor: 'border.muted', borderRadius: 2}}>\n                  <ListView\n                    metadata={\n                      <ListViewMetadata\n                        title={`${runnerGroups.length} ${runnerGroups.length === 1 ? 'runner group' : 'runner groups'}`}\n                      />\n                    }\n                    title={`${runnerGroups.length} ${runnerGroups.length === 1 ? 'runner group' : 'runner groups'}`}\n                  >\n                    {runnerGroups.map(item => (\n                      <RunnerGroupListItem\n                        runnerGroupPath={payload.runnerGroupPath}\n                        key={item.id}\n                        id={item.id}\n                        name={item.name}\n                        allowPublic={item.allowPublic}\n                        visibility={item.visibility}\n                        selectedTargetsCount={item.selectedTargetsCount}\n                      />\n                    ))}\n                  </ListView>\n                </Box>\n              ) : (\n                <RunnerGroupEmptyState runnerGroupPath={payload.runnerGroupPath} />\n              )}\n            </div>\n          )}\n          {payload.enabledForCodespaces &&\n            payload.networkConfiguration.computeService === ComputeService.Codespaces && (\n              <div>\n                <Box sx={{pb: 3}}>\n                  <Heading as=\"h3\" sx={{fontSize: 3, fontWeight: 'normal'}}>\n                    This configuration allows Codespaces to use this network\n                  </Heading>\n                  <p className=\"color-fg-muted mb-0\">\n                    To configure this network to be used for codespaces, create an org-policy that assigns this network\n                    to an org or set of repositories.\n                  </p>\n                </Box>\n              </div>\n            )}\n        </Box>\n      </PageLayout.Content>\n    </PageLayout>\n  )\n}\n\nfunction DisableDeleteActionMenu({\n  name,\n  id,\n  removeNetworkConfigurationPath,\n  updateNetworkConfigurationPath,\n  networkConfigurationsPath,\n  setConfigurationDisabled,\n  enabledForCodespaces,\n}: {\n  name: string\n  id: string\n  removeNetworkConfigurationPath: string\n  updateNetworkConfigurationPath: string\n  networkConfigurationsPath: string\n  setConfigurationDisabled: (disabled: boolean) => void\n  enabledForCodespaces: boolean\n}) {\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false)\n  const [showDisableDialog, setShowDisableDialog] = useState(false)\n  return (\n    <>\n      <ActionMenu>\n        <ActionMenu.Anchor>\n          {/* eslint-disable-next-line primer-react/a11y-remove-disable-tooltip */}\n          <IconButton unsafeDisableTooltip={true} icon={KebabHorizontalIcon} aria-label=\"Open Menu\" />\n        </ActionMenu.Anchor>\n        <ActionMenu.Overlay width=\"small\">\n          <ActionList>\n            <ActionList.Item onSelect={() => setShowDisableDialog(true)}>Disable</ActionList.Item>\n            <ActionList.Item variant=\"danger\" onSelect={() => setShowDeleteDialog(true)}>\n              Delete configuration\n            </ActionList.Item>\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>\n      {showDisableDialog && (\n        <DisableDialog\n          setShowDisableDialog={setShowDisableDialog}\n          name={name}\n          id={id}\n          networkConfigurationsPath={networkConfigurationsPath}\n          updateNetworkConfigurationPath={updateNetworkConfigurationPath}\n          setConfigurationDisabled={setConfigurationDisabled}\n        />\n      )}\n      {showDeleteDialog && (\n        <DeleteDialog\n          setShowDeleteDialog={setShowDeleteDialog}\n          name={name}\n          id={id}\n          removeNetworkConfigurationPath={removeNetworkConfigurationPath}\n          networkConfigurationsPath={networkConfigurationsPath}\n          enabledForCodespaces={enabledForCodespaces}\n        />\n      )}\n    </>\n  )\n}\n\nfunction DeleteActionMenu({\n  name,\n  id,\n  removeNetworkConfigurationPath,\n  networkConfigurationsPath,\n  enabledForCodespaces,\n}: {\n  name: string\n  id: string\n  removeNetworkConfigurationPath: string\n  networkConfigurationsPath: string\n  enabledForCodespaces: boolean\n}) {\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false)\n  return (\n    <>\n      <ActionMenu>\n        <ActionMenu.Anchor>\n          {/* eslint-disable-next-line primer-react/a11y-remove-disable-tooltip */}\n          <IconButton unsafeDisableTooltip={true} icon={KebabHorizontalIcon} aria-label=\"Open Menu\" />\n        </ActionMenu.Anchor>\n        <ActionMenu.Overlay width=\"small\">\n          <ActionList>\n            <ActionList.Item variant=\"danger\" onSelect={() => setShowDeleteDialog(true)}>\n              Delete configuration\n            </ActionList.Item>\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>\n      {showDeleteDialog && (\n        <DeleteDialog\n          setShowDeleteDialog={setShowDeleteDialog}\n          name={name}\n          id={id}\n          removeNetworkConfigurationPath={removeNetworkConfigurationPath}\n          networkConfigurationsPath={networkConfigurationsPath}\n          enabledForCodespaces={enabledForCodespaces}\n        />\n      )}\n    </>\n  )\n}\n\nfunction RunnerGroupEmptyState({runnerGroupPath}: {runnerGroupPath: string}) {\n  return (\n    <Blankslate border spacious>\n      <Blankslate.Heading as=\"h3\">No runner groups are using this configuration yet.</Blankslate.Heading>\n      <Blankslate.PrimaryAction href={runnerGroupPath}>Go to runner groups</Blankslate.PrimaryAction>\n    </Blankslate>\n  )\n}\n\nfunction ConfigDisabledFlash({\n  enabledForCodespaces,\n  configurationDisabled,\n  enableConfigurationForActions,\n  canEditNetworkConfiguration,\n}: {\n  enabledForCodespaces: boolean\n  configurationDisabled: boolean\n  enableConfigurationForActions: () => void\n  canEditNetworkConfiguration: boolean\n}) {\n  if (!configurationDisabled) {\n    return <></>\n  } else if (!enabledForCodespaces) {\n    return (\n      <Flash variant=\"warning\" sx={{mb: '16px'}}>\n        <Box sx={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          <Box sx={{display: 'flex', flexDirection: 'row'}}>\n            <Box sx={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\n              <Octicon icon={AlertIcon} size={16} sx={{color: 'fg.attention'}} />\n            </Box>\n            <p>\n              This network configuration is currently disabled. Runner groups using this configuration will not work.\n            </p>\n          </Box>\n          {canEditNetworkConfiguration && <Button onClick={enableConfigurationForActions}>Enable configuration</Button>}\n        </Box>\n      </Flash>\n    )\n  } else {\n    return (\n      <Flash variant=\"warning\" sx={{mb: '16px'}}>\n        <Box sx={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          <Box sx={{display: 'flex', flexDirection: 'row'}}>\n            <Box sx={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\n              <Octicon icon={AlertIcon} size={16} sx={{color: 'fg.attention'}} />\n            </Box>\n            <p>\n              No services are enabled for this network configuration. Runner groups and codespaces using this\n              configuration will not work. Edit the configuration to enable a service.\n            </p>\n          </Box>\n        </Box>\n      </Flash>\n    )\n  }\n}\n\ntry{ NetworkConfigurationSettings.displayName ||= 'NetworkConfigurationSettings' } catch {}\ntry{ DisableDeleteActionMenu.displayName ||= 'DisableDeleteActionMenu' } catch {}\ntry{ DeleteActionMenu.displayName ||= 'DeleteActionMenu' } catch {}\ntry{ RunnerGroupEmptyState.displayName ||= 'RunnerGroupEmptyState' } catch {}\ntry{ ConfigDisabledFlash.displayName ||= 'ConfigDisabledFlash' } catch {}","import {AlertIcon} from '@primer/octicons-react'\nimport {Box, Button, Flash, FormControl, Heading, PageLayout, TextInput, Tooltip} from '@primer/react'\nimport {useEffect, useRef, useState} from 'react'\nimport {useNavigate} from '@github-ui/use-navigate'\nimport {PrivateNetworkConsts} from '../constants/private-network-consts'\nimport {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {NetworkConfigurationConsts} from '../constants/network-configuration-consts'\nimport {ComputeService} from '../classes/network-configuration'\nimport type {NetworkConfiguration} from '../classes/network-configuration'\nimport type {PrivateNetwork} from '../classes/private-network'\nimport {PrivateNetworkList} from '../components/PrivateNetworkList'\nimport {AllowedServicesOptions} from '../components/AllowedServicesOptions'\nimport {AddPrivateNetworkDialog} from '../components/AddPrivateNetworkDialog'\nimport {useDebounce} from '@github-ui/use-debounce'\n\nimport {\n  PrivateNetworkValidationResult,\n  NameValidationResult,\n  hasNameValidationError,\n  getNameValidationError,\n  hasPrivateNetworkValidationError,\n  getPrivateNetworkValidationError,\n  validateNetworkConfigurationName,\n  createOrUpdateNetworkConfiguration,\n} from '../helpers/network-configuration-helpers'\nimport type {IUpdatePayload} from '../helpers/network-configuration-helpers'\nimport {NetworkConfigurationHeading} from '../components/NetworkConfigurationHeading'\n\nexport interface EditNetworkConfigurationSettingsPayload {\n  networkConfiguration: NetworkConfiguration\n  privateNetworks: PrivateNetwork[]\n  networkConfigurationsPath: string\n  updateNetworkConfigurationPath: string\n  newPrivateNetworkPath: string\n  findNetworkConfigurationPath: string\n  enabledForCodespaces: boolean\n  isBusiness: boolean\n}\nexport function EditNetworkConfigurationSettings() {\n  const nameInputRef = useRef<HTMLInputElement>(null)\n  const navigate = useNavigate()\n  const payload = useRoutePayload<EditNetworkConfigurationSettingsPayload>()\n  const [nameValidationResult, setNameValidationResult] = useState(NameValidationResult.None)\n  const [nameValidationIsBusy, setNameValidationIsBusy] = useState(false)\n  const [editErrorMessage, setEditErrorMessage] = useState('')\n  const [networkConfigurationName, setNetworkConfigurationName] = useState(payload.networkConfiguration.name)\n  const [showNewDialog, setShowNewDialog] = useState<boolean>(false)\n  const [privateNetworks, setPrivateNetworks] = useState<PrivateNetwork[]>(payload.privateNetworks)\n  const [privateNetworkValidationResult, setPrivateNetworkValidationResult] = useState(\n    PrivateNetworkValidationResult.None,\n  )\n  const [selectedService, setSelectedService] = useState<ComputeService>(payload.networkConfiguration.computeService)\n  const [canAddNewNetwork, setCanAddNewNetwork] = useState<boolean>(\n    selectedService === ComputeService.Codespaces || privateNetworks.length === 0,\n  )\n  const serviceAgnostic = payload.enabledForCodespaces\n\n  useEffect(() => {\n    setCanAddNewNetwork(selectedService === ComputeService.Codespaces || privateNetworks.length === 0)\n  }, [selectedService, privateNetworks])\n\n  const newNetworkButtonClick = () => {\n    if (canAddNewNetwork) {\n      setShowNewDialog(true)\n    }\n  }\n\n  const saveChanges = async () => {\n    // Validation\n    if (privateNetworks.length === 0) {\n      // This is the only place we can do this, but don't return so we can focus the name field if it's invalid\n      setPrivateNetworkValidationResult(PrivateNetworkValidationResult.MissingNetwork)\n      return\n    }\n\n    if (nameValidationResult === NameValidationResult.None) {\n      // Skip server-side checks\n      await validateName(networkConfigurationName, true)\n    }\n\n    // Handle invalid values\n    if (hasNameValidationError(nameValidationResult)) {\n      nameInputRef.current?.focus()\n      return\n    }\n\n    const request_body: IUpdatePayload = {\n      configurationId: payload.networkConfiguration.id,\n      computeService: selectedService,\n      privateNetworkIds: privateNetworks.map(n => n.id),\n    }\n\n    if (networkConfigurationName !== '' && nameValidationResult === NameValidationResult.Success) {\n      request_body.name = networkConfigurationName.trim()\n    }\n\n    const result = await createOrUpdateNetworkConfiguration(\n      payload.updateNetworkConfigurationPath,\n      payload.networkConfigurationsPath,\n      request_body,\n    )\n\n    if (result.success) {\n      setEditErrorMessage('')\n      navigate(result.link)\n    } else {\n      switch (result.code) {\n        case 'NetworkResourceInUse':\n          setPrivateNetworkValidationResult(PrivateNetworkValidationResult.NetworkResourceInUse)\n          break\n        case 'UnsupportedResourceLocation':\n          setPrivateNetworkValidationResult(PrivateNetworkValidationResult.UnsupportedResourceLocation)\n          break\n        case 'DuplicateLocation':\n          setPrivateNetworkValidationResult(PrivateNetworkValidationResult.DuplicateLocation)\n          break\n        case 'DisplayNameInUse':\n          setNameValidationResult(NameValidationResult.DisplayNameInUse)\n          nameInputRef.current?.focus()\n          break\n        default:\n          setEditErrorMessage(`There was an error updating the network configuration: ${result.message}`)\n          break\n      }\n    }\n  }\n\n  const onNewDialogClose = () => {\n    setShowNewDialog(false)\n  }\n\n  const onNewDialogAccept = (newPrivateNetwork: PrivateNetwork) => {\n    setPrivateNetworks([...privateNetworks, newPrivateNetwork])\n    setPrivateNetworkValidationResult(PrivateNetworkValidationResult.None)\n    setShowNewDialog(false)\n  }\n\n  const removePrivateNetwork = (removedPrivateNetwork: PrivateNetwork) => {\n    setPrivateNetworks(privateNetworks.filter(n => n.id !== removedPrivateNetwork.id))\n    setPrivateNetworkValidationResult(PrivateNetworkValidationResult.None)\n  }\n\n  const debouncedValidate = useDebounce((name: string) => {\n    validateName(name)\n  }, 300)\n\n  useEffect(() => {\n    debouncedValidate(networkConfigurationName)\n  }, [debouncedValidate, networkConfigurationName, payload.networkConfiguration.name])\n\n  async function validateName(name: string, formatOnly?: boolean): Promise<void> {\n    setNameValidationIsBusy(true)\n\n    try {\n      if (name === payload.networkConfiguration.name) {\n        setNameValidationResult(NameValidationResult.Success)\n        setNetworkConfigurationName(name)\n      } else {\n        const validationResult = formatOnly\n          ? await validateNetworkConfigurationName(name)\n          : await validateNetworkConfigurationName(name, payload.findNetworkConfigurationPath)\n        setNameValidationResult(validationResult)\n        if (validationResult === NameValidationResult.Success) {\n          setNetworkConfigurationName(name)\n        }\n      }\n    } finally {\n      setNameValidationIsBusy(false)\n    }\n  }\n\n  const addNewNetworkButton = (\n    <Button\n      onClick={newNetworkButtonClick}\n      aria-labelledby=\"private-network-title\"\n      aria-describedby=\"private-network-caption private-network-validation\"\n      variant=\"primary\"\n      inactive={!canAddNewNetwork}\n    >\n      {PrivateNetworkConsts.addAzureVirtualNetwork}\n    </Button>\n  )\n\n  return (\n    <PageLayout containerWidth=\"full\" sx={{padding: 0}}>\n      <PageLayout.Header>\n        <div className=\"border-bottom\">\n          <NetworkConfigurationHeading\n            link={NetworkConfigurationConsts.networkSettingsUrl(\n              payload.networkConfigurationsPath,\n              payload.networkConfiguration.id,\n            )}\n            previousPageText={payload.networkConfiguration.name}\n            currentPageText={`Edit ${payload.networkConfiguration.name} configuration`}\n            isBusiness={payload.isBusiness}\n          />\n          <Heading as=\"h2\" className=\"h2 text-normal mb-2\">\n            Edit {payload.networkConfiguration.name} configuration\n          </Heading>\n        </div>\n      </PageLayout.Header>\n      <PageLayout.Content as=\"div\">\n        {editErrorMessage.trim().length > 0 && (\n          <div className=\"pb-4\">\n            <Flash variant=\"danger\">\n              <AlertIcon size={16} />\n              {editErrorMessage}\n            </Flash>\n          </div>\n        )}\n        <Box sx={{mb: '16px'}} aria-live=\"polite\">\n          <FormControl required>\n            <FormControl.Label>{NetworkConfigurationConsts.nameLabel}</FormControl.Label>\n            <TextInput\n              type=\"text\"\n              value={networkConfigurationName}\n              sx={{width: '30%'}}\n              onChange={e => setNetworkConfigurationName(e.target.value.trim())}\n              aria-describedby=\"name-input-caption name-input-validation\"\n              loading={nameValidationIsBusy}\n              ref={nameInputRef}\n            />\n            {hasNameValidationError(nameValidationResult) && (\n              <FormControl.Validation id=\"name-input-validation\" variant=\"error\">\n                {getNameValidationError(nameValidationResult)}\n              </FormControl.Validation>\n            )}\n            {!hasNameValidationError(nameValidationResult) && (\n              <FormControl.Caption id=\"name-input-caption\">{PrivateNetworkConsts.invalidNameError}</FormControl.Caption>\n            )}\n          </FormControl>\n        </Box>\n        <div>\n          <Box sx={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n            <div>\n              <strong id=\"private-network-title\">{PrivateNetworkConsts.azurePrivateNetworking}</strong>\n              <p className=\"color-fg-muted text-small mb-2\" id=\"private-network-caption\">\n                {serviceAgnostic\n                  ? PrivateNetworkConsts.azurePrivateNetworkingDescriptionServiceAgnostic\n                  : PrivateNetworkConsts.azurePrivateNetworkingDescription}\n              </p>\n            </div>\n            {payload.enabledForCodespaces && (\n              <Box sx={{justifyContent: 'flex-end'}}>\n                {canAddNewNetwork ? (\n                  addNewNetworkButton\n                ) : (\n                  <Tooltip aria-label=\"Support for multiple networks is currently only available with Codespaces\" wrap>\n                    {addNewNetworkButton}\n                  </Tooltip>\n                )}\n              </Box>\n            )}\n          </Box>\n          {showNewDialog && (\n            <AddPrivateNetworkDialog\n              newPrivateNetworkPath={payload.newPrivateNetworkPath}\n              onDismiss={onNewDialogClose}\n              onAdd={onNewDialogAccept}\n              existingPrivateNetwork={privateNetworks}\n            />\n          )}\n          <div aria-live=\"polite\">\n            <FormControl required>\n              <FormControl.Label visuallyHidden={true}>{PrivateNetworkConsts.azurePrivateNetworking}</FormControl.Label>\n              <PrivateNetworkList\n                privateNetworks={privateNetworks}\n                validationStatus={\n                  hasPrivateNetworkValidationError(privateNetworkValidationResult) ? 'error' : 'success'\n                }\n                onRemove={removePrivateNetwork}\n                onShowNewDialog={() => setShowNewDialog(true)}\n                enabledForCodespaces={payload.enabledForCodespaces}\n                ariaLabelledBy=\"private-network-title\"\n                ariaDescribedBy=\"private-network-caption private-network-validation\"\n              />\n              {hasPrivateNetworkValidationError(privateNetworkValidationResult) && (\n                <FormControl.Validation\n                  id=\"private-network-validation\"\n                  variant=\"error\"\n                  aria-live=\"assertive\"\n                  aria-atomic=\"true\"\n                >\n                  <span>\n                    {getPrivateNetworkValidationError(privateNetworkValidationResult, privateNetworks[0]?.location)}\n                  </span>\n                </FormControl.Validation>\n              )}\n            </FormControl>\n          </div>\n          {payload.enabledForCodespaces && (\n            <AllowedServicesOptions\n              enabledForCodespaces={payload.enabledForCodespaces}\n              actionsSelectable={privateNetworks.length <= 1}\n              selectedService={selectedService}\n              setSelectedService={setSelectedService}\n            />\n          )}\n        </div>\n      </PageLayout.Content>\n      <PageLayout.Footer>\n        <Box sx={{display: 'flex', flexDirection: 'row'}}>\n          <Button variant=\"primary\" onClick={saveChanges}>\n            Save changes\n          </Button>\n          <Box sx={{ml: 2}}>\n            <Button variant=\"default\" onClick={() => navigate(payload.networkConfigurationsPath)}>\n              Cancel\n            </Button>\n          </Box>\n        </Box>\n      </PageLayout.Footer>\n    </PageLayout>\n  )\n}\n\ntry{ EditNetworkConfigurationSettings.displayName ||= 'EditNetworkConfigurationSettings' } catch {}","export const HostedComputeNetworkingConsts = {\n  HostedComputeNetworkingDialogTitle: 'Disable hosted compute networking',\n  HostedComputeNetworkingDialogDisabledAbility:\n    'The ability to create new network configurations or edit existing ones will be disabled for all organizations within this enterprise.',\n  HostedComputeNetworkingDialogDisabledOwned:\n    'All network configurations that are exclusively owned by an organization will be disabled.',\n  HostedComputeNetworkingDialogDisabledWorkflow:\n    'Any workflows that are currently using a network configuration created by an organization will be allowed to continue until completion. Once the workflow is finished, the network configuration will be disabled.',\n  HostedComputeNetworkingDialogDisabledRecommendation:\n    \"It is recommended to inform your organizations' administrator(s) prior to disabling any network configurations.\",\n}\n","import {Button, Box, Octicon, Text} from '@primer/react'\nimport {Dialog} from '@primer/react/experimental'\nimport {useCallback} from 'react'\nimport {XIcon} from '@primer/octicons-react'\nimport {HostedComputeNetworkingConsts} from '../constants/hosted-compute-networking-consts'\n\ninterface IDisableHostedComputeNetworkingDialogProps {\n  setShowDisableDialog: (showDialog: boolean) => void\n  updatePath: string\n  updateMethod: string\n  updatePermission: (canCreate: boolean) => void\n}\n\nexport function DisableHostedComputeNetworkingDialog(props: IDisableHostedComputeNetworkingDialogProps) {\n  const onDisableDialogClose = useCallback(() => {\n    props.setShowDisableDialog(false)\n  }, [props])\n\n  const renderFooter = () => {\n    return (\n      <Dialog.Footer>\n        <Button type=\"submit\" block variant=\"danger\" onClick={handleDialogSubmit}>\n          Disable creation of network configurations\n        </Button>\n      </Dialog.Footer>\n    )\n  }\n\n  const handleDialogSubmit = () => {\n    props.setShowDisableDialog(false)\n    props.updatePermission(false)\n  }\n\n  return (\n    <Dialog\n      title={HostedComputeNetworkingConsts.HostedComputeNetworkingDialogTitle}\n      onClose={onDisableDialogClose}\n      width=\"large\"\n      renderFooter={renderFooter}\n    >\n      <div>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 3,\n          }}\n        >\n          <Box sx={{display: 'flex', flexDirection: 'row'}}>\n            <Octicon icon={XIcon} size={16} sx={{color: 'danger.fg', mt: 1, mb: 1}} />\n            <Text sx={{pl: 2}}>{HostedComputeNetworkingConsts.HostedComputeNetworkingDialogDisabledAbility}</Text>\n          </Box>\n          <Box sx={{display: 'flex', flexDirection: 'row'}}>\n            <Octicon icon={XIcon} size={16} sx={{color: 'danger.fg', mt: 1, mb: 1}} />\n            <Text sx={{pl: 2}}>{HostedComputeNetworkingConsts.HostedComputeNetworkingDialogDisabledOwned}</Text>\n          </Box>\n          <Box sx={{display: 'flex', flexDirection: 'column', gap: 3}}>\n            <span>{HostedComputeNetworkingConsts.HostedComputeNetworkingDialogDisabledWorkflow}</span>\n            <span>{HostedComputeNetworkingConsts.HostedComputeNetworkingDialogDisabledRecommendation}</span>\n          </Box>\n        </Box>\n      </div>\n    </Dialog>\n  )\n}\n\ntry{ DisableHostedComputeNetworkingDialog.displayName ||= 'DisableHostedComputeNetworkingDialog' } catch {}","import {Box, Button, Flash, FormControl, Heading, PageLayout, Radio, RadioGroup} from '@primer/react'\nimport {NetworkConfigurationConsts} from '../constants/network-configuration-consts'\nimport {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {useState} from 'react'\nimport {useCSRFToken} from '@github-ui/use-csrf-token'\nimport {DisableHostedComputeNetworkingDialog} from '../components/DisableHostedComputeNetworkingDialog'\nimport {verifiedFetch} from '@github-ui/verified-fetch'\n\ntype FlashVariant = 'default' | 'warning' | 'success' | 'danger'\n\nexport interface IHostedComputeNetworkingPolicySettingsPayload {\n  orgsCanCreateNetworkConfigurations: boolean\n  updatePath: string\n  updateMethod: string\n}\n\nexport function EditHostedComputeNetworkingPolicySettings() {\n  const payload = useRoutePayload<IHostedComputeNetworkingPolicySettingsPayload>()\n  const [orgsCanCreate, setOrgsCanCreate] = useState<boolean>(payload.orgsCanCreateNetworkConfigurations)\n  const csrf = useCSRFToken(payload.updatePath, payload.updateMethod)\n  const [showDisableDialog, setShowDisableDialog] = useState(false)\n  const [resultBannerText, setResultBannerText] = useState('')\n  const [resultBannerVariant, setResultBannerVariant] = useState<FlashVariant>('default')\n\n  const [canCreateEnabled, canCreateDisabled] = ['true', 'false']\n  const onCanCreateChange = (selectedValue: string | null) => {\n    setOrgsCanCreate(selectedValue === canCreateEnabled)\n  }\n\n  const handleSubmit = () => {\n    if (orgsCanCreate) {\n      updatePermission(true)\n    } else {\n      setShowDisableDialog(true)\n    }\n  }\n\n  const updatePermission = async (canCreate: boolean) => {\n    setResultBannerText('')\n    setResultBannerVariant('default')\n\n    const formData = new FormData()\n    // eslint-disable-next-line github/authenticity-token\n    formData.append('authenticity_token', csrf ?? '')\n    formData.append('orgsCanCreateNetworkConfigurations', canCreate.toString())\n\n    const response = await verifiedFetch(payload.updatePath, {\n      method: payload.updateMethod.toUpperCase(),\n      body: formData,\n    })\n    if (response.ok) {\n      setResultBannerText('Your GitHub hosted compute networking policy has been updated.')\n      setResultBannerVariant('default')\n    } else {\n      setResultBannerText('Failed to update your GitHub hosted compute networking policy.')\n      setResultBannerVariant('danger')\n    }\n  }\n\n  const orgsCanCreateLabelId = 'OrgCreationLabelId'\n\n  return (\n    <PageLayout containerWidth=\"full\" padding=\"none\" sx={{p: 0}}>\n      <PageLayout.Header>\n        <div className=\"border-bottom\">\n          <Heading as=\"h2\" className=\"h2 text-normal mb-2\">\n            {NetworkConfigurationConsts.hostedComputeNetworkingTitle}\n          </Heading>\n        </div>\n      </PageLayout.Header>\n      <PageLayout.Content as=\"div\">\n        {resultBannerText && (\n          <div className=\"pb-4\">\n            <Flash variant={resultBannerVariant}>{resultBannerText}</Flash>\n          </div>\n        )}\n        <form aria-labelledby={orgsCanCreateLabelId}>\n          <Box sx={{display: 'grid', pb: 3}}>\n            <RadioGroup name=\"orgsCanCreateNetworkConfigurations\" onChange={onCanCreateChange}>\n              <RadioGroup.Label sx={{pb: 3}}>\n                <Heading as=\"h3\" className=\"h3 text-normal\" id={orgsCanCreateLabelId}>\n                  Manage creation of network configurations for organizations\n                </Heading>\n              </RadioGroup.Label>\n              <FormControl>\n                <Radio value={canCreateEnabled} defaultChecked={orgsCanCreate} data-testid=\"orgsCanCreate\" />\n                <FormControl.Label sx={{pb: 1}}>Enabled</FormControl.Label>\n                <FormControl.Caption>\n                  Organization owners are allowed to create their own network configurations in their organizations.\n                </FormControl.Caption>\n              </FormControl>\n              <FormControl>\n                <Radio value={canCreateDisabled} defaultChecked={!orgsCanCreate} data-testid=\"orgsCannotCreate\" />\n                <FormControl.Label sx={{pb: 1}}>Disabled</FormControl.Label>\n                <FormControl.Caption>\n                  Organization owners cannot create their own network configurations and are restricted to using\n                  configurations created by the enterprise.\n                </FormControl.Caption>\n              </FormControl>\n            </RadioGroup>\n          </Box>\n          <Button type=\"button\" onClick={handleSubmit}>\n            Save\n          </Button>\n        </form>\n        {showDisableDialog && (\n          <DisableHostedComputeNetworkingDialog\n            setShowDisableDialog={setShowDisableDialog}\n            updatePath={payload.updatePath}\n            updateMethod={payload.updateMethod}\n            updatePermission={updatePermission}\n          />\n        )}\n      </PageLayout.Content>\n    </PageLayout>\n  )\n}\n\ntry{ EditHostedComputeNetworkingPolicySettings.displayName ||= 'EditHostedComputeNetworkingPolicySettings' } catch {}","import {ListItemDescription} from '@github-ui/list-view/ListItemDescription'\nimport {ListItemLeadingContent} from '@github-ui/list-view/ListItemLeadingContent'\nimport {ListItemLeadingVisual} from '@github-ui/list-view/ListItemLeadingVisual'\nimport {ListItemMainContent} from '@github-ui/list-view/ListItemMainContent'\nimport {ListItemTitle} from '@github-ui/list-view/ListItemTitle'\nimport {ListItemTrailingBadge} from '@github-ui/list-view/ListItemTrailingBadge'\nimport {ListItem} from '@github-ui/list-view/ListItem'\nimport {RelativeTime} from '@primer/react'\nimport {AzureIcon} from '../AzureIcon'\nimport {ComputeService} from '../../classes/network-configuration'\nimport type {NetworkConfiguration} from '../../classes/network-configuration'\nimport pluralize from 'pluralize'\n\ninterface INetworkConfigurationListItemProps {\n  networkConfig: NetworkConfiguration\n}\n\nexport function StaffToolsNetworkConfigurationListItem(props: INetworkConfigurationListItemProps) {\n  const runnerGroupsCount = props.networkConfig.runnerGroups?.length ?? 0\n  const badges = []\n  if (props.networkConfig.computeService !== ComputeService.Actions) {\n    badges.push(<ListItemTrailingBadge title=\"Actions Disabled\" variant=\"attention\" />)\n  }\n  if (props.networkConfig.computeService !== ComputeService.Codespaces) {\n    badges.push(<ListItemTrailingBadge title=\"Codespaces Disabled\" variant=\"attention\" />)\n  }\n  return (\n    <ListItem title={<ListItemTitle value={props.networkConfig.name} trailingBadges={badges} />}>\n      <ListItemLeadingContent>\n        <ListItemLeadingVisual icon={AzureIcon} description=\"Azure Icon\" />\n      </ListItemLeadingContent>\n      <ListItemMainContent>\n        <ListItemDescription>\n          {props.networkConfig.service}\n          {' · '}\n          Created <RelativeTime date={new Date(props.networkConfig.createdOn)} tense=\"past\" />\n          {' · '}\n          {runnerGroupsCount} runner {pluralize('groups', runnerGroupsCount)}\n        </ListItemDescription>\n      </ListItemMainContent>\n    </ListItem>\n  )\n}\n\ntry{ StaffToolsNetworkConfigurationListItem.displayName ||= 'StaffToolsNetworkConfigurationListItem' } catch {}","import {Box, Heading, PageLayout, Text} from '@primer/react'\nimport {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {useState} from 'react'\nimport type {NetworkConfiguration} from '../../classes/network-configuration'\nimport {ListView} from '@github-ui/list-view'\nimport {ListViewMetadata} from '@github-ui/list-view/ListViewMetadata'\nimport {StaffToolsNetworkConfigurationListItem} from '../../components/stafftools/StaffToolsNetworkConfigurationListItem'\nimport pluralize from 'pluralize'\n\nexport interface IStaffToolsHostedComputeNetworkingPayload {\n  networkConfigurations: NetworkConfiguration[]\n  isEnterprise: boolean\n}\n\nexport function StaffToolsHostedComputeNetworking() {\n  const payload = useRoutePayload<IStaffToolsHostedComputeNetworkingPayload>()\n  const [networkConfigurations] = useState<NetworkConfiguration[]>(payload.networkConfigurations ?? [])\n\n  return (\n    <PageLayout containerWidth=\"full\" padding=\"none\" rowGap=\"none\">\n      <PageLayout.Header divider=\"line\" padding=\"none\">\n        <Heading as=\"h2\" className=\"h2 text-normal\" sx={{mb: 2}}>\n          Hosted compute networking\n        </Heading>\n      </PageLayout.Header>\n      <PageLayout.Content as=\"div\" sx={{mt: 2}}>\n        <Heading as=\"h3\" className=\"h3 text-normal\" sx={{mb: 2}}>\n          Network configurations\n        </Heading>\n        <Box\n          sx={{\n            border: '1px solid',\n            borderColor: 'border.muted',\n            borderRadius: 2,\n          }}\n        >\n          {networkConfigurations.length === 0 ? (\n            <EmptyStateCard isEnterprise={payload.isEnterprise} />\n          ) : (\n            <NetworkConfigurationListView networkConfigurations={networkConfigurations} />\n          )}\n        </Box>\n      </PageLayout.Content>\n    </PageLayout>\n  )\n}\n\ninterface IEmptyStateCardProps {\n  isEnterprise: boolean\n}\nfunction EmptyStateCard(props: IEmptyStateCardProps) {\n  const entity = props.isEnterprise ? 'enterprise' : 'organization'\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <Text as=\"p\" sx={{p: 32}}>\n        {`There are no network configurations configured for this ${entity}.`}\n      </Text>\n    </Box>\n  )\n}\n\ninterface INetworkConfigurationListViewProps {\n  networkConfigurations: NetworkConfiguration[]\n}\nfunction NetworkConfigurationListView(props: INetworkConfigurationListViewProps) {\n  const title = `${props.networkConfigurations.length} ${pluralize('item', props.networkConfigurations.length)}`\n  return (\n    <ListView metadata={<ListViewMetadata title={title} assistiveAnnouncement={title} />} title={title}>\n      {props.networkConfigurations.map(item => (\n        <StaffToolsNetworkConfigurationListItem key={item.id} networkConfig={item} />\n      ))}\n    </ListView>\n  )\n}\n\ntry{ StaffToolsHostedComputeNetworking.displayName ||= 'StaffToolsHostedComputeNetworking' } catch {}\ntry{ EmptyStateCard.displayName ||= 'EmptyStateCard' } catch {}\ntry{ NetworkConfigurationListView.displayName ||= 'NetworkConfigurationListView' } catch {}","import {App} from './App'\nimport {NetworkConfigurations} from './routes/NetworkConfigurations'\nimport {CreatePrivateNetwork} from './routes/CreatePrivateNetwork'\nimport {NetworkConfigurationSettings} from './routes/NetworkConfigurationSettings'\nimport {EditNetworkConfigurationSettings} from './routes/EditNetworkConfigurationSettings'\nimport {EditHostedComputeNetworkingPolicySettings} from './routes/EditHostedComputeNetworkingPolicySettings'\nimport {StaffToolsHostedComputeNetworking} from './routes/stafftools/StaffToolsHostedComputeNetworking'\nimport {registerReactAppFactory} from '@github-ui/react-core/register-app'\nimport {jsonRoute} from '@github-ui/react-core/json-route'\n\nregisterReactAppFactory('network-configurations', () => ({\n  App,\n  routes: [\n    jsonRoute({path: '/enterprises/:business/settings/network_configurations', Component: NetworkConfigurations}),\n    jsonRoute({\n      path: '/enterprises/:business/settings/network_configurations/azure_private_network/new',\n      Component: CreatePrivateNetwork,\n    }),\n    jsonRoute({\n      path: '/enterprises/:business/settings/network_configurations/:network_configuration_id',\n      Component: NetworkConfigurationSettings,\n    }),\n    jsonRoute({\n      path: '/enterprises/:business/settings/network_configurations/:network_configuration_id/edit',\n      Component: EditNetworkConfigurationSettings,\n    }),\n    jsonRoute({path: '/organizations/:organization/settings/network_configurations', Component: NetworkConfigurations}),\n    jsonRoute({\n      path: '/organizations/:organization/settings/network_configurations/azure_private_network/new',\n      Component: CreatePrivateNetwork,\n    }),\n    jsonRoute({\n      path: '/organizations/:organization/settings/network_configurations/:network_configuration_id',\n      Component: NetworkConfigurationSettings,\n    }),\n    jsonRoute({\n      path: '/organizations/:organization/settings/network_configurations/:network_configuration_id/edit',\n      Component: EditNetworkConfigurationSettings,\n    }),\n    jsonRoute({\n      path: '/enterprises/:business/settings/hosted_compute_networking',\n      Component: EditHostedComputeNetworkingPolicySettings,\n    }),\n    // Stafftools\n    jsonRoute({\n      path: '/stafftools/enterprises/:business/hosted_compute_networking',\n      Component: StaffToolsHostedComputeNetworking,\n    }),\n    jsonRoute({\n      path: '/stafftools/users/:user/hosted_compute_networking',\n      Component: StaffToolsHostedComputeNetworking,\n    }),\n  ],\n}))\n","import {useRoutePayload} from '@github-ui/react-core/use-route-payload'\n\nexport interface CSRFTokens {\n  csrf_tokens?: {\n    [path: string]:\n      | {\n          [method: string]: string | undefined\n        }\n      | undefined\n  }\n}\n\nexport function useCSRFToken(path: string, method: string): string | undefined {\n  const {csrf_tokens} = useRoutePayload<CSRFTokens>()\n  return csrf_tokens?.[path]?.[method]\n}\n","import {useTrackingRef} from '@github-ui/use-tracking-ref'\nimport debounce, {type DebouncedFunc, type DebounceSettings} from 'lodash-es/debounce'\nimport {useEffect, useMemo} from 'react'\n\nexport interface DebounceHookChangeSettings {\n  /**\n   * When the parameters (ie, the wait duration or any settings) are changed or the hook\n   * is unmounted, any pending trailing calls must be handled to avoid potential memory\n   * leaks. This parameter controls the handling strategy. This only has effect if\n   * `trailing` is `true`.\n   *\n   * Options are:\n   *\n   * - `flush` (default): Call pending calls immediately. May result in occasionally calling\n   *   more often than expected. This is the safest way to avoid losing data. If the callback\n   *   is async, care must be taken not to set state or perform other actions if not mounted\n   *   after awaiting.\n   * - `cancel`: Cancel pending calls. May result in dropping calls.\n   */\n  onChangeBehavior?: 'flush' | 'cancel'\n}\n\nexport type UseDebounceSettings = DebounceSettings & DebounceHookChangeSettings\n\n/**\n * Get a debounced version of the provided function. A debounced function will wait to be\n * called until `waitMs` milliseconds have passed since the last invocation. The result of\n * this hook is referentially stable with respect to `fn`, but will change if the other\n * parameters change.\n *\n * @see {@link debounce Lodash's debounce docs} for more details on available options.\n */\nexport const useDebounce = <Fn extends (...args: never[]) => unknown>(\n  fn: Fn,\n  waitMs: number,\n  {leading = false, maxWait, trailing = true, onChangeBehavior = 'flush'}: UseDebounceSettings = {},\n): DebouncedFunc<Fn> => {\n  const fnRef = useTrackingRef(fn)\n\n  const debouncedFn = useMemo(() => {\n    // It's not enough to set `maxWait` to `undefined` in the options object - it needs to not be `in`\n    // the object at all. See: https://github.com/lodash/lodash/issues/5495\n    // For `leading` and `trailing` we default to the default boolean values so they are fine.\n    const options = maxWait === undefined ? {leading, trailing} : {leading, trailing, maxWait}\n\n    return debounce((...args: Parameters<typeof fnRef.current>) => fnRef.current(...args), waitMs, options)\n  }, [fnRef, waitMs, leading, maxWait, trailing])\n\n  useEffect(\n    () => () => {\n      debouncedFn?.[onChangeBehavior]()\n    },\n    [debouncedFn, onChangeBehavior],\n  )\n\n  return debouncedFn\n}\n","import React, {startTransition} from 'react'\nimport {\n  createSearchParams,\n  matchRoutes,\n  resolvePath,\n  useLocation,\n  useNavigate as useReactRouterNavigate,\n  useSearchParams as useReactRouterSearchParams,\n  type NavigateOptions,\n  type To,\n  type URLSearchParamsInit,\n} from 'react-router-dom'\n\nimport isHashNavigation from '@github-ui/is-hash-navigation'\nimport {AppContext} from '@github-ui/react-core/app-context'\nimport {startSoftNav} from '@github-ui/soft-nav/state'\nimport {PREVENT_AUTOFOCUS_KEY} from '@github-ui/react-core/prevent-autofocus'\n\nexport interface NavigateOptionsWithPreventAutofocus extends NavigateOptions {\n  preventAutofocus?: boolean\n}\n\nexport const useNavigate = (): ((to: To, options?: NavigateOptionsWithPreventAutofocus) => void) => {\n  const {routes, history} = React.useContext(AppContext)\n  const reactRouterNavigate = useReactRouterNavigate()\n  return React.useCallback(\n    (to, navigateOptions = {}) => {\n      const pathname = resolvePath(to).pathname\n      const isExternalToApp = !matchRoutes(routes, pathname)\n\n      if (isExternalToApp) {\n        const href = history.createHref(to)\n        ;(async () => {\n          const {softNavigate: turboSoftNavigate} = await import('@github-ui/soft-navigate')\n          turboSoftNavigate(href)\n        })()\n      } else {\n        if (!isHashNavigation(location.href, to.toString())) {\n          startSoftNav('react')\n        }\n        const {preventAutofocus, ...options} = navigateOptions\n        startTransition(() => {\n          reactRouterNavigate(\n            to,\n            preventAutofocus\n              ? {\n                  ...options,\n                  state: {\n                    [PREVENT_AUTOFOCUS_KEY]: true,\n                    ...options.state,\n                  },\n                }\n              : options,\n          )\n          const {turbo, ...state} = window.history.state\n          window.history.replaceState({...state, skipTurbo: true}, '', location.href)\n        })\n      }\n    },\n    [history, reactRouterNavigate, routes],\n  )\n}\n\n/**\n * An implementation of `useSearchParams` that mirrors `react-router-dom`'s `useSearchParams` hook\n * but utilizes `@github-ui/useNavigate` instead of `react-router` `useNavigate` to handle updates.\n */\nexport const useSearchParams = () => {\n  const [searchParams] = useReactRouterSearchParams()\n  const navigate = useNavigate()\n  const {pathname} = useLocation()\n\n  const setSearchParams = React.useCallback<\n    (\n      nextInit?: URLSearchParamsInit | ((prev: URLSearchParams) => URLSearchParamsInit),\n      navigateOpts?: NavigateOptionsWithPreventAutofocus,\n    ) => void\n  >(\n    (nextInit, navigateOptions = {}) => {\n      const newSearchParams = createSearchParams(typeof nextInit === 'function' ? nextInit(searchParams) : nextInit)\n      navigate(\n        {\n          pathname,\n          search: newSearchParams.toString(),\n        },\n        navigateOptions,\n      )\n    },\n    [searchParams, navigate, pathname],\n  )\n\n  return [searchParams, setSearchParams] as const\n}\n","import {useLayoutEffect} from '@github-ui/use-layout-effect'\nimport {useRef} from 'react'\n\nexport function useTrackingRef<T>(value: T): React.MutableRefObject<T> {\n  const ref = useRef(value)\n\n  useLayoutEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref\n}\n","/**\n * A Fetch function which will automatically add the correct headers for\n * making requests to GitHub application servers as long as the associated controller methods allow it.\n * Track down the associated controller method and confirm the controller includes\n * ApplicationController::VerifiedFetchDependency as well as `allow_verified_fetch only:`\n * to the relevant controller methods.\n *\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetch('/foo', {method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.text())\ntest.\n *     }\n */\nexport function verifiedFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  assertRelativePathOrSameOrigin(path)\n\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Verified-Fetch': 'true',\n    'X-Requested-With': 'XMLHttpRequest',\n  }\n\n  return fetch(path, {...init, headers})\n}\n\nexport interface JSONRequestInit extends Omit<RequestInit, 'body'> {\n  body?: unknown\n}\n\nfunction assertRelativePathOrSameOrigin(path: string) {\n  if (process.env.NODE_ENV === 'test' && !window.location.origin) return\n  const url = new URL(path, window.location.origin)\n  if (url.origin !== window.location.origin) {\n    throw new Error('Can not make cross-origin requests from verifiedFetch')\n  }\n}\n\n/**\n * A Fetch function which will automatically add the correct headers for\n * making JSON requests\n *\n * Will also `JSON.stringify` the request body if provided.\n\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetchJSON('/foo', {body: {foo: 'bar'}, method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.json())\n *     }\n */\nexport function verifiedFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  }\n\n  const body = init?.body ? JSON.stringify(init.body) : undefined\n\n  return verifiedFetch(path, {...init, body, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetch(path, {...init, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetchJSON(path, {...init, headers})\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Description-module__container--b3n6F\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {Box} from '@primer/react'\nimport {clsx} from 'clsx'\n\nimport type {StylableProps} from '../types'\nimport styles from './Description.module.css'\n\ninterface ListItemDescriptionProps extends StylableProps {\n  children?: React.ReactNode\n}\n\nexport function ListItemDescription({children, style, className, sx}: ListItemDescriptionProps) {\n  return (\n    <Box\n      {...testIdProps('list-view-item-description')}\n      className={clsx(styles.container, className)}\n      style={style}\n      sx={sx}\n    >\n      {children}\n    </Box>\n  )\n}\n\ntry{ ListItemDescription.displayName ||= 'ListItemDescription' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"LeadingContent-module__container--NoK8W\",\"isSelectable\":\"LeadingContent-module__isSelectable--J9kYS\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {Box} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {PropsWithChildren} from 'react'\n\nimport {useListViewSelection} from '../ListView/SelectionContext'\nimport type {StylableProps} from '../types'\nimport styles from './LeadingContent.module.css'\n\nexport const ListItemLeadingContent = ({style, className, sx, children}: PropsWithChildren<StylableProps>) => {\n  const {isSelectable} = useListViewSelection()\n\n  return (\n    <Box\n      className={clsx(styles.container, isSelectable && styles.isSelectable, className)}\n      {...testIdProps('list-view-item-leading-content')}\n      style={style}\n      sx={sx}\n    >\n      {children}\n    </Box>\n  )\n}\n\ntry{ ListItemLeadingContent.displayName ||= 'ListItemLeadingContent' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"outer\":\"LeadingVisual-module__outer--SJchr\",\"hasNewActivity\":\"LeadingVisual-module__hasNewActivity--soQyL\",\"defaultVariant\":\"LeadingVisual-module__defaultVariant--ITyiW\",\"inner\":\"LeadingVisual-module__inner--O92jr\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"UnreadIndicator-module__container--RzNLy\"};","import {testIdProps} from '@github-ui/test-id-props'\n\nimport styles from './UnreadIndicator.module.css'\n\nexport const ListItemUnreadIndicator = () => {\n  return (\n    <div className={styles.container}>\n      <span className=\"sr-only\" {...testIdProps('list-view-item-unread-indicator')}>\n        New activity.\n      </span>\n    </div>\n  )\n}\n\ntry{ ListItemUnreadIndicator.displayName ||= 'ListItemUnreadIndicator' } catch {}","import {testIdProps} from '@github-ui/test-id-props'\nimport {Octicon, type OcticonProps} from '@primer/react'\nimport {clsx} from 'clsx'\nimport {type PropsWithChildren, type ReactNode, useEffect} from 'react'\n\nimport {useListViewVariant} from '../ListView/VariantContext'\nimport styles from './LeadingVisual.module.css'\nimport {useListItemNewActivity} from './NewActivityContext'\nimport {useListItemStatus} from './StatusContext'\nimport {ListItemUnreadIndicator} from './UnreadIndicator'\n\nexport type ListItemLeadingVisualProps = {\n  /**\n   * The Octicon component representing the desired icon\n   */\n  icon?: OcticonProps['icon']\n  /**\n   * Render any child content as the leading visual\n   * NOTE: if both icon and children are passed, the icon will be rendered first, with the children appended after\n   */\n  children?: ReactNode\n  /**\n   * The name of the Primer variable that will be used for the icon's fill\n   * eg.: done.fg\n   */\n  color?: string\n  /**\n   * A text description of the item\n   * Used for visually hidden text to describe the item on focus for the screen readers\n   */\n  description?: string\n  /**\n   * Indicates whether the rendered item has new content since lastViewed\n   */\n  newActivity?: boolean\n}\n\nexport function ListItemLeadingVisual({\n  icon,\n  color,\n  description,\n  newActivity = false,\n  children,\n  ...props\n}: ListItemLeadingVisualProps & PropsWithChildren) {\n  const {variant} = useListViewVariant()\n  const {setStatus} = useListItemStatus()\n  const {setHasNewActivity} = useListItemNewActivity()\n  const trimmedDescription = description?.trim()\n\n  useEffect(() => {\n    setHasNewActivity(newActivity)\n  }, [newActivity, setHasNewActivity])\n\n  useEffect(() => {\n    if (trimmedDescription) setStatus(trimmedDescription)\n  }, [setStatus, trimmedDescription])\n\n  return (\n    <div\n      className={clsx(\n        styles.outer,\n        variant === 'default' && styles.defaultVariant,\n        newActivity && styles.hasNewActivity,\n      )}\n      {...props}\n    >\n      <div>\n        <div {...testIdProps('list-view-leading-visual')} className={styles.inner}>\n          {icon && <Octicon aria-label=\"\" icon={icon} color={color} />}\n          {children}\n          {trimmedDescription && (\n            <span className=\"sr-only\" {...testIdProps('leading-visual-text-description')}>\n              {trimmedDescription}\n            </span>\n          )}\n        </div>\n      </div>\n      {newActivity && <ListItemUnreadIndicator />}\n    </div>\n  )\n}\n\ntry{ ListItemLeadingVisual.displayName ||= 'ListItemLeadingVisual' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MainContent-module__container--ry4iL\",\"inner\":\"MainContent-module__inner--bU_tk\",\"compact\":\"MainContent-module__compact--mM626\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {clsx} from 'clsx'\nimport {Children, isValidElement, type ReactNode} from 'react'\n\nimport {useListViewVariant} from '../ListView/VariantContext'\nimport styles from './MainContent.module.css'\nimport {ListItemTitle} from './Title'\n\nexport function ListItemMainContent({children}: {children?: ReactNode}) {\n  const {variant} = useListViewVariant()\n  const childrenArray = Children.toArray(children)\n  const titleIndex = childrenArray.findIndex(\n    child => isValidElement(child) && typeof child !== 'string' && child.type === ListItemTitle,\n  )\n  const title = childrenArray[titleIndex]\n  const nonTitleChildren =\n    titleIndex < 0 ? childrenArray : childrenArray.slice(0, titleIndex).concat(childrenArray.slice(titleIndex + 1))\n  return (\n    <>\n      {title}\n      <div {...testIdProps('list-view-item-main-content')} className={styles.container}>\n        <div className={clsx(styles.inner, variant === 'compact' && styles.compact)}>{nonTitleChildren}</div>\n      </div>\n    </>\n  )\n}\n\ntry{ ListItemMainContent.displayName ||= 'ListItemMainContent' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"metadata\":\"Metadata-module__metadata--yvrod\",\"secondary\":\"Metadata-module__secondary--zMgLx\",\"primary\":\"Metadata-module__primary--cJgJU\",\"alignRight\":\"Metadata-module__alignRight--rp0_Z\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {Box, type BoxProps} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {PropsWithChildren} from 'react'\n\nimport type {StylableProps} from '../types'\nimport styles from './Metadata.module.css'\n\nexport type ListItemMetadataProps = PropsWithChildren<{\n  /**\n   * Controls how the metadata will be aligned inside the trailing content. Defaults to 'left'.\n   */\n  alignment?: 'left' | 'right'\n  /**\n   * Alter the appearance of the metadata to appear more subtle than other ListItem content ('secondary', default) or\n   * comparable to other ListItem content ('primary'). Affects text color, font size, width, and distance from other\n   * metadata items.\n   */\n  variant?: 'primary' | 'secondary'\n}> &\n  Omit<BoxProps, 'sx'> &\n  StylableProps\n\nexport function ListItemMetadata({children, alignment, variant, ...props}: ListItemMetadataProps) {\n  return (\n    <Box\n      {...testIdProps('list-view-item-metadata-item')}\n      {...props}\n      className={clsx(\n        styles.metadata,\n        variant === 'primary' ? styles.primary : styles.secondary,\n        alignment === 'right' && styles.alignRight,\n        props.className,\n      )}\n    >\n      {children}\n    </Box>\n  )\n}\n\ntry{ ListItemMetadata.displayName ||= 'ListItemMetadata' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TrailingBadge-module__container--gg6pc\",\"label\":\"TrailingBadge-module__label--F7ho5\",\"title\":\"TrailingBadge-module__title--FDayi\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {Box, Label, type LabelProps} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {PropsWithChildren} from 'react'\n\nimport type {PrefixedStylableProps} from '../types'\nimport styles from './TrailingBadge.module.css'\n\nexport type ListItemTrailingBadgeProps = PropsWithChildren<Pick<LabelProps, 'variant' | 'size'>> &\n  PrefixedStylableProps<'container'> & {\n    /**\n     * Text that is shown as a visible Primer Label and as visually hidden text for screen readers.\n     */\n    title: string\n  }\n\nexport const ListItemTrailingBadge = ({\n  title,\n  containerStyle,\n  containerSx,\n  containerClassName,\n  children,\n  ...props\n}: ListItemTrailingBadgeProps) => {\n  return (\n    <Box\n      {...testIdProps('list-view-item-trailing-badge')}\n      className={clsx(styles.container, containerClassName)}\n      style={containerStyle}\n      sx={containerSx}\n      data-listview-component=\"trailing-badge\"\n    >\n      {children ? (\n        children\n      ) : (\n        <Label className={styles.label} {...props}>\n          <span className={styles.title}>{title}</span>\n        </Label>\n      )}\n    </Box>\n  )\n}\n\ntry{ ListItemTrailingBadge.displayName ||= 'ListItemTrailingBadge' } catch {}","import {announceFromElement} from '@github-ui/aria-live'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {Box} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {ReactElement, ReactNode, Suspense} from 'react'\nimport {isValidElement, useCallback, useEffect, useRef} from 'react'\n\nimport densityStyles from '../density-gap.module.css'\nimport {useNextHeaderTag} from '../hooks/use-next-header-tag'\nimport type {PrefixedStylableProps, StylableProps} from '../types'\nimport {ListViewActionBar, type ListViewActionBarProps} from './ActionBar'\nimport {useListViewId} from './IdContext'\nimport styles from './Metadata.module.css'\nimport type {ListViewSectionFilterLinks} from './SectionFilterLink'\nimport {ListViewSectionFilters} from './SectionFilters'\nimport {ListViewSelectAllCheckbox} from './SelectAllCheckbox'\nimport {useListViewSelection} from './SelectionContext'\nimport {useListViewTitle} from './TitleContext'\n\nexport type ListViewMetadataProps = {\n  /**\n   * The rendered title of the list or information regarding its contents.\n   */\n  title?: string | ReactNode\n  /**\n   * Links for applying any categorical, mutually exclusive section filters for the content of the ListView.\n   */\n  sectionFilters?: ListViewSectionFilterLinks | ReactElement<typeof Suspense>\n  /**\n   * Used for assistive announcements that are reflective of the visual updates to the list container a sighted user\n   * will experience when using the list. Defaults to no announcement. Visually hidden, for screenreaders only.\n   */\n  assistiveAnnouncement?: string\n  /**\n   * Callback for when the checkbox for selecting and deselecting all list items is toggled.\n   */\n  onToggleSelectAll?: (isSelectAllChecked: boolean) => void\n  /**\n   * Optional additional actions to show. Will not fall into an overflow dropdown menu to accommodate small screen\n   * widths.\n   */\n  children?: ReactNode\n} & StylableProps &\n  PrefixedStylableProps<'actions'> &\n  ListViewActionBarProps\n\nexport const ListViewMetadata = ({\n  title,\n  assistiveAnnouncement,\n  sectionFilters,\n  children,\n  style,\n  sx,\n  className,\n  actionsStyle,\n  actionsSx,\n  actionsClassName,\n  onToggleSelectAll,\n  ...actionBarProps\n}: ListViewMetadataProps) => {\n  const {idPrefix} = useListViewId()\n  const {anyItemsSelected} = useListViewSelection()\n  const {setHasMetadataTitle} = useListViewTitle()\n  const TitleTag = useNextHeaderTag('list-view-metadata')\n  const announceRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    setHasMetadataTitle(!!title)\n  })\n\n  useEffect(() => {\n    if (announceRef.current) announceFromElement(announceRef.current)\n  }, [assistiveAnnouncement])\n\n  const ListViewAnnouncements = () => {\n    return (\n      <div\n        id={`${idPrefix}-list-view-announcements`}\n        role=\"status\"\n        aria-live=\"polite\"\n        aria-atomic=\"true\"\n        className=\"sr-only\"\n        ref={announceRef}\n        {...testIdProps('list-view-announcement-container')}\n      >\n        {assistiveAnnouncement}\n      </div>\n    )\n  }\n\n  const ListFilters = useCallback(() => {\n    if (!sectionFilters) return null\n\n    if (Array.isArray(sectionFilters)) {\n      return <ListViewSectionFilters links={sectionFilters} />\n    } else if (isValidElement(sectionFilters)) {\n      return <>{sectionFilters}</>\n    }\n    return null\n  }, [sectionFilters])\n\n  return (\n    <Box\n      id={`${idPrefix}-list-view-metadata`}\n      className={clsx(styles.container, className, anyItemsSelected && densityStyles.spacious)}\n      style={style}\n      sx={sx}\n      {...testIdProps('list-view-metadata')}\n    >\n      <ListViewSelectAllCheckbox\n        onToggle={(isSelectAllChecked: boolean) => {\n          if (onToggleSelectAll) onToggleSelectAll(isSelectAllChecked)\n        }}\n      />\n\n      <ListFilters />\n\n      {title && !anyItemsSelected && (\n        <TitleTag className={styles.heading} {...testIdProps('list-view-header-title')}>\n          {title}\n        </TitleTag>\n      )}\n\n      <ListViewActionBar style={actionsStyle} sx={actionsSx} className={actionsClassName} {...actionBarProps}>\n        {children}\n      </ListViewActionBar>\n\n      {assistiveAnnouncement && <ListViewAnnouncements />}\n    </Box>\n  )\n}\n\ntry{ ListViewMetadata.displayName ||= 'ListViewMetadata' } catch {}\ntry{ TitleTag.displayName ||= 'TitleTag' } catch {}\ntry{ ListViewAnnouncements.displayName ||= 'ListViewAnnouncements' } catch {}\ntry{ ListFilters.displayName ||= 'ListFilters' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"normal\":\"density-gap-module__normal--WYrBD\",\"none\":\"density-gap-module__none--WMH6V\",\"condensed\":\"density-gap-module__condensed--seZl0\",\"spacious\":\"density-gap-module__spacious--Nnm9Z\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ActionBar-module__container--SjALR\"};","import {ActionBar as GitHubUiActionBar, type ActionBarProps as GitHubUiActionBarProps} from '@github-ui/action-bar'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {Box} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {ReactElement} from 'react'\n\nimport densityStyles from '../density-gap.module.css'\nimport type {StylableProps} from '../types'\nimport styles from './ActionBar.module.css'\nimport type {ListViewDensityToggle} from './DensityToggle'\n\n// Require actionsLabel if actions are provided, and vice versa.\ntype ListViewActionBar =\n  | {\n      /**\n       * Description of the controls found in the action bar, e.g., \"Issue actions\", \"Markdown formatting tools\".\n       * Will be used in a hidden label for accessibility purposes. Defaults to the title for the ListView.\n       */\n      actionsLabel: GitHubUiActionBarProps['label']\n      /**\n       * The controls to show in the action bar. These will move into a dropdown menu when the screen isn't big enough to\n       * fit them side by side.\n       */\n      actions: GitHubUiActionBarProps['actions']\n    }\n  | {actionsLabel?: undefined; actions?: undefined}\n\nexport type ListViewActionBarProps = ListViewActionBar & {\n  /**\n   * Include a toggle to switch between Comfortable and Condensed view modes.\n   */\n  densityToggle?: ReactElement<typeof ListViewDensityToggle>\n} & StylableProps &\n  Omit<GitHubUiActionBarProps, 'actions' | 'label'>\n\nexport const ListViewActionBar = ({\n  actions,\n  style,\n  sx,\n  className,\n  children,\n  density,\n  actionsLabel,\n  densityToggle,\n}: ListViewActionBarProps) => {\n  const nonCollapsibleActions = (\n    <>\n      {children}\n      {densityToggle}\n    </>\n  )\n\n  if (actions && actions.length > 0) {\n    return (\n      <GitHubUiActionBar\n        label={actionsLabel?.trim()}\n        actions={actions}\n        density={density}\n        {...testIdProps('list-view-actions')}\n        style={style}\n        sx={sx}\n        className={className}\n      >\n        {nonCollapsibleActions}\n      </GitHubUiActionBar>\n    )\n  }\n\n  return (\n    <Box\n      {...testIdProps('list-view-actions')}\n      style={style}\n      sx={sx}\n      className={clsx(styles.container, density && densityStyles[density], className)}\n    >\n      {nonCollapsibleActions}\n    </Box>\n  )\n}\n\ntry{ ListViewActionBar.displayName ||= 'ListViewActionBar' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Metadata-module__container--tL6Q3\",\"heading\":\"Metadata-module__heading--HAxII\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"SectionFilters-module__container--MmIUF\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {clsx} from 'clsx'\n\nimport type {ListViewSectionFilterLinks} from './SectionFilterLink'\nimport styles from './SectionFilters.module.css'\n\ntype ListViewSectionFiltersProps = {\n  links: ListViewSectionFilterLinks\n}\n\nexport const ListViewSectionFilters = ({links}: ListViewSectionFiltersProps) => {\n  if (links.length < 1) return null\n\n  return (\n    <div {...testIdProps('list-view-section-filters')}>\n      <ul className={clsx('list-style-none', styles.container)}>\n        {links.map((sectionFilterLink, index) => (\n          <li key={`section-filter-${index}`} {...testIdProps(`list-view-section-filter-${index}`)}>\n            {sectionFilterLink}\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\ntry{ ListViewSectionFilters.displayName ||= 'ListViewSectionFilters' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"SelectAllCheckbox-module__container--FJDtV\",\"formControlContainer\":\"SelectAllCheckbox-module__formControlContainer--JTzPI\",\"count\":\"SelectAllCheckbox-module__count--xEF8c\"};","import {announceFromElement} from '@github-ui/aria-live'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {Box, Checkbox, FormControl} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {KeyboardEvent} from 'react'\nimport {useCallback, useEffect, useId, useMemo, useRef} from 'react'\n\nimport type {StylableProps} from '../types'\nimport {useListViewMultiPageSelection} from './MultiPageSelectionContext'\nimport styles from './SelectAllCheckbox.module.css'\nimport {useListViewSelection} from './SelectionContext'\nimport {useListViewTitle} from './TitleContext'\n\ntype ListViewSelectAllCheckboxProps = {onToggle?: (value: boolean) => void; className?: string} & StylableProps\n\nexport const ListViewSelectAllCheckbox = ({onToggle, style, className, sx}: ListViewSelectAllCheckboxProps) => {\n  const {title} = useListViewTitle()\n  const {\n    isSelectable,\n    selectedCount,\n    totalCount,\n    countOnPage,\n    isSelectAllChecked,\n    anyItemsSelected,\n    singularUnits,\n    pluralUnits,\n  } = useListViewSelection()\n  const {multiPageSelectionAllowed} = useListViewMultiPageSelection()\n  const idPrefix = useId()\n  const checkboxRef = useRef<HTMLInputElement>(null)\n  const srRef = useRef<HTMLSpanElement>(null)\n  const notAllItemsSelected = useMemo(() => {\n    if (multiPageSelectionAllowed && typeof totalCount === 'number') {\n      return selectedCount < Math.max(totalCount, countOnPage)\n    }\n    return selectedCount < countOnPage\n  }, [countOnPage, multiPageSelectionAllowed, selectedCount, totalCount])\n  const isIndeterminate = anyItemsSelected && notAllItemsSelected\n  const units = selectedCount === 1 ? singularUnits : pluralUnits\n  const suffix = typeof totalCount === 'number' ? `of ${totalCount} selected` : 'selected'\n  const srString = `${selectedCount} ${units} ${suffix}`\n\n  const handleBulkSelectToggle = useCallback(() => {\n    if (!onToggle) return\n\n    if (isIndeterminate) {\n      onToggle(false)\n    } else {\n      onToggle(!isSelectAllChecked)\n    }\n  }, [isIndeterminate, isSelectAllChecked, onToggle])\n\n  useEffect(() => {\n    srRef.current && announceFromElement(srRef.current)\n  }, [srRef, srString])\n\n  if (!isSelectable) return null\n\n  const checkboxId = `${idPrefix}-list-view-select-all`\n\n  const onKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault()\n      handleBulkSelectToggle()\n    }\n  }\n\n  return (\n    <Box\n      style={style}\n      sx={sx}\n      className={clsx(styles.container, className)}\n      {...testIdProps('list-view-select-all-container')}\n      id={`${idPrefix}-list-view-select-all-container`}\n    >\n      <div className={styles.formControlContainer}>\n        <FormControl id={checkboxId}>\n          <Checkbox\n            onChange={handleBulkSelectToggle}\n            value=\"default\"\n            checked={isSelectAllChecked}\n            indeterminate={isIndeterminate}\n            onKeyDown={onKeyDown}\n            tabIndex={0}\n            ref={checkboxRef}\n            {...testIdProps('select-all-checkbox')}\n          />\n          <FormControl.Label visuallyHidden {...testIdProps('select-all-label')}>\n            Select all {pluralUnits}: {title}\n          </FormControl.Label>\n        </FormControl>\n      </div>\n      <p\n        className={clsx(styles.count, anyItemsSelected ? undefined : 'sr-only')}\n        {...testIdProps('select-all-selected-count')}\n      >\n        <span\n          aria-hidden=\"true\"\n          className={anyItemsSelected ? undefined : 'sr-only'}\n          {...testIdProps('select-all-selected-count-without-units')}\n        >\n          {selectedCount} {suffix}{' '}\n        </span>\n        <span className=\"sr-only\" ref={srRef} {...testIdProps('sr-content')}>\n          {srString}\n        </span>\n      </p>\n    </Box>\n  )\n}\n\ntry{ ListViewSelectAllCheckbox.displayName ||= 'ListViewSelectAllCheckbox' } catch {}","import type {ChildRoute, LoaderResult, RouteRegistration, TransitionType} from './app-routing-types'\nimport type React from 'react'\nimport type {Location} from '@remix-run/router'\n\nexport interface JsonRouteProps {\n  path: string\n  Component: React.ComponentType\n  transitionType?: TransitionType\n  shouldNavigateOnError?: boolean\n  children?: ChildRoute[]\n}\n/**\n * A utility for building a route registration for a route that consumes a JSON object (either via embedding in a\n * script tag or via a JSON fetch on React soft navigations).\n */\nexport function jsonRoute<TRouteData, TEmbeddedData>({\n  path,\n  Component,\n  /**\n   * Some routes want to handle their own errors and not just show a generic error page. In this case,\n   * the error is just handled like any other payload for the route.\n   * NOTE: We might consider replacing the shouldNavigateOnError flag with a parallel implementation to jsonRoute.\n   */\n  shouldNavigateOnError,\n  transitionType,\n  children,\n}: JsonRouteProps): RouteRegistration<TRouteData, TEmbeddedData> {\n  async function coreLoader({location}: {location: Location}): Promise<LoaderResult<TRouteData>> {\n    let response: Response\n    try {\n      const fetchPath = `${location.pathname}${location.search}`\n      response = await window.fetch(fetchPath, {\n        headers: {\n          Accept: 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-GitHub-Target': 'dotcom',\n          'X-React-Router': 'json',\n        },\n      })\n    } catch (error) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'fetchError'},\n      }\n    }\n    if (response.redirected) {\n      return {\n        type: 'redirect',\n        url: response.url,\n      }\n    } else if (!response.ok) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'httpError', httpStatus: response.status},\n      }\n    } else {\n      try {\n        const responseJson = await response.json()\n        return {\n          type: 'loaded',\n          data: responseJson,\n          title: responseJson.title,\n        }\n      } catch (error) {\n        return {\n          type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n          error: {type: 'badResponseError'},\n        }\n      }\n    }\n  }\n\n  function loadFromEmbeddedData({embeddedData}: {embeddedData: TEmbeddedData}): {data: TRouteData; title: string} {\n    const data = embeddedData as unknown as TRouteData & {title: string}\n    return {data, title: data.title}\n  }\n\n  return {\n    path,\n    // TODO: consider wrapping Component with a component that passes payload as a prop — ideally as part of migrating\n    // away from useRoutePayload.\n    Component,\n    coreLoader,\n    loadFromEmbeddedData,\n    transitionType,\n    children,\n  }\n}\n"],"names":["currentUrl","targetUrl","current","URL","window","location","origin","target","hasHash","href","includes","host","pathname","search","ComputeService","NetworkConfiguration","constructor","id","name","createdOn","computeService","service","runnerGroups","App","props","children","displayName","NetworkConfigurationConsts","hostedComputeNetworkingTitle","networkConfigurationsDescription","learnMoreLink","learnMore","runnerGroupNetworkingLink","searchBoxPlaceholder","comingSoonLink","runnerGroupItemUrl","path","runnerGroupId","noNetworkConfigurationsAdded","noNetworkConfigurationsAddedDescriptionBusiness","noNetworkConfigurationsAddedDescriptionOrg","azurePrivateNetwork","azurePrivateNetworkDescription","azurePrivateNetworkDescriptionServiceAgnostic","githubHostedPrivateNetwork","githubHostedPrivateNetworkDescription","nameLabel","networkSettingsUrl","networkId","editNetworkConfigurationPath","configurationId","newNetworkConfiguration","deleteNetworkConfiguration","formLink","docLink","errorDisplayNameInUse","errorNetworkResourceInUse","errorUnsupportedResourceLocation","errorDuplicateLocation","statusConfigBannerMessage","statusAllVNetBannerMessage","orgDisabledEmptyStateCardTitle","orgDisabledEmptyStateCardDescription","iconPath","fill","fillRule","d","AzureIcon","svg","aria-label","xmlns","width","height","viewBox","DeleteDialog","addToast","useToastContext","navigate","useNavigate","isCorrectConfirmationDelete","setIsCorrectConfirmationDelete","useState","submitClickedDelete","setSubmitClickedDelete","onDeleteDialogClose","useCallback","setShowDeleteDialog","removeNetworkConfiguration","result","verifiedFetchJSON","removeNetworkConfigurationPath","method","body","ok","removeNetworkConfigurationFunction","networkConfigurationsPath","type","message","e","Dialog","title","onClose","renderFooter","Footer","sx","display","flexDirection","gap","justifyContent","FormControl","required","Label","fontWeight","b","TextInput","block","onChange","value","trim","Validation","variant","Button","onClick","className","div","Box","Flash","Octicon","icon","XIcon","size","color","mt","mb","Text","pl","strong","enabledForCodespaces","PrivateNetworkConsts","azureNetworkResourceIdLabel","azureRegionLabel","azureSubscriptionIdLabel","resourceNameLabel","invalidNameError","unexpectedErrorOccurred","resourceIdLearnMoreText","resourceIdLearnMoreLink","settingsIdNotFound","settingsIdAlreadyInUse","settingsIdAlreadyInCurrentConfiguration","settingsBelongsToAnotherOrg","resourceGroupLabel","settingsIdCaption","setUpPrivateNetworkDescription","setUpPrivateNetworkDescriptionServiceAgnostic","subnetLabel","validSettingsId","virtualNetworkLabel","azurePrivateNetworking","azurePrivateNetworkingDescription","azurePrivateNetworkingDescriptionServiceAgnostic","azurePrivateNetworkingNotEmptyError","addAzureVirtualNetwork","noAzurePrivateNetworksAdded","createConfiguration","allowedServicesNoneLabel","allowedServicesNoneDescription","allowedServicesActionsLabel","allowedServicesActionsDescription","allowedServicesCodespacesLabel","allowedServicesCodespacesDescription","hasNameValidationError","getNameValidationError","hasPrivateNetworkValidationError","getPrivateNetworkValidationError","privateNetworkLocation","validateNetworkConfigurationName","findUrl","regex","test","data","json","networkConfigurations","length","createOrUpdateNetworkConfiguration","createOrUpdateUrl","listNetworkConfigurationsUrl","payload","success","code","error","JSON","stringify","link","headers","get","Error","DisableDialog","isCorrectConfirmation","setIsCorrectConfirmation","submitClicked","setSubmitClicked","onDisableDialogClose","setShowDisableDialog","updateNetworkConfiguration","requestBody","None","updateNetworkConfigurationPath","setConfigurationDisabled","CheckIcon","PrivateNetworkValidationResult","NameValidationResult","NetworkConfigurationListItem","showDeleteDialog","showDisableDialog","configurationDisabled","networkConfig","enableDisableActionsForConfiguration","Actions","ListItem","ListItemTitle","trailingBadges","ListItemTrailingBadge","undefined","metadata","canEditNetworkConfiguration","ListItemMetadata","alignment","IconButton","unsafeDisableTooltip","PencilIcon","ActionMenu","Anchor","KebabHorizontalIcon","Overlay","ActionList","Item","onSelect","ListItemLeadingContent","ListItemLeadingVisual","description","ListItemMainContent","ListItemDescription","RelativeTime","date","Date","tense","NetworkConfigurations","useRoutePayload","setNetworkConfigurations","networks","searchText","setSearchText","filter","item","serviceAgnostic","totalNetworkConfigurations","setTotalNetworkConfigurations","pageCount","Math","ceil","currentPage","setCurrentPage","statusBannerMessage","displayAllVNetStatusBanner","PageLayout","containerWidth","padding","p","Header","displayConfigStatusBanner","alignItems","AlertIcon","Heading","as","Link","inline","Content","EmptyStateCard","newPrivateNetworkPath","isBusiness","pb","leadingVisual","SearchIcon","placeholder","ml","NetworkConfigurationActionMenu","NetworkConfigurationList","pageNumber","defaultNetworkConfigurationPerPage","Pagination","onPageChange","newPage","preventDefault","showPages","narrow","border","borderRadius","textAlign","fontSize","flexWrap","OrgDisabledEmptyStateCard","LinkItem","LeadingVisual","Description","Divider","Group","GroupHeading","span","LinkExternalIcon","MarkGithubIcon","filteredNetworks","toLowerCase","itemCount","announce","filteredNetworksSlice","getNetworkConfigurationsChunk","itemsPerPage","start","slice","useEffect","borderColor","ListView","ListViewMetadata","assistiveAnnouncement","map","ShieldLockIcon","pr","PrivateNetworkSummary","readOnly","contrast","privateNetwork","resourceName","subscription","gridTemplateColumns","columnGap","rowGap","virtualNetwork","subnet","resourceGroup","formBoxStyle","PrivateNetworkItem","showEditDialog","setShowEditDialog","onEditDialogClose","onRemove","containerSx","anchorSx","flexGrow","TrashIcon","PackageIcon","PrivateNetworkList","validationStatus","privateNetworks","ariaLabelledBy","network","cardProps","onShowNewDialog","aria-labelledby","aria-describedby","ariaDescribedBy","marginTop","AllowedServicesOptions","RadioGroup","selectedService","s","setSelectedService","Caption","borderWidth","borderStyle","margin","Radio","defaultChecked","disabled","actionsSelectable","Codespaces","AddPrivateNetworkDialog","resourceIdValidationResult","setResourceIdValidationResult","validationDetails","setValidationDetails","resourceIdLoading","setResourceIdLoading","setPrivateNetwork","validateResourceId","settingsIdString","clearForm","existingPrivateNetwork","find","networkSettingsId","currentResourceId","networkConfigurationId","onDismiss","onNewDialogClose","footerButtons","buttonType","content","onAdd","onBlur","aria-invalid","loading","getFormValidationComponent","ValidationResult","NetworkConfigurationHeading","ArrowLeftIcon","previousPageText","Breadcrumbs","selected","currentPageText","CreatePrivateNetwork","nameInputRef","useRef","nameValidationResult","setNameValidationResult","nameValidationIsBusy","setNameValidationIsBusy","creationErrorMessage","setCreationErrorMessage","networkConfigurationName","setNetworkConfigurationName","showNewDialog","setShowNewDialog","setPrivateNetworks","privateNetworkValidationResult","setPrivateNetworkValidationResult","canAddNewNetwork","setCanAddNewNetwork","registerNetworkConfiguration","MissingNetwork","validateName","focus","privateNetworkIds","n","NetworkResourceInUse","UnsupportedResourceLocation","DisplayNameInUse","formatOnly","validationResult","findNetworkConfigurationPath","Success","addNewNetworkButton","inactive","aria-live","ref","Tooltip","wrap","newPrivateNetwork","visuallyHidden","removedPrivateNetwork","RunnerGroupListItem","publicRepo","allowPublic","numberOfSelected","visibility","selectedTargetsCount","runnerGroupPath","NetworkConfigurationSettings","networkConfiguration","enableConfigurationForActions","request_body","borderBottom","DeleteActionMenu","DisableDeleteActionMenu","ConfigDisabledFlash","RunnerGroupEmptyState","Blankslate","spacious","PrimaryAction","EditNetworkConfigurationSettings","editErrorMessage","setEditErrorMessage","saveChanges","DuplicateLocation","debouncedValidate","useDebounce","aria-atomic","HostedComputeNetworkingConsts","HostedComputeNetworkingDialogTitle","HostedComputeNetworkingDialogDisabledAbility","HostedComputeNetworkingDialogDisabledOwned","HostedComputeNetworkingDialogDisabledWorkflow","HostedComputeNetworkingDialogDisabledRecommendation","DisableHostedComputeNetworkingDialog","handleDialogSubmit","updatePermission","EditHostedComputeNetworkingPolicySettings","orgsCanCreate","setOrgsCanCreate","orgsCanCreateNetworkConfigurations","csrf","useCSRFToken","updatePath","updateMethod","resultBannerText","setResultBannerText","resultBannerVariant","setResultBannerVariant","canCreateEnabled","canCreateDisabled","canCreate","formData","FormData","append","toString","response","verifiedFetch","toUpperCase","orgsCanCreateLabelId","form","selectedValue","data-testid","StaffToolsNetworkConfigurationListItem","runnerGroupsCount","badges","push","pluralize","StaffToolsHostedComputeNetworking","divider","isEnterprise","NetworkConfigurationListView","entity","registerReactAppFactory","routes","jsonRoute","Component","csrf_tokens","fn","waitMs","leading","maxWait","trailing","onChangeBehavior","fnRef","useTrackingRef","debouncedFn","useMemo","options","debounce","args","history","React","AppContext","reactRouterNavigate","useReactRouterNavigate","to","navigateOptions","resolvePath","matchRoutes","isHashNavigation","startSoftNav","preventAutofocus","startTransition","state","PREVENT_AUTOFOCUS_KEY","turbo","replaceState","skipTurbo","createHref","softNavigate","turboSoftNavigate","useSearchParams","searchParams","useReactRouterSearchParams","useLocation","setSearchParams","nextInit","newSearchParams","createSearchParams","useLayoutEffect","init","assertRelativePathOrSameOrigin","url","fetch","Accept","reactFetch","reactFetchJSON","style","testIdProps","clsx","styles","container","isSelectable","useListViewSelection","ListItemUnreadIndicator","newActivity","useListViewVariant","setStatus","useListItemStatus","setHasNewActivity","useListItemNewActivity","trimmedDescription","outer","defaultVariant","hasNewActivity","inner","childrenArray","Children","toArray","titleIndex","findIndex","child","isValidElement","nonTitleChildren","concat","compact","primary","secondary","alignRight","containerStyle","containerClassName","data-listview-component","label","TitleTag","ListViewAnnouncements","ListFilters","ListViewActionBar","actions","density","actionsLabel","densityToggle","nonCollapsibleActions","GitHubUiActionBar","densityStyles","ListViewSectionFilters","links","ul","sectionFilterLink","index","li","ListViewSelectAllCheckbox","onToggle","useListViewTitle","selectedCount","totalCount","countOnPage","isSelectAllChecked","anyItemsSelected","singularUnits","pluralUnits","multiPageSelectionAllowed","useListViewMultiPageSelection","idPrefix","useId","checkboxRef","srRef","notAllItemsSelected","max","isIndeterminate","units","suffix","srString","handleBulkSelectToggle","announceFromElement","checkboxId","formControlContainer","Checkbox","checked","indeterminate","onKeyDown","event","key","tabIndex","count","aria-hidden","sectionFilters","actionsStyle","actionsSx","actionsClassName","onToggleSelectAll","actionBarProps","useListViewId","setHasMetadataTitle","useNextHeaderTag","announceRef","Array","isArray","heading","role","shouldNavigateOnError","transitionType","coreLoader","fetchPath","redirected","httpStatus","status","responseJson","loadFromEmbeddedData","embeddedData"],"sourceRoot":""}
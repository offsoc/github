# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `OauthAccess`.
# Please instead update this file by running `bin/tapioca dsl OauthAccess`.

class OauthAccess
  include GeneratedAsyncReflectionAssociations
  include GeneratedColumnCoderAccessors
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::OauthAccess).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::OauthAccess).void)
      ).returns(::OauthAccess)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::OauthAccess).void)
      ).returns(::OauthAccess)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::OauthAccess).void)
      ).returns(::OauthAccess)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::OauthAccess).void)
      ).returns(::OauthAccess)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::OauthAccess).void)
      ).returns(::OauthAccess)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::OauthAccess]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::OauthAccess)) }
    def fifth; end

    sig { returns(::OauthAccess) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::OauthAccess)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::OauthAccess) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::OauthAccess).void)
      ).returns(T.nilable(T::Enumerator[::OauthAccess]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::OauthAccess]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::OauthAccess]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::OauthAccess).void)
      ).returns(::OauthAccess)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::OauthAccess).void)
      ).returns(::OauthAccess)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::OauthAccess).void)
      ).returns(::OauthAccess)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::OauthAccess)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::OauthAccess) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::OauthAccess) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::OauthAccess) }
    def first!; end

    sig { returns(T.nilable(::OauthAccess)) }
    def forty_two; end

    sig { returns(::OauthAccess) }
    def forty_two!; end

    sig { returns(T.nilable(::OauthAccess)) }
    def fourth; end

    sig { returns(::OauthAccess) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::OauthAccess) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::OauthAccess).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::OauthAccess).void)
      ).returns(::OauthAccess)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::OauthAccess).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::OauthAccess).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::OauthAccess)) }
    def second; end

    sig { returns(::OauthAccess) }
    def second!; end

    sig { returns(T.nilable(::OauthAccess)) }
    def second_to_last; end

    sig { returns(::OauthAccess) }
    def second_to_last!; end

    sig { returns(::OauthAccess) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::OauthAccess) }
    def take!; end

    sig { returns(T.nilable(::OauthAccess)) }
    def third; end

    sig { returns(::OauthAccess) }
    def third!; end

    sig { returns(T.nilable(::OauthAccess)) }
    def third_to_last; end

    sig { returns(::OauthAccess) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.untyped) }
    def application; end

    sig { params(value: T.untyped).void }
    def application=(value); end

    sig { returns(T.nilable(::OauthAuthorization)) }
    def authorization; end

    sig { params(value: T.nilable(::OauthAuthorization)).void }
    def authorization=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OauthAuthorization) }
    def build_authorization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DeviceAuthorizationGrant) }
    def build_device_authorization_grant(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def build_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OauthApplication) }
    def build_oauth_application(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RefreshToken) }
    def build_refresh_token(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OauthAuthorization) }
    def create_authorization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OauthAuthorization) }
    def create_authorization!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DeviceAuthorizationGrant) }
    def create_device_authorization_grant(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DeviceAuthorizationGrant) }
    def create_device_authorization_grant!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def create_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def create_integration!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OauthApplication) }
    def create_oauth_application(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OauthApplication) }
    def create_oauth_application!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RefreshToken) }
    def create_refresh_token(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RefreshToken) }
    def create_refresh_token!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def credential_authorization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def credential_authorization_ids=(ids); end

    # This method is created by ActiveRecord on the `OauthAccess` class because it declared `has_many :credential_authorizations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Organization::CredentialAuthorization::PrivateCollectionProxy) }
    def credential_authorizations; end

    sig { params(value: T::Enumerable[::Organization::CredentialAuthorization]).void }
    def credential_authorizations=(value); end

    sig { returns(T.nilable(::DeviceAuthorizationGrant)) }
    def device_authorization_grant; end

    sig { params(value: T.nilable(::DeviceAuthorizationGrant)).void }
    def device_authorization_grant=(value); end

    sig { returns(T.untyped) }
    def installation; end

    sig { params(value: T.untyped).void }
    def installation=(value); end

    sig { returns(T.nilable(::Integration)) }
    def integration; end

    sig { params(value: T.nilable(::Integration)).void }
    def integration=(value); end

    sig { returns(T.nilable(::OauthApplication)) }
    def oauth_application; end

    sig { params(value: T.nilable(::OauthApplication)).void }
    def oauth_application=(value); end

    sig { returns(T::Array[T.untyped]) }
    def public_key_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def public_key_ids=(ids); end

    # This method is created by ActiveRecord on the `OauthAccess` class because it declared `has_many :public_keys`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PublicKey::PrivateCollectionProxy) }
    def public_keys; end

    sig { params(value: T::Enumerable[::PublicKey]).void }
    def public_keys=(value); end

    sig { returns(T.nilable(::RefreshToken)) }
    def refresh_token; end

    sig { params(value: T.nilable(::RefreshToken)).void }
    def refresh_token=(value); end

    sig { returns(T.untyped) }
    def reload_application; end

    sig { returns(T.nilable(::OauthAuthorization)) }
    def reload_authorization; end

    sig { returns(T.nilable(::DeviceAuthorizationGrant)) }
    def reload_device_authorization_grant; end

    sig { returns(T.untyped) }
    def reload_installation; end

    sig { returns(T.nilable(::Integration)) }
    def reload_integration; end

    sig { returns(T.nilable(::OauthApplication)) }
    def reload_oauth_application; end

    sig { returns(T.nilable(::RefreshToken)) }
    def reload_refresh_token; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_client_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_oauth_applications_and_public_integrations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def github_apps(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def github_owned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def personal_tokens(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def third_party(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_application; end

    sig { returns(Promise[T.untyped]) }
    def async_authorization; end

    sig { returns(Promise[T.untyped]) }
    def async_credential_authorizations; end

    sig { returns(Promise[T.untyped]) }
    def async_device_authorization_grant; end

    sig { returns(Promise[T.untyped]) }
    def async_installation; end

    sig { returns(Promise[T.untyped]) }
    def async_integration; end

    sig { returns(Promise[T.untyped]) }
    def async_oauth_application; end

    sig { returns(Promise[T.untyped]) }
    def async_public_keys; end

    sig { returns(Promise[T.untyped]) }
    def async_refresh_token; end

    sig { returns(Promise[T.untyped]) }
    def async_user; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accessed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accessed_at=(value); end

    sig { returns(T::Boolean) }
    def accessed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accessed_at_before_last_save; end

    sig { returns(T.untyped) }
    def accessed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def accessed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def accessed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def accessed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def accessed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accessed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def accessed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def accessed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accessed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accessed_at_was; end

    sig { void }
    def accessed_at_will_change!; end

    sig { returns(::Integer) }
    def application_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def application_id=(value); end

    sig { returns(T::Boolean) }
    def application_id?; end

    sig { returns(T.nilable(::Integer)) }
    def application_id_before_last_save; end

    sig { returns(T.untyped) }
    def application_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def application_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def application_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def application_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def application_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def application_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def application_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def application_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def application_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def application_id_was; end

    sig { void }
    def application_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def application_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def application_type=(value); end

    sig { returns(T::Boolean) }
    def application_type?; end

    sig { returns(T.nilable(::String)) }
    def application_type_before_last_save; end

    sig { returns(T.untyped) }
    def application_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def application_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def application_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def application_type_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def application_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def application_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def application_type_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def application_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def application_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def application_type_was; end

    sig { void }
    def application_type_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def authorization_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def authorization_id=(value); end

    sig { returns(T::Boolean) }
    def authorization_id?; end

    sig { returns(T.nilable(::Integer)) }
    def authorization_id_before_last_save; end

    sig { returns(T.untyped) }
    def authorization_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def authorization_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def authorization_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def authorization_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def authorization_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def authorization_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def authorization_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def authorization_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def authorization_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def authorization_id_was; end

    sig { void }
    def authorization_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def code=(value); end

    sig { returns(T::Boolean) }
    def code?; end

    sig { returns(T.nilable(::String)) }
    def code_before_last_save; end

    sig { returns(T.untyped) }
    def code_before_type_cast; end

    sig { returns(T::Boolean) }
    def code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def code_was; end

    sig { void }
    def code_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Date) }
    def custom_expires_at; end

    sig { params(value: ::Date).returns(::Date) }
    def custom_expires_at=(value); end

    sig { returns(T::Boolean) }
    def custom_expires_at?; end

    sig { returns(T.nilable(::Date)) }
    def custom_expires_at_before_last_save; end

    sig { returns(T.untyped) }
    def custom_expires_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def custom_expires_at_came_from_user?; end

    sig { returns(T.nilable([::Date, ::Date])) }
    def custom_expires_at_change; end

    sig { returns(T.nilable([::Date, ::Date])) }
    def custom_expires_at_change_to_be_saved; end

    sig { params(from: ::Date, to: ::Date).returns(T::Boolean) }
    def custom_expires_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def custom_expires_at_in_database; end

    sig { returns(T.nilable([::Date, ::Date])) }
    def custom_expires_at_previous_change; end

    sig { params(from: ::Date, to: ::Date).returns(T::Boolean) }
    def custom_expires_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def custom_expires_at_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def custom_expires_at_was; end

    sig { void }
    def custom_expires_at_will_change!; end

    sig { returns(::String) }
    def default_expires_at; end

    sig { params(value: ::String).returns(::String) }
    def default_expires_at=(value); end

    sig { returns(T::Boolean) }
    def default_expires_at?; end

    sig { returns(T.nilable(::String)) }
    def default_expires_at_before_last_save; end

    sig { returns(T.untyped) }
    def default_expires_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def default_expires_at_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def default_expires_at_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def default_expires_at_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def default_expires_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def default_expires_at_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def default_expires_at_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def default_expires_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def default_expires_at_previously_was; end

    sig { returns(T.nilable(::String)) }
    def default_expires_at_was; end

    sig { void }
    def default_expires_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def description; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def expires_at_timestamp; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def expires_at_timestamp=(value); end

    sig { returns(T::Boolean) }
    def expires_at_timestamp?; end

    sig { returns(T.nilable(::Integer)) }
    def expires_at_timestamp_before_last_save; end

    sig { returns(T.untyped) }
    def expires_at_timestamp_before_type_cast; end

    sig { returns(T::Boolean) }
    def expires_at_timestamp_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def expires_at_timestamp_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def expires_at_timestamp_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def expires_at_timestamp_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def expires_at_timestamp_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def expires_at_timestamp_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def expires_at_timestamp_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def expires_at_timestamp_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def expires_at_timestamp_was; end

    sig { void }
    def expires_at_timestamp_will_change!; end

    sig { returns(T.nilable(::String)) }
    def fingerprint; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def fingerprint=(value); end

    sig { returns(T::Boolean) }
    def fingerprint?; end

    sig { returns(T.nilable(::String)) }
    def fingerprint_before_last_save; end

    sig { returns(T.untyped) }
    def fingerprint_before_type_cast; end

    sig { returns(T::Boolean) }
    def fingerprint_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def fingerprint_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def fingerprint_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def fingerprint_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def fingerprint_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def fingerprint_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def fingerprint_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def fingerprint_previously_was; end

    sig { returns(T.nilable(::String)) }
    def fingerprint_was; end

    sig { void }
    def fingerprint_will_change!; end

    sig { returns(T.untyped) }
    def hashed_token; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def hashed_token=(value); end

    sig { returns(T::Boolean) }
    def hashed_token?; end

    sig { returns(T.untyped) }
    def hashed_token_before_last_save; end

    sig { returns(T.untyped) }
    def hashed_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def hashed_token_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def hashed_token_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def hashed_token_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def hashed_token_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def hashed_token_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def hashed_token_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def hashed_token_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def hashed_token_previously_was; end

    sig { returns(T.untyped) }
    def hashed_token_was; end

    sig { void }
    def hashed_token_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def installation_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def installation_id=(value); end

    sig { returns(T::Boolean) }
    def installation_id?; end

    sig { returns(T.nilable(::Integer)) }
    def installation_id_before_last_save; end

    sig { returns(T.untyped) }
    def installation_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def installation_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def installation_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def installation_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def installation_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def installation_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def installation_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def installation_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def installation_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def installation_id_was; end

    sig { void }
    def installation_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def installation_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def installation_type=(value); end

    sig { returns(T::Boolean) }
    def installation_type?; end

    sig { returns(T.nilable(::String)) }
    def installation_type_before_last_save; end

    sig { returns(T.untyped) }
    def installation_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def installation_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def installation_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def installation_type_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def installation_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def installation_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def installation_type_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def installation_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def installation_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def installation_type_was; end

    sig { void }
    def installation_type_will_change!; end

    sig { returns(T::Boolean) }
    def is_application; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def is_application=(value); end

    sig { returns(T::Boolean) }
    def is_application?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_application_before_last_save; end

    sig { returns(T.untyped) }
    def is_application_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_application_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_application_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_application_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_application_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_application_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_application_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_application_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_application_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_application_was; end

    sig { void }
    def is_application_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_issued_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_issued_at=(value); end

    sig { returns(T::Boolean) }
    def last_issued_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_issued_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_issued_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_issued_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_issued_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_issued_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_issued_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_issued_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_issued_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_issued_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_issued_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_issued_at_was; end

    sig { void }
    def last_issued_at_will_change!; end

    sig { returns(T.untyped) }
    def raw_data; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def raw_data=(value); end

    sig { returns(T::Boolean) }
    def raw_data?; end

    sig { returns(T.untyped) }
    def raw_data_before_last_save; end

    sig { returns(T.untyped) }
    def raw_data_before_type_cast; end

    sig { returns(T::Boolean) }
    def raw_data_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def raw_data_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def raw_data_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def raw_data_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def raw_data_previously_was; end

    sig { returns(T.untyped) }
    def raw_data_was; end

    sig { void }
    def raw_data_will_change!; end

    sig { void }
    def restore_accessed_at!; end

    sig { void }
    def restore_application_id!; end

    sig { void }
    def restore_application_type!; end

    sig { void }
    def restore_authorization_id!; end

    sig { void }
    def restore_code!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_custom_expires_at!; end

    sig { void }
    def restore_default_expires_at!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_expires_at_timestamp!; end

    sig { void }
    def restore_fingerprint!; end

    sig { void }
    def restore_hashed_token!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_installation_id!; end

    sig { void }
    def restore_installation_type!; end

    sig { void }
    def restore_is_application!; end

    sig { void }
    def restore_last_issued_at!; end

    sig { void }
    def restore_raw_data!; end

    sig { void }
    def restore_token_last_eight!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_id!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_accessed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_accessed_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_application_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_application_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_application_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_application_type?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_authorization_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_authorization_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_code?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Date, ::Date])) }
    def saved_change_to_custom_expires_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_custom_expires_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_default_expires_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_default_expires_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_expires_at_timestamp; end

    sig { returns(T::Boolean) }
    def saved_change_to_expires_at_timestamp?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_fingerprint; end

    sig { returns(T::Boolean) }
    def saved_change_to_fingerprint?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_hashed_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_hashed_token?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_installation_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_installation_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_installation_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_installation_type?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_is_application; end

    sig { returns(T::Boolean) }
    def saved_change_to_is_application?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_issued_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_issued_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_raw_data; end

    sig { returns(T::Boolean) }
    def saved_change_to_raw_data?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_token_last_eight; end

    sig { returns(T::Boolean) }
    def saved_change_to_token_last_eight?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable(::String)) }
    def token_last_eight; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def token_last_eight=(value); end

    sig { returns(T::Boolean) }
    def token_last_eight?; end

    sig { returns(T.nilable(::String)) }
    def token_last_eight_before_last_save; end

    sig { returns(T.untyped) }
    def token_last_eight_before_type_cast; end

    sig { returns(T::Boolean) }
    def token_last_eight_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def token_last_eight_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def token_last_eight_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def token_last_eight_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def token_last_eight_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def token_last_eight_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def token_last_eight_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def token_last_eight_previously_was; end

    sig { returns(T.nilable(::String)) }
    def token_last_eight_was; end

    sig { void }
    def token_last_eight_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_accessed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_application_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_application_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_authorization_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_custom_expires_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_default_expires_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_expires_at_timestamp?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_fingerprint?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hashed_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_installation_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_installation_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_is_application?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_issued_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_raw_data?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_token_last_eight?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end
  end

  module GeneratedColumnCoderAccessors
    sig { returns(T.untyped) }
    def note; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def note=(value); end

    sig { returns(T::Boolean) }
    def note?; end

    sig { returns(T.untyped) }
    def note_url; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def note_url=(value); end

    sig { returns(T::Boolean) }
    def note_url?; end

    sig { returns(T.untyped) }
    def requested_redirect_uri; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def requested_redirect_uri=(value); end

    sig { returns(T::Boolean) }
    def requested_redirect_uri?; end

    sig { returns(T.untyped) }
    def requested_scopes; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def requested_scopes=(value); end

    sig { returns(T::Boolean) }
    def requested_scopes?; end

    sig { returns(T.untyped) }
    def scopes; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def scopes=(value); end

    sig { returns(T::Boolean) }
    def scopes?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_client_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_oauth_applications_and_public_integrations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def github_apps(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def github_owned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def personal_tokens(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def third_party(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::OauthAccess } }

    sig { returns(T::Array[::OauthAccess]) }
    def to_a; end

    sig { returns(T::Array[::OauthAccess]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::OauthAccess } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::OauthAccess } }

    sig do
      params(
        records: T.any(::OauthAccess, T::Enumerable[T.any(::OauthAccess, T::Enumerable[::OauthAccess])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::OauthAccess, T::Enumerable[T.any(::OauthAccess, T::Enumerable[::OauthAccess])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::OauthAccess, T::Enumerable[T.any(::OauthAccess, T::Enumerable[::OauthAccess])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::OauthAccess]) }
    def load_target; end

    sig do
      params(
        records: T.any(::OauthAccess, T::Enumerable[T.any(::OauthAccess, T::Enumerable[::OauthAccess])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::OauthAccess, T::Enumerable[T.any(::OauthAccess, T::Enumerable[::OauthAccess])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::OauthAccess, T::Enumerable[T.any(::OauthAccess, T::Enumerable[::OauthAccess])])
      ).returns(T::Array[::OauthAccess])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::OauthAccess]) }
    def target; end

    sig { returns(T::Array[::OauthAccess]) }
    def to_a; end

    sig { returns(T::Array[::OauthAccess]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::OauthAccess } }

    sig { returns(T::Array[::OauthAccess]) }
    def to_a; end

    sig { returns(T::Array[::OauthAccess]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::OauthAccess } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

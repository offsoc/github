{"version":3,"file":"chunk-app_components_copilot_seat_management_copilot-business-signup-seat-management-element_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/components/copilot/seat_management/copilot-business-signup-seat-management-element.ts","ui/packages/verified-fetch/verified-fetch.ts"],"sourcesContent":["import {controller, target} from '@github/catalyst'\nimport {verifiedFetch} from '@github-ui/verified-fetch'\n\n@controller\nclass CopilotBusinessSignupSeatManagementElement extends HTMLElement {\n  @target seatManagement: HTMLElement\n  @target seatsForSelectedSpinner: HTMLElement\n  @target permissionsSubmitButton: HTMLInputElement\n  @target enableForAllOption: HTMLInputElement\n  @target enableForSelectedOption: HTMLInputElement\n\n  connectedCallback() {\n    this.enableForSelectedOption.disabled = false\n    this.enableForAllOption.disabled = false\n    this.permissionsSubmitButton.disabled = false\n  }\n\n  async showSeatManagement() {\n    this.permissionsSubmitButton.disabled = true\n    this.enableForAllOption.disabled = true\n    this.#showSpinner()\n\n    const params = new URLSearchParams(window.location.search)\n    const organization = params.get('org')\n    const enterprise = params.get('enterprise')\n\n    if (organization) {\n      const response = await this.setSeatManagementConfig(organization)\n      if (response.ok) {\n        this.seatManagement.hidden = false\n        this.permissionsSubmitButton.hidden = true\n      } else {\n        this.permissionsSubmitButton.disabled = false\n        // The seat management config will stay as unconfigured\n        return new Error('Failed to update the seat management permission.')\n      }\n    } else if (enterprise) {\n      const response = await this.setChatEnabledConfig(enterprise)\n      if (response.ok) {\n        this.seatManagement.hidden = false\n        this.permissionsSubmitButton.hidden = true\n      } else {\n        this.permissionsSubmitButton.disabled = false\n        return new Error('Failed to update the chat enabled permission.')\n      }\n    }\n\n    this.#hideSpinner()\n  }\n\n  hideSeatManagement() {\n    this.seatManagement.hidden = true\n    this.permissionsSubmitButton.hidden = false\n    this.permissionsSubmitButton.disabled = false\n  }\n\n  #showSpinner() {\n    this.seatsForSelectedSpinner.style.cssText = 'display:inline !important'\n  }\n\n  #hideSpinner() {\n    this.seatsForSelectedSpinner.style.cssText = 'none !important'\n    this.enableForAllOption.disabled = false\n  }\n\n  private async setSeatManagementConfig(organization: string) {\n    const formData = new FormData()\n    formData.append('copilot_permissions', 'enabled_for_selected')\n    return await verifiedFetch(`/organizations/${organization}/settings/copilot/seat_management_permissions`, {\n      method: 'POST',\n      body: formData,\n    })\n  }\n\n  private async setChatEnabledConfig(enterprise: string) {\n    const formData = new FormData()\n    formData.append('copilot_enabled', 'selected_organizations')\n    return await verifiedFetch(`/enterprises/${enterprise}/settings/update_copilot_enablement`, {\n      method: 'PUT',\n      body: formData,\n    })\n  }\n}\n","/**\n * A Fetch function which will automatically add the correct headers for\n * making requests to GitHub application servers as long as the associated controller methods allow it.\n * Track down the associated controller method and confirm the controller includes\n * ApplicationController::VerifiedFetchDependency as well as `allow_verified_fetch only:`\n * to the relevant controller methods.\n *\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetch('/foo', {method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.text())\ntest.\n *     }\n */\nexport function verifiedFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  assertRelativePathOrSameOrigin(path)\n\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Verified-Fetch': 'true',\n    'X-Requested-With': 'XMLHttpRequest',\n  }\n\n  return fetch(path, {...init, headers})\n}\n\nexport interface JSONRequestInit extends Omit<RequestInit, 'body'> {\n  body?: unknown\n}\n\nfunction assertRelativePathOrSameOrigin(path: string) {\n  if (process.env.NODE_ENV === 'test' && !window.location.origin) return\n  const url = new URL(path, window.location.origin)\n  if (url.origin !== window.location.origin) {\n    throw new Error('Can not make cross-origin requests from verifiedFetch')\n  }\n}\n\n/**\n * A Fetch function which will automatically add the correct headers for\n * making JSON requests\n *\n * Will also `JSON.stringify` the request body if provided.\n\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetchJSON('/foo', {body: {foo: 'bar'}, method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.json())\n *     }\n */\nexport function verifiedFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  }\n\n  const body = init?.body ? JSON.stringify(init.body) : undefined\n\n  return verifiedFetch(path, {...init, body, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetch(path, {...init, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetchJSON(path, {...init, headers})\n}\n"],"names":["CopilotBusinessSignupSeatManagementElement","HTMLElement","connectedCallback","enableForSelectedOption","disabled","enableForAllOption","permissionsSubmitButton","showSeatManagement","showSpinner","params","URLSearchParams","window","location","search","organization","get","enterprise","response","setSeatManagementConfig","ok","seatManagement","hidden","setChatEnabledConfig","hideSpinner","hideSeatManagement","formData","FormData","append","verifiedFetch","method","body","seatsForSelectedSpinner","style","cssText","target","controller","path","init","assertRelativePathOrSameOrigin","url","URL","origin","headers","fetch","verifiedFetchJSON","Accept","JSON","stringify","undefined","reactFetch","reactFetchJSON"],"sourceRoot":""}
# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `spokes-proto` gem.
# Please instead update this file by running `bin/tapioca gem spokes-proto`.

# source://spokes-proto//lib/github/spokes/proto/version.rb#3
module GitHub
  extend ::GitHub::Config::FirstPartyApps
  extend ::GitHub::Config::Metadata
  extend ::GitHub::Config::Datacenter
  extend ::GitHub::Config::ProximaSyncedThirdPartyApps
  extend ::GitHub::Config::Fastly
  extend ::GitHub::Config::Importers
  extend ::GitHub::Config::Kredz
  extend ::GitHub::Config::Varz
  extend ::GitHub::Config::Launch
  extend ::GitHub::Config::LegacyTextileFormatting
  extend ::GitHub::Config::Dreamlifter
  extend ::GitHub::Config::Migration
  extend ::GitHub::Config::Render
  extend ::GitHub::Config::Smtp
  extend ::GitHub::Config::Spokes
  extend ::GitHub::Config::Spokesd
  extend ::GitHub::Config::SupportLink
  extend ::GitHub::Config::Pages
  extend ::GitHub::Config::RequestLimits
  extend ::GitHub::Config::RateLimits
  extend ::GitHub::Config::OpenTelemetry
  extend ::GitHub::Config::HydroConfig
  extend ::GitHub::Config::Redis
  extend ::GitHub::Config::GroupSyncer
  extend ::GitHub::Config::Dependabot
  extend ::GitHub::Config::Twirp
  extend ::GitHub::Config::DriftwoodConfig
  extend ::GitHub::Config::PullRequests
  extend ::GitHub::Config::Repositories
  extend ::GitHub::Config::S3
  extend ::GitHub::Config::Registry
  extend ::GitHub::Config::SystemRoles
  extend ::GitHub::Config::Elasticsearch
  extend ::GitHub::Config::OpenApi
  extend ::GitHub::Config::AuditLogCuratorConfig
  extend ::GitHub::Config::AuditLog
  extend ::GitHub::Config::Billing
  extend ::GitHub::Config::AfterResponse
  extend ::GitHub::Config::Features
  extend ::GitHub::Config::ApiVersioning
  extend ::GitHub::Config::InsightsConfig
  extend ::GitHub::Config::HttpFluentbitConfig
  extend ::GitHub::Config::CodeScanning
  extend ::GitHub::Config::CodeQLVariantAnalysis
  extend ::GitHub::Config::OctoshiftStorage
  extend ::GitHub::Config::OIDCProviders
  extend ::GitHub::Config::BingIndexnow
  extend ::GitHub::Config::Chatops
  extend ::GitHub::Config::IssuesGraphApiConfig
  extend ::GitHub::Config::TimelineApiConfig
  extend ::GitHub::Config::Memex
  extend ::GitHub::Config::MergeQueue
  extend ::GitHub::Config::MergeCommitUpdateRef
  extend ::GitHub::Config::Codespaces
  extend ::GitHub::Config::Copilot
  extend ::GitHub::Config::Azure
  extend ::GitHub::Config::MultiTenantEnterprise
  extend ::GitHub::Config::NotebooksConfig
  extend ::GitHub::Config::ViewscreenConfig
  extend ::GitHub::Config::Freno
  extend ::GitHub::Config::ActionsResults
  extend ::GitHub::Config::Conduit
  extend ::GitHub::Config::ActionsBroker
  extend ::GitHub::Config::ActionsBrokerWorker
  extend ::GitHub::Config::ActionsRunnerAdmin
  extend ::GitHub::Config::ActionsRunService
  extend ::GitHub::Config::ActionsScaleUnitDomains
  extend ::GitHub::Config::Proxima
  extend ::GitHub::Config::ProximaLoginExperience
  extend ::GitHub::Config::GitSrcMigrator
  extend ::GitHub::Config::Projects
  extend ::GitHub::Config::EnterpriseAccounts
  extend ::GitHub::Config::Orca
  extend ::GitHub::Config::Orcid
  extend ::GitHub::Config::Neutron
  extend ::GitHub::Config::Context
  extend ::GitHub::Config
  extend ::GitHub::Version
  extend ::GitHub::Config::Stats

  class << self
    def after_response_middleware_enabled; end
    def after_response_middleware_enabled=(_arg0); end
    def after_response_middleware_enabled?; end
    def after_response_raise_on_exception; end
    def after_response_raise_on_exception=(_arg0); end
    def after_response_raise_on_exception?; end
    def robot?(useragent); end
  end
end

module GitHub::AppPartitioning; end
module GitHub::CSP; end
module GitHub::DataStructures; end
module GitHub::SCIM; end

# source://spokes-proto//lib/github/spokes/proto/version.rb#4
module GitHub::Spokes
  class << self
    def client; end
  end
end

# source://spokes-proto//lib/github/spokes/proto/version.rb#5
module GitHub::Spokes::Proto; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/blobs/v1/blob_origin_item_pb.rb#22
module GitHub::Spokes::Proto::Blobs; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/blobs/v1/blob_origin_item_pb.rb#23
module GitHub::Spokes::Proto::Blobs::V1; end

class GitHub::Spokes::Proto::Blobs::V1::BlobOriginItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/blobs/v1/blobs_api_twirp.rb#20
class GitHub::Spokes::Proto::Blobs::V1::BlobsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_blob_contents(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_blob_origin(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_changed_blobs(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_pushed_blobs(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_reachable_blobs(input, req_opts = T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/blobs/v1/blobs_api_twirp.rb#10
class GitHub::Spokes::Proto::Blobs::V1::BlobsAPIService < ::Twirp::Service; end

class GitHub::Spokes::Proto::Blobs::V1::ChangedBlobItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsRequest::ObjectIDPath
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsRequest::RefPath
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Blobs::V1::ListBlobOriginRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Blobs::V1::ListBlobOriginRequest::CommitOrder
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/blobs/v1/blobs_api_pb.rb#138
GitHub::Spokes::Proto::Blobs::V1::ListBlobOriginRequest::CommitOrder::COMMIT_ORDER_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/blobs/v1/blobs_api_pb.rb#138
GitHub::Spokes::Proto::Blobs::V1::ListBlobOriginRequest::CommitOrder::COMMIT_ORDER_REVERSE_CHRONOLOGICAL = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/blobs/v1/blobs_api_pb.rb#138
GitHub::Spokes::Proto::Blobs::V1::ListBlobOriginRequest::CommitOrder::COMMIT_ORDER_TOPO = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::Blobs::V1::ListBlobOriginResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Blobs::V1::ListChangedBlobsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Blobs::V1::ListChangedBlobsRequest::CommitOrder
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/blobs/v1/blobs_api_pb.rb#133
GitHub::Spokes::Proto::Blobs::V1::ListChangedBlobsRequest::CommitOrder::COMMIT_ORDER_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/blobs/v1/blobs_api_pb.rb#133
GitHub::Spokes::Proto::Blobs::V1::ListChangedBlobsRequest::CommitOrder::COMMIT_ORDER_REVERSE_CHRONOLOGICAL = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/blobs/v1/blobs_api_pb.rb#133
GitHub::Spokes::Proto::Blobs::V1::ListChangedBlobsRequest::CommitOrder::COMMIT_ORDER_TOPO = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::Blobs::V1::ListChangedBlobsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Blobs::V1::ListPushedBlobsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Blobs::V1::ListPushedBlobsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Blobs::V1::ListReachableBlobsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Blobs::V1::ListReachableBlobsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Blobs::V1::PushedBlobItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Blobs::V1::ReachableBlobItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# GitHub::Spokes::Proto::Client is the top-level client that can be used
# to create each API-specific client.
#
# source://spokes-proto//lib/github/spokes/proto/client.rb#8
class GitHub::Spokes::Proto::Client
  # Initialize with a URL or a Faraday::Connection.
  #
  # The URL (either as an arg here, or as the base URL on the
  # Faraday::Connection) should be one of these values:
  #
  #   github/spokes-api: http://127.0.0.1:12080/twirp/
  #   staging:           https://spokesd-staging.service.iad.github.net:10033/twirp/
  #   production:        https://spokesd-production.service.iad.github.net:10013/twirp/
  #   GHES/GHAE:         ENV["ENTERPRISE_SPOKESD_URL"]
  #
  # When you provide the URL as a String, the following options may be
  # set also:
  #
  #   - service_name (String) - the name of your app, will be used in the User-Agent request header.
  #
  #   - current_sha (String) - the current version of your app, will be used in the User-Agent request header.
  #
  #   - ssl (Hash, optional) - a hash with :ca_file, :client_cert, and :client_key paths.
  #
  #   - timeout (Number, default 15.0) - seconds allowed per request.
  #
  #   - (block) - if provided, will be called with the Faraday::Connection so you can set up additional middlewares
  #
  # @return [Client] a new instance of Client
  #
  # source://spokes-proto//lib/github/spokes/proto/client.rb#31
  def initialize(conn_or_url, **opts); end

  # source://spokes-proto//lib/github/spokes/proto/client.rb#54
  def blobs; end

  # source://spokes-proto//lib/github/spokes/proto/client.rb#58
  def commits; end

  # source://spokes-proto//lib/github/spokes/proto/client.rb#62
  def diffs; end

  # source://spokes-proto//lib/github/spokes/proto/client.rb#66
  def gitauth; end

  # source://spokes-proto//lib/github/spokes/proto/client.rb#70
  def legacygitrpc; end

  # source://spokes-proto//lib/github/spokes/proto/client.rb#74
  def merges; end

  # source://spokes-proto//lib/github/spokes/proto/client.rb#78
  def objects; end

  # source://spokes-proto//lib/github/spokes/proto/client.rb#82
  def references; end

  # source://spokes-proto//lib/github/spokes/proto/client.rb#86
  def repositories; end

  # source://spokes-proto//lib/github/spokes/proto/client.rb#90
  def trees; end

  private

  # source://spokes-proto//lib/github/spokes/proto/client.rb#96
  def build_connection(url, service_name:, current_sha:, ssl: T.unsafe(nil), timeout: T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/commits/v1/commit_item_pb.rb#24
module GitHub::Spokes::Proto::Commits; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/commits/v1/commit_item_pb.rb#25
module GitHub::Spokes::Proto::Commits::V1; end

class GitHub::Spokes::Proto::Commits::V1::AheadBehindContainsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::AheadBehindContainsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::AheadBehindPair
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::AheadBehindRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::AheadBehindResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::BaseAndTipsSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::BlameTreeRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::BlameTreeResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::BlameTreeSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::CheckCommitReachabilityRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::CheckCommitReachabilityResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::CommitItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::CommitPathPair
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/commits/v1/commits_api_twirp.rb#21
class GitHub::Spokes::Proto::Commits::V1::CommitsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def ahead_behind(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def ahead_behind_contains(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def blame_tree(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def check_commit_reachability(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_commits(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_contributors(input, req_opts = T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/commits/v1/commits_api_twirp.rb#10
class GitHub::Spokes::Proto::Commits::V1::CommitsAPIService < ::Twirp::Service; end

class GitHub::Spokes::Proto::Commits::V1::Contributor
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::ListCommitsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::ListCommitsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::ListContributorsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Commits::V1::ListContributorsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/diffs/v1/diff_delta_pb.rb#23
module GitHub::Spokes::Proto::Diffs; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/diffs/v1/diff_delta_pb.rb#24
module GitHub::Spokes::Proto::Diffs::V1; end

class GitHub::Spokes::Proto::Diffs::V1::DiffDelta
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Diffs::V1::DiffSummaryBinaryChanges
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Diffs::V1::DiffSummaryDelta
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Diffs::V1::DiffSummaryStat
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Diffs::V1::DiffSummaryTextChanges
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/diffs/v1/diffs_api_twirp.rb#16
class GitHub::Spokes::Proto::Diffs::V1::DiffsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def read_diff_summary(input, req_opts = T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/diffs/v1/diffs_api_twirp.rb#10
class GitHub::Spokes::Proto::Diffs::V1::DiffsAPIService < ::Twirp::Service; end

class GitHub::Spokes::Proto::Diffs::V1::ReadDiffSummaryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Diffs::V1::ReadDiffSummaryResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/experimental/experimental_api_pb.rb#40
module GitHub::Spokes::Proto::Experimental; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/experimental/experimental_api_pb.rb#41
module GitHub::Spokes::Proto::Experimental::V1; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/experimental/experimental_api_twirp.rb#16
class GitHub::Spokes::Proto::Experimental::V1::ExperimentalAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def resolve_objects(input, req_opts = T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/experimental/experimental_api_twirp.rb#10
class GitHub::Spokes::Proto::Experimental::V1::ExperimentalAPIService < ::Twirp::Service; end

class GitHub::Spokes::Proto::Experimental::V1::ObjectSelectorsByRepo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Experimental::V1::ResolveObjectsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Experimental::V1::ResolveObjectsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Experimental::V1::ResolvedItemsByRepo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Experimental::V1::ResolvedItemsByRepo::ResolvedItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/gitauth.rb#6
module GitHub::Spokes::Proto::Gitauth
  class << self
    # source://spokes-proto//lib/github/spokes/proto/gitauth.rb#15
    def new_error_host_status(host:, path:, error:, replica_name: T.unsafe(nil)); end

    # source://spokes-proto//lib/github/spokes/proto/gitauth.rb#7
    def new_ok_host_status(host:, path:, replica_name: T.unsafe(nil)); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/gitauth/v1/gitauth_api_pb.rb#75
module GitHub::Spokes::Proto::Gitauth::V1; end

class GitHub::Spokes::Proto::Gitauth::V1::CommitQuarantineRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Gitauth::V1::CommitQuarantineResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Gitauth::V1::ErrorResult
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/gitauth/v1/gitauth_api_twirp.rb#19
class GitHub::Spokes::Proto::Gitauth::V1::GitauthAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def commit_quarantine(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_routes(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def remove_quarantine(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def set_up_push_state(input, req_opts = T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/gitauth/v1/gitauth_api_twirp.rb#10
class GitHub::Spokes::Proto::Gitauth::V1::GitauthAPIService < ::Twirp::Service; end

class GitHub::Spokes::Proto::Gitauth::V1::HostStatus
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Gitauth::V1::ListRoutesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Gitauth::V1::ListRoutesRequest::Action
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/gitauth/v1/gitauth_api_pb.rb#77
GitHub::Spokes::Proto::Gitauth::V1::ListRoutesRequest::Action::ACTION_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/gitauth/v1/gitauth_api_pb.rb#77
GitHub::Spokes::Proto::Gitauth::V1::ListRoutesRequest::Action::ACTION_READ = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/gitauth/v1/gitauth_api_pb.rb#77
GitHub::Spokes::Proto::Gitauth::V1::ListRoutesRequest::Action::ACTION_WRITE = T.let(T.unsafe(nil), Integer)

module GitHub::Spokes::Proto::Gitauth::V1::ListRoutesRequest::Protocol
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/gitauth/v1/gitauth_api_pb.rb#78
GitHub::Spokes::Proto::Gitauth::V1::ListRoutesRequest::Protocol::PROTOCOL_GIT = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/gitauth/v1/gitauth_api_pb.rb#78
GitHub::Spokes::Proto::Gitauth::V1::ListRoutesRequest::Protocol::PROTOCOL_HTTP = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/gitauth/v1/gitauth_api_pb.rb#78
GitHub::Spokes::Proto::Gitauth::V1::ListRoutesRequest::Protocol::PROTOCOL_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/gitauth/v1/gitauth_api_pb.rb#78
GitHub::Spokes::Proto::Gitauth::V1::ListRoutesRequest::Protocol::PROTOCOL_SSH = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/gitauth/v1/gitauth_api_pb.rb#78
GitHub::Spokes::Proto::Gitauth::V1::ListRoutesRequest::Protocol::PROTOCOL_SVN = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::Gitauth::V1::ListRoutesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Gitauth::V1::OkResult
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Gitauth::V1::RemoveQuarantineRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Gitauth::V1::SetUpPushStateRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Gitauth::V1::SetUpPushStateResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/helpers/mode.rb#6
module GitHub::Spokes::Proto::Helpers; end

# source://spokes-proto//lib/github/spokes/proto/helpers/mode.rb#7
module GitHub::Spokes::Proto::Helpers::Mode
  class << self
    # @return [Boolean]
    #
    # source://spokes-proto//lib/github/spokes/proto/helpers/mode.rb#16
    def is_directory?(source); end

    # @return [Boolean]
    #
    # source://spokes-proto//lib/github/spokes/proto/helpers/mode.rb#20
    def is_regular?(source); end

    # @return [Boolean]
    #
    # source://spokes-proto//lib/github/spokes/proto/helpers/mode.rb#28
    def is_submodule?(source); end

    # @return [Boolean]
    #
    # source://spokes-proto//lib/github/spokes/proto/helpers/mode.rb#24
    def is_symlink?(source); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/helpers/mode.rb#14
GitHub::Spokes::Proto::Helpers::Mode::ALL = T.let(T.unsafe(nil), Array)

# source://spokes-proto//lib/github/spokes/proto/helpers/mode.rb#8
GitHub::Spokes::Proto::Helpers::Mode::DIRECTORY = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/helpers/mode.rb#10
GitHub::Spokes::Proto::Helpers::Mode::EXECUTABLE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/helpers/mode.rb#9
GitHub::Spokes::Proto::Helpers::Mode::REGULAR = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/helpers/mode.rb#12
GitHub::Spokes::Proto::Helpers::Mode::SUBMODULE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/helpers/mode.rb#11
GitHub::Spokes::Proto::Helpers::Mode::SYMLINK = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/hooks/v1/hooks_api_pb.rb#37
module GitHub::Spokes::Proto::Hooks; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/hooks/v1/hooks_api_pb.rb#38
module GitHub::Spokes::Proto::Hooks::V1; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/hooks/v1/hooks_api_twirp.rb#16
class GitHub::Spokes::Proto::Hooks::V1::HooksAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def run_pre_receive_hooks(input, req_opts = T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/hooks/v1/hooks_api_twirp.rb#10
class GitHub::Spokes::Proto::Hooks::V1::HooksAPIService < ::Twirp::Service; end

class GitHub::Spokes::Proto::Hooks::V1::RunPreReceiveHooksRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Hooks::V1::RunPreReceiveHooksRequest::HookMode
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/hooks/v1/hooks_api_pb.rb#40
GitHub::Spokes::Proto::Hooks::V1::RunPreReceiveHooksRequest::HookMode::HOOK_MODE_BABELD = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/hooks/v1/hooks_api_pb.rb#40
GitHub::Spokes::Proto::Hooks::V1::RunPreReceiveHooksRequest::HookMode::HOOK_MODE_CUSTOM = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/hooks/v1/hooks_api_pb.rb#40
GitHub::Spokes::Proto::Hooks::V1::RunPreReceiveHooksRequest::HookMode::HOOK_MODE_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/hooks/v1/hooks_api_pb.rb#40
GitHub::Spokes::Proto::Hooks::V1::RunPreReceiveHooksRequest::HookMode::HOOK_MODE_QUARANTINE = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::Hooks::V1::RunPreReceiveHooksResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_pb.rb#99
module GitHub::Spokes::Proto::LegacyGitrpc; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_pb.rb#100
module GitHub::Spokes::Proto::LegacyGitrpc::V1; end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::BertrpcRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::BertrpcResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::DataServer
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::ErnicornRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::ErnicornResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::GetCacheKeyRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::GetCacheKeyResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::GetCacheKeysRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::GetCacheKeysResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_twirp.rb#20
class GitHub::Spokes::Proto::LegacyGitrpc::V1::LegacyGitrpcAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def bertrpc(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_cache_key(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_cache_keys(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def legacy_gitrpc_reader(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def legacy_gitrpc_writer(input, req_opts = T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_twirp.rb#10
class GitHub::Spokes::Proto::LegacyGitrpc::V1::LegacyGitrpcAPIService < ::Twirp::Service; end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::LegacyGitrpcReaderRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::LegacyGitrpcReaderResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::LegacyGitrpcWriterRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::LegacyGitrpcWriterResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::RepositoryWithCacheKey
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::Status
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::LegacyGitrpc::V1::StatusCode
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_pb.rb#118
GitHub::Spokes::Proto::LegacyGitrpc::V1::StatusCode::STATUS_CODE_DEADLINE_EXCEEDED = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_pb.rb#118
GitHub::Spokes::Proto::LegacyGitrpc::V1::StatusCode::STATUS_CODE_ERROR_CONNECTING_TO_ERNICORN = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_pb.rb#118
GitHub::Spokes::Proto::LegacyGitrpc::V1::StatusCode::STATUS_CODE_ERROR_ENCODING_REQUEST = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_pb.rb#118
GitHub::Spokes::Proto::LegacyGitrpc::V1::StatusCode::STATUS_CODE_ERROR_PROCESSING_ERNICORN_RESPONSE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_pb.rb#118
GitHub::Spokes::Proto::LegacyGitrpc::V1::StatusCode::STATUS_CODE_ERROR_TALKING_TO_ERNICORN = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_pb.rb#118
GitHub::Spokes::Proto::LegacyGitrpc::V1::StatusCode::STATUS_CODE_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_pb.rb#118
GitHub::Spokes::Proto::LegacyGitrpc::V1::StatusCode::STATUS_CODE_INVALID_GIT_PATH = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_pb.rb#118
GitHub::Spokes::Proto::LegacyGitrpc::V1::StatusCode::STATUS_CODE_INVALID_REQUEST = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_pb.rb#118
GitHub::Spokes::Proto::LegacyGitrpc::V1::StatusCode::STATUS_CODE_OK = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/legacygitrpc/v1/legacygitrpc_api_pb.rb#118
GitHub::Spokes::Proto::LegacyGitrpc::V1::StatusCode::STATUS_CODE_REQUEST_CANCELLED = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::LegacyGitrpc::V1::TopologyContext
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::LegacyGitrpc::V1::WriteServerResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/merges/v1/merge_base_type_pb.rb#20
module GitHub::Spokes::Proto::Merges; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/merges/v1/merge_base_type_pb.rb#21
module GitHub::Spokes::Proto::Merges::V1; end

class GitHub::Spokes::Proto::Merges::V1::FindMergeBasesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Merges::V1::FindMergeBasesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Merges::V1::MergeBaseType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/merges/v1/merge_base_type_pb.rb#22
GitHub::Spokes::Proto::Merges::V1::MergeBaseType::MERGE_BASE_TYPE_ALL = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/merges/v1/merge_base_type_pb.rb#22
GitHub::Spokes::Proto::Merges::V1::MergeBaseType::MERGE_BASE_TYPE_BEST = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/merges/v1/merge_base_type_pb.rb#22
GitHub::Spokes::Proto::Merges::V1::MergeBaseType::MERGE_BASE_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/merges/v1/merge_base_type_pb.rb#22
GitHub::Spokes::Proto::Merges::V1::MergeBaseType::MERGE_BASE_TYPE_SINGLE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/merges/v1/merges_api_twirp.rb#16
class GitHub::Spokes::Proto::Merges::V1::MergesAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def find_merge_bases(input, req_opts = T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/merges/v1/merges_api_twirp.rb#10
class GitHub::Spokes::Proto::Merges::V1::MergesAPIService < ::Twirp::Service; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/objects/v1/objects_api_pb.rb#43
module GitHub::Spokes::Proto::Objects; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/objects/v1/objects_api_pb.rb#44
module GitHub::Spokes::Proto::Objects::V1; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/objects/v1/objects_api_twirp.rb#17
class GitHub::Spokes::Proto::Objects::V1::ObjectsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def resolve_object(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def resolve_objects(input, req_opts = T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/objects/v1/objects_api_twirp.rb#10
class GitHub::Spokes::Proto::Objects::V1::ObjectsAPIService < ::Twirp::Service; end

class GitHub::Spokes::Proto::Objects::V1::ResolveObjectRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Objects::V1::ResolveObjectResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Objects::V1::ResolveObjectsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Objects::V1::ResolveObjectsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Objects::V1::ResolveObjectsResponse::ResolvedItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/reference_item_pb.rb#21
module GitHub::Spokes::Proto::References; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/reference_item_pb.rb#22
module GitHub::Spokes::Proto::References::V1; end

class GitHub::Spokes::Proto::References::V1::GetDefaultBranchRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::GetDefaultBranchResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::ListReferencesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::ListReferencesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::ListReferencesWithDetailsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::ListReferencesWithDetailsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::RefStatus
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::RefWithCommitTime
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::ReferenceItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_twirp.rb#20
class GitHub::Spokes::Proto::References::V1::ReferencesAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_default_branch(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_references(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_references_with_details(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def update(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def update_default_branch(input, req_opts = T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_twirp.rb#10
class GitHub::Spokes::Proto::References::V1::ReferencesAPIService < ::Twirp::Service; end

class GitHub::Spokes::Proto::References::V1::Transaction
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::UpdateDefaultBranchRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::UpdateDefaultBranchResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::References::V1::UpdateDefaultBranchResponse::ErrorReason
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_pb.rb#115
GitHub::Spokes::Proto::References::V1::UpdateDefaultBranchResponse::ErrorReason::ERROR_REASON_DATABASE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_pb.rb#115
GitHub::Spokes::Proto::References::V1::UpdateDefaultBranchResponse::ErrorReason::ERROR_REASON_FAILED_TO_LOCK = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_pb.rb#115
GitHub::Spokes::Proto::References::V1::UpdateDefaultBranchResponse::ErrorReason::ERROR_REASON_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_pb.rb#115
GitHub::Spokes::Proto::References::V1::UpdateDefaultBranchResponse::ErrorReason::ERROR_REASON_THREEPC = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_pb.rb#115
GitHub::Spokes::Proto::References::V1::UpdateDefaultBranchResponse::ErrorReason::ERROR_REASON_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_pb.rb#115
GitHub::Spokes::Proto::References::V1::UpdateDefaultBranchResponse::ErrorReason::ERROR_REASON_TOO_BUSY = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::References::V1::UpdateRefOpUpdate
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::UpdateRefOpVerify
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::UpdateRefOpVerifyUpdate
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::UpdateRefRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::References::V1::UpdateRefRequest::FastForward
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/update_ref_request_pb.rb#38
GitHub::Spokes::Proto::References::V1::UpdateRefRequest::FastForward::FAST_FORWARD_COMPUTE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/update_ref_request_pb.rb#38
GitHub::Spokes::Proto::References::V1::UpdateRefRequest::FastForward::FAST_FORWARD_FALSE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/update_ref_request_pb.rb#38
GitHub::Spokes::Proto::References::V1::UpdateRefRequest::FastForward::FAST_FORWARD_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/update_ref_request_pb.rb#38
GitHub::Spokes::Proto::References::V1::UpdateRefRequest::FastForward::FAST_FORWARD_OMIT = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/update_ref_request_pb.rb#38
GitHub::Spokes::Proto::References::V1::UpdateRefRequest::FastForward::FAST_FORWARD_TRUE = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::References::V1::UpdateRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::References::V1::UpdateResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::References::V1::UpdateResponse::ErrorReason
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_pb.rb#112
GitHub::Spokes::Proto::References::V1::UpdateResponse::ErrorReason::ERROR_REASON_DATABASE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_pb.rb#112
GitHub::Spokes::Proto::References::V1::UpdateResponse::ErrorReason::ERROR_REASON_FAILED_TO_LOCK = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_pb.rb#112
GitHub::Spokes::Proto::References::V1::UpdateResponse::ErrorReason::ERROR_REASON_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_pb.rb#112
GitHub::Spokes::Proto::References::V1::UpdateResponse::ErrorReason::ERROR_REASON_THREEPC = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_pb.rb#112
GitHub::Spokes::Proto::References::V1::UpdateResponse::ErrorReason::ERROR_REASON_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/references/v1/references_api_pb.rb#112
GitHub::Spokes::Proto::References::V1::UpdateResponse::ErrorReason::ERROR_REASON_TOO_BUSY = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/replica_item_pb.rb#25
module GitHub::Spokes::Proto::Repositories; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/replica_item_pb.rb#26
module GitHub::Spokes::Proto::Repositories::V1; end

class GitHub::Spokes::Proto::Repositories::V1::ListAvailableReplicasRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Repositories::V1::ListAvailableReplicasResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsRequest::ChecksumStrategy
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#81
GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsRequest::ChecksumStrategy::CHECKSUM_STRATEGY_FORGET_CHECKSUMS = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#81
GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsRequest::ChecksumStrategy::CHECKSUM_STRATEGY_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#81
GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsRequest::ChecksumStrategy::CHECKSUM_STRATEGY_REUSE_CHECKSUMS = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsResponse::ErrorReason
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#83
GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsResponse::ErrorReason::ERROR_REASON_DATABASE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#83
GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsResponse::ErrorReason::ERROR_REASON_FAILED_TO_LOCK = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#83
GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsResponse::ErrorReason::ERROR_REASON_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#83
GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsResponse::ErrorReason::ERROR_REASON_THREEPC = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#83
GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsResponse::ErrorReason::ERROR_REASON_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#83
GitHub::Spokes::Proto::Repositories::V1::RecomputeChecksumsResponse::ErrorReason::ERROR_REASON_TOO_BUSY = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::Repositories::V1::ReplicaItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Repositories::V1::ReplicaType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/replica_item_pb.rb#28
GitHub::Spokes::Proto::Repositories::V1::ReplicaType::REPLICA_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/replica_item_pb.rb#28
GitHub::Spokes::Proto::Repositories::V1::ReplicaType::REPLICA_TYPE_NOERROR = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/replica_item_pb.rb#28
GitHub::Spokes::Proto::Repositories::V1::ReplicaType::REPLICA_TYPE_NORMAL = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_twirp.rb#18
class GitHub::Spokes::Proto::Repositories::V1::RepositoriesAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_available_replicas(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def recompute_checksums(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def update_info_n_w_o(input, req_opts = T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_twirp.rb#10
class GitHub::Spokes::Proto::Repositories::V1::RepositoriesAPIService < ::Twirp::Service; end

class GitHub::Spokes::Proto::Repositories::V1::UpdateInfoNWORequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Repositories::V1::UpdateInfoNWOResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Repositories::V1::UpdateInfoNWOResponse::ErrorReason
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#79
GitHub::Spokes::Proto::Repositories::V1::UpdateInfoNWOResponse::ErrorReason::ERROR_REASON_DATABASE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#79
GitHub::Spokes::Proto::Repositories::V1::UpdateInfoNWOResponse::ErrorReason::ERROR_REASON_FAILED_TO_LOCK = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#79
GitHub::Spokes::Proto::Repositories::V1::UpdateInfoNWOResponse::ErrorReason::ERROR_REASON_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#79
GitHub::Spokes::Proto::Repositories::V1::UpdateInfoNWOResponse::ErrorReason::ERROR_REASON_THREEPC = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#79
GitHub::Spokes::Proto::Repositories::V1::UpdateInfoNWOResponse::ErrorReason::ERROR_REASON_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/repositories/v1/repositories_api_pb.rb#79
GitHub::Spokes::Proto::Repositories::V1::UpdateInfoNWOResponse::ErrorReason::ERROR_REASON_TOO_BUSY = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/trees/v1/trees_api_pb.rb#49
module GitHub::Spokes::Proto::Trees; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/trees/v1/trees_api_pb.rb#50
module GitHub::Spokes::Proto::Trees::V1; end

class GitHub::Spokes::Proto::Trees::V1::CompareTreesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Trees::V1::CompareTreesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Trees::V1::ListTreesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Trees::V1::ListTreesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/trees/v1/trees_api_twirp.rb#17
class GitHub::Spokes::Proto::Trees::V1::TreesAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def compare_trees(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_trees(input, req_opts = T.unsafe(nil)); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/trees/v1/trees_api_twirp.rb#10
class GitHub::Spokes::Proto::Trees::V1::TreesAPIService < ::Twirp::Service; end

# source://spokes-proto//lib/github/spokes/proto/types.rb#6
module GitHub::Spokes::Proto::Types
  extend ::GitHub::Spokes::Proto::Types

  # source://spokes-proto//lib/github/spokes/proto/types.rb#11
  def new_gist(id); end

  # source://spokes-proto//lib/github/spokes/proto/types.rb#7
  def new_repository(id); end

  # source://spokes-proto//lib/github/spokes/proto/types.rb#15
  def new_wiki(id); end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/selectors/v1/fork_push_selector_pb.rb#22
module GitHub::Spokes::Proto::Types::Selectors; end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/selectors/v1/fork_push_selector_pb.rb#23
module GitHub::Spokes::Proto::Types::Selectors::V1; end

class GitHub::Spokes::Proto::Types::Selectors::V1::ForkPushSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::HistoricalPushSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::ObjectIDSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::ObjectSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::ObjectSelector::TreeishAndPath
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::PrefixSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::PushSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::QuarantineCommitsSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::QuarantineObjectsSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::RangeSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::RefGlobSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::RevisionAndPathSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::RevisionSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::RootSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::TreeishSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::Selectors::V1::UniversalSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/cursor_pb.rb#18
module GitHub::Spokes::Proto::Types::V1; end

class GitHub::Spokes::Proto::Types::V1::Attribution
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::Commit
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::Cursor
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Types::V1::DiffAlgorithm
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_algorithm_pb.rb#20
GitHub::Spokes::Proto::Types::V1::DiffAlgorithm::DIFF_ALGORITHM_DEFAULT = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_algorithm_pb.rb#20
GitHub::Spokes::Proto::Types::V1::DiffAlgorithm::DIFF_ALGORITHM_INVALID = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::Types::V1::DiffEntry
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Types::V1::DiffEntry::Status
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_entry_pb.rb#42
GitHub::Spokes::Proto::Types::V1::DiffEntry::Status::STATUS_ADDITION = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_entry_pb.rb#42
GitHub::Spokes::Proto::Types::V1::DiffEntry::Status::STATUS_COPY = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_entry_pb.rb#42
GitHub::Spokes::Proto::Types::V1::DiffEntry::Status::STATUS_DELETION = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_entry_pb.rb#42
GitHub::Spokes::Proto::Types::V1::DiffEntry::Status::STATUS_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_entry_pb.rb#42
GitHub::Spokes::Proto::Types::V1::DiffEntry::Status::STATUS_MODIFICATION = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_entry_pb.rb#42
GitHub::Spokes::Proto::Types::V1::DiffEntry::Status::STATUS_RENAME = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_entry_pb.rb#42
GitHub::Spokes::Proto::Types::V1::DiffEntry::Status::STATUS_TYPE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_entry_pb.rb#42
GitHub::Spokes::Proto::Types::V1::DiffEntry::Status::STATUS_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_entry_pb.rb#42
GitHub::Spokes::Proto::Types::V1::DiffEntry::Status::STATUS_UNMERGED = T.let(T.unsafe(nil), Integer)

module GitHub::Spokes::Proto::Types::V1::DiffStatus
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_status_pb.rb#27
GitHub::Spokes::Proto::Types::V1::DiffStatus::DIFF_STATUS_ADDITION = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_status_pb.rb#27
GitHub::Spokes::Proto::Types::V1::DiffStatus::DIFF_STATUS_COPY = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_status_pb.rb#27
GitHub::Spokes::Proto::Types::V1::DiffStatus::DIFF_STATUS_DELETION = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_status_pb.rb#27
GitHub::Spokes::Proto::Types::V1::DiffStatus::DIFF_STATUS_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_status_pb.rb#27
GitHub::Spokes::Proto::Types::V1::DiffStatus::DIFF_STATUS_MODIFICATION = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_status_pb.rb#27
GitHub::Spokes::Proto::Types::V1::DiffStatus::DIFF_STATUS_RENAME = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_status_pb.rb#27
GitHub::Spokes::Proto::Types::V1::DiffStatus::DIFF_STATUS_TYPE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_status_pb.rb#27
GitHub::Spokes::Proto::Types::V1::DiffStatus::DIFF_STATUS_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/diff_status_pb.rb#27
GitHub::Spokes::Proto::Types::V1::DiffStatus::DIFF_STATUS_UNMERGED = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::Types::V1::Glob
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::Mode
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::Object
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Types::V1::Object::Type
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/object_pb.rb#31
GitHub::Spokes::Proto::Types::V1::Object::Type::TYPE_BLOB = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/object_pb.rb#31
GitHub::Spokes::Proto::Types::V1::Object::Type::TYPE_COMMIT = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/object_pb.rb#31
GitHub::Spokes::Proto::Types::V1::Object::Type::TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/object_pb.rb#31
GitHub::Spokes::Proto::Types::V1::Object::Type::TYPE_TAG = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/object_pb.rb#31
GitHub::Spokes::Proto::Types::V1::Object::Type::TYPE_TREE = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::Types::V1::ObjectID
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::Path
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::Prefix
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::Reference
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::ReferenceUpdate
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::Repository
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Types::V1::Repository::Type
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/repository_pb.rb#27
GitHub::Spokes::Proto::Types::V1::Repository::Type::TYPE_GIST = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/repository_pb.rb#27
GitHub::Spokes::Proto::Types::V1::Repository::Type::TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/repository_pb.rb#27
GitHub::Spokes::Proto::Types::V1::Repository::Type::TYPE_REPOSITORY = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/repository_pb.rb#27
GitHub::Spokes::Proto::Types::V1::Repository::Type::TYPE_WIKI = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::Types::V1::RequestContext
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Types::V1::RequestContext::QualityOfService
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/request_context_pb.rb#32
GitHub::Spokes::Proto::Types::V1::RequestContext::QualityOfService::QUALITY_OF_SERVICE_DELAYABLE = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/request_context_pb.rb#32
GitHub::Spokes::Proto::Types::V1::RequestContext::QualityOfService::QUALITY_OF_SERVICE_FAIL_FAST = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/request_context_pb.rb#32
GitHub::Spokes::Proto::Types::V1::RequestContext::QualityOfService::QUALITY_OF_SERVICE_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/request_context_pb.rb#32
GitHub::Spokes::Proto::Types::V1::RequestContext::QualityOfService::QUALITY_OF_SERVICE_NO_DELAY = T.let(T.unsafe(nil), Integer)

class GitHub::Spokes::Proto::Types::V1::Revision
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::Sockstat
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::SockstatKV
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::Timestamp
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::TreeEntry
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::Treeish
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Spokes::Proto::Types::V1::UpdateReferencesPriority
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Spokes::Proto::Types::V1::UpdateReferencesPriority::Priority
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/update_references_priority_pb.rb#25
GitHub::Spokes::Proto::Types::V1::UpdateReferencesPriority::Priority::PRIORITY_HIGH = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/update_references_priority_pb.rb#25
GitHub::Spokes::Proto::Types::V1::UpdateReferencesPriority::Priority::PRIORITY_INVALID = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/spokes-api/types/v1/update_references_priority_pb.rb#25
GitHub::Spokes::Proto::Types::V1::UpdateReferencesPriority::Priority::PRIORITY_LOW = T.let(T.unsafe(nil), Integer)

# source://spokes-proto//lib/github/spokes/proto/version.rb#6
GitHub::Spokes::Proto::VERSION = T.let(T.unsafe(nil), String)

module Google::Protobuf::MessageExts::ClassMethods; end

{"version":3,"file":"chunk-vendors-node_modules_micromark_index_js-node_modules_remark-gfm_index_js-node_modules_remark_-2e1650-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/extend/index.js","node_modules/is-buffer/index.js","node_modules/decode-named-character-reference/index.dom.js","node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","node_modules/mdast-util-to-markdown/lib/handle/list-item.js","node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","node_modules/mdast-util-to-markdown/lib/util/association.js","node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","node_modules/mdast-util-to-markdown/lib/util/container-flow.js","node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","node_modules/mdast-util-to-markdown/lib/util/safe.js","node_modules/mdast-util-to-markdown/lib/util/track.js","node_modules/micromark-core-commonmark/lib/blank-line.js","node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","node_modules/micromark-extension-gfm-autolink-literal/lib/html.js","node_modules/micromark-extension-gfm-footnote/lib/syntax.js","node_modules/micromark-extension-gfm-footnote/lib/html.js","node_modules/micromark-extension-gfm-strikethrough/lib/html.js","node_modules/micromark-extension-gfm-table/lib/syntax.js","node_modules/micromark-extension-gfm-table/lib/html.js","node_modules/micromark-extension-gfm-tagfilter/index.js","node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","node_modules/micromark-extension-gfm-task-list-item/lib/html.js","node_modules/micromark-extension-gfm/index.js","node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","node_modules/micromark-factory-space/index.js","node_modules/micromark-util-character/index.js","node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","node_modules/micromark-util-chunked/index.js","node_modules/micromark-util-classify-character/index.js","node_modules/micromark-util-combine-extensions/index.js","node_modules/micromark-util-decode-numeric-character-reference/index.js","node_modules/micromark-util-decode-string/index.js","node_modules/micromark-util-encode/index.js","node_modules/micromark-util-normalize-identifier/index.js","node_modules/micromark-util-resolve-all/index.js","node_modules/micromark-util-sanitize-uri/index.js","node_modules/micromark-util-subtokenize/index.js","node_modules/micromark/lib/compile.js","node_modules/micromark/index.js","node_modules/micromark/lib/initialize/content.js","node_modules/micromark/lib/initialize/document.js","node_modules/micromark-core-commonmark/lib/content.js","node_modules/micromark/lib/initialize/flow.js","node_modules/micromark/lib/initialize/text.js","node_modules/micromark-core-commonmark/lib/thematic-break.js","node_modules/micromark-core-commonmark/lib/list.js","node_modules/micromark-core-commonmark/lib/block-quote.js","node_modules/micromark-factory-destination/index.js","node_modules/micromark-factory-label/index.js","node_modules/micromark-factory-title/index.js","node_modules/micromark-factory-whitespace/index.js","node_modules/micromark-core-commonmark/lib/definition.js","node_modules/micromark-core-commonmark/lib/code-indented.js","node_modules/micromark-core-commonmark/lib/setext-underline.js","node_modules/micromark-util-html-tag-name/index.js","node_modules/micromark-core-commonmark/lib/html-flow.js","node_modules/micromark-core-commonmark/lib/code-fenced.js","node_modules/micromark-core-commonmark/lib/character-reference.js","node_modules/micromark-core-commonmark/lib/character-escape.js","node_modules/micromark-core-commonmark/lib/line-ending.js","node_modules/micromark-core-commonmark/lib/label-end.js","node_modules/micromark-core-commonmark/lib/label-start-image.js","node_modules/micromark-core-commonmark/lib/attention.js","node_modules/micromark-core-commonmark/lib/label-start-link.js","node_modules/micromark/lib/constructs.js","node_modules/micromark-core-commonmark/lib/heading-atx.js","node_modules/micromark-core-commonmark/lib/autolink.js","node_modules/micromark-core-commonmark/lib/html-text.js","node_modules/micromark-core-commonmark/lib/hard-break-escape.js","node_modules/micromark-core-commonmark/lib/code-text.js","node_modules/micromark/lib/parse.js","node_modules/micromark/lib/create-tokenizer.js","node_modules/micromark/lib/postprocess.js","node_modules/micromark/lib/preprocess.js","node_modules/ccount/index.js","node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","node_modules/mdast-util-find-and-replace/lib/index.js","node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","node_modules/mdast-util-gfm-autolink-literal/lib/index.js","node_modules/mdast-util-gfm-footnote/lib/index.js","node_modules/mdast-util-gfm-strikethrough/lib/index.js","node_modules/markdown-table/index.js","node_modules/mdast-util-gfm-table/lib/index.js","node_modules/mdast-util-gfm-task-list-item/lib/index.js","node_modules/remark-gfm/index.js","node_modules/mdast-util-gfm/lib/index.js","node_modules/bail/index.js","node_modules/is-plain-obj/index.js","node_modules/unist-util-stringify-position/lib/index.js","node_modules/vfile-message/lib/index.js","node_modules/vfile/lib/minpath.browser.js","node_modules/vfile/lib/minproc.browser.js","node_modules/vfile/lib/minurl.shared.js","node_modules/vfile/lib/index.js","node_modules/vfile/lib/minurl.browser.js","node_modules/unified/lib/index.js","node_modules/trough/index.js","node_modules/mdast-util-from-markdown/node_modules/mdast-util-to-string/lib/index.js","node_modules/mdast-util-from-markdown/lib/index.js","node_modules/zwitch/index.js","node_modules/mdast-util-to-markdown/lib/configure.js","node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","node_modules/mdast-util-to-markdown/lib/handle/break.js","node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","node_modules/mdast-util-to-markdown/lib/handle/code.js","node_modules/mdast-util-to-markdown/lib/util/check-quote.js","node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","node_modules/mdast-util-to-markdown/node_modules/unist-util-is/lib/index.js","node_modules/mdast-util-to-markdown/node_modules/unist-util-visit-parents/lib/index.js","node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/lib/index.js","node_modules/mdast-util-to-markdown/node_modules/mdast-util-to-string/lib/index.js","node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","node_modules/mdast-util-to-markdown/lib/handle/html.js","node_modules/mdast-util-to-markdown/lib/handle/image.js","node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","node_modules/mdast-util-to-markdown/lib/handle/link.js","node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","node_modules/mdast-util-to-markdown/lib/util/check-rule.js","node_modules/mdast-util-phrasing/node_modules/unist-util-is/lib/index.js","node_modules/mdast-util-phrasing/lib/index.js","node_modules/mdast-util-to-markdown/lib/handle/strong.js","node_modules/mdast-util-to-markdown/lib/util/check-strong.js","node_modules/mdast-util-to-markdown/lib/handle/index.js","node_modules/mdast-util-to-markdown/lib/util/check-fence.js","node_modules/longest-streak/index.js","node_modules/mdast-util-to-markdown/lib/handle/definition.js","node_modules/mdast-util-to-markdown/lib/handle/heading.js","node_modules/mdast-util-to-markdown/lib/handle/list.js","node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered-other.js","node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","node_modules/mdast-util-to-markdown/lib/handle/root.js","node_modules/mdast-util-to-markdown/lib/handle/text.js","node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","node_modules/mdast-util-to-markdown/lib/join.js","node_modules/mdast-util-to-markdown/lib/unsafe.js","node_modules/mdast-util-to-markdown/lib/index.js","node_modules/remark/index.js","node_modules/remark-parse/lib/index.js","node_modules/remark-stringify/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  asciiDigit,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst www = {\n  tokenize: tokenizeWww,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst punctuation = {\n  tokenize: tokenizePunctuation,\n  partial: true\n}\nconst namedCharacterReference = {\n  tokenize: tokenizeNamedCharacterReference,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst httpAutolink = {\n  tokenize: tokenizeHttpAutolink,\n  previous: previousHttp\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n/** @type {ConstructRecord} */\n\nconst text = {}\n/** @type {Extension} */\n\nexport const gfmAutolinkLiteral = {\n  text\n}\nlet code = 48 // Add alphanumerics.\n\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\n\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, httpAutolink]\ntext[104] = [emailAutolink, httpAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n/** @type {Tokenizer} */\n\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean} */\n\n  let hasDot\n  /** @type {boolean|undefined} */\n\n  let hasDigitInLastSegment\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n  /** @type {State} */\n\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n\n    if (code === 64) {\n      effects.consume(code)\n      return label\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (code === 46) {\n      return effects.check(punctuation, done, dotContinuation)(code)\n    }\n\n    if (code === 45 || code === 95) {\n      return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code)\n    }\n\n    if (asciiAlphanumeric(code)) {\n      if (!hasDigitInLastSegment && asciiDigit(code)) {\n        hasDigitInLastSegment = true\n      }\n\n      effects.consume(code)\n      return label\n    }\n\n    return done(code)\n  }\n  /** @type {State} */\n\n  function dotContinuation(code) {\n    effects.consume(code)\n    hasDot = true\n    hasDigitInLastSegment = undefined\n    return label\n  }\n  /** @type {State} */\n\n  function dashOrUnderscoreContinuation(code) {\n    effects.consume(code)\n    return afterDashOrUnderscore\n  }\n  /** @type {State} */\n\n  function afterDashOrUnderscore(code) {\n    if (code === 46) {\n      return effects.check(punctuation, nok, dotContinuation)(code)\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (hasDot && !hasDigitInLastSegment) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww') // For `www.` we check instead of attempt, because when it matches, GH\n    // treats it as part of a domain (yes, it says a valid domain must come\n    // after `www.`, but that’s not how it’s implemented by them).\n\n    return effects.check(\n      www,\n      effects.attempt(domain, effects.attempt(path, done), nok),\n      nok\n    )(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHttpAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 72 && code !== 104) ||\n      !previousHttp(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkHttp')\n    effects.consume(code)\n    return t1\n  }\n  /** @type {State} */\n\n  function t1(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return t2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function t2(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return p\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function p(code) {\n    if (code === 80 || code === 112) {\n      effects.consume(code)\n      return s\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function s(code) {\n    if (code === 83 || code === 115) {\n      effects.consume(code)\n      return colon\n    }\n\n    return colon(code)\n  }\n  /** @type {State} */\n\n  function colon(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return slash1\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash1(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return slash2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash2(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, done), nok)(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWww(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return w2\n  }\n  /** @type {State} */\n\n  function w2(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return w3\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function w3(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return dot\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function dot(code) {\n    if (code === 46) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? nok(code) : ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean|undefined} */\n  let hasUnderscoreInLastSegment\n  /** @type {boolean|undefined} */\n\n  let hasUnderscoreInLastLastSegment\n  return domain\n  /** @type {State} */\n\n  function domain(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        done,\n        punctuationContinuation\n      )(code)\n    }\n\n    if (code === 46 || code === 95) {\n      return effects.check(punctuation, done, punctuationContinuation)(code)\n    } // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n\n    if (\n      code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return done(code)\n    }\n\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function punctuationContinuation(code) {\n    if (code === 46) {\n      hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment\n      hasUnderscoreInLastSegment = undefined\n      effects.consume(code)\n      return domain\n    }\n\n    if (code === 95) hasUnderscoreInLastSegment = true\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePath(effects, ok) {\n  let balance = 0\n  return inPath\n  /** @type {State} */\n\n  function inPath(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        ok,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (code === 40) {\n      balance++\n    }\n\n    if (code === 41) {\n      return effects.check(\n        punctuation,\n        parenAtPathEnd,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (pathEnd(code)) {\n      return ok(code)\n    }\n\n    if (trailingPunctuation(code)) {\n      return effects.check(punctuation, ok, continuedPunctuation)(code)\n    }\n\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function continuedPunctuation(code) {\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function parenAtPathEnd(code) {\n    balance--\n    return balance < 0 ? ok(code) : continuedPunctuation(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNamedCharacterReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (code === 59) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // If the named character reference is followed by the end of the path, it’s\n    // not continued punctuation.\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePunctuation(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // Check the next.\n    if (trailingPunctuation(code)) {\n      effects.consume(code)\n      return after\n    } // If the punctuation marker is followed by the end of the path, it’s not\n    // continued punctuation.\n\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction trailingPunctuation(code) {\n  return (\n    code === 33 ||\n    code === 34 ||\n    code === 39 ||\n    code === 41 ||\n    code === 42 ||\n    code === 44 ||\n    code === 46 ||\n    code === 58 ||\n    code === 59 ||\n    code === 60 ||\n    code === 63 ||\n    code === 95 ||\n    code === 126\n  )\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction pathEnd(code) {\n  return code === null || code === 60 || markdownLineEndingOrSpace(code)\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousHttp(code) {\n  return code === null || !asciiAlpha(code)\n}\n/** @type {Previous} */\n\nfunction previousEmail(code) {\n  return code !== 47 && previousHttp(code)\n}\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\n\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n\n  while (index--) {\n    const token = events[index][1]\n\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    } // @ts-expect-error If we’ve seen this token, and it was marked as not\n    // having any unbalanced bracket before it, we can exit.\n\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n\n  if (events.length > 0 && !result) {\n    // @ts-expect-error Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Token} Token\n */\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n/** @type {HtmlExtension} */\n\nexport const gfmAutolinkLiteralHtml = {\n  exit: {\n    literalAutolinkEmail,\n    literalAutolinkHttp,\n    literalAutolinkWww\n  }\n}\n/** @type {Handle} */\n\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://')\n}\n/** @type {Handle} */\n\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:')\n}\n/** @type {Handle} */\n\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token)\n}\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string} [protocol]\n * @returns {void}\n */\n\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token)\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">')\n  this.raw(this.encode(url))\n  this.tag('</a>')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @returns {Extension}\n */\n\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    const token = self.events[index][1]\n\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    } // Exit if we’ve walked far enough.\n\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n\n    if (id.charCodeAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n/** @type {Resolver} */\n\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token|undefined} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker' // The whole (without `!`):\n\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // The `^` marker\n\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  } // Increment the end 1 character.\n\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n  /** @type {Array<Event>} */\n\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context], // The `[`\n    events[index + 3],\n    events[index + 4], // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context], // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context], // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n  /** @type {State} */\n\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n  /** @type {State} */\n\n  function callData(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size++ > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      effects.exit('chunkString')\n      token = effects.exit('gfmFootnoteCallString')\n      return defined.includes(normalizeIdentifier(self.sliceSerialize(token)))\n        ? end(code)\n        : nok(code)\n    }\n\n    effects.consume(code)\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    return code === 92 ? callEscape : callData\n  }\n  /** @type {State} */\n\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n\n    return callData(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    effects.exit('gfmFootnoteCall')\n    return ok\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n\n  let identifier\n  let size = 0\n  /** @type {boolean|undefined} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelStart\n  }\n  /** @type {State} */\n\n  function labelStart(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      return atBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      size++\n      return atBreak\n    }\n\n    effects.enter('chunkString').contentType = 'string'\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      markdownLineEnding(code) ||\n      code === 91 ||\n      code === 93 ||\n      size > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n\n      return factorySpace(effects, done, 'gfmFootnoteDefinitionWhitespace')\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!defined.includes(identifier)) {\n      defined.push(identifier)\n    }\n\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n/** @type {Exiter} */\n\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n *\n * @typedef Options\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [label='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [backLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n */\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nconst own = {}.hasOwnProperty\n/**\n * @param {Options} [options={}]\n * @returns {HtmlExtension}\n */\n\nexport function gfmFootnoteHtml(options = {}) {\n  const label = options.label || 'Footnotes'\n  const backLabel = options.backLabel || 'Back to content'\n  const clobberPrefix =\n    options.clobberPrefix === undefined || options.clobberPrefix === null\n      ? 'user-content-'\n      : options.clobberPrefix\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack =\n          /** @type {Array<boolean>} */\n          this.getData('tightStack')\n        stack.push(false)\n      },\n\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer()\n      },\n\n      gfmFootnoteCallString() {\n        this.buffer()\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions =\n          /** @type {Record<string, string>} */\n          this.getData('gfmFootnoteDefinitions')\n        const footnoteStack =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteDefinitionStack')\n        const tightStack =\n          /** @type {Array<boolean>} */\n          this.getData('tightStack')\n        const current = footnoteStack.pop()\n        const value = this.resume()\n\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', (definitions = {}))\n        }\n\n        if (!own.call(definitions, current)) definitions[current] = value\n        tightStack.pop()\n        this.setData('slurpOneLineEnding', true) // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n\n        this.setData('lastWasTag')\n      },\n\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteDefinitionStack')\n\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', (footnoteStack = []))\n        }\n\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)))\n        this.resume() // Drop the label.\n\n        this.buffer() // Get ready for a value.\n      },\n\n      gfmFootnoteCallString(token) {\n        let calls =\n          /** @type {Array<string>|undefined} */\n          this.getData('gfmFootnoteCallOrder')\n        let counts =\n          /** @type {Record<string, number>|undefined} */\n          this.getData('gfmFootnoteCallCounts')\n        const id = normalizeIdentifier(this.sliceSerialize(token))\n        /** @type {number} */\n\n        let counter\n        this.resume()\n        if (!calls) this.setData('gfmFootnoteCallOrder', (calls = []))\n        if (!counts) this.setData('gfmFootnoteCallCounts', (counts = {}))\n        const index = calls.indexOf(id)\n        const safeId = sanitizeUri(id.toLowerCase())\n\n        if (index === -1) {\n          calls.push(id)\n          counts[id] = 1\n          counter = calls.length\n        } else {\n          counts[id]++\n          counter = index + 1\n        }\n\n        const reuseCounter = counts[id]\n        this.tag(\n          '<sup><a href=\"#' +\n            clobberPrefix +\n            'fn-' +\n            safeId +\n            '\" id=\"' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (reuseCounter > 1 ? '-' + reuseCounter : '') +\n            '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' +\n            String(counter) +\n            '</a></sup>'\n        )\n      },\n\n      null() {\n        const calls =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteCallOrder') || []\n        const counts =\n          /** @type {Record<string, number>} */\n          this.getData('gfmFootnoteCallCounts') || {}\n        const definitions =\n          /** @type {Record<string, string>} */\n          this.getData('gfmFootnoteDefinitions') || {}\n        let index = -1\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag(\n            '<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">'\n          )\n          this.raw(this.encode(label))\n          this.tag('</h2>')\n          this.lineEndingIfNeeded()\n          this.tag('<ol>')\n        }\n\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index]\n          const safeId = sanitizeUri(id.toLowerCase())\n          let referenceIndex = 0\n          /** @type {Array<string>} */\n\n          const references = []\n\n          while (++referenceIndex <= counts[id]) {\n            references.push(\n              '<a href=\"#' +\n                clobberPrefix +\n                'fnref-' +\n                safeId +\n                (referenceIndex > 1 ? '-' + referenceIndex : '') +\n                '\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"' +\n                this.encode(backLabel) +\n                '\">↩' +\n                (referenceIndex > 1\n                  ? '<sup>' + referenceIndex + '</sup>'\n                  : '') +\n                '</a>'\n            )\n          }\n\n          const reference = references.join(' ')\n          let injected = false\n          this.lineEndingIfNeeded()\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">')\n          this.lineEndingIfNeeded()\n          this.tag(\n            definitions[id].replace(\n              /<\\/p>(?:\\r?\\n|\\r)?$/,\n              (\n                /** @type {string} */\n                $0\n              ) => {\n                injected = true\n                return ' ' + reference + $0\n              }\n            )\n          )\n\n          if (!injected) {\n            this.lineEndingIfNeeded()\n            this.tag(reference)\n          }\n\n          this.lineEndingIfNeeded()\n          this.tag('</li>')\n        }\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag('</ol>')\n          this.lineEndingIfNeeded()\n          this.tag('</section>')\n        }\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/** @type {HtmlExtension} */\nexport const gfmStrikethroughHtml = {\n  enter: {\n    strikethrough() {\n      this.tag('<del>')\n    }\n  },\n  exit: {\n    strikethrough() {\n      this.tag('</del>')\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n/**\n * @typedef {'left'|'center'|'right'|'none'} Align\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Extension} */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolve: resolveTable\n    }\n  }\n}\nconst nextPrefixedOrBlank = {\n  tokenize: tokenizeNextPrefixedOrBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  /** @type {boolean|undefined} */\n\n  let inHead\n  /** @type {boolean|undefined} */\n\n  let inDelimiterRow\n  /** @type {boolean|undefined} */\n\n  let inRow\n  /** @type {number|undefined} */\n\n  let contentStart\n  /** @type {number|undefined} */\n\n  let contentEnd\n  /** @type {number|undefined} */\n\n  let cellStart\n  /** @type {boolean|undefined} */\n\n  let seenCellInRow\n\n  while (++index < events.length) {\n    const token = events[index][1]\n\n    if (inRow) {\n      if (token.type === 'temporaryTableCellContent') {\n        contentStart = contentStart || index\n        contentEnd = index\n      }\n\n      if (\n        // Combine separate content parts into one.\n        (token.type === 'tableCellDivider' || token.type === 'tableRow') &&\n        contentEnd\n      ) {\n        const content = {\n          type: 'tableContent',\n          start: events[contentStart][1].start,\n          end: events[contentEnd][1].end\n        }\n        /** @type {Token} */\n\n        const text = {\n          type: 'chunkText',\n          start: content.start,\n          end: content.end,\n          // @ts-expect-error It’s fine.\n          contentType: 'text'\n        }\n        events.splice(\n          contentStart,\n          contentEnd - contentStart + 1,\n          ['enter', content, context],\n          ['enter', text, context],\n          ['exit', text, context],\n          ['exit', content, context]\n        )\n        index -= contentEnd - contentStart - 3\n        contentStart = undefined\n        contentEnd = undefined\n      }\n    }\n\n    if (\n      events[index][0] === 'exit' &&\n      cellStart !== undefined &&\n      cellStart + (seenCellInRow ? 0 : 1) < index &&\n      (token.type === 'tableCellDivider' ||\n        (token.type === 'tableRow' &&\n          (cellStart + 3 < index ||\n            events[cellStart][1].type !== 'whitespace')))\n    ) {\n      const cell = {\n        type: inDelimiterRow\n          ? 'tableDelimiter'\n          : inHead\n          ? 'tableHeader'\n          : 'tableData',\n        start: events[cellStart][1].start,\n        end: events[index][1].end\n      }\n      events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, [\n        'exit',\n        cell,\n        context\n      ])\n      events.splice(cellStart, 0, ['enter', cell, context])\n      index += 2\n      cellStart = index + 1\n      seenCellInRow = true\n    }\n\n    if (token.type === 'tableRow') {\n      inRow = events[index][0] === 'enter'\n\n      if (inRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableDelimiterRow') {\n      inDelimiterRow = events[index][0] === 'enter'\n\n      if (inDelimiterRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableHead') {\n      inHead = events[index][0] === 'enter'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  /** @type {Array<Align>} */\n\n  const align = []\n  let tableHeaderCount = 0\n  /** @type {boolean|undefined} */\n\n  let seenDelimiter\n  /** @type {boolean|undefined} */\n\n  let hasDash\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // @ts-expect-error Custom.\n    effects.enter('table')._align = align\n    effects.enter('tableHead')\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    }\n\n    tableHeaderCount++\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function cellDividerHead(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    seenDelimiter = true\n    return cellBreakHead\n  }\n  /** @type {State} */\n\n  function cellBreakHead(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndHead(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    if (seenDelimiter) {\n      seenDelimiter = undefined\n      tableHeaderCount++\n    }\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceHead(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    effects.exit('whitespace')\n    return cellBreakHead(code)\n  }\n  /** @type {State} */\n\n  function inCellContentHead(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakHead(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeHead : inCellContentHead\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeHead(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentHead\n    } // Anything else.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function atRowEndHead(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    effects.exit('tableRow')\n    effects.exit('tableHead')\n    const originalInterrupt = self.interrupt\n    self.interrupt = true\n    return effects.attempt(\n      {\n        tokenize: tokenizeRowEnd,\n        partial: true\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        effects.enter('tableDelimiterRow')\n        return atDelimiterRowBreak(code)\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        return nok(code)\n      }\n    )(code)\n  }\n  /** @type {State} */\n\n  function atDelimiterRowBreak(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      align.push('none')\n      return inFillerDelimiter\n    }\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align.push('left')\n      return afterLeftAlignment\n    } // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceDelimiter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    effects.exit('whitespace')\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function inFillerDelimiter(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return inFillerDelimiter\n    }\n\n    effects.exit('tableDelimiterFiller')\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align[align.length - 1] =\n        align[align.length - 1] === 'left' ? 'center' : 'right'\n      return afterRightAlignment\n    }\n\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function afterLeftAlignment(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      return inFillerDelimiter\n    } // Anything else is not ok.\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function afterRightAlignment(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    } // `|`\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function rowEndDelimiter(code) {\n    effects.exit('tableDelimiterRow') // Exit if there was no dash at all, or if the header cell count is not the\n    // delimiter cell count.\n\n    if (!hasDash || tableHeaderCount !== align.length) {\n      return nok(code)\n    }\n\n    if (code === null) {\n      return tableClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, bodyStart, 'linePrefix', 4),\n        tableClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableClose(code) {\n    effects.exit('table')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function bodyStart(code) {\n    effects.enter('tableBody')\n    return rowStartBody(code)\n  }\n  /** @type {State} */\n\n  function rowStartBody(code) {\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    }\n\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function cellDividerBody(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    return cellBreakBody\n  }\n  /** @type {State} */\n\n  function cellBreakBody(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndBody(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceBody\n    } // `|`\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceBody(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceBody\n    }\n\n    effects.exit('whitespace')\n    return cellBreakBody(code)\n  }\n  /** @type {State} */\n\n  function inCellContentBody(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakBody(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeBody : inCellContentBody\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeBody(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentBody\n    } // Anything else.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function atRowEndBody(code) {\n    effects.exit('tableRow')\n\n    if (code === null) {\n      return tableBodyClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableBodyClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, rowStartBody, 'linePrefix', 4),\n        tableBodyClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableBodyClose(code) {\n    effects.exit('tableBody')\n    return tableClose(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeRowEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, prefixed, 'linePrefix')\n    }\n    /** @type {State} */\n\n    function prefixed(code) {\n      // Blank or interrupting line.\n      if (\n        self.parser.lazy[self.now().line] ||\n        code === null ||\n        markdownLineEnding(code)\n      ) {\n        return nok(code)\n      }\n\n      const tail = self.events[self.events.length - 1] // Indented code can interrupt delimiter and body rows.\n\n      if (\n        !self.parser.constructs.disable.null.includes('codeIndented') &&\n        tail &&\n        tail[1].type === 'linePrefix' &&\n        tail[2].sliceSerialize(tail[1], true).length >= 4\n      ) {\n        return nok(code)\n      }\n\n      self._gfmTableDynamicInterruptHack = true\n      return effects.check(\n        self.parser.constructs.flow,\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return nok(code)\n        },\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return ok(code)\n        }\n      )(code)\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextPrefixedOrBlank(effects, ok, nok) {\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // This is a check, so we don’t care about tokens, but we open a bogus one\n    // so we’re valid.\n    effects.enter('check') // EOL.\n\n    effects.consume(code)\n    return whitespace\n  }\n  /** @type {State} */\n\n  function whitespace(code) {\n    if (code === -1 || code === 32) {\n      effects.consume(code)\n      size++\n      return size === 4 ? ok : whitespace\n    } // EOF or whitespace\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      return ok(code)\n    } // Anything else.\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('./syntax.js').Align} Align\n */\nconst alignment = {\n  none: '',\n  left: ' align=\"left\"',\n  right: ' align=\"right\"',\n  center: ' align=\"center\"'\n}\n/** @type {HtmlExtension} */\n\nexport const gfmTableHtml = {\n  enter: {\n    table(token) {\n      /** @type {Array<Align>} */\n      // @ts-expect-error Custom.\n      const tableAlign = token._align\n      this.lineEndingIfNeeded()\n      this.tag('<table>')\n      this.setData('tableAlign', tableAlign)\n    },\n\n    tableBody() {\n      // Clear slurping line ending from the delimiter row.\n      this.setData('slurpOneLineEnding')\n      this.tag('<tbody>')\n    },\n\n    tableData() {\n      const tableAlign =\n        /** @type {Array<Align>} */\n        this.getData('tableAlign')\n      const tableColumn =\n        /** @type {number} */\n        this.getData('tableColumn')\n      const align = alignment[tableAlign[tableColumn]]\n\n      if (align === undefined) {\n        // Capture results to ignore them.\n        this.buffer()\n      } else {\n        this.lineEndingIfNeeded()\n        this.tag('<td' + align + '>')\n      }\n    },\n\n    tableHead() {\n      this.lineEndingIfNeeded()\n      this.tag('<thead>')\n    },\n\n    tableHeader() {\n      const tableAlign =\n        /** @type {Array<Align>} */\n        this.getData('tableAlign')\n      const tableColumn =\n        /** @type {number} */\n        this.getData('tableColumn')\n      const align = alignment[tableAlign[tableColumn]]\n      this.lineEndingIfNeeded()\n      this.tag('<th' + align + '>')\n    },\n\n    tableRow() {\n      this.setData('tableColumn', 0)\n      this.lineEndingIfNeeded()\n      this.tag('<tr>')\n    }\n  },\n  exit: {\n    // Overwrite the default code text data handler to unescape escaped pipes when\n    // they are in tables.\n    codeTextData(token) {\n      let value = this.sliceSerialize(token)\n\n      if (this.getData('tableAlign')) {\n        value = value.replace(/\\\\([\\\\|])/g, replace)\n      }\n\n      this.raw(this.encode(value))\n    },\n\n    table() {\n      this.setData('tableAlign') // If there was no table body, make sure the slurping from the delimiter row\n      // is cleared.\n\n      this.setData('slurpAllLineEndings')\n      this.lineEndingIfNeeded()\n      this.tag('</table>')\n    },\n\n    tableBody() {\n      this.lineEndingIfNeeded()\n      this.tag('</tbody>')\n    },\n\n    tableData() {\n      const tableAlign =\n        /** @type {Array<Align>} */\n        this.getData('tableAlign')\n      const tableColumn =\n        /** @type {number} */\n        this.getData('tableColumn')\n\n      if (tableColumn in tableAlign) {\n        this.tag('</td>')\n        this.setData('tableColumn', tableColumn + 1)\n      } else {\n        // Stop capturing.\n        this.resume()\n      }\n    },\n\n    tableHead() {\n      this.lineEndingIfNeeded()\n      this.tag('</thead>')\n      this.setData('slurpOneLineEnding', true) // Slurp the line ending from the delimiter row.\n    },\n\n    tableHeader() {\n      const tableColumn =\n        /** @type {number} */\n        this.getData('tableColumn')\n      this.tag('</th>')\n      this.setData('tableColumn', tableColumn + 1)\n    },\n\n    tableRow() {\n      const tableAlign =\n        /** @type {Array<Align>} */\n        this.getData('tableAlign')\n      let tableColumn =\n        /** @type {number} */\n        this.getData('tableColumn')\n\n      while (tableColumn < tableAlign.length) {\n        this.lineEndingIfNeeded()\n        this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>')\n        tableColumn++\n      }\n\n      this.setData('tableColumn', tableColumn)\n      this.lineEndingIfNeeded()\n      this.tag('</tr>')\n    }\n  }\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\n\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n */\n\n/**\n * An opening or closing tag, followed by a case-insensitive specific tag name,\n * followed by HTML whitespace, a greater than, or a slash.\n */\nconst reFlow =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n/**\n * As HTML (text) parses tags separately (and v. strictly), we don’t need to be\n * global.\n */\nconst reText = new RegExp('^' + reFlow.source, 'i')\n\n/** @type {HtmlExtension} */\nexport const gfmTagfilterHtml = {\n  exit: {\n    htmlFlowData(token) {\n      exitHtmlData.call(this, token, reFlow)\n    },\n    htmlTextData(token) {\n      exitHtmlData.call(this, token, reText)\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n */\nfunction exitHtmlData(token, filter) {\n  let value = this.sliceSerialize(token)\n\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2')\n  }\n\n  this.raw(this.encode(value))\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n  /** @type {State} */\n\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null || // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this\n  return factorySpace(effects, after, 'whitespace')\n  /** @type {State} */\n\n  function after(code) {\n    const tail = self.events[self.events.length - 1]\n    return (\n      // We either found spaces…\n      ((tail && tail[1].type === 'whitespace') || // …or it was followed by a line ending, in which case, there has to be\n        // non-whitespace after that line ending, because otherwise we’d get an\n        // EOF as the content is closed with blank lines.\n        markdownLineEnding(code)) &&\n        code !== null\n        ? ok(code)\n        : nok(code)\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/** @type {HtmlExtension} */\nexport const gfmTaskListItemHtml = {\n  enter: {\n    taskListCheck() {\n      this.tag('<input type=\"checkbox\" disabled=\"\" ')\n    }\n  },\n  exit: {\n    taskListCheck() {\n      this.tag('/>')\n    },\n\n    taskListCheckValueChecked() {\n      this.tag('checked=\"\" ')\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Support GFM or markdown on github.com.\n *\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Support to compile GFM to HTML.\n *\n * @param {HtmlOptions} [options]\n * @returns {HtmlExtension}\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfmStrikethrough(options = {}) {\n  let single = options.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n\n  function resolveAllStrikethrough(events, context) {\n    let index = -1 // Walk through all events.\n\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index // Now walk back to find an opener.\n\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open && // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            } // Opening.\n\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ] // Between.\n\n            splice(\n              nextEvents,\n              nextEvents.length,\n              0,\n              resolveAll(\n                context.parser.constructs.insideSpan.null,\n                events.slice(open + 1, index),\n                context\n              )\n            ) // Closing.\n\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n\n    return events\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n    /** @type {State} */\n\n    function more(code) {\n      const before = classifyCharacter(previous)\n\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n * @returns {string}\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace)\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function replace(value) {\n    // @ts-expect-error Hush, it’s fine.\n    return '&' + characterReferences[value] + ';'\n  }\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * While micromark is a lexer/tokenizer, the common case of going from markdown\n * to html is currently built in as this module, even though the parts can be\n * used separately to build ASTs, CSTs, or many other output formats.\n *\n * Having an HTML compiler built in is useful because it allows us to check for\n * compliancy to CommonMark, the de facto norm of markdown, specified in roughly\n * 600 input/output cases.\n *\n * This module has an interface that accepts lists of events instead of the\n * whole at once, however, because markdown can’t be truly streaming, we buffer\n * events before processing and outputting the final result.\n */\n\n/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').CompileOptions} CompileOptions\n * @typedef {import('micromark-util-types').CompileData} CompileData\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Definition} Definition\n * @typedef {import('micromark-util-types').Compile} Compile\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedHtmlExtension} NormalizedHtmlExtension\n */\n\n/**\n * @typedef Media\n * @property {boolean} [image]\n * @property {string} [labelId]\n * @property {string} [label]\n * @property {string} [referenceId]\n * @property {string} [destination]\n * @property {string} [title]\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {combineHtmlExtensions} from 'micromark-util-combine-extensions'\nimport {push} from 'micromark-util-chunked'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {encode as _encode} from 'micromark-util-encode'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nconst hasOwnProperty = {}.hasOwnProperty\n/**\n * These two are allowlists of safe protocols for full URLs in respectively the\n * `href` (on `<a>`) and `src` (on `<img>`) attributes.\n * They are based on what is allowed on GitHub,\n * <https://github.com/syntax-tree/hast-util-sanitize/blob/9275b21/lib/github.json#L31>\n */\n\nconst protocolHref = /^(https?|ircs?|mailto|xmpp)$/i\nconst protocolSrc = /^https?$/i\n/**\n * @param {CompileOptions} [options]\n * @returns {Compile}\n */\n\nexport function compile(options = {}) {\n  /**\n   * Tags is needed because according to markdown, links and emphasis and\n   * whatnot can exist in images, however, as HTML doesn’t allow content in\n   * images, the tags are ignored in the `alt` attribute, but the content\n   * remains.\n   *\n   * @type {boolean|undefined}\n   */\n  let tags = true\n  /**\n   * An object to track identifiers to media (URLs and titles) defined with\n   * definitions.\n   *\n   * @type {Record<string, Definition>}\n   */\n\n  const definitions = {}\n  /**\n   * A lot of the handlers need to capture some of the output data, modify it\n   * somehow, and then deal with it.\n   * We do that by tracking a stack of buffers, that can be opened (with\n   * `buffer`) and closed (with `resume`) to access them.\n   *\n   * @type {Array<Array<string>>}\n   */\n\n  const buffers = [[]]\n  /**\n   * As we can have links in images and the other way around, where the deepest\n   * ones are closed first, we need to track which one we’re in.\n   *\n   * @type {Array<Media>}\n   */\n\n  const mediaStack = []\n  /**\n   * Same as `mediaStack` for tightness, which is specific to lists.\n   * We need to track if we’re currently in a tight or loose container.\n   *\n   * @type {Array<boolean>}\n   */\n\n  const tightStack = []\n  /** @type {HtmlExtension} */\n\n  const defaultHandlers = {\n    enter: {\n      blockQuote: onenterblockquote,\n      codeFenced: onentercodefenced,\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: onentercodeindented,\n      codeText: onentercodetext,\n      content: onentercontent,\n      definition: onenterdefinition,\n      definitionDestinationString: onenterdefinitiondestinationstring,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: onenteremphasis,\n      htmlFlow: onenterhtmlflow,\n      htmlText: onenterhtml,\n      image: onenterimage,\n      label: buffer,\n      link: onenterlink,\n      listItemMarker: onenterlistitemmarker,\n      listItemValue: onenterlistitemvalue,\n      listOrdered: onenterlistordered,\n      listUnordered: onenterlistunordered,\n      paragraph: onenterparagraph,\n      reference: buffer,\n      resource: onenterresource,\n      resourceDestinationString: onenterresourcedestinationstring,\n      resourceTitleString: buffer,\n      setextHeading: onentersetextheading,\n      strong: onenterstrong\n    },\n    exit: {\n      atxHeading: onexitatxheading,\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: onexitblockquote,\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: onexitflowcode,\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: resume,\n      codeFlowValue: onexitcodeflowvalue,\n      codeIndented: onexitflowcode,\n      codeText: onexitcodetext,\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: onexitdefinition,\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: onexitemphasis,\n      hardBreakEscape: onexithardbreak,\n      hardBreakTrailing: onexithardbreak,\n      htmlFlow: onexithtml,\n      htmlFlowData: onexitdata,\n      htmlText: onexithtml,\n      htmlTextData: onexitdata,\n      image: onexitmedia,\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: onexitmedia,\n      listOrdered: onexitlistordered,\n      listUnordered: onexitlistunordered,\n      paragraph: onexitparagraph,\n      reference: resume,\n      referenceString: onexitreferencestring,\n      resource: resume,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      setextHeading: onexitsetextheading,\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: onexitstrong,\n      thematicBreak: onexitthematicbreak\n    }\n  }\n  /**\n   * Combine the HTML extensions with the default handlers.\n   * An HTML extension is an object whose fields are either `enter` or `exit`\n   * (reflecting whether a token is entered or exited).\n   * The values at such objects are names of tokens mapping to handlers.\n   * Handlers are called, respectively when a token is opener or closed, with\n   * that token, and a context as `this`.\n   *\n   * @type {NormalizedHtmlExtension}\n   */\n  // @ts-expect-error `defaultHandlers` is full, so the result will be too.\n\n  const handlers = combineHtmlExtensions(\n    [defaultHandlers].concat(options.htmlExtensions || [])\n  )\n  /**\n   * Handlers do often need to keep track of some state.\n   * That state is provided here as a key-value store (an object).\n   *\n   * @type {CompileData}\n   */\n\n  const data = {\n    tightStack,\n    definitions\n  }\n  /**\n   * The context for handlers references a couple of useful functions.\n   * In handlers from extensions, those can be accessed at `this`.\n   * For the handlers here, they can be accessed directly.\n   *\n   * @type {Omit<CompileContext, 'sliceSerialize'>}\n   */\n\n  const context = {\n    lineEndingIfNeeded,\n    options,\n    encode,\n    raw,\n    tag,\n    buffer,\n    resume,\n    setData,\n    getData\n  }\n  /**\n   * Generally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\n   * markdown document over to the compiled HTML.\n   * In some cases, such as `> a`, CommonMark requires that extra line endings\n   * are added: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n   * This variable hold the default line ending when given (or `undefined`),\n   * and in the latter case will be updated to the first found line ending if\n   * there is one.\n   */\n\n  let lineEndingStyle = options.defaultLineEnding // Return the function that handles a slice of events.\n\n  return compile\n  /**\n   * Deal w/ a slice of events.\n   * Return either the empty string if there’s nothing of note to return, or the\n   * result when done.\n   *\n   * @param {Array<Event>} events\n   * @returns {string}\n   */\n\n  function compile(events) {\n    let index = -1\n    let start = 0\n    /** @type {Array<number>} */\n\n    const listStack = [] // As definitions can come after references, we need to figure out the media\n    // (urls and titles) defined by them before handling the references.\n    // So, we do sort of what HTML does: put metadata at the start (in head), and\n    // then put content after (`body`).\n\n    /** @type {Array<Event>} */\n\n    let head = []\n    /** @type {Array<Event>} */\n\n    let body = []\n\n    while (++index < events.length) {\n      // Figure out the line ending style used in the document.\n      if (\n        !lineEndingStyle &&\n        (events[index][1].type === 'lineEnding' ||\n          events[index][1].type === 'lineEndingBlank')\n      ) {\n        // @ts-expect-error Hush, it’s a line ending.\n        lineEndingStyle = events[index][2].sliceSerialize(events[index][1])\n      } // Preprocess lists to infer whether the list is loose or not.\n\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          prepareList(events.slice(listStack.pop(), index))\n        }\n      } // Move definitions to the front.\n\n      if (events[index][1].type === 'definition') {\n        if (events[index][0] === 'enter') {\n          body = push(body, events.slice(start, index))\n          start = index\n        } else {\n          head = push(head, events.slice(start, index + 1))\n          start = index + 1\n        }\n      }\n    }\n\n    head = push(head, body)\n    head = push(head, events.slice(start))\n    index = -1\n    const result = head // Handle the start of the document, if defined.\n\n    if (handlers.enter.null) {\n      handlers.enter.null.call(context)\n    } // Handle all events.\n\n    while (++index < events.length) {\n      const handler = handlers[result[index][0]]\n\n      if (hasOwnProperty.call(handler, result[index][1].type)) {\n        handler[result[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: result[index][2].sliceSerialize\n            },\n            context\n          ),\n          result[index][1]\n        )\n      }\n    } // Handle the end of the document, if defined.\n\n    if (handlers.exit.null) {\n      handlers.exit.null.call(context)\n    }\n\n    return buffers[0].join('')\n  }\n  /**\n   * Figure out whether lists are loose or not.\n   *\n   * @param {Array<Event>} slice\n   * @returns {void}\n   */\n\n  function prepareList(slice) {\n    const length = slice.length\n    let index = 0 // Skip open.\n\n    let containerBalance = 0\n    let loose = false\n    /** @type {boolean|undefined} */\n\n    let atMarker\n\n    while (++index < length) {\n      const event = slice[index]\n\n      if (event[1]._container) {\n        atMarker = undefined\n\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n      } else\n        switch (event[1].type) {\n          case 'listItemPrefix': {\n            if (event[0] === 'exit') {\n              atMarker = true\n            }\n\n            break\n          }\n\n          case 'linePrefix': {\n            // Ignore\n            break\n          }\n\n          case 'lineEndingBlank': {\n            if (event[0] === 'enter' && !containerBalance) {\n              if (atMarker) {\n                atMarker = undefined\n              } else {\n                loose = true\n              }\n            }\n\n            break\n          }\n\n          default: {\n            atMarker = undefined\n          }\n        }\n    }\n\n    slice[0][1]._loose = loose\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n  function setData(key, value) {\n    data[key] = value\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n  function getData(key) {\n    return data[key]\n  }\n  /** @type {CompileContext['buffer']} */\n\n  function buffer() {\n    buffers.push([])\n  }\n  /** @type {CompileContext['resume']} */\n\n  function resume() {\n    const buf = buffers.pop()\n    return buf.join('')\n  }\n  /** @type {CompileContext['tag']} */\n\n  function tag(value) {\n    if (!tags) return\n    setData('lastWasTag', true)\n    buffers[buffers.length - 1].push(value)\n  }\n  /** @type {CompileContext['raw']} */\n\n  function raw(value) {\n    setData('lastWasTag')\n    buffers[buffers.length - 1].push(value)\n  }\n  /**\n   * Output an extra line ending.\n   *\n   * @returns {void}\n   */\n\n  function lineEnding() {\n    raw(lineEndingStyle || '\\n')\n  }\n  /** @type {CompileContext['lineEndingIfNeeded']} */\n\n  function lineEndingIfNeeded() {\n    const buffer = buffers[buffers.length - 1]\n    const slice = buffer[buffer.length - 1]\n    const previous = slice ? slice.charCodeAt(slice.length - 1) : null\n\n    if (previous === 10 || previous === 13 || previous === null) {\n      return\n    }\n\n    lineEnding()\n  }\n  /** @type {CompileContext['encode']} */\n\n  function encode(value) {\n    return getData('ignoreEncode') ? value : _encode(value)\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n  function onenterlistordered(token) {\n    tightStack.push(!token._loose)\n    lineEndingIfNeeded()\n    tag('<ol')\n    setData('expectFirstItem', true)\n  }\n  /** @type {Handle} */\n\n  function onenterlistunordered(token) {\n    tightStack.push(!token._loose)\n    lineEndingIfNeeded()\n    tag('<ul')\n    setData('expectFirstItem', true)\n  }\n  /** @type {Handle} */\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectFirstItem')) {\n      const value = Number.parseInt(this.sliceSerialize(token), 10)\n\n      if (value !== 1) {\n        tag(' start=\"' + encode(String(value)) + '\"')\n      }\n    }\n  }\n  /** @type {Handle} */\n\n  function onenterlistitemmarker() {\n    if (getData('expectFirstItem')) {\n      tag('>')\n    } else {\n      onexitlistitem()\n    }\n\n    lineEndingIfNeeded()\n    tag('<li>')\n    setData('expectFirstItem') // “Hack” to prevent a line ending from showing up if the item is empty.\n\n    setData('lastWasTag')\n  }\n  /** @type {Handle} */\n\n  function onexitlistordered() {\n    onexitlistitem()\n    tightStack.pop()\n    lineEnding()\n    tag('</ol>')\n  }\n  /** @type {Handle} */\n\n  function onexitlistunordered() {\n    onexitlistitem()\n    tightStack.pop()\n    lineEnding()\n    tag('</ul>')\n  }\n  /** @type {Handle} */\n\n  function onexitlistitem() {\n    if (getData('lastWasTag') && !getData('slurpAllLineEndings')) {\n      lineEndingIfNeeded()\n    }\n\n    tag('</li>')\n    setData('slurpAllLineEndings')\n  }\n  /** @type {Handle} */\n\n  function onenterblockquote() {\n    tightStack.push(false)\n    lineEndingIfNeeded()\n    tag('<blockquote>')\n  }\n  /** @type {Handle} */\n\n  function onexitblockquote() {\n    tightStack.pop()\n    lineEndingIfNeeded()\n    tag('</blockquote>')\n    setData('slurpAllLineEndings')\n  }\n  /** @type {Handle} */\n\n  function onenterparagraph() {\n    if (!tightStack[tightStack.length - 1]) {\n      lineEndingIfNeeded()\n      tag('<p>')\n    }\n\n    setData('slurpAllLineEndings')\n  }\n  /** @type {Handle} */\n\n  function onexitparagraph() {\n    if (tightStack[tightStack.length - 1]) {\n      setData('slurpAllLineEndings', true)\n    } else {\n      tag('</p>')\n    }\n  }\n  /** @type {Handle} */\n\n  function onentercodefenced() {\n    lineEndingIfNeeded()\n    tag('<pre><code')\n    setData('fencesCount', 0)\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfenceinfo() {\n    const value = resume()\n    tag(' class=\"language-' + value + '\"')\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfence() {\n    const count = getData('fencesCount') || 0\n\n    if (!count) {\n      tag('>')\n      setData('slurpOneLineEnding', true)\n    }\n\n    setData('fencesCount', count + 1)\n  }\n  /** @type {Handle} */\n\n  function onentercodeindented() {\n    lineEndingIfNeeded()\n    tag('<pre><code>')\n  }\n  /** @type {Handle} */\n\n  function onexitflowcode() {\n    const count = getData('fencesCount') // One special case is if we are inside a container, and the fenced code was\n    // not closed (meaning it runs to the end).\n    // In that case, the following line ending, is considered *outside* the\n    // fenced code and block quote by micromark, but CM wants to treat that\n    // ending as part of the code.\n\n    if (\n      count !== undefined &&\n      count < 2 && // @ts-expect-error `tightStack` is always set.\n      data.tightStack.length > 0 &&\n      !getData('lastWasTag')\n    ) {\n      lineEnding()\n    } // But in most cases, it’s simpler: when we’ve seen some data, emit an extra\n    // line ending when needed.\n\n    if (getData('flowCodeSeenData')) {\n      lineEndingIfNeeded()\n    }\n\n    tag('</code></pre>')\n    if (count !== undefined && count < 2) lineEndingIfNeeded()\n    setData('flowCodeSeenData')\n    setData('fencesCount')\n    setData('slurpOneLineEnding')\n  }\n  /** @type {Handle} */\n\n  function onenterimage() {\n    mediaStack.push({\n      image: true\n    })\n    tags = undefined // Disallow tags.\n  }\n  /** @type {Handle} */\n\n  function onenterlink() {\n    mediaStack.push({})\n  }\n  /** @type {Handle} */\n\n  function onexitlabeltext(token) {\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onexitlabel() {\n    mediaStack[mediaStack.length - 1].label = resume()\n  }\n  /** @type {Handle} */\n\n  function onexitreferencestring(token) {\n    mediaStack[mediaStack.length - 1].referenceId = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onenterresource() {\n    buffer() // We can have line endings in the resource, ignore them.\n\n    mediaStack[mediaStack.length - 1].destination = ''\n  }\n  /** @type {Handle} */\n\n  function onenterresourcedestinationstring() {\n    buffer() // Ignore encoding the result, as we’ll first percent encode the url and\n    // encode manually after.\n\n    setData('ignoreEncode', true)\n  }\n  /** @type {Handle} */\n\n  function onexitresourcedestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume()\n    setData('ignoreEncode')\n  }\n  /** @type {Handle} */\n\n  function onexitresourcetitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume()\n  }\n  /** @type {Handle} */\n\n  function onexitmedia() {\n    let index = mediaStack.length - 1 // Skip current.\n\n    const media = mediaStack[index]\n    const id = media.referenceId || media.labelId\n    const context =\n      media.destination === undefined\n        ? definitions[normalizeIdentifier(id)]\n        : media\n    tags = true\n\n    while (index--) {\n      if (mediaStack[index].image) {\n        tags = undefined\n        break\n      }\n    }\n\n    if (media.image) {\n      tag(\n        '<img src=\"' +\n          sanitizeUri(\n            context.destination,\n            options.allowDangerousProtocol ? undefined : protocolSrc\n          ) +\n          '\" alt=\"'\n      )\n      raw(media.label)\n      tag('\"')\n    } else {\n      tag(\n        '<a href=\"' +\n          sanitizeUri(\n            context.destination,\n            options.allowDangerousProtocol ? undefined : protocolHref\n          ) +\n          '\"'\n      )\n    }\n\n    tag(context.title ? ' title=\"' + context.title + '\"' : '')\n\n    if (media.image) {\n      tag(' />')\n    } else {\n      tag('>')\n      raw(media.label)\n      tag('</a>')\n    }\n\n    mediaStack.pop()\n  }\n  /** @type {Handle} */\n\n  function onenterdefinition() {\n    buffer()\n    mediaStack.push({})\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    resume()\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onenterdefinitiondestinationstring() {\n    buffer()\n    setData('ignoreEncode', true)\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiondestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume()\n    setData('ignoreEncode')\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiontitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume()\n  }\n  /** @type {Handle} */\n\n  function onexitdefinition() {\n    const media = mediaStack[mediaStack.length - 1]\n    const id = normalizeIdentifier(media.labelId)\n    resume()\n\n    if (!hasOwnProperty.call(definitions, id)) {\n      definitions[id] = mediaStack[mediaStack.length - 1]\n    }\n\n    mediaStack.pop()\n  }\n  /** @type {Handle} */\n\n  function onentercontent() {\n    setData('slurpAllLineEndings', true)\n  }\n  /** @type {Handle} */\n\n  function onexitatxheadingsequence(token) {\n    // Exit for further sequences.\n    if (getData('headingRank')) return\n    setData('headingRank', this.sliceSerialize(token).length)\n    lineEndingIfNeeded()\n    tag('<h' + getData('headingRank') + '>')\n  }\n  /** @type {Handle} */\n\n  function onentersetextheading() {\n    buffer()\n    setData('slurpAllLineEndings')\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadingtext() {\n    setData('slurpAllLineEndings', true)\n  }\n  /** @type {Handle} */\n\n  function onexitatxheading() {\n    tag('</h' + getData('headingRank') + '>')\n    setData('headingRank')\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadinglinesequence(token) {\n    setData(\n      'headingRank',\n      this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n    )\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheading() {\n    const value = resume()\n    lineEndingIfNeeded()\n    tag('<h' + getData('headingRank') + '>')\n    raw(value)\n    tag('</h' + getData('headingRank') + '>')\n    setData('slurpAllLineEndings')\n    setData('headingRank')\n  }\n  /** @type {Handle} */\n\n  function onexitdata(token) {\n    raw(encode(this.sliceSerialize(token)))\n  }\n  /** @type {Handle} */\n\n  function onexitlineending(token) {\n    if (getData('slurpAllLineEndings')) {\n      return\n    }\n\n    if (getData('slurpOneLineEnding')) {\n      setData('slurpOneLineEnding')\n      return\n    }\n\n    if (getData('inCodeText')) {\n      raw(' ')\n      return\n    }\n\n    raw(encode(this.sliceSerialize(token)))\n  }\n  /** @type {Handle} */\n\n  function onexitcodeflowvalue(token) {\n    raw(encode(this.sliceSerialize(token)))\n    setData('flowCodeSeenData', true)\n  }\n  /** @type {Handle} */\n\n  function onexithardbreak() {\n    tag('<br />')\n  }\n  /** @type {Handle} */\n\n  function onenterhtmlflow() {\n    lineEndingIfNeeded()\n    onenterhtml()\n  }\n  /** @type {Handle} */\n\n  function onexithtml() {\n    setData('ignoreEncode')\n  }\n  /** @type {Handle} */\n\n  function onenterhtml() {\n    if (options.allowDangerousHtml) {\n      setData('ignoreEncode', true)\n    }\n  }\n  /** @type {Handle} */\n\n  function onenteremphasis() {\n    tag('<em>')\n  }\n  /** @type {Handle} */\n\n  function onenterstrong() {\n    tag('<strong>')\n  }\n  /** @type {Handle} */\n\n  function onentercodetext() {\n    setData('inCodeText', true)\n    tag('<code>')\n  }\n  /** @type {Handle} */\n\n  function onexitcodetext() {\n    setData('inCodeText')\n    tag('</code>')\n  }\n  /** @type {Handle} */\n\n  function onexitemphasis() {\n    tag('</em>')\n  }\n  /** @type {Handle} */\n\n  function onexitstrong() {\n    tag('</strong>')\n  }\n  /** @type {Handle} */\n\n  function onexitthematicbreak() {\n    lineEndingIfNeeded()\n    tag('<hr />')\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencevalue(token) {\n    let value = this.sliceSerialize(token) // @ts-expect-error `decodeNamedCharacterReference` can return false for\n    // invalid named character references, but everything we’ve tokenized is\n    // valid.\n\n    value = getData('characterReferenceType')\n      ? decodeNumericCharacterReference(\n          value,\n          getData('characterReferenceType') ===\n            'characterReferenceMarkerNumeric'\n            ? 10\n            : 16\n        )\n      : decodeNamedCharacterReference(value)\n    raw(encode(value))\n    setData('characterReferenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkprotocol(token) {\n    const uri = this.sliceSerialize(token)\n    tag(\n      '<a href=\"' +\n        sanitizeUri(\n          uri,\n          options.allowDangerousProtocol ? undefined : protocolHref\n        ) +\n        '\">'\n    )\n    raw(encode(uri))\n    tag('</a>')\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkemail(token) {\n    const uri = this.sliceSerialize(token)\n    tag('<a href=\"' + sanitizeUri('mailto:' + uri) + '\">')\n    raw(encode(uri))\n    tag('</a>')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Options} Options\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Encoding} Encoding\n */\nimport {compile} from './lib/compile.js'\nimport {parse} from './lib/parse.js'\nimport {postprocess} from './lib/postprocess.js'\nimport {preprocess} from './lib/preprocess.js'\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const micromark =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => string) &\n   *   ((value: Value, options?: Options) => string)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding} [encoding]\n   * @param {Options} [options]\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n\n    return compile(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n */\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const includeImageAlt = (options || {}).includeImageAlt\n  return one(\n    value,\n    typeof includeImageAlt === 'boolean' ? includeImageAlt : true\n  )\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt) {\n  return (\n    (node(value) &&\n      (('value' in value && value.value) ||\n        (includeImageAlt && 'alt' in value && value.alt) ||\n        ('children' in value && all(value.children, includeImageAlt)))) ||\n    (Array.isArray(value) && all(value, includeImageAlt)) ||\n    ''\n  )\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        // @ts-expect-error: micromark types need to accept `null`.\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\n/**\n * @param {State} base\n * @param {Options} extension\n * @returns {State}\n */\nexport function configure(base, extension) {\n  let index = -1\n  /** @type {keyof Options} */\n  let key\n\n  // First do subextensions.\n  if (extension.extensions) {\n    while (++index < extension.extensions.length) {\n      configure(base, extension.extensions[index])\n    }\n  }\n\n  for (key in extension) {\n    if (key === 'extensions') {\n      // Empty.\n    } else if (key === 'unsafe' || key === 'join') {\n      /* c8 ignore next 2 */\n      // @ts-expect-error: hush.\n      base[key] = [...(base[key] || []), ...(extension[key] || [])]\n    } else if (key === 'handlers') {\n      base[key] = Object.assign(base[key], extension[key] || {})\n    } else {\n      // @ts-expect-error: hush.\n      base.options[key] = extension[key]\n    }\n  }\n\n  return base\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    !state.options.fences &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n */\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const includeImageAlt = (options || {}).includeImageAlt\n  return one(\n    value,\n    typeof includeImageAlt === 'boolean' ? includeImageAlt : true\n  )\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt) {\n  return (\n    (node(value) &&\n      (('value' in value && value.value) ||\n        (includeImageAlt && 'alt' in value && value.alt) ||\n        ('children' in value && all(value.children, includeImageAlt)))) ||\n    (Array.isArray(value) && all(value, includeImageAlt)) ||\n    ''\n  )\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {visit, EXIT} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, (node) => {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {HTML} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Exit} Exit\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('unist-util-is').AssertPredicate<PhrasingContent>} AssertPredicatePhrasing\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * @param\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\nexport const phrasing = /** @type {AssertPredicatePhrasing} */ (\n  convert([\n    'break',\n    'delete',\n    'emphasis',\n    'footnote',\n    'footnoteReference',\n    'image',\n    'imageReference',\n    'inlineCode',\n    'link',\n    'linkReference',\n    'strong',\n    'text'\n  ])\n)\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkBulletOrderedOther} from '../util/check-bullet-ordered-other.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? checkBulletOrderedOther(state)\n    : checkBulletOther(state)\n  const bulletLastUsed = state.bulletLastUsed\n  let useDifferentMarker = false\n\n  if (\n    parent &&\n    // Explicit `other` set.\n    (node.ordered\n      ? state.options.bulletOrderedOther\n      : state.options.bulletOther) &&\n    bulletLastUsed &&\n    bullet === bulletLastUsed\n  ) {\n    useDifferentMarker = true\n  }\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBulletOrdered} from './check-bullet-ordered.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrderedOther(state) {\n  const bulletOrdered = checkBulletOrdered(state)\n  const bulletOrderedOther = state.options.bulletOrderedOther\n\n  if (!bulletOrderedOther) {\n    return bulletOrdered === '.' ? ')' : '.'\n  }\n\n  if (bulletOrderedOther !== '.' && bulletOrderedOther !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOrderedOther +\n        '` for `options.bulletOrderedOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOrderedOther === bulletOrdered) {\n    throw new Error(\n      'Expected `bulletOrdered` (`' +\n        bulletOrdered +\n        '`) and `bulletOrderedOther` (`' +\n        bulletOrderedOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOrderedOther\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some((d) => phrasing(d))\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  // @ts-expect-error: `root`s are supposed to have one type of content\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\n/**\n * @param {Text} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('./types.js').Join} Join\n */\n\nimport {formatCodeAsIndented} from './util/format-code-as-indented.js'\nimport {formatHeadingAsSetext} from './util/format-heading-as-setext.js'\n\n/** @type {Array<Join>} */\nexport const join = [joinDefaults]\n\n/** @type {Join} */\nfunction joinDefaults(left, right, parent, state) {\n  // Indented code after list or another indented code.\n  if (\n    right.type === 'code' &&\n    formatCodeAsIndented(right, state) &&\n    (left.type === 'list' ||\n      (left.type === right.type && formatCodeAsIndented(left, state)))\n  ) {\n    return false\n  }\n\n  // Two lists with the same marker.\n  if (\n    left.type === 'list' &&\n    left.type === right.type &&\n    Boolean(left.ordered) === Boolean(right.ordered) &&\n    !(left.ordered\n      ? state.options.bulletOrderedOther\n      : state.options.bulletOther)\n  ) {\n    return false\n  }\n\n  // Join children of a list or an item.\n  // In which case, `parent` has a `spread` field.\n  if ('spread' in parent && typeof parent.spread === 'boolean') {\n    if (\n      left.type === 'paragraph' &&\n      // Two paragraphs.\n      (left.type === right.type ||\n        right.type === 'definition' ||\n        // Paragraph followed by a setext heading.\n        (right.type === 'heading' && formatHeadingAsSetext(right, state)))\n    ) {\n      return\n    }\n\n    return parent.spread ? 1 : 0\n  }\n}\n","/**\n * @typedef {import('./types.js').Unsafe} Unsafe\n * @typedef {import('./types.js').ConstructName} ConstructName\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain things like attention (emphasis, strong), images, or links.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * @type {Array<ConstructName>}\n */\nconst fullPhrasingSpans = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\n/** @type {Array<Unsafe>} */\nexport const unsafe = [\n  {character: '\\t', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: '\\t', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: '\\t',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  {\n    character: '\\r',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {\n    character: '\\n',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {character: ' ', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: ' ', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: ' ',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  // An exclamation mark can start an image, if it is followed by a link or\n  // a link reference.\n  {\n    character: '!',\n    after: '\\\\[',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A quote can break out of a title.\n  {character: '\"', inConstruct: 'titleQuote'},\n  // A number sign could start an ATX heading if it starts a line.\n  {atBreak: true, character: '#'},\n  {character: '#', inConstruct: 'headingAtx', after: '(?:[\\r\\n]|$)'},\n  // Dollar sign and percentage are not used in markdown.\n  // An ampersand could start a character reference.\n  {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},\n  // An apostrophe can break out of a title.\n  {character: \"'\", inConstruct: 'titleApostrophe'},\n  // A left paren could break out of a destination raw.\n  {character: '(', inConstruct: 'destinationRaw'},\n  // A left paren followed by `]` could make something into a link or image.\n  {\n    before: '\\\\]',\n    character: '(',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A right paren could start a list item or break out of a destination\n  // raw.\n  {atBreak: true, before: '\\\\d+', character: ')'},\n  {character: ')', inConstruct: 'destinationRaw'},\n  // An asterisk can start thematic breaks, list items, emphasis, strong.\n  {atBreak: true, character: '*', after: '(?:[ \\t\\r\\n*])'},\n  {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A plus sign could start a list item.\n  {atBreak: true, character: '+', after: '(?:[ \\t\\r\\n])'},\n  // A dash can start thematic breaks, list items, and setext heading\n  // underlines.\n  {atBreak: true, character: '-', after: '(?:[ \\t\\r\\n-])'},\n  // A dot could start a list item.\n  {atBreak: true, before: '\\\\d+', character: '.', after: '(?:[ \\t\\r\\n]|$)'},\n  // Slash, colon, and semicolon are not used in markdown for constructs.\n  // A less than can start html (flow or text) or an autolink.\n  // HTML could start with an exclamation mark (declaration, cdata, comment),\n  // slash (closing tag), question mark (instruction), or a letter (tag).\n  // An autolink also starts with a letter.\n  // Finally, it could break out of a destination literal.\n  {atBreak: true, character: '<', after: '[!/?A-Za-z]'},\n  {\n    character: '<',\n    after: '[!/?A-Za-z]',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  {character: '<', inConstruct: 'destinationLiteral'},\n  // An equals to can start setext heading underlines.\n  {atBreak: true, character: '='},\n  // A greater than can start block quotes and it can break out of a\n  // destination literal.\n  {atBreak: true, character: '>'},\n  {character: '>', inConstruct: 'destinationLiteral'},\n  // Question mark and at sign are not used in markdown for constructs.\n  // A left bracket can start definitions, references, labels,\n  {atBreak: true, character: '['},\n  {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  {character: '[', inConstruct: ['label', 'reference']},\n  // A backslash can start an escape (when followed by punctuation) or a\n  // hard break (when followed by an eol).\n  // Note: typical escapes are handled in `safe`!\n  {character: '\\\\', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  // A right bracket can exit labels.\n  {character: ']', inConstruct: ['label', 'reference']},\n  // Caret is not used in markdown for constructs.\n  // An underscore can start emphasis, strong, or a thematic break.\n  {atBreak: true, character: '_'},\n  {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A grave accent can start code (fenced or text), or it can break out of\n  // a grave accent code fence.\n  {atBreak: true, character: '`'},\n  {\n    character: '`',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\n  },\n  {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // Left brace, vertical bar, right brace are not used in markdown for\n  // constructs.\n  // A tilde can start code (fenced).\n  {atBreak: true, character: '~'}\n]\n","/**\n * @typedef {import('./types.js').Enter} Enter\n * @typedef {import('./types.js').Info} Info\n * @typedef {import('./types.js').Join} Join\n * @typedef {import('./types.js').FlowContent} FlowContent\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').PhrasingContent} PhrasingContent\n * @typedef {import('./types.js').SafeConfig} SafeConfig\n * @typedef {import('./types.js').State} State\n * @typedef {import('./types.js').TrackFields} TrackFields\n */\n\nimport {zwitch} from 'zwitch'\nimport {configure} from './configure.js'\nimport {handle as handlers} from './handle/index.js'\nimport {join} from './join.js'\nimport {unsafe} from './unsafe.js'\nimport {association} from './util/association.js'\nimport {containerPhrasing} from './util/container-phrasing.js'\nimport {containerFlow} from './util/container-flow.js'\nimport {indentLines} from './util/indent-lines.js'\nimport {safe} from './util/safe.js'\nimport {track} from './util/track.js'\n\n/**\n * Turn an mdast syntax tree into markdown.\n *\n * @param {Node} tree\n *   Tree to serialize.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized markdown representing `tree`.\n */\nexport function toMarkdown(tree, options = {}) {\n  /** @type {State} */\n  const state = {\n    enter,\n    indentLines,\n    associationId: association,\n    containerPhrasing: containerPhrasingBound,\n    containerFlow: containerFlowBound,\n    createTracker: track,\n    safe: safeBound,\n    stack: [],\n    unsafe: [],\n    join: [],\n    // @ts-expect-error: we’ll fill it next.\n    handlers: {},\n    options: {},\n    indexStack: [],\n    // @ts-expect-error: we’ll add `handle` later.\n    handle: undefined\n  }\n\n  configure(state, {unsafe, join, handlers})\n  configure(state, options)\n\n  if (state.options.tightDefinitions) {\n    configure(state, {join: [joinDefinition]})\n  }\n\n  state.handle = zwitch('type', {\n    invalid,\n    unknown,\n    handlers: state.handlers\n  })\n\n  let result = state.handle(tree, undefined, state, {\n    before: '\\n',\n    after: '\\n',\n    now: {line: 1, column: 1},\n    lineShift: 0\n  })\n\n  if (\n    result &&\n    result.charCodeAt(result.length - 1) !== 10 &&\n    result.charCodeAt(result.length - 1) !== 13\n  ) {\n    result += '\\n'\n  }\n\n  return result\n\n  /** @type {Enter} */\n  function enter(name) {\n    state.stack.push(name)\n    return exit\n\n    function exit() {\n      state.stack.pop()\n    }\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {never}\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * @param {unknown} node\n * @returns {never}\n */\nfunction unknown(node) {\n  // @ts-expect-error: fine.\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/** @type {Join} */\nfunction joinDefinition(left, right) {\n  // No blank line between adjacent definitions.\n  if (left.type === 'definition' && left.type === right.type) {\n    return 0\n  }\n}\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nfunction containerPhrasingBound(parent, info) {\n  return containerPhrasing(parent, this, info)\n}\n\n/**\n * Serialize the children of a parent that contains flow children.\n *\n * These children will typically be joined by blank lines.\n * What they are joined by exactly is defined by `Join` functions.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlowBound(parent, info) {\n  return containerFlow(parent, this, info)\n}\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {string | null | undefined} value\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nfunction safeBound(value, config) {\n  return safe(this, value, config)\n}\n","import {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkStringify from 'remark-stringify'\n\nexport const remark = unified().use(remarkParse).use(remarkStringify).freeze()\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownOptions\n * @typedef {Omit<ToMarkdownOptions, 'extensions'>} Options\n */\n\nimport {toMarkdown} from 'mdast-util-to-markdown'\n\n/** @type {import('unified').Plugin<[Options]|void[], Node, string>} */\nexport default function remarkStringify(options) {\n  /** @type {import('unified').CompilerFunction<Node, string>} */\n  const compiler = (tree) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return toMarkdown(\n      tree,\n      Object.assign({}, settings, options, {\n        // Note: this option is not in the readme.\n        // The goal is for it to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions:\n          /** @type {ToMarkdownOptions['extensions']} */ (\n            this.data('toMarkdownExtensions')\n          ) || []\n      })\n    )\n  }\n\n  Object.assign(this, {Compiler: compiler})\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","isBuffer","element","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","charCodeAt","inlineCode","node","_","state","sequence","index","test","unsafe","match","pattern","expression","atBreak","exec","position","slice","peek","listItem","parent","info","listItemIndent","checkListItemIndent","style","bullet","bulletCurrent","type","ordered","start","incrementListMarker","children","indexOf","size","spread","Math","ceil","tracker","createTracker","move","repeat","shift","exit","enter","indentLines","containerFlow","current","line","blank","association","label","identifier","checkBullet","marker","indexStack","results","push","child","handle","before","after","bulletLastUsed","undefined","between","left","right","join","result","pop","containerPhrasing","handlers","charAt","replace","eol","map","one","patternCompile","_compiled","character","patternInScope","stack","listInScope","inConstruct","notInConstruct","list","none","includes","safe","input","config","positions","infos","Boolean","sort","numerical","end","escapeBackslashes","encode","toUpperCase","a","b","whole","track","now","lineShift","column","chunks","split","tail","blankLine","tokenize","effects","ok","nok","code","partial","www","consume","w2","w3","dot","domain","hasUnderscoreInLastSegment","hasUnderscoreInLastLastSegment","check","namedCharacterReference","done","punctuationContinuation","punctuation","path","balance","inPath","continuedPunctuation","parenAtPathEnd","pathEnd","trailingPunctuation","inside","wwwAutolink","self","previousWww","previous","previousUnbalanced","events","attempt","httpAutolink","previousHttp","t1","t2","p","s","colon","slash1","slash2","emailAutolink","hasDot","hasDigitInLastSegment","gfmAtext","previousEmail","atext","dotContinuation","dashOrUnderscoreContinuation","afterDashOrUnderscore","gfmAutolinkLiteral","text","token","_balanced","_gfmAutolinkLiteralWalkedInto","gfmAutolinkLiteralHtml","literalAutolinkEmail","anchorFromToken","literalAutolinkHttp","literalAutolinkWww","protocol","url","sliceSerialize","tag","raw","indent","tokenizePotentialGfmFootnoteCall","labelStart","defined","parser","gfmFootnotes","id","resolveToPotentialGfmFootnoteCall","context","assign","offset","_bufferIndex","string","chunk","contentType","replacement","splice","tokenizeGfmFootnoteCall","data","callStart","callData","callEscape","tokenizeDefinitionStart","_container","labelAfter","labelEscape","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","own","gfmStrikethroughHtml","strikethrough","gfmTable","flow","null","seenDelimiter","hasDash","align","tableHeaderCount","_align","cellDividerHead","inCellContentHead","cellBreakHead","atRowEndHead","originalInterrupt","interrupt","tokenizeRowEnd","atDelimiterRowBreak","inWhitespaceHead","inCellContentEscapeHead","rowEndDelimiter","inWhitespaceDelimiter","inFillerDelimiter","afterLeftAlignment","afterRightAlignment","tableClose","nextPrefixedOrBlank","bodyStart","rowStartBody","cellDividerBody","inCellContentBody","cellBreakBody","tableBodyClose","inWhitespaceBody","inCellContentEscapeBody","prefixed","lazy","constructs","disable","_gfmTableDynamicInterruptHack","resolve","inHead","inDelimiterRow","inRow","contentStart","contentEnd","cellStart","seenCellInRow","content","cell","whitespace","alignment","center","gfmTableHtml","table","tableAlign","lineEndingIfNeeded","setData","tableBody","tableData","getData","buffer","tableHead","tableHeader","tableRow","codeTextData","tableColumn","resume","$0","$1","reFlow","reText","source","gfmTagfilterHtml","htmlFlowData","exitHtmlData","htmlTextData","filter","allowDangerousHtml","gfmTaskListItem","_gfmTasklistFirstContentOfListItem","close","spaceThenNonSpace","gfmTaskListItemHtml","taskListCheck","taskListCheckValueChecked","gfm","continuation","add","resolveTo","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","_close","resolveAll","open","nextEvents","insideSpan","attentionMarkers","gfmHtml","gfmFootnoteHtml","backLabel","clobberPrefix","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCallString","definitions","footnoteStack","tightStack","counter","calls","counts","safeId","toLowerCase","reuseCounter","String","referenceIndex","references","reference","injected","factorySpace","max","limit","Number","POSITIVE_INFINITY","prefix","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","markdownLineEnding","markdownSpace","unicodeWhitespace","unicodePunctuation","regex","fromCharCode","remove","items","parameters","chunkStart","from","unshift","apply","classifyCharacter","combineExtensions","extensions","all","syntaxExtension","extension","hook","maybe","existing","combineHtmlExtensions","htmlExtensions","htmlExtension","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decodeString","decode","$2","head","hex","characterReferences","normalizeIdentifier","called","sanitizeUri","normalizeUri","skip","next","encodeURIComponent","questionMark","numberSign","slash","subtokenize","event","lineIndex","otherIndex","otherEvent","subevents","jumps","_tokenizer","_isInFirstContentOfListItem","subcontent","eventIndex","stream","startPosition","startPositions","childEvents","gaps","adjust","breaks","sliceStream","defineSkip","write","protocolHref","protocolSrc","micromark","encoding","compile","tags","buffers","mediaStack","blockQuote","codeFenced","codeFencedFenceInfo","codeFencedFenceMeta","codeIndented","codeText","definition","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","htmlFlow","onenterhtml","htmlText","image","link","listItemMarker","onexitlistitem","listItemValue","listOrdered","_loose","listUnordered","paragraph","resource","destination","resourceDestinationString","resourceTitleString","setextHeading","strong","atxHeading","atxHeadingSequence","autolinkEmail","uri","autolinkProtocol","allowDangerousProtocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitflowcode","codeFencedFence","count","codeFlowValue","media","labelId","title","hardBreakEscape","onexithardbreak","hardBreakTrailing","onexithtml","onexitmedia","labelText","lineEnding","referenceString","referenceId","setextHeadingLineSequence","setextHeadingText","thematicBreak","concat","lineEndingStyle","defaultLineEnding","listStack","body","prepareList","atMarker","containerBalance","loose","handler","buf","postprocess","parse","preprocess","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","item","containerState","documentContinue","checkNewContainers","_closeFlow","point","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","eof","seen","entry","continuationConstruct","contentContinue","initial","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","notText","resolveAllLineSuffixes","extraResolver","tabs","bufferIndex","_index","initialSize","kind","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","factoryDestination","literalType","literalMarkerType","rawType","stringType","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","factoryTitle","atFirstTitleBreak","atTitleBreak","titleEscape","factoryWhitespace","titleConstruct","afterStartPrefix","afterPrefix","indentedContent","setextUnderline","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","nextBlankConstruct","closingFenceConstruct","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","numeric","characterEscape","labelEnd","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","group","destinationAfter","afterLabel","labelStartImage","attention","openingSequence","use","movePoint","labelStartLink","fenceOpenInside","headingBreak","startTag","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","htmlContinueStart","htmlLineEnd","continuationRawEndTag","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","returnState","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","declaration","commentStart","commentStartDash","comment","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","gap","tailExitIndex","headEnterIndex","create","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","serializeChunks","atTab","main","chunkIndex","go","sliceChunks","view","startIndex","startBufferIndex","endIndex","endBufferIndex","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","search","atCarriageReturn","endPosition","lastIndex","ccount","convert","castFactory","anyFactory","tests","checks","visitParents","tree","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","findAndReplace","find","settings","schema","RegExp","ignored","ignore","pairs","toPairs","toExpression","toFunction","pairIndex","grandparent","change","nodes","matchObject","global","gfmAutolinkLiteralFromMarkdown","transforms","findUrl","findEmail","literalAutolink","enterLiteralAutolinkValue","gfmAutolinkLiteralToMarkdown","isCorrectDomain","parts","splitUrl","trailExec","trail","closingParenIndex","openingParens","closingParens","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","safeOptions","subexit","footnoteDefinition","handleDelete","gfmStrikethroughFromMarkdown","canContainEols","gfmStrikethroughToMarkdown","delete","defaultStringLength","toAlignment","codePointAt","gfmTableFromMarkdown","d","enterCell","gfmTaskListItemFromMarkdown","exitCheck","taskListCheckValueUnchecked","checked","firstParaghraph","siblings","sibling","gfmTaskListItemToMarkdown","checkable","checkbox","remarkGfm","gfmFootnoteCall","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableAsData","handleTableRowAsData","tableCell","handleTableCell","matrix","markdownTable","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","lines","delimiterStart","delimiterEnd","bail","error","getPrototypeOf","Symbol","toStringTag","iterator","stringifyPosition","pos","VFileMessage","Error","reason","place","origin","message","fatal","ruleId","file","actual","expected","note","basename","ext","seenNonSlash","assertPath","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","segments","joined","normalize","absolute","normalizeString","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","order","VFile","prop","messages","history","stored","urlToPath","URL","getPathFromURLPosix","hostname","pathname","third","decodeURIComponent","assertNonEmpty","assertPart","stem","fail","part","unified","frozen","transformers","trough","fns","pipeline","run","values","middlewareIndex","callback","output","fn","wrap","middleware","fnExpectsCallback","Promise","then","middelware","attachers","namespace","freezeIndex","processor","assertUnfrozen","Parser","Compiler","freeze","attacher","transformer","addPlugin","addList","addPreset","plugins","plugin","doc","vfile","assertParser","newable","assertCompiler","assertNode","executor","reject","runSync","complete","assertDone","process","processSync","keys","asyncName","looksLikeAVFile","includeImageAlt","alt","defaultOnError","hardBreak","_1","formatCodeAsIndented","fences","lang","checkQuote","quote","checkEmphasis","formatHeadingAsSetext","literalWithBreak","depth","setext","html","suffix","imageReference","referenceType","associationId","formatLinkAsAutolink","resourceLink","linkReference","checkBulletOrdered","bulletOrdered","checkRule","rule","phrasing","checkStrong","blockquote","break","checkFence","fence","longestStreak","substring","rank","min","closeAtx","bulletOther","checkBulletOrderedOther","bulletOrderedOther","checkBulletOther","useDifferentMarker","firstListItem","root","hasPhrasing","some","ruleSpaces","checkRuleRepetition","repetition","ruleRepetition","fullPhrasingSpans","invalid","unknown","joinDefinition","containerPhrasingBound","containerFlowBound","safeBound","remark","mdastExtensions","compiler","autolink","opener","onenterdata","codeFlow","_spread","ancestor","closer","fragment","configure","combined","tokenStack","firstBlankLineIndex","listSpread","tailIndex","tailEvent","and","errorHandler","onExitError","toMarkdown","tightDefinitions","zwitch"],"sourceRoot":""}
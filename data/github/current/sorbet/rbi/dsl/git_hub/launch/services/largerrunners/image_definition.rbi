# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Services::Largerrunners::ImageDefinition`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Services::Largerrunners::ImageDefinition`.

class GitHub::Launch::Services::Largerrunners::ImageDefinition
  sig do
    params(
      id: T.nilable(Integer),
      latestVersion: T.nilable(Google::Protobuf::StringValue),
      name: T.nilable(String),
      osType: T.nilable(T.any(Symbol, Integer)),
      platform: T.nilable(String),
      state: T.nilable(T.any(Symbol, Integer)),
      totalVersionsSize: T.nilable(Integer),
      versionCount: T.nilable(Integer)
    ).void
  end
  def initialize(id: nil, latestVersion: nil, name: nil, osType: nil, platform: nil, state: nil, totalVersionsSize: nil, versionCount: nil); end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_latestVersion; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_osType; end

  sig { void }
  def clear_platform; end

  sig { void }
  def clear_state; end

  sig { void }
  def clear_totalVersionsSize; end

  sig { void }
  def clear_versionCount; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def latestVersion; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def latestVersion=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def osType; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def osType=(value); end

  sig { returns(String) }
  def platform; end

  sig { params(value: String).void }
  def platform=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def state=(value); end

  sig { returns(Integer) }
  def totalVersionsSize; end

  sig { params(value: Integer).void }
  def totalVersionsSize=(value); end

  sig { returns(Integer) }
  def versionCount; end

  sig { params(value: Integer).void }
  def versionCount=(value); end
end

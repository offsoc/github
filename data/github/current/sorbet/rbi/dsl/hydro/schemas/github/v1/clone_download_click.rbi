# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::CloneDownloadClick`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::CloneDownloadClick`.

class Hydro::Schemas::Github::V1::CloneDownloadClick
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      feature_clicked: T.nilable(T.any(Symbol, Integer)),
      gist: T.nilable(Hydro::Schemas::Github::V1::Entities::Gist),
      git_repository_type: T.nilable(T.any(Symbol, Integer)),
      owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, feature_clicked: nil, gist: nil, git_repository_type: nil, owner: nil, repository: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_feature_clicked; end

  sig { void }
  def clear_gist; end

  sig { void }
  def clear_git_repository_type; end

  sig { void }
  def clear_owner; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.any(Symbol, Integer)) }
  def feature_clicked; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def feature_clicked=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Gist)) }
  def gist; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Gist)).void }
  def gist=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def git_repository_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def git_repository_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

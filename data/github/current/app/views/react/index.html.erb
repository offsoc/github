<%
  show_announcements = local_assigns.fetch(:show_announcements, false)
  show_archived = local_assigns.fetch(:show_archived, false)
%>

<% content_for :preloads do %>
  <%# Preload the app's payload %>
  <% if lazy %><link rel="preload" href="<%= initial_path %>" as="fetch" type="application/json"><% end %>
<% end %>

<% content_for :scripts do %><%# erblint:disable NoContentForScripts %>
  <%= javascript_bundle javascript_bundle_name %>
<% end %>

<%
  page_info title: title, **page_data
%>

<% content_for :head do %>
  <%# We want to alway re-fetch react pages when they are accessed via turbo %>
  <meta name="turbo-cache-control" content="no-cache" data-turbo-transient>
  <% if page_data[:send_vitals].present? %>
    <meta data-hydrostats="publish">
  <% end %>
<% end %>

<% if show_archived %>
  <% if current_repository&.archived? %>
    <%= render Repositories::ArchivedNoticeComponent.new(repository: current_repository) %>
  <% end %>
<% end %>

<% if show_announcements %>
  <%= render(Site::EnterpriseBannersComponent.new) %>
<% end %>

<%# Sometimes, the app will be rendered via a Turbo Frame navigation. IF that's the case, we need to render the necessary %>
<%# <turbo-frame> to make Turbo behave correctly and replace the old content with the react app %>
<% if turbo_frame_request? && turbo.present? %><turbo-frame id="<%= turbo[:id] %>" target="<%= turbo[:target] %>" data-turbo-action="<%= turbo[:action] %>" class="<% turbo[:class] %>"><% end %>

<%# NOTE: we cannot have any whitespace text nodes within the react-app element because that would cause a react hydration warning. %>
<react-app
  app-name="<%= javascript_bundle_name %>"
  initial-path="<%= initial_path %>"
  style="display: block; min-height: calc(100vh - 64px)" <%# The min header height is 64px %>
  data-ssr="<%= ssr %>"
  data-lazy="<%= lazy %>"
  data-alternate="false"
>
  <%= ssr_error_script_tag %>
  <%= data_script_tag %>
  <%= react_root_tag %>
</react-app>
<% if turbo.present? %></turbo-frame><% end %>

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails`.

class Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails
  sig do
    params(
      copilot_user_settings: T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotSettings),
      enterprise_organization_name: T.nilable(String),
      enterprise_user_type: T.nilable(T.any(Symbol, Integer)),
      free_access_type: T.nilable(String),
      free_user_type: T.nilable(T.any(Symbol, Integer)),
      is_enterprise_org_user: T.nilable(T::Boolean),
      is_technical_preview_user: T.nilable(T::Boolean),
      is_trial: T.nilable(T::Boolean),
      subscription_plan: T.nilable(T.any(Symbol, Integer)),
      trust_tier: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(copilot_user_settings: nil, enterprise_organization_name: nil, enterprise_user_type: nil, free_access_type: nil, free_user_type: nil, is_enterprise_org_user: nil, is_technical_preview_user: nil, is_trial: nil, subscription_plan: nil, trust_tier: nil); end

  sig { void }
  def clear_copilot_user_settings; end

  sig { void }
  def clear_enterprise_organization_name; end

  sig { void }
  def clear_enterprise_user_type; end

  sig { void }
  def clear_free_access_type; end

  sig { void }
  def clear_free_user_type; end

  sig { void }
  def clear_is_enterprise_org_user; end

  sig { void }
  def clear_is_technical_preview_user; end

  sig { void }
  def clear_is_trial; end

  sig { void }
  def clear_subscription_plan; end

  sig { void }
  def clear_trust_tier; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotSettings)) }
  def copilot_user_settings; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotSettings)).void }
  def copilot_user_settings=(value); end

  sig { returns(String) }
  def enterprise_organization_name; end

  sig { params(value: String).void }
  def enterprise_organization_name=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def enterprise_user_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def enterprise_user_type=(value); end

  sig { returns(String) }
  def free_access_type; end

  sig { params(value: String).void }
  def free_access_type=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def free_user_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def free_user_type=(value); end

  sig { returns(T::Boolean) }
  def is_enterprise_org_user; end

  sig { params(value: T::Boolean).void }
  def is_enterprise_org_user=(value); end

  sig { returns(T::Boolean) }
  def is_technical_preview_user; end

  sig { params(value: T::Boolean).void }
  def is_technical_preview_user=(value); end

  sig { returns(T::Boolean) }
  def is_trial; end

  sig { params(value: T::Boolean).void }
  def is_trial=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def subscription_plan; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def subscription_plan=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def trust_tier; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def trust_tier=(value); end
end

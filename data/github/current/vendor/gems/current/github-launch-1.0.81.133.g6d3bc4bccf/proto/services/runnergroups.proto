syntax = "proto3";
package git_hub.launch.services.runnergroups;

option go_package = "github.com/github/launch/services/deploy/runnergroups";

import "pbtypes/github.proto";
import "services/selfhostedrunners.proto";
import "services/runnerscalesets.proto";

service RunnerGroups {
    rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse);
    rpc GetGroup(GetGroupRequest) returns (GetGroupResponse);
    rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);
    rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse);
    rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse);
    rpc UpdateRunners(UpdateRunnersRequest) returns (UpdateRunnersResponse);
    rpc AddRunners(AddRunnersRequest) returns (AddRunnersResponse);
    rpc RemoveRunner(RemoveRunnerRequest) returns (RemoveRunnerResponse);
    rpc UpdateTargets(UpdateTargetsRequest) returns (UpdateTargetsResponse);
    rpc AddTarget(AddTargetRequest) returns (AddTargetResponse);
    rpc RemoveTarget(RemoveTargetRequest) returns (RemoveTargetResponse);
}

message RunnerGroup {
    int64 id = 1;
    string name = 2;
    int64 size = 3;
    pbtypes.git_hub.Identity owner_id = 4;
    repeated services.selfhostedrunners.Runner runners = 5;
    Visibility visibility = 6;
    repeated pbtypes.git_hub.Identity selected_targets = 7;
    bool is_default = 8;
    bool allow_public = 9;
    bool inherited_allow_public = 10;
    bool is_hosted= 11;
    repeated string selected_workflow_refs = 12;
    bool restricted_to_workflows = 13;
    bool workflow_restrictions_read_only = 14;
    repeated services.runnerscalesets.RunnerScaleSet runner_scale_sets = 15;
    int64 owner_group_id = 16;
}

enum Visibility {
    ALL = 0;
    PRIVATE = 1;
    SELECTED = 2;
}

enum UpdateVisibility {
    UNKNOWN = 0;
    UPDATE_ALL = 1;
    UPDATE_PRIVATE = 2;
    UPDATE_SELECTED = 3;
}

enum UpdateAllowPublic {
    ALLOW_PUBLIC_UNKNOWN = 0;
    ALLOW_PUBLIC_ALLOW = 1;
    ALLOW_PUBLIC_DENY = 2;
}

enum UpdateRestrictedToWorkflows {
    RESTRICTED_TO_WORKFLOWS_UNKNOWN = 0;
    RESTRICTED_TO_WORKFLOWS_RESTRICTED = 1;
    RESTRICTED_TO_WORKFLOWS_UNRESTRICTED = 2;
}

message ListGroupsRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    pbtypes.git_hub.Identity plan_owner_id = 2;
    bool include_runners = 3;
    bool is_enterprise_owner = 4;
    bool include_hosted_runner_groups = 5;
    bool exclude_elastic_runners = 6;
    bool include_runner_scale_sets = 7;
}

message ListGroupsResponse {
    repeated RunnerGroup runner_groups = 1;
}

message GetGroupRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    int64 group_id = 2;
    bool include_runners = 3;
    bool is_enterprise_owner = 4;
    pbtypes.git_hub.Identity plan_owner_id = 5;
    bool include_hosted_runner_groups = 6;
    bool exclude_elastic_runners = 7;
    bool include_runner_scale_sets = 8;
}

message DeleteGroupRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    int64 group_id = 2;
}

message DeleteGroupResponse {
    string status = 1;
}

message GetGroupResponse {
    RunnerGroup runner_group = 1;
}

message CreateGroupRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    string name = 2;
    repeated int64 runner_ids = 3;
    Visibility visibility = 4;
    repeated pbtypes.git_hub.Identity selected_targets = 5;
    bool allow_public = 6;
    repeated string selected_workflow_refs = 7;
    bool restricted_to_workflows = 8;
}

message CreateGroupResponse {
    RunnerGroup runner_group = 1;
}

message UpdateGroupRequest {
    reserved 5;

    pbtypes.git_hub.Identity owner_id = 1;
    int64 group_id = 2;
    string name = 3;
    repeated int64 runner_ids = 4;
    repeated pbtypes.git_hub.Identity selected_targets = 6;
    pbtypes.git_hub.Identity plan_owner_id = 7;
    UpdateVisibility update_visibility = 8;
    UpdateAllowPublic allow_public = 9;
    repeated string selected_workflow_refs = 10;
    UpdateRestrictedToWorkflows restricted_to_workflows = 11;
}

message UpdateGroupResponse {
    RunnerGroup runner_group = 1;
}

message UpdateRunnersRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    int64 group_id = 2;
    repeated int64 runner_ids = 3;
    bool is_enterprise_owner = 7;
}

message UpdateRunnersResponse {
    RunnerGroup runner_group = 1;
}

message AddRunnersRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    int64 group_id = 2;
    repeated int64 runner_ids = 3;
}

message AddRunnersResponse {
    RunnerGroup runner_group = 1;
}

message RemoveRunnerRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    int64 group_id = 2;
    int64 runner_id = 3;
}

message RemoveRunnerResponse {
    RunnerGroup runner_group = 1;
}

message UpdateTargetsRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    int64 group_id = 2;
    repeated pbtypes.git_hub.Identity target_ids = 3;
}

message UpdateTargetsResponse {
    reserved 1;

    repeated pbtypes.git_hub.Identity target_ids = 2;
}

message AddTargetRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    int64 group_id = 2;
    pbtypes.git_hub.Identity target_id = 3;
}

message AddTargetResponse {
    reserved 1;

    repeated pbtypes.git_hub.Identity target_ids = 2;
}

message RemoveTargetRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    int64 group_id = 2;
    pbtypes.git_hub.Identity target_id = 3;
}

message RemoveTargetResponse {
    reserved 1;

    repeated pbtypes.git_hub.Identity target_ids = 2;
}

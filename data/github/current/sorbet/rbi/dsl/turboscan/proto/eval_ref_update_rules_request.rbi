# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Turboscan::Proto::EvalRefUpdateRulesRequest`.
# Please instead update this file by running `bin/tapioca dsl Turboscan::Proto::EvalRefUpdateRulesRequest`.

class Turboscan::Proto::EvalRefUpdateRulesRequest
  sig do
    params(
      base_ref_bytes: T.nilable(String),
      file_changes: T.nilable(T.any(Google::Protobuf::RepeatedField[Turboscan::Proto::FileChange], T::Array[Turboscan::Proto::FileChange])),
      head_commit_oid: T.nilable(String),
      is_dependabot: T.nilable(T::Boolean),
      merge_commit_oid: T.nilable(String),
      repository_id: T.nilable(Integer),
      rule_configs: T.nilable(T.any(Google::Protobuf::RepeatedField[Turboscan::Proto::EvalRefUpdateRulesRequest::RuleConfig], T::Array[Turboscan::Proto::EvalRefUpdateRulesRequest::RuleConfig]))
    ).void
  end
  def initialize(base_ref_bytes: nil, file_changes: T.unsafe(nil), head_commit_oid: nil, is_dependabot: nil, merge_commit_oid: nil, repository_id: nil, rule_configs: T.unsafe(nil)); end

  sig { returns(String) }
  def base_ref_bytes; end

  sig { params(value: String).void }
  def base_ref_bytes=(value); end

  sig { void }
  def clear_base_ref_bytes; end

  sig { void }
  def clear_file_changes; end

  sig { void }
  def clear_head_commit_oid; end

  sig { void }
  def clear_is_dependabot; end

  sig { void }
  def clear_merge_commit_oid; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_rule_configs; end

  sig { returns(Google::Protobuf::RepeatedField[Turboscan::Proto::FileChange]) }
  def file_changes; end

  sig { params(value: Google::Protobuf::RepeatedField[Turboscan::Proto::FileChange]).void }
  def file_changes=(value); end

  sig { returns(String) }
  def head_commit_oid; end

  sig { params(value: String).void }
  def head_commit_oid=(value); end

  sig { returns(T::Boolean) }
  def is_dependabot; end

  sig { params(value: T::Boolean).void }
  def is_dependabot=(value); end

  sig { returns(String) }
  def merge_commit_oid; end

  sig { params(value: String).void }
  def merge_commit_oid=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Turboscan::Proto::EvalRefUpdateRulesRequest::RuleConfig]) }
  def rule_configs; end

  sig { params(value: Google::Protobuf::RepeatedField[Turboscan::Proto::EvalRefUpdateRulesRequest::RuleConfig]).void }
  def rule_configs=(value); end
end

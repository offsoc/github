# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Api::App::PlatformTypes::CrossReferencedEvent`.
# Please instead update this file by running `bin/tapioca dsl Api::App::PlatformTypes::CrossReferencedEvent`.

class Api::App::PlatformTypes::CrossReferencedEvent < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def actor; end

  sig { returns(T::Boolean) }
  def actor?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def created_at; end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(Integer)) }
  def database_id; end

  sig { returns(T::Boolean) }
  def database_id?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def full_database_id; end

  sig { returns(T::Boolean) }
  def full_database_id?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T::Boolean) }
  def is_cross_repository; end

  sig { returns(T::Boolean) }
  def is_cross_repository?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def referenced_at; end

  sig { returns(T::Boolean) }
  def referenced_at?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def resource_path; end

  sig { returns(T::Boolean) }
  def resource_path?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def safe_actor; end

  sig { returns(T::Boolean) }
  def safe_actor?; end

  sig { returns(T.any(Api::App::PlatformTypes::Issue, Api::App::PlatformTypes::PullRequest)) }
  def source; end

  sig { returns(T::Boolean) }
  def source?; end

  sig { returns(T.any(Api::App::PlatformTypes::Issue, Api::App::PlatformTypes::PullRequest)) }
  def target; end

  sig { returns(T::Boolean) }
  def target?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def url; end

  sig { returns(T::Boolean) }
  def url?; end

  sig { returns(T::Boolean) }
  def will_close_target; end

  sig { returns(T::Boolean) }
  def will_close_target?; end
end

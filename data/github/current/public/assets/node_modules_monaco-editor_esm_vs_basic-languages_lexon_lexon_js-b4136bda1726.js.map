{"version":3,"file":"chunk-node_modules_monaco-editor_esm_vs_basic-languages_lexon_lexon_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.49.0(383fdf3fc0e1e1a024068b8d0fd4f3dcbae74d04)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n    // blockComment: ['COMMENT', '.'],\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \":\", close: \".\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: \":\", close: \".\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  // defaultToken: 'invalid',\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\n    \"lexon\",\n    \"lex\",\n    \"clause\",\n    \"terms\",\n    \"contracts\",\n    \"may\",\n    \"pay\",\n    \"pays\",\n    \"appoints\",\n    \"into\",\n    \"to\"\n  ],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\n    \"less\",\n    \"greater\",\n    \"equal\",\n    \"le\",\n    \"gt\",\n    \"or\",\n    \"and\",\n    \"add\",\n    \"added\",\n    \"subtract\",\n    \"subtracted\",\n    \"multiply\",\n    \"multiplied\",\n    \"times\",\n    \"divide\",\n    \"divided\",\n    \"is\",\n    \"be\",\n    \"certified\"\n  ],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // comment\n      [/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]],\n      // special identifier cases\n      [\n        /\"/,\n        {\n          token: \"identifier.quote\",\n          bracket: \"@open\",\n          next: \"@quoted_identifier\"\n        }\n      ],\n      [\n        \"LEX$\",\n        {\n          token: \"keyword\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\"LEXON\", { token: \"keyword\", bracket: \"@open\", next: \"@semver\" }],\n      [\n        \":\",\n        {\n          token: \"delimiter\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      // identifiers and keywords\n      [\n        /[a-z_$][\\w$]*/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@typeKeywords\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      // whitespace\n      { include: \"@whitespace\" },\n      // delimiters and operators\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/@symbols/, \"delimiter\"],\n      // numbers\n      [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/\\d+/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"]\n    ],\n    quoted_identifier: [\n      [/[^\\\\\"]+/, \"identifier\"],\n      [/\"/, { token: \"identifier.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    space_identifier_until_period: [\n      [\":\", \"delimiter\"],\n      [\" \", { token: \"white\", next: \"@identifier_rest\" }]\n    ],\n    identifier_until_period: [\n      { include: \"@whitespace\" },\n      [\":\", { token: \"delimiter\", next: \"@identifier_rest\" }],\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    identifier_rest: [\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    semver: [\n      { include: \"@whitespace\" },\n      [\":\", \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, { token: \"number.semver\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","end","language","tokenPostfix","ignoreCase","keywords","typeKeywords","operators","symbols","tokenizer","root","token","bracket","next","cases","include","quoted_identifier","space_identifier_until_period","identifier_until_period","identifier_rest","semver","whitespace"],"sourceRoot":""}
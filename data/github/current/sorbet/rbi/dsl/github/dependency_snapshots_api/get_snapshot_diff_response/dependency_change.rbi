# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Github::DependencySnapshotsApi::GetSnapshotDiffResponse::DependencyChange`.
# Please instead update this file by running `bin/tapioca dsl Github::DependencySnapshotsApi::GetSnapshotDiffResponse::DependencyChange`.

class Github::DependencySnapshotsApi::GetSnapshotDiffResponse::DependencyChange
  sig do
    params(
      change_type: T.nilable(T.any(Symbol, Integer)),
      ecosystem: T.nilable(String),
      manifest: T.nilable(String),
      name: T.nilable(String),
      package_url: T.nilable(String),
      scope: T.nilable(T.any(Symbol, Integer)),
      snapshot_metadata: T.nilable(Github::DependencySnapshotsApi::GetSnapshotDiffResponse::SnapshotMetadata),
      version: T.nilable(String)
    ).void
  end
  def initialize(change_type: nil, ecosystem: nil, manifest: nil, name: nil, package_url: nil, scope: nil, snapshot_metadata: nil, version: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def change_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def change_type=(value); end

  sig { void }
  def clear_change_type; end

  sig { void }
  def clear_ecosystem; end

  sig { void }
  def clear_manifest; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_package_url; end

  sig { void }
  def clear_scope; end

  sig { void }
  def clear_snapshot_metadata; end

  sig { void }
  def clear_version; end

  sig { returns(String) }
  def ecosystem; end

  sig { params(value: String).void }
  def ecosystem=(value); end

  sig { returns(String) }
  def manifest; end

  sig { params(value: String).void }
  def manifest=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(String) }
  def package_url; end

  sig { params(value: String).void }
  def package_url=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def scope; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def scope=(value); end

  sig { returns(T.nilable(Github::DependencySnapshotsApi::GetSnapshotDiffResponse::SnapshotMetadata)) }
  def snapshot_metadata; end

  sig { params(value: T.nilable(Github::DependencySnapshotsApi::GetSnapshotDiffResponse::SnapshotMetadata)).void }
  def snapshot_metadata=(value); end

  sig { returns(String) }
  def version; end

  sig { params(value: String).void }
  def version=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Billing::BillingTransaction::LineItem`.
# Please instead update this file by running `bin/tapioca dsl Billing::BillingTransaction::LineItem`.

class Billing::BillingTransaction::LineItem
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def listing_types; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def subscribable_types; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::BillingTransaction::LineItem).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction::LineItem).void)
      ).returns(::Billing::BillingTransaction::LineItem)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction::LineItem).void)
      ).returns(::Billing::BillingTransaction::LineItem)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction::LineItem).void)
      ).returns(::Billing::BillingTransaction::LineItem)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction::LineItem).void)
      ).returns(::Billing::BillingTransaction::LineItem)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction::LineItem).void)
      ).returns(::Billing::BillingTransaction::LineItem)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Billing::BillingTransaction::LineItem]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Billing::BillingTransaction::LineItem)) }
    def fifth; end

    sig { returns(::Billing::BillingTransaction::LineItem) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Billing::BillingTransaction::LineItem)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Billing::BillingTransaction::LineItem) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction::LineItem).void)
      ).returns(T.nilable(T::Enumerator[::Billing::BillingTransaction::LineItem]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Billing::BillingTransaction::LineItem]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Billing::BillingTransaction::LineItem]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction::LineItem).void)
      ).returns(::Billing::BillingTransaction::LineItem)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction::LineItem).void)
      ).returns(::Billing::BillingTransaction::LineItem)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction::LineItem).void)
      ).returns(::Billing::BillingTransaction::LineItem)
    end
    def find_or_initialize_by(attributes, &block); end

    sig do
      params(
        signed_id: T.untyped,
        purpose: T.untyped
      ).returns(T.nilable(::Billing::BillingTransaction::LineItem))
    end
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Billing::BillingTransaction::LineItem) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Billing::BillingTransaction::LineItem) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Billing::BillingTransaction::LineItem) }
    def first!; end

    sig { returns(T.nilable(::Billing::BillingTransaction::LineItem)) }
    def forty_two; end

    sig { returns(::Billing::BillingTransaction::LineItem) }
    def forty_two!; end

    sig { returns(T.nilable(::Billing::BillingTransaction::LineItem)) }
    def fourth; end

    sig { returns(::Billing::BillingTransaction::LineItem) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Billing::BillingTransaction::LineItem) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::BillingTransaction::LineItem).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction::LineItem).void)
      ).returns(::Billing::BillingTransaction::LineItem)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::BillingTransaction::LineItem).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::BillingTransaction::LineItem).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Billing::BillingTransaction::LineItem)) }
    def second; end

    sig { returns(::Billing::BillingTransaction::LineItem) }
    def second!; end

    sig { returns(T.nilable(::Billing::BillingTransaction::LineItem)) }
    def second_to_last; end

    sig { returns(::Billing::BillingTransaction::LineItem) }
    def second_to_last!; end

    sig { returns(::Billing::BillingTransaction::LineItem) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Billing::BillingTransaction::LineItem) }
    def take!; end

    sig { returns(T.nilable(::Billing::BillingTransaction::LineItem)) }
    def third; end

    sig { returns(::Billing::BillingTransaction::LineItem) }
    def third!; end

    sig { returns(T.nilable(::Billing::BillingTransaction::LineItem)) }
    def third_to_last; end

    sig { returns(::Billing::BillingTransaction::LineItem) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def listing_Marketplace_Listing!; end

    sig { returns(T::Boolean) }
    def listing_Marketplace_Listing?; end

    sig { void }
    def listing_SponsorsListing!; end

    sig { returns(T::Boolean) }
    def listing_SponsorsListing?; end

    sig { void }
    def subscribable_Billing_ProductUUID!; end

    sig { returns(T::Boolean) }
    def subscribable_Billing_ProductUUID?; end

    sig { void }
    def subscribable_Marketplace_ListingPlan!; end

    sig { returns(T::Boolean) }
    def subscribable_Marketplace_ListingPlan?; end

    sig { void }
    def subscribable_SponsorsTier!; end

    sig { returns(T::Boolean) }
    def subscribable_SponsorsTier?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def billing_transaction; end

    sig { params(value: T.nilable(::Billing::BillingTransaction)).void }
    def billing_transaction=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction) }
    def build_billing_transaction(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::ListingPlan) }
    def build_marketplace_listing_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def build_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::ProductUUID) }
    def build_product_uuid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def build_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsTier) }
    def build_sponsors_tier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Sponsorship) }
    def build_sponsorship(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction) }
    def create_billing_transaction(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction) }
    def create_billing_transaction!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::ListingPlan) }
    def create_marketplace_listing_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::ListingPlan) }
    def create_marketplace_listing_plan!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_plan_subscription!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::ProductUUID) }
    def create_product_uuid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::ProductUUID) }
    def create_product_uuid!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_sponsors_listing!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsTier) }
    def create_sponsors_tier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsTier) }
    def create_sponsors_tier!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Sponsorship) }
    def create_sponsorship(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Sponsorship) }
    def create_sponsorship!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T.untyped) }
    def listing; end

    sig { params(value: T.untyped).void }
    def listing=(value); end

    sig { returns(T.nilable(::Marketplace::ListingPlan)) }
    def marketplace_listing_plan; end

    sig { params(value: T.nilable(::Marketplace::ListingPlan)).void }
    def marketplace_listing_plan=(value); end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def plan_subscription; end

    sig { params(value: T.nilable(::Billing::PlanSubscription)).void }
    def plan_subscription=(value); end

    sig { returns(T.nilable(::Billing::ProductUUID)) }
    def product_uuid; end

    sig { params(value: T.nilable(::Billing::ProductUUID)).void }
    def product_uuid=(value); end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def reload_billing_transaction; end

    sig { returns(T.untyped) }
    def reload_listing; end

    sig { returns(T.nilable(::Marketplace::ListingPlan)) }
    def reload_marketplace_listing_plan; end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def reload_plan_subscription; end

    sig { returns(T.nilable(::Billing::ProductUUID)) }
    def reload_product_uuid; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def reload_sponsors_listing; end

    sig { returns(T.nilable(::SponsorsTier)) }
    def reload_sponsors_tier; end

    sig { returns(T.nilable(::Sponsorship)) }
    def reload_sponsorship; end

    sig { returns(T.untyped) }
    def reload_subscribable; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def sponsors_listing; end

    sig { params(value: T.nilable(::SponsorsListing)).void }
    def sponsors_listing=(value); end

    sig { returns(T.nilable(::SponsorsTier)) }
    def sponsors_tier; end

    sig { params(value: T.nilable(::SponsorsTier)).void }
    def sponsors_tier=(value); end

    sig { returns(T.nilable(::Sponsorship)) }
    def sponsorship; end

    sig { params(value: T.nilable(::Sponsorship)).void }
    def sponsorship=(value); end

    sig { returns(T.untyped) }
    def subscribable; end

    sig { params(value: T.untyped).void }
    def subscribable=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tax_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tax_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Billing::BillingTransaction::LineItem` class because it declared `has_many :tax_items`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::BillingTransaction::TaxItem::PrivateCollectionProxy) }
    def tax_items; end

    sig { params(value: T::Enumerable[::Billing::BillingTransaction::TaxItem]).void }
    def tax_items=(value); end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def actions_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active_service_period(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def advanced_security(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def before_line_item(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def codespaces_compute_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def codespaces_storage_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def codespaces_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def copilot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def copilot_for_business_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_at_or_after(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_between(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_during(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_sponsors_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_subscribable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_subscribable_and_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_subscribable_id_and_amount_in_cents(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def github(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def listing_Marketplace_Listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def listing_SponsorsListing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def marketplace(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def metered_copilot_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_listing_Marketplace_Listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_listing_SponsorsListing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_subscribable_Billing_ProductUUID(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_subscribable_Marketplace_ListingPlan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_subscribable_SponsorsTier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def packages_data_transfer_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def paying_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def product_uuids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def shared_storage_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sponsorships(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sponsorships_excluding_prorated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def subscribable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def subscribable_Billing_ProductUUID(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def subscribable_Marketplace_ListingPlan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def subscribable_SponsorsTier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def successful(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def transaction_created_at_or_after(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def transaction_created_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_billing_transaction; end

    sig { returns(Promise[T.untyped]) }
    def async_listing; end

    sig { returns(Promise[T.untyped]) }
    def async_marketplace_listing_plan; end

    sig { returns(Promise[T.untyped]) }
    def async_plan_subscription; end

    sig { returns(Promise[T.untyped]) }
    def async_product_uuid; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_listing; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_tier; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorship; end

    sig { returns(Promise[T.untyped]) }
    def async_subscribable; end

    sig { returns(Promise[T.untyped]) }
    def async_tax_items; end

    sig { returns(Promise[T.untyped]) }
    def async_user; end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def amount_in_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def amount_in_cents=(value); end

    sig { returns(T::Boolean) }
    def amount_in_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_cents_before_last_save; end

    sig { returns(T.untyped) }
    def amount_in_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def amount_in_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def amount_in_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def amount_in_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def amount_in_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def amount_in_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def amount_in_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_cents_was; end

    sig { void }
    def amount_in_cents_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def arr_in_cents; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def arr_in_cents=(value); end

    sig { returns(T::Boolean) }
    def arr_in_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def arr_in_cents_before_last_save; end

    sig { returns(T.untyped) }
    def arr_in_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def arr_in_cents_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def arr_in_cents_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def arr_in_cents_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def arr_in_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def arr_in_cents_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def arr_in_cents_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def arr_in_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def arr_in_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def arr_in_cents_was; end

    sig { void }
    def arr_in_cents_will_change!; end

    sig { returns(::Integer) }
    def billing_transaction_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def billing_transaction_id=(value); end

    sig { returns(T::Boolean) }
    def billing_transaction_id?; end

    sig { returns(T.nilable(::Integer)) }
    def billing_transaction_id_before_last_save; end

    sig { returns(T.untyped) }
    def billing_transaction_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_transaction_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def billing_transaction_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def billing_transaction_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def billing_transaction_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def billing_transaction_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def billing_transaction_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def billing_transaction_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def billing_transaction_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def billing_transaction_id_was; end

    sig { void }
    def billing_transaction_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::String) }
    def description; end

    sig { params(value: ::String).returns(::String) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def description_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def description_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def description_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.untyped) }
    def extras; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def extras=(value); end

    sig { returns(T::Boolean) }
    def extras?; end

    sig { returns(T.untyped) }
    def extras_before_last_save; end

    sig { returns(T.untyped) }
    def extras_before_type_cast; end

    sig { returns(T::Boolean) }
    def extras_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def extras_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def extras_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def extras_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def extras_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def extras_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def extras_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def extras_previously_was; end

    sig { returns(T.untyped) }
    def extras_was; end

    sig { void }
    def extras_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def listing_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def listing_id=(value); end

    sig { returns(T::Boolean) }
    def listing_id?; end

    sig { returns(T.nilable(::Integer)) }
    def listing_id_before_last_save; end

    sig { returns(T.untyped) }
    def listing_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def listing_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def listing_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def listing_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def listing_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def listing_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def listing_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def listing_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def listing_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def listing_id_was; end

    sig { void }
    def listing_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def listing_type; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def listing_type=(value); end

    sig { returns(T::Boolean) }
    def listing_type?; end

    sig { returns(T.nilable(::String)) }
    def listing_type_before_last_save; end

    sig { returns(T.untyped) }
    def listing_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def listing_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def listing_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def listing_type_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def listing_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def listing_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def listing_type_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def listing_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def listing_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def listing_type_was; end

    sig { void }
    def listing_type_will_change!; end

    sig { returns(::BigDecimal) }
    def quantity; end

    sig { params(value: ::BigDecimal).returns(::BigDecimal) }
    def quantity=(value); end

    sig { returns(T::Boolean) }
    def quantity?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def quantity_before_last_save; end

    sig { returns(T.untyped) }
    def quantity_before_type_cast; end

    sig { returns(T::Boolean) }
    def quantity_came_from_user?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def quantity_change; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def quantity_change_to_be_saved; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def quantity_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def quantity_in_database; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def quantity_previous_change; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def quantity_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def quantity_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def quantity_was; end

    sig { void }
    def quantity_will_change!; end

    sig { void }
    def restore_amount_in_cents!; end

    sig { void }
    def restore_arr_in_cents!; end

    sig { void }
    def restore_billing_transaction_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_extras!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_listing_id!; end

    sig { void }
    def restore_listing_type!; end

    sig { void }
    def restore_quantity!; end

    sig { void }
    def restore_service_end_date!; end

    sig { void }
    def restore_service_start_date!; end

    sig { void }
    def restore_subscribable_id!; end

    sig { void }
    def restore_subscribable_type!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_zuora_product_rate_plan_charge_id!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_amount_in_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_amount_in_cents?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_arr_in_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_arr_in_cents?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_billing_transaction_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_transaction_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_extras; end

    sig { returns(T::Boolean) }
    def saved_change_to_extras?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_listing_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_listing_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_listing_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_listing_type?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def saved_change_to_quantity; end

    sig { returns(T::Boolean) }
    def saved_change_to_quantity?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_service_end_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_service_end_date?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_service_start_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_service_start_date?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_subscribable_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_subscribable_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_subscribable_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_subscribable_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_zuora_product_rate_plan_charge_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_zuora_product_rate_plan_charge_id?; end

    sig { returns(T.nilable(::Date)) }
    def service_end_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def service_end_date=(value); end

    sig { returns(T::Boolean) }
    def service_end_date?; end

    sig { returns(T.nilable(::Date)) }
    def service_end_date_before_last_save; end

    sig { returns(T.untyped) }
    def service_end_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def service_end_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def service_end_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def service_end_date_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def service_end_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def service_end_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def service_end_date_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def service_end_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def service_end_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def service_end_date_was; end

    sig { void }
    def service_end_date_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def service_start_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def service_start_date=(value); end

    sig { returns(T::Boolean) }
    def service_start_date?; end

    sig { returns(T.nilable(::Date)) }
    def service_start_date_before_last_save; end

    sig { returns(T.untyped) }
    def service_start_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def service_start_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def service_start_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def service_start_date_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def service_start_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def service_start_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def service_start_date_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def service_start_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def service_start_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def service_start_date_was; end

    sig { void }
    def service_start_date_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def subscribable_id=(value); end

    sig { returns(T::Boolean) }
    def subscribable_id?; end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id_before_last_save; end

    sig { returns(T.untyped) }
    def subscribable_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def subscribable_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subscribable_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subscribable_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def subscribable_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subscribable_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def subscribable_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id_was; end

    sig { void }
    def subscribable_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def subscribable_type; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def subscribable_type=(value); end

    sig { returns(T::Boolean) }
    def subscribable_type?; end

    sig { returns(T.nilable(::String)) }
    def subscribable_type_before_last_save; end

    sig { returns(T.untyped) }
    def subscribable_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def subscribable_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subscribable_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subscribable_type_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def subscribable_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def subscribable_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subscribable_type_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def subscribable_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def subscribable_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def subscribable_type_was; end

    sig { void }
    def subscribable_type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_amount_in_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_arr_in_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_transaction_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_extras?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_listing_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_listing_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_quantity?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_service_end_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_service_start_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subscribable_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subscribable_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_zuora_product_rate_plan_charge_id?; end

    sig { returns(T.nilable(::String)) }
    def zuora_product_rate_plan_charge_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def zuora_product_rate_plan_charge_id=(value); end

    sig { returns(T::Boolean) }
    def zuora_product_rate_plan_charge_id?; end

    sig { returns(T.nilable(::String)) }
    def zuora_product_rate_plan_charge_id_before_last_save; end

    sig { returns(T.untyped) }
    def zuora_product_rate_plan_charge_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def zuora_product_rate_plan_charge_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_product_rate_plan_charge_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_product_rate_plan_charge_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_product_rate_plan_charge_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_product_rate_plan_charge_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_product_rate_plan_charge_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_product_rate_plan_charge_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_product_rate_plan_charge_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def zuora_product_rate_plan_charge_id_was; end

    sig { void }
    def zuora_product_rate_plan_charge_id_will_change!; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def actions_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active_service_period(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def advanced_security(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def before_line_item(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def codespaces_compute_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def codespaces_storage_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def codespaces_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def copilot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def copilot_for_business_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_at_or_after(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_between(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_during(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_sponsors_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_subscribable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_subscribable_and_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_subscribable_id_and_amount_in_cents(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def github(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def listing_Marketplace_Listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def listing_SponsorsListing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def marketplace(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def metered_copilot_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_listing_Marketplace_Listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_listing_SponsorsListing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_subscribable_Billing_ProductUUID(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_subscribable_Marketplace_ListingPlan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_subscribable_SponsorsTier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def packages_data_transfer_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def paying_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def product_uuids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def shared_storage_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sponsorships(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sponsorships_excluding_prorated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def subscribable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def subscribable_Billing_ProductUUID(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def subscribable_Marketplace_ListingPlan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def subscribable_SponsorsTier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def successful(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def transaction_created_at_or_after(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def transaction_created_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Billing::BillingTransaction::LineItem } }

    sig { returns(T::Array[::Billing::BillingTransaction::LineItem]) }
    def to_a; end

    sig { returns(T::Array[::Billing::BillingTransaction::LineItem]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Billing::BillingTransaction::LineItem } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Billing::BillingTransaction::LineItem } }

    sig do
      params(
        records: T.any(::Billing::BillingTransaction::LineItem, T::Enumerable[T.any(::Billing::BillingTransaction::LineItem, T::Enumerable[::Billing::BillingTransaction::LineItem])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Billing::BillingTransaction::LineItem, T::Enumerable[T.any(::Billing::BillingTransaction::LineItem, T::Enumerable[::Billing::BillingTransaction::LineItem])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Billing::BillingTransaction::LineItem, T::Enumerable[T.any(::Billing::BillingTransaction::LineItem, T::Enumerable[::Billing::BillingTransaction::LineItem])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Billing::BillingTransaction::LineItem]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Billing::BillingTransaction::LineItem, T::Enumerable[T.any(::Billing::BillingTransaction::LineItem, T::Enumerable[::Billing::BillingTransaction::LineItem])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Billing::BillingTransaction::LineItem, T::Enumerable[T.any(::Billing::BillingTransaction::LineItem, T::Enumerable[::Billing::BillingTransaction::LineItem])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Billing::BillingTransaction::LineItem, T::Enumerable[T.any(::Billing::BillingTransaction::LineItem, T::Enumerable[::Billing::BillingTransaction::LineItem])])
      ).returns(T::Array[::Billing::BillingTransaction::LineItem])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Billing::BillingTransaction::LineItem]) }
    def target; end

    sig { returns(T::Array[::Billing::BillingTransaction::LineItem]) }
    def to_a; end

    sig { returns(T::Array[::Billing::BillingTransaction::LineItem]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Billing::BillingTransaction::LineItem } }

    sig { returns(T::Array[::Billing::BillingTransaction::LineItem]) }
    def to_a; end

    sig { returns(T::Array[::Billing::BillingTransaction::LineItem]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Billing::BillingTransaction::LineItem } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

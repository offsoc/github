# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `argon2` gem.
# Please instead update this file by running `bin/tapioca gem argon2`.

# Standard Gem version constant.
#
# source://argon2//lib/argon2/constants.rb#3
module Argon2; end

# source://argon2//lib/argon2/errors.rb#7
class Argon2::ArgonHashFail < ::StandardError; end

# Constants utilised in several parts of the Argon2 module
# SALT_LEN is a standard recommendation from the Argon2 spec.
#
# source://argon2//lib/argon2/constants.rb#7
module Argon2::Constants; end

# Encoded output
#
# source://argon2//lib/argon2/constants.rb#10
Argon2::Constants::ENCODE_LEN = T.let(T.unsafe(nil), Integer)

# Binary, unencoded output
#
# source://argon2//lib/argon2/constants.rb#9
Argon2::Constants::OUT_LEN = T.let(T.unsafe(nil), Integer)

# source://argon2//lib/argon2/constants.rb#8
Argon2::Constants::SALT_LEN = T.let(T.unsafe(nil), Integer)

# source://argon2//lib/argon2/errors.rb#8
Argon2::ERRORS = T.let(T.unsafe(nil), Array)

# The engine class shields users from the FFI interface.
# It is generally not advised to directly use this class.
#
# source://argon2//lib/argon2/ffi_engine.rb#48
class Argon2::Engine
  class << self
    # @raise [ArgonHashFail]
    #
    # source://argon2//lib/argon2/ffi_engine.rb#98
    def argon2_verify(pwd, hash, secret); end

    # @raise [ArgonHashFail]
    #
    # source://argon2//lib/argon2/ffi_engine.rb#49
    def hash_argon2i(password, salt, t_cost, m_cost, out_len = T.unsafe(nil)); end

    # @raise [ArgonHashFail]
    #
    # source://argon2//lib/argon2/ffi_engine.rb#65
    def hash_argon2id(password, salt, t_cost, m_cost, p_cost, out_len = T.unsafe(nil)); end

    # @raise [ArgonHashFail]
    #
    # source://argon2//lib/argon2/ffi_engine.rb#81
    def hash_argon2id_encode(password, salt, t_cost, m_cost, p_cost, secret); end

    # source://argon2//lib/argon2/engine.rb#8
    def saltgen; end
  end
end

# Direct external bindings. Call these methods via the Engine class to ensure points are dealt with
#
# source://argon2//lib/argon2/ffi_engine.rb#8
module Argon2::Ext
  extend ::FFI::Library

  def argon2_wrap(*_arg0); end
  def argon2i_hash_raw(*_arg0); end
  def argon2id_hash_raw(*_arg0); end
  def wrap_argon2_verify(*_arg0); end

  class << self
    def argon2_wrap(*_arg0); end
    def argon2i_hash_raw(*_arg0); end
    def argon2id_hash_raw(*_arg0); end
    def wrap_argon2_verify(*_arg0); end
  end
end

# Get the values from an Argon2 compatible string.
#
# source://argon2//lib/argon2/hash_format.rb#7
class Argon2::HashFormat
  # FIXME: Reduce complexity/AbcSize
  #
  # @raise [Argon2::ArgonHashFail]
  # @return [HashFormat] a new instance of HashFormat
  #
  # source://argon2//lib/argon2/hash_format.rb#12
  def initialize(digest); end

  # Returns the value of attribute checksum.
  #
  # source://argon2//lib/argon2/hash_format.rb#8
  def checksum; end

  # Returns the value of attribute m_cost.
  #
  # source://argon2//lib/argon2/hash_format.rb#8
  def m_cost; end

  # Returns the value of attribute p_cost.
  #
  # source://argon2//lib/argon2/hash_format.rb#8
  def p_cost; end

  # Returns the value of attribute salt.
  #
  # source://argon2//lib/argon2/hash_format.rb#8
  def salt; end

  # Returns the value of attribute t_cost.
  #
  # source://argon2//lib/argon2/hash_format.rb#8
  def t_cost; end

  # Returns the value of attribute variant.
  #
  # source://argon2//lib/argon2/hash_format.rb#8
  def variant; end

  # Returns the value of attribute version.
  #
  # source://argon2//lib/argon2/hash_format.rb#8
  def version; end

  class << self
    # Checks whether a given digest is a valid Argon2 hash.
    #
    # Supports 1 and argon2id formats.
    #
    # @return [Boolean]
    #
    # source://argon2//lib/argon2/hash_format.rb#45
    def valid_hash?(digest); end
  end
end

# Front-end API for the Argon2 module.
#
# source://argon2//lib/argon2.rb#12
class Argon2::Password
  # @raise [ArgonHashFail]
  # @return [Password] a new instance of Password
  #
  # source://argon2//lib/argon2.rb#13
  def initialize(options = T.unsafe(nil)); end

  # @raise [ArgonHashFail]
  #
  # source://argon2//lib/argon2.rb#27
  def create(pass); end

  class << self
    # Helper class, just creates defaults and calls hash()
    #
    # source://argon2//lib/argon2.rb#39
    def create(pass, options = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://argon2//lib/argon2.rb#44
    def valid_hash?(hash); end

    # @raise [ArgonHashFail]
    #
    # source://argon2//lib/argon2.rb#48
    def verify_password(pass, hash, secret = T.unsafe(nil)); end
  end
end

# source://argon2//lib/argon2/version.rb#6
Argon2::VERSION = T.let(T.unsafe(nil), String)

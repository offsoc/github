# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::SecurityAdvisories::V0::AdvisoryCreditDestroy`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::SecurityAdvisories::V0::AdvisoryCreditDestroy`.

class Hydro::Schemas::Github::SecurityAdvisories::V0::AdvisoryCreditDestroy
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      advisory_credit_created_at: T.nilable(Google::Protobuf::Timestamp),
      advisory_credit_creator: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      advisory_credit_current_state: T.nilable(T.any(Symbol, Integer)),
      advisory_credit_id: T.nilable(Integer),
      advisory_credit_recipient: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      ghsa_id: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_advisory: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryAdvisory),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      security_advisory: T.nilable(Hydro::Schemas::Github::V1::Entities::SecurityAdvisory)
    ).void
  end
  def initialize(actor: nil, advisory_credit_created_at: nil, advisory_credit_creator: nil, advisory_credit_current_state: nil, advisory_credit_id: nil, advisory_credit_recipient: nil, ghsa_id: nil, repository: nil, repository_advisory: nil, repository_owner: nil, request_context: nil, security_advisory: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def advisory_credit_created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def advisory_credit_created_at=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def advisory_credit_creator; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def advisory_credit_creator=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def advisory_credit_current_state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def advisory_credit_current_state=(value); end

  sig { returns(Integer) }
  def advisory_credit_id; end

  sig { params(value: Integer).void }
  def advisory_credit_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def advisory_credit_recipient; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def advisory_credit_recipient=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_advisory_credit_created_at; end

  sig { void }
  def clear_advisory_credit_creator; end

  sig { void }
  def clear_advisory_credit_current_state; end

  sig { void }
  def clear_advisory_credit_id; end

  sig { void }
  def clear_advisory_credit_recipient; end

  sig { void }
  def clear_ghsa_id; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_advisory; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_security_advisory; end

  sig { returns(String) }
  def ghsa_id; end

  sig { params(value: String).void }
  def ghsa_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryAdvisory)) }
  def repository_advisory; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryAdvisory)).void }
  def repository_advisory=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SecurityAdvisory)) }
  def security_advisory; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SecurityAdvisory)).void }
  def security_advisory=(value); end
end

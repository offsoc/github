{"version":3,"file":"chunk-vendors-node_modules_codemirror_legacy-modes_mode_javascript_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/javascript.js"],"sourcesContent":["function mkJavaScript(parserConfig) {\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string.special\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string.special\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null; cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variableName.local\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  pushcontext.lex = pushblockcontext.lex = true\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string.special\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") return pass(quasiType, afterType)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n   if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+#?[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\" || value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    name: parserConfig.name,\n\n    startState: function(indentUnit) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical(-indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return null;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + cx.unit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx.unit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? cx.unit : 2 * cx.unit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : cx.unit);\n    },\n\n    languageData: {\n      indentOnInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      commentTokens: jsonMode ? undefined : {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]},\n      wordChars: \"$\"\n    }\n  };\n};\n\nexport const javascript = mkJavaScript({name: \"javascript\"})\nexport const json = mkJavaScript({name: \"json\", json: true})\nexport const jsonld = mkJavaScript({name: \"json\", jsonld: true})\nexport const typescript = mkJavaScript({name: \"typescript\", typescript: true})\n"],"names":["mkJavaScript","parserConfig","type","content","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","ch","next","tokenize","escaped","peek","match","test","eat","tokenComment","skipToEnd","lastType","string","slice","pos","readRegexp","inSet","current","tokenQuasi","eatWhile","start","lexical","word","propertyIsEnumerable","maybeEnd","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","charAt","bracket","brackets","atomicTypes","JSLexical","indented","column","align","prev","info","cx","marked","cc","pass","i","arguments","length","push","apply","inList","name","list","v","register","varname","context","block","newContext","registerVarScoped","inner","Context","vars","Var","localVars","globalVars","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","lex","poplex","expect","wanted","exp","statement","value","vardef","parenExpr","maybeexpression","pop","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","expression","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","hasOwnProperty","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","me","expr","property","backUp","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","isInterface","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","indentUnit","token","sol","indentation","eatSpace","parseJS","combinator","inScope","textAfter","top","firstChar","c","closing","unit","isContinuedStatement","doubleIndentSwitch","languageData","indentOnInput","commentTokens","undefined","line","open","close","closeBrackets","wordChars","javascript"],"sourceRoot":""}
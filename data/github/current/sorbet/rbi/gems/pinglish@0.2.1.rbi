# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pinglish` gem.
# Please instead update this file by running `bin/tapioca gem pinglish`.

# This Rack middleware provides a "/_ping" endpoint for configurable
# system health checks. It's intended to be consumed by machines.
#
# source://pinglish//lib/pinglish/check.rb#1
class Pinglish
  # Create a new instance of the middleware wrapping `app`, with an
  # optional `:path` (default: `"/_ping"`), `:max` timeout in seconds
  # (default: `29`), and behavior `block`.
  #
  # @return [Pinglish] a new instance of Pinglish
  # @yield [_self]
  # @yieldparam _self [Pinglish] the object that the method was called on
  #
  # source://pinglish//lib/pinglish.rb#25
  def initialize(app, options = T.unsafe(nil), &block); end

  # Exercise the middleware, immediately delegating to the wrapped app
  # unless the request path matches `path`.
  #
  # source://pinglish//lib/pinglish.rb#39
  def call(env); end

  # Add a new check with optional `name`. A `:timeout` option can be
  # specified in seconds for checks that might take longer than the
  # one second default. A previously added check with the same name
  # will be replaced.
  #
  # source://pinglish//lib/pinglish.rb#109
  def check(name = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Does `value` represent a check failure? This default
  # implementation returns `true` for any value that is an Exception or false.
  # Subclasses can override this method for different behavior.
  #
  # @return [Boolean]
  #
  # source://pinglish//lib/pinglish.rb#117
  def failure?(value); end

  # Raise Pinglish::TooLong after `seconds` has elapsed. This default
  # implementation uses Ruby's built-in Timeout class. Subclasses can
  # override this method for different behavior, but any new
  # implementation must raise Pinglish::TooLong when the timeout is
  # exceeded or override `timeout?` appropriately.
  #
  # source://pinglish//lib/pinglish.rb#127
  def timeout(seconds, &block); end

  # Does `value` represent a check timeout? Returns `true` for any
  # value that is an instance of Pinglish::TooLong.
  #
  # @return [Boolean]
  #
  # source://pinglish//lib/pinglish.rb#134
  def timeout?(value); end
end

# source://pinglish//lib/pinglish/check.rb#2
class Pinglish::Check
  # @return [Check] a new instance of Check
  #
  # source://pinglish//lib/pinglish/check.rb#7
  def initialize(name, options = T.unsafe(nil), &block); end

  # Call this check's behavior, returning the result of the block.
  #
  # source://pinglish//lib/pinglish/check.rb#17
  def call(*args, &block); end

  # Returns the value of attribute group.
  #
  # source://pinglish//lib/pinglish/check.rb#3
  def group; end

  # Returns the value of attribute name.
  #
  # source://pinglish//lib/pinglish/check.rb#4
  def name; end

  # Returns the value of attribute timeout.
  #
  # source://pinglish//lib/pinglish/check.rb#5
  def timeout; end
end

# The HTTP headers sent for every response.
#
# source://pinglish//lib/pinglish.rb#13
Pinglish::HEADERS = T.let(T.unsafe(nil), Hash)

# Raised when a check exceeds its timeout.
#
# source://pinglish//lib/pinglish.rb#19
class Pinglish::TooLong < ::RuntimeError; end

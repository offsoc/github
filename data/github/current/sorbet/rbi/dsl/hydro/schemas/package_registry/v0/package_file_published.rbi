# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::PackageRegistry::V0::PackageFilePublished`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::PackageRegistry::V0::PackageFilePublished`.

class Hydro::Schemas::PackageRegistry::V0::PackageFilePublished
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      event_id: T.nilable(String),
      file: T.nilable(Hydro::Schemas::PackageRegistry::V0::Entities::File),
      package: T.nilable(Hydro::Schemas::PackageRegistry::V0::Entities::Package),
      published_at: T.nilable(Google::Protobuf::Timestamp),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      storage_service: T.nilable(Hydro::Schemas::PackageRegistry::V0::Entities::StorageService),
      user_agent: T.nilable(String),
      version: T.nilable(Hydro::Schemas::PackageRegistry::V0::Entities::PackageVersion),
      via_actions: T.nilable(T::Boolean)
    ).void
  end
  def initialize(actor: nil, event_id: nil, file: nil, package: nil, published_at: nil, repository: nil, request_context: nil, storage_service: nil, user_agent: nil, version: nil, via_actions: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_event_id; end

  sig { void }
  def clear_file; end

  sig { void }
  def clear_package; end

  sig { void }
  def clear_published_at; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_storage_service; end

  sig { void }
  def clear_user_agent; end

  sig { void }
  def clear_version; end

  sig { void }
  def clear_via_actions; end

  sig { returns(String) }
  def event_id; end

  sig { params(value: String).void }
  def event_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::PackageRegistry::V0::Entities::File)) }
  def file; end

  sig { params(value: T.nilable(Hydro::Schemas::PackageRegistry::V0::Entities::File)).void }
  def file=(value); end

  sig { returns(T.nilable(Hydro::Schemas::PackageRegistry::V0::Entities::Package)) }
  def package; end

  sig { params(value: T.nilable(Hydro::Schemas::PackageRegistry::V0::Entities::Package)).void }
  def package=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def published_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def published_at=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::PackageRegistry::V0::Entities::StorageService)) }
  def storage_service; end

  sig { params(value: T.nilable(Hydro::Schemas::PackageRegistry::V0::Entities::StorageService)).void }
  def storage_service=(value); end

  sig { returns(String) }
  def user_agent; end

  sig { params(value: String).void }
  def user_agent=(value); end

  sig { returns(T.nilable(Hydro::Schemas::PackageRegistry::V0::Entities::PackageVersion)) }
  def version; end

  sig { params(value: T.nilable(Hydro::Schemas::PackageRegistry::V0::Entities::PackageVersion)).void }
  def version=(value); end

  sig { returns(T::Boolean) }
  def via_actions; end

  sig { params(value: T::Boolean).void }
  def via_actions=(value); end
end

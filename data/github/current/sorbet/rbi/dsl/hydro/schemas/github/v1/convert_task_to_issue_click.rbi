# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::ConvertTaskToIssueClick`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::ConvertTaskToIssueClick`.

class Hydro::Schemas::Github::V1::ConvertTaskToIssueClick
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      issue_id: T.nilable(Integer),
      issue_id_value: T.nilable(Integer),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      source: T.nilable(T.any(Symbol, Integer)),
      target_type: T.nilable(T.any(Symbol, Integer)),
      title: T.nilable(String),
      tracking_issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)
    ).void
  end
  def initialize(actor: nil, issue_id: nil, issue_id_value: nil, repository: nil, repository_owner: nil, request_context: nil, source: nil, target_type: nil, title: nil, tracking_issue: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_issue_id; end

  sig { void }
  def clear_issue_id_value; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_source; end

  sig { void }
  def clear_target_type; end

  sig { void }
  def clear_title; end

  sig { void }
  def clear_tracking_issue; end

  sig { returns(Integer) }
  def issue_id; end

  sig { params(value: Integer).void }
  def issue_id=(value); end

  sig { returns(Integer) }
  def issue_id_value; end

  sig { params(value: Integer).void }
  def issue_id_value=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def source; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def source=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def target_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def target_type=(value); end

  sig { returns(String) }
  def title; end

  sig { params(value: String).void }
  def title=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def tracking_issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def tracking_issue=(value); end
end

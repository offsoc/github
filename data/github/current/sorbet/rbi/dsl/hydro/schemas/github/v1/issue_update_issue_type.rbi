# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::IssueUpdateIssueType`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::IssueUpdateIssueType`.

class Hydro::Schemas::Github::V1::IssueUpdateIssueType
  sig do
    params(
      action: T.nilable(String),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue),
      issue_type: T.nilable(Hydro::Schemas::Github::V1::Entities::IssueType),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)
    ).void
  end
  def initialize(action: nil, actor: nil, issue: nil, issue_type: nil, repository: nil); end

  sig { returns(String) }
  def action; end

  sig { params(value: String).void }
  def action=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_issue; end

  sig { void }
  def clear_issue_type; end

  sig { void }
  def clear_repository; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def issue=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::IssueType)) }
  def issue_type; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::IssueType)).void }
  def issue_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end
end

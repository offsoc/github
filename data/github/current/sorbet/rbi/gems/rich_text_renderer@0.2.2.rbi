# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rich_text_renderer` gem.
# Please instead update this file by running `bin/tapioca gem rich_text_renderer`.

# RichTextRenderer Namespace
#
# source://rich_text_renderer//lib/rich_text_renderer/base_node_renderer.rb#1
module RichTextRenderer; end

# Asset block renderer
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/asset_block_renderer.rb#5
class RichTextRenderer::AssetBlockRenderer < ::RichTextRenderer::AssetHyperlinkRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/asset_block_renderer.rb#11
  def render_asset(asset, node = T.unsafe(nil)); end

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/asset_block_renderer.rb#19
  def render_hash(asset, node = T.unsafe(nil)); end
end

# IMG HTML Tag
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/asset_block_renderer.rb#7
RichTextRenderer::AssetBlockRenderer::IMAGE_HTML = T.let(T.unsafe(nil), Proc)

# Asset hyperlink renderer
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/asset_hyperlink_renderer.rb#5
class RichTextRenderer::AssetHyperlinkRenderer < ::RichTextRenderer::BaseBlockRenderer
  # Renders asset nodes
  #
  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/asset_hyperlink_renderer.rb#10
  def render(node); end

  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/asset_hyperlink_renderer.rb#59
  def render!(markup, url, text, formatted = T.unsafe(nil)); end

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/asset_hyperlink_renderer.rb#35
  def render_asset(asset, node = T.unsafe(nil)); end

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/asset_hyperlink_renderer.rb#44
  def render_hash(asset, node = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/asset_hyperlink_renderer.rb#53
  def renders_node?(node); end
end

# Anchor HTML Tag
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/asset_hyperlink_renderer.rb#7
RichTextRenderer::AssetHyperlinkRenderer::ANCHOR_HTML = T.let(T.unsafe(nil), Proc)

# Base renderer for block type nodes
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/base_block_renderer.rb#5
class RichTextRenderer::BaseBlockRenderer < ::RichTextRenderer::BaseNodeRenderer
  # Renders block type nodes.
  #
  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/base_block_renderer.rb#7
  def render(node); end

  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/base_block_renderer.rb#13
  def render_content(node); end

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/base_block_renderer.rb#20
  def render_tag; end
end

# Base renderer for inline nodes.
#
# source://rich_text_renderer//lib/rich_text_renderer/text_renderers/base_inline_renderer.rb#5
class RichTextRenderer::BaseInlineRenderer < ::RichTextRenderer::BaseNodeRenderer
  # Renders inline nodes.
  #
  # source://rich_text_renderer//lib/rich_text_renderer/text_renderers/base_inline_renderer.rb#7
  def render(node); end

  protected

  # source://rich_text_renderer//lib/rich_text_renderer/text_renderers/base_inline_renderer.rb#13
  def render_tag; end
end

# Base class for all NodeRenderers
#
# source://rich_text_renderer//lib/rich_text_renderer/base_node_renderer.rb#3
class RichTextRenderer::BaseNodeRenderer
  # @return [BaseNodeRenderer] a new instance of BaseNodeRenderer
  #
  # source://rich_text_renderer//lib/rich_text_renderer/base_node_renderer.rb#6
  def initialize(mappings = T.unsafe(nil)); end

  # Returns the value of attribute mappings.
  #
  # source://rich_text_renderer//lib/rich_text_renderer/base_node_renderer.rb#4
  def mappings; end

  protected

  # source://rich_text_renderer//lib/rich_text_renderer/base_node_renderer.rb#12
  def find_renderer(node); end
end

# blockquote node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/blockquote_renderer.rb#5
class RichTextRenderer::BlockQuoteRenderer < ::RichTextRenderer::BaseBlockRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/blockquote_renderer.rb#8
  def render_tag; end
end

# B node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/text_renderers/bold_renderer.rb#5
class RichTextRenderer::BoldRenderer < ::RichTextRenderer::BaseInlineRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/text_renderers/bold_renderer.rb#8
  def render_tag; end
end

# code node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/text_renderers/code_renderer.rb#5
class RichTextRenderer::CodeRenderer < ::RichTextRenderer::BaseInlineRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/text_renderers/code_renderer.rb#8
  def render_tag; end
end

# Document renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/document_renderers/document_renderer.rb#5
class RichTextRenderer::DocumentRenderer < ::RichTextRenderer::BaseNodeRenderer
  # Renders all nodes in the document.
  #
  # source://rich_text_renderer//lib/rich_text_renderer/document_renderers/document_renderer.rb#7
  def render(document); end
end

# Default embedded entry renderer.
# Dumps entry to string.
# This renderer should be overridden for your particular applications.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/entry_block_renderer.rb#7
class RichTextRenderer::EntryBlockRenderer < ::RichTextRenderer::BaseNodeRenderer
  # Renders embedded entry node.
  #
  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/entry_block_renderer.rb#9
  def render(node); end
end

# H5 node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/heading_five_renderer.rb#5
class RichTextRenderer::HeadingFiveRenderer < ::RichTextRenderer::BaseBlockRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/heading_five_renderer.rb#8
  def render_tag; end
end

# H4 node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/heading_four_renderer.rb#5
class RichTextRenderer::HeadingFourRenderer < ::RichTextRenderer::BaseBlockRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/heading_four_renderer.rb#8
  def render_tag; end
end

# H1 node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/heading_one_renderer.rb#5
class RichTextRenderer::HeadingOneRenderer < ::RichTextRenderer::BaseBlockRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/heading_one_renderer.rb#8
  def render_tag; end
end

# H6 node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/heading_six_renderer.rb#5
class RichTextRenderer::HeadingSixRenderer < ::RichTextRenderer::BaseBlockRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/heading_six_renderer.rb#8
  def render_tag; end
end

# H3 node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/heading_three_renderer.rb#5
class RichTextRenderer::HeadingThreeRenderer < ::RichTextRenderer::BaseBlockRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/heading_three_renderer.rb#8
  def render_tag; end
end

# H2 node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/heading_two_renderer.rb#5
class RichTextRenderer::HeadingTwoRenderer < ::RichTextRenderer::BaseBlockRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/heading_two_renderer.rb#8
  def render_tag; end
end

# hr node renderer
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/hr_renderer.rb#5
class RichTextRenderer::HrRenderer < ::RichTextRenderer::BaseNodeRenderer
  # Renders an hr node
  #
  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/hr_renderer.rb#7
  def render(_node); end
end

# a node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/hyperlink_renderer.rb#5
class RichTextRenderer::HyperlinkRenderer < ::RichTextRenderer::BaseBlockRenderer
  # Renders hyperlink
  #
  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/hyperlink_renderer.rb#7
  def render(node); end
end

# I node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/text_renderers/italic_renderer.rb#5
class RichTextRenderer::ItalicRenderer < ::RichTextRenderer::BaseInlineRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/text_renderers/italic_renderer.rb#8
  def render_tag; end
end

# li node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/list_item_renderer.rb#5
class RichTextRenderer::ListItemRenderer < ::RichTextRenderer::BaseBlockRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/list_item_renderer.rb#8
  def render_tag; end
end

# Catch-all renderer for missing node types
#
# source://rich_text_renderer//lib/rich_text_renderer/null_renderer.rb#5
class RichTextRenderer::NullRenderer < ::RichTextRenderer::BaseNodeRenderer
  # Will raise an exception indicating the missing node type.
  #
  # source://rich_text_renderer//lib/rich_text_renderer/null_renderer.rb#7
  def render(node); end

  private

  # source://rich_text_renderer//lib/rich_text_renderer/null_renderer.rb#13
  def node_type(node); end
end

# ol node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/ordered_list_renderer.rb#5
class RichTextRenderer::OrderedListRenderer < ::RichTextRenderer::BaseBlockRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/ordered_list_renderer.rb#8
  def render_tag; end
end

# P node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/paragraph_renderer.rb#5
class RichTextRenderer::ParagraphRenderer < ::RichTextRenderer::BaseBlockRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/paragraph_renderer.rb#8
  def render_tag; end
end

# Renderer for RichText field from Contentful
#
# source://rich_text_renderer//lib/rich_text_renderer/renderer.rb#10
class RichTextRenderer::Renderer < ::RichTextRenderer::BaseNodeRenderer
  # @return [Renderer] a new instance of Renderer
  #
  # source://rich_text_renderer//lib/rich_text_renderer/renderer.rb#38
  def initialize(mappings = T.unsafe(nil)); end

  # Returns a rendered RichText document
  #
  # source://rich_text_renderer//lib/rich_text_renderer/renderer.rb#43
  def render(document); end
end

# Default Renderers
#
# source://rich_text_renderer//lib/rich_text_renderer/renderer.rb#12
RichTextRenderer::Renderer::DEFAULT_MAPPINGS = T.let(T.unsafe(nil), Hash)

# Renderer for Text nodes.
#
# source://rich_text_renderer//lib/rich_text_renderer/text_renderers/text_renderer.rb#5
class RichTextRenderer::TextRenderer < ::RichTextRenderer::BaseNodeRenderer
  # Renders text nodes with all markings.
  #
  # source://rich_text_renderer//lib/rich_text_renderer/text_renderers/text_renderer.rb#7
  def render(node); end
end

# U node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/text_renderers/underline_renderer.rb#5
class RichTextRenderer::UnderlineRenderer < ::RichTextRenderer::BaseInlineRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/text_renderers/underline_renderer.rb#8
  def render_tag; end
end

# ul node renderer.
#
# source://rich_text_renderer//lib/rich_text_renderer/block_renderers/unordered_list_renderer.rb#5
class RichTextRenderer::UnorderedListRenderer < ::RichTextRenderer::BaseBlockRenderer
  protected

  # source://rich_text_renderer//lib/rich_text_renderer/block_renderers/unordered_list_renderer.rb#8
  def render_tag; end
end

# Gem Version
#
# source://rich_text_renderer//lib/rich_text_renderer/version.rb#3
RichTextRenderer::VERSION = T.let(T.unsafe(nil), String)

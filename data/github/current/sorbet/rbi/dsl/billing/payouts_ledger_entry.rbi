# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Billing::PayoutsLedgerEntry`.
# Please instead update this file by running `bin/tapioca dsl Billing::PayoutsLedgerEntry`.

class Billing::PayoutsLedgerEntry
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def transaction_types; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::PayoutsLedgerEntry).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::PayoutsLedgerEntry).void)
      ).returns(::Billing::PayoutsLedgerEntry)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::PayoutsLedgerEntry).void)
      ).returns(::Billing::PayoutsLedgerEntry)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::PayoutsLedgerEntry).void)
      ).returns(::Billing::PayoutsLedgerEntry)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::PayoutsLedgerEntry).void)
      ).returns(::Billing::PayoutsLedgerEntry)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::PayoutsLedgerEntry).void)
      ).returns(::Billing::PayoutsLedgerEntry)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Billing::PayoutsLedgerEntry]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Billing::PayoutsLedgerEntry)) }
    def fifth; end

    sig { returns(::Billing::PayoutsLedgerEntry) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Billing::PayoutsLedgerEntry)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Billing::PayoutsLedgerEntry) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Billing::PayoutsLedgerEntry).void)
      ).returns(T.nilable(T::Enumerator[::Billing::PayoutsLedgerEntry]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Billing::PayoutsLedgerEntry]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Billing::PayoutsLedgerEntry]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::PayoutsLedgerEntry).void)
      ).returns(::Billing::PayoutsLedgerEntry)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::PayoutsLedgerEntry).void)
      ).returns(::Billing::PayoutsLedgerEntry)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::PayoutsLedgerEntry).void)
      ).returns(::Billing::PayoutsLedgerEntry)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Billing::PayoutsLedgerEntry)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Billing::PayoutsLedgerEntry) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Billing::PayoutsLedgerEntry) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Billing::PayoutsLedgerEntry) }
    def first!; end

    sig { returns(T.nilable(::Billing::PayoutsLedgerEntry)) }
    def forty_two; end

    sig { returns(::Billing::PayoutsLedgerEntry) }
    def forty_two!; end

    sig { returns(T.nilable(::Billing::PayoutsLedgerEntry)) }
    def fourth; end

    sig { returns(::Billing::PayoutsLedgerEntry) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Billing::PayoutsLedgerEntry) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::PayoutsLedgerEntry).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::PayoutsLedgerEntry).void)
      ).returns(::Billing::PayoutsLedgerEntry)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::PayoutsLedgerEntry).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::PayoutsLedgerEntry).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Billing::PayoutsLedgerEntry)) }
    def second; end

    sig { returns(::Billing::PayoutsLedgerEntry) }
    def second!; end

    sig { returns(T.nilable(::Billing::PayoutsLedgerEntry)) }
    def second_to_last; end

    sig { returns(::Billing::PayoutsLedgerEntry) }
    def second_to_last!; end

    sig { returns(::Billing::PayoutsLedgerEntry) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Billing::PayoutsLedgerEntry) }
    def take!; end

    sig { returns(T.nilable(::Billing::PayoutsLedgerEntry)) }
    def third; end

    sig { returns(::Billing::PayoutsLedgerEntry) }
    def third!; end

    sig { returns(T.nilable(::Billing::PayoutsLedgerEntry)) }
    def third_to_last; end

    sig { returns(::Billing::PayoutsLedgerEntry) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def chargeback!; end

    sig { returns(T::Boolean) }
    def chargeback?; end

    sig { void }
    def chargeback_reversal!; end

    sig { returns(T::Boolean) }
    def chargeback_reversal?; end

    sig { void }
    def github_match!; end

    sig { returns(T::Boolean) }
    def github_match?; end

    sig { void }
    def github_match_reversal!; end

    sig { returns(T::Boolean) }
    def github_match_reversal?; end

    sig { void }
    def inter_account_transfer!; end

    sig { returns(T::Boolean) }
    def inter_account_transfer?; end

    sig { void }
    def invoice_credit!; end

    sig { returns(T::Boolean) }
    def invoice_credit?; end

    sig { void }
    def manual_transfer!; end

    sig { returns(T::Boolean) }
    def manual_transfer?; end

    sig { void }
    def payment!; end

    sig { returns(T::Boolean) }
    def payment?; end

    sig { void }
    def payout!; end

    sig { returns(T::Boolean) }
    def payout?; end

    sig { void }
    def payout_failure!; end

    sig { returns(T::Boolean) }
    def payout_failure?; end

    sig { void }
    def refund!; end

    sig { returns(T::Boolean) }
    def refund?; end

    sig { void }
    def transfer!; end

    sig { returns(T::Boolean) }
    def transfer?; end

    sig { void }
    def transfer_reversal!; end

    sig { returns(T::Boolean) }
    def transfer_reversal?; end

    sig { void }
    def transfers_paid!; end

    sig { returns(T::Boolean) }
    def transfers_paid?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def billing_transaction; end

    sig { params(value: T.nilable(::Billing::BillingTransaction)).void }
    def billing_transaction=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction) }
    def build_billing_transaction(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def build_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def build_sponsors_listing_stafftools_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::StripeConnect::Account) }
    def build_stripe_connect_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction) }
    def create_billing_transaction(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction) }
    def create_billing_transaction!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_sponsorable!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_sponsors_listing!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def create_sponsors_listing_stafftools_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def create_sponsors_listing_stafftools_metadata!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::StripeConnect::Account) }
    def create_stripe_connect_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::StripeConnect::Account) }
    def create_stripe_connect_account!(*args, &blk); end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def reload_billing_transaction; end

    sig { returns(T.nilable(::User)) }
    def reload_sponsorable; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def reload_sponsors_listing; end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def reload_sponsors_listing_stafftools_metadata; end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def reload_stripe_connect_account; end

    sig { returns(T.nilable(::User)) }
    def sponsorable; end

    sig { params(value: T.nilable(::User)).void }
    def sponsorable=(value); end

    sig { returns(T.nilable(::SponsorsListing)) }
    def sponsors_listing; end

    sig { params(value: T.nilable(::SponsorsListing)).void }
    def sponsors_listing=(value); end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def sponsors_listing_stafftools_metadata; end

    sig { params(value: T.nilable(::SponsorsListingStafftoolsMetadata)).void }
    def sponsors_listing_stafftools_metadata=(value); end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def stripe_connect_account; end

    sig { params(value: T.nilable(::Billing::StripeConnect::Account)).void }
    def stripe_connect_account=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def chargeback(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def chargeback_reversal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_sponsors_listing_and_since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_stripe_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def github_match(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def github_match_reversal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def has_billing_transaction(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def has_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_date_range(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def inter_account_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invoice_credit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def manual_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def most_recent_transaction_timestamp_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def net_sponsors_matches(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def net_transfers(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def net_transfers_or_no_transaction_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def net_transfers_with_matches(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_chargeback(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_chargeback_reversal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_github_match(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_github_match_reversal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_inter_account_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_invoice_credit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_manual_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_payment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_payout(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_payout_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_refund(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_transfer_reversal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_transfers_paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def payment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def payments_for_charge_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def payout(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def payout_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def refund(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def since_last_sponsors_payout(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sponsors_listing_transfers(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def transfer_reversal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def transfers_paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_primary_reference_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_billing_transaction; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorable; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_listing; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_listing_stafftools_metadata; end

    sig { returns(Promise[T.untyped]) }
    def async_stripe_connect_account; end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def amount_in_subunits; end

    sig { params(value: ::Integer).returns(::Integer) }
    def amount_in_subunits=(value); end

    sig { returns(T::Boolean) }
    def amount_in_subunits?; end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_subunits_before_last_save; end

    sig { returns(T.untyped) }
    def amount_in_subunits_before_type_cast; end

    sig { returns(T::Boolean) }
    def amount_in_subunits_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def amount_in_subunits_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def amount_in_subunits_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def amount_in_subunits_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_subunits_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def amount_in_subunits_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def amount_in_subunits_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_subunits_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_subunits_was; end

    sig { void }
    def amount_in_subunits_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def billing_transaction_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def billing_transaction_id=(value); end

    sig { returns(T::Boolean) }
    def billing_transaction_id?; end

    sig { returns(T.nilable(::Integer)) }
    def billing_transaction_id_before_last_save; end

    sig { returns(T.untyped) }
    def billing_transaction_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_transaction_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def billing_transaction_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def billing_transaction_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def billing_transaction_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def billing_transaction_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def billing_transaction_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def billing_transaction_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def billing_transaction_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def billing_transaction_id_was; end

    sig { void }
    def billing_transaction_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def credit_balance_adjustment_number; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def credit_balance_adjustment_number=(value); end

    sig { returns(T::Boolean) }
    def credit_balance_adjustment_number?; end

    sig { returns(T.nilable(::String)) }
    def credit_balance_adjustment_number_before_last_save; end

    sig { returns(T.untyped) }
    def credit_balance_adjustment_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def credit_balance_adjustment_number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def credit_balance_adjustment_number_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def credit_balance_adjustment_number_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def credit_balance_adjustment_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def credit_balance_adjustment_number_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def credit_balance_adjustment_number_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def credit_balance_adjustment_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def credit_balance_adjustment_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def credit_balance_adjustment_number_was; end

    sig { void }
    def credit_balance_adjustment_number_will_change!; end

    sig { returns(::String) }
    def currency_code; end

    sig { params(value: ::String).returns(::String) }
    def currency_code=(value); end

    sig { returns(T::Boolean) }
    def currency_code?; end

    sig { returns(T.nilable(::String)) }
    def currency_code_before_last_save; end

    sig { returns(T.untyped) }
    def currency_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def currency_code_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def currency_code_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def currency_code_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def currency_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def currency_code_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def currency_code_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def currency_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def currency_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def currency_code_was; end

    sig { void }
    def currency_code_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def invoiced_sponsorship_transfer_reversal_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def invoiced_sponsorship_transfer_reversal_id=(value); end

    sig { returns(T::Boolean) }
    def invoiced_sponsorship_transfer_reversal_id?; end

    sig { returns(T.nilable(::Integer)) }
    def invoiced_sponsorship_transfer_reversal_id_before_last_save; end

    sig { returns(T.untyped) }
    def invoiced_sponsorship_transfer_reversal_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def invoiced_sponsorship_transfer_reversal_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invoiced_sponsorship_transfer_reversal_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invoiced_sponsorship_transfer_reversal_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def invoiced_sponsorship_transfer_reversal_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def invoiced_sponsorship_transfer_reversal_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invoiced_sponsorship_transfer_reversal_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def invoiced_sponsorship_transfer_reversal_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def invoiced_sponsorship_transfer_reversal_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def invoiced_sponsorship_transfer_reversal_id_was; end

    sig { void }
    def invoiced_sponsorship_transfer_reversal_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def paypal_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def paypal_id=(value); end

    sig { returns(T::Boolean) }
    def paypal_id?; end

    sig { returns(T.nilable(::String)) }
    def paypal_id_before_last_save; end

    sig { returns(T.untyped) }
    def paypal_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def paypal_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def paypal_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def paypal_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def paypal_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def paypal_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def paypal_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def paypal_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def paypal_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def paypal_id_was; end

    sig { void }
    def paypal_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def primary_reference_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def primary_reference_id=(value); end

    sig { returns(T::Boolean) }
    def primary_reference_id?; end

    sig { returns(T.nilable(::String)) }
    def primary_reference_id_before_last_save; end

    sig { returns(T.untyped) }
    def primary_reference_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def primary_reference_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def primary_reference_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def primary_reference_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def primary_reference_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def primary_reference_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def primary_reference_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def primary_reference_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def primary_reference_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def primary_reference_id_was; end

    sig { void }
    def primary_reference_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_credit_balance_adjustment_number; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def refunded_transaction_credit_balance_adjustment_number=(value); end

    sig { returns(T::Boolean) }
    def refunded_transaction_credit_balance_adjustment_number?; end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_credit_balance_adjustment_number_before_last_save; end

    sig { returns(T.untyped) }
    def refunded_transaction_credit_balance_adjustment_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def refunded_transaction_credit_balance_adjustment_number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refunded_transaction_credit_balance_adjustment_number_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refunded_transaction_credit_balance_adjustment_number_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def refunded_transaction_credit_balance_adjustment_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_credit_balance_adjustment_number_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refunded_transaction_credit_balance_adjustment_number_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def refunded_transaction_credit_balance_adjustment_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_credit_balance_adjustment_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_credit_balance_adjustment_number_was; end

    sig { void }
    def refunded_transaction_credit_balance_adjustment_number_will_change!; end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_paypal_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def refunded_transaction_paypal_id=(value); end

    sig { returns(T::Boolean) }
    def refunded_transaction_paypal_id?; end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_paypal_id_before_last_save; end

    sig { returns(T.untyped) }
    def refunded_transaction_paypal_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def refunded_transaction_paypal_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refunded_transaction_paypal_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refunded_transaction_paypal_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def refunded_transaction_paypal_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_paypal_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refunded_transaction_paypal_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def refunded_transaction_paypal_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_paypal_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_paypal_id_was; end

    sig { void }
    def refunded_transaction_paypal_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_stripe_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def refunded_transaction_stripe_id=(value); end

    sig { returns(T::Boolean) }
    def refunded_transaction_stripe_id?; end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_stripe_id_before_last_save; end

    sig { returns(T.untyped) }
    def refunded_transaction_stripe_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def refunded_transaction_stripe_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refunded_transaction_stripe_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refunded_transaction_stripe_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def refunded_transaction_stripe_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_stripe_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refunded_transaction_stripe_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def refunded_transaction_stripe_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_stripe_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_stripe_id_was; end

    sig { void }
    def refunded_transaction_stripe_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_zuora_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def refunded_transaction_zuora_id=(value); end

    sig { returns(T::Boolean) }
    def refunded_transaction_zuora_id?; end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_zuora_id_before_last_save; end

    sig { returns(T.untyped) }
    def refunded_transaction_zuora_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def refunded_transaction_zuora_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refunded_transaction_zuora_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refunded_transaction_zuora_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def refunded_transaction_zuora_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_zuora_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refunded_transaction_zuora_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def refunded_transaction_zuora_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_zuora_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def refunded_transaction_zuora_id_was; end

    sig { void }
    def refunded_transaction_zuora_id_will_change!; end

    sig { void }
    def restore_amount_in_subunits!; end

    sig { void }
    def restore_billing_transaction_id!; end

    sig { void }
    def restore_credit_balance_adjustment_number!; end

    sig { void }
    def restore_currency_code!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_invoiced_sponsorship_transfer_reversal_id!; end

    sig { void }
    def restore_paypal_id!; end

    sig { void }
    def restore_primary_reference_id!; end

    sig { void }
    def restore_refunded_transaction_credit_balance_adjustment_number!; end

    sig { void }
    def restore_refunded_transaction_paypal_id!; end

    sig { void }
    def restore_refunded_transaction_stripe_id!; end

    sig { void }
    def restore_refunded_transaction_zuora_id!; end

    sig { void }
    def restore_reversed_transfer_stripe_id!; end

    sig { void }
    def restore_sponsors_listing_id!; end

    sig { void }
    def restore_stripe_charge_id!; end

    sig { void }
    def restore_stripe_connect_account_id!; end

    sig { void }
    def restore_stripe_refund_id!; end

    sig { void }
    def restore_transaction_timestamp!; end

    sig { void }
    def restore_transaction_type!; end

    sig { void }
    def restore_zuora_refund_id!; end

    sig { void }
    def restore_zuora_transaction_id!; end

    sig { returns(T.nilable(::String)) }
    def reversed_transfer_stripe_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def reversed_transfer_stripe_id=(value); end

    sig { returns(T::Boolean) }
    def reversed_transfer_stripe_id?; end

    sig { returns(T.nilable(::String)) }
    def reversed_transfer_stripe_id_before_last_save; end

    sig { returns(T.untyped) }
    def reversed_transfer_stripe_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def reversed_transfer_stripe_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reversed_transfer_stripe_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reversed_transfer_stripe_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def reversed_transfer_stripe_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reversed_transfer_stripe_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reversed_transfer_stripe_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def reversed_transfer_stripe_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reversed_transfer_stripe_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def reversed_transfer_stripe_id_was; end

    sig { void }
    def reversed_transfer_stripe_id_will_change!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_amount_in_subunits; end

    sig { returns(T::Boolean) }
    def saved_change_to_amount_in_subunits?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_billing_transaction_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_transaction_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_credit_balance_adjustment_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_credit_balance_adjustment_number?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_currency_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_currency_code?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_invoiced_sponsorship_transfer_reversal_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_invoiced_sponsorship_transfer_reversal_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_paypal_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_paypal_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_primary_reference_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_primary_reference_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_refunded_transaction_credit_balance_adjustment_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_refunded_transaction_credit_balance_adjustment_number?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_refunded_transaction_paypal_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_refunded_transaction_paypal_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_refunded_transaction_stripe_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_refunded_transaction_stripe_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_refunded_transaction_zuora_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_refunded_transaction_zuora_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_reversed_transfer_stripe_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_reversed_transfer_stripe_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_sponsors_listing_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsors_listing_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_stripe_charge_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_stripe_charge_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_stripe_connect_account_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_stripe_connect_account_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_stripe_refund_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_stripe_refund_id?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_transaction_timestamp; end

    sig { returns(T::Boolean) }
    def saved_change_to_transaction_timestamp?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_transaction_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_transaction_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_zuora_refund_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_zuora_refund_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_zuora_transaction_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_zuora_transaction_id?; end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def sponsors_listing_id=(value); end

    sig { returns(T::Boolean) }
    def sponsors_listing_id?; end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id_before_last_save; end

    sig { returns(T.untyped) }
    def sponsors_listing_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsors_listing_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def sponsors_listing_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def sponsors_listing_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def sponsors_listing_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def sponsors_listing_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def sponsors_listing_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id_was; end

    sig { void }
    def sponsors_listing_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def stripe_charge_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def stripe_charge_id=(value); end

    sig { returns(T::Boolean) }
    def stripe_charge_id?; end

    sig { returns(T.nilable(::String)) }
    def stripe_charge_id_before_last_save; end

    sig { returns(T.untyped) }
    def stripe_charge_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def stripe_charge_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_charge_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_charge_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def stripe_charge_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def stripe_charge_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_charge_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def stripe_charge_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def stripe_charge_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def stripe_charge_id_was; end

    sig { void }
    def stripe_charge_id_will_change!; end

    sig { returns(::Integer) }
    def stripe_connect_account_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def stripe_connect_account_id=(value); end

    sig { returns(T::Boolean) }
    def stripe_connect_account_id?; end

    sig { returns(T.nilable(::Integer)) }
    def stripe_connect_account_id_before_last_save; end

    sig { returns(T.untyped) }
    def stripe_connect_account_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def stripe_connect_account_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def stripe_connect_account_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def stripe_connect_account_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def stripe_connect_account_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def stripe_connect_account_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def stripe_connect_account_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def stripe_connect_account_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def stripe_connect_account_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def stripe_connect_account_id_was; end

    sig { void }
    def stripe_connect_account_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def stripe_refund_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def stripe_refund_id=(value); end

    sig { returns(T::Boolean) }
    def stripe_refund_id?; end

    sig { returns(T.nilable(::String)) }
    def stripe_refund_id_before_last_save; end

    sig { returns(T.untyped) }
    def stripe_refund_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def stripe_refund_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_refund_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_refund_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def stripe_refund_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def stripe_refund_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_refund_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def stripe_refund_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def stripe_refund_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def stripe_refund_id_was; end

    sig { void }
    def stripe_refund_id_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def transaction_timestamp; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def transaction_timestamp=(value); end

    sig { returns(T::Boolean) }
    def transaction_timestamp?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def transaction_timestamp_before_last_save; end

    sig { returns(T.untyped) }
    def transaction_timestamp_before_type_cast; end

    sig { returns(T::Boolean) }
    def transaction_timestamp_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def transaction_timestamp_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def transaction_timestamp_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def transaction_timestamp_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def transaction_timestamp_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def transaction_timestamp_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def transaction_timestamp_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def transaction_timestamp_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def transaction_timestamp_was; end

    sig { void }
    def transaction_timestamp_will_change!; end

    sig { returns(::String) }
    def transaction_type; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def transaction_type=(value); end

    sig { returns(T::Boolean) }
    def transaction_type?; end

    sig { returns(T.nilable(::String)) }
    def transaction_type_before_last_save; end

    sig { returns(T.untyped) }
    def transaction_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def transaction_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def transaction_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def transaction_type_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def transaction_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def transaction_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def transaction_type_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def transaction_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def transaction_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def transaction_type_was; end

    sig { void }
    def transaction_type_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_amount_in_subunits?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_transaction_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_credit_balance_adjustment_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_currency_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invoiced_sponsorship_transfer_reversal_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_paypal_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_primary_reference_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_refunded_transaction_credit_balance_adjustment_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_refunded_transaction_paypal_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_refunded_transaction_stripe_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_refunded_transaction_zuora_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reversed_transfer_stripe_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsors_listing_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_stripe_charge_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_stripe_connect_account_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_stripe_refund_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_transaction_timestamp?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_transaction_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_zuora_refund_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_zuora_transaction_id?; end

    sig { returns(T.nilable(::String)) }
    def zuora_refund_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def zuora_refund_id=(value); end

    sig { returns(T::Boolean) }
    def zuora_refund_id?; end

    sig { returns(T.nilable(::String)) }
    def zuora_refund_id_before_last_save; end

    sig { returns(T.untyped) }
    def zuora_refund_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def zuora_refund_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_refund_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_refund_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_refund_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_refund_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_refund_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_refund_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_refund_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def zuora_refund_id_was; end

    sig { void }
    def zuora_refund_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def zuora_transaction_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def zuora_transaction_id=(value); end

    sig { returns(T::Boolean) }
    def zuora_transaction_id?; end

    sig { returns(T.nilable(::String)) }
    def zuora_transaction_id_before_last_save; end

    sig { returns(T.untyped) }
    def zuora_transaction_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def zuora_transaction_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_transaction_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_transaction_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_transaction_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_transaction_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_transaction_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_transaction_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_transaction_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def zuora_transaction_id_was; end

    sig { void }
    def zuora_transaction_id_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def chargeback(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def chargeback_reversal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_sponsors_listing_and_since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_stripe_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def github_match(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def github_match_reversal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def has_billing_transaction(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def has_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_date_range(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def inter_account_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invoice_credit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def manual_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def most_recent_transaction_timestamp_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def net_sponsors_matches(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def net_transfers(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def net_transfers_or_no_transaction_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def net_transfers_with_matches(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_chargeback(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_chargeback_reversal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_github_match(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_github_match_reversal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_inter_account_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_invoice_credit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_manual_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_payment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_payout(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_payout_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_refund(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_transfer_reversal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_transfers_paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def payment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def payments_for_charge_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def payout(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def payout_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def refund(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def since_last_sponsors_payout(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sponsors_listing_transfers(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def transfer_reversal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def transfers_paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_primary_reference_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Billing::PayoutsLedgerEntry } }

    sig { returns(T::Array[::Billing::PayoutsLedgerEntry]) }
    def to_a; end

    sig { returns(T::Array[::Billing::PayoutsLedgerEntry]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Billing::PayoutsLedgerEntry } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Billing::PayoutsLedgerEntry } }

    sig do
      params(
        records: T.any(::Billing::PayoutsLedgerEntry, T::Enumerable[T.any(::Billing::PayoutsLedgerEntry, T::Enumerable[::Billing::PayoutsLedgerEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Billing::PayoutsLedgerEntry, T::Enumerable[T.any(::Billing::PayoutsLedgerEntry, T::Enumerable[::Billing::PayoutsLedgerEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Billing::PayoutsLedgerEntry, T::Enumerable[T.any(::Billing::PayoutsLedgerEntry, T::Enumerable[::Billing::PayoutsLedgerEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Billing::PayoutsLedgerEntry]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Billing::PayoutsLedgerEntry, T::Enumerable[T.any(::Billing::PayoutsLedgerEntry, T::Enumerable[::Billing::PayoutsLedgerEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Billing::PayoutsLedgerEntry, T::Enumerable[T.any(::Billing::PayoutsLedgerEntry, T::Enumerable[::Billing::PayoutsLedgerEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Billing::PayoutsLedgerEntry, T::Enumerable[T.any(::Billing::PayoutsLedgerEntry, T::Enumerable[::Billing::PayoutsLedgerEntry])])
      ).returns(T::Array[::Billing::PayoutsLedgerEntry])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Billing::PayoutsLedgerEntry]) }
    def target; end

    sig { returns(T::Array[::Billing::PayoutsLedgerEntry]) }
    def to_a; end

    sig { returns(T::Array[::Billing::PayoutsLedgerEntry]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Billing::PayoutsLedgerEntry } }

    sig { returns(T::Array[::Billing::PayoutsLedgerEntry]) }
    def to_a; end

    sig { returns(T::Array[::Billing::PayoutsLedgerEntry]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Billing::PayoutsLedgerEntry } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

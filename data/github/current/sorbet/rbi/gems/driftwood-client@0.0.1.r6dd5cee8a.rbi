# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `driftwood-client` gem.
# Please instead update this file by running `bin/tapioca gem driftwood-client`.

# source://driftwood-client//client/ruby/lib/twirp/rpc/auditlog/v1/query_error_pb.rb#17
module Driftwood; end

# source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request.rb#7
module Driftwood::AsyncQueryTwirpRequest
  include ::Driftwood::TwirpUtil
  extend ::Forwardable

  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request.rb#26
  def initialize(client, options = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request.rb#19
  def client; end

  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request.rb#32
  def execute; end

  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request.rb#40
  def get_request_class(name); end

  # @return [Boolean]
  #
  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request.rb#36
  def is_v1?; end

  # Returns the value of attribute request.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request.rb#19
  def request; end

  # Returns the value of attribute version.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request.rb#19
  def version; end
end

# source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request.rb#11
class Driftwood::AsyncQueryTwirpRequest::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request.rb#14
  def initialize(twirp_response: T.unsafe(nil)); end

  # Returns the value of attribute twirp_response.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request.rb#12
  def twirp_response; end
end

# source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request/fetch_results.rb#7
class Driftwood::AsyncQueryTwirpRequest::FetchResults
  include ::Driftwood::TwirpUtil
  include ::Driftwood::AsyncQueryTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request/fetch_results.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request/fetch_results.rb#22
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request/start.rb#7
class Driftwood::AsyncQueryTwirpRequest::Start
  include ::Driftwood::TwirpUtil
  include ::Driftwood::AsyncQueryTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request/start.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request/start.rb#23
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request/status.rb#7
class Driftwood::AsyncQueryTwirpRequest::Status
  include ::Driftwood::TwirpUtil
  include ::Driftwood::AsyncQueryTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request/status.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/async_query_twirp_request/status.rb#19
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/auditlog/v1/query_error_pb.rb#18
module Driftwood::Auditlog; end

# source://driftwood-client//client/ruby/lib/twirp/rpc/auditlog/v1/query_error_pb.rb#19
module Driftwood::Auditlog::V1; end

class Driftwood::Auditlog::V1::AsyncStafftoolsAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::AsyncStafftoolsAuditEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::AsyncStafftoolsQueryStartRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::AsyncStafftoolsQueryStartResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::AsyncStafftoolsQueryStatusRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::AsyncStafftoolsQueryStatusResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/auditlog/v1/audit_log_twirp.rb#35
class Driftwood::Auditlog::V1::AuditLogClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def export_business_git_audit_entries_v2(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def export_git_audit_entries_fetch_v2(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def export_org_git_audit_entries_v2(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_async_query_stafftools_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_async_query_stafftools_status(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_audit_entry(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_business_all_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_business_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_business_git_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_business_user_dormancy(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_emu_all_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_emu_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_emu_git_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_org_all_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_org_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_org_git_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_project_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_stafftools_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_user2_fa_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_user_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query_user_dormancy_audit_entries(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def start_async_query_stafftools_audit_entries(input, req_opts = T.unsafe(nil)); end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/auditlog/v1/audit_log_twirp.rb#8
class Driftwood::Auditlog::V1::AuditLogService < ::Twirp::Service; end

class Driftwood::Auditlog::V1::BusinessAllAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::BusinessAllAuditEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::BusinessAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::BusinessAuditEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::BusinessGitAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::BusinessGitAuditEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::BusinessUserDormancyRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::BusinessUserDormancyResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::ExportBusinessGitAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::ExportGitAuditEntriesFetchRequestV2
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::ExportGitAuditEntriesFetchResponseV2
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::ExportGitAuditEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::ExportOrgGitAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::GetAuditEntryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::GetAuditEntryResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::OrgAllAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::OrgAllAuditEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::OrganizationAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::OrganizationAuditEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::OrganizationGitAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::OrganizationGitAuditEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::ProjectAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::ProjectAuditEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::QueryError
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::Region
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Driftwood::Auditlog::V1::SortDirection
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/auditlog/v1/sort_direction_pb.rb#19
Driftwood::Auditlog::V1::SortDirection::SORT_DIRECTION_ASC = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/auditlog/v1/sort_direction_pb.rb#19
Driftwood::Auditlog::V1::SortDirection::SORT_DIRECTION_DESC = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/auditlog/v1/sort_direction_pb.rb#19
Driftwood::Auditlog::V1::SortDirection::SORT_DIRECTION_INVALID = T.let(T.unsafe(nil), Integer)

class Driftwood::Auditlog::V1::StafftoolsAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::StafftoolsAuditEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::User2FAAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::UserAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::UserAuditEntriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Auditlog::V1::UserDormancyAuditEntriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request.rb#7
module Driftwood::ExportTwirpRequest
  include ::Driftwood::TwirpUtil
  extend ::Forwardable

  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request.rb#26
  def initialize(client, options = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request.rb#19
  def client; end

  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request.rb#32
  def execute; end

  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request.rb#40
  def get_request_class(name, v2: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request.rb#36
  def is_v1?; end

  # Returns the value of attribute request.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request.rb#19
  def request; end

  # Returns the value of attribute version.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request.rb#19
  def version; end
end

# source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/business_git.rb#7
class Driftwood::ExportTwirpRequest::BusinessGit
  include ::Driftwood::TwirpUtil
  include ::Driftwood::ExportTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/business_git.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/business_git.rb#23
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/business_git_v2.rb#7
class Driftwood::ExportTwirpRequest::BusinessGitV2 < ::Driftwood::ExportTwirpRequest::BusinessGit
  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/business_git_v2.rb#8
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request.rb#11
class Driftwood::ExportTwirpRequest::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request.rb#14
  def initialize(twirp_response: T.unsafe(nil)); end

  # Returns the value of attribute twirp_response.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request.rb#12
  def twirp_response; end
end

# source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/org_git.rb#7
class Driftwood::ExportTwirpRequest::OrgGit
  include ::Driftwood::TwirpUtil
  include ::Driftwood::ExportTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/org_git.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/org_git.rb#23
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/org_git_v2.rb#7
class Driftwood::ExportTwirpRequest::OrgGitV2 < ::Driftwood::ExportTwirpRequest::OrgGit
  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/org_git_v2.rb#8
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/results_git.rb#7
class Driftwood::ExportTwirpRequest::ResultsGit
  include ::Driftwood::TwirpUtil
  include ::Driftwood::ExportTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/results_git.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/results_git.rb#22
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/results_git_v2.rb#7
class Driftwood::ExportTwirpRequest::ResultsGitV2 < ::Driftwood::ExportTwirpRequest::ResultsGit
  # source://driftwood-client//client/ruby/lib/driftwood/export_twirp_request/results_git_v2.rb#8
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#75
module Driftwood::Exports; end

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#76
module Driftwood::Exports::V1; end

class Driftwood::Exports::V1::CheckStatusRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Exports::V1::CheckStatusResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Driftwood::Exports::V1::CheckStatusResponse::StatusType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#81
Driftwood::Exports::V1::CheckStatusResponse::StatusType::STATUS_TYPE_FAILED = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#81
Driftwood::Exports::V1::CheckStatusResponse::StatusType::STATUS_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#81
Driftwood::Exports::V1::CheckStatusResponse::StatusType::STATUS_TYPE_STARTED = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#81
Driftwood::Exports::V1::CheckStatusResponse::StatusType::STATUS_TYPE_SUCCESSFUL = T.let(T.unsafe(nil), Integer)

module Driftwood::Exports::V1::ExportType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#84
Driftwood::Exports::V1::ExportType::EXPORT_TYPE_GIT = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#84
Driftwood::Exports::V1::ExportType::EXPORT_TYPE_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#84
Driftwood::Exports::V1::ExportType::EXPORT_TYPE_WEB = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_twirp.rb#16
class Driftwood::Exports::V1::ExportsClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def check_status(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def fetch_result(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def start(input, req_opts = T.unsafe(nil)); end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_twirp.rb#8
class Driftwood::Exports::V1::ExportsService < ::Twirp::Service; end

class Driftwood::Exports::V1::FetchResultRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Exports::V1::FetchResultResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Driftwood::Exports::V1::FormatType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#86
Driftwood::Exports::V1::FormatType::FORMAT_TYPE_CSV = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#86
Driftwood::Exports::V1::FormatType::FORMAT_TYPE_JSON = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#86
Driftwood::Exports::V1::FormatType::FORMAT_TYPE_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Driftwood::Exports::V1::StartRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Exports::V1::StartResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Driftwood::Exports::V1::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#85
Driftwood::Exports::V1::SubjectType::SUBJECT_TYPE_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#85
Driftwood::Exports::V1::SubjectType::SUBJECT_TYPE_EMU_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#85
Driftwood::Exports::V1::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#85
Driftwood::Exports::V1::SubjectType::SUBJECT_TYPE_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/exports/v1/exports_pb.rb#85
Driftwood::Exports::V1::SubjectType::SUBJECT_TYPE_USER = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request.rb#7
module Driftwood::ExportsTwirpRequest
  include ::Driftwood::TwirpUtil
  extend ::Forwardable

  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request.rb#26
  def initialize(client, options = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request.rb#19
  def client; end

  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request.rb#32
  def execute; end

  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request.rb#40
  def get_request_class(name); end

  # @return [Boolean]
  #
  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request.rb#36
  def is_v1?; end

  # Returns the value of attribute request.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request.rb#19
  def request; end

  # Returns the value of attribute version.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request.rb#19
  def version; end
end

# source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request/check_status.rb#7
class Driftwood::ExportsTwirpRequest::CheckStatus
  include ::Driftwood::TwirpUtil
  include ::Driftwood::ExportsTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request/check_status.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request/check_status.rb#23
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request.rb#11
class Driftwood::ExportsTwirpRequest::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request.rb#14
  def initialize(twirp_response: T.unsafe(nil)); end

  # Returns the value of attribute twirp_response.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request.rb#12
  def twirp_response; end
end

# source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request/fetch_result.rb#7
class Driftwood::ExportsTwirpRequest::FetchResult
  include ::Driftwood::TwirpUtil
  include ::Driftwood::ExportsTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request/fetch_result.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request/fetch_result.rb#24
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request/start.rb#7
class Driftwood::ExportsTwirpRequest::Start
  include ::Driftwood::TwirpUtil
  include ::Driftwood::ExportsTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request/start.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/exports_twirp_request/start.rb#27
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#4
class Driftwood::SearchResults
  include ::Prelude::Enumerator
  include ::Enumerable
  extend ::Forwardable

  # @return [SearchResults] a new instance of SearchResults
  #
  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#25
  def initialize(resp, req, version); end

  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#76
  def [](index); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def after_cursor(*args, **_arg1, &block); end

  # Returns the value of attribute aggregations.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#8
  def aggregations; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def before_cursor(*args, **_arg1, &block); end

  # Returns the value of attribute cost.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#8
  def cost; end

  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#63
  def each(&block); end

  # @return [Boolean]
  #
  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#67
  def empty?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def has_next_page?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def has_previous_page?(*args, **_arg1, &block); end

  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#71
  def length; end

  # Returns the value of attribute parsed_query.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#8
  def parsed_query; end

  # Returns the value of attribute query_errors.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#8
  def query_errors; end

  # Returns the value of attribute request.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#8
  def request; end

  # Returns the value of attribute results.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#8
  def results; end

  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#71
  def size; end

  # Returns the value of attribute took.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#8
  def took; end

  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#80
  def total; end

  # Returns the value of attribute total_count.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#8
  def total_count; end

  # Returns the value of attribute version.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#8
  def version; end

  # Returns the value of attribute warnings.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/search_results.rb#8
  def warnings; end
end

# source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request.rb#7
module Driftwood::StreamTwirpRequest
  include ::Driftwood::TwirpUtil
  extend ::Forwardable

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request.rb#26
  def initialize(client, options = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request.rb#19
  def client; end

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request.rb#32
  def execute; end

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request.rb#40
  def get_request_class(name); end

  # @return [Boolean]
  #
  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request.rb#36
  def is_v1?; end

  # Returns the value of attribute request.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request.rb#19
  def request; end

  # Returns the value of attribute version.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request.rb#19
  def version; end
end

# source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/blob_check.rb#7
class Driftwood::StreamTwirpRequest::AzureBlobCheck
  include ::Driftwood::TwirpUtil
  include ::Driftwood::StreamTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/blob_check.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/blob_check.rb#20
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/hubs_check.rb#7
class Driftwood::StreamTwirpRequest::AzureHubsCheck
  include ::Driftwood::TwirpUtil
  include ::Driftwood::StreamTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/hubs_check.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/hubs_check.rb#21
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/datadog_check.rb#7
class Driftwood::StreamTwirpRequest::DatadogCheck
  include ::Driftwood::TwirpUtil
  include ::Driftwood::StreamTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/datadog_check.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/datadog_check.rb#21
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request.rb#11
class Driftwood::StreamTwirpRequest::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request.rb#14
  def initialize(twirp_response: T.unsafe(nil)); end

  # Returns the value of attribute twirp_response.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request.rb#12
  def twirp_response; end
end

# source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/gcp_storage_check.rb#7
class Driftwood::StreamTwirpRequest::GcpStorageCheck
  include ::Driftwood::TwirpUtil
  include ::Driftwood::StreamTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/gcp_storage_check.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/gcp_storage_check.rb#21
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/s3_check.rb#7
class Driftwood::StreamTwirpRequest::S3Check
  include ::Driftwood::TwirpUtil
  include ::Driftwood::StreamTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/s3_check.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/s3_check.rb#26
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/splunk_check.rb#7
class Driftwood::StreamTwirpRequest::SplunkCheck
  include ::Driftwood::TwirpUtil
  include ::Driftwood::StreamTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/splunk_check.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/splunk_check.rb#23
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/status.rb#7
class Driftwood::StreamTwirpRequest::Status
  include ::Driftwood::TwirpUtil
  include ::Driftwood::StreamTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/status.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/status.rb#15
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/syslog_check.rb#7
class Driftwood::StreamTwirpRequest::SyslogCheck
  include ::Driftwood::TwirpUtil
  include ::Driftwood::StreamTwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/syslog_check.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/stream_twirp_request/syslog_check.rb#21
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#145
module Driftwood::Streaming; end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#146
module Driftwood::Streaming::V1; end

class Driftwood::Streaming::V1::StreamAzureBlobStorageCheckRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Driftwood::Streaming::V1::StreamAzureBlobStorageCheckRequest::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#158
Driftwood::Streaming::V1::StreamAzureBlobStorageCheckRequest::SubjectType::SUBJECT_TYPE_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#158
Driftwood::Streaming::V1::StreamAzureBlobStorageCheckRequest::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#158
Driftwood::Streaming::V1::StreamAzureBlobStorageCheckRequest::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

class Driftwood::Streaming::V1::StreamAzureBlobStorageCheckResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Streaming::V1::StreamAzureHubsCheckRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Driftwood::Streaming::V1::StreamAzureHubsCheckRequest::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#151
Driftwood::Streaming::V1::StreamAzureHubsCheckRequest::SubjectType::SUBJECT_TYPE_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#151
Driftwood::Streaming::V1::StreamAzureHubsCheckRequest::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#151
Driftwood::Streaming::V1::StreamAzureHubsCheckRequest::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

class Driftwood::Streaming::V1::StreamAzureHubsCheckResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Streaming::V1::StreamDatadogCheckRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Driftwood::Streaming::V1::StreamDatadogCheckRequest::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#168
Driftwood::Streaming::V1::StreamDatadogCheckRequest::SubjectType::SUBJECT_TYPE_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#168
Driftwood::Streaming::V1::StreamDatadogCheckRequest::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#168
Driftwood::Streaming::V1::StreamDatadogCheckRequest::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

class Driftwood::Streaming::V1::StreamDatadogCheckResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Streaming::V1::StreamGcpStorageCheckRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Driftwood::Streaming::V1::StreamGcpStorageCheckRequest::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#161
Driftwood::Streaming::V1::StreamGcpStorageCheckRequest::SubjectType::SUBJECT_TYPE_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#161
Driftwood::Streaming::V1::StreamGcpStorageCheckRequest::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#161
Driftwood::Streaming::V1::StreamGcpStorageCheckRequest::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

class Driftwood::Streaming::V1::StreamGcpStorageCheckResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Streaming::V1::StreamS3CheckRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Driftwood::Streaming::V1::StreamS3CheckRequest::AuthenticationType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#155
Driftwood::Streaming::V1::StreamS3CheckRequest::AuthenticationType::AUTHENTICATION_TYPE_ACCESS_KEYS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#155
Driftwood::Streaming::V1::StreamS3CheckRequest::AuthenticationType::AUTHENTICATION_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#155
Driftwood::Streaming::V1::StreamS3CheckRequest::AuthenticationType::AUTHENTICATION_TYPE_OIDC_AUDIT_LOG = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#155
Driftwood::Streaming::V1::StreamS3CheckRequest::AuthenticationType::AUTHENTICATION_TYPE_OIDC_GITHUB = T.let(T.unsafe(nil), Integer)

module Driftwood::Streaming::V1::StreamS3CheckRequest::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#154
Driftwood::Streaming::V1::StreamS3CheckRequest::SubjectType::SUBJECT_TYPE_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#154
Driftwood::Streaming::V1::StreamS3CheckRequest::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#154
Driftwood::Streaming::V1::StreamS3CheckRequest::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

class Driftwood::Streaming::V1::StreamS3CheckResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Streaming::V1::StreamSplunkCheckRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Driftwood::Streaming::V1::StreamSplunkCheckRequest::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#148
Driftwood::Streaming::V1::StreamSplunkCheckRequest::SubjectType::SUBJECT_TYPE_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#148
Driftwood::Streaming::V1::StreamSplunkCheckRequest::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#148
Driftwood::Streaming::V1::StreamSplunkCheckRequest::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

class Driftwood::Streaming::V1::StreamSplunkCheckResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Driftwood::Streaming::V1::StreamSyslogCheckRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Driftwood::Streaming::V1::StreamSyslogCheckRequest::ProtocolType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#165
Driftwood::Streaming::V1::StreamSyslogCheckRequest::ProtocolType::PROTOCOL_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#165
Driftwood::Streaming::V1::StreamSyslogCheckRequest::ProtocolType::PROTOCOL_TYPE_TCP = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#165
Driftwood::Streaming::V1::StreamSyslogCheckRequest::ProtocolType::PROTOCOL_TYPE_TCP6 = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#165
Driftwood::Streaming::V1::StreamSyslogCheckRequest::ProtocolType::PROTOCOL_TYPE_TCP6_TLS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#165
Driftwood::Streaming::V1::StreamSyslogCheckRequest::ProtocolType::PROTOCOL_TYPE_TCP_TLS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#165
Driftwood::Streaming::V1::StreamSyslogCheckRequest::ProtocolType::PROTOCOL_TYPE_UDP = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#165
Driftwood::Streaming::V1::StreamSyslogCheckRequest::ProtocolType::PROTOCOL_TYPE_UDP6 = T.let(T.unsafe(nil), Integer)

module Driftwood::Streaming::V1::StreamSyslogCheckRequest::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#164
Driftwood::Streaming::V1::StreamSyslogCheckRequest::SubjectType::SUBJECT_TYPE_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#164
Driftwood::Streaming::V1::StreamSyslogCheckRequest::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_pb.rb#164
Driftwood::Streaming::V1::StreamSyslogCheckRequest::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

class Driftwood::Streaming::V1::StreamSyslogCheckResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_twirp.rb#20
class Driftwood::Streaming::V1::StreamingClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def stream_azure_blob_storage_check(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def stream_azure_hubs_check(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def stream_datadog_check(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def stream_gcp_storage_check(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def stream_s3_check(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def stream_splunk_check(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def stream_syslog_check(input, req_opts = T.unsafe(nil)); end
end

# source://driftwood-client//client/ruby/lib/twirp/rpc/streaming/v1/streaming_twirp.rb#8
class Driftwood::Streaming::V1::StreamingService < ::Twirp::Service; end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#7
module Driftwood::TwirpRequest
  include ::Driftwood::TwirpUtil
  extend ::Forwardable

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#34
  def initialize(client, options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def after(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def after=(*args, **_arg1, &block); end

  # Returns the value of attribute after_cursor.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#19
  def after_cursor; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def before(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def before=(*args, **_arg1, &block); end

  # Returns the value of attribute before_cursor.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#19
  def before_cursor; end

  # Returns the value of attribute client.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#19
  def client; end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#46
  def execute(sanitize: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#70
  def get_request_class(name); end

  # @return [Boolean]
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#52
  def has_next_page?; end

  # @return [Boolean]
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#56
  def has_previous_page?; end

  # @return [Boolean]
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#66
  def is_v1?; end

  # Returns the value of attribute parsed_query.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#19
  def parsed_query; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def per_page(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def per_page=(*args, **_arg1, &block); end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#60
  def qualifiers; end

  # Returns the value of attribute request.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#19
  def request; end

  # Returns the value of attribute version.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#19
  def version; end

  private

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#81
  def extract_data_from_response(data); end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_request/business_query.rb#7
class Driftwood::TwirpRequest::BusinessQuery
  include ::Driftwood::TwirpUtil
  include ::Driftwood::TwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/business_query.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/business_query.rb#40
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_request/business_user_dormancy_query.rb#7
class Driftwood::TwirpRequest::BusinessUserDormancyQuery
  include ::Driftwood::TwirpUtil
  include ::Driftwood::TwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/business_user_dormancy_query.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/business_user_dormancy_query.rb#19
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_request/emu_query.rb#8
class Driftwood::TwirpRequest::EmuQuery
  include ::Driftwood::TwirpUtil
  include ::Driftwood::TwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/emu_query.rb#11
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/emu_query.rb#40
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#11
class Driftwood::TwirpRequest::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#14
  def initialize(twirp_response: T.unsafe(nil)); end

  # Returns the value of attribute twirp_response.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request.rb#12
  def twirp_response; end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_request/get_audit_entry.rb#7
class Driftwood::TwirpRequest::GetAuditEntry
  include ::Driftwood::TwirpUtil
  include ::Driftwood::TwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/get_audit_entry.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/get_audit_entry.rb#17
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_request/org_query.rb#7
class Driftwood::TwirpRequest::OrgQuery
  include ::Driftwood::TwirpUtil
  include ::Driftwood::TwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/org_query.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/org_query.rb#52
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_request/project_query.rb#7
class Driftwood::TwirpRequest::ProjectQuery
  include ::Driftwood::TwirpUtil
  include ::Driftwood::TwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/project_query.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/project_query.rb#24
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_request/stafftools_query.rb#7
class Driftwood::TwirpRequest::StafftoolsQuery
  include ::Driftwood::TwirpUtil
  include ::Driftwood::TwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/stafftools_query.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/stafftools_query.rb#23
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_request/user_2fa_query.rb#7
class Driftwood::TwirpRequest::User2FAQuery
  include ::Driftwood::TwirpUtil
  include ::Driftwood::TwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/user_2fa_query.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/user_2fa_query.rb#23
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_request/user_dormancy_query.rb#7
class Driftwood::TwirpRequest::UserDormancyQuery
  include ::Driftwood::TwirpUtil
  include ::Driftwood::TwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/user_dormancy_query.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/user_dormancy_query.rb#23
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_request/user_query.rb#7
class Driftwood::TwirpRequest::UserQuery
  include ::Driftwood::TwirpUtil
  include ::Driftwood::TwirpRequest

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/user_query.rb#10
  def build_request(options); end

  # source://driftwood-client//client/ruby/lib/driftwood/twirp_request/user_query.rb#28
  def client_method; end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_util.rb#6
module Driftwood::TwirpUtil
  # Execute a twirp query and return the response data
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_util.rb#23
  def execute_query(client:); end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_util.rb#7
class Driftwood::TwirpUtil::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_util.rb#10
  def initialize(twirp_response: T.unsafe(nil)); end

  # Returns the value of attribute twirp_response.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/twirp_util.rb#8
  def twirp_response; end
end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_util.rb#18
class Driftwood::TwirpUtil::InvalidArgumentError < ::Driftwood::TwirpUtil::Error; end

# source://driftwood-client//client/ruby/lib/driftwood/twirp_util.rb#20
class Driftwood::TwirpUtil::RateLimitedError < ::Driftwood::TwirpUtil::Error; end

# source://driftwood-client//client/ruby/lib/driftwood/v1/hmac_middleware.rb#7
module Driftwood::V1; end

# source://driftwood-client//client/ruby/lib/driftwood/v1/hmac_middleware.rb#8
class Driftwood::V1::Client
  # @return [Client] a new instance of Client
  #
  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#36
  def initialize(host, faraday_options: T.unsafe(nil), hmac_key: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#303
  def async_stafftools_query_check_status(operation_id:, feature_flags:); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#310
  def async_stafftools_query_fetch_results(query_id:, per_page:, after:, before:, feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#292
  def async_stafftools_query_start(query_id:, phrase:, per_page:, after:, before:, feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#195
  def business_all_query(business_id:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), phrase: T.unsafe(nil), api_request: T.unsafe(nil), direction: T.unsafe(nil), feature_flags: T.unsafe(nil), export_request: T.unsafe(nil), disclose_ip_address: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#159
  def business_api_query(business_id:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), phrase: T.unsafe(nil), api_request: T.unsafe(nil), direction: T.unsafe(nil), feature_flags: T.unsafe(nil), export_request: T.unsafe(nil), disclose_ip_address: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#141
  def business_git_query(business_id:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), phrase: T.unsafe(nil), api_request: T.unsafe(nil), direction: T.unsafe(nil), feature_flags: T.unsafe(nil), export_request: T.unsafe(nil), disclose_ip_address: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#105
  def business_query(business_id:, phrase:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), api_request: T.unsafe(nil), direction: T.unsafe(nil), feature_flags: T.unsafe(nil), export_request: T.unsafe(nil), disclose_ip_address: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#260
  def dormant_business_user_query(user_id:, business_id:); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#248
  def dormant_user_query(user_id:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#213
  def emu_all_query(business_id:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), phrase: T.unsafe(nil), api_request: T.unsafe(nil), direction: T.unsafe(nil), feature_flags: T.unsafe(nil), export_request: T.unsafe(nil), disclose_ip_address: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#177
  def emu_git_query(business_id:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), phrase: T.unsafe(nil), api_request: T.unsafe(nil), direction: T.unsafe(nil), feature_flags: T.unsafe(nil), export_request: T.unsafe(nil), disclose_ip_address: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#123
  def emu_query(business_id:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), phrase: T.unsafe(nil), api_request: T.unsafe(nil), direction: T.unsafe(nil), feature_flags: T.unsafe(nil), export_request: T.unsafe(nil), disclose_ip_address: T.unsafe(nil)); end

  # Start a Git event export job for a business. Query from start_time
  # to end_time and use the provided token to identify the job.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#349
  def export_business_git(business_id:, start_time:, end_time:, region: T.unsafe(nil), token: T.unsafe(nil), feature_flags: T.unsafe(nil)); end

  # Start a Git event export job for a business. Query from start_time
  # to end_time and use the provided token to identify the job.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#404
  def export_business_git_v2(business_id:, start_time:, end_time:, region: T.unsafe(nil), token: T.unsafe(nil), feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#586
  def export_check_git_status(subject_id:, subject_type:, format_type:, export_id:, feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#549
  def export_check_web_status(subject_id:, subject_type:, format_type:, export_id:, feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#597
  def export_fetch_git_result(subject_id:, subject_type:, format_type:, export_id:, chunk_idx:, feature_flags: T.unsafe(nil)); end

  # Fetch the results for a Git event export job.
  #
  # Parameters:
  #
  #   id                - organzation or business id
  #   only_check_state  - boolean to tell whether we only want to check the state
  #                       and not download the zip file
  #   token             - token that identifies the job
  #   region            - region where this export job takes place
  #
  # Returns a hash that contains:
  #
  #   finished          - whether the job is complete
  #   successful        - whether the job finished successfully
  #   json_zip          - the zip file containing the results if only_check_state=false
  #
  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#377
  def export_fetch_results(id:, only_check_state:, region: T.unsafe(nil), token: T.unsafe(nil), feature_flags: T.unsafe(nil)); end

  # Fetch the results for a Git event export job.
  #
  # Parameters:
  #
  #   id                - organzation or business id
  #   only_check_state  - boolean to tell whether we only want to check the state
  #                       and not download the zip file
  #   token             - token that identifies the job
  #   chunk_id          - chunk ID to fetch
  #   region            - region where this export job takes place
  #
  # Returns a hash that contains:
  #
  #   finished          - whether the job is complete
  #   successful        - whether the job finished successfully
  #   json_gzip         - the gzip file containing the chunk if only_check_state=false
  #
  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#433
  def export_fetch_results_v2(id:, only_check_state:, region: T.unsafe(nil), token: T.unsafe(nil), chunk_id: T.unsafe(nil), feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#560
  def export_fetch_web_result(subject_id:, subject_type:, format_type:, export_id:, chunk_idx:, feature_flags: T.unsafe(nil)); end

  # Start a Git event export job for an organization. Query from start_time
  # to end_time and use the provided token to identify the job.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#335
  def export_org_git(organization_id:, start_time:, end_time:, region: T.unsafe(nil), token: T.unsafe(nil), feature_flags: T.unsafe(nil)); end

  # Start a Git event export job for an organization. Query from start_time
  # to end_time and use the provided token to identify the job.
  #
  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#390
  def export_org_git_v2(organization_id:, start_time:, end_time:, region: T.unsafe(nil), token: T.unsafe(nil), feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#572
  def export_start_git(subject_id:, subject_type:, format_type:, export_id:, key_id:, encrypted_phrase:, disclose_ip_address: T.unsafe(nil), feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#534
  def export_start_web(subject_id:, subject_type:, format_type:, export_id:, key_id:, encrypted_phrase:, disclose_ip_address: T.unsafe(nil), feature_flags: T.unsafe(nil), non_sso_org_ids: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#445
  def get_audit_entry(id:, feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#86
  def org_all_query(org_id:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), phrase: T.unsafe(nil), api_request: T.unsafe(nil), direction: T.unsafe(nil), aggregations: T.unsafe(nil), feature_flags: T.unsafe(nil), export_request: T.unsafe(nil), disclose_ip_address: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#67
  def org_git_query(org_id:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), phrase: T.unsafe(nil), api_request: T.unsafe(nil), direction: T.unsafe(nil), aggregations: T.unsafe(nil), feature_flags: T.unsafe(nil), export_request: T.unsafe(nil), disclose_ip_address: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#46
  def org_query(org_id:, phrase:, per_page:, public_platform: T.unsafe(nil), direction: T.unsafe(nil), limit_history: T.unsafe(nil), after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), api_request: T.unsafe(nil), aggregations: T.unsafe(nil), feature_flags: T.unsafe(nil), export_request: T.unsafe(nil), disclose_ip_address: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#320
  def project_query(project_id:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), latest_allowed_entry_time: T.unsafe(nil), feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#280
  def stafftools_query(phrase:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#472
  def stream_azure_blob_check(subject_id:, key_id:, encrypted_sas_url:); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#463
  def stream_azure_hubs_check(subject_id:, name:, key_id:, encrypted_connstring:); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#521
  def stream_datadog_check(subject_id:, site:, key_id:, encrypted_token:); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#503
  def stream_gcp_storage_check(subject_id:, bucket:, key_id:, encrypted_json_credentials:); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#480
  def stream_s3_access_keys_check(subject_id:, bucket:, key_id:, encrypted_access_key_id:, encrypted_secret_key:, region:); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#492
  def stream_s3_oidc_check(subject_id:, subject_name:, bucket:, arn_role:, region:); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#452
  def stream_splunk_check(subject_id:, domain:, port:, key_id:, encrypted_token:, ssl_verify:); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#530
  def stream_status(subject_id:); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#512
  def stream_syslog_check(subject_id:, protocol_type:, server_address:, peer_tls_cert:); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#268
  def user_2fa_query(user_id:, per_page:, after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), feature_flags: T.unsafe(nil)); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#231
  def user_query(user_id:, per_page:, phrase: T.unsafe(nil), after: T.unsafe(nil), before: T.unsafe(nil), region: T.unsafe(nil), allowlist: T.unsafe(nil), api_request: T.unsafe(nil), feature_flags: T.unsafe(nil), export_request: T.unsafe(nil), non_sso_org_ids: T.unsafe(nil)); end

  private

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#620
  def exports_twirp_client; end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#624
  def faraday; end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#638
  def request_version; end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#632
  def sort_direction(direction); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#616
  def streaming_twirp_client; end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#612
  def twirp_client; end
end

# source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#31
Driftwood::V1::Client::FORMAT_CSV = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#30
Driftwood::V1::Client::FORMAT_JSON = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#33
Driftwood::V1::Client::GIT_EXPORT = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/driftwood/v1/hmac_middleware.rb#15
class Driftwood::V1::Client::HMACMiddleware < ::Faraday::Middleware
  # @return [HMACMiddleware] a new instance of HMACMiddleware
  #
  # source://driftwood-client//client/ruby/lib/driftwood/v1/hmac_middleware.rb#16
  def initialize(app, hmac_key); end

  # source://driftwood-client//client/ruby/lib/driftwood/v1/hmac_middleware.rb#28
  def call(env); end

  # returns the proper hmac header value for the given timestamp and key
  # something like: "1546398245.2f4cf31546abda26f137f90eec8b297972aa7c145cdf22ac2b48dd980a0f19c1"
  #
  # source://driftwood-client//client/ruby/lib/driftwood/v1/hmac_middleware.rb#22
  def hmac_header_value(timestamp: T.unsafe(nil)); end
end

# source://driftwood-client//client/ruby/lib/driftwood/v1/hmac_middleware.rb#9
class Driftwood::V1::Client::HMACNotConfiguredError < ::StandardError
  # source://driftwood-client//client/ruby/lib/driftwood/v1/hmac_middleware.rb#10
  def message; end
end

# source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#25
Driftwood::V1::Client::SUBJECT_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#26
Driftwood::V1::Client::SUBJECT_EMU_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#27
Driftwood::V1::Client::SUBJECT_ORG = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#28
Driftwood::V1::Client::SUBJECT_USER = T.let(T.unsafe(nil), Integer)

# source://driftwood-client//client/ruby/lib/driftwood/v1/client.rb#34
Driftwood::V1::Client::WEB_EXPORT = T.let(T.unsafe(nil), Integer)

module Google::Protobuf::MessageExts::ClassMethods; end

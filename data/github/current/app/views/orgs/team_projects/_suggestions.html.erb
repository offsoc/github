<%graphql
  fragment Organization on Organization {
    team(slug: $slug) {
      name
      addableProjectsForViewer(first: $first, search: $search) {
        edges {
          node {
            id
            name
            number
            viewerCanAdminister
          }
        }
      }
    }
  }
%><%# erblint:disable NoGraphqlFragments %>

<% organization = Views::Orgs::TeamProjects::Suggestions::Organization.new(graphql_org) %>
<% team = organization.team %>
<%
  # Put the addable projects on top, so the user doesn't have to scroll through
  # a bunch of disabled ones
  sorted_projects = team.addable_projects_for_viewer.edges.map(&:node).partition(&:viewer_can_administer?).flatten
%>

<% sorted_projects.each do |project| %>
  <li
    role="option"
    class="typeahead-result <%= "disabled" unless project.viewer_can_administer? %>"
    aria-disabled="<%= !project.viewer_can_administer? %>"
    data-autocomplete-value="<%= { name: project.name, id: project.id }.to_json %>">

    <%= primer_octicon(:project) %>
    <strong><%= project.name %></strong>
    <span class="team-project-suggestion-number">#<%= project.number %></span>

    <% unless project.viewer_can_administer? %>
      <p class="f6 mb-0 mt-1">You need admin privileges on this project to add it to a team.</p>
    <% end %>
  </li>
<% end %>

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Copilot::V2::CopilotTelemetrySnapshot`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Copilot::V2::CopilotTelemetrySnapshot`.

class Hydro::Schemas::Github::Copilot::V2::CopilotTelemetrySnapshot
  sig do
    params(
      businesses: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::Business], T::Array[Hydro::Schemas::Github::V1::Entities::Business])),
      copilot_access_type: T.nilable(T.any(Symbol, Integer)),
      copilot_telemetry_snapshot_id: T.nilable(String),
      copilot_telemetry_snapshot_metadata: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Copilot::V2::Entities::CopilotTelemetrySnapshotMetadata], T::Array[Hydro::Schemas::Github::Copilot::V2::Entities::CopilotTelemetrySnapshotMetadata])),
      enterprise_team_ids: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      organizations: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Copilot::V2::Entities::CopilotOrganization], T::Array[Hydro::Schemas::Github::Copilot::V2::Entities::CopilotOrganization])),
      source: T.nilable(String),
      teams: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::Team], T::Array[Hydro::Schemas::Github::V1::Entities::Team])),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(businesses: T.unsafe(nil), copilot_access_type: nil, copilot_telemetry_snapshot_id: nil, copilot_telemetry_snapshot_metadata: T.unsafe(nil), enterprise_team_ids: T.unsafe(nil), organizations: T.unsafe(nil), source: nil, teams: T.unsafe(nil), user: nil); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::Business]) }
  def businesses; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::Business]).void }
  def businesses=(value); end

  sig { void }
  def clear_businesses; end

  sig { void }
  def clear_copilot_access_type; end

  sig { void }
  def clear_copilot_telemetry_snapshot_id; end

  sig { void }
  def clear_copilot_telemetry_snapshot_metadata; end

  sig { void }
  def clear_enterprise_team_ids; end

  sig { void }
  def clear_organizations; end

  sig { void }
  def clear_source; end

  sig { void }
  def clear_teams; end

  sig { void }
  def clear_user; end

  sig { returns(T.any(Symbol, Integer)) }
  def copilot_access_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def copilot_access_type=(value); end

  sig { returns(String) }
  def copilot_telemetry_snapshot_id; end

  sig { params(value: String).void }
  def copilot_telemetry_snapshot_id=(value); end

  sig do
    returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Copilot::V2::Entities::CopilotTelemetrySnapshotMetadata])
  end
  def copilot_telemetry_snapshot_metadata; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Copilot::V2::Entities::CopilotTelemetrySnapshotMetadata]
    ).void
  end
  def copilot_telemetry_snapshot_metadata=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def enterprise_team_ids; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def enterprise_team_ids=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Copilot::V2::Entities::CopilotOrganization]) }
  def organizations; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Copilot::V2::Entities::CopilotOrganization]
    ).void
  end
  def organizations=(value); end

  sig { returns(String) }
  def source; end

  sig { params(value: String).void }
  def source=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::Team]) }
  def teams; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::Team]).void }
  def teams=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end
end

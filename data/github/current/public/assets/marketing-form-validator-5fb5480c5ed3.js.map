{"version":3,"file":"marketing-form-validator-xxxxxxxxxxxx.js","mappings":"uHAGA,SAASA,EAAcC,CAAyB,EAC9C,IAAMC,EAAiBD,EAAQD,aAAa,GACtCG,EAAgBF,EAAQG,YAAY,CAAC,uBACrCC,EAAkC,CAAC,QAIzC,CAHAA,CAAM,CAAC,iBAAiB,CACtB,2HAEEF,GAAiBE,CAAM,CAACF,EAAc,EACjCD,GAAkB,CAACG,CAAM,CAACF,EAAc,CAACG,IAAI,CAACL,EAAQM,KAAK,EAG7DL,CACT,CAEA,SAASM,EAAQP,CAAyB,EACxC,IAAMQ,EAAYR,EAAQS,OAAO,CAAC,eAC5BC,EAAW,CAACX,EAAcC,GAGhC,OADIQ,GAAWA,EAAUG,SAAS,CAACC,MAAM,CAAC,UAAWF,GAC9CA,CACT,CAUAG,CAAAA,EAAAA,E,OAAAA,EAAAA,EAAQ,qBAAsBC,IAG5B,IAAK,IAAMC,KAF0CD,EAAKE,gBAAgB,CAAC,6BAGzED,EAAaE,gBAAgB,CAAC,QAAS,KACrC,IAAK,IAAMjB,KAAWc,EAAKE,gBAAgB,CAAC,sBAAuBT,EAAQP,EAC7E,GAYF,IAAK,IAAMA,KATXc,EAAKG,gBAAgB,CAAC,SAAUC,IAC9B,IAAK,IAAMlB,KAAWc,EAAKE,gBAAgB,CAAC,sBACtCT,EAAQP,IAAgCA,EAAQmB,OAAO,CAAC,2BAC1DD,EAAEE,cAAc,GACdpB,EAA6BqB,KAAK,GAG1C,GAEsBP,EAAKE,gBAAgB,CAAC,uBAE1ChB,EAAQiB,gBAAgB,CAAC,OAAQK,IAC/Bf,EAAQe,EAAMC,aAAa,CAC7B,GAGAvB,EAAQiB,gBAAgB,CAAC,QAASK,KAChCE,SAlCgBxB,CAAyB,EAC7C,IAAMQ,EAAYR,EAAQS,OAAO,CAAC,eAE9BD,GAAaA,EAAUG,SAAS,CAACc,QAAQ,CAAC,YAC5CjB,EAAUG,SAAS,CAACC,MAAM,CAAC,UAAW,CAACb,EAAcC,GAEzD,EA4BmBsB,EAAMC,aAAa,CAClC,GAEIvB,EAAQmB,OAAO,CAAC,8BAClBnB,EAAQiB,gBAAgB,CAAC,SAAUK,IACjCf,EAAQe,EAAMC,aAAa,CAC7B,EAGN,E","sources":["app/assets/modules/marketing-form-validator.ts"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport {observe} from '@github/selector-observer'\n\nfunction checkValidity(element: HTMLInputElement) {\n  const nativeValidity = element.checkValidity()\n  const validityCheck = element.getAttribute('data-validity-check')\n  const checks: {[key: string]: RegExp} = {}\n  checks['business-email'] =\n    /.*@(gmail|yahoo|hotmail|aol|msn|orange|comcast|live|outlook|yandex|me|icloud|verizon|fastmail)\\.(com|co.uk|fr|net|fm|ru)/\n\n  if (validityCheck && checks[validityCheck]) {\n    return nativeValidity && !checks[validityCheck].test(element.value)\n  }\n\n  return nativeValidity\n}\n\nfunction errored(element: HTMLInputElement) {\n  const formGroup = element.closest('.form-group') as HTMLElement\n  const hasError = !checkValidity(element)\n\n  if (formGroup) formGroup.classList.toggle('errored', hasError)\n  return hasError\n}\n\nfunction clearErrored(element: HTMLInputElement) {\n  const formGroup = element.closest('.form-group') as HTMLElement\n\n  if (formGroup && formGroup.classList.contains('errored')) {\n    formGroup.classList.toggle('errored', !checkValidity(element))\n  }\n}\n\nobserve('.js-form-validator', form => {\n  const submitButtons: NodeListOf<HTMLButtonElement> = form.querySelectorAll('.js-form-validator-submit')\n\n  for (const submitButton of submitButtons) {\n    submitButton.addEventListener('click', () => {\n      for (const element of form.querySelectorAll('.js-validity-check')) errored(element as HTMLInputElement)\n    })\n  }\n\n  form.addEventListener('submit', e => {\n    for (const element of form.querySelectorAll('.js-validity-check')) {\n      if (errored(element as HTMLInputElement) && element.matches('[data-validity-check]')) {\n        e.preventDefault()\n        ;(element as HTMLInputElement).focus()\n      }\n    }\n  })\n\n  for (const element of form.querySelectorAll('.js-validity-check')) {\n    // Checks for validity on blur to give immediate feedback\n    element.addEventListener('blur', event => {\n      errored(event.currentTarget as HTMLInputElement)\n    })\n\n    // Clears the error class once the input is valid to give immediate positive feedback\n    element.addEventListener('keyup', event => {\n      clearErrored(event.currentTarget as HTMLInputElement)\n    })\n\n    if (element.matches('[type=\"checkbox\"], select')) {\n      element.addEventListener('change', event => {\n        errored(event.currentTarget as HTMLInputElement)\n      })\n    }\n  }\n})\n"],"names":["checkValidity","element","nativeValidity","validityCheck","getAttribute","checks","test","value","errored","formGroup","closest","hasError","classList","toggle","observe","form","submitButton","querySelectorAll","addEventListener","e","matches","preventDefault","focus","event","currentTarget","clearErrored","contains"],"sourceRoot":""}
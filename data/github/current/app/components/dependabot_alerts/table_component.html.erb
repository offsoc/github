<%= render Primer::Box.new(mb: show_incomplete_data_warning ? 1 : 3, display: :flex, justify_content: :space_between, style: "gap: 1em;") do %>
  <%= render Primer::Box.new(flex: 1) do %>
    <%= render(
      DependabotAlerts::SearchComponent.new(
        query: query_string + " ",
        path: current_path,
        show_org_level_suggestions: query.scope == :organization,
        show_business_level_suggestions: query.scope == :business,
        filter_suggestions_path: filter_suggestions_path,
        current_user: current_user,
        organization: organization
      )
    )%>
  <% end %>

  <% if teams_filter_menu_data.present? %>
    <%= render Primer::Box.new(display: :flex, align_items: :center, style: "height: 32px;", test_selector: "dependabot-alerts-teams-filter") do %>
      <%= render SecurityCenter::Coverage::SelectMenuComponent.new(teams_filter_menu_data) %>
    <% end %>
  <% end %>
<% end %>

<% if show_incomplete_data_warning %>
  <%= render ::SecurityCenter::LimitedRepoWarningComponent.new(display: :block, mb: 3, test_selector: "dependabot-alerts-org-repo-limit-exceeded") %>
<% end %>

<% content_for :scripts do %><%# erblint:disable NoContentForScripts %>
  <%= javascript_bundle "dependabot-alerts" %>
<% end %>

<div class="no-wrap d-flex d-xl-none" aria-live="polite" aria-atomic="true">
  <%= render SecurityCenter::StatesComponent.new(
    open_state_href: dependabot_alerts_state_path(q: "is:open"),
    open_state_count: open_count,
    open_state_selected: open_selected?,
    closed_state_href: dependabot_alerts_state_path(q: "is:closed"),
    closed_state_count: closed_count,
    closed_state_selected: closed_selected?
  ) %>
</div>

<%= render(
  Primer::Beta::BorderBox.new(
    classes: "Box--responsive js-check-all-container",
    mt: 3,
    test_selector: "dependabot-alerts-table-component",
    data: {
      issue_and_pr_hovercards_enabled: true,
      hpc: ""
     },
  )
) do |border_box| %>
  <% border_box.with_header(p: 0) do %>
    <%= render(
      DependabotAlerts::TableHeaderComponent.new(
        repository: repository,
        alerts_page_path: alerts_page_path,
        menu_content_path: menu_content_path,
        query: query,
        query_string: query_string,
        dismissal_reasons: dismissal_reasons,
        show_bulk_edit: show_bulk_edit?
      )
    ) %>
  <% end %>

  <% if display_alerts? %>
    <% alerts.each do |alert| %>
      <% border_box.with_row(p: 0) do %>
        <%= render(DependabotAlerts::RowComponent.new(
          alert: alert,
          pull_request: pull_request_for_alert(alert),
          scope: query.scope,
          has_function_references: has_function_references?(alert),
          show_alert_number: show_alert_number,
          query_string: query_string,
          alerts_page_path: alerts_page_path,
          show_bulk_edit: show_bulk_edit?
        )) %>
      <% end %>
    <% end %>
  <% elsif filters_applied? %>
    <% border_box.with_body do %>
      <%= render Primer::Beta::Blankslate.new(spacious: true, test_selector: "dependabot-alerts-no-results-blankslate") do |c| %>
        <% c.with_visual_icon(icon: "alert") %>
        <% c.with_heading(tag: :h2) do %>
          No results matched your search.
        <% end %>
        <% c.with_secondary_action(href: clear_filters_path).with_content("Clear current search filters.") %>
      <% end %>
    <% end %>
  <% elsif new_to_alerts? %>
    <% border_box.with_body do %>
      <%= render Primer::Beta::Blankslate.new(spacious: true, test_selector: "dependabot-alerts-welcome-blankslate") do |c| %>
        <% c.with_visual_icon(icon: "alert") %>
        <% c.with_heading(tag: :h3) do %>
          Welcome to Dependabot alerts!
        <% end %>
        <% c.with_description do %>
          Dependabot alerts track security vulnerabilities that apply to your <%= query.scope == :repository ? "repository's" : "repositories'" %> dependencies. As alerts are created, they’ll appear here.
        <% end %>
      <% end %>
    <% end %>
  <% elsif open_selected? %>
    <% border_box.with_body do %>
      <%= render Primer::Beta::Blankslate.new(spacious: true, test_selector: "dependabot-alerts-no-open-blankslate") do |c| %>
        <% c.with_visual_icon(icon: "alert") %>
        <% c.with_heading(tag: :h2) do %>
          There aren’t any open alerts.
        <% end %>
        <% c.with_description do %>
          As alerts are created, they’ll appear here.
        <% end %>
      <% end %>
    <% end %>
  <% elsif closed_selected? %>
    <% border_box.with_body do %>
      <%= render Primer::Beta::Blankslate.new(spacious: true, test_selector: "dependabot-alerts-no-closed-blankslate") do |c| %>
        <% c.with_visual_icon(icon: "alert") %>
        <% c.with_heading(tag: :h2) do %>
          There aren’t any closed alerts.
        <% end %>
        <% c.with_description do %>
          As alerts are closed, they’ll appear here.
        <% end %>
      <% end %>
    <% end %>
  <% end %>
<% end %>

<% if display_alerts? %>
  <div class="paginate-container" <%= test_selector "dependabot-alerts-pagination" %>>
    <%= will_paginate query, params: { q: query_string } %>
  </div>
<% end %>

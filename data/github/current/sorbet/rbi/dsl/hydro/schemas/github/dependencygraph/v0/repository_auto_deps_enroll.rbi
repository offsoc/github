# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Dependencygraph::V0::RepositoryAutoDepsEnroll`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Dependencygraph::V0::RepositoryAutoDepsEnroll`.

class Hydro::Schemas::Github::Dependencygraph::V0::RepositoryAutoDepsEnroll
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      enrollment_status: T.nilable(T.any(Symbol, Integer)),
      modified_at: T.nilable(Google::Protobuf::Timestamp),
      repository: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V2::Entities::Repository], T::Array[Hydro::Schemas::Github::V2::Entities::Repository])),
      runner_type: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(actor: nil, enrollment_status: nil, modified_at: nil, repository: T.unsafe(nil), runner_type: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_enrollment_status; end

  sig { void }
  def clear_modified_at; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_runner_type; end

  sig { returns(T.any(Symbol, Integer)) }
  def enrollment_status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def enrollment_status=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def modified_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def modified_at=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V2::Entities::Repository]) }
  def repository; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V2::Entities::Repository]).void }
  def repository=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def runner_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def runner_type=(value); end
end

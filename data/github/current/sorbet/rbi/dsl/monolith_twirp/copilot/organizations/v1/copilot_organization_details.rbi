# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Copilot::Organizations::V1::CopilotOrganizationDetails`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Copilot::Organizations::V1::CopilotOrganizationDetails`.

class MonolithTwirp::Copilot::Organizations::V1::CopilotOrganizationDetails
  sig do
    params(
      analytics_tracking_id: T.nilable(String),
      are_metrics_enabled: T.nilable(T::Boolean),
      business_id: T.nilable(Integer),
      chat_enabled: T.nilable(T.any(Symbol, Integer)),
      codequote_enabled: T.nilable(T.any(Symbol, Integer)),
      copilot_billing_type: T.nilable(String),
      copilot_enabled: T.nilable(T.any(Symbol, Integer)),
      display_login: T.nilable(String),
      id: T.nilable(Integer),
      mobile_chat: T.nilable(T.any(Symbol, Integer)),
      on_free_trial: T.nilable(T::Boolean),
      public_code_suggestions: T.nilable(T.any(Symbol, Integer)),
      seat_break_down: T.nilable(MonolithTwirp::Copilot::Organizations::V1::SeatBreakDown),
      seat_management: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(analytics_tracking_id: nil, are_metrics_enabled: nil, business_id: nil, chat_enabled: nil, codequote_enabled: nil, copilot_billing_type: nil, copilot_enabled: nil, display_login: nil, id: nil, mobile_chat: nil, on_free_trial: nil, public_code_suggestions: nil, seat_break_down: nil, seat_management: nil); end

  sig { returns(String) }
  def analytics_tracking_id; end

  sig { params(value: String).void }
  def analytics_tracking_id=(value); end

  sig { returns(T::Boolean) }
  def are_metrics_enabled; end

  sig { params(value: T::Boolean).void }
  def are_metrics_enabled=(value); end

  sig { returns(Integer) }
  def business_id; end

  sig { params(value: Integer).void }
  def business_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def chat_enabled; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def chat_enabled=(value); end

  sig { void }
  def clear_analytics_tracking_id; end

  sig { void }
  def clear_are_metrics_enabled; end

  sig { void }
  def clear_business_id; end

  sig { void }
  def clear_chat_enabled; end

  sig { void }
  def clear_codequote_enabled; end

  sig { void }
  def clear_copilot_billing_type; end

  sig { void }
  def clear_copilot_enabled; end

  sig { void }
  def clear_display_login; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_mobile_chat; end

  sig { void }
  def clear_on_free_trial; end

  sig { void }
  def clear_public_code_suggestions; end

  sig { void }
  def clear_seat_break_down; end

  sig { void }
  def clear_seat_management; end

  sig { returns(T.any(Symbol, Integer)) }
  def codequote_enabled; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def codequote_enabled=(value); end

  sig { returns(String) }
  def copilot_billing_type; end

  sig { params(value: String).void }
  def copilot_billing_type=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def copilot_enabled; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def copilot_enabled=(value); end

  sig { returns(String) }
  def display_login; end

  sig { params(value: String).void }
  def display_login=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def mobile_chat; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def mobile_chat=(value); end

  sig { returns(T::Boolean) }
  def on_free_trial; end

  sig { params(value: T::Boolean).void }
  def on_free_trial=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def public_code_suggestions; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def public_code_suggestions=(value); end

  sig { returns(T.nilable(MonolithTwirp::Copilot::Organizations::V1::SeatBreakDown)) }
  def seat_break_down; end

  sig { params(value: T.nilable(MonolithTwirp::Copilot::Organizations::V1::SeatBreakDown)).void }
  def seat_break_down=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def seat_management; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def seat_management=(value); end
end

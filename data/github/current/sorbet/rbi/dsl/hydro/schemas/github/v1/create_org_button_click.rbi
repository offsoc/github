# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::CreateOrgButtonClick`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::CreateOrgButtonClick`.

class Hydro::Schemas::Github::V1::CreateOrgButtonClick
  sig do
    params(
      action: T.nilable(String),
      category: T.nilable(String),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      label: T.nilable(String),
      location: T.nilable(T.any(Symbol, Integer)),
      organizations_count: T.nilable(Integer),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(action: nil, category: nil, created_at: nil, label: nil, location: nil, organizations_count: nil, request_context: nil, user: nil); end

  sig { returns(String) }
  def action; end

  sig { params(value: String).void }
  def action=(value); end

  sig { returns(String) }
  def category; end

  sig { params(value: String).void }
  def category=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_category; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_label; end

  sig { void }
  def clear_location; end

  sig { void }
  def clear_organizations_count; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_user; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(String) }
  def label; end

  sig { params(value: String).void }
  def label=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def location; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def location=(value); end

  sig { returns(Integer) }
  def organizations_count; end

  sig { params(value: Integer).void }
  def organizations_count=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end
end

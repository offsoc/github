# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::Entities::InternalRefUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::Entities::InternalRefUpdate`.

class Hydro::Schemas::Github::V1::Entities::InternalRefUpdate
  sig do
    params(
      commit_oid_after: T.nilable(String),
      commit_oid_before: T.nilable(String),
      predicates: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::DGitPredicate], T::Array[Hydro::Schemas::Github::V1::Entities::DGitPredicate])),
      qualified_refname: T.nilable(String),
      rollout_state: T.nilable(T.any(Symbol, Integer)),
      uuid: T.nilable(String)
    ).void
  end
  def initialize(commit_oid_after: nil, commit_oid_before: nil, predicates: T.unsafe(nil), qualified_refname: nil, rollout_state: nil, uuid: nil); end

  sig { void }
  def clear_commit_oid_after; end

  sig { void }
  def clear_commit_oid_before; end

  sig { void }
  def clear_predicates; end

  sig { void }
  def clear_qualified_refname; end

  sig { void }
  def clear_rollout_state; end

  sig { void }
  def clear_uuid; end

  sig { returns(String) }
  def commit_oid_after; end

  sig { params(value: String).void }
  def commit_oid_after=(value); end

  sig { returns(String) }
  def commit_oid_before; end

  sig { params(value: String).void }
  def commit_oid_before=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::DGitPredicate]) }
  def predicates; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::DGitPredicate]).void }
  def predicates=(value); end

  sig { returns(String) }
  def qualified_refname; end

  sig { params(value: String).void }
  def qualified_refname=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def rollout_state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def rollout_state=(value); end

  sig { returns(String) }
  def uuid; end

  sig { params(value: String).void }
  def uuid=(value); end
end

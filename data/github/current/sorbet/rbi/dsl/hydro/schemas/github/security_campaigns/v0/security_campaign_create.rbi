# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::SecurityCampaigns::V0::SecurityCampaignCreate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::SecurityCampaigns::V0::SecurityCampaignCreate`.

class Hydro::Schemas::Github::SecurityCampaigns::V0::SecurityCampaignCreate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      alert_count: T.nilable(Integer),
      description: T.nilable(String),
      manager: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      query: T.nilable(String),
      repo_count: T.nilable(Integer),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      security_campaign: T.nilable(Hydro::Schemas::Github::SecurityCampaigns::V0::Entities::SecurityCampaign)
    ).void
  end
  def initialize(actor: nil, alert_count: nil, description: nil, manager: nil, organization: nil, query: nil, repo_count: nil, request_context: nil, security_campaign: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(Integer) }
  def alert_count; end

  sig { params(value: Integer).void }
  def alert_count=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_alert_count; end

  sig { void }
  def clear_description; end

  sig { void }
  def clear_manager; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_query; end

  sig { void }
  def clear_repo_count; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_security_campaign; end

  sig { returns(String) }
  def description; end

  sig { params(value: String).void }
  def description=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def manager; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def manager=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def organization=(value); end

  sig { returns(String) }
  def query; end

  sig { params(value: String).void }
  def query=(value); end

  sig { returns(Integer) }
  def repo_count; end

  sig { params(value: Integer).void }
  def repo_count=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::SecurityCampaigns::V0::Entities::SecurityCampaign)) }
  def security_campaign; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::SecurityCampaigns::V0::Entities::SecurityCampaign)).void }
  def security_campaign=(value); end
end

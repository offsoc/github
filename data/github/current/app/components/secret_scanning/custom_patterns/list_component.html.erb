<%# erblint:counter DeprecatedComponentsCounter 4 %>
<turbo-frame id="list-component-frame" target=_top class="js-custom-pattern-list">

  <%= render(Primer::Box.new(display: :flex, mb: 2)) do %>
    <% if display_new_custom_pattern_header? %>
      <%= render(Primer::Box.new(flex: :auto)) do %>
        <div class="h4">Custom patterns</div>
        <p class="col-12 mb-2">You can define up to <%= secret_scanning_max_custom_patterns %> patterns. <%= link_to "Learn more about custom patterns", "#{GitHub.help_url}/code-security/secret-security/defining-custom-patterns-for-secret-scanning", class: "Link--inTextBlock" %>.</p>
      <% end %>
    <% else %>
      <%= render(Primer::Box.new(flex: :auto)) do %>
        <div class="f3 mb-2 mt-3">Secret scanning custom patterns</div>
        <p class="col-10 mb-2">
          Custom patterns will only apply to repositories with GitHub Advanced Security and secret scanning enabled across all organizations in this enterprise. You can define up to <%= GitHub.secret_scanning_max_custom_patterns_per_business %> patterns. <%= link_to "Learn more about custom patterns", "#{GitHub.help_url}/code-security/secret-security/defining-custom-patterns-for-secret-scanning", class: "Link--inTextBlock" %>.
        </p>
      <% end %>
    <% end %>
    <% if secret_scan_custom_patterns_count < secret_scanning_max_custom_patterns %>
      <%= render(Primer::Box.new(display: :flex, flex: :auto, justify_content: :flex_end, style: "align-items: center;")) do %>
        <%= render(Primer::ButtonComponent.new(tag: :a, variant: :small, href: get_new_custom_pattern_path, style: "height: fit-content;")) do %>
          New pattern
        <% end %>
      <% end %>
    <% end %>
  <% end %>

  <div class="js-check-all-container">

  <%= render(Primer::Box.new(mb: 4)) do |component| %>
    <%= render(
      SecretScanning::CustomPatterns::SearchComponent.new(
        query: query,
      )
    )
    %>
  <% end %>
  <%= render(Primer::Beta::BorderBox.new(mb: 4)) do |component| %>
    <% unless secret_scan_custom_patterns_count == 0 %>
      <% component.with_header do %>

        <%= render(Primer::Box.new(display: :flex)) do %>

          <%= render(Primer::Box.new(mr: 2, style: "margin-top: 6px;")) do %>
            <input aria-label="Select all secrets" data-check-all type="checkbox" <%= test_selector("select-all-custom-patterns-for-bulk-delete") %>>
          <% end %>

          <% if secret_scan_custom_patterns_count == 0 %>
            <h3 class="Box-title mt-1">Custom patterns</h3>
          <% else %>
            <h3 class="Box-title mt-1 js-custom-pattern-total-count"><%= total_count %> pattern<% if total_count > 1 %>s<% end %></h3>
            <h3 class="Box-title mt-1 js-custom-pattern-selected-count" hidden><span data-check-all-count>0</span> selected</h3>
          <% end %>

          <%= render(
            Primer::Box.new(
              classes: "js-custom-patterns-bulk-delete",
              display: :flex,
              pl: 2,
              hidden: true
            )
          ) do %>
            <%= form_tag get_delete_custom_patterns_path, method: :delete, data: { pjax: true, turbo: true, turbo_frame: "list-component-frame", turbo_action: "replace" } do %>
              <div class="js-custom-patterns-bulk-delete-items" hidden></div>
              <%= render SecretScanning::CustomPatterns::RemovePatternsBulkComponent.new(scope: scope) %>
            <% end %>
          <% end %>

          <%= render(Primer::Box.new(display: :flex, flex: :auto, justify_content: :flex_end,)) do %>
            <div class="js-custom-patterns-filters">

              <%= render(
                SecurityCenter::SelectMenuComponent.new(
                  align_right: true,
                  button_text: "Sort",
                  default_selected_slug: QUERY_PARSER::DEFAULT_SORT_SLUG_VALUE,
                  header: "Sort by",
                  px: 2,
                  query: query,
                  query_parser: QUERY_PARSER,
                  data: { pjax: true, turbo: true, turbo_frame: "list-component-frame", turbo_action: "replace"},
                  tabs: [
                    SecurityCenter::SelectMenu::Tab.new(
                      items: QUERY_PARSER::sort_options.map do |item|
                        SecurityCenter::SelectMenu::Item.new(**item.slice(:count, :description, :label, :qualifier, :slug))
                      end
                    )
                  ],
                  test_selector: "security-center-alert-centric-views-secret-scanning-table-header-filter-sort",
                )
              ) %>
              <%= render(
                SecurityCenter::SelectMenuComponent.new(
                  align_right: true,
                  button_text: "Status",
                  default_selected_slug: QUERY_PARSER::DEFAULT_STATUS_SLUG_VALUE,
                  header: "Filter by",
                  px: 2,
                  query: query,
                  query_parser: QUERY_PARSER,
                  is_multiselect: true,
                  data: { pjax: true, turbo: true, turbo_frame: "list-component-frame", turbo_action: "replace"},
                  tabs: [
                    SecurityCenter::SelectMenu::Tab.new(
                      items: QUERY_PARSER::status_options.map do |item|
                        SecurityCenter::SelectMenu::Item.new(**item.slice(:count, :description, :label, :qualifier, :slug))
                      end
                    )
                  ],
                  test_selector: "security-center-alert-centric-views-secret-scanning-table-header-filter-sort",
                )
              ) %>
              <%= render(
                SecurityCenter::SelectMenuComponent.new(
                  align_right: true,
                  button_text: "Push protection",
                  default_selected_slug: QUERY_PARSER::DEFAULT_PUSH_PROTECTION_FILTER_SLUG_VALUE,
                  header: "Filter by",
                  px: 2,
                  query: query,
                  query_parser: QUERY_PARSER,
                  is_multiselect: true,
                  data: { pjax: true, turbo: true, turbo_frame: "list-component-frame", turbo_action: "replace"},
                  tabs: [
                    SecurityCenter::SelectMenu::Tab.new(
                      items: QUERY_PARSER::push_protected_filter_options.map do |item|
                        SecurityCenter::SelectMenu::Item.new(**item.slice(:count, :description, :label, :qualifier, :slug))
                      end
                    )
                  ],
                  test_selector: "security-center-alert-centric-views-secret-scanning-table-header-filter-sort",
                )
              ) %>
            </div>
          <% end %>

        <% end %>
      <% end %>
    <% end %>

    <% if token_scanning_service_unavailable? %>
      <% component.with_body do %>
        <%= render Primer::BlankslateComponent.new(
          icon: "alert",
          title: secret_scanning_custom_patterns_error,
        ) %>
      <% end %>
    <% elsif no_matching_results? %>
      <% if has_default_is_values? %>
        <% component.with_body do %>
          <%= render Primer::BlankslateComponent.new(
            title: secret_scanning_custom_patterns_blankslate_header,
            description: "Create a new pattern to scan for potential secrets in your repository",
            button_text: "New pattern",
            button_url: get_new_custom_pattern_path
          ) %>
        <% end %>
      <% else %>
        <% component.with_body do %>
          <%= render Primer::BlankslateComponent.new(
            title: "No custom patterns found",
          ) do %>
              <%= render(Primer::Beta::Text.new(tag: :p)) do %>
                Try
                <%= render(
                  Primer::Beta::Link
                    .new(
                      data: { pjax: true, turbo: true, turbo_frame: "list-component-frame", turbo_action: "replace" },
                      href: "?",
                      classes: "Link--inTextBlock"
                    )
                    .with_content("clearing filters")
                ) %>
                to view all custom patterns.
              <% end %>
          <% end %>
        <% end %>
      <% end %>
    <% else %>
      <% secret_scan_custom_patterns.each do |pattern| %>
        <% component.with_row do %>
          <%= render SecretScanning::CustomPatterns::RowComponent.new(
            pattern: pattern,
            user_id: current_user_id,
            unpublished: pattern_unpublished?(pattern),
            push_protection_enabled: pattern.push_protection_enabled,
            show_path: get_show_custom_pattern_path(id: pattern.id),
            delete_path: get_delete_custom_pattern_path(id: pattern.id)
          ) %>
        <% end %>
      <% end %>
    <% end %>
    <% if has_pagination? %>
      <% component.with_row(py: 1, px: 3, display: :flex, justify_content: :center) do %>
        <%= form_tag cursor_path,
        method: :get,
        class: "ajax-pagination-form", data: { pjax: true, turbo: true, turbo_frame: "list-component-frame", turbo_action: "replace" } do %>
          <input type="hidden" name="previous_cursor" value="<%= previous_cursor %>">
          <input type="hidden" name="next_cursor" value="<%= next_cursor %>">
          <input type="hidden" name="query" value="<%= query %>">
          <%= button_tag "<  Previous", class: "btn btn-invisible p-1", name: 'previous_cursor_button_udp', id: "previous_cursor_button_udp", disabled: cursor_disabled?(previous_cursor) %>
          <%= button_tag "Next  >", class: "btn btn-invisible p-1 ml-4", name: 'next_cursor_button_udp', id: "next_cursor_button_udp", disabled: cursor_disabled?(next_cursor) %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>

  </div>

</turbo-frame>


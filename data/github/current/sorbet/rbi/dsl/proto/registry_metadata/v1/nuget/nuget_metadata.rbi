# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Proto::RegistryMetadata::V1::Nuget::NugetMetadata`.
# Please instead update this file by running `bin/tapioca dsl Proto::RegistryMetadata::V1::Nuget::NugetMetadata`.

class Proto::RegistryMetadata::V1::Nuget::NugetMetadata
  sig do
    params(
      authors: T.nilable(String),
      commit_oid: T.nilable(String),
      copyright: T.nilable(String),
      dependencies: T.nilable(String),
      dependency_groups: T.nilable(String),
      description: T.nilable(String),
      icon_url: T.nilable(String),
      id: T.nilable(String),
      is_prerelease: T.nilable(T::Boolean),
      language: T.nilable(String),
      license_url: T.nilable(String),
      manifest: T.nilable(String),
      owners: T.nilable(String),
      project_url: T.nilable(String),
      readme: T.nilable(String),
      release_id: T.nilable(Integer),
      release_notes: T.nilable(String),
      repo: T.nilable(String),
      repository: T.nilable(Proto::RegistryMetadata::V1::Nuget::Repository),
      require_license_acceptance: T.nilable(T::Boolean),
      summary: T.nilable(String),
      tags: T.nilable(String),
      title: T.nilable(String),
      verbatim_version: T.nilable(String),
      version: T.nilable(String)
    ).void
  end
  def initialize(authors: nil, commit_oid: nil, copyright: nil, dependencies: nil, dependency_groups: nil, description: nil, icon_url: nil, id: nil, is_prerelease: nil, language: nil, license_url: nil, manifest: nil, owners: nil, project_url: nil, readme: nil, release_id: nil, release_notes: nil, repo: nil, repository: nil, require_license_acceptance: nil, summary: nil, tags: nil, title: nil, verbatim_version: nil, version: nil); end

  sig { returns(String) }
  def authors; end

  sig { params(value: String).void }
  def authors=(value); end

  sig { void }
  def clear_authors; end

  sig { void }
  def clear_commit_oid; end

  sig { void }
  def clear_copyright; end

  sig { void }
  def clear_dependencies; end

  sig { void }
  def clear_dependency_groups; end

  sig { void }
  def clear_description; end

  sig { void }
  def clear_icon_url; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_is_prerelease; end

  sig { void }
  def clear_language; end

  sig { void }
  def clear_license_url; end

  sig { void }
  def clear_manifest; end

  sig { void }
  def clear_owners; end

  sig { void }
  def clear_project_url; end

  sig { void }
  def clear_readme; end

  sig { void }
  def clear_release_id; end

  sig { void }
  def clear_release_notes; end

  sig { void }
  def clear_repo; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_require_license_acceptance; end

  sig { void }
  def clear_summary; end

  sig { void }
  def clear_tags; end

  sig { void }
  def clear_title; end

  sig { void }
  def clear_verbatim_version; end

  sig { void }
  def clear_version; end

  sig { returns(String) }
  def commit_oid; end

  sig { params(value: String).void }
  def commit_oid=(value); end

  sig { returns(String) }
  def copyright; end

  sig { params(value: String).void }
  def copyright=(value); end

  sig { returns(String) }
  def dependencies; end

  sig { params(value: String).void }
  def dependencies=(value); end

  sig { returns(String) }
  def dependency_groups; end

  sig { params(value: String).void }
  def dependency_groups=(value); end

  sig { returns(String) }
  def description; end

  sig { params(value: String).void }
  def description=(value); end

  sig { returns(String) }
  def icon_url; end

  sig { params(value: String).void }
  def icon_url=(value); end

  sig { returns(String) }
  def id; end

  sig { params(value: String).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def is_prerelease; end

  sig { params(value: T::Boolean).void }
  def is_prerelease=(value); end

  sig { returns(String) }
  def language; end

  sig { params(value: String).void }
  def language=(value); end

  sig { returns(String) }
  def license_url; end

  sig { params(value: String).void }
  def license_url=(value); end

  sig { returns(String) }
  def manifest; end

  sig { params(value: String).void }
  def manifest=(value); end

  sig { returns(String) }
  def owners; end

  sig { params(value: String).void }
  def owners=(value); end

  sig { returns(String) }
  def project_url; end

  sig { params(value: String).void }
  def project_url=(value); end

  sig { returns(String) }
  def readme; end

  sig { params(value: String).void }
  def readme=(value); end

  sig { returns(Integer) }
  def release_id; end

  sig { params(value: Integer).void }
  def release_id=(value); end

  sig { returns(String) }
  def release_notes; end

  sig { params(value: String).void }
  def release_notes=(value); end

  sig { returns(String) }
  def repo; end

  sig { params(value: String).void }
  def repo=(value); end

  sig { returns(T.nilable(Proto::RegistryMetadata::V1::Nuget::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Proto::RegistryMetadata::V1::Nuget::Repository)).void }
  def repository=(value); end

  sig { returns(T::Boolean) }
  def require_license_acceptance; end

  sig { params(value: T::Boolean).void }
  def require_license_acceptance=(value); end

  sig { returns(String) }
  def summary; end

  sig { params(value: String).void }
  def summary=(value); end

  sig { returns(String) }
  def tags; end

  sig { params(value: String).void }
  def tags=(value); end

  sig { returns(String) }
  def title; end

  sig { params(value: String).void }
  def title=(value); end

  sig { returns(String) }
  def verbatim_version; end

  sig { params(value: String).void }
  def verbatim_version=(value); end

  sig { returns(String) }
  def version; end

  sig { params(value: String).void }
  def version=(value); end
end

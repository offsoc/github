# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `open4` gem.
# Please instead update this file by running `bin/tapioca gem open4`.

module ERB::Escape
  private

  def html_escape(_arg0); end

  class << self
    def html_escape(_arg0); end
  end
end

class Object < ::BasicObject
  include ::Kernel
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  include ::PP::ObjectMixin
  include ::ActiveSupport::Tryable
  include ::ERB::Escape
  include ::ActiveSupport::CoreExt::ERBUtil
  include ::ActiveSupport::CoreExt::ERBUtilPrivate

  private

  # source://open4//lib/open4.rb#401
  def open4(*cmd, &b); end
end

# source://open4//lib/open4.rb#6
module Open4
  private

  # source://open4//lib/open4.rb#384
  def alive(pid); end

  # --}}}
  #
  # source://open4//lib/open4.rb#384
  def alive?(pid); end

  # source://open4//lib/open4.rb#336
  def background(arg, *argv); end

  # --}}}
  #
  # source://open4//lib/open4.rb#336
  def bg(arg, *argv); end

  # source://open4//lib/open4.rb#330
  def chdir(cwd, &block); end

  # source://open4//lib/open4.rb#181
  def getopts(opts = T.unsafe(nil)); end

  # source://open4//lib/open4.rb#361
  def maim(pid, opts = T.unsafe(nil)); end

  # source://open4//lib/open4.rb#167
  def new_thread(*a, &b); end

  # --}}}
  #
  # source://open4//lib/open4.rb#13
  def open4(*cmd, &b); end

  # source://open4//lib/open4.rb#13
  def popen4(*cmd, &b); end

  # source://open4//lib/open4.rb#198
  def relay(src, dst = T.unsafe(nil), t = T.unsafe(nil)); end

  # @raise [SpawnError]
  #
  # source://open4//lib/open4.rb#249
  def spawn(arg, *argv); end

  # source://open4//lib/open4.rb#160
  def to(timeout = T.unsafe(nil)); end

  class << self
    # source://open4//lib/open4.rb#384
    def alive(pid); end

    # --}}}
    #
    # source://open4//lib/open4.rb#384
    def alive?(pid); end

    # source://open4//lib/open4.rb#336
    def background(arg, *argv); end

    # --}}}
    #
    # source://open4//lib/open4.rb#336
    def bg(arg, *argv); end

    # source://open4//lib/open4.rb#330
    def chdir(cwd, &block); end

    # source://open4//lib/open4.rb#181
    def getopts(opts = T.unsafe(nil)); end

    # source://open4//lib/open4.rb#361
    def maim(pid, opts = T.unsafe(nil)); end

    # source://open4//lib/open4.rb#167
    def new_thread(*a, &b); end

    # --}}}
    #
    # source://open4//lib/open4.rb#13
    def open4(*cmd, &b); end

    # source://open4//lib/open4.rb#13
    def popen4(*cmd, &b); end

    # source://open4//lib/open4.rb#198
    def relay(src, dst = T.unsafe(nil), t = T.unsafe(nil)); end

    # @raise [SpawnError]
    #
    # source://open4//lib/open4.rb#249
    def spawn(arg, *argv); end

    # source://open4//lib/open4.rb#160
    def to(timeout = T.unsafe(nil)); end

    # source://open4//lib/open4.rb#9
    def version; end
  end
end

# source://open4//lib/open4.rb#11
class Open4::Error < ::StandardError; end

# source://open4//lib/open4.rb#83
class Open4::SpawnError < ::Open4::Error
  # @return [SpawnError] a new instance of SpawnError
  #
  # source://open4//lib/open4.rb#91
  def initialize(cmd, status); end

  # --{{{
  #
  # source://open4//lib/open4.rb#85
  def cmd; end

  # source://open4//lib/open4.rb#88
  def exitstatus; end

  # Returns the value of attribute signals.
  #
  # source://open4//lib/open4.rb#87
  def signals; end

  # Returns the value of attribute status.
  #
  # source://open4//lib/open4.rb#86
  def status; end
end

# source://open4//lib/open4.rb#104
class Open4::ThreadEnsemble
  # @return [ThreadEnsemble] a new instance of ThreadEnsemble
  #
  # source://open4//lib/open4.rb#108
  def initialize(cid); end

  # source://open4//lib/open4.rb#113
  def add_thread(*a, &b); end

  # source://open4//lib/open4.rb#154
  def all_done; end

  # take down process more nicely
  #
  # source://open4//lib/open4.rb#120
  def killall; end

  # source://open4//lib/open4.rb#130
  def run; end

  # --{{{
  #
  # source://open4//lib/open4.rb#106
  def threads; end
end

# --{{{
#
# source://open4//lib/open4.rb#8
Open4::VERSION = T.let(T.unsafe(nil), String)

# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `group_syncer` gem.
# Please instead update this file by running `bin/tapioca gem group_syncer`.

# source://group_syncer//lib/faraday_middleware/instrumenters/noop.rb#3
module FaradayMiddleware; end

# source://group_syncer//lib/faraday_middleware/circuit_breaker.rb#7
class FaradayMiddleware::CircuitBreaker
  # Intializes a new instance of the middleware
  # - circuit_name will be used to determine the circuit breaker name
  #   which by default will be DEFAULT_CIRCUIT_NAME
  # - options, a Hash of options to pass when building the circuit breaker
  #
  # @return [CircuitBreaker] a new instance of CircuitBreaker
  #
  # source://group_syncer//lib/faraday_middleware/circuit_breaker.rb#19
  def initialize(app, options = T.unsafe(nil)); end

  # source://group_syncer//lib/faraday_middleware/circuit_breaker.rb#27
  def call(env); end

  private

  # source://group_syncer//lib/faraday_middleware/circuit_breaker.rb#50
  def circuit; end

  # source://group_syncer//lib/faraday_middleware/circuit_breaker.rb#54
  def instrument(op, payload = T.unsafe(nil), &block); end
end

# source://group_syncer//lib/faraday_middleware/circuit_breaker.rb#8
class FaradayMiddleware::CircuitBreaker::CircuitOpenError < ::StandardError; end

# source://group_syncer//lib/faraday_middleware/circuit_breaker.rb#9
FaradayMiddleware::CircuitBreaker::DEFAULT_CIRCUIT_NAME = T.let(T.unsafe(nil), String)

# Consider any non-500 response a successful service response.
#
# source://group_syncer//lib/faraday_middleware/circuit_breaker.rb#12
FaradayMiddleware::CircuitBreaker::SUCCESS_STATUS_CODES = T.let(T.unsafe(nil), Range)

# source://group_syncer//lib/faraday_middleware/instrumenters/noop.rb#4
module FaradayMiddleware::Instrumenters; end

# source://group_syncer//lib/faraday_middleware/instrumenters/noop.rb#5
class FaradayMiddleware::Instrumenters::Noop
  class << self
    # @yield [payload]
    #
    # source://group_syncer//lib/faraday_middleware/instrumenters/noop.rb#6
    def instrument(name, payload = T.unsafe(nil)); end
  end
end

module Google::Protobuf::MessageExts::ClassMethods; end

# source://group_syncer//lib/group_syncer.rb#3
module GroupSyncer; end

# source://group_syncer//lib/group_syncer/client.rb#4
class GroupSyncer::Client
  # Public
  #
  # connection - A Faraday::Connection pointing to the group-syncer service.
  #
  # @return [Client] a new instance of Client
  #
  # source://group_syncer//lib/group_syncer/client.rb#9
  def initialize(connection); end

  # @return [Boolean]
  #
  # source://group_syncer//lib/group_syncer/client.rb#13
  def alive?; end

  # source://group_syncer//lib/group_syncer/client.rb#26
  def list_group_members(team_id:, group_id:); end

  # source://group_syncer//lib/group_syncer/client.rb#22
  def list_groups(org_id:, query:, page_size: T.unsafe(nil), page_token: T.unsafe(nil)); end

  # source://group_syncer//lib/group_syncer/client.rb#45
  def list_team_mappings(org_id:, team_id:); end

  # source://group_syncer//lib/group_syncer/client.rb#18
  def ping; end

  # source://group_syncer//lib/group_syncer/client.rb#30
  def register_tenant(org_id:, external_provider_type:, status:, external_provider_id: T.unsafe(nil), token: T.unsafe(nil), url: T.unsafe(nil)); end

  # source://group_syncer//lib/group_syncer/client.rb#49
  def sync_team(org_id:, team_id:); end

  # source://group_syncer//lib/group_syncer/client.rb#41
  def update_team_mappings(org_id:, team_id:, group_ids:); end

  private

  # Returns the value of attribute connection.
  #
  # source://group_syncer//lib/group_syncer/client.rb#55
  def connection; end

  # Groups Client
  #
  # source://group_syncer//lib/group_syncer/client.rb#65
  def groups_client; end

  # Health Client
  #
  # source://group_syncer//lib/group_syncer/client.rb#59
  def health_client; end

  # TeamMappings Client
  #
  # source://group_syncer//lib/group_syncer/client.rb#77
  def team_mappings_client; end

  # Tenants Client
  #
  # source://group_syncer//lib/group_syncer/client.rb#71
  def tenants_client; end
end

module GroupSyncer::V1; end

module GroupSyncer::V1::ExternalProviderType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

GroupSyncer::V1::ExternalProviderType::AZURE_AD = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::ExternalProviderType::OKTA = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::ExternalProviderType::UNKNOWN = T.let(T.unsafe(nil), Integer)

class GroupSyncer::V1::Group
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GroupSyncer::V1::GroupMember
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GroupSyncer::V1::GroupsClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_members(input, req_opts = T.unsafe(nil)); end
end

class GroupSyncer::V1::GroupsService < ::Twirp::Service; end

class GroupSyncer::V1::HealthClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def ping(input, req_opts = T.unsafe(nil)); end
end

class GroupSyncer::V1::HealthService < ::Twirp::Service; end

class GroupSyncer::V1::ListGroupMembersRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GroupSyncer::V1::ListGroupMembersResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GroupSyncer::V1::ListGroupsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GroupSyncer::V1::ListGroupsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GroupSyncer::V1::ListMappingsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GroupSyncer::V1::Mapping
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GroupSyncer::V1::MappingResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GroupSyncer::V1::MappingStatus
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

GroupSyncer::V1::MappingStatus::MAPPINGSTATUSUNKNOWN = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::MappingStatus::PARTIAL = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::MappingStatus::RETRY = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::MappingStatus::SYNCDISABLED = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::MappingStatus::SYNCED = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::MappingStatus::SYNCFAILED = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::MappingStatus::SYNCPENDING = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::MappingStatus::UNSYNCED = T.let(T.unsafe(nil), Integer)

class GroupSyncer::V1::RegisterTenantRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GroupSyncer::V1::RegisterTenantResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GroupSyncer::V1::TeamMappingsClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def sync(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def update(input, req_opts = T.unsafe(nil)); end
end

class GroupSyncer::V1::TeamMappingsService < ::Twirp::Service; end

class GroupSyncer::V1::TeamSyncRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GroupSyncer::V1::TeamSyncResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GroupSyncer::V1::TenantStatus
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

GroupSyncer::V1::TenantStatus::DISABLED = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::TenantStatus::ENABLED = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::TenantStatus::FAILED = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::TenantStatus::PENDING = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::TenantStatus::READY = T.let(T.unsafe(nil), Integer)
GroupSyncer::V1::TenantStatus::UNKNOWN_STATUS = T.let(T.unsafe(nil), Integer)

class GroupSyncer::V1::TenantsClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def register(input, req_opts = T.unsafe(nil)); end
end

class GroupSyncer::V1::TenantsService < ::Twirp::Service; end

class GroupSyncer::V1::UpdateMappingRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# Patches Rack::Tracer to add Twirp Service path info to spans operation names
#
# source://group_syncer//lib/twirp/hmac.rb#3
module Twirp; end

# source://group_syncer//lib/twirp/hmac.rb#4
module Twirp::HMAC; end

# Faraday middleware to HMAC sign requests from Twirp.
#
# source://group_syncer//lib/twirp/hmac/request_signing_middleware.rb#6
class Twirp::HMAC::RequestSigningMiddleware
  # @return [RequestSigningMiddleware] a new instance of RequestSigningMiddleware
  #
  # source://group_syncer//lib/twirp/hmac/request_signing_middleware.rb#7
  def initialize(app, signing_service); end

  # source://group_syncer//lib/twirp/hmac/request_signing_middleware.rb#12
  def call(env); end
end

# Service for computing HMAC signatures for Twirp requests.
#
# Used by Twirp backend Service and Client.
#
# source://group_syncer//lib/twirp/hmac/signing_service.rb#10
class Twirp::HMAC::SigningService
  # @return [SigningService] a new instance of SigningService
  #
  # source://group_syncer//lib/twirp/hmac/signing_service.rb#11
  def initialize(key:, digest: T.unsafe(nil)); end

  # Public: Generate an HMAC signature for the given request parameters.
  #
  # Returns a String base64 hexdigest of the HMAC signature.
  #
  # source://group_syncer//lib/twirp/hmac/signing_service.rb#18
  def generate_signature(service:, rpc_method:, content_type:, body:); end

  # Public: Validates a Twirp request to the service.
  #
  # Returns Boolean whether the request is signed correctly or not.
  #
  # @return [Boolean]
  #
  # source://group_syncer//lib/twirp/hmac/signing_service.rb#30
  def valid_request?(service, rack_env, env); end
end

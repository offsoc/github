---
summary: 'Create an attestation'
description: |-
  Store an artifact attestation and associate it with a repository.

  The authenticated user must have write permission to the repository and, if using a fine-grained access token the `attestations:write` permission is required.

  Artifact attestations are meant to be created using the [attest action](https://github.com/actions/attest). For amore information, see our guide on [using artifact attestations to establish a build's provenance](${externalDocsUrl}/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
tags:
  - repos
operationId: repos/create-attestation

externalDocs:
  description: API method documentation
  url: '${externalDocsUrl}/rest/repos/repos#create-an-attestation'

# Describe how this operation is accessible
# This is essential for us to generate the final OpenAPI description
x-github-internal:
  path: /repos/{owner}/{repo}/attestations
  http-method: post
  published: true
  # Make sure you set your team as a resource owner
  owner: '@github/package-security'

# Our OpenAPI description describes all versions of GitHub API
# Define in which versions your operation is available.
x-github-releases:
  - api.github.com
  - ghec
  # ghes accepts a semver range of versions
  # ghes: '>= 3.1'
parameters:
  - $ref: '../../components/parameters/owner.yaml'
  - $ref: '../../components/parameters/repo.yaml'

# Describe any query and/or path parameters this operation
# might receive. Check out existing parameter definitions
# in `app/api/description/components/parameters`
# parameters:
#  - $ref: '../../components/parameters/owner.yaml'
#  - $ref: '../../components/parameters/repo.yaml'
# If your operation receives a requestBody (POST, PUT, PATCH requests)
# Describe it here using JSON Schema.
requestBody:
  required: true
  content:
    application/json:
      schema:
        type: object
        properties:
          bundle:
            type: object
            properties:
              mediaType:
                type: string
              verificationMaterial:
                type: object
                properties: {}
                additionalProperties: true
              dsseEnvelope:
                type: object
                properties: {}
                additionalProperties: true
            description: |-
              The attestation's Sigstore Bundle.
              Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
        required:
          - bundle
      examples:
        default:
          summary: Example of a request body
          value:
            $ref: '../../components/examples/attestation.yaml'

# Now describe what this operation can respond with.
# There is no need in describing common error status codes
# unless they have a specific semantic meaning in your operation.
responses:
  '201':
    description: response
    content:
      application/json:
        schema:
          type: object
          properties:
            id:
              type: integer
              description: The ID of the attestation.
        examples:
          default:
            value:
              id: 2
  '403':
    $ref: '../../components/responses/forbidden.yaml'
  '422':
    $ref: '../../components/responses/validation_failed.yaml'

# Finally, we must tag our operations with some additional metadata
x-github:
  # If the operation is only in GitHub Enterprise Cloud, set this to true
  githubCloudOnly: false
  enabledForGitHubApps: true
  # category and subcategory affect where the operation appears in https://docs.github.com/rest
  category: repos
  subcategory: repos

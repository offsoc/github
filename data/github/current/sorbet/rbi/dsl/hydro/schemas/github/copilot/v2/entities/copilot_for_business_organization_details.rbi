# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessOrganizationDetails`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessOrganizationDetails`.

class Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessOrganizationDetails
  sig do
    params(
      business: T.nilable(Hydro::Schemas::Github::V1::Entities::Business),
      on_free_trial: T.nilable(T::Boolean),
      organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      organization_analytics_tracking_id: T.nilable(String),
      organization_billing_type: T.nilable(String),
      organization_current_metered_billing_cycle_starts_at: T.nilable(Google::Protobuf::Timestamp),
      organization_next_metered_billing_cycle_starts_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(business: nil, on_free_trial: nil, organization: nil, organization_analytics_tracking_id: nil, organization_billing_type: nil, organization_current_metered_billing_cycle_starts_at: nil, organization_next_metered_billing_cycle_starts_at: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Business)) }
  def business; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Business)).void }
  def business=(value); end

  sig { void }
  def clear_business; end

  sig { void }
  def clear_on_free_trial; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_organization_analytics_tracking_id; end

  sig { void }
  def clear_organization_billing_type; end

  sig { void }
  def clear_organization_current_metered_billing_cycle_starts_at; end

  sig { void }
  def clear_organization_next_metered_billing_cycle_starts_at; end

  sig { returns(T::Boolean) }
  def on_free_trial; end

  sig { params(value: T::Boolean).void }
  def on_free_trial=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def organization=(value); end

  sig { returns(String) }
  def organization_analytics_tracking_id; end

  sig { params(value: String).void }
  def organization_analytics_tracking_id=(value); end

  sig { returns(String) }
  def organization_billing_type; end

  sig { params(value: String).void }
  def organization_billing_type=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def organization_current_metered_billing_cycle_starts_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def organization_current_metered_billing_cycle_starts_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def organization_next_metered_billing_cycle_starts_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def organization_next_metered_billing_cycle_starts_at=(value); end
end

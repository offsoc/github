# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Sponsors::V1::SponsorsDisplayAgreement`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Sponsors::V1::SponsorsDisplayAgreement`.

class Hydro::Schemas::Github::Sponsors::V1::SponsorsDisplayAgreement
  sig do
    params(
      agreement: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsAgreement),
      listing: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      sponsorable: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      viewer: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(agreement: nil, listing: nil, request_context: nil, sponsorable: nil, viewer: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsAgreement)) }
  def agreement; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsAgreement)).void }
  def agreement=(value); end

  sig { void }
  def clear_agreement; end

  sig { void }
  def clear_listing; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_sponsorable; end

  sig { void }
  def clear_viewer; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing)) }
  def listing; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing)).void }
  def listing=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def sponsorable; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def sponsorable=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def viewer; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def viewer=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Aleph::Proto::CallGraphSymbol`.
# Please instead update this file by running `bin/tapioca dsl Aleph::Proto::CallGraphSymbol`.

class Aleph::Proto::CallGraphSymbol
  sig do
    params(
      call_references: T.nilable(T.any(Google::Protobuf::RepeatedField[Aleph::Proto::Location], T::Array[Aleph::Proto::Location])),
      calls: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      extent_offset: T.nilable(Aleph::Proto::ByteOffset),
      fully_qualified_name: T.nilable(String),
      ident_offset: T.nilable(Aleph::Proto::ByteOffset),
      location: T.nilable(Aleph::Proto::Location),
      name: T.nilable(String)
    ).void
  end
  def initialize(call_references: T.unsafe(nil), calls: T.unsafe(nil), extent_offset: nil, fully_qualified_name: nil, ident_offset: nil, location: nil, name: nil); end

  sig { returns(Google::Protobuf::RepeatedField[Aleph::Proto::Location]) }
  def call_references; end

  sig { params(value: Google::Protobuf::RepeatedField[Aleph::Proto::Location]).void }
  def call_references=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def calls; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def calls=(value); end

  sig { void }
  def clear_call_references; end

  sig { void }
  def clear_calls; end

  sig { void }
  def clear_extent_offset; end

  sig { void }
  def clear_fully_qualified_name; end

  sig { void }
  def clear_ident_offset; end

  sig { void }
  def clear_location; end

  sig { void }
  def clear_name; end

  sig { returns(T.nilable(Aleph::Proto::ByteOffset)) }
  def extent_offset; end

  sig { params(value: T.nilable(Aleph::Proto::ByteOffset)).void }
  def extent_offset=(value); end

  sig { returns(String) }
  def fully_qualified_name; end

  sig { params(value: String).void }
  def fully_qualified_name=(value); end

  sig { returns(T.nilable(Aleph::Proto::ByteOffset)) }
  def ident_offset; end

  sig { params(value: T.nilable(Aleph::Proto::ByteOffset)).void }
  def ident_offset=(value); end

  sig { returns(T.nilable(Aleph::Proto::Location)) }
  def location; end

  sig { params(value: T.nilable(Aleph::Proto::Location)).void }
  def location=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end
end

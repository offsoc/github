# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Integration`.
# Please instead update this file by running `bin/tapioca dsl Integration`.

class Integration
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedSpammableMethods
  extend GeneratedSpammableClassMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def proxima_availabilities; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def states; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def visibilities; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Integration).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Integration).void)
      ).returns(::Integration)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Integration).void)
      ).returns(::Integration)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Integration).void)
      ).returns(::Integration)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Integration).void)
      ).returns(::Integration)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Integration).void)
      ).returns(::Integration)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Integration]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Integration)) }
    def fifth; end

    sig { returns(::Integration) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Integration)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Integration) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Integration).void)
      ).returns(T.nilable(T::Enumerator[::Integration]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Integration]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Integration]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Integration).void)
      ).returns(::Integration)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Integration).void)
      ).returns(::Integration)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Integration).void)
      ).returns(::Integration)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Integration)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Integration) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Integration) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Integration) }
    def first!; end

    sig { returns(T.nilable(::Integration)) }
    def forty_two; end

    sig { returns(::Integration) }
    def forty_two!; end

    sig { returns(T.nilable(::Integration)) }
    def fourth; end

    sig { returns(::Integration) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Integration) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Integration).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Integration).void)
      ).returns(::Integration)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Integration).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Integration).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Integration)) }
    def second; end

    sig { returns(::Integration) }
    def second!; end

    sig { returns(T.nilable(::Integration)) }
    def second_to_last; end

    sig { returns(::Integration) }
    def second_to_last!; end

    sig { returns(::Integration) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Integration) }
    def take!; end

    sig { returns(T.nilable(::Integration)) }
    def third; end

    sig { returns(::Integration) }
    def third!; end

    sig { returns(T.nilable(::Integration)) }
    def third_to_last; end

    sig { returns(::Integration) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def active!; end

    sig { returns(T::Boolean) }
    def active?; end

    sig { void }
    def available!; end

    sig { returns(T::Boolean) }
    def available?; end

    sig { void }
    def internal_visibility!; end

    sig { returns(T::Boolean) }
    def internal_visibility?; end

    sig { void }
    def private_visibility!; end

    sig { returns(T::Boolean) }
    def private_visibility?; end

    sig { void }
    def public_visibility!; end

    sig { returns(T::Boolean) }
    def public_visibility?; end

    sig { void }
    def suspended!; end

    sig { returns(T::Boolean) }
    def suspended?; end

    sig { void }
    def unavailable!; end

    sig { returns(T::Boolean) }
    def unavailable?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def access_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def access_ids=(ids); end

    # This method is created by ActiveRecord on the `Integration` class because it declared `has_many :accesses`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OauthAccess::PrivateCollectionProxy) }
    def accesses; end

    sig { params(value: T::Enumerable[::OauthAccess]).void }
    def accesses=(value); end

    sig { returns(T.nilable(::IntegrationAlias)) }
    def alias; end

    sig { params(value: T.nilable(::IntegrationAlias)).void }
    def alias=(value); end

    sig { returns(T::Array[T.untyped]) }
    def application_callback_url_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def application_callback_url_ids=(ids); end

    # This method is created by ActiveRecord on the `Integration` class because it declared `has_many :application_callback_urls`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ApplicationCallbackUrl::PrivateCollectionProxy) }
    def application_callback_urls; end

    sig { params(value: T::Enumerable[::ApplicationCallbackUrl]).void }
    def application_callback_urls=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def application_callback_urls_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def authorization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def authorization_ids=(ids); end

    # This method is created by ActiveRecord on the `Integration` class because it declared `has_many :authorizations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OauthAuthorization::PrivateCollectionProxy) }
    def authorizations; end

    sig { params(value: T::Enumerable[::OauthAuthorization]).void }
    def authorizations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def avatar_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def avatar_ids=(ids); end

    # This method is created by ActiveRecord on the `Integration` class because it declared `has_many :avatars`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Avatar::PrivateCollectionProxy) }
    def avatars; end

    sig { params(value: T::Enumerable[::Avatar]).void }
    def avatars=(value); end

    sig { returns(T.nilable(::Bot)) }
    def bot; end

    sig { params(value: T.nilable(::Bot)).void }
    def bot=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationAlias) }
    def build_alias(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Bot) }
    def build_bot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DotcomAppOwnerMetadata) }
    def build_dotcom_app_owner_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EnterpriseInstallation) }
    def build_enterprise_installation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Hook) }
    def build_hook(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationAgent) }
    def build_integration_agent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationListing) }
    def build_integration_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationVersion) }
    def build_latest_version(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Category) }
    def build_marketplace_category(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Listing) }
    def build_marketplace_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationTransfer) }
    def build_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user_suspended_by(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def client_secret_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def client_secret_ids=(ids); end

    # This method is created by ActiveRecord on the `Integration` class because it declared `has_many :client_secrets`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationClientSecret::PrivateCollectionProxy) }
    def client_secrets; end

    sig { params(value: T::Enumerable[::IntegrationClientSecret]).void }
    def client_secrets=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def client_secrets_attributes=(attributes); end

    # This method is created by ActiveRecord on the `Integration` class because it declared `has_many :configuration_entries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Configuration::Entry::PrivateCollectionProxy) }
    def configuration_entries; end

    sig { params(value: T::Enumerable[::Configuration::Entry]).void }
    def configuration_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def configuration_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def configuration_entry_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationAlias) }
    def create_alias(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationAlias) }
    def create_alias!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Bot) }
    def create_bot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Bot) }
    def create_bot!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DotcomAppOwnerMetadata) }
    def create_dotcom_app_owner_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DotcomAppOwnerMetadata) }
    def create_dotcom_app_owner_metadata!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EnterpriseInstallation) }
    def create_enterprise_installation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EnterpriseInstallation) }
    def create_enterprise_installation!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Hook) }
    def create_hook(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Hook) }
    def create_hook!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationAgent) }
    def create_integration_agent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationAgent) }
    def create_integration_agent!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationListing) }
    def create_integration_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationListing) }
    def create_integration_listing!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationVersion) }
    def create_latest_version(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationVersion) }
    def create_latest_version!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Category) }
    def create_marketplace_category(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Category) }
    def create_marketplace_category!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Listing) }
    def create_marketplace_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Listing) }
    def create_marketplace_listing!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationTransfer) }
    def create_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationTransfer) }
    def create_transfer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user_suspended_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user_suspended_by!(*args, &blk); end

    sig { returns(T.nilable(::DotcomAppOwnerMetadata)) }
    def dotcom_app_owner_metadata; end

    sig { params(value: T.nilable(::DotcomAppOwnerMetadata)).void }
    def dotcom_app_owner_metadata=(value); end

    sig { returns(T.nilable(::EnterpriseInstallation)) }
    def enterprise_installation; end

    sig { params(value: T.nilable(::EnterpriseInstallation)).void }
    def enterprise_installation=(value); end

    sig { returns(T.nilable(::Hook)) }
    def hook; end

    sig { params(value: T.nilable(::Hook)).void }
    def hook=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def hook_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def installation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def installation_ids=(ids); end

    # This method is created by ActiveRecord on the `Integration` class because it declared `has_many :installations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationInstallation::PrivateCollectionProxy) }
    def installations; end

    sig { params(value: T::Enumerable[::IntegrationInstallation]).void }
    def installations=(value); end

    sig { returns(T.nilable(::IntegrationAgent)) }
    def integration_agent; end

    sig { params(value: T.nilable(::IntegrationAgent)).void }
    def integration_agent=(value); end

    sig { returns(T::Array[T.untyped]) }
    def integration_install_trigger_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_install_trigger_ids=(ids); end

    # This method is created by ActiveRecord on the `Integration` class because it declared `has_many :integration_install_triggers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationInstallTrigger::PrivateCollectionProxy) }
    def integration_install_triggers; end

    sig { params(value: T::Enumerable[::IntegrationInstallTrigger]).void }
    def integration_install_triggers=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def integration_install_triggers_attributes=(attributes); end

    sig { returns(T.nilable(::IntegrationListing)) }
    def integration_listing; end

    sig { params(value: T.nilable(::IntegrationListing)).void }
    def integration_listing=(value); end

    # This method is created by ActiveRecord on the `Integration` class because it declared `has_many :ip_allowlist_entries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IpAllowlistEntry::PrivateCollectionProxy) }
    def ip_allowlist_entries; end

    sig { params(value: T::Enumerable[::IpAllowlistEntry]).void }
    def ip_allowlist_entries=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def ip_allowlist_entries_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def ip_allowlist_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ip_allowlist_entry_ids=(ids); end

    sig { returns(T.nilable(::IntegrationVersion)) }
    def latest_version; end

    sig { params(value: T.nilable(::IntegrationVersion)).void }
    def latest_version=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def latest_version_attributes=(attributes); end

    sig { returns(T.nilable(::Marketplace::Category)) }
    def marketplace_category; end

    sig { params(value: T.nilable(::Marketplace::Category)).void }
    def marketplace_category=(value); end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def marketplace_listing; end

    sig { params(value: T.nilable(::Marketplace::Listing)).void }
    def marketplace_listing=(value); end

    sig { returns(T.untyped) }
    def owner; end

    sig { params(value: T.untyped).void }
    def owner=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pending_installation_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pending_installation_request_ids=(ids); end

    # This method is created by ActiveRecord on the `Integration` class because it declared `has_many :pending_installation_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationInstallationRequest::PrivateCollectionProxy) }
    def pending_installation_requests; end

    sig { params(value: T::Enumerable[::IntegrationInstallationRequest]).void }
    def pending_installation_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def public_key_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def public_key_ids=(ids); end

    # This method is created by ActiveRecord on the `Integration` class because it declared `has_many :public_keys`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationKey::PrivateCollectionProxy) }
    def public_keys; end

    sig { params(value: T::Enumerable[::IntegrationKey]).void }
    def public_keys=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def public_keys_attributes=(attributes); end

    sig { returns(T.nilable(::IntegrationAlias)) }
    def reload_alias; end

    sig { returns(T.nilable(::Bot)) }
    def reload_bot; end

    sig { returns(T.nilable(::DotcomAppOwnerMetadata)) }
    def reload_dotcom_app_owner_metadata; end

    sig { returns(T.nilable(::EnterpriseInstallation)) }
    def reload_enterprise_installation; end

    sig { returns(T.nilable(::Hook)) }
    def reload_hook; end

    sig { returns(T.nilable(::IntegrationAgent)) }
    def reload_integration_agent; end

    sig { returns(T.nilable(::IntegrationListing)) }
    def reload_integration_listing; end

    sig { returns(T.nilable(::IntegrationVersion)) }
    def reload_latest_version; end

    sig { returns(T.nilable(::Marketplace::Category)) }
    def reload_marketplace_category; end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def reload_marketplace_listing; end

    sig { returns(T.untyped) }
    def reload_owner; end

    sig { returns(T.nilable(::IntegrationTransfer)) }
    def reload_transfer; end

    sig { returns(T.nilable(::User)) }
    def reload_user_suspended_by; end

    sig { returns(T.nilable(::IntegrationTransfer)) }
    def transfer; end

    sig { params(value: T.nilable(::IntegrationTransfer)).void }
    def transfer=(value); end

    sig { returns(T.nilable(::User)) }
    def user_suspended_by; end

    sig { params(value: T.nilable(::User)).void }
    def user_suspended_by=(value); end

    sig { returns(T::Array[T.untyped]) }
    def version_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def version_ids=(ids); end

    # This method is created by ActiveRecord on the `Integration` class because it declared `has_many :versions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationVersion::PrivateCollectionProxy) }
    def versions; end

    sig { params(value: T::Enumerable[::IntegrationVersion]).void }
    def versions=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def adminable_by(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def available(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def including_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def internal_visibility(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def name_or_slug_like(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_available(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_for_github_connect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_in_marketplace(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_internal_visibility(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_marked_for_deletion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_private_visibility(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_public_visibility(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_suspended(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unavailable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_visibility(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def public_visibility(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def suspended(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def syncable_to_proxima(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unavailable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def user_installable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_latest_version(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_accesses; end

    sig { returns(Promise[T.untyped]) }
    def async_alias; end

    sig { returns(Promise[T.untyped]) }
    def async_application_callback_urls; end

    sig { returns(Promise[T.untyped]) }
    def async_authorizations; end

    sig { returns(Promise[T.untyped]) }
    def async_avatars; end

    sig { returns(Promise[T.untyped]) }
    def async_bot; end

    sig { returns(Promise[T.untyped]) }
    def async_client_secrets; end

    sig { returns(Promise[T.untyped]) }
    def async_configuration_entries; end

    sig { returns(Promise[T.untyped]) }
    def async_dotcom_app_owner_metadata; end

    sig { returns(Promise[T.untyped]) }
    def async_enterprise_installation; end

    sig { returns(Promise[T.untyped]) }
    def async_hook; end

    sig { returns(Promise[T.untyped]) }
    def async_installations; end

    sig { returns(Promise[T.untyped]) }
    def async_integration_agent; end

    sig { returns(Promise[T.untyped]) }
    def async_integration_install_triggers; end

    sig { returns(Promise[T.untyped]) }
    def async_integration_listing; end

    sig { returns(Promise[T.untyped]) }
    def async_ip_allowlist_entries; end

    sig { returns(Promise[T.untyped]) }
    def async_latest_version; end

    sig { returns(Promise[T.untyped]) }
    def async_marketplace_category; end

    sig { returns(Promise[T.untyped]) }
    def async_marketplace_listing; end

    sig { returns(Promise[T.untyped]) }
    def async_owner; end

    sig { returns(Promise[T.untyped]) }
    def async_pending_installation_requests; end

    sig { returns(Promise[T.untyped]) }
    def async_public_keys; end

    sig { returns(Promise[T.untyped]) }
    def async_transfer; end

    sig { returns(Promise[T.untyped]) }
    def async_user_suspended_by; end

    sig { returns(Promise[T.untyped]) }
    def async_versions; end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def bgcolor; end

    sig { params(value: ::String).returns(::String) }
    def bgcolor=(value); end

    sig { returns(T::Boolean) }
    def bgcolor?; end

    sig { returns(T.nilable(::String)) }
    def bgcolor_before_last_save; end

    sig { returns(T.untyped) }
    def bgcolor_before_type_cast; end

    sig { returns(T::Boolean) }
    def bgcolor_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def bgcolor_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def bgcolor_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def bgcolor_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def bgcolor_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def bgcolor_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def bgcolor_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def bgcolor_previously_was; end

    sig { returns(T.nilable(::String)) }
    def bgcolor_was; end

    sig { void }
    def bgcolor_will_change!; end

    sig { returns(::Integer) }
    def bot_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def bot_id=(value); end

    sig { returns(T::Boolean) }
    def bot_id?; end

    sig { returns(T.nilable(::Integer)) }
    def bot_id_before_last_save; end

    sig { returns(T.untyped) }
    def bot_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def bot_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def bot_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def bot_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def bot_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def bot_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def bot_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def bot_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def bot_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def bot_id_was; end

    sig { void }
    def bot_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at=(value); end

    sig { returns(T::Boolean) }
    def deleted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_was; end

    sig { void }
    def deleted_at_will_change!; end

    sig { returns(T.untyped) }
    def description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.untyped) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_previously_was; end

    sig { returns(T.untyped) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T::Boolean) }
    def device_flow_enabled; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def device_flow_enabled=(value); end

    sig { returns(T::Boolean) }
    def device_flow_enabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def device_flow_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def device_flow_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def device_flow_enabled_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def device_flow_enabled_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def device_flow_enabled_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def device_flow_enabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def device_flow_enabled_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def device_flow_enabled_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def device_flow_enabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def device_flow_enabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def device_flow_enabled_was; end

    sig { void }
    def device_flow_enabled_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def key; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def key=(value); end

    sig { returns(T::Boolean) }
    def key?; end

    sig { returns(T.nilable(::String)) }
    def key_before_last_save; end

    sig { returns(T.untyped) }
    def key_before_type_cast; end

    sig { returns(T::Boolean) }
    def key_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def key_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def key_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def key_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def key_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def key_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def key_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def key_was; end

    sig { void }
    def key_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_category_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def marketplace_category_id=(value); end

    sig { returns(T::Boolean) }
    def marketplace_category_id?; end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_category_id_before_last_save; end

    sig { returns(T.untyped) }
    def marketplace_category_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def marketplace_category_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def marketplace_category_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def marketplace_category_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def marketplace_category_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_category_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def marketplace_category_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def marketplace_category_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_category_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_category_id_was; end

    sig { void }
    def marketplace_category_id_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::Integer) }
    def owner_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def owner_id=(value); end

    sig { returns(T::Boolean) }
    def owner_id?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_before_last_save; end

    sig { returns(T.untyped) }
    def owner_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def owner_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def owner_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def owner_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_was; end

    sig { void }
    def owner_id_will_change!; end

    sig { returns(::String) }
    def owner_type; end

    sig { params(value: ::String).returns(::String) }
    def owner_type=(value); end

    sig { returns(T::Boolean) }
    def owner_type?; end

    sig { returns(T.nilable(::String)) }
    def owner_type_before_last_save; end

    sig { returns(T.untyped) }
    def owner_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def owner_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def owner_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def owner_type_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def owner_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def owner_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def owner_type_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def owner_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def owner_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def owner_type_was; end

    sig { void }
    def owner_type_will_change!; end

    sig { returns(T.nilable(::String)) }
    def pinned_api_version; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def pinned_api_version=(value); end

    sig { returns(T::Boolean) }
    def pinned_api_version?; end

    sig { returns(T.nilable(::String)) }
    def pinned_api_version_before_last_save; end

    sig { returns(T.untyped) }
    def pinned_api_version_before_type_cast; end

    sig { returns(T::Boolean) }
    def pinned_api_version_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pinned_api_version_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pinned_api_version_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def pinned_api_version_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pinned_api_version_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pinned_api_version_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def pinned_api_version_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pinned_api_version_previously_was; end

    sig { returns(T.nilable(::String)) }
    def pinned_api_version_was; end

    sig { void }
    def pinned_api_version_will_change!; end

    sig { returns(::String) }
    def proxima_availability; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def proxima_availability=(value); end

    sig { returns(T::Boolean) }
    def proxima_availability?; end

    sig { returns(T.nilable(::String)) }
    def proxima_availability_before_last_save; end

    sig { returns(T.untyped) }
    def proxima_availability_before_type_cast; end

    sig { returns(T::Boolean) }
    def proxima_availability_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def proxima_availability_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def proxima_availability_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def proxima_availability_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def proxima_availability_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def proxima_availability_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def proxima_availability_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def proxima_availability_previously_was; end

    sig { returns(T.nilable(::String)) }
    def proxima_availability_was; end

    sig { void }
    def proxima_availability_will_change!; end

    sig { returns(T::Boolean) }
    def public; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def public=(value); end

    sig { returns(T::Boolean) }
    def public?; end

    sig { returns(T.nilable(T::Boolean)) }
    def public_before_last_save; end

    sig { returns(T.untyped) }
    def public_before_type_cast; end

    sig { returns(T::Boolean) }
    def public_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def public_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def public_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def public_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def public_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def public_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def public_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def public_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def public_was; end

    sig { void }
    def public_will_change!; end

    sig { returns(T::Boolean) }
    def request_oauth_on_install; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def request_oauth_on_install=(value); end

    sig { returns(T::Boolean) }
    def request_oauth_on_install?; end

    sig { returns(T.nilable(T::Boolean)) }
    def request_oauth_on_install_before_last_save; end

    sig { returns(T.untyped) }
    def request_oauth_on_install_before_type_cast; end

    sig { returns(T::Boolean) }
    def request_oauth_on_install_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def request_oauth_on_install_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def request_oauth_on_install_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def request_oauth_on_install_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def request_oauth_on_install_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def request_oauth_on_install_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def request_oauth_on_install_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def request_oauth_on_install_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def request_oauth_on_install_was; end

    sig { void }
    def request_oauth_on_install_will_change!; end

    sig { void }
    def restore_bgcolor!; end

    sig { void }
    def restore_bot_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_deleted_at!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_device_flow_enabled!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_key!; end

    sig { void }
    def restore_marketplace_category_id!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_owner_id!; end

    sig { void }
    def restore_owner_type!; end

    sig { void }
    def restore_pinned_api_version!; end

    sig { void }
    def restore_proxima_availability!; end

    sig { void }
    def restore_public!; end

    sig { void }
    def restore_request_oauth_on_install!; end

    sig { void }
    def restore_setup_on_update!; end

    sig { void }
    def restore_setup_url!; end

    sig { void }
    def restore_slug!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_suspended_at!; end

    sig { void }
    def restore_suspended_reason!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_url!; end

    sig { void }
    def restore_user_hidden!; end

    sig { void }
    def restore_user_suspended_by_id!; end

    sig { void }
    def restore_user_token_expiration!; end

    sig { void }
    def restore_visibility!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_bgcolor; end

    sig { returns(T::Boolean) }
    def saved_change_to_bgcolor?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_bot_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_bot_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_deleted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_device_flow_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_device_flow_enabled?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_key?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_marketplace_category_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_marketplace_category_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_owner_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_owner_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_owner_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_owner_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_pinned_api_version; end

    sig { returns(T::Boolean) }
    def saved_change_to_pinned_api_version?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_proxima_availability; end

    sig { returns(T::Boolean) }
    def saved_change_to_proxima_availability?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_public; end

    sig { returns(T::Boolean) }
    def saved_change_to_public?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_request_oauth_on_install; end

    sig { returns(T::Boolean) }
    def saved_change_to_request_oauth_on_install?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_setup_on_update; end

    sig { returns(T::Boolean) }
    def saved_change_to_setup_on_update?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_setup_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_setup_url?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_slug?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_suspended_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_suspended_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_suspended_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_suspended_reason?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_url?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_user_hidden; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_hidden?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_user_suspended_by_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_suspended_by_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_user_token_expiration; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_token_expiration?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_visibility; end

    sig { returns(T::Boolean) }
    def saved_change_to_visibility?; end

    sig { returns(T::Boolean) }
    def setup_on_update; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def setup_on_update=(value); end

    sig { returns(T::Boolean) }
    def setup_on_update?; end

    sig { returns(T.nilable(T::Boolean)) }
    def setup_on_update_before_last_save; end

    sig { returns(T.untyped) }
    def setup_on_update_before_type_cast; end

    sig { returns(T::Boolean) }
    def setup_on_update_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def setup_on_update_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def setup_on_update_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def setup_on_update_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def setup_on_update_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def setup_on_update_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def setup_on_update_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def setup_on_update_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def setup_on_update_was; end

    sig { void }
    def setup_on_update_will_change!; end

    sig { returns(T.nilable(::String)) }
    def setup_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def setup_url=(value); end

    sig { returns(T::Boolean) }
    def setup_url?; end

    sig { returns(T.nilable(::String)) }
    def setup_url_before_last_save; end

    sig { returns(T.untyped) }
    def setup_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def setup_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def setup_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def setup_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def setup_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def setup_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def setup_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def setup_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def setup_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def setup_url_was; end

    sig { void }
    def setup_url_will_change!; end

    sig { returns(::String) }
    def slug; end

    sig { params(value: ::String).returns(::String) }
    def slug=(value); end

    sig { returns(T::Boolean) }
    def slug?; end

    sig { returns(T.nilable(::String)) }
    def slug_before_last_save; end

    sig { returns(T.untyped) }
    def slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def slug_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def slug_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def slug_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slug_was; end

    sig { void }
    def slug_will_change!; end

    sig { returns(::String) }
    def state; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at=(value); end

    sig { returns(T::Boolean) }
    def suspended_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_before_last_save; end

    sig { returns(T.untyped) }
    def suspended_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def suspended_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def suspended_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def suspended_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def suspended_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def suspended_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def suspended_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_was; end

    sig { void }
    def suspended_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def suspended_reason; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def suspended_reason=(value); end

    sig { returns(T::Boolean) }
    def suspended_reason?; end

    sig { returns(T.nilable(::String)) }
    def suspended_reason_before_last_save; end

    sig { returns(T.untyped) }
    def suspended_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def suspended_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def suspended_reason_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def suspended_reason_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def suspended_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def suspended_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def suspended_reason_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def suspended_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def suspended_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def suspended_reason_was; end

    sig { void }
    def suspended_reason_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::String) }
    def url; end

    sig { params(value: ::String).returns(::String) }
    def url=(value); end

    sig { returns(T::Boolean) }
    def url?; end

    sig { returns(T.nilable(::String)) }
    def url_before_last_save; end

    sig { returns(T.untyped) }
    def url_before_type_cast; end

    sig { returns(T::Boolean) }
    def url_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def url_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def url_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def url_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def url_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def url_was; end

    sig { void }
    def url_will_change!; end

    sig { returns(T::Boolean) }
    def user_hidden; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def user_hidden=(value); end

    sig { returns(T::Boolean) }
    def user_hidden?; end

    sig { returns(T.nilable(T::Boolean)) }
    def user_hidden_before_last_save; end

    sig { returns(T.untyped) }
    def user_hidden_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_hidden_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def user_hidden_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def user_hidden_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def user_hidden_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def user_hidden_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def user_hidden_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def user_hidden_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def user_hidden_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def user_hidden_was; end

    sig { void }
    def user_hidden_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def user_suspended_by_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def user_suspended_by_id=(value); end

    sig { returns(T::Boolean) }
    def user_suspended_by_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_suspended_by_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_suspended_by_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_suspended_by_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_suspended_by_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_suspended_by_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_suspended_by_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_suspended_by_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_suspended_by_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_suspended_by_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_suspended_by_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_suspended_by_id_was; end

    sig { void }
    def user_suspended_by_id_will_change!; end

    sig { returns(T::Boolean) }
    def user_token_expiration; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def user_token_expiration=(value); end

    sig { returns(T::Boolean) }
    def user_token_expiration?; end

    sig { returns(T.nilable(T::Boolean)) }
    def user_token_expiration_before_last_save; end

    sig { returns(T.untyped) }
    def user_token_expiration_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_token_expiration_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def user_token_expiration_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def user_token_expiration_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def user_token_expiration_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def user_token_expiration_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def user_token_expiration_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def user_token_expiration_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def user_token_expiration_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def user_token_expiration_was; end

    sig { void }
    def user_token_expiration_will_change!; end

    sig { returns(::String) }
    def visibility; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def visibility=(value); end

    sig { returns(T::Boolean) }
    def visibility?; end

    sig { returns(T.nilable(::String)) }
    def visibility_before_last_save; end

    sig { returns(T.untyped) }
    def visibility_before_type_cast; end

    sig { returns(T::Boolean) }
    def visibility_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def visibility_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def visibility_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def visibility_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def visibility_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def visibility_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def visibility_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def visibility_previously_was; end

    sig { returns(T.nilable(::String)) }
    def visibility_was; end

    sig { void }
    def visibility_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bgcolor?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bot_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_device_flow_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_marketplace_category_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_owner_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_owner_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pinned_api_version?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_proxima_availability?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_public?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_request_oauth_on_install?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_setup_on_update?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_setup_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_suspended_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_suspended_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_hidden?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_suspended_by_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_token_expiration?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_visibility?; end
  end

  module GeneratedPreludeBatchMethods
    sig { params(options: T.untyped).returns(T.untyped) }
    def prelude_body_html(options); end

    sig { params(options: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_body_html(options); end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def adminable_by(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def available(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def including_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def internal_visibility(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def name_or_slug_like(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_available(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_for_github_connect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_in_marketplace(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_internal_visibility(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_marked_for_deletion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_private_visibility(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_public_visibility(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_suspended(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unavailable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_visibility(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def public_visibility(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def suspended(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def syncable_to_proxima(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unavailable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def user_installable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_latest_version(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedSpammableClassMethods
    sig { returns(Symbol) }
    def spammable_user_foreign_key; end
  end

  module GeneratedSpammableMethods
    sig { params(viewer: User).returns(Promise[T::Boolean]) }
    def async_hide_from_user?(viewer); end

    sig { params(viewer: User).returns(T::Boolean) }
    def hide_from_user?(viewer); end

    sig { returns(Integer) }
    def set_user_hidden; end

    sig { returns(T::Boolean) }
    def spammy?; end

    sig { returns(Symbol) }
    def user_association_for_spammy; end

    sig { params(viewer: User).returns(T::Boolean) }
    def user_authored_content?(viewer); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Integration } }

    sig { returns(T::Array[::Integration]) }
    def to_a; end

    sig { returns(T::Array[::Integration]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Integration } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Integration } }

    sig do
      params(
        records: T.any(::Integration, T::Enumerable[T.any(::Integration, T::Enumerable[::Integration])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Integration, T::Enumerable[T.any(::Integration, T::Enumerable[::Integration])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Integration, T::Enumerable[T.any(::Integration, T::Enumerable[::Integration])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Integration]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Integration, T::Enumerable[T.any(::Integration, T::Enumerable[::Integration])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Integration, T::Enumerable[T.any(::Integration, T::Enumerable[::Integration])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Integration, T::Enumerable[T.any(::Integration, T::Enumerable[::Integration])])
      ).returns(T::Array[::Integration])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Integration]) }
    def target; end

    sig { returns(T::Array[::Integration]) }
    def to_a; end

    sig { returns(T::Array[::Integration]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Integration } }

    sig { returns(T::Array[::Integration]) }
    def to_a; end

    sig { returns(T::Array[::Integration]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Integration } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

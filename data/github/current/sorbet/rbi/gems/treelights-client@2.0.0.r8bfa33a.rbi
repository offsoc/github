# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `treelights-client` gem.
# Please instead update this file by running `bin/tapioca gem treelights-client`.

# source://treelights-client//ruby/lib/treelights/version.rb#1
module Github; end

# source://treelights-client//ruby/lib/treelights/version.rb#2
module Github::Treelights; end

# source://treelights-client//ruby/lib/treelights.rb#6
class Github::Treelights::Client
  # @return [Client] a new instance of Client
  #
  # source://treelights-client//ruby/lib/treelights.rb#11
  def initialize(conn); end

  # @raise [ResponseError]
  #
  # source://treelights-client//ruby/lib/treelights.rb#15
  def highlight(scopes, contents, timeout: T.unsafe(nil), mode: T.unsafe(nil), highlight_format: T.unsafe(nil)); end

  # @raise [ResponseError]
  #
  # source://treelights-client//ruby/lib/treelights.rb#55
  def info; end

  # Returns the value of attribute rpc.
  #
  # source://treelights-client//ruby/lib/treelights.rb#9
  def rpc; end

  # @raise [ResponseError]
  #
  # source://treelights-client//ruby/lib/treelights.rb#35
  def styling_directives(scopes, contents, timeout: T.unsafe(nil)); end

  class << self
    # source://treelights-client//ruby/lib/treelights.rb#81
    def documents(scopes, contents); end

    # source://treelights-client//ruby/lib/treelights.rb#65
    def highlight_request(scopes, contents, timeout, mode, highlight_format); end

    # source://treelights-client//ruby/lib/treelights.rb#74
    def styling_directives_request(scopes, contents, timeout); end
  end
end

# source://treelights-client//ruby/lib/treelights.rb#7
class Github::Treelights::Client::ResponseError < ::StandardError; end

class Github::Treelights::Document
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://treelights-client//ruby/lib/treelights/gzip_request.rb#5
class Github::Treelights::GzipRequest < ::Faraday::Middleware
  # source://treelights-client//ruby/lib/treelights/gzip_request.rb#10
  def call(env); end
end

# source://treelights-client//ruby/lib/treelights/gzip_request.rb#7
Github::Treelights::GzipRequest::CONTENT_ENCODING = T.let(T.unsafe(nil), String)

# source://treelights-client//ruby/lib/treelights/gzip_request.rb#6
Github::Treelights::GzipRequest::GZIP = T.let(T.unsafe(nil), String)

# source://treelights-client//ruby/lib/treelights/gzip_request.rb#8
Github::Treelights::GzipRequest::MIN_CONTENT_LENGTH = T.let(T.unsafe(nil), Integer)

module Github::Treelights::HighlightMode
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://treelights-client//ruby/lib/treelights/proto/highlighter_pb.rb#82
Github::Treelights::HighlightMode::DEFAULT = T.let(T.unsafe(nil), Integer)

# source://treelights-client//ruby/lib/treelights/proto/highlighter_pb.rb#82
Github::Treelights::HighlightMode::TEXTMATE_AND_TEST_TREE_SITTER = T.let(T.unsafe(nil), Integer)

# source://treelights-client//ruby/lib/treelights/proto/highlighter_pb.rb#82
Github::Treelights::HighlightMode::TEXTMATE_ONLY = T.let(T.unsafe(nil), Integer)

class Github::Treelights::HighlightRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::Treelights::HighlightResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::Treelights::Highlighted
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://treelights-client//ruby/lib/treelights/proto/highlighter_twirp.rb#15
class Github::Treelights::HighlighterClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def highlight(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def info(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def styling_directives(input, req_opts = T.unsafe(nil)); end
end

# source://treelights-client//ruby/lib/treelights/proto/highlighter_twirp.rb#7
class Github::Treelights::HighlighterService < ::Twirp::Service; end

class Github::Treelights::InfoRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::Treelights::InfoResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::Treelights::Offset
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Github::Treelights::OutputFormat
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://treelights-client//ruby/lib/treelights/proto/highlighter_pb.rb#83
Github::Treelights::OutputFormat::CSS = T.let(T.unsafe(nil), Integer)

# source://treelights-client//ruby/lib/treelights/proto/highlighter_pb.rb#83
Github::Treelights::OutputFormat::HTML = T.let(T.unsafe(nil), Integer)

# source://treelights-client//ruby/lib/treelights/proto/highlighter_pb.rb#83
Github::Treelights::OutputFormat::HTML_WITH_HIDDEN_TEXT = T.let(T.unsafe(nil), Integer)

# source://treelights-client//ruby/lib/treelights/proto/highlighter_pb.rb#83
Github::Treelights::OutputFormat::UNKNOWN = T.let(T.unsafe(nil), Integer)

class Github::Treelights::StylingDirective
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::Treelights::StylingDirectivesDocument
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::Treelights::StylingDirectivesLine
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::Treelights::StylingDirectivesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::Treelights::StylingDirectivesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://treelights-client//ruby/lib/treelights/version.rb#3
Github::Treelights::VERSION = T.let(T.unsafe(nil), String)

module Google::Protobuf::MessageExts::ClassMethods; end

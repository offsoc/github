# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Insights::Core::V1::PullRequest`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Insights::Core::V1::PullRequest`.

class MonolithTwirp::Insights::Core::V1::PullRequest
  sig do
    params(
      base_ref: T.nilable(String),
      base_repository_id: T.nilable(Integer),
      base_sha: T.nilable(String),
      base_sha_on_merge: T.nilable(String),
      base_user_id: T.nilable(Integer),
      contributed_at_offset: T.nilable(Integer),
      contributed_at_timestamp: T.nilable(Integer),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      fork_collab_state: T.nilable(Integer),
      head_ref: T.nilable(String),
      head_repository_id: T.nilable(Integer),
      head_sha: T.nilable(String),
      head_user_id: T.nilable(Integer),
      id: T.nilable(Integer),
      is_mergeable: T.nilable(T::Boolean),
      is_user_hidden: T.nilable(T::Boolean),
      is_work_in_progress: T.nilable(T::Boolean),
      merge_commit_sha: T.nilable(String),
      merged_at: T.nilable(Google::Protobuf::Timestamp),
      repository_id: T.nilable(Integer),
      review_comments_with_body_count: T.nilable(Integer),
      reviewable_state: T.nilable(Integer),
      reviews_with_body_count: T.nilable(Integer),
      updated_at: T.nilable(Google::Protobuf::Timestamp),
      user_id: T.nilable(Integer)
    ).void
  end
  def initialize(base_ref: nil, base_repository_id: nil, base_sha: nil, base_sha_on_merge: nil, base_user_id: nil, contributed_at_offset: nil, contributed_at_timestamp: nil, created_at: nil, fork_collab_state: nil, head_ref: nil, head_repository_id: nil, head_sha: nil, head_user_id: nil, id: nil, is_mergeable: nil, is_user_hidden: nil, is_work_in_progress: nil, merge_commit_sha: nil, merged_at: nil, repository_id: nil, review_comments_with_body_count: nil, reviewable_state: nil, reviews_with_body_count: nil, updated_at: nil, user_id: nil); end

  sig { returns(String) }
  def base_ref; end

  sig { params(value: String).void }
  def base_ref=(value); end

  sig { returns(Integer) }
  def base_repository_id; end

  sig { params(value: Integer).void }
  def base_repository_id=(value); end

  sig { returns(String) }
  def base_sha; end

  sig { params(value: String).void }
  def base_sha=(value); end

  sig { returns(String) }
  def base_sha_on_merge; end

  sig { params(value: String).void }
  def base_sha_on_merge=(value); end

  sig { returns(Integer) }
  def base_user_id; end

  sig { params(value: Integer).void }
  def base_user_id=(value); end

  sig { void }
  def clear_base_ref; end

  sig { void }
  def clear_base_repository_id; end

  sig { void }
  def clear_base_sha; end

  sig { void }
  def clear_base_sha_on_merge; end

  sig { void }
  def clear_base_user_id; end

  sig { void }
  def clear_contributed_at_offset; end

  sig { void }
  def clear_contributed_at_timestamp; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_fork_collab_state; end

  sig { void }
  def clear_head_ref; end

  sig { void }
  def clear_head_repository_id; end

  sig { void }
  def clear_head_sha; end

  sig { void }
  def clear_head_user_id; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_is_mergeable; end

  sig { void }
  def clear_is_user_hidden; end

  sig { void }
  def clear_is_work_in_progress; end

  sig { void }
  def clear_merge_commit_sha; end

  sig { void }
  def clear_merged_at; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_review_comments_with_body_count; end

  sig { void }
  def clear_reviewable_state; end

  sig { void }
  def clear_reviews_with_body_count; end

  sig { void }
  def clear_updated_at; end

  sig { void }
  def clear_user_id; end

  sig { returns(Integer) }
  def contributed_at_offset; end

  sig { params(value: Integer).void }
  def contributed_at_offset=(value); end

  sig { returns(Integer) }
  def contributed_at_timestamp; end

  sig { params(value: Integer).void }
  def contributed_at_timestamp=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(Integer) }
  def fork_collab_state; end

  sig { params(value: Integer).void }
  def fork_collab_state=(value); end

  sig { returns(String) }
  def head_ref; end

  sig { params(value: String).void }
  def head_ref=(value); end

  sig { returns(Integer) }
  def head_repository_id; end

  sig { params(value: Integer).void }
  def head_repository_id=(value); end

  sig { returns(String) }
  def head_sha; end

  sig { params(value: String).void }
  def head_sha=(value); end

  sig { returns(Integer) }
  def head_user_id; end

  sig { params(value: Integer).void }
  def head_user_id=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def is_mergeable; end

  sig { params(value: T::Boolean).void }
  def is_mergeable=(value); end

  sig { returns(T::Boolean) }
  def is_user_hidden; end

  sig { params(value: T::Boolean).void }
  def is_user_hidden=(value); end

  sig { returns(T::Boolean) }
  def is_work_in_progress; end

  sig { params(value: T::Boolean).void }
  def is_work_in_progress=(value); end

  sig { returns(String) }
  def merge_commit_sha; end

  sig { params(value: String).void }
  def merge_commit_sha=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def merged_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def merged_at=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(Integer) }
  def review_comments_with_body_count; end

  sig { params(value: Integer).void }
  def review_comments_with_body_count=(value); end

  sig { returns(Integer) }
  def reviewable_state; end

  sig { params(value: Integer).void }
  def reviewable_state=(value); end

  sig { returns(Integer) }
  def reviews_with_body_count; end

  sig { params(value: Integer).void }
  def reviews_with_body_count=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end

  sig { returns(Integer) }
  def user_id; end

  sig { params(value: Integer).void }
  def user_id=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Discussions::V1::DiscussionCommentVoteUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Discussions::V1::DiscussionCommentVoteUpdate`.

class Hydro::Schemas::Github::Discussions::V1::DiscussionCommentVoteUpdate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      comment: T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::DiscussionComment),
      discussion: T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::Discussion),
      is_upvote: T.nilable(T::Boolean),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      was_upvote: T.nilable(T::Boolean)
    ).void
  end
  def initialize(actor: nil, comment: nil, discussion: nil, is_upvote: nil, repository: nil, request_context: nil, was_upvote: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_comment; end

  sig { void }
  def clear_discussion; end

  sig { void }
  def clear_is_upvote; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_was_upvote; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::DiscussionComment)) }
  def comment; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::DiscussionComment)).void }
  def comment=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::Discussion)) }
  def discussion; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::Discussion)).void }
  def discussion=(value); end

  sig { returns(T::Boolean) }
  def is_upvote; end

  sig { params(value: T::Boolean).void }
  def is_upvote=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T::Boolean) }
  def was_upvote; end

  sig { params(value: T::Boolean).void }
  def was_upvote=(value); end
end

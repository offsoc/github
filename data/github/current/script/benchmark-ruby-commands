#!/usr/bin/env safe-ruby
#/ Usage: bin/benchmark-ruby-commands [<run-time>]
#/ Runs base ruby commands in a few different configurations and reports run time
#/ information for each. With the <run-time> option, override the default 5s
#/ loop time with a custom value.
#/
#/ Run time information is reported for the following command configurations:
#/
#/   quick: safe-ruby-quick -e 0                  (stock ruby, no rubygems)
#/   basic: safe-ruby -e 0                        (rubygems + config/basic)
#/    full: safe-ruby config/environment.rb       (full rails environment)
#/
require "time"
Dir.chdir(File.expand_path("../..", __FILE__))

if ARGV.include?("--help")
  system "grep ^#/ <'#{__FILE__}' |cut -c4-"
  exit 0
end

# run each command in a loop for this many seconds
run_time = (ARGV[0] || 10).to_f

commands = {
  quick: ["safe-ruby-quick", "-e", "0"],
  basic: ["safe-ruby", "-e", "0"],
  full: ["safe-ruby", "config/environment.rb"],
}

branch = ENV["BUILD_BRANCH"] || `git symbolic-ref HEAD`.strip.sub(%r{^refs\/(heads|tags)\/}, "")
head_sha = `git rev-parse HEAD`.strip
puts "Benchmarking on #{`id -un`.strip}@#{`hostname`.strip} at #{Time.now.iso8601}"
puts "GitHub #{GitHub::AppEnvironment.env} environment on branch '#{branch}' (#{head_sha[0, 10]})"
puts `ruby --version`.strip.capitalize
puts `uname -a`.strip
puts

commands.each_value do |argv|
  puts "-" * 80
  command = ["benchmark-command"]

  command << "--"
  command += argv

  unless system(*command)
    raise "Nonzero exit status for command: #{command.join(' ')}"
  end
end

# vim: ft=ruby

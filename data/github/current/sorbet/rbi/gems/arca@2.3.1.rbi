# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `arca` gem.
# Please instead update this file by running `bin/tapioca gem arca`.

# source://arca//lib/arca/collector.rb#1
module Arca
  class << self
    # Public: Reader method for accessing the Arca::Model for analysis and
    # reporting.
    #
    # @raise [ClassRequired]
    #
    # source://arca//lib/arca.rb#16
    def [](klass); end

    # Public: Helper method for turning absolute paths into relative paths.
    #
    # path - String absolute path.
    #
    # Returns a relative path String.
    #
    # source://arca//lib/arca.rb#43
    def relative_path(path); end

    # Public: String representing the root path for the project.
    #
    # source://arca//lib/arca.rb#34
    def root_path; end

    # Public: Writer method for configuring the root path of the
    # project where  Arca is being used. Setting Arca.root_path will makes
    # inspecting analyzed callbacks easier by shortening absolute paths to
    # relative paths.
    #
    # path - Pathname or String representing the root path of the project.
    #
    # source://arca//lib/arca.rb#29
    def root_path=(path); end
  end
end

# source://arca//lib/arca/callback_analysis.rb#2
class Arca::CallbackAnalysis
  # Arca::CallbackAnalysis takes an Arca::Model and data for a specific
  # callback and then calculates and exposes a complete analysis for the
  # callback including target methods, file paths, line numbers, booleans
  # representing whether targets are in the same file they are called from,
  # and finally the number of lines between callers and the target methods
  # they call.
  #
  # model         - Arca::Model instance.
  # callback_data - Hash with callback data collected by Arca::Collector.
  #
  # @return [CallbackAnalysis] a new instance of CallbackAnalysis
  #
  # source://arca//lib/arca/callback_analysis.rb#13
  def initialize(model, callback_data); end

  # Public: String path to the file where the callback is used.
  #
  # source://arca//lib/arca/callback_analysis.rb#56
  def callback_file_path; end

  # Public: Integer line number where the callback is called.
  #
  # source://arca//lib/arca/callback_analysis.rb#59
  def callback_line_number; end

  # Public: Symbol representing the callback method name.
  #
  # source://arca//lib/arca/callback_analysis.rb#53
  def callback_symbol; end

  # Public: Symbol representing the conditional target method name.
  #
  # source://arca//lib/arca/callback_analysis.rb#97
  def conditional_symbol; end

  # Public: String path to the file where the conditional target is located.
  #
  # source://arca//lib/arca/callback_analysis.rb#101
  def conditional_target_file_path; end

  # Public: Integer line number where the conditional target is located.
  #
  # source://arca//lib/arca/callback_analysis.rb#108
  def conditional_target_line_number; end

  # Returns the value of attribute conditional_target_symbol.
  #
  # source://arca//lib/arca/callback_analysis.rb#98
  def conditional_target_symbol; end

  # Public: Boolean representing whether the callback is used in the same
  # file where the ActiveRecord model is defined.
  #
  # @return [Boolean]
  #
  # source://arca//lib/arca/callback_analysis.rb#63
  def external_callback?; end

  # Public: Boolean representing whether the conditional target is located in
  # the same file where the callback is defined.
  #
  # @return [Boolean]
  #
  # source://arca//lib/arca/callback_analysis.rb#116
  def external_conditional_target?; end

  # Public: Boolean representing whether the callback target is located in the
  # same file where the callback is defined.
  #
  # @return [Boolean]
  #
  # source://arca//lib/arca/callback_analysis.rb#82
  def external_target?; end

  # Public: Hash representation of the object for interactive consoles.
  #
  # source://arca//lib/arca/callback_analysis.rb#24
  def inspect; end

  # Public: Integer representing the number of lines between where the
  # callback is used and the conditional target is located.
  #
  # source://arca//lib/arca/callback_analysis.rb#126
  def lines_to_conditional_target; end

  # Public: Integer representing the number of lines between where the
  # callback is used and the callback target is located.
  #
  # source://arca//lib/arca/callback_analysis.rb#89
  def lines_to_target; end

  # Public: Arca::Model this callback belongs to.
  #
  # source://arca//lib/arca/callback_analysis.rb#50
  def model; end

  # Public: String path to the file where the callback target is located.
  #
  # source://arca//lib/arca/callback_analysis.rb#71
  def target_file_path; end

  # Public: Boolean representing whether the callback target is located in the
  # ActiveRecord gem.
  #
  # @return [Boolean]
  #
  # source://arca//lib/arca/callback_analysis.rb#134
  def target_file_path_active_record?; end

  # Public: Integer line number where the callback target is located.
  #
  # source://arca//lib/arca/callback_analysis.rb#76
  def target_line_number; end

  # Public: Symbol representing the callback target method name.
  #
  # source://arca//lib/arca/callback_analysis.rb#68
  def target_symbol; end

  # Public: Hash of collected and analyzed callback data.
  #
  # source://arca//lib/arca/callback_analysis.rb#29
  def to_hash; end
end

# Error raised if model does not respond to arca_callback_data
#
# source://arca//lib/arca.rb#12
class Arca::CallbackDataMissing < ::StandardError; end

# Error raised if Arca[] is passed something other than a class constant.
#
# source://arca//lib/arca.rb#9
class Arca::ClassRequired < ::StandardError; end

# Include Arca::Collector in an ActiveRecord class in order to collect data
# about how callbacks are being used.
#
# source://arca//lib/arca/collector.rb#5
module Arca::Collector
  class << self
    # http://ruby-doc.org/core-2.2.1/Module.html#method-i-included
    #
    # source://arca//lib/arca/collector.rb#17
    def included(base); end
  end
end

# Internal: Regular expression used for extracting the file path and line
# number from a caller line.
#
# source://arca//lib/arca/collector.rb#9
Arca::Collector::ARCA_CALLBACK_FINDER_REGEXP = T.let(T.unsafe(nil), Regexp)

# Internal: Array of conditional symbols.
#
# source://arca//lib/arca/collector.rb#13
Arca::Collector::ARCA_CONDITIONALS = T.let(T.unsafe(nil), Array)

# source://arca//lib/arca/model.rb#2
class Arca::Model
  # Arca::Model wraps an ActiveRecord model class and provides an interface
  # to the collected and analyzed callback data for that class and the file
  # path to the model class.
  #
  # @return [Model] a new instance of Model
  #
  # source://arca//lib/arca/model.rb#7
  def initialize(klass); end

  # Public: Hash of CallbackAnalysis objects for each callback type.
  #
  # source://arca//lib/arca/model.rb#65
  def analyzed_callbacks; end

  # Public: Array of all CallbackAnalysis objects for this model.
  #
  # source://arca//lib/arca/model.rb#80
  def analyzed_callbacks_array; end

  # Public: Integer representing the number of callbacks analyzed.
  #
  # source://arca//lib/arca/model.rb#85
  def analyzed_callbacks_count; end

  # Public: Hash of collected callback data.
  #
  # source://arca//lib/arca/model.rb#35
  def callbacks; end

  # Public: Integer representing the number of callbacks called for this class
  # from files other than this model.
  #
  # source://arca//lib/arca/model.rb#104
  def external_callbacks_count; end

  # Public: Integer representing the number of conditional callback targets
  # that are defined in files other than this model.
  #
  # source://arca//lib/arca/model.rb#116
  def external_conditionals_count; end

  # Public: Integer representing the number of callback targets that are
  # defined in files other than this model.
  #
  # source://arca//lib/arca/model.rb#110
  def external_targets_count; end

  # Public: String file path.
  #
  # source://arca//lib/arca/model.rb#32
  def file_path; end

  # Public: ActiveRecord model class.
  #
  # source://arca//lib/arca/model.rb#26
  def klass; end

  # Public: Integer representing the total number of lines between callbacks
  # called for this class from files other than the one where the class is
  # defined.
  #
  # source://arca//lib/arca/model.rb#92
  def lines_between_count; end

  # Public: String model name.
  #
  # source://arca//lib/arca/model.rb#29
  def name; end

  # Public: Arca::Report for this model.
  #
  # source://arca//lib/arca/model.rb#38
  def report; end

  # Public: Helper method for finding the file path and line number where
  # a method is located for the ActiveRecord model.
  #
  # method_symbol - Symbol representation of the method name.
  #
  # source://arca//lib/arca/model.rb#46
  def source_location(method_symbol); end
end

# Array of ActiveRecord callback method symbols in a rough order of when
# they are used in the life cycle of an ActiveRecord model.
#
# source://arca//lib/arca/model.rb#16
Arca::Model::CALLBACKS = T.let(T.unsafe(nil), Array)

# source://arca//lib/arca/report.rb#4
class Arca::Report
  extend ::Forwardable

  # Arca::Report takes an Arca::Model and compiles the analyzed callback data
  # into a short overview report for the model.
  #
  # @return [Report] a new instance of Report
  #
  # source://arca//lib/arca/report.rb#9
  def initialize(model); end

  # Public: Integer representing the possible number of permutations stemming
  # from conditionals for an instance of the model being reported during the
  # lifecycle of the object.
  #
  # source://arca//lib/arca/report.rb#63
  def calculated_permutations; end

  # Public: Integer representing the number of callbacks used in this model.
  #
  # source://arca//lib/arca/report.rb#47
  def callbacks_count; end

  # Public: Integer representing the number of conditionals used in callback
  # for the model being reported.
  #
  # source://arca//lib/arca/report.rb#53
  def conditionals_count; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def external_callbacks_count(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def external_conditionals_count(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def external_targets_count(*args, **_arg1, &block); end

  # Public: Hash representation of the object for interactive consoles.
  #
  # source://arca//lib/arca/report.rb#17
  def inspect; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def lines_between_count(*args, **_arg1, &block); end

  # Public: Arca::Model representing the ActiveRecord class being reported.
  #
  # source://arca//lib/arca/report.rb#14
  def model; end

  # Public: String file path of model.
  #
  # source://arca//lib/arca/report.rb#42
  def model_file_path; end

  # Public: String class name of model.
  #
  # source://arca//lib/arca/report.rb#37
  def model_name; end

  # Public: Hash of compiled report data.
  #
  # source://arca//lib/arca/report.rb#22
  def to_hash; end

  private

  # Internal: Integer representing the number of unique conditions for an
  # Array of CallbackAnalysis objects.
  #
  # analyzed_callbacks - Array of CallbackAnalysis objects.
  #
  # Returns an Integer.
  #
  # source://arca//lib/arca/report.rb#75
  def number_of_unique_conditionals(analyzed_callbacks); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::PostReceiveCommit`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::PostReceiveCommit`.

class Hydro::Schemas::Github::V1::PostReceiveCommit
  sig do
    params(
      author: T.nilable(Hydro::Schemas::Github::V1::PostReceiveCommit::Author),
      authored_at: T.nilable(Google::Protobuf::Timestamp),
      committed_at: T.nilable(Google::Protobuf::Timestamp),
      diff_stats: T.nilable(Hydro::Schemas::Github::V1::PostReceiveCommit::DiffStats),
      oid: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(author: nil, authored_at: nil, committed_at: nil, diff_stats: nil, oid: nil, repository: nil, repository_owner: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::PostReceiveCommit::Author)) }
  def author; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::PostReceiveCommit::Author)).void }
  def author=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def authored_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def authored_at=(value); end

  sig { void }
  def clear_author; end

  sig { void }
  def clear_authored_at; end

  sig { void }
  def clear_committed_at; end

  sig { void }
  def clear_diff_stats; end

  sig { void }
  def clear_oid; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def committed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def committed_at=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::PostReceiveCommit::DiffStats)) }
  def diff_stats; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::PostReceiveCommit::DiffStats)).void }
  def diff_stats=(value); end

  sig { returns(String) }
  def oid; end

  sig { params(value: String).void }
  def oid=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end
end

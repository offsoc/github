# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Driftwood::Auditlog::V1::BusinessAuditEntriesResponse`.
# Please instead update this file by running `bin/tapioca dsl Driftwood::Auditlog::V1::BusinessAuditEntriesResponse`.

class Driftwood::Auditlog::V1::BusinessAuditEntriesResponse
  sig do
    params(
      after: T.nilable(String),
      aggregations: T.nilable(String),
      before: T.nilable(String),
      cost: T.nilable(Integer),
      parsed_query: T.nilable(String),
      query_errors: T.nilable(T.any(Google::Protobuf::RepeatedField[Driftwood::Auditlog::V1::QueryError], T::Array[Driftwood::Auditlog::V1::QueryError])),
      results: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      took: T.nilable(Float),
      total_count: T.nilable(Integer),
      warnings: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String]))
    ).void
  end
  def initialize(after: nil, aggregations: nil, before: nil, cost: nil, parsed_query: nil, query_errors: T.unsafe(nil), results: T.unsafe(nil), took: nil, total_count: nil, warnings: T.unsafe(nil)); end

  sig { returns(String) }
  def after; end

  sig { params(value: String).void }
  def after=(value); end

  sig { returns(String) }
  def aggregations; end

  sig { params(value: String).void }
  def aggregations=(value); end

  sig { returns(String) }
  def before; end

  sig { params(value: String).void }
  def before=(value); end

  sig { void }
  def clear_after; end

  sig { void }
  def clear_aggregations; end

  sig { void }
  def clear_before; end

  sig { void }
  def clear_cost; end

  sig { void }
  def clear_parsed_query; end

  sig { void }
  def clear_query_errors; end

  sig { void }
  def clear_results; end

  sig { void }
  def clear_took; end

  sig { void }
  def clear_total_count; end

  sig { void }
  def clear_warnings; end

  sig { returns(Integer) }
  def cost; end

  sig { params(value: Integer).void }
  def cost=(value); end

  sig { returns(String) }
  def parsed_query; end

  sig { params(value: String).void }
  def parsed_query=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Driftwood::Auditlog::V1::QueryError]) }
  def query_errors; end

  sig { params(value: Google::Protobuf::RepeatedField[Driftwood::Auditlog::V1::QueryError]).void }
  def query_errors=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def results; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def results=(value); end

  sig { returns(Float) }
  def took; end

  sig { params(value: Float).void }
  def took=(value); end

  sig { returns(Integer) }
  def total_count; end

  sig { params(value: Integer).void }
  def total_count=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def warnings; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def warnings=(value); end
end

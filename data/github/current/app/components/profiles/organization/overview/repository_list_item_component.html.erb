<%# erblint:counter GoogleAnalyticsDeprecation 1 %>
<%= render(Primer::BaseComponent.new(**{
  tag: :div,
  display: :block,
  itemprop: "owns", itemtype: "http://schema.org/Code", itemscope: true,
  classes: component_class_names }.merge(@args))) do %>
  <%= cache_if repository_participation_sparkline_cached?, overview_cache_key do %>
    <%= render(Primer::Box.new(display: :flex, justify_content: :space_between)) do %>
      <%= render(Primer::Box.new(mb: 1, flex: :auto)) do %>
        <%= render(Primer::Beta::Link.new(
          href: repository_path(repository),
          font_size: 4,
          display: :inline_block,
          itemprop: "name codeRepository",
          data: {
            **hovercard_data_attributes_for_repository(repository),
            **list_item_analytics_attributes("repo_nwo"),
          },
          font_weight: :bold,
          mr: 1,
        )) do %>
          <% if show_owner_prefix? %>
            <%= render(Primer::Beta::Text.new(
              font_weight: :normal,
              test_selector: "owner_prefix",
            )) do %>
              <%= repository.owner %>/
            <% end %>
          <% end %>
          <%= repository.name %>
        <% end %>
        <% if show_stack_template_labels_icons?(repository) %>
           <%= render(Primer::Beta::Label.new(
            title: "Label: Stack",
            scheme: :secondary,
            vertical_align: :middle,
            ml: 1,
            mb: 1,
            test_selector: "type",
          )) do %>
          Stack
          <% end %>
        <% end %>

        <%= render(Primer::Beta::Label.new(
          title: "Label: #{type}",
          scheme: repository.archived? ? :attention : :secondary,
          vertical_align: :middle,
          ml: 1,
          mb: 1,
          test_selector: "type",
        )) do %>
          <%= type %>
        <% end %>

        <% if repository.fork? && repository.parent.present? %>
          <%= render(Primer::Beta::Text.new(
            color: :muted,
            mb: 1,
            font_size: 6,
            display: :block,
          )) do %>
            Forked from
            <%= render(Primer::Beta::Link.new(
              href: repository_path(repository.parent),
              muted: true,
              classes: "Link--inTextBlock",
              test_selector: "fork-source-link",
              data: list_item_analytics_attributes("parent"),
            )) do %>
              <%= repository.parent.name_with_display_owner %>
            <% end %>
          <% end %>
        <% end %>

        <% if repository.description.present? %>
          <%= render(Primer::Beta::Text.new(
            tag: :p,
            color: :muted,
            mb: 3,
            word_break: :break_word,
            itemprop: "description",
          )) do %>
            <%= formatted_repo_description repository %>
          <% end %>
        <% end %>
        <% if show_topics && topic_names.any? %>
          <%= render(Primer::Box.new(
            flex: :auto,
            flex_wrap: :wrap,
            align_items: :center,
            font_size: 6,
          )) do %>
            <% topic_names.each do |name| %>
              <%= render(Topics::TagComponent.new(
                name: name,
                href: topic_path(name),
                data: {
                  ga_click: "Topic, repository list",
                  octo_click: "topic_click",
                  octo_dimensions: "topic:#{name},repository_id:#{repository.id},"\
                    "repository_nwo:#{repository.name_with_display_owner},"\
                    "repository_public:#{repository.public?},repository_is_fork:#{repository.fork?}"
                },
                font_size: 6,
                my: 1,
                test_selector: "repository_topic_tag",
              )) %>
            <% end %>
          <% end %>
        <% end %>
      <% end %>

      <%= render(Primer::Beta::Link.new(
        id: "commit-activity-link-#{repository.id}",
        display: :inline_block,
        href: repo_commit_activity_insights_path(repository.owner, repository)),
      ) do |link| %>
        <% link.with_tooltip(text: "#{repository.owner}/#{repository}â€™s past year of commit activity", type: :label, direction: :s) %>
        <%= render(Primer::Box.new(
          align_items: :center,
          display: (responsive ? [:none, nil, :flex] : :flex),
        )) do %>
          <%= include_cached_fragment src: participation_path(repository.owner, repository.name, w: 155, h: 28, type: "sparkline"),
                cache_key: repository_participation_sparkline_cache_key(repository),
                poll: true do %>
          <% end %>
        <% end %>
      <% end %>

    <% end %>

    <%= render(Primer::Box.new(color: :muted, font_size: 6)) do %>
      <% if is_registry_enabled && packages_count > 0 %>
        <%= render(Primer::Beta::Link.new(
          href: packages_path(repository.owner, repository),
          muted: true,
          mr: 3,
          data: list_item_analytics_attributes("packages"),
        )) do %>
          <%= render(Primer::Beta::Octicon.new(icon: "package")) %> <%= pluralize(packages_count, "package") %>
        <% end %>
      <% end %>

      <% if repository.primary_language.present? %>
        <%= render(Languages::BadgeComponent.new(name: repository.primary_language.name, mr: 3)) %>
      <% end %>

        <% if repository.stargazer_count > 0 %>
        <%= render(Primer::Beta::Link.new(
          href: gh_stargazers_path(repository),
          muted: true,
          mr: 3,
          classes: "no-wrap",
          data: list_item_analytics_attributes("stars"),
        )) do %>
          <%= render(Primer::Beta::Octicon.new(mr: 1, icon: "star")) %>
          <%= number_with_delimiter repository.stargazer_count %>
        <% end %>
      <% else %>
        <%= render(Primer::Beta::Text.new(mr: 3, color: :muted)) do %>
          <%= render(Primer::Beta::Octicon.new(mr: 1, icon: "star")) %>0
        <% end %>
      <% end %>

      <% if show_license? %>
        <%= render(Primer::Beta::Text.new(mr: 3, test_selector: "license")) do %>
          <%= render(Primer::Beta::Octicon.new(icon: :law, mr: 1)) %><%= license_name %>
        <% end %>
      <% end %>

      <% if network_count > 0 %>
        <%= render(Primer::Beta::Link.new(
          href: gh_fork_network_path(repository),
          muted: true,
          mr: 3,
          data: list_item_analytics_attributes("forks"),
        )) do %>
          <%= render(Primer::Beta::Octicon.new(mr: 1, icon: "repo-forked", aria: { label: "fork" })) %>
          <%= number_with_delimiter network_count %>
        <% end %>
      <% else %>
        <%= render(Primer::Beta::Text.new(mr: 3, color: :muted)) do %>
          <%= render(Primer::Beta::Octicon.new(mr: 1, icon: "repo-forked", aria: { label: "fork" })) %>0
        <% end %>
      <% end %>

      <%= render(Primer::Beta::Link.new(
        href: issues_path(repository.owner, repository),
        muted: true,
        mr: (3 if !show_issues_needing_help?),
        classes: "no-wrap",
        test_selector: "issue_count",
        data: list_item_analytics_attributes("issues"),
      )) do %>
        <%= render(Primer::Beta::Octicon.new(mr: 1, icon: "issue-opened")) %>
        <%= issue_count %>
      <% end %>

      <% if show_issues_needing_help? %>
        <%= render(Primer::Beta::Link.new(
          href: issues_needing_help_path,
          muted: true,
          mr: 3,
          classes: "no-wrap",
          test_selector: "issues_needing_help_count",
        )) do %>
          (<%= pluralize(issue_count_needing_help, "issue needs", "issues need") %> help)
        <% end %>
      <% end %>

      <%= render(Primer::Beta::Link.new(
        href: pull_requests_path(repository.owner, repository),
        muted: true,
        mr: 3,
        classes: "no-wrap",
        test_selector: "pull_request_count",
        data: list_item_analytics_attributes("pull_requests"),
      )) do %>
        <%= render(Primer::Beta::Octicon.new(mr: 1, icon: "git-pull-request")) %>
        <%= pull_request_count %>
      <% end %>

      <%= render(Primer::Beta::Text.new(classes: "no-wrap")) do %>
        <% if repository.pushed_at %>
          Updated <%= time_ago_in_words_js repository.pushed_at %>
        <% else %>
          Created <%= time_ago_in_words_js repository.created_at %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
<% end %>

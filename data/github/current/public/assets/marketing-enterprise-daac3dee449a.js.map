{"version":3,"file":"marketing-enterprise-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/marketing-enterprise.ts"],"sourcesContent":["import {\n  AdditiveBlending,\n  BackSide,\n  CircleGeometry,\n  Color,\n  DirectionalLight,\n  EdgesGeometry,\n  Euler,\n  Group,\n  InstancedMesh,\n  LineDashedMaterial,\n  LineSegments,\n  Mesh,\n  MeshBasicMaterial,\n  MeshStandardMaterial,\n  Object3D,\n  PerspectiveCamera,\n  PlaneGeometry,\n  RingBufferGeometry,\n  Scene,\n  ShaderMaterial,\n  SphereGeometry,\n  SpotLight,\n  Vector3,\n  WebGLRenderer,\n} from 'three'\n// eslint-disable-next-line no-restricted-imports\nimport {observe} from '@github/selector-observer'\n\nconst sphereDetail = 60\nconst sphereSize = 2\nconst pixelDensity = window.devicePixelRatio || 1\nconst orbitWidth = 0.012\nconst orbitRadiusInner = 3\nconst orbitRadiusMiddle = orbitRadiusInner * 1.45\nconst orbitRadiusOuter = orbitRadiusMiddle * 1.45\nconst orbitDetail = 90\nconst orbitPlanetDetail = 12\nconst orbitPlanetRadius = 0.1\n\nconst scene = new Scene()\nconst camera = new PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000)\nconst cameraPositionStart = {x: 0, y: 2.8, z: 8}\ncamera.position.z = cameraPositionStart.z\ncamera.position.y = cameraPositionStart.y\nconst cameraPositionEnd = {x: 3.75, y: 0, z: 19}\nconst cameraPositionAim = {x: cameraPositionStart.x, y: cameraPositionStart.y, z: cameraPositionStart.z}\nconst haloPositionStart = {x: -0.02, y: 0, z: 0.3}\nconst haloPositionAim = {x: haloPositionStart.x, y: haloPositionStart.y, z: haloPositionStart.z}\nconst haloPositionEnd = {x: -0.15, y: 0.075, z: 0.3}\nconst renderer = new WebGLRenderer({alpha: true})\n\n// Set up planet and orbits\nconst planetGeo = new SphereGeometry(sphereSize, sphereDetail, sphereDetail)\nconst material = new MeshStandardMaterial({\n  color: 0x24292e,\n  metalness: 0,\n  roughness: 0.9,\n})\nconst planet = new Mesh(planetGeo, material)\nscene.add(planet)\nconst planetWireframeMaterial = new MeshStandardMaterial({\n  color: 0xffffff,\n  wireframe: true,\n  wireframeLinewidth: 2,\n  opacity: 0.1,\n  blending: AdditiveBlending,\n  metalness: 0.8,\n  roughness: 0.8,\n})\nconst planetWireframeGeo = new SphereGeometry(sphereSize * 1.007, sphereDetail / 2, sphereDetail / 2)\nconst planetWireframe = new Mesh(planetWireframeGeo, planetWireframeMaterial)\nscene.add(planetWireframe)\n\n// Halo\nconst haloVert = `\nuniform vec3 viewVector;\nuniform float c;\nuniform float p;\nvarying float intensity;\nvarying float intensityA;\nvoid main()\n{\n  vec3 vNormal = normalize( normalMatrix * normal );\n  vec3 vNormel = normalize( normalMatrix * viewVector );\n  intensity = pow( c - dot(vNormal, vNormel), p );\n  intensityA = pow( 0.63 - dot(vNormal, vNormel), p );\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}`\n\nconst haloFrag = `\nuniform vec3 glowColor;\nvarying float intensity;\nvarying float intensityA;\nvoid main()\n{\n  gl_FragColor = vec4( glowColor * intensity, 1.0 * intensityA );\n}`\n\nconst haloGeometry = new SphereGeometry(sphereSize, 45, 45)\nconst haloMaterialBlue = new ShaderMaterial({\n  uniforms: {\n    c: {value: 0.65},\n    p: {value: 15.0},\n    glowColor: {value: new Color(0xf46bbe)},\n    viewVector: {value: new Vector3(0, 0, cameraPositionStart.z)},\n  },\n  vertexShader: haloVert,\n  fragmentShader: haloFrag,\n  side: BackSide,\n  blending: AdditiveBlending,\n  transparent: true,\n  dithering: true,\n})\n\nconst haloMesh = new Mesh(haloGeometry, haloMaterialBlue)\nhaloMesh.scale.multiplyScalar(1.06)\nhaloMesh.rotateX(Math.PI * 0.01)\nhaloMesh.rotateY(Math.PI * 0.01)\nhaloMesh.position.set(haloPositionStart.x, haloPositionStart.y, haloPositionStart.z)\nhaloMesh.renderOrder = 3\nscene.add(haloMesh)\n\n// Orbits and their planets\nconst orbits = new Group()\nconst orbitsStart = {x: -1.6, y: 0.3, z: 0}\nconst orbitsEnd = {x: 0, y: 0, z: 0}\nconst orbitsAim = {x: orbitsStart.x, y: orbitsStart.y, z: orbitsStart.z}\nconst dashedMaterial = new LineDashedMaterial({\n  color: 0xffffff,\n  linewidth: 1,\n  scale: 1,\n  dashSize: 0.05,\n  gapSize: 0.1,\n  opacity: 0.3,\n  transparent: true,\n})\n\nconst orbitsInnerGroup = new Group()\nconst orbitGeoInner = new CircleGeometry(orbitRadiusInner, orbitDetail)\nconst orbitWireframe = new EdgesGeometry(orbitGeoInner)\nconst orbitInner = new LineSegments(orbitWireframe, dashedMaterial)\norbitInner.computeLineDistances()\n\nconst orbitInnerPlanetGeo = new CircleGeometry(orbitPlanetRadius, orbitPlanetDetail)\nconst orbitInnerPlanetMesh = new Mesh(orbitInnerPlanetGeo, material)\norbitsInnerGroup.add(orbitInner)\norbitsInnerGroup.add(orbitInnerPlanetMesh)\norbitInnerPlanetMesh.position.set(orbitRadiusInner, 0, 0)\norbits.add(orbitsInnerGroup)\n\nconst orbitsMiddleGroup = new Group()\nconst orbitGeoMiddle = new CircleGeometry(orbitRadiusMiddle, orbitDetail)\nconst orbitWireframeMiddle = new EdgesGeometry(orbitGeoMiddle)\nconst orbitMiddle = new LineSegments(orbitWireframeMiddle, dashedMaterial)\norbitMiddle.computeLineDistances()\nconst orbitMiddlePlanetGeo = new CircleGeometry(orbitPlanetRadius, orbitPlanetDetail)\nconst orbitMiddlePlanetMesh1 = new Mesh(orbitMiddlePlanetGeo, material)\nconst orbitMiddlePlanetMesh2 = new Mesh(orbitMiddlePlanetGeo, material)\norbitsMiddleGroup.add(orbitMiddle)\norbitsMiddleGroup.add(orbitMiddlePlanetMesh1)\norbitsMiddleGroup.add(orbitMiddlePlanetMesh2)\norbitMiddlePlanetMesh1.position.set(orbitRadiusMiddle, 0, 0)\norbitMiddlePlanetMesh2.position.set(-orbitRadiusMiddle, 0, 0)\norbits.add(orbitsMiddleGroup)\n\nlet orbitHighlightedThetaCurrent = 0\nlet orbitHighlightedThetaAim = 0\nconst orbitGeoHighlighted = new RingBufferGeometry(\n  orbitRadiusMiddle - orbitWidth,\n  orbitRadiusMiddle,\n  orbitDetail,\n  1,\n  0,\n  orbitHighlightedThetaCurrent,\n)\nconst orbitHighlightedThetaMax = Math.PI * 2\nconst highlightedMaterial = new MeshBasicMaterial({color: 0xffffff, side: BackSide})\nconst orbitHighlighted = new Mesh(orbitGeoHighlighted, highlightedMaterial)\norbitHighlighted.position.set(0, 0, 0.01)\norbitHighlighted.setRotationFromEuler(new Euler(Math.PI, 0, -Math.PI / 2))\norbits.add(orbitHighlighted)\n\nconst orbitGeoOuter = new CircleGeometry(orbitRadiusOuter, orbitDetail)\nconst orbitWireframeOuter = new EdgesGeometry(orbitGeoOuter)\nconst orbitOuter = new LineSegments(orbitWireframeOuter, dashedMaterial)\norbitOuter.computeLineDistances()\norbits.add(orbitOuter)\n\norbits.setRotationFromEuler(new Euler(orbitsStart.x, orbitsStart.y, orbitsStart.z))\nscene.add(orbits)\n\n// Set up particles\n\nconst particleCount = 300\nconst particleMaxX = 65\nconst particleMaxY = 55\nconst particleGeo = new PlaneGeometry(0.1, 0.1)\nconst particleMesh = new InstancedMesh(particleGeo, new MeshBasicMaterial(), particleCount)\n\n// Assign random colors to the particles\nconst color = new Color()\nconst particlePalette = [0x274445, 0x3c2645, 0x44220b, 0x292b46, 0x776775]\nconst dummy = new Object3D()\n\nfor (let i = 0; i < particleCount; i++) {\n  color.setHex(particlePalette[Math.floor(Math.random() * particlePalette.length)]!)\n  particleMesh.setColorAt(i, color)\n\n  // Assign random positions\n  const randomPosition = {\n    x: particleMaxX * Math.random() - particleMaxX / 2 + (Math.random() * (Math.random() * 2 - 1) * particleMaxX) / 2,\n    y: particleMaxY * Math.random() - particleMaxY / 2 + (Math.random() * (Math.random() * 2 - 1) * particleMaxY) / 2,\n    z: -50 - Math.random() * 10,\n  }\n  const randomScale = Math.random() * 2\n\n  dummy.position.set(randomPosition.x, randomPosition.y, randomPosition.z)\n  dummy.scale.set(randomScale, randomScale, 1)\n  dummy.updateMatrix()\n  particleMesh.setMatrixAt(i, dummy.matrix)\n}\nscene.add(particleMesh)\n\n// Instance matrices will be updated every frame.\n//particleMesh.instanceMatrix.setUsage( DynamicDrawUsage ) // todo: verify if necessary\n\nobserve('.js-enterprise-planet', container => {\n  renderer.setSize(window.innerWidth, window.innerHeight)\n  renderer.setPixelRatio(pixelDensity)\n\n  renderer.domElement.classList.add('width-window', 'height-window')\n  container.appendChild(renderer.domElement)\n\n  /* eslint-disable-next-line github/prefer-observers */\n  window.addEventListener('resize', () => {\n    // TODO perf: Only run this code if the canvas element is currently visible in the viewport\n    camera.aspect = window.innerWidth / window.innerHeight\n    camera.updateProjectionMatrix()\n    renderer.setSize(window.innerWidth, window.innerHeight)\n  })\n\n  // Setup lights\n  const spotLight1 = new SpotLight(0xf46bbe, 25, 120, 0.3, 0, 1.1)\n  spotLight1.position.set(-30 - sphereSize * 2.5, 90, -40)\n  const directionalLight = new DirectionalLight(0x2188ff, 0.5)\n  directionalLight.position.set(-40 - 50, 30, 10)\n  scene.add(spotLight1, directionalLight)\n\n  animate()\n})\n\nfunction animate() {\n  requestAnimationFrame(animate)\n  // Spin elements\n  planet.rotation.x += 0.01\n  planet.rotation.y += 0.01\n  orbitsInnerGroup.rotation.z -= 0.005\n  orbitsMiddleGroup.rotation.z -= 0.003\n  orbitOuter.rotation.z -= 0.001\n\n  // Animate camera\n  camera.position.x = camera.position.x + (cameraPositionAim.x - camera.position.x) * 0.1\n  camera.position.y = camera.position.y + (cameraPositionAim.y - camera.position.y) * 0.1\n  camera.position.z = camera.position.z + (cameraPositionAim.z - camera.position.z) * 0.1\n  // Halo\n  haloMesh.position.x = haloMesh.position.x + (haloPositionAim.x - haloMesh.position.x) * 0.1\n  haloMesh.position.y = haloMesh.position.y + (haloPositionAim.y - haloMesh.position.y) * 0.1\n\n  const orbitsRotation = {\n    x: orbits.rotation.x + (orbitsAim.x - orbits.rotation.x) * 0.1,\n    y: orbits.rotation.y + (orbitsAim.y - orbits.rotation.y) * 0.1,\n    z: orbits.rotation.z + (orbitsAim.z - orbits.rotation.z) * 0.1,\n  }\n\n  orbits.setRotationFromEuler(new Euler(orbitsRotation.x, orbitsRotation.y, orbitsRotation.z))\n\n  // Reconstruct ring geo if it's not where it should be\n  if (orbitHighlightedThetaCurrent !== orbitHighlightedThetaAim) {\n    orbitHighlighted.geometry.dispose()\n    orbitHighlightedThetaCurrent =\n      orbitHighlightedThetaCurrent + (orbitHighlightedThetaAim - orbitHighlightedThetaCurrent) * 0.14\n    const newHighlightedGeo = new RingBufferGeometry(\n      orbitRadiusMiddle - orbitWidth,\n      orbitRadiusMiddle,\n      orbitDetail,\n      1,\n      0,\n      orbitHighlightedThetaCurrent,\n    )\n    orbitHighlighted.geometry = newHighlightedGeo\n  }\n\n  renderer.render(scene, camera)\n}\n\n/* eslint-disable-next-line github/prefer-observers */\ndocument.addEventListener('scroll', () => {\n  // TODO: Cache this (don't fetch on every event)\n  const platformSection = document.querySelector('.js-enterprise-proto-platform')\n  if (platformSection === null) return\n  if (!(platformSection instanceof HTMLElement)) return\n\n  const padding = 150 // reach final goal this many pixels before the midpoint of the window\n  const midPointOffset = window.innerHeight - platformSection.getBoundingClientRect().height\n  const top = platformSection.getBoundingClientRect().top - midPointOffset - padding\n  const goal = top + document.documentElement.scrollTop\n  const progress = top > 0 ? Math.max(0, 1 - top / goal) : 1\n\n  // Set new goal to animate camera to\n  cameraPositionAim.x = cameraPositionStart.x + (cameraPositionEnd.x - cameraPositionStart.x) * progress\n  cameraPositionAim.y = cameraPositionStart.y + (cameraPositionEnd.y - cameraPositionStart.y) * progress\n  cameraPositionAim.z = cameraPositionStart.z + (cameraPositionEnd.z - cameraPositionStart.z) * progress\n\n  // Compensate camera position with new halo position\n  haloPositionAim.x = haloPositionStart.x + (haloPositionEnd.x - haloPositionStart.x) * progress\n  haloPositionAim.y = haloPositionStart.y + (haloPositionEnd.y - haloPositionStart.y) * progress\n\n  // Set new goal to animate orbits to\n  orbitsAim.x = orbitsStart.x + (orbitsEnd.x - orbitsStart.x) * progress\n  orbitsAim.y = orbitsStart.y + (orbitsEnd.y - orbitsStart.y) * progress\n  orbitsAim.z = orbitsStart.z + (orbitsEnd.z - orbitsStart.z) * progress\n\n  orbitHighlightedThetaAim = orbitHighlightedThetaMax * progress * progress\n})\n\nobserve('.js-enterprise-planet-container', section => {\n  const observer = new IntersectionObserver(\n    (entries: IntersectionObserverEntry[]) => {\n      const planetElement = document.querySelector('.js-enterprise-planet')\n      if (planetElement === null) return\n\n      for (const entry of entries) {\n        planetElement.classList.toggle('enterprise-planet-stuck', entry.isIntersecting)\n        const platformContent = document.querySelector('.js-enterprise-proto-platform-content')\n        if (platformContent === null) return\n        platformContent.classList.toggle('enterprise-platform-content-follow', entry.isIntersecting)\n      }\n    },\n    {\n      rootMargin: `0% 0% 0% 0%`,\n      threshold: 0,\n    },\n  )\n\n  observer.observe(section)\n})\n"],"names":["pixelDensity","window","devicePixelRatio","scene","Scene","camera","PerspectiveCamera","innerWidth","innerHeight","cameraPositionStart","x","y","z","position","cameraPositionEnd","cameraPositionAim","haloPositionStart","haloPositionAim","haloPositionEnd","renderer","WebGLRenderer","alpha","planetGeo","SphereGeometry","material","MeshStandardMaterial","color","metalness","roughness","planet","Mesh","add","planetWireframeMaterial","wireframe","wireframeLinewidth","opacity","blending","AdditiveBlending","planetWireframeGeo","sphereSize","sphereDetail","planetWireframe","haloVert","haloFrag","haloGeometry","haloMaterialBlue","ShaderMaterial","uniforms","c","value","p","glowColor","Color","viewVector","Vector3","vertexShader","fragmentShader","side","BackSide","transparent","dithering","haloMesh","scale","multiplyScalar","rotateX","Math","PI","rotateY","set","renderOrder","orbits","Group","orbitsStart","orbitsEnd","orbitsAim","dashedMaterial","LineDashedMaterial","linewidth","dashSize","gapSize","orbitsInnerGroup","orbitGeoInner","CircleGeometry","orbitWireframe","EdgesGeometry","orbitInner","LineSegments","computeLineDistances","orbitInnerPlanetGeo","orbitInnerPlanetMesh","orbitsMiddleGroup","orbitGeoMiddle","orbitRadiusInner","orbitWireframeMiddle","orbitMiddle","orbitMiddlePlanetGeo","orbitMiddlePlanetMesh1","orbitMiddlePlanetMesh2","orbitHighlightedThetaCurrent","orbitHighlightedThetaAim","orbitGeoHighlighted","RingBufferGeometry","orbitRadiusMiddle","orbitHighlightedThetaMax","highlightedMaterial","MeshBasicMaterial","orbitHighlighted","setRotationFromEuler","Euler","orbitGeoOuter","orbitWireframeOuter","orbitOuter","particleGeo","PlaneGeometry","particleMesh","InstancedMesh","particlePalette","dummy","Object3D","i","setHex","floor","random","length","setColorAt","randomPosition","particleMaxX","particleMaxY","randomScale","updateMatrix","setMatrixAt","matrix","observe","container","setSize","setPixelRatio","domElement","classList","appendChild","addEventListener","aspect","updateProjectionMatrix","spotLight1","SpotLight","directionalLight","DirectionalLight","animate","requestAnimationFrame","rotation","orbitsRotation","geometry","dispose","newHighlightedGeo","render","document","platformSection","querySelector","HTMLElement","midPointOffset","getBoundingClientRect","height","top","goal","documentElement","scrollTop","progress","max","section","observer","IntersectionObserver","planetElement","entry","entries","toggle","isIntersecting","platformContent","rootMargin","threshold"],"sourceRoot":""}
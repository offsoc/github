# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `fido-challenger-client` gem.
# Please instead update this file by running `bin/tapioca gem fido-challenger-client`.

# source://fido-challenger-client//lib/fido_challenger.rb#8
class FIDOChallenger
  class << self
    # source://fido-challenger-client//lib/fido_challenger.rb#74
    def bypass(uid, resource, duration); end

    # source://fido-challenger-client//lib/fido_challenger.rb#14
    def challenge(uid, resource); end

    # source://fido-challenger-client//lib/fido_challenger.rb#103
    def clear_bypass(uid); end

    # source://fido-challenger-client//lib/fido_challenger.rb#148
    def hmac_token(body, timestamp); end

    # source://fido-challenger-client//lib/fido_challenger.rb#125
    def list_bypass; end

    # source://fido-challenger-client//lib/fido_challenger.rb#60
    def poll_status(token, attempts); end

    # source://fido-challenger-client//lib/fido_challenger.rb#153
    def service_url; end

    # source://fido-challenger-client//lib/fido_challenger.rb#48
    def status(token); end

    # source://fido-challenger-client//lib/fido_challenger.rb#54
    def status_user_resource(token, uid, resource); end

    # source://fido-challenger-client//lib/fido_challenger.rb#144
    def timestamp; end

    # source://fido-challenger-client//lib/fido_challenger.rb#33
    def token_status(response); end

    # source://fido-challenger-client//lib/fido_challenger.rb#157
    def use_ssl; end
  end
end

# source://fido-challenger-client//lib/fido_challenger.rb#11
FIDOChallenger::DEFAULT_BYPASS_DURATION = T.let(T.unsafe(nil), Integer)

# source://fido-challenger-client//lib/fido_challenger.rb#9
class FIDOChallenger::FIDOChallengerError < ::StandardError; end

# source://fido-challenger-client//lib/fido_challenger.rb#10
class FIDOChallenger::FIDOChallengerFailOpenError < ::FIDOChallenger::FIDOChallengerError; end

# source://fido-challenger-client//lib/fido_challenger.rb#12
FIDOChallenger::MAX_BYPASS_DURATION = T.let(T.unsafe(nil), Integer)

# Stash a serialization of challenge in Dir.tmpdir
# This is particularly useful for sshd
#
# source://fido-challenger-client//lib/token_stash.rb#8
class TokenStash
  class << self
    # Hash the user to reduce the chance of path manipulation
    #
    # source://fido-challenger-client//lib/token_stash.rb#26
    def hash(user); end

    # source://fido-challenger-client//lib/token_stash.rb#21
    def path_for_user(user); end

    # source://fido-challenger-client//lib/token_stash.rb#15
    def read(user); end

    # source://fido-challenger-client//lib/token_stash.rb#9
    def write(user, token); end
  end
end

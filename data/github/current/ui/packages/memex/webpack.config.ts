// added to ensure the merged webpack typings used by WDS work as expected
import 'webpack-dev-server'

import swcConfig from '@github-ui/swc/config'
import UICommandsPlugin from '@github-ui/ui-commands-scripts/plugin'
import ReactRefreshWebpackPlugin from '@pmmmwh/react-refresh-webpack-plugin'
import {glob} from 'glob'
import {join, resolve} from 'path'
import TerserPlugin from 'terser-webpack-plugin'
import {type Configuration, DefinePlugin, EnvironmentPlugin} from 'webpack'
import {BundleAnalyzerPlugin} from 'webpack-bundle-analyzer'

import {APP_ENV, IS_STANDALONE, isDevNodeEnv, isProfilingEnabled, NODE_ENV, publicPath} from './webpack/constants'
import {definePluginValues} from './webpack/define-plugin-values'

const {DEV_PORT = 9091} = process.env

const config: Configuration = {
  /**
   * In dev we ensure webpack can reuse it's cache, for improved rebuild perf
   */
  cache: isDevNodeEnv,
  entry: {
    /**
     * Override the entry point with the stories entry
     */
    app: './src/stories/index.tsx',
  },
  output: {
    /**
     * Empty the output directory before writing
     * new files
     */
    clean: true,
    /**
     * Name structure for entrypoint files
     */
    filename: '[name].bundle.js',
    /**
     * Name structure for chunk files (lazy-loaded/dynamic imports)
     */
    chunkFilename: '[name].chunk.js',
    /**
     * override the output directory with the stories output directory
     */
    path: resolve(__dirname, 'dist/memex-stories/assets'),
    /**
     * The path that assets should be served from
     * since we're not going to necessarily
     * known this ahead of time, we can determine it
     * from the script tag in the html, using
     * automatic publicPath discovery
     */
    publicPath: 'auto',
    /**
     * When outputting jsonp script tags
     * for dynamic chunks, ensure that
     * `crossorigin="anonymous"` is set
     * on the tags to avoid cors issues
     */
    crossOriginLoading: 'anonymous',
  },
  /**
   * 'cheap-module-source-map' is significantly faster than 'source-map'
   * for development/staging, but not as perfect to look at as 'source-map'
   *
   * in production we still use source-map
   */
  devtool: isDevNodeEnv || APP_ENV === 'staging' ? 'cheap-module-source-map' : 'source-map',
  /**
   * Mode enable/disable specific optimizations based on the environment
   */
  mode: isDevNodeEnv ? 'development' : 'production',

  resolve: {
    // Add '.ts' and '.tsx' as resolvable extensions.
    extensions: ['.ts', '.tsx', '.js', '.scss'],
    /**
     * When profiling is enabled resolve
     * react-dom and scheduler/tracing to the
     * profiling versions instead
     */
    alias: isProfilingEnabled
      ? {
          'react-dom$': 'react-dom/profiling',
          'scheduler/tracing': 'scheduler/tracing-profiling',
        }
      : {},

    fallback: {
      /**
       * Avoids adding polyfills for the node crypto module
       * there's a browser version we use, we don't need
       * the node one too
       */
      crypto: false,
    },
  },

  module: {
    rules: [
      {
        /**
         * Transform ts and tsx files
         * with swc-loader, using the config
         * defined in `.swcrc`
         */
        test: /\.(ts|tsx)$/,
        exclude: /node_modules/,
        use: [
          {
            loader: 'swc-loader',
            options: swcConfig,
          },
        ],
      },
      {
        test: /\.scss$/,
        exclude: /\.module\.scss$/,
        use: [
          'style-loader',
          {
            loader: 'css-loader',
            options: {
              url: false,
            },
          },
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                config: resolve(__dirname, '..', '..', '..', 'postcss.config.js'),
              },
            },
          },
        ],
      },
      {
        test: /\.module\.css$/,
        use: [
          'style-loader',
          {
            loader: '@teamsupercell/typings-for-css-modules-loader',
            options: {
              banner: `// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!
/* eslint eslint-comments/no-use: off */
/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */
`,
              formatter: 'prettier',
              prettierConfigFile: resolve(__dirname, './.prettierrc.js'),
              disableLocalsExport: true,
            },
          },
          {
            loader: 'css-loader',
            options: {
              url: false,
              modules: {
                localIdentName: '[name]__[local]--[hash:base64:5]',
                namedExport: false,
                exportLocalsConvention: 'as-is',
              },
              importLoaders: 1,
            },
          },
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  [
                    '@csstools/postcss-global-data',
                    {
                      files: glob.sync(
                        resolve(__dirname, '../../../', './node_modules/@primer/primitives/dist/css/**/*.css'),
                      ),
                    },
                  ],
                  ['postcss-custom-media', {}],
                  ['postcss-nesting', {edition: '2024-02'}],
                ],
              },
            },
          },
        ],
      },
      {
        test: /.*node_modules\/@primer\/react\/.*\.css$/,
        use: [
          'style-loader',
          {
            loader: 'css-loader',
            options: {
              sourceMap: true,
              url: false,
            },
          },
        ],
      },
    ],
  },
  optimization: {
    /**
     * Avoid minimizing the bundle in dev, or staging or when profiling is enabled
     */

    minimize: !isDevNodeEnv && APP_ENV !== 'staging' && !isProfilingEnabled,
    minimizer: [
      /**
       * Rather than using standard terser, we use SWC for minification. It has similar options and output, but is
       * significantly faster.
       */
      new TerserPlugin({
        minify: TerserPlugin.swcMinify,
        terserOptions: {
          format: {
            /**
             * By default, SWC will minify some non-ascii characters (eg emojis) as part of minification.
             * This causes issues when using the minified version of our react emojis with Web Test Runner.
             * On the bright side, the code produced with this option is slightly more compressible with gzip.
             * Related: https://github.com/modernweb-dev/web/issues/1888
             */
            ascii_only: true,
          },
          compress: {
            keep_classnames: true,
          },
          mangle: {
            keep_classnames: true,
          },
        },
      }),
    ],
  },
  performance: {
    /**
     * Webpack warns us about large output when an
     * individual asset is larger than this value
     */
    maxAssetSize: 600 * 1024,
    /**
     * Webpack warns us when an entrypoint is larger than this value
     */
    maxEntrypointSize: 600 * 1024,
  },

  plugins: getPlugins(),

  /**
   * devServer configuration only applies when running
   * webpack serve
   *
   * This is used to serve _in memory_ assets as well as
   * to serve hot reloaded, incremental builds in a
   * performant way.
   */
  devServer: {
    /**
     * Whether to serve gzip responses
     */
    compress: true,

    devMiddleware: {
      /**
       * Serve assets that webpack builds (the entrypoints
       * and dynamic files generated by them) from this
       * path name.
       *
       * This is similar to output.publicPath, except it only
       * affects the location on disc the assets are served from
       * and not their internal paths
       */
      publicPath,
    },
    /**
     * Whether the dev server should support hot reloading
     */
    hot: true,

    /**
     * The port the dev server should listen on
     */
    port: DEV_PORT,
    static: {
      /**
       * Serve non-built assets from the storybook output directory
       */
      directory: join(__dirname, 'dev-environment'),
    },
    /**
     * Open the default story in the browser
     */
    open: 'orgs/app/projects/1',
    historyApiFallback: {
      /**
       * When a request is not matched,
       * fallback to the index.html
       *
       * this is necessary to ensure that the dev server
       * serves the index page for SPA routes on page load
       */
      index: 'index.html',
    },
  },
}

export default config

function getPlugins() {
  const plugins: Configuration['plugins'] = [
    /**
     * Defines fallback environment properties for the application
     * to use when the environment is not defined already
     *
     * These are mostly passing through the defaults we set above
     */
    new EnvironmentPlugin({
      APP_ENV,
      NODE_ENV,
      ENABLE_PROFILING: JSON.stringify(isProfilingEnabled),
      IS_STANDALONE,
    }),
    /**
     * These exact identifiers are replaced by the defined values in
     * compilation
     */
    new DefinePlugin(definePluginValues),
    new UICommandsPlugin({
      env: NODE_ENV,
    }),
  ]

  const devOnlyPlugins = [
    /**
     * Enable fast refresh
     */
    new ReactRefreshWebpackPlugin(),
  ]

  const prodOnlyPlugins = [
    /**
     * When NODE_ENV is not `development`, analyze bundles on build
     * We skip this in a dev build, since
     *
     * 1. We aren't minifying/treeshaking so those results won't be very helpful
     * 2. We don't need to perform this on incremental builds
     */
    new BundleAnalyzerPlugin({
      analyzerMode: 'static',
      openAnalyzer: false,
      reportFilename: '../bundle-report.html',
      generateStatsFile: true,
      statsFilename: '../stats.json',
    }),
  ]

  return plugins.concat(isDevNodeEnv ? devOnlyPlugins : prodOnlyPlugins)
}

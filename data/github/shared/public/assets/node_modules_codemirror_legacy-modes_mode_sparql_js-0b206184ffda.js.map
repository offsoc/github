{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_sparql_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/sparql.js"],"sourcesContent":["var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\",\n                      \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\",\n                      \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\",\n                      \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\",\n                      \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\",\n                      \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\",\n                      \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\",\n                      \"isblank\", \"isliteral\", \"a\", \"bind\"]);\nvar keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\",\n                           \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\",\n                           \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\",\n                           \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\",\n                           \"true\", \"false\", \"with\",\n                           \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\", \"into\"]);\nvar operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"$\" || ch == \"?\") {\n    if(ch == \"?\" && stream.match(/\\s/, false)){\n      return \"operator\";\n    }\n    stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n    return \"variableName.local\";\n  }\n  else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  }\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  }\n  else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"bracket\";\n  }\n  else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  else if (operatorChars.test(ch)) {\n    return \"operator\";\n  }\n  else if (ch == \":\") {\n    eatPnLocal(stream);\n    return \"atom\";\n  }\n  else if (ch == \"@\") {\n    stream.eatWhile(/[a-z\\d\\-]/i);\n    return \"meta\";\n  }\n  else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if (stream.eat(\":\")) {\n      eatPnLocal(stream);\n      return \"atom\";\n    }\n    var word = stream.current();\n    if (ops.test(word))\n      return \"builtin\";\n    else if (keywords.test(word))\n      return \"keyword\";\n    else\n      return \"variable\";\n  }\n}\n\nfunction eatPnLocal(stream) {\n  stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n}\n\nfunction tokenLiteral(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport const sparql = {\n  name: \"sparql\",\n\n  startState: function() {\n    return {tokenize: tokenBase,\n            context: null,\n            indent: 0,\n            col: 0};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n    else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n    else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n    else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) {\n        popContext(state);\n        if (curPunc == \"}\" && state.context && state.context.type == \"pattern\")\n          popContext(state);\n      }\n    }\n    else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n    else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type))\n        pushContext(state, \"pattern\", stream.column());\n      else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar))\n      while (context && context.type == \"pattern\") context = context.prev;\n\n    var closing = context && firstChar == context.type;\n    if (!context)\n      return 0;\n    else if (context.type == \"pattern\")\n      return context.col;\n    else if (context.align)\n      return context.col + (closing ? 0 : 1);\n    else\n      return context.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n\n"],"names":["wordRegexp","words","join","curPunc","ops","keywords","operatorChars","tokenBase","stream","state","ch","next","match","tokenize","escaped","test","skipToEnd","eatPnLocal","eatWhile","eat","word","current","pushContext","type","col","context","prev","indent","popContext","sparql","name","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"sourceRoot":""}
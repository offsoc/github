# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Blackbird::Query::V2::FrontendQueryRequest`.
# Please instead update this file by running `bin/tapioca dsl Blackbird::Query::V2::FrontendQueryRequest`.

class Blackbird::Query::V2::FrontendQueryRequest
  sig do
    params(
      actor: T.nilable(Blackbird::Query::V2::Actor),
      custom_scopes: T.nilable(T.any(Google::Protobuf::RepeatedField[Blackbird::Query::V2::CustomScope], T::Array[Blackbird::Query::V2::CustomScope])),
      document_limit: T.nilable(Integer),
      document_location_limit: T.nilable(Integer),
      experiments: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      page_number: T.nilable(Integer),
      page_token: T.nilable(String),
      query: T.nilable(String),
      query_parser: T.nilable(T.any(Symbol, Integer)),
      query_source: T.nilable(T.any(Symbol, Integer)),
      query_type: T.nilable(T.any(Symbol, Integer)),
      request_timeout: T.nilable(Google::Protobuf::Duration),
      results_per_page: T.nilable(Integer),
      return_enclosing_symbols: T.nilable(T::Boolean),
      scoping_query: T.nilable(String),
      sha_format: T.nilable(T.any(Symbol, Integer)),
      snippet_options: T.nilable(Blackbird::Query::V2::SnippetOptions),
      tenant: T.nilable(Blackbird::Query::V2::Tenant)
    ).void
  end
  def initialize(actor: nil, custom_scopes: T.unsafe(nil), document_limit: nil, document_location_limit: nil, experiments: T.unsafe(nil), page_number: nil, page_token: nil, query: nil, query_parser: nil, query_source: nil, query_type: nil, request_timeout: nil, results_per_page: nil, return_enclosing_symbols: nil, scoping_query: nil, sha_format: nil, snippet_options: nil, tenant: nil); end

  sig { returns(T.nilable(Blackbird::Query::V2::Actor)) }
  def actor; end

  sig { params(value: T.nilable(Blackbird::Query::V2::Actor)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_custom_scopes; end

  sig { void }
  def clear_document_limit; end

  sig { void }
  def clear_document_location_limit; end

  sig { void }
  def clear_experiments; end

  sig { void }
  def clear_page_number; end

  sig { void }
  def clear_page_token; end

  sig { void }
  def clear_query; end

  sig { void }
  def clear_query_parser; end

  sig { void }
  def clear_query_source; end

  sig { void }
  def clear_query_type; end

  sig { void }
  def clear_request_timeout; end

  sig { void }
  def clear_results_per_page; end

  sig { void }
  def clear_return_enclosing_symbols; end

  sig { void }
  def clear_scoping_query; end

  sig { void }
  def clear_sha_format; end

  sig { void }
  def clear_snippet_options; end

  sig { void }
  def clear_tenant; end

  sig { returns(Google::Protobuf::RepeatedField[Blackbird::Query::V2::CustomScope]) }
  def custom_scopes; end

  sig { params(value: Google::Protobuf::RepeatedField[Blackbird::Query::V2::CustomScope]).void }
  def custom_scopes=(value); end

  sig { returns(Integer) }
  def document_limit; end

  sig { params(value: Integer).void }
  def document_limit=(value); end

  sig { returns(Integer) }
  def document_location_limit; end

  sig { params(value: Integer).void }
  def document_location_limit=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def experiments; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def experiments=(value); end

  sig { returns(Integer) }
  def page_number; end

  sig { params(value: Integer).void }
  def page_number=(value); end

  sig { returns(String) }
  def page_token; end

  sig { params(value: String).void }
  def page_token=(value); end

  sig { returns(String) }
  def query; end

  sig { params(value: String).void }
  def query=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def query_parser; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def query_parser=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def query_source; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def query_source=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def query_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def query_type=(value); end

  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def request_timeout; end

  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def request_timeout=(value); end

  sig { returns(Integer) }
  def results_per_page; end

  sig { params(value: Integer).void }
  def results_per_page=(value); end

  sig { returns(T::Boolean) }
  def return_enclosing_symbols; end

  sig { params(value: T::Boolean).void }
  def return_enclosing_symbols=(value); end

  sig { returns(String) }
  def scoping_query; end

  sig { params(value: String).void }
  def scoping_query=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def sha_format; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def sha_format=(value); end

  sig { returns(T.nilable(Blackbird::Query::V2::SnippetOptions)) }
  def snippet_options; end

  sig { params(value: T.nilable(Blackbird::Query::V2::SnippetOptions)).void }
  def snippet_options=(value); end

  sig { returns(T.nilable(Blackbird::Query::V2::Tenant)) }
  def tenant; end

  sig { params(value: T.nilable(Blackbird::Query::V2::Tenant)).void }
  def tenant=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::TokenScanningService::V0::CustomPatternDryRunNotify`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::TokenScanningService::V0::CustomPatternDryRunNotify`.

class Hydro::Schemas::TokenScanningService::V0::CustomPatternDryRunNotify
  sig do
    params(
      custom_pattern: T.nilable(Hydro::Schemas::TokenScanningService::V0::CustomPatternDryRunNotify::CustomPattern),
      dry_run_status: T.nilable(T.any(Symbol, Integer)),
      match_count: T.nilable(Integer),
      repository_id: T.nilable(Integer)
    ).void
  end
  def initialize(custom_pattern: nil, dry_run_status: nil, match_count: nil, repository_id: nil); end

  sig { void }
  def clear_custom_pattern; end

  sig { void }
  def clear_dry_run_status; end

  sig { void }
  def clear_match_count; end

  sig { void }
  def clear_repository_id; end

  sig { returns(T.nilable(Hydro::Schemas::TokenScanningService::V0::CustomPatternDryRunNotify::CustomPattern)) }
  def custom_pattern; end

  sig do
    params(
      value: T.nilable(Hydro::Schemas::TokenScanningService::V0::CustomPatternDryRunNotify::CustomPattern)
    ).void
  end
  def custom_pattern=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def dry_run_status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def dry_run_status=(value); end

  sig { returns(Integer) }
  def match_count; end

  sig { params(value: Integer).void }
  def match_count=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end
end

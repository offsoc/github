# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Sigstore::Rekor::V1::InclusionProof`.
# Please instead update this file by running `bin/tapioca dsl Sigstore::Rekor::V1::InclusionProof`.

class Sigstore::Rekor::V1::InclusionProof
  sig do
    params(
      checkpoint: T.nilable(Sigstore::Rekor::V1::Checkpoint),
      hashes: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      log_index: T.nilable(Integer),
      root_hash: T.nilable(String),
      tree_size: T.nilable(Integer)
    ).void
  end
  def initialize(checkpoint: nil, hashes: T.unsafe(nil), log_index: nil, root_hash: nil, tree_size: nil); end

  sig { returns(T.nilable(Sigstore::Rekor::V1::Checkpoint)) }
  def checkpoint; end

  sig { params(value: T.nilable(Sigstore::Rekor::V1::Checkpoint)).void }
  def checkpoint=(value); end

  sig { void }
  def clear_checkpoint; end

  sig { void }
  def clear_hashes; end

  sig { void }
  def clear_log_index; end

  sig { void }
  def clear_root_hash; end

  sig { void }
  def clear_tree_size; end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def hashes; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def hashes=(value); end

  sig { returns(Integer) }
  def log_index; end

  sig { params(value: Integer).void }
  def log_index=(value); end

  sig { returns(String) }
  def root_hash; end

  sig { params(value: String).void }
  def root_hash=(value); end

  sig { returns(Integer) }
  def tree_size; end

  sig { params(value: Integer).void }
  def tree_size=(value); end
end

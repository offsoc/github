# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: feature_management/feature_flags/management/v3/operation.proto
# typed: strict

# *
# OperationError defines the error model for asynchronous operations performed by the FeatureFlagHub APIs.
class FeatureManagement::FeatureFlags::Management::V3::OperationError
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::OperationError) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::OperationError).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::OperationError) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::OperationError, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      code: T.nilable(String),
      message: T.nilable(String)
    ).void
  end
  def initialize(
    code: "",
    message: ""
  )
  end

  # The field containing error code
  sig { returns(String) }
  def code
  end

  # The field containing error code
  sig { params(value: String).void }
  def code=(value)
  end

  # The field containing error code
  sig { void }
  def clear_code
  end

  # The field contains the error message
  sig { returns(String) }
  def message
  end

  # The field contains the error message
  sig { params(value: String).void }
  def message=(value)
  end

  # The field contains the error message
  sig { void }
  def clear_message
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# Operation defines an asynchronous operation performed by the FeatureFlagHub APIs. The job id is used to look up the status and manage the job while it is processing.
class FeatureManagement::FeatureFlags::Management::V3::Operation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::Operation) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::Operation).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::Operation) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::Operation, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      id: T.nilable(String),
      done: T.nilable(T::Boolean),
      error: T.nilable(FeatureManagement::FeatureFlags::Management::V3::OperationError),
      response: T.nilable(Google::Protobuf::Any),
      status_code: T.nilable(Integer)
    ).void
  end
  def initialize(
    id: "",
    done: false,
    error: nil,
    response: nil,
    status_code: 0
  )
  end

  # This field contains the server-generated job id of the long-running operation.
# This field will be used to look up the status of the job.
  sig { returns(String) }
  def id
  end

  # This field contains the server-generated job id of the long-running operation.
# This field will be used to look up the status of the job.
  sig { params(value: String).void }
  def id=(value)
  end

  # This field contains the server-generated job id of the long-running operation.
# This field will be used to look up the status of the job.
  sig { void }
  def clear_id
  end

  # If the value is false, then the operation is still in progress
# If the value is true, then the results field will either have an error or the response
  sig { returns(T::Boolean) }
  def done
  end

  # If the value is false, then the operation is still in progress
# If the value is true, then the results field will either have an error or the response
  sig { params(value: T::Boolean).void }
  def done=(value)
  end

  # If the value is false, then the operation is still in progress
# If the value is true, then the results field will either have an error or the response
  sig { void }
  def clear_done
  end

  # Ths field contains an error in case of operation failure
  sig { returns(T.nilable(FeatureManagement::FeatureFlags::Management::V3::OperationError)) }
  def error
  end

  # Ths field contains an error in case of operation failure
  sig { params(value: T.nilable(FeatureManagement::FeatureFlags::Management::V3::OperationError)).void }
  def error=(value)
  end

  # Ths field contains an error in case of operation failure
  sig { void }
  def clear_error
  end

  # If the original request returns no data then the response is `google.protobuf.Empty`
# If the original request returns a resource, then the corresponding resource is returned
# For anything else, the response should be of type "<OriginalMethodName>Response"
  sig { returns(T.nilable(Google::Protobuf::Any)) }
  def response
  end

  # If the original request returns no data then the response is `google.protobuf.Empty`
# If the original request returns a resource, then the corresponding resource is returned
# For anything else, the response should be of type "<OriginalMethodName>Response"
  sig { params(value: T.nilable(Google::Protobuf::Any)).void }
  def response=(value)
  end

  # If the original request returns no data then the response is `google.protobuf.Empty`
# If the original request returns a resource, then the corresponding resource is returned
# For anything else, the response should be of type "<OriginalMethodName>Response"
  sig { void }
  def clear_response
  end

  # The field contains the status code
  sig { returns(Integer) }
  def status_code
  end

  # The field contains the status code
  sig { params(value: Integer).void }
  def status_code=(value)
  end

  # The field contains the status code
  sig { void }
  def clear_status_code
  end

  sig { returns(T.nilable(Symbol)) }
  def result
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# GetOperationRequest defines the request message for the GetOperation method used to get the status of an asynchronous operation.
class FeatureManagement::FeatureFlags::Management::V3::GetOperationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::GetOperationRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::GetOperationRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::GetOperationRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::GetOperationRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      id: T.nilable(String)
    ).void
  end
  def initialize(
    id: ""
  )
  end

  # This is the server-generated job id that will be used to look up the status of the operation (required)
# When calling long-running operations, an Operation message will be returned and the id field in that object
# can be used in this request to look up the current status.
  sig { returns(String) }
  def id
  end

  # This is the server-generated job id that will be used to look up the status of the operation (required)
# When calling long-running operations, an Operation message will be returned and the id field in that object
# can be used in this request to look up the current status.
  sig { params(value: String).void }
  def id=(value)
  end

  # This is the server-generated job id that will be used to look up the status of the operation (required)
# When calling long-running operations, an Operation message will be returned and the id field in that object
# can be used in this request to look up the current status.
  sig { void }
  def clear_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

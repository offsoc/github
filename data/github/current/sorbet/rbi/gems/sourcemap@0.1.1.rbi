# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sourcemap` gem.
# Please instead update this file by running `bin/tapioca gem sourcemap`.

# source://sourcemap//lib/source_map/offset.rb#1
module SourceMap; end

# source://sourcemap//lib/source_map/map.rb#8
class SourceMap::Map
  include ::Prelude::Enumerator
  include ::Enumerable

  # @return [Map] a new instance of Map
  #
  # source://sourcemap//lib/source_map/map.rb#71
  def initialize(mappings = T.unsafe(nil), filename = T.unsafe(nil)); end

  # source://sourcemap//lib/source_map/map.rb#111
  def +(other); end

  # source://sourcemap//lib/source_map/map.rb#101
  def ==(other); end

  # source://sourcemap//lib/source_map/map.rb#81
  def [](i); end

  # source://sourcemap//lib/source_map/map.rb#161
  def as_json(*_arg0); end

  # source://sourcemap//lib/source_map/map.rb#141
  def bsearch(offset, from = T.unsafe(nil), to = T.unsafe(nil)); end

  # source://sourcemap//lib/source_map/map.rb#85
  def each(&block); end

  # @return [Boolean]
  #
  # source://sourcemap//lib/source_map/map.rb#105
  def eql?(other); end

  # Returns the value of attribute filename.
  #
  # source://sourcemap//lib/source_map/map.rb#75
  def filename; end

  # Public: Get a pretty inspect output for debugging purposes.
  #
  # Returns a String.
  #
  # source://sourcemap//lib/source_map/map.rb#178
  def inspect; end

  # source://sourcemap//lib/source_map/map.rb#97
  def names; end

  # source://sourcemap//lib/source_map/map.rb#77
  def size; end

  # source://sourcemap//lib/source_map/map.rb#93
  def sources; end

  # source://sourcemap//lib/source_map/map.rb#171
  def to_json(*a); end

  # source://sourcemap//lib/source_map/map.rb#89
  def to_s; end

  # source://sourcemap//lib/source_map/map.rb#123
  def |(other); end

  protected

  # source://sourcemap//lib/source_map/map.rb#189
  def build_vlq_string; end

  # Returns the value of attribute mappings.
  #
  # source://sourcemap//lib/source_map/map.rb#187
  def mappings; end

  class << self
    # Internal: Decode VLQ mappings and match up sources and symbol names.
    #
    # str     - VLQ string from 'mappings' attribute
    # sources - Array of Strings from 'sources' attribute
    # names   - Array of Strings from 'names' attribute
    #
    # Returns an Array of Mappings.
    #
    # source://sourcemap//lib/source_map/map.rb#31
    def decode_vlq_mappings(str, sources = T.unsafe(nil), names = T.unsafe(nil)); end

    # source://sourcemap//lib/source_map/map.rb#15
    def from_hash(hash); end

    # source://sourcemap//lib/source_map/map.rb#11
    def from_json(json); end
  end
end

# source://sourcemap//lib/source_map/mapping.rb#4
class SourceMap::Mapping < ::Struct
  # Public: Get a pretty inspect output for debugging purposes.
  #
  # Returns a String.
  #
  # source://sourcemap//lib/source_map/mapping.rb#18
  def inspect; end

  # Public: Get a simple string representation of the mapping.
  #
  # Returns a String.
  #
  # source://sourcemap//lib/source_map/mapping.rb#8
  def to_s; end
end

# Public: Offset is an immutable structure representing a position in
# a source file.
#
# source://sourcemap//lib/source_map/offset.rb#4
class SourceMap::Offset
  include ::Comparable

  # Public: Initialize an Offset.
  #
  # line   - Integer line number
  # column - Integer column number
  #
  # @return [Offset] a new instance of Offset
  #
  # source://sourcemap//lib/source_map/offset.rb#25
  def initialize(line, column); end

  # Public: Shift the offset by some value.
  #
  # other - An Offset to add by its line and column
  #         Or an Integer to add by line
  #
  # Returns a new Offset instance.
  #
  # source://sourcemap//lib/source_map/offset.rb#41
  def +(other); end

  # Public: Compare Offset to another.
  #
  # Useful for determining if a position in a few is between two offsets.
  #
  # other - Another Offset
  #
  # Returns a negative number when other is smaller and a positive number
  # when its greater. Implements the Comparable#<=> protocol.
  #
  # source://sourcemap//lib/source_map/offset.rb#60
  def <=>(other); end

  # Public: Get Integer column of offset
  #
  # source://sourcemap//lib/source_map/offset.rb#33
  def column; end

  # Public: Get a pretty inspect output for debugging purposes.
  #
  # Returns a String.
  #
  # source://sourcemap//lib/source_map/offset.rb#84
  def inspect; end

  # Public: Gets Integer line of offset
  #
  # source://sourcemap//lib/source_map/offset.rb#30
  def line; end

  # Public: Get a simple string representation of the offset
  #
  # Returns a String.
  #
  # source://sourcemap//lib/source_map/offset.rb#73
  def to_s; end

  class << self
    # Public: Construct Offset value.
    #
    # Returns Offset instance.
    #
    # source://sourcemap//lib/source_map/offset.rb#10
    def new(*args); end
  end
end

# source://sourcemap//lib/source_map/version.rb#2
SourceMap::VERSION = T.let(T.unsafe(nil), String)

# Public: Base64 VLQ encoding
#
# Adopted from ConradIrwin/ruby-source_map
#   https://github.com/ConradIrwin/ruby-source_map/blob/master/lib/source_map/vlq.rb
#
# Resources
#
#   http://en.wikipedia.org/wiki/Variable-length_quantity
#   https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit
#   https://github.com/mozilla/source-map/blob/master/lib/source-map/base64-vlq.js
#
# source://sourcemap//lib/source_map/vlq.rb#13
module SourceMap::VLQ
  class << self
    # Public: Decode a VLQ string.
    #
    # str - VLQ encoded String
    #
    # Returns an Array of Integers.
    #
    # source://sourcemap//lib/source_map/vlq.rb#48
    def decode(str); end

    # Public: Decode a VLQ string into mapping numbers.
    #
    # str - VLQ encoded String
    #
    # Returns an two dimensional Array of Integers.
    #
    # source://sourcemap//lib/source_map/vlq.rb#87
    def decode_mappings(str); end

    # Public: Encode a list of numbers into a compact VLQ string.
    #
    # ary - An Array of Integers
    #
    # Returns a VLQ String.
    #
    # source://sourcemap//lib/source_map/vlq.rb#27
    def encode(ary); end

    # Public: Encode a mapping array into a compact VLQ string.
    #
    # ary - Two dimensional Array of Integers.
    #
    # Returns a VLQ encoded String seperated by , and ;.
    #
    # source://sourcemap//lib/source_map/vlq.rb#74
    def encode_mappings(ary); end
  end
end

# source://sourcemap//lib/source_map/vlq.rb#19
SourceMap::VLQ::BASE64_DIGITS = T.let(T.unsafe(nil), Array)

# source://sourcemap//lib/source_map/vlq.rb#20
SourceMap::VLQ::BASE64_VALUES = T.let(T.unsafe(nil), Hash)

# source://sourcemap//lib/source_map/vlq.rb#15
SourceMap::VLQ::VLQ_BASE = T.let(T.unsafe(nil), Integer)

# source://sourcemap//lib/source_map/vlq.rb#16
SourceMap::VLQ::VLQ_BASE_MASK = T.let(T.unsafe(nil), Integer)

# source://sourcemap//lib/source_map/vlq.rb#14
SourceMap::VLQ::VLQ_BASE_SHIFT = T.let(T.unsafe(nil), Integer)

# source://sourcemap//lib/source_map/vlq.rb#17
SourceMap::VLQ::VLQ_CONTINUATION_BIT = T.let(T.unsafe(nil), Integer)

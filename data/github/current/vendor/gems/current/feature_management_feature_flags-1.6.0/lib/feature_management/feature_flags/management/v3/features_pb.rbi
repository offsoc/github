# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: feature_management/feature_flags/management/v3/features.proto
# typed: strict

# *
# CreateFeatureFlagRequest defines the request message for the CreateFeature method used to create a new feature flag.
class FeatureManagement::FeatureFlags::Management::V3::CreateFeatureFlagRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::CreateFeatureFlagRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::CreateFeatureFlagRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::CreateFeatureFlagRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::CreateFeatureFlagRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      feature: T.nilable(FeatureManagement::FeatureFlags::Management::V3::FeatureFlag)
    ).void
  end
  def initialize(
    feature: nil
  )
  end

  # The Feature resource to create (required)
  sig { returns(T.nilable(FeatureManagement::FeatureFlags::Management::V3::FeatureFlag)) }
  def feature
  end

  # The Feature resource to create (required)
  sig { params(value: T.nilable(FeatureManagement::FeatureFlags::Management::V3::FeatureFlag)).void }
  def feature=(value)
  end

  # The Feature resource to create (required)
  sig { void }
  def clear_feature
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# UpdateFeatureFlagRequest defines the request message for the UpdateFeature method used to update an existing feature flag.
class FeatureManagement::FeatureFlags::Management::V3::UpdateFeatureFlagRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::UpdateFeatureFlagRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::UpdateFeatureFlagRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::UpdateFeatureFlagRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::UpdateFeatureFlagRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      feature: T.nilable(FeatureManagement::FeatureFlags::Management::V3::FeatureFlag),
      update_mask: T.nilable(Google::Protobuf::FieldMask)
    ).void
  end
  def initialize(
    feature: nil,
    update_mask: nil
  )
  end

  # The feature resource which replaces the resource on the server (required)
  sig { returns(T.nilable(FeatureManagement::FeatureFlags::Management::V3::FeatureFlag)) }
  def feature
  end

  # The feature resource which replaces the resource on the server (required)
  sig { params(value: T.nilable(FeatureManagement::FeatureFlags::Management::V3::FeatureFlag)).void }
  def feature=(value)
  end

  # The feature resource which replaces the resource on the server (required)
  sig { void }
  def clear_feature
  end

  # The update mask applies to the resource (optional)
  sig { returns(T.nilable(Google::Protobuf::FieldMask)) }
  def update_mask
  end

  # The update mask applies to the resource (optional)
  sig { params(value: T.nilable(Google::Protobuf::FieldMask)).void }
  def update_mask=(value)
  end

  # The update mask applies to the resource (optional)
  sig { void }
  def clear_update_mask
  end

  sig { returns(T::Boolean) }
  def has_update_mask?
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# ListFeatureFlagsRequest defines the request message for the ListFeatures method used to list feature flags.
class FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      page: T.nilable(Integer),
      page_size: T.nilable(Integer),
      filter: T.nilable(FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsFilter),
      order_by: T.nilable(String)
    ).void
  end
  def initialize(
    page: 0,
    page_size: 0,
    filter: nil,
    order_by: ""
  )
  end

  # page is the page number (required)
  sig { returns(Integer) }
  def page
  end

  # page is the page number (required)
  sig { params(value: Integer).void }
  def page=(value)
  end

  # page is the page number (required)
  sig { void }
  def clear_page
  end

  # page_size is the number of entries returned in a page (required)
  sig { returns(Integer) }
  def page_size
  end

  # page_size is the number of entries returned in a page (required)
  sig { params(value: Integer).void }
  def page_size=(value)
  end

  # page_size is the number of entries returned in a page (required)
  sig { void }
  def clear_page_size
  end

  # This field contains a filter to filter the list of features (optional)
  sig { returns(T.nilable(FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsFilter)) }
  def filter
  end

  # This field contains a filter to filter the list of features (optional)
  sig { params(value: T.nilable(FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsFilter)).void }
  def filter=(value)
  end

  # This field contains a filter to filter the list of features (optional)
  sig { void }
  def clear_filter
  end

  sig { returns(T::Boolean) }
  def has_filter?
  end

  # order_by defines the sorting order of the list of features (optional)
# By default, the list of features will be sorted by their names in ascending order.
# To sort by descending order for another field, add the suffix " desc".
# Examples: "owningService", "owningService desc"
  sig { returns(String) }
  def order_by
  end

  # order_by defines the sorting order of the list of features (optional)
# By default, the list of features will be sorted by their names in ascending order.
# To sort by descending order for another field, add the suffix " desc".
# Examples: "owningService", "owningService desc"
  sig { params(value: String).void }
  def order_by=(value)
  end

  # order_by defines the sorting order of the list of features (optional)
# By default, the list of features will be sorted by their names in ascending order.
# To sort by descending order for another field, add the suffix " desc".
# Examples: "owningService", "owningService desc"
  sig { void }
  def clear_order_by
  end

  sig { returns(T::Boolean) }
  def has_order_by?
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsFilter
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsFilter) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsFilter).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsFilter) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsFilter, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String),
      tracking_url: T.nilable(String),
      slack_channel: T.nilable(String),
      long_lived: T.nilable(T::Boolean),
      state: T.nilable(T.any(Symbol, String, Integer)),
      last_updated_start: T.nilable(Google::Protobuf::Timestamp),
      last_updated_end: T.nilable(Google::Protobuf::Timestamp),
      owning_service: T.nilable(String)
    ).void
  end
  def initialize(
    name: "",
    tracking_url: "",
    slack_channel: "",
    long_lived: false,
    state: :INVALID,
    last_updated_start: nil,
    last_updated_end: nil,
    owning_service: ""
  )
  end

  # This field filters features whose name contains this value (optional)
  sig { returns(String) }
  def name
  end

  # This field filters features whose name contains this value (optional)
  sig { params(value: String).void }
  def name=(value)
  end

  # This field filters features whose name contains this value (optional)
  sig { void }
  def clear_name
  end

  sig { returns(T::Boolean) }
  def has_name?
  end

  # This field filters features whose tracking_url matches this value (optional)
  sig { returns(String) }
  def tracking_url
  end

  # This field filters features whose tracking_url matches this value (optional)
  sig { params(value: String).void }
  def tracking_url=(value)
  end

  # This field filters features whose tracking_url matches this value (optional)
  sig { void }
  def clear_tracking_url
  end

  sig { returns(T::Boolean) }
  def has_tracking_url?
  end

  # This field filterss features whose tracking_url contains this value (optional)
  sig { returns(String) }
  def slack_channel
  end

  # This field filterss features whose tracking_url contains this value (optional)
  sig { params(value: String).void }
  def slack_channel=(value)
  end

  # This field filterss features whose tracking_url contains this value (optional)
  sig { void }
  def clear_slack_channel
  end

  sig { returns(T::Boolean) }
  def has_slack_channel?
  end

  # This field filters the list by long-lived features (optional)
# long_lived == true returns only long-lived features
# long_lived == false returns non long-lived features
# Leaving this field does filter by long_lived status - this is the default
  sig { returns(T::Boolean) }
  def long_lived
  end

  # This field filters the list by long-lived features (optional)
# long_lived == true returns only long-lived features
# long_lived == false returns non long-lived features
# Leaving this field does filter by long_lived status - this is the default
  sig { params(value: T::Boolean).void }
  def long_lived=(value)
  end

  # This field filters the list by long-lived features (optional)
# long_lived == true returns only long-lived features
# long_lived == false returns non long-lived features
# Leaving this field does filter by long_lived status - this is the default
  sig { void }
  def clear_long_lived
  end

  sig { returns(T::Boolean) }
  def has_long_lived?
  end

  # This field filters the features by their state (optional)
  sig { returns(T.any(Symbol, Integer)) }
  def state
  end

  # This field filters the features by their state (optional)
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def state=(value)
  end

  # This field filters the features by their state (optional)
  sig { void }
  def clear_state
  end

  sig { returns(T::Boolean) }
  def has_state?
  end

  # This field filters feature whose last_updated time is after this value (optional)
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def last_updated_start
  end

  # This field filters feature whose last_updated time is after this value (optional)
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def last_updated_start=(value)
  end

  # This field filters feature whose last_updated time is after this value (optional)
  sig { void }
  def clear_last_updated_start
  end

  sig { returns(T::Boolean) }
  def has_last_updated_start?
  end

  # This field filters feature whose last_updated time is before this value (optional)
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def last_updated_end
  end

  # This field filters feature whose last_updated time is before this value (optional)
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def last_updated_end=(value)
  end

  # This field filters feature whose last_updated time is before this value (optional)
  sig { void }
  def clear_last_updated_end
  end

  sig { returns(T::Boolean) }
  def has_last_updated_end?
  end

  # This field searches for features whose tracking_url contains this value (optional)
  sig { returns(String) }
  def owning_service
  end

  # This field searches for features whose tracking_url contains this value (optional)
  sig { params(value: String).void }
  def owning_service=(value)
  end

  # This field searches for features whose tracking_url contains this value (optional)
  sig { void }
  def clear_owning_service
  end

  sig { returns(T::Boolean) }
  def has_owning_service?
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# ListFeatureFlagsResponse defines the response message for the ListFeatureFlags method used to list feature flags. It contains the features that matched the filtering, sorting and pagination criteria.
class FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsResponse) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListFeatureFlagsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      features: T.nilable(T::Array[T.nilable(FeatureManagement::FeatureFlags::Management::V3::FeatureFlag)]),
      page: T.nilable(Integer),
      page_size: T.nilable(Integer),
      total_pages: T.nilable(Integer)
    ).void
  end
  def initialize(
    features: [],
    page: 0,
    page_size: 0,
    total_pages: 0
  )
  end

  # features is a list of features definitions and shared gates (required)
  sig { returns(T::Array[T.nilable(FeatureManagement::FeatureFlags::Management::V3::FeatureFlag)]) }
  def features
  end

  # features is a list of features definitions and shared gates (required)
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def features=(value)
  end

  # features is a list of features definitions and shared gates (required)
  sig { void }
  def clear_features
  end

  # page is the page number (required)
  sig { returns(Integer) }
  def page
  end

  # page is the page number (required)
  sig { params(value: Integer).void }
  def page=(value)
  end

  # page is the page number (required)
  sig { void }
  def clear_page
  end

  # page_size is the number of entries returned in a page (required)
  sig { returns(Integer) }
  def page_size
  end

  # page_size is the number of entries returned in a page (required)
  sig { params(value: Integer).void }
  def page_size=(value)
  end

  # page_size is the number of entries returned in a page (required)
  sig { void }
  def clear_page_size
  end

  # total_pages is the total number of pages that encapsulate the list of entities (required)
  sig { returns(Integer) }
  def total_pages
  end

  # total_pages is the total number of pages that encapsulate the list of entities (required)
  sig { params(value: Integer).void }
  def total_pages=(value)
  end

  # total_pages is the total number of pages that encapsulate the list of entities (required)
  sig { void }
  def clear_total_pages
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# GetFeatureFlagRequest defines the request message for the GetFeature method used to get the definition of a feature flag.
class FeatureManagement::FeatureFlags::Management::V3::GetFeatureFlagRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::GetFeatureFlagRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::GetFeatureFlagRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::GetFeatureFlagRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::GetFeatureFlagRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String),
      actor_page_size: T.nilable(Integer)
    ).void
  end
  def initialize(
    name: "",
    actor_page_size: 0
  )
  end

  # The field contains the name of the feature resource (required)
  sig { returns(String) }
  def name
  end

  # The field contains the name of the feature resource (required)
  sig { params(value: String).void }
  def name=(value)
  end

  # The field contains the name of the feature resource (required)
  sig { void }
  def clear_name
  end

  # actor_page_size is the number of actors displayed on a page (optional)
  sig { returns(Integer) }
  def actor_page_size
  end

  # actor_page_size is the number of actors displayed on a page (optional)
  sig { params(value: Integer).void }
  def actor_page_size=(value)
  end

  # actor_page_size is the number of actors displayed on a page (optional)
  sig { void }
  def clear_actor_page_size
  end

  sig { returns(T::Boolean) }
  def has_actor_page_size?
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# DeleteFeatureFlagRequest defines the request message for the DeleteFeature method used to delete a feature flag.
class FeatureManagement::FeatureFlags::Management::V3::DeleteFeatureFlagRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::DeleteFeatureFlagRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::DeleteFeatureFlagRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::DeleteFeatureFlagRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::DeleteFeatureFlagRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String)
    ).void
  end
  def initialize(
    name: ""
  )
  end

  # The field contains the name of the feature resource (required)
  sig { returns(String) }
  def name
  end

  # The field contains the name of the feature resource (required)
  sig { params(value: String).void }
  def name=(value)
  end

  # The field contains the name of the feature resource (required)
  sig { void }
  def clear_name
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# GetRolloutTreeRequest defines the request message for the GetRolloutTree method used to get the definition of a rollout tree.
class FeatureManagement::FeatureFlags::Management::V3::GetRolloutTreeRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::GetRolloutTreeRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::GetRolloutTreeRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::GetRolloutTreeRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::GetRolloutTreeRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      id: T.nilable(String)
    ).void
  end
  def initialize(
    id: ""
  )
  end

  # The field contains the id of the rollout tree resource (required)
  sig { returns(String) }
  def id
  end

  # The field contains the id of the rollout tree resource (required)
  sig { params(value: String).void }
  def id=(value)
  end

  # The field contains the id of the rollout tree resource (required)
  sig { void }
  def clear_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# ListRolloutTreesRequest defines the request message for the ListRolloutTrees method used to list rollout trees.
class FeatureManagement::FeatureFlags::Management::V3::ListRolloutTreesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::ListRolloutTreesRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListRolloutTreesRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::ListRolloutTreesRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListRolloutTreesRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      page: T.nilable(Integer),
      page_size: T.nilable(Integer),
      filter: T.nilable(String),
      sort_by: T.nilable(String)
    ).void
  end
  def initialize(
    page: 0,
    page_size: 0,
    filter: "",
    sort_by: ""
  )
  end

  # page is the page number (required)
  sig { returns(Integer) }
  def page
  end

  # page is the page number (required)
  sig { params(value: Integer).void }
  def page=(value)
  end

  # page is the page number (required)
  sig { void }
  def clear_page
  end

  # page_size is the number of entries returned in a page (required)
  sig { returns(Integer) }
  def page_size
  end

  # page_size is the number of entries returned in a page (required)
  sig { params(value: Integer).void }
  def page_size=(value)
  end

  # page_size is the number of entries returned in a page (required)
  sig { void }
  def clear_page_size
  end

  # filter is the query to filter the list of rollout trees (optional)
  sig { returns(String) }
  def filter
  end

  # filter is the query to filter the list of rollout trees (optional)
  sig { params(value: String).void }
  def filter=(value)
  end

  # filter is the query to filter the list of rollout trees (optional)
  sig { void }
  def clear_filter
  end

  sig { returns(T::Boolean) }
  def has_filter?
  end

  # sort_by sorts the list (optional)
  sig { returns(String) }
  def sort_by
  end

  # sort_by sorts the list (optional)
  sig { params(value: String).void }
  def sort_by=(value)
  end

  # sort_by sorts the list (optional)
  sig { void }
  def clear_sort_by
  end

  sig { returns(T::Boolean) }
  def has_sort_by?
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# ListRolloutTreesResponse defines the response message for the ListRolloutTrees method used to list rollout trees. It contains the rollout trees that matched the filtering, sorting and pagination criteria.
class FeatureManagement::FeatureFlags::Management::V3::ListRolloutTreesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::ListRolloutTreesResponse) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListRolloutTreesResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::ListRolloutTreesResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListRolloutTreesResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      rollouttrees: T.nilable(T::Array[T.nilable(FeatureManagement::FeatureFlags::Management::V3::RolloutTree)]),
      page: T.nilable(Integer),
      page_size: T.nilable(Integer),
      total_pages: T.nilable(Integer)
    ).void
  end
  def initialize(
    rollouttrees: [],
    page: 0,
    page_size: 0,
    total_pages: 0
  )
  end

  # The field contains a list of rollout trees (required)
  sig { returns(T::Array[T.nilable(FeatureManagement::FeatureFlags::Management::V3::RolloutTree)]) }
  def rollouttrees
  end

  # The field contains a list of rollout trees (required)
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def rollouttrees=(value)
  end

  # The field contains a list of rollout trees (required)
  sig { void }
  def clear_rollouttrees
  end

  # page is the page number (required)
  sig { returns(Integer) }
  def page
  end

  # page is the page number (required)
  sig { params(value: Integer).void }
  def page=(value)
  end

  # page is the page number (required)
  sig { void }
  def clear_page
  end

  # page_size is the number of entries returned in a page (required)
  sig { returns(Integer) }
  def page_size
  end

  # page_size is the number of entries returned in a page (required)
  sig { params(value: Integer).void }
  def page_size=(value)
  end

  # page_size is the number of entries returned in a page (required)
  sig { void }
  def clear_page_size
  end

  # total_pages is the total number of pages that encapsulate the list of entities (required)
  sig { returns(Integer) }
  def total_pages
  end

  # total_pages is the total number of pages that encapsulate the list of entities (required)
  sig { params(value: Integer).void }
  def total_pages=(value)
  end

  # total_pages is the total number of pages that encapsulate the list of entities (required)
  sig { void }
  def clear_total_pages
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

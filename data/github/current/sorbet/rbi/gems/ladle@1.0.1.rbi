# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ladle` gem.
# Please instead update this file by running `bin/tapioca gem ladle`.

# Ladle dishes out steaming helpings of lightweight directory access
# (LDAP) for use in testing with rspec, cucumber, or any other ruby
# test framework.
#
# This is the namespace for Ladle's implementation.
#
# source://ladle//lib/ladle.rb#7
module Ladle; end

# Implementations of platform-specific process handling behaviors for Ruby.
#
# source://ladle//lib/ladle/ruby_process.rb#8
class Ladle::RubyProcess
  # Create a new process for the given command and its args.
  #
  # @return [RubyProcess] a new instance of RubyProcess
  #
  # source://ladle//lib/ladle/ruby_process.rb#11
  def initialize(*command_and_args); end

  # @return [Fixnum] the PID for the process
  #
  # source://ladle//lib/ladle/ruby_process.rb#42
  def pid; end

  # Start the process and return pipes to its standard streams.
  #
  # @return [[IO, IO, IO]] stdin, stdout, and stderr for the running process.
  #
  # source://ladle//lib/ladle/ruby_process.rb#19
  def popen; end

  # Send signal 15 to the process.
  #
  # @return [void]
  #
  # source://ladle//lib/ladle/ruby_process.rb#36
  def stop_gracefully; end

  # Wait for the process to finish.
  #
  # @return [Fixnum] the return status of the process.
  #
  # source://ladle//lib/ladle/ruby_process.rb#28
  def wait; end
end

# Controller for Ladle's core feature, the embedded LDAP server.
#
# source://ladle//lib/ladle/server.rb#7
class Ladle::Server
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] the options for the server
  # @return [Server] a new instance of Server
  #
  # source://ladle//lib/ladle/server.rb#86
  def initialize(opts = T.unsafe(nil)); end

  # Any additional entries to add to the classpath for the server,
  # e.g., jars containing custom schemas.
  #
  # @return [Array<String>]
  #
  # source://ladle//lib/ladle/server.rb#53
  def additional_classpath; end

  # Whether anonymous users will be allowed access to the server
  # once it is running.
  #
  # @return [Boolean]
  #
  # source://ladle//lib/ladle/server.rb#224
  def allow_anonymous?; end

  # Any custom schemas to use with the server.
  #
  # @return [Array<String>]
  #
  # source://ladle//lib/ladle/server.rb#47
  def custom_schemas; end

  # The domain for the served data.
  #
  # @return [String]
  #
  # source://ladle//lib/ladle/server.rb#18
  def domain; end

  # The java executable to use to run the embedded server.
  #
  # @return [String]
  #
  # source://ladle//lib/ladle/server.rb#42
  def java_bin; end

  # The filename of the LDIF data loaded into this server before it
  # started.
  #
  # @return [String]
  #
  # source://ladle//lib/ladle/server.rb#24
  def ldif; end

  # Visible for collaborators.
  #
  # @private
  #
  # source://ladle//lib/ladle/server.rb#188
  def log(msg); end

  # Visible for collaborators.
  #
  # @private
  #
  # source://ladle//lib/ladle/server.rb#181
  def log_error(msg); end

  # The port from which this server will be available.
  #
  # @return [Fixnum]
  #
  # source://ladle//lib/ladle/server.rb#13
  def port; end

  # If the controller will print anything about what it is doing to
  # stderr.  If this is true, all non-error output will be
  # supressed.  This value trumps {#verbose?}.
  #
  # @return [Boolean]
  #
  # source://ladle//lib/ladle/server.rb#205
  def quiet?; end

  # Starts up the server in a separate process.  This method will
  # not return until the server is listening on the specified port.
  # The same {Server} instance can be started and stopped multiple
  # times, but the runs will be independent.
  #
  # @return [Server] this instance
  #
  # source://ladle//lib/ladle/server.rb#125
  def start; end

  # Stops the server that was started with {#start}.
  #
  # source://ladle//lib/ladle/server.rb#165
  def stop; end

  # The time to wait for the server to start up before giving up
  # (seconds).
  #
  # @return [Fixnum]
  #
  # source://ladle//lib/ladle/server.rb#30
  def timeout; end

  # The base directory into which the server should write its
  # temporary files.  Ladle will create a directory under this path
  # on startup and remove it on shutdown.
  #
  # @return [String]
  #
  # source://ladle//lib/ladle/server.rb#37
  def tmpdir; end

  # Visible for collaborators.
  #
  # @private
  #
  # source://ladle//lib/ladle/server.rb#195
  def trace(msg); end

  # Whether the controller will print detailed information about
  # what it is doing to stderr.  This includes information from the
  # embedded ApacheDS instance.
  #
  # @return [Boolean]
  #
  # source://ladle//lib/ladle/server.rb#215
  def verbose?; end

  private

  # source://ladle//lib/ladle/server.rb#261
  def classpath; end

  # source://ladle//lib/ladle/server.rb#230
  def create_process(*cmd); end

  # source://ladle//lib/ladle/server.rb#239
  def process; end

  # source://ladle//lib/ladle/server.rb#243
  def server_cmd; end
end

# Encapsulates communication with the child ApacheDS process.
#
# source://ladle//lib/ladle/server.rb#274
class Ladle::Server::ApacheDSController
  # @return [ApacheDSController] a new instance of ApacheDSController
  #
  # source://ladle//lib/ladle/server.rb#275
  def initialize(ds_in, ds_out, server); end

  # @return [Boolean]
  #
  # source://ladle//lib/ladle/server.rb#306
  def error?; end

  # source://ladle//lib/ladle/server.rb#281
  def start; end

  # @return [Boolean]
  #
  # source://ladle//lib/ladle/server.rb#302
  def started?; end

  # source://ladle//lib/ladle/server.rb#310
  def stop; end

  # source://ladle//lib/ladle/server.rb#287
  def watch; end

  private

  # source://ladle//lib/ladle/server.rb#324
  def report_error(msg); end
end

# source://ladle//lib/ladle/server.rb#8
Ladle::Server::ERROR_LEVELS = T.let(T.unsafe(nil), Array)

# source://ladle//lib/ladle/server.rb#331
class Ladle::Server::LogStreamWatcher
  # @return [LogStreamWatcher] a new instance of LogStreamWatcher
  #
  # source://ladle//lib/ladle/server.rb#332
  def initialize(ds_err, server); end

  # source://ladle//lib/ladle/server.rb#337
  def start; end

  # source://ladle//lib/ladle/server.rb#343
  def watch; end

  private

  # Indicates whether the "error" or "warning" emitted from
  # ApacheDS is actually an error or warning.
  #
  # @return [Boolean]
  #
  # source://ladle//lib/ladle/server.rb#371
  def bogus?(line); end

  # @return [Boolean]
  #
  # source://ladle//lib/ladle/server.rb#359
  def is_error?(line); end
end

# The current version number for Ladle.
#
# source://ladle//lib/ladle/version.rb#4
Ladle::VERSION = T.let(T.unsafe(nil), String)

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Octoshift::Imports::V1::GeneralSettings`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Octoshift::Imports::V1::GeneralSettings`.

class MonolithTwirp::Octoshift::Imports::V1::GeneralSettings
  sig do
    params(
      has_allow_forking: T.nilable(T::Boolean),
      has_auto_merge: T.nilable(T::Boolean),
      has_delete_branch_heads: T.nilable(T::Boolean),
      has_discussions: T.nilable(T::Boolean),
      has_git_lfs_in_archives: T.nilable(T::Boolean),
      has_merge_commit: T.nilable(T::Boolean),
      has_projects: T.nilable(T::Boolean),
      has_rebase_merge: T.nilable(T::Boolean),
      has_sponsorships: T.nilable(T::Boolean),
      has_squash_merge: T.nilable(T::Boolean),
      has_update_branch: T.nilable(T::Boolean),
      is_template: T.nilable(T::Boolean)
    ).void
  end
  def initialize(has_allow_forking: nil, has_auto_merge: nil, has_delete_branch_heads: nil, has_discussions: nil, has_git_lfs_in_archives: nil, has_merge_commit: nil, has_projects: nil, has_rebase_merge: nil, has_sponsorships: nil, has_squash_merge: nil, has_update_branch: nil, is_template: nil); end

  sig { void }
  def clear_has_allow_forking; end

  sig { void }
  def clear_has_auto_merge; end

  sig { void }
  def clear_has_delete_branch_heads; end

  sig { void }
  def clear_has_discussions; end

  sig { void }
  def clear_has_git_lfs_in_archives; end

  sig { void }
  def clear_has_merge_commit; end

  sig { void }
  def clear_has_projects; end

  sig { void }
  def clear_has_rebase_merge; end

  sig { void }
  def clear_has_sponsorships; end

  sig { void }
  def clear_has_squash_merge; end

  sig { void }
  def clear_has_update_branch; end

  sig { void }
  def clear_is_template; end

  sig { returns(T::Boolean) }
  def has_allow_forking; end

  sig { params(value: T::Boolean).void }
  def has_allow_forking=(value); end

  sig { returns(T::Boolean) }
  def has_auto_merge; end

  sig { params(value: T::Boolean).void }
  def has_auto_merge=(value); end

  sig { returns(T::Boolean) }
  def has_delete_branch_heads; end

  sig { params(value: T::Boolean).void }
  def has_delete_branch_heads=(value); end

  sig { returns(T::Boolean) }
  def has_discussions; end

  sig { params(value: T::Boolean).void }
  def has_discussions=(value); end

  sig { returns(T::Boolean) }
  def has_git_lfs_in_archives; end

  sig { params(value: T::Boolean).void }
  def has_git_lfs_in_archives=(value); end

  sig { returns(T::Boolean) }
  def has_merge_commit; end

  sig { params(value: T::Boolean).void }
  def has_merge_commit=(value); end

  sig { returns(T::Boolean) }
  def has_projects; end

  sig { params(value: T::Boolean).void }
  def has_projects=(value); end

  sig { returns(T::Boolean) }
  def has_rebase_merge; end

  sig { params(value: T::Boolean).void }
  def has_rebase_merge=(value); end

  sig { returns(T::Boolean) }
  def has_sponsorships; end

  sig { params(value: T::Boolean).void }
  def has_sponsorships=(value); end

  sig { returns(T::Boolean) }
  def has_squash_merge; end

  sig { params(value: T::Boolean).void }
  def has_squash_merge=(value); end

  sig { returns(T::Boolean) }
  def has_update_branch; end

  sig { params(value: T::Boolean).void }
  def has_update_branch=(value); end

  sig { returns(T::Boolean) }
  def is_template; end

  sig { params(value: T::Boolean).void }
  def is_template=(value); end
end

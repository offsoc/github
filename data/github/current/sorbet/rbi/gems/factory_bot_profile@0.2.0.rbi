# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `factory_bot_profile` gem.
# Please instead update this file by running `bin/tapioca gem factory_bot_profile`.

# source://factory_bot_profile//lib/factory_bot_profile/version.rb#3
module FactoryBotProfile
  class << self
    # source://factory_bot_profile//lib/factory_bot_profile.rb#29
    def merge_and_report(all_stats, reporter: T.unsafe(nil), **options); end

    # source://factory_bot_profile//lib/factory_bot_profile.rb#25
    def report(stats, reporter: T.unsafe(nil), **options); end

    # source://factory_bot_profile//lib/factory_bot_profile.rb#12
    def reporting; end

    # source://factory_bot_profile//lib/factory_bot_profile.rb#21
    def subscribe(stats = T.unsafe(nil)); end
  end
end

# source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#4
class FactoryBotProfile::AggregateStats
  # @return [AggregateStats] a new instance of AggregateStats
  #
  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#5
  def initialize; end

  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#9
  def collect(frame); end

  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#50
  def each_factory(*_arg0, **_arg1, &_arg2); end

  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#29
  def highest_average_time(n = T.unsafe(nil)); end

  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#17
  def highest_count(n = T.unsafe(nil)); end

  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#25
  def highest_self_time(n = T.unsafe(nil)); end

  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#21
  def highest_total_time(n = T.unsafe(nil)); end

  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#33
  def marshal_dump; end

  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#39
  def marshal_load(by_factory); end

  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#43
  def merge!(other); end

  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#13
  def total_time; end

  private

  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#56
  def stats_hash; end

  # source://factory_bot_profile//lib/factory_bot_profile/aggregate_stats.rb#60
  def take_factory_values_by(stat, n); end
end

# source://factory_bot_profile//lib/factory_bot_profile/stat.rb#23
class FactoryBotProfile::ChildStat < ::FactoryBotProfile::Stat
  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#24
  def increment(time); end
end

# source://factory_bot_profile//lib/factory_bot_profile/stat.rb#30
class FactoryBotProfile::FactoryStat < ::FactoryBotProfile::Stat
  # @return [FactoryStat] a new instance of FactoryStat
  #
  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#33
  def initialize(name); end

  # Returns the value of attribute child_stats.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#31
  def child_stats; end

  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#59
  def child_stats_by_average_time; end

  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#55
  def child_stats_by_total_time; end

  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#38
  def increment(frame); end

  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#71
  def marshal_dump; end

  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#75
  def marshal_load(data); end

  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#63
  def merge!(other); end

  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#51
  def total_child_time; end

  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#47
  def total_self_time; end

  private

  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#82
  def child_stats_hash; end
end

# source://factory_bot_profile//lib/factory_bot_profile/frame.rb#2
class FactoryBotProfile::Frame
  # @return [Frame] a new instance of Frame
  #
  # source://factory_bot_profile//lib/factory_bot_profile/frame.rb#5
  def initialize(name); end

  # Returns the value of attribute child_time.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/frame.rb#3
  def child_time; end

  # Sets the attribute child_time
  #
  # @param value the value to set the attribute child_time to.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/frame.rb#3
  def child_time=(_arg0); end

  # source://factory_bot_profile//lib/factory_bot_profile/frame.rb#18
  def duration; end

  # source://factory_bot_profile//lib/factory_bot_profile/frame.rb#23
  def finish!; end

  # Returns the value of attribute name.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/frame.rb#3
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/frame.rb#3
  def name=(_arg0); end

  # source://factory_bot_profile//lib/factory_bot_profile/frame.rb#11
  def observe_child(frame); end

  # source://factory_bot_profile//lib/factory_bot_profile/frame.rb#27
  def self_time; end

  # Returns the value of attribute start.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/frame.rb#3
  def start; end

  # Sets the attribute start
  #
  # @param value the value to set the attribute start to.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/frame.rb#3
  def start=(_arg0); end

  # source://factory_bot_profile//lib/factory_bot_profile/frame.rb#31
  def total_child_time; end
end

# source://factory_bot_profile//lib/factory_bot_profile/report/simple_report.rb#2
module FactoryBotProfile::Report; end

# source://factory_bot_profile//lib/factory_bot_profile/report/simple_report.rb#3
class FactoryBotProfile::Report::SimpleReport
  # @return [SimpleReport] a new instance of SimpleReport
  #
  # source://factory_bot_profile//lib/factory_bot_profile/report/simple_report.rb#4
  def initialize(stats, io: T.unsafe(nil), count: T.unsafe(nil)); end

  # source://factory_bot_profile//lib/factory_bot_profile/report/simple_report.rb#10
  def deliver; end

  private

  # Returns the value of attribute count.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/report/simple_report.rb#42
  def count; end

  # Returns the value of attribute io.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/report/simple_report.rb#42
  def io; end

  # Returns the value of attribute stats.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/report/simple_report.rb#42
  def stats; end
end

# source://factory_bot_profile//lib/factory_bot_profile/stack.rb#4
class FactoryBotProfile::Stack
  # @return [Stack] a new instance of Stack
  #
  # source://factory_bot_profile//lib/factory_bot_profile/stack.rb#5
  def initialize; end

  # source://factory_bot_profile//lib/factory_bot_profile/stack.rb#9
  def <<(name); end

  # source://factory_bot_profile//lib/factory_bot_profile/stack.rb#13
  def pop; end
end

# source://factory_bot_profile//lib/factory_bot_profile/stat.rb#2
class FactoryBotProfile::Stat
  # @return [Stat] a new instance of Stat
  #
  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#5
  def initialize(name); end

  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#11
  def average_time; end

  # Returns the value of attribute count.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#3
  def count; end

  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#15
  def merge!(other); end

  # Returns the value of attribute name.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#3
  def name; end

  # Returns the value of attribute total_time.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/stat.rb#3
  def total_time; end
end

# source://factory_bot_profile//lib/factory_bot_profile/subscriber.rb#4
class FactoryBotProfile::Subscriber
  # @return [Subscriber] a new instance of Subscriber
  #
  # source://factory_bot_profile//lib/factory_bot_profile/subscriber.rb#5
  def initialize(stats); end

  # source://factory_bot_profile//lib/factory_bot_profile/subscriber.rb#14
  def finish(*_arg0); end

  # source://factory_bot_profile//lib/factory_bot_profile/subscriber.rb#10
  def start(_, _, payload); end
end

# source://factory_bot_profile//lib/factory_bot_profile/subscription.rb#2
class FactoryBotProfile::Subscription
  # @return [Subscription] a new instance of Subscription
  #
  # source://factory_bot_profile//lib/factory_bot_profile/subscription.rb#5
  def initialize(stats); end

  # Returns the value of attribute stats.
  #
  # source://factory_bot_profile//lib/factory_bot_profile/subscription.rb#3
  def stats; end

  # source://factory_bot_profile//lib/factory_bot_profile/subscription.rb#9
  def subscribe; end

  # source://factory_bot_profile//lib/factory_bot_profile/subscription.rb#17
  def unsubscribe; end
end

# source://factory_bot_profile//lib/factory_bot_profile/version.rb#4
FactoryBotProfile::VERSION = T.let(T.unsafe(nil), String)

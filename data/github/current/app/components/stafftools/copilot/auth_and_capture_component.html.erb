
<%= render(Primer::Beta::BorderBox.new(padding: :condensed)) do |component| %>
  <% component.with_header do |h| %>
    <% h.with_title(tag: :h2) do %>
      Authorization and Capture
    <% end %>
  <% end %>

  <% if @entity.disabled? %>
    <% component.with_row do %>
      <%= render Stafftools::Copilot::DetailComponent.new(
        "Billing locked",
        disabled_reason,
        nil,
        label_scheme: :danger
      ) %>
    <% end %>
  <% end %>

  <% if @entity.can_be_authorized?(check_overage: false) && !@entity.hammy? %>
    <% if billing_unlockable_reason && @entity.enabled? %>
      <% component.with_row do %>
        <%= render Stafftools::Copilot::DetailComponent.new(
          "Billing cannot be locked even if capture fails",
          billing_unlockable_reason,
          nil,
          label_scheme: :warning
        ) %>
      <% end %>
    <% end %>
    <% component.with_row do %>
      <% if existing_authorization %>
        <%= render Stafftools::Copilot::DetailComponent.new(
          "Authorization created on #{existing_authorization.created_at.strftime("%b %-d, %Y")}",
          last_authorization_declined? ? "Processor declined" : "Active",
          nil,
          label_scheme: last_authorization_declined? ? :danger : :success
        ) %>
        <br>
      <% end %>
      <%= form_tag stafftools_user_copilot_auth_and_capture_path(@entity), method: :put do %>
        <%= render(Primer::Beta::Button.new(scheme: :danger, type: :submit)) do |c| %>
          Trigger Authorization Check on Credit Card
        <% end %>
      <% end %>
    <% end %>
  <% else %>
    <% component.with_row do %>
      <%= render Stafftools::Copilot::DetailComponent.new(
        "Not eligible for authorization and capture",
        ineligibility_reason,
        nil,
        label_scheme: :warning
      ) %>
    <% end %>
  <% end %>
<% end %>
<br>

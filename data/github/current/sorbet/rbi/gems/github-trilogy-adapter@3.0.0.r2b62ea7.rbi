# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `github-trilogy-adapter` gem.
# Please instead update this file by running `bin/tapioca gem github-trilogy-adapter`.

# source://github-trilogy-adapter//lib/github-trilogy-adapter.rb#17
module ActiveRecord
  class << self
    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#388
    def action_on_strict_loading_violation; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#388
    def action_on_strict_loading_violation=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#568
    def after_all_transactions_commit(&block); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#588
    def all_open_transactions; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#458
    def allow_deprecated_singular_associations_name; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#465
    def allow_deprecated_singular_associations_name=(value); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#381
    def application_record_class; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#381
    def application_record_class=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#287
    def async_query_executor; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#287
    def async_query_executor=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#352
    def before_committed_on_all_records; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#352
    def before_committed_on_all_records=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#349
    def belongs_to_required_validates_foreign_key; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#349
    def belongs_to_required_validates_foreign_key=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#358
    def commit_transaction_on_non_local_return; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#365
    def commit_transaction_on_non_local_return=(value); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#229
    def db_warnings_action; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#231
    def db_warnings_action=(action); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#258
    def db_warnings_ignore; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#258
    def db_warnings_ignore=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#210
    def default_timezone; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#214
    def default_timezone=(default_timezone); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/deprecator.rb#4
    def deprecator; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#181
    def disable_prepared_statements; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#181
    def disable_prepared_statements=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#551
    def disconnect_all!; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#436
    def dump_schema_after_migration; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#436
    def dump_schema_after_migration=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#446
    def dump_schemas; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#446
    def dump_schemas=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#540
    def eager_load!; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#407
    def error_on_ignored_order; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#407
    def error_on_ignored_order=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/gem_version.rb#5
    def gem_version; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#501
    def generate_secure_token_on; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#501
    def generate_secure_token_on=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#310
    def global_executor_concurrency; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#302
    def global_executor_concurrency=(global_executor_concurrency); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#290
    def global_thread_pool_async_query_executor; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#325
    def index_nested_attribute_errors; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#325
    def index_nested_attribute_errors=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#188
    def lazily_load_schema_cache; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#188
    def lazily_load_schema_cache=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#267
    def legacy_connection_handling=(_); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#343
    def maintain_test_schema; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#343
    def maintain_test_schema=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#504
    def marshalling_format_version; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#508
    def marshalling_format_version=(value); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#427
    def migration_strategy; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#427
    def migration_strategy=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#315
    def permanent_connection_checkout; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#318
    def permanent_connection_checkout=(value); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#531
    def protocol_adapters; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#531
    def protocol_adapters=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#472
    def query_transformers; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#472
    def query_transformers=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#340
    def queues; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#340
    def queues=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#487
    def raise_int_wider_than_64bit; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#487
    def raise_int_wider_than_64bit=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#346
    def raise_on_assign_to_attr_readonly; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#346
    def raise_on_assign_to_attr_readonly=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#264
    def reading_role; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#264
    def reading_role=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#355
    def run_after_transaction_callbacks_in_order_defined; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#355
    def run_after_transaction_callbacks_in_order_defined=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#204
    def schema_cache_ignored_table?(table_name); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#196
    def schema_cache_ignored_tables; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#196
    def schema_cache_ignored_tables=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#399
    def schema_format; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#399
    def schema_format=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#413
    def timestamped_migrations; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#413
    def timestamped_migrations=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#479
    def use_yaml_unsafe_load; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#479
    def use_yaml_unsafe_load=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#421
    def validate_migration_timestamps; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#421
    def validate_migration_timestamps=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#333
    def verbose_query_logs; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#333
    def verbose_query_logs=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#455
    def verify_foreign_keys_for_fixtures; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#455
    def verify_foreign_keys_for_fixtures=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/version.rb#7
    def version; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#378
    def warn_on_records_fetched_greater_than; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#378
    def warn_on_records_fetched_greater_than=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#261
    def writing_role; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#261
    def writing_role=(_arg0); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#494
    def yaml_column_permitted_classes; end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record.rb#494
    def yaml_column_permitted_classes=(_arg0); end
  end
end

# source://github-trilogy-adapter//lib/github-trilogy-adapter.rb#18
module ActiveRecord::ConnectionAdapters
  class << self
    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters.rb#22
    def register(name, class_name, path = T.unsafe(nil)); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters.rb#26
    def resolve(adapter_name); end
  end
end

# source://github-trilogy-adapter//lib/github-trilogy-adapter.rb#19
class ActiveRecord::ConnectionAdapters::TrilogyAdapter < ::ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter
  include ::GitHubTrilogyAdapter::SchemaVersion
  include ::GitHubTrilogyAdapter::SupportOverrides
  include ::GitHubTrilogyAdapter::NativeDatabaseTypes
  include ::GitHubTrilogyAdapter::Quoting
  include ::GitHubTrilogyAdapter::Driver
  include ::GitHubTrilogyAdapter::DeadlockRetries
  include ::GitHubTrilogyAdapter::QueryRetries
  include ::GitHubTrilogyAdapter::QueryData
  include ::GitHubTrilogyAdapter::ConnectionInstrumentation
  extend ::GitHubTrilogyAdapter::Driver::ClassMethods

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/query_retries.rb#6
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#123
  def active?; end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#119
  def connected?; end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#139
  def discard!; end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#131
  def disconnect!; end

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/query_data.rb#17
  def last_gtid; end

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/query_data.rb#17
  def last_insert_id; end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/abstract_adapter.rb#657
  def reset!(restore_transactions: T.unsafe(nil)); end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#111
  def savepoint_errors_invalidate_transactions?; end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#99
  def supports_comments?; end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#103
  def supports_comments_in_create?; end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#95
  def supports_json?; end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#115
  def supports_lazy_transactions?; end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#107
  def supports_savepoints?; end

  private

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/abstract_adapter.rb#1046
  def _retryable_connection_error?(exception); end

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/connection_instrumentation.rb#44
  def connect; end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#195
  def default_prepared_statements; end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#152
  def error_number(exception); end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#168
  def full_version; end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#172
  def get_full_version; end

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/query_data.rb#18
  def last_gtid=(_arg0); end

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/query_data.rb#18
  def last_insert_id=(_arg0); end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#162
  def reconnect; end

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/connection_instrumentation.rb#23
  def retryable_connection_error?(exception); end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#148
  def text_type?(type); end

  # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#178
  def translate_exception(exception, message:, sql:, binds:); end

  class << self
    # source://github-trilogy-adapter//lib/github_trilogy_adapter/driver.rb#18
    def new_client(config); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#37
    def parse_ssl_mode(mode); end

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#46
    def translate_connect_error(config, error); end

    private

    # source://activerecord/8.0.0.alpha.d7f9347368/lib/active_record/connection_adapters/trilogy_adapter.rb#62
    def initialize_type_map(m); end
  end
end

# source://github-trilogy-adapter//lib/github_trilogy_adapter/version.rb#3
module GitHubTrilogyAdapter; end

# source://github-trilogy-adapter//lib/github_trilogy_adapter/connection_instrumentation.rb#4
module GitHubTrilogyAdapter::ConnectionInstrumentation
  extend ::ActiveSupport::Concern

  # Patches methods from  activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
  # to instrument connection retries.
  #
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/connection_instrumentation.rb#9
  def reconnect!(*_arg0, **_arg1, &_arg2); end

  private

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/connection_instrumentation.rb#38
  def configure_connection; end

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/connection_instrumentation.rb#44
  def connect; end
end

# source://github-trilogy-adapter//lib/github_trilogy_adapter/deadlock_retries.rb#4
module GitHubTrilogyAdapter::DeadlockRetries
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/deadlock_retries.rb#5
  def initialize(*_arg0, **_arg1, &_arg2); end

  # Patch #transaction to retry the transaction if it errored because of a
  # deadlock. We may want to remove this patch and let the application
  # decide when to retry, but as of Sept. 2023 we are relying on it for a
  # small number of transactions (see Splunk
  # `index="prod-exceptions" event="deadlock_retry" transaction_open=true`)
  # See https://github.com/github/ruby-architecture/issues/445 for additional
  # context.
  #
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/deadlock_retries.rb#17
  def transaction(**options); end

  private

  # @return [Boolean]
  #
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/deadlock_retries.rb#41
  def deadlocked?(exception); end

  # @return [Boolean]
  #
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/deadlock_retries.rb#37
  def in_nested_transaction?; end

  # Patch #retryable_query_error? to instrument retryable deadlocks
  # https://github.com/rails/rails/blob/af95a7d89f3cf1c27042f98be0eb8c59794386ac/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L1072-L1076
  #
  # @return [Boolean]
  #
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/deadlock_retries.rb#47
  def retryable_query_error?(exception); end
end

# source://github-trilogy-adapter//lib/github_trilogy_adapter/driver.rb#4
module GitHubTrilogyAdapter::Driver
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::GitHubTrilogyAdapter::Driver::ClassMethods
end

# source://github-trilogy-adapter//lib/github_trilogy_adapter/driver.rb#0
module GitHubTrilogyAdapter::Driver::ClassMethods
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/driver.rb#12
  def database_driver; end

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/driver.rb#8
  def database_driver=(database_driver = T.unsafe(nil)); end

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/driver.rb#18
  def new_client(config); end
end

# source://github-trilogy-adapter//lib/github_trilogy_adapter/native_database_types.rb#4
module GitHubTrilogyAdapter::NativeDatabaseTypes
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/native_database_types.rb#14
  def native_database_types; end
end

# Our types drifted away from the upstream types over time. We should
# probably change these to match upstream, but we may need to be careful
# to avoid changing the behavior of existing migrations.
#
# source://github-trilogy-adapter//lib/github_trilogy_adapter/native_database_types.rb#8
GitHubTrilogyAdapter::NativeDatabaseTypes::NATIVE_DATABASE_TYPES = T.let(T.unsafe(nil), Hash)

# This module contains custom payload details for cached and uncached
# "sql.active_record" notifications.
#
# There are also a few other bits tangled up in here that didn't quite
# make sense to pull out into their own modules. I think they make good enough
# sense here, since they all relate to query result data.
#   * GTID config and reader
#   * last_insert_id reader
#   * custom query_flags
#
# source://github-trilogy-adapter//lib/github_trilogy_adapter/query_data.rb#13
module GitHubTrilogyAdapter::QueryData
  extend ::ActiveSupport::Concern

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/query_data.rb#31
  def cache_notification_info(sql, name, binds); end

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/query_data.rb#27
  def connection_url; end

  # github/github-kv is currently calling this method passing `nil` instead of
  # a result. If we fix that code we should be able to remove this patch.
  #
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/query_data.rb#23
  def last_inserted_id(result); end

  private

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/query_data.rb#37
  def configure_connection; end

  # source://github-trilogy-adapter//lib/github_trilogy_adapter/query_data.rb#56
  def perform_query(*_arg0, **_arg1, &_arg2); end
end

# source://github-trilogy-adapter//lib/github_trilogy_adapter/query_retries.rb#4
module GitHubTrilogyAdapter::QueryRetries
  # Allow retries in more places than upstream if query_retries is > 0
  #
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/query_retries.rb#6
  def initialize(*_arg0, **_arg1, &_arg2); end

  # Should match upstream except for `allow_retry`
  # https://github.com/rails/rails/blob/b4d8603bd3a9f814e0a233ee39b1cdcee2e60e29/activerecord/lib/active_record/connection_adapters/trilogy/database_statements.rb#L44
  #
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/query_retries.rb#13
  def raw_execute(*args, **kwargs); end
end

# source://github-trilogy-adapter//lib/github_trilogy_adapter/quoting.rb#4
module GitHubTrilogyAdapter::Quoting
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/quoting.rb#12
  def quoted_false; end

  # Upstream uses "TRUE" and "FALSE". There's no functional difference, but
  # switching over is probably not worth the potention confusion (it'd change
  # query digests, for example).
  #
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/quoting.rb#8
  def quoted_true; end
end

# source://github-trilogy-adapter//lib/github_trilogy_adapter/schema_version.rb#4
module GitHubTrilogyAdapter::SchemaVersion
  # github/github has a non-standard migrations setup (migrations for all
  # databases in the same directory, and only mysql1 has a schema_migrations
  # table). Without this override, we'd get a reasonable-looking schema version
  # for mysql1, and 0 for all the other dbs. With the override, the schema
  # version for every db will be based on the contents of structure.sql (which
  # includes all the schema_migrations values).
  #
  # We don't strictly need this. GitHub sets `check_schema_cache_dump_version`
  # to `false`, so at the time of writing we don't use `schema_version` for
  # anything.
  #
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/schema_version.rb#18
  def schema_version; end
end

# source://github-trilogy-adapter//lib/github_trilogy_adapter/schema_version.rb#6
GitHubTrilogyAdapter::SchemaVersion::DEFAULT_SQL_STRUCTURE_PATH = T.let(T.unsafe(nil), String)

# source://github-trilogy-adapter//lib/github_trilogy_adapter/schema_version.rb#5
GitHubTrilogyAdapter::SchemaVersion::SCHEMA_VERSION = T.let(T.unsafe(nil), String)

# source://github-trilogy-adapter//lib/github_trilogy_adapter/support_overrides.rb#4
module GitHubTrilogyAdapter::SupportOverrides
  # MySQL 8.0.19 replaces `VALUES(<expression>)` clauses with row and column alias names,
  # but Vitess doesn't support the new syntax yet (https://github.com/rails/rails/pull/51348)
  #
  # @return [Boolean]
  #
  # source://github-trilogy-adapter//lib/github_trilogy_adapter/support_overrides.rb#7
  def supports_insert_raw_alias_syntax?; end
end

# source://github-trilogy-adapter//lib/github_trilogy_adapter/version.rb#4
GitHubTrilogyAdapter::VERSION = T.let(T.unsafe(nil), String)

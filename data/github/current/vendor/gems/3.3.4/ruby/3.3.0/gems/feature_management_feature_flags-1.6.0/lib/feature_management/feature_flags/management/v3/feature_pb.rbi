# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: feature_management/feature_flags/management/v3/feature.proto
# typed: strict

# *
# FeatureFlag is the metadata for a feature flag including its name, description and nodes that make up the rollout tree with their current states. This data for a feature flag is shared
# across all of the stamps that are part of the rollout tree.
class FeatureManagement::FeatureFlags::Management::V3::FeatureFlag
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::FeatureFlag) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::FeatureFlag).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::FeatureFlag) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::FeatureFlag, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String),
      tracking_url: T.nilable(String),
      description: T.nilable(String),
      slack_channel: T.nilable(String),
      long_lived: T.nilable(T::Boolean),
      state: T.nilable(T.any(Symbol, String, Integer)),
      last_updated: T.nilable(Google::Protobuf::Timestamp),
      nodes: T.nilable(T::Array[T.nilable(FeatureManagement::FeatureFlags::Management::V3::Node)]),
      rollout_tree_id: T.nilable(String),
      etag: T.nilable(String),
      owning_service: T.nilable(String)
    ).void
  end
  def initialize(
    name: "",
    tracking_url: "",
    description: "",
    slack_channel: "",
    long_lived: false,
    state: :INVALID,
    last_updated: nil,
    nodes: [],
    rollout_tree_id: "",
    etag: "",
    owning_service: ""
  )
  end

  # name is the name of the feature (required)
  sig { returns(String) }
  def name
  end

  # name is the name of the feature (required)
  sig { params(value: String).void }
  def name=(value)
  end

  # name is the name of the feature (required)
  sig { void }
  def clear_name
  end

  # tracking url is the GitHub issue link attached to the feature (required)
  sig { returns(String) }
  def tracking_url
  end

  # tracking url is the GitHub issue link attached to the feature (required)
  sig { params(value: String).void }
  def tracking_url=(value)
  end

  # tracking url is the GitHub issue link attached to the feature (required)
  sig { void }
  def clear_tracking_url
  end

  # description describes the feature (optional)
  sig { returns(String) }
  def description
  end

  # description describes the feature (optional)
  sig { params(value: String).void }
  def description=(value)
  end

  # description describes the feature (optional)
  sig { void }
  def clear_description
  end

  # slack_channel is the slack channel name for people to ask questions in about the feature (optional)
  sig { returns(String) }
  def slack_channel
  end

  # slack_channel is the slack channel name for people to ask questions in about the feature (optional)
  sig { params(value: String).void }
  def slack_channel=(value)
  end

  # slack_channel is the slack channel name for people to ask questions in about the feature (optional)
  sig { void }
  def clear_slack_channel
  end

  # long_lived indicates whether or not the feature will be in use for more than 3 months (required)
  sig { returns(T::Boolean) }
  def long_lived
  end

  # long_lived indicates whether or not the feature will be in use for more than 3 months (required)
  sig { params(value: T::Boolean).void }
  def long_lived=(value)
  end

  # long_lived indicates whether or not the feature will be in use for more than 3 months (required)
  sig { void }
  def clear_long_lived
  end

  # flag_state is the enabled state of the feature. (required)
  sig { returns(T.any(Symbol, Integer)) }
  def state
  end

  # flag_state is the enabled state of the feature. (required)
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def state=(value)
  end

  # flag_state is the enabled state of the feature. (required)
  sig { void }
  def clear_state
  end

  # last_updated is the timestamp when the feature was last edited (required)
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def last_updated
  end

  # last_updated is the timestamp when the feature was last edited (required)
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def last_updated=(value)
  end

  # last_updated is the timestamp when the feature was last edited (required)
  sig { void }
  def clear_last_updated
  end

  # nodes contains the list of stamps (dotcom, staffship, etc) that are part of the rollout tree. Each contain the current enablement gate settings that are shared and a derived state (required)
  sig { returns(T::Array[T.nilable(FeatureManagement::FeatureFlags::Management::V3::Node)]) }
  def nodes
  end

  # nodes contains the list of stamps (dotcom, staffship, etc) that are part of the rollout tree. Each contain the current enablement gate settings that are shared and a derived state (required)
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def nodes=(value)
  end

  # nodes contains the list of stamps (dotcom, staffship, etc) that are part of the rollout tree. Each contain the current enablement gate settings that are shared and a derived state (required)
  sig { void }
  def clear_nodes
  end

  # id of the rollout_tree which specifies the inheritance model for this feature (optional)
  sig { returns(String) }
  def rollout_tree_id
  end

  # id of the rollout_tree which specifies the inheritance model for this feature (optional)
  sig { params(value: String).void }
  def rollout_tree_id=(value)
  end

  # id of the rollout_tree which specifies the inheritance model for this feature (optional)
  sig { void }
  def clear_rollout_tree_id
  end

  # etag of the feature. This is a UUID and is required for update operations to prevent concurrency errors (optional)
  sig { returns(String) }
  def etag
  end

  # etag of the feature. This is a UUID and is required for update operations to prevent concurrency errors (optional)
  sig { params(value: String).void }
  def etag=(value)
  end

  # etag of the feature. This is a UUID and is required for update operations to prevent concurrency errors (optional)
  sig { void }
  def clear_etag
  end

  # owning_service is the name of the service in Service Catalog for that feature (required)
  sig { returns(String) }
  def owning_service
  end

  # owning_service is the name of the service in Service Catalog for that feature (required)
  sig { params(value: String).void }
  def owning_service=(value)
  end

  # owning_service is the name of the service in Service Catalog for that feature (required)
  sig { void }
  def clear_owning_service
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# Node is one stamp listed in a rollout tree for a feature flag. It contains the parent child relationship, shared enablement gate settings, and the derived state of the feature flag for that stamp.
class FeatureManagement::FeatureFlags::Management::V3::Node
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::Node) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::Node).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::Node) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::Node, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String),
      state: T.nilable(T.any(Symbol, String, Integer)),
      parent: T.nilable(String),
      percentage_of_calls: T.nilable(FeatureManagement::FeatureFlags::Management::V3::PercentageOfCalls),
      percentage_of_actors: T.nilable(FeatureManagement::FeatureFlags::Management::V3::PercentageOfActors),
      custom_gates: T.nilable(FeatureManagement::FeatureFlags::Management::V3::CustomGates)
    ).void
  end
  def initialize(
    name: "",
    state: :INVALID,
    parent: "",
    percentage_of_calls: nil,
    percentage_of_actors: nil,
    custom_gates: nil
  )
  end

  # name is the name of the node. This node name needs to match the node names defined in the associated rollout tree. (required)
  sig { returns(String) }
  def name
  end

  # name is the name of the node. This node name needs to match the node names defined in the associated rollout tree. (required)
  sig { params(value: String).void }
  def name=(value)
  end

  # name is the name of the node. This node name needs to match the node names defined in the associated rollout tree. (required)
  sig { void }
  def clear_name
  end

  # flag_state is the derived enabled state of the node for the feature flag. (optional)
  sig { returns(T.any(Symbol, Integer)) }
  def state
  end

  # flag_state is the derived enabled state of the node for the feature flag. (optional)
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def state=(value)
  end

  # flag_state is the derived enabled state of the node for the feature flag. (optional)
  sig { void }
  def clear_state
  end

  # parent is the name of the parent node. This node name needs to match the node names defined in the associated rollout tree and another node in this feature definition. (optional)
  sig { returns(String) }
  def parent
  end

  # parent is the name of the parent node. This node name needs to match the node names defined in the associated rollout tree and another node in this feature definition. (optional)
  sig { params(value: String).void }
  def parent=(value)
  end

  # parent is the name of the parent node. This node name needs to match the node names defined in the associated rollout tree and another node in this feature definition. (optional)
  sig { void }
  def clear_parent
  end

  # percentage_of_calls indicates if the percentage of calls shared gate is defined. This will partially enable the feature flag for the specified percentage of calls on this stamp.
  sig { returns(T.nilable(FeatureManagement::FeatureFlags::Management::V3::PercentageOfCalls)) }
  def percentage_of_calls
  end

  # percentage_of_calls indicates if the percentage of calls shared gate is defined. This will partially enable the feature flag for the specified percentage of calls on this stamp.
  sig { params(value: T.nilable(FeatureManagement::FeatureFlags::Management::V3::PercentageOfCalls)).void }
  def percentage_of_calls=(value)
  end

  # percentage_of_calls indicates if the percentage of calls shared gate is defined. This will partially enable the feature flag for the specified percentage of calls on this stamp.
  sig { void }
  def clear_percentage_of_calls
  end

  # percentage_of_actors indicates if the percentage of actors shared gate is defined for the feature flag. This will partially enable the feature flag for the specified percentage of actors on this stamp.
  sig { returns(T.nilable(FeatureManagement::FeatureFlags::Management::V3::PercentageOfActors)) }
  def percentage_of_actors
  end

  # percentage_of_actors indicates if the percentage of actors shared gate is defined for the feature flag. This will partially enable the feature flag for the specified percentage of actors on this stamp.
  sig { params(value: T.nilable(FeatureManagement::FeatureFlags::Management::V3::PercentageOfActors)).void }
  def percentage_of_actors=(value)
  end

  # percentage_of_actors indicates if the percentage of actors shared gate is defined for the feature flag. This will partially enable the feature flag for the specified percentage of actors on this stamp.
  sig { void }
  def clear_percentage_of_actors
  end

  # custom_gates indicates if custom group gates are defined for the feature flag. This will partially enable the feature flag for the specified custom groups on this stamp.
  sig { returns(T.nilable(FeatureManagement::FeatureFlags::Management::V3::CustomGates)) }
  def custom_gates
  end

  # custom_gates indicates if custom group gates are defined for the feature flag. This will partially enable the feature flag for the specified custom groups on this stamp.
  sig { params(value: T.nilable(FeatureManagement::FeatureFlags::Management::V3::CustomGates)).void }
  def custom_gates=(value)
  end

  # custom_gates indicates if custom group gates are defined for the feature flag. This will partially enable the feature flag for the specified custom groups on this stamp.
  sig { void }
  def clear_custom_gates
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# PercentageOfCalls is a feature flag gate type definition. If enabled, the feature flag will be enabled on the stamp for the specified percentage of calls between0 (inclusive) and 100 (non inclusive).
class FeatureManagement::FeatureFlags::Management::V3::PercentageOfCalls
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::PercentageOfCalls) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::PercentageOfCalls).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::PercentageOfCalls) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::PercentageOfCalls, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      enabled: T.nilable(T::Boolean),
      value: T.nilable(Float)
    ).void
  end
  def initialize(
    enabled: false,
    value: 0.0
  )
  end

  sig { returns(T::Boolean) }
  def enabled
  end

  sig { params(value: T::Boolean).void }
  def enabled=(value)
  end

  sig { void }
  def clear_enabled
  end

  sig { returns(Float) }
  def value
  end

  sig { params(value: Float).void }
  def value=(value)
  end

  sig { void }
  def clear_value
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# PercentageOfActors is a feature flag gate type definition. If enabled, the feature flag will be enabled on the stamp for the specified percentage of actors between 0 (inclusive) and 100 (non inclusive).
class FeatureManagement::FeatureFlags::Management::V3::PercentageOfActors
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::PercentageOfActors) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::PercentageOfActors).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::PercentageOfActors) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::PercentageOfActors, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      enabled: T.nilable(T::Boolean),
      value: T.nilable(Float)
    ).void
  end
  def initialize(
    enabled: false,
    value: 0.0
  )
  end

  sig { returns(T::Boolean) }
  def enabled
  end

  sig { params(value: T::Boolean).void }
  def enabled=(value)
  end

  sig { void }
  def clear_enabled
  end

  sig { returns(Float) }
  def value
  end

  sig { params(value: Float).void }
  def value=(value)
  end

  sig { void }
  def clear_value
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# CustomGates represents named groups of actors that can be used to enable a feature flag for a specific group of actors.
# Each of these gates are defined by the feature flag client executing business logic, usually a query against the database.
# Custom gates are never cached as their lookups are performed on every request.
class FeatureManagement::FeatureFlags::Management::V3::CustomGates
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::CustomGates) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::CustomGates).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::CustomGates) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::CustomGates, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      enabled: T.nilable(T::Boolean),
      values: T.nilable(T::Array[String])
    ).void
  end
  def initialize(
    enabled: false,
    values: []
  )
  end

  sig { returns(T::Boolean) }
  def enabled
  end

  sig { params(value: T::Boolean).void }
  def enabled=(value)
  end

  sig { void }
  def clear_enabled
  end

  sig { returns(T::Array[String]) }
  def values
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def values=(value)
  end

  sig { void }
  def clear_values
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

module FeatureManagement::FeatureFlags::Management::V3::FeatureFlagState
  self::INVALID = T.let(0, Integer)
  self::DISABLED = T.let(1, Integer)
  self::PARTIALLY_SHIPPED = T.let(2, Integer)
  self::SHIPPED = T.let(3, Integer)

  sig { params(value: Integer).returns(T.nilable(Symbol)) }
  def self.lookup(value)
  end

  sig { params(value: Symbol).returns(T.nilable(Integer)) }
  def self.resolve(value)
  end

  sig { returns(::Google::Protobuf::EnumDescriptor) }
  def self.descriptor
  end
end

syntax = "proto3";

package actions.core.v1;

option go_package = "core/v1";
option ruby_package = "MonolithTwirp::Actions::Core::V1";

import "core/v1/identity.proto";

service ChecksAPI {
  // CreateExecution will create a new workflow_run_execution for the passed in workflow run.
  rpc CreateExecution(CreateExecutionRequest) returns (CreateExecutionResponse);
  rpc UpdateWorkflowRun(UpdateWorkflowRunRequest) returns (UpdateWorkflowRunResponse);
  rpc UpdateWorkflowRunExecution(UpdateWorkflowRunExecutionRequest) returns (UpdateWorkflowRunExecutionResponse);
  rpc FindPreviousWorkflowRunToReuse(FindPreviousWorkflowRunToReuseRequest) returns (FindPreviousWorkflowRunToReuseResponse);
  rpc GetWorkflowRun(GetWorkflowRunRequest) returns (GetWorkflowRunResponse);
}

message CreateExecutionRequest {
  // repository_id, a global ID
  Identity repository_id = 1;
  // workflow_run_id
  int64 workflow_run_id = 2;
  // plan_id (aka uuid and execution_id and external_id)
  string plan_id = 3;
  // attempt number
  int64 attempt = 4;
  // actor_id, a global ID, who is initiating the rerun
  Identity actor_id = 5;
  // execution_graph, json string
  string execution_graph = 6;
  // referenced_workflows, json string with details on all referenced workflow files
  string referenced_workflows = 7;
  // run_name, the name of the workflow run, which can be set in the workflow with the run-name keyword
  string run_name = 8;
}

message CreateExecutionResponse {
}

message UpdateWorkflowRunRequest {
  // repository_id, a global ID
  Identity repository_id = 1;
  // workflow_run_id
  int64 workflow_run_id = 2;
  // run_name, the name of the workflow run, which can be set in the workflow with the run-name keyword
  string run_name = 3;
}

message UpdateWorkflowRunResponse {
}

message UpdateWorkflowRunExecutionRequest {
  // repository_id, a global ID
  Identity repository_id = 1;
  // workflow_run_id
  int64 workflow_run_id = 2;
  // run_stamp_url, the url to the actions-run-service stamp where the execution was queued
  string run_stamp_url = 3;
}

message UpdateWorkflowRunExecutionResponse {
}


message FindPreviousWorkflowRunToReuseRequest {
  // A global ID representing the repository. (required)
  Identity repository_id = 1;
  // The workflow file path of any previous workflow run that needs to match for possible reuse. (required)
  string workflow_path = 2;
  // The type of event that needs to match any previous run for possible reuse. (required)
  string event_type = 3;
  // The SHA1 of the commit that the event originates from to locate the tree_id. (required)
  string commit_sha = 4;
}

message FindPreviousWorkflowRunToReuseResponse {
  // The tree_id that was found for the event commit_sha 
  string tree_id = 1;
  // An existing check suite in the repository that was found that can be re-used. Empty if nothing to reuse was found
  CheckSuite check_suite_to_clone = 2;
}

message CheckSuite {
  // The global ID of the check suite
  Identity check_suite_global_id = 1;

  // The database ID of the check suite
  int64 check_suite_database_id = 2;
}

message GetWorkflowRunRequest {
  // workflow_run_id
  int64 workflow_run_id = 1;
}

// GetWorkflowRunResponse collects the data to rerun a required workflow 
// it can be extended to fetch other workflow run properties as well
message GetWorkflowRunResponse {
  // workflow file path
  string workflow_file_path = 1;

  // workflow source repository id
  int64 repository_id = 2;

  // The checkout sha of required workflow file
  string required_workflow_checkout_sha=3;
}

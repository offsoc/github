# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hook::Event::RepositoryDispatchEvent`.
# Please instead update this file by running `bin/tapioca dsl Hook::Event::RepositoryDispatchEvent`.

class Hook::Event::RepositoryDispatchEvent
  sig do
    params(
      action: T.untyped,
      actor_id: T.untyped,
      branch: T.untyped,
      repository_id: T.untyped,
      business_id: T.untyped,
      client_payload: T.untyped,
      delivered_hook_ids: T.untyped,
      event_guid: T.untyped,
      organization_id: T.untyped,
      primary_resource: T.untyped,
      primary_resource_data: T.untyped,
      triggered_at: T.untyped,
      user_action: T.untyped
    ).void
  end
  def initialize(action:, actor_id:, branch:, repository_id:, business_id: nil, client_payload: nil, delivered_hook_ids: nil, event_guid: nil, organization_id: nil, primary_resource: nil, primary_resource_data: nil, triggered_at: nil, user_action: nil); end

  sig { returns(T.untyped) }
  def action; end

  sig { params(value: T.untyped).void }
  def action=(value); end

  sig { returns(T.untyped) }
  def actor_id; end

  sig { params(value: T.untyped).void }
  def actor_id=(value); end

  sig { returns(T.untyped) }
  def branch; end

  sig { params(value: T.untyped).void }
  def branch=(value); end

  sig { returns(T.untyped) }
  def repository_id; end

  sig { params(value: T.untyped).void }
  def business_id=(value); end

  sig { params(value: T.untyped).void }
  def delivered_hook_ids=(value); end

  sig { params(value: T.untyped).void }
  def repository_id=(value); end

  sig { returns(T.untyped) }
  def business_id; end

  sig { returns(T.untyped) }
  def client_payload; end

  sig { params(value: T.untyped).void }
  def client_payload=(value); end

  sig { returns(T.untyped) }
  def delivered_hook_ids; end

  sig { returns(T.untyped) }
  def event_guid; end

  sig { params(value: T.untyped).void }
  def event_guid=(value); end

  sig { returns(T.untyped) }
  def organization_id; end

  sig { params(value: T.untyped).void }
  def organization_id=(value); end

  sig { returns(T.untyped) }
  def primary_resource; end

  sig { params(value: T.untyped).void }
  def primary_resource=(value); end

  sig { returns(T.untyped) }
  def primary_resource_data; end

  sig { params(value: T.untyped).void }
  def primary_resource_data=(value); end

  sig { returns(T.untyped) }
  def triggered_at; end

  sig { params(value: T.untyped).void }
  def triggered_at=(value); end

  sig { returns(T.untyped) }
  def user_action; end

  sig { params(value: T.untyped).void }
  def user_action=(value); end

  class << self
    sig do
      params(
        action: T.untyped,
        actor_id: T.untyped,
        branch: T.untyped,
        repository_id: T.untyped,
        business_id: T.untyped,
        client_payload: T.untyped,
        delivered_hook_ids: T.untyped,
        event_guid: T.untyped,
        organization_id: T.untyped,
        primary_resource: T.untyped,
        primary_resource_data: T.untyped,
        triggered_at: T.untyped,
        user_action: T.untyped
      ).returns(T::Boolean)
    end
    def queue(action:, actor_id:, branch:, repository_id:, business_id: nil, client_payload: nil, delivered_hook_ids: nil, event_guid: nil, organization_id: nil, primary_resource: nil, primary_resource_data: nil, triggered_at: nil, user_action: nil); end
  end
end

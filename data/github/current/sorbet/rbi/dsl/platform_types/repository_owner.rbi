# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PlatformTypes::RepositoryOwner`.
# Please instead update this file by running `bin/tapioca dsl PlatformTypes::RepositoryOwner`.

class PlatformTypes::RepositoryOwner < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(T.nilable(PlatformTypes::ActionsStatus)) }
  def actions_status; end

  sig { returns(T::Boolean) }
  def actions_status?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def avatar_url; end

  sig { returns(T::Boolean) }
  def avatar_url?; end

  sig { returns(T.nilable(Integer)) }
  def database_id; end

  sig { returns(T::Boolean) }
  def database_id?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T::Boolean) }
  def is_actions_eligible; end

  sig { returns(T::Boolean) }
  def is_actions_eligible?; end

  sig { returns(T::Boolean) }
  def is_beta_feature_enabled; end

  sig { returns(T::Boolean) }
  def is_beta_feature_enabled?; end

  sig { returns(T::Boolean) }
  def is_feature_enabled; end

  sig { returns(T::Boolean) }
  def is_feature_enabled?; end

  sig { returns(T::Boolean) }
  def is_spammy; end

  sig { returns(T::Boolean) }
  def is_spammy?; end

  sig { returns(T::Boolean) }
  def is_storage_allowed; end

  sig { returns(T::Boolean) }
  def is_storage_allowed?; end

  sig { returns(T::Boolean) }
  def is_usage_allowed; end

  sig { returns(T::Boolean) }
  def is_usage_allowed?; end

  sig { returns(String) }
  def login; end

  sig { returns(T::Boolean) }
  def login?; end

  sig { returns(PlatformTypes::RepositoryConnection) }
  def repositories; end

  sig { returns(T::Boolean) }
  def repositories?; end

  sig { returns(T::Array[PlatformTypes::RepositoriesUsingDependency]) }
  def repositories_using_dependencies; end

  sig { returns(T::Boolean) }
  def repositories_using_dependencies?; end

  sig { returns(T.nilable(PlatformTypes::Repository)) }
  def repository; end

  sig { returns(T::Boolean) }
  def repository?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def resource_path; end

  sig { returns(T::Boolean) }
  def resource_path?; end

  sig { returns(PlatformTypes::RetiredNamespaceConnection) }
  def retired_namespaces; end

  sig { returns(T::Boolean) }
  def retired_namespaces?; end

  sig { returns(PlatformTypes::RepositoryConnection) }
  def template_repositories; end

  sig { returns(T::Boolean) }
  def template_repositories?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def url; end

  sig { returns(T::Boolean) }
  def url?; end

  sig { returns(T::Boolean) }
  def viewer_can_administer; end

  sig { returns(T::Boolean) }
  def viewer_can_administer?; end
end

<%= render Primer::Box.new(mb: 3, block: true, border: true, border_radius: 2, test_selector: "ai-suggested-fix") do %>
  <%= render Primer::Box.new(
    pl: 2,
    pr: 3,
    py: 2,
    display: :flex,
    block: true,
    border: :bottom,
    bg: :subtle,
    style: "border-radius: 0.375rem 0.375rem 0 0;"
  ) do %>
    <%= render Primer::Beta::Octicon.new(:copilot, color: :muted, m: 1) %>
    <%= render Primer::Beta::Text.new(tag: :p, m: 0, ml: 1) do %>
      <strong>Copilot Autofix</strong>
      <%= render(Primer::Beta::Label.new(scheme: :secondary)) { "AI" } %>
      <span class="color-fg-muted">
        generated a fix
        <% if generated_at %>
          <%= time_ago_in_words(generated_at) %> ago
        <% end %>
      </span>
    <% end %>
  <% end %>

  <div class="comment-body markdown-body soft-wrap css-overflow-wrap-anywhere user-select-contain d-block" <%= test_selector("ai-suggested-fix-description") %>>
    <%= suggested_fix_description %>
  </div>
<% end %>

<div class="soft-wrap">
  <% suggested_fix_diff_entries.each do |diff_entry| %>
    <%= render Suggestions::SplitDiffComponent.new(
      diff_entry: diff_entry,
      file_highlighting: suggested_fix_file_highlighting.fetch(diff_entry.path, nil),
      alert_location: alert_location,
      path_link: path_link,
    ) do |c| %>
      <% c.with_annotation_on_alert_location do %>
        <%= render Suggestions::AlertAnnotationComponent.new(
          alert_title: alert_title,
          alert_description_html: alert_description_html,
          alert_code_paths_url: alert_code_paths_url,
          alert_rule_severity: alert_rule_severity,
          alert_help_html: alert_help_html
        ) %>
      <% end %>
    <% end %>
  <% end %>
</div>

<div class="d-flex pb-3" <%= test_selector("ai-suggested-fix-actions") %>>
  <%= form_tag create_pr_path, method: :post, class: "ml-auto" do %>
    <%= render Primer::Beta::Button.new(scheme: :primary, type: :submit, size: :medium) do %>
      Create PR with fix
    <% end %>
  <% end %>
</div>

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Copilot::V2::CopilotForBusinessSeatAssignmentConversion`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Copilot::V2::CopilotForBusinessSeatAssignmentConversion`.

class Hydro::Schemas::Github::Copilot::V2::CopilotForBusinessSeatAssignmentConversion
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      assignment: T.nilable(Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessSeatAssignment),
      existing_seats_count: T.nilable(Integer),
      matched_existing_seat_count: T.nilable(Integer),
      owner_details: T.nilable(Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessOwnerDetails),
      seat_to_insert_count: T.nilable(Integer)
    ).void
  end
  def initialize(actor: nil, assignment: nil, existing_seats_count: nil, matched_existing_seat_count: nil, owner_details: nil, seat_to_insert_count: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessSeatAssignment)) }
  def assignment; end

  sig do
    params(
      value: T.nilable(Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessSeatAssignment)
    ).void
  end
  def assignment=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_assignment; end

  sig { void }
  def clear_existing_seats_count; end

  sig { void }
  def clear_matched_existing_seat_count; end

  sig { void }
  def clear_owner_details; end

  sig { void }
  def clear_seat_to_insert_count; end

  sig { returns(Integer) }
  def existing_seats_count; end

  sig { params(value: Integer).void }
  def existing_seats_count=(value); end

  sig { returns(Integer) }
  def matched_existing_seat_count; end

  sig { params(value: Integer).void }
  def matched_existing_seat_count=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessOwnerDetails)) }
  def owner_details; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessOwnerDetails)).void }
  def owner_details=(value); end

  sig { returns(Integer) }
  def seat_to_insert_count; end

  sig { params(value: Integer).void }
  def seat_to_insert_count=(value); end
end

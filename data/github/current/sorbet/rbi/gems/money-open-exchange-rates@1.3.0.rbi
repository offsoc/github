# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `money-open-exchange-rates` gem.
# Please instead update this file by running `bin/tapioca gem money-open-exchange-rates`.

# Money gem class
#
# source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#11
class Money
  # source://money/6.16.0/lib/money/money.rb#340
  def initialize(obj, currency = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://money/6.16.0/lib/money/money.rb#594
  def allocate(parts); end

  # source://money/6.16.0/lib/money/money.rb#385
  def amount; end

  # source://money/6.16.0/lib/money/money.rb#560
  def as_ca_dollar; end

  # source://money/6.16.0/lib/money/money.rb#572
  def as_euro; end

  # source://money/6.16.0/lib/money/money.rb#548
  def as_us_dollar; end

  # source://money/6.16.0/lib/money/money.rb#88
  def bank; end

  # source://money/6.16.0/lib/money/money.rb#33
  def cents; end

  # source://money/6.16.0/lib/money/money.rb#88
  def currency; end

  # source://money/6.16.0/lib/money/money.rb#395
  def currency_as_string; end

  # source://money/6.16.0/lib/money/money.rb#408
  def currency_as_string=(val); end

  # source://money/6.16.0/lib/money/money.rb#643
  def decimal_mark; end

  # source://money/6.16.0/lib/money/money.rb#371
  def dollars; end

  # source://money/6.16.0/lib/money/money.rb#648
  def dup_with(options = T.unsafe(nil)); end

  # source://money/6.16.0/lib/money/money.rb#531
  def exchange_to(other_currency, &rounding_method); end

  # source://money/6.16.0/lib/money/money.rb#626
  def format(*rules); end

  # source://money/6.16.0/lib/money/money.rb#53
  def fractional; end

  # source://money/6.16.0/lib/money/money.rb#421
  def hash; end

  # source://money/6.16.0/lib/money/money.rb#438
  def inspect; end

  # source://money/6.16.0/lib/money/money.rb#615
  def round(rounding_mode = T.unsafe(nil), rounding_precision = T.unsafe(nil)); end

  # source://money/6.16.0/lib/money/money.rb#70
  def round_to_nearest_cash_value; end

  # source://money/6.16.0/lib/money/money.rb#594
  def split(parts); end

  # source://money/6.16.0/lib/money/money.rb#431
  def symbol; end

  # source://money/6.16.0/lib/money/money.rb#634
  def thousands_separator; end

  # source://money/6.16.0/lib/money/money.rb#461
  def to_d; end

  # source://money/6.16.0/lib/money/money.rb#484
  def to_f; end

  # source://money/6.16.0/lib/money/money.rb#471
  def to_i; end

  # source://money/6.16.0/lib/money/money.rb#506
  def to_money(given_currency = T.unsafe(nil)); end

  # source://money/6.16.0/lib/money/money.rb#448
  def to_s; end

  # source://money/6.16.0/lib/money/money.rb#494
  def with_currency(new_currency); end

  private

  # source://money/6.16.0/lib/money/money.rb#658
  def as_d(num); end

  # source://money/6.16.0/lib/money/money.rb#674
  def locale_backend; end

  # source://money/6.16.0/lib/money/money.rb#666
  def return_value(value); end

  class << self
    # source://money/6.16.0/lib/money/money.rb#282
    def add_rate(from_currency, to_currency, rate); end

    # source://money/6.16.0/lib/money/money.rb#132
    def conversion_precision; end

    # source://money/6.16.0/lib/money/money.rb#132
    def conversion_precision=(_arg0); end

    # source://money/6.16.0/lib/money/money.rb#171
    def default_bank; end

    # source://money/6.16.0/lib/money/money.rb#134
    def default_bank=(_arg0); end

    # source://money/6.16.0/lib/money/money.rb#152
    def default_currency; end

    # source://money/6.16.0/lib/money/money.rb#166
    def default_currency=(currency); end

    # source://money/6.16.0/lib/money/money.rb#132
    def default_formatting_rules; end

    # source://money/6.16.0/lib/money/money.rb#132
    def default_formatting_rules=(_arg0); end

    # source://money/6.16.0/lib/money/money.rb#132
    def default_infinite_precision; end

    # source://money/6.16.0/lib/money/money.rb#132
    def default_infinite_precision=(_arg0); end

    # source://money/6.16.0/lib/money/money.rb#288
    def disallow_currency_conversion!; end

    # source://money/6.16.0/lib/money/money.rb#307
    def from_amount(amount, currency = T.unsafe(nil), options = T.unsafe(nil)); end

    def from_cents(*_arg0); end

    # source://money/6.16.0/lib/money/money.rb#136
    def infinite_precision; end

    # source://money/6.16.0/lib/money/money.rb#141
    def infinite_precision=(value); end

    # source://money/6.16.0/lib/money/money.rb#224
    def inherited(base); end

    # source://money/6.16.0/lib/money/money.rb#133
    def locale_backend; end

    # source://money/6.16.0/lib/money/money.rb#179
    def locale_backend=(value); end

    # source://money/6.16.0/lib/money/money.rb#235
    def rounding_mode(mode = T.unsafe(nil)); end

    # source://money/6.16.0/lib/money/money.rb#184
    def rounding_mode=(new_rounding_mode); end

    # source://money/6.16.0/lib/money/money.rb#199
    def setup_defaults; end

    # source://money/6.16.0/lib/money/money.rb#133
    def use_i18n; end

    # source://money/6.16.0/lib/money/money.rb#189
    def use_i18n=(value); end

    # source://money/6.16.0/lib/money/money.rb#265
    def with_rounding_mode(mode); end
  end
end

# https://github.com/RubyMoney/money#exchange-rate-stores
#
# source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#13
module Money::Bank; end

# Invalid cache, file not found or cache empty
#
# source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#15
class Money::Bank::InvalidCache < ::StandardError; end

# APP_ID not set error
#
# source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#18
class Money::Bank::NoAppId < ::StandardError; end

# OpenExchangeRatesBank base class
#
# source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#21
class Money::Bank::OpenExchangeRatesBank < ::Money::Bank::VariableExchange
  # As of the end of August 2012 all requests to the Open Exchange Rates
  # API must have a valid app_id
  # see https://docs.openexchangerates.org/docs/authentication
  #
  # @example
  #   oxr.app_id = 'YOUR_APP_APP_ID'
  # @param token [String] to access OXR API
  # @return [String] token to access OXR API
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#43
  def app_id; end

  # As of the end of August 2012 all requests to the Open Exchange Rates
  # API must have a valid app_id
  # see https://docs.openexchangerates.org/docs/authentication
  #
  # @example
  #   oxr.app_id = 'YOUR_APP_APP_ID'
  # @param token [String] to access OXR API
  # @return [String] token to access OXR API
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#43
  def app_id=(_arg0); end

  # Cache accessor
  #
  # @example
  #   oxr.cache = 'path/to/file/cache.json'
  # @param for [String, Proc] a String a filepath
  # @return [String, Proc] for a String a filepath
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#52
  def cache; end

  # Cache accessor
  #
  # @example
  #   oxr.cache = 'path/to/file/cache.json'
  # @param for [String, Proc] a String a filepath
  # @return [String, Proc] for a String a filepath
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#52
  def cache=(_arg0); end

  # Date for historical api
  # see https://docs.openexchangerates.org/docs/historical-json
  #
  # @example
  #   oxr.date = '2015-01-01'
  # @param The [String] requested date in YYYY-MM-DD format
  # @return [String] The requested date in YYYY-MM-DD format
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#62
  def date; end

  # Date for historical api
  # see https://docs.openexchangerates.org/docs/historical-json
  #
  # @example
  #   oxr.date = '2015-01-01'
  # @param The [String] requested date in YYYY-MM-DD format
  # @return [String] The requested date in YYYY-MM-DD format
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#62
  def date=(_arg0); end

  # Expire rates when expired
  #
  # @return [NilClass, Time] nil if not expired or new expiration time
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#216
  def expire_rates; end

  # Force refresh rates cache and store on the fly when ttl is expired
  # This will slow down request on get_rate, so use at your on risk, if you
  # don't want to setup crontab/worker/scheduler for your application
  #
  # @param [Boolean]
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#69
  def force_refresh_rate_on_expire; end

  # Force refresh rates cache and store on the fly when ttl is expired
  # This will slow down request on get_rate, so use at your on risk, if you
  # don't want to setup crontab/worker/scheduler for your application
  #
  # @param [Boolean]
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#69
  def force_refresh_rate_on_expire=(_arg0); end

  # Override Money `get_rate` method for caching
  #
  # @param from_currency [String] Currency ISO code. ex. 'USD'
  # @param to_currency [String] Currency ISO code. ex. 'CAD'
  # @return [Numeric] rate.
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#196
  def get_rate(from_currency, to_currency, opts = T.unsafe(nil)); end

  # Unparsed OpenExchangeRates response as String
  #
  # @return [String] OpenExchangeRates json response
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#84
  def json_response; end

  # Parsed OpenExchangeRates result as Hash
  #
  # @return [Hash] All rates as Hash
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#79
  def oer_rates; end

  # Get prettyprint option
  #
  # @return [Boolean]
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#235
  def prettyprint; end

  # Minified Response ('prettyprint')
  # see https://docs.openexchangerates.org/docs/prettyprint
  #
  # @example
  #   oxr.prettyprint = false
  # @param Set [Boolean] to false to receive minified (default: true)
  # @return [Boolean]
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#116
  def prettyprint=(_arg0); end

  # Rates expiration Time
  #
  # @return [Time] expiration time
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#74
  def rates_expiration; end

  # Current rates timestamp
  #
  # @return [Time]
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#128
  def rates_timestamp; end

  # Set current rates timestamp
  #
  # @return [Time]
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#121
  def rates_timestamp=(at); end

  # Fetch from url and save cache
  #
  # @return [Array] Array of exchange rates
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#206
  def refresh_rates; end

  # Fetch from url and save cache
  # Alias refresh_rates method
  #
  # @return [Array] Array of exchange rates
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#206
  def save_rates; end

  # Get show alternative
  #
  # @return [Boolean] if true show alternative
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#228
  def show_alternative; end

  # Set support for the black market and alternative digital currencies
  # see https://docs.openexchangerates.org/docs/alternative-currencies
  #
  # @example
  #   oxr.show_alternative = true
  # @param if [Boolean] true show alternative
  # @return [Boolean] Setted show alternative
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#98
  def show_alternative=(_arg0); end

  # Get the base currency for all rates. By default, USD is used.
  #
  # @return [String] base currency
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#169
  def source; end

  # Set the base currency for all rates. By default, USD is used.
  # OpenExchangeRates only allows USD as base currency
  # for the free plan users.
  #
  # @example
  #   oxr.source = 'USD'
  # @param value [String] Currency code, ISO 3166-1 alpha-3
  # @return [String] chosen base currency
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#157
  def source=(value); end

  # Source url of openexchangerates
  # defined with app_id
  #
  # @return [String] URL
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#253
  def source_url; end

  # Alias super method
  #
  # source://money/6.16.0/lib/money/bank/variable_exchange.rb#198
  def super_get_rate(from, to, opts = T.unsafe(nil)); end

  # Get symbols
  #
  # @return [Array] list of symbols to filter by
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#245
  def symbols; end

  # Filter response to a list of symbols
  # see https://docs.openexchangerates.org/docs/get-specific-currencies
  #
  # @example
  #   oxr.symbols = [:usd, :cad]
  # @param list [Array] of symbols
  # @return [Array] Setted list of symbols
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#107
  def symbols=(_arg0); end

  # Seconds after than the current rates are automatically expired
  #
  # @return [Integer] Setted time to live in seconds
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#89
  def ttl_in_seconds; end

  # Set the seconds after than the current rates are automatically expired
  # by default, they never expire.
  #
  # @example
  #   ttl_in_seconds = 86400 # will expire the rates in one day
  # @param value [Integer] Time to live in seconds
  # @return [Integer] Setted time to live in seconds
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#141
  def ttl_in_seconds=(value); end

  # Update all rates from openexchangerates JSON
  #
  # @return [Array] Array of exchange rates
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#176
  def update_rates; end

  protected

  # Read API
  #
  # @return [String]
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#334
  def api_response; end

  # Tries to calculate a pair rate using base currency rate
  #
  # @param from_currency [String] Currency ISO code. ex. 'USD'
  # @param to_currency [String] Currency ISO code. ex. 'CAD'
  # @return [Numeric] rate or nil if cannot calculate rate.
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#406
  def calc_pair_rate_using_base(from_currency, to_currency, opts); end

  # Get expire rates, first from cache and then from url
  #
  # @return [Hash] key is country code (ISO 3166-1 alpha-3) value Float
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#368
  def exchange_rates; end

  # Get rate or calculate it as inverse rate
  #
  # @param from_currency [String] Currency ISO code. ex. 'USD'
  # @param to_currency [String] Currency ISO code. ex. 'CAD'
  # @return [Numeric] rate or rate calculated as inverse rate.
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#387
  def get_rate_or_calc_inverse(from_currency, to_currency, opts = T.unsafe(nil)); end

  # Historical url generated from `date` attr_accessor
  #
  # @return [String] URL
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#290
  def historical_url; end

  # Latest url
  #
  # @return [String] URL
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#297
  def latest_url; end

  # Latest url if no date given
  #
  # @return [String] URL
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#279
  def oer_url; end

  # Read from cache when exist
  #
  # @return [String] Raw string from file or cache proc
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#322
  def read_from_cache; end

  # Read from url
  #
  # @raise [NoAppId]
  # @return [String] JSON content
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#341
  def read_from_url; end

  # Refresh expiration from now
  #
  # @return [Time] new expiration time
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#377
  def refresh_rates_expiration; end

  # Save rates on cache
  # Can raise InvalidCache
  #
  # @return [Proc, File]
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#270
  def save_cache; end

  # Store the provided text data by calling the proc method provided
  # for the cache, or write to the cache file.
  #
  # @example
  #   oxr.store_in_cache("{\"rates\": {\"AED\": 3.67304}}")
  # @param text [String] String to cache
  # @return [String, Integer]
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#309
  def store_in_cache(text); end

  # Check validity of rates response only for store in cache
  #
  # @example
  #   oxr.valid_rates?("{\"rates\": {\"AED\": 3.67304}}")
  # @param text [String] is JSON content
  # @return [Boolean] valid or not
  #
  # source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#356
  def valid_rates?(text); end
end

# source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#23
Money::Bank::OpenExchangeRatesBank::BASE_URL = T.let(T.unsafe(nil), String)

# source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#27
Money::Bank::OpenExchangeRatesBank::OER_HISTORICAL_URL = T.let(T.unsafe(nil), URI::HTTPS)

# OpenExchangeRates urls
#
# source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#26
Money::Bank::OpenExchangeRatesBank::OER_URL = T.let(T.unsafe(nil), URI::HTTPS)

# Default base currency "base": "USD"
#
# source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#30
Money::Bank::OpenExchangeRatesBank::OE_SOURCE = T.let(T.unsafe(nil), String)

# source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#31
Money::Bank::OpenExchangeRatesBank::RATES_KEY = T.let(T.unsafe(nil), String)

# source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#32
Money::Bank::OpenExchangeRatesBank::TIMESTAMP_KEY = T.let(T.unsafe(nil), String)

# source://money-open-exchange-rates//lib/money/bank/open_exchange_rates_bank.rb#22
Money::Bank::OpenExchangeRatesBank::VERSION = T.let(T.unsafe(nil), String)

# Module for version constant
#
# source://money-open-exchange-rates//lib/open_exchange_rates_bank/version.rb#4
module OpenExchangeRatesBank; end

# source://money-open-exchange-rates//lib/open_exchange_rates_bank/version.rb#5
OpenExchangeRatesBank::VERSION = T.let(T.unsafe(nil), String)

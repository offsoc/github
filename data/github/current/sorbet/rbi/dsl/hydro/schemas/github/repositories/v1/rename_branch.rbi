# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Repositories::V1::RenameBranch`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Repositories::V1::RenameBranch`.

class Hydro::Schemas::Github::Repositories::V1::RenameBranch
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      default_branch: T.nilable(T::Boolean),
      new_branch: T.nilable(String),
      old_branch: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(actor: nil, default_branch: nil, new_branch: nil, old_branch: nil, repository: nil, repository_owner: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_default_branch; end

  sig { void }
  def clear_new_branch; end

  sig { void }
  def clear_old_branch; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { returns(T::Boolean) }
  def default_branch; end

  sig { params(value: T::Boolean).void }
  def default_branch=(value); end

  sig { returns(String) }
  def new_branch; end

  sig { params(value: String).void }
  def new_branch=(value); end

  sig { returns(String) }
  def old_branch; end

  sig { params(value: String).void }
  def old_branch=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end
end

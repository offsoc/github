# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Actions::Core::V1::CreateExecutionRequest`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Actions::Core::V1::CreateExecutionRequest`.

class MonolithTwirp::Actions::Core::V1::CreateExecutionRequest
  sig do
    params(
      actor_id: T.nilable(MonolithTwirp::Actions::Core::V1::Identity),
      attempt: T.nilable(Integer),
      execution_graph: T.nilable(String),
      plan_id: T.nilable(String),
      referenced_workflows: T.nilable(String),
      repository_id: T.nilable(MonolithTwirp::Actions::Core::V1::Identity),
      run_name: T.nilable(String),
      workflow_run_id: T.nilable(Integer)
    ).void
  end
  def initialize(actor_id: nil, attempt: nil, execution_graph: nil, plan_id: nil, referenced_workflows: nil, repository_id: nil, run_name: nil, workflow_run_id: nil); end

  sig { returns(T.nilable(MonolithTwirp::Actions::Core::V1::Identity)) }
  def actor_id; end

  sig { params(value: T.nilable(MonolithTwirp::Actions::Core::V1::Identity)).void }
  def actor_id=(value); end

  sig { returns(Integer) }
  def attempt; end

  sig { params(value: Integer).void }
  def attempt=(value); end

  sig { void }
  def clear_actor_id; end

  sig { void }
  def clear_attempt; end

  sig { void }
  def clear_execution_graph; end

  sig { void }
  def clear_plan_id; end

  sig { void }
  def clear_referenced_workflows; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_run_name; end

  sig { void }
  def clear_workflow_run_id; end

  sig { returns(String) }
  def execution_graph; end

  sig { params(value: String).void }
  def execution_graph=(value); end

  sig { returns(String) }
  def plan_id; end

  sig { params(value: String).void }
  def plan_id=(value); end

  sig { returns(String) }
  def referenced_workflows; end

  sig { params(value: String).void }
  def referenced_workflows=(value); end

  sig { returns(T.nilable(MonolithTwirp::Actions::Core::V1::Identity)) }
  def repository_id; end

  sig { params(value: T.nilable(MonolithTwirp::Actions::Core::V1::Identity)).void }
  def repository_id=(value); end

  sig { returns(String) }
  def run_name; end

  sig { params(value: String).void }
  def run_name=(value); end

  sig { returns(Integer) }
  def workflow_run_id; end

  sig { params(value: Integer).void }
  def workflow_run_id=(value); end
end

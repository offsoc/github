# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Pbtypes::Deploy::WorkflowSchedule`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Pbtypes::Deploy::WorkflowSchedule`.

class GitHub::Launch::Pbtypes::Deploy::WorkflowSchedule
  sig do
    params(
      actor_login: T.nilable(String),
      actor_next_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      actor_node_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      commit_sha: T.nilable(String),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      environment: T.nilable(String),
      id: T.nilable(Integer),
      next_run_at: T.nilable(Google::Protobuf::Timestamp),
      owner_id: T.nilable(Integer),
      repository_next_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      repository_node_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      scatter_offset: T.nilable(Float),
      schedule: T.nilable(String),
      schedule_hash: T.nilable(String),
      schedule_next_hash: T.nilable(String),
      tier: T.nilable(Integer),
      tier_updated_at: T.nilable(Google::Protobuf::Timestamp),
      workflow_file_path: T.nilable(String),
      workflow_identifier: T.nilable(String)
    ).void
  end
  def initialize(actor_login: nil, actor_next_id: nil, actor_node_id: nil, commit_sha: nil, created_at: nil, environment: nil, id: nil, next_run_at: nil, owner_id: nil, repository_next_id: nil, repository_node_id: nil, scatter_offset: nil, schedule: nil, schedule_hash: nil, schedule_next_hash: nil, tier: nil, tier_updated_at: nil, workflow_file_path: nil, workflow_identifier: nil); end

  sig { returns(String) }
  def actor_login; end

  sig { params(value: String).void }
  def actor_login=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def actor_next_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def actor_next_id=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def actor_node_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def actor_node_id=(value); end

  sig { void }
  def clear_actor_login; end

  sig { void }
  def clear_actor_next_id; end

  sig { void }
  def clear_actor_node_id; end

  sig { void }
  def clear_commit_sha; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_environment; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_next_run_at; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_repository_next_id; end

  sig { void }
  def clear_repository_node_id; end

  sig { void }
  def clear_scatter_offset; end

  sig { void }
  def clear_schedule; end

  sig { void }
  def clear_schedule_hash; end

  sig { void }
  def clear_schedule_next_hash; end

  sig { void }
  def clear_tier; end

  sig { void }
  def clear_tier_updated_at; end

  sig { void }
  def clear_workflow_file_path; end

  sig { void }
  def clear_workflow_identifier; end

  sig { returns(String) }
  def commit_sha; end

  sig { params(value: String).void }
  def commit_sha=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(String) }
  def environment; end

  sig { params(value: String).void }
  def environment=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def next_run_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def next_run_at=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def repository_next_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def repository_next_id=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def repository_node_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def repository_node_id=(value); end

  sig { returns(Float) }
  def scatter_offset; end

  sig { params(value: Float).void }
  def scatter_offset=(value); end

  sig { returns(String) }
  def schedule; end

  sig { params(value: String).void }
  def schedule=(value); end

  sig { returns(String) }
  def schedule_hash; end

  sig { params(value: String).void }
  def schedule_hash=(value); end

  sig { returns(String) }
  def schedule_next_hash; end

  sig { params(value: String).void }
  def schedule_next_hash=(value); end

  sig { returns(Integer) }
  def tier; end

  sig { params(value: Integer).void }
  def tier=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def tier_updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def tier_updated_at=(value); end

  sig { returns(String) }
  def workflow_file_path; end

  sig { params(value: String).void }
  def workflow_file_path=(value); end

  sig { returns(String) }
  def workflow_identifier; end

  sig { params(value: String).void }
  def workflow_identifier=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Marketplace::V0::ActionUseButtonRepositorySearch`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Marketplace::V0::ActionUseButtonRepositorySearch`.

class Hydro::Schemas::Github::Marketplace::V0::ActionUseButtonRepositorySearch
  sig do
    params(
      query: T.nilable(String),
      repository_action: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryAction),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      results: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::Repository], T::Array[Hydro::Schemas::Github::V1::Entities::Repository])),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(query: nil, repository_action: nil, request_context: nil, results: T.unsafe(nil), user: nil); end

  sig { void }
  def clear_query; end

  sig { void }
  def clear_repository_action; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_results; end

  sig { void }
  def clear_user; end

  sig { returns(String) }
  def query; end

  sig { params(value: String).void }
  def query=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryAction)) }
  def repository_action; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryAction)).void }
  def repository_action=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::Repository]) }
  def results; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::Repository]).void }
  def results=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end
end

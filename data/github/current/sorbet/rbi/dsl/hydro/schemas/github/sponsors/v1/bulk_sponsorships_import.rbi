# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Sponsors::V1::BulkSponsorshipsImport`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Sponsors::V1::BulkSponsorshipsImport`.

class Hydro::Schemas::Github::Sponsors::V1::BulkSponsorshipsImport
  sig do
    params(
      error_counts: T.nilable(Hydro::Schemas::Github::Sponsors::V1::BulkSponsorshipsImport::ErrorCountDetails),
      file_error: T.nilable(T.any(Symbol, Integer)),
      frequency: T.nilable(T.any(Symbol, Integer)),
      included_headers: T.nilable(T.any(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)], T::Array[T.any(Symbol, Integer)])),
      total_errors: T.nilable(Integer),
      total_rows: T.nilable(Integer),
      total_rows_imported: T.nilable(Integer),
      total_rows_over_limit: T.nilable(Integer),
      total_rows_with_error: T.nilable(Integer)
    ).void
  end
  def initialize(error_counts: nil, file_error: nil, frequency: nil, included_headers: T.unsafe(nil), total_errors: nil, total_rows: nil, total_rows_imported: nil, total_rows_over_limit: nil, total_rows_with_error: nil); end

  sig { void }
  def clear_error_counts; end

  sig { void }
  def clear_file_error; end

  sig { void }
  def clear_frequency; end

  sig { void }
  def clear_included_headers; end

  sig { void }
  def clear_total_errors; end

  sig { void }
  def clear_total_rows; end

  sig { void }
  def clear_total_rows_imported; end

  sig { void }
  def clear_total_rows_over_limit; end

  sig { void }
  def clear_total_rows_with_error; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::BulkSponsorshipsImport::ErrorCountDetails)) }
  def error_counts; end

  sig do
    params(
      value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::BulkSponsorshipsImport::ErrorCountDetails)
    ).void
  end
  def error_counts=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def file_error; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def file_error=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def frequency; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def frequency=(value); end

  sig { returns(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]) }
  def included_headers; end

  sig { params(value: Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]).void }
  def included_headers=(value); end

  sig { returns(Integer) }
  def total_errors; end

  sig { params(value: Integer).void }
  def total_errors=(value); end

  sig { returns(Integer) }
  def total_rows; end

  sig { params(value: Integer).void }
  def total_rows=(value); end

  sig { returns(Integer) }
  def total_rows_imported; end

  sig { params(value: Integer).void }
  def total_rows_imported=(value); end

  sig { returns(Integer) }
  def total_rows_over_limit; end

  sig { params(value: Integer).void }
  def total_rows_over_limit=(value); end

  sig { returns(Integer) }
  def total_rows_with_error; end

  sig { params(value: Integer).void }
  def total_rows_with_error=(value); end
end

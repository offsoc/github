# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::Entities::User`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::Entities::User`.

class Hydro::Schemas::Github::V1::Entities::User
  sig do
    params(
      analytics_tracking_id: T.nilable(String),
      avatar_url: T.nilable(String),
      billing_plan: T.nilable(String),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      display_login: T.nilable(String),
      global_relay_id: T.nilable(String),
      has_verified_email: T.nilable(T::Boolean),
      id: T.nilable(Integer),
      is_enterprise_managed: T.nilable(T::Boolean),
      login: T.nilable(String),
      next_global_id: T.nilable(String),
      spammy: T.nilable(T::Boolean),
      spamurai_classification: T.nilable(T.any(Symbol, Integer)),
      support_context: T.nilable(Hydro::Schemas::Github::V1::Entities::SupportContext),
      suspended: T.nilable(T::Boolean),
      time_zone_name: T.nilable(Google::Protobuf::StringValue),
      type: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(analytics_tracking_id: nil, avatar_url: nil, billing_plan: nil, created_at: nil, display_login: nil, global_relay_id: nil, has_verified_email: nil, id: nil, is_enterprise_managed: nil, login: nil, next_global_id: nil, spammy: nil, spamurai_classification: nil, support_context: nil, suspended: nil, time_zone_name: nil, type: nil); end

  sig { returns(String) }
  def analytics_tracking_id; end

  sig { params(value: String).void }
  def analytics_tracking_id=(value); end

  sig { returns(String) }
  def avatar_url; end

  sig { params(value: String).void }
  def avatar_url=(value); end

  sig { returns(String) }
  def billing_plan; end

  sig { params(value: String).void }
  def billing_plan=(value); end

  sig { void }
  def clear_analytics_tracking_id; end

  sig { void }
  def clear_avatar_url; end

  sig { void }
  def clear_billing_plan; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_display_login; end

  sig { void }
  def clear_global_relay_id; end

  sig { void }
  def clear_has_verified_email; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_is_enterprise_managed; end

  sig { void }
  def clear_login; end

  sig { void }
  def clear_next_global_id; end

  sig { void }
  def clear_spammy; end

  sig { void }
  def clear_spamurai_classification; end

  sig { void }
  def clear_support_context; end

  sig { void }
  def clear_suspended; end

  sig { void }
  def clear_time_zone_name; end

  sig { void }
  def clear_type; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(String) }
  def display_login; end

  sig { params(value: String).void }
  def display_login=(value); end

  sig { returns(String) }
  def global_relay_id; end

  sig { params(value: String).void }
  def global_relay_id=(value); end

  sig { returns(T::Boolean) }
  def has_verified_email; end

  sig { params(value: T::Boolean).void }
  def has_verified_email=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def is_enterprise_managed; end

  sig { params(value: T::Boolean).void }
  def is_enterprise_managed=(value); end

  sig { returns(String) }
  def login; end

  sig { params(value: String).void }
  def login=(value); end

  sig { returns(String) }
  def next_global_id; end

  sig { params(value: String).void }
  def next_global_id=(value); end

  sig { returns(T::Boolean) }
  def spammy; end

  sig { params(value: T::Boolean).void }
  def spammy=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def spamurai_classification; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def spamurai_classification=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SupportContext)) }
  def support_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SupportContext)).void }
  def support_context=(value); end

  sig { returns(T::Boolean) }
  def suspended; end

  sig { params(value: T::Boolean).void }
  def suspended=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def time_zone_name; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def time_zone_name=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def type=(value); end
end

{"version":3,"file":"chunk-app_assets_modules_marketing_before-after_ts-xxxxxxxxxxxx.js","mappings":"uxBAoBE,cARF,YACMA,2BAA2BC,YAS/BC,mBAAoB,CAClB,GAAM,CAACC,OAAAA,CAAM,CAAC,CAAG,EAAH,KAAUC,EAAuB,IAAIC,iBAEnD,IAAI,CAACC,MAAM,GAEX,IAAI,CAACC,YAAY,CAACC,gBAAgB,CAChC,gBACA,KACE,IAAI,CAACC,SAAS,CAAG,EACnB,EACA,CAACN,OAAAA,CAAM,EAEX,CAEAG,QAAS,CACP,IAAI,CAACG,SAAS,CAAG,GACjB,IAAI,CAACC,OAAO,CAAG,CAAC,IAAI,CAACA,OAAO,CAE5B,IAAI,CAACC,aAAa,CAACC,eAAe,CAAC,UAAW,IAAI,CAACF,OAAO,CAC5D,CAEAG,sBAAuB,K,QACrB,IAAI,CAAET,E,uBAAN,IAAI,E,UAAwBU,OAC9B,C,8BAzBA,S,uIAAA,Q,kBAAA,M,QANMJ,OAAO,CAAG,G,KACVD,SAAS,CAAG,G,OAKjBL,EAA+C,K,CA0BlD,E,GAhCGW,EAAAA,EAAIA,C,CADDf,EAAAA,SAAAA,CAAAA,UAAAA,KAAAA,G,GAEHe,EAAAA,EAAIA,C,CAFDf,EAAAA,SAAAA,CAAAA,YAAAA,KAAAA,G,GAIHgB,EAAAA,EAAMA,C,CAJHhB,EAAAA,SAAAA,CAAAA,gBAAAA,KAAAA,G,GAKHgB,EAAAA,EAAMA,C,CALHhB,EAAAA,SAAAA,CAAAA,eAAAA,KAAAA,GAAAA,EAAAA,EAAAA,CADLiB,EAAAA,EAAUA,C,CACLjB,E","sources":["app/assets/modules/marketing/before-after.ts"],"sourcesContent":["// The before/after element wraps two togglable views, e.g. before and after images.\n// Example:\n// <before-after data-load-on=\"visible\">\n//  <button data-target=\"before-after.toggleElement\" data-action=\"change:before-after#toggle\">Toggle</button>\n//  <div class=\"position-relative\">\n//    <img src=\"url-of-before-image\" class=\"position-absolute top-0 left-0\">\n//    <img src=\"url-of-after-image\" class=\"position-absolute top-0 left-0 after-element\" data-target=\"before-after.afterElement\">\n//  </div>\n// </before-after>\n\nimport {controller, target, attr} from '@github/catalyst'\n\n@controller\nclass BeforeAfterElement extends HTMLElement {\n  @attr toggled = false\n  @attr animating = false\n\n  @target toggleElement: HTMLElement\n  @target afterElement: HTMLElement\n\n  #eventAbortController: AbortController | null = null\n\n  connectedCallback() {\n    const {signal} = (this.#eventAbortController = new AbortController())\n\n    this.toggle()\n\n    this.afterElement.addEventListener(\n      'transitionend',\n      () => {\n        this.animating = false\n      },\n      {signal},\n    )\n  }\n\n  toggle() {\n    this.animating = true\n    this.toggled = !this.toggled\n\n    this.toggleElement.toggleAttribute('checked', this.toggled)\n  }\n\n  disconnectedCallback() {\n    this.#eventAbortController?.abort()\n  }\n}\n"],"names":["BeforeAfterElement","HTMLElement","connectedCallback","signal","eventAbortController","AbortController","toggle","afterElement","addEventListener","animating","toggled","toggleElement","toggleAttribute","disconnectedCallback","abort","attr","target","controller"],"sourceRoot":""}
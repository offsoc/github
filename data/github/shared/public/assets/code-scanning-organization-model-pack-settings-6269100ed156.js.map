{"version":3,"file":"code-scanning-organization-model-pack-settings-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/code-scanning-organization-model-pack-settings/App.tsx","ui/packages/code-scanning-organization-model-pack-settings/routes/ModelPacks.tsx","ui/packages/code-scanning-organization-model-pack-settings/code-scanning-organization-model-pack-settings.ts","ui/packages/use-csrf-token/use-csrf-token.ts","ui/packages/react-core/JsonRoute.tsx"],"sourcesContent":["import type React from 'react'\n\n/**\n * The App component is used to render content which should be present on _all_ routes within this app\n */\nexport function App(props: {children?: React.ReactNode}) {\n  return <>{props.children}</>\n}\n\ntry{ App.displayName ||= 'App' } catch {}","import {useRef, useState} from 'react'\nimport {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {useCSRFToken} from '@github-ui/use-csrf-token'\nimport {Box, Breadcrumbs, Button, FormControl, Link, Pagehead, Textarea} from '@primer/react'\nimport {validRange} from 'semver'\n\nexport interface ModelPacksPayload {\n  orgSecurityAnalysisUrl: string\n  formUrl: string\n  formMethod: string\n  existingModelPacks: string\n  defaultSetupUrl: string\n  codeqlPackPublishUrl: string\n  aboutCodeqlPacksUrl: string\n}\n\nexport function ModelPacks() {\n  const {\n    orgSecurityAnalysisUrl,\n    formUrl,\n    formMethod,\n    existingModelPacks,\n    defaultSetupUrl,\n    codeqlPackPublishUrl,\n    aboutCodeqlPacksUrl,\n  } = useRoutePayload<ModelPacksPayload>()\n\n  const modelPacksRef = useRef<HTMLTextAreaElement>(null)\n  const csrf = useCSRFToken(formUrl, formMethod)\n  const [validationError, setValidationError] = useState('')\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    if (modelPacksRef.current === null) {\n      return\n    }\n\n    // Validate each line of the input\n    const error = validateMultiplePacks(modelPacksRef.current.value)\n    if (error !== '') {\n      setValidationError(error)\n      event.preventDefault()\n      return\n    }\n  }\n\n  return (\n    <Box sx={{display: 'flex', flexDirection: 'column', justifyContent: 'space-between', pb: 2, ml: 4}}>\n      <form action={formUrl} method=\"post\" data-testid=\"model-packs-form\" onSubmit={handleSubmit}>\n        {\n          // eslint-disable-next-line github/authenticity-token\n          <input type=\"hidden\" name=\"authenticity_token\" value={csrf} />\n        }\n        <input type=\"hidden\" name=\"_method\" value={formMethod} autoComplete=\"off\" />\n        <Breadcrumbs>\n          <Breadcrumbs.Item href={orgSecurityAnalysisUrl}>Code security and analysis</Breadcrumbs.Item>\n          <Breadcrumbs.Item href=\"#\" selected>\n            Expand CodeQL analysis\n          </Breadcrumbs.Item>\n        </Breadcrumbs>\n        <Pagehead as=\"h3\" sx={{mb: 3, pb: 1, pt: 3, fontWeight: 'bold', fontSize: 3}}>\n          Expand CodeQL analysis\n        </Pagehead>\n        <div>\n          <FormControl>\n            <FormControl.Label>Model packs</FormControl.Label>\n            <Textarea\n              block={true}\n              name=\"code_scanning_org_level_model_packs\"\n              aria-label=\"Enter model packs, divided by a new line\"\n              ref={modelPacksRef}\n              placeholder=\"myorg/mypack@1.2.3\"\n              defaultValue={existingModelPacks}\n              validationStatus={validationError ? 'error' : undefined}\n            />\n            <FormControl.Caption>\n              Add one pack per line, following the{' '}\n              <Link href={codeqlPackPublishUrl} inline>\n                &lt;scope&gt;/&lt;pack&gt;@x.x.x format\n              </Link>\n              . CodeQL model packs{' '}\n              <Link href={aboutCodeqlPacksUrl} inline>\n                expand CodeQL analysis\n              </Link>{' '}\n              to recognise more libraries and frameworks in repositories using{' '}\n              <Link href={defaultSetupUrl} inline>\n                CodeQL default setup.\n              </Link>\n            </FormControl.Caption>\n            {validationError && <FormControl.Validation variant=\"error\">{validationError}</FormControl.Validation>}\n          </FormControl>\n        </div>\n        <Box sx={{display: 'flex', flexDirection: 'row', alignItems: 'center', mt: 2}}>\n          <Button type=\"submit\" variant=\"primary\" sx={{mr: 2}}>\n            Save\n          </Button>\n          <Button as=\"a\" href={orgSecurityAnalysisUrl}>\n            Cancel\n          </Button>\n        </Box>\n      </form>\n    </Box>\n  )\n}\n\n// The regexp patterns come from:\n// https://github.com/github/semmle-code/blob/main/frontend/src/com/semmle/frontend/packs/PackName.java#L56-L66\n// This is why we prefer the string concat version instead of a template. That\n// makes it easier to compare the pattern to the Java code.\nconst identifierPatternString = '(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)'\nconst packNamePattern = new RegExp(\n  // eslint-disable-next-line prefer-template\n  '^(?:(?<scope>' +\n    identifierPatternString +\n    ')/)?' + // scope\n    '(?<name>' +\n    identifierPatternString +\n    ')$',\n) // name\n\n// validatePack checks whether a pack is valid.\n// It returns an empty string if the pack is valid, otherwise it returns the invalid part.\nexport function validatePack(s: string): string {\n  const parts = s.split('@')\n\n  // Note: this is just for safety, s.split should never return the empty array when\n  // called with a non-empty string.\n  if (parts.length < 1) {\n    return 'pack name'\n  }\n  const name = parts[0]\n  // We could trim the strings before checking the pattern, that would allow a pack name\n  // with leading/trailing spaces. E.g. '  semmle/codeql@1.2.3  '. But at the moment we\n  // do not allow that. So we only trim to check if the name or range is empty.\n  if (name !== undefined && (name.trim() === '' || !packNamePattern.test(name))) {\n    return 'pack name'\n  }\n\n  if (parts.length < 2) {\n    return ''\n  }\n  const range = parts[1]\n  if (range !== undefined && (range.trim() === '' || validRange(range) === null)) {\n    return 'range'\n  }\n\n  return ''\n}\n\n// validateMultiplePacks checks whether the string containing multiple packs is valid.\n// If returns an empty string if the whole string is valid, otherwise it returns an error\nexport function validateMultiplePacks(s: string): string {\n  // Validate each line of the input\n  // We filter out empty lines to allow the user to group their packs with empty lines between them.\n  const modelPacks = s.split('\\n').filter(line => line !== '')\n  for (const pack of modelPacks) {\n    const invalidPart = validatePack(pack)\n    if (invalidPart !== '') {\n      return `Invalid ${invalidPart} for pack: ${pack}`\n    }\n  }\n  return ''\n}\n\ntry{ ModelPacks.displayName ||= 'ModelPacks' } catch {}","import {App} from './App'\nimport {ModelPacks} from './routes/ModelPacks'\nimport {registerReactAppFactory} from '@github-ui/react-core/register-app'\nimport {jsonRoute} from '@github-ui/react-core/json-route'\n\nregisterReactAppFactory('code-scanning-organization-model-pack-settings', () => ({\n  App,\n  routes: [\n    jsonRoute({path: 'organizations/:organization_id/settings/code_scanning/model_packs', Component: ModelPacks}),\n  ],\n}))\n","import {useRoutePayload} from '@github-ui/react-core/use-route-payload'\n\nexport interface CSRFTokens {\n  csrf_tokens?: {\n    [path: string]:\n      | {\n          [method: string]: string | undefined\n        }\n      | undefined\n  }\n}\n\nexport function useCSRFToken(path: string, method: string): string | undefined {\n  const {csrf_tokens} = useRoutePayload<CSRFTokens>()\n  return csrf_tokens?.[path]?.[method]\n}\n","import type {ChildRoute, LoaderResult, RouteRegistration, TransitionType} from './app-routing-types'\nimport type React from 'react'\nimport type {Location} from '@remix-run/router'\n\nexport interface JsonRouteProps {\n  path: string\n  Component: React.ComponentType\n  transitionType?: TransitionType\n  shouldNavigateOnError?: boolean\n  children?: ChildRoute[]\n}\n/**\n * A utility for building a route registration for a route that consumes a JSON object (either via embedding in a\n * script tag or via a JSON fetch on React soft navigations).\n */\nexport function jsonRoute<TRouteData, TEmbeddedData>({\n  path,\n  Component,\n  /**\n   * Some routes want to handle their own errors and not just show a generic error page. In this case,\n   * the error is just handled like any other payload for the route.\n   * NOTE: We might consider replacing the shouldNavigateOnError flag with a parallel implementation to jsonRoute.\n   */\n  shouldNavigateOnError,\n  transitionType,\n  children,\n}: JsonRouteProps): RouteRegistration<TRouteData, TEmbeddedData> {\n  async function coreLoader({location}: {location: Location}): Promise<LoaderResult<TRouteData>> {\n    let response: Response\n    try {\n      const fetchPath = `${location.pathname}${location.search}`\n      response = await window.fetch(fetchPath, {\n        headers: {\n          Accept: 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-GitHub-Target': 'dotcom',\n          'X-React-Router': 'json',\n        },\n      })\n    } catch (error) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'fetchError'},\n      }\n    }\n    if (response.redirected) {\n      return {\n        type: 'redirect',\n        url: response.url,\n      }\n    } else if (!response.ok) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'httpError', httpStatus: response.status},\n      }\n    } else {\n      try {\n        const responseJson = await response.json()\n        return {\n          type: 'loaded',\n          data: responseJson,\n          title: responseJson.title,\n        }\n      } catch (error) {\n        return {\n          type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n          error: {type: 'badResponseError'},\n        }\n      }\n    }\n  }\n\n  function loadFromEmbeddedData({embeddedData}: {embeddedData: TEmbeddedData}): {data: TRouteData; title: string} {\n    const data = embeddedData as unknown as TRouteData & {title: string}\n    return {data, title: data.title}\n  }\n\n  return {\n    path,\n    // TODO: consider wrapping Component with a component that passes payload as a prop — ideally as part of migrating\n    // away from useRoutePayload.\n    Component,\n    coreLoader,\n    loadFromEmbeddedData,\n    transitionType,\n    children,\n  }\n}\n"],"names":["App","props","children","displayName","ModelPacks","orgSecurityAnalysisUrl","formUrl","formMethod","existingModelPacks","defaultSetupUrl","codeqlPackPublishUrl","aboutCodeqlPacksUrl","useRoutePayload","modelPacksRef","useRef","csrf","useCSRFToken","validationError","setValidationError","useState","Box","sx","display","flexDirection","justifyContent","pb","ml","form","action","method","data-testid","onSubmit","event","current","error","validateMultiplePacks","s","pack","split","filter","line","invalidPart","validatePack","parts","length","name","undefined","trim","packNamePattern","test","range","validRange","value","preventDefault","input","type","autoComplete","Breadcrumbs","Item","href","selected","Pagehead","as","mb","pt","fontWeight","fontSize","div","FormControl","Label","Textarea","block","aria-label","ref","placeholder","defaultValue","validationStatus","Caption","Link","inline","Validation","variant","alignItems","mt","Button","mr","identifierPatternString","registerReactAppFactory","routes","jsonRoute","path","Component","csrf_tokens","shouldNavigateOnError","transitionType","coreLoader","location","response","fetchPath","pathname","search","window","fetch","headers","Accept","redirected","url","ok","httpStatus","status","responseJson","json","data","title","loadFromEmbeddedData","embeddedData"],"sourceRoot":""}
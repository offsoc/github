# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hook::Event::PersonalAccessTokenRequestEvent`.
# Please instead update this file by running `bin/tapioca dsl Hook::Event::PersonalAccessTokenRequestEvent`.

class Hook::Event::PersonalAccessTokenRequestEvent
  sig do
    params(
      action: T.untyped,
      actor_id: T.untyped,
      target_id: T.untyped,
      target_type: T.untyped,
      user_programmatic_access_id: T.untyped,
      business_id: T.untyped,
      delivered_hook_ids: T.untyped,
      event_guid: T.untyped,
      organization_id: T.untyped,
      permissions_added: T.untyped,
      permissions_unchanged: T.untyped,
      permissions_upgraded: T.untyped,
      primary_resource: T.untyped,
      primary_resource_data: T.untyped,
      repositories: T.untyped,
      repository_id: T.untyped,
      token_expires_at: T.untyped,
      triggered_at: T.untyped
    ).void
  end
  def initialize(action:, actor_id:, target_id:, target_type:, user_programmatic_access_id:, business_id: nil, delivered_hook_ids: nil, event_guid: nil, organization_id: nil, permissions_added: nil, permissions_unchanged: nil, permissions_upgraded: nil, primary_resource: nil, primary_resource_data: nil, repositories: nil, repository_id: nil, token_expires_at: nil, triggered_at: nil); end

  sig { returns(T.untyped) }
  def action; end

  sig { params(value: T.untyped).void }
  def action=(value); end

  sig { returns(T.untyped) }
  def actor_id; end

  sig { params(value: T.untyped).void }
  def actor_id=(value); end

  sig { returns(T.untyped) }
  def permissions_added; end

  sig { returns(T.untyped) }
  def target_id; end

  sig { params(value: T.untyped).void }
  def business_id=(value); end

  sig { params(value: T.untyped).void }
  def delivered_hook_ids=(value); end

  sig { params(value: T.untyped).void }
  def permissions_added=(value); end

  sig { params(value: T.untyped).void }
  def target_id=(value); end

  sig { returns(T.untyped) }
  def permissions_unchanged; end

  sig { returns(T.untyped) }
  def target_type; end

  sig { params(value: T.untyped).void }
  def permissions_unchanged=(value); end

  sig { params(value: T.untyped).void }
  def target_type=(value); end

  sig { returns(T.untyped) }
  def permissions_upgraded; end

  sig { returns(T.untyped) }
  def user_programmatic_access_id; end

  sig { params(value: T.untyped).void }
  def permissions_upgraded=(value); end

  sig { params(value: T.untyped).void }
  def user_programmatic_access_id=(value); end

  sig { returns(T.untyped) }
  def business_id; end

  sig { returns(T.untyped) }
  def delivered_hook_ids; end

  sig { returns(T.untyped) }
  def event_guid; end

  sig { params(value: T.untyped).void }
  def event_guid=(value); end

  sig { returns(T.untyped) }
  def organization_id; end

  sig { params(value: T.untyped).void }
  def organization_id=(value); end

  sig { returns(T.untyped) }
  def primary_resource; end

  sig { params(value: T.untyped).void }
  def primary_resource=(value); end

  sig { returns(T.untyped) }
  def primary_resource_data; end

  sig { params(value: T.untyped).void }
  def primary_resource_data=(value); end

  sig { returns(T.untyped) }
  def repositories; end

  sig { params(value: T.untyped).void }
  def repositories=(value); end

  sig { returns(T.untyped) }
  def repository_id; end

  sig { params(value: T.untyped).void }
  def repository_id=(value); end

  sig { returns(T.untyped) }
  def token_expires_at; end

  sig { params(value: T.untyped).void }
  def token_expires_at=(value); end

  sig { returns(T.untyped) }
  def triggered_at; end

  sig { params(value: T.untyped).void }
  def triggered_at=(value); end

  class << self
    sig do
      params(
        action: T.untyped,
        actor_id: T.untyped,
        target_id: T.untyped,
        target_type: T.untyped,
        user_programmatic_access_id: T.untyped,
        business_id: T.untyped,
        delivered_hook_ids: T.untyped,
        event_guid: T.untyped,
        organization_id: T.untyped,
        permissions_added: T.untyped,
        permissions_unchanged: T.untyped,
        permissions_upgraded: T.untyped,
        primary_resource: T.untyped,
        primary_resource_data: T.untyped,
        repositories: T.untyped,
        repository_id: T.untyped,
        token_expires_at: T.untyped,
        triggered_at: T.untyped
      ).returns(T::Boolean)
    end
    def queue(action:, actor_id:, target_id:, target_type:, user_programmatic_access_id:, business_id: nil, delivered_hook_ids: nil, event_guid: nil, organization_id: nil, permissions_added: nil, permissions_unchanged: nil, permissions_upgraded: nil, primary_resource: nil, primary_resource_data: nil, repositories: nil, repository_id: nil, token_expires_at: nil, triggered_at: nil); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PlatformTypes::Codespace`.
# Please instead update this file by running `bin/tapioca dsl PlatformTypes::Codespace`.

class PlatformTypes::Codespace < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(GraphQL::Client::Schema::InterfaceType) }
  def billable_owner; end

  sig { returns(T::Boolean) }
  def billable_owner?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def created_at; end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(Integer)) }
  def database_id; end

  sig { returns(T::Boolean) }
  def database_id?; end

  sig { returns(T.nilable(String)) }
  def devcontainer_path; end

  sig { returns(T::Boolean) }
  def devcontainer_path?; end

  sig { returns(T.nilable(String)) }
  def guid; end

  sig { returns(T::Boolean) }
  def guid?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def last_used_at; end

  sig { returns(T::Boolean) }
  def last_used_at?; end

  sig { returns(String) }
  def location; end

  sig { returns(T::Boolean) }
  def location?; end

  sig { returns(String) }
  def name; end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(GraphQL::Client::Schema::InterfaceType) }
  def owner; end

  sig { returns(T::Boolean) }
  def owner?; end

  sig { returns(T.nilable(PlatformTypes::Repository)) }
  def repository; end

  sig { returns(T::Boolean) }
  def repository?; end

  sig { returns(String) }
  def sku_name; end

  sig { returns(T::Boolean) }
  def sku_name?; end

  sig { returns(String) }
  def state; end

  sig { returns(T::Boolean) }
  def state?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def updated_at; end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(String) }
  def vscs_state; end

  sig { returns(T::Boolean) }
  def vscs_state?; end
end

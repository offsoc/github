# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::TeamGroupMappingUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::TeamGroupMappingUpdate`.

class Hydro::Schemas::Github::V1::TeamGroupMappingUpdate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      current_mappings: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::TeamGroupMapping], T::Array[Hydro::Schemas::Github::V1::Entities::TeamGroupMapping])),
      organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      previous_group_ids: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      team: T.nilable(Hydro::Schemas::Github::V1::Entities::Team),
      team_sync_tenant: T.nilable(Hydro::Schemas::Github::V1::Entities::TeamSyncTenant)
    ).void
  end
  def initialize(actor: nil, current_mappings: T.unsafe(nil), organization: nil, previous_group_ids: T.unsafe(nil), request_context: nil, team: nil, team_sync_tenant: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_current_mappings; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_previous_group_ids; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_team; end

  sig { void }
  def clear_team_sync_tenant; end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::TeamGroupMapping]) }
  def current_mappings; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::TeamGroupMapping]).void }
  def current_mappings=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def organization=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def previous_group_ids; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def previous_group_ids=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Team)) }
  def team; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Team)).void }
  def team=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::TeamSyncTenant)) }
  def team_sync_tenant; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::TeamSyncTenant)).void }
  def team_sync_tenant=(value); end
end

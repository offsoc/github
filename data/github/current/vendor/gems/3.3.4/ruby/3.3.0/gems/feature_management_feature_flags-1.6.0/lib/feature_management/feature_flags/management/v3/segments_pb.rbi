# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: feature_management/feature_flags/management/v3/segments.proto
# typed: strict

class FeatureManagement::FeatureFlags::Management::V3::GetMemberRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::GetMemberRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::GetMemberRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::GetMemberRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::GetMemberRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      segment_name: T.nilable(String),
      member_id: T.nilable(String)
    ).void
  end
  def initialize(
    segment_name: "",
    member_id: ""
  )
  end

  # The name of the segment
  sig { returns(String) }
  def segment_name
  end

  # The name of the segment
  sig { params(value: String).void }
  def segment_name=(value)
  end

  # The name of the segment
  sig { void }
  def clear_segment_name
  end

  # The id of the member to get
  sig { returns(String) }
  def member_id
  end

  # The id of the member to get
  sig { params(value: String).void }
  def member_id=(value)
  end

  # The id of the member to get
  sig { void }
  def clear_member_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Management::V3::GetMemberResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::GetMemberResponse) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::GetMemberResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::GetMemberResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::GetMemberResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      member_id: T.nilable(String)
    ).void
  end
  def initialize(
    member_id: ""
  )
  end

  # The id of the segment member
  sig { returns(String) }
  def member_id
  end

  # The id of the segment member
  sig { params(value: String).void }
  def member_id=(value)
  end

  # The id of the segment member
  sig { void }
  def clear_member_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Management::V3::ListMembersRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::ListMembersRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListMembersRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::ListMembersRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListMembersRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      segment_name: T.nilable(String),
      page: T.nilable(Integer),
      page_size: T.nilable(Integer),
      member_id_prefix: T.nilable(String)
    ).void
  end
  def initialize(
    segment_name: "",
    page: 0,
    page_size: 0,
    member_id_prefix: ""
  )
  end

  # The name of the segment
  sig { returns(String) }
  def segment_name
  end

  # The name of the segment
  sig { params(value: String).void }
  def segment_name=(value)
  end

  # The name of the segment
  sig { void }
  def clear_segment_name
  end

  # page is the page number (required)
  sig { returns(Integer) }
  def page
  end

  # page is the page number (required)
  sig { params(value: Integer).void }
  def page=(value)
  end

  # page is the page number (required)
  sig { void }
  def clear_page
  end

  # page_size is the number of entries returned in a page (required)
  sig { returns(Integer) }
  def page_size
  end

  # page_size is the number of entries returned in a page (required)
  sig { params(value: Integer).void }
  def page_size=(value)
  end

  # page_size is the number of entries returned in a page (required)
  sig { void }
  def clear_page_size
  end

  # member_id_prefix is the prefix of the id of the member to filter on (optional). This is used to filter for different types of members as they are typically of the form {type}:{id}. For example, if you want to filter for all members of type user, you can use member_id_prefix="user:""
  sig { returns(String) }
  def member_id_prefix
  end

  # member_id_prefix is the prefix of the id of the member to filter on (optional). This is used to filter for different types of members as they are typically of the form {type}:{id}. For example, if you want to filter for all members of type user, you can use member_id_prefix="user:""
  sig { params(value: String).void }
  def member_id_prefix=(value)
  end

  # member_id_prefix is the prefix of the id of the member to filter on (optional). This is used to filter for different types of members as they are typically of the form {type}:{id}. For example, if you want to filter for all members of type user, you can use member_id_prefix="user:""
  sig { void }
  def clear_member_id_prefix
  end

  sig { returns(T::Boolean) }
  def has_member_id_prefix?
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Management::V3::ListMembersResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::ListMembersResponse) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListMembersResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::ListMembersResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::ListMembersResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      member_ids: T.nilable(T::Array[String]),
      page: T.nilable(Integer),
      page_size: T.nilable(Integer),
      total_pages: T.nilable(Integer)
    ).void
  end
  def initialize(
    member_ids: [],
    page: 0,
    page_size: 0,
    total_pages: 0
  )
  end

  # The list of member ids
  sig { returns(T::Array[String]) }
  def member_ids
  end

  # The list of member ids
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def member_ids=(value)
  end

  # The list of member ids
  sig { void }
  def clear_member_ids
  end

  # The page number (required)
  sig { returns(Integer) }
  def page
  end

  # The page number (required)
  sig { params(value: Integer).void }
  def page=(value)
  end

  # The page number (required)
  sig { void }
  def clear_page
  end

  # The number of entries in a page (required)
  sig { returns(Integer) }
  def page_size
  end

  # The number of entries in a page (required)
  sig { params(value: Integer).void }
  def page_size=(value)
  end

  # The number of entries in a page (required)
  sig { void }
  def clear_page_size
  end

  # The total number of pages that encapsulate the list of entities based on the provided filter criteria (required)
  sig { returns(Integer) }
  def total_pages
  end

  # The total number of pages that encapsulate the list of entities based on the provided filter criteria (required)
  sig { params(value: Integer).void }
  def total_pages=(value)
  end

  # The total number of pages that encapsulate the list of entities based on the provided filter criteria (required)
  sig { void }
  def clear_total_pages
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Management::V3::CountMembersRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::CountMembersRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::CountMembersRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::CountMembersRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::CountMembersRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      segment_name: T.nilable(String),
      member_id_prefix: T.nilable(String)
    ).void
  end
  def initialize(
    segment_name: "",
    member_id_prefix: ""
  )
  end

  # The name of the segment
  sig { returns(String) }
  def segment_name
  end

  # The name of the segment
  sig { params(value: String).void }
  def segment_name=(value)
  end

  # The name of the segment
  sig { void }
  def clear_segment_name
  end

  # member_id_prefix is the prefix of the id of the member to filter on (optional). This is used to filter for different types of members as they are typically of the form {type}:{id}. For example, if you want to filter for all members of type user, you can use member_id_prefix="user:""
  sig { returns(String) }
  def member_id_prefix
  end

  # member_id_prefix is the prefix of the id of the member to filter on (optional). This is used to filter for different types of members as they are typically of the form {type}:{id}. For example, if you want to filter for all members of type user, you can use member_id_prefix="user:""
  sig { params(value: String).void }
  def member_id_prefix=(value)
  end

  # member_id_prefix is the prefix of the id of the member to filter on (optional). This is used to filter for different types of members as they are typically of the form {type}:{id}. For example, if you want to filter for all members of type user, you can use member_id_prefix="user:""
  sig { void }
  def clear_member_id_prefix
  end

  sig { returns(T::Boolean) }
  def has_member_id_prefix?
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Management::V3::CountMembersResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::CountMembersResponse) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::CountMembersResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::CountMembersResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::CountMembersResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      count: T.nilable(Integer)
    ).void
  end
  def initialize(
    count: 0
  )
  end

  # The count of members
  sig { returns(Integer) }
  def count
  end

  # The count of members
  sig { params(value: Integer).void }
  def count=(value)
  end

  # The count of members
  sig { void }
  def clear_count
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Management::V3::AddMembersRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::AddMembersRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::AddMembersRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::AddMembersRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::AddMembersRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      segment_name: T.nilable(String),
      member_ids: T.nilable(T::Array[String])
    ).void
  end
  def initialize(
    segment_name: "",
    member_ids: []
  )
  end

  # The name of the segment
  sig { returns(String) }
  def segment_name
  end

  # The name of the segment
  sig { params(value: String).void }
  def segment_name=(value)
  end

  # The name of the segment
  sig { void }
  def clear_segment_name
  end

  # The list of member ids to add to the segment
  sig { returns(T::Array[String]) }
  def member_ids
  end

  # The list of member ids to add to the segment
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def member_ids=(value)
  end

  # The list of member ids to add to the segment
  sig { void }
  def clear_member_ids
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Management::V3::MembersResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::MembersResponse) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::MembersResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::MembersResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::MembersResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      segment_name: T.nilable(String)
    ).void
  end
  def initialize(
    segment_name: ""
  )
  end

  # The name of the segment
  sig { returns(String) }
  def segment_name
  end

  # The name of the segment
  sig { params(value: String).void }
  def segment_name=(value)
  end

  # The name of the segment
  sig { void }
  def clear_segment_name
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Management::V3::RemoveMembersRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::RemoveMembersRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::RemoveMembersRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::RemoveMembersRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::RemoveMembersRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      segment_name: T.nilable(String),
      member_ids: T.nilable(T::Array[String])
    ).void
  end
  def initialize(
    segment_name: "",
    member_ids: []
  )
  end

  # The name of the segment
  sig { returns(String) }
  def segment_name
  end

  # The name of the segment
  sig { params(value: String).void }
  def segment_name=(value)
  end

  # The name of the segment
  sig { void }
  def clear_segment_name
  end

  # The list of member ids to remove from the segment
  sig { returns(T::Array[String]) }
  def member_ids
  end

  # The list of member ids to remove from the segment
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def member_ids=(value)
  end

  # The list of member ids to remove from the segment
  sig { void }
  def clear_member_ids
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Management::V3::RemoveAllMembersRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Management::V3::RemoveAllMembersRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::RemoveAllMembersRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Management::V3::RemoveAllMembersRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Management::V3::RemoveAllMembersRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      segment_name: T.nilable(String)
    ).void
  end
  def initialize(
    segment_name: ""
  )
  end

  # The name of the segment
  sig { returns(String) }
  def segment_name
  end

  # The name of the segment
  sig { params(value: String).void }
  def segment_name=(value)
  end

  # The name of the segment
  sig { void }
  def clear_segment_name
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

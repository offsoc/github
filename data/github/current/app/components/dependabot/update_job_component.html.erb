<%# erblint:counter DeprecatedComponentsCounter 2 %>
<% scheme = update_job_error? ? :danger : :default %>
<%= render(Primer::Beta::Flash.new(scheme: scheme, mb: 2)) do |component| %>
  <div class="d-flex">
    <div class="flex-1 overflow-x-auto">
      <div>
        <span class="mr-2">
          <%= render(Dependabot::UpdateJobStateIconComponent.new(state: update_job.state)) %>
        </span>
        <span class="text-bold">
          <%= heading %>
        </span>
      </div>
      <% if update_job_error? %>
        <% if broken? %>
          <div class="mb-4">
            Dependabot updates have stopped for your repository due to repeated errors. To see logs, click "Check for Updates" and Dependabot will try again. The last error message was:
          </div>

          <span class="text-bold">
            <%= update_job.last_error.msg %>
          </span>
        <% end %>

        <div><%= body %></div>

        <a href="<%= learn_more_link %>" target="_blank" rel="noopener noreferrer">Troubleshoot Dependabot errors</a>
      <% elsif broken? %>
        <div>
          Dependabot updates have stopped for your repository due to repeated errors. To see logs, click "Check for Updates" and Dependabot will try again.
        </div>
      <% else %>
        <span class="color-fg-muted text-small">
          <% if update_job.finished_at %>
            Finished <%= time_ago_in_words_js Time.at(update_job.finished_at.seconds) %>
          <% else %>
            Running now
          <% end %>
        </span>
      <% end %>

    </div>

    <div class="flash-action">
      <% if access_recommendation? %>
        <% if adminable_by_current_user? %>
          <%= form_tag network_apply_dependabot_repository_access_recommendations_path(repository: repository, user_id: owner), method: :post do %>
            <input type="hidden" name="update_config_id" value="<%= update_job.update_config_id %>">
            <input type="hidden" name="update_job_id" value="<%= update_job.id %>">
            <% grantable_repositories.pluck(:id).each do |id| %>
              <input type="hidden" name="repository_ids[]" value="<%= id %>">
            <% end %>

            <%= render Primer::ButtonComponent.new(mr: 2, type: :submit) do %>Grant access<% end %>
          <% end %>
        <% end %>
      <% end %>
    </div>
  </div>
<% end %>

#!/bin/sh
#/ Usage: build-codeload
#/        build-codeload <branch>
#/ Build an app local version of codeload from https://github.com/github/codeload.
#/
#/ In the first form, build and install the version specified in config/codeload-version.
#/ This is run automatically by script/bootstrap for all development environments.
#/
#/ When <branch> is given, fetch the latest from the repository, build codeload at
#/ the specified branch or tag and then update the config/codeload-version file with
#/ the appropriate commit sha1. Add and commit the changed config/codeload-version file to
#/ update everyone else's environment the next time they sync with your branch.
set -e
unset CDPATH

# show usage
if [ "$1" = "--help" ]; then
    grep ^#/ <"$0" |cut -c4-
    exit
fi

# change into root project dir
cd "$(dirname "$0")/.."

# revision where we should build
pinned=$(cat config/codeload-version | grep -v ^#)
revision="${1:-$pinned}"
short_revision="$(echo $revision | cut -c1-10)"

# codeload repository URL to clone from. this assumes that SSH is setup properly for
# the current user.
giturl="$(./script/gh-clone-url github/codeload)"

# build path locations
builddir="vendor/codeload"
installdir="vendor/codeload"
logfile="log/codeload-build.log"

# fetch the remote repository into the builddir
fetch() {
    progress=
    [ -t 1 ] && progress="--progress"
    git --git-dir="$builddir/.git" \
        fetch -u -q $progress --prune --force "$giturl" "+refs/heads/*:refs/heads/*"
}

check_codeload_ng() {
    if [ "$revision" = "$(cat "$installdir/ng/version" 2>/dev/null)" -a -x "$installdir/ng/codeload-ng" ]; then
        return 0
    else
        return 1
    fi
}

# Build codeload-ng from the save codebase as codeload. We rely on the codeload
# build setting up the repository including fetching if necessary.
build_codeload_ng () {
    (
	logfile="log/codeload-build-ng.log"

	# bail if the already built revision is up-to-date
	if check_codeload_ng; then
	    echo "codeload-ng build $short_revision is up-to-date."
	    exit 0
	fi

	if [ -n "$GITHUB_PACKAGES_SUBPROJECT_CACHE_READ" ] &&
	   [ -z "$GITHUB_PACKAGES_DISABLE_SUBPROJECT_CACHE_READ" ] &&
	   ./script/subproject-prebuild -d $installdir -v $revision download codeload-ng &&
	   check_codeload_ng; then
	    echo "codeload-ng build $short_revision is up-to-date."
	    exit 0
	fi

	# clone or fetch the git repo if needed
	if [ ! -d "$builddir/.git" ]; then
		echo "Fetching $giturl for the first time. This may take a while." 2>&1
		git init -q "$builddir"
		fetch
	elif [ "$pinned" != "$revision" ]; then
		echo "Fetching $giturl for update ..." 2>&1
		fetch
	elif ! git --git-dir="$builddir/.git" cat-file -e "$revision" 2>/dev/null; then
		echo "Fetching $giturl for update ..." 2>&1
		fetch
	fi

	# resolve requested revision to commit oid.
	commit=$(git --git-dir="$builddir/.git" rev-parse --verify -q "$revision" || true)
	if ! git --git-dir="$builddir/.git" cat-file -e "$commit" 2>/dev/null ; then
	    echo "ERROR: Revision not found: $revision" 2>&1
	    exit 1
	fi

	DOCKER_USER_GROUP="$(id -u $USER):$(id -g $USER)"

	echo "codeload-ng build at $(echo $commit | cut -c1-10) commencing (see $logfile) ..."
	set +e
	(
	    set -ex
	    cd "$builddir"
	    GOARCH=amd64 # uname says x86_64 which Go doesn't like, we can revisit if we want to move to ARM or something
	    GOOS=$(uname -s | tr '[A-Z]' '[a-z]')
	    time git --git-dir=".git" --work-tree="." reset --hard "$commit"
	    time docker run --rm \
		 --network=none \
		 -v "$PWD:/workspace" \
		 -e "GOCACHE=/tmp/.cache" -e GOOS="$GOOS" -e GOARCH="$GOARCH" \
		 -u "$DOCKER_USER_GROUP" \
		 golang:1.18 \
		 make -C /workspace/ng
	) 1> "$logfile" 2>&1
	res=$?
	set -e

	# check for failure
	if [ $res -ne 0 ]; then
	    echo "!! codeload-ng build failed oh no. The last lines of output follow:" 2>&1
	    tail -10 "$logfile" 2>&1
	    echo "** See $logfile for more ..." 2>&1
	    exit $res
	fi

	# write the current build version file
	echo "$commit" > "$installdir/ng/version"

	if [ -n "$GITHUB_PACKAGES_SUBPROJECT_CACHE_WRITE" ]; then
	    # Never fail the build on a failed upload.
	    script/subproject-prebuild -d $installdir -v $revision upload codeload-ng || true
	fi

	echo "$($installdir/ng/codeload-ng --version), installed at $installdir/ng."
	true
    )
}

build_codeload_ng || exit $?

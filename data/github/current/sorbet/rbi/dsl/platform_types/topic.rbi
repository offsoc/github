# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PlatformTypes::Topic`.
# Please instead update this file by running `bin/tapioca dsl PlatformTypes::Topic`.

class PlatformTypes::Topic < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(T.nilable(PlatformTypes::Topic)) }
  def alias_source_topic; end

  sig { returns(T::Boolean) }
  def alias_source_topic?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def created_at; end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(String)) }
  def created_by; end

  sig { returns(T::Boolean) }
  def created_by?; end

  sig { returns(T.nilable(Integer)) }
  def database_id; end

  sig { returns(T::Boolean) }
  def database_id?; end

  sig { returns(T.nilable(String)) }
  def description; end

  sig { returns(T::Boolean) }
  def description?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def description_html; end

  sig { returns(T::Boolean) }
  def description_html?; end

  sig { returns(String) }
  def display_name; end

  sig { returns(T::Boolean) }
  def display_name?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def external_url; end

  sig { returns(T::Boolean) }
  def external_url?; end

  sig { returns(T.nilable(String)) }
  def formatted_days_since_latest_release; end

  sig { returns(T::Boolean) }
  def formatted_days_since_latest_release?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def github_url; end

  sig { returns(T::Boolean) }
  def github_url?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T::Boolean) }
  def is_curated; end

  sig { returns(T::Boolean) }
  def is_curated?; end

  sig { returns(T::Boolean) }
  def is_featured; end

  sig { returns(T::Boolean) }
  def is_featured?; end

  sig { returns(T::Boolean) }
  def is_flagged; end

  sig { returns(T::Boolean) }
  def is_flagged?; end

  sig { returns(T.nilable(T::Boolean)) }
  def is_github_url_a_repository; end

  sig { returns(T::Boolean) }
  def is_github_url_a_repository?; end

  sig { returns(T.nilable(PlatformTypes::Release)) }
  def latest_release; end

  sig { returns(T::Boolean) }
  def latest_release?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def logo_url; end

  sig { returns(T::Boolean) }
  def logo_url?; end

  sig { returns(String) }
  def name; end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(T::Array[PlatformTypes::Topic]) }
  def related_topics; end

  sig { returns(T::Boolean) }
  def related_topics?; end

  sig { returns(T.nilable(String)) }
  def released; end

  sig { returns(T::Boolean) }
  def released?; end

  sig { returns(PlatformTypes::RepositoryConnection) }
  def repositories; end

  sig { returns(T::Boolean) }
  def repositories?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def resource_path; end

  sig { returns(T::Boolean) }
  def resource_path?; end

  sig { returns(T.nilable(String)) }
  def short_description; end

  sig { returns(T::Boolean) }
  def short_description?; end

  sig { returns(T.nilable(PlatformTypes::TopicStafftoolsInfo)) }
  def stafftools_info; end

  sig { returns(T::Boolean) }
  def stafftools_info?; end

  sig { returns(Integer) }
  def stargazer_count; end

  sig { returns(T::Boolean) }
  def stargazer_count?; end

  sig { returns(PlatformTypes::StargazerConnection) }
  def stargazers; end

  sig { returns(T::Boolean) }
  def stargazers?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def url; end

  sig { returns(T::Boolean) }
  def url?; end

  sig { returns(T::Boolean) }
  def viewer_can_star; end

  sig { returns(T::Boolean) }
  def viewer_can_star?; end

  sig { returns(T::Boolean) }
  def viewer_has_starred; end

  sig { returns(T::Boolean) }
  def viewer_has_starred?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def wikipedia_url; end

  sig { returns(T::Boolean) }
  def wikipedia_url?; end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `BillingPlatform::Api::V1::Discount`.
# Please instead update this file by running `bin/tapioca dsl BillingPlatform::Api::V1::Discount`.

class BillingPlatform::Api::V1::Discount
  sig do
    params(
      customerId: T.nilable(String),
      endDate: T.nilable(Integer),
      percentage: T.nilable(Float),
      startDate: T.nilable(Integer),
      targetAmount: T.nilable(Float),
      targets: T.nilable(T.any(Google::Protobuf::RepeatedField[BillingPlatform::Api::V1::DiscountTarget], T::Array[BillingPlatform::Api::V1::DiscountTarget])),
      uuid: T.nilable(String)
    ).void
  end
  def initialize(customerId: nil, endDate: nil, percentage: nil, startDate: nil, targetAmount: nil, targets: T.unsafe(nil), uuid: nil); end

  sig { void }
  def clear_customerId; end

  sig { void }
  def clear_endDate; end

  sig { void }
  def clear_percentage; end

  sig { void }
  def clear_startDate; end

  sig { void }
  def clear_targetAmount; end

  sig { void }
  def clear_targets; end

  sig { void }
  def clear_uuid; end

  sig { returns(String) }
  def customerId; end

  sig { params(value: String).void }
  def customerId=(value); end

  sig { returns(Integer) }
  def endDate; end

  sig { params(value: Integer).void }
  def endDate=(value); end

  sig { returns(Float) }
  def percentage; end

  sig { params(value: Float).void }
  def percentage=(value); end

  sig { returns(Integer) }
  def startDate; end

  sig { params(value: Integer).void }
  def startDate=(value); end

  sig { returns(Float) }
  def targetAmount; end

  sig { params(value: Float).void }
  def targetAmount=(value); end

  sig { returns(Google::Protobuf::RepeatedField[BillingPlatform::Api::V1::DiscountTarget]) }
  def targets; end

  sig { params(value: Google::Protobuf::RepeatedField[BillingPlatform::Api::V1::DiscountTarget]).void }
  def targets=(value); end

  sig { returns(String) }
  def uuid; end

  sig { params(value: String).void }
  def uuid=(value); end
end

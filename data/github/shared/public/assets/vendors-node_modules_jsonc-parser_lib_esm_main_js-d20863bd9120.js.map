{"version":3,"file":"vendors-node_modules_jsonc-parser_lib_esm_main_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/jsonc-parser/lib/esm/impl/scanner.js","node_modules/jsonc-parser/lib/esm/impl/parser.js","node_modules/jsonc-parser/lib/esm/main.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia = false) {\n    const len = text.length;\n    let pos = 0, value = '', tokenOffset = 0, token = 16 /* SyntaxKind.Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* ScanError.None */;\n    function scanHexDigits(count, exact) {\n        let digits = 0;\n        let value = 0;\n        while (digits < count || !exact) {\n            let ch = text.charCodeAt(pos);\n            if (ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */) {\n                value = value * 16 + ch - 48 /* CharacterCodes._0 */;\n            }\n            else if (ch >= 65 /* CharacterCodes.A */ && ch <= 70 /* CharacterCodes.F */) {\n                value = value * 16 + ch - 65 /* CharacterCodes.A */ + 10;\n            }\n            else if (ch >= 97 /* CharacterCodes.a */ && ch <= 102 /* CharacterCodes.f */) {\n                value = value * 16 + ch - 97 /* CharacterCodes.a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* SyntaxKind.Unknown */;\n        scanError = 0 /* ScanError.None */;\n    }\n    function scanNumber() {\n        let start = pos;\n        if (text.charCodeAt(pos) === 48 /* CharacterCodes._0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* CharacterCodes.dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        let end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* CharacterCodes.E */ || text.charCodeAt(pos) === 101 /* CharacterCodes.e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* CharacterCodes.plus */ || text.charCodeAt(pos) === 45 /* CharacterCodes.minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        let result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                break;\n            }\n            const ch = text.charCodeAt(pos);\n            if (ch === 34 /* CharacterCodes.doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* CharacterCodes.backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                    break;\n                }\n                const ch2 = text.charCodeAt(pos++);\n                switch (ch2) {\n                    case 34 /* CharacterCodes.doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* CharacterCodes.backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* CharacterCodes.slash */:\n                        result += '/';\n                        break;\n                    case 98 /* CharacterCodes.b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* CharacterCodes.f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* CharacterCodes.n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* CharacterCodes.r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* CharacterCodes.t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* CharacterCodes.u */:\n                        const ch3 = scanHexDigits(4, true);\n                        if (ch3 >= 0) {\n                            result += String.fromCharCode(ch3);\n                        }\n                        else {\n                            scanError = 4 /* ScanError.InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* ScanError.InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* ScanError.InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* ScanError.None */;\n        tokenOffset = pos;\n        lineStartOffset = lineNumber;\n        prevTokenLineStartOffset = tokenLineStartOffset;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* SyntaxKind.EOF */;\n        }\n        let code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* SyntaxKind.Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            lineNumber++;\n            tokenLineStartOffset = pos;\n            return token = 14 /* SyntaxKind.LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* CharacterCodes.openBrace */:\n                pos++;\n                return token = 1 /* SyntaxKind.OpenBraceToken */;\n            case 125 /* CharacterCodes.closeBrace */:\n                pos++;\n                return token = 2 /* SyntaxKind.CloseBraceToken */;\n            case 91 /* CharacterCodes.openBracket */:\n                pos++;\n                return token = 3 /* SyntaxKind.OpenBracketToken */;\n            case 93 /* CharacterCodes.closeBracket */:\n                pos++;\n                return token = 4 /* SyntaxKind.CloseBracketToken */;\n            case 58 /* CharacterCodes.colon */:\n                pos++;\n                return token = 6 /* SyntaxKind.ColonToken */;\n            case 44 /* CharacterCodes.comma */:\n                pos++;\n                return token = 5 /* SyntaxKind.CommaToken */;\n            // strings\n            case 34 /* CharacterCodes.doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* SyntaxKind.StringLiteral */;\n            // comments\n            case 47 /* CharacterCodes.slash */:\n                const start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* SyntaxKind.LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* CharacterCodes.asterisk */) {\n                    pos += 2;\n                    const safeLength = len - 1; // For lookahead.\n                    let commentClosed = false;\n                    while (pos < safeLength) {\n                        const ch = text.charCodeAt(pos);\n                        if (ch === 42 /* CharacterCodes.asterisk */ && text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                        if (isLineBreak(ch)) {\n                            if (ch === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                                pos++;\n                            }\n                            lineNumber++;\n                            tokenLineStartOffset = pos;\n                        }\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* ScanError.UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* SyntaxKind.BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* SyntaxKind.Unknown */;\n            // numbers\n            case 45 /* CharacterCodes.minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* SyntaxKind.Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* CharacterCodes._0 */:\n            case 49 /* CharacterCodes._1 */:\n            case 50 /* CharacterCodes._2 */:\n            case 51 /* CharacterCodes._3 */:\n            case 52 /* CharacterCodes._4 */:\n            case 53 /* CharacterCodes._5 */:\n            case 54 /* CharacterCodes._6 */:\n            case 55 /* CharacterCodes._7 */:\n            case 56 /* CharacterCodes._8 */:\n            case 57 /* CharacterCodes._9 */:\n                value += scanNumber();\n                return token = 11 /* SyntaxKind.NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* SyntaxKind.TrueKeyword */;\n                        case 'false': return token = 9 /* SyntaxKind.FalseKeyword */;\n                        case 'null': return token = 7 /* SyntaxKind.NullKeyword */;\n                    }\n                    return token = 16 /* SyntaxKind.Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* SyntaxKind.Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* CharacterCodes.closeBrace */:\n            case 93 /* CharacterCodes.closeBracket */:\n            case 123 /* CharacterCodes.openBrace */:\n            case 91 /* CharacterCodes.openBracket */:\n            case 34 /* CharacterCodes.doubleQuote */:\n            case 58 /* CharacterCodes.colon */:\n            case 44 /* CharacterCodes.comma */:\n            case 47 /* CharacterCodes.slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        let result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* SyntaxKind.LineCommentTrivia */ && result <= 15 /* SyntaxKind.Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: () => pos,\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: () => token,\n        getTokenValue: () => value,\n        getTokenOffset: () => tokenOffset,\n        getTokenLength: () => pos - tokenOffset,\n        getTokenStartLine: () => lineStartOffset,\n        getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,\n        getTokenError: () => scanError,\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* CharacterCodes.space */ || ch === 9 /* CharacterCodes.tab */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* CharacterCodes.lineFeed */ || ch === 13 /* CharacterCodes.carriageReturn */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */;\n}\nvar CharacterCodes;\n(function (CharacterCodes) {\n    CharacterCodes[CharacterCodes[\"lineFeed\"] = 10] = \"lineFeed\";\n    CharacterCodes[CharacterCodes[\"carriageReturn\"] = 13] = \"carriageReturn\";\n    CharacterCodes[CharacterCodes[\"space\"] = 32] = \"space\";\n    CharacterCodes[CharacterCodes[\"_0\"] = 48] = \"_0\";\n    CharacterCodes[CharacterCodes[\"_1\"] = 49] = \"_1\";\n    CharacterCodes[CharacterCodes[\"_2\"] = 50] = \"_2\";\n    CharacterCodes[CharacterCodes[\"_3\"] = 51] = \"_3\";\n    CharacterCodes[CharacterCodes[\"_4\"] = 52] = \"_4\";\n    CharacterCodes[CharacterCodes[\"_5\"] = 53] = \"_5\";\n    CharacterCodes[CharacterCodes[\"_6\"] = 54] = \"_6\";\n    CharacterCodes[CharacterCodes[\"_7\"] = 55] = \"_7\";\n    CharacterCodes[CharacterCodes[\"_8\"] = 56] = \"_8\";\n    CharacterCodes[CharacterCodes[\"_9\"] = 57] = \"_9\";\n    CharacterCodes[CharacterCodes[\"a\"] = 97] = \"a\";\n    CharacterCodes[CharacterCodes[\"b\"] = 98] = \"b\";\n    CharacterCodes[CharacterCodes[\"c\"] = 99] = \"c\";\n    CharacterCodes[CharacterCodes[\"d\"] = 100] = \"d\";\n    CharacterCodes[CharacterCodes[\"e\"] = 101] = \"e\";\n    CharacterCodes[CharacterCodes[\"f\"] = 102] = \"f\";\n    CharacterCodes[CharacterCodes[\"g\"] = 103] = \"g\";\n    CharacterCodes[CharacterCodes[\"h\"] = 104] = \"h\";\n    CharacterCodes[CharacterCodes[\"i\"] = 105] = \"i\";\n    CharacterCodes[CharacterCodes[\"j\"] = 106] = \"j\";\n    CharacterCodes[CharacterCodes[\"k\"] = 107] = \"k\";\n    CharacterCodes[CharacterCodes[\"l\"] = 108] = \"l\";\n    CharacterCodes[CharacterCodes[\"m\"] = 109] = \"m\";\n    CharacterCodes[CharacterCodes[\"n\"] = 110] = \"n\";\n    CharacterCodes[CharacterCodes[\"o\"] = 111] = \"o\";\n    CharacterCodes[CharacterCodes[\"p\"] = 112] = \"p\";\n    CharacterCodes[CharacterCodes[\"q\"] = 113] = \"q\";\n    CharacterCodes[CharacterCodes[\"r\"] = 114] = \"r\";\n    CharacterCodes[CharacterCodes[\"s\"] = 115] = \"s\";\n    CharacterCodes[CharacterCodes[\"t\"] = 116] = \"t\";\n    CharacterCodes[CharacterCodes[\"u\"] = 117] = \"u\";\n    CharacterCodes[CharacterCodes[\"v\"] = 118] = \"v\";\n    CharacterCodes[CharacterCodes[\"w\"] = 119] = \"w\";\n    CharacterCodes[CharacterCodes[\"x\"] = 120] = \"x\";\n    CharacterCodes[CharacterCodes[\"y\"] = 121] = \"y\";\n    CharacterCodes[CharacterCodes[\"z\"] = 122] = \"z\";\n    CharacterCodes[CharacterCodes[\"A\"] = 65] = \"A\";\n    CharacterCodes[CharacterCodes[\"B\"] = 66] = \"B\";\n    CharacterCodes[CharacterCodes[\"C\"] = 67] = \"C\";\n    CharacterCodes[CharacterCodes[\"D\"] = 68] = \"D\";\n    CharacterCodes[CharacterCodes[\"E\"] = 69] = \"E\";\n    CharacterCodes[CharacterCodes[\"F\"] = 70] = \"F\";\n    CharacterCodes[CharacterCodes[\"G\"] = 71] = \"G\";\n    CharacterCodes[CharacterCodes[\"H\"] = 72] = \"H\";\n    CharacterCodes[CharacterCodes[\"I\"] = 73] = \"I\";\n    CharacterCodes[CharacterCodes[\"J\"] = 74] = \"J\";\n    CharacterCodes[CharacterCodes[\"K\"] = 75] = \"K\";\n    CharacterCodes[CharacterCodes[\"L\"] = 76] = \"L\";\n    CharacterCodes[CharacterCodes[\"M\"] = 77] = \"M\";\n    CharacterCodes[CharacterCodes[\"N\"] = 78] = \"N\";\n    CharacterCodes[CharacterCodes[\"O\"] = 79] = \"O\";\n    CharacterCodes[CharacterCodes[\"P\"] = 80] = \"P\";\n    CharacterCodes[CharacterCodes[\"Q\"] = 81] = \"Q\";\n    CharacterCodes[CharacterCodes[\"R\"] = 82] = \"R\";\n    CharacterCodes[CharacterCodes[\"S\"] = 83] = \"S\";\n    CharacterCodes[CharacterCodes[\"T\"] = 84] = \"T\";\n    CharacterCodes[CharacterCodes[\"U\"] = 85] = \"U\";\n    CharacterCodes[CharacterCodes[\"V\"] = 86] = \"V\";\n    CharacterCodes[CharacterCodes[\"W\"] = 87] = \"W\";\n    CharacterCodes[CharacterCodes[\"X\"] = 88] = \"X\";\n    CharacterCodes[CharacterCodes[\"Y\"] = 89] = \"Y\";\n    CharacterCodes[CharacterCodes[\"Z\"] = 90] = \"Z\";\n    CharacterCodes[CharacterCodes[\"asterisk\"] = 42] = \"asterisk\";\n    CharacterCodes[CharacterCodes[\"backslash\"] = 92] = \"backslash\";\n    CharacterCodes[CharacterCodes[\"closeBrace\"] = 125] = \"closeBrace\";\n    CharacterCodes[CharacterCodes[\"closeBracket\"] = 93] = \"closeBracket\";\n    CharacterCodes[CharacterCodes[\"colon\"] = 58] = \"colon\";\n    CharacterCodes[CharacterCodes[\"comma\"] = 44] = \"comma\";\n    CharacterCodes[CharacterCodes[\"dot\"] = 46] = \"dot\";\n    CharacterCodes[CharacterCodes[\"doubleQuote\"] = 34] = \"doubleQuote\";\n    CharacterCodes[CharacterCodes[\"minus\"] = 45] = \"minus\";\n    CharacterCodes[CharacterCodes[\"openBrace\"] = 123] = \"openBrace\";\n    CharacterCodes[CharacterCodes[\"openBracket\"] = 91] = \"openBracket\";\n    CharacterCodes[CharacterCodes[\"plus\"] = 43] = \"plus\";\n    CharacterCodes[CharacterCodes[\"slash\"] = 47] = \"slash\";\n    CharacterCodes[CharacterCodes[\"formFeed\"] = 12] = \"formFeed\";\n    CharacterCodes[CharacterCodes[\"tab\"] = 9] = \"tab\";\n})(CharacterCodes || (CharacterCodes = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner';\nvar ParseOptions;\n(function (ParseOptions) {\n    ParseOptions.DEFAULT = {\n        allowTrailingComma: false\n    };\n})(ParseOptions || (ParseOptions = {}));\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    const segments = []; // strings or numbers\n    const earlyReturnException = new Object();\n    let previousNode = undefined;\n    const previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object',\n        parent: undefined\n    };\n    let isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.colonOffset = undefined;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: (name, offset, length) => {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.pop();\n            },\n            onArrayBegin: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.push(0);\n            },\n            onArrayEnd: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.pop();\n            },\n            onLiteralValue: (value, offset, length) => {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: (sep, offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.colonOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = undefined;\n                }\n                else if (sep === ',') {\n                    const last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = undefined;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode,\n        isAtPropertyKey,\n        matches: (pattern) => {\n            let k = 0;\n            for (let i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors = [], options = ParseOptions.DEFAULT) {\n    let currentProperty = null;\n    let currentParent = [];\n    const previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty !== null) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    const visitor = {\n        onObjectBegin: () => {\n            const object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: (name) => {\n            currentProperty = name;\n        },\n        onObjectEnd: () => {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: () => {\n            const array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: () => {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: (error, offset, length) => {\n            errors.push({ error, offset, length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors = [], options = ParseOptions.DEFAULT) {\n    let currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: undefined }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    const visitor = {\n        onObjectBegin: (offset) => {\n            currentParent = onValue({ type: 'object', offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: (name, offset, length) => {\n            currentParent = onValue({ type: 'property', offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset, length, parent: currentParent });\n        },\n        onObjectEnd: (offset, length) => {\n            ensurePropertyComplete(offset + length); // in case of a missing value for a property: make sure property is complete\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: (offset, length) => {\n            currentParent = onValue({ type: 'array', offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: (offset, length) => {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: (value, offset, length) => {\n            onValue({ type: getNodeType(value), offset, length, parent: currentParent, value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: (sep, offset, length) => {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.colonOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: (error, offset, length) => {\n            errors.push({ error, offset, length });\n        }\n    };\n    visit(text, visitor, options);\n    const result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return undefined;\n    }\n    let node = root;\n    for (let segment of path) {\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return undefined;\n            }\n            let found = false;\n            for (const propertyNode of node.children) {\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment && propertyNode.children.length === 2) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return undefined;\n            }\n        }\n        else {\n            const index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return undefined;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport function getNodePath(node) {\n    if (!node.parent || !node.parent.children) {\n        return [];\n    }\n    const path = getNodePath(node.parent);\n    if (node.parent.type === 'property') {\n        const key = node.parent.children[0].value;\n        path.push(key);\n    }\n    else if (node.parent.type === 'array') {\n        const index = node.parent.children.indexOf(node);\n        if (index !== -1) {\n            path.push(index);\n        }\n    }\n    return path;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    switch (node.type) {\n        case 'array':\n            return node.children.map(getNodeValue);\n        case 'object':\n            const obj = Object.create(null);\n            for (let prop of node.children) {\n                const valueNode = prop.children[1];\n                if (valueNode) {\n                    obj[prop.children[0].value] = getNodeValue(valueNode);\n                }\n            }\n            return obj;\n        case 'null':\n        case 'string':\n        case 'number':\n        case 'boolean':\n            return node.value;\n        default:\n            return undefined;\n    }\n}\nexport function contains(node, offset, includeRightBound = false) {\n    return (offset >= node.offset && offset < (node.offset + node.length)) || includeRightBound && (offset === (node.offset + node.length));\n}\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport function findNodeAtOffset(node, offset, includeRightBound = false) {\n    if (contains(node, offset, includeRightBound)) {\n        const children = node.children;\n        if (Array.isArray(children)) {\n            for (let i = 0; i < children.length && children[i].offset <= offset; i++) {\n                const item = findNodeAtOffset(children[i], offset, includeRightBound);\n                if (item) {\n                    return item;\n                }\n            }\n        }\n        return node;\n    }\n    return undefined;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options = ParseOptions.DEFAULT) {\n    const _scanner = createScanner(text, false);\n    // Important: Only pass copies of this to visitor functions to prevent accidental modification, and\n    // to not affect visitor functions which stored a reference to a previous JSONPath\n    const _jsonPath = [];\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;\n    }\n    function toNoArgVisitWithPath(visitFunction) {\n        return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;\n    }\n    function toOneArgVisitWithPath(visitFunction) {\n        return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;\n    }\n    const onObjectBegin = toNoArgVisitWithPath(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisitWithPath(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    const disallowComments = options && options.disallowComments;\n    const allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            const token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* ScanError.InvalidUnicode */:\n                    handleError(14 /* ParseErrorCode.InvalidUnicode */);\n                    break;\n                case 5 /* ScanError.InvalidEscapeCharacter */:\n                    handleError(15 /* ParseErrorCode.InvalidEscapeCharacter */);\n                    break;\n                case 3 /* ScanError.UnexpectedEndOfNumber */:\n                    handleError(13 /* ParseErrorCode.UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* ScanError.UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* ParseErrorCode.UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* ScanError.UnexpectedEndOfString */:\n                    handleError(12 /* ParseErrorCode.UnexpectedEndOfString */);\n                    break;\n                case 6 /* ScanError.InvalidCharacter */:\n                    handleError(16 /* ParseErrorCode.InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* SyntaxKind.LineCommentTrivia */:\n                case 13 /* SyntaxKind.BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* ParseErrorCode.InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* SyntaxKind.Unknown */:\n                    handleError(1 /* ParseErrorCode.InvalidSymbol */);\n                    break;\n                case 15 /* SyntaxKind.Trivia */:\n                case 14 /* SyntaxKind.LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter = [], skipUntil = []) {\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            let token = _scanner.getToken();\n            while (token !== 17 /* SyntaxKind.EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        const value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n            // add property name afterwards\n            _jsonPath.push(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* SyntaxKind.NumericLiteral */:\n                const tokenValue = _scanner.getTokenValue();\n                let value = Number(tokenValue);\n                if (isNaN(value)) {\n                    handleError(2 /* ParseErrorCode.InvalidNumberFormat */);\n                    value = 0;\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* SyntaxKind.NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* SyntaxKind.TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* SyntaxKind.FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* SyntaxKind.StringLiteral */) {\n            handleError(3 /* ParseErrorCode.PropertyNameExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* SyntaxKind.ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ParseErrorCode.ValueExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ParseErrorCode.ColonExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n        }\n        _jsonPath.pop(); // remove processed property name\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        let needsComma = false;\n        while (_scanner.getToken() !== 2 /* SyntaxKind.CloseBraceToken */ && _scanner.getToken() !== 17 /* SyntaxKind.EOF */) {\n            if (_scanner.getToken() === 5 /* SyntaxKind.CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* SyntaxKind.CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* ParseErrorCode.CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ParseErrorCode.ValueExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* SyntaxKind.CloseBraceToken */) {\n            handleError(7 /* ParseErrorCode.CloseBraceExpected */, [2 /* SyntaxKind.CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        let isFirstElement = true;\n        let needsComma = false;\n        while (_scanner.getToken() !== 4 /* SyntaxKind.CloseBracketToken */ && _scanner.getToken() !== 17 /* SyntaxKind.EOF */) {\n            if (_scanner.getToken() === 5 /* SyntaxKind.CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* SyntaxKind.CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* ParseErrorCode.CommaExpected */, [], []);\n            }\n            if (isFirstElement) {\n                _jsonPath.push(0);\n                isFirstElement = false;\n            }\n            else {\n                _jsonPath[_jsonPath.length - 1]++;\n            }\n            if (!parseValue()) {\n                handleError(4 /* ParseErrorCode.ValueExpected */, [], [4 /* SyntaxKind.CloseBracketToken */, 5 /* SyntaxKind.CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (!isFirstElement) {\n            _jsonPath.pop(); // remove array index\n        }\n        if (_scanner.getToken() !== 4 /* SyntaxKind.CloseBracketToken */) {\n            handleError(8 /* ParseErrorCode.CloseBracketExpected */, [4 /* SyntaxKind.CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* SyntaxKind.OpenBracketToken */:\n                return parseArray();\n            case 1 /* SyntaxKind.OpenBraceToken */:\n                return parseObject();\n            case 10 /* SyntaxKind.StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* SyntaxKind.EOF */) {\n        if (options.allowEmptyContent) {\n            return true;\n        }\n        handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n        return false;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* SyntaxKind.EOF */) {\n        handleError(9 /* ParseErrorCode.EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    let _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* SyntaxKind.LineCommentTrivia */:\n            case 13 /* SyntaxKind.BlockCommentTrivia */:\n            case 17 /* SyntaxKind.EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== undefined) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* SyntaxKind.EOF */);\n    return parts.join('');\n}\nexport function getNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        case 'object': {\n            if (!value) {\n                return 'null';\n            }\n            else if (Array.isArray(value)) {\n                return 'array';\n            }\n            return 'object';\n        }\n        default: return 'null';\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format';\nimport * as edit from './impl/edit';\nimport * as scanner from './impl/scanner';\nimport * as parser from './impl/parser';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport const createScanner = scanner.createScanner;\nexport var ScanError;\n(function (ScanError) {\n    ScanError[ScanError[\"None\"] = 0] = \"None\";\n    ScanError[ScanError[\"UnexpectedEndOfComment\"] = 1] = \"UnexpectedEndOfComment\";\n    ScanError[ScanError[\"UnexpectedEndOfString\"] = 2] = \"UnexpectedEndOfString\";\n    ScanError[ScanError[\"UnexpectedEndOfNumber\"] = 3] = \"UnexpectedEndOfNumber\";\n    ScanError[ScanError[\"InvalidUnicode\"] = 4] = \"InvalidUnicode\";\n    ScanError[ScanError[\"InvalidEscapeCharacter\"] = 5] = \"InvalidEscapeCharacter\";\n    ScanError[ScanError[\"InvalidCharacter\"] = 6] = \"InvalidCharacter\";\n})(ScanError || (ScanError = {}));\nexport var SyntaxKind;\n(function (SyntaxKind) {\n    SyntaxKind[SyntaxKind[\"OpenBraceToken\"] = 1] = \"OpenBraceToken\";\n    SyntaxKind[SyntaxKind[\"CloseBraceToken\"] = 2] = \"CloseBraceToken\";\n    SyntaxKind[SyntaxKind[\"OpenBracketToken\"] = 3] = \"OpenBracketToken\";\n    SyntaxKind[SyntaxKind[\"CloseBracketToken\"] = 4] = \"CloseBracketToken\";\n    SyntaxKind[SyntaxKind[\"CommaToken\"] = 5] = \"CommaToken\";\n    SyntaxKind[SyntaxKind[\"ColonToken\"] = 6] = \"ColonToken\";\n    SyntaxKind[SyntaxKind[\"NullKeyword\"] = 7] = \"NullKeyword\";\n    SyntaxKind[SyntaxKind[\"TrueKeyword\"] = 8] = \"TrueKeyword\";\n    SyntaxKind[SyntaxKind[\"FalseKeyword\"] = 9] = \"FalseKeyword\";\n    SyntaxKind[SyntaxKind[\"StringLiteral\"] = 10] = \"StringLiteral\";\n    SyntaxKind[SyntaxKind[\"NumericLiteral\"] = 11] = \"NumericLiteral\";\n    SyntaxKind[SyntaxKind[\"LineCommentTrivia\"] = 12] = \"LineCommentTrivia\";\n    SyntaxKind[SyntaxKind[\"BlockCommentTrivia\"] = 13] = \"BlockCommentTrivia\";\n    SyntaxKind[SyntaxKind[\"LineBreakTrivia\"] = 14] = \"LineBreakTrivia\";\n    SyntaxKind[SyntaxKind[\"Trivia\"] = 15] = \"Trivia\";\n    SyntaxKind[SyntaxKind[\"Unknown\"] = 16] = \"Unknown\";\n    SyntaxKind[SyntaxKind[\"EOF\"] = 17] = \"EOF\";\n})(SyntaxKind || (SyntaxKind = {}));\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport const getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore, always check the errors list to find out if the input was valid.\n */\nexport const parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport const parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport const findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the innermost node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport const findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport const getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport const getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport const visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport const stripComments = parser.stripComments;\nexport var ParseErrorCode;\n(function (ParseErrorCode) {\n    ParseErrorCode[ParseErrorCode[\"InvalidSymbol\"] = 1] = \"InvalidSymbol\";\n    ParseErrorCode[ParseErrorCode[\"InvalidNumberFormat\"] = 2] = \"InvalidNumberFormat\";\n    ParseErrorCode[ParseErrorCode[\"PropertyNameExpected\"] = 3] = \"PropertyNameExpected\";\n    ParseErrorCode[ParseErrorCode[\"ValueExpected\"] = 4] = \"ValueExpected\";\n    ParseErrorCode[ParseErrorCode[\"ColonExpected\"] = 5] = \"ColonExpected\";\n    ParseErrorCode[ParseErrorCode[\"CommaExpected\"] = 6] = \"CommaExpected\";\n    ParseErrorCode[ParseErrorCode[\"CloseBraceExpected\"] = 7] = \"CloseBraceExpected\";\n    ParseErrorCode[ParseErrorCode[\"CloseBracketExpected\"] = 8] = \"CloseBracketExpected\";\n    ParseErrorCode[ParseErrorCode[\"EndOfFileExpected\"] = 9] = \"EndOfFileExpected\";\n    ParseErrorCode[ParseErrorCode[\"InvalidCommentToken\"] = 10] = \"InvalidCommentToken\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfComment\"] = 11] = \"UnexpectedEndOfComment\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfString\"] = 12] = \"UnexpectedEndOfString\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfNumber\"] = 13] = \"UnexpectedEndOfNumber\";\n    ParseErrorCode[ParseErrorCode[\"InvalidUnicode\"] = 14] = \"InvalidUnicode\";\n    ParseErrorCode[ParseErrorCode[\"InvalidEscapeCharacter\"] = 15] = \"InvalidEscapeCharacter\";\n    ParseErrorCode[ParseErrorCode[\"InvalidCharacter\"] = 16] = \"InvalidCharacter\";\n})(ParseErrorCode || (ParseErrorCode = {}));\nexport function printParseErrorCode(code) {\n    switch (code) {\n        case 1 /* ParseErrorCode.InvalidSymbol */: return 'InvalidSymbol';\n        case 2 /* ParseErrorCode.InvalidNumberFormat */: return 'InvalidNumberFormat';\n        case 3 /* ParseErrorCode.PropertyNameExpected */: return 'PropertyNameExpected';\n        case 4 /* ParseErrorCode.ValueExpected */: return 'ValueExpected';\n        case 5 /* ParseErrorCode.ColonExpected */: return 'ColonExpected';\n        case 6 /* ParseErrorCode.CommaExpected */: return 'CommaExpected';\n        case 7 /* ParseErrorCode.CloseBraceExpected */: return 'CloseBraceExpected';\n        case 8 /* ParseErrorCode.CloseBracketExpected */: return 'CloseBracketExpected';\n        case 9 /* ParseErrorCode.EndOfFileExpected */: return 'EndOfFileExpected';\n        case 10 /* ParseErrorCode.InvalidCommentToken */: return 'InvalidCommentToken';\n        case 11 /* ParseErrorCode.UnexpectedEndOfComment */: return 'UnexpectedEndOfComment';\n        case 12 /* ParseErrorCode.UnexpectedEndOfString */: return 'UnexpectedEndOfString';\n        case 13 /* ParseErrorCode.UnexpectedEndOfNumber */: return 'UnexpectedEndOfNumber';\n        case 14 /* ParseErrorCode.InvalidUnicode */: return 'InvalidUnicode';\n        case 15 /* ParseErrorCode.InvalidEscapeCharacter */: return 'InvalidEscapeCharacter';\n        case 16 /* ParseErrorCode.InvalidCharacter */: return 'InvalidCharacter';\n    }\n    return '<unknown ParseErrorCode>';\n}\n/**\n * Computes the edit operations needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns The edit operations describing the formatting changes to the original document following the format described in {@linkcode EditResult}.\n * To apply the edit operations to the input, use {@linkcode applyEdits}.\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edit operations needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns The edit operations describing the changes to the original document, following the format described in {@linkcode EditResult}.\n * To apply the edit operations to the input, use {@linkcode applyEdits}.\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options);\n}\n/**\n * Applies edits to an input string.\n * @param text The input text\n * @param edits Edit operations following the format described in {@linkcode EditResult}.\n * @returns The text with the applied edits.\n * @throws An error if the edit operations are not well-formed as described in {@linkcode EditResult}.\n */\nexport function applyEdits(text, edits) {\n    let sortedEdits = edits.slice(0).sort((a, b) => {\n        const diff = a.offset - b.offset;\n        if (diff === 0) {\n            return a.length - b.length;\n        }\n        return diff;\n    });\n    let lastModifiedOffset = text.length;\n    for (let i = sortedEdits.length - 1; i >= 0; i--) {\n        let e = sortedEdits[i];\n        if (e.offset + e.length <= lastModifiedOffset) {\n            text = edit.applyEdit(text, e);\n        }\n        else {\n            throw new Error('Overlapping edit');\n        }\n        lastModifiedOffset = e.offset;\n    }\n    return text;\n}\n"],"names":["CharacterCodes","ParseOptions","ScanError","SyntaxKind","ParseErrorCode","isWhiteSpace","ch","isLineBreak","isDigit","getNodeValue","node","type","children","map","obj","Object","create","prop","valueNode","value","DEFAULT","allowTrailingComma","text","errors","options","currentProperty","currentParent","previousParents","onValue","Array","isArray","push","visit","visitor","_scanner","ignoreTrivia","len","length","pos","tokenOffset","token","lineNumber","lineStartOffset","tokenLineStartOffset","prevTokenLineStartOffset","scanError","scanNext","code","charCodeAt","String","fromCharCode","scanString","result","start","substring","ch3","scanHexDigits","count","exact","digits","safeLength","commentClosed","scanNumber","end","isUnknownContentCharacter","setPosition","newPosition","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenStartLine","getTokenStartCharacter","getTokenError","_jsonPath","toNoArgVisit","visitFunction","toNoArgVisitWithPath","slice","toOneArgVisit","arg","toOneArgVisitWithPath","onObjectBegin","onObjectProperty","onObjectEnd","onArrayBegin","onArrayEnd","onLiteralValue","onSeparator","onComment","onError","disallowComments","handleError","error","skipUntilAfter","skipUntil","indexOf","parseString","isValue","allowEmptyContent","parseValue","parseArray","isFirstElement","needsComma","pop","parseObject","parseLiteral","Number","isNaN","object","name","array","offset","printParseErrorCode"],"sourceRoot":""}
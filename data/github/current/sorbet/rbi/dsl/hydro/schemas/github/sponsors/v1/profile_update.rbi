# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Sponsors::V1::ProfileUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Sponsors::V1::ProfileUpdate`.

class Hydro::Schemas::Github::Sponsors::V1::ProfileUpdate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      full_description: T.nilable(String),
      listing: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing),
      listing_stafftools_metadata: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListingStafftoolsMetadata),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      sponsorable: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      stripe_connect_account: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::StripeConnectAccount)
    ).void
  end
  def initialize(actor: nil, full_description: nil, listing: nil, listing_stafftools_metadata: nil, request_context: nil, sponsorable: nil, stripe_connect_account: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_full_description; end

  sig { void }
  def clear_listing; end

  sig { void }
  def clear_listing_stafftools_metadata; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_sponsorable; end

  sig { void }
  def clear_stripe_connect_account; end

  sig { returns(String) }
  def full_description; end

  sig { params(value: String).void }
  def full_description=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing)) }
  def listing; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing)).void }
  def listing=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListingStafftoolsMetadata)) }
  def listing_stafftools_metadata; end

  sig do
    params(
      value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListingStafftoolsMetadata)
    ).void
  end
  def listing_stafftools_metadata=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def sponsorable; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def sponsorable=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::StripeConnectAccount)) }
  def stripe_connect_account; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::StripeConnectAccount)).void }
  def stripe_connect_account=(value); end
end

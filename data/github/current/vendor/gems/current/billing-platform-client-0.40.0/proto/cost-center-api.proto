syntax = "proto3";

package billing_platform.api.v1;

option go_package = "lib/twirp/proto";
option ruby_package = "BillingPlatform::Api::V1";

import "proto/base.proto";

service CostCenterApi {
    rpc GetAllCostCenters(GetAllCostCentersRequest) returns (GetAllCostCentersResponse);
    rpc GetCostCenter(GetCostCenterRequest) returns (GetCostCenterResponse);
    rpc FindFor(FindCostCenterForRequest) returns (FindCostCenterForResponse);
    rpc CreateCostCenter(CreateCostCenterRequest) returns (CreateCostCenterResponse);
    rpc UpdateCostCenter(UpdateCostCenterRequest) returns (UpdateCostCenterResponse);
    rpc AddResourceTo(AddResourceToCostCenterRequest) returns (AddResourceToCostCenterResponse);
    rpc RemoveResourceFrom(RemoveResourceFromCostCenterRequest) returns (RemoveResourceFromCostCenterResponse);
    rpc ArchiveCostCenter(ArchiveCostCenterRequest) returns (ArchiveCostCenterResponse);
}

message GetAllCostCentersRequest {
    string customerId = 1;
}

message GetAllCostCentersResponse {
    repeated CostCenter costCenters = 1;
}

message GetCostCenterRequest {
    CostCenterKey costCenterKey = 1;
}

message GetCostCenterResponse {
    CostCenter costCenter = 1;
}

message FindCostCenterForRequest {
    base.EntityDetail entityDetail = 1;
    string sku = 2;
}

message FindCostCenterForResponse {
    CostCenterKey costCenterKey = 1;
}

message CreateCostCenterRequest {
    string customerId = 1;
    string targetId = 2;
    CostCenterType targetType = 3;
    string name = 4;
    repeated Resource resources = 5;
}

message CreateCostCenterResponse {
    CostCenter costCenter = 1;
}

message UpdateCostCenterRequest {
    CostCenterKey key = 1;
    string targetId = 2;
    string name = 3;
    repeated Resource resourcesToAdd = 4;
    repeated Resource resourcesToRemove = 5;
}

message UpdateCostCenterResponse {
    CostCenter costCenter = 1;
}

message AddResourceToCostCenterRequest {
    reserved 2;
    reserved "resource";

    CostCenterKey key = 1;
    repeated Resource resources = 3;
}

message AddResourceToCostCenterResponse {
    bool success = 1;
    string message = 2;
}

message RemoveResourceFromCostCenterRequest {
    CostCenterKey key = 1;
    repeated Resource resources = 2;
}

message RemoveResourceFromCostCenterResponse {
    bool success = 1;
    string message = 2;
}

message ArchiveCostCenterRequest {
    CostCenterKey costCenterKey = 1;
}

message ArchiveCostCenterResponse {
    bool success = 1;
    string message = 2;
}

message CostCenter {
    CostCenterKey costCenterKey = 2;
    string name = 3;
    repeated Resource resources = 4;
    base.CostCenterState costCenterState = 5;
}

message CostCenterKey {
    string customerId = 1;
    CostCenterType targetType = 2;
    string targetId = 3;
    string uuid = 4;
}

enum CostCenterType {
    NoCostCenter = 0;
    GitHubEnterpriseCustomer = 1;
    ZuoraSubscription = 2;
    CreditCard = 3;
    AzureSubscription = 4;
}

message Resource {
    string id = 2;
    base.ResourceType type = 3;
}

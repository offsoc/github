#!/bin/bash

# We use bash to get "$PIPESTATUS"

#/ Usage: git-best-merge-base <base> <head>
#/
#/ Find the best merge base for merging $head to $base.  This script is
#/ very much like `git merge-base <base> <head>`, except that if $base
#/ and $head have multiple merge bases, this script chooses the best
#/ merge base among the alternatives more intelligently than "git
#/ merge-base".
#/
#/ The value returned by this script is also (usually) the best
#/ starting point for computing the overall diff for the branch; i.e.,
#/
#/     git diff $(git-best-merge-base $base $head)..$head
#/
#/ is almost equivalent to
#/
#/     git diff $base...$head
#/
#/ but the better choice of merge base often results in shorter diffs
#/ (sometimes dramatically shorter).
#/
#/ Parameters:
#/   <base>   The tip of the branch that $head will be merged back
#/            to.
#/   <head>   The tip of the feature branch.
#/
#/ If $base and $head have no common history, then exit with retcode 1.

# Show usage.
if test $# -ne 2 || test "$1" = "--help"
then
    grep '^#/' <"$0" | cut -c 4-
    exit 1
fi

set -e

base="$1"
head="$2"

# Note that `git merge-base` fails with retcode=1 if $base and $head
# have no common ancestors.  That will cause this script to exit with
# the same error code, which is just what we want.
merge_bases=$(git merge-base --all "$base" "$head")

case "${#merge_bases}" in
40)
    # One merge base -> use it.
    echo $merge_bases
    ;;
*)
    # Multiple merge bases -> pick the one for which
    # $merge_base..$head includes the fewest commits (which is
    # equivalent to it including the fewest commits that are already
    # in $base).  To ensure that the result is repeatable, if there is
    # a tie we choose the merge base that comes first when sorted by
    # SHA-1:
    printf "%s\n" $merge_bases |
        git ahead-behind --stdin --base $head |
        sort -k3,3n -k1 |
        sed -ne '1s/ .*//p'

    case ${PIPESTATUS[1]} in
    0)
        ;;
    141)
        # SIGPIPE: This shouldn't currently happen (sort consumes all
        # of its input).
        ;;
    *)
        echo "git ahead-behind failed" 1>&2
        exit 1
        ;;
    esac
    ;;
esac

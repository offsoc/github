<%# erblint:counter DeprecatedComponentsCounter 6 %>
<%# erblint:counter ButtonComponentMigrationCounter 2 %>
<% if web_socket_enabled? %>
  <div class="js-socket-channel js-updatable-content"
    data-channel="<%= live_update_view_channel(GitHub::WebSocket::Channels.custom_pattern_dry_run_status(owner)) %>"
    data-url="<%= form_actions_path %>"
    data-gid="<%= pattern.id %>"
  >
<% else %>
  <div>
<% end %>
  <div class="js-error-banner mb-2" hidden >
    <%= render(Primer::Beta::Flash.new(scheme: :danger)) %>
  </div>
  <% if dry_run_selected_repo_ids_json.nil? %>
    <%= render(Primer::Beta::Flash.new(scheme: :warning, mb: 3, test_selector: "dry-run-repos-flash-banner")) do %>Unable to load selected repositories for dry run. Please try again<% end %>
  <% end %>
  <%= render(Primer::Box.new(display: :flex, border: :bottom, border_color: :muted, mb: 3)) do %>
    <%= render Primer::Beta::Subhead.new(hide_border: true) do |component| %>
      <% component.with_heading(tag: :h2, test_selector: "header-text") do %>
        <% if settings_path %>
          <%= link_to settings_path_text, settings_path %> /
        <% end %>
        <%= header_text %>
      <% end %>
    <% end %>
    <% if generate_expressions_with_ai_sidebar_enabled? %>
      <%= render(Primer::Box.new(ml: :auto)) do %>
        <%= render(SecretScanning::CustomPatterns::Ai::SidebarComponent.new) %>
      <% end %>
    <% end %>
  <% end %>
  <turbo-frame id="custom-pattern-form-frame" target=_top>
  <%= form_with \
      id: "custom-pattern-form",
      class: "js-custom-secret-scanning-pattern-form",
      url: form_submit_url,
      data: { pjax: true, turbo: true, turbo_frame: "custom-pattern-form-frame", turbo_action: "replace" },
      method: :post do |form|
  %>
    <% if @error_message %>
      <%= render(Primer::Beta::Flash.new(scheme: :danger, mb: 3, icon: :stop, test_selector: "error-message")) do %>
        <%= @error_message %>
      <% end %>
    <% end %>

    <%= render(Primer::Box.new(display: :flex, style: display_name_field_style, mb: 3)) do %>
      <%= render(Primer::Box.new(flex: :auto)) do %>
        <div class="form-group-header mb-1">
          <%= form.label display_name_label, for: "display_name" %>
        </div>
        <div class="form-group-body">
          <%= form.text_field :display_name, class: "form-control input-contrast width-full", id: "display_name", value: display_name, placeholder: "A distinctive name for the pattern", aria_label: "Name of pattern", required: true, disabled: pattern_created? %>
          <p class="color-fg-muted mt-1 f6"> <%= display_name_edit_message %> </p>
        </div>
      <% end %>
    <% end %>
    <% if show_metrics? %>
      <%= render(Primer::Box.new(mb: 4)) do %>
        <%= render(Primer::Box.new) do %>
          <%= render(Primer::Beta::Text.new(tag: :span, display: :block, mb: 1, font_weight: :bold)) { "Alert insights" } %>
          <include-fragment src="<%= get_alert_metrics_path %>" <%= test_selector "alert-metrics-fragment" %>>
            <%= render Primer::Box.new(pl: 2) do %>
              <span data-hide-on-error>
                <%= render Primer::Box.new(display: :flex, align_items: :center) do %>
                  <%= render Primer::Beta::Text.new(tag: :span, font_size: 5, mr: 2).with_content("Loading") %>
                  <%= render Primer::Beta::Spinner.new(size: :small) %>
                <% end %>
              </span>
              <span data-show-on-error hidden>
                <%= render Primer::Beta::Text.new(tag: :span, font_size: 5).with_content("Failed to load insights.") %>
              </span>
            <% end %>
          </include-fragment>
        <% end %>
        <% if pattern_published? %>
          <%= render(Primer::Box.new(mt: 3)) do %>
            <%= render(Primer::Beta::Text.new(tag: :span, display: :block, mb: 1, font_weight: :bold)) { "Push protection insights" } %>
            <include-fragment src="<%= get_push_protection_metrics_path %>" <%= test_selector "push-protection-metrics-fragment" %>>
              <%= render Primer::Box.new(pl: 2) do %>
                <span data-hide-on-error>
                  <%= render Primer::Box.new(display: :flex, align_items: :center) do %>
                    <%= render Primer::Beta::Text.new(tag: :span, font_size: 5, mr: 2).with_content("Loading") %>
                    <%= render Primer::Beta::Spinner.new(size: :small) %>
                  <% end %>
                </span>
                <span data-show-on-error hidden>
                  <%= render Primer::Beta::Text.new(tag: :span, font_size: 5).with_content("Failed to load insights.") %>
                </span>
              <% end %>
            </include-fragment>
          <% end %>
        <% end %>
      <% end %>
    <% end %>
    <%= render(Primer::Box.new(display: :flex)) do %>
      <%= render(Primer::Box.new(flex: :auto)) do %>
        <div class="form-group-header mb-1">
          <%= form.label "Secret format (specified as a regular expression) *", for: "secret_format" %>
        </div>
        <div class="form-group-body">
          <%= form.text_field :secret_format, class: "js-secret-format form-control input-monospace input-contrast width-full", id: "secret_format", value: expression, placeholder: "example_[A-Za-z0-9]{40}", aria_label: "Secret format", required: true, disabled: disable_pattern_fields? %>
        </div>
        <p class="color-fg-muted mt-1 f6">The pattern for the secret, specified as a regular expression. <%= link_to "Learn more about defining custom patterns", "#{GitHub.help_url}/code-security/secret-security/defining-custom-patterns-for-secret-scanning", class: "Link--inTextBlock" %>.</p>
      <% end %>
    <% end %>
    <div class="js-more-options js-details-container Details color-fg-muted">
      <button type="button" aria-expanded="<% if pattern_created? %>true<% else %>false<% end %>" class="btn-link color-fg-muted text-normal no-underline h5 ml-0 mt-3 Details-content--<% if pattern_created? %>hidden<% else %>shown<% end %> js-details-target">
        <%= render Primer::Beta::Octicon.new(icon: "chevron-right", test_selector: "collapsed-more-options") %> More options
      </button>
      <button type="button" aria-expanded="<% if pattern_created? %>false<% else %>true<% end %>" class="btn-link color-fg-muted text-normal no-underline h5 ml-0 mt-3 Details-content--<% if pattern_created? %>shown<% else %>hidden<% end %> js-details-target">
        <%= render Primer::Beta::Octicon.new(icon: "chevron-down", test_selector: "expanded-more-options") %> Less options
      </button>
      <div class="mb-0 Details-content--<% if pattern_created? %>shown<% else %>hidden<% end %>">
        <%= render(Primer::Box.new(display: :flex, justify_content: :space_between, mt: 3, pb: 4, border: :bottom)) do %>
          <%= render(Primer::Box.new(flex: :auto, mr: 2)) do %>
            <div class="form-group-header mb-1">
              <%= form.label "Before secret", for: "before_secret", class: "color-fg-default" %>
            </div>
            <div class="form-group-body">
              <%= form.text_field :before_secret, class: "form-control input-monospace input-contrast width-full", id: "before_secret", value: start_delimiter, placeholder: default_start_delimiter, aria_label: "Regular expression before secret", required: true,  disabled: disable_pattern_fields? %>
            </div>
          <% end %>
          <%= render(Primer::Box.new(flex: :auto)) do %>
            <div class="form-group-header mb-1">
              <%= form.label "After secret", for: "after_secret", class: "color-fg-default" %>
            </div>
            <div class="form-group-body">
              <%= form.text_field :after_secret, class: "form-control input-monospace input-contrast width-full", id: "after_secret", value: end_delimiter, placeholder: default_end_delimiter, aria_label: "Regular expression after secret", required: true, disabled: disable_pattern_fields? %>
            </div>
          <% end %>
        <% end %>
        <div class="border-bottom py-4">
          <%= render(Primer::Box.new(display: :flex)) do %>
            <div class="col-12 d-flex">
              <div class="flex-auto width-full">
                <span class="text-bold color-fg-default">Additional match requirements</span>
                <div class="color-fg-default mt-2 f5">Add extra patterns that detected secrets must or must not match, e.g. "[a-z]" would ensure any detected secrets contain at least one lowercase character.</div>
              </div>
            </div>
          <% end %>
          <div class="js-post-processing-expression-count" hidden><%= (post_processing_must_match.length || 0) +  (post_processing_must_not_match.length || 0) %></div>
          <div class="js-post-processing-expression-max-count" hidden><%= GitHub.secret_scanning_max_post_processing_expressions_per_pattern %></div>
          <% if pattern_created? %>
            <% index = 0 %>
            <% post_processing_must_match.each do |expression| %>
              <%= render SecretScanning::CustomPatterns::PostProcessingComponent.new(
                form: form,
                value: expression,
                index: index,
                match: true,
                disabled: disable_pattern_fields?
              ) %>
              <% index += 1 %>
            <% end %>
            <% post_processing_must_not_match.each do |expression| %>
              <%= render SecretScanning::CustomPatterns::PostProcessingComponent.new(
                form: form,
                value: expression,
                index: index,
                match: false,
                disabled: disable_pattern_fields?
              ) %>
              <% index += 1 %>
            <% end %>
            <% unused_row_count = GitHub.secret_scanning_max_post_processing_expressions_per_pattern - index %>
            <% unused_row_count.times do %>
              <%= render SecretScanning::CustomPatterns::PostProcessingComponent.new(
                form: form,
                value: nil,
                index: index,
                match: true,
                disabled: disable_pattern_fields?
              ) %>
              <% index += 1 %>
            <% end %>
          <% else %>
            <% GitHub.secret_scanning_max_post_processing_expressions_per_pattern.times do |i| %>
              <%= render SecretScanning::CustomPatterns::PostProcessingComponent.new(
                form: form,
                value: nil,
                index: i,
                match: true,
                disabled: disable_pattern_fields?
              ) %>
            <% end %>
          <% end %>
          <%= render(Primer::Box.new(display: :flex)) do %>
            <div class="col-12 d-flex">
              <div class="flex-auto">
                <%= render Primer::ButtonComponent.new(mt: 4, classes: "js-add-secret-format-button", disabled: disable_pattern_fields?) do %>Add requirement<% end %>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
    <%= hidden_field_tag :selected_repo_ids, dry_run_selected_repo_ids_json %>
    <%= hidden_field_tag :row_version, @pattern ? @pattern.row_version : "", id: nil %>
    <div class="js-dry-run-selected-repos-max-count" hidden><%= GitHub.secret_scanning_max_dry_run_selected_repositories %></div>
    <div class="js-mode" hidden><%= @mode %></div>
    <div class="js-dry-run-status" hidden><%= current_dry_run_status %></div>
    <div class="js-wildcards-warning" <% if !show_wildcard_warning? %>hidden<% end %> >
      <%= render(Primer::Beta::Flash.new(icon: :alert, scheme: :warning, mt: 3, test_selector: "unbounded-wildcard-warning")) do |component| %>
        Your pattern contains one or more unbounded wildcard expressions like ".*" or ".+".
        This pattern may generate a very large number of alerts or cause the scan to time out.
        Test this pattern using a dry run and consider writing a more specific regular expression.
      <% end %>
    </div>
  <% end %>
  <% if generate_expressions_with_ai_sidebar_enabled? %>
    <%= form_with \
      id: "generate-expressions-form",
      class: "js-generate-expressions-form",
      url: get_generated_expressions_path,
      method: :post do %>
    <% end %>
  <% end %>
  <%= form_with \
      id: "test-custom-pattern-form",
      class: "js-test-custom-secret-scanning-pattern mb-4",
      url: test_pattern_path,
      method: :post do |form|
  %>
    <%= render(Primer::Box.new(display: :flex, mt: 4, mb: 1)) do %>
      <%= render(Primer::Box.new(flex: :auto)) do %>
        <div class="form-group-header mb-1 d-inline-block">
          <%= form.label "Test string *", for: "test_code" %>
        </div>
        <div class="js-test-pattern-matches color-fg-default d-inline-block"></div>
        <div class="form-group-body">
          <%= form.text_area :test_code,
            rows: "6",
            aria_label: "Test code changes",
            class: "js-test-code form-control input-monospace input-contrast input-block",
            type: "text"
          %>
        </div>
      <% end %>
    <% end %>
    <span class="f6">Provide a sample test string to make sure your configuration matches the patterns you expect.</span>
  <% end %>
  <% if show_dry_run_section? %>
    <%= render(Primer::Beta::Heading.new(tag: :h5, mb: 2)) { "Dry run" } %>
    <%= render SecretScanning::CustomPatterns::DryRun::StatusComponent.new(
      pattern_id: pattern.id,
      pattern_owner_id: owner.id,
      pattern_scope: pattern.scope,
      dry_run_info: dry_run_info,
      user: current_user,
    ) %>
  <% end %>
  <% if display_publish_alert_message? %>
    <%= render(Primer::Box.new(display: :flex, flex: 1, mt: 4)) do %>
      <%= render Primer::Beta::Octicon.new(icon: "alert", mt: 1) %>
      <p class="color-fg-muted f5 ml-1 pb-3">Publishing will scan all repositories with secret scanning enabled and alert <b>all</b> related users. Broad patterns may cause significant noise.</p>
    <% end %>
  <% end %>
  <% if show_push_protection_options? %>
    <% if show_push_protection_warning? %>
      <%= render(Primer::Beta::Flash.new(scheme: :warning, icon: :alert, mb: 4, data: { test_selector: "warning-push-protection-disabled" })) do %>
        To enable push protection for this custom pattern, you must first enable push protection in your repository's
        <%= render(Primer::Beta::Link.new(href: repository_settings_url, classes: "Link--inTextBlock")) { "settings" } %>.
      <% end %>
    <% end %>
    <%= render(Primer::Box.new(display: :flex, justify_content: :space_between, data: { test_selector: "custom-pattern-push-protection-enable-box" })) do %>
      <%= render(Primer::Box.new) do %>
        <%= render(Primer::Beta::Text.new(tag: :p, font_weight: :bold, mb: 1)) { "Push Protection" } %>
        <%= render(Primer::Beta::Text.new(tag: :p, pr: 4)) do %>
          <% if is_repo_scope? %>
            Block commits containing this custom pattern.
          <% else %>
            Block commits containing this custom pattern in repositories that have push protection enabled.
          <% end %>
          <%= render(Primer::Beta::Link.new(href: "#{GitHub.help_url}/code-security/secret-scanning/protecting-pushes-with-secret-scanning", classes: "Link--inTextBlock")) { "Learn more about push protection." } %>
        <% end %>
      <% end %>
      <%= form_with url: update_custom_pattern_settings_path, method: :post do |form| %>
        <%= render_custom_pattern_push_protection_btn %>
        <%= hidden_field_tag :row_version, @pattern ? @pattern.row_version : "", id: nil %>
      <% end %>
    <% end %>
  <% end %>
  <%= render SecretScanning::CustomPatterns::FormActionsComponent.new(
    status: current_dry_run_status,
    mode: mode,
    force_disable_button: force_disable_primary_button?,
    custom_pattern_owner: @owner,
    selected_repo_ids: get_dry_run_selected_repo_ids,
  )%>
  <% if allow_pattern_delete? %>
    <%= render SecretScanning::CustomPatterns::DangerZoneComponent.new(
      pattern: @pattern,
      pattern_state: @mode,
      remove_pattern_path: @remove_pattern_path,
    ) %>
  <% end %>
  </turbo-frame>
</div>

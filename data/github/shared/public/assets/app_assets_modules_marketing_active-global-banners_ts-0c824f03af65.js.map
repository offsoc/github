{"version":3,"file":"chunk-app_assets_modules_marketing_active-global-banners_ts-xxxxxxxxxxxx.js","mappings":"0fAuBA,YACMA,mCAAmCC,YAGvCC,mBAAoB,CAClB,IAAMC,EAAgB,IAAI,CAACC,qBAAqB,GAChD,GAAID,IAAAA,EAAcE,MAAM,CAAQ,OAChC,IAAMC,EAAkBC,EAAAA,EAAAA,CAAU,iCAAiCC,MAAM,MAAQ,EAAE,CACnF,GAAIF,IAAAA,EAAgBD,MAAM,CAAQ,OAElC,IAAMI,EAA4C,CAAC,EACnD,IAAK,IAAMC,KAAMP,EAAeM,CAAgB,CAACC,EAAG,CAAG,GAEvD,IAAMC,EAA0BL,EAAgBM,MAAM,CAACF,GAAMD,CAAgB,CAACC,EAAG,CAC7EC,CAAAA,EAAwBN,MAAM,GAAKC,EAAgBD,MAAM,EAC7DQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,+BAAgCF,EAAwBG,IAAI,CAAC,KAAM,GAC/E,CAEAV,uBAAwB,CAEtB,OADA,IAAI,CAACW,OAAO,CAAG,IAAI,CAACA,OAAO,CAACC,OAAO,CAAC,MAAO,IACpC,IAAI,CAACD,OAAO,CAACP,KAAK,CAAC,IAC5B,C,mCAnBMO,OAAO,CAAW,E,CAoB1B,E,GApBGE,EAAAA,EAAIA,C,CADDjB,EAAAA,SAAAA,CAAAA,UAAAA,KAAAA,GAAAA,EAAAA,EAAAA,CADLkB,EAAAA,EAAUA,C,CACLlB,E,+DChBC,IAAMmB,EAAiB,IAC5B,OAAQC,GACN,IAAK,KACH,OAAOC,OAAOC,UAAU,EAVnB,GAWP,KAAK,KACH,OAAOD,OAAOC,UAAU,EAXnB,GAYP,KAAK,KACH,OAAOD,OAAOC,UAAU,EAZnB,IAaP,KAAK,KACH,OAAOD,OAAOC,UAAU,EAbnB,IAcP,SACE,MAAO,EACX,CACF,EAEaC,EAAiB,IACrB,iBAAkBF,QAAUG,UAAUC,cAAc,CAAG,EAGnDlB,EAAY,IACvB,IAAMmB,EAAUC,SAASC,MAAM,CAACC,KAAK,CAAC,OAAW,CAAC,WAAW,EAAEC,EAAK,gBAAgB,CAAC,GACrF,OAAOJ,EAAUA,CAAO,CAAC,EAAE,CAAG,IAChC,EAEaK,EAAmB,IAC9B,IAAMC,EAAO,IAAIC,KAEjB,OADAD,EAAKE,OAAO,CAACF,EAAKG,OAAO,GAAKC,MAAAA,GACvBJ,EAAKK,WAAW,EACzB,EAEaxB,EAAY,CAACiB,EAAcQ,EAAeF,KACrDT,SAASC,MAAM,CAAG,CAAC,EAAEE,EAAK,CAAC,EAAEQ,EAAM,kBAAkB,EAAEP,EAAiBK,GAAM,CAAC,C","sources":["app/assets/modules/marketing/active-global-banners.ts","app/assets/modules/marketing/helpers.ts"],"sourcesContent":["import {controller, attr} from '@github/catalyst'\nimport {getCookie, setCookie} from './helpers'\n\n/**\n * Hey there! üëã I bet you are wondering what's going on here.\n *\n * This is a custom element that is used to manage the global banners that are displayed on the site.\n * If you take a look at the `global-banner.ts` code you will see that after closing a banner a cookie is filled with\n * the banner id so that it doesn't show up again. This cookie is called `disabled_global_site_banners` and lasts for\n * 30 days.\n *\n * One cookie can contain 4KB of data, this is roughly 4000 characters which means that we can store around 100 banner\n * ids (roughly). When the cookie is updated it gets renewed for another 30 days, which means there is a possibility\n * that the cookie will never expire if the user keeps updating the cookie. Which in turn means that there is a slight,\n * but a real possibility that the cookie will reach its limit.\n *\n * This custom element is used to manage the cookie and make sure that it doesn't reach its limit. It does this by\n * checking the `banners` attribute and comparing it to the cookie. If the cookie contains banners that are not in the\n * `banners` attribute, it will remove them from the cookie. Simple as that.\n *\n * With love ‚ù§Ô∏è,\n * @stamat\n */\n@controller\nclass ActiveGlobalBannersElement extends HTMLElement {\n  @attr banners: string = ''\n\n  connectedCallback() {\n    const activeBanners = this.parseBannersAttribute()\n    if (activeBanners.length === 0) return\n    const disabledBanners = getCookie('disabled_global_site_banners')?.split(',') || []\n    if (disabledBanners.length === 0) return\n\n    const activeBannersMap: Record<string, boolean> = {}\n    for (const id of activeBanners) activeBannersMap[id] = true\n\n    const filteredDisabledBanners = disabledBanners.filter(id => activeBannersMap[id])\n    if (filteredDisabledBanners.length === disabledBanners.length) return\n    setCookie('disabled_global_site_banners', filteredDisabledBanners.join(','), 30)\n  }\n\n  parseBannersAttribute() {\n    this.banners = this.banners.replace(/\\s/g, '')\n    return this.banners.split(',')\n  }\n}\n","// Breakpoints from https://primer.style/css/support/breakpoints\nconst sm = 544\nconst md = 768\nconst lg = 1012\nconst xl = 1280\nconst breakpoints = {sm, md, lg, xl}\ntype Breakpoints = keyof typeof breakpoints\n\nexport const isGtBreakpoint = (breakpoint: Breakpoints) => {\n  switch (breakpoint) {\n    case 'sm':\n      return window.innerWidth >= sm\n    case 'md':\n      return window.innerWidth >= md\n    case 'lg':\n      return window.innerWidth >= lg\n    case 'xl':\n      return window.innerWidth >= xl\n    default:\n      return false\n  }\n}\n\nexport const isTouchEnabled = () => {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n}\n\nexport const getCookie = (name: string) => {\n  const matches = document.cookie.match(new RegExp(`(?:^|;\\\\s*)${name}\\\\s*=\\\\s*([^;]+)`))\n  return matches ? matches[1] : null\n}\n\nexport const cookieExpiration = (days: number) => {\n  const date = new Date()\n  date.setTime(date.getTime() + days * 24 * 60 * 60 * 1e3)\n  return date.toUTCString()\n}\n\nexport const setCookie = (name: string, value: string, days: number) => {\n  document.cookie = `${name}=${value}; path=/; expires=${cookieExpiration(days)}`\n}\n"],"names":["ActiveGlobalBannersElement","HTMLElement","connectedCallback","activeBanners","parseBannersAttribute","length","disabledBanners","getCookie","split","activeBannersMap","id","filteredDisabledBanners","filter","setCookie","join","banners","replace","attr","controller","isGtBreakpoint","breakpoint","window","innerWidth","isTouchEnabled","navigator","maxTouchPoints","matches","document","cookie","match","name","cookieExpiration","date","Date","setTime","getTime","days","toUTCString","value"],"sourceRoot":""}
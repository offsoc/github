{"version":3,"file":"ui_packages_custom-properties-editing_index_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/custom-properties-types/custom-properties-types.ts","ui/packages/custom-properties-editing/components/validate.ts","ui/packages/custom-properties-editing/hooks/use-edit-custom-properties.ts","ui/packages/custom-properties-editing/components/CustomPropertyInput.tsx","ui/packages/custom-properties-editing/components/PropertiesOverlayEditor.tsx","ui/packages/custom-properties-editing/components/CustomPropertyValuesTable.tsx","ui/packages/custom-properties-types/helpers/type-helper.ts","ui/packages/repos-async-validation/hooks/validate-regex-value.ts","ui/packages/use-debounce/use-debounce.ts","ui/packages/use-tracking-ref/use-tracking-ref.ts","ui/packages/custom-properties-editing/components/CustomPropertyBooleanSelect.tsx","ui/packages/custom-properties-editing/components/CustomPropertySelectPanel.tsx"],"sourcesContent":["import type {ListResults} from '@github-ui/repos-list-shared'\n\nexport type PropertyValue = string | string[]\nexport const BOOLEAN_PROPERTY_ALLOWED_VALUES = ['true', 'false']\nexport type PropertyValuesRecord = Record<string, PropertyValue>\n\nexport type OrgEditPermissions = 'all' | 'definitions' | 'values'\nexport type PropertyValidationErrors = Record<string, string>\nexport type ValueType = 'string' | 'single_select' | 'multi_select' | 'true_false'\nexport type ValuesEditableBy = 'org_and_repo_actors' | 'org_actors'\n\nexport interface PropertyDefinition {\n  propertyName: string\n  valueType: ValueType\n  required: boolean\n  defaultValue: PropertyValue | null\n  description: string | null\n  allowedValues: string[] | null\n  valuesEditableBy: ValuesEditableBy\n  regex: string | null\n}\n\nexport type SourceType = 'org' | 'business'\n\nexport interface PropertyDefinitionWithSourceType extends PropertyDefinition {\n  sourceType: SourceType\n}\n\nexport interface CustomPropertiesDefinitionsPagePayload extends ListResults<Repository> {\n  definitions: PropertyDefinitionWithSourceType[]\n}\n\nexport interface OrgCustomPropertiesDefinitionsPagePayload extends CustomPropertiesDefinitionsPagePayload {\n  permissions: OrgEditPermissions\n  business?: BusinessInfo\n}\n\nexport interface BusinessInfo {\n  name: string\n  slug: string\n}\n\nexport interface RepoPropertiesPagePayload {\n  definitions: PropertyDefinition[]\n  values: PropertyValuesRecord\n  canEditProperties: boolean\n}\n\nexport interface RepoSettingsPropertiesPagePayload {\n  definitions: PropertyDefinition[]\n  currentRepo: Repository\n  editableProperties: string[]\n}\n\nexport interface CustomPropertyDetailsPagePayload {\n  definition?: PropertyDefinitionWithSourceType\n  propertyNames: string[]\n  business?: BusinessInfo\n}\n\nexport interface PropertyConsumerUsage {\n  value: string\n  consumerType: 'ruleset'\n}\n\nexport interface CheckPropertyUsagesResponse {\n  repositoriesCount: number\n  propertyConsumerUsages: PropertyConsumerUsage[]\n}\n\nexport interface Repository {\n  id: number\n  name: string\n  visibility: 'public' | 'private' | 'internal'\n  description: string | null\n  properties?: PropertyValuesRecord\n}\n\nexport interface PropertyNameValidationResult {\n  message: string\n  orgConflicts?: PropertyNameOrgConflicts\n}\n\nexport interface PropertyNameOrgConflicts {\n  usages: OrgConflictUsage[]\n  totalUsageCount: number\n}\n\nexport interface OrgConflictUsage {\n  name: string\n  avatarUrl: string\n  propertyType: ValueType\n}\n","import {\n  BOOLEAN_PROPERTY_ALLOWED_VALUES,\n  type PropertyNameValidationResult,\n  type PropertyValue,\n  type ValueType,\n} from '@github-ui/custom-properties-types'\nimport {isPropertyValueArray} from '@github-ui/custom-properties-types/helpers'\nimport {checkPropertyNamePath} from '@github-ui/paths'\nimport {validateRegexValue} from '@github-ui/repos-async-validation/validate-regex-value'\nimport {verifiedFetchJSON} from '@github-ui/verified-fetch'\n\nconst MAX_PROPERTY_NAME_LENGTH = 75\nconst MAX_PROPERTY_DESCRIPTION_LENGTH = 255\n\nconst NAME_INVALID_CHARS_REGEX = /[^a-zA-Z0-9_#$-]/gu\nconst VALUE_INVALID_CHARS_REGEX = /[^ -!#-~]/gu\n\nexport function validatePropertyNameSync(value: string, existingPropertyNames: string[]): string | undefined {\n  if (value.length > MAX_PROPERTY_NAME_LENGTH) {\n    return `Name cannot be longer than ${MAX_PROPERTY_NAME_LENGTH} characters`\n  } else if (value.length === 0) {\n    return 'Name is required'\n  } else {\n    for (const name of existingPropertyNames) {\n      if (name.toLowerCase() === value.toLowerCase()) {\n        return 'Name already exists'\n      }\n    }\n  }\n\n  const invalidChars = findChars(value, NAME_INVALID_CHARS_REGEX)\n  if (invalidChars) {\n    return `Name contains invalid characters: ${invalidChars}`\n  }\n}\n\nexport async function validatePropertyNameAsync(\n  businessSlug: string,\n  propertyName: string,\n): Promise<PropertyNameValidationResult | undefined> {\n  const genericFailureMessage = 'Could not check property name'\n  try {\n    const response = await verifiedFetchJSON(checkPropertyNamePath({sourceName: businessSlug, propertyName}))\n\n    if (response.ok) {\n      const {status, orgConflicts} = await response.json()\n      switch (status) {\n        case 'valid':\n          return\n        case 'already_exists':\n          return {message: 'Name already exists'}\n        case 'exists_in_business_orgs':\n          return {message: `The property ${propertyName} already exists in this enterprise`, orgConflicts}\n      }\n    }\n    return {message: genericFailureMessage}\n  } catch {\n    return {message: genericFailureMessage}\n  }\n}\n\nexport function validateAllowedValue(value: string, existingAllowedValues: Set<string>): string | undefined {\n  if (value.length > MAX_PROPERTY_NAME_LENGTH) {\n    return `Option cannot be longer than ${MAX_PROPERTY_NAME_LENGTH} characters`\n  } else if (value.length === 0) {\n    return 'Option cannot be empty'\n  } else if (existingAllowedValues.has(value)) {\n    return 'Option already exists'\n  }\n\n  const invalidChars = findChars(value, VALUE_INVALID_CHARS_REGEX)\n  if (invalidChars) {\n    return `Option contains invalid characters: ${invalidChars}`\n  }\n}\n\nexport function validatePropertyDescription(value: string): string | undefined {\n  if (value.length > MAX_PROPERTY_DESCRIPTION_LENGTH) {\n    return `Description cannot be longer than ${MAX_PROPERTY_DESCRIPTION_LENGTH} characters`\n  }\n}\n\nconst INVALID_VALUE_TYPE_MESSAGE = 'Invalid value type'\nconst NO_MATCHING_OPTION = 'Default value should be a valid option'\nexport async function validatePropertyDefaultValue(\n  value: PropertyValue,\n  valueType: ValueType,\n  isRequired: boolean,\n  allowedValues: string[] = [],\n  regexPattern?: string,\n): Promise<string | undefined> {\n  if (!isRequired) {\n    return\n  }\n\n  if (!value.length) {\n    return 'Cannot be empty for a required property'\n  }\n\n  switch (valueType) {\n    case 'single_select': {\n      if (isPropertyValueArray(value)) return INVALID_VALUE_TYPE_MESSAGE\n      if (!allowedValues.includes(value)) return NO_MATCHING_OPTION\n      break\n    }\n    case 'true_false': {\n      if (isPropertyValueArray(value)) return INVALID_VALUE_TYPE_MESSAGE\n      if (!BOOLEAN_PROPERTY_ALLOWED_VALUES.includes(value)) return NO_MATCHING_OPTION\n      break\n    }\n    case 'multi_select': {\n      if (!isPropertyValueArray(value)) return INVALID_VALUE_TYPE_MESSAGE\n\n      const allValuesValid = value.every(v => allowedValues.includes(v))\n      if (!allValuesValid) return NO_MATCHING_OPTION\n      break\n    }\n    case 'string': {\n      if (isPropertyValueArray(value)) return INVALID_VALUE_TYPE_MESSAGE\n      return await validateValue(value, regexPattern)\n    }\n  }\n}\n\nexport async function validateValue(value: string, regexPattern?: string): Promise<string | undefined> {\n  if (!value) {\n    return\n  }\n\n  if (value.length > MAX_PROPERTY_NAME_LENGTH) {\n    return `Cannot be longer than ${MAX_PROPERTY_NAME_LENGTH} characters`\n  }\n\n  const invalidChars = findChars(value, VALUE_INVALID_CHARS_REGEX)\n  if (invalidChars) {\n    return `Contains invalid characters: ${invalidChars}`\n  }\n\n  if (regexPattern) {\n    if (!(await validateRegexValue(regexPattern, value))) {\n      return 'Value does not match pattern'\n    }\n  }\n}\n\nfunction findChars(value: string, regex: RegExp) {\n  const chars = Array.from(value.matchAll(regex))\n  if (!chars) {\n    return ''\n  }\n\n  const unique = new Set(chars.map(c => (c[0] === ' ' ? 'whitespace' : c[0])))\n  return Array.from(unique).join(', ')\n}\n","import type {PropertyDefinition, PropertyValue, PropertyValuesRecord} from '@github-ui/custom-properties-types'\nimport {areEqualValues, getEmptyValueByType, isPropertyValueArray} from '@github-ui/custom-properties-types/helpers'\nimport {useDebounce} from '@github-ui/use-debounce'\nimport {type DependencyList, useCallback, useEffect, useMemo, useState} from 'react'\n\nimport {validateValue} from '../components/validate'\n\nexport interface PropertyField {\n  value?: PropertyValue\n  mixed: boolean\n  changed: boolean\n  propertyName: string\n  error?: string\n}\n\nexport function useEditCustomProperties(\n  reposProperties: PropertyValuesRecord[],\n  definitions: PropertyDefinition[],\n  deps: DependencyList = [],\n) {\n  const [originalMergedValues, setOriginalMergedValues] = useState(() => mergeProperties(reposProperties))\n\n  const regexPatternMap = useMemo(\n    () => new Map(definitions.map(definition => [definition.propertyName, definition.regex || undefined])),\n    [definitions],\n  )\n  const [errors, setErrors] = useState<Record<string, string>>({})\n\n  const [modifiedProperties, setModifiedProperties] = useState<Record<string, {value: PropertyValue}>>({})\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- the implementation is the same as for the `useEffect` hook\n  useEffect(() => setModifiedProperties({}), deps)\n\n  function setPropertyValue(property: string, value: PropertyValue) {\n    setModifiedProperties({...modifiedProperties, [property]: {value}})\n    debouncedValidateError(property, value)\n  }\n\n  function revertPropertyValue(property: string) {\n    const updatedProperties = {...modifiedProperties}\n    delete updatedProperties[property]\n    setModifiedProperties(updatedProperties)\n    const updatedErrors = {...errors}\n    delete updatedErrors[property] // the original value should be valid\n    setErrors(updatedErrors)\n  }\n\n  function discardChanges() {\n    setModifiedProperties({})\n  }\n\n  function commitChanges() {\n    const modifiedPropertiesToCommit = Object.entries(modifiedProperties).reduce<Record<string, MergedValue>>(\n      (acc, [propertyName, mergedValue]) => {\n        acc[propertyName] = {value: mergedValue.value}\n        return acc\n      },\n      {},\n    )\n\n    const committedProperties = {...originalMergedValues, ...modifiedPropertiesToCommit}\n\n    setOriginalMergedValues(committedProperties)\n    setModifiedProperties({})\n  }\n\n  const validateErrors = useCallback(\n    async (propertyName: string, value?: PropertyValue) => {\n      const error =\n        value && !isPropertyValueArray(value) && (await validateValue(value, regexPatternMap.get(propertyName)))\n      const updatedErrors = {...errors}\n      delete updatedErrors[propertyName]\n      if (error) {\n        updatedErrors[propertyName] = error\n      }\n      setErrors(updatedErrors)\n    },\n    [errors, regexPatternMap],\n  )\n\n  const debouncedValidateError = useDebounce(validateErrors, 300, {onChangeBehavior: 'cancel'})\n\n  const propertyValuesMap = useMemo<Record<string, PropertyField>>(() => {\n    const propertyValuesWithoutErrors = Object.entries({...originalMergedValues, ...modifiedProperties}).reduce<\n      Record<string, PropertyField>\n    >((acc, [propertyName, update]) => {\n      const originalValue = originalMergedValues[propertyName]\n      const isModified = propertyName in modifiedProperties\n\n      const mixed = isModified ? false : !!originalValue?.mixed\n\n      if (mixed) {\n        acc[propertyName] = {propertyName, changed: false, mixed: true}\n      } else {\n        const changed = isModified && (originalValue?.mixed || !areEqualValues(originalValue?.value, update.value))\n        const value = isModified ? update.value : originalValue?.value\n        const newEntry: PropertyField = {value, changed, propertyName, mixed: false}\n\n        acc[propertyName] = newEntry\n      }\n\n      return acc\n    }, {})\n\n    for (const entry of Object.entries(errors)) {\n      const [propertyName, error] = entry\n      const valueMap = propertyValuesWithoutErrors[propertyName]\n      if (valueMap) {\n        valueMap.error = error\n      }\n    }\n\n    return propertyValuesWithoutErrors\n  }, [modifiedProperties, originalMergedValues, errors])\n\n  return {propertyValuesMap, setPropertyValue, revertPropertyValue, discardChanges, commitChanges}\n}\n\ninterface MergedValue {\n  value?: PropertyValue\n  mixed?: boolean\n}\n\nfunction mergeProperties(reposProperties: PropertyValuesRecord[]): Record<string, MergedValue> {\n  const mergedValues: Record<string, MergedValue> = {}\n  const propertiesCounter: Record<string, number> = {}\n  for (const repoProperties of reposProperties) {\n    for (const [propertyName, value] of Object.entries(repoProperties)) {\n      const propertyValue = mergedValues[propertyName]\n      if (!propertyValue) {\n        mergedValues[propertyName] = {value}\n      } else if (!areEqualValues(propertyValue.value, value)) {\n        mergedValues[propertyName] = {mixed: true}\n      }\n\n      // Detect properties that are only present on some repos to consider them in the \"mixed\" state\n      propertiesCounter[propertyName] ||= 0\n      propertiesCounter[propertyName]++\n    }\n  }\n\n  for (const [name, count] of Object.entries(propertiesCounter)) {\n    const propertyValue = mergedValues[name]\n    if (propertyValue && count < reposProperties.length) {\n      mergedValues[name] = {mixed: true}\n    }\n  }\n\n  return mergedValues\n}\n\nexport function propertyFieldsToChangedPropertiesMap(\n  definitions: PropertyDefinition[],\n  valuesMap: Record<string, PropertyField>,\n): PropertyValuesRecord {\n  return definitions.reduce<PropertyValuesRecord>((acc, def) => {\n    const field = valuesMap[def.propertyName]\n\n    if (field?.changed) {\n      acc[def.propertyName] = field.value || getEmptyValueByType(def.valueType)\n    }\n\n    return acc\n  }, {})\n}\n","import {getEmptyValueByType} from '@github-ui/custom-properties-types/helpers'\nimport {TextInput} from '@primer/react'\nimport type {HTMLAttributes} from 'react'\n\nimport {CustomPropertyBooleanSelect} from './CustomPropertyBooleanSelect'\nimport type {CustomPropertySelectPanelProps} from './CustomPropertySelectPanel'\nimport {\n  CustomPropertyMultiSelectPanel,\n  CustomPropertySingleSelectPanel,\n  mixedValuePlaceholder,\n} from './CustomPropertySelectPanel'\n\ninterface CustomPropertyInputProps extends CustomPropertySelectPanelProps {\n  block: boolean\n  // TODO remove with custom_properties_edit_modal\n  hideDefaultPlaceholder?: boolean\n  orgName: string\n  booleanMenuEnabled?: boolean\n  inputProps?: HTMLAttributes<HTMLInputElement>\n}\n\nexport function CustomPropertyInput(props: CustomPropertyInputProps) {\n  const {valueType, defaultValue} = props.propertyDefinition\n  const value = props.propertyValue || getEmptyValueByType(valueType)\n\n  switch (valueType) {\n    case 'single_select':\n      return <CustomPropertySingleSelectPanel {...props} propertyValue={value as string} />\n    case 'multi_select':\n      return <CustomPropertyMultiSelectPanel {...props} propertyValue={value as string[]} />\n    case 'true_false':\n      return props.booleanMenuEnabled ? (\n        <CustomPropertyBooleanSelect {...props} defaultValue={defaultValue as string} propertyValue={value as string} />\n      ) : (\n        <CustomPropertySingleSelectPanel\n          {...props}\n          propertyDefinition={{...props.propertyDefinition, allowedValues: ['true', 'false']}}\n          propertyValue={value as string}\n        />\n      )\n    case 'string':\n      return <StringPropertyInput {...props} propertyValue={value as string} />\n    default:\n      return null\n  }\n}\n\ninterface StringInputProps extends CustomPropertyInputProps {\n  propertyValue: string\n}\n\nfunction StringPropertyInput({\n  propertyDefinition,\n  propertyValue,\n  mixed,\n  block,\n  onChange,\n  hideDefaultPlaceholder,\n  inputProps,\n}: StringInputProps) {\n  const {defaultValue, propertyName} = propertyDefinition\n  const placeholder = mixed ? mixedValuePlaceholder : hideDefaultPlaceholder ? '' : (defaultValue as string) || ''\n  return (\n    <TextInput\n      block={block}\n      aria-label={propertyName}\n      onChange={event => onChange(event.target.value)}\n      value={propertyValue}\n      placeholder={placeholder}\n      {...inputProps}\n    />\n  )\n}\n\ntry{ CustomPropertyInput.displayName ||= 'CustomPropertyInput' } catch {}\ntry{ StringPropertyInput.displayName ||= 'StringPropertyInput' } catch {}","import type {PropertyDefinition, PropertyValue} from '@github-ui/custom-properties-types'\nimport {\n  getEmptyValueByType,\n  isEmptyPropertyValue,\n  isPropertyValueArray,\n} from '@github-ui/custom-properties-types/helpers'\nimport {ownerPath} from '@github-ui/paths'\nimport {TriangleDownIcon} from '@primer/octicons-react'\nimport {AnchoredOverlay, Box, Button, FormControl, Link, Radio, RadioGroup, Truncate} from '@primer/react'\nimport {useState} from 'react'\n\nimport {useEditCustomProperties} from '../hooks/use-edit-custom-properties'\nimport {CustomPropertyInput} from './CustomPropertyInput'\nimport {getDisplayAnchorLabel} from './CustomPropertySelectPanel'\n\ninterface Props {\n  appliedValue?: PropertyValue\n  propertyDefinition: PropertyDefinition\n  mixed: boolean\n  org: string\n  onApply: (value: PropertyValue) => void\n}\n\nconst lineClampSx = {\n  display: '-webkit-box',\n  '-webkit-line-clamp': '5',\n  '-webkit-box-orient': 'vertical',\n  overflow: 'hidden',\n  wordBreak: 'break-all',\n  textOverflow: 'ellipsis',\n}\n\nexport function PropertiesOverlayEditor({org, mixed, propertyDefinition, onApply, ...props}: Props) {\n  const {valueType, defaultValue, propertyName} = propertyDefinition\n  const appliedValue = props.appliedValue || getEmptyValueByType(valueType)\n\n  const initialValueOption = isEmptyPropertyValue(appliedValue) && !mixed ? 'default' : 'custom'\n  const [valueOption, setValueOption] = useState<string | null>(initialValueOption)\n\n  const {propertyValuesMap, setPropertyValue, revertPropertyValue} = useEditCustomProperties(\n    [{[propertyName]: appliedValue}],\n    [propertyDefinition],\n  )\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- we can be certain that this key exists\n  const valueField = propertyValuesMap[propertyName]!\n\n  const [missingValueError, setMissingValueError] = useState('')\n\n  const [open, setOpen] = useState(false)\n\n  function handleApply() {\n    setMissingValueError('')\n    if (valueOption === 'custom') {\n      if (valueField.error) {\n        return\n      } else if (valueField.value && !isEmptyPropertyValue(valueField.value)) {\n        onApply(valueField.value)\n      } else {\n        setMissingValueError('Value is required')\n        return\n      }\n    } else {\n      onApply(getEmptyValueByType(valueType))\n      setPropertyValue(propertyName, getEmptyValueByType(valueType))\n    }\n    setOpen(false)\n  }\n\n  function handleValueChange(value: PropertyValue) {\n    setMissingValueError('')\n    setPropertyValue(propertyName, value)\n  }\n\n  function resetAndClose() {\n    setMissingValueError('')\n    setValueOption(initialValueOption)\n    revertPropertyValue(propertyName)\n    setOpen(false)\n  }\n\n  const anchorLabel = getDisplayAnchorLabel(appliedValue, defaultValue, mixed)\n  const defaultRadioLabel = getDefaultValueRadioLabel(defaultValue || '')\n\n  const isMixed = isEmptyPropertyValue(valueField.value) && mixed\n  const error = missingValueError || valueField.error\n\n  return (\n    <AnchoredOverlay\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={resetAndClose}\n      renderAnchor={anchorProps => (\n        <Button\n          {...anchorProps}\n          block\n          alignContent=\"start\"\n          trailingAction={TriangleDownIcon}\n          sx={{minWidth: 0, '>span[data-component=\"buttonContent\"]': {flex: 1}}}\n          data-testid=\"properties-overlay-editor\"\n        >\n          <Truncate maxWidth=\"100%\" title={anchorLabel}>\n            {anchorLabel}\n          </Truncate>\n        </Button>\n      )}\n      side=\"outside-bottom\"\n      overlayProps={{role: 'dialog', sx: {width: 270}}}\n    >\n      <Box sx={{p: 3, borderBottom: 'solid 1px', borderBottomColor: 'border.muted', boxSizing: 'border-box'}}>\n        <RadioGroup name=\"Property value options\" onChange={selected => setValueOption(selected)}>\n          <RadioGroup.Label visuallyHidden>Property value options</RadioGroup.Label>\n          <FormControl>\n            <Radio checked={valueOption === 'default'} value=\"default\" />\n            <FormControl.Label sx={lineClampSx}>{defaultRadioLabel}</FormControl.Label>\n            <FormControl.Caption>\n              Inherited from{' '}\n              <Link inline href={ownerPath({owner: org})}>\n                {org}\n              </Link>\n            </FormControl.Caption>\n          </FormControl>\n\n          <FormControl>\n            <Radio checked={valueOption === 'custom'} value=\"custom\" />\n            <FormControl.Label>Custom value</FormControl.Label>\n            <FormControl.Caption>Set your own value</FormControl.Caption>\n          </FormControl>\n          <Box sx={{pl: 4}}>\n            {valueOption === 'custom' && (\n              <CustomPropertyInput\n                block\n                hideDefaultPlaceholder\n                propertyDefinition={propertyDefinition}\n                propertyValue={valueField.value}\n                mixed={isMixed}\n                onChange={handleValueChange}\n                orgName={org}\n              />\n            )}\n            {error && (\n              <FormControl.Validation variant=\"error\" sx={{pt: 2}}>\n                {error}\n              </FormControl.Validation>\n            )}\n          </Box>\n        </RadioGroup>\n      </Box>\n      <Box sx={{p: 3, display: 'flex', gap: 2, justifyContent: 'end'}}>\n        <Button size=\"small\" onClick={resetAndClose}>\n          Cancel\n        </Button>\n        <Button size=\"small\" variant=\"primary\" onClick={handleApply}>\n          Apply\n        </Button>\n      </Box>\n    </AnchoredOverlay>\n  )\n}\n\nfunction getDefaultValueRadioLabel(value: PropertyValue): string {\n  if (isPropertyValueArray(value)) {\n    return `default (${value.join(', ')})`\n  }\n\n  return `default (${value})`\n}\n\ntry{ PropertiesOverlayEditor.displayName ||= 'PropertiesOverlayEditor' } catch {}","import type {PropertyDefinition, PropertyValue} from '@github-ui/custom-properties-types'\nimport {isEmptyPropertyValue} from '@github-ui/custom-properties-types/helpers'\nimport {ownerPath} from '@github-ui/paths'\nimport {useFeatureFlag} from '@github-ui/react-core/use-feature-flag'\nimport {KebabHorizontalIcon, ShieldLockIcon, SyncIcon, UndoIcon} from '@primer/octicons-react'\nimport {ActionList, ActionMenu, Box, FormControl, IconButton, Link, Text, Token, Truncate} from '@primer/react'\nimport {type ReactNode, useMemo} from 'react'\n\nimport type {PropertyField} from '../hooks/use-edit-custom-properties'\nimport {CustomPropertyInput} from './CustomPropertyInput'\nimport {PropertiesOverlayEditor} from './PropertiesOverlayEditor'\n\ninterface ReadTableProps {\n  definitions: PropertyDefinition[]\n  propertyValuesMap: Record<string, PropertyField>\n  orgName: string\n  showLockMessages?: boolean\n  showUndo?: boolean\n  // TODO: cleanup with custom_properties_edit_modal FF.\n  propertiesOverlayEditorEnabled?: boolean\n}\n\ninterface EditTableProps extends ReadTableProps {\n  editableDefinitions: PropertyDefinition[]\n  setPropertyValue: (propertyName: string, value: PropertyValue) => void\n  revertPropertyValue: (propertyName: string) => void\n}\n\ntype CustomPropertyValuesTableProps = ReadTableProps | EditTableProps\n\nexport function CustomPropertyValuesTable(props: CustomPropertyValuesTableProps) {\n  const {\n    definitions,\n    propertyValuesMap,\n    orgName,\n    showLockMessages = true,\n    showUndo = true,\n    propertiesOverlayEditorEnabled,\n  } = props\n\n  const {editableDefinitions} = props as EditTableProps\n  const editableDefinitionsSet = useMemo(\n    () => new Set((editableDefinitions || []).map((definition: PropertyDefinition) => definition.propertyName)),\n    [editableDefinitions],\n  )\n\n  if (definitions.length === 0) {\n    return null\n  }\n\n  return (\n    <Box\n      sx={{\n        border: '1px solid',\n        borderColor: 'border.muted',\n        borderRadius: 2,\n        'div:last-child': {\n          borderBottomWidth: 0,\n        },\n      }}\n      data-testid=\"custom-property-values-table\"\n    >\n      {definitions.map(definition => {\n        const {propertyName} = definition\n        const field = propertyValuesMap[propertyName]\n        const isEditable = 'editableDefinitions' in props && editableDefinitionsSet.has(propertyName)\n\n        return (\n          <Box\n            sx={{\n              px: 3,\n              borderBottomWidth: 1,\n              borderBottomStyle: 'solid',\n              borderBottomColor: 'border.default',\n            }}\n            data-testid=\"property-row\"\n            key={propertyName}\n          >\n            {isEditable ? (\n              <CustomPropertyEditValueRow\n                key={propertyName}\n                changed={!!field?.changed}\n                mixed={!!field?.mixed}\n                propertyValue={field?.value}\n                definition={definition}\n                error={field?.error}\n                onChange={newValue => props.setPropertyValue(propertyName, newValue)}\n                onReset={() => props.revertPropertyValue(propertyName)}\n                showUndo={showUndo}\n                orgName={orgName}\n                propertiesOverlayEditorEnabled={propertiesOverlayEditorEnabled}\n              />\n            ) : (\n              <CustomPropertyReadValueRow\n                key={propertyName}\n                propertyValue={field?.value || definition.defaultValue || ''}\n                definition={definition}\n                showLockMessages={showLockMessages}\n                orgName={orgName}\n              />\n            )}\n          </Box>\n        )\n      })}\n    </Box>\n  )\n}\n\nfunction CustomPropertyReadValueRow({\n  propertyValue,\n  definition,\n  showLockMessages,\n  orgName,\n}: {\n  propertyValue?: PropertyValue\n  definition: PropertyDefinition\n  showLockMessages: boolean\n  orgName: string\n}) {\n  const {description} = definition\n\n  return (\n    <DataTableRow\n      label={getControlLabel(definition)}\n      description={description}\n      value={<DisplayPropertyValue propertyValue={propertyValue} definition={definition} />}\n      bottomMessage={\n        showLockMessages && (\n          <Box sx={{display: 'inline'}}>\n            <Text sx={{color: 'fg.subtle'}}>\n              <ShieldLockIcon size={'small'} /> Managed by{' '}\n            </Text>\n            <Link inline href={ownerPath({owner: orgName})}>\n              {orgName}\n            </Link>\n          </Box>\n        )\n      }\n    />\n  )\n}\n\nfunction CustomPropertyEditValueRow({\n  propertyValue,\n  definition,\n  changed,\n  mixed = false,\n  error,\n  onChange,\n  onReset,\n  showUndo,\n  orgName,\n  propertiesOverlayEditorEnabled,\n}: {\n  propertyValue?: PropertyValue\n  definition: PropertyDefinition\n  changed: boolean\n  mixed?: boolean\n  error?: string\n  onChange: (value: PropertyValue) => void\n  onReset(): void\n  showUndo: boolean\n  // TODO: cleanup with custom_properties_edit_modal FF.\n  propertiesOverlayEditorEnabled?: boolean\n  orgName: string\n}) {\n  const {propertyName, description} = definition\n\n  const booleanMenuEnabled = useFeatureFlag('boolean_property_value_toggle')\n  const useNewBooleanMenu = definition.valueType === 'true_false' && booleanMenuEnabled\n\n  const propertyNameValidationId = `${propertyName}-validation-error`\n\n  return (\n    <DataTableRow\n      label={getControlLabel(definition)}\n      description={description}\n      value={\n        <>\n          <Box sx={{display: 'flex', gap: 2}}>\n            {propertiesOverlayEditorEnabled && definition.required && !useNewBooleanMenu ? (\n              <PropertiesOverlayEditor\n                propertyDefinition={definition}\n                mixed={mixed}\n                appliedValue={propertyValue}\n                onApply={onChange}\n                org={orgName}\n              />\n            ) : (\n              <CustomPropertyInput\n                propertyDefinition={definition}\n                propertyValue={propertyValue}\n                mixed={mixed}\n                block={true}\n                onChange={onChange}\n                orgName={orgName}\n                booleanMenuEnabled={booleanMenuEnabled}\n                inputProps={error ? {'aria-describedby': propertyNameValidationId} : {}}\n              />\n            )}\n          </Box>\n          {error && (\n            <FormControl.Validation variant=\"error\" id={propertyNameValidationId} sx={{pt: 2}}>\n              {error}\n            </FormControl.Validation>\n          )}\n        </>\n      }\n      trailing={\n        <ResetDropdown required={definition.required} {...{propertyName, changed, onReset, onChange, showUndo}} />\n      }\n    />\n  )\n}\n\nconst formControlStyle = {\n  display: 'grid',\n  flex: 1,\n  py: 3,\n  gridTemplateColumns: ['1fr auto', '1fr auto', '1fr 220px minmax(39px, auto)'],\n  gridTemplateRows: ['auto auto auto auto', 'auto auto auto auto', 'min-content min-content 1fr'],\n  gridTemplateAreas: [\n    '\"name trailing\" \"description trailing\" \"value trailing\" \"bottomMessage trailing\"',\n    '\"name trailing\" \"description trailing\" \"value trailing\" \"bottomMessage trailing\"',\n    '\"name value trailing\" \"description value trailing\" \"bottomMessage value trailing\"',\n  ],\n}\n\nfunction DataTableRow({\n  label,\n  description,\n  bottomMessage,\n  value,\n  trailing,\n}: {\n  label: string\n  description: string | null\n  bottomMessage?: ReactNode\n  value: ReactNode\n  trailing?: ReactNode\n}) {\n  return (\n    <FormControl sx={formControlStyle}>\n      <FormControl.Label\n        sx={{gridArea: 'name', pr: 3, whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'}}\n        data-testid=\"property-name\"\n      >\n        {label}\n      </FormControl.Label>\n\n      <Box sx={{gridArea: 'value', mt: [1, 1, 0]}}>{value}</Box>\n\n      {trailing && <Box sx={{gridArea: 'trailing', pl: 2, mt: 0}}>{trailing}</Box>}\n\n      {description && (\n        <FormControl.Caption sx={{gridArea: 'description', pr: 3, mt: 0}}>{description}</FormControl.Caption>\n      )}\n      {bottomMessage && <Box sx={{gridArea: 'bottomMessage', mt: 1}}>{bottomMessage}</Box>}\n    </FormControl>\n  )\n}\n\nfunction DisplayPropertyValue({\n  propertyValue,\n  definition,\n}: {\n  propertyValue?: PropertyValue\n  definition: PropertyDefinition\n}) {\n  if (isEmptyPropertyValue(propertyValue)) {\n    return <Text sx={{color: 'fg.muted'}}>(Empty)</Text>\n  }\n\n  switch (definition.valueType) {\n    case 'single_select':\n    case 'true_false':\n      return (\n        <Token\n          sx={{color: 'fg.default'}}\n          text={\n            <Truncate title={propertyValue as string} maxWidth=\"100%\">\n              {propertyValue}\n            </Truncate>\n          }\n        />\n      )\n    case 'multi_select':\n      return (\n        <>\n          {(propertyValue as string[]).map(v => (\n            <Token\n              key={v}\n              sx={{color: 'fg.default', mr: 1}}\n              text={\n                <Truncate title={v} maxWidth=\"100%\">\n                  {v}\n                </Truncate>\n              }\n            />\n          ))}\n        </>\n      )\n    case 'string':\n      return (\n        <Truncate title={propertyValue as string} maxWidth=\"100%\">\n          {propertyValue}\n        </Truncate>\n      )\n  }\n}\n\nexport function getControlLabel({propertyName, required}: PropertyDefinition) {\n  return `${propertyName}${required ? ' *' : ''}`\n}\n\nfunction ResetDropdown({\n  propertyName,\n  required,\n  changed,\n  showUndo = true,\n  onReset,\n  onChange,\n}: {\n  propertyName: string\n  required: boolean\n  changed: boolean\n  showUndo?: boolean\n  onReset(): void\n  onChange: (value: string) => void\n}) {\n  const undoTitle = `Undo ${propertyName} changes`\n  const resetToDefaultTitle = `Reset ${propertyName} to default value`\n\n  return (\n    <ActionMenu>\n      <ActionMenu.Anchor>\n        {/* eslint-disable-next-line primer-react/a11y-remove-disable-tooltip */}\n        <IconButton\n          unsafeDisableTooltip={true}\n          icon={KebabHorizontalIcon}\n          variant=\"invisible\"\n          aria-label={`Open reset options for ${propertyName}`}\n        />\n      </ActionMenu.Anchor>\n\n      <ActionMenu.Overlay width=\"small\">\n        <ActionList>\n          {showUndo && (\n            <ActionList.Item\n              onSelect={onReset}\n              aria-label={undoTitle}\n              inactiveText={changed ? undefined : 'No change to undo'}\n            >\n              <ActionList.LeadingVisual>\n                <UndoIcon />\n              </ActionList.LeadingVisual>\n              <Text sx={{fontWeight: 'bold', display: 'block'}}>Undo</Text>\n              <Text sx={{fontSize: 'small', color: 'fg.subtle'}}>Reset to the last used value</Text>\n            </ActionList.Item>\n          )}\n          {required && (\n            <ActionList.Item onSelect={() => onChange('')} aria-label={resetToDefaultTitle}>\n              <ActionList.LeadingVisual>\n                <SyncIcon />\n              </ActionList.LeadingVisual>\n              <Text sx={{fontWeight: 'bold', display: 'block'}}>Reset to default</Text>\n              <Text sx={{fontSize: 'small', color: 'fg.subtle'}}>Inherit the value defined by the organization</Text>\n            </ActionList.Item>\n          )}\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>\n  )\n}\n\ntry{ CustomPropertyValuesTable.displayName ||= 'CustomPropertyValuesTable' } catch {}\ntry{ CustomPropertyReadValueRow.displayName ||= 'CustomPropertyReadValueRow' } catch {}\ntry{ CustomPropertyEditValueRow.displayName ||= 'CustomPropertyEditValueRow' } catch {}\ntry{ DataTableRow.displayName ||= 'DataTableRow' } catch {}\ntry{ DisplayPropertyValue.displayName ||= 'DisplayPropertyValue' } catch {}\ntry{ ResetDropdown.displayName ||= 'ResetDropdown' } catch {}","import type {PropertyValue, ValueType} from '../custom-properties-types'\n\nexport function isPropertyValueArray(value?: PropertyValue): value is string[] {\n  return Array.isArray(value)\n}\n\nexport function isEmptyPropertyValue(value?: PropertyValue | null): boolean {\n  if (!value) return true\n  return value.length === 0\n}\n\nexport function getEmptyValueByType(type: ValueType): PropertyValue {\n  switch (type) {\n    case 'multi_select':\n      return []\n    default:\n      return ''\n  }\n}\n\nexport function areEqualValues(value1?: PropertyValue, value2?: PropertyValue) {\n  if (Array.isArray(value1) && Array.isArray(value2)) {\n    return value1.length === value2.length && value1.every((v, i) => v === value2[i])\n  } else {\n    return value1 === value2\n  }\n}\n","import {validateRegexValuePath} from '@github-ui/paths'\nimport {requestServerValidation} from './use-async-validation'\n\nexport const validateRegexValue = async (pattern?: string, value?: string): Promise<boolean> => {\n  if (!pattern?.length || !value?.length) {\n    return true\n  }\n\n  return await requestServerValidation({pattern, value}, validateRegexValuePath())\n}\n","import {useTrackingRef} from '@github-ui/use-tracking-ref'\nimport debounce, {type DebouncedFunc, type DebounceSettings} from 'lodash-es/debounce'\nimport {useEffect, useMemo} from 'react'\n\nexport interface DebounceHookChangeSettings {\n  /**\n   * When the parameters (ie, the wait duration or any settings) are changed or the hook\n   * is unmounted, any pending trailing calls must be handled to avoid potential memory\n   * leaks. This parameter controls the handling strategy. This only has effect if\n   * `trailing` is `true`.\n   *\n   * Options are:\n   *\n   * - `flush` (default): Call pending calls immediately. May result in occasionally calling\n   *   more often than expected. This is the safest way to avoid losing data. If the callback\n   *   is async, care must be taken not to set state or perform other actions if not mounted\n   *   after awaiting.\n   * - `cancel`: Cancel pending calls. May result in dropping calls.\n   */\n  onChangeBehavior?: 'flush' | 'cancel'\n}\n\nexport type UseDebounceSettings = DebounceSettings & DebounceHookChangeSettings\n\n/**\n * Get a debounced version of the provided function. A debounced function will wait to be\n * called until `waitMs` milliseconds have passed since the last invocation. The result of\n * this hook is referentially stable with respect to `fn`, but will change if the other\n * parameters change.\n *\n * @see {@link debounce Lodash's debounce docs} for more details on available options.\n */\nexport const useDebounce = <Fn extends (...args: never[]) => unknown>(\n  fn: Fn,\n  waitMs: number,\n  {leading = false, maxWait, trailing = true, onChangeBehavior = 'flush'}: UseDebounceSettings = {},\n): DebouncedFunc<Fn> => {\n  const fnRef = useTrackingRef(fn)\n\n  const debouncedFn = useMemo(() => {\n    // It's not enough to set `maxWait` to `undefined` in the options object - it needs to not be `in`\n    // the object at all. See: https://github.com/lodash/lodash/issues/5495\n    // For `leading` and `trailing` we default to the default boolean values so they are fine.\n    const options = maxWait === undefined ? {leading, trailing} : {leading, trailing, maxWait}\n\n    return debounce((...args: Parameters<typeof fnRef.current>) => fnRef.current(...args), waitMs, options)\n  }, [fnRef, waitMs, leading, maxWait, trailing])\n\n  useEffect(\n    () => () => {\n      debouncedFn?.[onChangeBehavior]()\n    },\n    [debouncedFn, onChangeBehavior],\n  )\n\n  return debouncedFn\n}\n","import {useLayoutEffect} from '@github-ui/use-layout-effect'\nimport {useRef} from 'react'\n\nexport function useTrackingRef<T>(value: T): React.MutableRefObject<T> {\n  const ref = useRef(value)\n\n  useLayoutEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref\n}\n","import {ownerPath} from '@github-ui/paths'\nimport {ActionList, ActionMenu, Link, Text} from '@primer/react'\nimport {forwardRef, type HTMLAttributes, useRef} from 'react'\n\nimport {mixedValuePlaceholder} from './CustomPropertySelectPanel'\n\nexport interface CustomPropertyBooleanSelectProps {\n  defaultValue?: string | null\n  propertyValue: string\n  mixed?: boolean\n  onChange: (value: string) => void\n  orgName?: string\n  anchorProps?: HTMLAttributes<HTMLButtonElement>\n}\n\nexport const CustomPropertyBooleanSelect = forwardRef(\n  (\n    {\n      defaultValue = null,\n      propertyValue,\n      mixed = false,\n      onChange,\n      orgName = '',\n      anchorProps = {},\n    }: CustomPropertyBooleanSelectProps,\n    ref: React.ForwardedRef<HTMLButtonElement>,\n  ) => {\n    const initiallyMixedRef = useRef(mixed)\n\n    const defaultValueSelected = !!defaultValue && propertyValue === ''\n    const displayedDefault = `default (${defaultValue})`\n\n    const headerButtonText = (() => {\n      if (mixed) {\n        return mixedValuePlaceholder\n      }\n      if (defaultValueSelected) {\n        return displayedDefault\n      }\n      return propertyValue || 'Choose an option'\n    })()\n\n    return (\n      <ActionMenu anchorRef={ref as React.RefObject<HTMLButtonElement>}>\n        <ActionMenu.Button\n          {...anchorProps}\n          sx={{width: '100%', 'span[data-component=buttonContent]': {justifyContent: 'start'}}}\n        >\n          {headerButtonText}\n        </ActionMenu.Button>\n        <ActionMenu.Overlay width={defaultValue ? 'medium' : 'small'}>\n          <ActionList selectionVariant=\"single\" role=\"menu\" aria-label=\"True/false property value selections\">\n            {initiallyMixedRef.current && (\n              <ActionList.Item selected={mixed} inactiveText=\"This property has multiple values\">\n                Mixed\n              </ActionList.Item>\n            )}\n            {defaultValue && (\n              <ActionList.Item onSelect={() => onChange('')} selected={defaultValueSelected && !mixed}>\n                <Text sx={{fontWeight: 'normal'}}>{displayedDefault}</Text>\n                <ActionList.Description variant=\"block\">\n                  Inherited from{' '}\n                  <Link inline href={ownerPath({owner: orgName})}>\n                    {orgName}\n                  </Link>\n                </ActionList.Description>\n              </ActionList.Item>\n            )}\n\n            {(initiallyMixedRef.current || defaultValue) && <ActionList.Divider />}\n\n            {['true', 'false'].map(value => {\n              const selected = propertyValue === value\n              return (\n                <ActionList.Item\n                  key={value}\n                  selected={selected}\n                  onSelect={() => (selected ? onChange('') : onChange(value))}\n                >\n                  {value}\n                </ActionList.Item>\n              )\n            })}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>\n    )\n  },\n)\n\nCustomPropertyBooleanSelect.displayName = 'CustomPropertyBooleanSelect'\n","import type {PropertyDefinition, PropertyValue} from '@github-ui/custom-properties-types'\nimport {isEmptyPropertyValue, isPropertyValueArray} from '@github-ui/custom-properties-types/helpers'\nimport {CircleSlashIcon, TriangleDownIcon} from '@primer/octicons-react'\nimport {Button, SelectPanel, type SelectPanelProps, Truncate} from '@primer/react'\nimport type {ItemInput} from '@primer/react/lib-esm/deprecated/ActionList/List'\nimport {type RefObject, useMemo, useState} from 'react'\n\nexport const mixedValuePlaceholder = '(Mixed)'\n\nconst noMatchesItem = {\n  leadingVisual: CircleSlashIcon,\n  text: 'No matches',\n  disabled: true,\n  selected: undefined, // hide checkbox\n  key: 'no-matches',\n  id: 'no-matches',\n}\n\nexport interface CustomPropertySelectPanelProps {\n  propertyDefinition: PropertyDefinition\n  propertyValue?: PropertyValue\n  mixed: boolean\n  onChange: (value: PropertyValue) => void\n  // TODO remove with custom_properties_edit_modal\n  hideDefaultPlaceholder?: boolean\n}\n\nexport interface CustomPropertySingleSelectPanelProps extends CustomPropertySelectPanelProps {\n  propertyValue: string\n}\nexport function CustomPropertySingleSelectPanel({\n  propertyDefinition,\n  propertyValue,\n  mixed,\n  onChange,\n  hideDefaultPlaceholder,\n}: CustomPropertySingleSelectPanelProps) {\n  const selectPanelProps = useSelectPanelProps(\n    propertyDefinition,\n    mixed,\n    propertyValue ? [propertyValue] : [],\n    hideDefaultPlaceholder,\n  )\n  const selectedItem = selectPanelProps.items.find(item => item.text && propertyValue === item.text)\n\n  return (\n    <SelectPanel\n      {...selectPanelProps}\n      onSelectedChange={(newItemValue?: ItemInput) => onChange(newItemValue?.text || '')}\n      selected={selectedItem}\n    />\n  )\n}\n\ninterface CustomPropertyMultiSelectPanelProps extends CustomPropertySelectPanelProps {\n  propertyValue: string[]\n  anchorRef?: RefObject<HTMLElement>\n}\nexport function CustomPropertyMultiSelectPanel({\n  anchorRef,\n  propertyDefinition,\n  propertyValue,\n  mixed,\n  onChange,\n  hideDefaultPlaceholder,\n}: CustomPropertyMultiSelectPanelProps) {\n  const selectPanelProps = useSelectPanelProps(propertyDefinition, mixed, propertyValue, hideDefaultPlaceholder)\n  const selectedItems = selectPanelProps.items.filter(item => item.selected)\n\n  return (\n    <SelectPanel\n      {...selectPanelProps}\n      anchorRef={anchorRef}\n      onSelectedChange={(newItemValues: ItemInput[]) => {\n        const {filterValue} = selectPanelProps\n        const newValues = newItemValues.map(item => item.text || '')\n        if (!filterValue) {\n          onChange(newValues)\n        } else {\n          const isFilteredOut = (value: string) => !value.toLowerCase().includes(filterValue.toLowerCase())\n          const hiddenSelectedValues = propertyValue.filter(isFilteredOut)\n          onChange([...hiddenSelectedValues, ...newValues])\n        }\n      }}\n      selected={selectedItems}\n    />\n  )\n}\n\nconst maxItemsViewport = 7\nfunction useSelectPanelProps(\n  propertyDefinition: PropertyDefinition,\n  mixed: boolean,\n  initialSelection: string[],\n  // TODO remove with custom_properties_edit_modal\n  hideDefaultPlaceholder?: boolean,\n) {\n  const {propertyName, defaultValue} = propertyDefinition\n  const [isOpen, setOpen] = useState(false)\n  const [filterText, setFilterText] = useState('')\n\n  const allItems = useMemo(\n    () => (propertyDefinition.allowedValues || []).map(value => toItemInput(value, initialSelection.includes(value))),\n    [propertyDefinition, initialSelection],\n  )\n  const items = getDisplayItems(allItems, filterText.toLowerCase())\n  const height = items.length > maxItemsViewport ? 'medium' : 'auto'\n\n  const anchorLabel = getDisplayAnchorLabel(initialSelection, hideDefaultPlaceholder ? null : defaultValue, mixed)\n  return {\n    items,\n    renderAnchor: (anchorProps: React.HTMLAttributes<HTMLElement>) => (\n      <Button\n        block\n        alignContent=\"start\"\n        aria-label={mixed ? mixedValuePlaceholder : `Select ${propertyName}`}\n        trailingAction={TriangleDownIcon}\n        sx={{minWidth: 0, '>span[data-component=\"buttonContent\"]': {flex: 1}}}\n        {...anchorProps}\n      >\n        <Truncate maxWidth=\"100%\" title={anchorLabel}>\n          {anchorLabel}\n        </Truncate>\n      </Button>\n    ),\n    placeholderText: 'Search for values',\n    filterValue: filterText,\n    open: isOpen,\n    onFilterChange: setFilterText,\n    onOpenChange: (newIsOpen: boolean) => {\n      setOpen(newIsOpen)\n      setFilterText('')\n    },\n    overlayProps: {height, width: 'medium'},\n    // Had to omit renderAnchor too because of a weird null type that TypeScript complains about\n  } as Omit<SelectPanelProps, 'renderAnchor' | 'selected' | 'onSelectedChange'>\n}\n\nfunction toItemInput(value: string, selected: boolean): ItemInput {\n  return {\n    id: value,\n    text: value,\n    selected,\n  }\n}\n\nfunction getDisplayItems(allItems: ItemInput[], filter: string) {\n  const matchesFilter = (item: ItemInput) => (item.text || '').toLowerCase().includes(filter)\n  const items = filter ? allItems.filter(matchesFilter) : allItems\n  if (items.length === 0) {\n    return [noMatchesItem]\n  }\n  return items\n}\n\nexport function getDisplayAnchorLabel(\n  value: PropertyValue,\n  defaultValue: PropertyValue | null,\n  mixed: boolean,\n): string {\n  if (mixed) {\n    return mixedValuePlaceholder\n  }\n\n  if (!isEmptyPropertyValue(value)) {\n    return getValueLabel(value)\n  } else if (!isEmptyPropertyValue(defaultValue)) {\n    return `default (${getValueLabel(defaultValue || '')})`\n  } else {\n    return 'Choose an option'\n  }\n}\n\nfunction getValueLabel(value: PropertyValue): string {\n  if (isPropertyValueArray(value)) {\n    if (value.length <= 1) {\n      return value[0] || ''\n    } else {\n      return `${value.length} selected`\n    }\n  } else {\n    return value\n  }\n}\n\ntry{ CustomPropertySingleSelectPanel.displayName ||= 'CustomPropertySingleSelectPanel' } catch {}\ntry{ CustomPropertyMultiSelectPanel.displayName ||= 'CustomPropertyMultiSelectPanel' } catch {}"],"names":["BOOLEAN_PROPERTY_ALLOWED_VALUES","NAME_INVALID_CHARS_REGEX","VALUE_INVALID_CHARS_REGEX","validatePropertyNameSync","value","existingPropertyNames","length","name","toLowerCase","invalidChars","findChars","validatePropertyNameAsync","businessSlug","propertyName","genericFailureMessage","response","verifiedFetchJSON","checkPropertyNamePath","sourceName","ok","status","orgConflicts","json","message","validateAllowedValue","existingAllowedValues","has","validatePropertyDescription","INVALID_VALUE_TYPE_MESSAGE","NO_MATCHING_OPTION","validatePropertyDefaultValue","valueType","isRequired","allowedValues","regexPattern","isPropertyValueArray","includes","every","v","validateValue","validateRegexValue","regex","chars","Array","from","matchAll","Set","map","c","join","useEditCustomProperties","reposProperties","definitions","deps","originalMergedValues","setOriginalMergedValues","useState","mergeProperties","mergedValues","propertiesCounter","repoProperties","Object","entries","propertyValue","areEqualValues","mixed","count","regexPatternMap","useMemo","Map","definition","undefined","errors","setErrors","modifiedProperties","setModifiedProperties","useEffect","validateErrors","useCallback","error","get","updatedErrors","debouncedValidateError","useDebounce","onChangeBehavior","propertyValuesMap","propertyValuesWithoutErrors","reduce","acc","update","originalValue","isModified","changed","entry","valueMap","setPropertyValue","property","revertPropertyValue","updatedProperties","discardChanges","commitChanges","modifiedPropertiesToCommit","mergedValue","propertyFieldsToChangedPropertiesMap","valuesMap","def","field","getEmptyValueByType","CustomPropertyInput","props","defaultValue","propertyDefinition","CustomPropertySingleSelectPanel","CustomPropertyMultiSelectPanel","booleanMenuEnabled","CustomPropertyBooleanSelect","StringPropertyInput","block","onChange","hideDefaultPlaceholder","inputProps","placeholder","mixedValuePlaceholder","TextInput","aria-label","event","target","displayName","lineClampSx","display","overflow","wordBreak","textOverflow","PropertiesOverlayEditor","org","onApply","appliedValue","initialValueOption","isEmptyPropertyValue","valueOption","setValueOption","valueField","missingValueError","setMissingValueError","open","setOpen","resetAndClose","anchorLabel","getDisplayAnchorLabel","defaultRadioLabel","isMixed","AnchoredOverlay","onOpen","onClose","renderAnchor","anchorProps","Button","alignContent","trailingAction","TriangleDownIcon","sx","minWidth","flex","data-testid","Truncate","maxWidth","title","side","overlayProps","role","width","Box","p","borderBottom","borderBottomColor","boxSizing","RadioGroup","selected","Label","visuallyHidden","FormControl","Radio","checked","Caption","Link","inline","href","ownerPath","owner","pl","orgName","Validation","variant","pt","gap","justifyContent","size","onClick","CustomPropertyValuesTable","showLockMessages","showUndo","propertiesOverlayEditorEnabled","editableDefinitions","editableDefinitionsSet","border","borderColor","borderRadius","borderBottomWidth","isEditable","px","borderBottomStyle","CustomPropertyEditValueRow","newValue","onReset","CustomPropertyReadValueRow","description","DataTableRow","label","getControlLabel","DisplayPropertyValue","bottomMessage","Text","color","ShieldLockIcon","useFeatureFlag","useNewBooleanMenu","propertyNameValidationId","required","id","trailing","ResetDropdown","formControlStyle","py","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","gridArea","pr","whiteSpace","mt","Token","text","mr","undoTitle","resetToDefaultTitle","ActionMenu","Anchor","IconButton","unsafeDisableTooltip","icon","KebabHorizontalIcon","Overlay","ActionList","Item","onSelect","inactiveText","LeadingVisual","UndoIcon","fontWeight","fontSize","SyncIcon","isArray","type","value1","value2","i","pattern","requestServerValidation","validateRegexValuePath","fn","waitMs","leading","maxWait","fnRef","useTrackingRef","debouncedFn","options","debounce","args","current","ref","useRef","useLayoutEffect","forwardRef","initiallyMixedRef","defaultValueSelected","displayedDefault","headerButtonText","anchorRef","selectionVariant","Description","Divider","noMatchesItem","leadingVisual","CircleSlashIcon","disabled","key","selectPanelProps","useSelectPanelProps","selectedItem","items","find","item","SelectPanel","onSelectedChange","newItemValue","selectedItems","filter","filterValue","newValues","newItemValues","initialSelection","isOpen","filterText","setFilterText","getDisplayItems","allItems","height","placeholderText","onFilterChange","onOpenChange","newIsOpen","getValueLabel"],"sourceRoot":""}
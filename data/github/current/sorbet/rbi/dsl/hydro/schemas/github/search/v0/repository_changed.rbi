# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Search::V0::RepositoryChanged`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Search::V0::RepositoryChanged`.

class Hydro::Schemas::Github::Search::V0::RepositoryChanged
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      auth_version: T.nilable(Integer),
      blackbird_ancestor_repo_ids: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      blackbird_epoch_id: T.nilable(Integer),
      blackbird_experiments: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      blackbird_max_repo_score: T.nilable(Float),
      blackbird_suggested_child_id: T.nilable(Integer),
      blackbird_target_corpus: T.nilable(String),
      change: T.nilable(T.any(Symbol, Integer)),
      is_owner_paying_customer: T.nilable(T::Boolean),
      old_owner_id: T.nilable(Integer),
      owner_feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      owner_name: T.nilable(String),
      ref: T.nilable(String),
      repo_score: T.nilable(Integer),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_id: T.nilable(String),
      target_collections: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      tracing_carrier: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      updated_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(actor: nil, auth_version: nil, blackbird_ancestor_repo_ids: T.unsafe(nil), blackbird_epoch_id: nil, blackbird_experiments: T.unsafe(nil), blackbird_max_repo_score: nil, blackbird_suggested_child_id: nil, blackbird_target_corpus: nil, change: nil, is_owner_paying_customer: nil, old_owner_id: nil, owner_feature_flags: T.unsafe(nil), owner_name: nil, ref: nil, repo_score: nil, repository: nil, request_id: nil, target_collections: T.unsafe(nil), tracing_carrier: T.unsafe(nil), updated_at: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(Integer) }
  def auth_version; end

  sig { params(value: Integer).void }
  def auth_version=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def blackbird_ancestor_repo_ids; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def blackbird_ancestor_repo_ids=(value); end

  sig { returns(Integer) }
  def blackbird_epoch_id; end

  sig { params(value: Integer).void }
  def blackbird_epoch_id=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def blackbird_experiments; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def blackbird_experiments=(value); end

  sig { returns(Float) }
  def blackbird_max_repo_score; end

  sig { params(value: Float).void }
  def blackbird_max_repo_score=(value); end

  sig { returns(Integer) }
  def blackbird_suggested_child_id; end

  sig { params(value: Integer).void }
  def blackbird_suggested_child_id=(value); end

  sig { returns(String) }
  def blackbird_target_corpus; end

  sig { params(value: String).void }
  def blackbird_target_corpus=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def change; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def change=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_auth_version; end

  sig { void }
  def clear_blackbird_ancestor_repo_ids; end

  sig { void }
  def clear_blackbird_epoch_id; end

  sig { void }
  def clear_blackbird_experiments; end

  sig { void }
  def clear_blackbird_max_repo_score; end

  sig { void }
  def clear_blackbird_suggested_child_id; end

  sig { void }
  def clear_blackbird_target_corpus; end

  sig { void }
  def clear_change; end

  sig { void }
  def clear_is_owner_paying_customer; end

  sig { void }
  def clear_old_owner_id; end

  sig { void }
  def clear_owner_feature_flags; end

  sig { void }
  def clear_owner_name; end

  sig { void }
  def clear_ref; end

  sig { void }
  def clear_repo_score; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_id; end

  sig { void }
  def clear_target_collections; end

  sig { void }
  def clear_tracing_carrier; end

  sig { void }
  def clear_updated_at; end

  sig { returns(T::Boolean) }
  def is_owner_paying_customer; end

  sig { params(value: T::Boolean).void }
  def is_owner_paying_customer=(value); end

  sig { returns(Integer) }
  def old_owner_id; end

  sig { params(value: Integer).void }
  def old_owner_id=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def owner_feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def owner_feature_flags=(value); end

  sig { returns(String) }
  def owner_name; end

  sig { params(value: String).void }
  def owner_name=(value); end

  sig { returns(String) }
  def ref; end

  sig { params(value: String).void }
  def ref=(value); end

  sig { returns(Integer) }
  def repo_score; end

  sig { params(value: Integer).void }
  def repo_score=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(String) }
  def request_id; end

  sig { params(value: String).void }
  def request_id=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def target_collections; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def target_collections=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def tracing_carrier; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def tracing_carrier=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end
end

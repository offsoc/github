# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `azure-storage-common` gem.
# Please instead update this file by running `bin/tapioca gem azure-storage-common`.

# source://azure-storage-common//lib/azure/storage/common/core/autoload.rb#27
module Azure; end

# source://azure-storage-common//lib/azure/storage/common/core/autoload.rb#28
module Azure::Storage; end

# source://azure-storage-common//lib/azure/storage/common/core/autoload.rb#29
module Azure::Storage::Common; end

# Defines constants for use with shared access policies.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#168
module Azure::Storage::Common::AclConstants; end

# XML element for an access policy.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#170
Azure::Storage::Common::AclConstants::ACCESS_POLICY = T.let(T.unsafe(nil), String)

# XML element for the end time of an access policy.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#173
Azure::Storage::Common::AclConstants::EXPIRY = T.let(T.unsafe(nil), String)

# XML attribute for IDs.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#176
Azure::Storage::Common::AclConstants::ID = T.let(T.unsafe(nil), String)

# XML element for the permission of an access policy.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#179
Azure::Storage::Common::AclConstants::PERMISSION = T.let(T.unsafe(nil), String)

# XML element for signed identifiers.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#185
Azure::Storage::Common::AclConstants::SIGNED_IDENTIFIERS_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for a signed identifier.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#182
Azure::Storage::Common::AclConstants::SIGNED_IDENTIFIER_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for the start time of an access policy.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#188
Azure::Storage::Common::AclConstants::START = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/autoload.rb#47
module Azure::Storage::Common::Auth; end

# source://azure-storage-common//lib/azure/storage/common/client.rb#28
class Azure::Storage::Common::Client
  include ::Azure::Storage::Common::Configurable
  include ::Azure::Storage::Common::ClientOptions
  include ::Azure::Storage::Common::Core::HttpClient

  # Public: Creates an instance of [Azure::Storage::Common::Client]
  #
  # ==== Attributes
  #
  # * +options+    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  #
  # * +:use_development_storage+        - TrueClass|FalseClass. Whether to use storage emulator.
  # * +:development_storage_proxy_uri+  - String. Used with +:use_development_storage+ if emulator is hosted other than localhost.
  # * +:storage_connection_string+      - String. The storage connection string.
  # * +:storage_account_name+           - String. The name of the storage account.
  # * +:storage_access_key+             - Base64 String. The access key of the storage account.
  # * +:storage_sas_token+              - String. The signed access signature for the storage account or one of its service.
  # * +:storage_blob_host+              - String. Specified Blob serivce endpoint or hostname
  # * +:storage_table_host+             - String. Specified Table serivce endpoint or hostname
  # * +:storage_queue_host+             - String. Specified Queue serivce endpoint or hostname
  # * +:storage_dns_suffix+             - String. The suffix of a regional Storage Serivce, to
  # * +:default_endpoints_protocol+     - String. http or https
  # * +:use_path_style_uri+             - String. Whether use path style URI for specified endpoints
  # * +:ca_file+                        - String. File path of the CA file if having issue with SSL
  # * +:user_agent_prefix+              - String. The user agent prefix that can identify the application calls the library
  #
  # The valid set of options include:
  # * Storage Emulator: +:use_development_storage+ required, +:development_storage_proxy_uri+ optionally
  # * Storage account name and key: +:storage_account_name+ and +:storage_access_key+ required, set +:storage_dns_suffix+ necessarily
  # * Storage account name and SAS token: +:storage_account_name+ and +:storage_sas_token+ required, set +:storage_dns_suffix+ necessarily
  # * Specified hosts and SAS token: At least one of the service host and SAS token. It's up to user to ensure the SAS token is suitable for the serivce
  # * Anonymous Blob: only +:storage_blob_host+, if it is to only access blobs within a container
  #
  # Additional notes:
  # * Specified hosts can be set when use account name with access key or sas token
  # * +:default_endpoints_protocol+ can be set if the scheme is not specified in hosts
  # * Storage emulator always use path style URI
  # * +:ca_file+ is independent.
  #
  # When empty options are given, it will try to read settings from Environment Variables. Refer to [Azure::Storage::Common::ClientOptions.env_vars_mapping] for the mapping relationship
  #
  # @return [Azure::Storage::Common::Client]
  #
  # source://azure-storage-common//lib/azure/storage/common/client.rb#74
  def initialize(options = T.unsafe(nil), &block); end

  class << self
    # Public: Creates an instance of [Azure::Storage::Common::Client]
    #
    # ==== Attributes
    #
    # * +options+    - Hash. Optional parameters.
    #
    # ==== Options
    #
    # Accepted key/value pairs in options parameter are:
    #
    # * +:use_development_storage+        - TrueClass|FalseClass. Whether to use storage emulator.
    # * +:development_storage_proxy_uri+  - String. Used with +:use_development_storage+ if emulator is hosted other than localhost.
    # * +:storage_account_name+           - String. The name of the storage account.
    # * +:storage_access_key+             - Base64 String. The access key of the storage account.
    # * +:storage_sas_token+              - String. The signed access signature for the storage account or one of its service.
    # * +:storage_blob_host+              - String. Specified Blob service endpoint or hostname
    # * +:storage_table_host+             - String. Specified Table service endpoint or hostname
    # * +:storage_queue_host+             - String. Specified Queue service endpoint or hostname
    # * +:storage_dns_suffix+             - String. The suffix of a regional Storage Service, to
    # * +:default_endpoints_protocol+     - String. http or https
    # * +:use_path_style_uri+             - String. Whether use path style URI for specified endpoints
    # * +:ca_file+                        - String. File path of the CA file if having issue with SSL
    # * +:ssl_version+                    - Symbol. The ssl version to be used, sample: :TLSv1_1, :TLSv1_2, for the details, see https://github.com/ruby/openssl/blob/master/lib/openssl/ssl.rb
    # * +:ssl_min_version+                - Symbol. The min ssl version supported, only supported in Ruby 2.5+
    # * +:ssl_max_version+                - Symbol. The max ssl version supported, only supported in Ruby 2.5+
    # * +:user_agent_prefix+              - String. The user agent prefix that can identify the application calls the library
    #
    # The valid set of options include:
    # * Storage Emulator: +:use_development_storage+ required, +:development_storage_proxy_uri+ optionally
    # * Storage account name and key: +:storage_account_name+ and +:storage_access_key+ required, set +:storage_dns_suffix+ necessarily
    # * Storage account name and SAS token: +:storage_account_name+ and +:storage_sas_token+ required, set +:storage_dns_suffix+ necessarily
    # * Specified hosts and SAS token: At least one of the service host and SAS token. It's up to user to ensure the SAS token is suitable for the serivce
    # * Anonymous Blob: only +:storage_blob_host+, if it is to only access blobs within a container
    #
    # Additional notes:
    # * Specified hosts can be set when use account name with access key or sas token
    # * +:default_endpoints_protocol+ can be set if the scheme is not specified in hosts
    # * Storage emulator always use path style URI
    # * +:ca_file+ is independent.
    #
    # When empty options are given, it will try to read settings from Environment Variables. Refer to [Azure::Storage::Common::ClientOptions.env_vars_mapping] for the mapping relationship
    #
    # @return [Azure::Storage::Common::Client]
    #
    # source://azure-storage-common//lib/azure/storage/common/client.rb#127
    def create(options = T.unsafe(nil), &block); end

    # Public: Creates an instance of [Azure::Storage::Common::Client] with Storage Emulator
    #
    # ==== Attributes
    #
    # * +proxy_uri+    - String. Used with +:use_development_storage+ if emulator is hosted other than localhost.
    #
    # @return [Azure::Storage::Common::Client]
    #
    # source://azure-storage-common//lib/azure/storage/common/client.rb#138
    def create_development(proxy_uri = T.unsafe(nil), &block); end

    # Public: Creates an instance of [Azure::Storage::Common::Client] from Environment Variables
    #
    # ==== Attributes
    #
    # * +connection_string+    - String. Please refer to https://azure.microsoft.com/en-us/documentation/articles/storage-configure-connection-string/.
    #
    # @return [Azure::Storage::Common::Client]
    #
    # source://azure-storage-common//lib/azure/storage/common/client.rb#157
    def create_from_connection_string(connection_string, &block); end

    # Public: Creates an instance of [Azure::Storage::Common::Client] from Environment Variables
    #
    # @return [Azure::Storage::Client]
    #
    # source://azure-storage-common//lib/azure/storage/common/client.rb#146
    def create_from_env(&block); end
  end
end

# source://azure-storage-common//lib/azure/storage/common/client_options.rb#32
module Azure::Storage::Common::ClientOptions
  # Returns the value of attribute ca_file.
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#33
  def ca_file; end

  # Sets the attribute ca_file
  #
  # @param value the value to set the attribute ca_file to.
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#33
  def ca_file=(_arg0); end

  # The options after validated and normalized
  #
  # @return [Hash]
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#107
  def options; end

  # Public: Reset options for [Azure::Storage::Common::Client]
  #
  # ==== Attributes
  #
  # * +options+                         - Hash | String. Optional parameters or storage connection string.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  #
  # * +:use_development_storage+        - TrueClass|FalseClass. Whether to use storage emulator.
  # * +:development_storage_proxy_uri+  - String. Used with +:use_development_storage+ if emulator is hosted other than localhost.
  # * +:storage_connection_string+      - String. The storage connection string.
  # * +:storage_account_name+           - String. The name of the storage account.
  # * +:storage_access_key+             - Base64 String. The access key of the storage account.
  # * +:storage_sas_token+              - String. The signed access signature for the storage account or one of its service.
  # * +:storage_blob_host+              - String. Specified Blob serivce endpoint or hostname
  # * +:storage_table_host+             - String. Specified Table serivce endpoint or hostname
  # * +:storage_queue_host+             - String. Specified Queue serivce endpoint or hostname
  # * +:storage_dns_suffix+             - String. The suffix of a regional Storage Serivce, to
  # * +:default_endpoints_protocol+     - String. http or https
  # * +:use_path_style_uri+             - String. Whether use path style URI for specified endpoints
  # * +:ca_file+                        - String. File path of the CA file if having issue with SSL
  # * +:ssl_version+                    - Symbol. The ssl version to be used, sample: :TLSv1_1, :TLSv1_2, for the details, see https://github.com/ruby/openssl/blob/master/lib/openssl/ssl.rb
  # * +:ssl_min_version+                - Symbol. The min ssl version supported, only supported in Ruby 2.5+
  # * +:ssl_max_version+                - Symbol. The max ssl version supported, only supported in Ruby 2.5+
  #
  # The valid set of options include:
  # * Storage Emulator: +:use_development_storage+ required, +:development_storage_proxy_uri+ optionally
  # * Storage account name and key: +:storage_account_name+ and +:storage_access_key+ required, set +:storage_dns_suffix+ necessarily
  # * Storage account name and SAS token: +:storage_account_name+ and +:storage_sas_token+ required, set +:storage_dns_suffix+ necessarily
  # * Specified hosts and SAS token: At least one of the service host and SAS token. It's up to user to ensure the SAS token is suitable for the serivce
  # * Anonymous Blob: only +:storage_blob_host+, if it is to only access blobs within a container
  #
  # Additional notes:
  # * Specified hosts can be set when use account name with access key or sas token
  # * +:default_endpoints_protocol+ can be set if the scheme is not specified in hosts
  # * Storage emulator always use path style URI
  #
  # When empty options are given, it will try to read settings from Environment Variables. Refer to [Azure::Storage::Common:ClientOptions.env_vars_mapping] for the mapping relationship
  #
  # @return [Azure::Storage::Common::Client]
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#77
  def reset!(options = T.unsafe(nil)); end

  # Check if this client is configured with the same options
  #
  # @return [Boolean]
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#100
  def same_options?(opts); end

  # Returns the value of attribute ssl_max_version.
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#33
  def ssl_max_version; end

  # Sets the attribute ssl_max_version
  #
  # @param value the value to set the attribute ssl_max_version to.
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#33
  def ssl_max_version=(_arg0); end

  # Returns the value of attribute ssl_min_version.
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#33
  def ssl_min_version; end

  # Sets the attribute ssl_min_version
  #
  # @param value the value to set the attribute ssl_min_version to.
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#33
  def ssl_min_version=(_arg0); end

  # Returns the value of attribute ssl_version.
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#33
  def ssl_version; end

  # Sets the attribute ssl_version
  #
  # @param value the value to set the attribute ssl_version to.
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#33
  def ssl_version=(_arg0); end

  private

  # @raise [InvalidOptionsError]
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#176
  def filter(opts = T.unsafe(nil)); end

  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#277
  def is_base64_encoded; end

  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#294
  def is_non_empty_string; end

  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#290
  def is_true; end

  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#283
  def is_url; end

  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#338
  def load_env; end

  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#171
  def method_missing(method_name, *args, &block); end

  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#266
  def normalize_hosts(options); end

  # @raise [InvalidConnectionStringError]
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#347
  def parse_connection_string(connection_string); end

  # @raise [InvalidOptionsError]
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options.rb#298
  def validated_options(opts, requirements = T.unsafe(nil)); end

  class << self
    # The mapping between Storage Connection String items and the options name
    #
    # @return [Hash]
    #
    # source://azure-storage-common//lib/azure/storage/common/client_options.rb#153
    def connection_string_mapping; end

    # The mapping between Storage Environment Variables and the options name
    #
    # @return [Hash]
    #
    # source://azure-storage-common//lib/azure/storage/common/client_options.rb#135
    def env_vars_mapping; end

    # The valid options for the storage client
    #
    # @return [Array]
    #
    # source://azure-storage-common//lib/azure/storage/common/client_options.rb#114
    def valid_options; end
  end
end

# The Azure::Storage::Common::Configurable module provides basic configuration for Azure storage activities.
#
# source://azure-storage-common//lib/azure/storage/common/configurable.rb#29
module Azure::Storage::Common::Configurable
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#94
  def config; end

  # Set configuration options using a block
  #
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Common::Configurable] the object that the method was called on
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#90
  def configure; end

  # Reset configuration options to default values
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#99
  def reset_config!(options = T.unsafe(nil)); end

  # Reset configuration options to default values
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#99
  def setup(options = T.unsafe(nil)); end

  # Returns the value of attribute signer.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#69
  def signer; end

  # Returns the value of attribute storage_access_key.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#55
  def storage_access_key; end

  # @return [String] Azure Storage access key.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#55
  def storage_access_key=(_arg0); end

  # @return [String] Azure Storage account name.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#55
  def storage_account_name; end

  # @return [String] Azure Storage account name.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#55
  def storage_account_name=(_arg0); end

  # Storage blob host
  #
  # @return [String]
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#133
  def storage_blob_host(isSecondary = T.unsafe(nil)); end

  # @return [String] Set the host for the Blob service. Only set this if you want
  #   something custom (like, for example, to point this to a LocalStorage
  #   emulator). This should be the complete host, including http:// at the
  #   start. When using the emulator, make sure to include your account name at
  #   the end.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#60
  def storage_blob_host=(_arg0); end

  # Sets the attribute storage_blob_host_secondary
  #
  # @param value the value to set the attribute storage_blob_host_secondary to.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#60
  def storage_blob_host_secondary=(_arg0); end

  # @return [String] Azure Storage connection string.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#55
  def storage_connection_string; end

  # @return [String] Azure Storage connection string.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#55
  def storage_connection_string=(_arg0); end

  # Storage file host
  #
  # @return [String]
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#153
  def storage_file_host(isSecondary = T.unsafe(nil)); end

  # Sets the attribute storage_file_host
  #
  # @param value the value to set the attribute storage_file_host to.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#60
  def storage_file_host=(_arg0); end

  # Sets the attribute storage_file_host_secondary
  #
  # @param value the value to set the attribute storage_file_host_secondary to.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#60
  def storage_file_host_secondary=(_arg0); end

  # Storage queue host
  #
  # @return [String]
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#123
  def storage_queue_host(isSecondary = T.unsafe(nil)); end

  # @return [String] Set the host for the Queue service. Only set this if you want
  #   something custom (like, for example, to point this to a LocalStorage
  #   emulator). This should be the complete host, including http:// at the
  #   start. When using the emulator, make sure to include your account name at
  #   the end.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#60
  def storage_queue_host=(_arg0); end

  # Sets the attribute storage_queue_host_secondary
  #
  # @param value the value to set the attribute storage_queue_host_secondary to.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#60
  def storage_queue_host_secondary=(_arg0); end

  # Returns the value of attribute storage_sas_token.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#55
  def storage_sas_token; end

  # Sets the attribute storage_sas_token
  #
  # @param value the value to set the attribute storage_sas_token to.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#55
  def storage_sas_token=(_arg0); end

  # Storage table host
  #
  # @return [String]
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#143
  def storage_table_host(isSecondary = T.unsafe(nil)); end

  # @return [String] Set the host for the Table service. Only set this if you want
  #   something custom (like, for example, to point this to a LocalStorage
  #   emulator). This should be the complete host, including http:// at the
  #   start. When using the emulator, make sure to include your account name at
  #   the end.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#60
  def storage_table_host=(_arg0); end

  # Sets the attribute storage_table_host_secondary
  #
  # @param value the value to set the attribute storage_table_host_secondary to.
  #
  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#60
  def storage_table_host_secondary=(_arg0); end

  private

  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#175
  def account_name_from_endpoint(endpoint); end

  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#163
  def default_host(service, isSecondary = T.unsafe(nil)); end

  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#188
  def determine_account_name; end

  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#182
  def secondary_endpoint(primary_endpoint); end

  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#167
  def setup_options; end

  # source://azure-storage-common//lib/azure/storage/common/configurable.rb#205
  def setup_signer_for_service(api_ver); end

  class << self
    # List of configurable keys for {Azure::Client}
    #
    # @return [Array] of option keys
    #
    # source://azure-storage-common//lib/azure/storage/common/configurable.rb#74
    def keys; end
  end
end

# source://azure-storage-common//lib/azure/storage/common/core/autoload.rb#30
module Azure::Storage::Common::Core; end

# source://azure-storage-common//lib/azure/storage/common/core/autoload.rb#37
module Azure::Storage::Common::Core::Auth; end

# source://azure-storage-common//lib/azure/storage/common/core/auth/anonymous_signer.rb#31
class Azure::Storage::Common::Core::Auth::AnonymousSigner < ::Azure::Core::Auth::Signer
  # Public: Initialize the Anonymous Signer
  #
  # @return [AnonymousSigner] a new instance of AnonymousSigner
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/anonymous_signer.rb#33
  def initialize; end

  # source://azure-storage-common//lib/azure/storage/common/core/auth/anonymous_signer.rb#38
  def sign_request(req); end
end

# source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#36
class Azure::Storage::Common::Core::Auth::SharedAccessSignature
  # Public: Initialize the SharedAccessSignature generator
  #
  # @param account_name [String] The account name. Defaults to the one in the global configuration.
  # @param access_key [String] The access_key encoded in Base64. Defaults to the one in the global configuration.
  # @return [SharedAccessSignature] a new instance of SharedAccessSignature
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#106
  def initialize(account_name = T.unsafe(nil), access_key = T.unsafe(nil)); end

  # Returns the value of attribute account_name.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#100
  def account_name; end

  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#284
  def canonicalize_time(options); end

  # Return the cononicalized resource representation of the blob resource
  #
  # @return [String]
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#280
  def canonicalized_resource(service_type, path); end

  # Account Shared Access Signature Token for the given options
  # ==== Options
  #
  # * +:service+             - String. Required. Accessible services. Combination of 'b' (blob), 'q' (queue), 't' (table), 'f' (file).
  # * +:resource+            - String. Required. Accessible resource types. Combination of 's' (service), 'c' (container-level), 'o'(object-level).
  # * +:permissions+         - String. Required. Permissions. Combination of 'r' (read), 'w' (write), 'd'(delete), 'l'(list), 'a'(add),
  #                                              'c'(create), 'u'(update), 'p'(process). Permissions are only valid if they match
  #                                              the specified signed resource type; otherwise they are ignored.
  # * +:start+               - String. Optional. UTC Date/Time in ISO8601 format.
  # * +:expiry+              - String. Optional. UTC Date/Time in ISO8601 format. Default now + 30 minutes.
  # * +:protocol+            - String. Optional. Permitted protocols.
  # * +:ip_range+            - String. Optional. An IP address or a range of IP addresses from which to accept requests.
  #                                    When specifying a range, note that the range is inclusive.
  #
  # @param account_name [String] storage account name
  # @param options [Hash]
  # @raise [Azure::Storage::Common::InvalidOptionsError]
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#241
  def generate_account_sas_token(options = T.unsafe(nil)); end

  # Service Shared Access Signature Token for the given path and options
  # ==== Options
  #
  # * +:service+             - String. Required. Service type. 'b' (blob) or 'q' (queue) or 't' (table) or 'f' (file).
  # * +:resource+            - String. Required. Resource type, 'b' (blob) or 'c' (container) or 'f' (file) or 's' (share).
  # * +:permissions+         - String. Optional. Combination of 'r', 'a', 'c', w','d','l' in this order for a container.
  #                                              Combination of 'r', 'a', 'c', 'w', 'd' in this order for a blob.
  #                                              Combination of 'r', 'c', 'w', 'd', 'l' in this order for a share.
  #                                              Combination of 'r', 'c', 'w', 'd' in this order for a file.
  #                                              Combination of 'r', 'a', 'u', 'p' in this order for a queue.
  #                                              Combination of 'r', 'a', 'u', 'd' in this order for a table.
  #                                              This option must be omitted if it has been specified in an associated stored access policy.
  # * +:start+               - String. Optional. UTC Date/Time in ISO8601 format.
  # * +:expiry+              - String. Optional. UTC Date/Time in ISO8601 format. Default now + 30 minutes.
  # * +:identifier+          - String. Optional. Identifier for stored access policy.
  # * +:protocol+            - String. Optional. Permitted protocols.
  # * +:ip_range+            - String. Optional. An IP address or a range of IP addresses from which to accept requests.
  #
  # Below options for blob serivce only
  # * +:cache_control+       - String. Optional. Response header override.
  # * +:content_disposition+ - String. Optional. Response header override.
  # * +:content_encoding+    - String. Optional. Response header override.
  # * +:content_language+    - String. Optional. Response header override.
  # * +:content_type+        - String. Optional. Response header override.
  #
  # Below options for table service only
  # * +:startpk+             - String. Optional but must accompany startrk. The start partition key of a specified partition key range.
  # * +:endpk+               - String. Optional but must accompany endrk. The end partition key of a specified partition key range.
  # * +:startrk+             - String. Optional. The start row key of a specified row key range.
  # * +:endrk+               - String. Optional. The end row key of a specified row key range.
  #
  # @param path [String] Path of the URI or the table name
  # @param options [Hash]
  # @raise [Azure::Storage::Common::InvalidOptionsError]
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#149
  def generate_service_sas_token(path, options = T.unsafe(nil)); end

  # Construct the plaintext to the spec required for signatures
  #
  # @return [String]
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#261
  def signable_string_for_account(options); end

  # Construct the plaintext to the spec required for signatures
  #
  # @return [String]
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#192
  def signable_string_for_service(service_type, path, options); end

  # A customised URI reflecting options for the resource signed with Shared Access Signature
  # ==== Options
  #
  # * +:start+                - String. Optional. UTC Date/Time in ISO8601 format.
  # * +:expiry+               - String. Optional. UTC Date/Time in ISO8601 format. Default now + 30 minutes.
  # * +:protocol+             - String. Optional. Permitted protocols.
  # * +:ip_range+             - String. Optional. An IP address or a range of IP addresses from which to accept requests.
  #                                     When specifying a range, note that the range is inclusive.
  #
  # Below options for account SAS only
  # * +:service+              - String. Required. Accessible services. Combination of 'b' (blob), 'q' (queue), 't' (table), 'f' (file).
  # * +:resource+             - String. Required. Accessible resource types. Combination of 's' (service), 'c' (container-level), 'o'(object-level).
  # * +:permissions+          - String. Required. Permissions. Combination of 'r' (read), 'w' (write), 'd'(delete), 'l'(list), 'a'(add),
  #                                               'c'(create), 'u'(update), 'p'(process). Permissions are only valid if they match
  #                                               the specified signed resource type; otherwise they are ignored.
  #
  # Below options for service SAS only
  # * +:service+              - String. Required. Service type. 'b' (blob) or 'q' (queue) or 't' (table) or 'f' (file).
  # * +:resource+             - String. Required. Resource type, 'b' (blob) or 'c' (container) or 'f' (file) or 's' (share).
  # * +:identifier+           - String. Optional. Identifier for stored access policy.
  # * +:permissions+          - String. Optional. Combination of 'r', 'a', 'c', w','d','l' in this order for a container.
  #                                               Combination of 'r', 'a', 'c', 'w', 'd' in this order for a blob.
  #                                               Combination of 'r', 'c', 'w', 'd', 'l' in this order for a share.
  #                                               Combination of 'r', 'c', 'w', 'd' in this order for a file.
  #                                               Combination of 'r', 'a', 'u', 'p' in this order for a queue.
  #                                               Combination of 'r', 'a', 'u', 'd' in this order for a table.
  #
  # Below options for Blob service only
  # * +:cache_control+        - String. Optional. Response header override.
  # * +:content_disposition+  - String. Optional. Response header override.
  # * +:content_encoding+     - String. Optional. Response header override.
  # * +:content_language+     - String. Optional. Response header override.
  # * +:content_type+         - String. Optional. Response header override.
  #
  # Below options for Table service only
  # * +:table_name+           - String. Required. Table name for SAS.
  # * +:startpk+              - String. Optional but must accompany startrk. The start partition key of a specified partition key range.
  # * +:endpk+                - String. Optional but must accompany endrk. The end partition key of a specified partition key range.
  # * +:startrk+              - String. Optional. The start row key of a specified row key range.
  # * +:endrk+                - String. Optional. The end row key of a specified row key range.
  #
  # @param uri [URI] uri to resource including query options
  # @param use_account_sas [Boolean] Whether uses account SAS
  # @param options [Hash]
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#334
  def signed_uri(uri, use_account_sas, options); end
end

# source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#49
Azure::Storage::Common::Core::Auth::SharedAccessSignature::ACCOUNT_KEY_MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#98
Azure::Storage::Common::Core::Auth::SharedAccessSignature::ACCOUNT_OPTIONAL_QUERY_PARAMS = T.let(T.unsafe(nil), Array)

# source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#70
Azure::Storage::Common::Core::Auth::SharedAccessSignature::BLOB_KEY_MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#37
Azure::Storage::Common::Core::Auth::SharedAccessSignature::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#87
Azure::Storage::Common::Core::Auth::SharedAccessSignature::FILE_KEY_MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#60
Azure::Storage::Common::Core::Auth::SharedAccessSignature::SERVICE_KEY_MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#96
Azure::Storage::Common::Core::Auth::SharedAccessSignature::SERVICE_OPTIONAL_QUERY_PARAMS = T.let(T.unsafe(nil), Array)

# source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#42
Azure::Storage::Common::Core::Auth::SharedAccessSignature::SERVICE_TYPE_MAPPING = T.let(T.unsafe(nil), Hash)

# source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_generator.rb#79
Azure::Storage::Common::Core::Auth::SharedAccessSignature::TABLE_KEY_MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_signer.rb#31
class Azure::Storage::Common::Core::Auth::SharedAccessSignatureSigner < ::Azure::Core::Auth::Signer
  # Public: Initialize the Signer with a SharedAccessSignature
  #
  # @param api_ver [String] The api version of the service.
  # @param account_name [String] The account name. Defaults to the one in the global configuration.
  # @param sas_token [String] The sas token to be used for signing
  # @return [SharedAccessSignatureSigner] a new instance of SharedAccessSignatureSigner
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_signer.rb#40
  def initialize(api_ver, account_name = T.unsafe(nil), sas_token = T.unsafe(nil)); end

  # Returns the value of attribute account_name.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_signer.rb#32
  def account_name; end

  # Returns the value of attribute api_ver.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_signer.rb#33
  def api_ver; end

  # Sets the attribute api_ver
  #
  # @param value the value to set the attribute api_ver to.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_signer.rb#33
  def api_ver=(_arg0); end

  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_signer.rb#32
  def sas_token; end

  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_access_signature_signer.rb#51
  def sign_request(req); end
end

# source://azure-storage-common//lib/azure/storage/common/core/auth/shared_key.rb#32
class Azure::Storage::Common::Core::Auth::SharedKey < ::Azure::Core::Auth::SharedKey
  # Generate the string to sign.
  #
  # @param method [Symbol] HTTP request method.
  # @param uri [URI] URI of the request we're signing.
  # @param headers [Hash] HTTP request headers.
  # @return [String]
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/shared_key.rb#40
  def signable_string(method, uri, headers); end
end

# source://azure-storage-common//lib/azure/storage/common/core/auth/token_signer.rb#29
class Azure::Storage::Common::Core::Auth::TokenSigner < ::Azure::Core::Auth::Signer
  # Public: Initialize the Token Signer
  #
  # @return [TokenSigner] a new instance of TokenSigner
  #
  # source://azure-storage-common//lib/azure/storage/common/core/auth/token_signer.rb#31
  def initialize(token_credential); end

  # source://azure-storage-common//lib/azure/storage/common/core/auth/token_signer.rb#37
  def sign_request(req); end
end

# source://azure-storage-common//lib/azure/storage/common/core/autoload.rb#45
module Azure::Storage::Common::Core::Filter; end

# source://azure-storage-common//lib/azure/storage/common/core/filter/exponential_retry_filter.rb#30
class Azure::Storage::Common::Core::Filter::ExponentialRetryPolicyFilter < ::Azure::Storage::Common::Core::Filter::RetryPolicyFilter
  # @return [ExponentialRetryPolicyFilter] a new instance of ExponentialRetryPolicyFilter
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/exponential_retry_filter.rb#31
  def initialize(retry_count = T.unsafe(nil), min_retry_interval = T.unsafe(nil), max_retry_interval = T.unsafe(nil)); end

  # Overrides the base class implementation of call to determine
  # how the HTTP request should continue retrying
  #
  # retry_data - Hash. Stores stateful retry data
  #
  # The retry_data is a Hash which can be used to store
  # stateful data about the request execution context (such as an
  # incrementing counter, timestamp, etc). The retry_data object
  # will be the same instance throughout the lifetime of the request
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/exponential_retry_filter.rb#55
  def apply_retry_policy(retry_data); end

  # Returns the value of attribute max_retry_interval.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/exponential_retry_filter.rb#39
  def max_retry_interval; end

  # Returns the value of attribute min_retry_interval.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/exponential_retry_filter.rb#39
  def min_retry_interval; end
end

# source://azure-storage-common//lib/azure/storage/common/core/filter/exponential_retry_filter.rb#44
Azure::Storage::Common::Core::Filter::ExponentialRetryPolicyFilter::DEFAULT_MAX_RETRY_INTERVAL = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/core/filter/exponential_retry_filter.rb#43
Azure::Storage::Common::Core::Filter::ExponentialRetryPolicyFilter::DEFAULT_MIN_RETRY_INTERVAL = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/core/filter/exponential_retry_filter.rb#42
Azure::Storage::Common::Core::Filter::ExponentialRetryPolicyFilter::DEFAULT_RETRY_COUNT = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/core/filter/linear_retry_filter.rb#30
class Azure::Storage::Common::Core::Filter::LinearRetryPolicyFilter < ::Azure::Storage::Common::Core::Filter::RetryPolicyFilter
  # @return [LinearRetryPolicyFilter] a new instance of LinearRetryPolicyFilter
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/linear_retry_filter.rb#31
  def initialize(retry_count = T.unsafe(nil), retry_interval = T.unsafe(nil)); end

  # Overrides the base class implementation of call to determine
  # how the HTTP request should continue retrying
  #
  # retry_data - Hash. Stores stateful retry data
  #
  # The retry_data is a Hash which can be used to store
  # stateful data about the request execution context (such as an
  # incrementing counter, timestamp, etc). The retry_data object
  # will be the same instance throughout the lifetime of the request
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/linear_retry_filter.rb#50
  def apply_retry_policy(retry_data); end
end

# source://azure-storage-common//lib/azure/storage/common/core/filter/linear_retry_filter.rb#38
Azure::Storage::Common::Core::Filter::LinearRetryPolicyFilter::DEFAULT_RETRY_COUNT = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/core/filter/linear_retry_filter.rb#39
Azure::Storage::Common::Core::Filter::LinearRetryPolicyFilter::DEFAULT_RETRY_INTERVAL = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#30
class Azure::Storage::Common::Core::Filter::RetryPolicyFilter < ::Azure::Core::Http::RetryPolicy
  # @return [RetryPolicyFilter] a new instance of RetryPolicyFilter
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#31
  def initialize(retry_count = T.unsafe(nil), retry_interval = T.unsafe(nil)); end

  # Adjust the retry request
  #
  # retry_data - Hash. Stores stateful retry data
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#158
  def adjust_retry_request(retry_data); end

  # Apply the retry policy to determine how the HTTP request should continue retrying
  #
  # retry_data - Hash. Stores stateful retry data
  #
  # The retry_data is a Hash which can be used to store
  # stateful data about the request execution context (such as an
  # incrementing counter, timestamp, etc). The retry_data object
  # will be the same instance throughout the lifetime of the request
  #
  # Alternatively, a subclass could override this method.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#85
  def apply_retry_policy(retry_data); end

  # Check the location
  #
  # retry_data - Hash. Stores stateful retry data
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#212
  def check_location(response, retry_data); end

  # Check the status code
  #
  # retry_data - Hash. Stores stateful retry data
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#234
  def check_status_code(retry_data); end

  # Get retry request destination
  #
  # retry_data - Hash. Stores stateful retry data
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#269
  def get_next_location(retry_data); end

  # Initialize the retry data
  #
  # retry_data - Hash. Stores stateful retry data
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#195
  def init_retry_data(retry_data); end

  # Returns the value of attribute retry_count.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#39
  def retry_count; end

  # Returns the value of attribute retry_interval.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#39
  def retry_interval; end

  # Overrides the base class implementation of call to determine
  # whether to retry the operation
  #
  # response - HttpResponse. The response from the active request
  # retry_data - Hash. Stores stateful retry data
  #
  # @return [Boolean]
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#47
  def should_retry?(response, retry_data); end

  # Determines if the HTTP request should continue retrying
  #
  # response - Azure::Core::Http::HttpResponse. The response from the active request
  # retry_data - Hash. Stores stateful retry data
  #
  # The retry_data is a Hash which can be used to store
  # stateful data about the request execution context (such as an
  # incrementing counter, timestamp, etc). The retry_data object
  # will be the same instance throughout the lifetime of the request.
  #
  # @return [Boolean]
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#136
  def should_retry_on_error?(response, retry_data); end

  # Determines if the HTTP request should continue retrying
  #
  # retry_data - Hash. Stores stateful retry data
  #
  # The retry_data is a Hash which can be used to store
  # stateful data about the request execution context (such as an
  # incrementing counter, timestamp, etc). The retry_data object
  # will be the same instance throughout the lifetime of the request.
  #
  # @return [Boolean]
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#96
  def should_retry_on_local_error?(retry_data); end

  # Adjust the retry parameter and wait for retry
  #
  # source://azure-storage-common//lib/azure/storage/common/core/filter/retry_filter.rb#151
  def wait_for_retry; end
end

# source://azure-storage-common//lib/azure/storage/common/core/http_client.rb#28
module Azure::Storage::Common::Core::HttpClient
  # Returns the http agent based on uri
  #
  # @param uri [URI|String] the base uri (scheme, host, port) of the http endpoint
  # @return [Net::HTTP] http agent for a given uri
  #
  # source://azure-storage-common//lib/azure/storage/common/core/http_client.rb#32
  def agents(uri); end

  # Empties all the http agents
  #
  # source://azure-storage-common//lib/azure/storage/common/core/http_client.rb#42
  def reset_agents!; end

  private

  # source://azure-storage-common//lib/azure/storage/common/core/http_client.rb#48
  def build_http(uri); end
end

# Logger
#
# source://azure-storage-common//lib/azure/storage/common/core/utility.rb#122
module Azure::Storage::Common::Core::Logger
  class << self
    # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#154
    def error(msg); end

    # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#134
    def error_with_exit(msg); end

    # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#164
    def exception_message(msg); end

    # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#126
    def info(msg); end

    # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#183
    def initialize_external_logger(logger); end

    # Returns the value of attribute logger.
    #
    # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#124
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#124
    def logger=(_arg0); end

    # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#174
    def success(msg); end

    # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#144
    def warn(msg); end
  end
end

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#29
module Azure::Storage::Common::Core::SR; end

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#30
Azure::Storage::Common::Core::SR::ANONYMOUS_ACCESS_BLOBSERVICE_ONLY = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#31
Azure::Storage::Common::Core::SR::ARGUMENT_NULL_OR_EMPTY = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#32
Azure::Storage::Common::Core::SR::ARGUMENT_NULL_OR_UNDEFINED = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#33
Azure::Storage::Common::Core::SR::ARGUMENT_OUT_OF_RANGE_ERROR = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#34
Azure::Storage::Common::Core::SR::BATCH_ONE_PARTITION_KEY = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#35
Azure::Storage::Common::Core::SR::BATCH_ONE_RETRIEVE = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#36
Azure::Storage::Common::Core::SR::BATCH_TOO_LARGE = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#37
Azure::Storage::Common::Core::SR::BLOB_INVALID_SEQUENCE_NUMBER = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#38
Azure::Storage::Common::Core::SR::BLOB_TYPE_MISMATCH = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#39
Azure::Storage::Common::Core::SR::CANNOT_CREATE_SAS_WITHOUT_ACCOUNT_KEY = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#40
Azure::Storage::Common::Core::SR::CONTENT_LENGTH_MISMATCH = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#41
Azure::Storage::Common::Core::SR::CONTENT_TYPE_MISSING = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#42
Azure::Storage::Common::Core::SR::EMPTY_BATCH = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#43
Azure::Storage::Common::Core::SR::EXCEEDED_SIZE_LIMITATION = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#44
Azure::Storage::Common::Core::SR::HASH_MISMATCH = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#45
Azure::Storage::Common::Core::SR::INCORRECT_ENTITY_KEYS = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#46
Azure::Storage::Common::Core::SR::INVALID_BLOB_LENGTH = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#51
Azure::Storage::Common::Core::SR::INVALID_CLIENT_OPTIONS = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#47
Azure::Storage::Common::Core::SR::INVALID_CONNECTION_STRING = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#48
Azure::Storage::Common::Core::SR::INVALID_CONNECTION_STRING_BAD_KEY = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#49
Azure::Storage::Common::Core::SR::INVALID_CONNECTION_STRING_DUPLICATE_KEY = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#50
Azure::Storage::Common::Core::SR::INVALID_CONNECTION_STRING_EMPTY_KEY = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#52
Azure::Storage::Common::Core::SR::INVALID_DELETE_SNAPSHOT_OPTION = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#53
Azure::Storage::Common::Core::SR::INVALID_EDM_TYPE = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#54
Azure::Storage::Common::Core::SR::INVALID_FILE_LENGTH = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#55
Azure::Storage::Common::Core::SR::INVALID_FILE_RANGE_FOR_UPDATE = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#56
Azure::Storage::Common::Core::SR::INVALID_HEADERS = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#57
Azure::Storage::Common::Core::SR::INVALID_MESSAGE_ID = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#58
Azure::Storage::Common::Core::SR::INVALID_PAGE_BLOB_LENGTH = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#59
Azure::Storage::Common::Core::SR::INVALID_PAGE_END_OFFSET = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#60
Azure::Storage::Common::Core::SR::INVALID_PAGE_RANGE_FOR_UPDATE = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#61
Azure::Storage::Common::Core::SR::INVALID_PAGE_START_OFFSET = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#62
Azure::Storage::Common::Core::SR::INVALID_POP_RECEIPT = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#63
Azure::Storage::Common::Core::SR::INVALID_PROPERTY_RESOLVER = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#64
Azure::Storage::Common::Core::SR::INVALID_RANGE_FOR_MD5 = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#66
Azure::Storage::Common::Core::SR::INVALID_SAS_TOKEN = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#65
Azure::Storage::Common::Core::SR::INVALID_SAS_VERSION = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#67
Azure::Storage::Common::Core::SR::INVALID_SIGNED_IDENTIFIERS = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#68
Azure::Storage::Common::Core::SR::INVALID_STREAM_LENGTH = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#69
Azure::Storage::Common::Core::SR::INVALID_STRING_ERROR = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#70
Azure::Storage::Common::Core::SR::INVALID_TABLE_OPERATION = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#71
Azure::Storage::Common::Core::SR::INVALID_TEXT_LENGTH = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#72
Azure::Storage::Common::Core::SR::MAXIMUM_EXECUTION_TIMEOUT_EXCEPTION = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#83
Azure::Storage::Common::Core::SR::MAX_BLOB_SIZE_CONDITION_NOT_MEET = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#73
Azure::Storage::Common::Core::SR::MD5_NOT_PRESENT_ERROR = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#74
Azure::Storage::Common::Core::SR::METADATA_KEY_INVALID = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#75
Azure::Storage::Common::Core::SR::METADATA_VALUE_INVALID = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#76
Azure::Storage::Common::Core::SR::NO_CREDENTIALS_PROVIDED = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#77
Azure::Storage::Common::Core::SR::PRIMARY_ONLY_COMMAND = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#78
Azure::Storage::Common::Core::SR::QUERY_OPERATOR_REQUIRES_WHERE = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#79
Azure::Storage::Common::Core::SR::SECONDARY_ONLY_COMMAND = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#80
Azure::Storage::Common::Core::SR::STORAGE_HOST_LOCATION_REQUIRED = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#81
Azure::Storage::Common::Core::SR::STORAGE_HOST_MISSING_LOCATION = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/sr.rb#82
Azure::Storage::Common::Core::SR::TYPE_NOT_SUPPORTED = T.let(T.unsafe(nil), String)

# Superclass for errors generated from this library, so people can
# just rescue this for generic error handling
#
# source://azure-storage-common//lib/azure/storage/common/core/error.rb#31
class Azure::Storage::Common::Core::StorageError < ::StandardError; end

# source://azure-storage-common//lib/azure/storage/common/core/token_credential.rb#29
class Azure::Storage::Common::Core::TokenCredential
  # Public: Initializes an instance of [Azure::Storage::Common::Core::TokenCredential]
  #
  # ==== Attributes
  #
  # * +token+                           - String. The initial access token.
  #
  # @return [TokenCredential] a new instance of TokenCredential
  #
  # source://azure-storage-common//lib/azure/storage/common/core/token_credential.rb#37
  def initialize(token); end

  # Public: Renews the access token
  #
  # ==== Attributes
  #
  # * +new_token+                       - String. The new access token.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/token_credential.rb#58
  def renew_token(new_token); end

  # Public: Gets the access token
  #
  # Note: Providing this getter under the protect of a mutex
  #
  # source://azure-storage-common//lib/azure/storage/common/core/token_credential.rb#46
  def token; end
end

# source://azure-storage-common//lib/azure/storage/common/core/utility.rb#57
module Azure::Storage::Common::Core::Utility
  # @return [Boolean]
  #
  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#91
  def enable_winrm?(winrm_transport); end

  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#79
  def export_der(cert, key, pass = T.unsafe(nil), name = T.unsafe(nil)); end

  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#87
  def export_fingerprint(certificate); end

  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#95
  def get_certificate(private_key_file); end

  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#109
  def initialize_external_logger(logger); end

  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#69
  def locate_file(name); end

  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#113
  def parse_charset_from_content_type(content_type); end

  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#58
  def random_string(str = T.unsafe(nil), no_of_char = T.unsafe(nil)); end

  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#62
  def xml_content(xml, key, default = T.unsafe(nil)); end
end

# source://azure-storage-common//lib/azure/storage/common/default.rb#31
module Azure::Storage::Common::Default
  private

  # source://azure-storage-common//lib/azure/storage/common/default.rb#59
  def os; end

  class << self
    # source://azure-storage-common//lib/azure/storage/common/default.rb#78
    def options; end

    # source://azure-storage-common//lib/azure/storage/common/default.rb#59
    def os; end

    # A placeholder to map with the Azure::Storage::Common::Configurable.keys
    #
    # @return nil
    #
    # source://azure-storage-common//lib/azure/storage/common/default.rb#132
    def signer; end

    # Default storage access key
    #
    # @return [String]
    #
    # source://azure-storage-common//lib/azure/storage/common/default.rb#84
    def storage_access_key; end

    # Default storage account name
    #
    # @return [String]
    #
    # source://azure-storage-common//lib/azure/storage/common/default.rb#90
    def storage_account_name; end

    # Default storage blob host
    #
    # @return [String]
    #
    # source://azure-storage-common//lib/azure/storage/common/default.rb#114
    def storage_blob_host; end

    # Default storage connection string
    #
    # @return [String]
    #
    # source://azure-storage-common//lib/azure/storage/common/default.rb#96
    def storage_connection_string; end

    # Default storage file host
    #
    # @return [String]
    #
    # source://azure-storage-common//lib/azure/storage/common/default.rb#126
    def storage_file_host; end

    # Default storage queue host
    #
    # @return [String]
    #
    # source://azure-storage-common//lib/azure/storage/common/default.rb#120
    def storage_queue_host; end

    # Default storage shared access signature token
    #
    # @return [String]
    #
    # source://azure-storage-common//lib/azure/storage/common/default.rb#102
    def storage_sas_token; end

    # Default storage table host
    #
    # @return [String]
    #
    # source://azure-storage-common//lib/azure/storage/common/default.rb#108
    def storage_table_host; end
  end
end

# Default HTTPS port.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#52
Azure::Storage::Common::Default::DEFAULT_HTTPS_PORT = T.let(T.unsafe(nil), Integer)

# Default HTTP port.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#50
Azure::Storage::Common::Default::DEFAULT_HTTP_PORT = T.let(T.unsafe(nil), Integer)

# The number of default concurrent requests for parallel operation.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#36
Azure::Storage::Common::Default::DEFAULT_PARALLEL_OPERATION_THREAD_COUNT = T.let(T.unsafe(nil), Integer)

# Constant representing a gigabyte (Non-SI version).
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#43
Azure::Storage::Common::Default::GB = T.let(T.unsafe(nil), Integer)

# Specifies HTTP.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#46
Azure::Storage::Common::Default::HTTP = T.let(T.unsafe(nil), String)

# Specifies HTTPS.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#48
Azure::Storage::Common::Default::HTTPS = T.let(T.unsafe(nil), String)

# Constant representing a kilobyte (Non-SI version).
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#39
Azure::Storage::Common::Default::KB = T.let(T.unsafe(nil), Integer)

# Constant representing a megabyte (Non-SI version).
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#41
Azure::Storage::Common::Default::MB = T.let(T.unsafe(nil), Integer)

# Default REST service (STG) version number. This is used only for SAS generator.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#33
Azure::Storage::Common::Default::STG_VERSION = T.let(T.unsafe(nil), String)

# Marker for atom metadata.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#55
Azure::Storage::Common::Default::XML_METADATA_MARKER = T.let(T.unsafe(nil), String)

# Marker for atom value.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#57
Azure::Storage::Common::Default::XML_VALUE_MARKER = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/core/utility.rb#40
module Azure::Storage::Common::Error; end

# Azure Error
#
# source://azure-storage-common//lib/azure/storage/common/core/utility.rb#42
class Azure::Storage::Common::Error::Error < ::Azure::Core::Error
  # @return [Error] a new instance of Error
  #
  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#47
  def initialize(type, status, description); end

  # Returns the value of attribute description.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#43
  def description; end

  # Returns the value of attribute status_code.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#44
  def status_code; end

  # Returns the value of attribute type.
  #
  # source://azure-storage-common//lib/azure/storage/common/core/utility.rb#45
  def type; end
end

# Defines constants for use with HTTP headers.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#258
module Azure::Storage::Common::HeaderConstants; end

# The accept header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#545
Azure::Storage::Common::HeaderConstants::ACCEPT = T.let(T.unsafe(nil), String)

# The accept charset header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#548
Azure::Storage::Common::HeaderConstants::ACCEPT_CHARSET = T.let(T.unsafe(nil), String)

# The accept ranges header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#260
Azure::Storage::Common::HeaderConstants::ACCEPT_RANGES = T.let(T.unsafe(nil), String)

# The header that specifies the approximate message count of a queue.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#290
Azure::Storage::Common::HeaderConstants::APPROXIMATE_MESSAGES_COUNT = T.let(T.unsafe(nil), String)

# The approximate message counter header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#539
Azure::Storage::Common::HeaderConstants::APPROXIMATE_MESSAGE_COUNT = T.let(T.unsafe(nil), String)

# The Authorization header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#293
Azure::Storage::Common::HeaderConstants::AUTHORIZATION = T.let(T.unsafe(nil), String)

# The append blob append offset header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#569
Azure::Storage::Common::HeaderConstants::BLOB_APPEND_OFFSET = T.let(T.unsafe(nil), String)

# The header that specifies blob caching control.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#311
Azure::Storage::Common::HeaderConstants::BLOB_CACHE_CONTROL = T.let(T.unsafe(nil), String)

# The append blob committed block header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#572
Azure::Storage::Common::HeaderConstants::BLOB_COMMITTED_BLOCK_COUNT = T.let(T.unsafe(nil), String)

# The append blob position header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#566
Azure::Storage::Common::HeaderConstants::BLOB_CONDITION_APPEND_POSITION = T.let(T.unsafe(nil), String)

# The max blob size header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#563
Azure::Storage::Common::HeaderConstants::BLOB_CONDITION_MAX_SIZE = T.let(T.unsafe(nil), String)

# The header that specifies blob content disposition.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#368
Azure::Storage::Common::HeaderConstants::BLOB_CONTENT_DISPOSITION = T.let(T.unsafe(nil), String)

# The header that specifies blob content encoding.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#341
Azure::Storage::Common::HeaderConstants::BLOB_CONTENT_ENCODING = T.let(T.unsafe(nil), String)

# The header that specifies blob content language.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#350
Azure::Storage::Common::HeaderConstants::BLOB_CONTENT_LANGUAGE = T.let(T.unsafe(nil), String)

# The header that specifies blob content length.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#359
Azure::Storage::Common::HeaderConstants::BLOB_CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# The header that specifies blob content MD5.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#377
Azure::Storage::Common::HeaderConstants::BLOB_CONTENT_MD5 = T.let(T.unsafe(nil), String)

# The header that specifies blob content type.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#389
Azure::Storage::Common::HeaderConstants::BLOB_CONTENT_TYPE = T.let(T.unsafe(nil), String)

# The header that specifies public access to blobs.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#296
Azure::Storage::Common::HeaderConstants::BLOB_PUBLIC_ACCESS = T.let(T.unsafe(nil), String)

# The header for the blob type.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#299
Azure::Storage::Common::HeaderConstants::BLOB_TYPE = T.let(T.unsafe(nil), String)

# Specifies the block blob type.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#305
Azure::Storage::Common::HeaderConstants::BLOCK_BLOB = T.let(T.unsafe(nil), String)

# The CacheControl header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#308
Azure::Storage::Common::HeaderConstants::CACHE_CONTROL = T.let(T.unsafe(nil), String)

# The client request Id header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#287
Azure::Storage::Common::HeaderConstants::CLIENT_REQUEST_ID = T.let(T.unsafe(nil), String)

# The ContentDisposition header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#365
Azure::Storage::Common::HeaderConstants::CONTENT_DISPOSITION = T.let(T.unsafe(nil), String)

# The ContentEncoding header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#338
Azure::Storage::Common::HeaderConstants::CONTENT_ENCODING = T.let(T.unsafe(nil), String)

# The ContentID header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#335
Azure::Storage::Common::HeaderConstants::CONTENT_ID = T.let(T.unsafe(nil), String)

# The ContentLangauge header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#347
Azure::Storage::Common::HeaderConstants::CONTENT_LANGUAGE = T.let(T.unsafe(nil), String)

# The ContentLength header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#356
Azure::Storage::Common::HeaderConstants::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# The ContentMD5 header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#374
Azure::Storage::Common::HeaderConstants::CONTENT_MD5 = T.let(T.unsafe(nil), String)

# The ContentRange header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#383
Azure::Storage::Common::HeaderConstants::CONTENT_RANGE = T.let(T.unsafe(nil), String)

# The content transfer encoding header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#263
Azure::Storage::Common::HeaderConstants::CONTENT_TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

# The ContentType header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#386
Azure::Storage::Common::HeaderConstants::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# The copy action.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#332
Azure::Storage::Common::HeaderConstants::COPY_ACTION = T.let(T.unsafe(nil), String)

# The copy completion time
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#320
Azure::Storage::Common::HeaderConstants::COPY_COMPLETION_TIME = T.let(T.unsafe(nil), String)

# The copy identifier.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#326
Azure::Storage::Common::HeaderConstants::COPY_ID = T.let(T.unsafe(nil), String)

# Progress of any copy operation
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#329
Azure::Storage::Common::HeaderConstants::COPY_PROGRESS = T.let(T.unsafe(nil), String)

# The header for copy source.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#395
Azure::Storage::Common::HeaderConstants::COPY_SOURCE = T.let(T.unsafe(nil), String)

# The copy status.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#317
Azure::Storage::Common::HeaderConstants::COPY_STATUS = T.let(T.unsafe(nil), String)

# The copy status message
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#323
Azure::Storage::Common::HeaderConstants::COPY_STATUS_DESCRIPTION = T.let(T.unsafe(nil), String)

# The correlation identifier header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#554
Azure::Storage::Common::HeaderConstants::CORRELATION_ID = T.let(T.unsafe(nil), String)

# The data service version.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#278
Azure::Storage::Common::HeaderConstants::DATA_SERVICE_VERSION = T.let(T.unsafe(nil), String)

# The header that specifies the date.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#398
Azure::Storage::Common::HeaderConstants::DATE = T.let(T.unsafe(nil), String)

# The header to delete snapshots.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#404
Azure::Storage::Common::HeaderConstants::DELETE_SNAPSHOT = T.let(T.unsafe(nil), String)

# The ETag header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#407
Azure::Storage::Common::HeaderConstants::ETAG = T.let(T.unsafe(nil), String)

# The header that specifies caching control.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#314
Azure::Storage::Common::HeaderConstants::FILE_CACHE_CONTROL = T.let(T.unsafe(nil), String)

# The header that specifies content disposition.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#371
Azure::Storage::Common::HeaderConstants::FILE_CONTENT_DISPOSITION = T.let(T.unsafe(nil), String)

# The header that specifies content encoding.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#344
Azure::Storage::Common::HeaderConstants::FILE_CONTENT_ENCODING = T.let(T.unsafe(nil), String)

# The header that specifies content language.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#353
Azure::Storage::Common::HeaderConstants::FILE_CONTENT_LANGUAGE = T.let(T.unsafe(nil), String)

# The header that specifies content length.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#362
Azure::Storage::Common::HeaderConstants::FILE_CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# The header that specifies content MD5.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#380
Azure::Storage::Common::HeaderConstants::FILE_CONTENT_MD5 = T.let(T.unsafe(nil), String)

# The header that specifies content type.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#392
Azure::Storage::Common::HeaderConstants::FILE_CONTENT_TYPE = T.let(T.unsafe(nil), String)

# The header that specifies file range write mode.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#458
Azure::Storage::Common::HeaderConstants::FILE_WRITE = T.let(T.unsafe(nil), String)

# The group identifier header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#557
Azure::Storage::Common::HeaderConstants::GROUP_ID = T.let(T.unsafe(nil), String)

# The host header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#551
Azure::Storage::Common::HeaderConstants::HOST = T.let(T.unsafe(nil), String)

# The IfMatch header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#410
Azure::Storage::Common::HeaderConstants::IF_MATCH = T.let(T.unsafe(nil), String)

# The IfModifiedSince header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#413
Azure::Storage::Common::HeaderConstants::IF_MODIFIED_SINCE = T.let(T.unsafe(nil), String)

# The IfNoneMatch header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#416
Azure::Storage::Common::HeaderConstants::IF_NONE_MATCH = T.let(T.unsafe(nil), String)

# The IfUnmodifiedSince header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#419
Azure::Storage::Common::HeaderConstants::IF_UNMODIFIED_SINCE = T.let(T.unsafe(nil), String)

# Specifies snapshots are to be included.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#422
Azure::Storage::Common::HeaderConstants::INCLUDE_SNAPSHOTS_VALUE = T.let(T.unsafe(nil), String)

# Specifies that the content-type is JSON.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#425
Azure::Storage::Common::HeaderConstants::JSON_CONTENT_TYPE_VALUE = T.let(T.unsafe(nil), String)

# The Last-Modified header
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#275
Azure::Storage::Common::HeaderConstants::LAST_MODIFIED = T.let(T.unsafe(nil), String)

# The lease action header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#542
Azure::Storage::Common::HeaderConstants::LEASE_ACTION = T.let(T.unsafe(nil), String)

# The header that specifies the lease break period.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#431
Azure::Storage::Common::HeaderConstants::LEASE_BREAK_PERIOD = T.let(T.unsafe(nil), String)

# The header that specifies the lease duration.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#437
Azure::Storage::Common::HeaderConstants::LEASE_DURATION = T.let(T.unsafe(nil), String)

# The header that specifies lease ID.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#428
Azure::Storage::Common::HeaderConstants::LEASE_ID = T.let(T.unsafe(nil), String)

# The header that specifies lease state.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#449
Azure::Storage::Common::HeaderConstants::LEASE_STATE = T.let(T.unsafe(nil), String)

# The header that specifies lease status.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#446
Azure::Storage::Common::HeaderConstants::LEASE_STATUS = T.let(T.unsafe(nil), String)

# The header that specifies lease time.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#443
Azure::Storage::Common::HeaderConstants::LEASE_TIME = T.let(T.unsafe(nil), String)

# The location header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#272
Azure::Storage::Common::HeaderConstants::LOCATION = T.let(T.unsafe(nil), String)

# The maximum data service version.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#281
Azure::Storage::Common::HeaderConstants::MAX_DATA_SERVICE_VERSION = T.let(T.unsafe(nil), String)

# The header that specifies the date.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#401
Azure::Storage::Common::HeaderConstants::MS_DATE = T.let(T.unsafe(nil), String)

# The returned response payload should be with full metadata.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#581
Azure::Storage::Common::HeaderConstants::ODATA_FULL_META = T.let(T.unsafe(nil), String)

# The returned response payload should be with minimal metadata.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#578
Azure::Storage::Common::HeaderConstants::ODATA_MIN_META = T.let(T.unsafe(nil), String)

# The returned response payload should be with no metadata.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#575
Azure::Storage::Common::HeaderConstants::ODATA_NO_META = T.let(T.unsafe(nil), String)

# Specifies the page blob type.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#452
Azure::Storage::Common::HeaderConstants::PAGE_BLOB = T.let(T.unsafe(nil), String)

# The header that specifies page write mode.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#455
Azure::Storage::Common::HeaderConstants::PAGE_WRITE = T.let(T.unsafe(nil), String)

# The pop receipt header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#533
Azure::Storage::Common::HeaderConstants::POP_RECEIPT = T.let(T.unsafe(nil), String)

# The header that specifies whether the response should include the inserted entity.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#461
Azure::Storage::Common::HeaderConstants::PREFER = T.let(T.unsafe(nil), String)

# The header value which specifies that the response should include the inserted entity.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#464
Azure::Storage::Common::HeaderConstants::PREFER_CONTENT = T.let(T.unsafe(nil), String)

# The header value which specifies that the response should not include the inserted entity.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#467
Azure::Storage::Common::HeaderConstants::PREFER_NO_CONTENT = T.let(T.unsafe(nil), String)

# The master Windows Azure Storage header prefix.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#284
Azure::Storage::Common::HeaderConstants::PREFIX_FOR_STORAGE = T.let(T.unsafe(nil), String)

# The header prefix for metadata.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#470
Azure::Storage::Common::HeaderConstants::PREFIX_FOR_STORAGE_METADATA = T.let(T.unsafe(nil), String)

# The header prefix for properties.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#473
Azure::Storage::Common::HeaderConstants::PREFIX_FOR_STORAGE_PROPERTIES = T.let(T.unsafe(nil), String)

# The header that specifies the proposed lease identifier.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#434
Azure::Storage::Common::HeaderConstants::PROPOSED_LEASE_ID = T.let(T.unsafe(nil), String)

# The Range header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#476
Azure::Storage::Common::HeaderConstants::RANGE = T.let(T.unsafe(nil), String)

# The header that specifies if the request will populate the ContentMD5 header for range gets.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#479
Azure::Storage::Common::HeaderConstants::RANGE_GET_CONTENT_MD5 = T.let(T.unsafe(nil), String)

# The format string for specifying ranges.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#482
Azure::Storage::Common::HeaderConstants::RANGE_HEADER_FORMAT = T.let(T.unsafe(nil), String)

# The header that indicates the request ID.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#485
Azure::Storage::Common::HeaderConstants::REQUEST_ID = T.let(T.unsafe(nil), String)

# The header for if request has been encrypted at server side.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#584
Azure::Storage::Common::HeaderConstants::REQUEST_SERVER_ENCRYPTED = T.let(T.unsafe(nil), String)

# The header for specifying the sequence number.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#488
Azure::Storage::Common::HeaderConstants::SEQUENCE_NUMBER = T.let(T.unsafe(nil), String)

# The header that specifies sequence number action.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#500
Azure::Storage::Common::HeaderConstants::SEQUENCE_NUMBER_ACTION = T.let(T.unsafe(nil), String)

# The header for specifying the If-Sequence-Number-EQ condition.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#491
Azure::Storage::Common::HeaderConstants::SEQUENCE_NUMBER_EQUAL = T.let(T.unsafe(nil), String)

# The header for specifying the If-Sequence-Number-LT condition.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#494
Azure::Storage::Common::HeaderConstants::SEQUENCE_NUMBER_LESS_THAN = T.let(T.unsafe(nil), String)

# The header for specifying the If-Sequence-Number-LE condition.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#497
Azure::Storage::Common::HeaderConstants::SEQUENCE_NUMBER_LESS_THAN_OR_EQUAL = T.let(T.unsafe(nil), String)

# The server header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#269
Azure::Storage::Common::HeaderConstants::SERVER = T.let(T.unsafe(nil), String)

# The header for if blob data and application metadata has been encrypted at server side.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#587
Azure::Storage::Common::HeaderConstants::SERVER_ENCRYPTED = T.let(T.unsafe(nil), String)

# The share quota header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#560
Azure::Storage::Common::HeaderConstants::SHARE_QUOTA = T.let(T.unsafe(nil), String)

# The header for the blob content length.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#503
Azure::Storage::Common::HeaderConstants::SIZE = T.let(T.unsafe(nil), String)

# The header for snapshots.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#506
Azure::Storage::Common::HeaderConstants::SNAPSHOT = T.let(T.unsafe(nil), String)

# Specifies only snapshots are to be included.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#509
Azure::Storage::Common::HeaderConstants::SNAPSHOTS_ONLY_VALUE = T.let(T.unsafe(nil), String)

# The header for the If-Match condition.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#512
Azure::Storage::Common::HeaderConstants::SOURCE_IF_MATCH = T.let(T.unsafe(nil), String)

# The header for the If-Modified-Since condition.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#515
Azure::Storage::Common::HeaderConstants::SOURCE_IF_MODIFIED_SINCE = T.let(T.unsafe(nil), String)

# The header for the If-None-Match condition.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#518
Azure::Storage::Common::HeaderConstants::SOURCE_IF_NONE_MATCH = T.let(T.unsafe(nil), String)

# The header for the If-Unmodified-Since condition.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#521
Azure::Storage::Common::HeaderConstants::SOURCE_IF_UNMODIFIED_SINCE = T.let(T.unsafe(nil), String)

# The header that specifies the source lease ID.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#440
Azure::Storage::Common::HeaderConstants::SOURCE_LEASE_ID = T.let(T.unsafe(nil), String)

# The header for data ranges.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#524
Azure::Storage::Common::HeaderConstants::STORAGE_RANGE = T.let(T.unsafe(nil), String)

# The header for storage version.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#527
Azure::Storage::Common::HeaderConstants::STORAGE_VERSION = T.let(T.unsafe(nil), String)

# The time next visibile header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#536
Azure::Storage::Common::HeaderConstants::TIME_NEXT_VISIBLE = T.let(T.unsafe(nil), String)

# The transfer encoding header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#266
Azure::Storage::Common::HeaderConstants::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

# The header for the type.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#302
Azure::Storage::Common::HeaderConstants::TYPE = T.let(T.unsafe(nil), String)

# The UserAgent header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#530
Azure::Storage::Common::HeaderConstants::USER_AGENT = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#744
module Azure::Storage::Common::HttpConstants; end

# Response codes.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#756
module Azure::Storage::Common::HttpConstants::HttpResponseCodes; end

# source://azure-storage-common//lib/azure/storage/common/default.rb#759
Azure::Storage::Common::HttpConstants::HttpResponseCodes::Accepted = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#762
Azure::Storage::Common::HttpConstants::HttpResponseCodes::BadRequest = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#766
Azure::Storage::Common::HttpConstants::HttpResponseCodes::Conflict = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#758
Azure::Storage::Common::HttpConstants::HttpResponseCodes::Created = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#764
Azure::Storage::Common::HttpConstants::HttpResponseCodes::Forbidden = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#767
Azure::Storage::Common::HttpConstants::HttpResponseCodes::LengthRequired = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#760
Azure::Storage::Common::HttpConstants::HttpResponseCodes::NoContent = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#765
Azure::Storage::Common::HttpConstants::HttpResponseCodes::NotFound = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#757
Azure::Storage::Common::HttpConstants::HttpResponseCodes::Ok = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#761
Azure::Storage::Common::HttpConstants::HttpResponseCodes::PartialContent = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#768
Azure::Storage::Common::HttpConstants::HttpResponseCodes::PreconditionFailed = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#763
Azure::Storage::Common::HttpConstants::HttpResponseCodes::Unauthorized = T.let(T.unsafe(nil), Integer)

# Http Verbs
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#746
module Azure::Storage::Common::HttpConstants::HttpVerbs; end

# source://azure-storage-common//lib/azure/storage/common/default.rb#749
Azure::Storage::Common::HttpConstants::HttpVerbs::DELETE = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#748
Azure::Storage::Common::HttpConstants::HttpVerbs::GET = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#752
Azure::Storage::Common::HttpConstants::HttpVerbs::HEAD = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#751
Azure::Storage::Common::HttpConstants::HttpVerbs::MERGE = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#750
Azure::Storage::Common::HttpConstants::HttpVerbs::POST = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#747
Azure::Storage::Common::HttpConstants::HttpVerbs::PUT = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/client_options_error.rb#30
class Azure::Storage::Common::InvalidConnectionStringError < ::Azure::Storage::Common::Core::StorageError
  # @return [InvalidConnectionStringError] a new instance of InvalidConnectionStringError
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options_error.rb#31
  def initialize(message = T.unsafe(nil)); end
end

# source://azure-storage-common//lib/azure/storage/common/client_options_error.rb#36
class Azure::Storage::Common::InvalidOptionsError < ::Azure::Storage::Common::Core::StorageError
  # @return [InvalidOptionsError] a new instance of InvalidOptionsError
  #
  # source://azure-storage-common//lib/azure/storage/common/client_options_error.rb#37
  def initialize(message = T.unsafe(nil)); end
end

# Specifies the location mode used to decide which location the request should be sent to.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#146
module Azure::Storage::Common::LocationMode; end

# source://azure-storage-common//lib/azure/storage/common/default.rb#147
Azure::Storage::Common::LocationMode::PRIMARY_ONLY = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#148
Azure::Storage::Common::LocationMode::PRIMARY_THEN_SECONDARY = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#149
Azure::Storage::Common::LocationMode::SECONDARY_ONLY = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#150
Azure::Storage::Common::LocationMode::SECONDARY_THEN_PRIMARY = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#590
module Azure::Storage::Common::QueryStringConstants; end

# ACL
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#718
Azure::Storage::Common::QueryStringConstants::ACL = T.let(T.unsafe(nil), String)

# Query component for SAS API version.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#592
Azure::Storage::Common::QueryStringConstants::API_VERSION = T.let(T.unsafe(nil), String)

# The block identifier query string argument for blob service.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#646
Azure::Storage::Common::QueryStringConstants::BLOCK_ID = T.let(T.unsafe(nil), String)

# The block list type query string argument for blob service.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#649
Azure::Storage::Common::QueryStringConstants::BLOCK_LIST_TYPE = T.let(T.unsafe(nil), String)

# The cache control argument for shared access signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#631
Azure::Storage::Common::QueryStringConstants::CACHE_CONTROL = T.let(T.unsafe(nil), String)

# The Comp value.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#595
Azure::Storage::Common::QueryStringConstants::COMP = T.let(T.unsafe(nil), String)

# The content disposition argument for shared access signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#643
Azure::Storage::Common::QueryStringConstants::CONTENT_DISPOSITION = T.let(T.unsafe(nil), String)

# The content encoding argument for shared access signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#637
Azure::Storage::Common::QueryStringConstants::CONTENT_ENCODING = T.let(T.unsafe(nil), String)

# The content language argument for shared access signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#640
Azure::Storage::Common::QueryStringConstants::CONTENT_LANGUAGE = T.let(T.unsafe(nil), String)

# The content type argument for shared access signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#634
Azure::Storage::Common::QueryStringConstants::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# The copy Id.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#601
Azure::Storage::Common::QueryStringConstants::COPY_ID = T.let(T.unsafe(nil), String)

# The delimiter query string argument for listing operations.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#661
Azure::Storage::Common::QueryStringConstants::DELIMITER = T.let(T.unsafe(nil), String)

# The ending Partition Key for tableSAS URI's.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#712
Azure::Storage::Common::QueryStringConstants::ENDPK = T.let(T.unsafe(nil), String)

# The ending Partition Key for tableSAS URI's.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#715
Azure::Storage::Common::QueryStringConstants::ENDRK = T.let(T.unsafe(nil), String)

# The filter query string argument.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#685
Azure::Storage::Common::QueryStringConstants::FILTER = T.let(T.unsafe(nil), String)

# The include query string argument for listing operations.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#664
Azure::Storage::Common::QueryStringConstants::INCLUDE = T.let(T.unsafe(nil), String)

# Incremental Copy
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#721
Azure::Storage::Common::QueryStringConstants::INCREMENTAL_COPY = T.let(T.unsafe(nil), String)

# The lock identifier for service bus messages.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#700
Azure::Storage::Common::QueryStringConstants::LOCK_ID = T.let(T.unsafe(nil), String)

# The marker query string argument for listing operations.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#655
Azure::Storage::Common::QueryStringConstants::MARKER = T.let(T.unsafe(nil), String)

# The maxresults query string argument for listing operations.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#658
Azure::Storage::Common::QueryStringConstants::MAX_RESULTS = T.let(T.unsafe(nil), String)

# The messagettl query string argument for queue service.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#679
Azure::Storage::Common::QueryStringConstants::MESSAGE_TTL = T.let(T.unsafe(nil), String)

# The next partition key query string argument for table service.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#694
Azure::Storage::Common::QueryStringConstants::NEXT_PARTITION_KEY = T.let(T.unsafe(nil), String)

# The next row key query string argument for table service.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#697
Azure::Storage::Common::QueryStringConstants::NEXT_ROW_KEY = T.let(T.unsafe(nil), String)

# The numofmessages query string argument for queue service.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#670
Azure::Storage::Common::QueryStringConstants::NUM_OF_MESSAGES = T.let(T.unsafe(nil), String)

# The peekonly query string argument for queue service.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#667
Azure::Storage::Common::QueryStringConstants::PEEK_ONLY = T.let(T.unsafe(nil), String)

# The popreceipt query string argument for queue service.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#673
Azure::Storage::Common::QueryStringConstants::POP_RECEIPT = T.let(T.unsafe(nil), String)

# The prefix query string argument for listing operations.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#652
Azure::Storage::Common::QueryStringConstants::PREFIX = T.let(T.unsafe(nil), String)

# The Res Type.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#598
Azure::Storage::Common::QueryStringConstants::RESTYPE = T.let(T.unsafe(nil), String)

# The select query string argument.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#682
Azure::Storage::Common::QueryStringConstants::SELECT = T.let(T.unsafe(nil), String)

# The signature query string argument for shared access signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#625
Azure::Storage::Common::QueryStringConstants::SIGNATURE = T.let(T.unsafe(nil), String)

# The signed expiry time query string argument for shared access signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#613
Azure::Storage::Common::QueryStringConstants::SIGNED_EXPIRY = T.let(T.unsafe(nil), String)

# The signed identifier query string argument for shared access signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#622
Azure::Storage::Common::QueryStringConstants::SIGNED_IDENTIFIER = T.let(T.unsafe(nil), String)

# The signed permissions query string argument for shared access signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#619
Azure::Storage::Common::QueryStringConstants::SIGNED_PERMISSIONS = T.let(T.unsafe(nil), String)

# The signed resource query string argument for shared access signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#616
Azure::Storage::Common::QueryStringConstants::SIGNED_RESOURCE = T.let(T.unsafe(nil), String)

# The signed start time query string argument for shared access signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#610
Azure::Storage::Common::QueryStringConstants::SIGNED_START = T.let(T.unsafe(nil), String)

# The signed version argument for shared access signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#628
Azure::Storage::Common::QueryStringConstants::SIGNED_VERSION = T.let(T.unsafe(nil), String)

# The skip query string argument.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#691
Azure::Storage::Common::QueryStringConstants::SKIP = T.let(T.unsafe(nil), String)

# The Snapshot value.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#604
Azure::Storage::Common::QueryStringConstants::SNAPSHOT = T.let(T.unsafe(nil), String)

# The starting Partition Key for tableSAS URI's.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#706
Azure::Storage::Common::QueryStringConstants::STARTPK = T.let(T.unsafe(nil), String)

# The starting Partition Key for tableSAS URI's.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#709
Azure::Storage::Common::QueryStringConstants::STARTRK = T.let(T.unsafe(nil), String)

# The table name for table SAS URI's.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#703
Azure::Storage::Common::QueryStringConstants::TABLENAME = T.let(T.unsafe(nil), String)

# The timeout value.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#607
Azure::Storage::Common::QueryStringConstants::TIMEOUT = T.let(T.unsafe(nil), String)

# The top query string argument.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#688
Azure::Storage::Common::QueryStringConstants::TOP = T.let(T.unsafe(nil), String)

# The visibilitytimeout query string argument for queue service.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#676
Azure::Storage::Common::QueryStringConstants::VISIBILITY_TIMEOUT = T.let(T.unsafe(nil), String)

# Specifies the location used to indicate which location the operation (REST API) can be performed against.
# This is determined by the API and cannot be specified by the users.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#155
module Azure::Storage::Common::RequestLocationMode; end

# source://azure-storage-common//lib/azure/storage/common/default.rb#156
Azure::Storage::Common::RequestLocationMode::PRIMARY_ONLY = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#158
Azure::Storage::Common::RequestLocationMode::PRIMARY_OR_SECONDARY = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#157
Azure::Storage::Common::RequestLocationMode::SECONDARY_ONLY = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/autoload.rb#51
module Azure::Storage::Common::Service; end

# source://azure-storage-common//lib/azure/storage/common/service/access_policy.rb#28
class Azure::Storage::Common::Service::AccessPolicy
  # @return [AccessPolicy] a new instance of AccessPolicy
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Common::Service::AccessPolicy] the object that the method was called on
  #
  # source://azure-storage-common//lib/azure/storage/common/service/access_policy.rb#29
  def initialize; end

  # Returns the value of attribute expiry.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/access_policy.rb#33
  def expiry; end

  # Sets the attribute expiry
  #
  # @param value the value to set the attribute expiry to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/access_policy.rb#33
  def expiry=(_arg0); end

  # Returns the value of attribute permission.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/access_policy.rb#34
  def permission; end

  # Sets the attribute permission
  #
  # @param value the value to set the attribute permission to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/access_policy.rb#34
  def permission=(_arg0); end

  # Returns the value of attribute start.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/access_policy.rb#32
  def start; end

  # Sets the attribute start
  #
  # @param value the value to set the attribute start to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/access_policy.rb#32
  def start=(_arg0); end
end

# source://azure-storage-common//lib/azure/storage/common/service/cors.rb#29
class Azure::Storage::Common::Service::Cors
  # @return [Cors] a new instance of Cors
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Common::Service::Cors] the object that the method was called on
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors.rb#30
  def initialize; end

  # Returns the value of attribute cors_rules.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors.rb#35
  def cors_rules; end

  # Sets the attribute cors_rules
  #
  # @param value the value to set the attribute cors_rules to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors.rb#35
  def cors_rules=(_arg0); end
end

# source://azure-storage-common//lib/azure/storage/common/service/cors_rule.rb#29
class Azure::Storage::Common::Service::CorsRule
  # @return [CorsRule] a new instance of CorsRule
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Common::Service::CorsRule] the object that the method was called on
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors_rule.rb#30
  def initialize; end

  # Returns the value of attribute allowed_headers.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors_rule.rb#45
  def allowed_headers; end

  # Sets the attribute allowed_headers
  #
  # @param value the value to set the attribute allowed_headers to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors_rule.rb#45
  def allowed_headers=(_arg0); end

  # Returns the value of attribute allowed_methods.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors_rule.rb#42
  def allowed_methods; end

  # Sets the attribute allowed_methods
  #
  # @param value the value to set the attribute allowed_methods to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors_rule.rb#42
  def allowed_methods=(_arg0); end

  # Returns the value of attribute allowed_origins.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors_rule.rb#41
  def allowed_origins; end

  # Sets the attribute allowed_origins
  #
  # @param value the value to set the attribute allowed_origins to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors_rule.rb#41
  def allowed_origins=(_arg0); end

  # Returns the value of attribute exposed_headers.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors_rule.rb#44
  def exposed_headers; end

  # Sets the attribute exposed_headers
  #
  # @param value the value to set the attribute exposed_headers to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors_rule.rb#44
  def exposed_headers=(_arg0); end

  # Returns the value of attribute max_age_in_seconds.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors_rule.rb#43
  def max_age_in_seconds; end

  # Sets the attribute max_age_in_seconds
  #
  # @param value the value to set the attribute max_age_in_seconds to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/cors_rule.rb#43
  def max_age_in_seconds=(_arg0); end
end

# source://azure-storage-common//lib/azure/storage/common/service/enumeration_results.rb#28
class Azure::Storage::Common::Service::EnumerationResults < ::Array
  # Returns the value of attribute continuation_token.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/enumeration_results.rb#29
  def continuation_token; end

  # Sets the attribute continuation_token
  #
  # @param value the value to set the attribute continuation_token to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/enumeration_results.rb#29
  def continuation_token=(_arg0); end
end

# source://azure-storage-common//lib/azure/storage/common/service/geo_replication.rb#29
class Azure::Storage::Common::Service::GeoReplication
  # @return [GeoReplication] a new instance of GeoReplication
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Common::Service::GeoReplication] the object that the method was called on
  #
  # source://azure-storage-common//lib/azure/storage/common/service/geo_replication.rb#30
  def initialize; end

  # Returns the value of attribute last_sync_time.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/geo_replication.rb#37
  def last_sync_time; end

  # Sets the attribute last_sync_time
  #
  # @param value the value to set the attribute last_sync_time to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/geo_replication.rb#37
  def last_sync_time=(_arg0); end

  # Returns the value of attribute status.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/geo_replication.rb#36
  def status; end

  # Sets the attribute status
  #
  # @param value the value to set the attribute status to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/geo_replication.rb#36
  def status=(_arg0); end
end

# source://azure-storage-common//lib/azure/storage/common/service/logging.rb#30
class Azure::Storage::Common::Service::Logging
  # @return [Logging] a new instance of Logging
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Common::Service::Logging] the object that the method was called on
  #
  # source://azure-storage-common//lib/azure/storage/common/service/logging.rb#31
  def initialize; end

  # Returns the value of attribute delete.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/logging.rb#41
  def delete; end

  # Sets the attribute delete
  #
  # @param value the value to set the attribute delete to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/logging.rb#41
  def delete=(_arg0); end

  # Returns the value of attribute read.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/logging.rb#42
  def read; end

  # Sets the attribute read
  #
  # @param value the value to set the attribute read to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/logging.rb#42
  def read=(_arg0); end

  # Returns the value of attribute retention_policy.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/logging.rb#44
  def retention_policy; end

  # Sets the attribute retention_policy
  #
  # @param value the value to set the attribute retention_policy to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/logging.rb#44
  def retention_policy=(_arg0); end

  # Returns the value of attribute version.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/logging.rb#40
  def version; end

  # Sets the attribute version
  #
  # @param value the value to set the attribute version to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/logging.rb#40
  def version=(_arg0); end

  # Returns the value of attribute write.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/logging.rb#43
  def write; end

  # Sets the attribute write
  #
  # @param value the value to set the attribute write to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/logging.rb#43
  def write=(_arg0); end
end

# source://azure-storage-common//lib/azure/storage/common/service/metrics.rb#30
class Azure::Storage::Common::Service::Metrics
  # @return [Metrics] a new instance of Metrics
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Common::Service::Metrics] the object that the method was called on
  #
  # source://azure-storage-common//lib/azure/storage/common/service/metrics.rb#31
  def initialize; end

  # Returns the value of attribute enabled.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/metrics.rb#40
  def enabled; end

  # Sets the attribute enabled
  #
  # @param value the value to set the attribute enabled to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/metrics.rb#40
  def enabled=(_arg0); end

  # Returns the value of attribute include_apis.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/metrics.rb#41
  def include_apis; end

  # Sets the attribute include_apis
  #
  # @param value the value to set the attribute include_apis to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/metrics.rb#41
  def include_apis=(_arg0); end

  # Returns the value of attribute retention_policy.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/metrics.rb#42
  def retention_policy; end

  # Sets the attribute retention_policy
  #
  # @param value the value to set the attribute retention_policy to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/metrics.rb#42
  def retention_policy=(_arg0); end

  # Returns the value of attribute version.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/metrics.rb#39
  def version; end

  # Sets the attribute version
  #
  # @param value the value to set the attribute version to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/metrics.rb#39
  def version=(_arg0); end
end

# source://azure-storage-common//lib/azure/storage/common/service/retention_policy.rb#28
class Azure::Storage::Common::Service::RetentionPolicy
  # @return [RetentionPolicy] a new instance of RetentionPolicy
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Common::Service::RetentionPolicy] the object that the method was called on
  #
  # source://azure-storage-common//lib/azure/storage/common/service/retention_policy.rb#29
  def initialize; end

  # Returns the value of attribute days.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/retention_policy.rb#34
  def days; end

  # Sets the attribute days
  #
  # @param value the value to set the attribute days to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/retention_policy.rb#34
  def days=(_arg0); end

  # Returns the value of attribute enabled.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/retention_policy.rb#33
  def enabled; end

  # Sets the attribute enabled
  #
  # @param value the value to set the attribute enabled to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/retention_policy.rb#33
  def enabled=(_arg0); end
end

# source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#42
module Azure::Storage::Common::Service::Serialization
  extend ::Azure::Storage::Common::Service::Serialization::ClassMethods

  mixes_in_class_methods ::Azure::Storage::Common::Service::Serialization::ClassMethods

  class << self
    # @private
    #
    # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#330
    def included(other); end
  end
end

# source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#43
module Azure::Storage::Common::Service::Serialization::ClassMethods
  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#90
  def access_policy_from_xml(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#273
  def ary_from_node(node); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#236
  def cors_from_xml(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#245
  def cors_rule_from_xml(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#226
  def cors_rule_to_xml(cors_rule, xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#218
  def cors_to_xml(cors, xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#101
  def enumeration_results_from_xml(xml, results); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#323
  def expect_node(node_name, xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#258
  def geo_replication_from_xml(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#172
  def hour_metrics_to_xml(metrics, xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#205
  def logging_from_xml(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#195
  def logging_to_xml(logging, xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#130
  def metadata_from_headers(headers); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#111
  def metadata_from_xml(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#184
  def metrics_from_xml(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#164
  def metrics_to_xml_children(metrics, xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#178
  def minute_metrics_to_xml(metrics, xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#154
  def retention_policy_from_xml(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#147
  def retention_policy_to_xml(retention_policy, xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#290
  def service_properties_from_xml(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#277
  def service_properties_to_xml(properties); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#303
  def service_stats_from_xml(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#80
  def signed_identifier_from_xml(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#44
  def signed_identifiers_from_xml(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#62
  def signed_identifiers_to_xml(signed_identifiers); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#316
  def slopify(xml); end

  # source://azure-storage-common//lib/azure/storage/common/service/serialization.rb#312
  def to_bool(s); end
end

# source://azure-storage-common//lib/azure/storage/common/service/signed_identifier.rb#30
class Azure::Storage::Common::Service::SignedIdentifier
  # @return [SignedIdentifier] a new instance of SignedIdentifier
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Common::Service::SignedIdentifier] the object that the method was called on
  #
  # source://azure-storage-common//lib/azure/storage/common/service/signed_identifier.rb#31
  def initialize; end

  # Returns the value of attribute access_policy.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/signed_identifier.rb#37
  def access_policy; end

  # Sets the attribute access_policy
  #
  # @param value the value to set the attribute access_policy to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/signed_identifier.rb#37
  def access_policy=(_arg0); end

  # Returns the value of attribute id.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/signed_identifier.rb#36
  def id; end

  # Sets the attribute id
  #
  # @param value the value to set the attribute id to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/signed_identifier.rb#36
  def id=(_arg0); end
end

# A base class for StorageService implementations
#
# source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#35
class Azure::Storage::Common::Service::StorageService < ::Azure::Core::SignedService
  # Create a new instance of the StorageService
  #
  # @param signer [Azure::Core::Auth::Signer] An implementation of Signer used for signing requests.
  #   (optional, Default=Azure::Storage::CommonAuth::SharedKey.new)
  # @param account_name [String] The account name (optional, Default=Azure::Storage.storage_account_name)
  # @param options [Azure::Storage::CommonConfigurable] the client configuration context
  # @return [StorageService] a new instance of StorageService
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#46
  def initialize(signer = T.unsafe(nil), account_name = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#59
  def call(method, uri, body = T.unsafe(nil), headers = T.unsafe(nil), options = T.unsafe(nil)); end

  # Overrides the base class implementation to determine the request uri
  #
  # path    - String. the request path
  # query   - Hash. the query parameters
  #
  # ==== Options
  #
  # * +:encode+                    - bool. Specifies whether to encode the path.
  # * +:location_mode+             - LocationMode. Specifies the location mode used to decide
  #                                  which location the request should be sent to.
  # * +:request_location_mode+     - RequestLocationMode. Specifies the location used to indicate
  #                                  which location the operation (REST API) can be performed against.
  #                                  This is determined by the API and cannot be specified by the users.
  #
  # Returns the uri hash
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#167
  def generate_uri(path = T.unsafe(nil), query = T.unsafe(nil), options = T.unsafe(nil)); end

  # Get account path according to the location settings.
  #
  # * +:location+                      - StorageLocation. Specifies the request location.
  #
  # Returns the account path
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#223
  def get_account_path(location); end

  # Public: Get Storage Service properties
  #
  # See http://msdn.microsoft.com/en-us/library/azure/hh452239
  # See http://msdn.microsoft.com/en-us/library/azure/hh452243
  #
  # ==== Options
  #
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  #
  # Returns a Hash with the service properties or nil if the operation failed
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#75
  def get_service_properties(options = T.unsafe(nil)); end

  # Public: Retrieves statistics related to replication for the service.
  # It is only available on the secondary location endpoint when read-access geo-redundant
  # replication is enabled for the storage account.
  #
  # See https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats
  # See https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-service-stats
  # See https://docs.microsoft.com/en-us/rest/api/storageservices/get-table-service-stats
  #
  # ==== Options
  #
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  #
  # Returns a Hash with the service statistics or nil if the operation failed
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#121
  def get_service_stats(options = T.unsafe(nil)); end

  # Public: Generate the URI for the service properties
  #
  # * +:query+ - see Azure::Storage::CommonServices::GetServiceProperties#call documentation.
  #
  # Returns a URI.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#137
  def service_properties_uri(query = T.unsafe(nil)); end

  # Public: Generate the URI for the service statistics
  #
  # * +:query+ - see Azure::Storage::CommonServices::GetServiceStats#call documentation.
  #
  # Returns a URI.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#147
  def service_stats_uri(query = T.unsafe(nil), options = T.unsafe(nil)); end

  # Public: Set Storage Service properties
  #
  # service_properties - An instance of Azure::Storage::CommonService::StorageServiceProperties
  #
  # See http://msdn.microsoft.com/en-us/library/azure/hh452235
  # See http://msdn.microsoft.com/en-us/library/azure/hh452232
  #
  # ==== Options
  #
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  #
  # Returns boolean indicating success.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#97
  def set_service_properties(service_properties, options = T.unsafe(nil)); end

  # @return [Hash] Get or set the storage service host
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#38
  def storage_service_host; end

  # @return [Hash] Get or set the storage service host
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#38
  def storage_service_host=(_arg0); end

  class << self
    # Adds metadata properties to header hash with required prefix
    #
    # * +:metadata+  - A Hash of metadata name/value pairs
    # * +:headers+   - A Hash of HTTP headers
    #
    # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#281
    def add_metadata_to_headers(metadata, headers); end

    # Declares a default hash object for request headers
    #
    # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#313
    def common_headers(options = T.unsafe(nil), body = T.unsafe(nil)); end

    # Get the request location.
    #
    # * +:location_mode+             - LocationMode. Specifies the location mode used to decide
    #                                  which location the request should be sent to.
    # * +:request_location_mode+     - RequestLocationMode. Specifies the location used to indicate
    #                                  which location the operation (REST API) can be performed against.
    #                                  This is determined by the API and cannot be specified by the users.
    #
    # Returns the reqeust location
    #
    # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#255
    def get_location(location_mode, request_location_mode); end

    # Registers the callback when sending the request
    # The headers in the request can be viewed or changed in the code block
    #
    # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#242
    def register_request_callback; end

    # @return [Proc] The callback before the request is signed and sent
    #
    # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#238
    def request_callback; end

    # @return [Proc] Get or set the user agent prefix
    #
    # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#234
    def user_agent_prefix; end

    # @return [Proc] Get or set the user agent prefix
    #
    # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#234
    def user_agent_prefix=(_arg0); end

    # Adds a value to the Hash object
    #
    # * +:object+     - A Hash object
    # * +:key+        - The key name
    # * +:value+      - The value
    # Adds a header with the value
    #
    # * +:headers+    - A Hash of HTTP headers
    # * +:name+       - The header name
    # * +:value+      - The value
    #
    # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#294
    def with_header(object, key, value); end

    # Adds a value to the Hash object
    #
    # * +:object+     - A Hash object
    # * +:key+        - The key name
    # * +:value+      - The value
    # Adds a query parameter
    #
    # * +:query+      - A Hash of HTTP query
    # * +:name+       - The parameter name
    # * +:value+      - The value
    #
    # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#294
    def with_query(object, key, value); end

    # Adds a value to the Hash object
    #
    # * +:object+     - A Hash object
    # * +:key+        - The key name
    # * +:value+      - The value
    #
    # source://azure-storage-common//lib/azure/storage/common/service/storage_service.rb#294
    def with_value(object, key, value); end
  end
end

# source://azure-storage-common//lib/azure/storage/common/service/storage_service_properties.rb#32
class Azure::Storage::Common::Service::StorageServiceProperties
  # @return [StorageServiceProperties] a new instance of StorageServiceProperties
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Common::Service::StorageServiceProperties] the object that the method was called on
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_properties.rb#33
  def initialize; end

  # Returns the value of attribute cors.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_properties.rb#44
  def cors; end

  # Sets the attribute cors
  #
  # @param value the value to set the attribute cors to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_properties.rb#44
  def cors=(_arg0); end

  # Returns the value of attribute default_service_version.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_properties.rb#45
  def default_service_version; end

  # Sets the attribute default_service_version
  #
  # @param value the value to set the attribute default_service_version to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_properties.rb#45
  def default_service_version=(_arg0); end

  # Returns the value of attribute hour_metrics.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_properties.rb#42
  def hour_metrics; end

  # Sets the attribute hour_metrics
  #
  # @param value the value to set the attribute hour_metrics to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_properties.rb#42
  def hour_metrics=(_arg0); end

  # Returns the value of attribute logging.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_properties.rb#41
  def logging; end

  # Sets the attribute logging
  #
  # @param value the value to set the attribute logging to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_properties.rb#41
  def logging=(_arg0); end

  # Returns the value of attribute minute_metrics.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_properties.rb#43
  def minute_metrics; end

  # Sets the attribute minute_metrics
  #
  # @param value the value to set the attribute minute_metrics to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_properties.rb#43
  def minute_metrics=(_arg0); end
end

# source://azure-storage-common//lib/azure/storage/common/service/storage_service_stats.rb#30
class Azure::Storage::Common::Service::StorageServiceStats
  # @return [StorageServiceStats] a new instance of StorageServiceStats
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Common::Service::StorageServiceStats] the object that the method was called on
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_stats.rb#31
  def initialize; end

  # Returns the value of attribute geo_replication.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_stats.rb#36
  def geo_replication; end

  # Sets the attribute geo_replication
  #
  # @param value the value to set the attribute geo_replication to.
  #
  # source://azure-storage-common//lib/azure/storage/common/service/storage_service_stats.rb#36
  def geo_replication=(_arg0); end
end

# Defines constants for use with service properties.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#192
module Azure::Storage::Common::ServicePropertiesConstants; end

# XML element for AllowedHeaders.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#248
Azure::Storage::Common::ServicePropertiesConstants::ALLOWED_HEADERS_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for AllowedMethods.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#239
Azure::Storage::Common::ServicePropertiesConstants::ALLOWED_METHODS_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for AllowedOrigins.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#236
Azure::Storage::Common::ServicePropertiesConstants::ALLOWED_ORIGINS_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for Cors.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#230
Azure::Storage::Common::ServicePropertiesConstants::CORS_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for CorsRule.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#233
Azure::Storage::Common::ServicePropertiesConstants::CORS_RULE_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for days.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#221
Azure::Storage::Common::ServicePropertiesConstants::DAYS_ELEMENT = T.let(T.unsafe(nil), String)

# Default analytics version to send for logging, hour metrics and minute metrics.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#197
Azure::Storage::Common::ServicePropertiesConstants::DEFAULT_ANALYTICS_VERSION = T.let(T.unsafe(nil), String)

# XML element for DefaultServiceVersion.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#254
Azure::Storage::Common::ServicePropertiesConstants::DEFAULT_SERVICE_VERSION_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for delete.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#206
Azure::Storage::Common::ServicePropertiesConstants::DELETE_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for enabled.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#218
Azure::Storage::Common::ServicePropertiesConstants::ENABLED_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for ExposedHeaders.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#245
Azure::Storage::Common::ServicePropertiesConstants::EXPOSED_HEADERS_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for HourMetrics.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#224
Azure::Storage::Common::ServicePropertiesConstants::HOUR_METRICS_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for IncludeAPIs.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#251
Azure::Storage::Common::ServicePropertiesConstants::INCLUDE_APIS_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for logging.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#200
Azure::Storage::Common::ServicePropertiesConstants::LOGGING_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for MaxAgeInSeconds.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#242
Azure::Storage::Common::ServicePropertiesConstants::MAX_AGE_IN_SECONDS_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for MinuteMetrics.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#227
Azure::Storage::Common::ServicePropertiesConstants::MINUTE_METRICS_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for read.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#209
Azure::Storage::Common::ServicePropertiesConstants::READ_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for retention policy.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#215
Azure::Storage::Common::ServicePropertiesConstants::RETENTION_POLICY_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for storage service properties.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#194
Azure::Storage::Common::ServicePropertiesConstants::STORAGE_SERVICE_PROPERTIES_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for version.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#203
Azure::Storage::Common::ServicePropertiesConstants::VERSION_ELEMENT = T.let(T.unsafe(nil), String)

# XML element for write.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#212
Azure::Storage::Common::ServicePropertiesConstants::WRITE_ELEMENT = T.let(T.unsafe(nil), String)

# Service Types
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#138
module Azure::Storage::Common::ServiceType; end

# source://azure-storage-common//lib/azure/storage/common/default.rb#139
Azure::Storage::Common::ServiceType::BLOB = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#142
Azure::Storage::Common::ServiceType::FILE = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#140
Azure::Storage::Common::ServiceType::QUEUE = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#141
Azure::Storage::Common::ServiceType::TABLE = T.let(T.unsafe(nil), String)

# Constants for storage error strings
# More details are at = http://msdn.microsoft.com/en-us/library/azure/dd179357.aspx
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#774
module Azure::Storage::Common::StorageErrorCodeStrings; end

# Conflict (409) = The specified account already exists.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#841
Azure::Storage::Common::StorageErrorCodeStrings::ACCOUNT_ALREADY_EXISTS = T.let(T.unsafe(nil), String)

# Conflict (409) = The specified account is in the process of being created.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#843
Azure::Storage::Common::StorageErrorCodeStrings::ACCOUNT_BEING_CREATED = T.let(T.unsafe(nil), String)

# Forbidden (403) = The specified account is disabled.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#837
Azure::Storage::Common::StorageErrorCodeStrings::ACCOUNT_IS_DISABLED = T.let(T.unsafe(nil), String)

# Forbidden (403) = Server failed to authenticate the request. Make sure the value of the Authorization header is formed correctly including the signature.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#829
Azure::Storage::Common::StorageErrorCodeStrings::AUTHENTICATION_FAILED = T.let(T.unsafe(nil), String)

# Bad Request (400) = Condition headers are not supported.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#825
Azure::Storage::Common::StorageErrorCodeStrings::CONDITION_HEADER_NOT_SUPPORTED = T.let(T.unsafe(nil), String)

# Not Modified (304) = The condition specified in the conditional header(s) was not met for a read operation.
# Precondition Failed (412) = The condition specified in the conditional header(s) was not met for a write operation.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#777
Azure::Storage::Common::StorageErrorCodeStrings::CONDITION_NOT_MET = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#864
Azure::Storage::Common::StorageErrorCodeStrings::CONTAINER_ALREADY_EXISTS = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#866
Azure::Storage::Common::StorageErrorCodeStrings::CONTAINER_BEING_DELETED = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#865
Azure::Storage::Common::StorageErrorCodeStrings::CONTAINER_DISABLED = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#863
Azure::Storage::Common::StorageErrorCodeStrings::CONTAINER_NOT_FOUND = T.let(T.unsafe(nil), String)

# Bad Request (400) = The key for one of the metadata key-value pairs is empty.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#805
Azure::Storage::Common::StorageErrorCodeStrings::EMPTY_METADATA_KEY = T.let(T.unsafe(nil), String)

# Forbidden (403) = Read-access geo-redundant replication is not enabled for the account.
# Forbidden (403) = Write operations to the secondary location are not allowed.
# Forbidden (403) = The account being accessed does not have sufficient permissions to execute this operation.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#833
Azure::Storage::Common::StorageErrorCodeStrings::INSUFFICIENT_ACCOUNT_PERMISSIONS = T.let(T.unsafe(nil), String)

# Internal Server Error (500) = The server encountered an internal error. Please retry the request.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#855
Azure::Storage::Common::StorageErrorCodeStrings::INTERNAL_ERROR = T.let(T.unsafe(nil), String)

# Bad Request (400) = The authentication information was not provided in the correct format. Verify the value of Authorization header.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#815
Azure::Storage::Common::StorageErrorCodeStrings::INVALID_AUTHENTICATION_INFO = T.let(T.unsafe(nil), String)

# Bad Request (400) = The value provided for one of the HTTP headers was not in the correct format.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#787
Azure::Storage::Common::StorageErrorCodeStrings::INVALID_HEADER_VALUE = T.let(T.unsafe(nil), String)

# Bad Request (400) = The HTTP verb specified was not recognized by the server.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#803
Azure::Storage::Common::StorageErrorCodeStrings::INVALID_HTTP_VERB = T.let(T.unsafe(nil), String)

# Bad Request (400) = One of the request inputs is not valid.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#817
Azure::Storage::Common::StorageErrorCodeStrings::INVALID_INPUT = T.let(T.unsafe(nil), String)

# Bad Request (400) = The MD5 value specified in the request is invalid. The MD5 value must be 128 bits and Base64-encoded.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#811
Azure::Storage::Common::StorageErrorCodeStrings::INVALID_MD5 = T.let(T.unsafe(nil), String)

# Bad Request (400) = The specified metadata is invalid. It includes characters that are not permitted.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#819
Azure::Storage::Common::StorageErrorCodeStrings::INVALID_METADATA = T.let(T.unsafe(nil), String)

# Bad Request (400) = An invalid value was specified for one of the query parameters in the request URI.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#795
Azure::Storage::Common::StorageErrorCodeStrings::INVALID_QUERY_PARAMETER_VALUE = T.let(T.unsafe(nil), String)

# Requested Range Not Satisfiable (416) = The range specified is invalid for the current size of the resource.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#853
Azure::Storage::Common::StorageErrorCodeStrings::INVALID_RANGE = T.let(T.unsafe(nil), String)

# Bad Request (400) = The specifed resource name contains invalid characters.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#821
Azure::Storage::Common::StorageErrorCodeStrings::INVALID_RESOURCE_NAME = T.let(T.unsafe(nil), String)

# Bad Request (400) = The requested URI does not represent any resource on the server.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#801
Azure::Storage::Common::StorageErrorCodeStrings::INVALID_URI = T.let(T.unsafe(nil), String)

# Bad Request (400) = The specified XML is not syntactically valid.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#807
Azure::Storage::Common::StorageErrorCodeStrings::INVALID_XML_DOCUMENT = T.let(T.unsafe(nil), String)

# Bad Request (400) = The value provided for one of the XML nodes in the request body was not in the correct format.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#789
Azure::Storage::Common::StorageErrorCodeStrings::INVALID_XML_NODE_VALUE = T.let(T.unsafe(nil), String)

# Bad Request (400) = The MD5 value specified in the request did not match the MD5 value calculated by the server.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#809
Azure::Storage::Common::StorageErrorCodeStrings::MD5_MISMATCH = T.let(T.unsafe(nil), String)

# Bad Request (400) = The size of the specified metadata exceeds the maximum size permitted.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#823
Azure::Storage::Common::StorageErrorCodeStrings::METADATA_TOO_LARGE = T.let(T.unsafe(nil), String)

# Length Required (411) = The Content-Length header was not specified.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#849
Azure::Storage::Common::StorageErrorCodeStrings::MISSING_CONTENT_LENGTH_HEADER = T.let(T.unsafe(nil), String)

# Bad Request (400) = A required HTTP header was not specified.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#779
Azure::Storage::Common::StorageErrorCodeStrings::MISSING_REQUIRED_HEADER = T.let(T.unsafe(nil), String)

# Bad Request (400) = A required query parameter was not specified for this request.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#791
Azure::Storage::Common::StorageErrorCodeStrings::MISSING_REQUIRED_QUERY_PARAMETER = T.let(T.unsafe(nil), String)

# Bad Request (400) = A required XML node was not specified in the request body.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#781
Azure::Storage::Common::StorageErrorCodeStrings::MISSING_REQUIRED_XML_NODE = T.let(T.unsafe(nil), String)

# Bad Request (400) = Multiple condition headers are not supported.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#827
Azure::Storage::Common::StorageErrorCodeStrings::MULTIPLE_CONDITION_HEADER_NOT_SUPPORTED = T.let(T.unsafe(nil), String)

# Internal Server Error (500) = The operation could not be completed within the permitted time.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#857
Azure::Storage::Common::StorageErrorCodeStrings::OPERATION_TIMED_OUT = T.let(T.unsafe(nil), String)

# Bad Request (400) = One of the request inputs is out of range.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#813
Azure::Storage::Common::StorageErrorCodeStrings::OUT_OF_RANGE_INPUT = T.let(T.unsafe(nil), String)

# Bad Request (400) = A query parameter specified in the request URI is outside the permissible range.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#797
Azure::Storage::Common::StorageErrorCodeStrings::OUT_OF_RANGE_QUERY_PARAMETER_VALUE = T.let(T.unsafe(nil), String)

# Request Entity Too Large (413) = The size of the request body exceeds the maximum size permitted.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#851
Azure::Storage::Common::StorageErrorCodeStrings::REQUEST_BODY_TOO_LARGE = T.let(T.unsafe(nil), String)

# Bad Request (400) = The url in the request could not be parsed.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#799
Azure::Storage::Common::StorageErrorCodeStrings::REQUEST_URL_FAILED_TO_PARSE = T.let(T.unsafe(nil), String)

# Conflict (409) = The specified resource already exists.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#845
Azure::Storage::Common::StorageErrorCodeStrings::RESOURCE_ALREADY_EXISTS = T.let(T.unsafe(nil), String)

# Not Found (404) = The specified resource does not exist.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#835
Azure::Storage::Common::StorageErrorCodeStrings::RESOURCE_NOT_FOUND = T.let(T.unsafe(nil), String)

# Conflict (409) = The specified resource type does not match the type of the existing resource.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#847
Azure::Storage::Common::StorageErrorCodeStrings::RESOURCE_TYPE_MISMATCH = T.let(T.unsafe(nil), String)

# Service Unavailable (503) = The server is currently unable to receive requests. Please retry your request.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#859
Azure::Storage::Common::StorageErrorCodeStrings::SERVER_BUSY = T.let(T.unsafe(nil), String)

# Bad Request (400) = One of the HTTP headers specified in the request is not supported.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#783
Azure::Storage::Common::StorageErrorCodeStrings::UNSUPPORTED_HEADER = T.let(T.unsafe(nil), String)

# Method Not Allowed (405) = The resource doesn't support the specified HTTP verb.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#839
Azure::Storage::Common::StorageErrorCodeStrings::UNSUPPORTED_HTTP_VERB = T.let(T.unsafe(nil), String)

# Bad Request (400) = One of the query parameters specified in the request URI is not supported.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#793
Azure::Storage::Common::StorageErrorCodeStrings::UNSUPPORTED_QUERY_PARAMETER = T.let(T.unsafe(nil), String)

# Bad Request (400) = One of the XML nodes specified in the request body is not supported.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#785
Azure::Storage::Common::StorageErrorCodeStrings::UNSUPPORTED_XML_NODE = T.let(T.unsafe(nil), String)

# Legacy error code strings
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#862
Azure::Storage::Common::StorageErrorCodeStrings::UPDATE_CONDITION_NOT_SATISFIED = T.let(T.unsafe(nil), String)

# Represents a storage service location.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#162
module Azure::Storage::Common::StorageLocation; end

# source://azure-storage-common//lib/azure/storage/common/default.rb#163
Azure::Storage::Common::StorageLocation::PRIMARY = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#164
Azure::Storage::Common::StorageLocation::SECONDARY = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/default.rb#724
module Azure::Storage::Common::StorageServiceClientConstants; end

# source://azure-storage-common//lib/azure/storage/common/default.rb#741
Azure::Storage::Common::StorageServiceClientConstants::DEFAULT_ENDPOINT_SUFFIX = T.let(T.unsafe(nil), String)

# The default protocol.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#726
Azure::Storage::Common::StorageServiceClientConstants::DEFAULT_PROTOCOL = T.let(T.unsafe(nil), String)

# Development ServiceClient URLs.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#736
Azure::Storage::Common::StorageServiceClientConstants::DEVSTORE_BLOB_HOST_PORT = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#739
Azure::Storage::Common::StorageServiceClientConstants::DEVSTORE_FILE_HOST_PORT = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#737
Azure::Storage::Common::StorageServiceClientConstants::DEVSTORE_QUEUE_HOST_PORT = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#730
Azure::Storage::Common::StorageServiceClientConstants::DEVSTORE_STORAGE_ACCESS_KEY = T.let(T.unsafe(nil), String)

# Default credentials.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#729
Azure::Storage::Common::StorageServiceClientConstants::DEVSTORE_STORAGE_ACCOUNT = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/default.rb#738
Azure::Storage::Common::StorageServiceClientConstants::DEVSTORE_TABLE_HOST_PORT = T.let(T.unsafe(nil), String)

# The development store URI.
#
# source://azure-storage-common//lib/azure/storage/common/default.rb#733
Azure::Storage::Common::StorageServiceClientConstants::DEV_STORE_URI = T.let(T.unsafe(nil), String)

# source://azure-storage-common//lib/azure/storage/common/version.rb#30
class Azure::Storage::Common::Version
  class << self
    # @return [String]
    #
    # source://azure-storage-common//lib/azure/storage/common/version.rb#38
    def to_s; end

    # source://azure-storage-common//lib/azure/storage/common/version.rb#42
    def to_uas; end
  end
end

# Fields represent the parts defined in http://semver.org/
#
# source://azure-storage-common//lib/azure/storage/common/version.rb#32
Azure::Storage::Common::Version::MAJOR = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/version.rb#33
Azure::Storage::Common::Version::MINOR = T.let(T.unsafe(nil), Integer)

# source://azure-storage-common//lib/azure/storage/common/version.rb#34
Azure::Storage::Common::Version::UPDATE = T.let(T.unsafe(nil), Integer)

module ERB::Escape
  private

  def html_escape(_arg0); end

  class << self
    def html_escape(_arg0); end
  end
end

# Code validate private/public IP acceptable ranges.
#
# source://azure-storage-common//lib/azure/storage/common/core/utility.rb#215
class IPAddr
  include ::Comparable
end

class Object < ::BasicObject
  include ::Kernel
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  include ::PP::ObjectMixin
  include ::ActiveSupport::Tryable
  include ::ERB::Escape
  include ::ActiveSupport::CoreExt::ERBUtil
  include ::ActiveSupport::CoreExt::ERBUtilPrivate
  include ::Azure::Storage::Common::Core::Auth
end

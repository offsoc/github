# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::PullRequestSynchronize`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::PullRequestSynchronize`.

class Hydro::Schemas::Github::V1::PullRequestSynchronize
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      after_oid: T.nilable(String),
      base_repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      before_oid: T.nilable(String),
      issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue),
      protected_branch: T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch),
      pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest),
      ref: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)
    ).void
  end
  def initialize(actor: nil, after_oid: nil, base_repository: nil, before_oid: nil, issue: nil, protected_branch: nil, pull_request: nil, ref: nil, repository: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def after_oid; end

  sig { params(value: String).void }
  def after_oid=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def base_repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def base_repository=(value); end

  sig { returns(String) }
  def before_oid; end

  sig { params(value: String).void }
  def before_oid=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_after_oid; end

  sig { void }
  def clear_base_repository; end

  sig { void }
  def clear_before_oid; end

  sig { void }
  def clear_issue; end

  sig { void }
  def clear_protected_branch; end

  sig { void }
  def clear_pull_request; end

  sig { void }
  def clear_ref; end

  sig { void }
  def clear_repository; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def issue=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch)) }
  def protected_branch; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch)).void }
  def protected_branch=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def pull_request=(value); end

  sig { returns(String) }
  def ref; end

  sig { params(value: String).void }
  def ref=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end
end

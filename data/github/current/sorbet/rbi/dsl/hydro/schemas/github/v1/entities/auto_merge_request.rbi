# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::Entities::AutoMergeRequest`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::Entities::AutoMergeRequest`.

class Hydro::Schemas::Github::V1::Entities::AutoMergeRequest
  sig do
    params(
      created_at: T.nilable(Google::Protobuf::Timestamp),
      id: T.nilable(Integer),
      merge_error: T.nilable(String),
      merge_method: T.nilable(String),
      pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest),
      updated_at: T.nilable(Google::Protobuf::Timestamp),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(created_at: nil, id: nil, merge_error: nil, merge_method: nil, pull_request: nil, updated_at: nil, user: nil); end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_merge_error; end

  sig { void }
  def clear_merge_method; end

  sig { void }
  def clear_pull_request; end

  sig { void }
  def clear_updated_at; end

  sig { void }
  def clear_user; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(String) }
  def merge_error; end

  sig { params(value: String).void }
  def merge_error=(value); end

  sig { returns(String) }
  def merge_method; end

  sig { params(value: String).void }
  def merge_method=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def pull_request=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end
end

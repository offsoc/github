# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Aleph::Proto::Location`.
# Please instead update this file by running `bin/tapioca dsl Aleph::Proto::Location`.

class Aleph::Proto::Location
  sig do
    params(
      extent: T.nilable(Aleph::Proto::Range),
      first_line: T.nilable(String),
      ident: T.nilable(Aleph::Proto::Range),
      kind: T.nilable(String),
      leading_whitespace: T.nilable(Integer),
      local: T.nilable(T::Boolean),
      path: T.nilable(String),
      pkg: T.nilable(Aleph::Proto::Package),
      range: T.nilable(Aleph::Proto::Range),
      symbol_kind: T.nilable(T.any(Symbol, Integer)),
      trailing_whitespace: T.nilable(Integer),
      uri: T.nilable(String)
    ).void
  end
  def initialize(extent: nil, first_line: nil, ident: nil, kind: nil, leading_whitespace: nil, local: nil, path: nil, pkg: nil, range: nil, symbol_kind: nil, trailing_whitespace: nil, uri: nil); end

  sig { void }
  def clear_extent; end

  sig { void }
  def clear_first_line; end

  sig { void }
  def clear_ident; end

  sig { void }
  def clear_kind; end

  sig { void }
  def clear_leading_whitespace; end

  sig { void }
  def clear_local; end

  sig { void }
  def clear_path; end

  sig { void }
  def clear_pkg; end

  sig { void }
  def clear_range; end

  sig { void }
  def clear_symbol_kind; end

  sig { void }
  def clear_trailing_whitespace; end

  sig { void }
  def clear_uri; end

  sig { returns(T.nilable(Aleph::Proto::Range)) }
  def extent; end

  sig { params(value: T.nilable(Aleph::Proto::Range)).void }
  def extent=(value); end

  sig { returns(String) }
  def first_line; end

  sig { params(value: String).void }
  def first_line=(value); end

  sig { returns(T.nilable(Aleph::Proto::Range)) }
  def ident; end

  sig { params(value: T.nilable(Aleph::Proto::Range)).void }
  def ident=(value); end

  sig { returns(String) }
  def kind; end

  sig { params(value: String).void }
  def kind=(value); end

  sig { returns(Integer) }
  def leading_whitespace; end

  sig { params(value: Integer).void }
  def leading_whitespace=(value); end

  sig { returns(T::Boolean) }
  def local; end

  sig { params(value: T::Boolean).void }
  def local=(value); end

  sig { returns(String) }
  def path; end

  sig { params(value: String).void }
  def path=(value); end

  sig { returns(T.nilable(Aleph::Proto::Package)) }
  def pkg; end

  sig { params(value: T.nilable(Aleph::Proto::Package)).void }
  def pkg=(value); end

  sig { returns(T.nilable(Aleph::Proto::Range)) }
  def range; end

  sig { params(value: T.nilable(Aleph::Proto::Range)).void }
  def range=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def symbol_kind; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def symbol_kind=(value); end

  sig { returns(Integer) }
  def trailing_whitespace; end

  sig { params(value: Integer).void }
  def trailing_whitespace=(value); end

  sig { returns(String) }
  def uri; end

  sig { params(value: String).void }
  def uri=(value); end
end

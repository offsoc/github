# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Blackbird::Query::V1::SuggestRequest`.
# Please instead update this file by running `bin/tapioca dsl Blackbird::Query::V1::SuggestRequest`.

class Blackbird::Query::V1::SuggestRequest
  sig do
    params(
      actor: T.nilable(Blackbird::Query::V1::Actor),
      cursor_position: T.nilable(Integer),
      custom_scopes: T.nilable(T.any(Google::Protobuf::RepeatedField[Blackbird::Query::V1::CustomScope], T::Array[Blackbird::Query::V1::CustomScope])),
      experiments: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      query: T.nilable(String),
      request_timeout: T.nilable(Google::Protobuf::Duration),
      scoping_query: T.nilable(String),
      tenant: T.nilable(Blackbird::Query::V1::Tenant)
    ).void
  end
  def initialize(actor: nil, cursor_position: nil, custom_scopes: T.unsafe(nil), experiments: T.unsafe(nil), query: nil, request_timeout: nil, scoping_query: nil, tenant: nil); end

  sig { returns(T.nilable(Blackbird::Query::V1::Actor)) }
  def actor; end

  sig { params(value: T.nilable(Blackbird::Query::V1::Actor)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_cursor_position; end

  sig { void }
  def clear_custom_scopes; end

  sig { void }
  def clear_experiments; end

  sig { void }
  def clear_query; end

  sig { void }
  def clear_request_timeout; end

  sig { void }
  def clear_scoping_query; end

  sig { void }
  def clear_tenant; end

  sig { returns(Integer) }
  def cursor_position; end

  sig { params(value: Integer).void }
  def cursor_position=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Blackbird::Query::V1::CustomScope]) }
  def custom_scopes; end

  sig { params(value: Google::Protobuf::RepeatedField[Blackbird::Query::V1::CustomScope]).void }
  def custom_scopes=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def experiments; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def experiments=(value); end

  sig { returns(String) }
  def query; end

  sig { params(value: String).void }
  def query=(value); end

  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def request_timeout; end

  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def request_timeout=(value); end

  sig { returns(String) }
  def scoping_query; end

  sig { params(value: String).void }
  def scoping_query=(value); end

  sig { returns(T.nilable(Blackbird::Query::V1::Tenant)) }
  def tenant; end

  sig { params(value: T.nilable(Blackbird::Query::V1::Tenant)).void }
  def tenant=(value); end
end

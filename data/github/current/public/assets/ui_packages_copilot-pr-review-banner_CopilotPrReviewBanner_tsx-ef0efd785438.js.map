{"version":3,"file":"ui_packages_copilot-pr-review-banner_CopilotPrReviewBanner_tsx-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/copilot-auth-token/auth-token.ts","ui/packages/copilot-auth-token/copilot-auth-token.ts","ui/packages/copilot-chat/utils/constants.ts","ui/packages/copilot-chat/utils/copilot-chat-events.ts","ui/packages/copilot-chat/utils/api-cache.ts","ui/packages/copilot-chat/utils/copilot-chat-service.ts","ui/packages/copilot-chat/utils/copilot-chat-types.ts","ui/packages/copilot-chat/utils/experiments.ts","ui/packages/copilot-pr-review-banner/__generated__/useLoadTreeComparisonQuery.graphql.ts","ui/packages/copilot-chat/components/CopilotBadge.tsx","ui/packages/copilot-pr-review-banner/TreeComparisonContext.tsx","ui/packages/copilot-pr-review-banner/CopilotChatServiceContext.tsx","ui/packages/copilot-pr-review-banner/ReviewCompletionDataContext.tsx","ui/packages/copilot-pr-review-banner/ReviewThreadContext.tsx","ui/packages/copilot-pr-review-banner/ThreadNameContext.tsx","ui/packages/copilot-pr-review-banner/use-load-review-completion.ts","ui/packages/copilot-pr-review-banner/CopilotBadge.tsx","ui/packages/copilot-pr-review-banner/BannerContainer.tsx","ui/packages/copilot-pr-review-banner/FeedbackLink.tsx","ui/packages/copilot-pr-review-banner/AnalyticsContext.tsx","ui/packages/copilot-pr-review-banner/DismissBannerButton.tsx","ui/packages/copilot-pr-review-banner/use-load-tree-comparison.ts","ui/packages/copilot-pr-review-banner/PullRequestLoader.tsx","ui/packages/copilot-pr-review-banner/WebsocketLoader.tsx","ui/packages/copilot-pr-review-banner/use-tree-comparison-websocket.ts","ui/packages/copilot-pr-review-banner/ErrorMessage.tsx","ui/packages/copilot-pr-review-banner/LoadingMessage.tsx","ui/packages/copilot-pr-review-banner/ReadyMessage.tsx","ui/packages/copilot-pr-review-banner/RequestReviewMessage.tsx","ui/packages/copilot-pr-review-banner/BannerMessage.tsx","ui/packages/copilot-pr-review-banner/CopilotPrReviewBanner.tsx"],"sourcesContent":["export type AuthTokenResult = {\n  token: string\n  expiration: string\n}\n\nexport type SerializedAuthToken = {\n  value: string\n  expiration: string\n  ssoOrgIDs: string[]\n}\n\n/**\n * AuthToken represents an authentication token that is passed to CAPI, which is used to pull resources\n * from the monolith.\n *\n * It is capable of determining which authorization scheme to use (Bearer for SSATs or our own\n * GitHub-Bearer for user tokens).\n *\n * It also can tell if it needs refreshing, i.e. if it is expired or if the SSO orgs have changed since\n * it was minted.\n *\n * AuthToken doesn't care where the list of SSO orgs comes from.  Typically they are hydrated into a React\n * partial/component via props sent from the server, which would require a page refresh to receive the\n * current list, but they could theoretically come from other places too, like API calls...\n *\n * Finally, it can convert itself to/from ordinary JS objects that can be stored/retrieved from\n * local storage.\n */\nexport class AuthToken {\n  value: string\n  expiration: string\n  ssoOrgIDs: string[]\n\n  constructor(value: string, expiration: string, ssoOrgIDs: string[]) {\n    this.value = value\n    this.expiration = expiration\n    this.ssoOrgIDs = ssoOrgIDs\n  }\n\n  /**\n   * Returns a formatted string to be used as the value of an `Authorization` header\n   * to be \"GitHub-Bearer <encrypted token>\"\n   */\n  get authorizationHeaderValue() {\n    return `GitHub-Bearer ${this.value}`\n  }\n\n  /**\n   * Returns true if this auth token needs to be refreshed.\n   */\n  needsRefreshing(ssoOrgIds: string[]) {\n    return this.isExpired || this.ssoChanged(ssoOrgIds)\n  }\n\n  /**\n   * Returns true if this auth token is expired.\n   */\n  get isExpired() {\n    const expirationDateString = new Date(this.expiration)\n\n    const expirationDate = new Date(\n      Date.UTC(\n        expirationDateString.getUTCFullYear(),\n        expirationDateString.getUTCMonth(),\n        expirationDateString.getUTCDate(),\n        expirationDateString.getUTCHours(),\n        expirationDateString.getUTCMinutes(),\n        expirationDateString.getUTCSeconds(),\n        expirationDateString.getUTCMilliseconds(),\n      ),\n    )\n\n    const padding = 15 * 1000 // seconds\n\n    return expirationDate < new Date(Date.now() + padding)\n  }\n\n  /**\n   * Returns true if the session's SSO'd organizations have changed since the token was originally issued.\n   *\n   * Technically the set of orgs is inverted, representing the orgs that are *not* SSO'd, but functionally\n   * it will operate the same.\n   */\n  ssoChanged(ssoOrgIDs: string[]) {\n    return !(\n      this.ssoOrgIDs.every(org => ssoOrgIDs.includes(org)) && ssoOrgIDs.every(org => this.ssoOrgIDs.includes(org))\n    )\n  }\n\n  /**\n   * Build a new AuthToken from the results of a call to the token API endpoint.\n   */\n  static fromResult(result: AuthTokenResult, orgIds: string[]) {\n    return new AuthToken(result.token, result.expiration, orgIds)\n  }\n\n  /**\n   * Convert this token into a plain JS object, which can be stringified and put into localStorage.\n   */\n  serialize(): SerializedAuthToken {\n    return {\n      value: this.value,\n      expiration: this.expiration,\n      ssoOrgIDs: this.ssoOrgIDs,\n    }\n  }\n\n  /**\n   * Build a new auth token from a plain JS object, i.e. one parsed from localStorage.\n   */\n  static deserialize(serialized: SerializedAuthToken): AuthToken {\n    return new AuthToken(serialized.value, serialized.expiration, serialized.ssoOrgIDs)\n  }\n}\n","import {AuthToken, type AuthTokenResult, type SerializedAuthToken} from './auth-token'\nimport safeStorage from '@github-ui/safe-storage'\nimport {verifiedFetchJSON} from '@github-ui/verified-fetch'\n\nconst COPILOT_AUTH_TOKEN_KEY = 'COPILOT_AUTH_TOKEN'\nexport class CopilotAuthTokenProvider {\n  ssoOrgIDs: string[]\n  currentAuthTokenRequest: Promise<AuthToken> | null\n  copilotLocalStorage: {\n    getItem: (key: string, now?: number) => string | null\n    setItem: (key: string, value: string, now?: number) => void\n  }\n\n  constructor(ssoOrgIDs: string[]) {\n    this.ssoOrgIDs = ssoOrgIDs\n    this.currentAuthTokenRequest = null\n    this.copilotLocalStorage = safeStorage('localStorage', {\n      throwQuotaErrorsOnSet: false,\n      ttl: 1000 * 60 * 60 * 24,\n    })\n  }\n\n  /**\n   * Get the current auth token, either from local storage or by minting a new one from dotcom.\n   */\n  async getAuthToken(): Promise<AuthToken> {\n    const token = this.getLocalStorageAuthToken()\n\n    return token ? this.validateAuthToken(token) : this.fetchAuthToken()\n  }\n\n  setLocalStorageAuthToken(token: AuthToken) {\n    this.copilotLocalStorage.setItem(COPILOT_AUTH_TOKEN_KEY, JSON.stringify(token.serialize()))\n  }\n\n  getLocalStorageAuthToken(): AuthToken | null {\n    const value = this.copilotLocalStorage.getItem(COPILOT_AUTH_TOKEN_KEY)\n\n    return value ? AuthToken.deserialize(JSON.parse(value) as SerializedAuthToken) : null\n  }\n\n  /**\n   * Validate the given auth token.  If it's all good, return it, otherwise, go mint a new one from\n   * dotcom and return it instead.\n   */\n  private async validateAuthToken(token: AuthToken): Promise<AuthToken> {\n    return token.needsRefreshing(this.ssoOrgIDs) ? this.fetchAuthToken() : token\n  }\n\n  /**\n   * Return the current auth token request, or start a new one.\n   *\n   * The inner workings of the chat app can cause multiple requests to CAPI in quick succession.  If we\n   * do not have an auth token available in local storage, each of those requests will trigger their own\n   * token fetch, hence the storing of the current request on `this`.\n   */\n  private fetchAuthToken(): Promise<AuthToken> {\n    if (!this.currentAuthTokenRequest) {\n      this.currentAuthTokenRequest = this._fetchAuthToken()\n    }\n\n    return this.currentAuthTokenRequest\n  }\n\n  /**\n   * Start a new auth token request, parsing the result, persisting it in local storage,\n   * and clearing the current request once finished.\n   */\n  private async _fetchAuthToken(): Promise<AuthToken> {\n    const response = await verifiedFetchJSON('/github-copilot/chat/token', {method: 'POST'})\n\n    if (response.ok) {\n      const result = (await response.json()) as AuthTokenResult\n      this.currentAuthTokenRequest = null\n\n      const token = AuthToken.fromResult(result, this.ssoOrgIDs)\n\n      this.setLocalStorageAuthToken(token)\n\n      return token\n    } else {\n      this.currentAuthTokenRequest = null\n\n      throw new Error('Failed to mint new auth token')\n    }\n  }\n}\n","export const copilotChatTextAreaId = 'copilot-chat-textarea'\nexport const copilotChatSearchInputId = 'copilot-chat-topic-search'\nexport const reviewUserMessage = 'Review'\n","import type {CopilotChatEventPayload, CopilotChatReference} from './copilot-chat-types'\n\nexport class OpenCopilotChatEvent extends Event {\n  declare payload: CopilotChatEventPayload\n  constructor(payload: CopilotChatEventPayload) {\n    super('open-copilot-chat', {\n      bubbles: false,\n      cancelable: true,\n    })\n\n    this.payload = payload\n  }\n}\n\nexport class SearchCopilotEvent extends Event {\n  declare content: string\n  declare repoNwo: string\n  constructor(content: string, repoNwo: string) {\n    super('search-copilot-chat', {\n      bubbles: false,\n      cancelable: true,\n    })\n\n    this.content = content\n    this.repoNwo = repoNwo\n  }\n}\n\nexport class AddCopilotChatReferenceEvent extends Event {\n  declare reference: CopilotChatReference\n  declare openPanel?: boolean\n  declare id?: string\n  constructor(reference: CopilotChatReference, openPanel: boolean = false, id?: string) {\n    super('add-copilot-chat-reference', {\n      bubbles: false,\n      cancelable: true,\n    })\n    this.reference = reference\n    this.openPanel = openPanel\n    this.id = id\n  }\n}\n\nexport class SymbolChangedEvent extends Event {\n  declare context: CopilotChatReference\n  constructor(context: CopilotChatReference) {\n    super('symbol-changed', {\n      bubbles: false,\n      cancelable: true,\n    })\n\n    this.context = context\n  }\n}\n\ndeclare global {\n  interface WindowEventMap {\n    'open-copilot-chat': OpenCopilotChatEvent\n    'add-copilot-chat-reference': AddCopilotChatReferenceEvent\n    'search-copilot-chat': SearchCopilotEvent\n    'symbol-changed': SymbolChangedEvent\n  }\n}\n\nexport function publishOpenCopilotChat(payload: CopilotChatEventPayload): void {\n  window.dispatchEvent(new OpenCopilotChatEvent(payload))\n}\n\nexport function publishAddCopilotChatReference(\n  payload: CopilotChatReference,\n  openPanel: boolean = false,\n  id?: string,\n): void {\n  window.dispatchEvent(new AddCopilotChatReferenceEvent(payload, openPanel, id))\n}\n\nexport function subscribeOpenCopilotChat(listener: (e: OpenCopilotChatEvent) => void): () => void {\n  window.addEventListener('open-copilot-chat', listener)\n\n  return () => {\n    window.removeEventListener('open-copilot-chat', listener)\n  }\n}\n\nexport function subscribeAddCopilotChatReference(listener: (e: AddCopilotChatReferenceEvent) => void): () => void {\n  window.addEventListener('add-copilot-chat-reference', listener)\n  return () => {\n    window.removeEventListener('add-copilot-chat-reference', listener)\n  }\n}\n\nexport function subscribeSearchCopilot(listener: (e: SearchCopilotEvent) => void): () => void {\n  window.addEventListener('search-copilot-chat', listener)\n  return () => {\n    window.removeEventListener('search-copilot-chat', listener)\n  }\n}\n\nexport function subscribeSymbolChanged(listener: (e: SymbolChangedEvent) => void): () => void {\n  window.addEventListener('symbol-changed', listener)\n\n  return () => {\n    window.removeEventListener('symbol-changed', listener)\n  }\n}\n","import type {APIResult} from './copilot-chat-types'\n\n/**\n * Caches results of API calls based on the parameters. Ensures that only one request is dispatched for the same parameters.\n */\nexport class ApiCache<TResult, TParams extends string[]> {\n  private readonly separator = '-!-'\n  private cache = new Map<string, Promise<APIResult<TResult>>>()\n\n  public constructor(private fetchFn: (...params: TParams) => Promise<APIResult<TResult>>) {}\n\n  public async get(...params: TParams): Promise<APIResult<TResult>> {\n    const key = params.join(this.separator)\n    const cached = this.cache.get(key)\n    if (cached) {\n      return cached\n    } else {\n      const promise = this.fetchFn(...params)\n      this.cache.set(key, promise)\n      const result = await promise\n      if (!result.ok) {\n        this.cache.delete(key)\n      }\n      return promise\n    }\n  }\n}\n","import {CopilotAuthTokenProvider} from '@github-ui/copilot-auth-token'\nimport {blobDetectLanguage, treeListPath} from '@github-ui/paths'\nimport {verifiedFetchJSON} from '@github-ui/verified-fetch'\n\nimport {ApiCache} from './api-cache'\nimport type {\n  APIResult,\n  APIStreamingResult,\n  BlackbirdSuggestion,\n  CopilotChatAgent,\n  CopilotChatMessage,\n  CopilotChatOrg,\n  CopilotChatReference,\n  CopilotChatRepo,\n  CopilotChatSuggestions,\n  CopilotChatThread,\n  CopilotClientConfirmation,\n  Docset,\n  FailedAPIResult,\n  FileReference,\n  KnowledgeBasesResponse,\n  ReferenceDetails,\n  SuggestionsResponse,\n} from './copilot-chat-types'\nimport {getCopilotExperiments} from './experiments'\n\nconst BLACKBIRD_SUGGESTION_KIND = 'SUGGESTION_KIND_SYMBOL'\nconst HYDRATABLE_REFERENCE_TYPES = new Set(['snippet', 'file', 'symbol', 'docset', 'repository'])\n\ntype ListMessagesPayload = {\n  thread: CopilotChatThread\n  messages: CopilotChatMessage[]\n}\n\ntype FeedbackPayload = {\n  feedback?: string\n  textResponse?: string\n  feedbackChoice?: string[]\n  isContactedChecked?: string | null\n  messageId: string\n  threadId: string | undefined\n}\n\ntype APIPayload = CreateMessagePayload\n\ntype CreateMessagePayload = {\n  content: string\n  intent: string\n  references: CopilotChatReference[]\n  currentURL: string\n  streaming?: boolean\n  context: CopilotChatReference[]\n  confirmations: CopilotClientConfirmation[]\n  customInstructions?: string[]\n  knowledgeBases?: Docset[]\n}\n\nexport const ERRORS: {[key: number]: string} = {\n  400: 'This message could not be processed.',\n  401: 'You’re not authorized to use Copilot.',\n  403: 'This response could not be shown as it violates GitHub’s content policies.',\n  404: 'Resource not found. Please try again.',\n  408: 'Your network connection was interrupted. Please try again.',\n  413: 'Message too large. Please shorten it or remove some references and try again.',\n  429: 'GitHub API rate limit exceeded. Please wait and try again.',\n}\n\ninterface FetchThreadsParams {\n  /* Filter threads to just those with the specified name, case sensitive */\n  name?: string | undefined | null\n}\n\nexport class CopilotChatService {\n  apiURL: string\n  urlPathPrefix = '/github-copilot/chat'\n  ERROR_MSG = \"I'm sorry but there was an error. Please try again.\"\n  docsetsPromise: Promise<APIResult<KnowledgeBasesResponse>> | undefined = undefined\n  repoDetailsCache = new Map<number | string, CopilotChatRepo>()\n  listMessagesCache: ListMessagesPayload | undefined = undefined\n  copilotAuthTokenProvider: CopilotAuthTokenProvider\n\n  constructor(apiURL: string, ssoOrgs: CopilotChatOrg[]) {\n    this.apiURL = apiURL\n    this.copilotAuthTokenProvider = new CopilotAuthTokenProvider(ssoOrgs.map(org => org.id))\n  }\n\n  async fetchThreads(params: FetchThreadsParams = {}): Promise<APIResult<CopilotChatThread[]>> {\n    const queryParams = new URLSearchParams()\n    if (typeof params.name === 'string') queryParams.set('name', params.name)\n    const pathWithParams = `/threads?${queryParams.toString()}`\n    const res = await this.makeCAPIRequest(pathWithParams, 'GET')\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload: CopilotChatThread[] = (await res.json()).threads || []\n    return {status: res.status, ok: true, payload}\n  }\n\n  async createThread(): Promise<APIResult<CopilotChatThread>> {\n    const res = await this.makeCAPIRequest(`/threads`, 'POST')\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload: CopilotChatThread = (await res.json()).thread\n    return {status: res.status, ok: true, payload}\n  }\n\n  async deleteThread(threadID: string): Promise<APIResult<null>> {\n    const res = await this.makeCAPIRequest(`/threads/${threadID}`, 'DELETE')\n    if (!res.ok) return res as FailedAPIResult\n\n    return {status: res.status, ok: true, payload: null}\n  }\n\n  async renameThread(threadID: string, newName: string): Promise<APIResult<string>> {\n    const body = {generate: false, name: newName}\n\n    const res = await this.makeCAPIRequest(`/threads/${threadID}/name`, 'PATCH', body)\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload: string = (await res.json()).name || ''\n    return {status: res.status, ok: true, payload}\n  }\n\n  async clearThread(threadID: string): Promise<APIResult<null>> {\n    const res = await this.makeCAPIRequest(`/threads/${threadID}/clear`, 'PATCH')\n    if (!res.ok) return res as FailedAPIResult\n\n    return {status: res.status, ok: true, payload: null}\n  }\n\n  async generateThreadName(threadID: string): Promise<APIResult<string>> {\n    const body = {generate: true, name: ''}\n\n    const res = await this.makeCAPIRequest(`/threads/${threadID}/name`, 'PATCH', body)\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload: string = (await res.json()).name || ''\n    return {status: res.status, ok: true, payload}\n  }\n\n  async listMessages(threadID: string): Promise<APIResult<ListMessagesPayload>> {\n    if (this.listMessagesCache?.thread.id === threadID) {\n      return {status: 200, ok: true, payload: this.listMessagesCache}\n    }\n\n    const res = await this.makeCAPIRequest(`/threads/${threadID}/messages`, 'GET')\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload = await res.json()\n    this.listMessagesCache = payload\n    return {status: res.status, ok: true, payload}\n  }\n\n  async createMessage(\n    threadID: string,\n    content: string,\n    intent: string,\n    references: CopilotChatReference[],\n    customInstructions?: string[],\n  ): Promise<APIResult<CopilotChatMessage>> {\n    this.listMessagesCache = undefined\n    const res = await this.makeCAPIRequest(`/threads/${threadID}/messages`, 'POST', {\n      content,\n      intent,\n      references,\n      currentURL: window.location.href,\n      customInstructions,\n    })\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload: CopilotChatMessage = (await res.json()).message\n    return {status: res.status, ok: true, payload}\n  }\n\n  async createMessageStreaming(\n    threadID: string,\n    content: string,\n    intent: string,\n    references: CopilotChatReference[],\n    context: CopilotChatReference[],\n    confirmations: CopilotClientConfirmation[],\n    customInstructions?: string[],\n    knowledgeBases?: Docset[],\n  ): Promise<APIStreamingResult> {\n    this.listMessagesCache = undefined\n    const body: CreateMessagePayload = {\n      content,\n      intent,\n      references,\n      context,\n      currentURL: window.location.href,\n      streaming: true,\n      confirmations,\n      customInstructions,\n      knowledgeBases,\n    }\n\n    const res = await this.makeCAPIRequest(`/threads/${threadID}/messages`, 'POST', body, true)\n    if (!res.ok) return res as FailedAPIResult\n\n    return {status: res.status, ok: true, response: res}\n  }\n\n  async sendFeedback({feedback, feedbackChoice, messageId, threadId, textResponse}: FeedbackPayload) {\n    const body = {\n      feedback,\n      feedback_choice: feedbackChoice,\n      message_id: messageId,\n      thread_id: threadId,\n      text_response: textResponse,\n    }\n    const res = await this.makeDotcomRequest(`${this.urlPathPrefix}/feedback`, 'POST', body)\n    if (!res.ok) return res as FailedAPIResult\n\n    return {status: res.status, ok: true, payload: null}\n  }\n\n  async listDocsets(): Promise<APIResult<Docset[]>> {\n    const response = await this.fetchDocsetsResponse()\n    if (!response.ok) return response\n    return {status: 200, ok: true, payload: response.payload.knowledgeBases}\n  }\n\n  // The response from the server will be null if the user has access to one or more knowledge bases. That is because\n  // we only use the administratedCopilotEnterpriseOrganizations if there are no knowledge bases. So to save executing a bunch\n  // of queries to get administrated orgs and check if they have Copilot Enterprise we just return null in that case.\n  //\n  // We could have made a separate API endpoint to get a list of administratedCopilotEnterpriseOrganizations and only called it\n  // if there are no knowledge bases, but this would result in a layout shift when the response comes in and we render\n  // a different set of HTML if there are orgs.\n  //\n  // In the future we may need a separate endpoint if we need administratedCopilotEnterpriseOrganizations elsewhere but for now\n  // this is a much higher performance way to get this information without layout shifting.\n  //\n  // See the issue this fixes: https://github.com/github/copilot-core-productivity/issues/1443\n  async listAdministratedCopilotEnterpriseOrganizations(): Promise<APIResult<CopilotChatOrg[] | null>> {\n    const response = await this.fetchDocsetsResponse()\n    if (!response.ok) return response\n    return {status: 200, ok: true, payload: response.payload.administratedCopilotEnterpriseOrganizations}\n  }\n\n  fetchDocsetsResponse(): Promise<APIResult<KnowledgeBasesResponse>> {\n    if (!this.docsetsPromise) {\n      this.docsetsPromise = this.docsetRequestPromise()\n    }\n    return this.docsetsPromise\n  }\n\n  async docsetRequestPromise(): Promise<APIResult<KnowledgeBasesResponse>> {\n    const res = await this.makeDotcomRequest(`/github-copilot/docs/docsets`, 'GET')\n    if (!res.ok) return res as FailedAPIResult\n    const payload = (await res.json()) as KnowledgeBasesResponse\n    return {status: 200, ok: true, payload}\n  }\n\n  async deleteDocset(docset: Docset) {\n    const res = await this.makeDotcomRequest(`/copilot/docsets/${docset.id}`, 'DELETE')\n    if (!res.ok) return res as FailedAPIResult\n    return {status: res.status, ok: true, payload: null}\n  }\n\n  async listRepoFiles(repo: CopilotChatRepo): Promise<APIResult<string[]>> {\n    const path = treeListPath({repo, commitOid: repo.commitOID, includeDirectories: false})\n    return this.repoFilesCache.get(path)\n  }\n\n  private listRepoFilesImpl = async (path: string): Promise<APIResult<string[]>> => {\n    const res = await this.makeDotcomRequest(path, 'GET')\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload = (await res.json()).paths || []\n\n    return {status: 200, ok: true, payload}\n  }\n  private repoFilesCache = new ApiCache(this.listRepoFilesImpl)\n\n  async querySymbols(repo: CopilotChatRepo, query: string): Promise<APIResult<BlackbirdSuggestion[]>> {\n    return this.querySymbolsCache.get(repo.ownerLogin, repo.name, query)\n  }\n\n  private querySymbolsImpl = async (\n    ownerLogin: string,\n    repo: string,\n    query: string,\n  ): Promise<APIResult<BlackbirdSuggestion[]>> => {\n    const response = await this.makeDotcomRequest(\n      `/search/suggestions?query=repo:${ownerLogin}/${repo} ${query}`,\n      'GET',\n    )\n\n    if (!response.ok) {\n      return response as FailedAPIResult\n    }\n\n    const payload = (await response.json()) as SuggestionsResponse\n\n    return {\n      status: 200,\n      ok: true,\n      payload: payload.suggestions.filter(suggestion => suggestion.kind === BLACKBIRD_SUGGESTION_KIND),\n    }\n  }\n  private querySymbolsCache = new ApiCache(this.querySymbolsImpl)\n\n  async fetchImplicitContext(\n    url: string,\n    owner: string,\n    repo: string,\n  ): Promise<APIResult<CopilotChatReference | CopilotChatReference[]>> {\n    const response = await this.makeDotcomRequest(\n      `${this.urlPathPrefix}/implicit-context/${owner}/${repo}/${encodeURIComponent(url)}`,\n      'GET',\n    )\n\n    if (!response.ok) return response as FailedAPIResult\n\n    return {\n      status: response.status,\n      ok: response.ok,\n      payload: await response.json(),\n    }\n  }\n\n  async fetchRepo(repoID: number | string): Promise<APIResult<CopilotChatRepo>> {\n    let payload: CopilotChatRepo\n    if (this.repoDetailsCache.has(repoID)) {\n      payload = this.repoDetailsCache.get(repoID)!\n    } else {\n      const res = await this.makeDotcomRequest(`${this.urlPathPrefix}/repositories/${repoID}`, 'GET')\n      if (!res.ok) return res as FailedAPIResult\n\n      payload = await res.json()\n      this.repoDetailsCache.set(repoID, payload)\n    }\n\n    return {status: 200, ok: true, payload}\n  }\n\n  async listAgents(agentsPath: string): Promise<APIResult<CopilotChatAgent[]>> {\n    const res = await verifiedFetchJSON(agentsPath)\n    if (!res.ok) return {status: res.status, ok: false, error: ERRORS[res.status] || this.ERROR_MSG}\n    const payload = await res.json()\n    return {status: res.status, ok: res.ok, payload}\n  }\n\n  async hydrateReference<T extends CopilotChatReference>(reference: T): Promise<APIResult<ReferenceDetails<T>>> {\n    if (!HYDRATABLE_REFERENCE_TYPES.has(reference.type)) {\n      return {\n        status: 204,\n        ok: true,\n        payload: reference as ReferenceDetails<T>,\n      }\n    }\n    const response = await this.makeDotcomRequest(`${this.urlPathPrefix}/reference_details`, 'POST', {reference})\n\n    if (!response.ok) return response as FailedAPIResult\n\n    return {\n      status: response.status,\n      ok: response.ok,\n      payload: await response.json(),\n    }\n  }\n\n  async fetchLanguageForFileReference(reference: FileReference) {\n    const {repoOwner: ownerLogin, repoName: name} = reference\n    const path = window.btoa(reference.path)\n    const repo = {ownerLogin, name}\n    const fetchPath = blobDetectLanguage(repo, path, true)\n\n    const response = await this.makeDotcomRequest(fetchPath, 'GET')\n\n    if (!response.ok) return response as FailedAPIResult\n\n    return {\n      status: response.status,\n      ok: response.ok,\n      payload: await response.json(),\n    }\n  }\n\n  async generateSuggestions(\n    context: CopilotChatReference | CopilotChatRepo | Docset,\n    threadID: string,\n  ): Promise<APIResult<CopilotChatSuggestions>> {\n    const body = {context: [context], currentUrl: `${window.location.href}`}\n\n    const response = await this.makeCAPIRequest(`/threads/${threadID}/suggestions`, 'POST', body)\n    if (!response.ok) return response as FailedAPIResult\n    const payload = await response.json()\n\n    return {\n      status: response.status,\n      ok: response.ok,\n      payload,\n    }\n  }\n\n  protected async makeDotcomRequest(\n    path: string,\n    method: 'GET' | 'POST' | 'DELETE' | 'PATCH' | 'PUT',\n    body?: object | APIPayload,\n  ): Promise<Response | FailedAPIResult> {\n    const headers: {[key: string]: string} = {}\n    for (const exp of getCopilotExperiments()) {\n      const components = exp.split('=')\n      const name = components[0]?.replaceAll('_', '-')\n      let value = '1'\n      if (components.length > 1) {\n        value = components[1]!\n      }\n      headers[`X-Experiment-${name}`] = value\n    }\n\n    const token = await this.copilotAuthTokenProvider.getAuthToken()\n    headers['X-Copilot-Api-Token'] = token.value\n\n    try {\n      const res = await verifiedFetchJSON(path, {method, body, headers})\n      if (res.ok) return res\n      return {status: res.status, ok: false, error: ERRORS[res.status] || this.ERROR_MSG}\n    } catch (error) {\n      return {status: 500, ok: false, error: this.ERROR_MSG}\n    }\n  }\n\n  private get directConnectConfiguration() {\n    return process.env.NODE_ENV === 'development'\n      ? {integrationID: 'copilot-chat-dev'}\n      : {integrationID: 'copilot-chat'}\n  }\n\n  private async makeCAPIRequest(\n    path: string,\n    method: 'GET' | 'POST' | 'DELETE' | 'PATCH',\n    body?: object | APIPayload,\n    streamingResponse = false,\n    basePath = '/github/chat',\n  ): Promise<Response | FailedAPIResult> {\n    try {\n      const baseURL = this.apiURL\n\n      const token = await this.copilotAuthTokenProvider.getAuthToken()\n\n      const headers: {[key: string]: string} = {\n        Authorization: token.authorizationHeaderValue,\n        'copilot-integration-id': this.directConnectConfiguration.integrationID,\n      }\n      for (const exp of getCopilotExperiments()) {\n        const components = exp.split('=')\n        const name = components[0]?.replaceAll('_', '-')\n        let value = '1'\n        if (components.length > 1) {\n          value = components[1]!\n        }\n        headers[`X-Experiment-${name}`] = value\n      }\n\n      if (streamingResponse) {\n        headers['Content-Type'] = 'text/event-stream'\n      }\n\n      const res = await fetch(baseURL + basePath + path, {\n        method,\n        mode: 'cors',\n        cache: 'no-cache',\n        headers,\n        body: JSON.stringify(body),\n      })\n\n      if (res.ok) return res\n      return {status: res.status, ok: false, error: ERRORS[res.status] || this.ERROR_MSG}\n    } catch (error) {\n      return {status: 500, ok: false, error: this.ERROR_MSG}\n    }\n  }\n}\n","import type {SafeHTMLString} from '@github-ui/safe-html'\n\nexport type TopicItem = {\n  key: string\n  actionItem: JSX.Element\n}\n\nexport type CopilotChatRepo = {\n  id: number\n  name: string\n  ownerLogin: string\n  ownerType: 'User' | 'Organization'\n  readmePath?: string\n  description?: string\n  commitOID: string\n  ref: string\n  refInfo: {\n    name: string\n    type: 'branch' | 'tag'\n  }\n  visibility: string\n  languages?: Array<{name: string; percent: number}>\n}\n\nexport type CopilotChatPlan = Record<string, never>\n\nexport type CopilotChatOrg = {\n  id: string\n  login: string\n  avatarUrl: string\n}\n\nexport type CopilotChatThread = {\n  id: string\n  name: string\n  repoID?: number\n  currentReferences: CopilotChatReference[] | undefined\n  createdAt: string\n  updatedAt: string\n}\n\nexport type CopilotChatSuggestions = {\n  referenceType?: string\n  suggestions: GeneratedSuggestion[]\n}\n\nexport type GeneratedSuggestion = {\n  question: string\n  skill: string\n}\n\nexport type SkillExecution = {\n  slug: string\n  status: FunctionCalledStatus\n  arguments?: string\n  errorMessage?: string\n  references?: CopilotChatReference[]\n}\n\nexport type CopilotChatAgent = {\n  name: string\n  slug: string\n  avatarUrl: string\n  integrationUrl: string\n}\n\nexport type CopilotChatMessage = {\n  id: string\n  intent?: string\n  role: 'user' | 'assistant'\n  content?: string\n  createdAt: string\n  threadID: string\n  error?: ChatError\n  references: CopilotChatReference[] | null\n  skillExecutions?: SkillExecution[]\n  copilotAnnotations?: CopilotAnnotations\n  interrupted?: boolean\n  confirmations?: CopilotAgentConfirmation[] | null // confirmation from copilot/agent\n  clientConfirmations?: CopilotClientConfirmation[] | null // users response to agent confirmation\n  agentErrors?: CopilotAgentError[]\n}\n\nexport type CopilotAgentConfirmation = {\n  title: string\n  message: string\n  confirmation: object\n}\n\nexport type CopilotAgentError = {\n  type: string\n  code: string\n  message: string\n  identifier: string\n}\n\nexport type CopilotClientConfirmation = {\n  state: CopilotClientConfirmationState\n  confirmation: object\n}\n\nexport type CopilotClientConfirmationState = 'accepted' | 'dismissed'\n\nexport type CopilotAnnotations = {\n  CodeVulnerability?: CodeVulnerability[]\n}\n\ntype CodeVulnerability = {\n  startOffset: number\n  endOffset: number\n  details: CodeVulnerabilityDetails\n}\n\ntype CodeVulnerabilityDetails = {\n  type: string\n  uiType: string\n  description: string\n  uiDescription: string\n}\n\nexport type RepositoryReference = CopilotChatRepo & {\n  type: 'repository'\n}\n\nexport interface ReferenceHeaderInfo {\n  blobSize: string\n  displayName: string\n  isLfs: boolean\n  lineInfo: {truncatedLoc: number; truncatedSloc: number}\n  rawBlobUrl: string\n  viewable: boolean\n}\n\ntype APIResponseResource =\n  | {resourceType: 'Repository'; data: Omit<RepositoryAPIReference, 'type'>}\n  | {resourceType: 'Issue'; data: Omit<IssueAPIReference, 'type'>}\n  | {resourceType: 'Release'; data: Omit<ReleaseAPIReference, 'type'>}\n  | {resourceType: 'PullRequest'; data: Omit<PullRequestAPIReference, 'type'>}\n  | {resourceType: 'Commit'; data: Omit<CommitAPIReference, 'type'>}\n  | {resourceType: 'Topic'; data: Omit<TopicAPIReference, 'type'>}\n\nexport type APIResponseReference = APIResponseResource & {\n  type: 'api-response'\n  id: number\n  repo?: string\n}\n\nexport type FileReference = {\n  type: 'file' | 'file-v2'\n  url: string\n  path: string\n  repoID: number\n  repoOwner: string\n  repoName: string\n  ref: string\n  commitOID: string\n  languageName?: string\n  languageId?: number\n}\n\nexport type FileChangesReference = {\n  type: 'file-changes'\n  ref: string\n  path: string\n  url: string\n  commits: Array<{\n    oid: string\n    shortSha: string\n    message: string\n    createdAt: string\n    author: {\n      name: string\n      email: string\n      login: string\n    }\n    blameLines: Array<{\n      lineNo: number\n      text: string\n    }>\n  }>\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n}\n\nexport interface FileReferenceDetails extends FileReference {\n  contents: string\n  highlightedContents: SafeHTMLString[]\n  repoIsOrgOwned: boolean\n  range: LineRange\n  expandedRange: LineRange\n  headerInfo: ReferenceHeaderInfo\n}\n\nexport interface FileDiffReference {\n  type: 'file-diff'\n  id: string\n  url: string\n  base: SnippetReference | null // will be null if a file was 'added'\n  head: SnippetReference | null // will be null if a file was 'removed'\n  baseFile: FileReference | null // will be null if a file was 'added'\n  headFile: FileReference | null // will be null if a file was 'removed'\n  // user-selected, shown in location.hash, ex L1-R5\n  // won't be populated in the server props but should be present when calling CAPI\n  selectedRange?: {\n    start?: string\n    end?: string\n  }\n}\n\nexport interface FileDiffReferenceDetails extends FileDiffReference {\n  contents: string\n  highlightedContents: SafeHTMLString[]\n  repoIsOrgOwned: boolean\n  expandedRange: LineRange\n}\n\nexport interface SnippetReference {\n  type: 'snippet'\n  url: string\n  path: string\n  repoID: number\n  repoOwner: string\n  repoName: string\n  ref: string\n  commitOID: string\n  range: LineRange\n  languageID?: number\n  languageName?: string\n  title?: string\n}\n\nexport interface SnippetReferenceDetails extends SnippetReference {\n  contents: string\n  highlightedContents: SafeHTMLString[]\n  repoIsOrgOwned: boolean\n  expandedRange: LineRange\n  headerInfo: ReferenceHeaderInfo\n}\n\nexport interface CommitReference {\n  type: 'commit'\n  oid: string\n  message: string\n  permalink: string\n  author: {\n    name: string\n    email: string\n    login: string\n  }\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n}\n\nexport interface PullRequestReference {\n  type: 'pull-request'\n  title: string\n  url: string\n  commit?: string\n  authorLogin: string\n  repository: CopilotChatRepo\n}\n\nexport const TREE_COMPARISON_REFERENCE_TYPE = 'tree-comparison'\nexport interface TreeComparisonReference {\n  type: typeof TREE_COMPARISON_REFERENCE_TYPE\n  baseRepoId: number\n  headRepoId: number\n  baseRevision: string\n  headRevision: string\n  diffHunks: DiffHunk[]\n}\n\nexport interface DiffHunk {\n  type: 'diff-hunk'\n  changeReference: string\n  diff: string\n  fileName: string\n  headerContext: string\n}\n\nexport interface IssueReference {\n  type: 'issue'\n  id: number\n  number: number\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n  title?: string\n  body?: string\n  state?: string\n  authorLogin?: string\n  url?: string\n  assignees?: string[]\n  pullRequestUrl?: string\n}\n\nexport interface DiscussionReference {\n  type: 'discussion'\n  number: number\n  title: string\n  body: string\n  user: {\n    login: string\n  }\n  state: string\n  id: number\n  url: string\n  authorLogin: string\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n}\n\nexport interface ReleaseReference {\n  type: 'release'\n  name?: string\n  tagName?: string\n  url?: string\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n  body?: string\n  isDraft: boolean\n  isPrerelease: boolean\n  authorLogin?: string\n  targetCommitish?: string\n}\n\nexport interface ReleaseAPIReference {\n  type: 'release.api'\n  name?: string\n  tag_name: string\n  html_url?: string\n}\n\nexport interface PullRequestAPIReference {\n  type: 'pull-request.api'\n  title?: string\n  html_url?: string\n  number: number\n  repo?: string\n}\n\nexport interface AlertReference {\n  type: 'alert.api'\n  number: number\n  repo?: string\n}\n\nexport interface IssueAPIReference {\n  type: 'issue.api'\n  title?: string\n  html_url: string\n  number: number\n  repo?: string\n  state: string\n}\n\nexport interface RepositoryAPIReference {\n  type: 'repository.api'\n  name: string\n  description?: string\n  html_url?: string\n}\n\nexport interface CommitAPIReference {\n  type: 'commit.api'\n  sha: string\n  commit: {\n    message?: string\n  }\n  html_url?: string\n}\n\nexport interface DiffAPIReference {\n  type: 'diff.api'\n}\n\nexport interface FileAPIReference {\n  type: 'file.api'\n}\n\nexport interface TopicAPIReference {\n  type: 'topic.api'\n  name: string\n  display_name?: string\n  short_description?: string\n}\n\nexport interface TextReference {\n  type: 'text'\n  text?: string\n}\n\nexport interface UnsupportedAPIReference {\n  type: 'unsupported'\n  text?: string\n}\n\nexport interface LineRange {\n  start: number\n  end: number\n}\n\nexport interface CodeNavSymbolReference {\n  type: 'symbol'\n  kind: 'codeNavSymbol'\n  name: string\n  languageID?: number\n  codeNavDefinitions?: CodeNavSymbol[]\n  codeNavReferences?: CodeReference[]\n  languageName?: string\n}\n\nexport interface CodeNavSymbolReferenceDetails extends CodeNavSymbolReference {\n  codeNavDefinitions?: CodeNavSymbolDetails[]\n  codeNavReferences?: CodeReferenceDetails[]\n}\n\nexport interface SuggestionSymbolReference {\n  type: 'symbol'\n  kind: 'suggestionSymbol'\n  name: string\n  languageID?: number\n  suggestionDefinitions?: SuggestionSymbol[]\n}\n\nexport interface SuggestionSymbolReferenceDetails extends SuggestionSymbolReference {\n  suggestionDefinitions?: SuggestionSymbolDetails[]\n}\n\nexport type DocsetReference = {\n  type: 'docset'\n  name: string\n  id: string\n  scopingQuery: string // TODO: is this the correct name for CAPI?\n  avatarUrl: string\n  // Docset references coming from previous threads in CAPI currently don't have their\n  // repos serialized.\n  repos?: string[]\n  description: string\n}\n\nexport type GitHubAgentReference = {\n  type: 'github.agent'\n  login: string\n  avatarURL: string\n}\n\nexport type WebSearchReference = {\n  type: 'web-search'\n  query: string\n  results: Array<{title: string; excerpt: string; url: string}>\n  status: string\n}\n\nexport type SupportDocumentReference = {\n  type: 'support-document'\n  query: string\n  results: Array<{title: string; content: string; url: string}>\n  status: string\n}\n\nexport type JobReference = {\n  type: 'job'\n  id: string\n  repoId: number\n  repoName: string\n  repoOwner: string\n}\n\nexport type PlanReference = {\n  type: 'plan'\n}\n\ntype CodeNavSymbol = {\n  ident: Range\n  extent: Range\n} & CodeSymbol\n\ntype SuggestionSymbol = {\n  identOffset?: ByteOffset\n  extentOffset?: ByteOffset\n} & CodeSymbol\n\ntype CodeSymbol = {\n  kind: string\n  fullyQualifiedName: string\n  repoID: number\n  repoOwner: string\n  repoName: string\n  ref: string\n  commitOID: string\n  path: string\n}\n\ntype CodeReference = {\n  ident: Range\n  repoID: number\n  repoOwner: string\n  repoName: string\n  ref: string\n  commitOID: string\n  path: string\n}\n\ntype SymbolDetails = {\n  repoIsOrgOwned: boolean\n  highlightedContents?: SafeHTMLString[]\n  range?: LineRange\n}\n\nexport type CodeNavSymbolDetails = CodeNavSymbol & SymbolDetails\nexport type SuggestionSymbolDetails = SuggestionSymbol & SymbolDetails\nexport type CodeReferenceDetails = CodeReference & SymbolDetails\n\ntype Range = {\n  start: Position\n  end: Position\n}\n\ntype Position = {\n  line: number\n  column: number\n}\n\ntype ByteOffset = {\n  start: number\n  end: number\n}\n\nexport type CopilotChatReference =\n  | FileReference\n  | FileChangesReference\n  | SnippetReference\n  | FileDiffReference\n  | RepositoryReference\n  | CodeNavSymbolReference\n  | SuggestionSymbolReference\n  | DocsetReference\n  | CommitReference\n  | PullRequestReference\n  | GitHubAgentReference\n  | WebSearchReference\n  | TreeComparisonReference\n  | IssueReference\n  | TextReference\n  | ReleaseReference\n  | DiscussionReference\n  | JobReference\n  | PlanReference\n  | ReleaseAPIReference\n  | PullRequestAPIReference\n  | AlertReference\n  | IssueAPIReference\n  | RepositoryAPIReference\n  | CommitAPIReference\n  | DiffAPIReference\n  | FileAPIReference\n  | TopicAPIReference\n  | APIResponseReference\n  | UnsupportedAPIReference\n\nexport type NumberedCopilotChatReference = CopilotChatReference & {n: number}\n\nexport type CopilotChatReferenceDetails = SnippetReferenceDetails\n\nexport type ReferenceDetails<TReference extends CopilotChatReference> = TReference extends SnippetReference\n  ? SnippetReferenceDetails\n  : TReference extends FileReference\n    ? FileReferenceDetails\n    : TReference extends CodeNavSymbolReference\n      ? CodeNavSymbolReferenceDetails\n      : TReference extends SuggestionSymbolReference\n        ? SuggestionSymbolReferenceDetails\n        : TReference extends FileDiffReference\n          ? FileDiffReferenceDetails\n          : unknown\n\ntype CopilotChatExplainEventPayload = {\n  intent: typeof CopilotChatIntents.explain\n  content: string\n  references: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatAskEventPayload = {\n  intent: typeof CopilotChatIntents.conversation\n  references?: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatAskPrEventPayload = {\n  intent: typeof CopilotChatIntents.conversation\n  references: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatExplainPrEventPayload = {\n  intent: typeof CopilotChatIntents.explainFileDiff\n  content: string\n  references: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatSuggestEventPayload = {\n  intent: typeof CopilotChatIntents.suggest\n  content: string\n  references: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatReviewPrEventPayload = {\n  intent: typeof CopilotChatIntents.reviewPr\n  content: string\n  references: CopilotChatReference[]\n  completion: string\n  thread: CopilotChatThread\n  id?: string\n}\n\ntype CopilotChatStartConversationPayload = {\n  intent: typeof CopilotChatIntents.conversation\n  content: string\n  references: CopilotChatReference[]\n  id?: string\n}\n\nexport type CopilotChatEventPayload =\n  | CopilotChatExplainEventPayload\n  | CopilotChatAskEventPayload\n  | CopilotChatSuggestEventPayload\n  | CopilotChatAskPrEventPayload\n  | CopilotChatExplainPrEventPayload\n  | CopilotChatReviewPrEventPayload\n  | CopilotChatStartConversationPayload\n\nexport const CopilotChatIntents = {\n  explain: 'explain',\n  conversation: 'conversation',\n  suggest: 'suggest',\n  askDocs: 'ask-docs',\n  discussFileDiff: 'discuss-file-diff',\n  explainFileDiff: 'explain-file-diff',\n  reviewPr: 'review-pull-request',\n} as const\nexport type CopilotChatIntentsType = (typeof CopilotChatIntents)[keyof typeof CopilotChatIntents]\n\ninterface ChatErrorBase {\n  type: MessageStreamingErrorType | 'basic'\n  isError: boolean\n  message?: string\n  details?: unknown\n}\n\ninterface BasicChatError extends ChatErrorBase {\n  type: 'basic'\n  isError: true\n}\n\ninterface AgentError<TType extends MessageStreamingErrorType, TDetails> extends ChatErrorBase {\n  type: TType\n  isError: true\n  details: TDetails\n}\n\nexport type AgentUnauthorizedChatError = AgentError<'agentUnauthorized', NotAuthorizedForAgentErrorPayload>\nexport type AgentRequestChatError = AgentError<'agentRequest', AppAgentRequestErrorPayload>\nexport type AgentChatError = AgentUnauthorizedChatError | AgentRequestChatError\n\nexport type ChatError = BasicChatError | AgentChatError\n\nexport type BlackbirdSymbol = {\n  fully_qualified_name: string\n  kind: string\n  ident_start: number\n  ident_end: number\n  extent_start: number\n  extent_end: number\n}\n\nexport interface BlackbirdSuggestion {\n  kind: string\n  query: string\n  repository_nwo: string\n  language_id: number\n  path: string\n  repository_id: number\n  commit_sha: string\n  line_number: number\n  symbol: BlackbirdSymbol | null\n}\n\nexport type SuggestionsResponse = {\n  suggestions: BlackbirdSuggestion[]\n  queryErrors: string[]\n  failed: boolean\n}\n\nexport type KnowledgeBasesResponse = {\n  knowledgeBases: Docset[]\n  administratedCopilotEnterpriseOrganizations: CopilotChatOrg[] | null\n}\n\nexport interface Docset {\n  id: string\n  name: string\n  description: string\n  createdByID: number\n  ownerID: number\n  ownerLogin: string\n  ownerType: string\n  visibility: string\n  scopingQuery: string\n  repos: string[]\n  sourceRepos?: SourceRepo[]\n  visibleOutsideOrg: boolean\n  iconHtml?: SafeHTMLString\n  avatarUrl: string\n  adminableByUser: boolean\n  /**\n   * Orgs which own at least one repo in the docset but that the current user is not currently SSO'd into\n   */\n  protectedOrganizations: string[]\n}\n\nexport interface RepoData {\n  databaseId: number | null | undefined\n  name: string\n  nameWithOwner: string\n  isInOrganization: boolean\n  shortDescriptionHTML: string\n  paths?: string[]\n  owner: {\n    databaseId: number | null | undefined\n    avatarUrl: string\n    login: string\n  }\n}\n\nexport interface DocsetRepo extends RepoData {\n  paths: string[]\n}\n\nexport interface SourceRepo {\n  id: number\n  ownerID: number\n  paths: string[]\n}\n\nexport type MessageStreamingResponse =\n  | MessageStreamingResponseContent\n  | MessageStreamingResponseError\n  | MessageStreamingResponseComplete\n  | MessageStreamingResponseDebug\n  | MessageStreamingResponseFunctionCall\n  | MessageStreamingResponseConfirmation\n  | MessageStreamingResponseAgentError\n\nexport type MessageStreamingResponseContent = {\n  type: 'content'\n  body: string\n}\n\nexport type MessageStreamingResponseDebug = {\n  type: 'debug'\n  body: string\n}\n\nexport const MESSAGE_STREAMING_ERROR_TYPES = [\n  'exception',\n  'filtered',\n  'contentTooLarge',\n  'rateLimit',\n  'agentUnauthorized',\n  'agentRequest',\n  'networkError',\n  'multipleAgentsAttempt',\n] as const\n\ntype MessageStreamingErrorTypes = typeof MESSAGE_STREAMING_ERROR_TYPES\nexport type MessageStreamingErrorType = MessageStreamingErrorTypes[number]\n\nexport type MessageStreamingResponseError = {\n  type: 'error'\n  errorType: MessageStreamingErrorType\n  description: string\n}\n\nexport type MessageStreamingResponseComplete = {\n  type: 'complete'\n  id: string\n  turnID: string\n  createdAt: string\n  intent: string\n  references: CopilotChatReference[] | null\n  copilotAnnotations?: CopilotAnnotations\n}\n\nexport type MessageStreamingResponseFunctionCall = {\n  arguments: string\n  type: 'functionCall'\n  name: string\n  status: FunctionCalledStatus\n  errorMessage: string\n  references: CopilotChatReference[]\n}\n\nexport type MessageStreamingResponseConfirmation = {\n  type: 'confirmation'\n  title: string\n  message: string\n  confirmation: object\n}\n\nexport type MessageStreamingResponseAgentError = {\n  type: 'agentError'\n  agentErrorType: string\n  code: string\n  message: string\n  identifier: string\n}\n\nexport type FunctionArguments =\n  | BingSearchArguments\n  | FilePathSearchArguments\n  | SymbolSearchArguments\n  | CodeSearchArguments\n  | CreateIssueArguments\n  | GetIssueArguments\n  | GetPullRequestCommitsArguments\n  | GetCommitArguments\n  | GetAlertArguments\n  | GetReleaseArguments\n  | GetRepoArguments\n  | JobLogsArguments\n  | GetDiffArguments\n  | GetDiffByRangeArguments\n  | KnowledgeBaseSearchArguments\n  | GetFileArguments\n  | GetFileChangesArguments\n  | GetDiscussionArguments\n  | GetPullRequestArguments\n  | PlanArguments\n  | GitHubAPIArguments\n  | SupportSearchArguments\n\nexport type BingSearchArguments = {kind: 'bing-search'; query: string; freshness?: string}\nexport type SupportSearchArguments = {kind: 'support-search'; rawUserQuery: string}\nexport type CodeSearchArguments = {kind: 'codesearch'; query: string; scopingQuery: string}\nexport type KnowledgeBaseSearchArguments = {kind: 'kb-search'; query: string; kbID: string}\nexport type FilePathSearchArguments = {kind: 'pathsearch'; filename: string; scopingQuery: string}\nexport type GetFileArguments = {kind: 'getfile'; repo: string; path: string; ref?: string}\nexport type GetFileChangesArguments = {kind: 'getfilechanges'; repo: string; path: string; ref: string; max?: number}\nexport type SymbolSearchArguments = {kind: 'show-symbol-definition'; symbolName: string; scopingQuery: string}\nexport type CreateIssueArguments = {\n  kind: 'githubissuecreate'\n  repo: string\n  assignees: string[]\n  labels: string[]\n  title: string\n  body: string\n}\nexport type GetIssueArguments = {kind: 'getissue'; issueNumber: number; repo: string}\nexport type GetAlertArguments = {kind: 'getalert'; url: string}\nexport type GetPullRequestCommitsArguments = {kind: 'getprcommits'; pullRequestNumber: number; repo: string}\nexport type GetCommitArguments = {kind: 'getcommit'; commitish: number; repo: string}\nexport type GetReleaseArguments = {kind: 'getrelease'; repo: string; tagName?: string}\nexport type GetRepoArguments = {kind: 'getrepo'; repo: string}\nexport type JobLogsArguments = {\n  kind: 'get-actions-job-logs'\n  repo: string\n  jobId?: number\n  pullRequestNumber?: number\n  runId?: number\n  workflowPath?: string\n}\nexport type GetDiffArguments = {\n  kind: 'getdiff'\n  baseRepoId: number\n  headRepoId: number\n  baseRevision: string\n  headRevision: string\n}\nexport type GetDiffByRangeArguments = {kind: 'get-diff-by-range'; repo: string; range: string}\nexport type GetDiscussionArguments = {kind: 'getdiscussion'; repo: string; discussionNumber: number; owner: string}\nexport type GetPullRequestArguments = {kind: 'getpullrequest'; pullRequestNumber: number; repo: string}\nexport type PlanArguments = {kind: 'planskill'; user_query: string}\nexport type GitHubAPIArguments = {\n  kind: 'get-github-data'\n  endpoint: string\n  repo: string\n  endpointDescription?: string\n  task?: string\n}\n\nexport const SUPPORTED_FUNCTIONS = [\n  'bing-search',\n  'codesearch',\n  'kb-search',\n  'pathsearch',\n  'show-symbol-definition',\n  'getissue',\n  'getprcommits',\n  'getcommit',\n  'getrelease',\n  'getrepo',\n  'getdiff',\n  'get-diff-by-range',\n  'getfile',\n  'getfilechanges',\n  'getdiscussion',\n  'get-actions-job-logs',\n  'getpullrequest',\n  'getalert',\n  'planskill',\n  'get-github-data',\n  'support-search',\n]\n\nexport type FunctionCalledStatus = 'completed' | 'started' | 'error' | 'unsupported'\n\nexport type NotAuthorizedForAgentErrorPayload = {\n  authorize_url: string\n  client_id: string\n  name: string\n  avatar_url: string\n  slug: string\n  description: string\n}\n\nexport type AppAgentRequestErrorPayload = {\n  type: string\n  code: string\n  identifier: string\n  message: string\n}\n\nexport type CopilotChatMode = 'immersive' | 'assistive'\n\nexport type SuccessfulAPIResult<T> = {\n  status: number\n  ok: true\n  payload: T\n}\n\nexport type FailedAPIResult = {\n  status: number\n  ok: false\n  error: string\n}\n\nexport type APIResult<T> = SuccessfulAPIResult<T> | FailedAPIResult\n\ntype SuccessfulAPIStreamingResult = {\n  status: number\n  ok: true\n  response: Response\n}\n\nexport type APIStreamingResult = SuccessfulAPIStreamingResult | FailedAPIResult\n\nexport interface CopilotChatPayload {\n  agentsPath: string\n  apiURL: string\n  currentUserLogin: string\n  customInstructions?: string\n  renderKnowledgeBases?: boolean\n  optedInToUserFeedback: boolean\n  renderAttachKnowledgeBaseHerePopover?: boolean\n  renderKnowledgeBaseAttachedToChatPopover?: boolean\n  reviewLab: boolean\n}\n","import safeStorage from '@github-ui/safe-storage'\n\nconst experimentsLocalStorageKey = 'copilot_experiments'\n\nexport function getCopilotExperiments(): string[] {\n  const experiments = safeStorage('localStorage').getItem(experimentsLocalStorageKey)\n  if (!experiments) return []\n\n  return experiments.split(',')\n}\n\nexport function setCopilotExperiments(experiments: string[]): void {\n  safeStorage('localStorage').setItem(experimentsLocalStorageKey, experiments.join(','))\n}\n","/**\n * @generated SignedSource<<cb64a062e6e5ea4eab67586c0c07329a>>\n * @relayHash 92dd75761b2c940ba7e1d7021b0b3348\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\n// @relayRequestID 92dd75761b2c940ba7e1d7021b0b3348\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type useLoadTreeComparisonQuery$variables = {\n  pullRequestId: string;\n};\nexport type useLoadTreeComparisonQuery$data = {\n  readonly node: {\n    readonly additions?: number;\n    readonly author?: {\n      readonly login: string;\n    } | null | undefined;\n    readonly baseRefOid?: any;\n    readonly baseRepository?: {\n      readonly databaseId: number | null | undefined;\n    } | null | undefined;\n    readonly closed?: boolean;\n    readonly deletions?: number;\n    readonly headRefOid?: any;\n    readonly headRepository?: {\n      readonly databaseId: number | null | undefined;\n    } | null | undefined;\n    readonly isDraft?: boolean;\n  } | null | undefined;\n  readonly viewer: {\n    readonly isCopilotDotcomChatEnabled: boolean;\n    readonly login: string;\n  };\n};\nexport type useLoadTreeComparisonQuery = {\n  response: useLoadTreeComparisonQuery$data;\n  variables: useLoadTreeComparisonQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"pullRequestId\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"pullRequestId\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"additions\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"deletions\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"login\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"baseRefOid\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"databaseId\",\n  \"storageKey\": null\n},\nv7 = [\n  (v6/*: any*/)\n],\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"closed\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"headRefOid\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"isDraft\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"isCopilotDotcomChatEnabled\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"__typename\",\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv14 = [\n  (v6/*: any*/),\n  (v13/*: any*/)\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"useLoadTreeComparisonQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": null,\n        \"kind\": \"LinkedField\",\n        \"name\": \"node\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"kind\": \"InlineFragment\",\n            \"selections\": [\n              (v2/*: any*/),\n              (v3/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": null,\n                \"kind\": \"LinkedField\",\n                \"name\": \"author\",\n                \"plural\": false,\n                \"selections\": [\n                  (v4/*: any*/)\n                ],\n                \"storageKey\": null\n              },\n              (v5/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"Repository\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"baseRepository\",\n                \"plural\": false,\n                \"selections\": (v7/*: any*/),\n                \"storageKey\": null\n              },\n              (v8/*: any*/),\n              (v9/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"Repository\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"headRepository\",\n                \"plural\": false,\n                \"selections\": (v7/*: any*/),\n                \"storageKey\": null\n              },\n              (v10/*: any*/)\n            ],\n            \"type\": \"PullRequest\",\n            \"abstractKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"viewer\",\n        \"plural\": false,\n        \"selections\": [\n          (v4/*: any*/),\n          (v11/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"useLoadTreeComparisonQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": null,\n        \"kind\": \"LinkedField\",\n        \"name\": \"node\",\n        \"plural\": false,\n        \"selections\": [\n          (v12/*: any*/),\n          {\n            \"kind\": \"InlineFragment\",\n            \"selections\": [\n              (v2/*: any*/),\n              (v3/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": null,\n                \"kind\": \"LinkedField\",\n                \"name\": \"author\",\n                \"plural\": false,\n                \"selections\": [\n                  (v12/*: any*/),\n                  (v4/*: any*/),\n                  (v13/*: any*/)\n                ],\n                \"storageKey\": null\n              },\n              (v5/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"Repository\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"baseRepository\",\n                \"plural\": false,\n                \"selections\": (v14/*: any*/),\n                \"storageKey\": null\n              },\n              (v8/*: any*/),\n              (v9/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"Repository\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"headRepository\",\n                \"plural\": false,\n                \"selections\": (v14/*: any*/),\n                \"storageKey\": null\n              },\n              (v10/*: any*/)\n            ],\n            \"type\": \"PullRequest\",\n            \"abstractKey\": null\n          },\n          (v13/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"viewer\",\n        \"plural\": false,\n        \"selections\": [\n          (v4/*: any*/),\n          (v11/*: any*/),\n          (v13/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"id\": \"92dd75761b2c940ba7e1d7021b0b3348\",\n    \"metadata\": {},\n    \"name\": \"useLoadTreeComparisonQuery\",\n    \"operationKind\": \"query\",\n    \"text\": null\n  }\n};\n})();\n\n(node as any).hash = \"d4ea9de9ca211f8b71b5528149cae5bd\";\n\nexport default node;\n","import {AlertFillIcon, CopilotIcon} from '@primer/octicons-react'\nimport {Box, Spinner} from '@primer/react'\nimport type React from 'react'\n\nexport interface CopilotBadgeProps {\n  isLoading?: boolean\n  isError?: boolean\n  hasUnreadMessages?: boolean\n  zIndex?: number\n  fill?: string\n  bg?: string\n  borderColor?: string\n  customIcon?: React.ReactNode\n}\n\nexport default function CopilotBadge(props: CopilotBadgeProps) {\n  const {isLoading, isError, hasUnreadMessages, zIndex, fill, bg, borderColor, customIcon} = props\n  return (\n    <Box\n      sx={{\n        borderRadius: '100%',\n        position: 'relative',\n        bg: bg ? bg : isError ? 'attention.subtle' : 'canvas.subtle',\n        width: 24,\n        height: 24,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        border: '1px solid',\n        borderColor: borderColor ? borderColor : isError ? 'attention.muted' : 'border.default',\n        color: fill ? fill : isLoading ? 'accent.fg' : 'fg.default',\n        zIndex: zIndex ? zIndex : -1,\n        flexShrink: 0,\n      }}\n    >\n      <Box\n        sx={{\n          position: 'absolute',\n          display: isLoading ? 'flex' : 'none',\n        }}\n      >\n        <Spinner\n          size=\"medium\"\n          sx={{\n            width: 24,\n            height: 24,\n            color: 'accent.fg',\n          }}\n        />\n      </Box>\n      {hasUnreadMessages && (\n        <Box\n          className=\"unread-indicator\"\n          sx={{width: '10px', height: '10px', left: '16px', top: '-2px', borderColor: 'canvas.default'}}\n        />\n      )}\n      {customIcon ? customIcon : <CopilotIcon size={12} />}\n      {isError ? (\n        <Box\n          sx={{\n            position: 'absolute',\n            bottom: 0,\n            right: 0,\n            transform: 'translate(4px,4px)',\n            color: 'attention.fg',\n          }}\n        >\n          <AlertFillIcon size={12} />\n        </Box>\n      ) : null}\n    </Box>\n  )\n}\n\ntry{ CopilotBadge.displayName ||= 'CopilotBadge' } catch {}","import {\n  type PropsWithChildren,\n  createContext,\n  useContext,\n  useMemo,\n  useState,\n  type Dispatch,\n  type SetStateAction,\n} from 'react'\nimport {\n  TREE_COMPARISON_REFERENCE_TYPE,\n  type TreeComparisonReference,\n} from '@github-ui/copilot-chat/utils/copilot-chat-types'\n\ninterface TreeComparisonContextProps extends PropsWithChildren {\n  treeComparison: TreeComparisonReference | undefined\n  setTreeComparison: Dispatch<SetStateAction<Omit<TreeComparisonReference, 'type' | 'diffHunks'>>>\n}\n\nconst TreeComparisonContext = createContext<TreeComparisonContextProps | undefined>(undefined)\n\ninterface TreeComparisonProps {\n  baseRepoId?: TreeComparisonReference['baseRepoId'] | undefined\n  headRepoId?: TreeComparisonReference['headRepoId'] | undefined\n  baseRevision?: TreeComparisonReference['baseRevision'] | undefined | null\n  headRevision?: TreeComparisonReference['headRevision'] | undefined | null\n}\n\nexport interface TreeComparisonProviderProps extends PropsWithChildren<TreeComparisonProps> {}\n\nconst defaultRepoId = 0\nconst defaultRevision = ''\n\nexport const TreeComparisonProvider = ({children, ...props}: TreeComparisonProviderProps) => {\n  const [treeComparison, setTreeComparison] = useState<Omit<TreeComparisonReference, 'type' | 'diffHunks'>>({\n    baseRepoId: props.baseRepoId ?? defaultRepoId,\n    baseRevision: props.baseRevision ?? defaultRevision,\n    headRepoId: props.headRepoId ?? defaultRepoId,\n    headRevision: props.headRevision ?? defaultRevision,\n  })\n\n  const {baseRepoId, headRepoId, baseRevision, headRevision} = treeComparison\n  const providerData = useMemo(\n    () =>\n      ({\n        setTreeComparison,\n        treeComparison: haveTreeComparison({baseRepoId, baseRevision, headRepoId, headRevision})\n          ? {type: TREE_COMPARISON_REFERENCE_TYPE, baseRevision, headRevision, baseRepoId, headRepoId, diffHunks: []}\n          : undefined,\n      }) satisfies TreeComparisonContextProps,\n    [baseRepoId, baseRevision, headRepoId, headRevision],\n  )\n  return <TreeComparisonContext.Provider value={providerData}>{children}</TreeComparisonContext.Provider>\n}\n\nexport const useTreeComparison = () => {\n  const context = useContext(TreeComparisonContext)\n  if (!context) throw new Error('useTreeComparison must be used with TreeComparisonProvider.')\n  return context\n}\n\nexport const haveTreeComparison = ({baseRepoId, baseRevision, headRepoId, headRevision}: TreeComparisonProps) => {\n  if (baseRepoId === undefined || baseRepoId === defaultRepoId) return false\n  if (headRepoId === undefined || headRepoId === defaultRepoId) return false\n  if (baseRevision === undefined || baseRevision === defaultRevision) return false\n  return headRevision !== undefined && headRevision !== defaultRevision\n}\n\ntry{ TreeComparisonContext.displayName ||= 'TreeComparisonContext' } catch {}\ntry{ TreeComparisonProvider.displayName ||= 'TreeComparisonProvider' } catch {}","import {CopilotChatService} from '@github-ui/copilot-chat/utils/copilot-chat-service'\nimport type {CopilotChatOrg} from '@github-ui/copilot-chat/utils/copilot-chat-types'\nimport {type PropsWithChildren, createContext, useContext, useMemo, useState} from 'react'\n\n// Data necessary to initialize an instance of CopilotChatService\nexport interface ChatServiceProps {\n  apiURL: string\n  ssoOrganizations: CopilotChatOrg[]\n}\n\ninterface CopilotChatServiceContextProps {\n  chatService?: CopilotChatService\n  setChatServiceData: (data: ChatServiceProps) => void\n}\n\nconst CopilotChatServiceContext = createContext<CopilotChatServiceContextProps | undefined>(undefined)\n\nexport interface CopilotChatServiceProviderProps {\n  apiURL?: ChatServiceProps['apiURL']\n  ssoOrganizations?: ChatServiceProps['ssoOrganizations']\n  chatService?: CopilotChatService\n}\n\nexport const CopilotChatServiceProvider = ({\n  children,\n  ...props\n}: PropsWithChildren<CopilotChatServiceProviderProps>) => {\n  const [chatServiceData, setChatServiceData] = useState<ChatServiceProps>({\n    ssoOrganizations: props.ssoOrganizations ?? [],\n    apiURL: props.apiURL ?? '',\n  })\n  const {apiURL, ssoOrganizations} = chatServiceData\n  const providerData = useMemo(() => {\n    let chatService = undefined\n    if (props.chatService) {\n      chatService = props.chatService\n    } else if (ssoOrganizations !== undefined && apiURL.length > 0) {\n      chatService = new CopilotChatService(apiURL, ssoOrganizations)\n    }\n    return {chatService, setChatServiceData} satisfies CopilotChatServiceContextProps\n  }, [apiURL, props.chatService, ssoOrganizations])\n  return <CopilotChatServiceContext.Provider value={providerData}>{children}</CopilotChatServiceContext.Provider>\n}\n\nexport const useCopilotChatService = () => {\n  const context = useContext(CopilotChatServiceContext)\n  if (!context) throw new Error('useChatService must be used with CopilotChatServiceProvider.')\n  return context\n}\n\nexport const haveChatServiceData = ({apiURL, chatService, ssoOrganizations}: CopilotChatServiceProviderProps) => {\n  if (chatService !== undefined) return true\n  return typeof apiURL === 'string' && ssoOrganizations !== undefined && apiURL.trim().length > 0\n}\n\ntry{ CopilotChatServiceContext.displayName ||= 'CopilotChatServiceContext' } catch {}\ntry{ CopilotChatServiceProvider.displayName ||= 'CopilotChatServiceProvider' } catch {}","import {\n  type PropsWithChildren,\n  type Dispatch,\n  type SetStateAction,\n  createContext,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\ninterface ReviewCompletionDataContextProps {\n  completionData: ReviewCompletionData | undefined\n  setCompletionData: Dispatch<SetStateAction<ReviewCompletionData | undefined>>\n}\nexport interface ReviewCompletionData {\n  message?: string\n  hasDiffHunks: boolean\n}\n\nconst ReviewCompletionDataContext = createContext<ReviewCompletionDataContextProps | undefined>(undefined)\n\nexport const ReviewCompletionDataProvider = ({children}: PropsWithChildren) => {\n  const [completionData, setCompletionData] = useState<ReviewCompletionData | undefined>({hasDiffHunks: false})\n  const providerProps = useMemo(() => ({completionData, setCompletionData}), [completionData])\n  return <ReviewCompletionDataContext.Provider value={providerProps}>{children}</ReviewCompletionDataContext.Provider>\n}\n\nexport const useReviewCompletionData = () => {\n  const context = useContext(ReviewCompletionDataContext)\n  if (!context) {\n    throw new Error('useReviewCompletionData must be used with ReviewCompletionDataProvider.')\n  }\n  return context\n}\n\ntry{ ReviewCompletionDataContext.displayName ||= 'ReviewCompletionDataContext' } catch {}\ntry{ ReviewCompletionDataProvider.displayName ||= 'ReviewCompletionDataProvider' } catch {}","import {\n  type PropsWithChildren,\n  type Dispatch,\n  type SetStateAction,\n  createContext,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\nimport type {CopilotChatThread} from '@github-ui/copilot-chat/utils/copilot-chat-types'\n\ninterface ReviewThreadContextProps {\n  reviewThread?: CopilotChatThread\n  setReviewThread: Dispatch<SetStateAction<CopilotChatThread | undefined>>\n}\n\nconst ReviewThreadContext = createContext<ReviewThreadContextProps | undefined>(undefined)\n\nexport const ReviewThreadProvider = ({children}: PropsWithChildren) => {\n  const [reviewThread, setReviewThread] = useState<CopilotChatThread | undefined>()\n  const providerProps = useMemo(\n    () => ({reviewThread, setReviewThread}) satisfies ReviewThreadContextProps,\n    [reviewThread],\n  )\n  return <ReviewThreadContext.Provider value={providerProps}>{children}</ReviewThreadContext.Provider>\n}\n\nexport const useReviewThread = () => {\n  const context = useContext(ReviewThreadContext)\n  if (!context) throw new Error('useReviewThread must be used with ReviewThreadProvider.')\n  return context\n}\n\ntry{ ReviewThreadContext.displayName ||= 'ReviewThreadContext' } catch {}\ntry{ ReviewThreadProvider.displayName ||= 'ReviewThreadProvider' } catch {}","import {\n  type PropsWithChildren,\n  type Dispatch,\n  type SetStateAction,\n  createContext,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\ninterface ThreadNameContextProps {\n  threadName?: string | undefined | null\n  setThreadName: Dispatch<SetStateAction<string | undefined | null>>\n}\n\nconst ThreadNameContext = createContext<ThreadNameContextProps | undefined>(undefined)\n\nexport interface ThreadNameProviderProps {\n  threadName?: ThreadNameContextProps['threadName']\n}\n\nexport const ThreadNameProvider = ({children, ...props}: PropsWithChildren<ThreadNameProviderProps>) => {\n  const [threadName, setThreadName] = useState<ThreadNameContextProps['threadName']>(props.threadName)\n  const providerProps = useMemo(() => ({threadName, setThreadName}) satisfies ThreadNameContextProps, [threadName])\n  return <ThreadNameContext.Provider value={providerProps}>{children}</ThreadNameContext.Provider>\n}\n\nexport const useThreadName = () => {\n  const context = useContext(ThreadNameContext)\n  if (!context) throw new Error('useThreadName must be used with ThreadNameProvider.')\n  return context\n}\n\ntry{ ThreadNameContext.displayName ||= 'ThreadNameContext' } catch {}\ntry{ ThreadNameProvider.displayName ||= 'ThreadNameProvider' } catch {}","import {useCallback, useEffect, useReducer, useRef} from 'react'\nimport {CopilotChatIntents, TREE_COMPARISON_REFERENCE_TYPE} from '@github-ui/copilot-chat/utils/copilot-chat-types'\nimport type {CopilotChatMessage} from '@github-ui/copilot-chat/utils/copilot-chat-types'\nimport {useTreeComparison} from './TreeComparisonContext'\nimport {useCopilotChatService} from './CopilotChatServiceContext'\nimport {useReviewCompletionData} from './ReviewCompletionDataContext'\nimport {useReviewThread} from './ReviewThreadContext'\nimport {useThreadName} from './ThreadNameContext'\nimport {reviewUserMessage} from '@github-ui/copilot-chat/utils/constants'\n\ninterface UseLoadReviewCompletionProps {\n  isDismissed?: boolean\n  isReviewRequested?: boolean\n}\n\ninterface ReviewCompletionState {\n  isLoading: boolean\n  isError: boolean\n}\n\ntype ReviewCompletionAction = {type: 'LOADING'} | {type: 'LOADED'; isError: boolean} | {type: 'ERROR'}\n\nfunction reviewCompletionReducer(state: ReviewCompletionState, action: ReviewCompletionAction) {\n  switch (action.type) {\n    case 'LOADING':\n      return {...state, isLoading: true}\n    case 'LOADED':\n      return {isLoading: false, isError: action.isError}\n    case 'ERROR':\n      return {isLoading: false, isError: true}\n    default:\n      throw new Error('invalid action')\n  }\n}\n\nexport function useLoadReviewCompletion({\n  isDismissed = false,\n  isReviewRequested = false,\n}: UseLoadReviewCompletionProps): ReviewCompletionState {\n  const {treeComparison} = useTreeComparison()\n  const [completionState, dispatch] = useReducer(reviewCompletionReducer, {isLoading: false, isError: false})\n  const {completionData, setCompletionData} = useReviewCompletionData()\n  const {setReviewThread} = useReviewThread()\n  const {isLoading, isError} = completionState\n  const isLoadingRef = useRef(isLoading)\n  const {chatService} = useCopilotChatService()\n  const {threadName} = useThreadName()\n\n  const checkIfThreadExists = useCallback(async (): Promise<boolean> => {\n    if (typeof threadName !== 'string' || threadName.length < 1 || chatService === undefined) return false\n\n    const threadsResponse = await promiseWithTimeout(chatService.fetchThreads({name: threadName}), 15000)\n    if (threadsResponse === undefined || !threadsResponse.ok) return false\n\n    const threads = threadsResponse.payload\n    if (threads.length < 1) return false\n\n    const latestThread = threads[threads.length - 1]\n    if (latestThread === undefined) return false\n\n    const messagesResponse = await promiseWithTimeout(chatService.listMessages(latestThread.id), 50000)\n    if (messagesResponse === undefined || !messagesResponse.ok) return false\n\n    setReviewThread(latestThread)\n\n    const messages = messagesResponse.payload.messages\n    const latestMessage = messages[messages.length - 1]\n    const hasDiffHunks = threadContainsDiffHunks(messages)\n    setCompletionData({message: latestMessage?.content, hasDiffHunks})\n    dispatch({type: 'LOADED', isError: false})\n\n    return true\n  }, [chatService, setCompletionData, setReviewThread, threadName])\n\n  const createReviewThread = useCallback(async () => {\n    if (chatService === undefined) return\n\n    const threadResponse = await promiseWithTimeout(chatService.createThread(), 15000)\n    if (threadResponse !== undefined && threadResponse.ok) {\n      const thread = threadResponse.payload\n      setReviewThread(thread)\n\n      if (treeComparison === undefined) return\n\n      const messageResponse = await promiseWithTimeout(\n        chatService.createMessage(thread.id, reviewUserMessage, CopilotChatIntents.reviewPr, [treeComparison]),\n        50000,\n      )\n      const message: CopilotChatMessage | undefined = messageResponse.ok ? messageResponse.payload : undefined\n      const listMessagesResponse = await promiseWithTimeout(chatService.listMessages(thread.id), 50000)\n      let hasDiffHunks = false\n      if (listMessagesResponse && listMessagesResponse.ok) {\n        hasDiffHunks = threadContainsDiffHunks(listMessagesResponse.payload.messages)\n      }\n      setCompletionData({message: message?.content, hasDiffHunks})\n      dispatch({type: 'LOADED', isError: !messageResponse.ok})\n\n      if (threadName && messageResponse.ok) promiseWithTimeout(chatService.renameThread(thread.id, threadName), 50000)\n    } else {\n      dispatch({type: 'ERROR'})\n    }\n  }, [treeComparison, chatService, setCompletionData, setReviewThread, threadName])\n\n  useEffect(() => {\n    // We've already tried to generate a Copilot pre-review\n    if (isError || completionData?.message !== undefined) return\n\n    // The user doesn't want to see the Copilot pre-review banner\n    if (isDismissed) return\n\n    // Currently working, don't interrupt\n    if (isLoading || isLoadingRef.current) return\n\n    // Don't know how to talk to CAPI\n    if (chatService === undefined) return\n\n    // Waiting on the data that will identify the code to be reviewed\n    if (treeComparison === undefined) return\n\n    // The user hasn't requested a review\n    if (!isReviewRequested) return\n\n    const getCompletion = async () => {\n      // Update a ref to avoid issue from multiple useEffect calls in dev mode.\n      isLoadingRef.current = true\n      dispatch({type: 'LOADING'})\n\n      try {\n        const doesThreadExist = await checkIfThreadExists()\n        if (!doesThreadExist) await createReviewThread()\n      } catch (e) {\n        dispatch({type: 'ERROR'})\n      } finally {\n        isLoadingRef.current = false\n      }\n    }\n\n    void getCompletion()\n  }, [\n    chatService,\n    checkIfThreadExists,\n    completionData,\n    createReviewThread,\n    isError,\n    isLoading,\n    treeComparison,\n    isDismissed,\n    isReviewRequested,\n  ])\n\n  return completionState\n}\n\nfunction promiseWithTimeout<T>(\n  promise: Promise<T>,\n  ms: number,\n  timeoutError = new Error('Promise timed out'),\n): Promise<T> {\n  // create a promise that rejects in milliseconds\n  const timeout = new Promise<never>((_, reject) => {\n    setTimeout(() => {\n      reject(timeoutError)\n    }, ms)\n  })\n\n  // returns a race between timeout and the passed promise\n  return Promise.race<T>([promise, timeout])\n}\n\n/**\n * Checks if the chat thread contains diffHunks in the user message.\n * A diffHunk is a section of a diff that represents one change in the code.\n * @param messages - The array of messages in the thread.\n * @returns A boolean indicating whether the chat thread contains diff hunks.\n */\nexport function threadContainsDiffHunks(messages: CopilotChatMessage[]): boolean {\n  return messages.some(\n    message =>\n      message.role.toLowerCase() === 'user' &&\n      message.references?.some(ref => ref.type === TREE_COMPARISON_REFERENCE_TYPE && ref.diffHunks.length > 0),\n  )\n}\n","import DefaultCopilotBadge from '@github-ui/copilot-chat/components/CopilotBadge'\n\ninterface CopilotBadgeProps {\n  isLoading: boolean\n  isError: boolean\n}\n\nconst loadingBackground = 'var(--bgColor-inset, var(--color-bg-inset))'\n\nconst errorBackground = 'var(--bgColor-danger-muted, var(--color-danger-subtle))'\nconst errorBorderColor = 'var(--borderColor-danger-muted, var(--color-danger-muted))'\nconst errorFillColor = 'danger.fg'\n\nconst readyBackground = 'var(--bgColor-accent-muted, var(--color-bg-accent))'\nconst readyBorderColor = 'var(--borderColor-accent-muted, var(--color-accent-muted))'\nconst readyFillColor = 'accent.fg'\n\nexport const CopilotBadge = ({isLoading, isError}: CopilotBadgeProps) => (\n  <DefaultCopilotBadge\n    isLoading={isLoading}\n    zIndex={1}\n    bg={isLoading ? loadingBackground : isError ? errorBackground : readyBackground}\n    fill={isError ? errorFillColor : readyFillColor}\n    borderColor={isLoading ? undefined : isError ? errorBorderColor : readyBorderColor}\n  />\n)\n\ntry{ CopilotBadge.displayName ||= 'CopilotBadge' } catch {}","import type {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'\nimport {Box, merge} from '@primer/react'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport type {PropsWithChildren} from 'react'\n\nconst dismissedContainerSx: BetterSystemStyleObject = {display: 'none'}\n\nconst defaultContainerSx: BetterSystemStyleObject = {\n  position: 'relative',\n  borderRadius: 2,\n  width: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  gap: 2,\n  borderStyle: 'solid',\n  borderWidth: '1px',\n  p: 3,\n}\n\nconst locationFilesChangedContainerSx: BetterSystemStyleObject = {\n  mb: 3,\n}\n\nconst locationCompareContainerSx: BetterSystemStyleObject = {\n  my: 3,\n}\n\nconst locationConversationContainerSx: BetterSystemStyleObject = {\n  mt: 3,\n}\n\nconst loadingContainerSx: BetterSystemStyleObject = {\n  backgroundColor: 'var(--bgColor-inset, var(--color-canvas-subtle))',\n  borderColor: 'var(--borderColor-muted, var(--color-border-muted))',\n}\n\nconst errorContainerSx: BetterSystemStyleObject = {\n  backgroundColor: 'var(--bgColor-danger-muted, var(--color-danger-subtle))',\n  borderColor: 'var(--borderColor-danger-muted, var(--color-danger-muted))',\n}\n\nconst readyContainerSx: BetterSystemStyleObject = {\n  backgroundColor: 'var(--bgColor-accent-muted, var(--color-accent-subtle))',\n  borderColor: 'var(--borderColor-accent-muted, var(--color-accent-muted))',\n}\n\ntype BannerLocation = 'compare' | 'files_changed' | 'conversation'\n\nexport interface BannerContainerProps {\n  isDismissed: boolean\n  isLoading: boolean\n  isError: boolean\n  /**\n   * Where is the banner being rendered, which page on GitHub.\n   */\n  location?: BannerLocation | null | undefined\n}\n\nexport const BannerContainer = ({\n  isDismissed,\n  isError,\n  isLoading,\n  children,\n  location,\n}: PropsWithChildren<BannerContainerProps>) => {\n  let containerSx: BetterSystemStyleObject = {}\n  if (isDismissed) {\n    containerSx = dismissedContainerSx\n  } else if (isLoading) {\n    containerSx = merge<BetterSystemStyleObject>(defaultContainerSx, loadingContainerSx)\n  } else if (isError) {\n    containerSx = merge<BetterSystemStyleObject>(defaultContainerSx, errorContainerSx)\n  } else {\n    containerSx = merge<BetterSystemStyleObject>(defaultContainerSx, readyContainerSx)\n  }\n\n  if (location === 'compare') {\n    containerSx = merge<BetterSystemStyleObject>(containerSx, locationCompareContainerSx)\n  } else if (location === 'files_changed') {\n    containerSx = merge<BetterSystemStyleObject>(containerSx, locationFilesChangedContainerSx)\n  } else if (location === 'conversation') {\n    containerSx = merge<BetterSystemStyleObject>(containerSx, locationConversationContainerSx)\n  }\n\n  return (\n    <Box {...testIdProps('copilot-review-banner')} sx={containerSx}>\n      {children}\n    </Box>\n  )\n}\n\ntry{ BannerContainer.displayName ||= 'BannerContainer' } catch {}","import {Link} from '@primer/react'\n\nexport const FeedbackLink = () => (\n  <Link href=\"https://gh.io/copilot-code-reviews-feedback\" target=\"_blank\" sx={{fontSize: '12px', mr: 2}}>\n    Give feedback\n  </Link>\n)\n\ntry{ FeedbackLink.displayName ||= 'FeedbackLink' } catch {}","import {type PropsWithChildren, createContext, useCallback, useContext, useMemo, useState} from 'react'\nimport {verifiedFetch} from '@github-ui/verified-fetch'\n\ninterface AnalyticsContextProps {\n  makeAnalyticsRequest: (method: string, body?: FormData) => void\n  /*\n   * Track when the pre-review banner was displayed.\n   */\n  loadingMessageShownTime: number | undefined\n  /*\n   * Use to record the time the banner rendered a loading message.\n   */\n  markLoadingMessageAsShown: () => void\n}\n\nconst AnalyticsContext = createContext<AnalyticsContextProps | undefined>(undefined)\n\nexport interface AnalyticsProviderProps {\n  analyticsPath: string\n}\n\nexport const AnalyticsProvider = ({analyticsPath, children}: PropsWithChildren<AnalyticsProviderProps>) => {\n  const [loadingMessageShownTime, setLoadingMessageShownTime] = useState<number | undefined>()\n  const markLoadingMessageAsShown = useCallback(() => {\n    if (loadingMessageShownTime === undefined) {\n      setLoadingMessageShownTime(performance.now())\n    }\n  }, [loadingMessageShownTime])\n  const makeAnalyticsRequest = useCallback(\n    async (method: string, formData?: FormData) => {\n      const body = formData ?? new FormData()\n      body.append('_method', method)\n      await verifiedFetch(analyticsPath, {body, method})\n    },\n    [analyticsPath],\n  )\n  const providerData = useMemo(\n    () =>\n      ({\n        makeAnalyticsRequest,\n        loadingMessageShownTime,\n        markLoadingMessageAsShown,\n      }) satisfies AnalyticsContextProps,\n    [makeAnalyticsRequest, loadingMessageShownTime, markLoadingMessageAsShown],\n  )\n  return <AnalyticsContext.Provider value={providerData}>{children}</AnalyticsContext.Provider>\n}\n\nexport const useAnalytics = () => {\n  const context = useContext(AnalyticsContext)\n  if (!context) throw new Error('useAnalytics must be used with AnalyticsProvider.')\n  return context\n}\n\ntry{ AnalyticsContext.displayName ||= 'AnalyticsContext' } catch {}\ntry{ AnalyticsProvider.displayName ||= 'AnalyticsProvider' } catch {}","import {type FormEvent, useCallback} from 'react'\nimport {Button, IconButton, merge, type SxProp, Text} from '@primer/react'\nimport {XIcon} from '@primer/octicons-react'\nimport {useAnalytics} from './AnalyticsContext'\n\ninterface DismissBannerButtonProps {\n  iconButton: boolean\n  isError: boolean\n  onDismiss: () => void\n}\n\nconst errorSx: SxProp['sx'] = {color: 'danger.fg'}\n\nexport const DismissBannerButton = ({iconButton, isError, onDismiss}: DismissBannerButtonProps) => {\n  const {makeAnalyticsRequest} = useAnalytics()\n\n  const handleDismiss = useCallback(\n    (event: FormEvent<HTMLButtonElement>, clickedButton: string) => {\n      event.preventDefault()\n      onDismiss()\n\n      const formData = new FormData()\n      formData.append('button', clickedButton)\n      formData.append('error', isError ? 'true' : 'false')\n      makeAnalyticsRequest('DELETE', formData)\n    },\n    [isError, makeAnalyticsRequest, onDismiss],\n  )\n\n  if (iconButton) {\n    return (\n      // eslint-disable-next-line primer-react/a11y-remove-disable-tooltip\n      <IconButton\n        unsafeDisableTooltip={true}\n        onClick={e => handleDismiss(e, 'X')}\n        icon={XIcon}\n        aria-label=\"Dismiss\"\n        variant=\"invisible\"\n        size=\"small\"\n      />\n    )\n  }\n\n  let textSx: SxProp['sx'] = {p: 0}\n  if (isError) textSx = merge<SxProp['sx']>(textSx, errorSx)\n\n  return (\n    <Button onClick={e => handleDismiss(e, 'DISMISS')} variant=\"invisible\" size=\"small\" sx={{marginLeft: 1}}>\n      <Text sx={textSx}>Dismiss</Text>\n    </Button>\n  )\n}\n\ntry{ DismissBannerButton.displayName ||= 'DismissBannerButton' } catch {}","import {graphql, useLazyLoadQuery} from 'react-relay'\nimport type {\n  useLoadTreeComparisonQuery,\n  useLoadTreeComparisonQuery$data,\n} from './__generated__/useLoadTreeComparisonQuery.graphql'\nimport type {TreeComparisonReference} from '@github-ui/copilot-chat/utils/copilot-chat-types'\n\nconst pullRequestQuery = graphql`\n  query useLoadTreeComparisonQuery($pullRequestId: ID!) {\n    node(id: $pullRequestId) {\n      ... on PullRequest {\n        additions\n        deletions\n        author {\n          login\n        }\n        baseRefOid\n        baseRepository {\n          databaseId\n        }\n        closed\n        headRefOid\n        headRepository {\n          databaseId\n        }\n        isDraft\n      }\n    }\n    viewer {\n      login\n      isCopilotDotcomChatEnabled\n    }\n  }\n`\n\nexport function useLoadTreeComparison(pullRequestId: string) {\n  const apiData = useLazyLoadQuery<useLoadTreeComparisonQuery>(\n    pullRequestQuery,\n    {pullRequestId},\n    {fetchPolicy: 'store-or-network'},\n  )\n  const {node: pullRequest, viewer} = apiData\n  if (!shouldRenderBannerForPullRequest(pullRequest, viewer)) return null\n\n  const baseRepoId = pullRequest?.baseRepository?.databaseId\n  if (typeof baseRepoId !== 'number') return null\n\n  const headRepoId = pullRequest?.headRepository?.databaseId\n  if (typeof headRepoId !== 'number') return null\n\n  return {\n    baseRepoId,\n    baseRevision: pullRequest?.baseRefOid,\n    headRepoId,\n    headRevision: pullRequest?.headRefOid,\n    diffHunks: [],\n  } satisfies Omit<TreeComparisonReference, 'type'>\n}\n\n// Keep this function in sync with logic in the Rails view component\n// PullRequests::Copilot::PullRequestReviewBannerComponent#render?. Logic here in `shouldRenderBannerForPullRequest`\n// affects when the pre-review banner is shown on React'ified pull request pages behind the `prx` feature flag.\n// Logic in the Rails view component affects when the pre-review banner is shown on non-React'ified PR pages.\nfunction shouldRenderBannerForPullRequest(\n  pullRequest: useLoadTreeComparisonQuery$data['node'],\n  viewer: useLoadTreeComparisonQuery$data['viewer'],\n) {\n  return (\n    isOpenDraftPullRequest(pullRequest) &&\n    isViewerThePullRequestAuthor(pullRequest, viewer) &&\n    doesPullRequestHaveAnyChanges(pullRequest) &&\n    viewer?.isCopilotDotcomChatEnabled\n  )\n}\n\n// Only want to show the pre-review banner on open, draft pull requests\nfunction isOpenDraftPullRequest(pullRequest: useLoadTreeComparisonQuery$data['node']) {\n  return pullRequest && !pullRequest.closed && pullRequest.isDraft\n}\n\n// Only want to show the Copilot pre-review banner to the author of the pull request\nfunction isViewerThePullRequestAuthor(\n  pullRequest: useLoadTreeComparisonQuery$data['node'],\n  viewer: useLoadTreeComparisonQuery$data['viewer'],\n) {\n  return viewer && pullRequest && pullRequest.author && viewer.login === pullRequest.author.login\n}\n\n// Copilot won't be able to make any suggestions about an empty diff, so don't show the banner for one\nfunction doesPullRequestHaveAnyChanges(pullRequest: useLoadTreeComparisonQuery$data['node']) {\n  const linesChanged = (pullRequest?.additions ?? 0) + (pullRequest?.deletions ?? 0)\n  return linesChanged > 0\n}\n","import {type PropsWithChildren, useEffect} from 'react'\nimport {useTreeComparison} from './TreeComparisonContext'\nimport {useLoadTreeComparison} from './use-load-tree-comparison'\n\nexport interface PullRequestLoaderProps extends PropsWithChildren {\n  pullRequestId: string\n}\n\nexport const PullRequestLoader = ({children, pullRequestId}: PullRequestLoaderProps) => {\n  const {setTreeComparison} = useTreeComparison()\n  const treeComparison = useLoadTreeComparison(pullRequestId)\n\n  useEffect(() => {\n    if (treeComparison) setTreeComparison(treeComparison)\n  }, [treeComparison, setTreeComparison])\n\n  return <>{children}</>\n}\n\ntry{ PullRequestLoader.displayName ||= 'PullRequestLoader' } catch {}","import {type PropsWithChildren, useCallback, useState} from 'react'\nimport {PullRequestLoader, type PullRequestLoaderProps} from './PullRequestLoader'\nimport {useTreeComparison} from './TreeComparisonContext'\nimport {\n  type UseTreeComparisonWebsocketProps,\n  useTreeComparisonWebsocket,\n  type PullRequestWebsocketData,\n  type BranchWebsocketData,\n} from './use-tree-comparison-websocket'\n\nexport interface WebsocketLoaderProps extends Pick<UseTreeComparisonWebsocketProps, 'signedWebsocketChannel'> {}\n\nexport const WebsocketLoader = ({children, signedWebsocketChannel}: PropsWithChildren<WebsocketLoaderProps>) => {\n  const [pullRequestId, setPullRequestId] = useState<PullRequestLoaderProps['pullRequestId'] | undefined>()\n  const {treeComparison, setTreeComparison} = useTreeComparison()\n\n  const handlePullRequestWebsocketEvent = useCallback((data: PullRequestWebsocketData) => {\n    setPullRequestId(data.gid)\n  }, [])\n\n  const handleBranchWebsocketEvent = useCallback(\n    (data: BranchWebsocketData) => {\n      if (treeComparison && data.before === treeComparison.headRevision) {\n        setTreeComparison({...treeComparison, headRevision: data.after})\n      }\n    },\n    [setTreeComparison, treeComparison],\n  )\n\n  useTreeComparisonWebsocket({signedWebsocketChannel, handlePullRequestWebsocketEvent, handleBranchWebsocketEvent})\n\n  if (pullRequestId !== undefined) {\n    return <PullRequestLoader pullRequestId={pullRequestId}>{children}</PullRequestLoader>\n  }\n\n  return <>{children}</>\n}\n\ntry{ WebsocketLoader.displayName ||= 'WebsocketLoader' } catch {}","import {useAlive} from '@github-ui/use-alive'\nimport {useCallback} from 'react'\n\n// e.g., {\n//   \"timestamp\": 1715183296,\n//   \"wait\": 100,\n//   \"reason\": \"pull request #3 updated\",\n//   \"gid\": \"PR_kwAEAw\"\n// }\nexport interface PullRequestWebsocketData {\n  gid: string\n}\n\n// e.g., {\n//   \"before\": \"5add3a680c397318423053990ce1ee06cce56945\",\n//   \"after\": \"cb32bc4f40a1eee4af5a95f8127d7248931da6a0\",\n//   \"pusher\": \"monalisa\",\n//   \"action\": \"push\",\n//   \"timestamp\": \"2024-05-08T08:18:41.881-07:00\",\n//   \"reason\": \"branch 'example3' was pushed\",\n//   \"wait\": 0\n// }\nexport interface BranchWebsocketData {\n  before: string\n  after: string\n}\n\nexport interface UseTreeComparisonWebsocketProps {\n  /**\n   * The signed Alive websocket channel to listen to for updates that would affect the tree comparison and thus the\n   * review generated by Copilot, e.g., the head ref changing due to new commits being pushed.\n   */\n  signedWebsocketChannel: string\n\n  /**\n   * Handler when a pull request websocket has a new event.\n   * @param data the data from the websocket event\n   */\n  handlePullRequestWebsocketEvent?: (data: PullRequestWebsocketData) => void\n\n  /**\n   * Handler when a branch websocket has a new event.\n   * @param data the data from the websocket event\n   */\n  handleBranchWebsocketEvent?: (data: BranchWebsocketData) => void\n}\n\nexport function useTreeComparisonWebsocket({\n  signedWebsocketChannel,\n  handlePullRequestWebsocketEvent,\n  handleBranchWebsocketEvent,\n}: UseTreeComparisonWebsocketProps) {\n  const websocketCallback = useCallback(\n    (data: PullRequestWebsocketData | BranchWebsocketData) => {\n      if ('gid' in data) {\n        if (handlePullRequestWebsocketEvent) handlePullRequestWebsocketEvent(data)\n      } else if ('after' in data && 'before' in data) {\n        if (handleBranchWebsocketEvent) handleBranchWebsocketEvent(data)\n      }\n    },\n    [handleBranchWebsocketEvent, handlePullRequestWebsocketEvent],\n  )\n\n  useAlive(signedWebsocketChannel, websocketCallback)\n}\n","import {Text} from '@primer/react'\nimport {DismissBannerButton} from './DismissBannerButton'\n\ninterface ErrorMessageProps {\n  onDismiss: () => void\n}\n\nexport const ErrorMessage = ({onDismiss}: ErrorMessageProps) => {\n  return (\n    <>\n      <Text sx={{color: 'fg.default'}}>\n        <Text sx={{fontWeight: 500}}>Copilot</Text> had trouble creating a review for this pull request\n      </Text>\n      <DismissBannerButton isError iconButton={false} onDismiss={onDismiss} />\n    </>\n  )\n}\n\ntry{ ErrorMessage.displayName ||= 'ErrorMessage' } catch {}","import {useEffect} from 'react'\nimport {Text} from '@primer/react'\nimport {useAnalytics} from './AnalyticsContext'\n\nexport const LoadingMessage = () => {\n  const {markLoadingMessageAsShown} = useAnalytics()\n\n  useEffect(() => markLoadingMessageAsShown(), [markLoadingMessageAsShown])\n\n  return (\n    <Text sx={{color: 'fg.muted'}}>\n      <Text sx={{color: 'fg.default', fontWeight: 500}}>Copilot</Text> is analyzing the changes in this pull request…\n    </Text>\n  )\n}\n\ntry{ LoadingMessage.displayName ||= 'LoadingMessage' } catch {}","import {useCallback, useEffect} from 'react'\nimport {CopilotChatIntents} from '@github-ui/copilot-chat/utils/copilot-chat-types'\nimport {publishOpenCopilotChat} from '@github-ui/copilot-chat/utils/copilot-chat-events'\nimport {Button, Text} from '@primer/react'\nimport {useTreeComparison} from './TreeComparisonContext'\nimport {useAnalytics} from './AnalyticsContext'\nimport {useReviewCompletionData} from './ReviewCompletionDataContext'\nimport {useReviewThread} from './ReviewThreadContext'\nimport {reviewUserMessage} from '@github-ui/copilot-chat/utils/constants'\nimport {DismissBannerButton} from './DismissBannerButton'\n\ninterface ReadyMessageProps {\n  onDismiss: () => void\n}\n\nexport const ReadyMessage = ({onDismiss}: ReadyMessageProps) => {\n  const {completionData} = useReviewCompletionData()\n  return completionData?.hasDiffHunks ? <HasReviewMessage /> : <NoChangesMessage onDismiss={onDismiss} />\n}\n\nconst HasReviewMessage = () => {\n  const {makeAnalyticsRequest, loadingMessageShownTime} = useAnalytics()\n  const {treeComparison: reference} = useTreeComparison()\n  const roundTripBannerLoadTimeMs =\n    loadingMessageShownTime === undefined ? undefined : Math.round(performance.now() - loadingMessageShownTime)\n  const {completionData} = useReviewCompletionData()\n  const {reviewThread} = useReviewThread()\n\n  const handleShowInChat = useCallback(() => {\n    if (reference === undefined || completionData?.message === undefined || reviewThread === undefined) return\n\n    publishOpenCopilotChat({\n      content: reviewUserMessage,\n      intent: CopilotChatIntents.reviewPr,\n      references: [reference],\n      completion: completionData.message,\n      thread: reviewThread,\n    })\n\n    const formData = new FormData()\n    if (roundTripBannerLoadTimeMs !== undefined) {\n      formData.append('round_trip_time_ms', String(roundTripBannerLoadTimeMs))\n    }\n    makeAnalyticsRequest('POST', formData)\n  }, [makeAnalyticsRequest, reference, reviewThread, completionData, roundTripBannerLoadTimeMs])\n\n  useEffect(() => {\n    handleShowInChat()\n  }, [handleShowInChat])\n\n  return (\n    <>\n      <Text sx={{color: 'fg.muted'}}>\n        <Text sx={{color: 'fg.default', fontWeight: 500}}>Copilot</Text> has found some possible improvements\n      </Text>\n      <Button variant=\"invisible\" size=\"small\" sx={{marginLeft: 1}} onClick={handleShowInChat}>\n        Show in Chat\n      </Button>\n    </>\n  )\n}\n\nconst NoChangesMessage = ({onDismiss}: ReadyMessageProps) => (\n  <>\n    <Text sx={{color: 'fg.default'}}>\n      <Text sx={{fontWeight: 500}}>Copilot</Text> found no suggestions for this pull request\n    </Text>\n    <DismissBannerButton iconButton={false} onDismiss={onDismiss} isError={false} />\n  </>\n)\n\ntry{ ReadyMessage.displayName ||= 'ReadyMessage' } catch {}\ntry{ HasReviewMessage.displayName ||= 'HasReviewMessage' } catch {}\ntry{ NoChangesMessage.displayName ||= 'NoChangesMessage' } catch {}","import {Button, Text} from '@primer/react'\n\ninterface RequestReviewMessageProps {\n  onRequestReview: () => void\n}\n\nexport const RequestReviewMessage = ({onRequestReview}: RequestReviewMessageProps) => (\n  <>\n    <Text sx={{color: 'fg.default'}}>\n      <Text sx={{fontWeight: 500}}>Copilot</Text> can help you review this pull request\n    </Text>\n    <Button variant=\"invisible\" size=\"small\" sx={{marginLeft: 1}} onClick={onRequestReview}>\n      <Text sx={{fontWeight: 500}}>Ask Copilot to review</Text>\n    </Button>\n  </>\n)\n\ntry{ RequestReviewMessage.displayName ||= 'RequestReviewMessage' } catch {}","import {ErrorMessage} from './ErrorMessage'\nimport {LoadingMessage} from './LoadingMessage'\nimport {ReadyMessage} from './ReadyMessage'\nimport {RequestReviewMessage} from './RequestReviewMessage'\n\nexport interface BannerContentProps {\n  isReviewRequested: boolean\n  isError: boolean\n  isLoading: boolean\n  handleDismiss: () => void\n  handleRequestReview: () => void\n}\n\nexport const BannerMessage = ({\n  isLoading,\n  isError,\n  isReviewRequested,\n  handleDismiss,\n  handleRequestReview,\n}: BannerContentProps) => {\n  if (!isReviewRequested) return <RequestReviewMessage onRequestReview={handleRequestReview} />\n  if (isError) return <ErrorMessage onDismiss={handleDismiss} />\n  if (!isLoading) return <ReadyMessage onDismiss={handleDismiss} />\n  return <LoadingMessage />\n}\n\ntry{ BannerMessage.displayName ||= 'BannerMessage' } catch {}","import {useCallback, useState} from 'react'\nimport {useLoadReviewCompletion} from './use-load-review-completion'\nimport {Box, Label} from '@primer/react'\nimport {CopilotBadge} from './CopilotBadge'\nimport {BannerContainer, type BannerContainerProps} from './BannerContainer'\nimport {FeedbackLink} from './FeedbackLink'\nimport {DismissBannerButton} from './DismissBannerButton'\nimport {RelayEnvironmentProvider, type Environment} from 'react-relay'\nimport {TreeComparisonProvider, type TreeComparisonProviderProps, useTreeComparison} from './TreeComparisonContext'\nimport {PullRequestLoader, type PullRequestLoaderProps} from './PullRequestLoader'\nimport {WebsocketLoader, type WebsocketLoaderProps} from './WebsocketLoader'\nimport {relayEnvironmentWithMissingFieldHandlerForNode} from '@github-ui/relay-environment'\nimport {isFeatureEnabled} from '@github-ui/feature-flags'\nimport {type AnalyticsProviderProps, AnalyticsProvider} from './AnalyticsContext'\nimport {type CopilotChatServiceProviderProps, CopilotChatServiceProvider} from './CopilotChatServiceContext'\nimport {ReviewCompletionDataProvider} from './ReviewCompletionDataContext'\nimport {ReviewThreadProvider} from './ReviewThreadContext'\nimport {type ThreadNameProviderProps, ThreadNameProvider} from './ThreadNameContext'\nimport {BannerMessage} from './BannerMessage'\n\nconst defaultEnvironment = relayEnvironmentWithMissingFieldHandlerForNode()\n\ninterface InnerProps extends Pick<BannerContainerProps, 'location'> {}\n\nexport const InnerComponent = ({location}: InnerProps) => {\n  const [isDismissed, setIsDismissed] = useState(false)\n  const [isReviewRequested, setIsReviewRequested] = useState(false)\n  const {treeComparison} = useTreeComparison()\n  const {isLoading, isError} = useLoadReviewCompletion({isDismissed, isReviewRequested})\n  const handleDismiss = useCallback(() => setIsDismissed(true), [setIsDismissed])\n  const handleRequestReview = useCallback(() => setIsReviewRequested(true), [setIsReviewRequested])\n\n  // No commit shas + repository IDs or pull request ID was given, or the given pull request ID was for a pull\n  // request that we don't want to show a Copilot pre-review for\n  if (treeComparison === undefined) return null\n\n  return (\n    <BannerContainer location={location} isLoading={isLoading} isError={isError} isDismissed={isDismissed}>\n      <CopilotBadge isLoading={isLoading} isError={isError} />\n      <Box sx={{display: 'flex', alignItems: 'center', fontSize: 0, paddingLeft: 1}}>\n        <BannerMessage\n          isReviewRequested={isReviewRequested}\n          isError={isError}\n          isLoading={isLoading}\n          handleDismiss={handleDismiss}\n          handleRequestReview={handleRequestReview}\n        />\n      </Box>\n      <Box sx={{display: 'flex', flexGrow: 1, justifyContent: 'flex-end'}}>\n        <Box sx={{mt: 1}}>\n          <Label variant=\"secondary\" sx={{mr: 2}}>\n            Alpha\n          </Label>\n          <FeedbackLink />\n        </Box>\n        <DismissBannerButton isError={isError} iconButton onDismiss={handleDismiss} />\n      </Box>\n    </BannerContainer>\n  )\n}\n\ninterface ProviderStackProps\n  extends TreeComparisonProviderProps,\n    AnalyticsProviderProps,\n    WebsocketLoaderProps,\n    CopilotChatServiceProviderProps,\n    ThreadNameProviderProps {\n  pullRequestId?: PullRequestLoaderProps['pullRequestId'] | null | undefined\n  environment: Environment\n}\n\nexport const ProviderStack = ({\n  analyticsPath,\n  children,\n  environment,\n  pullRequestId,\n  signedWebsocketChannel,\n  apiURL,\n  ssoOrganizations,\n  chatService,\n  threadName,\n  ...treeComparisonProviderProps\n}: ProviderStackProps) => (\n  <RelayEnvironmentProvider environment={environment}>\n    <AnalyticsProvider analyticsPath={analyticsPath}>\n      <CopilotChatServiceProvider ssoOrganizations={ssoOrganizations} apiURL={apiURL} chatService={chatService}>\n        <ReviewCompletionDataProvider>\n          <ThreadNameProvider threadName={threadName}>\n            <TreeComparisonProvider {...treeComparisonProviderProps}>\n              <ReviewThreadProvider>\n                <WebsocketLoader signedWebsocketChannel={signedWebsocketChannel}>\n                  {typeof pullRequestId === 'string' && pullRequestId.length > 0 ? (\n                    <PullRequestLoader pullRequestId={pullRequestId}>{children}</PullRequestLoader>\n                  ) : (\n                    children\n                  )}\n                </WebsocketLoader>\n              </ReviewThreadProvider>\n            </TreeComparisonProvider>\n          </ThreadNameProvider>\n        </ReviewCompletionDataProvider>\n      </CopilotChatServiceProvider>\n    </AnalyticsProvider>\n  </RelayEnvironmentProvider>\n)\n\nexport interface CopilotPrReviewBannerProps\n  extends InnerProps,\n    Omit<TreeComparisonProviderProps, 'children'>,\n    Omit<ProviderStackProps, 'environment'> {\n  environment?: Environment\n}\n\nexport function CopilotPrReviewBanner({environment, location, ...providerStackProps}: CopilotPrReviewBannerProps) {\n  if (!isFeatureEnabled('copilot_reviews')) return null\n  return (\n    <ProviderStack {...providerStackProps} environment={environment ?? defaultEnvironment}>\n      <InnerComponent location={location} />\n    </ProviderStack>\n  )\n}\n\ntry{ InnerComponent.displayName ||= 'InnerComponent' } catch {}\ntry{ ProviderStack.displayName ||= 'ProviderStack' } catch {}\ntry{ CopilotPrReviewBanner.displayName ||= 'CopilotPrReviewBanner' } catch {}"],"names":["AuthToken","authorizationHeaderValue","value","needsRefreshing","ssoOrgIds","isExpired","ssoChanged","expirationDateString","Date","expiration","expirationDate","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","now","ssoOrgIDs","every","org","includes","fromResult","result","orgIds","token","serialize","deserialize","serialized","constructor","COPILOT_AUTH_TOKEN_KEY","CopilotAuthTokenProvider","getAuthToken","getLocalStorageAuthToken","validateAuthToken","fetchAuthToken","setLocalStorageAuthToken","copilotLocalStorage","setItem","JSON","stringify","getItem","parse","currentAuthTokenRequest","_fetchAuthToken","response","verifiedFetchJSON","method","ok","json","safeStorage","throwQuotaErrorsOnSet","ttl","copilotChatTextAreaId","copilotChatSearchInputId","reviewUserMessage","OpenCopilotChatEvent","Event","payload","bubbles","cancelable","AddCopilotChatReferenceEvent","reference","openPanel","id","SymbolChangedEvent","context","publishOpenCopilotChat","window","dispatchEvent","publishAddCopilotChatReference","subscribeOpenCopilotChat","listener","addEventListener","removeEventListener","subscribeAddCopilotChatReference","subscribeSearchCopilot","subscribeSymbolChanged","ApiCache","get","params","key","join","separator","cached","cache","promise","fetchFn","set","delete","Map","HYDRATABLE_REFERENCE_TYPES","Set","ERRORS","CopilotChatService","fetchThreads","queryParams","URLSearchParams","name","pathWithParams","toString","res","makeCAPIRequest","threads","status","createThread","thread","deleteThread","threadID","renameThread","newName","generate","clearThread","generateThreadName","listMessages","listMessagesCache","createMessage","content","intent","references","customInstructions","undefined","currentURL","location","href","message","createMessageStreaming","confirmations","knowledgeBases","body","streaming","sendFeedback","feedback","feedbackChoice","messageId","threadId","textResponse","makeDotcomRequest","urlPathPrefix","feedback_choice","message_id","thread_id","text_response","listDocsets","fetchDocsetsResponse","listAdministratedCopilotEnterpriseOrganizations","administratedCopilotEnterpriseOrganizations","docsetsPromise","docsetRequestPromise","deleteDocset","docset","listRepoFiles","repo","path","treeListPath","commitOid","commitOID","includeDirectories","repoFilesCache","querySymbols","query","querySymbolsCache","ownerLogin","fetchImplicitContext","url","owner","encodeURIComponent","fetchRepo","repoID","repoDetailsCache","has","listAgents","agentsPath","error","ERROR_MSG","hydrateReference","type","fetchLanguageForFileReference","repoOwner","repoName","btoa","fetchPath","blobDetectLanguage","generateSuggestions","currentUrl","headers","exp","getCopilotExperiments","components","split","replaceAll","length","copilotAuthTokenProvider","directConnectConfiguration","integrationID","streamingResponse","basePath","baseURL","apiURL","Authorization","fetch","mode","ssoOrgs","listRepoFilesImpl","paths","querySymbolsImpl","suggestions","filter","suggestion","kind","map","TREE_COMPARISON_REFERENCE_TYPE","CopilotChatIntents","explain","conversation","suggest","askDocs","discussFileDiff","explainFileDiff","reviewPr","MESSAGE_STREAMING_ERROR_TYPES","SUPPORTED_FUNCTIONS","experimentsLocalStorageKey","experiments","setCopilotExperiments","node","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","hash","CopilotBadge","props","isLoading","isError","hasUnreadMessages","zIndex","fill","bg","borderColor","customIcon","Box","sx","borderRadius","position","width","height","display","alignItems","justifyContent","border","color","flexShrink","Spinner","size","className","left","top","CopilotIcon","bottom","right","transform","AlertFillIcon","displayName","TreeComparisonContext","createContext","TreeComparisonProvider","children","treeComparison","setTreeComparison","useState","baseRepoId","baseRevision","headRepoId","headRevision","providerData","useMemo","haveTreeComparison","diffHunks","Provider","useTreeComparison","useContext","CopilotChatServiceContext","CopilotChatServiceProvider","chatServiceData","setChatServiceData","ssoOrganizations","chatService","useCopilotChatService","ReviewCompletionDataContext","ReviewCompletionDataProvider","completionData","setCompletionData","hasDiffHunks","providerProps","useReviewCompletionData","ReviewThreadContext","ReviewThreadProvider","reviewThread","setReviewThread","useReviewThread","ThreadNameContext","ThreadNameProvider","threadName","setThreadName","useThreadName","reviewCompletionReducer","state","action","promiseWithTimeout","ms","timeoutError","Promise","race","_","reject","setTimeout","threadContainsDiffHunks","messages","some","role","toLowerCase","ref","DefaultCopilotBadge","dismissedContainerSx","defaultContainerSx","gap","borderStyle","borderWidth","p","locationFilesChangedContainerSx","mb","locationCompareContainerSx","my","locationConversationContainerSx","mt","loadingContainerSx","backgroundColor","errorContainerSx","readyContainerSx","BannerContainer","isDismissed","containerSx","merge","testIdProps","FeedbackLink","Link","target","fontSize","mr","AnalyticsContext","AnalyticsProvider","analyticsPath","loadingMessageShownTime","setLoadingMessageShownTime","markLoadingMessageAsShown","useCallback","performance","makeAnalyticsRequest","formData","FormData","append","verifiedFetch","useAnalytics","errorSx","DismissBannerButton","iconButton","onDismiss","handleDismiss","event","clickedButton","preventDefault","IconButton","unsafeDisableTooltip","onClick","e","icon","XIcon","aria-label","variant","textSx","Button","marginLeft","Text","pullRequestQuery","PullRequestLoader","pullRequestId","useLoadTreeComparison","pullRequest","viewer","useLazyLoadQuery","fetchPolicy","isOpenDraftPullRequest","closed","isDraft","author","login","linesChanged","additions","deletions","isCopilotDotcomChatEnabled","baseRepository","databaseId","headRepository","baseRefOid","headRefOid","useEffect","WebsocketLoader","signedWebsocketChannel","setPullRequestId","useTreeComparisonWebsocket","handlePullRequestWebsocketEvent","handleBranchWebsocketEvent","websocketCallback","data","useAlive","gid","before","after","ErrorMessage","fontWeight","LoadingMessage","ReadyMessage","HasReviewMessage","NoChangesMessage","roundTripBannerLoadTimeMs","Math","round","handleShowInChat","completion","String","RequestReviewMessage","onRequestReview","BannerMessage","isReviewRequested","handleRequestReview","defaultEnvironment","relayEnvironmentWithMissingFieldHandlerForNode","InnerComponent","setIsDismissed","setIsReviewRequested","useLoadReviewCompletion","completionState","dispatch","useReducer","isLoadingRef","useRef","checkIfThreadExists","threadsResponse","latestThread","messagesResponse","latestMessage","createReviewThread","threadResponse","messageResponse","listMessagesResponse","current","getCompletion","paddingLeft","flexGrow","Label","ProviderStack","environment","treeComparisonProviderProps","RelayEnvironmentProvider","CopilotPrReviewBanner","providerStackProps","isFeatureEnabled"],"sourceRoot":""}
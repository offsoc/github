# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `notifyd-client` gem.
# Please instead update this file by running `bin/tapioca gem notifyd-client`.

# typed: true
# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Notifyd::Client`.
# Please instead update this file by running `bin/tapioca dsl Notifyd::Client`.

# This is an autogenerated file for dynamic methods in `Notifyd::Proto::DeviceTokensClient`.
# Please instead update this file by running `bin/tapioca dsl Notifyd::Proto::DeviceTokensClient`.
# This is an autogenerated file for dynamic methods in `Notifyd::Proto::DeviceTokensV2::DeviceTokensV2Client`.
# Please instead update this file by running `bin/tapioca dsl Notifyd::Proto::DeviceTokensV2::DeviceTokensV2Client`.
# This is an autogenerated file for dynamic methods in `Notifyd::Proto::Maintenance::MaintenanceClient`.
# Please instead update this file by running `bin/tapioca dsl Notifyd::Proto::Maintenance::MaintenanceClient`.
# This is an autogenerated file for dynamic methods in `Notifyd::Proto::Newsies::NewsiesClient`.
# Please instead update this file by running `bin/tapioca dsl Notifyd::Proto::Newsies::NewsiesClient`.
# This is an autogenerated file for dynamic methods in `Notifyd::Proto::RoutingSettings::RoutingSettingsClient`.
# Please instead update this file by running `bin/tapioca dsl Notifyd::Proto::RoutingSettings::RoutingSettingsClient`.
# This is an autogenerated file for dynamic methods in `Notifyd::Proto::Subscriptions::SubscriptionsClient`.
# Please instead update this file by running `bin/tapioca dsl Notifyd::Proto::Subscriptions::SubscriptionsClient`.
# This is an autogenerated file for dynamic methods in `Notifyd::Proto::Test::TestClient`.
# Please instead update this file by running `bin/tapioca dsl Notifyd::Proto::Test::TestClient`.

module Google::Protobuf::MessageExts::ClassMethods; end

# source://notifyd-client//lib/notifyd/proto/layouts/email/layouts_pb.rb#41
module Notifyd; end

# Set an adapter in the Faraday connection
# This adapter has to be used as the last in the plug chain
#
# source://notifyd-client//lib/notifyd/adapter_plug.rb#9
class Notifyd::AdapterPlug
  include ::Notifyd::Plug

  # @return [AdapterPlug] a new instance of AdapterPlug
  #
  # source://notifyd-client//lib/notifyd/adapter_plug.rb#14
  def initialize(key, args, block); end

  # Returns the value of attribute args.
  #
  # source://notifyd-client//lib/notifyd/adapter_plug.rb#12
  def args; end

  # Returns the value of attribute block.
  #
  # source://notifyd-client//lib/notifyd/adapter_plug.rb#12
  def block; end

  # source://notifyd-client//lib/notifyd/adapter_plug.rb#20
  def inject(conn); end

  # Returns the value of attribute key.
  #
  # source://notifyd-client//lib/notifyd/adapter_plug.rb#12
  def key; end
end

# The Builder setups a given Faraday::Connection with a set of plugs.
# It also exposes the connection so any client can add their own Faraday
# middlewares.
#
# source://notifyd-client//lib/notifyd/builder.rb#12
class Notifyd::Builder
  # @return [Builder] a new instance of Builder
  #
  # source://notifyd-client//lib/notifyd/builder.rb#15
  sig { params(conn: Faraday::Connection).void }
  def initialize(conn:); end

  # source://notifyd-client//lib/notifyd/builder.rb#41
  def build; end

  # Returns the value of attribute conn.
  #
  # source://notifyd-client//lib/notifyd/builder.rb#13
  sig { returns(Faraday::Connection) }
  def conn; end

  # Returns the value of attribute plugs.
  #
  # source://notifyd-client//lib/notifyd/builder.rb#13
  def plugs; end

  # Use a given plug
  #
  # source://notifyd-client//lib/notifyd/builder.rb#37
  def use(plug); end

  # Use AdapterPlug
  #
  # source://notifyd-client//lib/notifyd/builder.rb#32
  sig { params(key: T.any(Symbol, String), args: T.untyped, block: T.nilable(T.proc.void)).void }
  def use_adapter(key, *args, &block); end

  # Use HMACAuthPlug
  #
  # source://notifyd-client//lib/notifyd/builder.rb#27
  sig { params(key: String).void }
  def use_hmac_auth(key:); end

  # Use RetryPlug
  #
  # source://notifyd-client//lib/notifyd/builder.rb#22
  sig { params(stats: T.untyped).void }
  def use_retry(stats: T.unsafe(nil)); end
end

# source://notifyd-client//lib/notifyd/client.rb#10
class Notifyd::Client
  # Initialize a new Notifyd client
  # Provide a url and hmac_key to use the default faraday config
  # You can then further modify this connection through a block yielding a Notifyd::Builder
  #
  # @example:
  #   client = Notifyd::Client.new(url: "https://notifyd", hmac_key: "abc") do |build|
  #     build.use_retry stats: DogStats.new
  #     build.conn.use SomeMiddleware
  #   end
  #
  # To provide your own faraday connection (which must do its own hmac signing) use the method
  # .with_conn
  #
  # This object is essentially a collection of clients for each twirp API service
  # Twirp API clients usually follow the following name convention:
  #
  #   Notifyd::Proto::Subscriptions::SubscriptionsClient
  #
  # Given this convention, it's possible to access a client by using the namespace
  # (i.e Subscriptions) in underscore form as a method name
  #
  #   client.subscriptions #=> #<Notifyd::Proto::Subscriptions::SubscriptionsClient>
  #
  # This client instance is built automatically following the name convention
  #
  # NOTE: If a client has a different name, define a specific method for it
  #
  # @return [Client] a new instance of Client
  #
  # source://notifyd-client//lib/notifyd/client.rb#50
  sig { params(url: String, hmac_key: String, block: T.nilable(T.proc.params(arg0: Notifyd::Builder).void)).void }
  def initialize(url:, hmac_key:, &block); end

  # source://notifyd-client//lib/notifyd/client.rb#71
  sig { returns(Notifyd::Proto::DeviceTokensClient) }
  def device_tokens; end

  sig { returns(Notifyd::Proto::DeviceTokensV2::DeviceTokensV2Client) }
  def device_tokens_v2; end

  sig { returns(Notifyd::Proto::Maintenance::MaintenanceClient) }
  def maintenance; end

  # Automatically build clients that follow the name convention:
  # Notifyd::Proto::Namespace::NamespaceClient
  #
  # Where Namespace can be: Subscriptions, RoutingSettings or any other service
  #
  # Example:
  #   client.subscriptions
  #   #=> #<Notifyd::Proto::Subscriptions::SubscriptionsClient>
  #   client.routing_settings
  #   #=> #<Notifyd::Proto::RoutingSettings::RoutingSettingsClient>
  #
  # source://notifyd-client//lib/notifyd/client.rb#85
  def method_missing(symbol, *args, &block); end

  sig { returns(Notifyd::Proto::Newsies::NewsiesClient) }
  def newsies; end

  sig { returns(Notifyd::Proto::RoutingSettings::RoutingSettingsClient) }
  def routing_settings; end

  sig { returns(Notifyd::Proto::Subscriptions::SubscriptionsClient) }
  def subscriptions; end

  sig { returns(Notifyd::Proto::Test::TestClient) }
  def test; end

  private

  # source://notifyd-client//lib/notifyd/client.rb#108
  def after_initialize; end

  # source://notifyd-client//lib/notifyd/client.rb#112
  def append_twirp_to_url(base_url); end

  # source://notifyd-client//lib/notifyd/client.rb#137
  def client_builder(name); end

  # @return [Boolean]
  #
  # source://notifyd-client//lib/notifyd/client.rb#133
  def client_exists?(name); end

  # Clients are usually namespaced and suffixed with Client
  # They live inside the Notifyd::Proto module
  #
  # Example: routing_settings => RoutingSettings::RoutingSettingsClient
  #
  # source://notifyd-client//lib/notifyd/client.rb#127
  def client_name(symbol); end

  # Returns the value of attribute connection.
  #
  # source://notifyd-client//lib/notifyd/client.rb#106
  def connection; end

  # @return [Boolean]
  #
  # source://notifyd-client//lib/notifyd/client.rb#119
  def has_mark?(symbol); end

  # @return [Boolean]
  #
  # source://notifyd-client//lib/notifyd/client.rb#96
  def respond_to_missing?(symbol, *_arg1); end

  class << self
    # Initialize a new client using the provided Faraday::Connection
    # This connection must do it's own HMAC signing
    #
    # source://notifyd-client//lib/notifyd/client.rb#16
    def with_conn(conn); end
  end
end

# Set a timeout of 5 seconds - same as timeout for Notifyd API
#
# source://notifyd-client//lib/notifyd/client.rb#12
Notifyd::Client::CLIENT_TIMEOUT_IN_SECONDS = T.let(T.unsafe(nil), Integer)

# Faraday middleware that inserts an HMAC Authentication header into requests.
# Copied from https://github.com/github/github/blob/c644054df984b64bde6d4ceebd3821458db8bf0e/lib/github/faraday_middleware.rb
#
# source://notifyd-client//lib/notifyd/hmac_auth_middleware.rb#10
class Notifyd::HMACAuthMiddleware < ::Faraday::Middleware
  # Public: Initialize the middleware with an HMAC key
  #
  # app      - The faraday application/middlewares stack.
  # hmac_key - String HMAC secret key.
  # hmac_header - (Optional) String HTTP header to send the HMAC token in.
  #
  # @return [HMACAuthMiddleware] a new instance of HMACAuthMiddleware
  #
  # source://notifyd-client//lib/notifyd/hmac_auth_middleware.rb#18
  def initialize(app, options = T.unsafe(nil)); end

  # source://notifyd-client//lib/notifyd/hmac_auth_middleware.rb#24
  def call(env); end

  private

  # source://notifyd-client//lib/notifyd/hmac_auth_middleware.rb#31
  def hmac_token; end
end

# source://notifyd-client//lib/notifyd/hmac_auth_middleware.rb#11
Notifyd::HMACAuthMiddleware::HMAC_AUTH_HEADER = T.let(T.unsafe(nil), String)

# The HMACAuthPlug ensures that the Faraday::Connection uses HMAC Auth in every request
#
# @see HMACAuthMiddleware
#
# source://notifyd-client//lib/notifyd/hmac_auth_plug.rb#10
class Notifyd::HMACAuthPlug
  include ::Notifyd::Plug

  # @return [HMACAuthPlug] a new instance of HMACAuthPlug
  #
  # source://notifyd-client//lib/notifyd/hmac_auth_plug.rb#15
  def initialize(key:); end

  # source://notifyd-client//lib/notifyd/hmac_auth_plug.rb#19
  def inject(conn); end

  # Returns the value of attribute key.
  #
  # source://notifyd-client//lib/notifyd/hmac_auth_plug.rb#13
  def key; end
end

# A plug is an object that modifies a given Faraday::Connection
#
# source://notifyd-client//lib/notifyd/plug.rb#6
module Notifyd::Plug
  include ::Kernel

  # Every Plug has to implement the #inject method
  #
  # @raise [NotImplementedError]
  #
  # source://notifyd-client//lib/notifyd/plug.rb#10
  def inject(conn); end
end

# source://notifyd-client//lib/notifyd/proto/layouts/email/layouts_pb.rb#42
module Notifyd::Proto; end

class Notifyd::Proto::DeviceToken
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/services/devicetokens/service_twirp.rb#14
class Notifyd::Proto::DeviceTokensClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_device_tokens(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def replace_device_tokens(input, req_opts = T.unsafe(nil)); end
end

# source://notifyd-client//lib/notifyd/proto/services/devicetokens/service_twirp.rb#7
class Notifyd::Proto::DeviceTokensService < ::Twirp::Service; end

# source://notifyd-client//lib/notifyd/proto/services/devicetokens/v2/service_pb.rb#28
module Notifyd::Proto::DeviceTokensV2; end

class Notifyd::Proto::DeviceTokensV2::DeleteAllRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::DeviceTokensV2::DeleteRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/services/devicetokens/v2/service_twirp.rb#16
class Notifyd::Proto::DeviceTokensV2::DeviceTokensV2Client < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def delete(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def delete_all(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def set(input, req_opts = T.unsafe(nil)); end
end

# source://notifyd-client//lib/notifyd/proto/services/devicetokens/v2/service_twirp.rb#8
class Notifyd::Proto::DeviceTokensV2::DeviceTokensV2Service < ::Twirp::Service; end

class Notifyd::Proto::DeviceTokensV2::SetRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::GetRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::GetResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/layouts/email/layouts_pb.rb#43
module Notifyd::Proto::Layouts; end

# source://notifyd-client//lib/notifyd/proto/layouts/email/layouts_pb.rb#44
module Notifyd::Proto::Layouts::Email; end

class Notifyd::Proto::Layouts::Email::Basic
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Layouts::Email::From
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Layouts::Email::Part
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Layouts::Email::Raw
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Layouts::Email::UnsubscribeUrlTemplates
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/layouts/mobile/layouts_pb.rb#26
module Notifyd::Proto::Layouts::Mobile; end

class Notifyd::Proto::Layouts::Mobile::Basic
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/services/maintenance/service_pb.rb#29
module Notifyd::Proto::Maintenance; end

class Notifyd::Proto::Maintenance::DeleteRepositoryForUsersRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Maintenance::DeleteRepositoryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Maintenance::DeleteUserRepositoriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Maintenance::DeleteUserRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/services/maintenance/service_twirp.rb#17
class Notifyd::Proto::Maintenance::MaintenanceClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def delete_repository(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def delete_repository_for_users(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def delete_user(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def delete_user_repositories(input, req_opts = T.unsafe(nil)); end
end

# source://notifyd-client//lib/notifyd/proto/services/maintenance/service_twirp.rb#8
class Notifyd::Proto::Maintenance::MaintenanceService < ::Twirp::Service; end

# source://notifyd-client//lib/notifyd/proto/services/newsies/service_pb.rb#67
module Notifyd::Proto::Newsies; end

class Notifyd::Proto::Newsies::CustomField
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Newsies::IgnoreRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Newsies::IgnoreResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/services/newsies/service_twirp.rb#17
class Notifyd::Proto::Newsies::NewsiesClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def ignore(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def unwatch(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def unwatch_all(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def watch(input, req_opts = T.unsafe(nil)); end
end

# source://notifyd-client//lib/notifyd/proto/services/newsies/service_twirp.rb#8
class Notifyd::Proto::Newsies::NewsiesService < ::Twirp::Service; end

module Notifyd::Proto::Newsies::ThreadTypes
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/services/newsies/service_pb.rb#77
Notifyd::Proto::Newsies::ThreadTypes::DISCUSSION = T.let(T.unsafe(nil), Integer)

# source://notifyd-client//lib/notifyd/proto/services/newsies/service_pb.rb#77
Notifyd::Proto::Newsies::ThreadTypes::ISSUE = T.let(T.unsafe(nil), Integer)

# source://notifyd-client//lib/notifyd/proto/services/newsies/service_pb.rb#77
Notifyd::Proto::Newsies::ThreadTypes::PULL_REQUEST = T.let(T.unsafe(nil), Integer)

# source://notifyd-client//lib/notifyd/proto/services/newsies/service_pb.rb#77
Notifyd::Proto::Newsies::ThreadTypes::RELEASE = T.let(T.unsafe(nil), Integer)

# source://notifyd-client//lib/notifyd/proto/services/newsies/service_pb.rb#77
Notifyd::Proto::Newsies::ThreadTypes::SECURITY_ALERT = T.let(T.unsafe(nil), Integer)

class Notifyd::Proto::Newsies::UnwatchAllRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Newsies::UnwatchAllResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Newsies::UnwatchRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Newsies::UnwatchResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Newsies::WatchRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Newsies::WatchResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::ReplaceDeviceTokensRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/services/routingsettings/service_pb.rb#100
module Notifyd::Proto::RoutingSettings; end

class Notifyd::Proto::RoutingSettings::BatchCreateAndDeleteRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::BatchCreateAndDeleteResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::BatchGetRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::BatchReplaceRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::BatchReplaceResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::Channel
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::CreateRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::CustomField
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::DeleteRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::Filter
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::GetRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::GetResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::MatchRule
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::Page
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::Pages
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::RoutingSetting
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/services/routingsettings/service_twirp.rb#17
class Notifyd::Proto::RoutingSettings::RoutingSettingsClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def batch_create_and_delete(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def batch_get(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def batch_replace(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get(input, req_opts = T.unsafe(nil)); end
end

# source://notifyd-client//lib/notifyd/proto/services/routingsettings/service_twirp.rb#8
class Notifyd::Proto::RoutingSettings::RoutingSettingsService < ::Twirp::Service; end

class Notifyd::Proto::RoutingSettings::Setting
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::RoutingSettings::Topic
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/services/subscriptions/service_pb.rb#87
module Notifyd::Proto::Subscriptions; end

class Notifyd::Proto::Subscriptions::BatchCreateAndDeleteRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::BatchCreateAndDeleteResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::BatchReplaceCreateRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::BatchReplaceRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::BatchReplaceResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::CreateRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::CustomField
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::DeleteRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::Filter
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::GetRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::GetResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::MatchRule
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::Page
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::Pages
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Subscriptions::Subscription
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/services/subscriptions/service_twirp.rb#16
class Notifyd::Proto::Subscriptions::SubscriptionsClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def batch_create_and_delete(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def batch_replace(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get(input, req_opts = T.unsafe(nil)); end
end

# source://notifyd-client//lib/notifyd/proto/services/subscriptions/service_twirp.rb#8
class Notifyd::Proto::Subscriptions::SubscriptionsService < ::Twirp::Service; end

class Notifyd::Proto::Subscriptions::Topic
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/services/test/service_pb.rb#19
module Notifyd::Proto::Test; end

class Notifyd::Proto::Test::EchoRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Notifyd::Proto::Test::EchoResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://notifyd-client//lib/notifyd/proto/services/test/service_twirp.rb#15
class Notifyd::Proto::Test::TestClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def echo(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def timeout(input, req_opts = T.unsafe(nil)); end
end

# source://notifyd-client//lib/notifyd/proto/services/test/service_twirp.rb#8
class Notifyd::Proto::Test::TestService < ::Twirp::Service; end

# The RetryPlug configures the built in retry middleware in Faraday v0.17
# It will also send stats on every retry if the stats instance is set
#
# source://notifyd-client//lib/notifyd/retry_plug.rb#10
class Notifyd::RetryPlug
  include ::Notifyd::Plug

  # @return [RetryPlug] a new instance of RetryPlug
  #
  # source://notifyd-client//lib/notifyd/retry_plug.rb#23
  def initialize(stats: T.unsafe(nil)); end

  # source://notifyd-client//lib/notifyd/retry_plug.rb#27
  def inject(conn); end

  # Returns the value of attribute stats.
  #
  # source://notifyd-client//lib/notifyd/retry_plug.rb#21
  def stats; end
end

# source://notifyd-client//lib/notifyd/retry_plug.rb#13
Notifyd::RetryPlug::RETRYABLE_ENDPOINTS = T.let(T.unsafe(nil), Array)

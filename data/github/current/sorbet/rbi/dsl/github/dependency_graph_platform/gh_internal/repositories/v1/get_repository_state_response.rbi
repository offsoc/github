# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse`.
# Please instead update this file by running `bin/tapioca dsl Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse`.

class Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse
  sig do
    params(
      archived: T.nilable(T::Boolean),
      business_id: T.nilable(Integer),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      default_branch: T.nilable(String),
      owner_id: T.nilable(Integer),
      owner_type: T.nilable(T.any(Symbol, Integer)),
      parent_repository_id: T.nilable(Integer),
      repository_id: T.nilable(Integer),
      soft_delete_found_at: T.nilable(Google::Protobuf::Timestamp),
      updated_at: T.nilable(Google::Protobuf::Timestamp),
      visibility: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(archived: nil, business_id: nil, created_at: nil, default_branch: nil, owner_id: nil, owner_type: nil, parent_repository_id: nil, repository_id: nil, soft_delete_found_at: nil, updated_at: nil, visibility: nil); end

  sig { returns(T::Boolean) }
  def archived; end

  sig { params(value: T::Boolean).void }
  def archived=(value); end

  sig { returns(Integer) }
  def business_id; end

  sig { params(value: Integer).void }
  def business_id=(value); end

  sig { void }
  def clear_archived; end

  sig { void }
  def clear_business_id; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_default_branch; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_owner_type; end

  sig { void }
  def clear_parent_repository_id; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_soft_delete_found_at; end

  sig { void }
  def clear_updated_at; end

  sig { void }
  def clear_visibility; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(String) }
  def default_branch; end

  sig { params(value: String).void }
  def default_branch=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def owner_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def owner_type=(value); end

  sig { returns(Integer) }
  def parent_repository_id; end

  sig { params(value: Integer).void }
  def parent_repository_id=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def soft_delete_found_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def soft_delete_found_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def visibility; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def visibility=(value); end
end

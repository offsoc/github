{"version":3,"file":"chunk-app_components_account_verifications_launch-code-element_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/components/account_verifications/launch-code-element.ts"],"sourcesContent":["import {attr, controller, target, targets} from '@github/catalyst'\n\n@controller\nclass LaunchCodeElement extends HTMLElement {\n  @target form: HTMLFormElement\n  @targets inputs: HTMLInputElement[]\n  @target result: HTMLElement\n  @attr pattern: string\n  @attr ajax = false\n\n  connectedCallback() {\n    this.handleLoaded()\n  }\n\n  handlePaste(event: ClipboardEvent) {\n    event.preventDefault()\n    const clipboardData = event.clipboardData\n\n    if (!clipboardData) return\n\n    const launchCode = clipboardData.getData('text')\n\n    const launchCodeRegExp = new RegExp(`^${this.pattern}*$`)\n    if (!launchCodeRegExp.test(launchCode)) return\n\n    let lastInputElement\n\n    for (const inputField of this.inputs) {\n      const thisInputIndex = this.inputs.indexOf(inputField)\n      lastInputElement = inputField\n      if (!launchCode[thisInputIndex]) break\n      inputField.value = launchCode[thisInputIndex]!\n    }\n\n    if (this.form.checkValidity()) {\n      this.submit()\n    } else {\n      lastInputElement?.focus()\n    }\n  }\n\n  handleKeyInput(event: Event) {\n    const input = event.target as HTMLInputElement\n    const thisInputIndex = this.inputs.indexOf(input)\n    const nextInput = this.inputs[thisInputIndex + 1]\n\n    if (this.result.innerHTML.trim() !== '') {\n      // If we were displaying an error but the user\n      // is now entering a new code, clear the current\n      // error message.\n      this.result.textContent = ''\n    }\n\n    if (input.checkValidity()) {\n      if (nextInput) {\n        this.form.checkValidity() ? this.submit() : nextInput.focus()\n      } else {\n        if (this.form.reportValidity()) this.submit()\n      }\n    } else {\n      input.value = ''\n    }\n  }\n\n  handleKeyNavigation(event: KeyboardEvent) {\n    // TODO: Refactor to use data-hotkey\n    /* eslint eslint-comments/no-use: off */\n    /* eslint-disable @github-ui/ui-commands/no-manual-shortcut-logic */\n    const navigationKeys = ['Backspace', 'ArrowLeft', 'ArrowRight']\n    if (!navigationKeys.includes(event.key)) return\n\n    const input = event.target as HTMLInputElement\n    const thisInputIndex = this.inputs.indexOf(input)\n    const nextInput = this.inputs[thisInputIndex + 1]\n\n    switch (event.key) {\n      case 'Backspace': {\n        const previousInput = this.inputs[thisInputIndex - 1]\n        if (previousInput) {\n          this.moveCursorToEndOfInput(previousInput)\n          previousInput.value = ''\n          this.result.textContent = ''\n        }\n        return\n      }\n      case 'ArrowLeft': {\n        const previousInput = this.inputs[thisInputIndex - 1]\n        if (previousInput) this.moveCursorToEndOfInput(previousInput)\n        return\n      }\n      case 'ArrowRight': {\n        if (nextInput) this.moveCursorToEndOfInput(nextInput)\n        return\n      }\n    }\n    /* eslint-enable @github-ui/ui-commands/no-manual-shortcut-logic */\n  }\n\n  moveCursorToEndOfInput(input: HTMLInputElement) {\n    const length = input.value.length\n    input.focus()\n    input.setSelectionRange(length, length)\n  }\n\n  async submit() {\n    if (this.ajax) {\n      const response = await fetch(this.form.action, {\n        method: this.form.method,\n        body: new FormData(this.form),\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest',\n        },\n      })\n\n      if (response.ok) {\n        this.result.innerHTML = await response.text()\n        this.dispatchEvent(new CustomEvent('launch-code-success', {bubbles: true}))\n      } else {\n        this.result.innerHTML = await response.text()\n\n        // If we have previously returned an error message (the field is 'dirty'), we need\n        // to force the screen reader to see a new error message\n        if (this.result.getAttribute('data-dirty') === 'true') {\n          this.forceResultScreenReaderAnnounce()\n        } else {\n          this.result.setAttribute('data-dirty', 'true')\n        }\n\n        this.clearEnteredCode()\n\n        this.dispatchEvent(new CustomEvent('launch-code-error', {bubbles: true}))\n      }\n    } else {\n      this.form.submit()\n    }\n  }\n\n  handleLoaded() {\n    if (this.result.innerHTML.trim() !== '') {\n      this.forceResultScreenReaderAnnounce()\n    }\n  }\n\n  private forceResultScreenReaderAnnounce() {\n    // This is a hack to force the screen reader to read out the message.\n    // See https://github.com/github/accessibility/issues/290 where we do\n    // something similar for our flash messages.\n    setTimeout(() => {\n      if (this.result.firstElementChild) {\n        this.result.firstElementChild.appendChild(document.createTextNode('\\u00a0'))\n      }\n    }, 200)\n  }\n\n  private clearEnteredCode() {\n    for (const input of this.inputs) {\n      input.value = ''\n    }\n\n    this.inputs[0]?.focus()\n  }\n}\n"],"names":["LaunchCodeElement","HTMLElement","connectedCallback","handleLoaded","handlePaste","event","lastInputElement","preventDefault","clipboardData","launchCode","getData","launchCodeRegExp","pattern","test","inputField","inputs","thisInputIndex","indexOf","value","form","checkValidity","submit","focus","handleKeyInput","input","target","nextInput","result","innerHTML","trim","textContent","reportValidity","handleKeyNavigation","navigationKeys","includes","key","previousInput","moveCursorToEndOfInput","length","setSelectionRange","ajax","response","fetch","action","method","body","FormData","headers","ok","text","dispatchEvent","CustomEvent","bubbles","getAttribute","forceResultScreenReaderAnnounce","setAttribute","clearEnteredCode","setTimeout","firstElementChild","appendChild","document","createTextNode","targets","attr","controller"],"sourceRoot":""}
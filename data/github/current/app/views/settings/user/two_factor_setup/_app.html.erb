<%# erblint:counter DeprecatedComponentsCounter 1 %>
<%# erblint:counter DeprecatedComponentsCounter 1 %>
<%
  mashed_secret ||= ""
  qr_code_image_src ||= ""
  component ||= "two-factor-setup-verification"
  full_setup = component == "two-factor-setup-verification"
  dev_otp ||= ""
%>
<div data-target="<%= component %>.appElem">
  <%= form_with url: settings_user_2fa_verify_path, data: { target: "#{component}.appForm", action: "submit:#{component}#formSubmit" } do |form| %>
    <%= csrf_hidden_input_for settings_user_2fa_verify_path, method: :post, class: "js-data-url-csrf" %>
    <%= hidden_field_tag :type, :app %>

    <div>
      <span class="text-normal d-block color-fg-muted">
        Authenticator apps and browser extensions like
        <a class="Link--secondary text-underline" href="https://support.1password.com/one-time-passwords/" target="_blank" rel="noreferrer">1Password</a>,
        <a class="Link--secondary text-underline" href="https://authy.com/guides/github/" target="_blank" rel="noreferrer">Authy</a>,
        <a class="Link--secondary text-underline" href="https://www.microsoft.com/en-us/account/authenticator/" target="_blank" rel="noreferrer">Microsoft Authenticator</a>,
         etc. generate one-time passwords that are used as a second factor to verify your identity when prompted during sign-in.
      </span>

      <div class="d-flex" data-target="two-factor-setup-verification.appScanTextB" hidden>
        <%= render Primer::Beta::Flash.new(icon: :alert, scheme: :warning, display: :flex, classes: "flex-justify-between flex-items-center", pr: 4, py: 2, my: 2, mx: 0) do %>
          <p class="text-bold">Re-scan the QR code</p>
        <% end %>
      </div>

      <%= render(Primer::Beta::Heading.new(tag: full_setup ? :h3 : :h5, classes: "h5", mt: 3, data: { target: "two-factor-setup-verification.appScanTextA" })) { "Scan the QR code" } %>
      <div class="color-fg-muted">
        Use an authenticator app or browser extension to scan.
        <a class="Link--secondary text-underline" href="<%= GitHub.help_url %>/articles/configuring-two-factor-authentication" target="_blank" rel="noreferrer">Learn more about enabling 2FA</a>.
      </div>

      <div>
        <% if qr_code_image_src.empty? %>
          <%= render(Primer::Beta::Spinner.new(size: :large, mt: 3, mb: 2, data: { target: "two-factor-setup-verification.spinner" })) %>
          <img class="qr-code-img" data-target="two-factor-setup-verification.qrCodeImg" src="" alt="qr code" hidden>
        <% else %>
          <img class="qr-code-img" src="<%= qr_code_image_src %>" alt="qr code">
        <% end %>
      </div>

      <div class="color-fg-muted mb-4">
        Unable to scan? You can use the
        <%= render(Primer::Alpha::Dialog.new(
          title: "Your two-factor secret",
          id: "two-factor-setup-verification-mashed-secret"
        )) do |d| %>
          <% d.with_show_button(scheme: :link, type: :button, classes: "Link--inTextBlock") { "setup key" } %>
          <% d.with_body(p: 0) do %>
            <div class="text-mono f5 p-3" data-target="two-factor-setup-verification.mashedSecret" <%= test_selector("two-factor-setup-mashed-secret") %>><%= mashed_secret %></div>
          <% end %>
        <% end %>
        to manually configure your authenticator app.
      </div>

      <%= render(Primer::Beta::Heading.new(tag: full_setup ? :h3 : :h5, classes: "h5")) { "Verify the code from the app" } %>
      <div class="mt-2 d-flex flex-items-center width-fit">
        <% autocomplete = supports_autocomplete_otp? ? "one-time-code" : "off" %>
        <%= form.text_field :otp,
          required: true,
          placeholder: "XXXXXX",
          pattern: "[0-9]{6}",
          autocomplete: autocomplete,
          value: dev_otp,
          class: "width-fit",
          data: {
            action: "input:#{component}#otpChange",
            target: "#{component}.appOtpInput"
          }
        %>
        <span class="color-fg-success d-flex" data-target="<%= component %>.otpVerifySuccess" hidden>
          <%= render(Primer::Beta::Octicon.new(icon: "check", color: :success, ml: 1)) %>
        </span>
      </div>
    </div>
  <% end %>
</div>

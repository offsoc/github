# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Orca::Stage`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Orca::Stage`.

class GitHub::Orca::Stage
  sig do
    params(
      completed_at: T.nilable(String),
      created_at: T.nilable(String),
      error_message: T.nilable(String),
      id: T.nilable(String),
      metadata: T.nilable(Google::Protobuf::Struct),
      repository_name: T.nilable(String),
      restart_count: T.nilable(Integer),
      stage_type: T.nilable(String),
      started_at: T.nilable(String),
      status: T.nilable(T.any(Symbol, Integer)),
      status_string: T.nilable(String),
      ui_friendly_logs: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Orca::UIFriendlyLogLine], T::Array[GitHub::Orca::UIFriendlyLogLine]))
    ).void
  end
  def initialize(completed_at: nil, created_at: nil, error_message: nil, id: nil, metadata: nil, repository_name: nil, restart_count: nil, stage_type: nil, started_at: nil, status: nil, status_string: nil, ui_friendly_logs: T.unsafe(nil)); end

  sig { void }
  def clear_completed_at; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_error_message; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_metadata; end

  sig { void }
  def clear_repository_name; end

  sig { void }
  def clear_restart_count; end

  sig { void }
  def clear_stage_type; end

  sig { void }
  def clear_started_at; end

  sig { void }
  def clear_status; end

  sig { void }
  def clear_status_string; end

  sig { void }
  def clear_ui_friendly_logs; end

  sig { returns(String) }
  def completed_at; end

  sig { params(value: String).void }
  def completed_at=(value); end

  sig { returns(String) }
  def created_at; end

  sig { params(value: String).void }
  def created_at=(value); end

  sig { returns(String) }
  def error_message; end

  sig { params(value: String).void }
  def error_message=(value); end

  sig { returns(String) }
  def id; end

  sig { params(value: String).void }
  def id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Struct)) }
  def metadata; end

  sig { params(value: T.nilable(Google::Protobuf::Struct)).void }
  def metadata=(value); end

  sig { returns(String) }
  def repository_name; end

  sig { params(value: String).void }
  def repository_name=(value); end

  sig { returns(Integer) }
  def restart_count; end

  sig { params(value: Integer).void }
  def restart_count=(value); end

  sig { returns(String) }
  def stage_type; end

  sig { params(value: String).void }
  def stage_type=(value); end

  sig { returns(String) }
  def started_at; end

  sig { params(value: String).void }
  def started_at=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end

  sig { returns(String) }
  def status_string; end

  sig { params(value: String).void }
  def status_string=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Orca::UIFriendlyLogLine]) }
  def ui_friendly_logs; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Orca::UIFriendlyLogLine]).void }
  def ui_friendly_logs=(value); end
end

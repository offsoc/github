# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PlatformTypes::Ref`.
# Please instead update this file by running `bin/tapioca dsl PlatformTypes::Ref`.

class PlatformTypes::Ref < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(PlatformTypes::PullRequestConnection) }
  def associated_pull_requests; end

  sig { returns(T::Boolean) }
  def associated_pull_requests?; end

  sig { returns(T.nilable(PlatformTypes::BranchProtectionRule)) }
  def branch_protection_rule; end

  sig { returns(T::Boolean) }
  def branch_protection_rule?; end

  sig { returns(T.nilable(PlatformTypes::Comparison)) }
  def compare; end

  sig { returns(T::Boolean) }
  def compare?; end

  sig { returns(T.nilable(PlatformTypes::CommittishDirectory)) }
  def directory; end

  sig { returns(T::Boolean) }
  def directory?; end

  sig { returns(T.nilable(PlatformTypes::CommittishFile)) }
  def file; end

  sig { returns(T::Boolean) }
  def file?; end

  sig { returns(PlatformTypes::CommittishFileConnection) }
  def files; end

  sig { returns(T::Boolean) }
  def files?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(String) }
  def name; end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(String) }
  def prefix; end

  sig { returns(T::Boolean) }
  def prefix?; end

  sig { returns(T.nilable(PlatformTypes::RefUpdateRule)) }
  def ref_update_rule; end

  sig { returns(T::Boolean) }
  def ref_update_rule?; end

  sig { returns(PlatformTypes::Repository) }
  def repository; end

  sig { returns(T::Boolean) }
  def repository?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryRuleConnection)) }
  def rules; end

  sig { returns(T::Boolean) }
  def rules?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def target; end

  sig { returns(T::Boolean) }
  def target?; end

  sig { returns(T.nilable(String)) }
  def updates_channel; end

  sig { returns(T::Boolean) }
  def updates_channel?; end

  sig { returns(T::Boolean) }
  def viewer_can_commit_to_branch; end

  sig { returns(T::Boolean) }
  def viewer_can_commit_to_branch?; end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Users::V1::ChangeNewRepositoryDefaultBranchSetting`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Users::V1::ChangeNewRepositoryDefaultBranchSetting`.

class Hydro::Schemas::Github::Users::V1::ChangeNewRepositoryDefaultBranchSetting
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      business: T.nilable(Hydro::Schemas::Github::V1::Entities::Business),
      enforced: T.nilable(T::Boolean),
      new_default_branch: T.nilable(String),
      old_default_branch: T.nilable(String),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(actor: nil, business: nil, enforced: nil, new_default_branch: nil, old_default_branch: nil, repository_owner: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Business)) }
  def business; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Business)).void }
  def business=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_business; end

  sig { void }
  def clear_enforced; end

  sig { void }
  def clear_new_default_branch; end

  sig { void }
  def clear_old_default_branch; end

  sig { void }
  def clear_repository_owner; end

  sig { returns(T::Boolean) }
  def enforced; end

  sig { params(value: T::Boolean).void }
  def enforced=(value); end

  sig { returns(String) }
  def new_default_branch; end

  sig { params(value: String).void }
  def new_default_branch=(value); end

  sig { returns(String) }
  def old_default_branch; end

  sig { params(value: String).void }
  def old_default_branch=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end
end

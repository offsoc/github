---
summary: Get repository content
description: |-
  Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository's root directory.

  This endpoint supports the following custom media types. For more information, see "[Media types](${externalDocsUrl}/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."

  - **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.
  - **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
  - **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.

  If the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be "submodule". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as "submodule".

  If the content is a symlink and the symlink's target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.

  If the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs (`html_url` and `_links["html"]`) will have null values.

  **Notes**:

  - To get a repository's contents recursively, you can [recursively get the tree](${externalDocsUrl}/rest/git/trees#get-a-tree).
  - This API has an upper limit of 1,000 files for a directory. If you need to retrieve
  more files, use the [Git Trees API](${externalDocsUrl}/rest/git/trees#get-a-tree).
  - Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
  - If the requested file's size is:
    - 1 MB or smaller: All features of this endpoint are supported.
    - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty
  string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
    - Greater than 100 MB: This endpoint is not supported.
tags:
  - repos
operationId: repos/get-content
externalDocs:
  description: API method documentation
  url: '${externalDocsUrl}/rest/repos/contents#get-repository-content'
parameters:
  - $ref: '../../components/parameters/owner.yaml'
  - $ref: '../../components/parameters/repo.yaml'
  - name: path
    description: path parameter
    in: path
    required: true
    schema:
      type: string
    x-multi-segment: true
  - name: ref
    description: 'The name of the commit/branch/tag. Default: the repositoryâ€™s default branch.'
    in: query
    required: false
    schema:
      type: string
responses:
  '200':
    description: Response
    content:
      application/vnd.github.object:
        schema:
          $ref: '../../components/schemas/content-tree.yaml'
        examples:
          response-if-content-is-a-file:
            $ref: '../../components/examples/content-file-response-if-content-is-a-file.yaml'
          response-if-content-is-a-directory:
            $ref: '../../components/examples/content-file-response-if-content-is-a-directory-object.yaml'
      application/json:
        schema:
          oneOf:
            - $ref: '../../components/schemas/content-directory.yaml'
            - $ref: '../../components/schemas/content-file.yaml'
            - $ref: '../../components/schemas/content-symlink.yaml'
            - $ref: '../../components/schemas/content-submodule.yaml'
        examples:
          response-if-content-is-a-file:
            $ref: '../../components/examples/content-file-response-if-content-is-a-file.yaml'
          response-if-content-is-a-directory:
            $ref: '../../components/examples/content-file-response-if-content-is-a-directory.yaml'
          response-if-content-is-a-symlink:
            $ref: '../../components/examples/content-file-response-if-content-is-a-symlink.yaml'
          response-if-content-is-a-submodule:
            $ref: '../../components/examples/content-file-response-if-content-is-a-submodule.yaml'
  '404':
    $ref: '../../components/responses/not_found.yaml'
  '403':
    $ref: '../../components/responses/forbidden.yaml'
  '302':
    $ref: '../../components/responses/found.yaml'
  '304':
    $ref: '../../components/responses/not_modified.yaml'
x-github-releases:
  - ghec
  - ghes: '>= 2.18'
  - api.github.com
x-githubEnterpriseOverlays:
  '<= 3.5':
    description: "Gets the contents of a file or directory in a repository. Specify the
      file path or directory in `:path`. If you omit\n`:path`, you will receive the contents
      of the repository's root directory. See the description below regarding what the
      API response includes for directories. \n\nFiles and symlinks support [a custom
      media type](${externalDocsUrl}/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) for\nretrieving
      the raw content or rendered HTML (when supported). All content types support [a
      custom media\ntype](${externalDocsUrl}/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)
      to ensure the content is returned in a consistent\nobject format.\n\n**Notes**:\n*
      \  To get a repository's contents recursively, you can [recursively get the tree](${externalDocsUrl}/rest/git/trees#get-a-tree).\n*
      \  This API has an upper limit of 1,000 files for a directory. If you need to retrieve
      more files, use the [Git Trees\nAPI](${externalDocsUrl}/rest/git/trees#get-a-tree).\n
      * \ Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download. \n*
      \  This API supports files up to 1 megabyte in size.\n\n If the content is a
      directory:\nThe response will be an array of objects, one object for each item in
      the directory.\nWhen listing the contents of a directory, submodules have their
      \"type\" specified as \"file\". Logically, the value\n_should_ be \"submodule\".
      This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).\nIn
      the next major version of the API, the type will be returned as \"submodule\".\n\n
      If the content is a symlink: \nIf the requested `:path` points to a symlink, and
      the symlink's target is a normal file in the repository, then the\nAPI responds
      with the content of the file (in the format shown in the example. Otherwise, the
      API responds with an object \ndescribing the symlink itself.\n\n If the content
      is a submodule:\nThe `submodule_git_url` identifies the location of the submodule
      repository, and the `sha` identifies a specific\ncommit within the submodule repository.
      Git uses the given URL when cloning the submodule repository, and checks out\nthe
      submodule at that specific commit.\n\nIf the submodule repository is not hosted
      on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the\ngithub.com
      URLs (`html_url` and `_links[\"html\"]`) will have null values."
x-github:
  githubCloudOnly: false
  enabledForGitHubApps: true

  category: repos
  subcategory: contents
x-github-internal:
  path: '/repos/{owner}/{repo}/contents/{path}'
  http-method: get
  service-tier: 1
  published: true
  owner: '@github/repos'
x-github-breaking-changes:
  - changeset: return_submodule_type_for_submodules_in_directory_lists
    patch:
      description: |-
        Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository's root directory.

        This endpoint supports the following custom media types. For more information, see "[Media types](${externalDocsUrl}/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."

        - **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.
        - **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
        - **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.

        If the content is a directory: The response will be an array of objects, one object for each item in the directory.

        If the content is a symlink and the symlink's target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.

        If the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs (`html_url` and `_links["html"]`) will have null values.

        **Notes**:

        - To get a repository's contents recursively, you can [recursively get the tree](${externalDocsUrl}/rest/git/trees#get-a-tree).
        - This API has an upper limit of 1,000 files for a directory. If you need to retrieve
        more files, use the [Git Trees API](${externalDocsUrl}/rest/git/trees#get-a-tree).
        - Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
        - If the requested file's size is:
          - 1 MB or smaller: All features of this endpoint are supported.
          - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty
        string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
          - Greater than 100 MB: This endpoint is not supported.

<div class="js-previewable-comment-form previewable-comment-form write-selected"
      data-preview-url="<%= data_preview_url %>"
      <%= test_selector "comments-edit-form-component" %>>
  <div class="Box CommentBox m-2">
    <%= csrf_hidden_input_for data_preview_url, class: "js-data-preview-url-csrf" %>
    <%= render Comments::EditForm::TabnavComponent.new(
      comment: comment,
      saved_reply_context: saved_reply_context,
      textarea_id: textarea_id,
      current_repository: current_repository,
      slash_commands_enabled: slash_commands_enabled,
      tasklist_blocks_enabled: tasklist_blocks_enabled?,
      copilot_summary_enabled: copilot_for_prs_enabled?,
      copilot_text_completion_enabled: copilot_text_completion_enabled?) %>

    <div class="clearfix"></div>

    <%= render partial: "comments/stale_content_error" %>

    <%= render Comments::EditForm::WriteContentComponent.new(
      comment: comment,
      comment_context: comment_context,
      required: required,
      textarea_id: textarea_id,
      slash_commands_surface: slash_commands_surface) %>

    <div class="preview-content">
      <%= render :partial => "comments/preview_comment", locals: { side: preview_side } %>
    </div>
  </div>
  <div class="d-flex flex-justify-end flex-items-center flex-wrap mx-2 mb-2 gap-2">
    <% if copilot_for_prs_enabled? %>
      <%= render partial: "comments/copilot_summary_banner", locals: {
        pull_request: pull_request,
        copilot_organization: pull_request.owner.organization? ? Copilot::Organization.new(pull_request.owner) : nil,
      } %>
    <% end %>

    <% if copilot_text_completion_enabled? %>
      <%= render GhostPilot::SuggestionsComponent.new(
        source_element_id: textarea_id.to_s,
        element_description: copilot_text_completion_description,
        context: [
          GhostPilot::DiffSummaryComponent.new(comparison: pull_request.comparison, lazy_load: true),
          GhostPilot::StaticTextComponent.new(context: pull_request.title, description: "Pull Request Title"),
          GhostPilot::CommitTitlesComponent.new(pull_request: pull_request),
          GhostPilot::RecentInteractionsComponent.new(organization_id: pull_request.repository.organization_id, lazy_load: true),
        ]
      ) %>
    <% end %>

    <% if comment.is_a?(Issue) || comment.is_a?(IssueComment) %>
      <div class="<%= comment.created_via_email ? "flex-grow-0" : "flex-auto" %>">
        <%= render Comments::AddTasksComponent.new(comment, textarea_id, current_user, ml: 0) %>
      </div>
    <% end %>

    <% if comment.created_via_email %>
      <div class="flex-auto comment-md-support-link">
        <span class="color-fg-muted f6 ml-2">
          <%= primer_octicon(:mail, mr: 1) %>
          Email replies do not support Markdown
        </span>
      </div>
    <% end %>

    <input type="hidden" name="comment_id" value="<%= comment.id %>" class="js-comment-id">
    <div class="d-flex gap-1">
      <%= render Primer::Beta::Button.new(scheme: :danger, classes: "js-comment-cancel-button", "data-confirm-text": "Are you sure you want to discard your unsaved changes?") do %>
        Cancel
      <% end %>
      <%= render Primer::Beta::Button.new(scheme: :primary, type: :submit, "data-disable-with": "") do %>Update comment<% end %>
    </div>
  </div>

  <div class="comment-form-error mb-2 js-comment-update-error" hidden></div>
</div>

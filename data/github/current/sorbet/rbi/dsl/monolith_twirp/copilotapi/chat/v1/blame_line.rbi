# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Copilotapi::Chat::V1::BlameLine`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Copilotapi::Chat::V1::BlameLine`.

class MonolithTwirp::Copilotapi::Chat::V1::BlameLine
  sig do
    params(
      commit_oid: T.nilable(String),
      line_no: T.nilable(Integer),
      old_line_no: T.nilable(Integer),
      reblame_path: T.nilable(String),
      repo_id: T.nilable(Integer),
      repo_name: T.nilable(String),
      repo_owner: T.nilable(String),
      text: T.nilable(String)
    ).void
  end
  def initialize(commit_oid: nil, line_no: nil, old_line_no: nil, reblame_path: nil, repo_id: nil, repo_name: nil, repo_owner: nil, text: nil); end

  sig { void }
  def clear_commit_oid; end

  sig { void }
  def clear_line_no; end

  sig { void }
  def clear_old_line_no; end

  sig { void }
  def clear_reblame_path; end

  sig { void }
  def clear_repo_id; end

  sig { void }
  def clear_repo_name; end

  sig { void }
  def clear_repo_owner; end

  sig { void }
  def clear_text; end

  sig { returns(String) }
  def commit_oid; end

  sig { params(value: String).void }
  def commit_oid=(value); end

  sig { returns(Integer) }
  def line_no; end

  sig { params(value: Integer).void }
  def line_no=(value); end

  sig { returns(Integer) }
  def old_line_no; end

  sig { params(value: Integer).void }
  def old_line_no=(value); end

  sig { returns(String) }
  def reblame_path; end

  sig { params(value: String).void }
  def reblame_path=(value); end

  sig { returns(Integer) }
  def repo_id; end

  sig { params(value: Integer).void }
  def repo_id=(value); end

  sig { returns(String) }
  def repo_name; end

  sig { params(value: String).void }
  def repo_name=(value); end

  sig { returns(String) }
  def repo_owner; end

  sig { params(value: String).void }
  def repo_owner=(value); end

  sig { returns(String) }
  def text; end

  sig { params(value: String).void }
  def text=(value); end
end

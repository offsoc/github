# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::VariableChanged`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::VariableChanged`.

class Hydro::Schemas::Github::V1::VariableChanged
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      app: T.nilable(String),
      name: T.nilable(String),
      owner_env: T.nilable(Hydro::Schemas::Github::V1::Entities::Environment),
      owner_org: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      owner_repo: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      owner_type: T.nilable(T.any(Symbol, Integer)),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      state: T.nilable(T.any(Symbol, Integer)),
      updated_at: T.nilable(Google::Protobuf::Timestamp),
      updated_name: T.nilable(String),
      varlen: T.nilable(Integer),
      visibility: T.nilable(String)
    ).void
  end
  def initialize(actor: nil, app: nil, name: nil, owner_env: nil, owner_org: nil, owner_repo: nil, owner_type: nil, request_context: nil, state: nil, updated_at: nil, updated_name: nil, varlen: nil, visibility: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def app; end

  sig { params(value: String).void }
  def app=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_app; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_owner_env; end

  sig { void }
  def clear_owner_org; end

  sig { void }
  def clear_owner_repo; end

  sig { void }
  def clear_owner_type; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_state; end

  sig { void }
  def clear_updated_at; end

  sig { void }
  def clear_updated_name; end

  sig { void }
  def clear_varlen; end

  sig { void }
  def clear_visibility; end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Environment)) }
  def owner_env; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Environment)).void }
  def owner_env=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def owner_org; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def owner_org=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def owner_repo; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def owner_repo=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def owner_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def owner_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def state=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end

  sig { returns(String) }
  def updated_name; end

  sig { params(value: String).void }
  def updated_name=(value); end

  sig { returns(Integer) }
  def varlen; end

  sig { params(value: Integer).void }
  def varlen=(value); end

  sig { returns(String) }
  def visibility; end

  sig { params(value: String).void }
  def visibility=(value); end
end

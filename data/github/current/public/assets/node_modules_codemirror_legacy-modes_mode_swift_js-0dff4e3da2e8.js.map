{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_swift_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/swift.js"],"sourcesContent":["function wordSet(words) {\n  var set = {}\n  for (var i = 0; i < words.length; i++) set[words[i]] = true\n  return set\n}\n\nvar keywords = wordSet([\"_\",\"var\",\"let\",\"actor\",\"class\",\"enum\",\"extension\",\"import\",\"protocol\",\"struct\",\"func\",\"typealias\",\"associatedtype\",\n                        \"open\",\"public\",\"internal\",\"fileprivate\",\"private\",\"deinit\",\"init\",\"new\",\"override\",\"self\",\"subscript\",\"super\",\n                        \"convenience\",\"dynamic\",\"final\",\"indirect\",\"lazy\",\"required\",\"static\",\"unowned\",\"unowned(safe)\",\"unowned(unsafe)\",\"weak\",\"as\",\"is\",\n                        \"break\",\"case\",\"continue\",\"default\",\"else\",\"fallthrough\",\"for\",\"guard\",\"if\",\"in\",\"repeat\",\"switch\",\"where\",\"while\",\n                        \"defer\",\"return\",\"inout\",\"mutating\",\"nonmutating\",\"isolated\",\"nonisolated\",\"catch\",\"do\",\"rethrows\",\"throw\",\"throws\",\"async\",\"await\",\"try\",\"didSet\",\"get\",\"set\",\"willSet\",\n                        \"assignment\",\"associativity\",\"infix\",\"left\",\"none\",\"operator\",\"postfix\",\"precedence\",\"precedencegroup\",\"prefix\",\"right\",\n                        \"Any\",\"AnyObject\",\"Type\",\"dynamicType\",\"Self\",\"Protocol\",\"__COLUMN__\",\"__FILE__\",\"__FUNCTION__\",\"__LINE__\"])\nvar definingKeywords = wordSet([\"var\",\"let\",\"actor\",\"class\",\"enum\",\"extension\",\"import\",\"protocol\",\"struct\",\"func\",\"typealias\",\"associatedtype\",\"for\"])\nvar atoms = wordSet([\"true\",\"false\",\"nil\",\"self\",\"super\",\"_\"])\nvar types = wordSet([\"Array\",\"Bool\",\"Character\",\"Dictionary\",\"Double\",\"Float\",\"Int\",\"Int8\",\"Int16\",\"Int32\",\"Int64\",\"Never\",\"Optional\",\"Set\",\"String\",\n                     \"UInt8\",\"UInt16\",\"UInt32\",\"UInt64\",\"Void\"])\nvar operators = \"+-/*%=|&<>~^?!\"\nvar punc = \":;,.(){}[]\"\nvar binary = /^\\-?0b[01][01_]*/\nvar octal = /^\\-?0o[0-7][0-7_]*/\nvar hexadecimal = /^\\-?0x[\\dA-Fa-f][\\dA-Fa-f_]*(?:(?:\\.[\\dA-Fa-f][\\dA-Fa-f_]*)?[Pp]\\-?\\d[\\d_]*)?/\nvar decimal = /^\\-?\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[Ee]\\-?\\d[\\d_]*)?/\nvar identifier = /^\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1/\nvar property = /^\\.(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/\nvar instruction = /^\\#[A-Za-z]+/\nvar attribute = /^@(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/\n//var regexp = /^\\/(?!\\s)(?:\\/\\/)?(?:\\\\.|[^\\/])+\\//\n\nfunction tokenBase(stream, state, prev) {\n  if (stream.sol()) state.indented = stream.indentation()\n  if (stream.eatSpace()) return null\n\n  var ch = stream.peek()\n  if (ch == \"/\") {\n    if (stream.match(\"//\")) {\n      stream.skipToEnd()\n      return \"comment\"\n    }\n    if (stream.match(\"/*\")) {\n      state.tokenize.push(tokenComment)\n      return tokenComment(stream, state)\n    }\n  }\n  if (stream.match(instruction)) return \"builtin\"\n  if (stream.match(attribute)) return \"attribute\"\n  if (stream.match(binary)) return \"number\"\n  if (stream.match(octal)) return \"number\"\n  if (stream.match(hexadecimal)) return \"number\"\n  if (stream.match(decimal)) return \"number\"\n  if (stream.match(property)) return \"property\"\n  if (operators.indexOf(ch) > -1) {\n    stream.next()\n    return \"operator\"\n  }\n  if (punc.indexOf(ch) > -1) {\n    stream.next()\n    stream.match(\"..\")\n    return \"punctuation\"\n  }\n  var stringMatch\n  if (stringMatch = stream.match(/(\"\"\"|\"|')/)) {\n    var tokenize = tokenString.bind(null, stringMatch[0])\n    state.tokenize.push(tokenize)\n    return tokenize(stream, state)\n  }\n\n  if (stream.match(identifier)) {\n    var ident = stream.current()\n    if (types.hasOwnProperty(ident)) return \"type\"\n    if (atoms.hasOwnProperty(ident)) return \"atom\"\n    if (keywords.hasOwnProperty(ident)) {\n      if (definingKeywords.hasOwnProperty(ident))\n        state.prev = \"define\"\n      return \"keyword\"\n    }\n    if (prev == \"define\") return \"def\"\n    return \"variable\"\n  }\n\n  stream.next()\n  return null\n}\n\nfunction tokenUntilClosingParen() {\n  var depth = 0\n  return function(stream, state, prev) {\n    var inner = tokenBase(stream, state, prev)\n    if (inner == \"punctuation\") {\n      if (stream.current() == \"(\") ++depth\n      else if (stream.current() == \")\") {\n        if (depth == 0) {\n          stream.backUp(1)\n          state.tokenize.pop()\n          return state.tokenize[state.tokenize.length - 1](stream, state)\n        }\n        else --depth\n      }\n    }\n    return inner\n  }\n}\n\nfunction tokenString(openQuote, stream, state) {\n  var singleLine = openQuote.length == 1\n  var ch, escaped = false\n  while (ch = stream.peek()) {\n    if (escaped) {\n      stream.next()\n      if (ch == \"(\") {\n        state.tokenize.push(tokenUntilClosingParen())\n        return \"string\"\n      }\n      escaped = false\n    } else if (stream.match(openQuote)) {\n      state.tokenize.pop()\n      return \"string\"\n    } else {\n      stream.next()\n      escaped = ch == \"\\\\\"\n    }\n  }\n  if (singleLine) {\n    state.tokenize.pop()\n  }\n  return \"string\"\n}\n\nfunction tokenComment(stream, state) {\n  var ch\n  while (ch = stream.next()) {\n    if (ch === \"/\" && stream.eat(\"*\")) {\n      state.tokenize.push(tokenComment)\n    } else if (ch === \"*\" && stream.eat(\"/\")) {\n      state.tokenize.pop()\n      break\n    }\n  }\n  return \"comment\"\n}\n\nfunction Context(prev, align, indented) {\n  this.prev = prev\n  this.align = align\n  this.indented = indented\n}\n\nfunction pushContext(state, stream) {\n  var align = stream.match(/^\\s*($|\\/[\\/\\*]|[)}\\]])/, false) ? null : stream.column() + 1\n  state.context = new Context(state.context, align, state.indented)\n}\n\nfunction popContext(state) {\n  if (state.context) {\n    state.indented = state.context.indented\n    state.context = state.context.prev\n  }\n}\n\nexport const swift = {\n  name: \"swift\",\n  startState: function() {\n    return {\n      prev: null,\n      context: null,\n      indented: 0,\n      tokenize: []\n    }\n  },\n\n  token: function(stream, state) {\n    var prev = state.prev\n    state.prev = null\n    var tokenize = state.tokenize[state.tokenize.length - 1] || tokenBase\n    var style = tokenize(stream, state, prev)\n    if (!style || style == \"comment\") state.prev = prev\n    else if (!state.prev) state.prev = style\n\n    if (style == \"punctuation\") {\n      var bracket = /[\\(\\[\\{]|([\\]\\)\\}])/.exec(stream.current())\n      if (bracket) (bracket[1] ? popContext : pushContext)(state, stream)\n    }\n\n    return style\n  },\n\n  indent: function(state, textAfter, iCx) {\n    var cx = state.context\n    if (!cx) return 0\n    var closing = /^[\\]\\}\\)]/.test(textAfter)\n    if (cx.align != null) return cx.align - (closing ? 1 : 0)\n    return cx.indented + (closing ? 0 : iCx.unit)\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[\\)\\}\\]]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]}\n  }\n}\n"],"names":["wordSet","words","set","i","length","keywords","definingKeywords","atoms","types","binary","octal","hexadecimal","decimal","identifier","property","instruction","attribute","tokenBase","stream","state","prev","sol","indented","indentation","eatSpace","stringMatch","ch","peek","match","skipToEnd","tokenize","push","tokenComment","operators","indexOf","next","punc","tokenString","bind","ident","current","hasOwnProperty","openQuote","singleLine","escaped","tokenUntilClosingParen","depth","inner","backUp","pop","eat","Context","align","swift","name","startState","context","token","style","bracket","exec","column","indent","textAfter","iCx","cx","closing","test","unit","languageData","indentOnInput","commentTokens","line","block","open","close","closeBrackets","brackets"],"sourceRoot":""}
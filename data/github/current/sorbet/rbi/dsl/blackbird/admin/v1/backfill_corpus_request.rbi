# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Blackbird::Admin::V1::BackfillCorpusRequest`.
# Please instead update this file by running `bin/tapioca dsl Blackbird::Admin::V1::BackfillCorpusRequest`.

class Blackbird::Admin::V1::BackfillCorpusRequest
  sig do
    params(
      bootstrap: T.nilable(T::Boolean),
      corpus: T.nilable(String),
      epoch_id: T.nilable(Integer),
      epoch_mode: T.nilable(T.any(Symbol, Integer)),
      limit: T.nilable(Integer),
      num_masks: T.nilable(Integer),
      query: T.nilable(String),
      reason: T.nilable(String)
    ).void
  end
  def initialize(bootstrap: nil, corpus: nil, epoch_id: nil, epoch_mode: nil, limit: nil, num_masks: nil, query: nil, reason: nil); end

  sig { returns(T::Boolean) }
  def bootstrap; end

  sig { params(value: T::Boolean).void }
  def bootstrap=(value); end

  sig { void }
  def clear_bootstrap; end

  sig { void }
  def clear_corpus; end

  sig { void }
  def clear_epoch_id; end

  sig { void }
  def clear_epoch_mode; end

  sig { void }
  def clear_limit; end

  sig { void }
  def clear_num_masks; end

  sig { void }
  def clear_query; end

  sig { void }
  def clear_reason; end

  sig { returns(String) }
  def corpus; end

  sig { params(value: String).void }
  def corpus=(value); end

  sig { returns(Integer) }
  def epoch_id; end

  sig { params(value: Integer).void }
  def epoch_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def epoch_mode; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def epoch_mode=(value); end

  sig { returns(Integer) }
  def limit; end

  sig { params(value: Integer).void }
  def limit=(value); end

  sig { returns(Integer) }
  def num_masks; end

  sig { params(value: Integer).void }
  def num_masks=(value); end

  sig { returns(String) }
  def query; end

  sig { params(value: String).void }
  def query=(value); end

  sig { returns(String) }
  def reason; end

  sig { params(value: String).void }
  def reason=(value); end
end

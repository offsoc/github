# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Repositories::V1::UiEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Repositories::V1::UiEvent`.

class Hydro::Schemas::Github::Repositories::V1::UiEvent
  sig do
    params(
      actor_id: T.nilable(Google::Protobuf::Int64Value),
      actor_login: T.nilable(Google::Protobuf::StringValue),
      browser_languages: T.nilable(String),
      browser_width: T.nilable(Integer),
      context: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      interaction: T.nilable(String),
      performed_at: T.nilable(Google::Protobuf::Timestamp),
      react_app: T.nilable(String),
      repository_id: T.nilable(Integer),
      repository_is_fork: T.nilable(T::Boolean),
      repository_nwo: T.nilable(String),
      repository_public: T.nilable(T::Boolean),
      target: T.nilable(String),
      url: T.nilable(String),
      user_agent: T.nilable(String)
    ).void
  end
  def initialize(actor_id: nil, actor_login: nil, browser_languages: nil, browser_width: nil, context: T.unsafe(nil), interaction: nil, performed_at: nil, react_app: nil, repository_id: nil, repository_is_fork: nil, repository_nwo: nil, repository_public: nil, target: nil, url: nil, user_agent: nil); end

  sig { returns(T.nilable(Google::Protobuf::Int64Value)) }
  def actor_id; end

  sig { params(value: T.nilable(Google::Protobuf::Int64Value)).void }
  def actor_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def actor_login; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def actor_login=(value); end

  sig { returns(String) }
  def browser_languages; end

  sig { params(value: String).void }
  def browser_languages=(value); end

  sig { returns(Integer) }
  def browser_width; end

  sig { params(value: Integer).void }
  def browser_width=(value); end

  sig { void }
  def clear_actor_id; end

  sig { void }
  def clear_actor_login; end

  sig { void }
  def clear_browser_languages; end

  sig { void }
  def clear_browser_width; end

  sig { void }
  def clear_context; end

  sig { void }
  def clear_interaction; end

  sig { void }
  def clear_performed_at; end

  sig { void }
  def clear_react_app; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_repository_is_fork; end

  sig { void }
  def clear_repository_nwo; end

  sig { void }
  def clear_repository_public; end

  sig { void }
  def clear_target; end

  sig { void }
  def clear_url; end

  sig { void }
  def clear_user_agent; end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def context; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def context=(value); end

  sig { returns(String) }
  def interaction; end

  sig { params(value: String).void }
  def interaction=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def performed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def performed_at=(value); end

  sig { returns(String) }
  def react_app; end

  sig { params(value: String).void }
  def react_app=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T::Boolean) }
  def repository_is_fork; end

  sig { params(value: T::Boolean).void }
  def repository_is_fork=(value); end

  sig { returns(String) }
  def repository_nwo; end

  sig { params(value: String).void }
  def repository_nwo=(value); end

  sig { returns(T::Boolean) }
  def repository_public; end

  sig { params(value: T::Boolean).void }
  def repository_public=(value); end

  sig { returns(String) }
  def target; end

  sig { params(value: String).void }
  def target=(value); end

  sig { returns(String) }
  def url; end

  sig { params(value: String).void }
  def url=(value); end

  sig { returns(String) }
  def user_agent; end

  sig { params(value: String).void }
  def user_agent=(value); end
end

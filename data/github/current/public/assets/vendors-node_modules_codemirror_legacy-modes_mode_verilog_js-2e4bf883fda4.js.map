{"version":3,"file":"chunk-vendors-node_modules_codemirror_legacy-modes_mode_verilog_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/verilog.js"],"sourcesContent":["function mkVerilog(parserConfig) {\n\n  var statementIndentUnit = parserConfig.statementIndentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      noIndentKeywords = parserConfig.noIndentKeywords || [],\n      multiLineStrings = parserConfig.multiLineStrings,\n      hooks = parserConfig.hooks || {};\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  /**\n   * Keywords from IEEE 1800-2012\n   */\n  var keywords = words(\n    \"accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind \" +\n      \"bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config \" +\n      \"const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable \" +\n      \"dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup \" +\n      \"endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask \" +\n      \"enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin \" +\n      \"function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import \" +\n      \"incdir include initial inout input inside instance int integer interconnect interface intersect join join_any \" +\n      \"join_none large let liblist library local localparam logic longint macromodule matches medium modport module \" +\n      \"nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed \" +\n      \"parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup \" +\n      \"pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg \" +\n      \"reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime \" +\n      \"s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify \" +\n      \"specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on \" +\n      \"table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior \" +\n      \"trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void \" +\n      \"wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor\");\n\n  /** Operators from IEEE 1800-2012\n      unary_operator ::=\n      + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n      binary_operator ::=\n      + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **\n      | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<\n      | -> | <->\n      inc_or_dec_operator ::= ++ | --\n      unary_module_path_operator ::=\n      ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n      binary_module_path_operator ::=\n      == | != | && | || | & | | | ^ | ^~ | ~^\n  */\n  var isOperatorChar = /[\\+\\-\\*\\/!~&|^%=?:]/;\n  var isBracketChar = /[\\[\\]{}()]/;\n\n  var unsignedNumber = /\\d[0-9_]*/;\n  var decimalLiteral = /\\d*\\s*'s?d\\s*\\d[0-9_]*/i;\n  var binaryLiteral = /\\d*\\s*'s?b\\s*[xz01][xz01_]*/i;\n  var octLiteral = /\\d*\\s*'s?o\\s*[xz0-7][xz0-7_]*/i;\n  var hexLiteral = /\\d*\\s*'s?h\\s*[0-9a-fxz?][0-9a-fxz?_]*/i;\n  var realLiteral = /(\\d[\\d_]*(\\.\\d[\\d_]*)?E-?[\\d_]+)|(\\d[\\d_]*\\.\\d[\\d_]*)/i;\n\n  var closingBracketOrWord = /^((\\w+)|[)}\\]])/;\n  var closingBracket = /[)}\\]]/;\n\n  var curPunc;\n  var curKeyword;\n\n  // Block openings which are closed by a matching keyword in the form of (\"end\" + keyword)\n  // E.g. \"task\" => \"endtask\"\n  var blockKeywords = words(\n    \"case checker class clocking config function generate interface module package \" +\n      \"primitive program property specify sequence table task\"\n  );\n\n  // Opening/closing pairs\n  var openClose = {};\n  for (var keyword in blockKeywords) {\n    openClose[keyword] = \"end\" + keyword;\n  }\n  openClose[\"begin\"] = \"end\";\n  openClose[\"casex\"] = \"endcase\";\n  openClose[\"casez\"] = \"endcase\";\n  openClose[\"do\"   ] = \"while\";\n  openClose[\"fork\" ] = \"join;join_any;join_none\";\n  openClose[\"covergroup\"] = \"endgroup\";\n\n  for (var i in noIndentKeywords) {\n    var keyword = noIndentKeywords[i];\n    if (openClose[keyword]) {\n      openClose[keyword] = undefined;\n    }\n  }\n\n  // Keywords which open statements that are ended with a semi-colon\n  var statementKeywords = words(\"always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while\");\n\n  function tokenBase(stream, state) {\n    var ch = stream.peek(), style;\n    if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;\n    if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false)\n      return style;\n\n    if (/[,;:\\.]/.test(ch)) {\n      curPunc = stream.next();\n      return null;\n    }\n    if (isBracketChar.test(ch)) {\n      curPunc = stream.next();\n      return \"bracket\";\n    }\n    // Macros (tick-defines)\n    if (ch == '`') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return \"def\";\n      } else {\n        return null;\n      }\n    }\n    // System calls\n    if (ch == '$') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return \"meta\";\n      } else {\n        return null;\n      }\n    }\n    // Time literals\n    if (ch == '#') {\n      stream.next();\n      stream.eatWhile(/[\\d_.]/);\n      return \"def\";\n    }\n    // Strings\n    if (ch == '\"') {\n      stream.next();\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    // Comments\n    if (ch == \"/\") {\n      stream.next();\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      stream.backUp(1);\n    }\n\n    // Numeric literals\n    if (stream.match(realLiteral) ||\n        stream.match(decimalLiteral) ||\n        stream.match(binaryLiteral) ||\n        stream.match(octLiteral) ||\n        stream.match(hexLiteral) ||\n        stream.match(unsignedNumber) ||\n        stream.match(realLiteral)) {\n      return \"number\";\n    }\n\n    // Operators\n    if (stream.eatWhile(isOperatorChar)) {\n      return \"meta\";\n    }\n\n    // Keywords / plain variables\n    if (stream.eatWhile(/[\\w\\$_]/)) {\n      var cur = stream.current();\n      if (keywords[cur]) {\n        if (openClose[cur]) {\n          curPunc = \"newblock\";\n        }\n        if (statementKeywords[cur]) {\n          curPunc = \"newstatement\";\n        }\n        curKeyword = cur;\n        return \"keyword\";\n      }\n      return \"variable\";\n    }\n\n    stream.next();\n    return null;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    var c = new Context(indent, col, type, null, state.context);\n    return state.context = c;\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\") {\n      state.indented = state.context.indented;\n    }\n    return state.context = state.context.prev;\n  }\n\n  function isClosing(text, contextClosing) {\n    if (text == contextClosing) {\n      return true;\n    } else {\n      // contextClosing may be multiple keywords separated by ;\n      var closingKeywords = contextClosing.split(\";\");\n      for (var i in closingKeywords) {\n        if (text == closingKeywords[i]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  function buildElectricInputRegEx() {\n    // Reindentation should occur on any bracket char: {}()[]\n    // or on a match of any of the block closing keywords, at\n    // the end of a line\n    var allClosings = [];\n    for (var i in openClose) {\n      if (openClose[i]) {\n        var closings = openClose[i].split(\";\");\n        for (var j in closings) {\n          allClosings.push(closings[j]);\n        }\n      }\n    }\n    var re = new RegExp(\"[{}()\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n    return re;\n  }\n\n  // Interface\n  return {\n    name: \"verilog\",\n\n    startState: function(indentUnit) {\n      var state = {\n        tokenize: null,\n        context: new Context(-indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n      if (hooks.startState) hooks.startState(state);\n      return state;\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (hooks.token) {\n        // Call hook, with an optional return value of a style to override verilog styling.\n        var style = hooks.token(stream, state);\n        if (style !== undefined) {\n          return style;\n        }\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      curKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\" || style == \"variable\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == ctx.type) {\n        popContext(state);\n      } else if ((curPunc == \";\" && ctx.type == \"statement\") ||\n                 (ctx.type && isClosing(curKeyword, ctx.type))) {\n        ctx = popContext(state);\n        while (ctx && ctx.type == \"statement\") ctx = popContext(state);\n      } else if (curPunc == \"{\") {\n        pushContext(state, stream.column(), \"}\");\n      } else if (curPunc == \"[\") {\n        pushContext(state, stream.column(), \"]\");\n      } else if (curPunc == \"(\") {\n        pushContext(state, stream.column(), \")\");\n      } else if (ctx && ctx.type == \"endcase\" && curPunc == \":\") {\n        pushContext(state, stream.column(), \"statement\");\n      } else if (curPunc == \"newstatement\") {\n        pushContext(state, stream.column(), \"statement\");\n      } else if (curPunc == \"newblock\") {\n        if (curKeyword == \"function\" && ctx && (ctx.type == \"statement\" || ctx.type == \"endgroup\")) {\n          // The 'function' keyword can appear in some other contexts where it actually does not\n          // indicate a function (import/export DPI and covergroup definitions).\n          // Do nothing in this case\n        } else if (curKeyword == \"task\" && ctx && ctx.type == \"statement\") {\n          // Same thing for task\n        } else {\n          var close = openClose[curKeyword];\n          pushContext(state, stream.column(), close);\n        }\n      }\n\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return null;\n      if (hooks.indent) {\n        var fromHook = hooks.indent(state);\n        if (fromHook >= 0) return fromHook;\n      }\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = false;\n      var possibleClosing = textAfter.match(closingBracketOrWord);\n      if (possibleClosing)\n        closing = isClosing(possibleClosing[0], ctx.type);\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit || cx.unit);\n      else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);\n      else if (ctx.type == \")\" && !closing) return ctx.indented + (statementIndentUnit || cx.unit);\n      else return ctx.indented + (closing ? 0 : cx.unit);\n    },\n\n    languageData: {\n      indentOnInput: buildElectricInputRegEx(),\n      commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n    }\n  };\n};\n\nexport const verilog = mkVerilog({})\n\n// TL-Verilog mode.\n// See tl-x.org for language spec.\n// See the mode in action at makerchip.com.\n// Contact: steve.hoover@redwoodeda.com\n\n// TLV Identifier prefixes.\n// Note that sign is not treated separately, so \"+/-\" versions of numeric identifiers\n// are included.\nvar tlvIdentifierStyle = {\n  \"|\": \"link\",\n  \">\": \"property\",  // Should condition this off for > TLV 1c.\n  \"$\": \"variable\",\n  \"$$\": \"variable\",\n  \"?$\": \"qualifier\",\n  \"?*\": \"qualifier\",\n  \"-\": \"contentSeparator\",\n  \"/\": \"property\",\n  \"/-\": \"property\",\n  \"@\": \"variableName.special\",\n  \"@-\": \"variableName.special\",\n  \"@++\": \"variableName.special\",\n  \"@+=\": \"variableName.special\",\n  \"@+=-\": \"variableName.special\",\n  \"@--\": \"variableName.special\",\n  \"@-=\": \"variableName.special\",\n  \"%+\": \"tag\",\n  \"%-\": \"tag\",\n  \"%\": \"tag\",\n  \">>\": \"tag\",\n  \"<<\": \"tag\",\n  \"<>\": \"tag\",\n  \"#\": \"tag\",  // Need to choose a style for this.\n  \"^\": \"attribute\",\n  \"^^\": \"attribute\",\n  \"^!\": \"attribute\",\n  \"*\": \"variable\",\n  \"**\": \"variable\",\n  \"\\\\\": \"keyword\",\n  \"\\\"\": \"comment\"\n};\n\n// Lines starting with these characters define scope (result in indentation).\nvar tlvScopePrefixChars = {\n  \"/\": \"beh-hier\",\n  \">\": \"beh-hier\",\n  \"-\": \"phys-hier\",\n  \"|\": \"pipe\",\n  \"?\": \"when\",\n  \"@\": \"stage\",\n  \"\\\\\": \"keyword\"\n};\nvar tlvIndentUnit = 3;\nvar tlvTrackStatements = false;\nvar tlvIdentMatch = /^([~!@#\\$%\\^&\\*-\\+=\\?\\/\\\\\\|'\"<>]+)([\\d\\w_]*)/;  // Matches an identifier.\n// Note that ':' is excluded, because of it's use in [:].\nvar tlvLineIndentationMatch = /^[! ] */;\nvar tlvCommentMatch = /^\\/[\\/\\*]/;\n\nexport const tlv = mkVerilog({\n  hooks: {\n    electricInput: false,\n\n    // Return undefined for verilog tokenizing, or style for TLV token (null not used).\n    // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting\n    // can be enabled with the definition of cm-tlv-* styles, including highlighting for:\n    //   - M4 tokens\n    //   - TLV scope indentation\n    //   - Statement delimitation (enabled by tlvTrackStatements)\n    token: function(stream, state) {\n      var style = undefined;\n      var match;  // Return value of pattern matches.\n\n      // Set highlighting mode based on code region (TLV or SV).\n      if (stream.sol() && ! state.tlvInBlockComment) {\n        // Process region.\n        if (stream.peek() == '\\\\') {\n          style = \"def\";\n          stream.skipToEnd();\n          if (stream.string.match(/\\\\SV/)) {\n            state.tlvCodeActive = false;\n          } else if (stream.string.match(/\\\\TLV/)){\n            state.tlvCodeActive = true;\n          }\n        }\n        // Correct indentation in the face of a line prefix char.\n        if (state.tlvCodeActive && stream.pos == 0 &&\n            (state.indented == 0) && (match = stream.match(tlvLineIndentationMatch, false))) {\n          state.indented = match[0].length;\n        }\n\n        // Compute indentation state:\n        //   o Auto indentation on next line\n        //   o Indentation scope styles\n        var indented = state.indented;\n        var depth = indented / tlvIndentUnit;\n        if (depth <= state.tlvIndentationStyle.length) {\n          // not deeper than current scope\n\n          var blankline = stream.string.length == indented;\n          var chPos = depth * tlvIndentUnit;\n          if (chPos < stream.string.length) {\n            var bodyString = stream.string.slice(chPos);\n            var ch = bodyString[0];\n            if (tlvScopePrefixChars[ch] && ((match = bodyString.match(tlvIdentMatch)) &&\n                                            tlvIdentifierStyle[match[1]])) {\n              // This line begins scope.\n              // Next line gets indented one level.\n              indented += tlvIndentUnit;\n              // Style the next level of indentation (except non-region keyword identifiers,\n              //   which are statements themselves)\n              if (!(ch == \"\\\\\" && chPos > 0)) {\n                state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];\n                if (tlvTrackStatements) {state.statementComment = false;}\n                depth++;\n              }\n            }\n          }\n          // Clear out deeper indentation levels unless line is blank.\n          if (!blankline) {\n            while (state.tlvIndentationStyle.length > depth) {\n              state.tlvIndentationStyle.pop();\n            }\n          }\n        }\n        // Set next level of indentation.\n        state.tlvNextIndent = indented;\n      }\n\n      if (state.tlvCodeActive) {\n        // Highlight as TLV.\n\n        var beginStatement = false;\n        if (tlvTrackStatements) {\n          // This starts a statement if the position is at the scope level\n          // and we're not within a statement leading comment.\n          beginStatement =\n            (stream.peek() != \" \") &&   // not a space\n            (style === undefined) &&    // not a region identifier\n            !state.tlvInBlockComment && // not in block comment\n            //!stream.match(tlvCommentMatch, false) && // not comment start\n          (stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit);  // at scope level\n          if (beginStatement) {\n            if (state.statementComment) {\n              // statement already started by comment\n              beginStatement = false;\n            }\n            state.statementComment =\n              stream.match(tlvCommentMatch, false); // comment start\n          }\n        }\n\n        var match;\n        if (style !== undefined) {\n        } else if (state.tlvInBlockComment) {\n          // In a block comment.\n          if (stream.match(/^.*?\\*\\//)) {\n            // Exit block comment.\n            state.tlvInBlockComment = false;\n            if (tlvTrackStatements && !stream.eol()) {\n              // Anything after comment is assumed to be real statement content.\n              state.statementComment = false;\n            }\n          } else {\n            stream.skipToEnd();\n          }\n          style = \"comment\";\n        } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {\n          // Start comment.\n          if (match[0] == \"//\") {\n            // Line comment.\n            stream.skipToEnd();\n          } else {\n            // Block comment.\n            state.tlvInBlockComment = true;\n          }\n          style = \"comment\";\n        } else if (match = stream.match(tlvIdentMatch)) {\n          // looks like an identifier (or identifier prefix)\n          var prefix = match[1];\n          var mnemonic = match[2];\n          if (// is identifier prefix\n            tlvIdentifierStyle.hasOwnProperty(prefix) &&\n              // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)\n            (mnemonic.length > 0 || stream.eol())) {\n            style = tlvIdentifierStyle[prefix];\n          } else {\n            // Just swallow one character and try again.\n            // This enables subsequent identifier match with preceding symbol character, which\n            //   is legal within a statement.  (Eg, !$reset).  It also enables detection of\n            //   comment start with preceding symbols.\n            stream.backUp(stream.current().length - 1);\n          }\n        } else if (stream.match(/^\\t+/)) {\n          // Highlight tabs, which are illegal.\n          style = \"invalid\";\n        } else if (stream.match(/^[\\[\\]{}\\(\\);\\:]+/)) {\n          // [:], (), {}, ;.\n          style = \"meta\";\n        } else if (match = stream.match(/^[mM]4([\\+_])?[\\w\\d_]*/)) {\n          // m4 pre proc\n          style = (match[1] == \"+\") ? \"keyword.special\" : \"keyword\";\n        } else if (stream.match(/^ +/)){\n          // Skip over spaces.\n          if (stream.eol()) {\n            // Trailing spaces.\n            style = \"error\";\n          }\n        } else if (stream.match(/^[\\w\\d_]+/)) {\n          // alpha-numeric token.\n          style = \"number\";\n        } else {\n          // Eat the next char w/ no formatting.\n          stream.next();\n        }\n      } else {\n        if (stream.match(/^[mM]4([\\w\\d_]*)/)) {\n          // m4 pre proc\n          style = \"keyword\";\n        }\n      }\n      return style;\n    },\n\n    indent: function(state) {\n      return (state.tlvCodeActive == true) ? state.tlvNextIndent : -1;\n    },\n\n    startState: function(state) {\n      state.tlvIndentationStyle = [];  // Styles to use for each level of indentation.\n      state.tlvCodeActive = true;  // True when we're in a TLV region (and at beginning of file).\n      state.tlvNextIndent = -1;    // The number of spaces to autoindent the next line if tlvCodeActive.\n      state.tlvInBlockComment = false;  // True inside /**/ comment.\n      if (tlvTrackStatements) {\n        state.statementComment = false;  // True inside a statement's header comment.\n      }\n    }\n\n  }\n});\n"],"names":["mkVerilog","parserConfig","curPunc","curKeyword","statementIndentUnit","dontAlignCalls","noIndentKeywords","multiLineStrings","hooks","words","str","obj","split","i","length","keywords","isOperatorChar","isBracketChar","unsignedNumber","decimalLiteral","binaryLiteral","octLiteral","hexLiteral","realLiteral","closingBracketOrWord","closingBracket","blockKeywords","openClose","keyword","undefined","statementKeywords","tokenBase","stream","state","style","ch","peek","test","next","eatWhile","tokenize","escaped","end","eat","tokenComment","skipToEnd","backUp","match","cur","current","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","c","context","popContext","t","isClosing","text","contextClosing","closingKeywords","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","close","indent","textAfter","cx","fromHook","firstChar","charAt","closing","possibleClosing","unit","languageData","indentOnInput","buildElectricInputRegEx","allClosings","closings","j","push","join","commentTokens","line","block","open","verilog","tlvIdentifierStyle","tlvScopePrefixChars","tlvIdentMatch","tlvLineIndentationMatch","tlvCommentMatch","tlv","electricInput","tlvInBlockComment","string","tlvCodeActive","pos","depth","tlvIndentationStyle","blankline","chPos","bodyString","slice","pop","tlvNextIndent","prefix","mnemonic","hasOwnProperty","eol"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::MembershipUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::MembershipUpdate`.

class Hydro::Schemas::Github::V1::MembershipUpdate
  sig do
    params(
      action: T.nilable(T.any(Symbol, Integer)),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      context: T.nilable(T.any(Symbol, Integer)),
      customer_id: T.nilable(Integer),
      group_id: T.nilable(Integer),
      reason: T.nilable(T.any(Symbol, Integer)),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(action: nil, actor: nil, context: nil, customer_id: nil, group_id: nil, reason: nil, request_context: nil, user: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_context; end

  sig { void }
  def clear_customer_id; end

  sig { void }
  def clear_group_id; end

  sig { void }
  def clear_reason; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_user; end

  sig { returns(T.any(Symbol, Integer)) }
  def context; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def context=(value); end

  sig { returns(Integer) }
  def customer_id; end

  sig { params(value: Integer).void }
  def customer_id=(value); end

  sig { returns(Integer) }
  def group_id; end

  sig { params(value: Integer).void }
  def group_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def reason; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def reason=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end
end

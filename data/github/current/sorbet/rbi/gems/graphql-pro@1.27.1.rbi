# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `graphql-pro` gem.
# Please instead update this file by running `bin/tapioca gem graphql-pro`.

# source://graphql-pro//lib/graphql/pro/operation_store.rb#4
module GraphQL
  class << self
    # source://graphql/2.0.29/lib/graphql.rb#35
    def default_parser; end

    # source://graphql/2.0.29/lib/graphql.rb#39
    def default_parser=(_arg0); end

    # source://graphql/2.0.29/lib/graphql.rb#45
    def parse(graphql_string, trace: T.unsafe(nil)); end

    # source://graphql/2.0.29/lib/graphql.rb#52
    def parse_file(filename); end

    # source://graphql/2.0.29/lib/graphql.rb#62
    def parse_with_racc(string, filename: T.unsafe(nil), trace: T.unsafe(nil)); end

    # source://graphql/2.0.29/lib/graphql.rb#58
    def scan(graphql_string); end

    # source://graphql/2.0.29/lib/graphql.rb#66
    def scan_with_ruby(graphql_string); end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store.rb#5
module GraphQL::Pro; end

# source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#6
class GraphQL::Pro::AblySubscriptions < ::GraphQL::Pro::Subscriptions
  # @param cipher_base [String] If provided, it's combined with `subscription_id` to make a cipher key for Ably's end-to-end encryption.
  # @return [AblySubscriptions] a new instance of AblySubscriptions
  #
  # source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#10
  def initialize(ably:, schema:, redis: T.unsafe(nil), connection_pool: T.unsafe(nil), cipher_base: T.unsafe(nil), **rest); end

  # Returns the value of attribute ably.
  #
  # source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#7
  def ably; end

  # Override this method to add a prefix when a cipher should be used for this subscription.
  # That way, we can tell which subscriptions need a cipher by the subscription ID alone.
  #
  # source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#24
  def build_id; end

  # source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#39
  def deliver(subscription_id, result); end

  # source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#16
  def execute_all(event, object); end

  # Override this method to add the cipher key to
  # context so it can be returned in a header.
  #
  # source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#30
  def write_subscription(query, events); end

  private

  # Return the channel for this `subscription_id`,
  # with `cipher` configuration added if appropriate.
  #
  # @return [Ably::Rest::Channel]
  #
  # source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#65
  def channel_for(subscription_id); end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#56
  def still_subscribed?(subscription_id); end

  # Make a per-subscription cipher key, using the configured `cipher_base:`
  #
  # source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#75
  def to_cipher_key(subscription_id); end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#79
  def use_cipher?(subscription_id); end
end

# source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#20
GraphQL::Pro::AblySubscriptions::ENCRYPTED_PREFIX = T.let(T.unsafe(nil), String)

# Receive webhooks from Ably to remove items from the DB
#
# @api private
#
# source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#86
class GraphQL::Pro::AblySubscriptions::WebhooksClient < ::GraphQL::Pro::Subscriptions::WebhooksClient
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/ably_subscriptions.rb#87
  def call_with_schema(schema, env); end
end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#5
module GraphQL::Pro::CanCanIntegration; end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#9
class GraphQL::Pro::CanCanIntegration::ActionNotConfiguredError < ::GraphQL::Pro::CanCanIntegration::CanCanIntegrationError
  # @return [ActionNotConfiguredError] a new instance of ActionNotConfiguredError
  #
  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#10
  def initialize(owner, object); end
end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#54
module GraphQL::Pro::CanCanIntegration::ArgumentIntegration
  include ::GraphQL::Pro::CanCanIntegration::HasCanCanAction
  include ::GraphQL::Pro::CanCanIntegration::AuthorizeByAction
  include ::GraphQL::Pro::CanCanIntegration::AuthorizeArgumentByAction

  mixes_in_class_methods ::GraphQL::Pro::CanCanIntegration::HasCanCanAction

  # TODO upstream
  #
  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#62
  def default_value; end

  class << self
    # @private
    #
    # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#55
    def included(arg_class); end
  end
end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#75
module GraphQL::Pro::CanCanIntegration::AuthorizeArgumentByAction
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#76
  def authorized_as_type?(object, value, ctx, as_type:); end
end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#215
module GraphQL::Pro::CanCanIntegration::AuthorizeByAction
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#216
  def authorized?(object, args_or_ctx, context = T.unsafe(nil)); end
end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#258
module GraphQL::Pro::CanCanIntegration::AuthorizeResolverByAction
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#259
  def ready?(**inputs); end

  # @raise [GraphQL::UnauthorizedError]
  #
  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#267
  def unauthorized_by_can_can(owner, value); end
end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#6
class GraphQL::Pro::CanCanIntegration::CanCanIntegrationError < ::GraphQL::Error; end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#46
module GraphQL::Pro::CanCanIntegration::FieldIntegration
  include ::GraphQL::Pro::CanCanIntegration::HasCanCanAction
  include ::GraphQL::Pro::CanCanIntegration::AuthorizeByAction

  mixes_in_class_methods ::GraphQL::Pro::CanCanIntegration::HasCanCanAction

  class << self
    # @private
    #
    # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#47
    def included(field_class); end
  end
end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#101
module GraphQL::Pro::CanCanIntegration::HasCanCanAction
  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#104
  def initialize(*args, can_can_action: T.unsafe(nil), can_can_subject: T.unsafe(nil), can_can_attribute: T.unsafe(nil), **kwargs, &block); end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#174
  def authorized_by_can_can_action?(object, context); end

  # Get or set the action for this part of the schema
  #
  # @param new_action [Symbol, nil] If provided, set the action for this part of the schema
  # @param The [Symbol, nil] configured action
  #
  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#123
  def can_can_action(new_action = T.unsafe(nil)); end

  # Get or set the attribute for this part of the schema
  #
  # @param new_attribute [Symbol, nil] If provided, set the attribute for this part of the schema
  # @param The [Symbol, nil] configured attribute
  #
  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#140
  def can_can_attribute(new_attribute = T.unsafe(nil)); end

  # Get or set an override `subject` for CanCan (instead of `object`)
  #
  # A setting of `false` will be ignored.
  #
  # @param new_subject [Object] Something to use instead of `object` when authorizing
  # @return [Object] The configured override, or `false` if nothing was set
  #
  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#160
  def can_can_subject(new_subject = T.unsafe(nil)); end

  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#206
  def get_can_can_ability(context); end
end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#102
GraphQL::Pro::CanCanIntegration::HasCanCanAction::NO_ACTION = T.let(T.unsafe(nil), Object)

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#119
GraphQL::Pro::CanCanIntegration::HasCanCanAction::READING_ACTION = T.let(T.unsafe(nil), Object)

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#37
module GraphQL::Pro::CanCanIntegration::InterfaceIntegration
  class << self
    # @private
    #
    # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#38
    def included(interface_module); end
  end
end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#73
GraphQL::Pro::CanCanIntegration::MutationIntegration = GraphQL::Pro::CanCanIntegration::ResolverIntegration

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#22
module GraphQL::Pro::CanCanIntegration::ObjectIntegration
  mixes_in_class_methods ::GraphQL::Pro::CanCanIntegration::HasCanCanAction
  mixes_in_class_methods ::GraphQL::Pro::CanCanIntegration::AuthorizeByAction
  mixes_in_class_methods ::GraphQL::Pro::CanCanIntegration::ScopeByAccessibleBy

  class << self
    # @private
    #
    # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#23
    def included(obj_class); end
  end
end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#65
module GraphQL::Pro::CanCanIntegration::ResolverIntegration
  include ::GraphQL::Pro::CanCanIntegration::HasCanCanAction
  include ::GraphQL::Pro::CanCanIntegration::AuthorizeResolverByAction

  mixes_in_class_methods ::GraphQL::Pro::CanCanIntegration::HasCanCanAction

  class << self
    # @private
    #
    # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#66
    def included(resolver_class); end
  end
end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#237
module GraphQL::Pro::CanCanIntegration::ScopeByAccessibleBy
  # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#238
  def scope_items(items, context); end
end

# source://graphql-pro//lib/graphql/pro/can_can_integration.rb#30
module GraphQL::Pro::CanCanIntegration::UnionIntegration
  mixes_in_class_methods ::GraphQL::Pro::CanCanIntegration::HasCanCanAction
  mixes_in_class_methods ::GraphQL::Pro::CanCanIntegration::ScopeByAccessibleBy

  class << self
    # @private
    #
    # source://graphql-pro//lib/graphql/pro/can_can_integration.rb#31
    def included(union_class); end
  end
end

# An in-browser UI for a GraphQL system
#
# @example Mounting in a Rails app
#   mount GraphQL::Pro::Dashboard.new(schema: MyAppSchema), at: "/graphql/dashboard"
#
# source://graphql-pro//lib/graphql/pro/dashboard/context.rb#6
class GraphQL::Pro::Dashboard
  # @return [Dashboard] a new instance of Dashboard
  #
  # source://graphql-pro//lib/graphql/pro/dashboard.rb#34
  def initialize(schema: T.unsafe(nil), schema_class_name: T.unsafe(nil)); end

  # source://graphql-pro//lib/graphql/pro/dashboard.rb#48
  def call(env); end

  # Returns the value of attribute components.
  #
  # source://graphql-pro//lib/graphql/pro/dashboard.rb#60
  def components; end

  # Better rendering in Rails Routes output
  #
  # source://graphql-pro//lib/graphql/pro/dashboard.rb#63
  def inspect; end

  private

  # source://graphql-pro//lib/graphql/pro/dashboard.rb#69
  def load_components; end

  # Merge component's routes into prev_routes,
  # modifying the prev_routes hash.
  #
  # source://graphql-pro//lib/graphql/pro/dashboard.rb#99
  def merge_routes!(prev_routes, component); end

  class << self
    # Returns the value of attribute component_classes.
    #
    # source://graphql-pro//lib/graphql/pro/dashboard.rb#26
    def component_classes; end

    # source://graphql-pro//lib/graphql/pro/dashboard.rb#20
    def register_component(component_class); end
  end
end

# Base views for the ui
#
# source://graphql-pro//lib/graphql/pro/dashboard/application_component.rb#6
class GraphQL::Pro::Dashboard::ApplicationComponent < ::GraphQL::Pro::Dashboard::Component
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/application_component.rb#7
  def enabled?; end

  # source://graphql-pro//lib/graphql/pro/dashboard/application_component.rb#20
  def home(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/application_component.rb#46
  def inactive_component(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/application_component.rb#31
  def no_components(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/application_component.rb#39
  def not_found(request:); end
end

# Different features of the UI are added as components
# The component has:
# - view methods that prepare data
# - templates that render data
#
# source://graphql-pro//lib/graphql/pro/dashboard/component.rb#9
class GraphQL::Pro::Dashboard::Component
  # @return [Component] a new instance of Component
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#10
  def initialize(schema:); end

  # Invoke the view method for `name`
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#32
  def call_view(name, request:); end

  # Feature detection; returns true if configured
  #
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#52
  def enabled?; end

  # The first GET path is the home of this component
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#42
  def home_path; end

  # The class name, without namespaces
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#47
  def name; end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#90
  def page_param(params); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#86
  def per_page_param(params); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#94
  def redirect_to(path, params: T.unsafe(nil)); end

  # Based on self.class.routes Hash
  # { Method => { Path => Route} }
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#18
  def routes; end

  # Returns the value of attribute schema.
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#14
  def schema; end

  # Directory where templates may be found
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#37
  def template_path; end

  class << self
    # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#60
    def configure_routes(routes_hash); end

    # Assign a Hash of { "METHOD" => { "path/to" => :method_name } }
    #
    # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#58
    def routes; end

    # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#75
    def template_path; end

    # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#79
    def template_path_from(component_file_path); end
  end
end

# source://graphql-pro//lib/graphql/pro/dashboard/context.rb#7
class GraphQL::Pro::Dashboard::Context
  # @return [Context] a new instance of Context
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/context.rb#8
  def initialize(locals:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def client_delete_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def client_manage_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def client_operations_archive_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def client_operations_archived_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def client_operations_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def client_operations_unarchive_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def client_save_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def clients_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def home_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def inactive_component_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def limiter_show_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def limiter_toggle_soft_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/context.rb#39
  def link_to(text, path, opts = T.unsafe(nil)); end

  # source://graphql-pro//lib/graphql/pro/dashboard/context.rb#69
  def localize_date(datetimeish); end

  # source://graphql-pro//lib/graphql/pro/dashboard/context.rb#27
  def method_missing(method_name, *args); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def no_components_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def not_found_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def operation_archive_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def operation_delete_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def operation_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def operation_unarchive_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def operations_archive_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def operations_archived_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def operations_index_entry_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def operations_index_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def operations_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def operations_unarchive_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/context.rb#61
  def pluralize(word, count); end

  # When mounted in a Rails app,
  # this will include the mount prefix
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/context.rb#15
  def prefixed_path(path); end

  # source://graphql-pro//lib/graphql/pro/dashboard/context.rb#50
  def render_partial(name); end

  # source://graphql-pro//lib/graphql/pro/dashboard/context.rb#19
  def static_path(file_name); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def subscriptions_clear_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def subscriptions_show_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/context.rb#23
  def to_binding; end

  # source://graphql-pro//lib/graphql/pro/dashboard/context.rb#54
  def to_query_string(params); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def topics_index_path(**kwargs); end

  # source://graphql-pro//lib/graphql/pro/dashboard/component.rb#65
  def topics_show_path(**kwargs); end

  private

  # source://graphql-pro//lib/graphql/pro/dashboard/context.rb#90
  def interpolate_path_args(path, kwargs); end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/context.rb#35
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# source://graphql-pro//lib/graphql/pro/dashboard/dispatcher.rb#5
class GraphQL::Pro::Dashboard::Dispatcher
  # @return [Dispatcher] a new instance of Dispatcher
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/dispatcher.rb#6
  def initialize(routes); end

  # source://graphql-pro//lib/graphql/pro/dashboard/dispatcher.rb#19
  def dispatch(request); end

  private

  # Build up the routing table
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/dispatcher.rb#128
  def add_route(method, path, to:); end

  # Find the Route object that matches this reqest
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/dispatcher.rb#36
  def get_route(request_method, relative_path); end

  # source://graphql-pro//lib/graphql/pro/dashboard/dispatcher.rb#120
  def render_inactive_component(component, request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/dispatcher.rb#112
  def render_not_found(request:); end

  # Given a Route:
  # - call the corresponding method with the right args
  # - render the ERB template
  # - also, handle 404 and redirects here
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/dispatcher.rb#67
  def render_view(route, request:, locals: T.unsafe(nil)); end
end

# source://graphql-pro//lib/graphql/pro/dashboard/limiter_component.rb#6
class GraphQL::Pro::Dashboard::LimiterComponent < ::GraphQL::Pro::Dashboard::Component
  # source://graphql-pro//lib/graphql/pro/dashboard/limiter_component.rb#18
  def doc_url; end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/limiter_component.rb#9
  def enabled?; end

  # source://graphql-pro//lib/graphql/pro/dashboard/limiter_component.rb#31
  def home_path; end

  # source://graphql-pro//lib/graphql/pro/dashboard/limiter_component.rb#47
  def limiter_show(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/limiter_component.rb#36
  def limiter_toggle_soft(request:); end

  private

  # source://graphql-pro//lib/graphql/pro/dashboard/limiter_component.rb#88
  def limiter_for(name); end
end

# source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#5
class GraphQL::Pro::Dashboard::OperationStoreComponent < ::GraphQL::Pro::Dashboard::Component
  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#71
  def client_delete(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#77
  def client_manage(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#63
  def client_operations(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#200
  def client_operations_archive(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#67
  def client_operations_archived(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#204
  def client_operations_unarchive(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#106
  def client_save(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#41
  def clients(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#12
  def doc_url; end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#6
  def enabled?; end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#122
  def operation(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#208
  def operation_archive(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#116
  def operation_delete(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#213
  def operation_unarchive(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#146
  def operations(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#192
  def operations_archive(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#150
  def operations_archived(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#154
  def operations_index(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#178
  def operations_index_entry(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#196
  def operations_unarchive(request:); end

  private

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#220
  def client_operations_archival_change(request:, is_archived:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#279
  def list_client_operations(request:, is_archived:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#247
  def list_operations(request:, is_archived:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#237
  def operations_archival_change(request:, is_archived:, redirect_to_path:); end

  # @return [String] no valiation applied
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#322
  def order_by_param(params); end

  # @return [Symbol] `:asc` or `:desc`
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/operation_store_component.rb#327
  def order_dir_param(params); end
end

# source://graphql-pro//lib/graphql/pro/dashboard/route.rb#5
class GraphQL::Pro::Dashboard::Route
  # @return [Route] a new instance of Route
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/route.rb#7
  def initialize(path:, view:, component:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/route.rb#13
  def ==(other); end

  # Returns the value of attribute component.
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/route.rb#6
  def component; end

  # Returns the value of attribute path.
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/route.rb#6
  def path; end

  # Returns the value of attribute view.
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/route.rb#6
  def view; end
end

# source://graphql-pro//lib/graphql/pro/dashboard/subscriptions_component.rb#5
class GraphQL::Pro::Dashboard::SubscriptionsComponent < ::GraphQL::Pro::Dashboard::Component
  # source://graphql-pro//lib/graphql/pro/dashboard/subscriptions_component.rb#23
  def doc_url; end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/dashboard/subscriptions_component.rb#6
  def enabled?; end

  # source://graphql-pro//lib/graphql/pro/dashboard/subscriptions_component.rb#77
  def subscriptions_clear(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/subscriptions_component.rb#43
  def subscriptions_show(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/subscriptions_component.rb#27
  def topics_index(request:); end

  # source://graphql-pro//lib/graphql/pro/dashboard/subscriptions_component.rb#54
  def topics_show(request:); end
end

# source://graphql-pro//lib/graphql/pro/dashboard/template.rb#7
module GraphQL::Pro::Dashboard::Template
  class << self
    # source://graphql-pro//lib/graphql/pro/dashboard/template.rb#10
    def render(route_or_template, locals:, layout: T.unsafe(nil)); end
  end
end

# source://graphql-pro//lib/graphql/pro/dashboard/template.rb#8
GraphQL::Pro::Dashboard::Template::TEMPLATE_HOME = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/defer.rb#6
class GraphQL::Pro::Defer < ::GraphQL::Schema::Directive
  extend ::GraphQL::Schema::Member::HasArguments::ClassConfigured::InheritedArguments

  class << self
    # source://graphql/2.0.29/lib/graphql/schema/member/has_arguments.rb#68
    def load_if(value, _context = T.unsafe(nil)); end

    # source://graphql/2.0.29/lib/graphql/schema/member/has_arguments.rb#68
    def load_label(value, _context = T.unsafe(nil)); end

    # source://graphql-pro//lib/graphql/pro/defer.rb#22
    def resolve(object, arguments, context, &block); end

    # source://graphql-pro//lib/graphql/pro/defer.rb#32
    def use(schema); end
  end
end

# source://graphql-pro//lib/graphql/pro/defer.rb#69
class GraphQL::Pro::Defer::Deferral
  # @return [Deferral] a new instance of Deferral
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#75
  def initialize(path:, block:, context:, label:); end

  # If success, the final GraphQL value of this deferred part
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#88
  def data; end

  # If there were any errors, an array of errors. Otherwise, `nil`.
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#94
  def errors; end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#143
  def has_next?; end

  # @return [String, nil] A unique label to identify the deferred payload
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#73
  def label; end

  # @return [Array<String, Integer>] The path to this deferred part of the query
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#71
  def path; end

  # @return [Hash] with `path:`, either `errors:` or `data:`, and `label:`, if given.
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#100
  def to_h; end

  # Create a response chunk compliant with
  # https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html.
  #
  # Meant to support Apollo Client:
  # https://www.apollographql.com/docs/react/features/defer-support.html
  #
  # It appends a final terminator if {#has_next?} is false.
  #
  # @param delimiter [String] preceeds the patch to segment the response
  # @param pretty [Boolean] if true, pretty-print the JSON for debugging
  # @return [String]
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#159
  def to_http_multipart(delimiter: T.unsafe(nil), pretty: T.unsafe(nil), first: T.unsafe(nil), incremental: T.unsafe(nil)); end

  # @return [Hash] A hash with a root `incremental:` key for the new RFC
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#123
  def to_incremental_h; end

  private

  # The result hash is mutable and will be mutated while the query runs.
  # Dup any GraphQL result that you don't want to be modified later.
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#220
  def isolate_copy(value); end

  # source://graphql-pro//lib/graphql/pro/defer.rb#167
  def resolve; end

  # source://graphql-pro//lib/graphql/pro/defer.rb#211
  def resolve_lazies(lazies); end
end

# A state manager for defered data
#
# source://graphql-pro//lib/graphql/pro/defer.rb#43
class GraphQL::Pro::Defer::Deferred
  extend ::Forwardable

  # @return [Deferred] a new instance of Deferred
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#48
  def initialize(context); end

  # @return [Array<Deferral>]
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#46
  def deferrals; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def map(*args, **_arg1, &block); end

  # Write an Apollo Client-compatibile stream to a Rails `response`.
  #
  # @param incremental [Boolean] If true, use the newer "incremental" patch format
  # @see Deferred#to_http_multipart for options
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#60
  def stream_http_multipart(response, incremental: T.unsafe(nil), delimiter: T.unsafe(nil), pretty: T.unsafe(nil)); end
end

# Acts like a deferral, but represents the root level response.
# Make sure to `isolate_copy` data and errors, because they'll
# continue receiving updates as patches are resolved.
#
# source://graphql-pro//lib/graphql/pro/defer.rb#242
class GraphQL::Pro::Defer::RootDeferral < ::GraphQL::Pro::Defer::Deferral
  # @return [RootDeferral] a new instance of RootDeferral
  #
  # source://graphql-pro//lib/graphql/pro/defer.rb#243
  def initialize(query:); end

  # source://graphql-pro//lib/graphql/pro/defer.rb#248
  def data; end

  # source://graphql-pro//lib/graphql/pro/defer.rb#252
  def errors; end

  # source://graphql-pro//lib/graphql/pro/defer.rb#256
  def to_h; end
end

# Encrypt a verision encoder and some stringified data into an opaque encoder.
#
# @example defining an encrypted encoder with a version
#   EncV1 = GraphQL::Pro::Encoder.define do
#   key("79dd3081ce51c3079077792d3d87d12d")
#   tag("v1")
#   end
#
# source://graphql-pro//lib/graphql/pro/encoder/decode_failed.rb#4
class GraphQL::Pro::Encoder
  # @return [Encoder] a new instance of Encoder
  #
  # source://graphql-pro//lib/graphql/pro/encoder.rb#38
  def initialize; end

  # Returns the value of attribute cipher.
  #
  # source://graphql-pro//lib/graphql/pro/encoder.rb#32
  def cipher; end

  # Sets the attribute cipher
  #
  # @param value the value to set the attribute cipher to.
  #
  # source://graphql-pro//lib/graphql/pro/encoder.rb#56
  def cipher=(new_cipher); end

  # source://graphql-pro//lib/graphql/pro/encoder.rb#50
  def decode(opaque_string, nonce: T.unsafe(nil)); end

  # source://graphql-pro//lib/graphql/pro/encoder.rb#44
  def encode(string_data, nonce: T.unsafe(nil)); end

  # Returns the value of attribute encoder.
  #
  # source://graphql-pro//lib/graphql/pro/encoder.rb#32
  def encoder; end

  # Sets the attribute encoder
  #
  # @param value the value to set the attribute encoder to.
  #
  # source://graphql-pro//lib/graphql/pro/encoder.rb#32
  def encoder=(_arg0); end

  # Returns the value of attribute key.
  #
  # source://graphql-pro//lib/graphql/pro/encoder.rb#32
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://graphql-pro//lib/graphql/pro/encoder.rb#32
  def key=(_arg0); end

  # Returns the value of attribute tag.
  #
  # source://graphql-pro//lib/graphql/pro/encoder.rb#32
  def tag; end

  # Sets the attribute tag
  #
  # @param value the value to set the attribute tag to.
  #
  # source://graphql-pro//lib/graphql/pro/encoder.rb#32
  def tag=(_arg0); end

  class << self
    # source://graphql-pro//lib/graphql/pro/encoder.rb#102
    def cipher(new_cipher = T.unsafe(nil)); end

    # source://graphql-pro//lib/graphql/pro/encoder.rb#97
    def decode(opaque_string, nonce: T.unsafe(nil)); end

    # source://graphql-pro//lib/graphql/pro/encoder.rb#92
    def encode(string_data, nonce: T.unsafe(nil)); end

    # source://graphql-pro//lib/graphql/pro/encoder.rb#68
    def encoder(new_encoder = T.unsafe(nil)); end

    # source://graphql-pro//lib/graphql/pro/encoder.rb#76
    def key(new_key = T.unsafe(nil)); end

    # source://graphql-pro//lib/graphql/pro/encoder.rb#84
    def tag(new_tag = T.unsafe(nil)); end

    # source://graphql-pro//lib/graphql/pro/encoder.rb#34
    def versioned(*versions); end
  end
end

# @api private
#
# source://graphql-pro//lib/graphql/pro/encoder/base_64_encoder.rb#6
module GraphQL::Pro::Encoder::Base64Encoder
  private

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/encoder/base_64_encoder.rb#16
  def decode(string); end

  # This also trims trailing `=` & newlines
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/encoder/base_64_encoder.rb#10
  def encode(bytes); end

  class << self
    # @api private
    #
    # source://graphql-pro//lib/graphql/pro/encoder/base_64_encoder.rb#16
    def decode(string); end

    # This also trims trailing `=` & newlines
    #
    # @api private
    #
    # source://graphql-pro//lib/graphql/pro/encoder/base_64_encoder.rb#10
    def encode(bytes); end
  end
end

# source://graphql-pro//lib/graphql/pro/encoder.rb#20
GraphQL::Pro::Encoder::DECODE_FAILED = GraphQL::Pro::Encoder::DecodeFailed

# source://graphql-pro//lib/graphql/pro/encoder.rb#19
GraphQL::Pro::Encoder::DEFAULT_CIPHER = T.let(T.unsafe(nil), GraphQL::Pro::Encoder::OpenSSLCipher)

# source://graphql-pro//lib/graphql/pro/encoder/decode_failed.rb#5
module GraphQL::Pro::Encoder::DecodeFailed
  class << self
    # source://graphql-pro//lib/graphql/pro/encoder/decode_failed.rb#6
    def method_missing(method_name, *args, &block); end
  end
end

# @api private
#
# source://graphql-pro//lib/graphql/pro/encoder/null_cipher.rb#6
module GraphQL::Pro::Encoder::NullCipher
  private

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/encoder/null_cipher.rb#13
  def decrypt(encoder, data, nonce); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/encoder/null_cipher.rb#9
  def encrypt(encoder, data, nonce); end

  class << self
    # @api private
    #
    # source://graphql-pro//lib/graphql/pro/encoder/null_cipher.rb#13
    def decrypt(encoder, data, nonce); end

    # @api private
    #
    # source://graphql-pro//lib/graphql/pro/encoder/null_cipher.rb#9
    def encrypt(encoder, data, nonce); end
  end
end

# @api private
#
# source://graphql-pro//lib/graphql/pro/encoder/openssl_cipher.rb#8
class GraphQL::Pro::Encoder::OpenSSLCipher
  # @api private
  # @return [OpenSSLCipher] a new instance of OpenSSLCipher
  #
  # source://graphql-pro//lib/graphql/pro/encoder/openssl_cipher.rb#9
  def initialize(cipher_name); end

  # @api private
  # @return [String]
  #
  # source://graphql-pro//lib/graphql/pro/encoder/openssl_cipher.rb#40
  def decrypt(encoder, data, nonce); end

  # @api private
  # @return [String]
  #
  # source://graphql-pro//lib/graphql/pro/encoder/openssl_cipher.rb#17
  def encrypt(encoder, data, nonce); end
end

# source://graphql-pro//lib/graphql/pro/encoder/url_safe_base_64_encoder.rb#5
module GraphQL::Pro::Encoder::UrlSafeBase64Encoder
  class << self
    # source://graphql-pro//lib/graphql/pro/encoder/url_safe_base_64_encoder.rb#10
    def decode(str); end

    # source://graphql-pro//lib/graphql/pro/encoder/url_safe_base_64_encoder.rb#6
    def encode(str); end
  end
end

# Suitable for {Schema#encoder}
#
# @api private
#
# source://graphql-pro//lib/graphql/pro/encoder/versioned_encoder.rb#7
class GraphQL::Pro::Encoder::VersionedEncoder
  # @api private
  # @return [VersionedEncoder] a new instance of VersionedEncoder
  #
  # source://graphql-pro//lib/graphql/pro/encoder/versioned_encoder.rb#8
  def initialize(versions); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/encoder/versioned_encoder.rb#17
  def decode(string_data, nonce: T.unsafe(nil)); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/encoder/versioned_encoder.rb#13
  def encode(string_data, nonce: T.unsafe(nil)); end

  # @api private
  # @return [Array(String, Encoder)] The decoded string and the encoder used to decode it
  # @return [Array(DECODE_FAILED, nil)] If no encoder could decode `string_data`
  #
  # source://graphql-pro//lib/graphql/pro/encoder/versioned_encoder.rb#23
  def versioned_decode(string_data, nonce: T.unsafe(nil)); end
end

# source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#211
class GraphQL::Pro::MySQLStableRelationConnection < ::GraphQL::Pro::StableRelationConnection
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#212
  def small_nulls?; end
end

# source://graphql-pro//lib/graphql/pro/operation_store.rb#6
class GraphQL::Pro::OperationStore
  extend ::Forwardable

  # @return [OperationStore] a new instance of OperationStore
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#86
  def initialize(schema:, trace: T.unsafe(nil), backend_class: T.unsafe(nil), default_touch_last_used_at: T.unsafe(nil), update_last_used_at_every: T.unsafe(nil), **backend_options); end

  # Ensure that `body` is registered to `client_name` as `client_alias`.
  # This may insert several records:
  #
  # - Add an operation if `body` is not found
  # - Add a client_operation if `operation_alias` is not found for this client
  #
  # Or, if all those are found, it performs no changes.
  #
  # The addition is run in a transaction. If the `add` fails,
  # the whole transaction is rolled back.
  #
  # @param body [String] GraphQL string containing one operation
  # @param client_name [String] Name of a client
  # @param operation_alias [String] This client's alias for `body`
  # @return [OperationStore::AddOperation::AddResult]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#165
  def add(body:, client_name:, operation_alias:); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def all_clients(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def all_index_entries(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def all_operations(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def archive_client_operations(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def archive_operations(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def batch_upsert_client_operations(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def create_index_references(*args, **_arg1, &block); end

  # @return [Boolean] If true, set `last_used_at` on operations and index entries whenever a query is run from the store
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#81
  def default_touch_last_used_at; end

  # @return [Boolean] If true, set `last_used_at` on operations and index entries whenever a query is run from the store
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#81
  def default_touch_last_used_at=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def delete_client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def delete_operation(*args, **_arg1, &block); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#208
  def flush_pending_last_used_ats; end

  # Find an operation which was stored by Client `client_name`
  # with the alias `operation_alias`.
  #
  # @return [OperationRecord, nil]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#146
  def get(client_name:, operation_alias:, touch_last_used_at: T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_client_operations_by_client(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_client_operations_by_digest(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_index_entries_by_digest(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_operation(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_operation_by_digest(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_operations_by_index_entry(*args, **_arg1, &block); end

  # @return [GraphQL::Pro::OperationStore::Index]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#84
  def index; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#132
  def pending_last_used_ats; end

  # Assign `query_string` and `operation_name` if `query.query_string` is null.
  # Based on `context[:operation_id]`.
  #
  # @return [void]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#220
  def populate_operation(query); end

  # Destroy the index and rebuild it from scratch
  #
  # @return [void]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#139
  def reindex; end

  # Returns the value of attribute schema.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#78
  def schema; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def supports_batch_upsert?(*args, **_arg1, &block); end

  # Log this new last_used_at to be updated later
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#115
  def touch_last_used_at(client_operation_record_id, last_used_at); end

  # @return [Boolean] if true, then this operation store installed a tracer
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#109
  def trace?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def transaction(*args, **_arg1, &block); end

  # @return [Integer] with ActiveRecord, update `last_used_at` after this many seconds
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#135
  def update_last_used_at_every; end

  # @return [Integer] with ActiveRecord, update `last_used_at` after this many seconds
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#135
  def update_last_used_at_every=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def update_last_used_ats(*args, **_arg1, &block); end

  # source://graphql-pro//lib/graphql/pro/operation_store.rb#175
  def upsert_client(name, secret); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def upsert_client_operation(*args, **_arg1, &block); end

  class << self
    # source://graphql-pro//lib/graphql/pro/operation_store.rb#248
    def debug(err: T.unsafe(nil)); end

    # source://graphql-pro//lib/graphql/pro/operation_store.rb#258
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://graphql-pro//lib/graphql/pro/operation_store.rb#268
    def logger=(_arg0); end

    # source://graphql-pro//lib/graphql/pro/operation_store.rb#48
    def use(defn, trace: T.unsafe(nil), **options); end
  end
end

# This backend receives persistence commands from OperationStore.
# You can extend it or use it as inspiration for another backend.
#
# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_operation_store_model.rb#6
class GraphQL::Pro::OperationStore::ActiveRecordBackend
  # @return [ActiveRecordBackend] a new instance of ActiveRecordBackend
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#19
  def initialize(operation_store:); end

  # Return a page of all clients in the backend.
  #
  # @param page [Integer]
  # @param per_page [Integer]
  # @return [DashboardPage<ClientRecord>]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#627
  def all_clients(page:, per_page:, order_by: T.unsafe(nil), order_dir: T.unsafe(nil)); end

  # Return a page of all index entries matching `search_term`.
  #
  # @param search_term [String] A user-provided search query
  # @param page [Integer]
  # @param per_page [Integer]
  # @return [DashboardPage<IndexEntryRecord>]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#613
  def all_index_entries(search_term:, page:, per_page:); end

  # Return a page of _all operations_ in the backend.
  #
  # @param page [Integer]
  # @param per_page [Integer]
  # @return [DashboardPage<OperationRecord>]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#572
  def all_operations(page:, per_page:, is_archived: T.unsafe(nil), order_by: T.unsafe(nil), order_dir: T.unsafe(nil)); end

  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#677
  def archive_client_operations(client_name:, operation_aliases:, is_archived:); end

  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#669
  def archive_operations(digests:, is_archived:); end

  # @return [Array<AddResult>]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#28
  def batch_upsert_client_operations(client, operation_hashes, context: T.unsafe(nil), changeset_version: T.unsafe(nil)); end

  # Update the index to reflect that these operations contain the referenced keys
  #
  # @param operation_index_map [Hash<OperationRecord => Set<String>>] A map of operation => index keys to add to the database
  # @return [void]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#477
  def create_index_references(operation_index_map); end

  # Delete the client named `client_name`, if it exists
  #
  # @param client_name [String]
  # @return [void]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#348
  def delete_client(client_name); end

  # Delete this operation, if it exists.
  # WARNING: this is only for use from the dashboard;
  # It will break clients if you delete operations that they're using.
  #
  # @param operation_id [String]
  # @return void
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#298
  def delete_operation(operation_id); end

  # Fetch the client named `client_name`, if it exists
  #
  # @param client_name [String]
  # @return [Client, nil]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#329
  def get_client(client_name); end

  # Return client-operation references for the client named `client_name`, paginated.
  #
  # @param client_name [String]
  # @param page [Integer]
  # @param per_page [Integer]
  # @return [DashboardPage<ClientOperationRecord>]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#522
  def get_client_operations_by_client(client_name, page:, per_page:, order_by: T.unsafe(nil), order_dir: T.unsafe(nil), is_archived: T.unsafe(nil)); end

  # Find all client-operation reference records for the operation matching `digest`.
  #
  # @param digest [String]
  # @return [Array<GraphQLClientOperation>]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#434
  def get_client_operations_by_digest(digest); end

  # For the operation matching `digest`, return index entries derived from it.
  #
  # @param digest [String]
  # @return [Array<IndexEntryRecord>]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#456
  def get_index_entries_by_digest(digest); end

  # Get the existing entry for `key`, or return a new, empty one.
  #
  # @param key [String]
  # @return [IndexEntryRecord]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#378
  def get_index_entry(key); end

  # Return the persisted operation named `operation_alias` for the client named `client_name`
  #
  # @param client_name [String]
  # @param operation_alias [String]
  # @return [OperationRecord, nil]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#203
  def get_operation(client_name, operation_alias, touch_last_used_at:); end

  # Return the operation matching `digest`, used for the dashboard.
  #
  # @param digest [String]
  # @return [OperationRecord, nil]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#262
  def get_operation_by_digest(digest); end

  # Read from the index to find all operations which reference `key`
  #
  # @param key [String] An index entry key, like `Mutation.updateUser`
  # @return [Array<OperationRecord>]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#393
  def get_operations_by_index_entry(key); end

  # Remove all index entries; used for preparing a re-index.
  #
  # @return [void]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#370
  def purge_index; end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#23
  def supports_batch_upsert?; end

  # Accept a block and yield a callable which,
  # when `.call`ed, rolls back any persistence operations which
  # were fulfilled already.
  #
  # If the backend doesn't support transactions, `rollback` can be
  # implemented as a no-op and partial saves will be used instead.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#361
  def transaction; end

  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#247
  def update_last_used_ats(last_used_ats); end

  # Create or fetch the client identified by `name`,
  # and set its secret to `secret`.
  #
  # @param name [String] the client to find or create
  # @param secret [String] the secret to assign to this client
  # @return [ClientRecord]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#310
  def upsert_client(name, secret); end

  # Attach this operation to an already-existing client named `client_name`,
  # no-op if it's already attached.
  #
  # @param client [ClientRecord]
  # @param body [String] The GraphQL operation body
  # @param digest [String] digest of the body
  # @param op_name [String]
  # @param operation_alias [String] The client-provided ID
  # @return [AddResult]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#166
  def upsert_client_operation(client, body, digest, op_name, operation_alias); end

  private

  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#725
  def get_ar_client_by_name(client_name); end

  # @return [ActiveRecord::Relation] Index entries, with joins to count references and last_used_at
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#730
  def index_entries_with_joins; end

  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#695
  def paginate_relation(relation, page:, per_page:); end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#691
  def supports_is_archived?; end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend.rb#687
  def supports_last_used_at?; end
end

# A client application for this GraphQL system.
#
# @api private
# @example required database table
#   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#   ┃      graphql_clients                       ┃
#   ┣━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ id     ┃  primary key                      ┃
#   ┣━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ name   ┃ varchar (index, non-null, unique) ┃
#   ┣━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ secret ┃ varchar (non-null, unique)        ┃
#   ┗━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
#
# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_client.rb#20
class GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLClient < ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperationStoreModel
  include ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLClient::GeneratedAttributeMethods
  include ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLClient::GeneratedAssociationMethods

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_graphql_client_operations(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_graphql_operations(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_graphql_client_operations(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_graphql_operations(*args); end

  private

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_client.rb#54
  def populate_default_secret; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_client.rb#50
  def remove_orphaned_index_entries; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_client.rb#46
  def remove_orphaned_operations; end

  class << self
    # source://activesupport/7.2.0.alpha.94faed4dd4/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.2.0.alpha.94faed4dd4/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_client.rb#0
module GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLClient::GeneratedAssociationMethods
  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#62
  def graphql_client_operation_ids; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#72
  def graphql_client_operation_ids=(ids); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#103
  def graphql_client_operations; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#111
  def graphql_client_operations=(value); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#62
  def graphql_operation_ids; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#72
  def graphql_operation_ids=(ids); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#103
  def graphql_operations; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#111
  def graphql_operations=(value); end
end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_client.rb#0
module GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLClient::GeneratedAttributeMethods; end

# A join between client application and query.
# It means that a client wants to invoke this operation by name.
#
# @api private
# @example required database table
#   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#   ┃                graphql_client_operations                                       ┃
#   ┣━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ id                    ┃ primary key                                            ┃
#   ┣━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ graphql_operation_id  ┃ foreign key (non-null, index)                          ┃
#   ┣━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ graphql_client_id     ┃ f-key (non-null, index)                                ┃
#   ┣━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ alias                 ┃ varchar (non-null, unique index w/graphql_client_id)   ┃
#   ┣━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ last_used_at          ┃ datetime (index)                                       ┃
#   ┗━━━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
#
# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_client_operation.rb#24
class GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLClientOperation < ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperationStoreModel
  include ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLClientOperation::GeneratedAttributeMethods
  include ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLClientOperation::GeneratedAssociationMethods

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_graphql_client(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_graphql_operation(*args); end

  class << self
    # source://activesupport/7.2.0.alpha.94faed4dd4/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.2.0.alpha.94faed4dd4/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_client_operation.rb#0
module GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLClientOperation::GeneratedAssociationMethods
  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#32
  def build_graphql_client(*args, &block); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#32
  def build_graphql_operation(*args, &block); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#36
  def create_graphql_client(*args, &block); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#40
  def create_graphql_client!(*args, &block); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#36
  def create_graphql_operation(*args, &block); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#40
  def create_graphql_operation!(*args, &block); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#103
  def graphql_client; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#111
  def graphql_client=(value); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/belongs_to.rb#146
  def graphql_client_changed?; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/belongs_to.rb#150
  def graphql_client_previously_changed?; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#103
  def graphql_operation; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#111
  def graphql_operation=(value); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/belongs_to.rb#146
  def graphql_operation_changed?; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/belongs_to.rb#150
  def graphql_operation_previously_changed?; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#19
  def reload_graphql_client; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#19
  def reload_graphql_operation; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#23
  def reset_graphql_client; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#23
  def reset_graphql_operation; end
end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_client_operation.rb#0
module GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLClientOperation::GeneratedAttributeMethods; end

# An object in a GraphQL schema which may be used for an operation:
# - Type
# - Field
# - Argument (or input_field)
# - Directive
# - EnumValue
#
# @api private
# @example required database table
#   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#   ┃                graphql_index_entries                           ┃
#   ┣━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ id                    ┃ primary key                            ┃
#   ┣━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ name                  ┃ varchar (index, unique)                ┃
#   ┣━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ last_used_at          ┃ datetime (index)                       ┃
#   ┗━━━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
#
# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_index_entry.rb#24
class GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLIndexEntry < ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperationStoreModel
  include ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLIndexEntry::GeneratedAttributeMethods
  include ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLIndexEntry::GeneratedAssociationMethods

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_graphql_index_references(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_graphql_operations(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_graphql_index_references(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_graphql_operations(*args); end

  class << self
    # source://activesupport/7.2.0.alpha.94faed4dd4/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.2.0.alpha.94faed4dd4/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_index_entry.rb#0
module GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLIndexEntry::GeneratedAssociationMethods
  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#62
  def graphql_index_reference_ids; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#72
  def graphql_index_reference_ids=(ids); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#103
  def graphql_index_references; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#111
  def graphql_index_references=(value); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#62
  def graphql_operation_ids; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#72
  def graphql_operation_ids=(ids); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#103
  def graphql_operations; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#111
  def graphql_operations=(value); end
end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_index_entry.rb#0
module GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLIndexEntry::GeneratedAttributeMethods; end

# A join between operation and the entries it depends on
#
# @api private
# @example required database table
#   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#   ┃                graphql_index_references                        ┃
#   ┣━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ id                    ┃ primary key                            ┃
#   ┣━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ graphql_operation_id  ┃ foreign key                            ┃
#   ┣━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ graphql_index_entry   ┃ f-key (unique w/graphql_operation_id)  ┃
#   ┗━━━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
#
# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_index_reference.rb#18
class GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLIndexReference < ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperationStoreModel
  include ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLIndexReference::GeneratedAttributeMethods
  include ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLIndexReference::GeneratedAssociationMethods

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_graphql_index_entry(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_graphql_operation(*args); end

  class << self
    # source://activesupport/7.2.0.alpha.94faed4dd4/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.2.0.alpha.94faed4dd4/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_index_reference.rb#0
module GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLIndexReference::GeneratedAssociationMethods
  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#32
  def build_graphql_index_entry(*args, &block); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#32
  def build_graphql_operation(*args, &block); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#36
  def create_graphql_index_entry(*args, &block); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#40
  def create_graphql_index_entry!(*args, &block); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#36
  def create_graphql_operation(*args, &block); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#40
  def create_graphql_operation!(*args, &block); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#103
  def graphql_index_entry; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#111
  def graphql_index_entry=(value); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/belongs_to.rb#146
  def graphql_index_entry_changed?; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/belongs_to.rb#150
  def graphql_index_entry_previously_changed?; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#103
  def graphql_operation; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#111
  def graphql_operation=(value); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/belongs_to.rb#146
  def graphql_operation_changed?; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/belongs_to.rb#150
  def graphql_operation_previously_changed?; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#19
  def reload_graphql_index_entry; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#19
  def reload_graphql_operation; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#23
  def reset_graphql_index_entry; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/singular_association.rb#23
  def reset_graphql_operation; end
end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_index_reference.rb#0
module GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLIndexReference::GeneratedAttributeMethods; end

# A GraphQL operation, with its digest.
#
# @api private
# @example required database table
#   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#   ┃          graphql_operations         ┃
#   ┣━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ id        ┃ primary key             ┃
#   ┣━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ digest    ┃ varchar (index, unique) ┃
#   ┣━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━┫
#   ┃ body      ┃ text                    ┃
#   ┗━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━┛
#
# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_operation.rb#18
class GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperation < ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperationStoreModel
  include ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperation::GeneratedAttributeMethods
  include ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperation::GeneratedAssociationMethods

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_graphql_client_operations(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_graphql_clients(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_graphql_index_entries(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_graphql_index_references(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_graphql_client_operations(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_graphql_clients(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_graphql_index_entries(*args); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_graphql_index_references(*args); end

  private

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_operation.rb#46
  def remove_orphaned_client_operations; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_operation.rb#50
  def remove_orphaned_index_entries; end

  class << self
    # source://activesupport/7.2.0.alpha.94faed4dd4/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.2.0.alpha.94faed4dd4/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_operation.rb#0
module GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperation::GeneratedAssociationMethods
  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#62
  def graphql_client_ids; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#72
  def graphql_client_ids=(ids); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#62
  def graphql_client_operation_ids; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#72
  def graphql_client_operation_ids=(ids); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#103
  def graphql_client_operations; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#111
  def graphql_client_operations=(value); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#103
  def graphql_clients; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#111
  def graphql_clients=(value); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#103
  def graphql_index_entries; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#111
  def graphql_index_entries=(value); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#62
  def graphql_index_entry_ids; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#72
  def graphql_index_entry_ids=(ids); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#62
  def graphql_index_reference_ids; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/collection_association.rb#72
  def graphql_index_reference_ids=(ids); end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#103
  def graphql_index_references; end

  # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/associations/builder/association.rb#111
  def graphql_index_references=(value); end
end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_operation.rb#0
module GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperation::GeneratedAttributeMethods; end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_operation_store_model.rb#7
class GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperationStoreModel < ::ActiveRecord::Base
  include ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperationStoreModel::GeneratedAttributeMethods
  include ::GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperationStoreModel::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.2.0.alpha.94faed4dd4/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.2.0.alpha.94faed4dd4/lib/active_record/enum.rb#167
    def defined_enums; end

    # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_operation_store_model.rb#10
    def namespaced_model(name); end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_operation_store_model.rb#0
module GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperationStoreModel::GeneratedAssociationMethods; end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/graphql_operation_store_model.rb#0
module GraphQL::Pro::OperationStore::ActiveRecordBackend::GraphQLOperationStoreModel::GeneratedAttributeMethods; end

# source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/orphan_removal.rb#6
module GraphQL::Pro::OperationStore::ActiveRecordBackend::OrphanRemoval
  private

  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/orphan_removal.rb#36
  def remove_orphaned_client_operations; end

  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/orphan_removal.rb#23
  def remove_orphaned_index_entries; end

  # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/orphan_removal.rb#9
  def remove_orphaned_operations; end

  class << self
    # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/orphan_removal.rb#36
    def remove_orphaned_client_operations; end

    # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/orphan_removal.rb#23
    def remove_orphaned_index_entries; end

    # source://graphql-pro//lib/graphql/pro/operation_store/active_record_backend/orphan_removal.rb#9
    def remove_orphaned_operations; end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store/add_operation.rb#5
class GraphQL::Pro::OperationStore::AddOperation
  class << self
    # @return [AddResult]
    #
    # source://graphql-pro//lib/graphql/pro/operation_store/add_operation.rb#7
    def call(body:, client_name:, operation_alias:, schema:, backend:); end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store/add_operation_batch.rb#5
class GraphQL::Pro::OperationStore::AddOperationBatch
  # @param operation_store [GraphQL::Pro::OperationStore, GraphQL::Pro::OperationStore::RedisBackend, GraphQL::Pro::OperationStore::ActiveRecordBackend]
  # @param schema [Class<GraphQL::Schema>] Required if a backend is given as `operation_store`, otherwise `operation_store.schema` is used.
  # @return [AddOperationBatch] a new instance of AddOperationBatch
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/add_operation_batch.rb#84
  def initialize(client_name:, operation_store:, context: T.unsafe(nil), changeset_version: T.unsafe(nil), schema: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/add_operation_batch.rb#202
  def failed?; end

  # Assert that GraphQL is syntactically valid
  # and appropriate input for the schema.
  #
  # If it passes, enqueue the operation for saving with `.save!`
  #
  # @return [AddResult, nil]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/add_operation_batch.rb#103
  def prepare_operation(body:, operation_alias:); end

  # @return [Array<AddResult>]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/add_operation_batch.rb#207
  def results; end

  # @return [void]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/add_operation_batch.rb#149
  def save!; end

  private

  # source://graphql-pro//lib/graphql/pro/operation_store/add_operation_batch.rb#213
  def get_hash(str); end

  class << self
    # Add each of `operations` to `operation_store`, belong to `client_name`.
    #
    # @param client_name [String]
    # @param operation_store [GraphQL::Pro::OperationStore]
    # @param operations [Array<Hash("alias" => String, "body" => String)]] perations [Array<Hash("alias" => String, "body" => String)]
    # @param changeset_version [String] specifies the API version to use, if present
    # @param context [Hash] Context to be used when *validating* incoming documents. (Not used for execution.)
    # @return [Hash(added: Array<String>, not_modified: Array<String>, failed: Array<String>, errors: Hash<String => Array<<Hash>>)]] Hash(added: Array<String>, not_modified: Array<String>, failed: Array<String>, errors: Hash<String => Array<<Hash>>)]
    #
    # source://graphql-pro//lib/graphql/pro/operation_store/add_operation_batch.rb#15
    def call(client_name:, operation_store:, operations:, context: T.unsafe(nil), changeset_version: T.unsafe(nil)); end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store/add_operation_batch.rb#6
class GraphQL::Pro::OperationStore::AddOperationBatch::BatchFailedError < ::StandardError; end

# This is returned from {OperationStore.add}
#
# @api private
#
# source://graphql-pro//lib/graphql/pro/operation_store/add_result.rb#8
class GraphQL::Pro::OperationStore::AddResult
  # @api private
  # @return [AddResult] a new instance of AddResult
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/add_result.rb#11
  def initialize(state, operation_alias:, errors: T.unsafe(nil), operation_record: T.unsafe(nil)); end

  # @api private
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/add_result.rb#23
  def added?; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/add_result.rb#9
  def errors; end

  # @api private
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/add_result.rb#31
  def failed?; end

  # @api private
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/add_result.rb#27
  def not_modified?; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/add_result.rb#9
  def operation_alias; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/add_result.rb#9
  def operation_record; end
end

# source://graphql-pro//lib/graphql/pro/operation_store/client_operation_record.rb#5
class GraphQL::Pro::OperationStore::ClientOperationRecord
  # @return [ClientOperationRecord] a new instance of ClientOperationRecord
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_operation_record.rb#8
  def initialize(client_name:, operation_alias:, digest:, name:, created_at:, is_archived:, last_used_at:); end

  # Returns the value of attribute client_name.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_operation_record.rb#6
  def client_name; end

  # Returns the value of attribute created_at.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_operation_record.rb#6
  def created_at; end

  # Returns the value of attribute digest.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_operation_record.rb#6
  def digest; end

  # Returns the value of attribute is_archived.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_operation_record.rb#6
  def is_archived; end

  # Returns the value of attribute last_used_at.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_operation_record.rb#6
  def last_used_at; end

  # Returns the value of attribute name.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_operation_record.rb#6
  def name; end

  # Returns the value of attribute operation_alias.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_operation_record.rb#6
  def operation_alias; end
end

# source://graphql-pro//lib/graphql/pro/operation_store/client_record.rb#5
class GraphQL::Pro::OperationStore::ClientRecord
  # @return [ClientRecord] a new instance of ClientRecord
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_record.rb#8
  def initialize(name:, secret:, created_at:, operations_count:, archived_operations_count:, last_synced_at:, last_used_at:, id: T.unsafe(nil)); end

  # Returns the value of attribute archived_operations_count.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_record.rb#6
  def archived_operations_count; end

  # Returns the value of attribute created_at.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_record.rb#6
  def created_at; end

  # Returns the value of attribute id.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_record.rb#6
  def id; end

  # Returns the value of attribute last_synced_at.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_record.rb#6
  def last_synced_at; end

  # Returns the value of attribute last_used_at.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_record.rb#6
  def last_used_at; end

  # Returns the value of attribute name.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_record.rb#6
  def name; end

  # Returns the value of attribute operations_count.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_record.rb#6
  def operations_count; end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_record.rb#19
  def persisted?; end

  # Returns the value of attribute secret.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/client_record.rb#6
  def secret; end
end

# Used for rendering pages on the dashboard,
# it's a backend-agnostic wrapper around a slice of records.
#
# source://graphql-pro//lib/graphql/pro/operation_store/dashboard_page.rb#8
class GraphQL::Pro::OperationStore::DashboardPage
  # @return [DashboardPage] a new instance of DashboardPage
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/dashboard_page.rb#9
  def initialize(items:, prev_page:, next_page:, total_count:); end

  # Returns the value of attribute items.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/dashboard_page.rb#16
  def items; end

  # source://graphql-pro//lib/graphql/pro/operation_store/dashboard_page.rb#18
  def next_page; end

  # source://graphql-pro//lib/graphql/pro/operation_store/dashboard_page.rb#22
  def prev_page; end

  # Returns the value of attribute total_count.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/dashboard_page.rb#16
  def total_count; end
end

# One route to receive and maybe save GraphQL
#
# @api private
#
# source://graphql-pro//lib/graphql/pro/operation_store/endpoint.rb#10
class GraphQL::Pro::OperationStore::Endpoint
  # @api private
  # @return [Endpoint] a new instance of Endpoint
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/endpoint.rb#11
  def initialize(schema: T.unsafe(nil), schema_class_name: T.unsafe(nil)); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/endpoint.rb#21
  def call(env); end

  # Better rendering in Rails Routes output
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/endpoint.rb#83
  def inspect; end

  private

  # @api private
  # @return [false, String] False if unauthenticated, client_name if authenticated
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/endpoint.rb#91
  def authenticated_request?(header_value, body_string); end
end

# Functions for working with the database-backed index.
#
# It also uses the OperationStore's `@backend` for persistence operations.
#
# @api private
# @example Reindex a schema
#   MySchema.operation_store.reindex
#
# source://graphql-pro//lib/graphql/pro/operation_store/index.rb#13
class GraphQL::Pro::OperationStore::Index
  # @api private
  # @return [Index] a new instance of Index
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index.rb#14
  def initialize(operation_store:, backend:); end

  # Get the entry by this name, along with its references
  #
  # @api private
  # @param key [String]
  # @return [GraphQLIndexEntry]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index.rb#22
  def get_entry(key); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index.rb#32
  def get_entry_references(key); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index.rb#63
  def index_entry_chain(name); end

  # Remove everything from the index
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index.rb#28
  def purge; end

  # Drop the whole index and rebuild everything from scratch
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index.rb#37
  def reindex; end
end

# source://graphql-pro//lib/graphql/pro/operation_store/index_entry_record.rb#5
class GraphQL::Pro::OperationStore::IndexEntryRecord
  # @return [IndexEntryRecord] a new instance of IndexEntryRecord
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_entry_record.rb#7
  def initialize(name:, references_count:, archived_references_count:, persisted:, last_used_at:); end

  # Returns the value of attribute archived_references_count.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_entry_record.rb#6
  def archived_references_count; end

  # Returns the value of attribute last_used_at.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_entry_record.rb#6
  def last_used_at; end

  # Returns the value of attribute name.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_entry_record.rb#6
  def name; end

  # Returns the value of attribute references_count.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_entry_record.rb#6
  def references_count; end
end

# Find references in the document and accumulate them in a set.
# Then, set members will be joined to the operation record.
#
# - [x] owners of fields
# - [x] return types of fields
# - [x] interface possible types
# - [x] enum values
# - [x] arguments
# - [x] inputobject fields
# - [x] inline fragment references
# - [x] fragment defn references
# - [x] variable definition references
#
# @api private
#
# source://graphql-pro//lib/graphql/pro/operation_store/index_visitor.rb#21
module GraphQL::Pro::OperationStore::IndexVisitor
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_visitor.rb#22
  def initialize(document, context); end

  # Call the block zero or more times
  # for each possible field at this point
  #
  # Including input fields
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_visitor.rb#95
  def each_field; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_visitor.rb#86
  def index_type(node, parent); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_visitor.rb#59
  def on_argument(node, parent); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_visitor.rb#45
  def on_field(node, parent); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_visitor.rb#31
  def on_fragment_definition(node, parent); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_visitor.rb#54
  def on_inline_fragment(node, parent); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/index_visitor.rb#36
  def on_variable_definition(node, parent); end
end

# source://graphql-pro//lib/graphql/pro/operation_store.rb#39
class GraphQL::Pro::OperationStore::InvalidClientNameError < ::StandardError
  # @return [InvalidClientNameError] a new instance of InvalidClientNameError
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#40
  def initialize(client_name); end
end

# source://graphql-pro//lib/graphql/pro/operation_store.rb#46
GraphQL::Pro::OperationStore::KEY = T.let(T.unsafe(nil), Symbol)

# Copy records from one backend into another.
#
# It leaves the old backend untouched.
#
# Caveats:
#
# - Any operations added _during_ the migration (or after it) won't be copied
# - `created_at` and `last_synced_at` timestamps are not copied
#
# @example migrating from ActiveRecord to Redis backend
#   redis = Redis.new # Your redis config here
#   schema = MySchema # Your schema here
#   # Initialize backend instances
#   ar_backend = GraphQL::Pro::OperationStore::ActiveRecordBackend.new(operation_store: schema.operation_store)
#   redis_backend = GraphQL::Pro::OperationStore::RedisBackend.new(operation_store: schema.operation_store, redis: redis)
#   # Call the migration script
#   GraphQL::Pro::OperationStore::Migration.call(
#   schema: schema,
#   old_backend: ar_backend,
#   new_backend: redis_backend,
#   )
#
# source://graphql-pro//lib/graphql/pro/operation_store/migration.rb#27
class GraphQL::Pro::OperationStore::Migration
  class << self
    # source://graphql-pro//lib/graphql/pro/operation_store/migration.rb#38
    def call(schema:, old_backend:, new_backend:, page_size: T.unsafe(nil)); end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store/migration.rb#28
GraphQL::Pro::OperationStore::Migration::FAILURE_WARNING = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#5
module GraphQL::Pro::OperationStore::Normalize
  include ::GraphQL::Language

  private

  # source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#87
  def normalize_arguments(arguments, parens: T.unsafe(nil)); end

  # source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#76
  def normalize_directives(directives); end

  # source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#66
  def normalize_selections(selections); end

  # source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#102
  def normalize_variables(variables); end

  # source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#113
  def selection_sort_key(selection); end

  # @param ast_node [GraphQL::Language::Nodes::AbstractNode]
  # @return [String] Normalized GraphQL string, whitespace removed
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#10
  def to_normalized_graphql(ast_node); end

  class << self
    # source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#87
    def normalize_arguments(arguments, parens: T.unsafe(nil)); end

    # source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#76
    def normalize_directives(directives); end

    # source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#66
    def normalize_selections(selections); end

    # source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#102
    def normalize_variables(variables); end

    # source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#113
    def selection_sort_key(selection); end

    # @param ast_node [GraphQL::Language::Nodes::AbstractNode]
    # @return [String] Normalized GraphQL string, whitespace removed
    #
    # source://graphql-pro//lib/graphql/pro/operation_store/normalize.rb#10
    def to_normalized_graphql(ast_node); end
  end
end

# This is required by active_record_adapter:
#
# source://graphql-pro//lib/graphql/pro/operation_store.rb#8
GraphQL::Pro::OperationStore::OPERATION_ID_SEPARATOR = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/operation_store/operation_names_are_present_and_unique.rb#5
module GraphQL::Pro::OperationStore::OperationNamesArePresentAndUnique
  include ::GraphQL::StaticValidation::Error::ErrorHelper

  # source://graphql-pro//lib/graphql/pro/operation_store/operation_names_are_present_and_unique.rb#14
  def initialize(document, context); end

  # source://graphql-pro//lib/graphql/pro/operation_store/operation_names_are_present_and_unique.rb#24
  def on_document(node, _parent); end

  # source://graphql-pro//lib/graphql/pro/operation_store/operation_names_are_present_and_unique.rb#19
  def on_operation_definition(node, _parent); end
end

# source://graphql-pro//lib/graphql/pro/operation_store/operation_names_are_present_and_unique.rb#8
GraphQL::Pro::OperationStore::OperationNamesArePresentAndUnique::ERROR_METHOD = T.let(T.unsafe(nil), Symbol)

# source://graphql-pro//lib/graphql/pro/operation_store/operation_record.rb#5
class GraphQL::Pro::OperationStore::OperationRecord
  # @return [OperationRecord] a new instance of OperationRecord
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/operation_record.rb#19
  def initialize(name:, digest:, body:, clients_count:, is_archived:, last_used_at:); end

  # @return [String] the normalized, minified GraphQL document
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/operation_record.rb#9
  def body; end

  # @return [Integer]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/operation_record.rb#13
  def clients_count; end

  # @return [String] Stable hash derived from `body`
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/operation_record.rb#11
  def digest; end

  # @return [Boolean] true if all client_operations are archived
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/operation_record.rb#17
  def is_archived; end

  # @return [DateTime, nil]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/operation_record.rb#15
  def last_used_at; end

  # @return [String] the OperationName of the GraphQL document
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/operation_record.rb#7
  def name; end
end

# source://graphql-pro//lib/graphql/pro/operation_store.rb#303
module GraphQL::Pro::OperationStore::QueryExtension
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#304
  def initialize(*_args, **_kwargs); end

  # source://graphql-pro//lib/graphql/pro/operation_store.rb#311
  def check_operation_store; end
end

# This now behaves as a tracer instead of a query instrumenter, so that we can be sure it's
# called before code that requires the query string. To be honest, we may need another way to call it even sooner.
#
# But, the query instrumentation code is left in place to support patches that call that method.
#
# source://graphql-pro//lib/graphql/pro/operation_store/query_instrumentation.rb#9
class GraphQL::Pro::OperationStore::QueryInstrumentation
  # source://graphql-pro//lib/graphql/pro/operation_store/query_instrumentation.rb#22
  def after_query(query); end

  # source://graphql-pro//lib/graphql/pro/operation_store/query_instrumentation.rb#18
  def before_query(query); end

  # source://graphql-pro//lib/graphql/pro/operation_store/query_instrumentation.rb#10
  def trace(event, data); end
end

# source://graphql-pro//lib/graphql/pro/operation_store.rb#71
module GraphQL::Pro::OperationStore::QueryTrace
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#72
  def execute_multiplex(multiplex:); end
end

# This backend receives persistence commands from OperationStore.
# You can extend it or use it as inspiration for another backend.
#
# It uses `.keys` for many of the dashboard lists. At a certain scale,
# that's no longer feasible. If you run into problems here,
# email me (rmosolgo@graphql.pro) and we'll re-implement it using
# a sorted set to index records, and `sscan` to work through the set.
#
# If you're looking for details about method signatures, also check out `active_record_backend.rb`.
#
# source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#15
class GraphQL::Pro::OperationStore::RedisBackend
  # You can provide a custom-initialized Redis here.
  #
  # @param operation_store [GraphQL::Pro::OperationStore]
  # @param redis [Redis]
  # @return [RedisBackend] a new instance of RedisBackend
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#22
  def initialize(operation_store:, redis: T.unsafe(nil)); end

  # Using `keys` because it's just for the dashboard.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#369
  def all_clients(page:, per_page:, order_by: T.unsafe(nil), order_dir: T.unsafe(nil)); end

  # Using `keys` because it's just for the dashboard.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#415
  def all_index_entries(page:, per_page:, search_term: T.unsafe(nil)); end

  # Using `keys` because it's just for the dashboard.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#313
  def all_operations(page:, per_page:, is_archived: T.unsafe(nil), order_by: T.unsafe(nil), order_dir: T.unsafe(nil)); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#497
  def archive_client_operations(client_name:, operation_aliases:, is_archived:); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#480
  def archive_operations(digests:, is_archived:); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#288
  def create_index_references(operation_index_map); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#70
  def delete_client(name); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#181
  def delete_operation(digest); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#50
  def get_client(name); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#438
  def get_client_operations_by_client(client_name, page:, per_page:, is_archived: T.unsafe(nil), order_by: T.unsafe(nil), order_dir: T.unsafe(nil)); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#147
  def get_client_operations_by_digest(digest); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#165
  def get_index_entries_by_digest(digest); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#267
  def get_index_entry(key); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#92
  def get_operation(client_name, operation_alias, touch_last_used_at:); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#123
  def get_operation_by_digest(digest); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#281
  def get_operations_by_index_entry(key); end

  # This is an admin task, so it uses `.keys`
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#256
  def purge_index; end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#27
  def supports_batch_upsert?; end

  # A no-op
  #
  # @yield [rollback]
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#475
  def transaction; end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#32
  def upsert_client(name, secret); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#211
  def upsert_client_operation(client, body, digest, op_name, operation_alias); end

  private

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#569
  def client_key(client_name); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#583
  def client_operation_key(client_name, op_alias); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#579
  def client_operation_keys_key(client_name); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#610
  def clients_by_last_used_key; end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#594
  def index_entry_key(name); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#600
  def index_entry_ref_key(name); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#606
  def index_operation_ref_key(digest); end

  # These are references from an operation to the client-operations
  #
  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#588
  def operation_client_operation_ref_key(digest); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#575
  def operation_key(digest); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#513
  def paginate_keys(all_keys, page:, per_page:); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#618
  def parse_timestamp(int); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#614
  def redis_key(*strs); end

  # source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#545
  def ref_counts_for_index_key(entry_name); end
end

# source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#567
GraphQL::Pro::OperationStore::RedisBackend::CLIENT_PREFIX = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#592
GraphQL::Pro::OperationStore::RedisBackend::INDEX_ENTRY_PREFIX = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#598
GraphQL::Pro::OperationStore::RedisBackend::INDEX_ENTRY_REF_PREFIX = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#604
GraphQL::Pro::OperationStore::RedisBackend::INDEX_OPERATION_REF_PREFIX = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#573
GraphQL::Pro::OperationStore::RedisBackend::OPERATION_PREFIX = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/operation_store/redis_backend.rb#16
GraphQL::Pro::OperationStore::RedisBackend::PREFIX = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/operation_store.rb#271
module GraphQL::Pro::OperationStore::SchemaExtension
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#274
  def operation_store; end

  # Sets the attribute operation_store
  #
  # @param value the value to set the attribute operation_store to.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#272
  def operation_store=(_arg0); end
end

# source://graphql-pro//lib/graphql/pro/operation_store.rb#285
module GraphQL::Pro::OperationStore::SchemaExtension::ClassMethods
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#288
  def operation_store; end

  # Sets the attribute operation_store
  #
  # @param value the value to set the attribute operation_store to.
  #
  # source://graphql-pro//lib/graphql/pro/operation_store.rb#286
  def operation_store=(_arg0); end
end

# source://graphql-pro//lib/graphql/pro/operation_store/validate.rb#5
module GraphQL::Pro::OperationStore::Validate
  class << self
    # @param schema [Class<GraphQL::Schema>]
    # @param doc [GraphQL::Language::Nodes::Document]
    # @param client_name [String]
    # @param context [Hash] This context will be used for validation *only* -- the queries must also be given a context for execution.
    # @param changeset_version [String]
    #
    # source://graphql-pro//lib/graphql/pro/operation_store/validate.rb#18
    def validate(schema, doc, client_name:, context: T.unsafe(nil), changeset_version: T.unsafe(nil)); end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store/validate.rb#48
module GraphQL::Pro::OperationStore::Validate::AlwaysFailStrategy
  class << self
    # @return [Boolean]
    #
    # source://graphql-pro//lib/graphql/pro/operation_store/validate.rb#49
    def allowed?(*_arg0); end
  end
end

# source://graphql-pro//lib/graphql/pro/operation_store/validate.rb#6
GraphQL::Pro::OperationStore::Validate::RULES = T.let(T.unsafe(nil), Array)

# source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#217
class GraphQL::Pro::PostgresStableRelationConnection < ::GraphQL::Pro::StableRelationConnection
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#218
  def small_nulls?; end
end

# source://graphql-pro//lib/graphql/pro/pubnub_subscriptions.rb#5
class GraphQL::Pro::PubnubSubscriptions < ::GraphQL::Pro::Subscriptions
  # @return [PubnubSubscriptions] a new instance of PubnubSubscriptions
  #
  # source://graphql-pro//lib/graphql/pro/pubnub_subscriptions.rb#6
  def initialize(redis:, pubnub:, schema:, **rest); end

  # source://graphql-pro//lib/graphql/pro/pubnub_subscriptions.rb#15
  def deliver(subscription_id, result); end

  # source://graphql-pro//lib/graphql/pro/pubnub_subscriptions.rb#11
  def execute_all(event, object); end

  private

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/pubnub_subscriptions.rb#30
  def still_subscribed?(subscription_id); end
end

# Receive webhooks from Pubnub to remove items from the DB.
# It should receive the `active/inactive` payload (not `join/leave/timeout/state-change`)
#
# source://graphql-pro//lib/graphql/pro/pubnub_subscriptions.rb#38
class GraphQL::Pro::PubnubSubscriptions::WebhooksClient < ::GraphQL::Pro::Subscriptions::WebhooksClient
  # source://graphql-pro//lib/graphql/pro/pubnub_subscriptions.rb#39
  def call_with_schema(schema, env); end
end

# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#5
module GraphQL::Pro::PunditIntegration; end

# Include this in your base argument to configure `pundit_role`
# at class-level or as a per-argument option
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#103
module GraphQL::Pro::PunditIntegration::ArgumentIntegration
  include ::GraphQL::Pro::PunditIntegration::HasPunditRoleKeyword
  include ::GraphQL::Pro::PunditIntegration::HasPunditRole
  include ::GraphQL::Pro::PunditIntegration::AuthorizeByPolicy
  include ::GraphQL::Pro::PunditIntegration::AuthorizeArgumentByPolicy

  mixes_in_class_methods ::GraphQL::Pro::PunditIntegration::HasPunditRole
  mixes_in_class_methods ::GraphQL::Pro::PunditIntegration::AuthorizeByPolicy

  # TODO upstream
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#114
  def default_value; end

  class << self
    # @private
    #
    # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#104
    def included(argument_class); end
  end
end

# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#153
module GraphQL::Pro::PunditIntegration::AuthorizeArgumentByPolicy
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#154
  def authorized_as_type?(object, value, ctx, as_type:); end
end

# Leverage the integration for `authorized?`
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#130
module GraphQL::Pro::PunditIntegration::AuthorizeByPolicy
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#131
  def authorized?(object, args_or_ctx, context = T.unsafe(nil)); end
end

# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#230
module GraphQL::Pro::PunditIntegration::AuthorizeMutationByPolicy
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#240
  def inspect; end

  # Check the policy defined on the mutation class before loading arguments
  #
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#232
  def ready?(**inputs); end

  # This hook is called when a check fails
  #
  # @raise [GraphQL::UnauthorizedError]
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#245
  def unauthorized_by_pundit(owner, value); end
end

# Include this in your base field to configure `pundit_role`
# at class-level or as a per-field option
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#91
module GraphQL::Pro::PunditIntegration::FieldIntegration
  include ::GraphQL::Pro::PunditIntegration::HasPunditRoleKeyword
  include ::GraphQL::Pro::PunditIntegration::HasPunditRole
  include ::GraphQL::Pro::PunditIntegration::AuthorizeByPolicy

  mixes_in_class_methods ::GraphQL::Pro::PunditIntegration::HasPunditRole
  mixes_in_class_methods ::GraphQL::Pro::PunditIntegration::AuthorizeByPolicy

  class << self
    # @private
    #
    # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#92
    def included(field_class); end
  end
end

# Accept the configuration of a pundit role,
# expose a hook to call that role on some object.
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#269
module GraphQL::Pro::PunditIntegration::HasPunditRole
  # @param object [Object] some application object
  # @param context [Query::Context] the current query context (with `:current_user`)
  # @raise [RoleNotConfiguredError] if no pundit_role was configured
  # @raise [PolicyNotFoundError] if no policy could be found for `object`
  # @return [Boolean] True if authorized
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#387
  def authorized_by_policy?(object, context); end

  # TODO use upstreamed version after 1.9+ is required
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#405
  def path; end

  # Look up a pundit policy for `object`, with `current_user`.
  #
  # If this method doesn't return a policy, it should raise an error,
  # because the caller is assuming that a policy will be returned.
  #
  # @param context [GraphQL::Query::Context]
  # @param object [Object] the application object being authorized
  # @raise [PolicyNotFoundError] if no policy is found
  # @return [Object] A policy instance, which will receive `#{role}?` to perform a check
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#370
  def pundit_policy(context, object); end

  # @param new_class [String, Class] the Pundit policy class to use
  # @return [String, Class, nil] The configured class or name, if there is one
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#328
  def pundit_policy_class(new_class = T.unsafe(nil)); end

  # Override this method to pick a pundit policy class at runtime.
  # (Defaults to {#pundit_policy_class}.)
  #
  # @param object [Object] The application object being used by GraphQL
  # @param context [GraphQL::Query::Context]
  # @return [Class, nil] The class to use for the current object and context
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#357
  def pundit_policy_class_for(object, context); end

  # @param new_role [Symbol] set a role for this object
  # @return [false] If no role was configured
  # @return [Symbol] the role that was configured
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#275
  def pundit_role(new_role = T.unsafe(nil)); end

  # Override this method to pick a method for authorization checks at runtime.
  # (Defaults to {#pundit_role}.)
  #
  # @param object [Object] The application object being used by GraphQL
  # @param context [GraphQL::Query::Context]
  # @return [Symbol, nil] The method to use on the policy class (a `?` will be added to it)
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#322
  def pundit_role_for(object, context); end

  # Set `use_owner_role(true)` in Field or Argument classes
  # to modify the lookup algorithm for `pundit_role`.
  #
  # By default, Field and Argument instances check their class to
  # get a default role. This setting changes that lookup to get one
  # from the "owner" (for Fields, the Object or Interface type is the owner;
  # for Arguments, the Field or Input Object type is the owner). Using the
  # owner role makes the lookup algorithm match `pundit_policy_class`.
  #
  # @param new_value [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#313
  def use_owner_role(new_value); end

  # @return [Boolean] If true, inherit `pundit_role`
  #   from this object's owner instead of from its class.
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#293
  def use_owner_role?; end

  private

  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#424
  def get_current_user(context); end
end

# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#270
GraphQL::Pro::PunditIntegration::HasPunditRole::READING_ROLE = T.let(T.unsafe(nil), Object)

# For Arguments and Fields, their instances store a pundit_role
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#251
module GraphQL::Pro::PunditIntegration::HasPunditRoleKeyword
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#254
  def initialize(*args, pundit_role: T.unsafe(nil), pundit_policy_class: T.unsafe(nil), **kwargs, &block); end
end

# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#252
GraphQL::Pro::PunditIntegration::HasPunditRoleKeyword::NO_ROLE = T.let(T.unsafe(nil), Object)

# Include this in your base interface module to get scoping for
# lists and connections of interface type.
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#79
module GraphQL::Pro::PunditIntegration::InterfaceIntegration
  class << self
    # @private
    #
    # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#80
    def included(interface_module); end
  end
end

# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#127
GraphQL::Pro::PunditIntegration::MutationIntegration = GraphQL::Pro::PunditIntegration::ResolverIntegration

# Include this in your base object to configure `pundit_role`s at object-level
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#59
module GraphQL::Pro::PunditIntegration::ObjectIntegration
  mixes_in_class_methods ::GraphQL::Pro::PunditIntegration::HasPunditRole
  mixes_in_class_methods ::GraphQL::Pro::PunditIntegration::AuthorizeByPolicy
  mixes_in_class_methods ::GraphQL::Pro::PunditIntegration::ScopeByPolicy

  class << self
    # @private
    #
    # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#60
    def included(object_class); end
  end
end

# Raised when Pundit can't find a Policy for an object
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#15
class GraphQL::Pro::PunditIntegration::PolicyNotFoundError < ::GraphQL::Pro::PunditIntegration::PunditIntegrationError
  # @return [PolicyNotFoundError] a new instance of PolicyNotFoundError
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#16
  def initialize(owner, object, pundit_error); end
end

# Base error class for everything from this integration
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#7
class GraphQL::Pro::PunditIntegration::PunditIntegrationError < ::GraphQL::Error; end

# Include this in your base mutation to add a mutation-level check
# and add `pundit_role:` configurations to loaded objects
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#119
module GraphQL::Pro::PunditIntegration::ResolverIntegration
  include ::GraphQL::Pro::PunditIntegration::HasPunditRole
  include ::GraphQL::Pro::PunditIntegration::AuthorizeMutationByPolicy

  mixes_in_class_methods ::GraphQL::Pro::PunditIntegration::HasPunditRole

  class << self
    # @private
    #
    # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#120
    def included(mutation_class); end
  end
end

# Raised when we try to check something that has no `pundit_role` configured
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#11
class GraphQL::Pro::PunditIntegration::RoleNotConfiguredError < ::GraphQL::Pro::PunditIntegration::PunditIntegrationError; end

# Leverage the integration for list scoping
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#196
module GraphQL::Pro::PunditIntegration::ScopeByPolicy
  # Fetch a Pundit policy scope and apply it to `items`.
  # It should raise if a policy can't be found for `items`.
  #
  # @param context [GraphQL::Query::Context]
  # @param items [Object] A collection returned by the application, eg `ActiveRecord::Relation`
  # @raise [PolicyNotFoundError] If no policy is found (this is a developer error)
  # @return [Object] A scoped list derived from `items` for `current_user`
  #
  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#209
  def scope_by_pundit_policy(context, items); end

  # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#197
  def scope_items(items, context); end
end

# Include this in your base Union class to get scoping for
# lists and connections of union type.
#
# source://graphql-pro//lib/graphql/pro/pundit_integration.rb#69
module GraphQL::Pro::PunditIntegration::UnionIntegration
  mixes_in_class_methods ::GraphQL::Pro::PunditIntegration::HasPunditRole
  mixes_in_class_methods ::GraphQL::Pro::PunditIntegration::ScopeByPolicy

  class << self
    # @private
    #
    # source://graphql-pro//lib/graphql/pro/pundit_integration.rb#70
    def included(union_class); end
  end
end

# source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#7
class GraphQL::Pro::PusherSubscriptions < ::GraphQL::Pro::Subscriptions
  # @param schema [Class<GraphQL::Schema>]
  # @param redis [Redis]
  # @param pusher [Pusher, Class] A Pusher client
  # @return [PusherSubscriptions] a new instance of PusherSubscriptions
  #
  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#15
  def initialize(schema:, redis: T.unsafe(nil), connection_pool: T.unsafe(nil), pusher: T.unsafe(nil), batch_size: T.unsafe(nil), **rest); end

  # Returns the value of attribute batch_size.
  #
  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#10
  def batch_size; end

  # This is called with the payload when `compressed_result: true` is configured.
  # If needed, you can override this method to customize the stringification and compression.
  # (I'd love to hear _why_ you're doing it, if it's the case.)
  #
  # The client will also need to be ready for this compressed result.
  #
  # @param result [Hash] A GraphQL query result
  # @return [String] A stringified, compressed, base64-encoded version of `result`
  #
  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#67
  def compress(result); end

  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#33
  def deliver(subscription_id, result); end

  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#42
  def deliver_all(deliveries); end

  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#29
  def execute_all(event, object); end

  # Returns the value of attribute pusher.
  #
  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#8
  def pusher; end

  private

  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#110
  def prepare_payload(result); end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#105
  def still_subscribed?(subscription_id); end
end

# Implements `Subscriptions::Delivery`,
# but stores deliveries into a batch before sending them.
# Pusher only accepts up to 10 per batch.
#
# source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#76
class GraphQL::Pro::PusherSubscriptions::BatchDelivery
  # @return [BatchDelivery] a new instance of BatchDelivery
  #
  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#77
  def initialize(subscriptions); end

  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#82
  def add(subscription_id, result); end

  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#89
  def finish; end

  private

  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#95
  def send_batch; end
end

# Receive webhooks from Pusher to remove items from the DB
#
# source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#123
class GraphQL::Pro::PusherSubscriptions::WebhooksClient < ::GraphQL::Pro::Subscriptions::WebhooksClient
  # source://graphql-pro//lib/graphql/pro/pusher_subscriptions.rb#124
  def call_with_schema(schema, env); end
end

# source://graphql-pro//lib/graphql/pro/redis_script_client.rb#5
class GraphQL::Pro::RedisScriptClient
  # @return [RedisScriptClient] a new instance of RedisScriptClient
  #
  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#19
  def initialize(redis, connection_pool: T.unsafe(nil)); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#29
  def exec_script(name, keys, argv); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#143
  def with_admin_redis(&block); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#139
  def with_redis(&block); end

  class << self
    # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#14
    def operations; end

    # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#7
    def register(name, operation); end
  end
end

# source://graphql-pro//lib/graphql/pro/redis_script_client.rb#46
class GraphQL::Pro::RedisScriptClient::ConnectionPoolRedis
  # @return [ConnectionPoolRedis] a new instance of ConnectionPoolRedis
  #
  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#47
  def initialize(conn_pool); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#55
  def with_admin_redis; end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#51
  def with_redis(&block); end
end

# source://graphql-pro//lib/graphql/pro/redis_script_client.rb#81
class GraphQL::Pro::RedisScriptClient::RedisClientRedis
  # @return [RedisClientRedis] a new instance of RedisClientRedis
  #
  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#126
  def initialize(redis); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#134
  def with_admin_redis(&block); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#130
  def with_redis(&block); end
end

# source://graphql-pro//lib/graphql/pro/redis_script_client.rb#82
class GraphQL::Pro::RedisScriptClient::RedisClientRedis::RedisClientWrapper
  # @return [RedisClientWrapper] a new instance of RedisClientWrapper
  #
  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#83
  def initialize(redis_client); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def decr(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def decrby(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def del(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#114
  def evalsha(sha, keys, args); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def exists(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def expire(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def expireat(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def flushdb(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def get(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def hdel(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def hget(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def hgetall(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def hmget(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def hmset(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def hset(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def hsetnx(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def incr(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def incrby(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def keys(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def mget(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#103
  def multi; end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def pexpire(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def pexpireat(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#118
  def pipelined; end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def pttl(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def sadd(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def scard(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def script(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def set(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def sismember(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def smembers(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def srem(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def ttl(*args, **kwargs); end

  # @yield [_self]
  # @yieldparam _self [GraphQL::Pro::RedisScriptClient::RedisClientRedis::RedisClientWrapper] the object that the method was called on
  #
  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#110
  def with; end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def zadd(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def zcard(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def zrange(*args, **kwargs); end

  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#96
  def zrem(*args, **kwargs); end
end

# source://graphql-pro//lib/graphql/pro/redis_script_client.rb#66
class GraphQL::Pro::RedisScriptClient::RedisRbRedis
  # @return [RedisRbRedis] a new instance of RedisRbRedis
  #
  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#67
  def initialize(redis); end

  # @yield [@admin_redis]
  #
  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#76
  def with_admin_redis; end

  # @yield [@redis]
  #
  # source://graphql-pro//lib/graphql/pro/redis_script_client.rb#72
  def with_redis; end
end

# source://graphql-pro//lib/graphql/pro/relation_connection.rb#5
module GraphQL::Pro::RelationConnection
  class << self
    # @return [Boolean]
    #
    # source://graphql-pro//lib/graphql/pro/relation_connection.rb#32
    def bidirectional_pagination?; end

    # This is a fake connection!
    # It "just" infers the order from the relation
    # then makes an OrderedRelation and wraps that.
    #
    # source://graphql-pro//lib/graphql/pro/relation_connection.rb#27
    def new(nodes, args, kwargs); end
  end
end

# source://graphql-pro//lib/graphql/pro/relation_connection/condition.rb#6
module GraphQL::Pro::RelationConnection::Condition
  class << self
    # Prepare a SQL filter which will allow items
    # continuing from `cursor` in the direction of `before_or_after`.
    #
    # @param relation [Relation] the relation being paginated
    # @param cursor [String] A decrypted before- or after-cursor
    # @param direction [:before, :after] Which direction from `cursor` do you want to allow?
    # @param order_values [Array] order values from the relation
    # @param allow_eq [Boolean] For grouped relations, you don't have a primary key,
    #   So the next out-of-bounds item will have a value _equal_ to the cursor value.
    #   You have to let the caller specify that.
    # @param small_nulls [Boolean] True if this database's default null handling treats them as smaller than any other value
    # @return [Array(String, Array)] SQL template and bind values
    #
    # source://graphql-pro//lib/graphql/pro/relation_connection/condition.rb#30
    def build_condition(relation:, aliased_selects:, cursor:, direction:, order_values:, allow_eq:, small_nulls:); end

    private

    # @return [Boolean]
    #
    # source://graphql-pro//lib/graphql/pro/relation_connection/condition.rb#175
    def is_not_null_falsey?(value); end

    # Postgresql uses true/false, MySQL and sqlite use 1/0
    #
    # @return [Boolean]
    #
    # source://graphql-pro//lib/graphql/pro/relation_connection/condition.rb#171
    def is_not_null_truthy?(value); end
  end
end

# source://graphql-pro//lib/graphql/pro/relation_connection/condition.rb#7
GraphQL::Pro::RelationConnection::Condition::COMPARISON_OPERATORS = T.let(T.unsafe(nil), Hash)

# source://graphql-pro//lib/graphql/pro/relation_connection/filter.rb#6
module GraphQL::Pro::RelationConnection::Filter
  class << self
    # Apply `WHERE` conditions to `relation` based on the given cursors,
    # and the extracted `order_values`.
    #
    # @return [ActiveRecord::Relation] Like the provided one, but with conditions to paginate
    #
    # source://graphql-pro//lib/graphql/pro/relation_connection/filter.rb#11
    def filter_relation(relation:, order_values:, aliased_selects:, allow_eq:, small_nulls:, before: T.unsafe(nil), after: T.unsafe(nil)); end
  end
end

# source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#5
class GraphQL::Pro::RelationConnection::InvalidRelationError < ::StandardError; end

# Infer some ordering from an AR::Relation
#
# @api private
#
# source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#8
module GraphQL::Pro::RelationConnection::Order
  class << self
    # Infer normalized orders from an AR::Relation
    #
    # @api private
    # @return [Array<NormalizedOrder>]
    #
    # source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#62
    def normalize(relation); end

    private

    # @api private
    #
    # source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#33
    def normalize_arel(arel_node); end
  end
end

# @api private
#
# source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#9
class GraphQL::Pro::RelationConnection::Order::NormalizedOrder
  # @api private
  # @return [NormalizedOrder] a new instance of NormalizedOrder
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#13
  def initialize(name, table_name, dir_str, nulls_str, is_not_null, is_quoted); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#11
  def dir; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#11
  def dir=(_arg0); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#10
  def is_not_null; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#10
  def is_quoted; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#10
  def name; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#11
  def nulls_last; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#11
  def nulls_last=(_arg0); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#10
  def table_name; end
end

# @api private
#
# source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#26
GraphQL::Pro::RelationConnection::Order::ORDER_BY_ARRAY = T.let(T.unsafe(nil), Regexp)

# @api private
#
# source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#24
GraphQL::Pro::RelationConnection::Order::ORDER_BY_CASE = T.let(T.unsafe(nil), Regexp)

# @api private
#
# source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#27
GraphQL::Pro::RelationConnection::Order::ORDER_BY_COLUMN = T.let(T.unsafe(nil), Regexp)

# @api private
#
# source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#25
GraphQL::Pro::RelationConnection::Order::ORDER_BY_FUNCTION_CALL = T.let(T.unsafe(nil), Regexp)

# @api private
#
# source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#28
GraphQL::Pro::RelationConnection::Order::ORDER_BY_POSTGRES_JSON_ACCESS = T.let(T.unsafe(nil), Regexp)

# @api private
#
# source://graphql-pro//lib/graphql/pro/relation_connection/order.rb#23
GraphQL::Pro::RelationConnection::Order::SORT_WITH_NULLS = T.let(T.unsafe(nil), String)

# Figure out which kind of cursor you received,
# then pick an object to delegate to
#
# @api private
#
# source://graphql-pro//lib/graphql/pro/relation_connection/ordered_relation_connection.rb#8
class GraphQL::Pro::RelationConnection::OrderedRelationConnection
  extend ::Forwardable

  # @api private
  # @return [OrderedRelationConnection] a new instance of OrderedRelationConnection
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/ordered_relation_connection.rb#16
  def initialize(ordered_relation, order_values, args, kwargs); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def after(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def arguments(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def before(*args, **_arg1, &block); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/ordered_relation_connection.rb#31
  def cursor_from_node(node); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/ordered_relation_connection.rb#39
  def decode(cursor); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def edge_nodes(*args, **_arg1, &block); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/ordered_relation_connection.rb#35
  def encode(cursor); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def field(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def first(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def last(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def max_page_size(*args, **_arg1, &block); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/ordered_relation_connection.rb#14
  def nodes; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/ordered_relation_connection.rb#43
  def page_info; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def parent(*args, **_arg1, &block); end
end

# @api private
#
# source://graphql-pro//lib/graphql/pro/relation_connection/ordered_relation_connection.rb#49
class GraphQL::Pro::RelationConnection::OrderedRelationConnection::CombinedPageInfo
  extend ::Forwardable

  # @api private
  # @return [CombinedPageInfo] a new instance of CombinedPageInfo
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/ordered_relation_connection.rb#53
  def initialize(cursor, pagination); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def cursor_from_node(*args, **_arg1, &block); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/ordered_relation_connection.rb#67
  def end_cursor; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def has_next_page(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def has_previous_page(*args, **_arg1, &block); end

  # Used by `pageInfo`
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/relation_connection/ordered_relation_connection.rb#59
  def start_cursor; end
end

# source://graphql-pro//lib/graphql/pro/relation_connection.rb#6
module GraphQL::Pro::RelationConnection::Patterns; end

# source://graphql-pro//lib/graphql/pro/relation_connection.rb#9
GraphQL::Pro::RelationConnection::Patterns::CASE = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/relation_connection.rb#8
GraphQL::Pro::RelationConnection::Patterns::COLUMN_ID = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/relation_connection.rb#7
GraphQL::Pro::RelationConnection::Patterns::FUNCTION_CALL = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/relation_connection.rb#11
GraphQL::Pro::RelationConnection::Patterns::POSTGRES_CAST = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/relation_connection.rb#10
GraphQL::Pro::RelationConnection::Patterns::POSTGRES_JSON_ACCESS = T.let(T.unsafe(nil), String)

# source://graphql-pro//lib/graphql/pro/relation_connection/selects.rb#6
module GraphQL::Pro::RelationConnection::Selects
  class << self
    # Add some select fields to the `SELECT` part the of the query
    # so that we can reliably access them from the result.
    #
    # The selected fields are called `cursor_{idx}`, and they can be extracted to build cursors.
    #
    # @return [ActiveRecord::Relation] An equivalent relation, with added selects
    # @return [Hash<String => String>] A map of aliases to the original select fields
    #
    # source://graphql-pro//lib/graphql/pro/relation_connection/selects.rb#19
    def apply(relation, order_values); end

    # Build a String cursor using the aliased fields in the selection
    #
    # @param node [Object] a member of the relation
    # @param order_values [Array] extracted order values from the relation
    # @return [String] a value to be encoded and returned
    # @see {Selects.apply} where those selections are added
    #
    # source://graphql-pro//lib/graphql/pro/relation_connection/selects.rb#69
    def cursor_for(node, order_values); end

    private

    # JSON's default datetime format doesn't include fractional seconds,
    # but that's required for precise, stable cursors. So we've improved
    # serialization in that case.
    #
    # If you're having trouble because of this, please let me know!
    #
    # @param value [Object] A value read from the database adapter
    # @return [Object] something ready for `JSON.dump`
    #
    # source://graphql-pro//lib/graphql/pro/relation_connection/selects.rb#93
    def prepare_cursor_value(value); end
  end
end

# source://graphql-pro//lib/graphql/pro/relation_connection/selects.rb#10
GraphQL::Pro::RelationConnection::Selects::ALIASED_SELECT = T.let(T.unsafe(nil), Regexp)

# source://graphql-pro//lib/graphql/pro/relation_connection/selects.rb#7
class GraphQL::Pro::RelationConnection::Selects::CursorValueMissingError < ::GraphQL::Error; end

# source://graphql-pro//lib/graphql/pro/routes.rb#5
module GraphQL::Pro::Routes; end

# source://graphql-pro//lib/graphql/pro/routes.rb#40
class GraphQL::Pro::Routes::Lazy
  # @return [Lazy] a new instance of Lazy
  #
  # source://graphql-pro//lib/graphql/pro/routes.rb#41
  def initialize(schema_class_name); end

  # @return [AblySubscriptions::WebhooksClient] A rack app for getting unsubscribe hooks from Ably
  #
  # source://graphql-pro//lib/graphql/pro/routes.rb#61
  def ably_webhooks_client; end

  # @return [GraphQL::Pro::Dashboard] A rack app for browsing GraphQL::Pro data
  #
  # source://graphql-pro//lib/graphql/pro/routes.rb#46
  def dashboard; end

  # @return [GraphQL::Pro::OperationStore::Endpoint] A rack app for receiving stored operations from clients
  #
  # source://graphql-pro//lib/graphql/pro/routes.rb#51
  def operation_store_sync; end

  # @return [PubnubSubscriptions::WebhooksClient] A rack app for getting unsubscribe hooks from Pubnub
  #
  # source://graphql-pro//lib/graphql/pro/routes.rb#66
  def pubnub_webhooks_client; end

  # @return [PusherSubscriptions::WebhooksClient] A rack app for getting unsubscribe hooks from Pusher
  #
  # source://graphql-pro//lib/graphql/pro/routes.rb#56
  def pusher_webhooks_client; end
end

# source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#205
class GraphQL::Pro::SqliteStableRelationConnection < ::GraphQL::Pro::StableRelationConnection
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#206
  def small_nulls?; end
end

# source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#8
class GraphQL::Pro::StableRelationConnection < ::GraphQL::Pagination::ActiveRecordRelationConnection
  # @return [StableRelationConnection] a new instance of StableRelationConnection
  #
  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#21
  def initialize(items, *args, **kwargs); end

  # Build a String cursor using the aliased fields in the selection
  #
  # @param node [Object] a member of the relation
  # @return [String] GraphQL-ready cursor for `cursor`
  # @see {Selects.apply} where those selections are added
  #
  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#35
  def cursor_for(node); end

  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#74
  def end_cursor; end

  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#58
  def has_next_page; end

  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#47
  def has_previous_page; end

  # Override this hook so that `node` can be annotated with the `SELECT`s
  # required for building a cursor.
  #
  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#42
  def range_add_edge(node); end

  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#69
  def start_cursor; end

  private

  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#102
  def limited_nodes; end

  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#81
  def load_nodes; end

  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#124
  def load_nodes_by_value; end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#120
  def offset_cursor?(cursor); end

  # When this is true, delegate to offset-based loading;
  # but it will still use this class's `cursor_for` implementation
  # and provide forward-compatible value-based cursors
  #
  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#113
  def offset_fallback?; end

  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#94
  def sliced_nodes; end
end

# source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#9
class GraphQL::Pro::StableRelationConnection::InvalidCursorError < ::GraphQL::ExecutionError
  # @return [InvalidCursorError] a new instance of InvalidCursorError
  #
  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#12
  def initialize(argument_name:); end

  # Returns the value of attribute argument_name.
  #
  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#11
  def argument_name; end

  # Returns the value of attribute cursor_value.
  #
  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#10
  def cursor_value; end

  # Sets the attribute cursor_value
  #
  # @param value the value to set the attribute cursor_value to.
  #
  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#10
  def cursor_value=(_arg0); end

  # source://graphql-pro//lib/graphql/pro/stable_relation_connection.rb#16
  def message; end
end

# source://graphql-pro//lib/graphql/pro/stream.rb#6
class GraphQL::Pro::Stream < ::GraphQL::Schema::Directive
  extend ::GraphQL::Schema::Member::HasArguments::ClassConfigured::InheritedArguments

  class << self
    # source://graphql/2.0.29/lib/graphql/schema/member/has_arguments.rb#68
    def load_if(value, _context = T.unsafe(nil)); end

    # source://graphql/2.0.29/lib/graphql/schema/member/has_arguments.rb#68
    def load_initial_count(value, _context = T.unsafe(nil)); end

    # source://graphql/2.0.29/lib/graphql/schema/member/has_arguments.rb#68
    def load_label(value, _context = T.unsafe(nil)); end

    # source://graphql-pro//lib/graphql/pro/stream.rb#21
    def resolve_each(object, arguments, context, &block); end

    # source://graphql-pro//lib/graphql/pro/stream.rb#41
    def use(schema); end
  end
end

# source://graphql-pro//lib/graphql/pro/subscriptions/pusher_transport.rb#4
class GraphQL::Pro::Subscriptions < ::GraphQL::Subscriptions
  extend ::Forwardable

  # @param schema [Class<GraphQL::Schema>]
  # @param redis [Redis]
  # @param cleanup_delay_s [Integer] Number of seconds to wait before cleaning up brand new subscriptions
  # @param stale_ttl_s [Integer] Clean up subscriptions after this many seconds have passed without pushing an update.
  #   In theory, this shouldn't be necessary, but evidently there are some weird edge cases, so you could set this for a long duration.
  # @return [Subscriptions] a new instance of Subscriptions
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#24
  def initialize(schema:, redis: T.unsafe(nil), connection_pool: T.unsafe(nil), cleanup_delay_s: T.unsafe(nil), pusher: T.unsafe(nil), stale_ttl_s: T.unsafe(nil), **rest); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def clear(*args, **_arg1, &block); end

  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#102
  def delete_subscription(subscription_id, subscription: T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def deliver(*args, **_arg1, &block); end

  # Returns the value of attribute delivery_class.
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#42
  def delivery_class; end

  # This is called on a GraphQL::Query::Context
  # and should return a string, which will be stored in Redis.
  #
  # @param ctx [GraphQL::Query::Context]
  # @return [String]
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#111
  def dump_context(ctx); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each_subscription_id(*args, **_arg1, &block); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#51
  def execute_all_with_backwards_compat(event, object); end

  # Given a stringified context from Redis,
  # Return a hash for passing as `context:` to `.execute`
  #
  # @param ctx_str [String] A value returned from {#dump_context}
  # @return [Hash] Key-value pairs for `context:`
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#119
  def load_context(ctx_str); end

  # This is used for backwards compatibility between 1.11+ and older versions
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#40
  def new_subscriptions; end

  # This is used for backwards compatibility between 1.11+ and older versions
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#40
  def new_subscriptions=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read_subscription(*args, **_arg1, &block); end

  # Called when an error is encountered when reloading query data from storage
  #
  # @example Suppressing the error and deleting the subscription
  #
  #   class ErrorHandlingSubscriptions < GraphQL::Pro::PusherSubscriptions
  #   def read_subscription_failed_error(subscription_id, _query_data, error)
  #   BugTracker.report(error)
  #   delete_subscription(subscription_id)
  #   end
  #   end
  # @param subscription_id [String] The Subscription ID that was being loaded
  # @param query_data [Hash<String => String>] Raw data from Redis
  # @param error [StandardError] The error encountered when trying to reload the query
  # @return [void]
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#136
  def read_subscription_failed_error(subscription_id, query_data, error); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def topics(*args, **_arg1, &block); end

  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#94
  def write_subscription(query, events); end

  private

  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#156
  def filter_still_subscribed(subscription_ids); end

  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#189
  def log_debug(loggable); end

  # @return [Boolean]
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#185
  def still_subscribed?(subscription_id); end

  class << self
    # source://graphql-pro//lib/graphql/pro/subscriptions.rb#12
    def use(*args, **kwargs); end
  end
end

# source://graphql-pro//lib/graphql/pro/subscriptions.rb#140
class GraphQL::Pro::Subscriptions::Delivery
  # @return [Delivery] a new instance of Delivery
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#141
  def initialize(subscriptions); end

  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#145
  def add(subscription_id, result); end

  # source://graphql-pro//lib/graphql/pro/subscriptions.rb#149
  def finish; end
end

# @api private
#
# source://graphql-pro//lib/graphql/pro/subscriptions/pusher_transport.rb#6
class GraphQL::Pro::Subscriptions::PusherTransport
  # @api private
  # @return [PusherTransport] a new instance of PusherTransport
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/pusher_transport.rb#7
  def initialize(pusher:); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/pusher_transport.rb#11
  def deliver(subscription_id, result); end
end

# @api private
#
# source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#8
class GraphQL::Pro::Subscriptions::RedisStorage
  # @api private
  # @return [RedisStorage] a new instance of RedisStorage
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#148
  def initialize(subscriptions:, stale_ttl:, redis: T.unsafe(nil), connection_pool: T.unsafe(nil)); end

  # Clear all subscription state
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#408
  def clear(cursor: T.unsafe(nil)); end

  # Delete this subscription by:
  # - removing it from each of its topics lists of subscriptions
  # - if it was the last subscriber to a topic, removing the topic from the list of topics
  # - removing its query data
  #
  # @api private
  # @param query_data [Hash] The result of `read_subscription`, if it's already available.
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#371
  def delete_subscription(sub_id, subscription: T.unsafe(nil)); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#283
  def each_fingerprint_and_subscription_ids(topic); end

  # Find each subscription for the triggered topic
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#338
  def each_subscription_id(topic); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#270
  def each_subscription_id_legacy(topic); end

  # Fetch the query data for this subscription
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#232
  def read_subscription(sub_id); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#236
  def read_subscriptions(sub_ids); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#362
  def remove_topic(topic); end

  # This subscription received an update, reset the TTL
  # (No-op when no TTL is configured)
  #
  # @api private
  # @param subscription_id [String, Array<String>]
  # @return void
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#214
  def reset_ttl(subscription_id); end

  # For the UI:
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#419
  def topics(limit:, offset:); end

  # Record a few things:
  # - Query data for this subscription
  # - Add this subscription to each topic's list of subscriptions
  # - Add these topics to the global list of topics
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#159
  def write_subscription(query, events); end

  private

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#451
  def all_topics_key; end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#459
  def fingerprint_subscriptions_key(fingerprint); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#455
  def fingerprints_key(topic); end

  # This key holds query data for `sub_id`
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#442
  def subscription_key(sub_id); end

  # This key holds subscription ids for `topic`
  #
  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#447
  def topic_key(topic); end

  # @api private
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#463
  def with_redis(&block); end
end

# @api private
#
# source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#9
GraphQL::Pro::Subscriptions::RedisStorage::PREFIX = T.let(T.unsafe(nil), String)

# @api private
#
# source://graphql-pro//lib/graphql/pro/subscriptions/redis_storage.rb#11
class GraphQL::Pro::Subscriptions::RedisStorage::ScriptClient < ::GraphQL::Pro::RedisScriptClient; end

# source://graphql-pro//lib/graphql/pro/subscriptions/webhooks_client.rb#7
class GraphQL::Pro::Subscriptions::WebhooksClient
  # @return [WebhooksClient] a new instance of WebhooksClient
  #
  # source://graphql-pro//lib/graphql/pro/subscriptions/webhooks_client.rb#8
  def initialize(schema: T.unsafe(nil), schema_class_name: T.unsafe(nil)); end

  # source://graphql-pro//lib/graphql/pro/subscriptions/webhooks_client.rb#16
  def call(env); end
end

# source://graphql-pro//lib/graphql/pro/version.rb#4
GraphQL::Pro::VERSION = T.let(T.unsafe(nil), String)

class GraphQL::Query
  include ::GraphQL::Pro::OperationStore::QueryExtension

  # source://graphql-pro//lib/graphql/pro/operation_store.rb#304
  def initialize(*_args, **_kwargs); end

  # source://graphql/2.0.29/lib/graphql/query.rb#377
  def after_lazy(value, &block); end

  # source://graphql/2.0.29/lib/graphql/query.rb#322
  def analysis_errors; end

  # source://graphql/2.0.29/lib/graphql/query.rb#322
  def analysis_errors=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def analyzers(*args, **_arg1, &block); end

  # source://graphql/2.0.29/lib/graphql/query.rb#275
  def arguments_cache; end

  # source://graphql/2.0.29/lib/graphql/query.rb#271
  def arguments_for(ast_node, definition, parent_object: T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def ast_analyzers(*args, **_arg1, &block); end

  # source://graphql/2.0.29/lib/graphql/query.rb#28
  def context; end

  # source://graphql/2.0.29/lib/graphql/query.rb#185
  def current_trace; end

  # source://graphql/2.0.29/lib/graphql/query.rb#65
  def document; end

  # source://graphql/2.0.29/lib/graphql/query.rb#233
  def executed?; end

  # source://graphql/2.0.29/lib/graphql/query.rb#301
  def fingerprint; end

  # source://graphql/2.0.29/lib/graphql/query.rb#216
  def fragments; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_field(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_type(*args, **_arg1, &block); end

  # source://graphql/2.0.29/lib/graphql/query.rb#373
  def handle_or_reraise(err); end

  # source://graphql/2.0.29/lib/graphql/query.rb#74
  def inspect; end

  # source://graphql/2.0.29/lib/graphql/query.rb#178
  def interpreter?; end

  # source://graphql/2.0.29/lib/graphql/query.rb#195
  def lookahead; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def max_complexity(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def max_depth(*args, **_arg1, &block); end

  # source://graphql/2.0.29/lib/graphql/query.rb#358
  def merge_filters(only: T.unsafe(nil), except: T.unsafe(nil)); end

  # source://graphql/2.0.29/lib/graphql/query.rb#182
  def multiplex; end

  # source://graphql/2.0.29/lib/graphql/query.rb#182
  def multiplex=(_arg0); end

  # source://graphql/2.0.29/lib/graphql/query.rb#349
  def mutation?; end

  # source://graphql/2.0.29/lib/graphql/query.rb#306
  def operation_fingerprint; end

  # source://graphql/2.0.29/lib/graphql/query.rb#34
  def operation_name; end

  # source://graphql/2.0.29/lib/graphql/query.rb#34
  def operation_name=(_arg0); end

  # source://graphql/2.0.29/lib/graphql/query.rb#220
  def operations; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def possible_types(*args, **_arg1, &block); end

  # source://graphql/2.0.29/lib/graphql/query.rb#28
  def provided_variables; end

  # source://graphql/2.0.29/lib/graphql/query.rb#353
  def query?; end

  # source://graphql/2.0.29/lib/graphql/query.rb#174
  def query_string; end

  # source://graphql/2.0.29/lib/graphql/query.rb#62
  def query_string=(_arg0); end

  # source://graphql/2.0.29/lib/graphql/query.rb#337
  def resolve_type(abstract_type, value = T.unsafe(nil)); end

  # source://graphql/2.0.29/lib/graphql/query.rb#226
  def result; end

  # source://graphql/2.0.29/lib/graphql/query.rb#214
  def result_values; end

  # source://graphql/2.0.29/lib/graphql/query.rb#204
  def result_values=(result_hash); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def root_type_for_operation(*args, **_arg1, &block); end

  # source://graphql/2.0.29/lib/graphql/query.rb#31
  def root_value; end

  # source://graphql/2.0.29/lib/graphql/query.rb#31
  def root_value=(_arg0); end

  # source://graphql/2.0.29/lib/graphql/query.rb#283
  def sanitized_query_string(inline_variables: T.unsafe(nil)); end

  # source://graphql/2.0.29/lib/graphql/query.rb#28
  def schema; end

  # source://graphql/2.0.29/lib/graphql/query.rb#244
  def selected_operation; end

  # source://graphql/2.0.29/lib/graphql/query.rb#79
  def selected_operation_name; end

  # source://graphql/2.0.29/lib/graphql/query.rb#237
  def static_errors; end

  # source://graphql/2.0.29/lib/graphql/query.rb#49
  def static_validator; end

  # source://graphql/2.0.29/lib/graphql/query.rb#52
  def static_validator=(new_validator); end

  # source://graphql/2.0.29/lib/graphql/query.rb#368
  def subscription?; end

  # source://graphql/2.0.29/lib/graphql/query.rb#85
  def subscription_topic; end

  # source://graphql/2.0.29/lib/graphql/query.rb#189
  def subscription_update?; end

  # source://graphql/2.0.29/lib/graphql/query.rb#87
  def tracers; end

  # source://graphql/2.0.29/lib/graphql/query.rb#323
  def valid?; end

  # source://graphql/2.0.29/lib/graphql/query.rb#37
  def validate; end

  # source://graphql/2.0.29/lib/graphql/query.rb#40
  def validate=(new_validate); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def validation_errors(*args, **_arg1, &block); end

  # source://graphql/2.0.29/lib/graphql/query.rb#315
  def validation_pipeline; end

  # source://graphql/2.0.29/lib/graphql/query.rb#254
  def variables; end

  # source://graphql/2.0.29/lib/graphql/query.rb#311
  def variables_fingerprint; end

  # source://graphql/2.0.29/lib/graphql/query.rb#327
  def warden; end

  private

  # source://graphql/2.0.29/lib/graphql/query.rb#391
  def find_operation(operations, operation_name); end

  # source://graphql/2.0.29/lib/graphql/query.rb#401
  def prepare_ast; end

  # source://graphql/2.0.29/lib/graphql/query.rb#465
  def with_prepared_ast; end
end

class GraphQL::Schema
  include ::GraphQL::Pro::OperationStore::SchemaExtension
  extend ::GraphQL::EmptyObjects
  extend ::GraphQL::Pro::OperationStore::SchemaExtension::ClassMethods
end

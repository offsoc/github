<%# erblint:counter DeprecatedComponentsCounter 2 %>
<%# view is an instance of Integrations::FormView %>

<%= form_for view.integration, url: form_action, method: view.integration.persisted? ? :put : :post, html: {"aria-label": "GitHub App"} do |f| %>
  <% if field_has_errors?(view.integration, :user) %>
    <% if GitHub.flipper[:banner_migration].enabled?(current_user) %>
      <%= render(Primer::Alpha::Banner.new(scheme: :danger, mb: 4, icon: "alert")) do %>
        <%= error_for(view.integration, :user, human_field: "") %>
      <% end %>
    <% else %>
      <%= render(Primer::Beta::Flash.new(scheme: :danger, mb: 4, icon: "alert")) do %>
        <%= error_for(view.integration, :user, human_field: "") %>
      <% end %>
    <% end %>
  <% end %>

  <%= f.text_group "GitHub App name", :name,
        :hint => "The name of your GitHub App.",
        :error => error_for(view.integration, :name),
        :class => "wide",
        :group_class => "required",
        :required => "required" %>

  <%= render partial: "integrations/settings/preview_markdown_field", locals: {integration: view.integration, form: f, field: :description } %>

  <%= f.text_group "Homepage URL", :url,
        value: view.integration.raw_url,
        :hint => "The full URL to your GitHub Appâ€™s website.",
        :error => error_for(view.integration, :url, human_field: "Homepage URL"),
        :group_class => "required",
        :required => "required" %>

  <% if GitHub.flipper[:api_version_pinning].enabled?(view.integration) %>
    <dl class="form-group">
      <dt class="input-label"><label for="oauth_application_pinned_api_version">API Version</label></dt>
      <dd>
        <%= f.select :pinned_api_version, Rest::HasPinnedApiVersion.version_options_for_select, {}, { class: "form-select", :"aria-label" => "API Version", :"aria-describedby" => "settings_application_api_version_note" } %>
        <p class="text-small color-fg-muted mt-3" id="settings_application_api_version_note">
          This version of the API will be used for any requests made by the app, unless those requests include version headers.
        </p>
      </dd>
    </dl>
  <% end %>
  <%= render Primer::Beta::Subhead.new(spacious: true, mb: 0) do |component| %>
    <% component.with_heading(tag: :h2, font_size: 3) do %>Identifying and authorizing users<% end %>

    <% component.with_actions do %>
      <%= render Primer::ButtonComponent.new(variant: :small, classes: "js-add-application-callback-url") do %>
        Add Callback URL
      <% end %>
    <% end %>

    <% component.with_description do %>
      The full URL to redirect to after a user authorizes an installation.
      <p class="note">Read our <%= link_to "Callback URL documentation", "#{ GitHub.developer_help_url }/apps/creating-github-apps/registering-a-github-app/about-the-user-authorization-callback-url/", class: "Link--inTextBlock" %> for more information.</p>
    <% end %>
  <% end %>

  <div class="js-application-callback-urls" data-index="<%= view.application_callback_urls.count %>">
    <% has_collection_errors = field_has_errors?(view.integration, :application_callback_urls) %>

    <template class="js-new-application-callback-url">
      <%= f.fields_for :application_callback_urls, ApplicationCallbackUrl.new, child_index: "TEMPLATE_INDEX" do |new_callback_url_form| %>
        <%= render "integrations/settings/application_callback_url_row", form: new_callback_url_form, default: false, has_errors: false, integration: view.integration, has_collection_errors: has_collection_errors %>
      <% end %>
    </template>

    <%= f.fields_for :application_callback_urls, view.application_callback_urls do |application_callback_url_fields| %>
      <% index = application_callback_url_fields.index %>
      <% has_errors = field_has_errors?(application_callback_url_fields.object, :url) %>

      <%= render "integrations/settings/application_callback_url_row", form: application_callback_url_fields, default: index.zero?, has_errors: has_errors, integration: view.integration, has_collection_errors: has_collection_errors %>
    <% end %>
  </div>

  <% if view.integration.new_record? %>
    <dl class="form-group">
      <dt>
        <label for="integration_user_token_expiration_enabled" aria-describedby="help-text-for-redirect-on-update">
          <%= f.check_box :user_token_expiration_enabled, checked: "checked" %>
          Expire user authorization tokens
        </label>
      </dt>
      <dd>
        <p class="note" id="help-text-for-token-expiration-enabled">
          This will provide a <code>refresh_token</code> which can be used to request an updated access token when this access token expires.
        </p>
      </dd>
    </dl>
  <% end %>

  <dl class="form-group">
    <dt>
      <label for="integration_request_oauth_on_install" aria-describedby="help-text-for-request-oauth-on-install">
        <%= f.check_box :request_oauth_on_install, class: "js-edit-integration-request-oauth-on-install" %>
        Request user authorization (OAuth) during installation
      </label>
    </dt>
    <dd>
      <p class="note" id="help-text-for-request-oauth-on-install">
        Requests that the installing user grants access to their identity during installation of your App
      </p>
      <p class="note">Read our <%= link_to "Identifying and authorizing users for GitHub Apps documentation", "#{ GitHub.developer_help_url }/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/", class: "Link--inTextBlock" %> for more information.</p>
    </dd>
  </dl>

  <dl class="form-group">
    <dt>
      <label for="device_flow_enabled" aria-describedby="help-text-for-device-flow-enabled">
        <%= f.check_box :device_flow_enabled %>
        Enable Device Flow
      </label>
    </dt>
    <dd>
      <p class="note" id="help-text-for-device-flow-enabled">
        Allow this GitHub App to authorize users via the Device Flow.
      </p>
      <p class="note">Read the <%= link_to "Device Flow documentation", "#{ GitHub.developer_help_url }/apps/building-oauth-apps/authorizing-oauth-apps#device-flow", class: "Link--inTextBlock" %> for more information.</p>
    </dd>
  </dl>

  <%= render Primer::Beta::Subhead.new(spacious: true, mb: 0) do |component| %>
    <% component.with_heading(tag: :h2, font_size: 3) do %>Post installation<% end %>
  <% end %>

  <%= f.text_group "Setup URL (optional)", :setup_url,
        value: view.integration.raw_setup_url,
        hint: { text: view.setup_url_hint, class: "js-setup-url-hint" },
        error: error_for(view.integration, :setup_url, human_field: "Setup URL"),
        field: {
          disabled: view.integration.can_request_oauth_on_install?,
          placeholder: view.integration.can_request_oauth_on_install? ? Integrations::FormView::UNAVAILABLE_WHEN_REQUESTING_ON_INSTALL : ""
        },
        class: "js-edit-integration-setup-url",
        "data-setup-url" => view.integration.setup_url,
        "data-hint-setup-url" => Integrations::FormView::SETUP_URL_HINT,
        "data-hint-same-as-callback-url" => Integrations::FormView::SAME_AS_CALLBACK_URL_HINT,
        "data-hint-unavailable-when-install" => Integrations::FormView::UNAVAILABLE_WHEN_REQUESTING_ON_INSTALL
      %>

  <dl class="form-group">
    <dt>
      <label for="integration_setup_on_update" aria-describedby="help-text-for-redirect-on-update">
        <%= f.check_box :setup_on_update %>
        Redirect on update
      </label>
    </dt>
    <dd>
      <p
        class="note js-help-text-for-redirect-on-update"
        id="help-text-for-redirect-on-update"
        data-hint-redirect-on-update-callback-url="<%= view.redirect_on_update_request_oauth_on_install_hint %>"
        data-hint-redirect-on-update-setup-url="<%= view.redirect_on_update_request_setup_url_hint %>"
      >
        <%= view.redirect_on_update_hint %>
      </p>
    </dd>
  </dl>

  <%= render Primer::Beta::Subhead.new(spacious: true, mb: 0) do |component| %>
    <% component.with_heading(tag: :h2, font_size: 3) do %>Webhook<% end %>
  <% end %>

  <%= f.fields_for :hook, view.hook, include_id: false do |hook_fields| %>
    <%= render "hooks/webhook_active", field_name: "integration[hook_attributes][active]", active: view.hook.active? %>

    <% hook_url_field_options = {
      :hint => safe_join(["Events will POST to this URL. Read our",
                          link_to("webhook documentation", "#{ GitHub.developer_help_url }/webhooks/", class: "Link--inTextBlock"),
                          "for more information."], " "),
      :value => view.hook.raw_url,
      :error => view.hook_url_error }.tap do |opts|
        opts[:class] = "js-hook-url-field"
        opts[:class] = "#{opts[:class]} required" if view.hook.active?
        opts[:required] = "required" if view.hook.active?
      end
    %>
    <%= hook_fields.text_group "Webhook URL", :url, hook_url_field_options %>

    <%= hook_fields.hidden_field :_destroy, value: view.hook.raw_url.blank? %>

    <div class="form-group">
      <%= render "hooks/secret_field", field_name: "integration[hook_attributes][secret]", hook_persisted: view.hook.persisted?, current_value: view.hook.secret %>
      <p class="note">Read our <%= link_to "webhook secret documentation", "#{ GitHub.developer_help_url }/webhooks/securing/", class: "Link--inTextBlock" %> for more information.</p>
    </div>

    <%= render "hooks/webhook_ssl_fields", form: hook_fields, hook: view.hook %>
  <% end %>

  <% if view.show_permission_fields? %>
    <%= render "integrations/settings/permission_fields", view: create_view_model(Integrations::PermissionsView, { :integration => view.integration, :form => f, :hook => view.hook }) %>
  <% end %>

  <% if view.show_privacy_fields? %>
    <%= render(Primer::Alpha::RadioButtonGroup.new(name: "integration[public]", label: "Where can this GitHub App be installed?", my: 3)) do |component| %>
      <% component.radio_button(
        label: "Only on this account",
        value: false,
        caption: "Only allow this GitHub App to be installed on the @#{view.owner.display_login} account.",
        disabled: !view.integration_can_be_private?,
        checked: view.private_checked?
      ) %>

      <% if view.show_public_visibility? %>
        <% component.radio_button(
          label: view.public_label,
          value: true,
          caption: view.public_caption,
          checked: !view.private_checked?
        ) %>
      <% end %>
    <% end %>
  <% end %>

  <div class="clearfix">
    <% if !view.integration.new_record? && current_user.employee? && Apps::Internal.capable?(:proxima_first_party_sync, app: view.integration) %>
      <%= render(Primer::Alpha::Banner.new(scheme: :warning, mb: 3, mt: 4)) do %>
        <p>This integration is currently sync'd on all Proxima stamp environments. Before making changes, please ensure that you are properly handling the setting changes in all environments. There may be a delay of up to five minutes before changes to this integration's settings are reflected in the Proxima stamp environments.</p>
        <p>Refer to <%= link_to("the documentation on The Hub", "https://thehub.github.com/epd/engineering/products-and-services/dotcom/apps/proxima/how-to-synchronize-apps-on-proxima/", class: "Link--inTextBlock") %> for more information.</p>
      <% end %>
    <% end %>

    <%= f.submit view.submit_text, :class => "btn btn-primary" %>
    <%= link_to "Cancel", gh_settings_apps_path(current_user), :class => "btn btn-invisible" %>
  </div>
<% end %>

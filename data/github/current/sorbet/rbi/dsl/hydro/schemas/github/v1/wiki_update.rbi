# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::WikiUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::WikiUpdate`.

class Hydro::Schemas::Github::V1::WikiUpdate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      actor_is_member: T.nilable(T::Boolean),
      page_body: T.nilable(String),
      page_body_size: T.untyped,
      page_name: T.nilable(String),
      page_url: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      spamurai_form_signals: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals),
      specimen_wiki_content: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)
    ).void
  end
  def initialize(actor: nil, actor_is_member: nil, page_body: nil, page_body_size: nil, page_name: nil, page_url: nil, repository: nil, repository_owner: nil, request_context: nil, spamurai_form_signals: nil, specimen_wiki_content: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T::Boolean) }
  def actor_is_member; end

  sig { params(value: T::Boolean).void }
  def actor_is_member=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_actor_is_member; end

  sig { void }
  def clear_page_body; end

  sig { void }
  def clear_page_body_size; end

  sig { void }
  def clear_page_name; end

  sig { void }
  def clear_page_url; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_spamurai_form_signals; end

  sig { void }
  def clear_specimen_wiki_content; end

  sig { returns(String) }
  def page_body; end

  sig { params(value: String).void }
  def page_body=(value); end

  sig { returns(T.untyped) }
  def page_body_size; end

  sig { params(value: T.untyped).void }
  def page_body_size=(value); end

  sig { returns(String) }
  def page_name; end

  sig { params(value: String).void }
  def page_name=(value); end

  sig { returns(String) }
  def page_url; end

  sig { params(value: String).void }
  def page_url=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)) }
  def spamurai_form_signals; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)).void }
  def spamurai_form_signals=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)) }
  def specimen_wiki_content; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)).void }
  def specimen_wiki_content=(value); end
end

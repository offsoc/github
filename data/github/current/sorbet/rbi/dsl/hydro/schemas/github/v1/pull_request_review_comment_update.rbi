# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::PullRequestReviewCommentUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::PullRequestReviewCommentUpdate`.

class Hydro::Schemas::Github::V1::PullRequestReviewCommentUpdate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue),
      pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest),
      pull_request_review: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequestReview),
      pull_request_review_comment: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequestReviewComment),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      specimen_body: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)
    ).void
  end
  def initialize(actor: nil, feature_flags: T.unsafe(nil), issue: nil, pull_request: nil, pull_request_review: nil, pull_request_review_comment: nil, repository: nil, repository_owner: nil, specimen_body: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_issue; end

  sig { void }
  def clear_pull_request; end

  sig { void }
  def clear_pull_request_review; end

  sig { void }
  def clear_pull_request_review_comment; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_specimen_body; end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def issue=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def pull_request=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequestReview)) }
  def pull_request_review; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequestReview)).void }
  def pull_request_review=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequestReviewComment)) }
  def pull_request_review_comment; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequestReviewComment)).void }
  def pull_request_review_comment=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)) }
  def specimen_body; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)).void }
  def specimen_body=(value); end
end

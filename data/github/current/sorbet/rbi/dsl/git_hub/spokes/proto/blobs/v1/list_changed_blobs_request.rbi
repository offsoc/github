# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::Blobs::V1::ListChangedBlobsRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::Blobs::V1::ListChangedBlobsRequest`.

class GitHub::Spokes::Proto::Blobs::V1::ListChangedBlobsRequest
  sig do
    params(
      commit_order: T.nilable(T.any(Symbol, Integer)),
      cursor: T.nilable(GitHub::Spokes::Proto::Types::V1::Cursor),
      fork_push_selector: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::ForkPushSelector),
      push_selector: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::PushSelector),
      quarantine_objects_selector: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::QuarantineObjectsSelector),
      repository: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository),
      request_context: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext),
      universal_selector: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::UniversalSelector)
    ).void
  end
  def initialize(commit_order: nil, cursor: nil, fork_push_selector: nil, push_selector: nil, quarantine_objects_selector: nil, repository: nil, request_context: nil, universal_selector: nil); end

  sig { void }
  def clear_commit_order; end

  sig { void }
  def clear_cursor; end

  sig { void }
  def clear_fork_push_selector; end

  sig { void }
  def clear_push_selector; end

  sig { void }
  def clear_quarantine_objects_selector; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_universal_selector; end

  sig { returns(T.any(Symbol, Integer)) }
  def commit_order; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def commit_order=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Cursor)) }
  def cursor; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Cursor)).void }
  def cursor=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::ForkPushSelector)) }
  def fork_push_selector; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::ForkPushSelector)).void }
  def fork_push_selector=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::PushSelector)) }
  def push_selector; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::PushSelector)).void }
  def push_selector=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::QuarantineObjectsSelector)) }
  def quarantine_objects_selector; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::QuarantineObjectsSelector)).void }
  def quarantine_objects_selector=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)) }
  def repository; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Symbol)) }
  def selector; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::UniversalSelector)) }
  def universal_selector; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::UniversalSelector)).void }
  def universal_selector=(value); end
end

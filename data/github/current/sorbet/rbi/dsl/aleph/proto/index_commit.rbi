# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Aleph::Proto::IndexCommit`.
# Please instead update this file by running `bin/tapioca dsl Aleph::Proto::IndexCommit`.

class Aleph::Proto::IndexCommit
  sig do
    params(
      hydro_source: T.nilable(Aleph::Proto::HydroMessage),
      id: T.nilable(String),
      ignore_indexing_feature_flags: T.nilable(T::Boolean),
      language_id: T.nilable(Integer),
      ref: T.nilable(Aleph::Proto::Ref),
      repo_commit: T.nilable(Aleph::Proto::RepoCommit),
      repo_name: T.nilable(Aleph::Proto::RepoName)
    ).void
  end
  def initialize(hydro_source: nil, id: nil, ignore_indexing_feature_flags: nil, language_id: nil, ref: nil, repo_commit: nil, repo_name: nil); end

  sig { void }
  def clear_hydro_source; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_ignore_indexing_feature_flags; end

  sig { void }
  def clear_language_id; end

  sig { void }
  def clear_ref; end

  sig { void }
  def clear_repo_commit; end

  sig { void }
  def clear_repo_name; end

  sig { returns(T.nilable(Aleph::Proto::HydroMessage)) }
  def hydro_source; end

  sig { params(value: T.nilable(Aleph::Proto::HydroMessage)).void }
  def hydro_source=(value); end

  sig { returns(String) }
  def id; end

  sig { params(value: String).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def ignore_indexing_feature_flags; end

  sig { params(value: T::Boolean).void }
  def ignore_indexing_feature_flags=(value); end

  sig { returns(Integer) }
  def language_id; end

  sig { params(value: Integer).void }
  def language_id=(value); end

  sig { returns(T.nilable(Aleph::Proto::Ref)) }
  def ref; end

  sig { params(value: T.nilable(Aleph::Proto::Ref)).void }
  def ref=(value); end

  sig { returns(T.nilable(Aleph::Proto::RepoCommit)) }
  def repo_commit; end

  sig { params(value: T.nilable(Aleph::Proto::RepoCommit)).void }
  def repo_commit=(value); end

  sig { returns(T.nilable(Aleph::Proto::RepoName)) }
  def repo_name; end

  sig { params(value: T.nilable(Aleph::Proto::RepoName)).void }
  def repo_name=(value); end
end

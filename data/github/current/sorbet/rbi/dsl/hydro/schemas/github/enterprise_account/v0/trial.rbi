# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::EnterpriseAccount::V0::Trial`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::EnterpriseAccount::V0::Trial`.

class Hydro::Schemas::Github::EnterpriseAccount::V0::Trial
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      context: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      emu: T.nilable(T::Boolean),
      enterprise: T.nilable(Hydro::Schemas::Github::V1::Entities::Business),
      expiration_timestamp: T.nilable(Google::Protobuf::Timestamp),
      metered: T.nilable(T::Boolean),
      status: T.nilable(T.any(Symbol, Integer)),
      upgraded_organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      user_initiated: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(actor: nil, context: T.unsafe(nil), emu: nil, enterprise: nil, expiration_timestamp: nil, metered: nil, status: nil, upgraded_organization: nil, user_initiated: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_context; end

  sig { void }
  def clear_emu; end

  sig { void }
  def clear_enterprise; end

  sig { void }
  def clear_expiration_timestamp; end

  sig { void }
  def clear_metered; end

  sig { void }
  def clear_status; end

  sig { void }
  def clear_upgraded_organization; end

  sig { void }
  def clear_user_initiated; end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def context; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def context=(value); end

  sig { returns(T::Boolean) }
  def emu; end

  sig { params(value: T::Boolean).void }
  def emu=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Business)) }
  def enterprise; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Business)).void }
  def enterprise=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def expiration_timestamp; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def expiration_timestamp=(value); end

  sig { returns(T::Boolean) }
  def metered; end

  sig { params(value: T::Boolean).void }
  def metered=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def upgraded_organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def upgraded_organization=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def user_initiated; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def user_initiated=(value); end
end

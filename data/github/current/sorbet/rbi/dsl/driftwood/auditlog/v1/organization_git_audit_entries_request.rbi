# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Driftwood::Auditlog::V1::OrganizationGitAuditEntriesRequest`.
# Please instead update this file by running `bin/tapioca dsl Driftwood::Auditlog::V1::OrganizationGitAuditEntriesRequest`.

class Driftwood::Auditlog::V1::OrganizationGitAuditEntriesRequest
  sig do
    params(
      after: T.nilable(String),
      aggregations: T.nilable(T::Boolean),
      api_request: T.nilable(T::Boolean),
      before: T.nilable(String),
      direction: T.nilable(T.any(Symbol, Integer)),
      disclose_ip_address: T.nilable(T::Boolean),
      export_request: T.nilable(T::Boolean),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      organization_id: T.nilable(Integer),
      per_page: T.nilable(Integer),
      phrase: T.nilable(String),
      region: T.nilable(Driftwood::Auditlog::V1::Region),
      sanitize_results: T.nilable(T::Boolean)
    ).void
  end
  def initialize(after: nil, aggregations: nil, api_request: nil, before: nil, direction: nil, disclose_ip_address: nil, export_request: nil, feature_flags: T.unsafe(nil), organization_id: nil, per_page: nil, phrase: nil, region: nil, sanitize_results: nil); end

  sig { returns(String) }
  def after; end

  sig { params(value: String).void }
  def after=(value); end

  sig { returns(T::Boolean) }
  def aggregations; end

  sig { params(value: T::Boolean).void }
  def aggregations=(value); end

  sig { returns(T::Boolean) }
  def api_request; end

  sig { params(value: T::Boolean).void }
  def api_request=(value); end

  sig { returns(String) }
  def before; end

  sig { params(value: String).void }
  def before=(value); end

  sig { void }
  def clear_after; end

  sig { void }
  def clear_aggregations; end

  sig { void }
  def clear_api_request; end

  sig { void }
  def clear_before; end

  sig { void }
  def clear_direction; end

  sig { void }
  def clear_disclose_ip_address; end

  sig { void }
  def clear_export_request; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_organization_id; end

  sig { void }
  def clear_per_page; end

  sig { void }
  def clear_phrase; end

  sig { void }
  def clear_region; end

  sig { void }
  def clear_sanitize_results; end

  sig { returns(T.any(Symbol, Integer)) }
  def direction; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def direction=(value); end

  sig { returns(T::Boolean) }
  def disclose_ip_address; end

  sig { params(value: T::Boolean).void }
  def disclose_ip_address=(value); end

  sig { returns(T::Boolean) }
  def export_request; end

  sig { params(value: T::Boolean).void }
  def export_request=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(Integer) }
  def organization_id; end

  sig { params(value: Integer).void }
  def organization_id=(value); end

  sig { returns(Integer) }
  def per_page; end

  sig { params(value: Integer).void }
  def per_page=(value); end

  sig { returns(String) }
  def phrase; end

  sig { params(value: String).void }
  def phrase=(value); end

  sig { returns(T.nilable(Driftwood::Auditlog::V1::Region)) }
  def region; end

  sig { params(value: T.nilable(Driftwood::Auditlog::V1::Region)).void }
  def region=(value); end

  sig { returns(T::Boolean) }
  def sanitize_results; end

  sig { params(value: T::Boolean).void }
  def sanitize_results=(value); end
end

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: services/selfhostedrunners.proto

require 'google/protobuf'

require 'pbtypes/github_pb'
Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("services/selfhostedrunners.proto", :syntax => :proto3) do
    add_message "git_hub.launch.services.selfhostedrunners.GetAccessPolicyRequest" do
      optional :owner_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
    end
    add_message "git_hub.launch.services.selfhostedrunners.UpdateAccessPolicyRequest" do
      optional :owner_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :permission_type, :enum, 2, "git_hub.launch.services.selfhostedrunners.PermissionType"
      repeated :selected_repositories, :message, 3, "git_hub.launch.pbtypes.git_hub.Identity"
    end
    add_message "git_hub.launch.services.selfhostedrunners.GetAccessPolicyResponse" do
      optional :permission_type, :enum, 1, "git_hub.launch.services.selfhostedrunners.PermissionType"
      repeated :selected_repositories, :message, 2, "git_hub.launch.pbtypes.git_hub.Identity"
    end
    add_message "git_hub.launch.services.selfhostedrunners.ListRunnersRequest" do
      optional :repository_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :per_page, :int64, 2
      optional :page, :int64, 3
      optional :include_assigned_request, :bool, 4
      optional :pool_id, :int64, 5
      optional :name, :string, 6
      optional :exclude_elastic_runners, :bool, 7
    end
    add_message "git_hub.launch.services.selfhostedrunners.ListRunnersResponse" do
      repeated :runners, :message, 1, "git_hub.launch.services.selfhostedrunners.Runner"
      optional :total_runners, :int64, 2
    end
    add_message "git_hub.launch.services.selfhostedrunners.BulkReplaceRunnerLabelsRequest" do
      optional :owner_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      repeated :updates, :message, 2, "git_hub.launch.services.selfhostedrunners.BulkReplaceRunnerLabelsRequest.RunnerLabelsUpdate"
    end
    add_message "git_hub.launch.services.selfhostedrunners.BulkReplaceRunnerLabelsRequest.RunnerLabelsUpdate" do
      optional :runner_id, :int64, 1
      repeated :label_ids, :int64, 2
    end
    add_message "git_hub.launch.services.selfhostedrunners.BulkUpdateRunnerLabelsRequest" do
      optional :owner_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      repeated :updates, :message, 2, "git_hub.launch.services.selfhostedrunners.BulkUpdateRunnerLabelsRequest.LabelOps"
    end
    add_message "git_hub.launch.services.selfhostedrunners.BulkUpdateRunnerLabelsRequest.LabelOps" do
      optional :runner_id, :int64, 1
      repeated :additions, :int64, 2
      repeated :removals, :int64, 3
    end
    add_message "git_hub.launch.services.selfhostedrunners.GetRunnerRequest" do
      optional :owner_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :runner_id, :int64, 2
    end
    add_message "git_hub.launch.services.selfhostedrunners.GetRunnerResponse" do
      optional :runner, :message, 1, "git_hub.launch.services.selfhostedrunners.Runner"
    end
    add_message "git_hub.launch.services.selfhostedrunners.GenerateJitRunnerRequest" do
      optional :owner_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :name, :string, 2
      optional :runner_group_id, :int64, 3
      repeated :labels, :string, 4
      optional :work_folder, :string, 5
      optional :github_url, :string, 6
    end
    add_message "git_hub.launch.services.selfhostedrunners.GenerateJitRunnerResponse" do
      optional :runner, :message, 1, "git_hub.launch.services.selfhostedrunners.Runner"
      optional :encoded_jit_config, :string, 2
    end
    add_message "git_hub.launch.services.selfhostedrunners.RegisterRunnerRequest" do
      optional :repository_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :owner_id, :message, 2, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :billing_owner_id, :message, 3, "git_hub.launch.pbtypes.git_hub.Identity"
    end
    add_message "git_hub.launch.services.selfhostedrunners.RegisterRunnerResponse" do
      optional :url, :string, 1
      optional :token, :string, 2
      optional :token_schema, :string, 3
    end
    add_message "git_hub.launch.services.selfhostedrunners.DeleteRunnerRequest" do
      optional :repository_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :runner_id, :int64, 2
    end
    add_message "git_hub.launch.services.selfhostedrunners.DeleteRunnerResponse" do
      optional :status, :string, 1
    end
    add_message "git_hub.launch.services.selfhostedrunners.Runner" do
      optional :id, :int64, 1
      optional :name, :string, 2
      optional :os, :string, 3
      optional :arch, :string, 4
      optional :status, :string, 5
      optional :assigned_request, :message, 6, "git_hub.launch.services.selfhostedrunners.Runner.AssignedRequest"
      repeated :labels, :message, 7, "git_hub.launch.services.selfhostedrunners.Label"
      optional :current_parallelism, :int64, 8
      optional :runner_group_id, :int64, 9
    end
    add_message "git_hub.launch.services.selfhostedrunners.Runner.AssignedRequest" do
      optional :job_name, :string, 1
      optional :check_run_id, :string, 2
      optional :external_build_id, :string, 3
    end
    add_message "git_hub.launch.services.selfhostedrunners.ListDownloadsRequest" do
      optional :repository_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
    end
    add_message "git_hub.launch.services.selfhostedrunners.ListDownloadsResponse" do
      repeated :downloads, :message, 1, "git_hub.launch.services.selfhostedrunners.Download"
    end
    add_message "git_hub.launch.services.selfhostedrunners.Download" do
      optional :type, :string, 1
      optional :platform, :string, 2
      optional :version, :string, 3
      optional :download_url, :string, 4
      optional :filename, :string, 5
      optional :os, :string, 6
      optional :architecture, :string, 7
      optional :download_token, :string, 8
      optional :sha256_hash, :string, 9
    end
    add_message "git_hub.launch.services.selfhostedrunners.ListLabelsRequest" do
      optional :owner_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
    end
    add_message "git_hub.launch.services.selfhostedrunners.ListLabelsResponse" do
      repeated :labels, :message, 1, "git_hub.launch.services.selfhostedrunners.Label"
    end
    add_message "git_hub.launch.services.selfhostedrunners.DeleteLabelRequest" do
      optional :owner_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :label_id, :int64, 2
    end
    add_message "git_hub.launch.services.selfhostedrunners.DeleteLabelResponse" do
      optional :status, :string, 1
    end
    add_message "git_hub.launch.services.selfhostedrunners.CreateLabelRequest" do
      optional :owner_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :name, :string, 2
    end
    add_message "git_hub.launch.services.selfhostedrunners.CreateLabelResponse" do
      optional :label, :message, 1, "git_hub.launch.services.selfhostedrunners.Label"
    end
    add_message "git_hub.launch.services.selfhostedrunners.Label" do
      optional :id, :int64, 1
      optional :name, :string, 2
      optional :type, :string, 3
    end
    add_enum "git_hub.launch.services.selfhostedrunners.PermissionType" do
      value :ALL_REPOSITORIES, 0
      value :PRIVATE_REPOSITORIES, 1
      value :SELECTED_REPOSITORIES, 2
    end
  end
end

module GitHub
  module Launch
    module Services
      module Selfhostedrunners
        GetAccessPolicyRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.GetAccessPolicyRequest").msgclass
        UpdateAccessPolicyRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.UpdateAccessPolicyRequest").msgclass
        GetAccessPolicyResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.GetAccessPolicyResponse").msgclass
        ListRunnersRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.ListRunnersRequest").msgclass
        ListRunnersResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.ListRunnersResponse").msgclass
        BulkReplaceRunnerLabelsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.BulkReplaceRunnerLabelsRequest").msgclass
        BulkReplaceRunnerLabelsRequest::RunnerLabelsUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.BulkReplaceRunnerLabelsRequest.RunnerLabelsUpdate").msgclass
        BulkUpdateRunnerLabelsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.BulkUpdateRunnerLabelsRequest").msgclass
        BulkUpdateRunnerLabelsRequest::LabelOps = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.BulkUpdateRunnerLabelsRequest.LabelOps").msgclass
        GetRunnerRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.GetRunnerRequest").msgclass
        GetRunnerResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.GetRunnerResponse").msgclass
        GenerateJitRunnerRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.GenerateJitRunnerRequest").msgclass
        GenerateJitRunnerResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.GenerateJitRunnerResponse").msgclass
        RegisterRunnerRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.RegisterRunnerRequest").msgclass
        RegisterRunnerResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.RegisterRunnerResponse").msgclass
        DeleteRunnerRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.DeleteRunnerRequest").msgclass
        DeleteRunnerResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.DeleteRunnerResponse").msgclass
        Runner = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.Runner").msgclass
        Runner::AssignedRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.Runner.AssignedRequest").msgclass
        ListDownloadsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.ListDownloadsRequest").msgclass
        ListDownloadsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.ListDownloadsResponse").msgclass
        Download = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.Download").msgclass
        ListLabelsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.ListLabelsRequest").msgclass
        ListLabelsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.ListLabelsResponse").msgclass
        DeleteLabelRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.DeleteLabelRequest").msgclass
        DeleteLabelResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.DeleteLabelResponse").msgclass
        CreateLabelRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.CreateLabelRequest").msgclass
        CreateLabelResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.CreateLabelResponse").msgclass
        Label = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.Label").msgclass
        PermissionType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.selfhostedrunners.PermissionType").enummodule
      end
    end
  end
end

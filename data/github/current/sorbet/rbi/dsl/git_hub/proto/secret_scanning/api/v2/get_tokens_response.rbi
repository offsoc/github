# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Proto::SecretScanning::Api::V2::GetTokensResponse`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Proto::SecretScanning::Api::V2::GetTokensResponse`.

class GitHub::Proto::SecretScanning::Api::V2::GetTokensResponse
  sig do
    params(
      has_backfill_scan_max_candidates: T.nilable(T::Boolean),
      has_backfill_scanning_terminal_error: T.nilable(T::Boolean),
      has_pending_backfill: T.nilable(T::Boolean),
      next_cursor: T.nilable(String),
      previous_cursor: T.nilable(String),
      resolved_count: T.nilable(Integer),
      token_types: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Api::V2::TokenType], T::Array[GitHub::Proto::SecretScanning::Api::V2::TokenType])),
      tokens: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Api::V2::Token], T::Array[GitHub::Proto::SecretScanning::Api::V2::Token])),
      unresolved_count: T.nilable(Integer)
    ).void
  end
  def initialize(has_backfill_scan_max_candidates: nil, has_backfill_scanning_terminal_error: nil, has_pending_backfill: nil, next_cursor: nil, previous_cursor: nil, resolved_count: nil, token_types: T.unsafe(nil), tokens: T.unsafe(nil), unresolved_count: nil); end

  sig { void }
  def clear_has_backfill_scan_max_candidates; end

  sig { void }
  def clear_has_backfill_scanning_terminal_error; end

  sig { void }
  def clear_has_pending_backfill; end

  sig { void }
  def clear_next_cursor; end

  sig { void }
  def clear_previous_cursor; end

  sig { void }
  def clear_resolved_count; end

  sig { void }
  def clear_token_types; end

  sig { void }
  def clear_tokens; end

  sig { void }
  def clear_unresolved_count; end

  sig { returns(T::Boolean) }
  def has_backfill_scan_max_candidates; end

  sig { params(value: T::Boolean).void }
  def has_backfill_scan_max_candidates=(value); end

  sig { returns(T::Boolean) }
  def has_backfill_scanning_terminal_error; end

  sig { params(value: T::Boolean).void }
  def has_backfill_scanning_terminal_error=(value); end

  sig { returns(T::Boolean) }
  def has_pending_backfill; end

  sig { params(value: T::Boolean).void }
  def has_pending_backfill=(value); end

  sig { returns(String) }
  def next_cursor; end

  sig { params(value: String).void }
  def next_cursor=(value); end

  sig { returns(String) }
  def previous_cursor; end

  sig { params(value: String).void }
  def previous_cursor=(value); end

  sig { returns(Integer) }
  def resolved_count; end

  sig { params(value: Integer).void }
  def resolved_count=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Api::V2::TokenType]) }
  def token_types; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Api::V2::TokenType]).void }
  def token_types=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Api::V2::Token]) }
  def tokens; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Api::V2::Token]).void }
  def tokens=(value); end

  sig { returns(Integer) }
  def unresolved_count; end

  sig { params(value: Integer).void }
  def unresolved_count=(value); end
end

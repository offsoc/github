# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::TokenScan`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::TokenScan`.

class Hydro::Schemas::Github::V1::TokenScan
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      error: T.nilable(Google::Protobuf::StringValue),
      file_extension: T.nilable(Google::Protobuf::StringValue),
      processed: T.nilable(T::Boolean),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_type: T.nilable(T.any(Symbol, Integer)),
      scan_id: T.nilable(Integer),
      token: T.nilable(Hydro::Schemas::Github::V1::Entities::Token),
      token_source: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(actor: nil, error: nil, file_extension: nil, processed: nil, repository: nil, repository_type: nil, scan_id: nil, token: nil, token_source: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_error; end

  sig { void }
  def clear_file_extension; end

  sig { void }
  def clear_processed; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_type; end

  sig { void }
  def clear_scan_id; end

  sig { void }
  def clear_token; end

  sig { void }
  def clear_token_source; end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def error; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def error=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def file_extension; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def file_extension=(value); end

  sig { returns(T::Boolean) }
  def processed; end

  sig { params(value: T::Boolean).void }
  def processed=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def repository_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def repository_type=(value); end

  sig { returns(Integer) }
  def scan_id; end

  sig { params(value: Integer).void }
  def scan_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Token)) }
  def token; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Token)).void }
  def token=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def token_source; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def token_source=(value); end
end

{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_toml_js-xxxxxxxxxxxx.js","mappings":"2KAAO,IAAMA,EAAO,CAClBC,KAAM,OACNC,WAAY,WACV,MAAO,CACLC,SAAU,GACVC,WAAY,GACZC,IAAK,GACLC,QAAS,CACX,CACF,EACAC,MAAO,SAAUC,CAAM,CAAEC,CAAK,EAW5B,GATKA,EAAMN,QAAQ,EAAK,KAACK,EAAOE,IAAI,IAAeF,KAAAA,EAAOE,IAAI,KAC5DD,EAAML,UAAU,CAAGI,EAAOE,IAAI,GAC9BF,EAAOG,IAAI,GACXF,EAAMN,QAAQ,CAAG,IAEfK,EAAOI,GAAG,IAAMH,IAAAA,EAAMH,OAAO,EAC/BG,CAAAA,EAAMJ,GAAG,CAAG,EAAG,EAGbI,EAAMN,QAAQ,CAAE,CAClB,KAAOM,EAAMN,QAAQ,EAAI,CAACK,EAAOK,GAAG,IAC9BL,EAAOE,IAAI,KAAOD,EAAML,UAAU,EACpCI,EAAOG,IAAI,GACXF,EAAMN,QAAQ,CAAG,IACRK,OAAAA,EAAOE,IAAI,IACpBF,EAAOG,IAAI,GACXH,EAAOG,IAAI,IAEXH,EAAOM,KAAK,CAAC,gBAGjB,OAAOL,EAAMJ,GAAG,CAAG,WAAa,QAClC,CAAO,GAAII,EAAMH,OAAO,EAAIE,MAAAA,EAAOE,IAAI,GAGrC,OAFAF,EAAOG,IAAI,GACXF,EAAMH,OAAO,GACN,UACF,GAAIG,EAAMJ,GAAG,EAAIG,MAAAA,EAAOE,IAAI,IAAcF,EAAOO,MAAM,CAAC,KAI7D,OAHAP,EAAOG,IAAI,GAEW,MAAlBH,EAAOE,IAAI,IAAYF,EAAOG,IAAI,GAC/B,OACF,GAAIH,MAAAA,EAAOE,IAAI,GAEpB,OADAF,EAAOQ,SAAS,GACT,UACF,GAAIR,EAAOS,QAAQ,SAEnB,GAAIR,EAAMJ,GAAG,EAAIG,EAAOU,QAAQ,CAAC,SAAUC,CAAC,EAAI,MAAOA,KAAAA,GAAYA,KAAAA,CAAU,GAClF,MAAO,gBACF,GAAIV,EAAMJ,GAAG,EAAIG,MAAAA,EAAOE,IAAI,GACjCF,EAAOG,IAAI,GACXF,EAAMJ,GAAG,CAAG,QAEP,GAAI,CAACI,EAAMJ,GAAG,EAAIG,EAAOM,KAAK,CAAC,2BAE3B,CAACL,EAAMJ,GAAG,EAAKG,CAAAA,EAAOM,KAAK,CAAC,SAAWN,EAAOM,KAAK,CAAC,QAAO,EADpE,MAAO,OAGF,GAAI,CAACL,EAAMJ,GAAG,EAAIG,MAAAA,EAAOE,IAAI,GAGlC,OAFAD,EAAMH,OAAO,GACbE,EAAOG,IAAI,GACJ,UACF,GAAI,CAACF,EAAMJ,GAAG,EAAIG,EAAOM,KAAK,CAAC,qBACpC,MAAO,SACGN,EAAOS,QAAQ,IACzBT,EAAOG,IAAI,GAEb,OAAO,IACT,EACAS,aAAc,CACZC,cAAe,CAAEC,KAAM,GAAI,CAC7B,CACF,C","sources":["node_modules/@codemirror/legacy-modes/mode/toml.js"],"sourcesContent":["export const toml = {\n  name: \"toml\",\n  startState: function () {\n    return {\n      inString: false,\n      stringType: \"\",\n      lhs: true,\n      inArray: 0\n    };\n  },\n  token: function (stream, state) {\n    //check for state changes\n    if (!state.inString && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n      state.stringType = stream.peek();\n      stream.next(); // Skip quote\n      state.inString = true; // Update state\n    }\n    if (stream.sol() && state.inArray === 0) {\n      state.lhs = true;\n    }\n    //return state\n    if (state.inString) {\n      while (state.inString && !stream.eol()) {\n        if (stream.peek() === state.stringType) {\n          stream.next(); // Skip quote\n          state.inString = false; // Clear flag\n        } else if (stream.peek() === '\\\\') {\n          stream.next();\n          stream.next();\n        } else {\n          stream.match(/^.[^\\\\\\\"\\']*/);\n        }\n      }\n      return state.lhs ? \"property\" : \"string\"; // Token style\n    } else if (state.inArray && stream.peek() === ']') {\n      stream.next();\n      state.inArray--;\n      return 'bracket';\n    } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {\n      stream.next();//skip closing ]\n      // array of objects has an extra open & close []\n      if (stream.peek() === ']') stream.next();\n      return \"atom\";\n    } else if (stream.peek() === \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (state.lhs && stream.eatWhile(function (c) { return c != '=' && c != ' '; })) {\n      return \"property\";\n    } else if (state.lhs && stream.peek() === \"=\") {\n      stream.next();\n      state.lhs = false;\n      return null;\n    } else if (!state.lhs && stream.match(/^\\d\\d\\d\\d[\\d\\-\\:\\.T]*Z/)) {\n      return 'atom'; //date\n    } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {\n      return 'atom';\n    } else if (!state.lhs && stream.peek() === '[') {\n      state.inArray++;\n      stream.next();\n      return 'bracket';\n    } else if (!state.lhs && stream.match(/^\\-?\\d+(?:\\.\\d+)?/)) {\n      return 'number';\n    } else if (!stream.eatSpace()) {\n      stream.next();\n    }\n    return null;\n  },\n  languageData: {\n    commentTokens: { line: '#' },\n  },\n};\n"],"names":["toml","name","startState","inString","stringType","lhs","inArray","token","stream","state","peek","next","sol","eol","match","skipTo","skipToEnd","eatSpace","eatWhile","c","languageData","commentTokens","line"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Services::Selfhostedrunners::ListRunnersRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Services::Selfhostedrunners::ListRunnersRequest`.

class GitHub::Launch::Services::Selfhostedrunners::ListRunnersRequest
  sig do
    params(
      exclude_elastic_runners: T.nilable(T::Boolean),
      include_assigned_request: T.nilable(T::Boolean),
      name: T.nilable(String),
      page: T.nilable(Integer),
      per_page: T.nilable(Integer),
      pool_id: T.nilable(Integer),
      repository_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)
    ).void
  end
  def initialize(exclude_elastic_runners: nil, include_assigned_request: nil, name: nil, page: nil, per_page: nil, pool_id: nil, repository_id: nil); end

  sig { void }
  def clear_exclude_elastic_runners; end

  sig { void }
  def clear_include_assigned_request; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_page; end

  sig { void }
  def clear_per_page; end

  sig { void }
  def clear_pool_id; end

  sig { void }
  def clear_repository_id; end

  sig { returns(T::Boolean) }
  def exclude_elastic_runners; end

  sig { params(value: T::Boolean).void }
  def exclude_elastic_runners=(value); end

  sig { returns(T::Boolean) }
  def include_assigned_request; end

  sig { params(value: T::Boolean).void }
  def include_assigned_request=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(Integer) }
  def page; end

  sig { params(value: Integer).void }
  def page=(value); end

  sig { returns(Integer) }
  def per_page; end

  sig { params(value: Integer).void }
  def per_page=(value); end

  sig { returns(Integer) }
  def pool_id; end

  sig { params(value: Integer).void }
  def pool_id=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def repository_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def repository_id=(value); end
end

#!/bin/bash
#/ Usage: ghe-cluster-block-ip [-h] [ip]
#/
#/ Adds GHES firewall rules to the current cluster node that blocks all traffic to and from a given IP.
#/ Currently only supports ipv4 addresses.
#/
#/ OPTIONS:
#/   -h                 Show this message
#/   ip                 IP to block
#/
set -euo pipefail

usage() {
  grep '^#/' <"$0" | cut -c 4-
}

get_opts() {
  while getopts "h" OPTION; do
    case $OPTION in
      h)
        usage
        exit 0
        ;;
      \?)
        usage
        exit 3
        ;;
    esac
  done
}

main() {
  if [ "$#" -ne 1 ]; then
    echo "[ Error ] Invalid number of parameters. Exiting." >&2
    usage
    exit 2
  fi

  get_opts "$@"

  # Check if we're on a cluster.
  if [ ! -f "/etc/github/cluster" ] || [ -z "$(cat /etc/github/cluster)" ] || [ ! -f "/data/user/common/cluster.conf" ]; then
    echo "[ Error ] Clustering is not configured on this host. Exiting." >&2
    exit 4
  fi

  # Check if cluster.conf is configured for standalone HA.
  if [ -n "$(ghe-config --true cluster.ha)" ]; then
    echo "[ Error ] ghe-cluster-block-ip is not supported on standalone HA. Exiting." >&2
    exit 12
  fi

  # Check that the parameter is not empty
  if [ -z "$1" ]; then
    echo "[ Error ] No IP address specified. Exiting." >&2
    exit 5
  fi

  # Check that the parameter is a valid IP
  if ! [[ $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "[ Error ] '$1' is not a valid ipv4 address. Exiting." >&2
    exit 6
  fi

  # Check the IP is not for one of the current cluster nodes
  current_cluster_ips="$(ghe-cluster-nodes -oi | awk {'print $2'})"
  if [[ ${current_cluster_ips[*]} =~ "$1" ]]; then
    echo "[ Warning ] '$1' specifies one of the current cluster nodes in use. Exiting." >&2
    exit 7
  fi

  current_host_ip=$(hostname -I | tr -d '[:blank:]')
  if [[ "$current_host_ip" == "$1" ]]; then
    echo "[ Warning ] '$1' specifies the current host. Exiting." >&2
    exit 8
  fi

  # Prevent all new connections - generate ufw deny rule for the IP
  # FYI - If a rule already exists we'll get a "Skipping inserting existing rule" message when the following is run
  # Incoming connections
  sudo ufw prepend deny from "$1" comment "GHES - ghe-cluster-block-ip - incoming"
  # Outgoing connections
  sudo ufw prepend deny out to "$1" comment "GHES - ghe-cluster-block-ip - outgoing"

  # Check that two rules have been added or they already exist
  ghes_block_rules=$(sudo ufw status numbered | grep "GHES - ghe-cluster-block-ip" || true)
  if [ -z "$ghes_block_rules" ]; then
    echo "[ Warning ] No GHES managed rules found. Exiting." >&2
    exit 9
  fi

  # There should be two rules for a given IP
  ghes_block_rules_matching_ip=$(echo "$ghes_block_rules" | grep "$1" || true)

  # Return the count of the number of matching rules
  ghes_block_rules_matching_ip_count=$(echo "$ghes_block_rules_matching_ip" | wc -l)

  if [ -z "$ghes_block_rules_matching_ip" ]; then
    echo "[ Warning ] No GHES managed rules that match '$1' were found. Exiting." >&2
    exit 10
  fi

  # If there are more than two matching rules, return an error
  if ! [ "$ghes_block_rules_matching_ip_count" -eq 2 ]; then
    echo "[ Error ] Expected 2 rules for '$ip' but found '$ghes_block_rules_matching_ip_count'. Please reach out to GHES support for assistance. Exiting." >&2
    exit 11
  fi

  current_host=$(hostname -I | tr -d '[:blank:]')
  echo "Successfully blocked '$1' on '$current_host'."
}

main "$@"

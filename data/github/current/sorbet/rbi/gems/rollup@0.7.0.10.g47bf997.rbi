# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rollup` gem.
# Please instead update this file by running `bin/tapioca gem rollup`.

module Rollup
  class << self
    # Configures extra frames to be added to the builtin denylist;
    # each backtrace will be checked against both of these.
    #
    # denylist - an array containing a set of strings against which
    #             every frame in the exception's backtrace will be
    #             compared
    #
    # Raises an ArgumentError if any of the values in `denylist`
    # aren't strings and can't be coerced into strings.
    #
    # source://rollup//lib/rollup.rb#89
    def denylist=(denylist); end

    # Find the first significant frame in a backtrace
    #
    # If there is no such frame, the first frame is used.
    #
    # backtrace - Enumerable that yields String backtrace lines (e.g.,
    #             Kernel#caller or Exception#backtrace)
    #
    # scrub_root_path - String root filesystem path, typically Rails.root.to_s, to remove
    #                   from the significant backtrace frame.
    #
    # Returns a String from the backtrace
    #
    # source://rollup//lib/rollup.rb#67
    def first_significant_frame(backtrace, scrub_root_path: T.unsafe(nil)); end

    # Generate a unique identifier for an exception
    #
    # If two exceptions have the same identifier, they are considered to be the
    # same exception for the purposes of error tracking. Failbot and Haystack
    # call these "rollups".
    #
    # exception - an Exception to generate the rollup for
    #
    # scrub_root_path - String root filesystem path, typically Rails.root.to_s, to remove
    #                   from the significant backtrace frame prior to generating the rollup hash.
    #
    # Returns a String.
    #
    # source://rollup//lib/rollup.rb#24
    def generate(exception, scrub_root_path: T.unsafe(nil)); end

    # Configures extra frames to be added to the builtin denylist;
    # each backtrace will be checked against both of these.
    #
    # denylist - an array containing a set of strings against which
    #             every frame in the exception's backtrace will be
    #             compared
    #
    # Raises an ArgumentError if any of the values in `denylist`
    # aren't strings and can't be coerced into strings.
    #
    # source://rollup//lib/rollup.rb#89
    def set_custom_blacklist(denylist); end

    # Determine whether a frame is "significant"
    #
    # "Significant" frames are ones that don't match the denylist.
    #
    # frame - String backtrace line (e.g., from Kernel#caller or
    #         Exception#backtrace)
    #
    # Returns a Boolean
    #
    # @return [Boolean]
    #
    # source://rollup//lib/rollup.rb#52
    def significant?(frame); end
  end
end

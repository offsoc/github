# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `blackbird-query` gem.
# Please instead update this file by running `bin/tapioca gem blackbird-query`.

# source://blackbird-query//lib/query/v2/facets_pb.rb#27
module Blackbird; end

# source://blackbird-query//lib/query/v2/facets_pb.rb#28
module Blackbird::Query; end

# source://blackbird-query//lib/query/v2/facets_pb.rb#29
module Blackbird::Query::V2; end

class Blackbird::Query::V2::Actor
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Blackbird::Query::V2::CountMode
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://blackbird-query//lib/query/v2/query_api_pb.rb#246
Blackbird::Query::V2::CountMode::COUNT_MODE_APPROXIMATE = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#246
Blackbird::Query::V2::CountMode::COUNT_MODE_INVALID = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#246
Blackbird::Query::V2::CountMode::COUNT_MODE_LOWER_BOUND = T.let(T.unsafe(nil), Integer)

class Blackbird::Query::V2::CustomScope
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::DebugInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::DuplicateLocationInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::ErrorRange
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Blackbird::Query::V2::ErrorType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://blackbird-query//lib/query/v2/query_api_pb.rb#247
Blackbird::Query::V2::ErrorType::ERROR_TYPE_ACTOR_NOT_AUTHORIZED = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#247
Blackbird::Query::V2::ErrorType::ERROR_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#247
Blackbird::Query::V2::ErrorType::ERROR_TYPE_MISSING_INACCESSIBLE_REPO_ORG = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#247
Blackbird::Query::V2::ErrorType::ERROR_TYPE_QUERY_PARSING_FATAL = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#247
Blackbird::Query::V2::ErrorType::ERROR_TYPE_QUERY_PARSING_WARNING = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#247
Blackbird::Query::V2::ErrorType::ERROR_TYPE_RESULTS_INCOMPLETE = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#247
Blackbird::Query::V2::ErrorType::ERROR_TYPE_SCOPE_UNSATISFIABLE = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#247
Blackbird::Query::V2::ErrorType::ERROR_TYPE_SEARCH_RESULTS_INCONSISTENT_WARNING = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#247
Blackbird::Query::V2::ErrorType::ERROR_TYPE_TIMEOUT = T.let(T.unsafe(nil), Integer)

class Blackbird::Query::V2::Facet
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::FacetEntry
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Blackbird::Query::V2::FacetKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://blackbird-query//lib/query/v2/facets_pb.rb#32
Blackbird::Query::V2::FacetKind::FACET_KIND_INVALID = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/facets_pb.rb#32
Blackbird::Query::V2::FacetKind::FACET_KIND_LANGUAGE = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/facets_pb.rb#32
Blackbird::Query::V2::FacetKind::FACET_KIND_PATH = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/facets_pb.rb#32
Blackbird::Query::V2::FacetKind::FACET_KIND_REPO = T.let(T.unsafe(nil), Integer)

class Blackbird::Query::V2::FrontendQueryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::FrontendQueryResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::GitDocumentMatch
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::LegacyQueryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::LegacyQueryResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::Location
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::MatchScore
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::Metadata
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://blackbird-query//lib/query/v2/query_api_twirp.rb#18
class Blackbird::Query::V2::QueryAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def frontend_query(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def legacy_query(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def query(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def refresh_auth_caches(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def warm_caches(input, req_opts = T.unsafe(nil)); end
end

# source://blackbird-query//lib/query/v2/query_api_twirp.rb#8
class Blackbird::Query::V2::QueryAPIService < ::Twirp::Service; end

class Blackbird::Query::V2::QueryError
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Blackbird::Query::V2::QueryParser
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://blackbird-query//lib/query/v2/query_api_pb.rb#242
Blackbird::Query::V2::QueryParser::QUERY_PARSER_BLACKBIRD_V0 = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#242
Blackbird::Query::V2::QueryParser::QUERY_PARSER_GEYSER = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#242
Blackbird::Query::V2::QueryParser::QUERY_PARSER_INVALID = T.let(T.unsafe(nil), Integer)

class Blackbird::Query::V2::QueryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::QueryResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Blackbird::Query::V2::QuerySource
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://blackbird-query//lib/query/v2/query_api_pb.rb#243
Blackbird::Query::V2::QuerySource::QUERY_SOURCE_COPILOT_API = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#243
Blackbird::Query::V2::QuerySource::QUERY_SOURCE_COPILOT_IDE = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#243
Blackbird::Query::V2::QuerySource::QUERY_SOURCE_FRONTEND = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#243
Blackbird::Query::V2::QuerySource::QUERY_SOURCE_GRAPHQL_API = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#243
Blackbird::Query::V2::QuerySource::QUERY_SOURCE_INVALID = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#243
Blackbird::Query::V2::QuerySource::QUERY_SOURCE_LEGACY_API = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#243
Blackbird::Query::V2::QuerySource::QUERY_SOURCE_PROBER = T.let(T.unsafe(nil), Integer)

class Blackbird::Query::V2::QueryStats
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Blackbird::Query::V2::QueryType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://blackbird-query//lib/query/v2/query_api_pb.rb#241
Blackbird::Query::V2::QueryType::QUERY_TYPE_FIND_DEFINITIONS = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#241
Blackbird::Query::V2::QueryType::QUERY_TYPE_FIND_REFERENCES = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#241
Blackbird::Query::V2::QueryType::QUERY_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#241
Blackbird::Query::V2::QueryType::QUERY_TYPE_USER_QUERY = T.let(T.unsafe(nil), Integer)

class Blackbird::Query::V2::Range
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::RefreshAuthCachesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::RefreshAuthCachesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::RenderedSnippet
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Blackbird::Query::V2::SHAFormat
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://blackbird-query//lib/query/v2/query_api_pb.rb#245
Blackbird::Query::V2::SHAFormat::SHA_FORMAT_INVALID = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#245
Blackbird::Query::V2::SHAFormat::SHA_FORMAT_SHA1 = T.let(T.unsafe(nil), Integer)

class Blackbird::Query::V2::ScoringContribution
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Blackbird::Query::V2::ScoringFactorKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_AST_SCORE = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_COVERING_SCORE = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_CROWDING = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_FILENAME_SCORE = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_HYBRID_PRIMARY = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_HYBRID_SECONDARY = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_IS_BOILERPLATE = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_IS_GENERATED = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_IS_TEST = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_IS_VENDORED = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_LANGUAGE_CONTEXT = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_LANGUAGE_TYPE = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_MATCH_COMPLETENESS = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_MATCH_DENSITY = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_REF_SCORE = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_REPO_SCORE = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/scoring_info_pb.rb#59
Blackbird::Query::V2::ScoringFactorKind::SCORING_FACTOR_KIND_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Blackbird::Query::V2::ScoringInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::SearchResult
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::ShardMetadata
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::ShardStatus
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::Snippet
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Blackbird::Query::V2::SnippetFormat
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://blackbird-query//lib/query/v2/search_result_pb.rb#69
Blackbird::Query::V2::SnippetFormat::SNIPPET_FORMAT_HTML = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/search_result_pb.rb#69
Blackbird::Query::V2::SnippetFormat::SNIPPET_FORMAT_INVALID = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/search_result_pb.rb#69
Blackbird::Query::V2::SnippetFormat::SNIPPET_FORMAT_PLAIN_TEXT = T.let(T.unsafe(nil), Integer)

module Blackbird::Query::V2::SnippetMode
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://blackbird-query//lib/query/v2/query_api_pb.rb#244
Blackbird::Query::V2::SnippetMode::SNIPPET_MODE_AUTO = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#244
Blackbird::Query::V2::SnippetMode::SNIPPET_MODE_CONTEXT = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#244
Blackbird::Query::V2::SnippetMode::SNIPPET_MODE_HIGH_DENSITY = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#244
Blackbird::Query::V2::SnippetMode::SNIPPET_MODE_INVALID = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#244
Blackbird::Query::V2::SnippetMode::SNIPPET_MODE_LLM = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#244
Blackbird::Query::V2::SnippetMode::SNIPPET_MODE_RAW_MATCHES = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/query/v2/query_api_pb.rb#244
Blackbird::Query::V2::SnippetMode::SNIPPET_MODE_UNIFIED = T.let(T.unsafe(nil), Integer)

class Blackbird::Query::V2::SnippetOptions
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::Symbol
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::Tenant
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::Timing
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::WarmCachesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Blackbird::Query::V2::WarmCachesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Google::Protobuf::MessageExts::ClassMethods; end

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#56
module Hydro
  class << self
    # source://hydro-client/5.0.0/lib/hydro.rb#43
    def consumer_logger; end

    # source://hydro-client/5.0.0/lib/hydro.rb#47
    def consumer_logger=(logger); end

    # source://hydro-client/5.0.0/lib/hydro/instrumenter.rb#38
    def instrumenter; end

    # source://hydro-client/5.0.0/lib/hydro/instrumenter.rb#48
    def instrumenter=(instrumenter); end

    # source://hydro-client/5.0.0/lib/hydro.rb#64
    def load_schemas(directory); end

    # source://hydro-client/5.0.0/lib/hydro.rb#35
    def logger; end

    # source://hydro-client/5.0.0/lib/hydro.rb#39
    def logger=(logger); end

    # source://hydro-client/5.0.0/lib/hydro.rb#51
    def publisher_logger; end

    # source://hydro-client/5.0.0/lib/hydro.rb#55
    def publisher_logger=(logger); end

    # source://hydro-client/5.0.0/lib/hydro/generated.rb#4
    def with_generated_files(&block); end
  end
end

class Hydro::DirtyExit < ::RuntimeError; end
class Hydro::EncodingError < ::Hydro::Error; end

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#57
module Hydro::Schemas; end

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#58
module Hydro::Schemas::Blackbird; end

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#59
module Hydro::Schemas::Blackbird::V0; end

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#60
module Hydro::Schemas::Blackbird::V0::Entities; end

module Hydro::Schemas::Blackbird::V0::Entities::SymbolKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_ARRAY_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_BOOLEAN_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_CALL_REF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_CLASS_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_COMMENT = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_CONSTANT_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_CONSTRUCTOR_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_ENUM_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_ENUM_MEMBER_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_ENUM_MEMBER_REF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_EVENT_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_FIELD_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_FIELD_REF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_FILE_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_FUNCTION_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_IMPLEMENTATION_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_INTERFACE_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_KEY_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_MACRO_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_METHOD_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_MODULE_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_NAMESPACE_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_NULL_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_NUMBER_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_OBJECT_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_OPERATOR_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_PACKAGE_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_PROPERTY_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_PROPERTY_REF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_SECTION_1_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_SECTION_2_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_SECTION_3_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_SECTION_4_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_SECTION_5_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_SECTION_6_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_STRING_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_STRUCT_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_TRAIT_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_TYPE_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_TYPE_PARAMETER_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_UNION_DEF = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://blackbird-query//lib/hydro/schemas/blackbird/v0/entities/symbol_kind_pb.rb#61
Hydro::Schemas::Blackbird::V0::Entities::SymbolKind::SYMBOL_KIND_VARIABLE_DEF = T.let(T.unsafe(nil), Integer)

module Hydro::Schemas::Hydro; end
module Hydro::Schemas::Hydro::V1; end

class Hydro::Schemas::Hydro::V1::Envelope
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Hydro::Schemas::Hydro::V1::Envelope::Site
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

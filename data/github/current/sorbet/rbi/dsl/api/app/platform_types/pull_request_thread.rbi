# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Api::App::PlatformTypes::PullRequestThread`.
# Please instead update this file by running `bin/tapioca dsl Api::App::PlatformTypes::PullRequestThread`.

class Api::App::PlatformTypes::PullRequestThread < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(Api::App::PlatformTypes::PullRequestReviewCommentConnection) }
  def comments; end

  sig { returns(T::Boolean) }
  def comments?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def current_diff_file_resource_path; end

  sig { returns(T::Boolean) }
  def current_diff_file_resource_path?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def current_diff_resource_path; end

  sig { returns(T::Boolean) }
  def current_diff_resource_path?; end

  sig { returns(T.nilable(Integer)) }
  def database_id; end

  sig { returns(T::Boolean) }
  def database_id?; end

  sig { returns(String) }
  def diff_side; end

  sig { returns(T::Boolean) }
  def diff_side?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def discussion_diff_resource_path; end

  sig { returns(T::Boolean) }
  def discussion_diff_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def discussion_diff_url; end

  sig { returns(T::Boolean) }
  def discussion_diff_url?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def full_database_id; end

  sig { returns(T::Boolean) }
  def full_database_id?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T::Boolean) }
  def is_collapsed; end

  sig { returns(T::Boolean) }
  def is_collapsed?; end

  sig { returns(T::Boolean) }
  def is_outdated; end

  sig { returns(T::Boolean) }
  def is_outdated?; end

  sig { returns(T::Boolean) }
  def is_resolved; end

  sig { returns(T::Boolean) }
  def is_resolved?; end

  sig { returns(T.nilable(Integer)) }
  def line; end

  sig { returns(T::Boolean) }
  def line?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def original_diff_file_resource_path; end

  sig { returns(T::Boolean) }
  def original_diff_file_resource_path?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def original_diff_resource_path; end

  sig { returns(T::Boolean) }
  def original_diff_resource_path?; end

  sig { returns(String) }
  def path; end

  sig { returns(T::Boolean) }
  def path?; end

  sig { returns(String) }
  def path_digest; end

  sig { returns(T::Boolean) }
  def path_digest?; end

  sig { returns(Api::App::PlatformTypes::PullRequest) }
  def pull_request; end

  sig { returns(T::Boolean) }
  def pull_request?; end

  sig { returns(Api::App::PlatformTypes::Repository) }
  def repository; end

  sig { returns(T::Boolean) }
  def repository?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def resolve_resource_path; end

  sig { returns(T::Boolean) }
  def resolve_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def resolve_url; end

  sig { returns(T::Boolean) }
  def resolve_url?; end

  sig { returns(T.nilable(Api::App::PlatformTypes::User)) }
  def resolved_by; end

  sig { returns(T::Boolean) }
  def resolved_by?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def resolved_by_actor; end

  sig { returns(T::Boolean) }
  def resolved_by_actor?; end

  sig { returns(T.nilable(String)) }
  def start_diff_side; end

  sig { returns(T::Boolean) }
  def start_diff_side?; end

  sig { returns(T.nilable(Integer)) }
  def start_line; end

  sig { returns(T::Boolean) }
  def start_line?; end

  sig { returns(Api::App::PlatformTypes::PullRequestDiffThread) }
  def subject; end

  sig { returns(T::Boolean) }
  def subject?; end

  sig { returns(String) }
  def subject_type; end

  sig { returns(T::Boolean) }
  def subject_type?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def unresolve_resource_path; end

  sig { returns(T::Boolean) }
  def unresolve_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def unresolve_url; end

  sig { returns(T::Boolean) }
  def unresolve_url?; end

  sig { returns(T::Boolean) }
  def viewer_can_reply; end

  sig { returns(T::Boolean) }
  def viewer_can_reply?; end

  sig { returns(T::Boolean) }
  def viewer_can_resolve; end

  sig { returns(T::Boolean) }
  def viewer_can_resolve?; end

  sig { returns(T::Boolean) }
  def viewer_can_unresolve; end

  sig { returns(T::Boolean) }
  def viewer_can_unresolve?; end

  sig { returns(T::Array[String]) }
  def viewer_cannot_reply_reasons; end

  sig { returns(T::Boolean) }
  def viewer_cannot_reply_reasons?; end
end

{"version":3,"file":"chunk-app_components_security_center_coverage-settings-element_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/components/security_center/coverage-settings-element.ts"],"sourcesContent":["import {controller, target, targets, attr} from '@github/catalyst'\nimport type {ModalDialogElement} from '@primer/view-components/app/components/primer/alpha/modal_dialog'\n\n@controller\nclass CoverageSettingsElement extends HTMLElement {\n  // This custom element can be rendered using `<coverage-settings hidden data-show-when-ready>` to avoid\n  // element pop-in/changes between being attached to the DOM and `connectedCallback` running.\n  @attr showWhenReady = false\n\n  @target parentFeatureCheckbox: HTMLInputElement\n  @target subFeatureOneCheckbox: HTMLInputElement\n  @target subFeatureTwoCheckbox: HTMLInputElement\n  @target subFeatureTwoChildCheckbox: HTMLInputElement\n\n  @target parentFeatureEnabled: HTMLInputElement\n  @target subFeatureOneEnabled: HTMLInputElement\n  @target subFeatureTwoEnabled: HTMLInputElement\n  @target subFeatureTwoChildEnabled: HTMLInputElement\n\n  @target parentFeatureTitle: HTMLElement\n  @target subFeatureOneTitle: HTMLElement\n  @target subFeatureTwoTitle: HTMLElement\n  @target subFeatureTwoChildTitle: HTMLInputElement\n\n  @target parentFeatureModified: HTMLElement\n  @target subFeatureOneModified: HTMLElement\n  @target subFeatureTwoModified: HTMLElement\n  @target subFeatureTwoChildModified: HTMLInputElement\n\n  // Disclosure elements are part of an additional dropdown radio button setting\n  // that is shown only when the associated feature is enabled\n  @target subFeatureOneAuxBox: HTMLElement\n  @target subFeatureOneDisclosureIcon: HTMLElement\n  @target subFeatureOneDisclosureHeader: HTMLElement\n  @target subFeatureOneDisclosureHeaderText: HTMLElement\n  @target subFeatureOneDisclosureContent: HTMLElement\n  @targets subFeatureOneDisclosureInputs: HTMLInputElement[]\n  @target subFeatureOneDisclosureValue: HTMLInputElement\n\n  connectedCallback() {\n    try {\n      this.resetStates()\n    } finally {\n      if (this.showWhenReady) {\n        this.removeAttribute('hidden')\n      }\n    }\n  }\n\n  resetStates() {\n    if (this.parentFeatureCheckbox) {\n      this.parentFeatureCheckbox.checked = this.parentFeatureCheckbox.getAttribute('feature-enabled') === 'true'\n    }\n\n    if (this.subFeatureOneCheckbox) {\n      this.subFeatureOneCheckbox.checked = this.subFeatureOneCheckbox.getAttribute('feature-enabled') === 'true'\n    }\n\n    if (this.subFeatureTwoCheckbox) {\n      this.subFeatureTwoCheckbox.checked = this.subFeatureTwoCheckbox.getAttribute('feature-enabled') === 'true'\n    }\n\n    if (this.subFeatureTwoChildCheckbox) {\n      this.subFeatureTwoChildCheckbox.checked =\n        this.subFeatureTwoChildCheckbox.getAttribute('feature-enabled') === 'true'\n    }\n\n    this.toggleParentFeature()\n  }\n\n  toggleParentFeature() {\n    this.updateParentFeature()\n    this.toggleSubFeatureOne()\n    this.toggleSubFeatureTwo()\n    this.toggleSubFeatureOneDisclosure()\n  }\n\n  toggleSubFeatureOne() {\n    // do nothing if subfeature UI is hidden\n    if (!this.subFeatureOneCheckbox) return\n\n    this.updateSubFeature(\n      this.parentFeatureCheckbox,\n      this.subFeatureOneEnabled,\n      this.subFeatureOneCheckbox,\n      this.subFeatureOneTitle,\n      this.subFeatureOneModified,\n      this.subFeatureOneAuxBox,\n      this.subFeatureOneDisclosureHeaderText,\n      this.subFeatureOneDisclosureInputs,\n      this.subFeatureOneDisclosureValue,\n    )\n  }\n\n  toggleSubFeatureOneDisclosure() {\n    if (!this.subFeatureOneCheckbox) return\n    if (!this.subFeatureOneDisclosureContent) return\n\n    const expanded = this.subFeatureOneDisclosureContent.getAttribute('style') !== 'display: none;'\n    if (!expanded) {\n      this.subFeatureOneDisclosureHeader.setAttribute('aria-expanded', 'true')\n      this.subFeatureOneDisclosureContent.setAttribute('style', 'display: block;')\n      this.subFeatureOneDisclosureIcon.style.transform = 'scaleY(-1)'\n    } else {\n      this.subFeatureOneDisclosureHeader.setAttribute('aria-expanded', 'false')\n      this.subFeatureOneDisclosureContent.setAttribute('style', 'display: none;')\n      this.subFeatureOneDisclosureIcon.style.transform = ''\n    }\n  }\n\n  toggleSubFeatureTwo() {\n    // do nothing if subfeature UI is hidden\n    if (!this.subFeatureTwoCheckbox) return\n\n    this.updateSubFeature(\n      this.parentFeatureCheckbox,\n      this.subFeatureTwoEnabled,\n      this.subFeatureTwoCheckbox,\n      this.subFeatureTwoTitle,\n      this.subFeatureTwoModified,\n    )\n\n    this.toggleSubFeatureTwoChild()\n  }\n\n  toggleSubFeatureTwoChild() {\n    // do nothing if subfeature UI is hidden\n    if (!this.subFeatureTwoChildCheckbox) return\n\n    this.updateSubFeature(\n      this.subFeatureTwoCheckbox,\n      this.subFeatureTwoChildEnabled,\n      this.subFeatureTwoChildCheckbox,\n      this.subFeatureTwoChildTitle,\n      this.subFeatureTwoChildModified,\n    )\n  }\n\n  updateParentFeature() {\n    if (!this.parentFeatureCheckbox) return\n\n    const settingDisabled = this.parentFeatureCheckbox.getAttribute('setting-disabled') === 'true'\n    if (settingDisabled) {\n      this.parentFeatureCheckbox.setAttribute('disabled', 'true')\n      this.parentFeatureTitle.setAttribute('style', 'opacity: 0.6;')\n    }\n\n    const featureEnabled = this.parentFeatureCheckbox.checked ? '1' : '0'\n    this.parentFeatureEnabled.setAttribute('value', featureEnabled)\n\n    this.toggleModifiedLabel(this.featureHasBeenModified(this.parentFeatureCheckbox), this.parentFeatureModified)\n  }\n\n  updateSubFeature(\n    parentFeatureCheckbox: HTMLInputElement,\n    featureEnabledInput: HTMLInputElement,\n    featureCheckbox: HTMLInputElement,\n    featureTitle: HTMLElement,\n    featureModifiedLabel: HTMLElement,\n    featureAuxBox?: HTMLElement,\n    featureDisclosureHeaderText?: HTMLElement,\n    featureDisclosureInputs?: HTMLInputElement[],\n    featureDisclosureValue?: HTMLInputElement,\n  ) {\n    const settingDisabled = featureCheckbox.getAttribute('setting-disabled') === 'true'\n    const parentChecked = !parentFeatureCheckbox || parentFeatureCheckbox.checked\n\n    if (parentChecked && !settingDisabled) {\n      featureCheckbox.removeAttribute('disabled')\n      featureTitle.setAttribute('style', '')\n    } else {\n      featureCheckbox.setAttribute('disabled', 'true')\n      featureTitle.setAttribute('style', 'opacity: 0.6;')\n      if (!settingDisabled) {\n        featureCheckbox.checked = false\n      }\n    }\n\n    const featureEnabled = featureCheckbox.checked ? '1' : '0'\n    featureEnabledInput.setAttribute('value', featureEnabled)\n\n    if (featureAuxBox) {\n      if (featureEnabled === '1') {\n        featureAuxBox.setAttribute('style', 'display: block;')\n      } else {\n        featureAuxBox.setAttribute('style', 'display: none;')\n      }\n    }\n\n    let disclosureModified = false\n    if (featureDisclosureInputs && featureDisclosureInputs.length > 0 && featureDisclosureValue) {\n      const selectedInput = featureDisclosureInputs.find(input => input.checked)\n      if (selectedInput && featureCheckbox.checked) {\n        disclosureModified = selectedInput.value !== featureDisclosureValue.getAttribute('data-initial-value')\n        featureDisclosureValue.setAttribute('value', selectedInput.value)\n        if (featureDisclosureHeaderText) {\n          const textContent = document.querySelector(`label[for=${selectedInput.id}`)?.textContent\n          featureDisclosureHeaderText.textContent = textContent?.replace(' Recommended', '') || ''\n        }\n      } else {\n        featureDisclosureValue.removeAttribute('value')\n      }\n\n      for (const input of featureDisclosureInputs) {\n        if (settingDisabled || !featureCheckbox.checked) {\n          input.setAttribute('disabled', 'true')\n        } else {\n          input.removeAttribute('disabled')\n        }\n      }\n    }\n\n    const featureModified = this.featureHasBeenModified(featureCheckbox)\n    this.toggleModifiedLabel(featureModified || disclosureModified, featureModifiedLabel)\n  }\n\n  toggleModifiedLabel(modified: boolean, labelElement: HTMLElement) {\n    if (!labelElement) return\n\n    if (modified) {\n      if (labelElement.getAttribute('hidden') === 'hidden') {\n        this.dispatchEvent(new CustomEvent('increment'))\n      }\n\n      labelElement.removeAttribute('hidden')\n    } else {\n      if (labelElement.getAttribute('hidden') !== 'hidden') {\n        this.dispatchEvent(new CustomEvent('decrement'))\n      }\n\n      labelElement.setAttribute('hidden', 'hidden')\n    }\n  }\n\n  featureHasBeenModified(element: HTMLInputElement): boolean {\n    return (element.getAttribute('feature-enabled') === 'true') !== element.checked\n  }\n}\n\n@controller\nclass EnablementDialogElement extends HTMLElement {\n  @target dialog: ModalDialogElement\n  @targets coverageSettings: CoverageSettingsElement[]\n\n  @target counter: HTMLElement\n\n  resetStates() {\n    for (const coverageSetting of this.coverageSettings) {\n      coverageSetting.resetStates()\n    }\n  }\n\n  incrementCounter() {\n    if (this.counter) {\n      const incrCount: number = +(this.counter.textContent || 0) + 1\n      const incrCountStr: string = incrCount.toString()\n      let ariaLabelStr: string = incrCountStr.concat(' features modified')\n      if (incrCount === 1) {\n        ariaLabelStr = incrCountStr.concat(' feature modified')\n      }\n\n      this.counter.textContent = incrCountStr\n      this.counter.setAttribute('aria-label', ariaLabelStr)\n    }\n  }\n\n  decrementCounter() {\n    if (this.counter) {\n      const decrCount: number = +(this.counter.textContent || 0) - 1\n      const decrCountStr: string = decrCount.toString()\n      let ariaLabelStr: string = decrCountStr.concat(' features modified')\n      if (decrCount === 1) {\n        ariaLabelStr = decrCountStr.concat(' feature modified')\n      }\n\n      this.counter.textContent = decrCountStr\n      this.counter.setAttribute('aria-label', ariaLabelStr)\n    }\n  }\n}\n"],"names":["CoverageSettingsElement","HTMLElement","connectedCallback","resetStates","showWhenReady","removeAttribute","parentFeatureCheckbox","checked","getAttribute","subFeatureOneCheckbox","subFeatureTwoCheckbox","subFeatureTwoChildCheckbox","toggleParentFeature","updateParentFeature","toggleSubFeatureOne","toggleSubFeatureTwo","toggleSubFeatureOneDisclosure","updateSubFeature","subFeatureOneEnabled","subFeatureOneTitle","subFeatureOneModified","subFeatureOneAuxBox","subFeatureOneDisclosureHeaderText","subFeatureOneDisclosureInputs","subFeatureOneDisclosureValue","subFeatureOneDisclosureContent","subFeatureOneDisclosureHeader","setAttribute","subFeatureOneDisclosureIcon","style","transform","subFeatureTwoEnabled","subFeatureTwoTitle","subFeatureTwoModified","toggleSubFeatureTwoChild","subFeatureTwoChildEnabled","subFeatureTwoChildTitle","subFeatureTwoChildModified","parentFeatureTitle","featureEnabled","parentFeatureEnabled","toggleModifiedLabel","featureHasBeenModified","parentFeatureModified","featureEnabledInput","featureCheckbox","featureTitle","featureModifiedLabel","featureAuxBox","featureDisclosureHeaderText","featureDisclosureInputs","featureDisclosureValue","settingDisabled","parentChecked","disclosureModified","length","selectedInput","find","input","value","textContent","document","querySelector","id","replace","featureModified","modified","labelElement","dispatchEvent","CustomEvent","element","attr","target","targets","controller","EnablementDialogElement","coverageSetting","coverageSettings","incrementCounter","counter","incrCount","incrCountStr","toString","ariaLabelStr","concat","decrementCounter","decrCount","decrCountStr"],"sourceRoot":""}
#!/usr/bin/env ruby

require 'rubygems'
require 'json'
require 'date'

def format_datetime(datetime)
  return "" unless datetime
  DateTime.parse(datetime).strftime("%c %z")
end

if ARGV[0] && File.exist?(ARGV[0])
  keydata = JSON.parse(`gpg --skip-verify --no-permission-warning --decrypt "#{ARGV[0]}" 2>/dev/null | tar xO metadata.json`)
  puts "                    Seats: #{keydata["seats"]}"
  puts "                  Company: #{keydata["company"]}"
  puts "                  Expires: #{format_datetime(keydata["expire_at"])}"
  puts "              Reference #: #{keydata["reference_number"]}"
  puts "               Evaluation: #{!!keydata["evaluation"]}"
  puts "                Perpetual: #{!!keydata["perpetual"]}"
  puts "        Unlimited Seating: #{!!keydata["unlimited_seating"]}"
  puts "               SSH Access: #{!!keydata["ssh_allowed"]}"
  puts "              Support Key: #{!!keydata["support_key"]}"
  puts "          Cluster Support: #{!!keydata["cluster_support"]}"
  puts "          Croquet Support: #{!!keydata["croquet_support"]}"
  puts "             Custom Terms: #{!!keydata["custom_terms"]}"
  puts "       Learning Lab Seats: #{keydata.fetch("learning_lab_seats", 0)}"
  puts "     Learning Lab Expires: #{format_datetime(keydata.fetch("learning_lab_evaluation_expires", nil))}"
  puts "         Insights Enabled: #{!!keydata["insights_enabled"]}"
  puts "         Insights Expires: #{format_datetime(keydata.fetch("insights_expire_at", nil))}" if !!keydata["insights_enabled"]
  puts "Advanced Security Enabled: #{!!keydata["advanced_security_enabled"]}"
  puts "  Advanced Security Seats: #{keydata.fetch("advanced_security_seats")}"
  puts "                  Metered: #{keydata.fetch("metered")}"
end

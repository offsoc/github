syntax = "proto3";

package actions.core.v1;

option go_package = "core/v1";
option ruby_package = "MonolithTwirp::Actions::Core::V1";

service ResolveActionsAPI {
  // ResolveActions retrieves the details about a action repository or a package
  // to send them to the runner
  rpc ResolveActions(ResolveActionsRequest) returns (ResolveActionsResponse);
}

enum ResolveStrategy {
    RESOLVE_STRATEGY_INVALID = 0;
    // Resolve the action repository
    RESOLVE_STRATEGY_REPOSITORY = 1;
    // Resolve the action package
    RESOLVE_STRATEGY_PACKAGE = 2;
}

message ResolveActionsRequest {
    // Array of actions that needs to be resolved
    repeated Action actions = 1;

    // The runID of the workflow invoking the action
    int64 workflow_run_id = 2;

    // The ID of the job invoking the action
    string job_id = 3;

    // The ID of the repository where the workflow is currently
    // being run.
    int64 workflow_repo_id = 4;

    reserved "resolve_strategy"; reserved 5;

    // Temporary flag to control if we should instrument the resolve request in gh/gh
    // because we plan to hit both the REST and twirp endpoints for resolving actions for
    // a short duration of time.
    bool should_instrument_request = 6;
}

message Action {
    // Name with owner of the action as referenced in the workflow.
    string nwo = 1;

    // The ref at which the actions needs to be checked out during the
    // workflow execution.
    string ref = 2;
}

message ResolveActionsResponse {
    repeated ResolvedActionContent resolved_actions = 1;
}

message ResolvedActionContent {
    oneof resolved_action_content {
        // Details about the resolved action
        ResolvedAction resolved_action = 1;

        // Errors faced while resolving the action
        ResolveActionError error = 2;
    }
}

message ResolvedAction {
    // The name of the action. This could point to a different
    // name compared to the resolved_name for repo redirects.
    string name = 1;

    // The resolved action's repository or package name
    string resolved_name = 2;

    // The head SHA for the chosen ref or package image sha.
    string resolved_sha = 3;

    // The tarball url for accessing the action's contents or package
    string tar_url = 4;

    // The zipball url for accessing the action's contents or package
    string zip_url = 5;

    // The ref at which the action was resolved.
    string ref = 6;

    // The visibility of the action repository or package
    string visibility = 7;

    // The resolved package ref of an action-package.
    string resolved_ref = 8;

    // The ID of the action repository
    int64 id = 9;

    // Resolve strategy used for the action
    ResolveStrategy resolve_strategy = 10;
}

message ResolveActionError {
    int64 error_code = 1;

    string error_message = 2;
}
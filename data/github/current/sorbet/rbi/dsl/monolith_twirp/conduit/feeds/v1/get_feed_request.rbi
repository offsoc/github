# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Conduit::Feeds::V1::GetFeedRequest`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Conduit::Feeds::V1::GetFeedRequest`.

class MonolithTwirp::Conduit::Feeds::V1::GetFeedRequest
  sig do
    params(
      event_types: T.nilable(T.any(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)], T::Array[T.any(Symbol, Integer)])),
      explicit_only: T.nilable(T::Boolean),
      include_starred_relationships: T.nilable(T::Boolean),
      subscriptions: T.nilable(T.any(Google::Protobuf::RepeatedField[MonolithTwirp::Conduit::Feeds::V1::RepositorySubscription], T::Array[MonolithTwirp::Conduit::Feeds::V1::RepositorySubscription])),
      user_id: T.nilable(Integer),
      variant: T.nilable(String)
    ).void
  end
  def initialize(event_types: T.unsafe(nil), explicit_only: nil, include_starred_relationships: nil, subscriptions: T.unsafe(nil), user_id: nil, variant: nil); end

  sig { void }
  def clear_event_types; end

  sig { void }
  def clear_explicit_only; end

  sig { void }
  def clear_include_starred_relationships; end

  sig { void }
  def clear_subscriptions; end

  sig { void }
  def clear_user_id; end

  sig { void }
  def clear_variant; end

  sig { returns(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]) }
  def event_types; end

  sig { params(value: Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]).void }
  def event_types=(value); end

  sig { returns(T::Boolean) }
  def explicit_only; end

  sig { params(value: T::Boolean).void }
  def explicit_only=(value); end

  sig { returns(T::Boolean) }
  def include_starred_relationships; end

  sig { params(value: T::Boolean).void }
  def include_starred_relationships=(value); end

  sig { returns(Google::Protobuf::RepeatedField[MonolithTwirp::Conduit::Feeds::V1::RepositorySubscription]) }
  def subscriptions; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[MonolithTwirp::Conduit::Feeds::V1::RepositorySubscription]
    ).void
  end
  def subscriptions=(value); end

  sig { returns(Integer) }
  def user_id; end

  sig { params(value: Integer).void }
  def user_id=(value); end

  sig { returns(String) }
  def variant; end

  sig { params(value: String).void }
  def variant=(value); end
end

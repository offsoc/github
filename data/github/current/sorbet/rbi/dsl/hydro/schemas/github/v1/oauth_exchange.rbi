# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::OauthExchange`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::OauthExchange`.

class Hydro::Schemas::Github::V1::OauthExchange
  sig do
    params(
      app_type: T.nilable(T.any(Symbol, Integer)),
      database_id: T.nilable(Integer),
      exchange_result: T.nilable(T.any(Symbol, Integer)),
      exchanged_refresh_token_last_eight: T.nilable(String),
      integration: T.nilable(Hydro::Schemas::Github::V1::Entities::Integration),
      oauth_application: T.nilable(Hydro::Schemas::Github::V1::Entities::OauthApplication),
      refresh_token_last_eight: T.nilable(String),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      token_last_eight: T.nilable(String)
    ).void
  end
  def initialize(app_type: nil, database_id: nil, exchange_result: nil, exchanged_refresh_token_last_eight: nil, integration: nil, oauth_application: nil, refresh_token_last_eight: nil, request_context: nil, token_last_eight: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def app_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def app_type=(value); end

  sig { void }
  def clear_app_type; end

  sig { void }
  def clear_database_id; end

  sig { void }
  def clear_exchange_result; end

  sig { void }
  def clear_exchanged_refresh_token_last_eight; end

  sig { void }
  def clear_integration; end

  sig { void }
  def clear_oauth_application; end

  sig { void }
  def clear_refresh_token_last_eight; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_token_last_eight; end

  sig { returns(Integer) }
  def database_id; end

  sig { params(value: Integer).void }
  def database_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def exchange_result; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def exchange_result=(value); end

  sig { returns(String) }
  def exchanged_refresh_token_last_eight; end

  sig { params(value: String).void }
  def exchanged_refresh_token_last_eight=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Integration)) }
  def integration; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Integration)).void }
  def integration=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::OauthApplication)) }
  def oauth_application; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::OauthApplication)).void }
  def oauth_application=(value); end

  sig { returns(String) }
  def refresh_token_last_eight; end

  sig { params(value: String).void }
  def refresh_token_last_eight=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(String) }
  def token_last_eight; end

  sig { params(value: String).void }
  def token_last_eight=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `DependencyGraphAPI::V1::GetDependenciesForRepositoryRequest`.
# Please instead update this file by running `bin/tapioca dsl DependencyGraphAPI::V1::GetDependenciesForRepositoryRequest`.

class DependencyGraphAPI::V1::GetDependenciesForRepositoryRequest
  sig do
    params(
      enable_preview_ecosystems: T.nilable(T::Boolean),
      include_internal_snapshots: T.nilable(T::Boolean),
      include_vulnerabilities: T.nilable(T::Boolean),
      max_static_manifests: T.nilable(Integer),
      owner_id: T.nilable(Integer),
      repository_id: T.nilable(Integer),
      sha: T.nilable(String)
    ).void
  end
  def initialize(enable_preview_ecosystems: nil, include_internal_snapshots: nil, include_vulnerabilities: nil, max_static_manifests: nil, owner_id: nil, repository_id: nil, sha: nil); end

  sig { void }
  def clear_enable_preview_ecosystems; end

  sig { void }
  def clear_include_internal_snapshots; end

  sig { void }
  def clear_include_vulnerabilities; end

  sig { void }
  def clear_max_static_manifests; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_sha; end

  sig { returns(T::Boolean) }
  def enable_preview_ecosystems; end

  sig { params(value: T::Boolean).void }
  def enable_preview_ecosystems=(value); end

  sig { returns(T::Boolean) }
  def include_internal_snapshots; end

  sig { params(value: T::Boolean).void }
  def include_internal_snapshots=(value); end

  sig { returns(T::Boolean) }
  def include_vulnerabilities; end

  sig { params(value: T::Boolean).void }
  def include_vulnerabilities=(value); end

  sig { returns(Integer) }
  def max_static_manifests; end

  sig { params(value: Integer).void }
  def max_static_manifests=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(String) }
  def sha; end

  sig { params(value: String).void }
  def sha=(value); end
end

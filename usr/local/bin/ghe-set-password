#!/bin/bash
#/ Usage: ghe-set-password [options]
#/
#/ Updates system admin/Management Console password using interactive prompts
#/
#/ OPTIONS:
#/   -h | --help     Show this message.
#/   -f | --force    Force interactive password reset on a replica node.
#/   -s | --sync     Set system admin user's password to whatever manage has set. Do not set new password.
#/   -c | --clear    Clear password for admin and Manage.
#/
set -e

export PATH="$PATH:/usr/local/share/enterprise"
#shellcheck source=vm_files/usr/local/share/enterprise/ghe-repl-lib
. ghe-repl-lib

usage () {
  grep '^#/' < "$0" | cut -c4-
}

[ "$(whoami)" = "root" ] || {
  exec sudo -u root "$0" "$@" || {
    echo Failed to exec sudo ghe-set-password. >&2
    exit 1
  }
}

# Parse args.
ARGS=$(getopt --name "$0" --long help,force,sync,clear --options hfsc -- "$@") || {
  usage
  exit 2
}
#shellcheck disable=SC2086
eval set -- $ARGS

force=
sync=
clear=
while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)
      usage
      exit 2
      ;;
    -f|--force)
      force=true
      ;;
    -s|--sync)
      sync=true
      ;;
    -c|--clear)
      clear=true
      ;;
    --)
      shift
      break
      ;;
  esac
  shift
done

function sync_admin_password() {
  echo "admin:$(ghe-config secrets.manage)" | chpasswd -e || {
    echo "Failed to sync system admin password"
    exit 1
  }
}

function clear_admin_password() {
  echo "admin:*" | chpasswd -e || {
    echo "Failed to clear system admin password"
    exit 1
  }
}

# Sync already set password to /etc/shadow
if [ -n "$sync" ]; then
  if ghe-config --blank secrets.manage; then
    echo "No password is set. Skipping sychronization."
    exit 0
  fi
  sync_admin_password
  echo "Password synchronized"
  exit 0
fi

# Clear admin account and Management Console passwords
if [ -n "$clear" ]; then
  ghe-config secrets.manage "" || {
    echo "Failed to clear Management Console password"
    exit 1
  }

  clear_admin_password
  echo "Password cleared"
  exit 0
fi

# Ensure required systemd services are active and responding on standalone or primary
# nodes, or allow reset with -f | --force for use on a replica node.
if [ -n "$force" ] || [ "$(repl_role)" = "standalone" ] || [ "$(repl_role)" = "primary" ] ; then
  # Check service state.
  inactive_services=
  for service in "enterprise-manage" "nomad" "docker" "ghes-manage-gateway" "ghes-manage-agent" "ghes-manage-gateway-consul"; do
    systemctl -q is-active $service || {
      if ! sudo systemctl start $service 2> /dev/null; then
        inactive_services="$inactive_services $service"
      fi
    }
  done
  # Ensure that haproxy instances is running, if it's not, start it.
  for service in "haproxy-frontend" "haproxy-data-proxy" "haproxy-cluster-proxy"; do
    if ! ghe-nomad-check-job -j "$service"; then
      nomad run /etc/nomad-jobs/haproxy/${service}.hcl || inactive_services="$inactive_services $service"
    fi
  done
  # Ensure that nginx is running, if it's not, start it.
  [ "$(nomad job status nginx | awk '/^Status/{print $3}')" = "running" ] || {
    if ! nomad run /etc/nomad-jobs/nginx/nginx.hcl 2> /dev/null; then
      inactive_services="$inactive_services nginx"
    fi
  }

  if [ ! -z "$inactive_services" ]; then
    echo "ghe-set-password requires these services, but they failed to start: $inactive_services"
    exit 1
  fi

  # Ensure ghes-manage responds properly.
  localhost_gm_response=$(curl -sS -o /dev/null http://127.0.0.1:9401 2>&1 || true)
  if [ -z "$localhost_gm_response" ]; then
    gm_api_response=$(curl --retry 60 --retry-delay 1 -s -o /dev/null -w "\\n%{http_code}" -XGET http://127.0.0.1:9401/v1/version 2>&1 || true)
    gm_status_code=$(echo "$gm_api_response" | tail -n1)
    # if the service responds 401 we assume it's running healthily and can handle requests
    if [[ "$gm_status_code" != "401"  ]]; then
      echo "Warning: ghe-set-password got an unexpected response from ghes-manage ($gm_api_response)."
    fi
  else
    echo "Warning: ghe-set-password got an unexpected response trying to reach ghes-manage : $localhost_gm_response"
  fi
else
  echo "Refusing to update password on a $(repl_role) node; force with -f | --force"
  exit 1
fi

# If no password has been set yet, create a random one so we can auth into the API
temp_passwords_file=0
if ghe-config --blank secrets.manage; then
  temp_password=$(openssl rand -hex 32) || {
    echo "Failed to generate temp password"
    exit 1
  }
  ghe-config secrets.manage "$temp_password" || {
    echo "Failed to set GitHub Enterprise password"
    exit 1
  }
  temp_passwords_file=1
fi

printf 'A password must be chosen or generated that is at least:\n'
printf -- '- 8 characters long, if it includes a number and a lowercase letter, or\n'
printf -- '- 15 characters long with any combination of characters\n'

# Bash versions prior to 4.4 do not clean up terminal settings,
# if they received a fatal signal while in 'read -s' that was invoked
# via 'exec'. Use an exit trap to restore the terminal state as workaround
# for Bash 4.3.30 currently used by GHE.
trap "stty echo echok" EXIT
#check for interactive terminal or read piped value
if [ -t 0 ]; then
     read -r -s -p "New Password:" new_password
     printf '\n'
     read -r -s -p "Confirm Password: " new_password_confirmation
     printf '\n'
     if [ "$new_password" != "$new_password_confirmation" ]; then
       echo "Passwords do not match"
       exit 1
     fi
else
     read -r -s -p "" new_password
fi
trap - EXIT

# Try to update password with gh es cli  and fall back to enterprise-manage in case of failure
# Attempt using gh es cli

gh es configure --auto && res=$(gh es access set-password --password $new_password --password-confirmation $new_password --json) || true
err=$(echo $res | jq ."error_code")
if [ "$err" = "null" ]; then
  echo "Password updated via gh es cli!"
else
  error_info=$(echo $res | jq ."description"."error")
  echo "Password could not be updated with gh es cli: \"$error_info\""
fi

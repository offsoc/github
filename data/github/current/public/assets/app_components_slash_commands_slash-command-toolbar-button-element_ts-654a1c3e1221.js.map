{"version":3,"file":"chunk-app_components_slash_commands_slash-command-toolbar-button-element_ts-xxxxxxxxxxxx.js","mappings":"+fAEA,YACMA,yCAAyCC,YAI7CC,YAAYC,CAAmC,CAAE,CAC/C,GAAI,CAAEA,CAAAA,EAAMC,MAAM,YAAYC,OAAM,GAChCF,UAAAA,EAAMG,IAAI,EAAgB,YAAyBC,GAAG,CADlB,OAGxC,IAAMC,EAAYL,EAAMC,MAAM,CAACK,OAAO,CAAc,gCACpD,GAAI,CAACD,EAAW,OAEhB,IAAME,EAAWF,EAAUG,aAAa,CAAsB,6BAC9D,GAAI,CAACD,EAAU,OAEfA,EAASE,KAAK,GAGd,IAAMC,EAAQH,EAASI,YAAY,EAAI,EACjCC,EAAQL,EAASK,KAAK,CACtBC,EAAYD,EAAME,SAAS,CAAC,EAAGJ,GAC/BK,EAAYH,EAAME,SAAS,CAACJ,GAE9BM,EAAO,CAAC,CAAC,EAAE,IAAI,CAACC,OAAO,CAAC,CAAC,CACzBC,EAAiBR,EAAQM,EAAKG,MAAM,CAAG,EAEvCN,IACFG,EAAO,CAAC;CAAG,EAAE,IAAI,CAACC,OAAO,CAAC,CAAC,CAEF,OAArBL,CAAK,CAACF,EAAQ,EAAE,GAClBM,EAAO,CAAC,CAAC,EAAE,IAAI,CAACC,OAAO,CAAC,CAAC,CACzBC,GAAkB,IAItB,IAAIE,EAAuB,GAC3B,GAAI,CACFA,EAAuBC,SAASC,WAAW,CAAC,aAAc,GAAON,EACnE,CAAE,MAAOO,EAAG,CACVH,EAAuB,EACzB,CAEKA,GACHb,CAAAA,EAASK,KAAK,CAAGC,EAAYG,EAAOD,CAAQ,EAG9CR,EAASiB,cAAc,CAAGN,EAC1BX,EAASI,YAAY,CAAGO,EAExBX,EAASkB,aAAa,CACpB,IAAIC,YAAY,QAAS,CACvBC,QAAS,GACTC,WAAY,EACd,GAEJ,C,mCArDMX,OAAO,CAAG,E,CAsDlB,E,GAtDGY,EAAAA,EAAIA,C,CADDhC,EAAAA,SAAAA,CAAAA,UAAAA,KAAAA,GAAAA,EAAAA,EAAAA,CADLiC,EAAAA,EAAUA,C,CACLjC,E","sources":["app/components/slash_commands/slash-command-toolbar-button-element.ts"],"sourcesContent":["import {controller, attr} from '@github/catalyst'\n\n@controller\nclass SlashCommandToolbarButtonElement extends HTMLElement {\n  @attr command = ''\n\n  // Trigger the menu from the markdown toolbar button\n  triggerMenu(event: PointerEvent | KeyboardEvent) {\n    if (!(event.target instanceof Element)) return\n    if (event.type === 'keyup' && (event as KeyboardEvent).key !== 'Enter') return\n\n    const container = event.target.closest<HTMLElement>('.js-previewable-comment-form')\n    if (!container) return\n\n    const textarea = container.querySelector<HTMLTextAreaElement>('textarea.js-comment-field')\n    if (!textarea) return\n\n    textarea.focus()\n\n    // similar to the `insertText` utility behavior, but with different cursor positioning\n    const point = textarea.selectionEnd || 0\n    const value = textarea.value\n    const beginning = value.substring(0, point)\n    const remaining = value.substring(point)\n\n    let text = `/${this.command}`\n    let cursorPosition = point + text.length + 1 // place cursor after the slash\n\n    if (beginning) {\n      text = `\\n/${this.command}`\n\n      if (value[point - 1] === '\\n') {\n        text = `/${this.command}`\n        cursorPosition -= 1 // we're on a newline so we don't need an extra position\n      }\n    }\n\n    let execCommandSucceeded = false\n    try {\n      execCommandSucceeded = document.execCommand('insertText', false, text)\n    } catch (e) {\n      execCommandSucceeded = false\n    }\n\n    if (!execCommandSucceeded) {\n      textarea.value = beginning + text + remaining\n    }\n\n    textarea.selectionStart = cursorPosition\n    textarea.selectionEnd = cursorPosition\n\n    textarea.dispatchEvent(\n      new CustomEvent('input', {\n        bubbles: true,\n        cancelable: true,\n      }),\n    )\n  }\n}\n"],"names":["SlashCommandToolbarButtonElement","HTMLElement","triggerMenu","event","target","Element","type","key","container","closest","textarea","querySelector","focus","point","selectionEnd","value","beginning","substring","remaining","text","command","cursorPosition","length","execCommandSucceeded","document","execCommand","e","selectionStart","dispatchEvent","CustomEvent","bubbles","cancelable","attr","controller"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::CodeNavigation::V0::JumpToEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::CodeNavigation::V0::JumpToEvent`.

class Hydro::Schemas::Github::CodeNavigation::V0::JumpToEvent
  sig do
    params(
      action: T.nilable(T.any(Symbol, Integer)),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      backend: T.nilable(String),
      code_nav_context: T.nilable(T.any(Symbol, Integer)),
      cross_repo_result_count: T.nilable(Integer),
      cross_repo_results_included: T.nilable(T.any(Symbol, Integer)),
      in_repo_result_count: T.nilable(Integer),
      language: T.nilable(String),
      ref: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      retry_backend: T.nilable(String)
    ).void
  end
  def initialize(action: nil, actor: nil, backend: nil, code_nav_context: nil, cross_repo_result_count: nil, cross_repo_results_included: nil, in_repo_result_count: nil, language: nil, ref: nil, repository: nil, request_context: nil, retry_backend: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def backend; end

  sig { params(value: String).void }
  def backend=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_backend; end

  sig { void }
  def clear_code_nav_context; end

  sig { void }
  def clear_cross_repo_result_count; end

  sig { void }
  def clear_cross_repo_results_included; end

  sig { void }
  def clear_in_repo_result_count; end

  sig { void }
  def clear_language; end

  sig { void }
  def clear_ref; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_retry_backend; end

  sig { returns(T.any(Symbol, Integer)) }
  def code_nav_context; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def code_nav_context=(value); end

  sig { returns(Integer) }
  def cross_repo_result_count; end

  sig { params(value: Integer).void }
  def cross_repo_result_count=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def cross_repo_results_included; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def cross_repo_results_included=(value); end

  sig { returns(Integer) }
  def in_repo_result_count; end

  sig { params(value: Integer).void }
  def in_repo_result_count=(value); end

  sig { returns(String) }
  def language; end

  sig { params(value: String).void }
  def language=(value); end

  sig { returns(String) }
  def ref; end

  sig { params(value: String).void }
  def ref=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(String) }
  def retry_backend; end

  sig { params(value: String).void }
  def retry_backend=(value); end
end

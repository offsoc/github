{"version":3,"file":"chunk-app_components_stafftools_data_hpc_datahpc-staffbar-element_ts-xxxxxxxxxxxx.js","mappings":"8LAGA,YACMA,+BAA+BC,YAcnCC,mBAAoB,CAClBC,OAAOC,gBAAgB,CAAC,OAAQ,IAAI,CAACC,eAAe,EAEpDC,SAASF,gBAAgB,CAACG,EAAAA,CAAcA,CAACC,OAAO,CAAE,IAAI,CAACH,eAAe,EACtEC,SAASF,gBAAgB,CAACG,EAAAA,CAAcA,CAACE,GAAG,CAAE,IAAI,CAACJ,eAAe,EAE7D,IAAI,CAACK,cAAc,EAAE,IAAI,CAACC,QAAQ,CAACC,OAAO,CAACN,SAASO,IAAI,CAAE,CAACC,UAAW,GAAMC,QAAS,EAAI,EAChG,CAEAC,sBAAuB,CACrBb,OAAOc,mBAAmB,CAAC,OAAQ,IAAI,CAACZ,eAAe,EAEvDC,SAASW,mBAAmB,CAACV,EAAAA,CAAcA,CAACC,OAAO,CAAE,IAAI,CAACH,eAAe,EACzEC,SAASW,mBAAmB,CAACV,EAAAA,CAAcA,CAACE,GAAG,CAAE,IAAI,CAACJ,eAAe,EAErE,IAAI,CAACM,QAAQ,CAACO,UAAU,EAC1B,CAQA,IAAIR,gBAAiB,CACnB,OAAOJ,SAASa,aAAa,CAAC,aAChC,C,mCAvCAR,QAAQ,CAAG,IAAIS,iBAAiBC,IAC9B,IAAK,IAAMC,KAAYD,EACrB,IAAK,IAAME,KAAQD,EAASE,UAAU,CAC9BD,aAAgBE,SAElBF,CAAAA,EAAKG,YAAY,CAAC,aAAeH,EAAKJ,aAAa,CAAC,aAAY,IAClE,IAAI,CAACQ,MAAM,CAAG,GACd,IAAI,CAAChB,QAAQ,CAACO,UAAU,GAIhC,G,KAoBAb,eAAe,CAAG,KAChBuB,sBAAsB,KACpB,IAAI,CAACD,MAAM,CAAGE,CAAAA,CAAQ,IAAI,CAACnB,cAAc,EAE7C,C,CAKF,EAzCMV,EAAAA,S,2TAAAA,CADL8B,EAAAA,EAAUA,C,CACL9B,E,mCCJC,IAAMO,EAAiBwB,OAAOC,MAAM,CAAC,CAC1CxB,QAAS,mBACTyB,MAAO,iBACPC,QAAS,mBACTC,MAAO,iBACPC,aAAc,wBACd3B,IAAK,eACL4B,OAAQ,kBACRC,aAAc,CACZL,MAAO,8BACPxB,IAAK,2BACP,CACF,E","sources":["app/components/stafftools/data_hpc/datahpc-staffbar-element.ts","ui/packages/soft-nav/states.ts"],"sourcesContent":["import {controller} from '@github/catalyst'\nimport {SOFT_NAV_STATE} from '@github-ui/soft-nav/states'\n\n@controller\nclass DatahpcStaffbarElement extends HTMLElement {\n  observer = new MutationObserver(mutations => {\n    for (const mutation of mutations) {\n      for (const node of mutation.addedNodes) {\n        if (!(node instanceof Element)) continue\n\n        if (node.hasAttribute('data-hpc') || node.querySelector('[data-hpc]')) {\n          this.hidden = true\n          this.observer.disconnect()\n        }\n      }\n    }\n  })\n\n  connectedCallback() {\n    window.addEventListener('load', this.checkDataHpcApp)\n\n    document.addEventListener(SOFT_NAV_STATE.INITIAL, this.checkDataHpcApp)\n    document.addEventListener(SOFT_NAV_STATE.END, this.checkDataHpcApp)\n\n    if (!this.dataHPCElement) this.observer.observe(document.body, {childList: true, subtree: true})\n  }\n\n  disconnectedCallback() {\n    window.removeEventListener('load', this.checkDataHpcApp)\n\n    document.removeEventListener(SOFT_NAV_STATE.INITIAL, this.checkDataHpcApp)\n    document.removeEventListener(SOFT_NAV_STATE.END, this.checkDataHpcApp)\n\n    this.observer.disconnect()\n  }\n\n  checkDataHpcApp = () => {\n    requestAnimationFrame(() => {\n      this.hidden = Boolean(this.dataHPCElement)\n    })\n  }\n\n  get dataHPCElement() {\n    return document.querySelector('[data-hpc]')\n  }\n}\n","export const SOFT_NAV_STATE = Object.freeze({\n  INITIAL: 'soft-nav:initial',\n  START: 'soft-nav:start',\n  SUCCESS: 'soft-nav:success',\n  ERROR: 'soft-nav:error',\n  FRAME_UPDATE: 'soft-nav:frame-update',\n  END: 'soft-nav:end',\n  RENDER: 'soft-nav:render',\n  PROGRESS_BAR: {\n    START: 'soft-nav:progress-bar:start',\n    END: 'soft-nav:progress-bar:end',\n  },\n})\n"],"names":["DatahpcStaffbarElement","HTMLElement","connectedCallback","window","addEventListener","checkDataHpcApp","document","SOFT_NAV_STATE","INITIAL","END","dataHPCElement","observer","observe","body","childList","subtree","disconnectedCallback","removeEventListener","disconnect","querySelector","MutationObserver","mutations","mutation","node","addedNodes","Element","hasAttribute","hidden","requestAnimationFrame","Boolean","controller","Object","freeze","START","SUCCESS","ERROR","FRAME_UPDATE","RENDER","PROGRESS_BAR"],"sourceRoot":""}
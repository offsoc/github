# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `DependencyGraphAPI::V1::SearchDependenciesForRepositoryRequest`.
# Please instead update this file by running `bin/tapioca dsl DependencyGraphAPI::V1::SearchDependenciesForRepositoryRequest`.

class DependencyGraphAPI::V1::SearchDependenciesForRepositoryRequest
  sig do
    params(
      dependabot_alerts: T.nilable(T.any(Google::Protobuf::RepeatedField[DependencyGraphAPI::V1::SearchDependenciesForRepositoryRequest::DependabotAlert], T::Array[DependencyGraphAPI::V1::SearchDependenciesForRepositoryRequest::DependabotAlert])),
      manifest_path: T.nilable(String),
      package_manager: T.nilable(T.any(Symbol, Integer)),
      page: T.nilable(Integer),
      per_page: T.nilable(Integer),
      preview_enabled: T.nilable(T::Boolean),
      query: T.nilable(String),
      repository_id: T.nilable(Integer)
    ).void
  end
  def initialize(dependabot_alerts: T.unsafe(nil), manifest_path: nil, package_manager: nil, page: nil, per_page: nil, preview_enabled: nil, query: nil, repository_id: nil); end

  sig { void }
  def clear_dependabot_alerts; end

  sig { void }
  def clear_manifest_path; end

  sig { void }
  def clear_package_manager; end

  sig { void }
  def clear_page; end

  sig { void }
  def clear_per_page; end

  sig { void }
  def clear_preview_enabled; end

  sig { void }
  def clear_query; end

  sig { void }
  def clear_repository_id; end

  sig do
    returns(Google::Protobuf::RepeatedField[DependencyGraphAPI::V1::SearchDependenciesForRepositoryRequest::DependabotAlert])
  end
  def dependabot_alerts; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[DependencyGraphAPI::V1::SearchDependenciesForRepositoryRequest::DependabotAlert]
    ).void
  end
  def dependabot_alerts=(value); end

  sig { returns(String) }
  def manifest_path; end

  sig { params(value: String).void }
  def manifest_path=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def package_manager; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def package_manager=(value); end

  sig { returns(Integer) }
  def page; end

  sig { params(value: Integer).void }
  def page=(value); end

  sig { returns(Integer) }
  def per_page; end

  sig { params(value: Integer).void }
  def per_page=(value); end

  sig { returns(T::Boolean) }
  def preview_enabled; end

  sig { params(value: T::Boolean).void }
  def preview_enabled=(value); end

  sig { returns(String) }
  def query; end

  sig { params(value: String).void }
  def query=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end
end

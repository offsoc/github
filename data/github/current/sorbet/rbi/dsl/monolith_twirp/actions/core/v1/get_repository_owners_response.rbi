# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Actions::Core::V1::GetRepositoryOwnersResponse`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Actions::Core::V1::GetRepositoryOwnersResponse`.

class MonolithTwirp::Actions::Core::V1::GetRepositoryOwnersResponse
  sig do
    params(
      business: T.nilable(MonolithTwirp::Actions::Core::V1::Actor),
      owner: T.nilable(MonolithTwirp::Actions::Core::V1::Actor),
      owner_plan_name: T.nilable(String),
      repository: T.nilable(MonolithTwirp::Actions::Core::V1::Actor)
    ).void
  end
  def initialize(business: nil, owner: nil, owner_plan_name: nil, repository: nil); end

  sig { returns(T.nilable(MonolithTwirp::Actions::Core::V1::Actor)) }
  def business; end

  sig { params(value: T.nilable(MonolithTwirp::Actions::Core::V1::Actor)).void }
  def business=(value); end

  sig { void }
  def clear_business; end

  sig { void }
  def clear_owner; end

  sig { void }
  def clear_owner_plan_name; end

  sig { void }
  def clear_repository; end

  sig { returns(T.nilable(MonolithTwirp::Actions::Core::V1::Actor)) }
  def owner; end

  sig { params(value: T.nilable(MonolithTwirp::Actions::Core::V1::Actor)).void }
  def owner=(value); end

  sig { returns(String) }
  def owner_plan_name; end

  sig { params(value: String).void }
  def owner_plan_name=(value); end

  sig { returns(T.nilable(MonolithTwirp::Actions::Core::V1::Actor)) }
  def repository; end

  sig { params(value: T.nilable(MonolithTwirp::Actions::Core::V1::Actor)).void }
  def repository=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `RepositoryNetwork`.
# Please instead update this file by running `bin/tapioca dsl RepositoryNetwork`.

class RepositoryNetwork
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::RepositoryNetwork).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryNetwork).void)
      ).returns(::RepositoryNetwork)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryNetwork).void)
      ).returns(::RepositoryNetwork)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryNetwork).void)
      ).returns(::RepositoryNetwork)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryNetwork).void)
      ).returns(::RepositoryNetwork)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryNetwork).void)
      ).returns(::RepositoryNetwork)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::RepositoryNetwork]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::RepositoryNetwork)) }
    def fifth; end

    sig { returns(::RepositoryNetwork) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::RepositoryNetwork)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::RepositoryNetwork) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::RepositoryNetwork).void)
      ).returns(T.nilable(T::Enumerator[::RepositoryNetwork]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::RepositoryNetwork]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::RepositoryNetwork]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryNetwork).void)
      ).returns(::RepositoryNetwork)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryNetwork).void)
      ).returns(::RepositoryNetwork)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryNetwork).void)
      ).returns(::RepositoryNetwork)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::RepositoryNetwork)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::RepositoryNetwork) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::RepositoryNetwork) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::RepositoryNetwork) }
    def first!; end

    sig { returns(T.nilable(::RepositoryNetwork)) }
    def forty_two; end

    sig { returns(::RepositoryNetwork) }
    def forty_two!; end

    sig { returns(T.nilable(::RepositoryNetwork)) }
    def fourth; end

    sig { returns(::RepositoryNetwork) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::RepositoryNetwork) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::RepositoryNetwork).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryNetwork).void)
      ).returns(::RepositoryNetwork)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::RepositoryNetwork).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::RepositoryNetwork).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::RepositoryNetwork)) }
    def second; end

    sig { returns(::RepositoryNetwork) }
    def second!; end

    sig { returns(T.nilable(::RepositoryNetwork)) }
    def second_to_last; end

    sig { returns(::RepositoryNetwork) }
    def second_to_last!; end

    sig { returns(::RepositoryNetwork) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::RepositoryNetwork) }
    def take!; end

    sig { returns(T.nilable(::RepositoryNetwork)) }
    def third; end

    sig { returns(::RepositoryNetwork) }
    def third!; end

    sig { returns(T.nilable(::RepositoryNetwork)) }
    def third_to_last; end

    sig { returns(::RepositoryNetwork) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    # This method is created by ActiveRecord on the `RepositoryNetwork` class because it declared `has_many :active_and_deleted_repositories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def active_and_deleted_repositories; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def active_and_deleted_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def active_and_deleted_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def active_and_deleted_repository_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryNetwork) }
    def build_parent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_root(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def child_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def child_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryNetwork` class because it declared `has_many :children`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryNetwork::PrivateCollectionProxy) }
    def children; end

    sig { params(value: T::Enumerable[::RepositoryNetwork]).void }
    def children=(value); end

    # This method is created by ActiveRecord on the `RepositoryNetwork` class because it declared `has_many :configuration_entries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Configuration::Entry::PrivateCollectionProxy) }
    def configuration_entries; end

    sig { params(value: T::Enumerable[::Configuration::Entry]).void }
    def configuration_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def configuration_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def configuration_entry_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryNetwork) }
    def create_parent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryNetwork) }
    def create_parent!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_root(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_root!(*args, &blk); end

    # This method is created by ActiveRecord on the `RepositoryNetwork` class because it declared `has_many :deleted_repositories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def deleted_repositories; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def deleted_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def deleted_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def deleted_repository_ids=(ids); end

    sig { returns(T.nilable(::RepositoryNetwork)) }
    def parent; end

    sig { params(value: T.nilable(::RepositoryNetwork)).void }
    def parent=(value); end

    sig { returns(T.nilable(::RepositoryNetwork)) }
    def reload_parent; end

    sig { returns(T.nilable(::Repository)) }
    def reload_root; end

    # This method is created by ActiveRecord on the `RepositoryNetwork` class because it declared `has_many :repositories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def repositories; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_ids=(ids); end

    sig { returns(T.nilable(::Repository)) }
    def root; end

    sig { params(value: T.nilable(::Repository)).void }
    def root=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def family_networks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def family_root_repositories(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def forks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_active_and_deleted_repositories; end

    sig { returns(Promise[T.untyped]) }
    def async_children; end

    sig { returns(Promise[T.untyped]) }
    def async_configuration_entries; end

    sig { returns(Promise[T.untyped]) }
    def async_deleted_repositories; end

    sig { returns(Promise[T.untyped]) }
    def async_parent; end

    sig { returns(Promise[T.untyped]) }
    def async_repositories; end

    sig { returns(Promise[T.untyped]) }
    def async_root; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accessed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accessed_at=(value); end

    sig { returns(T::Boolean) }
    def accessed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accessed_at_before_last_save; end

    sig { returns(T.untyped) }
    def accessed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def accessed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def accessed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def accessed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def accessed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accessed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def accessed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def accessed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accessed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accessed_at_was; end

    sig { void }
    def accessed_at_will_change!; end

    sig { returns(::Integer) }
    def cache_version_number; end

    sig { params(value: ::Integer).returns(::Integer) }
    def cache_version_number=(value); end

    sig { returns(T::Boolean) }
    def cache_version_number?; end

    sig { returns(T.nilable(::Integer)) }
    def cache_version_number_before_last_save; end

    sig { returns(T.untyped) }
    def cache_version_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def cache_version_number_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def cache_version_number_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def cache_version_number_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def cache_version_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def cache_version_number_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def cache_version_number_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def cache_version_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def cache_version_number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def cache_version_number_was; end

    sig { void }
    def cache_version_number_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def disabled_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def disabled_at=(value); end

    sig { returns(T::Boolean) }
    def disabled_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def disabled_at_before_last_save; end

    sig { returns(T.untyped) }
    def disabled_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def disabled_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def disabled_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def disabled_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def disabled_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def disabled_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def disabled_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def disabled_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def disabled_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def disabled_at_was; end

    sig { void }
    def disabled_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def disabled_by; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def disabled_by=(value); end

    sig { returns(T::Boolean) }
    def disabled_by?; end

    sig { returns(T.nilable(::Integer)) }
    def disabled_by_before_last_save; end

    sig { returns(T.untyped) }
    def disabled_by_before_type_cast; end

    sig { returns(T::Boolean) }
    def disabled_by_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def disabled_by_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def disabled_by_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def disabled_by_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def disabled_by_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def disabled_by_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def disabled_by_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def disabled_by_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def disabled_by_was; end

    sig { void }
    def disabled_by_will_change!; end

    sig { returns(T.nilable(::String)) }
    def disabling_reason; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def disabling_reason=(value); end

    sig { returns(T::Boolean) }
    def disabling_reason?; end

    sig { returns(T.nilable(::String)) }
    def disabling_reason_before_last_save; end

    sig { returns(T.untyped) }
    def disabling_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def disabling_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def disabling_reason_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def disabling_reason_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def disabling_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def disabling_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def disabling_reason_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def disabling_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def disabling_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def disabling_reason_was; end

    sig { void }
    def disabling_reason_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def disk_usage; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def disk_usage=(value); end

    sig { returns(T::Boolean) }
    def disk_usage?; end

    sig { returns(T.nilable(::Integer)) }
    def disk_usage_before_last_save; end

    sig { returns(T.untyped) }
    def disk_usage_before_type_cast; end

    sig { returns(T::Boolean) }
    def disk_usage_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def disk_usage_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def disk_usage_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def disk_usage_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def disk_usage_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def disk_usage_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def disk_usage_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def disk_usage_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def disk_usage_was; end

    sig { void }
    def disk_usage_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def last_maintenance_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def last_maintenance_at=(value); end

    sig { returns(T::Boolean) }
    def last_maintenance_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_maintenance_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_maintenance_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_maintenance_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def last_maintenance_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def last_maintenance_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def last_maintenance_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_maintenance_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def last_maintenance_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def last_maintenance_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_maintenance_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_maintenance_at_was; end

    sig { void }
    def last_maintenance_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_maintenance_attempted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_maintenance_attempted_at=(value); end

    sig { returns(T::Boolean) }
    def last_maintenance_attempted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_maintenance_attempted_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_maintenance_attempted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_maintenance_attempted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_maintenance_attempted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_maintenance_attempted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_maintenance_attempted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_maintenance_attempted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_maintenance_attempted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_maintenance_attempted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_maintenance_attempted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_maintenance_attempted_at_was; end

    sig { void }
    def last_maintenance_attempted_at_will_change!; end

    sig { returns(::Integer) }
    def maintenance_count_since_full; end

    sig { params(value: ::Integer).returns(::Integer) }
    def maintenance_count_since_full=(value); end

    sig { returns(T::Boolean) }
    def maintenance_count_since_full?; end

    sig { returns(T.nilable(::Integer)) }
    def maintenance_count_since_full_before_last_save; end

    sig { returns(T.untyped) }
    def maintenance_count_since_full_before_type_cast; end

    sig { returns(T::Boolean) }
    def maintenance_count_since_full_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def maintenance_count_since_full_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def maintenance_count_since_full_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def maintenance_count_since_full_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def maintenance_count_since_full_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def maintenance_count_since_full_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def maintenance_count_since_full_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def maintenance_count_since_full_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def maintenance_count_since_full_was; end

    sig { void }
    def maintenance_count_since_full_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def maintenance_retries; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def maintenance_retries=(value); end

    sig { returns(T::Boolean) }
    def maintenance_retries?; end

    sig { returns(T.nilable(::Integer)) }
    def maintenance_retries_before_last_save; end

    sig { returns(T.untyped) }
    def maintenance_retries_before_type_cast; end

    sig { returns(T::Boolean) }
    def maintenance_retries_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def maintenance_retries_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def maintenance_retries_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def maintenance_retries_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def maintenance_retries_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def maintenance_retries_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def maintenance_retries_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def maintenance_retries_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def maintenance_retries_was; end

    sig { void }
    def maintenance_retries_will_change!; end

    sig { returns(::String) }
    def maintenance_status; end

    sig { params(value: ::String).returns(::String) }
    def maintenance_status=(value); end

    sig { returns(T::Boolean) }
    def maintenance_status?; end

    sig { returns(T.nilable(::String)) }
    def maintenance_status_before_last_save; end

    sig { returns(T.untyped) }
    def maintenance_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def maintenance_status_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def maintenance_status_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def maintenance_status_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def maintenance_status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def maintenance_status_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def maintenance_status_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def maintenance_status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def maintenance_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def maintenance_status_was; end

    sig { void }
    def maintenance_status_will_change!; end

    sig { returns(T::Boolean) }
    def moving; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def moving=(value); end

    sig { returns(T::Boolean) }
    def moving?; end

    sig { returns(T.nilable(T::Boolean)) }
    def moving_before_last_save; end

    sig { returns(T.untyped) }
    def moving_before_type_cast; end

    sig { returns(T::Boolean) }
    def moving_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def moving_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def moving_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def moving_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def moving_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def moving_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def moving_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def moving_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def moving_was; end

    sig { void }
    def moving_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def owner_id=(value); end

    sig { returns(T::Boolean) }
    def owner_id?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_before_last_save; end

    sig { returns(T.untyped) }
    def owner_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def owner_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def owner_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def owner_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def owner_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def owner_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def owner_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_was; end

    sig { void }
    def owner_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pushed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pushed_at=(value); end

    sig { returns(T::Boolean) }
    def pushed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pushed_at_before_last_save; end

    sig { returns(T.untyped) }
    def pushed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def pushed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pushed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pushed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def pushed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pushed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pushed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def pushed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pushed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pushed_at_was; end

    sig { void }
    def pushed_at_will_change!; end

    sig { returns(::Integer) }
    def pushed_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def pushed_count=(value); end

    sig { returns(T::Boolean) }
    def pushed_count?; end

    sig { returns(T.nilable(::Integer)) }
    def pushed_count_before_last_save; end

    sig { returns(T.untyped) }
    def pushed_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def pushed_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pushed_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pushed_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pushed_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pushed_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pushed_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pushed_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pushed_count_previously_was; end

    sig { returns(::Integer) }
    def pushed_count_since_maintenance; end

    sig { params(value: ::Integer).returns(::Integer) }
    def pushed_count_since_maintenance=(value); end

    sig { returns(T::Boolean) }
    def pushed_count_since_maintenance?; end

    sig { returns(T.nilable(::Integer)) }
    def pushed_count_since_maintenance_before_last_save; end

    sig { returns(T.untyped) }
    def pushed_count_since_maintenance_before_type_cast; end

    sig { returns(T::Boolean) }
    def pushed_count_since_maintenance_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pushed_count_since_maintenance_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pushed_count_since_maintenance_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pushed_count_since_maintenance_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pushed_count_since_maintenance_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pushed_count_since_maintenance_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pushed_count_since_maintenance_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pushed_count_since_maintenance_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pushed_count_since_maintenance_was; end

    sig { void }
    def pushed_count_since_maintenance_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def pushed_count_was; end

    sig { void }
    def pushed_count_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def repository_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def repository_count=(value); end

    sig { returns(T::Boolean) }
    def repository_count?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_count_before_last_save; end

    sig { returns(T.untyped) }
    def repository_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def repository_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def repository_count_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def repository_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def repository_count_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def repository_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_count_was; end

    sig { void }
    def repository_count_will_change!; end

    sig { void }
    def restore_accessed_at!; end

    sig { void }
    def restore_cache_version_number!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_disabled_at!; end

    sig { void }
    def restore_disabled_by!; end

    sig { void }
    def restore_disabling_reason!; end

    sig { void }
    def restore_disk_usage!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_last_maintenance_at!; end

    sig { void }
    def restore_last_maintenance_attempted_at!; end

    sig { void }
    def restore_maintenance_count_since_full!; end

    sig { void }
    def restore_maintenance_retries!; end

    sig { void }
    def restore_maintenance_status!; end

    sig { void }
    def restore_moving!; end

    sig { void }
    def restore_owner_id!; end

    sig { void }
    def restore_pushed_at!; end

    sig { void }
    def restore_pushed_count!; end

    sig { void }
    def restore_pushed_count_since_maintenance!; end

    sig { void }
    def restore_repository_count!; end

    sig { void }
    def restore_root_id!; end

    sig { void }
    def restore_unpacked_size_in_mb!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(::Integer) }
    def root_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def root_id=(value); end

    sig { returns(T::Boolean) }
    def root_id?; end

    sig { returns(T.nilable(::Integer)) }
    def root_id_before_last_save; end

    sig { returns(T.untyped) }
    def root_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def root_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def root_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def root_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def root_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def root_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def root_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def root_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def root_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def root_id_was; end

    sig { void }
    def root_id_will_change!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_accessed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_accessed_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_cache_version_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_cache_version_number?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_disabled_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_disabled_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_disabled_by; end

    sig { returns(T::Boolean) }
    def saved_change_to_disabled_by?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_disabling_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_disabling_reason?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_disk_usage; end

    sig { returns(T::Boolean) }
    def saved_change_to_disk_usage?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_last_maintenance_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_maintenance_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_maintenance_attempted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_maintenance_attempted_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_maintenance_count_since_full; end

    sig { returns(T::Boolean) }
    def saved_change_to_maintenance_count_since_full?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_maintenance_retries; end

    sig { returns(T::Boolean) }
    def saved_change_to_maintenance_retries?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_maintenance_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_maintenance_status?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_moving; end

    sig { returns(T::Boolean) }
    def saved_change_to_moving?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_owner_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_owner_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_pushed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_pushed_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_pushed_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_pushed_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_pushed_count_since_maintenance; end

    sig { returns(T::Boolean) }
    def saved_change_to_pushed_count_since_maintenance?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_repository_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_root_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_root_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_unpacked_size_in_mb; end

    sig { returns(T::Boolean) }
    def saved_change_to_unpacked_size_in_mb?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::Integer)) }
    def unpacked_size_in_mb; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def unpacked_size_in_mb=(value); end

    sig { returns(T::Boolean) }
    def unpacked_size_in_mb?; end

    sig { returns(T.nilable(::Integer)) }
    def unpacked_size_in_mb_before_last_save; end

    sig { returns(T.untyped) }
    def unpacked_size_in_mb_before_type_cast; end

    sig { returns(T::Boolean) }
    def unpacked_size_in_mb_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def unpacked_size_in_mb_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def unpacked_size_in_mb_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def unpacked_size_in_mb_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def unpacked_size_in_mb_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def unpacked_size_in_mb_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def unpacked_size_in_mb_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def unpacked_size_in_mb_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def unpacked_size_in_mb_was; end

    sig { void }
    def unpacked_size_in_mb_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_accessed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cache_version_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disabled_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disabled_by?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disabling_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disk_usage?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_maintenance_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_maintenance_attempted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_maintenance_count_since_full?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_maintenance_retries?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_maintenance_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_moving?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_owner_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pushed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pushed_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pushed_count_since_maintenance?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_root_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_unpacked_size_in_mb?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def family_networks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def family_root_repositories(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def forks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::RepositoryNetwork } }

    sig { returns(T::Array[::RepositoryNetwork]) }
    def to_a; end

    sig { returns(T::Array[::RepositoryNetwork]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::RepositoryNetwork } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::RepositoryNetwork } }

    sig do
      params(
        records: T.any(::RepositoryNetwork, T::Enumerable[T.any(::RepositoryNetwork, T::Enumerable[::RepositoryNetwork])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::RepositoryNetwork, T::Enumerable[T.any(::RepositoryNetwork, T::Enumerable[::RepositoryNetwork])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::RepositoryNetwork, T::Enumerable[T.any(::RepositoryNetwork, T::Enumerable[::RepositoryNetwork])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::RepositoryNetwork]) }
    def load_target; end

    sig do
      params(
        records: T.any(::RepositoryNetwork, T::Enumerable[T.any(::RepositoryNetwork, T::Enumerable[::RepositoryNetwork])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::RepositoryNetwork, T::Enumerable[T.any(::RepositoryNetwork, T::Enumerable[::RepositoryNetwork])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::RepositoryNetwork, T::Enumerable[T.any(::RepositoryNetwork, T::Enumerable[::RepositoryNetwork])])
      ).returns(T::Array[::RepositoryNetwork])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::RepositoryNetwork]) }
    def target; end

    sig { returns(T::Array[::RepositoryNetwork]) }
    def to_a; end

    sig { returns(T::Array[::RepositoryNetwork]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::RepositoryNetwork } }

    sig { returns(T::Array[::RepositoryNetwork]) }
    def to_a; end

    sig { returns(T::Array[::RepositoryNetwork]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::RepositoryNetwork } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

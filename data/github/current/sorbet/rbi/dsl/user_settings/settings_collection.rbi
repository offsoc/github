# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `UserSettings::SettingsCollection`.
# Please instead update this file by running `bin/tapioca dsl UserSettings::SettingsCollection`.

class UserSettings::SettingsCollection
  sig { returns(T.nilable(::String)) }
  def animated_images; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def animated_images=(value); end

  sig { returns(T.nilable(::String)) }
  def blackbird_custom_scopes; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def blackbird_custom_scopes=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def code_line_wrap_enabled; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def code_line_wrap_enabled=(value); end

  sig { returns(T.nilable(::String)) }
  def command_palette_open_command_mode_hotkey; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def command_palette_open_command_mode_hotkey=(value); end

  sig { returns(T.nilable(::String)) }
  def command_palette_open_hotkey; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def command_palette_open_hotkey=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def copilot_chat_visible; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def copilot_chat_visible=(value); end

  sig { returns(T.nilable(::String)) }
  def copilot_policy_data; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def copilot_policy_data=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def discussions_collapsed_view; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def discussions_collapsed_view=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def display_orcid_id_on_profile; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def display_orcid_id_on_profile=(value); end

  sig { returns(T.nilable(::String)) }
  def forks_view_default_options; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def forks_view_default_options=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def hide_past_sponsorships_on_sponsor_listing; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def hide_past_sponsorships_on_sponsor_listing=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def hovercards_enabled; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def hovercards_enabled=(value); end

  sig { returns(T.nilable(::String)) }
  def keyboard_shortcuts_preference; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def keyboard_shortcuts_preference=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def link_underlines; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def link_underlines=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def orgs_repos_compact_mode; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def orgs_repos_compact_mode=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def paste_url_markdown; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def paste_url_markdown=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def pull_request_file_tree_visible; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def pull_request_file_tree_visible=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def repository_onboarding_enabled; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def repository_onboarding_enabled=(value); end

  sig { returns(T.nilable(::Integer)) }
  def sponsors_email_opt_outs; end

  sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def sponsors_email_opt_outs=(value); end

  sig { returns(T.nilable(::Integer)) }
  def sponsors_featured_sponsorships_settings; end

  sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def sponsors_featured_sponsorships_settings=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def symbols_view_expanded; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def symbols_view_expanded=(value); end

  sig { returns(T.nilable(::Integer)) }
  def tab_size; end

  sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def tab_size=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def tree_view_expanded; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def tree_view_expanded=(value); end

  sig { returns(T.nilable(::String)) }
  def trust_level_as_sponsor; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def trust_level_as_sponsor=(value); end

  sig { returns(T.nilable(::String)) }
  def trust_level_as_sponsorable; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def trust_level_as_sponsorable=(value); end

  sig { returns(T.nilable(::Integer)) }
  def trust_tier; end

  sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def trust_tier=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def use_fixed_width_font; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def use_fixed_width_font=(value); end

  sig { returns(T.nilable(::Integer)) }
  def user_feed_filter_setting; end

  sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def user_feed_filter_setting=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def user_profile_feed_visible; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def user_profile_feed_visible=(value); end

  sig { returns(T.nilable(::String)) }
  def user_profile_lists_sorting_strategy; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def user_profile_lists_sorting_strategy=(value); end
end

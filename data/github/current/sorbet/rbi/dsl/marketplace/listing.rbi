# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Marketplace::Listing`.
# Please instead update this file by running `bin/tapioca dsl Marketplace::Listing`.

class Marketplace::Listing
  include GeneratedAsyncReflectionAssociations
  extend GeneratedWorkflowClassMethods
  include GeneratedWorkflowMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Marketplace::Listing).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::Listing).void)
      ).returns(::Marketplace::Listing)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::Listing).void)
      ).returns(::Marketplace::Listing)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::Listing).void)
      ).returns(::Marketplace::Listing)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::Listing).void)
      ).returns(::Marketplace::Listing)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::Listing).void)
      ).returns(::Marketplace::Listing)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Marketplace::Listing]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def fifth; end

    sig { returns(::Marketplace::Listing) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Marketplace::Listing)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Marketplace::Listing) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Marketplace::Listing).void)
      ).returns(T.nilable(T::Enumerator[::Marketplace::Listing]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Marketplace::Listing]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Marketplace::Listing]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::Listing).void)
      ).returns(::Marketplace::Listing)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::Listing).void)
      ).returns(::Marketplace::Listing)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::Listing).void)
      ).returns(::Marketplace::Listing)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Marketplace::Listing)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Marketplace::Listing) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Marketplace::Listing) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Marketplace::Listing) }
    def first!; end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def forty_two; end

    sig { returns(::Marketplace::Listing) }
    def forty_two!; end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def fourth; end

    sig { returns(::Marketplace::Listing) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Marketplace::Listing) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Marketplace::Listing).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::Listing).void)
      ).returns(::Marketplace::Listing)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Marketplace::Listing).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Marketplace::Listing).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def second; end

    sig { returns(::Marketplace::Listing) }
    def second!; end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def second_to_last; end

    sig { returns(::Marketplace::Listing) }
    def second_to_last!; end

    sig { returns(::Marketplace::Listing) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Marketplace::Listing) }
    def take!; end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def third; end

    sig { returns(::Marketplace::Listing) }
    def third!; end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def third_to_last; end

    sig { returns(::Marketplace::Listing) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def avatar_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def avatar_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_many :avatars`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Avatar::PrivateCollectionProxy) }
    def avatars; end

    sig { params(value: T::Enumerable[::Avatar]).void }
    def avatars=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::ListingImage) }
    def build_hero_card_background_image(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Hook) }
    def build_webhook(*args, &blk); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_and_belongs_to_many :categories`.
    # ðŸ”— [Rails guide for `has_and_belongs_to_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-and-belongs-to-many-association)
    sig { returns(::Marketplace::Category::PrivateCollectionProxy) }
    def categories; end

    sig { params(value: T::Enumerable[::Marketplace::Category]).void }
    def categories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def category_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def category_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::ListingImage) }
    def create_hero_card_background_image(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::ListingImage) }
    def create_hero_card_background_image!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Hook) }
    def create_webhook(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Hook) }
    def create_webhook!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def featured_organization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def featured_organization_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_many :featured_organizations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Marketplace::ListingFeaturedOrganization::PrivateCollectionProxy) }
    def featured_organizations; end

    sig { params(value: T::Enumerable[::Marketplace::ListingFeaturedOrganization]).void }
    def featured_organizations=(value); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_and_belongs_to_many :filter_categories`.
    # ðŸ”— [Rails guide for `has_and_belongs_to_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-and-belongs-to-many-association)
    sig { returns(::Marketplace::Category::PrivateCollectionProxy) }
    def filter_categories; end

    sig { params(value: T::Enumerable[::Marketplace::Category]).void }
    def filter_categories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def filter_category_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def filter_category_ids=(ids); end

    sig { returns(T.nilable(::Marketplace::ListingImage)) }
    def hero_card_background_image; end

    sig { params(value: T.nilable(::Marketplace::ListingImage)).void }
    def hero_card_background_image=(value); end

    sig { returns(T::Array[T.untyped]) }
    def hook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def hook_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_many :hooks`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Hook::PrivateCollectionProxy) }
    def hooks; end

    sig { params(value: T::Enumerable[::Hook]).void }
    def hooks=(value); end

    sig { returns(T::Array[T.untyped]) }
    def image_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def image_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_many :images`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Marketplace::ListingImage::PrivateCollectionProxy) }
    def images; end

    sig { params(value: T::Enumerable[::Marketplace::ListingImage]).void }
    def images=(value); end

    sig { returns(T::Array[T.untyped]) }
    def insight_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def insight_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_many :insights`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Marketplace::ListingInsight::PrivateCollectionProxy) }
    def insights; end

    sig { params(value: T::Enumerable[::Marketplace::ListingInsight]).void }
    def insights=(value); end

    sig { returns(T::Array[T.untyped]) }
    def language_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def language_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_many :languages, through: :supported_languages`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::LanguageName::PrivateCollectionProxy) }
    def languages; end

    sig { params(value: T::Enumerable[::LanguageName]).void }
    def languages=(value); end

    sig { returns(T.untyped) }
    def listable; end

    sig { params(value: T.untyped).void }
    def listable=(value); end

    sig { returns(T::Array[T.untyped]) }
    def listing_plan_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def listing_plan_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_many :listing_plans`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Marketplace::ListingPlan::PrivateCollectionProxy) }
    def listing_plans; end

    sig { params(value: T::Enumerable[::Marketplace::ListingPlan]).void }
    def listing_plans=(value); end

    sig { returns(T::Array[T.untyped]) }
    def marketplace_order_preview_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def marketplace_order_preview_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_many :marketplace_order_previews`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Marketplace::OrderPreview::PrivateCollectionProxy) }
    def marketplace_order_previews; end

    sig { params(value: T::Enumerable[::Marketplace::OrderPreview]).void }
    def marketplace_order_previews=(value); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_and_belongs_to_many :regular_categories`.
    # ðŸ”— [Rails guide for `has_and_belongs_to_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-and-belongs-to-many-association)
    sig { returns(::Marketplace::Category::PrivateCollectionProxy) }
    def regular_categories; end

    sig { params(value: T::Enumerable[::Marketplace::Category]).void }
    def regular_categories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def regular_category_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def regular_category_ids=(ids); end

    sig { returns(T.nilable(::Marketplace::ListingImage)) }
    def reload_hero_card_background_image; end

    sig { returns(T.untyped) }
    def reload_listable; end

    sig { returns(T.nilable(::Hook)) }
    def reload_webhook; end

    sig { returns(T::Array[T.untyped]) }
    def screenshot_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def screenshot_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_many :screenshots`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Marketplace::ListingScreenshot::PrivateCollectionProxy) }
    def screenshots; end

    sig { params(value: T::Enumerable[::Marketplace::ListingScreenshot]).void }
    def screenshots=(value); end

    sig { returns(T::Array[T.untyped]) }
    def subscription_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subscription_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_many :subscription_items, through: :listing_plans`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::SubscriptionItem::PrivateCollectionProxy) }
    def subscription_items; end

    sig { params(value: T::Enumerable[::Billing::SubscriptionItem]).void }
    def subscription_items=(value); end

    sig { returns(T::Array[T.untyped]) }
    def supported_language_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def supported_language_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::Listing` class because it declared `has_many :supported_languages`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Marketplace::ListingSupportedLanguage::PrivateCollectionProxy) }
    def supported_languages; end

    sig { params(value: T::Enumerable[::Marketplace::ListingSupportedLanguage]).void }
    def supported_languages=(value); end

    sig { returns(T.nilable(::Hook)) }
    def webhook; end

    sig { params(value: T.nilable(::Hook)).void }
    def webhook=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def drafts(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def editable_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def featured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_integratables(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_primary_category_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def including_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def installed_on_repo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def listable_is_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def matches_name_or_description(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def publicly_listed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def quick_installable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def subscribed_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def visible_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_category(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_free_trial(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_installations_on(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_states(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_avatars; end

    sig { returns(Promise[T.untyped]) }
    def async_categories; end

    sig { returns(Promise[T.untyped]) }
    def async_featured_organizations; end

    sig { returns(Promise[T.untyped]) }
    def async_filter_categories; end

    sig { returns(Promise[T.untyped]) }
    def async_hero_card_background_image; end

    sig { returns(Promise[T.untyped]) }
    def async_hooks; end

    sig { returns(Promise[T.untyped]) }
    def async_images; end

    sig { returns(Promise[T.untyped]) }
    def async_insights; end

    sig { returns(Promise[T.untyped]) }
    def async_languages; end

    sig { returns(Promise[T.untyped]) }
    def async_listable; end

    sig { returns(Promise[T.untyped]) }
    def async_listing_plans; end

    sig { returns(Promise[T.untyped]) }
    def async_marketplace_order_previews; end

    sig { returns(Promise[T.untyped]) }
    def async_regular_categories; end

    sig { returns(Promise[T.untyped]) }
    def async_screenshots; end

    sig { returns(Promise[T.untyped]) }
    def async_subscription_items; end

    sig { returns(Promise[T.untyped]) }
    def async_supported_languages; end

    sig { returns(Promise[T.untyped]) }
    def async_webhook; end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def bgcolor; end

    sig { params(value: ::String).returns(::String) }
    def bgcolor=(value); end

    sig { returns(T::Boolean) }
    def bgcolor?; end

    sig { returns(T.nilable(::String)) }
    def bgcolor_before_last_save; end

    sig { returns(T.untyped) }
    def bgcolor_before_type_cast; end

    sig { returns(T::Boolean) }
    def bgcolor_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def bgcolor_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def bgcolor_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def bgcolor_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def bgcolor_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def bgcolor_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def bgcolor_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def bgcolor_previously_was; end

    sig { returns(T.nilable(::String)) }
    def bgcolor_was; end

    sig { void }
    def bgcolor_will_change!; end

    sig { returns(T::Boolean) }
    def by_github; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def by_github=(value); end

    sig { returns(T::Boolean) }
    def by_github?; end

    sig { returns(T.nilable(T::Boolean)) }
    def by_github_before_last_save; end

    sig { returns(T.untyped) }
    def by_github_before_type_cast; end

    sig { returns(T::Boolean) }
    def by_github_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def by_github_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def by_github_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def by_github_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def by_github_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def by_github_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def by_github_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def by_github_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def by_github_was; end

    sig { void }
    def by_github_will_change!; end

    sig { returns(T.nilable(::String)) }
    def company_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def company_url=(value); end

    sig { returns(T::Boolean) }
    def company_url?; end

    sig { returns(T.nilable(::String)) }
    def company_url_before_last_save; end

    sig { returns(T.untyped) }
    def company_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def company_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def company_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def company_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def company_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def company_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def company_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def company_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def company_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def company_url_was; end

    sig { void }
    def company_url_will_change!; end

    sig { returns(T::Boolean) }
    def copilot_app; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def copilot_app=(value); end

    sig { returns(T::Boolean) }
    def copilot_app?; end

    sig { returns(T.nilable(T::Boolean)) }
    def copilot_app_before_last_save; end

    sig { returns(T.untyped) }
    def copilot_app_before_type_cast; end

    sig { returns(T::Boolean) }
    def copilot_app_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def copilot_app_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def copilot_app_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def copilot_app_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def copilot_app_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def copilot_app_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def copilot_app_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def copilot_app_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def copilot_app_was; end

    sig { void }
    def copilot_app_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T::Boolean) }
    def direct_billing_enabled; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def direct_billing_enabled=(value); end

    sig { returns(T::Boolean) }
    def direct_billing_enabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def direct_billing_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def direct_billing_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def direct_billing_enabled_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def direct_billing_enabled_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def direct_billing_enabled_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def direct_billing_enabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def direct_billing_enabled_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def direct_billing_enabled_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def direct_billing_enabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def direct_billing_enabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def direct_billing_enabled_was; end

    sig { void }
    def direct_billing_enabled_will_change!; end

    sig { returns(T.nilable(::String)) }
    def documentation_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def documentation_url=(value); end

    sig { returns(T::Boolean) }
    def documentation_url?; end

    sig { returns(T.nilable(::String)) }
    def documentation_url_before_last_save; end

    sig { returns(T.untyped) }
    def documentation_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def documentation_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def documentation_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def documentation_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def documentation_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def documentation_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def documentation_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def documentation_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def documentation_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def documentation_url_was; end

    sig { void }
    def documentation_url_will_change!; end

    sig { returns(T.untyped) }
    def extended_description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def extended_description=(value); end

    sig { returns(T::Boolean) }
    def extended_description?; end

    sig { returns(T.untyped) }
    def extended_description_before_last_save; end

    sig { returns(T.untyped) }
    def extended_description_before_type_cast; end

    sig { returns(T::Boolean) }
    def extended_description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def extended_description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def extended_description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def extended_description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def extended_description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def extended_description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def extended_description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def extended_description_previously_was; end

    sig { returns(T.untyped) }
    def extended_description_was; end

    sig { void }
    def extended_description_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def featured_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def featured_at=(value); end

    sig { returns(T::Boolean) }
    def featured_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def featured_at_before_last_save; end

    sig { returns(T.untyped) }
    def featured_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def featured_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def featured_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def featured_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def featured_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def featured_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def featured_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def featured_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def featured_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def featured_at_was; end

    sig { void }
    def featured_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def finance_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def finance_email=(value); end

    sig { returns(T::Boolean) }
    def finance_email?; end

    sig { returns(T.nilable(::String)) }
    def finance_email_before_last_save; end

    sig { returns(T.untyped) }
    def finance_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def finance_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def finance_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def finance_email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def finance_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def finance_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def finance_email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def finance_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def finance_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def finance_email_was; end

    sig { void }
    def finance_email_will_change!; end

    sig { returns(T.untyped) }
    def full_description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def full_description=(value); end

    sig { returns(T::Boolean) }
    def full_description?; end

    sig { returns(T.untyped) }
    def full_description_before_last_save; end

    sig { returns(T.untyped) }
    def full_description_before_type_cast; end

    sig { returns(T::Boolean) }
    def full_description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def full_description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def full_description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def full_description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def full_description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def full_description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def full_description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def full_description_previously_was; end

    sig { returns(T.untyped) }
    def full_description_was; end

    sig { void }
    def full_description_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def hero_card_background_image_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def hero_card_background_image_id=(value); end

    sig { returns(T::Boolean) }
    def hero_card_background_image_id?; end

    sig { returns(T.nilable(::Integer)) }
    def hero_card_background_image_id_before_last_save; end

    sig { returns(T.untyped) }
    def hero_card_background_image_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def hero_card_background_image_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def hero_card_background_image_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def hero_card_background_image_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def hero_card_background_image_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def hero_card_background_image_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def hero_card_background_image_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def hero_card_background_image_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def hero_card_background_image_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def hero_card_background_image_id_was; end

    sig { void }
    def hero_card_background_image_id_will_change!; end

    sig { returns(T.untyped) }
    def how_it_works; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def how_it_works=(value); end

    sig { returns(T::Boolean) }
    def how_it_works?; end

    sig { returns(T.untyped) }
    def how_it_works_before_last_save; end

    sig { returns(T.untyped) }
    def how_it_works_before_type_cast; end

    sig { returns(T::Boolean) }
    def how_it_works_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def how_it_works_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def how_it_works_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def how_it_works_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def how_it_works_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def how_it_works_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def how_it_works_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def how_it_works_previously_was; end

    sig { returns(T.untyped) }
    def how_it_works_was; end

    sig { void }
    def how_it_works_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def installation_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def installation_url=(value); end

    sig { returns(T::Boolean) }
    def installation_url?; end

    sig { returns(T.nilable(::String)) }
    def installation_url_before_last_save; end

    sig { returns(T.untyped) }
    def installation_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def installation_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def installation_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def installation_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def installation_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def installation_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def installation_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def installation_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def installation_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def installation_url_was; end

    sig { void }
    def installation_url_will_change!; end

    sig { returns(T.nilable(::String)) }
    def learn_more_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def learn_more_url=(value); end

    sig { returns(T::Boolean) }
    def learn_more_url?; end

    sig { returns(T.nilable(::String)) }
    def learn_more_url_before_last_save; end

    sig { returns(T.untyped) }
    def learn_more_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def learn_more_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def learn_more_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def learn_more_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def learn_more_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def learn_more_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def learn_more_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def learn_more_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def learn_more_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def learn_more_url_was; end

    sig { void }
    def learn_more_url_will_change!; end

    sig { returns(T::Boolean) }
    def light_text; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def light_text=(value); end

    sig { returns(T::Boolean) }
    def light_text?; end

    sig { returns(T.nilable(T::Boolean)) }
    def light_text_before_last_save; end

    sig { returns(T.untyped) }
    def light_text_before_type_cast; end

    sig { returns(T::Boolean) }
    def light_text_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def light_text_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def light_text_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def light_text_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def light_text_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def light_text_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def light_text_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def light_text_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def light_text_was; end

    sig { void }
    def light_text_will_change!; end

    sig { returns(::Integer) }
    def listable_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def listable_id=(value); end

    sig { returns(T::Boolean) }
    def listable_id?; end

    sig { returns(T.nilable(::Integer)) }
    def listable_id_before_last_save; end

    sig { returns(T.untyped) }
    def listable_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def listable_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def listable_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def listable_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def listable_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def listable_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def listable_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def listable_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def listable_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def listable_id_was; end

    sig { void }
    def listable_id_will_change!; end

    sig { returns(::String) }
    def listable_type; end

    sig { params(value: ::String).returns(::String) }
    def listable_type=(value); end

    sig { returns(T::Boolean) }
    def listable_type?; end

    sig { returns(T.nilable(::String)) }
    def listable_type_before_last_save; end

    sig { returns(T.untyped) }
    def listable_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def listable_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def listable_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def listable_type_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def listable_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def listable_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def listable_type_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def listable_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def listable_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def listable_type_was; end

    sig { void }
    def listable_type_will_change!; end

    sig { returns(T.nilable(::String)) }
    def marketing_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def marketing_email=(value); end

    sig { returns(T::Boolean) }
    def marketing_email?; end

    sig { returns(T.nilable(::String)) }
    def marketing_email_before_last_save; end

    sig { returns(T.untyped) }
    def marketing_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def marketing_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def marketing_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def marketing_email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def marketing_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def marketing_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def marketing_email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def marketing_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def marketing_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def marketing_email_was; end

    sig { void }
    def marketing_email_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def pricing_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def pricing_url=(value); end

    sig { returns(T::Boolean) }
    def pricing_url?; end

    sig { returns(T.nilable(::String)) }
    def pricing_url_before_last_save; end

    sig { returns(T.untyped) }
    def pricing_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def pricing_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pricing_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pricing_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def pricing_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pricing_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pricing_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def pricing_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pricing_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def pricing_url_was; end

    sig { void }
    def pricing_url_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def primary_category_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def primary_category_id=(value); end

    sig { returns(T::Boolean) }
    def primary_category_id?; end

    sig { returns(T.nilable(::Integer)) }
    def primary_category_id_before_last_save; end

    sig { returns(T.untyped) }
    def primary_category_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def primary_category_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def primary_category_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def primary_category_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def primary_category_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def primary_category_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def primary_category_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def primary_category_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def primary_category_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def primary_category_id_was; end

    sig { void }
    def primary_category_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def privacy_policy_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def privacy_policy_url=(value); end

    sig { returns(T::Boolean) }
    def privacy_policy_url?; end

    sig { returns(T.nilable(::String)) }
    def privacy_policy_url_before_last_save; end

    sig { returns(T.untyped) }
    def privacy_policy_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def privacy_policy_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def privacy_policy_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def privacy_policy_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def privacy_policy_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def privacy_policy_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def privacy_policy_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def privacy_policy_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def privacy_policy_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def privacy_policy_url_was; end

    sig { void }
    def privacy_policy_url_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def removal_date; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def removal_date=(value); end

    sig { returns(T::Boolean) }
    def removal_date?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def removal_date_before_last_save; end

    sig { returns(T.untyped) }
    def removal_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def removal_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def removal_date_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def removal_date_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def removal_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def removal_date_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def removal_date_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def removal_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def removal_date_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def removal_date_was; end

    sig { void }
    def removal_date_will_change!; end

    sig { void }
    def restore_bgcolor!; end

    sig { void }
    def restore_by_github!; end

    sig { void }
    def restore_company_url!; end

    sig { void }
    def restore_copilot_app!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_direct_billing_enabled!; end

    sig { void }
    def restore_documentation_url!; end

    sig { void }
    def restore_extended_description!; end

    sig { void }
    def restore_featured_at!; end

    sig { void }
    def restore_finance_email!; end

    sig { void }
    def restore_full_description!; end

    sig { void }
    def restore_hero_card_background_image_id!; end

    sig { void }
    def restore_how_it_works!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_installation_url!; end

    sig { void }
    def restore_learn_more_url!; end

    sig { void }
    def restore_light_text!; end

    sig { void }
    def restore_listable_id!; end

    sig { void }
    def restore_listable_type!; end

    sig { void }
    def restore_marketing_email!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_pricing_url!; end

    sig { void }
    def restore_primary_category_id!; end

    sig { void }
    def restore_privacy_policy_url!; end

    sig { void }
    def restore_removal_date!; end

    sig { void }
    def restore_secondary_category_id!; end

    sig { void }
    def restore_security_email!; end

    sig { void }
    def restore_short_description!; end

    sig { void }
    def restore_slug!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_status_url!; end

    sig { void }
    def restore_support_url!; end

    sig { void }
    def restore_technical_email!; end

    sig { void }
    def restore_tos_url!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_bgcolor; end

    sig { returns(T::Boolean) }
    def saved_change_to_bgcolor?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_by_github; end

    sig { returns(T::Boolean) }
    def saved_change_to_by_github?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_company_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_company_url?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_copilot_app; end

    sig { returns(T::Boolean) }
    def saved_change_to_copilot_app?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_direct_billing_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_direct_billing_enabled?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_documentation_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_documentation_url?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_extended_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_extended_description?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_featured_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_featured_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_finance_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_finance_email?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_full_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_full_description?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_hero_card_background_image_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_hero_card_background_image_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_how_it_works; end

    sig { returns(T::Boolean) }
    def saved_change_to_how_it_works?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_installation_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_installation_url?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_learn_more_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_learn_more_url?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_light_text; end

    sig { returns(T::Boolean) }
    def saved_change_to_light_text?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_listable_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_listable_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_listable_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_listable_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_marketing_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_marketing_email?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_pricing_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_pricing_url?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_primary_category_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_primary_category_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_privacy_policy_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_privacy_policy_url?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_removal_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_removal_date?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_secondary_category_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_secondary_category_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_security_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_security_email?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_short_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_short_description?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_slug?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_status_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_status_url?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_support_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_support_url?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_technical_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_technical_email?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_tos_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_tos_url?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::Integer)) }
    def secondary_category_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def secondary_category_id=(value); end

    sig { returns(T::Boolean) }
    def secondary_category_id?; end

    sig { returns(T.nilable(::Integer)) }
    def secondary_category_id_before_last_save; end

    sig { returns(T.untyped) }
    def secondary_category_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def secondary_category_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def secondary_category_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def secondary_category_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def secondary_category_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def secondary_category_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def secondary_category_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def secondary_category_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def secondary_category_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def secondary_category_id_was; end

    sig { void }
    def secondary_category_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def security_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def security_email=(value); end

    sig { returns(T::Boolean) }
    def security_email?; end

    sig { returns(T.nilable(::String)) }
    def security_email_before_last_save; end

    sig { returns(T.untyped) }
    def security_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def security_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def security_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def security_email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def security_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def security_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def security_email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def security_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def security_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def security_email_was; end

    sig { void }
    def security_email_will_change!; end

    sig { returns(T.nilable(::String)) }
    def short_description; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def short_description=(value); end

    sig { returns(T::Boolean) }
    def short_description?; end

    sig { returns(T.nilable(::String)) }
    def short_description_before_last_save; end

    sig { returns(T.untyped) }
    def short_description_before_type_cast; end

    sig { returns(T::Boolean) }
    def short_description_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def short_description_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def short_description_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def short_description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def short_description_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def short_description_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def short_description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def short_description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def short_description_was; end

    sig { void }
    def short_description_will_change!; end

    sig { returns(::String) }
    def slug; end

    sig { params(value: ::String).returns(::String) }
    def slug=(value); end

    sig { returns(T::Boolean) }
    def slug?; end

    sig { returns(T.nilable(::String)) }
    def slug_before_last_save; end

    sig { returns(T.untyped) }
    def slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def slug_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def slug_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def slug_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slug_was; end

    sig { void }
    def slug_will_change!; end

    sig { returns(::Integer) }
    def state; end

    sig { params(value: ::Integer).returns(::Integer) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::Integer)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def state_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def state_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::String)) }
    def status_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def status_url=(value); end

    sig { returns(T::Boolean) }
    def status_url?; end

    sig { returns(T.nilable(::String)) }
    def status_url_before_last_save; end

    sig { returns(T.untyped) }
    def status_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def status_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def status_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def status_url_was; end

    sig { void }
    def status_url_will_change!; end

    sig { returns(T.nilable(::String)) }
    def support_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def support_url=(value); end

    sig { returns(T::Boolean) }
    def support_url?; end

    sig { returns(T.nilable(::String)) }
    def support_url_before_last_save; end

    sig { returns(T.untyped) }
    def support_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def support_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def support_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def support_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def support_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def support_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def support_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def support_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def support_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def support_url_was; end

    sig { void }
    def support_url_will_change!; end

    sig { returns(T.nilable(::String)) }
    def technical_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def technical_email=(value); end

    sig { returns(T::Boolean) }
    def technical_email?; end

    sig { returns(T.nilable(::String)) }
    def technical_email_before_last_save; end

    sig { returns(T.untyped) }
    def technical_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def technical_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def technical_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def technical_email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def technical_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def technical_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def technical_email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def technical_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def technical_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def technical_email_was; end

    sig { void }
    def technical_email_will_change!; end

    sig { returns(T.nilable(::String)) }
    def tos_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def tos_url=(value); end

    sig { returns(T::Boolean) }
    def tos_url?; end

    sig { returns(T.nilable(::String)) }
    def tos_url_before_last_save; end

    sig { returns(T.untyped) }
    def tos_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def tos_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tos_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tos_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def tos_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tos_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tos_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def tos_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tos_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def tos_url_was; end

    sig { void }
    def tos_url_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bgcolor?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_by_github?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_company_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_copilot_app?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_direct_billing_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_documentation_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_extended_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_featured_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_finance_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_full_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hero_card_background_image_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_how_it_works?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_installation_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_learn_more_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_light_text?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_listable_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_listable_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_marketing_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pricing_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_primary_category_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_privacy_policy_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_removal_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_secondary_category_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_security_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_short_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_support_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_technical_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tos_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def drafts(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def editable_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def featured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_integratables(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_primary_category_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def including_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def installed_on_repo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def listable_is_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def matches_name_or_description(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def publicly_listed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def quick_installable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def subscribed_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def visible_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_category(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_free_trial(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_installations_on(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_states(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedWorkflowClassMethods
    sig { params(val: String).returns(T.untyped) }
    def state=(val); end

    sig { returns(PrivateRelationWhereChain) }
    def with_archived_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_draft_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_rejected_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_unverified_pending_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_unverified_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_verification_pending_from_draft_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_verification_pending_from_unverified_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_verified_creator_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_verified_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_archived_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_draft_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_rejected_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_unverified_pending_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_unverified_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_verification_pending_from_draft_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_verification_pending_from_unverified_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_verified_creator_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_verified_state; end
  end

  module GeneratedWorkflowMethods
    sig { void }
    def approve!; end

    sig { void }
    def approve!; end

    sig { void }
    def approve!; end

    sig { void }
    def approve!; end

    sig { void }
    def approve_creator!; end

    sig { void }
    def approve_creator!; end

    sig { void }
    def approve_creator!; end

    sig { returns(T::Boolean) }
    def archived?; end

    sig { returns(T::Boolean) }
    def can_approve?; end

    sig { returns(T::Boolean) }
    def can_approve?; end

    sig { returns(T::Boolean) }
    def can_approve?; end

    sig { returns(T::Boolean) }
    def can_approve?; end

    sig { returns(T::Boolean) }
    def can_approve_creator?; end

    sig { returns(T::Boolean) }
    def can_approve_creator?; end

    sig { returns(T::Boolean) }
    def can_approve_creator?; end

    sig { returns(T::Boolean) }
    def can_delist?; end

    sig { returns(T::Boolean) }
    def can_delist?; end

    sig { returns(T::Boolean) }
    def can_delist?; end

    sig { returns(T::Boolean) }
    def can_move_to_verified?; end

    sig { returns(T::Boolean) }
    def can_redraft?; end

    sig { returns(T::Boolean) }
    def can_redraft?; end

    sig { returns(T::Boolean) }
    def can_redraft?; end

    sig { returns(T::Boolean) }
    def can_reject?; end

    sig { returns(T::Boolean) }
    def can_request_unverified_approval?; end

    sig { returns(T::Boolean) }
    def can_request_verified_approval?; end

    sig { returns(T::Boolean) }
    def can_request_verified_approval?; end

    sig { void }
    def delist!; end

    sig { void }
    def delist!; end

    sig { void }
    def delist!; end

    sig { returns(T::Boolean) }
    def draft?; end

    sig { void }
    def move_to_verified!; end

    sig { void }
    def redraft!; end

    sig { void }
    def redraft!; end

    sig { void }
    def redraft!; end

    sig { void }
    def reject!; end

    sig { returns(T::Boolean) }
    def rejected?; end

    sig { void }
    def request_unverified_approval!; end

    sig { void }
    def request_verified_approval!; end

    sig { void }
    def request_verified_approval!; end

    sig { returns(T::Boolean) }
    def unverified?; end

    sig { returns(T::Boolean) }
    def unverified_pending?; end

    sig { returns(T::Boolean) }
    def verification_pending_from_draft?; end

    sig { returns(T::Boolean) }
    def verification_pending_from_unverified?; end

    sig { returns(T::Boolean) }
    def verified?; end

    sig { returns(T::Boolean) }
    def verified_creator?; end

    sig { returns(PrivateRelationWhereChain) }
    def without_archived_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_draft_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_rejected_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_unverified_pending_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_unverified_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_verification_pending_from_draft_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_verification_pending_from_unverified_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_verified_creator_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_verified_state; end
  end

  class PrivateAssocationRelation < ::ActiveRecord::AssociationRelation
    include GeneratedWorkflowClassMethods
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Marketplace::Listing } }

    sig { returns(T::Array[::Marketplace::Listing]) }
    def to_a; end

    sig { returns(T::Array[::Marketplace::Listing]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Marketplace::Listing } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedWorkflowClassMethods
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Marketplace::Listing } }

    sig do
      params(
        records: T.any(::Marketplace::Listing, T::Enumerable[T.any(::Marketplace::Listing, T::Enumerable[::Marketplace::Listing])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Marketplace::Listing, T::Enumerable[T.any(::Marketplace::Listing, T::Enumerable[::Marketplace::Listing])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Marketplace::Listing, T::Enumerable[T.any(::Marketplace::Listing, T::Enumerable[::Marketplace::Listing])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Marketplace::Listing]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Marketplace::Listing, T::Enumerable[T.any(::Marketplace::Listing, T::Enumerable[::Marketplace::Listing])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Marketplace::Listing, T::Enumerable[T.any(::Marketplace::Listing, T::Enumerable[::Marketplace::Listing])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Marketplace::Listing, T::Enumerable[T.any(::Marketplace::Listing, T::Enumerable[::Marketplace::Listing])])
      ).returns(T::Array[::Marketplace::Listing])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Marketplace::Listing]) }
    def target; end

    sig { returns(T::Array[::Marketplace::Listing]) }
    def to_a; end

    sig { returns(T::Array[::Marketplace::Listing]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include GeneratedWorkflowClassMethods
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Marketplace::Listing } }

    sig { returns(T::Array[::Marketplace::Listing]) }
    def to_a; end

    sig { returns(T::Array[::Marketplace::Listing]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Marketplace::Listing } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Proto::SecretScanning::Api::V1::DryRunMetadataForPatternResponse`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Proto::SecretScanning::Api::V1::DryRunMetadataForPatternResponse`.

class GitHub::Proto::SecretScanning::Api::V1::DryRunMetadataForPatternResponse
  sig do
    params(
      custom_pattern_id: T.nilable(Integer),
      finished_at: T.nilable(Google::Protobuf::Timestamp),
      job_group_id: T.nilable(Integer),
      scan_id: T.nilable(Integer),
      scan_status_counts: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatusCount], T::Array[GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatusCount])),
      started_at: T.nilable(Google::Protobuf::Timestamp),
      status: T.nilable(T.any(Symbol, Integer)),
      total_result_count: T.nilable(Integer)
    ).void
  end
  def initialize(custom_pattern_id: nil, finished_at: nil, job_group_id: nil, scan_id: nil, scan_status_counts: T.unsafe(nil), started_at: nil, status: nil, total_result_count: nil); end

  sig { void }
  def clear_custom_pattern_id; end

  sig { void }
  def clear_finished_at; end

  sig { void }
  def clear_job_group_id; end

  sig { void }
  def clear_scan_id; end

  sig { void }
  def clear_scan_status_counts; end

  sig { void }
  def clear_started_at; end

  sig { void }
  def clear_status; end

  sig { void }
  def clear_total_result_count; end

  sig { returns(Integer) }
  def custom_pattern_id; end

  sig { params(value: Integer).void }
  def custom_pattern_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def finished_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def finished_at=(value); end

  sig { returns(T.nilable(Symbol)) }
  def job; end

  sig { returns(Integer) }
  def job_group_id; end

  sig { params(value: Integer).void }
  def job_group_id=(value); end

  sig { returns(Integer) }
  def scan_id; end

  sig { params(value: Integer).void }
  def scan_id=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatusCount]) }
  def scan_status_counts; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatusCount]
    ).void
  end
  def scan_status_counts=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def started_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def started_at=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end

  sig { returns(Integer) }
  def total_result_count; end

  sig { params(value: Integer).void }
  def total_result_count=(value); end
end

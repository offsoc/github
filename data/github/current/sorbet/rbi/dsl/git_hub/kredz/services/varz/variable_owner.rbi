# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Kredz::Services::Varz::VariableOwner`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Kredz::Services::Varz::VariableOwner`.

class GitHub::Kredz::Services::Varz::VariableOwner
  sig do
    params(
      environment: T.nilable(GitHub::Kredz::Services::Varz::Environment),
      organization: T.nilable(GitHub::Kredz::Services::Varz::Organization),
      repository: T.nilable(GitHub::Kredz::Services::Varz::Repository),
      user: T.nilable(GitHub::Kredz::Services::Varz::User)
    ).void
  end
  def initialize(environment: nil, organization: nil, repository: nil, user: nil); end

  sig { void }
  def clear_environment; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_user; end

  sig { returns(T.nilable(GitHub::Kredz::Services::Varz::Environment)) }
  def environment; end

  sig { params(value: T.nilable(GitHub::Kredz::Services::Varz::Environment)).void }
  def environment=(value); end

  sig { returns(T.nilable(GitHub::Kredz::Services::Varz::Organization)) }
  def organization; end

  sig { params(value: T.nilable(GitHub::Kredz::Services::Varz::Organization)).void }
  def organization=(value); end

  sig { returns(T.nilable(Symbol)) }
  def owner; end

  sig { returns(T.nilable(GitHub::Kredz::Services::Varz::Repository)) }
  def repository; end

  sig { params(value: T.nilable(GitHub::Kredz::Services::Varz::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(GitHub::Kredz::Services::Varz::User)) }
  def user; end

  sig { params(value: T.nilable(GitHub::Kredz::Services::Varz::User)).void }
  def user=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::NewsFeedView`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::NewsFeedView`.

class Hydro::Schemas::Github::V1::NewsFeedView
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      context: T.nilable(T.any(Symbol, Integer)),
      event: T.nilable(Hydro::Schemas::Github::V1::Entities::NewsFeedEvent),
      event_group: T.nilable(Hydro::Schemas::Github::V1::Entities::NewsFeedEventGroup),
      org: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      target_type: T.nilable(T.any(Symbol, Integer)),
      unique_card_retrieved_id: T.nilable(String)
    ).void
  end
  def initialize(actor: nil, context: nil, event: nil, event_group: nil, org: nil, request_context: nil, target_type: nil, unique_card_retrieved_id: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_context; end

  sig { void }
  def clear_event; end

  sig { void }
  def clear_event_group; end

  sig { void }
  def clear_org; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_target_type; end

  sig { void }
  def clear_unique_card_retrieved_id; end

  sig { returns(T.any(Symbol, Integer)) }
  def context; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::NewsFeedEvent)) }
  def event; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::NewsFeedEvent)).void }
  def event=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::NewsFeedEventGroup)) }
  def event_group; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::NewsFeedEventGroup)).void }
  def event_group=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def org; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def org=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def target_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def target_type=(value); end

  sig { returns(String) }
  def unique_card_retrieved_id; end

  sig { params(value: String).void }
  def unique_card_retrieved_id=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Driftwood::Auditlog::V1::ExportOrgGitAuditEntriesRequest`.
# Please instead update this file by running `bin/tapioca dsl Driftwood::Auditlog::V1::ExportOrgGitAuditEntriesRequest`.

class Driftwood::Auditlog::V1::ExportOrgGitAuditEntriesRequest
  sig do
    params(
      end_time: T.nilable(Google::Protobuf::Timestamp),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      organization_id: T.nilable(Integer),
      region: T.nilable(Driftwood::Auditlog::V1::Region),
      start_time: T.nilable(Google::Protobuf::Timestamp),
      token: T.nilable(String)
    ).void
  end
  def initialize(end_time: nil, feature_flags: T.unsafe(nil), organization_id: nil, region: nil, start_time: nil, token: nil); end

  sig { void }
  def clear_end_time; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_organization_id; end

  sig { void }
  def clear_region; end

  sig { void }
  def clear_start_time; end

  sig { void }
  def clear_token; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def end_time; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def end_time=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(Integer) }
  def organization_id; end

  sig { params(value: Integer).void }
  def organization_id=(value); end

  sig { returns(T.nilable(Driftwood::Auditlog::V1::Region)) }
  def region; end

  sig { params(value: T.nilable(Driftwood::Auditlog::V1::Region)).void }
  def region=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def start_time; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def start_time=(value); end

  sig { returns(String) }
  def token; end

  sig { params(value: String).void }
  def token=(value); end
end

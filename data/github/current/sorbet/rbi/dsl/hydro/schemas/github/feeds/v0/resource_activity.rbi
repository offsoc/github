# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Feeds::V0::ResourceActivity`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Feeds::V0::ResourceActivity`.

class Hydro::Schemas::Github::Feeds::V0::ResourceActivity
  sig do
    params(
      contains_attachments: T.nilable(T::Boolean),
      contains_embed: T.nilable(T::Boolean),
      contains_image: T.nilable(T::Boolean),
      contains_video: T.nilable(T::Boolean),
      has_non_author_comments: T.nilable(T::Boolean),
      has_non_author_reactions: T.nilable(T::Boolean),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      resource_id: T.nilable(Integer),
      resource_type: T.nilable(String),
      supports_comments: T.nilable(T::Boolean),
      total_comments: T.nilable(Integer),
      total_direct_comments: T.nilable(Integer),
      total_reactions: T.nilable(Integer),
      total_upvotes: T.nilable(Integer)
    ).void
  end
  def initialize(contains_attachments: nil, contains_embed: nil, contains_image: nil, contains_video: nil, has_non_author_comments: nil, has_non_author_reactions: nil, request_context: nil, resource_id: nil, resource_type: nil, supports_comments: nil, total_comments: nil, total_direct_comments: nil, total_reactions: nil, total_upvotes: nil); end

  sig { void }
  def clear_contains_attachments; end

  sig { void }
  def clear_contains_embed; end

  sig { void }
  def clear_contains_image; end

  sig { void }
  def clear_contains_video; end

  sig { void }
  def clear_has_non_author_comments; end

  sig { void }
  def clear_has_non_author_reactions; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_resource_id; end

  sig { void }
  def clear_resource_type; end

  sig { void }
  def clear_supports_comments; end

  sig { void }
  def clear_total_comments; end

  sig { void }
  def clear_total_direct_comments; end

  sig { void }
  def clear_total_reactions; end

  sig { void }
  def clear_total_upvotes; end

  sig { returns(T::Boolean) }
  def contains_attachments; end

  sig { params(value: T::Boolean).void }
  def contains_attachments=(value); end

  sig { returns(T::Boolean) }
  def contains_embed; end

  sig { params(value: T::Boolean).void }
  def contains_embed=(value); end

  sig { returns(T::Boolean) }
  def contains_image; end

  sig { params(value: T::Boolean).void }
  def contains_image=(value); end

  sig { returns(T::Boolean) }
  def contains_video; end

  sig { params(value: T::Boolean).void }
  def contains_video=(value); end

  sig { returns(T::Boolean) }
  def has_non_author_comments; end

  sig { params(value: T::Boolean).void }
  def has_non_author_comments=(value); end

  sig { returns(T::Boolean) }
  def has_non_author_reactions; end

  sig { params(value: T::Boolean).void }
  def has_non_author_reactions=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(Integer) }
  def resource_id; end

  sig { params(value: Integer).void }
  def resource_id=(value); end

  sig { returns(String) }
  def resource_type; end

  sig { params(value: String).void }
  def resource_type=(value); end

  sig { returns(T::Boolean) }
  def supports_comments; end

  sig { params(value: T::Boolean).void }
  def supports_comments=(value); end

  sig { returns(Integer) }
  def total_comments; end

  sig { params(value: Integer).void }
  def total_comments=(value); end

  sig { returns(Integer) }
  def total_direct_comments; end

  sig { params(value: Integer).void }
  def total_direct_comments=(value); end

  sig { returns(Integer) }
  def total_reactions; end

  sig { params(value: Integer).void }
  def total_reactions=(value); end

  sig { returns(Integer) }
  def total_upvotes; end

  sig { params(value: Integer).void }
  def total_upvotes=(value); end
end

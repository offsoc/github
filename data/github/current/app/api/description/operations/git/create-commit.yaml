---
summary: Create a commit
description: |-
  Creates a new Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).

  **Signature verification object**

  The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

  | Name | Type | Description |
  | ---- | ---- | ----------- |
  | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
  | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
  | `signature` | `string` | The signature that was extracted from the commit. |
  | `payload` | `string` | The value that was signed. |

  These are the possible values for `reason` in the `verification` object:

  | Value | Description |
  | ----- | ----------- |
  | `expired_key` | The key that made the signature is expired. |
  | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
  | `gpgverify_error` | There was an error communicating with the signature verification service. |
  | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
  | `unsigned` | The object does not include a signature. |
  | `unknown_signature_type` | A non-PGP signature was found in the commit. |
  | `no_user` | No user was associated with the `committer` email address in the commit. |
  | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
  | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
  | `unknown_key` | The key that made the signature has not been registered with any user's account. |
  | `malformed_signature` | There was an error parsing the signature. |
  | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
  | `valid` | None of the above errors applied, so the signature is considered to be verified. |
tags:
  - git
operationId: git/create-commit
externalDocs:
  description: API method documentation
  url: '${externalDocsUrl}/rest/git/commits#create-a-commit'
parameters:
  - $ref: '../../components/parameters/owner.yaml'
  - $ref: '../../components/parameters/repo.yaml'
requestBody:
  required: true
  content:
    application/json:
      schema:
        type: object
        properties:
          message:
            type: string
            description: The commit message
          tree:
            type: string
            description: The SHA of the tree object this commit points to
          parents:
            type: array
            description: The full SHAs of the commits that were the parents of this commit.
              If omitted or empty, the commit will be written as a root commit. For
              a single parent, an array of one SHA should be provided; for a merge
              commit, an array of more than one should be provided.
            items:
              type: string
          author:
            type: object
            description: Information about the author of the commit. By default, the
              `author` will be the authenticated user and the current date. See the
              `author` and `committer` object below for details.
            properties:
              name:
                type: string
                description: The name of the author (or committer) of the commit
              email:
                type: string
                description: The email of the author (or committer) of the commit
              date:
                type: string
                format: date-time
                description: 'Indicates when this commit was authored (or committed).
                  This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
                  format: `YYYY-MM-DDTHH:MM:SSZ`.'
            required:
              - name
              - email
          committer:
            type: object
            description: Information about the person who is making the commit. By
              default, `committer` will use the information set in `author`. See the
              `author` and `committer` object below for details.
            properties:
              name:
                type: string
                description: The name of the author (or committer) of the commit
              email:
                type: string
                description: The email of the author (or committer) of the commit
              date:
                type: string
                format: date-time
                description: 'Indicates when this commit was authored (or committed).
                  This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
                  format: `YYYY-MM-DDTHH:MM:SSZ`.'
          signature:
            type: string
            description: The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy)
              of the commit. GitHub adds the signature to the `gpgsig` header of the
              created commit. For a commit signature to be verifiable by Git or GitHub,
              it must be an ASCII-armored detached PGP signature over the string commit
              as it would be written to the object database. To pass a `signature`
              parameter, you need to first manually create a valid PGP signature,
              which can be complicated. You may find it easier to [use the command
              line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to
              create signed commits.
        required:
          - message
          - tree
      examples:
        default:
          value:
            message: my commit message
            author:
              name: Mona Octocat
              email: octocat@github.com
              date: '2008-07-09T16:13:30+12:00'
            parents:
              - 7d1b31e74ee336d15cbd21741bc88a537ed063a0
            tree: 827efc6d56897b048c772eb4087f854f46256132
            signature: |
              -----BEGIN PGP SIGNATURE-----

              iQIzBAABAQAdFiEESn/54jMNIrGSE6Tp6cQjvhfv7nAFAlnT71cACgkQ6cQjvhfv
              7nCWwA//XVqBKWO0zF+bZl6pggvky3Oc2j1pNFuRWZ29LXpNuD5WUGXGG209B0hI
              DkmcGk19ZKUTnEUJV2Xd0R7AW01S/YSub7OYcgBkI7qUE13FVHN5ln1KvH2all2n
              2+JCV1HcJLEoTjqIFZSSu/sMdhkLQ9/NsmMAzpf/iIM0nQOyU4YRex9eD1bYj6nA
              OQPIDdAuaTQj1gFPHYLzM4zJnCqGdRlg0sOM/zC5apBNzIwlgREatOYQSCfCKV7k
              nrU34X8b9BzQaUx48Qa+Dmfn5KQ8dl27RNeWAqlkuWyv3pUauH9UeYW+KyuJeMkU
              +NyHgAsWFaCFl23kCHThbLStMZOYEnGagrd0hnm1TPS4GJkV4wfYMwnI4KuSlHKB
              jHl3Js9vNzEUQipQJbgCgTiWvRJoK3ENwBTMVkKHaqT4x9U4Jk/XZB6Q8MA09ezJ
              3QgiTjTAGcum9E9QiJqMYdWQPWkaBIRRz5cET6HPB48YNXAAUsfmuYsGrnVLYbG+
              UpC6I97VybYHTy2O9XSGoaLeMI9CsFn38ycAxxbWagk5mhclNTP5mezIq6wKSwmr
              X11FW3n1J23fWZn5HJMBsRnUCgzqzX3871IqLYHqRJ/bpZ4h20RhTyPj5c/z7QXp
              eSakNQMfbbMcljkha+ZMuVQX1K9aRlVqbmv3ZMWh+OijLYVU2bc=
              =5Io4
              -----END PGP SIGNATURE-----
responses:
  '201':
    description: Response
    content:
      application/json:
        schema:
          $ref: '../../components/schemas/git-commit.yaml'
        examples:
          default:
            $ref: '../../components/examples/git-commit.yaml'
    headers:
      Location:
        example: https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd
        schema:
          type: string
  '422':
    $ref: '../../components/responses/validation_failed.yaml'
  '404':
    $ref: '../../components/responses/not_found.yaml'
  '409':
    $ref: '../../components/responses/conflict.yaml'
x-github-releases:
  - ghec
  - ghes: '>= 2.18'
  - api.github.com
x-github:
  githubCloudOnly: false
  enabledForGitHubApps: true

  category: git
  subcategory: commits
x-github-internal:
  path: '/repos/{owner}/{repo}/git/commits'
  http-method: post
  service-tier: 1
  owner: '@github/repos'
  published: true

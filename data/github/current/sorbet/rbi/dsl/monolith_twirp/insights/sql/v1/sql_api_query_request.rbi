# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Insights::Sql::V1::SqlAPIQueryRequest`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Insights::Sql::V1::SqlAPIQueryRequest`.

class MonolithTwirp::Insights::Sql::V1::SqlAPIQueryRequest
  sig do
    params(
      entity_id: T.nilable(Integer),
      entity_type: T.nilable(T.any(Symbol, Integer)),
      feature: T.nilable(String),
      org_id: T.nilable(Integer),
      query: T.nilable(String),
      query_scope: T.nilable(String),
      redacted: T.nilable(T::Boolean),
      user_id: T.nilable(Integer),
      user_login: T.nilable(String)
    ).void
  end
  def initialize(entity_id: nil, entity_type: nil, feature: nil, org_id: nil, query: nil, query_scope: nil, redacted: nil, user_id: nil, user_login: nil); end

  sig { void }
  def clear_entity_id; end

  sig { void }
  def clear_entity_type; end

  sig { void }
  def clear_feature; end

  sig { void }
  def clear_org_id; end

  sig { void }
  def clear_query; end

  sig { void }
  def clear_query_scope; end

  sig { void }
  def clear_redacted; end

  sig { void }
  def clear_user_id; end

  sig { void }
  def clear_user_login; end

  sig { returns(Integer) }
  def entity_id; end

  sig { params(value: Integer).void }
  def entity_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def entity_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def entity_type=(value); end

  sig { returns(String) }
  def feature; end

  sig { params(value: String).void }
  def feature=(value); end

  sig { returns(Integer) }
  def org_id; end

  sig { params(value: Integer).void }
  def org_id=(value); end

  sig { returns(String) }
  def query; end

  sig { params(value: String).void }
  def query=(value); end

  sig { returns(String) }
  def query_scope; end

  sig { params(value: String).void }
  def query_scope=(value); end

  sig { returns(T::Boolean) }
  def redacted; end

  sig { params(value: T::Boolean).void }
  def redacted=(value); end

  sig { returns(Integer) }
  def user_id; end

  sig { params(value: Integer).void }
  def user_id=(value); end

  sig { returns(String) }
  def user_login; end

  sig { params(value: String).void }
  def user_login=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::PullRequests::V1::MergeConflict`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::PullRequests::V1::MergeConflict`.

class Hydro::Schemas::Github::PullRequests::V1::MergeConflict
  sig do
    params(
      base_commit_oid: T.nilable(String),
      conflicts: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::ConflictedPath], T::Array[Hydro::Schemas::Github::V1::Entities::ConflictedPath])),
      head_commit_oid: T.nilable(String),
      more_conflicts_exist: T.nilable(T::Boolean),
      pull_request_id: T.nilable(Integer),
      queued: T.nilable(T::Boolean),
      repository_id: T.nilable(Integer)
    ).void
  end
  def initialize(base_commit_oid: nil, conflicts: T.unsafe(nil), head_commit_oid: nil, more_conflicts_exist: nil, pull_request_id: nil, queued: nil, repository_id: nil); end

  sig { returns(String) }
  def base_commit_oid; end

  sig { params(value: String).void }
  def base_commit_oid=(value); end

  sig { void }
  def clear_base_commit_oid; end

  sig { void }
  def clear_conflicts; end

  sig { void }
  def clear_head_commit_oid; end

  sig { void }
  def clear_more_conflicts_exist; end

  sig { void }
  def clear_pull_request_id; end

  sig { void }
  def clear_queued; end

  sig { void }
  def clear_repository_id; end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::ConflictedPath]) }
  def conflicts; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::ConflictedPath]).void }
  def conflicts=(value); end

  sig { returns(String) }
  def head_commit_oid; end

  sig { params(value: String).void }
  def head_commit_oid=(value); end

  sig { returns(T::Boolean) }
  def more_conflicts_exist; end

  sig { params(value: T::Boolean).void }
  def more_conflicts_exist=(value); end

  sig { returns(Integer) }
  def pull_request_id; end

  sig { params(value: Integer).void }
  def pull_request_id=(value); end

  sig { returns(T::Boolean) }
  def queued; end

  sig { params(value: T::Boolean).void }
  def queued=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end
end

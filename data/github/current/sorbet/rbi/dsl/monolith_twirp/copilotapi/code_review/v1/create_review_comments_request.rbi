# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Copilotapi::CodeReview::V1::CreateReviewCommentsRequest`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Copilotapi::CodeReview::V1::CreateReviewCommentsRequest`.

class MonolithTwirp::Copilotapi::CodeReview::V1::CreateReviewCommentsRequest
  sig do
    params(
      body: T.nilable(String),
      comments: T.nilable(T.any(Google::Protobuf::RepeatedField[MonolithTwirp::Copilotapi::CodeReview::V1::Comment], T::Array[MonolithTwirp::Copilotapi::CodeReview::V1::Comment])),
      commit_id: T.nilable(String),
      comparison_base_oid: T.nilable(String),
      comparison_end_oid: T.nilable(String),
      comparison_start_oid: T.nilable(String),
      event: T.nilable(String),
      pull_number: T.nilable(Integer),
      repo_name: T.nilable(String),
      repo_owner: T.nilable(String)
    ).void
  end
  def initialize(body: nil, comments: T.unsafe(nil), commit_id: nil, comparison_base_oid: nil, comparison_end_oid: nil, comparison_start_oid: nil, event: nil, pull_number: nil, repo_name: nil, repo_owner: nil); end

  sig { returns(String) }
  def body; end

  sig { params(value: String).void }
  def body=(value); end

  sig { void }
  def clear_body; end

  sig { void }
  def clear_comments; end

  sig { void }
  def clear_commit_id; end

  sig { void }
  def clear_comparison_base_oid; end

  sig { void }
  def clear_comparison_end_oid; end

  sig { void }
  def clear_comparison_start_oid; end

  sig { void }
  def clear_event; end

  sig { void }
  def clear_pull_number; end

  sig { void }
  def clear_repo_name; end

  sig { void }
  def clear_repo_owner; end

  sig { returns(Google::Protobuf::RepeatedField[MonolithTwirp::Copilotapi::CodeReview::V1::Comment]) }
  def comments; end

  sig { params(value: Google::Protobuf::RepeatedField[MonolithTwirp::Copilotapi::CodeReview::V1::Comment]).void }
  def comments=(value); end

  sig { returns(String) }
  def commit_id; end

  sig { params(value: String).void }
  def commit_id=(value); end

  sig { returns(String) }
  def comparison_base_oid; end

  sig { params(value: String).void }
  def comparison_base_oid=(value); end

  sig { returns(String) }
  def comparison_end_oid; end

  sig { params(value: String).void }
  def comparison_end_oid=(value); end

  sig { returns(String) }
  def comparison_start_oid; end

  sig { params(value: String).void }
  def comparison_start_oid=(value); end

  sig { returns(String) }
  def event; end

  sig { params(value: String).void }
  def event=(value); end

  sig { returns(Integer) }
  def pull_number; end

  sig { params(value: Integer).void }
  def pull_number=(value); end

  sig { returns(String) }
  def repo_name; end

  sig { params(value: String).void }
  def repo_name=(value); end

  sig { returns(String) }
  def repo_owner; end

  sig { params(value: String).void }
  def repo_owner=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::TasklistItemMetadataMenuClick`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::TasklistItemMetadataMenuClick`.

class Hydro::Schemas::Github::V1::TasklistItemMetadataMenuClick
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      child_issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue),
      menu_type: T.nilable(T.any(Symbol, Integer)),
      parent_issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue),
      parent_repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, child_issue: nil, menu_type: nil, parent_issue: nil, parent_repository: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def child_issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def child_issue=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_child_issue; end

  sig { void }
  def clear_menu_type; end

  sig { void }
  def clear_parent_issue; end

  sig { void }
  def clear_parent_repository; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.any(Symbol, Integer)) }
  def menu_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def menu_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def parent_issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def parent_issue=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def parent_repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def parent_repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

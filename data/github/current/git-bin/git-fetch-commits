#!/bin/bash
#/ Usage: git-fetch-commits <repo> <commit>
#/ Fetch commit from <repo> into the current repository. The commit need not
#/ have refs in <repo>. Unlike git-fetch(1), this command only works when both
#/ repositories are on the same machine. Remote protocols may not be
#/ used and the current user must have write access to both repositories.
set -e
set -x # be noisy for failbot logging

# make sure we have a GIT_DIR set. this is the repo we're fetching into.
: ${GIT_DIR=$(git rev-parse --git-dir)}

# grab the repo to fetch from and the commit to fetch
repo="$1"
commit="$2"

# make sure we have both args or bail out with usage message
[ -z "$repo" -o -z "$commit" -o "$repo" = "--help" ] && {
    grep ^#/ <"$0" |cut -c4-
    exit 2
}

# bail if we already have this commit
git cat-file -e "$commit" 2>/dev/null && exit 0

# verify repo dir exists and expand the path
repo=$(cd "$repo" && pwd)
repo_id="$(basename "$repo" .git)"

# now fetch the commit into FETCH_HEAD
GIT_SOCKSTAT_VAR_parent_repo_id="uint:$repo_id" \
  git fetch --no-tags --no-recurse-submodules "$repo" "$commit"

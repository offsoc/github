# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::RepositoryAdvisoryWorkspacePullRequestOpen`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::RepositoryAdvisoryWorkspacePullRequestOpen`.

class Hydro::Schemas::Github::V1::RepositoryAdvisoryWorkspacePullRequestOpen
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_advisory: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryAdvisory),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      workspace: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      workspace_pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)
    ).void
  end
  def initialize(actor: nil, repository: nil, repository_advisory: nil, repository_owner: nil, request_context: nil, workspace: nil, workspace_pull_request: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_advisory; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_workspace; end

  sig { void }
  def clear_workspace_pull_request; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryAdvisory)) }
  def repository_advisory; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryAdvisory)).void }
  def repository_advisory=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def workspace; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def workspace=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def workspace_pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def workspace_pull_request=(value); end
end

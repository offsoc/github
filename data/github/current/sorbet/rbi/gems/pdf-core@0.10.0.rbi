# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pdf-core` gem.
# Please instead update this file by running `bin/tapioca gem pdf-core`.

# Top level Module
#
# source://pdf-core//lib/pdf/core.rb#4
module PDF; end

# PDF::Core is concerned with low-level PDF functions such as serialization,
# content streams and such.
#
# It's extracted from Prawn but at the moment is not entirely independent.
#
# source://pdf-core//lib/pdf/core.rb#9
module PDF::Core
  private

  # source://prawn/2.5.0/lib/prawn/security.rb#217
  def encrypted_pdf_object(obj, key, id, gen, in_content_stream = T.unsafe(nil)); end

  # Serializes Ruby objects to their PDF equivalents.  Most primitive objects
  # will work as expected, but please note that Name objects are represented
  # by Ruby Symbol objects and Dictionary objects are represented by Ruby
  # hashes (keyed by symbols)
  #
  # Examples:
  #
  #     pdf_object(true)      #=> "true"
  #     pdf_object(false)     #=> "false"
  #     pdf_object(1.2124)    #=> "1.2124"
  #     pdf_object('foo bar') #=> "(foo bar)"
  #     pdf_object(:Symbol)   #=> "/Symbol"
  #     pdf_object(['foo',:bar, [1,2]]) #=> "[foo /bar [1 2]]"
  #
  # @param obj [nil, Boolean, Numeric, Array, Hash, Time, Symbol, String, PDF::Core::ByteString, PDF::Core::LiteralString, PDF::Core::NameTree::Node, PDF::Core::NameTree::Value, PDF::Core::OutlineRoot, PDF::Core::OutlineItem, PDF::Core::Reference] Object to serialise
  # @param in_content_stream [Boolean] Specifies whther to use content stream
  #   format or object format
  # @raise [PDF::Core::Errors::FailedObjectConversion]
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/pdf_object.rb#77
  def pdf_object(obj, in_content_stream = T.unsafe(nil)); end

  # Serializes floating number into a string
  #
  # @param num [Numeric]
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/pdf_object.rb#11
  def real(num); end

  # Serializes a n array of numbers. This is specifically for use in PDF
  # content streams.
  #
  # @param array [Array<Numeric>]
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/pdf_object.rb#22
  def real_params(array); end

  # Encodes any string into a hex representation. The result is a string
  # with only 0-9 and a-f characters. That result is valid ASCII so tag
  # it as such to account for behaviour of different ruby VMs.
  #
  # @param str [String]
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/pdf_object.rb#42
  def string_to_hex(str); end

  # Converts string to UTF-16BE encoding as expected by PDF.
  #
  # @api private
  # @param str [String]
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/pdf_object.rb#31
  def utf8_to_utf16(str); end

  class << self
    # source://prawn/2.5.0/lib/prawn/security.rb#217
    def encrypted_pdf_object(obj, key, id, gen, in_content_stream = T.unsafe(nil)); end

    # Serializes Ruby objects to their PDF equivalents.  Most primitive objects
    # will work as expected, but please note that Name objects are represented
    # by Ruby Symbol objects and Dictionary objects are represented by Ruby
    # hashes (keyed by symbols)
    #
    # Examples:
    #
    #     pdf_object(true)      #=> "true"
    #     pdf_object(false)     #=> "false"
    #     pdf_object(1.2124)    #=> "1.2124"
    #     pdf_object('foo bar') #=> "(foo bar)"
    #     pdf_object(:Symbol)   #=> "/Symbol"
    #     pdf_object(['foo',:bar, [1,2]]) #=> "[foo /bar [1 2]]"
    #
    # @param obj [nil, Boolean, Numeric, Array, Hash, Time, Symbol, String, PDF::Core::ByteString, PDF::Core::LiteralString, PDF::Core::NameTree::Node, PDF::Core::NameTree::Value, PDF::Core::OutlineRoot, PDF::Core::OutlineItem, PDF::Core::Reference] Object to serialise
    # @param in_content_stream [Boolean] Specifies whther to use content stream
    #   format or object format
    # @raise [PDF::Core::Errors::FailedObjectConversion]
    # @return [String]
    #
    # source://pdf-core//lib/pdf/core/pdf_object.rb#77
    def pdf_object(obj, in_content_stream = T.unsafe(nil)); end

    # Serializes floating number into a string
    #
    # @param num [Numeric]
    # @return [String]
    #
    # source://pdf-core//lib/pdf/core/pdf_object.rb#11
    def real(num); end

    # Serializes a n array of numbers. This is specifically for use in PDF
    # content streams.
    #
    # @param array [Array<Numeric>]
    # @return [String]
    #
    # source://pdf-core//lib/pdf/core/pdf_object.rb#22
    def real_params(array); end

    # Encodes any string into a hex representation. The result is a string
    # with only 0-9 and a-f characters. That result is valid ASCII so tag
    # it as such to account for behaviour of different ruby VMs.
    #
    # @param str [String]
    # @return [String]
    #
    # source://pdf-core//lib/pdf/core/pdf_object.rb#42
    def string_to_hex(str); end

    # Converts string to UTF-16BE encoding as expected by PDF.
    #
    # @api private
    # @param str [String]
    # @return [String]
    #
    # source://pdf-core//lib/pdf/core/pdf_object.rb#31
    def utf8_to_utf16(str); end
  end
end

# Provides very low-level support for annotations.
#
# @api private
#
# source://pdf-core//lib/pdf/core/annotations.rb#14
module PDF::Core::Annotations
  # Adds a new annotation (section *8.4 Annotations* in PDF 1.7 spec) to the
  # current page.
  #
  # @api private
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] Annotation options. This is basically an `Annot`
  #   dict as decribed in the PDF spec.
  # @return [options]
  #
  # source://pdf-core//lib/pdf/core/annotations.rb#50
  def annotate(options); end

  # A convenience method for creating `Link` annotations.
  #
  # @api private
  # @param rect [Array<Numeric>] An array of four numbers,
  #   describing the bounds of the annotation.
  # @param options [Hash] Should include either `:Dest` (describing the target
  #   destination, usually as a string that has been recorded in the
  #   document's `Dests` tree), or `:A` (describing an action to perform on
  #   clicking the link), or `:PA` (for describing a URL to link to).
  # @return [Hash] Annotation dictionary
  #
  # source://pdf-core//lib/pdf/core/annotations.rb#79
  def link_annotation(rect, options = T.unsafe(nil)); end

  # A convenience method for creating `Text` annotations.
  #
  # @api private
  # @param rect [Array<Numeric>] An array of four numbers,
  #   describing the bounds of the annotation.
  # @param contents [String] Contents of the annotation
  # @return [Hash] Annotation dictionary
  #
  # source://pdf-core//lib/pdf/core/annotations.rb#64
  def text_annotation(rect, contents, options = T.unsafe(nil)); end

  private

  # @api private
  #
  # source://pdf-core//lib/pdf/core/annotations.rb#86
  def sanitize_annotation_hash(options); end
end

# This is used to differentiate strings that must be encoded as
# a byte string, such as binary data from encrypted strings.
#
# @api private
#
# source://pdf-core//lib/pdf/core/byte_string.rb#9
class PDF::Core::ByteString < ::String; end

# Implements destination support for PDF
#
# @api private
#
# source://pdf-core//lib/pdf/core/destinations.rb#8
module PDF::Core::Destinations
  # Adds a new destination to the Dests name tree.
  #
  # @api private
  # @param name [Symbol] Destination name
  # @param reference [PDF::Core::Reference, Array, Hash] Destination
  #   definition, will be converted into a {PDF::Core::Reference} if it is
  #   not already one.
  # @return [void]
  # @see #dests
  #
  # source://pdf-core//lib/pdf/core/destinations.rb#35
  def add_dest(name, reference); end

  # builds a Dest specification that will fit the given page into the
  # viewport.
  #
  # @api private
  # @param dest_page [PDF::Core::Page]
  # @return [Array(PDF::Core::Reference, :Fit)] a Dest specification for a page fitting
  #   viewport
  #
  # source://pdf-core//lib/pdf/core/destinations.rb#59
  def dest_fit(dest_page = T.unsafe(nil)); end

  # Builds a Dest specification that will fit the given page's bounding box
  # into the viewport.
  #
  # @api private
  # @param dest_page [PDF::Core::Page]
  # @return [Array(PDF::Core::Reference, :FitB)] a Dest specification for a page fitting
  #   bounding box into viewport
  #
  # source://pdf-core//lib/pdf/core/destinations.rb#106
  def dest_fit_bounds(dest_page = T.unsafe(nil)); end

  # Same as {#dest_fit_horizontally}, but works on the page's bounding box
  # instead of the entire page.
  #
  # @api private
  # @param top [Numeric]
  # @param dest_page [PDF::Core::Page]
  # @return [Array(PDF::Core::Reference, :FitBH, Numeric)] a Dest specification for a page
  #   bounding box fitting horizontally at a given top coordinate
  #
  # source://pdf-core//lib/pdf/core/destinations.rb#117
  def dest_fit_bounds_horizontally(top, dest_page = T.unsafe(nil)); end

  # Same as {#dest_fit_vertically}, but works on the page's bounding box
  # instead of the entire page.
  #
  # @api private
  # @param left [Numeric]
  # @param dest_page [PDF::Core::Page]
  # @return [Array(PDF::Core::Reference, :FitBV, Numeric)] a Dest specification for a page
  #   bounding box fitting vertically at a given top coordinate
  #
  # source://pdf-core//lib/pdf/core/destinations.rb#128
  def dest_fit_bounds_vertically(left, dest_page = T.unsafe(nil)); end

  # Builds a Dest specification that will fit the given page horizontally
  # into the viewport, aligned vertically at the given top coordinate.
  #
  # @api private
  # @param top [Numeric]
  # @param dest_page [PDF::Core::Page]
  # @return [Array(PDF::Core::Reference, :FitH, Numeric)] a Dest specification for a page
  #   content fitting horizontally at a given top coordinate
  #
  # source://pdf-core//lib/pdf/core/destinations.rb#70
  def dest_fit_horizontally(top, dest_page = T.unsafe(nil)); end

  # Builds a Dest specification that will fit the given rectangle into the
  # viewport, for the given page.
  #
  # @api private
  # @param left [Numeric]
  # @param bottom [Numeric]
  # @param right [Numeric]
  # @param top [Numeric]
  # @param dest_page [PDF::Core::Page]
  # @return [Array(Hash, :FitR, Numeric, Numeric, Numeric, Numeric)] a Dest specification for a page fitting the given rectangle in the
  #   viewport
  #
  # source://pdf-core//lib/pdf/core/destinations.rb#96
  def dest_fit_rect(left, bottom, right, top, dest_page = T.unsafe(nil)); end

  # Build a Dest specification that will fit the given page vertically
  # into the viewport, aligned horizontally at the given left coordinate.
  #
  # @api private
  # @param left [Numeric]
  # @param dest_page [PDF::Core::Page]
  # @return [Array(Hash, :FitV, Numeric)] a Dest specification for a page
  #   content fitting vertically at a given left coordinate
  #
  # source://pdf-core//lib/pdf/core/destinations.rb#81
  def dest_fit_vertically(left, dest_page = T.unsafe(nil)); end

  # Builds a Dest specification for a specific location (and optional zoom
  # level).
  #
  # @api private
  # @param left [Numeric]
  # @param top [Numeric]
  # @param zoom [Numeric]
  # @param dest_page [PDF::Core::Page]
  # @return [Array(PDF::Core::Reference, :XYZ, Numeric, Numeric, [Numeric, null])] a Dest
  #   specification for a specific location
  #
  # source://pdf-core//lib/pdf/core/destinations.rb#49
  def dest_xyz(left, top, zoom = T.unsafe(nil), dest_page = T.unsafe(nil)); end

  # The `:Dests` name tree in the Name dictionary. This name tree is used to
  # store named destinations (PDF 1.7 spec 8.2.1). (For more on name trees,
  # see section 3.8.5 in the PDF 1.7 spec.)
  #
  # @api private
  # @return [PDF::Core::Reference<PDF::Core::NameTree::Node>]
  # @see Prawn::Document::Internal#names
  #
  # source://pdf-core//lib/pdf/core/destinations.rb#21
  def dests; end
end

# The maximum number of children to fit into a single node in the Dests
# tree.
#
# @api private
# @private
#
# source://pdf-core//lib/pdf/core/destinations.rb#13
PDF::Core::Destinations::NAME_TREE_CHILDREN_LIMIT = T.let(T.unsafe(nil), Integer)

# Low-level PDF document representation mostly for keeping intermediate
# state while document is being constructed.
#
# @api private
#
# source://pdf-core//lib/pdf/core/document_state.rb#9
class PDF::Core::DocumentState
  # @api private
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash<Symbol, any>]
  # @return [DocumentState] a new instance of DocumentState
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#20
  def initialize(options); end

  # Executes before render callbacks
  #
  # @api private
  # @param _doc [Prawn::Document] Unused
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#139
  def before_render_actions(_doc); end

  # Before render callbacks
  #
  # @api private
  # @return [Array<Proc>]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#82
  def before_render_callbacks; end

  # Before render callbacks
  #
  # @api private
  # @return [Array<Proc>]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#82
  def before_render_callbacks=(_arg0); end

  # Whether to compress streams
  #
  # @api private
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#67
  def compress; end

  # Whether to compress streams
  #
  # @api private
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#67
  def compress=(_arg0); end

  # Whether to encrypt document
  #
  # @api private
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#71
  def encrypt; end

  # Whether to encrypt document
  #
  # @api private
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#71
  def encrypt=(_arg0); end

  # Encryption key
  #
  # @api private
  # @return [String, nil]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#75
  def encryption_key; end

  # Encryption key
  #
  # @api private
  # @return [String, nil]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#75
  def encryption_key=(_arg0); end

  # Insert a page at the specified position.
  #
  # @api private
  # @param page [PDF::Core::Page]
  # @param page_number [Integer]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#121
  def insert_page(page, page_number); end

  # Adds Prawn metadata to document info
  #
  # @api private
  # @param options [Hash]
  # @return [Hash] Document `info` hash
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#108
  def normalize_metadata(options); end

  # Execute page creation callback if one is defined
  #
  # @api private
  # @param doc [Prawn::Document]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#131
  def on_page_create_action(doc); end

  # A block to call when a new page is created
  #
  # @api private
  # @return [Proc, nil]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#86
  def on_page_create_callback; end

  # A block to call when a new page is created
  #
  # @api private
  # @return [Proc, nil]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#86
  def on_page_create_callback=(_arg0); end

  # Current page
  #
  # @api private
  # @return [PDF::Core::Page]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#59
  def page; end

  # Current page
  #
  # @api private
  # @return [PDF::Core::Page]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#59
  def page=(_arg0); end

  # Number of pages in the document
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#146
  def page_count; end

  # Document pages
  #
  # @api private
  # @return [Array<PDF::Core::Page>]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#55
  def pages; end

  # Document pages
  #
  # @api private
  # @return [Array<PDF::Core::Page>]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#55
  def pages=(_arg0); end

  # Loads pages from object store. Only does it when there are no pages
  # loaded and there are some pages in the store.
  #
  # @api private
  # @return [0] if no pages were loaded
  # @return [Array<PDF::Core::Page>] if pages were laded
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#93
  def populate_pages_from_store(document); end

  # Renders document body to the output
  #
  # @api private
  # @param output [#<<]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#154
  def render_body(output); end

  # @api private
  # @deprecated Unused
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#78
  def skip_encoding; end

  # @api private
  # @deprecated Unused
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#78
  def skip_encoding=(_arg0); end

  # Object store
  #
  # @api private
  # @return [PDF::Core::ObjectStore]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#47
  def store; end

  # Object store
  #
  # @api private
  # @return [PDF::Core::ObjectStore]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#47
  def store=(_arg0); end

  # Document trailer dict
  #
  # @api private
  # @return [Hash]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#63
  def trailer; end

  # Document trailer dict
  #
  # @api private
  # @return [Hash]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#63
  def trailer=(_arg0); end

  # PDF version used in this document
  #
  # @api private
  # @return [Float]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#51
  def version; end

  # PDF version used in this document
  #
  # @api private
  # @return [Float]
  #
  # source://pdf-core//lib/pdf/core/document_state.rb#51
  def version=(_arg0); end
end

# Characters to escape in name objects
#
# @api private
#
# source://pdf-core//lib/pdf/core/pdf_object.rb#48
PDF::Core::ESCAPED_NAME_CHARACTERS = T.let(T.unsafe(nil), Array)

# PDF::Core-specific errors
#
# source://pdf-core//lib/pdf/core.rb#11
module PDF::Core::Errors; end

# This error occurs when a graphic state is being restored but the graphic
# state stack is empty.
#
# source://pdf-core//lib/pdf/core.rb#18
class PDF::Core::Errors::EmptyGraphicStateStack < ::StandardError; end

# This error indicates failure of {PDF::Core.pdf_object}
#
# source://pdf-core//lib/pdf/core.rb#13
class PDF::Core::Errors::FailedObjectConversion < ::StandardError; end

# This error is raised when page layout is set to anything other than
# `:portrait` or `:landscape`
#
# source://pdf-core//lib/pdf/core.rb#23
class PDF::Core::Errors::InvalidPageLayout < ::StandardError; end

# A representation of a list of filters applied to a stream.
#
# source://pdf-core//lib/pdf/core/filter_list.rb#6
class PDF::Core::FilterList
  # @return [FilterList] a new instance of FilterList
  #
  # source://pdf-core//lib/pdf/core/filter_list.rb#25
  def initialize; end

  # Appends a filter to the list
  #
  # @param filter [Symbol, Hash] a filter to append
  # @raise [NotFilter]
  # @return [self]
  #
  # source://pdf-core//lib/pdf/core/filter_list.rb#34
  def <<(filter); end

  # Parameters of filters
  #
  # @return [Array<[Hash, nil]>]
  #
  # source://pdf-core//lib/pdf/core/filter_list.rb#69
  def decode_params; end

  # Iterates over filters
  #
  # @return [Array<Array<(Symbol, [Hash, nil])>>] normalized filter list
  # @yield [(name, decode_params)] an array of filter name and decode
  #   parameters
  # @yieldparam name [Symbol] filter name
  # @yieldparam decode_params [Hash, nil] decode params
  #
  # source://pdf-core//lib/pdf/core/filter_list.rb#87
  def each(&block); end

  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/filter_list.rb#76
  def inspect; end

  # Names of filters in the list
  #
  # @return [Array<Symbol>]
  #
  # source://pdf-core//lib/pdf/core/filter_list.rb#60
  def names; end

  # A normalized representation of the filter list
  #
  # @return [Array<Array<(Symbol, [Hash, nil])>>]
  #
  # source://pdf-core//lib/pdf/core/filter_list.rb#52
  def normalized; end

  # A normalized representation of the filter list
  #
  # @return [Array<Array<(Symbol, [Hash, nil])>>]
  #
  # source://pdf-core//lib/pdf/core/filter_list.rb#52
  def to_a; end
end

# An exception one can expect when adding something to filter list that
# can not be interpreted as a filter.
#
# source://pdf-core//lib/pdf/core/filter_list.rb#9
class PDF::Core::FilterList::NotFilter < ::StandardError
  # @return [NotFilter] a new instance of NotFilter
  #
  # source://pdf-core//lib/pdf/core/filter_list.rb#16
  def initialize(message = T.unsafe(nil), filter: T.unsafe(nil)); end
end

# Generic default error message
#
# source://pdf-core//lib/pdf/core/filter_list.rb#11
PDF::Core::FilterList::NotFilter::DEFAULT_MESSAGE = T.let(T.unsafe(nil), String)

# Error message template with more details
#
# source://pdf-core//lib/pdf/core/filter_list.rb#14
PDF::Core::FilterList::NotFilter::MESSAGE_WITH_FILTER = T.let(T.unsafe(nil), String)

# Stream filters
#
# source://pdf-core//lib/pdf/core/filters.rb#8
module PDF::Core::Filters; end

# Data encoding using DCT (discrete cosine transform) technique based on
# the JPEG standard.
#
# Pass through stub.
#
# source://pdf-core//lib/pdf/core/filters.rb#34
module PDF::Core::Filters::DCTDecode
  class << self
    # Decode stream data
    #
    # @param stream [String] stream data
    # @param _params [nil] unused, here for API compatibility
    # @return [String]
    #
    # source://pdf-core//lib/pdf/core/filters.rb#49
    def decode(stream, _params = T.unsafe(nil)); end

    # Encode stream data
    #
    # @param stream [String] stream data
    # @param _params [nil] unused, here for API compatibility
    # @return [String]
    #
    # source://pdf-core//lib/pdf/core/filters.rb#40
    def encode(stream, _params = T.unsafe(nil)); end
  end
end

# zlib/deflate compression
#
# source://pdf-core//lib/pdf/core/filters.rb#10
module PDF::Core::Filters::FlateDecode
  class << self
    # Decode stream data
    #
    # @param stream [String] stream data
    # @param _params [nil] unused, here for API compatibility
    # @return [String]
    #
    # source://pdf-core//lib/pdf/core/filters.rb#25
    def decode(stream, _params = T.unsafe(nil)); end

    # Encode stream data
    #
    # @param stream [String] stream data
    # @param _params [nil] unused, here for API compatibility
    # @return [String]
    #
    # source://pdf-core//lib/pdf/core/filters.rb#16
    def encode(stream, _params = T.unsafe(nil)); end
  end
end

# Graphics state.
# It's a *partial* represenation of PDF graphics state. Only the parts
# implemented in Prawn are present here.
#
# NOTE: This class may be a good candidate for a copy-on-write hash.
#
# source://pdf-core//lib/pdf/core/graphics_state.rb#63
class PDF::Core::GraphicState
  # @param previous_state [GraphicState, nil]
  # @return [GraphicState] a new instance of GraphicState
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#92
  def initialize(previous_state = T.unsafe(nil)); end

  # Line cap
  #
  # @return [Symbol]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#74
  def cap_style; end

  # Line cap
  #
  # @return [Symbol]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#74
  def cap_style=(_arg0); end

  # Color space
  #
  # @return [Hash]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#66
  def color_space; end

  # Color space
  #
  # @return [Hash]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#66
  def color_space=(_arg0); end

  # Dash
  #
  # @return [Hash<[:dash, :space, :phase], [nil, Numeric]>]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#70
  def dash; end

  # Dash
  #
  # @return [Hash<[:dash, :space, :phase], [nil, Numeric]>]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#70
  def dash=(_arg0); end

  # PDF representation of dash settings
  #
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#109
  def dash_setting; end

  # Fill color
  #
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#86
  def fill_color; end

  # Fill color
  #
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#86
  def fill_color=(_arg0); end

  # Line Join
  #
  # @return [Symbol]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#78
  def join_style; end

  # Line Join
  #
  # @return [Symbol]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#78
  def join_style=(_arg0); end

  # Line width
  #
  # @return [Numberic]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#82
  def line_width; end

  # Line width
  #
  # @return [Numberic]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#82
  def line_width=(_arg0); end

  # Stroke color
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#89
  def stroke_color; end

  # Stroke color
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#89
  def stroke_color=(_arg0); end

  private

  # source://pdf-core//lib/pdf/core/graphics_state.rb#124
  def initialize_copy(other); end
end

# Graphics state saving and restoring
#
# source://pdf-core//lib/pdf/core/graphics_state.rb#6
class PDF::Core::GraphicStateStack
  # @param previous_state [GraphicState, nil]
  # @return [GraphicStateStack] a new instance of GraphicStateStack
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#11
  def initialize(previous_state = T.unsafe(nil)); end

  # Current graphic state
  #
  # @return [GraphicState]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#37
  def current_state; end

  # Tells whether there are no saved graphic states
  #
  # @return [Boolean]
  # @see #present?
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#53
  def empty?; end

  # Tells whether there are any saved graphic states
  #
  # @return [Boolean]
  # @see #empty?
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#45
  def present?; end

  # Restores previous graphic state
  #
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#26
  def restore_graphic_state; end

  # Pushes graphic state onto stack
  #
  # @param graphic_state [GraphicState, nil]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#19
  def save_graphic_state(graphic_state = T.unsafe(nil)); end

  # Graphic state stack
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#8
  def stack; end

  # Graphic state stack
  #
  # source://pdf-core//lib/pdf/core/graphics_state.rb#8
  def stack=(_arg0); end
end

# This is used to differentiate strings that must be encoded as a *literal*
# string, versus those that can be encoded in the PDF hexadecimal format.
#
# Some features of the PDF format appear to require that literal strings be
# used. One such feature is the `Dest` key of a link annotation; if a hex
# encoded string is used there, the links do not work (as tested in Mac OS
# X Preview, and Adobe Acrobat Reader).
#
# @api private
#
# source://pdf-core//lib/pdf/core/literal_string.rb#14
class PDF::Core::LiteralString < ::String; end

# Name Tree for PDF
#
# @api private
#
# source://pdf-core//lib/pdf/core/name_tree.rb#10
module PDF::Core::NameTree; end

# Name Tree node
#
# @api private
#
# source://pdf-core//lib/pdf/core/name_tree.rb#14
class PDF::Core::NameTree::Node
  # @api private
  # @param document [Prawn::Document] owning document
  # @param limit [Integer] Children limit
  # @param parent [Node] Parent node
  # @return [Node] a new instance of Node
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#36
  def initialize(document, limit, parent = T.unsafe(nil)); end

  # Insert value maintaining order and rebalancing tree if needed.
  #
  # @api private
  # @param value [Value]
  # @return [value]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#110
  def <<(value); end

  # This is a compatibility method to allow uniform comparison between
  # nodes and values.
  #
  # @api private
  # @return [Boolean]
  # @see Value#<=>
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#131
  def >=(other); end

  # Adds a value
  #
  # @api private
  # @param name [String]
  # @param value [any]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#70
  def add(name, value); end

  # Child nodes
  #
  # @api private
  # @return [Array<Node>]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#17
  def children; end

  # Returns a deep copy of this node, without copying expensive things
  # like the `ref` to `document`.
  #
  # @api private
  # @return [Node]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#153
  def deep_copy; end

  # @api private
  # @return [Prawn::Document]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#24
  def document; end

  # Tells whether there are any children nodes
  #
  # @api private
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#47
  def empty?; end

  # @api private
  # @return [String] the greatest (in lexicographic order) value name
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#98
  def greatest; end

  # Tells whether this is a leaf node. A leaf node is the one that has no
  # children or only {Value} children.
  #
  # @api private
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#62
  def leaf?; end

  # @api private
  # @return [String] the least (in lexicographic order) value name
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#89
  def least; end

  # Children number limit
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#21
  def limit; end

  # Parent node
  #
  # @api private
  # @return [Node]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#28
  def parent; end

  # Parent node
  #
  # @api private
  # @return [Node]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#28
  def parent=(_arg0); end

  # @api private
  # @return [Reference]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#31
  def ref; end

  # @api private
  # @return [Reference]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#31
  def ref=(_arg0); end

  # Number of all (including nested) children nodes
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#54
  def size; end

  # Split the tree at the node.
  #
  # @api private
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#138
  def split!; end

  # @api private
  # @return [Hash] a hash representation of this node
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#75
  def to_hash; end

  protected

  # @api private
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#162
  def split(node); end

  private

  # @api private
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#193
  def insertion_point(value); end

  # @api private
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#172
  def new_node(parent = T.unsafe(nil)); end

  # @api private
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#178
  def split_children(node, left, right); end
end

# # Name Tree value
#
# @api private
#
# source://pdf-core//lib/pdf/core/name_tree.rb#204
class PDF::Core::NameTree::Value
  include ::Comparable

  # @api private
  # @param name [String]
  # @param value [any]
  # @return [Value] a new instance of Value
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#215
  def initialize(name, value); end

  # @api private
  # @param other [Value]
  # @return [-1, 0, 1]
  # @see Object#<=>
  # @see Enumerable
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#224
  def <=>(other); end

  # @api private
  # @return [String] a string containing a human-readable representation
  #   of this value object
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#230
  def inspect; end

  # @api private
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#208
  def name; end

  # @api private
  # @return [String] a string representation of this value
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#235
  def to_s; end

  # @api private
  # @return [any]
  #
  # source://pdf-core//lib/pdf/core/name_tree.rb#211
  def value; end
end

# PDF object repository
#
# @api private
#
# source://pdf-core//lib/pdf/core/object_store.rb#8
class PDF::Core::ObjectStore
  include ::Prelude::Enumerator
  include ::Enumerable

  # @api private
  # @option opts
  # @option opts
  # @param opts [Hash]
  # @return [ObjectStore] a new instance of ObjectStore
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#19
  def initialize(opts = T.unsafe(nil)); end

  # Adds the given reference to the store and returns the reference object.
  # If the object provided is not a PDF::Core::Reference, one is created
  # from the arguments provided.
  #
  # @api private
  # @overload push
  # @overload push
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#82
  def <<(*args); end

  # Get object reference by its identifier.
  #
  # @api private
  # @param id [Integer] object identifier
  # @return [Reference]
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#111
  def [](id); end

  # Iterate over document object references.
  #
  # @api private
  # @return [void]
  # @yieldparam ref [Reference]
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#101
  def each; end

  # Document info dict reference
  #
  # @api private
  # @return [Reference]
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#45
  def info; end

  # Number of object references in the document.
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#118
  def length; end

  # Minimum PDF version
  #
  # @api private
  # @return [Float]
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#13
  def min_version; end

  # Get page reference identifier by page number.Pages are indexed starting
  # at 1 (**not 0**).
  #
  # @api private
  # @example
  #   !!!ruby
  #   object_id_for_page(1)
  #   #=> 5
  #   object_id_for_page(10)
  #   #=> 87
  #   object_id_for_page(-11)
  #   #=> 17
  # @param page [Integer] page number
  # @return [Integer] page object identifier
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#137
  def object_id_for_page(page); end

  # Number of pages in the document
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#66
  def page_count; end

  # Document pages reference
  #
  # @api private
  # @return [Reference]
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#59
  def pages; end

  # Adds the given reference to the store and returns the reference object.
  # If the object provided is not a PDF::Core::Reference, one is created
  # from the arguments provided.
  #
  # @api private
  # @overload push
  # @overload push
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#82
  def push(*args); end

  # Wrap an object into a reference.
  #
  # @api private
  # @param data [Hash, Array, Numeric, String, Symbol, Date, Time, nil] object data
  # @return [Reference]
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#38
  def ref(data); end

  # Document root dict reference
  #
  # @api private
  # @return [Reference]
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#52
  def root; end

  # Number of object references in the document.
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#118
  def size; end

  private

  # returns an array with the object IDs for all pages
  #
  # @api private
  #
  # source://pdf-core//lib/pdf/core/object_store.rb#146
  def get_page_objects(pages); end
end

# Outline item.
#
# @api private
# @see # PDF 1.7 spec, section 8.2.2 Document Outline
#
# source://pdf-core//lib/pdf/core/outline_item.rb#9
class PDF::Core::OutlineItem
  # @api private
  # @option options
  # @param title [String]
  # @param parent [PDF::Core::OutlineRoot, PDF::Core::OutlineItem]
  # @param options [Hash]
  # @return [OutlineItem] a new instance of OutlineItem
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#54
  def initialize(title, parent, options); end

  # Is this item open or closed.
  #
  # @api private
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#48
  def closed; end

  # Is this item open or closed.
  #
  # @api private
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#48
  def closed=(_arg0); end

  # The total number of its open descendants at all lower levels of the
  # outline hierarchy.
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#13
  def count; end

  # The total number of its open descendants at all lower levels of the
  # outline hierarchy.
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#13
  def count=(_arg0); end

  # The destination to be displayed when this item is activated.
  #
  # @api private
  # @return [String]
  # @return [Symbol]
  # @return [Array]
  # @see Destinations
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#44
  def dest; end

  # The destination to be displayed when this item is activated.
  #
  # @api private
  # @return [String]
  # @return [Symbol]
  # @return [Array]
  # @see Destinations
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#44
  def dest=(_arg0); end

  # The first of this item’s immediate children in the outline hierarchy.
  #
  # @api private
  # @return [Reference<PDF::Core::OutlineItem>]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#17
  def first; end

  # The first of this item’s immediate children in the outline hierarchy.
  #
  # @api private
  # @return [Reference<PDF::Core::OutlineItem>]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#17
  def first=(_arg0); end

  # The last of this item’s immediate children in the outline hierarchy.
  #
  # @api private
  # @return [Reference<PDF::Core::OutlineItem>]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#21
  def last; end

  # The last of this item’s immediate children in the outline hierarchy.
  #
  # @api private
  # @return [Reference<PDF::Core::OutlineItem>]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#21
  def last=(_arg0); end

  # The next item at this outline level.
  #
  # @api private
  # @return [Reference<PDF::Core::OutlineItem>]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#25
  def next; end

  # The next item at this outline level.
  #
  # @api private
  # @return [Reference<PDF::Core::OutlineItem>]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#25
  def next=(_arg0); end

  # The parent of this item in the outline hierarchy.
  #
  # @api private
  # @return [Reference<[PDF::Core::OutlineItem, PDF::Core::OutlineRoot]>]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#33
  def parent; end

  # The parent of this item in the outline hierarchy.
  #
  # @api private
  # @return [Reference<[PDF::Core::OutlineItem, PDF::Core::OutlineRoot]>]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#33
  def parent=(_arg0); end

  # The previous item at this outline level.
  #
  # @api private
  # @return [Reference<PDF::Core::OutlineItem>]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#29
  def prev; end

  # The previous item at this outline level.
  #
  # @api private
  # @return [Reference<PDF::Core::OutlineItem>]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#29
  def prev=(_arg0); end

  # The text to be displayed on the screen for this item.
  #
  # @api private
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#37
  def title; end

  # The text to be displayed on the screen for this item.
  #
  # @api private
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#37
  def title=(_arg0); end

  # A hash representation of this outline item.
  #
  # @api private
  # @return [Hash]
  #
  # source://pdf-core//lib/pdf/core/outline_item.rb#64
  def to_hash; end
end

# Document Outline root.
#
# @api private
# @see # PDF 1.7 spec, section 8.2.2 Document Outline
#
# source://pdf-core//lib/pdf/core/outline_root.rb#9
class PDF::Core::OutlineRoot
  # @api private
  # @return [OutlineRoot] a new instance of OutlineRoot
  #
  # source://pdf-core//lib/pdf/core/outline_root.rb#22
  def initialize; end

  # The total number of open items at all levels of the outline.
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/outline_root.rb#12
  def count; end

  # The total number of open items at all levels of the outline.
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/outline_root.rb#12
  def count=(_arg0); end

  # The first top-level item in the outline.
  #
  # @api private
  # @return [Reference]
  #
  # source://pdf-core//lib/pdf/core/outline_root.rb#16
  def first; end

  # The first top-level item in the outline.
  #
  # @api private
  # @return [Reference]
  #
  # source://pdf-core//lib/pdf/core/outline_root.rb#16
  def first=(_arg0); end

  # The last top-level item in the outline.
  #
  # @api private
  # @return [Reference]
  #
  # source://pdf-core//lib/pdf/core/outline_root.rb#20
  def last; end

  # The last top-level item in the outline.
  #
  # @api private
  # @return [Reference]
  #
  # source://pdf-core//lib/pdf/core/outline_root.rb#20
  def last=(_arg0); end

  # Hash representation of the outline root
  #
  # @api private
  # @return [Hash]
  #
  # source://pdf-core//lib/pdf/core/outline_root.rb#28
  def to_hash; end
end

# Low-level representation of a PDF page
#
# @api private
#
# source://pdf-core//lib/pdf/core/page.rb#10
class PDF::Core::Page
  # @api private
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param document [Prawn::Document]
  # @param options [Hash]
  # @return [Page] a new instance of Page
  #
  # source://pdf-core//lib/pdf/core/page.rb#84
  def initialize(document, options = T.unsafe(nil)); end

  # A rectangle, expressed in default user space units, defining the extent
  # of the page's meaningful content (including potential white space) as
  # intended by the page's creator.
  #
  # @api private
  # @return [Array<Numeric>]
  #
  # source://pdf-core//lib/pdf/core/page.rb#275
  def art_box; end

  # Page art box indents relative to page edges.
  #
  # @api private
  # @return [Hash<[:left, :right, :top, :bottom], Numeric>] Hash<[:left, :right, :top, :bottom], Numeric>
  #
  # source://pdf-core//lib/pdf/core/page.rb#14
  def art_indents; end

  # Page art box indents relative to page edges.
  #
  # @api private
  # @return [Hash<[:left, :right, :top, :bottom], Numeric>] Hash<[:left, :right, :top, :bottom], Numeric>
  #
  # source://pdf-core//lib/pdf/core/page.rb#14
  def art_indents=(_arg0); end

  # Page bleed box. A rectangle, expressed in default user space units,
  # defining the region to which the contents of the page should be clipped
  # when output in a production environment.
  #
  # @api private
  # @return [Array<Numeric>]
  #
  # source://pdf-core//lib/pdf/core/page.rb#290
  def bleed_box; end

  # Page bleed box indents.
  #
  # @api private
  # @return [Hash<[:left, :right, :top, :bottom], Numeric>] Hash<[:left, :right, :top, :bottom], Numeric>
  #
  # source://pdf-core//lib/pdf/core/page.rb#19
  def bleeds; end

  # Page bleed box indents.
  #
  # @api private
  # @return [Hash<[:left, :right, :top, :bottom], Numeric>] Hash<[:left, :right, :top, :bottom], Numeric>
  #
  # source://pdf-core//lib/pdf/core/page.rb#19
  def bleeds=(_arg0); end

  # Current content stream. Can be either the page content stream or a stamp
  # content stream.
  #
  # @api private
  # @return [PDF::Core::Reference<Hash>]
  #
  # source://pdf-core//lib/pdf/core/page.rb#182
  def content; end

  # Page content stream reference.
  #
  # @api private
  # @return [PDF::Core::Reference<Hash>]
  #
  # source://pdf-core//lib/pdf/core/page.rb#49
  def content=(_arg0); end

  # A rectangle, expressed in default user space units, defining the visible
  # region of default user space. When the page is displayed or printed, its
  # contents are to be clipped (cropped) to this rectangle and then imposed
  # on the output medium in some implementation-defined manner.
  #
  # @api private
  # @return [Array<Numeric>]
  #
  # source://pdf-core//lib/pdf/core/page.rb#306
  def crop_box; end

  # Page crop box indents.
  #
  # @api private
  # @return [Hash<[:left, :right, :top, :bottom], Numeric>] Hash<[:left, :right, :top, :bottom], Numeric>
  #
  # source://pdf-core//lib/pdf/core/page.rb#24
  def crops; end

  # Page crop box indents.
  #
  # @api private
  # @return [Hash<[:left, :right, :top, :bottom], Numeric>] Hash<[:left, :right, :top, :bottom], Numeric>
  #
  # source://pdf-core//lib/pdf/core/page.rb#24
  def crops=(_arg0); end

  # Current content dictionary. Can be either the page dictionary or a stamp
  # dictionary.
  #
  # @api private
  # @return [PDF::Core::Reference<Hash>]
  #
  # source://pdf-core//lib/pdf/core/page.rb#190
  def dictionary; end

  # Page dictionary reference.
  #
  # @api private
  # @return [PDF::Core::Reference<Hash>]
  #
  # source://pdf-core//lib/pdf/core/page.rb#54
  def dictionary=(_arg0); end

  # Page dimensions.
  #
  # @api private
  # @return [Array<Numeric>]
  #
  # source://pdf-core//lib/pdf/core/page.rb#255
  def dimensions; end

  # Owning document.
  #
  # @api private
  # @return [Prawn::Document]
  #
  # source://pdf-core//lib/pdf/core/page.rb#39
  def document; end

  # Owning document.
  #
  # @api private
  # @return [Prawn::Document]
  #
  # source://pdf-core//lib/pdf/core/page.rb#39
  def document=(_arg0); end

  # Graphic state parameter dictionary.
  #
  # @api private
  # @return [Hash]
  #
  # source://pdf-core//lib/pdf/core/page.rb#231
  def ext_gstates; end

  # Finalize page.
  #
  # @api private
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/page.rb#242
  def finalize; end

  # Fonts dictionary.
  #
  # @api private
  # @return [Hash]
  #
  # source://pdf-core//lib/pdf/core/page.rb#209
  def fonts; end

  # Current graphic state.
  #
  # @api private
  # @return [PDF::Core::GraphicState]
  #
  # source://pdf-core//lib/pdf/core/page.rb#122
  def graphic_state; end

  # Are we drawing to a stamp right now?
  #
  # @api private
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/page.rb#152
  def in_stamp_stream?; end

  # Page layout.
  #
  # @api private
  # @return [:portrait] if page is talled than wider
  # @return [:landscape] otherwise
  #
  # source://pdf-core//lib/pdf/core/page.rb#130
  def layout; end

  # Page margins.
  #
  # @api private
  # @return [Hash<[:left, :right, :top, :bottom], Numeric>] Hash<[:left, :right, :top, :bottom], Numeric>
  #
  # source://pdf-core//lib/pdf/core/page.rb#34
  def margins; end

  # Page margins.
  #
  # @api private
  # @return [Hash<[:left, :right, :top, :bottom], Numeric>] Hash<[:left, :right, :top, :bottom], Numeric>
  #
  # source://pdf-core//lib/pdf/core/page.rb#34
  def margins=(_arg0); end

  # Page resources dictionary.
  #
  # @api private
  # @return [Hash]
  #
  # source://pdf-core//lib/pdf/core/page.rb#198
  def resources; end

  # Page size.
  #
  # @api private
  # @return [Array<Numeric>] a two-element array containing width and height
  #   of the page.
  #
  # source://pdf-core//lib/pdf/core/page.rb#145
  def size; end

  # Graphic state stack.
  #
  # @api private
  # @return [GraphicStateStack]
  #
  # source://pdf-core//lib/pdf/core/page.rb#44
  def stack; end

  # Graphic state stack.
  #
  # @api private
  # @return [GraphicStateStack]
  #
  # source://pdf-core//lib/pdf/core/page.rb#44
  def stack=(_arg0); end

  # Draw to stamp.
  #
  # @api private
  # @param dictionary [PDF::Core::Reference<Hash>] stamp dictionary
  # @return [void]
  # @yield outputs to the stamp
  #
  # source://pdf-core//lib/pdf/core/page.rb#161
  def stamp_stream(dictionary); end

  # A rectangle, expressed in default user space units, defining the
  # intended dimensions of the finished page after trimming.
  #
  # @api private
  # @return [Array<Numeric>]
  #
  # source://pdf-core//lib/pdf/core/page.rb#320
  def trim_box; end

  # Page trim box indents.
  #
  # @api private
  # @return [Hash<[:left, :right, :top, :bottom], Numeric>] Hash<[:left, :right, :top, :bottom], Numeric>
  #
  # source://pdf-core//lib/pdf/core/page.rb#29
  def trims; end

  # Page trim box indents.
  #
  # @api private
  # @return [Hash<[:left, :right, :top, :bottom], Numeric>] Hash<[:left, :right, :top, :bottom], Numeric>
  #
  # source://pdf-core//lib/pdf/core/page.rb#29
  def trims=(_arg0); end

  # External objects dictionary.
  #
  # @api private
  # @return [Hash]
  #
  # source://pdf-core//lib/pdf/core/page.rb#220
  def xobjects; end

  private

  # some entries in the Page dict can be inherited from parent Pages dicts.
  #
  # Starting with the current page dict, this method will walk up the
  # inheritance chain return the first value that is found for key
  #
  #     inherited_dictionary_value(:MediaBox)
  #     => [ 0, 0, 595, 842 ]
  #
  # @api private
  #
  # source://pdf-core//lib/pdf/core/page.rb#340
  def inherited_dictionary_value(key, local_dict = T.unsafe(nil)); end
end

# A convenince constant of no indents.
#
# @api private
#
# source://pdf-core//lib/pdf/core/page.rb#57
PDF::Core::Page::ZERO_INDENTS = T.let(T.unsafe(nil), Hash)

# Dimensions pulled from PDF::Writer, rubyforge.org/projects/ruby-pdf
#
# source://pdf-core//lib/pdf/core/page_geometry.rb#12
module PDF::Core::PageGeometry; end

# Named page sizes.
#
# All of these dimensions are in PDF Points (1/72 inch).
#
# source://pdf-core//lib/pdf/core/page_geometry.rb#16
PDF::Core::PageGeometry::SIZES = T.let(T.unsafe(nil), Hash)

# PDF indirect objects
#
# @api private
#
# source://pdf-core//lib/pdf/core/reference.rb#10
class PDF::Core::Reference
  # @api private
  # @param id [Integer] Object identifier
  # @param data [any] Object data
  # @return [Reference] a new instance of Reference
  #
  # source://pdf-core//lib/pdf/core/reference.rb#42
  def initialize(id, data); end

  # Appends data to object stream
  #
  # @api private
  # @param io [String] data
  # @raise [CannotAttachStream] if object is not a dict
  # @return [io]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#69
  def <<(io); end

  # Object data
  #
  # @api private
  # @return [any]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#21
  def data; end

  # Object data
  #
  # @api private
  # @return [any]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#21
  def data=(_arg0); end

  # Creates a deep copy of this ref.
  #
  # @api private
  # @param share [Array<Symbol>] a list of dictionary entries to share
  #   between the old ref and the new
  # @return [Reference]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#89
  def deep_copy(share = T.unsafe(nil)); end

  # source://prawn/2.5.0/lib/prawn/security.rb#290
  def encrypted_object(key); end

  # Object generation
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#17
  def gen; end

  # Object generation
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#17
  def gen=(_arg0); end

  # Object identifier
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#13
  def identifier; end

  # Object identifier
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#13
  def identifier=(_arg0); end

  # Serialized PDF object
  #
  # @api private
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#52
  def object; end

  # Offset of the serialized object in the document
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#25
  def offset; end

  # Offset of the serialized object in the document
  #
  # @api private
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#25
  def offset=(_arg0); end

  # Replaces the data and stream with that of other_ref.
  #
  # @api private
  # @param other_ref [Reference]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#112
  def replace(other_ref); end

  # Object stream
  #
  # @api private
  # @return [Stream]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#29
  def stream; end

  # Object stream
  #
  # @api private
  # @return [Stream]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#29
  def stream=(_arg0); end

  # Object reference in PDF format
  #
  # @api private
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/reference.rb#80
  def to_s; end
end

# In PDF only dict object can have a stream attached. This exception
# indicates someone tried to add a stream to another kind of object.
#
# @api private
#
# source://pdf-core//lib/pdf/core/reference.rb#33
class PDF::Core::Reference::CannotAttachStream < ::StandardError
  # @api private
  # @param message [String] Error message
  # @return [CannotAttachStream] a new instance of CannotAttachStream
  #
  # source://pdf-core//lib/pdf/core/reference.rb#35
  def initialize(message = T.unsafe(nil)); end
end

# Document renderer serializes document into its binary representation.
#
# source://pdf-core//lib/pdf/core/renderer.rb#8
class PDF::Core::Renderer
  # @param state [PDF::Core::DocumentState]
  # @return [Renderer] a new instance of Renderer
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#10
  def initialize(state); end

  # Appends a raw string to the current page content.
  #
  # @example Raw line drawing example
  #   x1, y1, x2, y2 = 100, 500, 300, 550
  #
  #   pdf.add_content("#{PDF::Core.real_params([x1, y1])} m")   # move
  #   pdf.add_content("#{PDF::Core.real_params([ x2, y2 ])} l") # draw path
  #   pdf.add_content('S') # stroke
  # @param str [String]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#66
  def add_content(str); end

  # Defines a block to be called just before the document is rendered.
  #
  # @return [void]
  # @yieldparam document_state [PDF::Core::DocumentState]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#92
  def before_render(&block); end

  # Close current graphic state (restore previous) in the content stream.
  #
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#290
  def close_graphics_state; end

  # Returns true if content streams will be compressed before rendering,
  # false otherwise
  #
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#316
  def compression_enabled?; end

  # At any stage in the object tree an object can be replaced with an
  # indirect reference. To get access to the object safely, regardless
  # of if it's hidden behind a {Reference}, wrap it in `deref()`.
  #
  # @param obj [PDF::Core::Reference, any]
  # @return [any]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#51
  def deref(obj); end

  # Finalize all pages
  #
  # @api private
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#166
  def finalize_all_page_contents; end

  # Re-opens the page with the given (1-based) page number so that you can
  # draw on it.
  #
  # @param page_number [Integer]
  # @return [void]
  # @see # Prawn::Document#number_pages for a sample usage of this capability.
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#157
  def go_to_page(page_number); end

  # Graphic state stack of the current document.
  #
  # @return [PDF::Core::GraphicStateStack]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#336
  def graphic_stack; end

  # Current graphic state
  #
  # @return [PDF::Core::GraphicState]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#343
  def graphic_state; end

  # Raise the PDF version of the file we're going to generate.
  # A private method, designed for internal use when the user adds a feature
  # to their document that requires a particular version.
  #
  # @api private
  # @param min [Float]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#183
  def min_version(min); end

  # The Name dictionary for this document. It is lazily initialized, so that
  # documents that do not need a name dictionary do not incur the additional
  # overhead.
  #
  # @return [PDF::Core::Reference<Hash>]
  # @see # PDF 1.7 spec, section 3.6.3 Name Dictionary
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#77
  def names; end

  # Returns true if the Names dictionary is in use for this document.
  #
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#84
  def names?; end

  # Defines a block to be called just before a new page is started.
  #
  # @return [void]
  # @yieldparam document_state [PDF::Core::DocumentState]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#100
  def on_page_create(&block); end

  # Open (save) current graphic state in the content stream.
  #
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#283
  def open_graphics_state; end

  # Number of pages in the document.
  #
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#147
  def page_count; end

  # Creates a new Reference and adds it to the Document's object list.
  #
  # @param data [any] anything that {PDF::Core.pdf_object} can convert.
  # @return [Integer] the identifier of the reference
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#27
  def ref(data); end

  # Like {ref}, but returns the actual reference instead of its identifier.
  #
  # While you can use this to build up nested references within the object
  # tree, it is recommended to persist only identifiers, and then provide
  # helper methods to look up the actual references in the {ObjectStore} if
  # needed. If you take this approach, `Document::Snapshot` will probably
  # work with your extension.
  #
  # @param data [any] anything that {PDF::Core.pdf_object} can convert.
  # @return [PDF::Core::Reference]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#41
  def ref!(data); end

  # Renders the PDF document to string.
  # Pass an open file descriptor to render to file.
  #
  # @param output [#<<]
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#192
  def render(output = T.unsafe(nil)); end

  # Write out the PDF Body, as per spec 3.4.2
  #
  # @api private
  # @param output [(#<<, #size)]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#240
  def render_body(output); end

  # Renders the PDF document to file.
  #
  # @example
  #   pdf.render_file 'foo.pdf'
  # @param filename [String, #to_path, Integer]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#216
  def render_file(filename); end

  # Write out the PDF Header, as per spec 3.4.1
  #
  # @api private
  # @param output [#<<]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#225
  def render_header(output); end

  # Write out the PDF Trailer, as per spec 3.4.4
  #
  # @api private
  # @param output [#<<]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#265
  def render_trailer(output); end

  # Write out the PDF Cross Reference Table, as per spec 3.4.3
  #
  # @api private
  # @param output [(#<<, #size)]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#249
  def render_xref(output); end

  # Pops the last saved graphics state off the graphics state stack and
  # restores the state to those values
  #
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#324
  def restore_graphics_state; end

  # Save surrent graphic state both in the graphic state stack and in the
  # page content stream.
  #
  # If a block is given graphic state is automatically restored after the
  # block execution.
  #
  # @param graphic_state [PDF::Core::GraphicState]
  # @return [void]
  # @yield
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#303
  def save_graphics_state(graphic_state = T.unsafe(nil)); end

  # Create a new page and set it current.
  #
  # @option options
  # @option options
  # @param options [Hash]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#110
  def start_new_page(options = T.unsafe(nil)); end

  # Document state
  #
  # @return [PDF::Core::DocumentState]
  #
  # source://pdf-core//lib/pdf/core/renderer.rb#21
  def state; end
end

# How to escape special characters in literal strings
#
# @api private
#
# source://pdf-core//lib/pdf/core/pdf_object.rb#52
PDF::Core::STRING_ESCAPE_MAP = T.let(T.unsafe(nil), Hash)

# PDF Stream object
#
# source://pdf-core//lib/pdf/core/stream.rb#12
class PDF::Core::Stream
  # @param io [String] must be mutable
  # @return [Stream] a new instance of Stream
  #
  # source://pdf-core//lib/pdf/core/stream.rb#18
  def initialize(io = T.unsafe(nil)); end

  # Append data to stream.
  #
  # @param io [String]
  # @return [self]
  #
  # source://pdf-core//lib/pdf/core/stream.rb#28
  def <<(io); end

  # Set up stream to be compressed when serialized.
  #
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/stream.rb#37
  def compress!; end

  # Is this stream compressed?
  #
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/stream.rb#47
  def compressed?; end

  # Stream dictionary
  #
  # @return [Hash]
  #
  # source://pdf-core//lib/pdf/core/stream.rb#99
  def data; end

  # Is there any data in this stream?
  #
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/stream.rb#54
  def empty?; end

  # source://prawn/2.5.0/lib/prawn/security.rb#270
  def encrypted_object(key, id, gen); end

  # Stream data with filters applied.
  #
  # @return [Stream]
  #
  # source://pdf-core//lib/pdf/core/stream.rb#61
  def filtered_stream; end

  # Stream filters
  #
  # @return [PDF::Core::FilterList]
  #
  # source://pdf-core//lib/pdf/core/stream.rb#15
  def filters; end

  # String representation of the stream for debugging purposes.
  #
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/stream.rb#123
  def inspect; end

  # Size of data in the stream
  #
  # @return [Integer]
  #
  # source://pdf-core//lib/pdf/core/stream.rb#81
  def length; end

  # Serialized stream data
  #
  # @return [String]
  #
  # source://pdf-core//lib/pdf/core/stream.rb#88
  def object; end
end

# Low-level text rendering.
#
# source://pdf-core//lib/pdf/core/text.rb#12
module PDF::Core::Text
  # Add a text object to content stream.
  #
  # @option options
  # @option options
  # @param text [String]
  # @param x [Numeric] horizontal position of the text origin on the page
  # @param y [Numeric] vertical position of the text origin on the page
  # @param options [Hash]
  #
  # source://pdf-core//lib/pdf/core/text.rb#332
  def add_text_content(text, x, y, options); end

  # Increases or decreases the space between characters.
  # For horizontal text, a positive value will increase the space.
  # For vertical text, a positive value will decrease the space.
  #
  # Call with no arguments to retrieve current character spacing.
  #
  # @param amount [Numeric]
  # @return [Numeric] if called without amount
  # @return [void] otherwise
  # @yield Temporarily set character spacing
  #
  # source://pdf-core//lib/pdf/core/text.rb#254
  def character_spacing(amount = T.unsafe(nil), &block); end

  # Call with a boolean to set the document-wide kerning setting. This can
  # be overridden using the :kerning text option when drawing text or a text
  # box.
  #
  # @example
  #   pdf.default_kerning = false
  #   pdf.text('hello world')                # text is not kerned
  #   pdf.text('hello world', kerning: true) # text is kerned
  # @param value [Boolean]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/text.rb#84
  def default_kerning(value); end

  # Call with a boolean to set the document-wide kerning setting. This can
  # be overridden using the :kerning text option when drawing text or a text
  # box.
  #
  # @example
  #   pdf.default_kerning = false
  #   pdf.text('hello world')                # text is not kerned
  #   pdf.text('hello world', kerning: true) # text is kerned
  # @param value [Boolean]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/text.rb#84
  def default_kerning=(value); end

  # Retrieve the current default kerning setting.
  #
  # Defaults to `true`.
  #
  # @return [Boolean]
  #
  # source://pdf-core//lib/pdf/core/text.rb#67
  def default_kerning?; end

  # Call with no argument to retrieve the current default leading.
  #
  # Call with a number to set the document-wide text leading. This can be
  # overridden using the :leading text option when drawing text or a text
  # box.
  #
  # Defaults to 0.
  #
  # @example
  #   pdf.default_leading = 7
  #   pdf.text('hello world')             # a leading of 7 is used
  #   pdf.text('hello world', leading: 0) # a leading of 0 is used
  # @param number [Numeric]
  # @return [Numeric]
  #
  # source://pdf-core//lib/pdf/core/text.rb#105
  def default_leading(number = T.unsafe(nil)); end

  # Call with no argument to retrieve the current default leading.
  #
  # Call with a number to set the document-wide text leading. This can be
  # overridden using the :leading text option when drawing text or a text
  # box.
  #
  # Defaults to 0.
  #
  # @example
  #   pdf.default_leading = 7
  #   pdf.text('hello world')             # a leading of 7 is used
  #   pdf.text('hello world', leading: 0) # a leading of 0 is used
  # @param number [Numeric]
  # @return [Numeric]
  #
  # source://pdf-core//lib/pdf/core/text.rb#105
  def default_leading=(number = T.unsafe(nil)); end

  # Call with no argument to retrieve the current fallback fonts.
  #
  # Call with an array of font names. Each name must be the name of an AFM
  # font or the name that was used to register a family of TTF fonts (see
  # Prawn::Document#font_families). If present, then each glyph will be
  # rendered using the first font that includes the glyph, starting with the
  # current font and then moving through :fallback_fonts from left to right.
  #
  # Call with an empty array to turn off fallback fonts.
  #
  # Side effects:
  #
  # * Increased overhead when fallback fonts are declared as each glyph is
  #   checked to see whether it exists in the current font
  #
  # @example
  #   file = "#{Prawn::DATADIR}/fonts/gkai00mp.ttf"
  #   font_families['Kai'] = {
  #   normal: { file: file, font: 'Kai' }
  #   }
  #   file = "#{Prawn::DATADIR}/fonts/Action Man.dfont"
  #   font_families['Action Man'] = {
  #   normal: { file: file, font: 'ActionMan' },
  #   }
  #   fallback_fonts ['Times-Roman', 'Kai']
  #   font 'Action Man'
  #   text 'hello ƒ 你好'
  #   # hello prints in Action Man
  #   # ƒ prints in Times-Roman
  #   # 你好 prints in Kai
  #
  #   fallback_fonts [] # clears document-wide fallback fonts
  # @param fallback_fonts [Array<String>]
  # @return [Array<String>]
  #
  # source://pdf-core//lib/pdf/core/text.rb#184
  def fallback_fonts(fallback_fonts = T.unsafe(nil)); end

  # Call with no argument to retrieve the current fallback fonts.
  #
  # Call with an array of font names. Each name must be the name of an AFM
  # font or the name that was used to register a family of TTF fonts (see
  # Prawn::Document#font_families). If present, then each glyph will be
  # rendered using the first font that includes the glyph, starting with the
  # current font and then moving through :fallback_fonts from left to right.
  #
  # Call with an empty array to turn off fallback fonts.
  #
  # Side effects:
  #
  # * Increased overhead when fallback fonts are declared as each glyph is
  #   checked to see whether it exists in the current font
  #
  # @example
  #   file = "#{Prawn::DATADIR}/fonts/gkai00mp.ttf"
  #   font_families['Kai'] = {
  #   normal: { file: file, font: 'Kai' }
  #   }
  #   file = "#{Prawn::DATADIR}/fonts/Action Man.dfont"
  #   font_families['Action Man'] = {
  #   normal: { file: file, font: 'ActionMan' },
  #   }
  #   fallback_fonts ['Times-Roman', 'Kai']
  #   font 'Action Man'
  #   text 'hello ƒ 你好'
  #   # hello prints in Action Man
  #   # ƒ prints in Times-Roman
  #   # 你好 prints in Kai
  #
  #   fallback_fonts [] # clears document-wide fallback fonts
  # @param fallback_fonts [Array<String>]
  # @return [Array<String>]
  #
  # source://pdf-core//lib/pdf/core/text.rb#184
  def fallback_fonts=(fallback_fonts = T.unsafe(nil)); end

  # Forget previously set text rendering mode.
  #
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/text.rb#240
  def forget_text_rendering_mode!; end

  # Set the horizontal scaling.
  #
  # @param amount [Numeric] the percentage of the normal width.
  # @return [Numeric] if called with no arguments
  # @return [void] otherwise
  # @yield Temporarili set text scaling
  #
  # source://pdf-core//lib/pdf/core/text.rb#292
  def horizontal_text_scaling(amount = T.unsafe(nil), &block); end

  # Low level call to set the current font style and extract text options
  # from an options hash. Should be called from within a save_font block
  #
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @return [void]
  #
  # source://pdf-core//lib/pdf/core/text.rb#47
  def process_text_options(options); end

  # Move the baseline up or down from its default location.
  # Positive values move the baseline up, negative values move it down, and
  # a zero value resets the baseline to its default location.
  #
  # @param amount [Numeric]
  # @return [Numeric] if called with no arguments
  # @return [void] otherwise
  # @yield Temporarily set text rise
  #
  # source://pdf-core//lib/pdf/core/text.rb#312
  def rise(amount = T.unsafe(nil), &block); end

  # @deprecated
  #
  # source://pdf-core//lib/pdf/core/text.rb#37
  def skip_encoding; end

  # Call with no argument to retrieve the current text direction.
  #
  # Call with a symbol to set the document-wide text direction. This can be
  # overridden using the :direction text option when drawing text or a text
  # box.
  #
  # Valid directions are:
  #
  # * `:ltr` -- left-to-right (default)
  # * `:rtl` -- right-to-left
  #
  # Side effects:
  #
  # * When printing left-to-right, the default text alignment is `:left`
  # * When printing right-to-left, the default text alignment is `:right`
  #
  # @example
  #   pdf.text_direction = :rtl
  #   pdf.text('hello world')                  # prints 'dlrow olleh'
  #   pdf.text('hello world', direction: :ltr) # prints 'hello world'
  # @param direction [:ltr, :rtl]
  # @return [:ltr]
  # @return [:rtl]
  #
  # source://pdf-core//lib/pdf/core/text.rb#139
  def text_direction(direction = T.unsafe(nil)); end

  # Call with no argument to retrieve the current text direction.
  #
  # Call with a symbol to set the document-wide text direction. This can be
  # overridden using the :direction text option when drawing text or a text
  # box.
  #
  # Valid directions are:
  #
  # * `:ltr` -- left-to-right (default)
  # * `:rtl` -- right-to-left
  #
  # Side effects:
  #
  # * When printing left-to-right, the default text alignment is `:left`
  # * When printing right-to-left, the default text alignment is `:right`
  #
  # @example
  #   pdf.text_direction = :rtl
  #   pdf.text('hello world')                  # prints 'dlrow olleh'
  #   pdf.text('hello world', direction: :ltr) # prints 'hello world'
  # @param direction [:ltr, :rtl]
  # @return [:ltr]
  # @return [:rtl]
  #
  # source://pdf-core//lib/pdf/core/text.rb#139
  def text_direction=(direction = T.unsafe(nil)); end

  # Call with no argument to retrieve the current text rendering mode.
  #
  # Call with a symbol and block to temporarily change the current
  # text rendering mode.
  #
  # Valid modes are:
  #
  # * `:fill`             - fill text (default)
  # * `:stroke`           - stroke text
  # * `:fill_stroke`      - fill, then stroke text
  # * `:invisible`        - invisible text
  # * `:fill_clip`        - fill text then add to path for clipping
  # * `:stroke_clip`      - stroke text then add to path for clipping
  # * `:fill_stroke_clip` - fill then stroke text, then add to path for
  #                         clipping
  # * `:clip`             - add text to path for clipping
  #
  # @example
  #   pdf.text_rendering_mode(:stroke) do
  #   pdf.text('Outlined Text')
  #   end
  # @param mode [Symbol]
  # @return [Symbol] if called withouth mode
  # @return [void] otherwise
  # @yield Temporariliy set text rendering mode
  #
  # source://pdf-core//lib/pdf/core/text.rb#220
  def text_rendering_mode(mode = T.unsafe(nil), &block); end

  # Increases or decreases the space between words.
  # For horizontal text, a positive value will increase the space.
  # For vertical text, a positive value will decrease the space.
  #
  # Call with no arguments to retrieve current word spacing.
  #
  # @param amount [Numeric]
  # @return [Numeric] if called without amount
  # @return [void] otherwise
  # @yield Temporarily set word spacing
  #
  # source://pdf-core//lib/pdf/core/text.rb#276
  def word_spacing(amount = T.unsafe(nil), &block); end

  private

  # source://pdf-core//lib/pdf/core/text.rb#398
  def update_character_spacing_state; end

  # source://pdf-core//lib/pdf/core/text.rb#430
  def update_horizontal_text_scaling_state; end

  # source://pdf-core//lib/pdf/core/text.rb#446
  def update_rise_state; end

  # source://pdf-core//lib/pdf/core/text.rb#382
  def update_text_rendering_mode_state; end

  # source://pdf-core//lib/pdf/core/text.rb#414
  def update_word_spacing_state; end

  # source://pdf-core//lib/pdf/core/text.rb#386
  def wrap_and_restore_character_spacing(block_value); end

  # source://pdf-core//lib/pdf/core/text.rb#418
  def wrap_and_restore_horizontal_text_scaling(block_value); end

  # source://pdf-core//lib/pdf/core/text.rb#434
  def wrap_and_restore_rise(block_value); end

  # source://pdf-core//lib/pdf/core/text.rb#370
  def wrap_and_restore_text_rendering_mode(block_value); end

  # source://pdf-core//lib/pdf/core/text.rb#402
  def wrap_and_restore_word_spacing(block_value); end
end

# Sygnals that a font doesn't have a name.
#
# source://pdf-core//lib/pdf/core/text.rb#30
class PDF::Core::Text::BadFontFamily < ::StandardError
  # @return [BadFontFamily] a new instance of BadFontFamily
  #
  # source://pdf-core//lib/pdf/core/text.rb#31
  def initialize(message = T.unsafe(nil)); end
end

# text rendering modes
#
# source://pdf-core//lib/pdf/core/text.rb#18
PDF::Core::Text::MODES = T.let(T.unsafe(nil), Hash)

# Valid options of text drawing.
# These should be used as a base. Extensions may build on this list
#
# source://pdf-core//lib/pdf/core/text.rb#15
PDF::Core::Text::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# Utility methods
#
# source://pdf-core//lib/pdf/core/utils.rb#6
module PDF::Core::Utils
  private

  # Deep clone an object.
  # It uses marshal-demarshal trick. Since it's supposed to be use only on
  # objects that can be serialized into PDF it shouldn't have any issues
  # with objects that can not be marshaled.
  #
  # @param object [any]
  # @return [any]
  #
  # source://pdf-core//lib/pdf/core/utils.rb#16
  def deep_clone(object); end

  class << self
    # Deep clone an object.
    # It uses marshal-demarshal trick. Since it's supposed to be use only on
    # objects that can be serialized into PDF it shouldn't have any issues
    # with objects that can not be marshaled.
    #
    # @param object [any]
    # @return [any]
    #
    # source://pdf-core//lib/pdf/core/utils.rb#16
    def deep_clone(object); end
  end
end

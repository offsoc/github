{"version":3,"file":"chunk-app_assets_modules_github_emoji-picker-element_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/github/emoji-picker-element.ts"],"sourcesContent":["import {controller, target} from '@github/catalyst'\n\n@controller\nexport class EmojiPickerElement extends HTMLElement {\n  @target emojiList!: HTMLElement\n  @target noResults!: HTMLElement\n  @target resultsHeader!: HTMLElement\n  @target filterInput!: HTMLInputElement | null\n\n  open() {\n    this.hidden = false\n    this.querySelector<HTMLElement>('button[aria-selected=\"true\"]')?.focus()\n  }\n\n  close() {\n    this.hidden = true\n  }\n\n  connectedCallback() {\n    this.addEventListener('keydown', navigateEmojiInPicker)\n    document.addEventListener('click', handleNonEmojiPickerClick)\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener('keydown', navigateEmojiInPicker)\n    document.removeEventListener('click', handleNonEmojiPickerClick)\n  }\n\n  reset() {\n    const originalEmojiTabButton = this.querySelector('.js-original-emoji-category')\n    const originalEmojiTab = this.querySelector<HTMLElement>('.js-original-emoji-category-tab')!\n    const selectedEmojiTabButton = this.querySelector('[role=\"tablist\"] [role=\"tab\"][aria-selected=\"true\"]')\n    const selectedEmojiTab = getActiveEmojiTab(this)\n\n    const originallySelectedEmoji = this.querySelector('.js-originally-selected-emoji')\n    if (originallySelectedEmoji) {\n      const tempSelectedEmoji = this.querySelector('.selected-emoji')\n      if (tempSelectedEmoji) {\n        tempSelectedEmoji.classList.remove('selected-emoji')\n      }\n\n      originallySelectedEmoji.classList.add('selected-emoji')\n    }\n\n    selectedEmojiTabButton?.removeAttribute('aria-selected')\n    originalEmojiTabButton?.setAttribute('aria-selected', 'true')\n\n    selectedEmojiTab.hidden = true\n    originalEmojiTab.hidden = false\n\n    this.clear()\n  }\n\n  clear() {\n    if (this.filterInput) {\n      this.filterInput.value = ''\n    }\n\n    this.emojiList.setAttribute('value', '')\n  }\n\n  filter(event: Event) {\n    if (event instanceof InputEvent && event.isComposing) {\n      return\n    }\n\n    const input = event.currentTarget as HTMLInputElement\n\n    this.emojiList.setAttribute('value', input.value)\n\n    const selectedEmojiTabButton = this.querySelector('[role=\"tablist\"] [role=\"tab\"][aria-selected=\"true\"]')!\n    if (!selectedEmojiTabButton.hasAttribute('data-emoji-picker-filter-tab-button')) {\n      selectedEmojiTabButton.classList.add('emoji-picker-prior-selected-tab-button')\n    }\n\n    const priorSelectedTabButton = this.querySelector<HTMLButtonElement>('.emoji-picker-prior-selected-tab-button')\n    if (priorSelectedTabButton) {\n      priorSelectedTabButton.click()\n    }\n  }\n\n  /* eslint-disable-next-line custom-elements/no-method-prefixed-with-on */\n  onFuzzyListSorted(event: CustomEvent) {\n    const hasResults = Number(event.detail) > 0\n\n    this.noResults.hidden = hasResults\n    this.emojiList.hidden = !hasResults\n    this.resultsHeader.hidden = !hasResults\n  }\n\n  /* eslint-disable-next-line custom-elements/no-method-prefixed-with-on */\n  onEmojiTabClick() {\n    this.clear()\n    setTimeout(() => this.filterInput?.focus(), 0)\n  }\n}\n\nfunction getActiveEmojiTab(picker: Element): HTMLElement {\n  const tabButtons = picker.querySelectorAll('[role=\"tablist\"] [role=\"tab\"]')\n  const activeTabButton = picker.querySelector<HTMLElement>('[role=\"tablist\"] [role=\"tab\"][aria-selected=\"true\"]')!\n  const tabPanels = picker.querySelectorAll<HTMLElement>('[role=\"tabpanel\"]')\n  const index = Array.from(tabButtons).indexOf(activeTabButton)\n\n  return tabPanels[index]!\n}\n\n// Use positional values to infer the current column count of the emoji picker.\n// This allows the grid to be resized through css and have this code still work\n// correctly.\nfunction getEmojiColCount(allEmoji: Element[]): number {\n  let rect: ClientRect | DOMRect | void\n  let count = 0\n  const firstEmoji = allEmoji[0]!\n  const firstRowTop = firstEmoji.getBoundingClientRect().top\n\n  for (const emoji of allEmoji) {\n    rect = emoji.getBoundingClientRect()\n\n    if (firstRowTop < rect.top) {\n      break\n    }\n\n    count += 1\n  }\n\n  return count\n}\n\ntype EmojiGrid = Element[][]\n\n// Create a multi-dimensional array from a single array of emoji elements.\nfunction createEmojiGrid(elementArr: Element[], numCols: number): EmojiGrid {\n  const results: EmojiGrid = [[]]\n  let cursor = 0\n\n  for (let i = 0; i < elementArr.length; i++) {\n    const element = elementArr[i]!\n    if (i > 0 && i % numCols === 0) {\n      cursor += 1\n      results.push([])\n    }\n\n    results[cursor]!.push(element)\n  }\n\n  return results\n}\n\ntype GridPosition = {\n  row: number\n  col: number\n}\n\nfunction getEmojiGridPosition(grid: EmojiGrid, element: Element): GridPosition {\n  let rowPos = 0\n  let colPos = 0\n  let row: Element[] = []\n  let index = -1\n\n  for (let i = 0; i < grid.length; i++) {\n    row = grid[i]!\n    index = row.indexOf(element)\n\n    if (index > -1) {\n      colPos = index\n      break\n    }\n\n    rowPos += 1\n  }\n\n  return {row: rowPos, col: colPos}\n}\n\nfunction selectEmoji(picker: HTMLElement, key: 'ArrowRight' | 'ArrowLeft' | 'ArrowDown' | 'ArrowUp') {\n  const selectedEmojiTab = getActiveEmojiTab(picker)\n  const allEmoji = Array.from(selectedEmojiTab.querySelectorAll('.js-emoji-button'))\n  const currentEmoji = selectedEmojiTab.querySelector('.selected-emoji.js-emoji-button')\n  const colCount = getEmojiColCount(allEmoji)\n  const grid = createEmojiGrid(allEmoji, colCount)\n  let row = 0\n  let col = 0\n\n  if (currentEmoji) {\n    const currentPos = getEmojiGridPosition(grid, currentEmoji)\n    row = currentPos.row\n    col = currentPos.col\n\n    currentEmoji.classList.remove('selected-emoji')\n\n    switch (key) {\n      case 'ArrowRight':\n        col += 1\n        break\n      case 'ArrowDown':\n        row += 1\n        break\n      case 'ArrowLeft':\n        col -= 1\n        break\n      case 'ArrowUp':\n        row -= 1\n        break\n    }\n  }\n  const lastGridItem = grid.length - 1\n  const columnOnLastLineDoesntExist = col > grid[lastGridItem]!.length - 1\n  const rowIsLastRow = row === lastGridItem\n  const isDownArrow = key === 'ArrowDown'\n\n  if (row < 0) {\n    row = lastGridItem\n\n    // Skip the bottom row when bottom row is only partially full of emoji and\n    // the cursor lands on an empty spot.\n    if (columnOnLastLineDoesntExist) {\n      row -= 1\n    }\n  } else if (row > lastGridItem || (rowIsLastRow && columnOnLastLineDoesntExist && isDownArrow)) {\n    row = 0\n  }\n\n  const currentColLength = grid[row]!.length - 1\n\n  if (col < 0) {\n    col = currentColLength\n  } else if (col > currentColLength) {\n    col = 0\n  }\n\n  const selectedEmoji = grid[row]![col] as HTMLElement\n  selectedEmoji.classList.add('selected-emoji')\n  selectedEmoji.focus()\n}\n\nfunction navigateEmojiInPicker(event: KeyboardEvent) {\n  // TODO: Refactor to use data-hotkey\n  /* eslint eslint-comments/no-use: off */\n  /* eslint-disable @github-ui/ui-commands/no-manual-shortcut-logic */\n  if (!(event.target instanceof HTMLElement)) {\n    return\n  }\n\n  const picker = event.target.closest('.js-emoji-picker')\n  if (!picker || !(picker instanceof HTMLElement) || picker.hidden) {\n    return\n  }\n\n  if (event.target.getAttribute('role') === 'tab' || event.target.getAttribute('type') === 'text') {\n    return\n  }\n\n  switch (event.key) {\n    case 'ArrowRight':\n    case 'ArrowLeft':\n    case 'ArrowUp':\n    case 'ArrowDown':\n      event.preventDefault()\n      selectEmoji(picker, event.key)\n      break\n  }\n  /* eslint-enable @github-ui/ui-commands/no-manual-shortcut-logic */\n}\n\nfunction handleNonEmojiPickerClick(event: Event) {\n  let el = event.target as Node\n  if (!('closest' in el)) {\n    el = el.parentNode!\n  }\n\n  const emojiPicker = (el as Element).closest<EmojiPickerElement>('emoji-picker')\n\n  for (const picker of document.querySelectorAll<EmojiPickerElement>('emoji-picker')) {\n    if (picker !== emojiPicker) {\n      picker.close()\n    }\n  }\n}\n"],"names":["EmojiPickerElement","HTMLElement","open","hidden","querySelector","focus","close","connectedCallback","addEventListener","navigateEmojiInPicker","document","handleNonEmojiPickerClick","disconnectedCallback","removeEventListener","reset","originalEmojiTabButton","originalEmojiTab","selectedEmojiTabButton","selectedEmojiTab","getActiveEmojiTab","originallySelectedEmoji","tempSelectedEmoji","classList","remove","add","removeAttribute","setAttribute","clear","filterInput","value","emojiList","filter","event","InputEvent","isComposing","input","currentTarget","hasAttribute","priorSelectedTabButton","click","onFuzzyListSorted","hasResults","Number","detail","noResults","resultsHeader","onEmojiTabClick","setTimeout","picker","tabButtons","querySelectorAll","activeTabButton","tabPanels","Array","from","indexOf","target","closest","getAttribute","key","preventDefault","selectEmoji","allEmoji","currentEmoji","colCount","getEmojiColCount","count","firstRowTop","firstEmoji","getBoundingClientRect","top","emoji","rect","grid","createEmojiGrid","elementArr","numCols","results","cursor","i","length","element","push","row","col","currentPos","getEmojiGridPosition","rowPos","colPos","index","lastGridItem","columnOnLastLineDoesntExist","rowIsLastRow","currentColLength","selectedEmoji","el","parentNode","emojiPicker","controller"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pyu-ruby-sasl` gem.
# Please instead update this file by running `bin/tapioca gem pyu-ruby-sasl`.

# RFC 4422:
# http://tools.ietf.org/html/rfc4422
#
# source://pyu-ruby-sasl//lib/sasl/base.rb#4
module SASL
  class << self
    # source://pyu-ruby-sasl//lib/sasl/base.rb#41
    def new(mechanisms, preferences); end

    # Create a SASL Mechanism for the named mechanism
    #
    # mechanism:: [String] mechanism name
    #
    # source://pyu-ruby-sasl//lib/sasl/base.rb#62
    def new_mechanism(mechanism, preferences); end
  end
end

# source://pyu-ruby-sasl//lib/sasl/base.rb#77
class SASL::AbstractMethod < ::Exception
  # source://pyu-ruby-sasl//lib/sasl/base.rb#78
  def to_s; end
end

# SASL ANONYMOUS where you only send a username that may not get
# evaluated by the server.
#
# RFC 4505:
# http://tools.ietf.org/html/rfc4505
#
# source://pyu-ruby-sasl//lib/sasl/anonymous.rb#8
class SASL::Anonymous < ::SASL::Mechanism
  # source://pyu-ruby-sasl//lib/sasl/anonymous.rb#9
  def start; end
end

# RFC 2831:
# http://tools.ietf.org/html/rfc2831
#
# source://pyu-ruby-sasl//lib/sasl/digest_md5.rb#7
class SASL::DigestMD5 < ::SASL::Mechanism
  # @return [DigestMD5] a new instance of DigestMD5
  #
  # source://pyu-ruby-sasl//lib/sasl/digest_md5.rb#10
  def initialize(*a); end

  # Sets the attribute cnonce
  #
  # @param value the value to set the attribute cnonce to.
  #
  # source://pyu-ruby-sasl//lib/sasl/digest_md5.rb#8
  def cnonce=(_arg0); end

  # source://pyu-ruby-sasl//lib/sasl/digest_md5.rb#25
  def receive(message_name, content); end

  # source://pyu-ruby-sasl//lib/sasl/digest_md5.rb#15
  def start; end

  private

  # source://pyu-ruby-sasl//lib/sasl/digest_md5.rb#70
  def decode_challenge(text); end

  # source://pyu-ruby-sasl//lib/sasl/digest_md5.rb#111
  def encode_response(response); end

  # source://pyu-ruby-sasl//lib/sasl/digest_md5.rb#124
  def generate_nonce; end

  # Function from RFC2831
  #
  # source://pyu-ruby-sasl//lib/sasl/digest_md5.rb#135
  def h(s); end

  # Function from RFC2831
  #
  # source://pyu-ruby-sasl//lib/sasl/digest_md5.rb#138
  def hh(s); end

  # source://pyu-ruby-sasl//lib/sasl/digest_md5.rb#163
  def next_nc; end

  # Calculate the value for the response field
  #
  # source://pyu-ruby-sasl//lib/sasl/digest_md5.rb#142
  def response_value(nonce, nc, cnonce, qop, realm, a2_prefix = T.unsafe(nil)); end
end

# Common functions for mechanisms
#
# Mechanisms implement handling of methods start and receive. They
# return: [message_name, content] or nil where message_name is
# either 'auth' or 'response' and content is either a string which
# may transmitted encoded as Base64 or nil.
#
# source://pyu-ruby-sasl//lib/sasl/base.rb#90
class SASL::Mechanism
  # @return [Mechanism] a new instance of Mechanism
  #
  # source://pyu-ruby-sasl//lib/sasl/base.rb#94
  def initialize(mechanism, preferences); end

  # @return [Boolean]
  #
  # source://pyu-ruby-sasl//lib/sasl/base.rb#103
  def failure?; end

  # Returns the value of attribute mechanism.
  #
  # source://pyu-ruby-sasl//lib/sasl/base.rb#91
  def mechanism; end

  # Returns the value of attribute preferences.
  #
  # source://pyu-ruby-sasl//lib/sasl/base.rb#92
  def preferences; end

  # source://pyu-ruby-sasl//lib/sasl/base.rb#112
  def receive(message_name, content); end

  # @raise [AbstractMethod]
  #
  # source://pyu-ruby-sasl//lib/sasl/base.rb#107
  def start; end

  # @return [Boolean]
  #
  # source://pyu-ruby-sasl//lib/sasl/base.rb#100
  def success?; end
end

# RFC 4616:
# http://tools.ietf.org/html/rfc4616
#
# source://pyu-ruby-sasl//lib/sasl/plain.rb#5
class SASL::Plain < ::SASL::Mechanism
  # source://pyu-ruby-sasl//lib/sasl/plain.rb#6
  def start; end
end

# You must derive from class Preferences and overwrite methods you
# want to implement.
#
# source://pyu-ruby-sasl//lib/sasl/base.rb#8
class SASL::Preferences
  # key in config hash
  # authzid: Authorization identitiy ('username@domain' in XMPP)
  # realm: Realm ('domain' in XMPP)
  # digest-uri: : serv-type/serv-name | serv-type/host/serv-name ('xmpp/domain' in XMPP)
  # username
  # has_password?
  # allow_plaintext?
  # password
  # want_anonymous?
  #
  # @return [Preferences] a new instance of Preferences
  #
  # source://pyu-ruby-sasl//lib/sasl/base.rb#20
  def initialize(config); end

  # Returns the value of attribute config.
  #
  # source://pyu-ruby-sasl//lib/sasl/base.rb#9
  def config; end

  # source://pyu-ruby-sasl//lib/sasl/base.rb#23
  def method_missing(sym, *args, &block); end
end

# Will be raised by SASL.new_mechanism if mechanism passed to the
# constructor is not known.
#
# source://pyu-ruby-sasl//lib/sasl/base.rb#31
class SASL::UnknownMechanism < ::RuntimeError
  # @return [UnknownMechanism] a new instance of UnknownMechanism
  #
  # source://pyu-ruby-sasl//lib/sasl/base.rb#32
  def initialize(mechanism); end

  # source://pyu-ruby-sasl//lib/sasl/base.rb#36
  def to_s; end
end

# source://pyu-ruby-sasl//lib/sasl.rb#1
SASL_PATH = T.let(T.unsafe(nil), String)

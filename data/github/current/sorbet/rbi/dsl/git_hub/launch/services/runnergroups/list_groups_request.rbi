# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Services::Runnergroups::ListGroupsRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Services::Runnergroups::ListGroupsRequest`.

class GitHub::Launch::Services::Runnergroups::ListGroupsRequest
  sig do
    params(
      exclude_elastic_runners: T.nilable(T::Boolean),
      include_hosted_runner_groups: T.nilable(T::Boolean),
      include_runner_scale_sets: T.nilable(T::Boolean),
      include_runners: T.nilable(T::Boolean),
      is_enterprise_owner: T.nilable(T::Boolean),
      owner_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      plan_owner_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)
    ).void
  end
  def initialize(exclude_elastic_runners: nil, include_hosted_runner_groups: nil, include_runner_scale_sets: nil, include_runners: nil, is_enterprise_owner: nil, owner_id: nil, plan_owner_id: nil); end

  sig { void }
  def clear_exclude_elastic_runners; end

  sig { void }
  def clear_include_hosted_runner_groups; end

  sig { void }
  def clear_include_runner_scale_sets; end

  sig { void }
  def clear_include_runners; end

  sig { void }
  def clear_is_enterprise_owner; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_plan_owner_id; end

  sig { returns(T::Boolean) }
  def exclude_elastic_runners; end

  sig { params(value: T::Boolean).void }
  def exclude_elastic_runners=(value); end

  sig { returns(T::Boolean) }
  def include_hosted_runner_groups; end

  sig { params(value: T::Boolean).void }
  def include_hosted_runner_groups=(value); end

  sig { returns(T::Boolean) }
  def include_runner_scale_sets; end

  sig { params(value: T::Boolean).void }
  def include_runner_scale_sets=(value); end

  sig { returns(T::Boolean) }
  def include_runners; end

  sig { params(value: T::Boolean).void }
  def include_runners=(value); end

  sig { returns(T::Boolean) }
  def is_enterprise_owner; end

  sig { params(value: T::Boolean).void }
  def is_enterprise_owner=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def owner_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def owner_id=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def plan_owner_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def plan_owner_id=(value); end
end

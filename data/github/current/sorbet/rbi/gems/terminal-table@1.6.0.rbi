# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `terminal-table` gem.
# Please instead update this file by running `bin/tapioca gem terminal-table`.

# source://terminal-table//lib/terminal-table/cell.rb#1
module Terminal; end

# source://terminal-table//lib/terminal-table/cell.rb#2
class Terminal::Table
  # Generates a ASCII table with the given _options_.
  #
  # @return [Table] a new instance of Table
  #
  # source://terminal-table//lib/terminal-table/table.rb#10
  def initialize(options = T.unsafe(nil), &block); end

  # Add a row.
  #
  # source://terminal-table//lib/terminal-table/table.rb#33
  def <<(array); end

  # Check if _other_ is equal to self. _other_ is considered equal
  # if it contains the same headings and rows.
  #
  # source://terminal-table//lib/terminal-table/table.rb#162
  def ==(other); end

  # Add a row.
  #
  # source://terminal-table//lib/terminal-table/table.rb#33
  def add_row(array); end

  # Add a separator.
  #
  # source://terminal-table//lib/terminal-table/table.rb#43
  def add_separator; end

  # Align column _n_ to the given _alignment_ of :center, :left, or :right.
  #
  # source://terminal-table//lib/terminal-table/table.rb#22
  def align_column(n, alignment); end

  # source://terminal-table//lib/terminal-table/table.rb#51
  def cell_padding; end

  # source://terminal-table//lib/terminal-table/table.rb#47
  def cell_spacing; end

  # Return column _n_.
  #
  # source://terminal-table//lib/terminal-table/table.rb#58
  def column(n, method = T.unsafe(nil), array = T.unsafe(nil)); end

  # Return length of column _n_.
  #
  # source://terminal-table//lib/terminal-table/table.rb#82
  def column_width(n); end

  # Return _n_ column including headings.
  #
  # source://terminal-table//lib/terminal-table/table.rb#68
  def column_with_headings(n, method = T.unsafe(nil)); end

  # Return columns.
  #
  # source://terminal-table//lib/terminal-table/table.rb#75
  def columns; end

  # Returns the value of attribute headings.
  #
  # source://terminal-table//lib/terminal-table/table.rb#5
  def headings; end

  # Set the headings
  #
  # source://terminal-table//lib/terminal-table/table.rb#98
  def headings=(arrays); end

  # Return length of column _n_.
  # for legacy support
  #
  # source://terminal-table//lib/terminal-table/table.rb#82
  def length_of_column(n); end

  # Return total number of columns available.
  #
  # source://terminal-table//lib/terminal-table/table.rb#91
  def number_of_columns; end

  # Render the table.
  #
  # source://terminal-table//lib/terminal-table/table.rb#110
  def render; end

  # Return rows without separator rows.
  #
  # source://terminal-table//lib/terminal-table/table.rb#136
  def rows; end

  # source://terminal-table//lib/terminal-table/table.rb#140
  def rows=(array); end

  # source://terminal-table//lib/terminal-table/table.rb#149
  def style; end

  # source://terminal-table//lib/terminal-table/table.rb#145
  def style=(options); end

  # Returns the value of attribute title.
  #
  # source://terminal-table//lib/terminal-table/table.rb#4
  def title; end

  # source://terminal-table//lib/terminal-table/table.rb#153
  def title=(title); end

  # Render the table.
  #
  # source://terminal-table//lib/terminal-table/table.rb#110
  def to_s; end

  private

  # source://terminal-table//lib/terminal-table/table.rb#174
  def additional_column_widths; end

  # source://terminal-table//lib/terminal-table/table.rb#170
  def columns_width; end

  # Return headings combined with rows.
  #
  # source://terminal-table//lib/terminal-table/table.rb#212
  def headings_with_rows; end

  # source://terminal-table//lib/terminal-table/table.rb#188
  def recalc_column_widths(row); end

  # source://terminal-table//lib/terminal-table/table.rb#225
  def title_cell_options; end

  # source://terminal-table//lib/terminal-table/table.rb#216
  def yield_or_eval(&block); end
end

# source://terminal-table//lib/terminal-table/cell.rb#3
class Terminal::Table::Cell
  # Initialize with _options_.
  #
  # @return [Cell] a new instance of Cell
  #
  # source://terminal-table//lib/terminal-table/cell.rb#17
  def initialize(options = T.unsafe(nil)); end

  # source://terminal-table//lib/terminal-table/cell.rb#44
  def align(val, position, length); end

  # source://terminal-table//lib/terminal-table/cell.rb#31
  def alignment; end

  # source://terminal-table//lib/terminal-table/cell.rb#35
  def alignment=(val); end

  # @return [Boolean]
  #
  # source://terminal-table//lib/terminal-table/cell.rb#27
  def alignment?; end

  # Column span.
  #
  # source://terminal-table//lib/terminal-table/cell.rb#12
  def colspan; end

  # removes all ANSI escape sequences (e.g. color)
  #
  # source://terminal-table//lib/terminal-table/cell.rb#84
  def escape(line); end

  # source://terminal-table//lib/terminal-table/cell.rb#48
  def lines; end

  # Render the cell.
  #
  # source://terminal-table//lib/terminal-table/cell.rb#55
  def render(line = T.unsafe(nil)); end

  # Render the cell.
  #
  # source://terminal-table//lib/terminal-table/cell.rb#55
  def to_s(line = T.unsafe(nil)); end

  # Cell value.
  #
  # source://terminal-table//lib/terminal-table/cell.rb#7
  def value; end

  # Returns the longest line in the cell and
  # removes all ANSI escape sequences (e.g. color)
  #
  # source://terminal-table//lib/terminal-table/cell.rb#67
  def value_for_column_width_recalc; end

  # Returns the width of this cell
  #
  # source://terminal-table//lib/terminal-table/cell.rb#74
  def width; end
end

# source://terminal-table//lib/terminal-table/row.rb#3
class Terminal::Table::Row
  # Initialize with _width_ and _options_.
  #
  # @return [Row] a new instance of Row
  #
  # source://terminal-table//lib/terminal-table/row.rb#15
  def initialize(table, array = T.unsafe(nil)); end

  # source://terminal-table//lib/terminal-table/row.rb#22
  def <<(item); end

  # source://terminal-table//lib/terminal-table/row.rb#30
  def [](index); end

  # source://terminal-table//lib/terminal-table/row.rb#22
  def add_cell(item); end

  # Row cells
  #
  # source://terminal-table//lib/terminal-table/row.rb#8
  def cells; end

  # source://terminal-table//lib/terminal-table/row.rb#34
  def height; end

  # source://terminal-table//lib/terminal-table/row.rb#38
  def render; end

  # Returns the value of attribute table.
  #
  # source://terminal-table//lib/terminal-table/row.rb#10
  def table; end
end

# source://terminal-table//lib/terminal-table/separator.rb#3
class Terminal::Table::Separator < ::Terminal::Table::Row
  # source://terminal-table//lib/terminal-table/separator.rb#5
  def render; end
end

# A Style object holds all the formatting information for a Table object
#
# To create a table with a certain style, use either the constructor
# option <tt>:style</tt>, the Table#style object or the Table#style= method
#
# All these examples have the same effect:
#
#     # by constructor
#     @table = Table.new(:style => {:padding_left => 2, :width => 40})
#
#     # by object
#     @table.style.padding_left = 2
#     @table.style.width = 40
#
#     # by method
#     @table.style = {:padding_left => 2, :width => 40}
#
# To set a default style for all tables created afterwards use Style.defaults=
#
#     Terminal::Table::Style.defaults = {:width => 80}
#
# source://terminal-table//lib/terminal-table/style.rb#24
class Terminal::Table::Style
  # @return [Style] a new instance of Style
  #
  # source://terminal-table//lib/terminal-table/style.rb#48
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute alignment.
  #
  # source://terminal-table//lib/terminal-table/style.rb#43
  def alignment; end

  # Sets the attribute alignment
  #
  # @param value the value to set the attribute alignment to.
  #
  # source://terminal-table//lib/terminal-table/style.rb#43
  def alignment=(_arg0); end

  # Returns the value of attribute all_separators.
  #
  # source://terminal-table//lib/terminal-table/style.rb#45
  def all_separators; end

  # Sets the attribute all_separators
  #
  # @param value the value to set the attribute all_separators to.
  #
  # source://terminal-table//lib/terminal-table/style.rb#45
  def all_separators=(_arg0); end

  # source://terminal-table//lib/terminal-table/style.rb#52
  def apply(options); end

  # Returns the value of attribute border_i.
  #
  # source://terminal-table//lib/terminal-table/style.rb#35
  def border_i; end

  # Sets the attribute border_i
  #
  # @param value the value to set the attribute border_i to.
  #
  # source://terminal-table//lib/terminal-table/style.rb#35
  def border_i=(_arg0); end

  # Returns the value of attribute border_x.
  #
  # source://terminal-table//lib/terminal-table/style.rb#33
  def border_x; end

  # Sets the attribute border_x
  #
  # @param value the value to set the attribute border_x to.
  #
  # source://terminal-table//lib/terminal-table/style.rb#33
  def border_x=(_arg0); end

  # Returns the value of attribute border_y.
  #
  # source://terminal-table//lib/terminal-table/style.rb#34
  def border_y; end

  # Sets the attribute border_y
  #
  # @param value the value to set the attribute border_y to.
  #
  # source://terminal-table//lib/terminal-table/style.rb#34
  def border_y=(_arg0); end

  # Returns the value of attribute margin_left.
  #
  # source://terminal-table//lib/terminal-table/style.rb#40
  def margin_left; end

  # Sets the attribute margin_left
  #
  # @param value the value to set the attribute margin_left to.
  #
  # source://terminal-table//lib/terminal-table/style.rb#40
  def margin_left=(_arg0); end

  # Returns the value of attribute padding_left.
  #
  # source://terminal-table//lib/terminal-table/style.rb#37
  def padding_left; end

  # Sets the attribute padding_left
  #
  # @param value the value to set the attribute padding_left to.
  #
  # source://terminal-table//lib/terminal-table/style.rb#37
  def padding_left=(_arg0); end

  # Returns the value of attribute padding_right.
  #
  # source://terminal-table//lib/terminal-table/style.rb#38
  def padding_right; end

  # Sets the attribute padding_right
  #
  # @param value the value to set the attribute padding_right to.
  #
  # source://terminal-table//lib/terminal-table/style.rb#38
  def padding_right=(_arg0); end

  # Returns the value of attribute width.
  #
  # source://terminal-table//lib/terminal-table/style.rb#42
  def width; end

  # Sets the attribute width
  #
  # @param value the value to set the attribute width to.
  #
  # source://terminal-table//lib/terminal-table/style.rb#42
  def width=(_arg0); end

  class << self
    # source://terminal-table//lib/terminal-table/style.rb#57
    def defaults; end

    # source://terminal-table//lib/terminal-table/style.rb#61
    def defaults=(options); end
  end
end

# source://terminal-table//lib/terminal-table/table_helper.rb#3
module Terminal::Table::TableHelper
  # source://terminal-table//lib/terminal-table/table_helper.rb#4
  def table(headings = T.unsafe(nil), *rows, &block); end
end

# source://terminal-table//lib/terminal-table/version.rb#3
Terminal::Table::VERSION = T.let(T.unsafe(nil), String)

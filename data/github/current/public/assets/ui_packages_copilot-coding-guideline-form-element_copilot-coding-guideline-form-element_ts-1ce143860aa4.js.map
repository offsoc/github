{"version":3,"file":"chunk-ui_packages_copilot-coding-guideline-form-element_copilot-coding-guideline-form-element_ts-xxxxxxxxxxxx.js","mappings":"qmBAGO,4CAAMA,0CAA0CC,YASrDC,mBAAoB,CAClB,IAAI,CAACC,gBAAgB,CAAC,2CAA4C,KAKZ,IAAhD,IAAI,CAACC,IAAI,CAACC,MAAM,CAACC,GAAO,CAACA,EAAIC,MAAM,EAAEC,MAAM,EAC7C,KAAI,CAACC,UAAU,CAACF,MAAM,CAAG,EAAI,CAEjC,EACF,CAEAG,OAAOC,CAAY,CAAE,CAInB,GAHAA,EAAMC,cAAc,GACpB,IAAI,CAACC,gBAAgB,CAACN,MAAM,CAAG,GAE3B,IAAI,CAACO,OAAO,GAAI,CAClB,IAAI,CAACL,UAAU,CAACF,MAAM,CAAG,GACzB,IAAI,CAACQ,gBAAgB,CAACC,KAAK,GAI3B,IAAMC,EAAO,IAAI,CAACC,cAAc,CAACC,KAAK,CAIhCC,EAAkBC,KAAKC,GAAG,GAI1BC,EAAS,IAAI,CAACC,eAAe,CAAC,IAAI,CAACC,WAAW,CAACC,SAAS,CAAE,CAC9DC,MAAOP,EAAgBQ,QAAQ,GAC/BX,KAAMA,GAAQ,EAChB,GACA,IAAI,CAACY,IAAI,CAACC,kBAAkB,CAAC,YAAaP,GAC1C,IAAI,CAACL,cAAc,CAACC,KAAK,CAAG,EAC9B,MACE,IAAI,CAACN,gBAAgB,EAAK,KAAI,CAACA,gBAAgB,CAACN,MAAM,CAAG,EAAI,CAEjE,CAEAO,SAAU,CAER,OAAO,IAAI,CAACI,cAAc,CAACC,KAAK,CAACX,MAAM,CAAG,GAAKuB,WAAiBC,IAAI,CAAC,IAAI,CAACd,cAAc,CAACC,KAAK,CAChG,CAGAK,gBAAgBS,CAAgB,CAAEC,CAAiC,CAAU,CAC3E,IAAIC,EAASF,EACb,IAAK,GAAM,CAACG,EAAKjB,EAAM,GAAIkB,OAAOC,OAAO,CAACJ,GACxCC,EAASA,EAAOI,UAAU,CAAC,CAAC,EAAE,EAAEH,EAAI,EAAE,CAAC,CAAEjB,GAE3C,OAAOgB,CACT,CACF,E,GA9DGK,EAAAA,EAAMA,C,CADIxC,kCAAAA,SAAAA,CAAAA,cAAAA,KAAAA,G,GAEVwC,EAAAA,EAAMA,C,CAFIxC,kCAAAA,SAAAA,CAAAA,aAAAA,KAAAA,G,GAGVwC,EAAAA,EAAMA,C,CAHIxC,kCAAAA,SAAAA,CAAAA,OAAAA,KAAAA,G,GAIVwC,EAAAA,EAAMA,C,CAJIxC,kCAAAA,SAAAA,CAAAA,iBAAAA,KAAAA,G,GAKVwC,EAAAA,EAAMA,C,CALIxC,kCAAAA,SAAAA,CAAAA,mBAAAA,KAAAA,G,GAMVwC,EAAAA,EAAMA,C,CANIxC,kCAAAA,SAAAA,CAAAA,mBAAAA,KAAAA,G,GAOVyC,EAAAA,EAAOA,C,CAPGzC,kCAAAA,SAAAA,CAAAA,OAAAA,KAAAA,GAAAA,kCAAAA,EAAAA,CADZ0C,EAAAA,EAAUA,C,CACE1C,kC","sources":["ui/packages/copilot-coding-guideline-form-element/copilot-coding-guideline-form-element.ts"],"sourcesContent":["import {controller, target, targets} from '@github/catalyst'\n\n@controller\nexport class CopilotCodingGuidelineFormElement extends HTMLElement {\n  @target rowTemplate!: HTMLTemplateElement\n  @target blankslate!: HTMLElement\n  @target list!: HTMLElement\n  @target modalPathInput!: HTMLInputElement\n  @target closeModalButton!: HTMLElement\n  @target formErrorMessage!: HTMLElement\n  @targets rows!: HTMLElement[]\n\n  connectedCallback() {\n    this.addEventListener('coding-guideline-path-marked-for-destroy', () => {\n      // Check if there are visible rows. 1 row is always not \"hidden\" but it is\n      // in a template tag so the user cannot see it. So if there is just 1\n      // visible row that means only the template is there and no visible rows\n      // are present so we can show the blankslate\n      if (this.rows.filter(row => !row.hidden).length === 1) {\n        this.blankslate.hidden = false\n      }\n    })\n  }\n\n  addRow(event: Event) {\n    event.preventDefault()\n    this.formErrorMessage.hidden = true\n\n    if (this.isValid()) {\n      this.blankslate.hidden = true\n      this.closeModalButton.click()\n\n      // TODO: Handle a deleted row event and show the blankslate if there are no rows left.\n\n      const path = this.modalPathInput.value\n      // New rows needs a unique index so that Rails can group form fields together correctly.\n      // It is not necessary that the indexes are sequential, they just need to be unique. So we can use the current time\n      // in milliseconds as a unique index.\n      const currentTimeInMs = Date.now()\n\n      // Replace the index placeholder. The index is used in the form input `name` attribute so that Rails can properly\n      // group form inputs together for arrays. This way we can send an array of paths to the server for accepts_nested_attributes_for.\n      const newRow = this.processTemplate(this.rowTemplate.innerHTML, {\n        index: currentTimeInMs.toString(),\n        path: path || '',\n      })\n      this.list.insertAdjacentHTML('beforeend', newRow)\n      this.modalPathInput.value = ''\n    } else {\n      this.formErrorMessage && (this.formErrorMessage.hidden = false)\n    }\n  }\n\n  isValid() {\n    const hasNoSpacesRegex = /^[^\\s]*$/\n    return this.modalPathInput.value.length > 0 && hasNoSpacesRegex.test(this.modalPathInput.value)\n  }\n\n  // Replace {{key}} with value in the template string.\n  processTemplate(template: string, variables: Record<string, string>): string {\n    let result = template\n    for (const [key, value] of Object.entries(variables)) {\n      result = result.replaceAll(`{{${key}}}`, value)\n    }\n    return result\n  }\n}\n"],"names":["CopilotCodingGuidelineFormElement","HTMLElement","connectedCallback","addEventListener","rows","filter","row","hidden","length","blankslate","addRow","event","preventDefault","formErrorMessage","isValid","closeModalButton","click","path","modalPathInput","value","currentTimeInMs","Date","now","newRow","processTemplate","rowTemplate","innerHTML","index","toString","list","insertAdjacentHTML","hasNoSpacesRegex","test","template","variables","result","key","Object","entries","replaceAll","target","targets","controller"],"sourceRoot":""}
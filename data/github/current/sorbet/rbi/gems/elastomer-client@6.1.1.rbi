# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `elastomer-client` gem.
# Please instead update this file by running `bin/tapioca gem elastomer-client`.

# source://elastomer-client//lib/elastomer_client/version.rb#3
module ElastomerClient
  class << self
    # source://elastomer-client//lib/elastomer_client/version.rb#6
    def version; end
  end
end

# inject our instrument method into the Client class
#
# source://elastomer-client//lib/elastomer_client/client.rb#15
class ElastomerClient::Client
  include ::ElastomerClient::Notifications

  # Create a new client that can be used to make HTTP requests to the
  # Elasticsearch server.
  #
  # see lib/elastomer_client/client/errors.rb#L92-L94
  #
  # Method params:
  #   :host - the host as a String
  #   :port - the port number of the server
  #   :url  - the URL as a String (overrides :host and :port)
  #   :read_timeout - the timeout in seconds when reading from an HTTP connection
  #   :open_timeout - the timeout in seconds when opening an HTTP connection
  #   :adapter      - the Faraday adapter to use (defaults to :excon)
  #   :opaque_id    - set to `true` to use the 'X-Opaque-Id' request header
  #   :max_request_size - the maximum allowed request size in bytes (defaults to 250 MB)
  #   :strict_params    - set to `true` to raise exceptions when invalid request params are used
  #   :es_version       - set to the Elasticsearch version (example: "5.6.6") to avoid an HTTP request to get the version.
  #   :compress_body    - set to true to enable request body compression (default: false)
  #   :compression      - The compression level (0-9) when request body compression is enabled (default: Zlib::DEFAULT_COMPRESSION)
  #   :basic_auth       - a Hash containing basic authentication :username and :password values to use on connections
  #   :token_auth       - an authentication token as a String to use on connections (overrides :basic_auth)
  #
  # @return [Client] a new instance of Client
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#42
  def initialize(host: T.unsafe(nil), port: T.unsafe(nil), url: T.unsafe(nil), read_timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), opaque_id: T.unsafe(nil), adapter: T.unsafe(nil), max_request_size: T.unsafe(nil), strict_params: T.unsafe(nil), es_version: T.unsafe(nil), compress_body: T.unsafe(nil), compression: T.unsafe(nil), basic_auth: T.unsafe(nil), token_auth: T.unsafe(nil), &block); end

  # Internal: Add sort by doc to query.
  #
  # Raises an exception if the query contains a sort already.
  # Returns the query as a hash
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#126
  def add_sort_by_doc(query); end

  # Returns the ApiSpec for the specific version of Elasticsearch that this
  # Client is connected to.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#123
  def api_spec; end

  # Internal: Ensure that the parameter has a valid value. Strings, Symbols,
  # Numerics, and Arrays of those things are valid. Things like `nil`
  # and empty strings are right out. This method also performs a little
  # formating on the parameter:
  #
  # * leading and trailing whitespace is removed
  # * arrays are flattend
  # * and then joined into a String
  # * numerics are converted to their string equivalents
  #
  # param - The param Object to validate
  # name  - Optional param name as a String (used in exception messages)
  #
  # Returns the validated param as a String.
  # Raises an ArgumentError if the param is not valid.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#445
  def assert_param_presence(param, name = T.unsafe(nil)); end

  # Returns true if the server is available; returns false otherwise.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#91
  def available?; end

  # The `bulk` method can be used in two ways. Without a block the method
  # will perform an API call, and it requires a bulk request body and
  # optional request parameters. If given a block, the method will use a
  # Bulk instance to assemble the operations called in the block into a
  # bulk request and dispatch it at the end of the block.
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html
  #
  # body   - Request body as a String (required if a block is _not_ given)
  # params - Optional request parameters as a Hash
  #   :request_size - Optional maximum request size in bytes
  #   :action_count - Optional maximum action size
  # block  - Passed to a Bulk instance which assembles the operations
  #          into one or more bulk requests.
  #
  # Examples
  #
  #   bulk(request_body, :index => 'default-index')
  #
  #   bulk(:index => 'default-index') do |b|
  #     b.index(document1)
  #     b.index(document2, :_type => 'default-type')
  #     b.delete(document3)
  #     ...
  #   end
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#33
  def bulk(body = T.unsafe(nil), params = T.unsafe(nil)); end

  # Stream bulk actions from an Enumerator and passes the response items to
  # the given block.
  #
  # Examples
  #
  #   ops = [
  #     [:index, document1, {:_type => "foo", :_id => 1}],
  #     [:create, document2],
  #     [:delete, {:_type => "bar", :_id => 42}]
  #   ]
  #   bulk_stream_items(ops, :index => 'default-index') do |item|
  #     puts item
  #   end
  #
  #   # return value:
  #   # {
  #   #   "took" => 256,
  #   #   "errors" => false,
  #   #   "success" => 3,
  #   #   "failure" => 0
  #   # }
  #
  #   # sample response item for ES5:
  #   # {
  #   #   "delete": {
  #   #     "_index": "foo",
  #   #     "_type": "bar",
  #   #     "_id": "42",
  #   #     "_version": 3,
  #   #     "status": 200,
  #   #     "found": true
  #   #   }
  #   # }
  #
  #   # sample response item for ES8:
  #   # {
  #   #   "delete": {
  #   #     "_index": "foo",
  #   #     "_id": "42",
  #   #     "_version": 3,
  #   #     "status": 200,
  #   #     "result": "deleted"
  #   #   }
  #   # }
  #
  # Returns a Hash of stats about items from the responses.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#134
  def bulk_stream_items(ops, params = T.unsafe(nil)); end

  # Stream bulk actions from an Enumerator.
  #
  # Examples
  #
  #   ops = [
  #     [:index, document1, {:_type => "foo", :_id => 1}],
  #     [:create, document2],
  #     [:delete, {:_type => "bar", :_id => 42}]
  #   ]
  #   bulk_stream_responses(ops, :index => 'default-index').each do |response|
  #     puts response
  #   end
  #
  # Returns an Enumerator of responses.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#64
  def bulk_stream_responses(ops, params = T.unsafe(nil)); end

  # Delete one or more scroll IDs.
  # see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html#_clear_scroll_api
  #
  # scroll_id - One or more scroll IDs
  #
  # Returns the response body as a Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#117
  def clear_scroll(scroll_ids); end

  # Returns a Cluster instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#7
  def cluster; end

  # Returns the value of attribute compress_body.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#72
  def compress_body; end

  # Returns the value of attribute compression.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#73
  def compression; end

  # Internal: Provides access to the Faraday::Connection used by this client
  # for all requests to the server.
  #
  # Returns a Faraday::Connection
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#131
  def connection; end

  # Continue scrolling a query.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html
  #
  # scroll_id - The current scroll ID as a String
  # scroll    - The keep alive time of the scrolling request (5 minutes by default)
  #
  # Examples
  #
  #   scroll_id = client.start_scroll(body: '{"query":{"match_all":{}}}', index: 'test')['_scroll_id']
  #
  #   h = client.continue_scroll scroll_id   # scroll to get the next set of results
  #   scroll_id = h['_scroll_id']            # and store the scroll_id to use later
  #
  #   h = client.continue_scroll scroll_id   # scroll again to get the next set of results
  #   scroll_id = h['_scroll_id']            # and store the scroll_id to use later
  #
  #   # repeat until the results are empty
  #
  # Returns the response body as a Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#100
  def continue_scroll(scroll_id, scroll = T.unsafe(nil)); end

  # Internal: Sends an HTTP DELETE request to the server.
  #
  # path   - The path as a String
  # params - Parameters Hash
  #
  # Returns a Faraday::Response
  # Raises an ElastomerClient::Client::Error on 4XX and 5XX responses
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#220
  def delete(path, params = T.unsafe(nil)); end

  # Execute delete_by_query using the native _delete_by_query API if supported
  # or the application-level implementation.
  #
  # Warning: These implementations have different parameters and return types.
  # If you want to use one or the other consistently, use ElastomerClient::Client#native_delete_by_query
  # or ElastomerClient::Client#app_delete_by_query directly.
  #
  # source://elastomer-client//lib/elastomer_client/client/delete_by_query.rb#11
  def delete_by_query(query, params = T.unsafe(nil)); end

  # Provides access to document-level API commands. Indexing documents and
  # searching documents are both handled by this module.
  #
  # name - The name of the index as a String (optional)
  # type - The document type as a String (optional)
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html
  #
  # Returns a Docs instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#15
  def docs(name = T.unsafe(nil), type = T.unsafe(nil)); end

  # Returns a duplicate of this Client connection configured in the exact same
  # fashion.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#78
  def dup; end

  # Returns the value of attribute es_version.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#71
  def es_version; end

  # Internal: Apply path expansions to the `path` and append query
  # parameters to the `path`. We are using an Addressable::Template to
  # replace '{expansion}' fields found in the path with the values extracted
  # from the `params` Hash. Any remaining elements in the `params` hash are
  # treated as query parameters and appended to the end of the path.
  #
  # path   - The path as a String
  # params - Parameters Hash
  #
  # Examples
  #
  #   expand_path('/foo{/bar}', {bar: 'hello', q: 'what', p: 2})
  #   #=> '/foo/hello?q=what&p=2'
  #
  #   expand_path('/foo{/bar}{/baz}', {baz: 'no bar'}
  #   #=> '/foo/no%20bar'
  #
  # Returns an Addressable::Uri
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#351
  def expand_path(path, params); end

  # Internal: Extract the :body from the params Hash and convert it to a
  # JSON String format. If the params Hash does not contain a :body then no
  # action is taken and `nil` is returned.
  #
  # If a :body is present and is a String then it is assumed to a JSON String
  # and returned "as is".
  #
  # If a :body is present and is an Array then we join the values together
  # with newlines and append a trailing newline. This is a special case for
  # dealing with ES `bulk` imports and `multi_search` methods.
  #
  # Otherwise we convert the :body to a JSON string and return.
  #
  # params - Parameters Hash
  #
  # Returns the request body as a String or `nil` if no :body is present
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#314
  def extract_body(params); end

  # Internal: Sends an HTTP GET request to the server.
  #
  # path   - The path as a String
  # params - Parameters Hash
  #
  # Returns a Faraday::Response
  # Raises an ElastomerClient::Client::Error on 4XX and 5XX responses
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#187
  def get(path, params = T.unsafe(nil)); end

  # Internal: Inspect the Faraday::Response and raise an error if the status
  # is in the 5XX range or if the response body contains an 'error' field.
  # In the latter case, the value of the 'error' field becomes our exception
  # message. In the absence of an 'error' field the response body is used
  # as the exception message.
  #
  # The raised exception will contain the response object.
  #
  # response - The Faraday::Response object.
  #
  # Returns the response.
  # Raises an ElastomerClient::Client::Error on 500 responses or responses
  # containing and 'error' field.
  #
  # @raise [ServerError]
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#408
  def handle_errors(response); end

  # Internal: Sends an HTTP HEAD request to the server.
  #
  # path   - The path as a String
  # params - Parameters Hash
  #
  # Returns a Faraday::Response
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#176
  def head(path, params = T.unsafe(nil)); end

  # Returns the value of attribute host.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#67
  def host; end

  # Provides access to index-level API commands. An index name is required for
  # these API calls. If you want to operate on all indices - flushing all
  # indices, for example - then you will need to use the "_all" index name.
  #
  # You can override the index name for one-off calls by passing in the
  # desired index name via the `:index` option.
  #
  # name - The name of the index as a String or an Array of names
  #
  # Returns an Index instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#16
  def index(name = T.unsafe(nil)); end

  # Returns the information Hash from the attached Elasticsearch instance.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#116
  def info; end

  # source://elastomer-client//lib/elastomer_client/client.rb#467
  def inspect; end

  # Internal: Determine whether or not a response item has an HTTP status code
  # in the range 200 to 299.
  #
  # item - The bulk response item
  #
  # Returns a boolean
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#84
  def is_ok?(item); end

  # Returns the value of attribute max_request_size.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#69
  def max_request_size; end

  # Execute an array of percolate actions in bulk. Results are returned in an
  # array in the order the actions were sent.
  #
  # The `multi_percolate` method can be used in two ways. Without a block
  # the method will perform an API call, and it requires a bulk request
  # body and optional request parameters.
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-percolate.html#_multi_percolate_api
  #
  # body   - Request body as a String (required if a block is not given)
  # params - Optional request parameters as a Hash
  # block  - Passed to a MultiPercolate instance which assembles the
  #          percolate actions into a single request.
  #
  # Examples
  #
  #   # index and type in request body
  #   multi_percolate(request_body)
  #
  #   # index in URI
  #   multi_percolate(request_body, index: 'default-index')
  #
  #   # block form
  #   multi_percolate(index: 'default-index') do |m|
  #     m.percolate({ author: "pea53" }, { type: 'default-type' })
  #     m.count({ author: "pea53" }, { type: 'type2' })
  #     ...
  #   end
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_percolate.rb#36
  def mpercolate(body = T.unsafe(nil), params = T.unsafe(nil)); end

  # Execute an array of searches in bulk. Results are returned in an
  # array in the order the queries were sent.
  #
  # The `multi_search` method can be used in two ways. Without a block
  # the method will perform an API call, and it requires a bulk request
  # body and optional request parameters.
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html
  #
  # body   - Request body as a String (required if a block is not given)
  # params - Optional request parameters as a Hash
  # block  - Passed to a MultiSearch instance which assembles the searches
  #          into a single request.
  #
  # Examples
  #
  #   # index and type in request body
  #   multi_search(request_body)
  #
  #   # index in URI
  #   multi_search(request_body, index: 'default-index')
  #
  #   # block form
  #   multi_search(index: 'default-index') do |m|
  #     m.search({query: {match_all: {}}, size: 0)
  #     m.search({query: {field: {"foo" => "bar"}}}, type: 'default-type')
  #     ...
  #   end
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_search.rb#36
  def msearch(body = T.unsafe(nil), params = T.unsafe(nil)); end

  # Execute an array of percolate actions in bulk. Results are returned in an
  # array in the order the actions were sent.
  #
  # The `multi_percolate` method can be used in two ways. Without a block
  # the method will perform an API call, and it requires a bulk request
  # body and optional request parameters.
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-percolate.html#_multi_percolate_api
  #
  # body   - Request body as a String (required if a block is not given)
  # params - Optional request parameters as a Hash
  # block  - Passed to a MultiPercolate instance which assembles the
  #          percolate actions into a single request.
  #
  # Examples
  #
  #   # index and type in request body
  #   multi_percolate(request_body)
  #
  #   # index in URI
  #   multi_percolate(request_body, index: 'default-index')
  #
  #   # block form
  #   multi_percolate(index: 'default-index') do |m|
  #     m.percolate({ author: "pea53" }, { type: 'default-type' })
  #     m.count({ author: "pea53" }, { type: 'type2' })
  #     ...
  #   end
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_percolate.rb#36
  def multi_percolate(body = T.unsafe(nil), params = T.unsafe(nil)); end

  # Execute an array of searches in bulk. Results are returned in an
  # array in the order the queries were sent.
  #
  # The `multi_search` method can be used in two ways. Without a block
  # the method will perform an API call, and it requires a bulk request
  # body and optional request parameters.
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html
  #
  # body   - Request body as a String (required if a block is not given)
  # params - Optional request parameters as a Hash
  # block  - Passed to a MultiSearch instance which assembles the searches
  #          into a single request.
  #
  # Examples
  #
  #   # index and type in request body
  #   multi_search(request_body)
  #
  #   # index in URI
  #   multi_search(request_body, index: 'default-index')
  #
  #   # block form
  #   multi_search(index: 'default-index') do |m|
  #     m.search({query: {match_all: {}}, size: 0)
  #     m.search({query: {field: {"foo" => "bar"}}}, type: 'default-type')
  #     ...
  #   end
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_search.rb#36
  def multi_search(body = T.unsafe(nil), params = T.unsafe(nil)); end

  # Delete documents based on a query using the Elasticsearch _delete_by_query API.
  #
  # query  - The query body as a Hash
  # params - Parameters Hash
  #
  # Examples
  #
  #   # request body query
  #   native_delete_by_query({query: {match_all: {}}}, type: 'tweet')
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-delete-by-query.html
  #
  # Returns a Hash containing the _delete_by_query response body.
  #
  # source://elastomer-client//lib/elastomer_client/client/native_delete_by_query.rb#18
  def native_delete_by_query(query, parameters = T.unsafe(nil)); end

  # Provides access to node-level API commands. The default node is set to
  # nil which target all nodes. You can pass in "_all" (to get the
  # same effect) or "_local" to target only the current node the client is
  # connected to. And you can specify an individual node or multiple nodes.
  #
  # node_id - The node ID as a String or an Array of node IDs
  #
  # Returns a Nodes instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/nodes.rb#14
  def nodes(node_id = T.unsafe(nil)); end

  # Returns the value of attribute open_timeout.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#68
  def open_timeout; end

  # Returns true if the server is available; returns false otherwise.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#91
  def ping; end

  # Returns the value of attribute port.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#67
  def port; end

  # Internal: Sends an HTTP POST request to the server.
  #
  # path   - The path as a String
  # params - Parameters Hash
  #
  # Returns a Faraday::Response
  # Raises an ElastomerClient::Client::Error on 4XX and 5XX responses
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#209
  def post(path, params = T.unsafe(nil)); end

  # Internal: Sends an HTTP PUT request to the server.
  #
  # path   - The path as a String
  # params - Parameters Hash
  #
  # Returns a Faraday::Response
  # Raises an ElastomerClient::Client::Error on 4XX and 5XX responses
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#198
  def put(path, params = T.unsafe(nil)); end

  # Returns the value of attribute read_timeout.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#68
  def read_timeout; end

  # Returns a Repository instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#7
  def repository(name = T.unsafe(nil)); end

  # Internal: Sends an HTTP request to the server. If the `params` Hash
  # contains a :body key, it will be deleted from the Hash and the value
  # will be used as the body of the request.
  #
  # method - The HTTP method to send [:head, :get, :put, :post, :delete]
  # path   - The path as a String
  # params - Parameters Hash
  #   :body         - Will be used as the request body
  #   :read_timeout - Optional read timeout (in seconds) for the request
  #
  # Returns a Faraday::Response
  # Raises an ElastomerClient::Client::Error on 4XX and 5XX responses
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#236
  def request(method, path, params); end

  # Internal: Reset the client by removing the current Faraday::Connection. A
  # new connection will be established on the next request.
  #
  # Returns this Client instance.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#165
  def reset!; end

  # Create a new Scroller instance for scrolling all results from a `query`
  # via "scan" semantics by sorting by _doc.
  #
  # query  - The query to scan as a Hash or a JSON encoded String
  # opts   - Options Hash
  #   :index  - the name of the index to search
  #   :type   - the document type to search
  #   :scroll - the keep alive time of the scrolling request (5 minutes by default)
  #   :size   - the number of documents per shard to fetch per scroll
  #
  # Examples
  #
  #   scan = client.scan('{"query":{"match_all":{}}}', index: 'test')
  #   scan.each_document do |document|
  #     document['_id']
  #     document['_source']
  #   end
  #
  # Returns a new Scroller instance
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#47
  def scan(query, opts = T.unsafe(nil)); end

  # Create a new Scroller instance for scrolling all results from a `query`.
  #
  # query  - The query to scroll as a Hash or a JSON encoded String
  # opts   - Options Hash
  #   :index  - the name of the index to search
  #   :type   - the document type to search
  #   :scroll - the keep alive time of the scrolling request (5 minutes by default)
  #   :size   - the number of documents per shard to fetch per scroll
  #
  # Examples
  #
  #   scroll = client.scroll('{"query":{"match_all":{}}}', index: 'test')
  #   scroll.each_document do |document|
  #     document['_id']
  #     document['_source']
  #   end
  #
  # Returns a new Scroller instance
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#24
  def scroll(query, opts = T.unsafe(nil)); end

  # Returns a Semantic::Version for the attached Elasticsearch instance.
  # See https://rubygems.org/gems/semantic
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#111
  def semantic_version; end

  # Provides access to snapshot API commands.
  #
  # repository - The name of the repository as a String
  # name       - The name of the snapshot as a String
  #
  # Returns a Snapshot instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#12
  def snapshot(repository = T.unsafe(nil), name = T.unsafe(nil)); end

  # Begin scrolling a query.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html
  #
  # opts   - Options Hash
  #   :body        - the query to scroll as a Hash or JSON encoded String
  #   :index       - the name of the index to search
  #   :type        - the document type to search
  #   :scroll      - the keep alive time of the scrolling request (5 minutes by default)
  #   :size        - the number of documents per shard to fetch per scroll
  #
  # Examples
  #
  #   h = client.start_scroll(body: '{"query":{"match_all":{}},"sort":{"created":"desc"}}', index: 'test')
  #   scroll_id = h['_scroll_id']
  #   h['hits']['hits'].each { |doc| ... }
  #
  #   h = client.continue_scroll(scroll_id)
  #   scroll_id = h['_scroll_id']
  #   h['hits']['hits'].each { |doc| ... }
  #
  #   # repeat until there are no more hits
  #
  # Returns the response body as a Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#74
  def start_scroll(opts = T.unsafe(nil)); end

  # Returns the value of attribute strict_params.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#70
  def strict_params; end

  # Returns the value of attribute strict_params.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#70
  def strict_params?; end

  # Returns a Tasks instance for querying the cluster bound to this client for
  # metadata about internal tasks in flight, and to submit administrative
  # requests (like cancellation) concerning those tasks.
  #
  # Returns a new Tasks object associated with this client
  #
  # source://elastomer-client//lib/elastomer_client/client/tasks.rb#11
  def tasks; end

  # Returns a Template instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/template.rb#7
  def template(name); end

  # Update documents based on a query using the Elasticsearch _update_by_query API.
  #
  # query  - The query body as a Hash
  # params - Parameters Hash
  #
  # Examples
  #
  #   # request body query
  #   update_by_query({
  #     "script": {
  #       "source": "ctx._source.count++",
  #       "lang": "painless"
  #     },
  #     "query": {
  #       "term": {
  #         "user.id": "kimchy"
  #       }
  #     }
  #   })
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/8.7/docs-update-by-query.html
  #
  # Returns a Hash containing the _update_by_query response body.
  #
  # source://elastomer-client//lib/elastomer_client/client/update_by_query.rb#28
  def update_by_query(query, parameters = T.unsafe(nil)); end

  # Returns the value of attribute url.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#67
  def url; end

  # Returns the version String of the attached Elasticsearch instance.
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#100
  def version; end

  # source://elastomer-client//lib/elastomer_client/client.rb#463
  def version_support; end

  # Internal: Returns a new ElastomerClient::Client error that wraps the given
  # Faraday error. A generic Error is returned if we cannot wrap the given
  # Faraday error.
  #
  #   error  - The Faraday error
  #   method - The request method
  #   path   - The request path
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#292
  def wrap_faraday_error(error, method, path); end

  private

  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#482
  def basic_auth?; end

  # Cheap implementation of ActiveSupport's Object#present?
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#489
  def present_for_auth?(object); end

  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client.rb#478
  def token_auth?; end
end

# The Bulk class provides some abstractions and helper methods for working
# with the Elasticsearch bulk API command. Instances of the Bulk class
# accumulate indexing and delete operations and then issue a single bulk
# API request to Elasticsearch. Those operations are then executed by the
# cluster.
#
# A maximum request size can be set. As soon as the size of the request
# body hits this threshold, a bulk request will be made to the search
# cluster. This happens as operations are added.
#
# Additionally, a maximum action count can be set. As soon as the number
# of actions equals the action count, a bulk request will be made.
#
# You can also use the `call` method explicitly to send a bulk request
# immediately.
#
# source://elastomer-client//lib/elastomer_client/client/bulk.rb#175
class ElastomerClient::Client::Bulk
  # Create a new bulk client for handling some of the details of
  # accumulating documents to index and then formatting them properly for
  # the bulk API command.
  #
  # client - ElastomerClient::Client used for HTTP requests to the server
  # params - Parameters Hash to pass to the Client#bulk method
  #   :request_size - the maximum request size in bytes
  #   :action_count - the maximum number of actions
  #
  # @return [Bulk] a new instance of Bulk
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#186
  def initialize(client, params = T.unsafe(nil)); end

  # Returns the value of attribute action_count.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#197
  def action_count; end

  # Set the action count. If the value is nil, then action count limiting
  # will not be used and a request will only be made when the call method
  # is called. It is up to the user to ensure that the request does not
  # exceed Elasticsearch request size limits.
  #
  # If the value is a number greater than zero, then actions will be
  # buffered until the action count is met. When this happens a bulk
  # request is issued, queued actions are cleared, and the response from
  # Elasticsearch is returned.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#228
  def action_count=(value); end

  # Internal: Add the given `action` to the list of actions that will be
  # performed by this bulk request. An optional `document` can also be
  # given.
  #
  # If the total size of the accumulated actions meets our desired request
  # size, then a bulk API call will be performed. After the call the
  # actions list is cleared and we'll start accumulating actions again.
  #
  # action   - The bulk action (as a Hash) to perform
  # document - Optional document for the action as a Hash or JSON encoded String
  #
  # Returns the response from the bulk call if one was made or nil.
  # Raises RequestSizeError if the given action is larger than the
  #        configured requst size or the client.max_request_size
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#400
  def add_to_actions(action, document = T.unsafe(nil)); end

  # Immediately execute a bulk API call with the currently accumulated
  # actions. The accumulated actions list will be cleared after the call
  # has been made.
  #
  # If the accumulated actions list is empty then no action is taken.
  #
  # Returns the response body Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#314
  def call; end

  # Internal: Raises a RequestSizeError if the given size is larger than
  # the configured client.max_request_size
  #
  # @raise [RequestSizeError]
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#443
  def check_action_size!(size); end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#197
  def client; end

  # Internal: Convert incoming Ruby symbol keys to their special underscore
  # versions. Maintains API compaibility with the `Docs` API for `index`,
  # `create`, `update` and `delete`.
  #
  # :id -> :_id
  # 'id' -> '_id'
  #
  # params - Hash.
  #
  # Returns a new params Hash with the special keys replaced.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#354
  def convert_special_keys(params); end

  # Add a create action to the list of bulk actions to be performed when
  # the bulk API call is made. Parameters can be provided in the
  # parameters hash (underscore prefix optional) or in the document
  # hash (underscore prefix required).
  #
  # document - The document to create as a Hash or JSON encoded String
  # params   - Parameters for the create action (as a Hash) (optional)
  #
  # Examples
  #   create({"foo" => "bar"}, {:_id => 1}
  #   create({"foo" => "bar"}, {:id => 1}
  #   create("foo" => "bar", "_id" => 1)
  #
  # Returns the response from the bulk call if one was made or nil.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#269
  def create(document, params); end

  # Add a delete action to the list of bulk actions to be performed when
  # the bulk API call is made.
  #
  # params - Parameters for the delete action (as a Hash)
  #
  # Examples
  #   delete(:_id => 1, :_type => 'foo')
  #
  # Returns the response from the bulk call if one was made or nil.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#302
  def delete(params); end

  # Add an index action to the list of bulk actions to be performed when
  # the bulk API call is made. Parameters can be provided in the
  # parameters hash (underscore prefix optional) or in the document
  # hash (underscore prefix required).
  #
  # document - The document to index as a Hash or JSON encoded String
  # params   - Parameters for the index action (as a Hash) (optional)
  #
  # Examples
  #   index({"foo" => "bar"}, {:_id => 1, :_type => "foo"}
  #   index({"foo" => "bar"}, {:id => 1, :type => "foo"}
  #   index("foo" => "bar", "_id" => 1, "_type" => "foo")
  #
  # Returns the response from the bulk call if one was made or nil.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#250
  def index(document, params = T.unsafe(nil)); end

  # Internal: convert special key parameters to their wire representation
  # and apply any override document parameters.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#330
  def prepare_params(document, params); end

  # Internal: Determines if adding `size` more bytes and one more action
  # will bring the current bulk request over the `request_size` limit or the
  # `action_count` limit. If this method returns true, then it is time to
  # dispatch the bulk request.
  #
  # Returns `true` of `false`
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#433
  def ready_to_send?(size); end

  # Returns the value of attribute request_size.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#197
  def request_size; end

  # Set the request size in bytes. If the value is nil, then request size
  # limiting will not be used and a request will only be made when the call
  # method is called. It is up to the user to ensure that the request does
  # not exceed Elasticsearch request size limits.
  #
  # If the value is a number greater than zero, then actions will be
  # buffered until the request size is met or exceeded. When this happens a
  # bulk request is issued, queued actions are cleared, and the response
  # from Elasticsearch is returned.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#208
  def request_size=(value); end

  # Add an update action to the list of bulk actions to be performed when
  # the bulk API call is made. Parameters can be provided in the parameters
  # hash (underscore prefix optional) or in the document hash (underscore
  # prefix required).
  #
  # document - The document to update as a Hash or JSON encoded String
  # params   - Parameters for the update action (as a Hash) (optional)
  #
  # Examples
  #   update({"doc" => {"foo" => "bar"}}, {:_id => 1})
  #   update({"doc" => {"foo" => "bar"}}, {:id => 1})
  #   update({"doc" => {"foo" => "bar"}}, "_id" => 1)
  #
  # Returns the response from the bulk call if one was made or nil.
  #
  # source://elastomer-client//lib/elastomer_client/client/bulk.rb#288
  def update(document, params); end
end

# 10 MB
#
# source://elastomer-client//lib/elastomer_client/client/bulk.rb#176
ElastomerClient::Client::Bulk::DEFAULT_REQUEST_SIZE = T.let(T.unsafe(nil), Integer)

# source://elastomer-client//lib/elastomer_client/client/bulk.rb#325
ElastomerClient::Client::Bulk::SPECIAL_KEYS = T.let(T.unsafe(nil), Array)

# source://elastomer-client//lib/elastomer_client/client/bulk.rb#326
ElastomerClient::Client::Bulk::UNPREFIXED_SPECIAL_KEYS = T.let(T.unsafe(nil), Array)

# source://elastomer-client//lib/elastomer_client/client/cluster.rb#11
class ElastomerClient::Client::Cluster
  # Create a new cluster client for making API requests that pertain to
  # the cluster health and management.
  #
  # client - ElastomerClient::Client used for HTTP requests to the server
  #
  # @return [Cluster] a new instance of Cluster
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#18
  def initialize(client); end

  # Retrieve the current aliases. An :index name can be given (or an
  # array of index names) to get just the aliases for those indexes. You
  # can also use the alias name here since it is acting the part of an
  # index.
  #
  # params - Parameters Hash
  #   :index - an index name or Array of index names
  #   :name  - an alias name or Array of alias names
  #
  # Examples
  #
  #   get_aliases
  #   get_aliases( index: 'users' )
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#183
  def aliases(params = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#22
  def client; end

  # Retrieve the current aliases. An :index name can be given (or an
  # array of index names) to get just the aliases for those indexes. You
  # can also use the alias name here since it is acting the part of an
  # index.
  #
  # params - Parameters Hash
  #   :index - an index name or Array of index names
  #   :name  - an alias name or Array of alias names
  #
  # Examples
  #
  #   get_aliases
  #   get_aliases( index: 'users' )
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#183
  def get_aliases(params = T.unsafe(nil)); end

  # Cluster wide settings that have been modified via the update API.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html
  #
  # Returns the response as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#105
  def get_settings(params = T.unsafe(nil)); end

  # Simple status on the health of the cluster. The API can also be executed
  # against one or more indices to get just the specified indices health.
  #
  # params - Parameters Hash
  #   :index - a single index name or an Array of index names
  #   :level - one of "cluster", "indices", or "shards"
  #   :wait_for_status - one of "green", "yellow", or "red"
  #   :wait_for_relocating_shards - a number controlling to how many relocating shards to wait for
  #   :wait_for_nodes - the request waits until the specified number N of nodes is available
  #   :timeout - how long to wait [default is "30s"]
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html
  #
  # Returns the response as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#38
  def health(params = T.unsafe(nil)); end

  # List all indices currently defined. This is just a convenience method
  # around the `state` call that extracts and returns the indices section.
  #
  # Returns the indices definitions as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#236
  def indices; end

  # List all nodes currently part of the cluster. This is just a convenience
  # method around the `state` call that extracts and returns the nodes
  # section.
  #
  # Returns the nodes definitions as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#245
  def nodes; end

  # Returns a list of any cluster-level changes (e.g. create index, update
  # mapping, allocate or fail shard) which have not yet been executed.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-pending.html
  #
  # Returns the response as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#84
  def pending_tasks(params = T.unsafe(nil)); end

  # Returns `true` if there items in the pending task list. Returns `false`
  # if the pending task list is empty. Returns `nil` if the response body
  # does not contain the "tasks" field.
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#92
  def pending_tasks?; end

  # Explicitly execute a cluster reroute allocation command. For example,
  # a shard can be moved from one node to another explicitly, an
  # allocation can be canceled, or an unassigned shard can be explicitly
  # allocated on a specific node.
  #
  # commands - A command Hash or an Array of command Hashes
  # params   - Parameters Hash
  #
  # Examples
  #
  #   reroute(move: { index: 'test', shard: 0, from_node: 'node1', to_node: 'node2' })
  #
  #   reroute([
  #     { move:     { index: 'test', shard: 0, from_node: 'node1', to_node: 'node2' }},
  #     { allocate: { index: 'test', shard: 1, node: 'node3' }}
  #   ])
  #
  #   reroute(commands: [
  #     { move:     { index: 'test', shard: 0, from_node: 'node1', to_node: 'node2' }},
  #     { allocate: { index: 'test', shard: 1, node: 'node3' }}
  #   ])
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-reroute.html
  #
  # Returns the response as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#151
  def reroute(commands, params = T.unsafe(nil)); end

  # Cluster wide settings that have been modified via the update API.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html
  #
  # Returns the response as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#105
  def settings(params = T.unsafe(nil)); end

  # Comprehensive state information of the whole cluster. For 1.x metric
  # and index filtering, use the :metrics and :indices parameter keys.
  #
  # The list of available metrics are:
  #   version, master_node, nodes, routing_table, metadata, blocks
  #
  # params - Parameters Hash
  #   :metrics - list of metrics to select as an Array
  #   :indices - a single index name or an Array of index names
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-state.html
  #
  # Returns the response as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#56
  def state(params = T.unsafe(nil)); end

  # Retrieve statistics from a cluster wide perspective. The API returns
  # basic index metrics (shard numbers, store size, memory usage) and
  # information about the current nodes that form the cluster (number,
  # roles, os, jvm versions, memory usage, cpu and installed plugins).
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-stats.html
  #
  # Returns the response as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#71
  def stats(params = T.unsafe(nil)); end

  # List all templates currently defined. This is just a convenience method
  # around the `state` call that extracts and returns the templates section.
  #
  # Returns the template definitions as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#228
  def templates; end

  # Perform an aliases action on the cluster. We are just a teensy bit
  # clever here in that a single action can be given or an array of
  # actions. This API method will wrap the request in the appropriate
  # {actions: [...]} body construct.
  #
  # actions - An action Hash or an Array of action Hashes
  # params  - Parameters Hash
  #
  # Examples
  #
  #   update_aliases(add: { index: 'users-1', alias: 'users' })
  #
  #   update_aliases([
  #     { remove: { index: 'users-1', alias: 'users' }},
  #     { add:    { index: 'users-2', alias: 'users' }}
  #   ])
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#209
  def update_aliases(actions, params = T.unsafe(nil)); end

  # Update cluster wide specific settings. Settings updated can either be
  # persistent (applied cross restarts) or transient (will not survive a
  # full cluster restart).
  #
  # body   - The new settings as a Hash or a JSON encoded String
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html
  #
  # Returns the response as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/cluster.rb#121
  def update_settings(body, params = T.unsafe(nil)); end
end

# source://elastomer-client//lib/elastomer_client/client/errors.rb#79
class ElastomerClient::Client::ConnectionFailed < ::ElastomerClient::Client::Error; end

# source://elastomer-client//lib/elastomer_client/client/scroller.rb#140
ElastomerClient::Client::DEFAULT_OPTS = T.let(T.unsafe(nil), Hash)

# source://elastomer-client//lib/elastomer_client/client/docs.rb#19
class ElastomerClient::Client::Docs
  # Create a new document client for making API requests that pertain to
  # the indexing and searching of documents in a search index.
  #
  # client - ElastomerClient::Client used for HTTP requests to the server
  # name   - The name of the index as a String
  # type   - The document type as a String
  #
  # @return [Docs] a new instance of Docs
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#27
  def initialize(client, name, type = T.unsafe(nil)); end

  # Perform bulk indexing and/or delete operations. The current index name
  # and document type will be passed to the bulk API call as part of the
  # request parameters.
  #
  # params - Parameters Hash that will be passed to the bulk API call.
  # block  - Required block that is used to accumulate bulk API operations.
  #          All the operations will be passed to the search cluster via a
  #          single API request.
  #
  # Yields a Bulk instance for building bulk API call bodies.
  #
  # Examples
  #
  #   docs.bulk do |b|
  #     b.index( document1 )
  #     b.index( document2 )
  #     b.delete( document3 )
  #     ...
  #   end
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#447
  def bulk(params = T.unsafe(nil), &block); end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#33
  def client; end

  # Executes a search query, but instead of returning results, returns
  # the number of documents matched. This method supports both the
  # "request body" query and the "URI request" query. When using the
  # request body semantics, the query hash must contain the :query key.
  # Otherwise we assume a URI request is being made.
  #
  # query  - The query body as a Hash
  # params - Parameters Hash
  #
  # Examples
  #
  #   # request body query
  #   count({match_all: {}}, type: 'tweet')
  #
  #   # same thing but using the URI request method
  #   count(q: '*:*', type: 'tweet')
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#257
  def count(query, params = T.unsafe(nil)); end

  # Internal: Returns a Hash containing default parameters.
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#612
  def defaults; end

  # Delete a document from the index based on the document ID. The :id is
  # provided as part of the params hash.
  #
  # params - Parameters Hash
  #   :id - the ID of the document to delete
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#103
  def delete(params = T.unsafe(nil)); end

  # Delete documents by query
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#269
  def delete_by_query(query, params = T.unsafe(nil)); end

  # Check to see if a document exists. The :id is provided as part of the
  # params hash.
  #
  # params - Parameters Hash
  #   :id - the ID of the document to check
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#docs-get
  #
  # Returns true if the document exists
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#131
  def exist?(params = T.unsafe(nil)); end

  # Check to see if a document exists. The :id is provided as part of the
  # params hash.
  #
  # params - Parameters Hash
  #   :id - the ID of the document to check
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#docs-get
  #
  # Returns true if the document exists
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#131
  def exists?(params = T.unsafe(nil)); end

  # Compute a score explanation for a query and a specific document. This
  # can give useful feedback about why a document matched or didn't match
  # a query. The document :id is provided as part of the params hash.
  #
  # query  - The query body as a Hash
  # params - Parameters Hash
  #   :id - the ID of the document
  #
  # Examples
  #
  #   explain({query: {term: {"message" => "search"}}}, id: 1)
  #
  #   explain(q: "message:search", id: 1)
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html
  #
  # Returns the response body as a hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#390
  def explain(query, params = T.unsafe(nil)); end

  # Internal: Allow params to be passed as the first argument to
  # methods that take both an optional query hash and params.
  #
  # query  - query hash OR params hash
  # params - params hash OR nil if no query
  #
  # Returns an array of the query (possibly nil) and params Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#623
  def extract_params(query, params = T.unsafe(nil)); end

  # Internal: Given a `document` generate an options hash that will
  # override parameters based on the content of the document. The document
  # will be returned as the value of the :body key.
  #
  # We only extract information from the document if it is given as a
  # Hash. We do not parse JSON encoded Strings.
  #
  # document - A document Hash or JSON encoded String.
  #
  # Returns an options Hash extracted from the document.
  #
  # Raises ElastomerClient::Client::IllegalArgument if an unsupported indexing
  # directive is used.
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#582
  def from_document(document); end

  # Retrieve a document from the index based on its ID. The :id is
  # provided as part of the params hash.
  #
  # params - Parameters Hash
  #   :id - the ID of the document to get
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#docs-get
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#117
  def get(params = T.unsafe(nil)); end

  # Adds or updates a document in the index, making it searchable. If the
  # document contains an `:_id` attribute then PUT semantics will be used to
  # create (or update) a document with that ID. If no ID is provided then a
  # new document will be created using POST semantics.
  #
  # There are several other document attributes that control how
  # Elasticsearch will index the document. They are listed below. Please
  # refer to the Elasticsearch documentation for a full explanation of each
  # and how it affects the indexing process. These indexing directives vary
  # by Elasticsearch version. Attempting to use a directive not supported
  # by the Elasticsearch server will raise an exception.
  #
  #   :_id
  #   :_type
  #   :_version
  #   :_version_type
  #   :_op_type
  #   :_routing
  #   :_parent
  #   :_refresh
  #
  # Elasticsearch 2.X only:
  #
  #   :_consistency
  #
  # Elasticsearch 5.x only:
  #
  #   :_wait_for_active_shards
  #
  # If any of these attributes are present in the document they will be
  # removed from the document before it is indexed. This means that the
  # document will be modified by this method.
  #
  # document - The document (as a Hash or JSON encoded String) to add to the index
  # params   - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html
  #
  # Returns the response body as a Hash
  #
  # Raises ElastomerClient::Client::IllegalArgument if an unsupported indexing
  # directive is used.
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#77
  def index(document, params = T.unsafe(nil)); end

  # Allows you to get multiple documents based on an index, type, and id (and possibly routing).
  #
  # body   - The request body as a Hash or a JSON encoded String
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#159
  def mget(body, params = T.unsafe(nil)); end

  # Allows you to get multiple documents based on an index, type, and id (and possibly routing).
  #
  # body   - The request body as a Hash or a JSON encoded String
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#159
  def multi_get(body, params = T.unsafe(nil)); end

  # Execute an array of percolate actions in bulk. Results are returned in
  # an array in the order the actions were sent. The current index name and
  # type will be passed to the API call as part of the request parameters.
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-percolate.html#_multi_percolate_api
  #
  # params - Optional request parameters as a Hash
  # block  - Passed to a MultiPercolate instance which assembles the
  #          percolate actions into a single request.
  #
  # Examples
  #
  #   # block form
  #   multi_percolate do |m|
  #     m.percolate(author: "pea53")
  #     m.count(author: "grantr")
  #     ...
  #   end
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#559
  def multi_percolate(params = T.unsafe(nil), &block); end

  # Execute an array of searches in bulk. Results are returned in an
  # array in the order the queries were sent. The current index name
  # and document type will be passed to the multi_search API call as
  # part of the request parameters.
  #
  # params - Parameters Hash that will be passed to the API call.
  # block  - Required block that is used to accumulate searches.
  #          All the operations will be passed to the search cluster
  #          via a single API request.
  #
  # Yields a MultiSearch instance for building multi_search API call
  # bodies.
  #
  # Examples
  #
  #   docs.multi_search do |m|
  #     m.search({query: {match_all: {}}, size: 0)
  #     m.search({query: {field: {"foo" => "bar"}}})
  #     ...
  #   end
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#531
  def multi_search(params = T.unsafe(nil), &block); end

  # Multi termvectors API allows you to get multiple termvectors based on
  # an index, type and id. The response includes a docs array with all the
  # fetched termvectors, each element having the structure provided by the
  # `termvector` API.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-termvectors.html
  #
  # Returns the response body as a hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#365
  def multi_term_vectors(body, params = T.unsafe(nil)); end

  # Multi termvectors API allows you to get multiple termvectors based on
  # an index, type and id. The response includes a docs array with all the
  # fetched termvectors, each element having the structure provided by the
  # `termvector` API.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-termvectors.html
  #
  # Returns the response body as a hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#365
  def multi_termvectors(body, params = T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#33
  def name; end

  # Delete documents from one or more indices and one or more types based
  # on a query using Elasticsearch's _delete_by_query API.
  #
  # See Client#native_delete_by_query for more information.
  #
  # Returns a Hash of statistics about the delete operations as returned by
  # _delete_by_query.
  #
  # Raises ElastomerClient::Client::IncompatibleVersionException if this version
  # of Elasticsearch does not support _delete_by_query.
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#283
  def native_delete_by_query(query, params = T.unsafe(nil)); end

  # Matches a provided or existing document to the stored percolator
  # queries. To match an existing document, pass `nil` as the body and
  # include `:id` in the params.
  #
  # Examples
  #
  #   index.percolator(1).create query: { match: { author: "pea53" } }
  #   docs.percolate doc: { author: "pea53" }
  #   docs.percolate nil, id: 3
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#312
  def percolate(body, params = T.unsafe(nil)); end

  # Counts the queries that match a provided or existing document. To count
  # matches for an existing document, pass `nil` as the body and include
  # `:id` in the params.
  #
  # Examples
  #
  #   index.register_percolator_query 1, query: { match: { author: "pea53" } }
  #   docs.percolate_count doc: { author: "pea53" }
  #   docs.percolate_count nil, id: 3
  #
  # Returns the count
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#328
  def percolate_count(body, params = T.unsafe(nil)); end

  # Create a new Scroller instance for scanning all results from a `query`.
  # The Scroller will be scoped to the current index and document type. The
  # Scroller is configured to use `scan` semantics which are more efficient
  # than a standard scroll query; the caveat is that the returned documents
  # cannot be sorted.
  #
  # query  - The query to scan as a Hash or a JSON encoded String
  # opts   - Options Hash
  #   :index  - the name of the index to search
  #   :type   - the document type to search
  #   :scroll - the keep alive time of the scrolling request (5 minutes by default)
  #   :size   - the number of documents per shard to fetch per scroll
  #
  # Examples
  #
  #   scan = docs.scan('{"query":{"match_all":{}}}')
  #   scan.each_document do |document|
  #     document['_id']
  #     document['_source']
  #   end
  #
  # Returns a new Scroller instance
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#502
  def scan(query, opts = T.unsafe(nil)); end

  # Create a new Scroller instance for scrolling all results from a `query`.
  # The Scroller will be scoped to the current index and document type.
  #
  # query  - The query to scroll as a Hash or a JSON encoded String
  # opts   - Options Hash
  #   :index  - the name of the index to search
  #   :type   - the document type to search
  #   :scroll - the keep alive time of the scrolling request (5 minutes by default)
  #   :size   - the number of documents per shard to fetch per scroll
  #
  # Examples
  #
  #   scroll = index.scroll('{"query":{"match_all":{}},"sort":{"date":"desc"}}')
  #   scroll.each_document do |document|
  #     document['_id']
  #     document['_source']
  #   end
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html
  #
  # Returns a new Scroller instance
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#475
  def scroll(query, opts = T.unsafe(nil)); end

  # Allows you to execute a search query and get back search hits that
  # match the query. This method supports both the "request body" query
  # and the "URI request" query. When using the request body semantics,
  # the query hash must contain the :query key. Otherwise we assume a URI
  # request is being made.
  #
  # query  - The query body as a Hash
  # params - Parameters Hash
  #
  # Examples
  #
  #   # request body query
  #   search({query: {match_all: {}}}, type: 'tweet')
  #
  #   # same thing but using the URI request method
  #   search(q: '*:*', type: 'tweet')
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html
  #
  # Returns the response body as a hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#210
  def search(query, params = T.unsafe(nil)); end

  # The search shards API returns the indices and shards that a search
  # request would be executed against. This can give useful feedback for
  # working out issues or planning optimizations with routing and shard
  # preferences.
  #
  # params - Parameters Hash
  #   :routing    - routing values
  #   :preference - which shard replicas to execute the search request on
  #   :local      - boolean value to use local cluster state
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-shards.html
  #
  # Returns the response body as a hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#230
  def search_shards(params = T.unsafe(nil)); end

  # Retrieve the document source from the index based on the ID and type.
  # The :id is provided as part of the params hash.
  #
  # params - Parameters Hash
  #   :id - the ID of the document
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#_source
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#146
  def source(params = T.unsafe(nil)); end

  # Returns information and statistics on terms in the fields of a
  # particular document as stored in the index. The :id is provided as part
  # of the params hash.
  #
  # params - Parameters Hash
  #   :id - the ID of the document to get
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html
  #
  # Returns the response body as a hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#343
  def term_vector(params = T.unsafe(nil)); end

  # Returns information and statistics on terms in the fields of a
  # particular document as stored in the index. The :id is provided as part
  # of the params hash.
  #
  # params - Parameters Hash
  #   :id - the ID of the document to get
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html
  #
  # Returns the response body as a hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#343
  def term_vectors(params = T.unsafe(nil)); end

  # Returns information and statistics on terms in the fields of a
  # particular document as stored in the index. The :id is provided as part
  # of the params hash.
  #
  # params - Parameters Hash
  #   :id - the ID of the document to get
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html
  #
  # Returns the response body as a hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#343
  def termvector(params = T.unsafe(nil)); end

  # Returns information and statistics on terms in the fields of a
  # particular document as stored in the index. The :id is provided as part
  # of the params hash.
  #
  # params - Parameters Hash
  #   :id - the ID of the document to get
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html
  #
  # Returns the response body as a hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#343
  def termvectors(params = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#33
  def type; end

  # Update a document based on a script provided.
  #
  # script - The script (as a Hash) used to update the document in place
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#176
  def update(script, params = T.unsafe(nil)); end

  # Update documents by query using Elasticsearch's _update_by_query API.
  #
  # See Client#update_by_query for more information.
  #
  # Returns a Hash of statistics about the update operations as returned by
  # _update_by_query.
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#295
  def update_by_query(query, params = T.unsafe(nil)); end

  # Internal: Add default parameters to the `params` Hash and then apply
  # `overrides` to the params if any are given.
  #
  # params    - Parameters Hash
  # overrides - Optional parameter overrides as a Hash
  #
  # Returns a new params Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#602
  def update_params(params, overrides = T.unsafe(nil), delete_type = T.unsafe(nil)); end

  # Validate a potentially expensive query before running it. The
  # :explain parameter can be used to get detailed information about
  # why a query failed.
  #
  # query  - The query body as a Hash
  # params - Parameters Hash
  #
  # Examples
  #
  #   # request body query
  #   validate({query: {query_string: {query: "*:*"}}}, explain: true)
  #
  #   # same thing but using the URI query parameter
  #   validate(q: "post_date:foo", explain: true)
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html
  #
  # Returns the response body as a hash
  #
  # source://elastomer-client//lib/elastomer_client/client/docs.rb#419
  def validate(query, params = T.unsafe(nil)); end
end

# source://elastomer-client//lib/elastomer_client/client/docs.rb#564
ElastomerClient::Client::Docs::SPECIAL_KEYS = T.let(T.unsafe(nil), Hash)

# source://elastomer-client//lib/elastomer_client/client/errors.rb#93
class ElastomerClient::Client::DocumentAlreadyExistsError < ::ElastomerClient::Client::RequestError; end

# General error response from client requests.
#
# source://elastomer-client//lib/elastomer_client/client/errors.rb#11
class ElastomerClient::Client::Error < ::ElastomerClient::Error
  # Construct a new Error from the given response object or a message
  # String. If a response object is given, the error message will be
  # extracted from the response body.
  #
  # response - Faraday::Response object or a simple error message String
  #
  # @return [Error] a new instance of Error
  #
  # source://elastomer-client//lib/elastomer_client/client/errors.rb#19
  def initialize(*args); end

  # Returns the Elasticsearch error from the `response` or nil if the Error
  # was not created with a response.
  #
  # source://elastomer-client//lib/elastomer_client/client/errors.rb#50
  def error; end

  # Indicates that the error is fatal. The request should not be tried
  # again.
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/errors.rb#54
  def fatal?; end

  # The inverse of the `fatal?` method. A request can be retried if this
  # method returns `true`.
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/errors.rb#60
  def retry?; end

  # Returns the status code from the `response` or nil if the Error was not
  # created with a response.
  #
  # source://elastomer-client//lib/elastomer_client/client/errors.rb#46
  def status; end

  class << self
    # By default all client errors are fatal and indicate that a request
    # should not be retried. Only a few errors are retryable.
    #
    # source://elastomer-client//lib/elastomer_client/client/errors.rb#67
    def fatal; end

    # Sets the attribute fatal
    #
    # @param value the value to set the attribute fatal to.
    #
    # source://elastomer-client//lib/elastomer_client/client/errors.rb#71
    def fatal=(_arg0); end

    # By default all client errors are fatal and indicate that a request
    # should not be retried. Only a few errors are retryable.
    #
    # source://elastomer-client//lib/elastomer_client/client/errors.rb#67
    def fatal?; end
  end
end

# source://elastomer-client//lib/elastomer_client/client.rb#16
ElastomerClient::Client::IVAR_BLACK_LIST = T.let(T.unsafe(nil), Array)

# source://elastomer-client//lib/elastomer_client/client.rb#17
ElastomerClient::Client::IVAR_NOISY_LIST = T.let(T.unsafe(nil), Array)

# Exception for client-detected and server-raised invalid Elasticsearch
# request parameter.
#
# source://elastomer-client//lib/elastomer_client/client/errors.rb#106
class ElastomerClient::Client::IllegalArgument < ::ElastomerClient::Client::Error; end

# Exception for operations that are unsupported with the version of
# Elasticsearch being used.
#
# source://elastomer-client//lib/elastomer_client/client/errors.rb#102
class ElastomerClient::Client::IncompatibleVersionException < ::ElastomerClient::Client::Error; end

# source://elastomer-client//lib/elastomer_client/client/index.rb#20
class ElastomerClient::Client::Index
  # Create a new index client for making API requests that pertain to
  # the health and management of individual indexes.
  #
  # client - ElastomerClient::Client used for HTTP requests to the server
  # name   - The name of the index as a String or an Array of names
  #
  # @return [Index] a new instance of Index
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#27
  def initialize(client, name); end

  # Add a single alias to this index.
  #
  # name   - Name of the alias to add to the index
  # params - Parameters Hash
  #   :routing - optional routing that can be associated with an alias
  #   :filter  - optional filter that can be associated with an alias
  #
  # Examples
  #
  #   index.add_alias("foo", routing: "foo")
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#202
  def add_alias(name, params = T.unsafe(nil)); end

  # Return the aliases associated with this index.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#162
  def aliases(params = T.unsafe(nil)); end

  # Perform the analysis process on some text and return the tokens
  # breakdown of the text.
  #
  # text   - The text to analyze as a String
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#234
  def analyze(text, params = T.unsafe(nil)); end

  # Perform bulk indexing and/or delete operations. The current index name
  # will be passed to the bulk API call as part of the request parameters.
  #
  # params - Parameters Hash that will be passed to the bulk API call.
  # block  - Required block that is used to accumulate bulk API operations.
  #          All the operations will be passed to the search cluster via a
  #          single API request.
  #
  # Yields a Bulk instance for building bulk API call bodies.
  #
  # Examples
  #
  #   index.bulk do |b|
  #     b.index( document1 )
  #     b.index( document2 )
  #     b.delete( document3 )
  #     ...
  #   end
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#390
  def bulk(params = T.unsafe(nil), &block); end

  # Clear caches for one or more indices. Individual caches can be
  # specified with parameters.
  #
  # params - Parameters Hash
  #   :index - set to "_all" to clear all index caches
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#305
  def clear_cache(params = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#32
  def client; end

  # Close the index.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#94
  def close(params = T.unsafe(nil)); end

  # Create the index.
  #
  # body   - The index settings and mappings as a Hash or a JSON encoded String
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#58
  def create(body, params = T.unsafe(nil)); end

  # Internal: Returns a Hash containing default parameters.
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#565
  def defaults; end

  # Delete the index.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-index.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#70
  def delete(params = T.unsafe(nil)); end

  # Delete an alias from this index.
  #
  # name   - Name of the alias to delete from the index
  # params - Parameters Hash
  #
  # Examples
  #
  #   index.delete_alias("foo")
  #   index.delete_alias(["foo", "bar"])
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#220
  def delete_alias(name, params = T.unsafe(nil)); end

  # Delete documents by query
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#511
  def delete_by_query(query, params = T.unsafe(nil)); end

  # Provides access to document-level API commands. These commands will be
  # scoped to this index and the give `type`, if any.
  #
  # type - The document type as a String
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html
  #
  # Returns a Docs instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#350
  def docs(type = T.unsafe(nil)); end

  # Check for the existence of the index. If a `:type` option is given, then
  # we will check for the existence of the document type in the index.
  #
  # params - Parameters Hash
  #   :type - optional type mapping as a String
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html
  # and https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-types-exists.html
  #
  # Returns true if the index (or type) exists
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#44
  def exist?(params = T.unsafe(nil)); end

  # Check for the existence of the index. If a `:type` option is given, then
  # we will check for the existence of the document type in the index.
  #
  # params - Parameters Hash
  #   :type - optional type mapping as a String
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html
  # and https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-types-exists.html
  #
  # Returns true if the index (or type) exists
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#44
  def exists?(params = T.unsafe(nil)); end

  # Flush one or more indices to the index storage.
  #
  # params - Parameters Hash
  #   :index - set to "_all" to flush all indices
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-flush.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#262
  def flush(params = T.unsafe(nil)); end

  # Force merge one or more indices. Force merging an index allows to
  # reduce the number of segments but can be resource intensive.
  #
  # params - Parameters Hash
  #   :index - set to "_all" to force merge all indices
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#276
  def forcemerge(params = T.unsafe(nil)); end

  # Return the named aliases associated with this index.
  #
  # name   - Name of the alias to look up
  # params - Parameters Hash
  #   :ignore_unavailable - What to do if a specified index name doesn’t
  #                         exist. If set to `true` then those indices are ignored.
  #
  # Examples
  #
  #   index.get_alias("*")       # returns all aliases for the current index
  #   index.get_alias("issue*")  # returns all aliases starting with "issue"
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#183
  def get_alias(name, params = T.unsafe(nil)); end

  # Return the aliases associated with this index.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#162
  def get_aliases(params = T.unsafe(nil)); end

  # Retrieve one or more mappings from the index. To retrieve a specific
  # mapping provide the name as the `:type` parameter.
  #
  # params - Parameters Hash
  #   :type - specific document type as a String or Array of Strings
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#134
  def get_mapping(params = T.unsafe(nil)); end

  # Retrieve the settings for the index.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-settings.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#106
  def get_settings(params = T.unsafe(nil)); end

  # Retrieve one or more mappings from the index. To retrieve a specific
  # mapping provide the name as the `:type` parameter.
  #
  # params - Parameters Hash
  #   :type - specific document type as a String or Array of Strings
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#134
  def mapping(params = T.unsafe(nil)); end

  # Execute an array of percolate actions in bulk. Results are returned in
  # an array in the order the actions were sent. The current index name will
  # be passed to the API call as part of the request parameters.
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-percolate.html#_multi_percolate_api
  #
  # params - Optional request parameters as a Hash
  # block  - Passed to a MultiPercolate instance which assembles the
  #          percolate actions into a single request.
  #
  # Examples
  #
  #   # block form
  #   multi_percolate do |m|
  #     m.percolate({ author: "pea53" }, { type: 'default-type' })
  #     m.count({ author: "pea53" }, { type: 'type2' })
  #     ...
  #   end
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#505
  def multi_percolate(params = T.unsafe(nil), &block); end

  # Execute an array of searches in bulk. Results are returned in an
  # array in the order the queries were sent. The current index name
  # will be passed to the multi_search API call as part of the request
  # parameters.
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html
  #
  # params - Parameters Hash that will be passed to the API call.
  # block  - Required block that is used to accumulate searches.
  #          All the operations will be passed to the search cluster
  #          via a single API request.
  #
  # Yields a MultiSearch instance for building multi_search API call
  # bodies.
  #
  # Examples
  #
  #   index.multi_search do |m|
  #     m.search({query: {match_all: {}}, size: 0)
  #     m.search({query: {field: {"author" => "grantr"}}}, type: 'tweet')
  #     ...
  #   end
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#478
  def multi_search(params = T.unsafe(nil), &block); end

  # Returns the value of attribute name.
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#32
  def name; end

  # Delete documents from one or more indices and one or more types based
  # on a query using Elasticsearch's _delete_by_query API.
  #
  # See Client#native_delete_by_query for more information.
  #
  # Returns a Hash of statistics about the delete operations as returned by
  # _delete_by_query.
  #
  # Raises ElastomerClient::Client::IncompatibleVersionException if this version
  # of Elasticsearch does not support _delete_by_query.
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#525
  def native_delete_by_query(query, params = T.unsafe(nil)); end

  # Open the index.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#82
  def open(params = T.unsafe(nil)); end

  # Force merge one or more indices. Force merging an index allows to
  # reduce the number of segments but can be resource intensive.
  #
  # params - Parameters Hash
  #   :index - set to "_all" to force merge all indices
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html
  #
  # Returns the response body as a Hash
  # DEPRECATED:  ES 5.X has removed the `/_optimize` endpoint.
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#276
  def optimize(params = T.unsafe(nil)); end

  # Constructs a Percolator with the given id on this index.
  #
  # Examples
  #
  #   index.percolator "1"
  #
  # Returns a Percolator
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#546
  def percolator(id); end

  # Register specific mapping definition for a specific type.
  #
  # type   - Name of the mapping to update as a String
  # body   - The mapping values to update as a Hash or a JSON encoded String
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#149
  def put_mapping(type, body, params = T.unsafe(nil)); end

  # Provides insight into ongoing index shard recoveries. Recovery status
  # may be reported for specific indices, or cluster-wide.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-recovery.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#291
  def recovery(params = T.unsafe(nil)); end

  # Explicitly refresh one or more index, making all operations performed
  # since the last refresh available for search.
  #
  # params - Parameters Hash
  #   :index - set to "_all" to refresh all indices
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-refresh.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#249
  def refresh(params = T.unsafe(nil)); end

  # Create a new Scroller instance for scanning all results from a `query`.
  # The Scroller will be scoped to the current index. The Scroller is
  # configured to use `scan` semantics which are more efficient than a
  # standard scroll query; the caveat is that the returned documents cannot
  # be sorted.
  #
  # query  - The query to scan as a Hash or a JSON encoded String
  # opts   - Options Hash
  #   :index  - the name of the index to search
  #   :type   - the document type to search
  #   :scroll - the keep alive time of the scrolling request (5 minutes by default)
  #   :size   - the number of documents per shard to fetch per scroll
  #
  # Examples
  #
  #   scan = index.scan('{"query":{"match_all":{}}}')
  #   scan.each_document do |document|
  #     document['_id']
  #     document['_source']
  #   end
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html
  #
  # Returns a new Scroller instance
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#447
  def scan(query, opts = T.unsafe(nil)); end

  # Create a new Scroller instance for scrolling all results from a `query`.
  # The Scroller will be scoped to the current index.
  #
  # query  - The query to scroll as a Hash or a JSON encoded String
  # opts   - Options Hash
  #   :index  - the name of the index to search
  #   :type   - the document type to search
  #   :scroll - the keep alive time of the scrolling request (5 minutes by default)
  #   :size   - the number of documents per shard to fetch per scroll
  #
  # Examples
  #
  #   scroll = index.scroll('{"query":{"match_all":{}},"sort":{"date":"desc"}}')
  #   scroll.each_document do |document|
  #     document['_id']
  #     document['_source']
  #   end
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html
  #
  # Returns a new Scroller instance
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#418
  def scroll(query, opts = T.unsafe(nil)); end

  # Retrieve low level Lucene segments information for shards of one
  # or more indices.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-segments.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#337
  def segments(params = T.unsafe(nil)); end

  # Retrieve the settings for the index.
  #
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-settings.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#106
  def settings(params = T.unsafe(nil)); end

  # Retrieve statistics about one or more indices. Specific statistics
  # can be retrieved with parameters.
  #
  # params - Parameters Hash
  #   :stats - a single stats value or an Array of stats values
  #
  # Examples
  #
  #   stats(stats: "docs")
  #   stats(stats: %w[flush merge])
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-stats.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#324
  def stats(params = T.unsafe(nil)); end

  # Exposes the `/_suggest` endpoint of the Elasticsearch API.
  #
  # query  - The query body as a Hash
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#363
  def suggest(query, params = T.unsafe(nil)); end

  # Update documents by query using Elasticsearch's _update_by_query API.
  #
  # See Client#update_by_query for more information.
  #
  # Returns a Hash of statistics about the update operations as returned by
  # _update_by_query.
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#535
  def update_by_query(query, params = T.unsafe(nil)); end

  # Register specific mapping definition for a specific type.
  #
  # type   - Name of the mapping to update as a String
  # body   - The mapping values to update as a Hash or a JSON encoded String
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#149
  def update_mapping(type, body, params = T.unsafe(nil)); end

  # Internal: Add default parameters to the `params` Hash and then apply
  # `overrides` to the params if any are given.
  #
  # params    - Parameters Hash
  # overrides - Optional parameter overrides as a Hash
  #
  # Returns a new params Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#557
  def update_params(params, overrides = T.unsafe(nil)); end

  # Change specific index level settings in real time.
  #
  # body   - The index settings as a Hash or a JSON encoded String
  # params - Parameters Hash
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/index.rb#120
  def update_settings(body, params = T.unsafe(nil)); end
end

# Provide some nice errors for common Elasticsearch exceptions. These are
# all subclasses of the more general RequestError
#
# source://elastomer-client//lib/elastomer_client/client/errors.rb#89
class ElastomerClient::Client::IndexNotFoundError < ::ElastomerClient::Client::RequestError; end

# 250 MB
#
# source://elastomer-client//lib/elastomer_client/client.rb#19
ElastomerClient::Client::MAX_REQUEST_SIZE = T.let(T.unsafe(nil), Integer)

# The MultiPercolate class is a helper for accumulating and submitting
# multi_percolate API requests. Instances of the MultiPercolate class
# accumulate percolate actions and then issue a single API request to
# Elasticsearch, which runs all accumulated percolate actions in parallel
# and returns each result hash aggregated into an array of result
# hashes.
#
# Instead of instantiating this class directly, use
# the block form of Client#multi_percolate.
#
# source://elastomer-client//lib/elastomer_client/client/multi_percolate.rb#61
class ElastomerClient::Client::MultiPercolate
  # Create a new MultiPercolate instance for accumulating percolate actions
  # and submitting them all as a single request.
  #
  # client - ElastomerClient::Client used for HTTP requests to the server
  # params - Parameters Hash to pass to the Client#multi_percolate method
  #
  # @return [MultiPercolate] a new instance of MultiPercolate
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_percolate.rb#68
  def initialize(client, params = T.unsafe(nil)); end

  # Internal: Add an action to the pending request. Actions can be
  # either headers or bodies. The first action must be a percolate header,
  # followed by a body, then alternating headers and bodies.
  #
  # action - the Hash (header or body) to add to the pending request
  #
  # Returns this MultiPercolate instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_percolate.rb#122
  def add_to_actions(action); end

  # Execute the multi_percolate call with the accumulated percolate actions.
  # If the accumulated actions list is empty then no action is taken.
  #
  # Returns the response body Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_percolate.rb#106
  def call; end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_percolate.rb#75
  def client; end

  # Add a percolate acount action to the multi percolate request. This
  # percolate count action will not be executed until the multi_percolate
  # API call is made.
  #
  # header - A Hash of the index and type, if not provided in the params
  # doc    - A Hash of the document
  #
  # Returns this MultiPercolate instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_percolate.rb#97
  def count(doc, header = T.unsafe(nil)); end

  # Add a percolate action to the multi percolate request. This percolate
  # action will not be executed until the multi_percolate API call is made.
  #
  # header - A Hash of the index and type, if not provided in the params
  # doc    - A Hash of the document
  #
  # Returns this MultiPercolate instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_percolate.rb#84
  def percolate(doc, header = T.unsafe(nil)); end
end

# The MultiSearch class is a helper for accumulating and submitting
# multi_search API requests. Instances of the MultiSearch class
# accumulate searches and then issue a single API request to
# Elasticsearch, which runs all accumulated searches in parallel
# and returns each result hash aggregated into an array of result
# hashes.
#
# Instead of instantiating this class directly, use
# the block form of Client#multi_search.
#
# source://elastomer-client//lib/elastomer_client/client/multi_search.rb#61
class ElastomerClient::Client::MultiSearch
  # Create a new MultiSearch instance for accumulating searches and
  # submitting them all as a single request.
  #
  # client - ElastomerClient::Client used for HTTP requests to the server
  # params - Parameters Hash to pass to the Client#multi_search method
  #
  # @return [MultiSearch] a new instance of MultiSearch
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_search.rb#68
  def initialize(client, params = T.unsafe(nil)); end

  # Internal: Add an action to the pending request. Actions can be
  # either search params or query bodies. The first action must be
  # a search params hash, followed by a query body, then alternating
  # params and queries.
  #
  # action - the Hash (params or query) to add to the pending request
  #
  # Returns this MultiSearch instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_search.rb#110
  def add_to_actions(action); end

  # Execute the multi_search call with the accumulated searches. If
  # the accumulated actions list is empty then no action is taken.
  #
  # Returns the response body Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_search.rb#93
  def call; end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_search.rb#75
  def client; end

  # Add a search to the multi search request. This search will not
  # be executed until the multi_search API call is made.
  #
  # query  - The query body as a Hash
  # params - Parameters Hash
  #
  # Returns this MultiSearch instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/multi_search.rb#84
  def search(query, params = T.unsafe(nil)); end
end

# source://elastomer-client//lib/elastomer_client/client/native_delete_by_query.rb#22
class ElastomerClient::Client::NativeDeleteByQuery
  # @return [NativeDeleteByQuery] a new instance of NativeDeleteByQuery
  #
  # source://elastomer-client//lib/elastomer_client/client/native_delete_by_query.rb#25
  def initialize(client, query, parameters); end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/native_delete_by_query.rb#23
  def client; end

  # source://elastomer-client//lib/elastomer_client/client/native_delete_by_query.rb#31
  def execute; end

  # Returns the value of attribute parameters.
  #
  # source://elastomer-client//lib/elastomer_client/client/native_delete_by_query.rb#23
  def parameters; end

  # Returns the value of attribute query.
  #
  # source://elastomer-client//lib/elastomer_client/client/native_delete_by_query.rb#23
  def query; end
end

# source://elastomer-client//lib/elastomer_client/client/nodes.rb#19
class ElastomerClient::Client::Nodes
  # Create a new nodes client for making API requests that pertain to
  # the health and management individual nodes.
  #
  # client - ElastomerClient::Client used for HTTP requests to the server
  # node_id - The node ID as a String or an Array of node IDs
  #
  # @return [Nodes] a new instance of Nodes
  #
  # source://elastomer-client//lib/elastomer_client/client/nodes.rb#26
  def initialize(client, node_id); end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/nodes.rb#31
  def client; end

  # Get the current hot threads on each node in the cluster. The return
  # value is a human formatted String - i.e. a String with newlines and
  # other formatting characters suitable for display in a terminal window.
  #
  # params - Parameters Hash
  #   :node_id  - a single node ID or Array of node IDs
  #   :threads  - number of hot threads to provide
  #   :interval - sampling interval [default is 500ms]
  #   :type     - the type to sample: "cpu", "wait", or "block"
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-hot-threads.html
  #
  # Returns the response as a String
  #
  # source://elastomer-client//lib/elastomer_client/client/nodes.rb#90
  def hot_threads(params = T.unsafe(nil)); end

  # Retrieve one or more (or all) of the cluster nodes information. By
  # default all information is returned from all ndoes. You can select the
  # information to be returned by passing in the `:info` from the list of
  # "settings", "os", "process", "jvm", "thread_pool", "network",
  # "transport", "http" and "plugins".
  #
  # params - Parameters Hash
  #   :node_id - a single node ID or Array of node IDs
  #   :info    - a single information attribute or an Array
  #
  # Examples
  #
  #   info(info: "_all")
  #   info(info: "os")
  #   info(info: %w[os jvm process])
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-info.html
  #
  # Returns the response as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/nodes.rb#52
  def info(params = T.unsafe(nil)); end

  # Returns the value of attribute node_id.
  #
  # source://elastomer-client//lib/elastomer_client/client/nodes.rb#31
  def node_id; end

  # Retrieve one or more (or all) of the cluster nodes statistics. For 1.x
  # stats filtering, use the :stats parameter key.
  #
  # params - Parameters Hash
  #   :node_id - a single node ID or Array of node IDs
  #   :stats   - a single stats value or an Array of stats values
  #
  # Examples
  #
  #   stats(stats: "thread_pool")
  #   stats(stats: %w[os process])
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-stats.html
  #
  # Returns the response as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/nodes.rb#72
  def stats(params = T.unsafe(nil)); end

  # Internal: Add default parameters to the `params` Hash and then apply
  # `overrides` to the params if any are given.
  #
  # params    - Parameters Hash
  # overrides - Optional parameter overrides as a Hash
  #
  # Returns a new params Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/nodes.rb#102
  def update_params(params, overrides = T.unsafe(nil)); end
end

# Error raised when a conflict is detected between the UUID sent in the
# 'X-Opaque-Id' request header and the one received in the response header.
#
# source://elastomer-client//lib/elastomer_client/middleware/opaque_id.rb#69
class ElastomerClient::Client::OpaqueIdError < ::ElastomerClient::Client::Error; end

# source://elastomer-client//lib/elastomer_client/client/errors.rb#81
class ElastomerClient::Client::ParsingError < ::ElastomerClient::Client::Error; end

# source://elastomer-client//lib/elastomer_client/client/percolator.rb#6
class ElastomerClient::Client::Percolator
  # Create a new Percolator for managing a query.
  #
  # client     - ElastomerClient::Client used for HTTP requests to the server
  # index_name - The index name
  # id         - The _id for the query
  #
  # @return [Percolator] a new instance of Percolator
  #
  # source://elastomer-client//lib/elastomer_client/client/percolator.rb#13
  def initialize(client, index_name, id); end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/percolator.rb#19
  def client; end

  # Create a percolator query.
  #
  # Examples
  #
  #   percolator = $client.index("default-index").percolator "1"
  #   percolator.create query: { match_all: { } }
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/percolator.rb#29
  def create(body, params = T.unsafe(nil)); end

  # Internal: Returns a Hash containing default parameters.
  #
  # source://elastomer-client//lib/elastomer_client/client/percolator.rb#73
  def defaults; end

  # Delete a percolator query.
  #
  # Examples
  #
  #   percolator = $client.index("default-index").percolator "1"
  #   percolator.delete
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/percolator.rb#55
  def delete(params = T.unsafe(nil)); end

  # Checks for the existence of a percolator query.
  #
  # Examples
  #
  #   percolator = $client.index("default-index").percolator "1"
  #   percolator.exists?
  #
  # Returns a boolean
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/percolator.rb#68
  def exists?(params = T.unsafe(nil)); end

  # Gets a percolator query.
  #
  # Examples
  #
  #   percolator = $client.index("default-index").percolator "1"
  #   percolator.get
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/percolator.rb#42
  def get(params = T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://elastomer-client//lib/elastomer_client/client/percolator.rb#19
  def id; end

  # Returns the value of attribute index_name.
  #
  # source://elastomer-client//lib/elastomer_client/client/percolator.rb#19
  def index_name; end
end

# source://elastomer-client//lib/elastomer_client/client/errors.rb#90
class ElastomerClient::Client::QueryParsingError < ::ElastomerClient::Client::RequestError; end

# source://elastomer-client//lib/elastomer_client/client/errors.rb#92
class ElastomerClient::Client::RejectedExecutionError < ::ElastomerClient::Client::RequestError; end

# source://elastomer-client//lib/elastomer_client/client/repository.rb#11
class ElastomerClient::Client::Repository
  # Create a new index client for making API requests that pertain to
  # the health and management individual indexes.
  #
  # client - ElastomerClient::Client used for HTTP requests to the server
  # name   - The name of the index as a String or an Array of names
  #
  # @return [Repository] a new instance of Repository
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#17
  def initialize(client, name = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#22
  def client; end

  # Create the repository.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_repositories
  #
  # body   - The repository type and settings as a Hash or a JSON encoded String
  # params - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#49
  def create(body, params = T.unsafe(nil)); end

  # Internal: Returns a Hash containing default parameters.
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#124
  def defaults; end

  # Delete the repository.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_repositories
  #
  # params - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#94
  def delete(params = T.unsafe(nil)); end

  # Check for the existence of the repository.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_repositories
  #
  # params - Parameters Hash
  #
  # Returns true if the repository exists
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#30
  def exist?(params = T.unsafe(nil)); end

  # Check for the existence of the repository.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_repositories
  #
  # params - Parameters Hash
  #
  # Returns true if the repository exists
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#30
  def exists?(params = T.unsafe(nil)); end

  # Get repository type and settings.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_repositories
  #
  # params - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#60
  def get(params = T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#22
  def name; end

  # Provides access to snapshot API commands. These commands will be
  # scoped to this repository and the given snapshot name.
  #
  # snapshot - The snapshot name as a String, or nil for all snapshots.
  #
  # Returns a Snapshot instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#105
  def snapshot(snapshot = T.unsafe(nil)); end

  # Provides access to snapshot API commands. These commands will be
  # scoped to this repository and the given snapshot name.
  #
  # snapshot - The snapshot name as a String, or nil for all snapshots.
  #
  # Returns a Snapshot instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#105
  def snapshots(snapshot = T.unsafe(nil)); end

  # Get status information on snapshots in progress.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_repositories
  #
  # params - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#71
  def status(params = T.unsafe(nil)); end

  # Update the repository.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_repositories
  #
  # body   - The repository type and settings as a Hash or a JSON encoded String
  # params - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#83
  def update(body, params = T.unsafe(nil)); end

  # Internal: Add default parameters to the `params` Hash and then apply
  # `overrides` to the params if any are given.
  #
  # params    - Parameters Hash
  # overrides - Optional parameter overrides as a Hash
  #
  # Returns a new params Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/repository.rb#117
  def update_params(params, overrides = T.unsafe(nil)); end
end

# source://elastomer-client//lib/elastomer_client/client/errors.rb#84
class ElastomerClient::Client::RequestError < ::ElastomerClient::Client::Error; end

# source://elastomer-client//lib/elastomer_client/client/errors.rb#85
class ElastomerClient::Client::RequestSizeError < ::ElastomerClient::Client::Error; end

# source://elastomer-client//lib/elastomer_client/client/errors.rb#80
class ElastomerClient::Client::ResourceNotFound < ::ElastomerClient::Client::Error; end

# Provides access to the versioned REST API specs for Elasticsearch.
#
# source://elastomer-client//lib/elastomer_client/client/rest_api_spec.rb#7
module ElastomerClient::Client::RestApiSpec
  class << self
    # Returns an ApiSpec instance for the given Elasticsearcion version. This
    # method will load the ApiSpec version class if it has not already been
    # defined. This prevents bloat by only loading the version specs that are
    # needed.
    #
    # Because of this lazy loading, this method is _not_ thread safe.
    #
    # version - the Elasticsearch version String
    #
    # Returns the requested ApiSpec version if available
    #
    # source://elastomer-client//lib/elastomer_client/client/rest_api_spec.rb#19
    def api_spec(version); end

    # Internal: Load the specific ApiSpec version class for the given version.
    #
    # source://elastomer-client//lib/elastomer_client/client/rest_api_spec.rb#26
    def load_api_spec(version); end

    # Internal: Convert a dotted version String into an underscore format
    # suitable for use in Ruby class names.
    #
    # source://elastomer-client//lib/elastomer_client/client/rest_api_spec.rb#37
    def to_class_version(version); end
  end
end

# This is the superclass for the version specific API Spec classes that will
# be generated using the `script/generate-rest-api-spec` script. Each version
# of Elasticsarch we support will have it's own ApiSpec class that will
# validate the API request params for that particular version.
#
# source://elastomer-client//lib/elastomer_client/client/rest_api_spec/api_spec.rb#9
class ElastomerClient::Client::RestApiSpec::ApiSpec
  # @return [ApiSpec] a new instance of ApiSpec
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/api_spec.rb#14
  def initialize; end

  # Returns the value of attribute common_params.
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/api_spec.rb#12
  def common_params; end

  # Internal: Retrieve the `RestApi` descriptor for the given named `api`. If
  # an unkonwn `api` is passed in, then `nil` is returned.
  #
  # api - the api descriptor name as a String
  #
  # Returns a RestApi instance or nil.
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/api_spec.rb#116
  def get(api); end

  # Returns the value of attribute rest_apis.
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/api_spec.rb#11
  def rest_apis; end

  # Select the common request parameters from the given params.
  #
  # from - the Hash containing the request params
  #
  # Returns a new Hash containing the valid common request params
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/api_spec.rb#79
  def select_common_params(from:); end

  # Given an API descriptor name and a set of request parameters, select those
  # params that are accepted by the API endpoint.
  #
  # api  - the api descriptor name as a String
  # from - the Hash containing the request params
  #
  # Returns a new Hash containing the valid params for the api
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/api_spec.rb#27
  def select_params(api:, from:); end

  # Given an API descriptor name and a set of request path parts, select those
  # parts that are accepted by the API endpoint.
  #
  # api  - the api descriptor name as a String
  # from - the Hash containing the path parts
  #
  # Returns a new Hash containing the valid path parts for the api
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/api_spec.rb#54
  def select_parts(api:, from:); end

  # Returns `true` if the param is a common request parameter.
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/api_spec.rb#85
  def valid_common_param?(param); end

  # Given an API descriptor name and a single request parameter, returns
  # `true` if the parameter is valid for the given API. This method always
  # returns `true` if the API is unknown.
  #
  # api   - the api descriptor name as a String
  # param - the request parameter name as a String
  #
  # Returns `true` if the param is valid for the API.
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/api_spec.rb#41
  def valid_param?(api:, param:); end

  # Given an API descriptor name and a single path part, returns `true` if the
  # path part is valid for the given API. This method always returns `true` if
  # the API is unknown.
  #
  # api  - the api descriptor name as a String
  # part - the path part name as a String
  #
  # Returns `true` if the path part is valid for the API.
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/api_spec.rb#68
  def valid_part?(api:, part:); end

  # Given an API descriptor name and a set of request parameters, ensure that
  # all the request parameters are valid for the API endpoint. If an invalid
  # parameter is found then an IllegalArgument exception is raised.
  #
  # api  - the api descriptor name as a String
  # from - the Hash containing the request params
  #
  # Returns the params unmodified
  # Raises an IllegalArgument exception if an invalid parameter is found.
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/api_spec.rb#98
  def validate_params!(api:, params:); end
end

# source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#6
class ElastomerClient::Client::RestApiSpec::RestApi
  extend ::Forwardable

  # @return [RestApi] a new instance of RestApi
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#17
  def initialize(documentation:, methods:, url:, body: T.unsafe(nil)); end

  # Returns the value of attribute body.
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#12
  def body; end

  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#24
  def body?; end

  # Returns the value of attribute documentation.
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#9
  def documentation; end

  # Returns the value of attribute methods.
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#10
  def methods; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def select_params(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def select_parts(*args, **_arg1, &block); end

  # Returns the value of attribute url.
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#11
  def url; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def valid_param?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def valid_part?(*args, **_arg1, &block); end
end

# source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#28
class ElastomerClient::Client::RestApiSpec::RestApi::Url
  # @return [Url] a new instance of Url
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#34
  def initialize(path:, paths: T.unsafe(nil), parts: T.unsafe(nil), params: T.unsafe(nil)); end

  # Returns the value of attribute params.
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#32
  def params; end

  # Returns the value of attribute parts.
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#31
  def parts; end

  # Returns the value of attribute path.
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#29
  def path; end

  # Returns the value of attribute paths.
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#30
  def paths; end

  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#52
  def select_params(from:); end

  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#44
  def select_parts(from:); end

  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#56
  def valid_param?(param); end

  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/rest_api_spec/rest_api.rb#48
  def valid_part?(part); end
end

# source://elastomer-client//lib/elastomer_client/client/errors.rb#82
class ElastomerClient::Client::SSLError < ::ElastomerClient::Client::Error; end

# source://elastomer-client//lib/elastomer_client/client/scroller.rb#147
class ElastomerClient::Client::Scroller
  # Create a new scroller that can be used to iterate over all the documents
  # returned by the `query`. The Scroller supports both the 'scan' and the
  # 'scroll' search types.
  #
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html
  # and https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-search-type.html#scan
  #
  # client - ElastomerClient::Client used for HTTP requests to the server
  # query  - The query to scroll as a Hash or a JSON encoded String
  # opts   - Options Hash
  #   :index       - the name of the index to search
  #   :type        - the document type to search
  #   :scroll      - the keep alive time of the scrolling request (5 minutes by default)
  #   :size        - the number of documents per shard to fetch per scroll
  #
  # Examples
  #
  #   scan = Scroller.new(client, {query: {match_all: {}}}, index: 'test-1')
  #   scan.each_document { |doc|
  #     doc['_id']
  #     doc['_source']
  #   }
  #
  # @return [Scroller] a new instance of Scroller
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#171
  def initialize(client, query, opts = T.unsafe(nil)); end

  # Terminate the scroll query. This will remove the search context from the
  # cluster and no further documents can be returned by this Scroller
  # instance.
  #
  # Returns nil if the `scroll_id` is not valid; returns the response body if
  # the `scroll_id` was cleared.
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#244
  def clear!; end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#180
  def client; end

  # Internal: Perform the actual scroll requests. This method wil call out
  # to the `Client#start_scroll` and `Client#continue_scroll` methods while
  # keeping track of the `scroll_id` internally.
  #
  # Returns the response body as a Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#256
  def do_scroll; end

  # Iterate over all the search results from the scan query.
  #
  # block  - The block will be called for each set of matching documents
  #          returned from executing the scan query.
  #
  # Yields a hits Hash containing the 'total' number of hits, current
  # 'offset' into that total, and the Array of 'hits' document Hashes.
  #
  # Examples
  #
  #   scan.each do |hits|
  #     hits['total']
  #     hits['offset']
  #     hits['hits'].each { |document| ... }
  #   end
  #
  # Returns this Scroller instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#199
  def each; end

  # Iterate over each document from the scan query. This method is just a
  # convenience wrapper around the `each` method; it iterates the Array of
  # documents and passes them one by one to the block.
  #
  # block  - The block will be called for each document returned from
  #          executing the scan query.
  #
  # Yields a document Hash.
  #
  # Examples
  #
  #   scan.each_document do |document|
  #     document['_id']
  #     document['_source']
  #   end
  #
  # Returns this Scroller instance.
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#234
  def each_document(&block); end

  # Returns the value of attribute query.
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#180
  def query; end

  # Returns the value of attribute scroll_id.
  #
  # source://elastomer-client//lib/elastomer_client/client/scroller.rb#180
  def scroll_id; end
end

# source://elastomer-client//lib/elastomer_client/client/errors.rb#91
class ElastomerClient::Client::SearchContextMissing < ::ElastomerClient::Client::RequestError; end

# source://elastomer-client//lib/elastomer_client/client/errors.rb#83
class ElastomerClient::Client::ServerError < ::ElastomerClient::Client::Error; end

# source://elastomer-client//lib/elastomer_client/client/snapshot.rb#16
class ElastomerClient::Client::Snapshot
  # Create a new snapshot object for making API requests that pertain to
  # creating, restoring, deleting, and retrieving snapshots.
  #
  # client     - ElastomerClient::Client used for HTTP requests to the server
  # repository - The name of the repository as a String. Cannot be nil if
  #              snapshot name is not nil.
  # name       - The name of the snapshot as a String
  #
  # @return [Snapshot] a new instance of Snapshot
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#24
  def initialize(client, repository = T.unsafe(nil), name = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#31
  def client; end

  # Create the snapshot.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_snapshot
  #
  # body   - The snapshot options as a Hash or a JSON encoded String
  # params - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#58
  def create(body = T.unsafe(nil), params = T.unsafe(nil)); end

  # Internal: Returns a Hash containing default parameters.
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#124
  def defaults; end

  # Delete the snapshot.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_snapshot
  #
  # params - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#105
  def delete(params = T.unsafe(nil)); end

  # Check for the existence of the snapshot.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_snapshot
  #
  # params - Parameters Hash
  #
  # Returns true if the snapshot exists
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#39
  def exist?(params = T.unsafe(nil)); end

  # Check for the existence of the snapshot.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_snapshot
  #
  # params - Parameters Hash
  #
  # Returns true if the snapshot exists
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#39
  def exists?(params = T.unsafe(nil)); end

  # Get snapshot progress information.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_snapshot
  #
  # params - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#69
  def get(params = T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#31
  def name; end

  # Returns the value of attribute repository.
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#31
  def repository; end

  # Restore the snapshot.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_snapshot
  #
  # body   - The restore options as a Hash or a JSON encoded String
  # params - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#94
  def restore(body = T.unsafe(nil), params = T.unsafe(nil)); end

  # Get detailed snapshot status.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_snapshot
  #
  # params - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#82
  def status(params = T.unsafe(nil)); end

  # Internal: Add default parameters to the `params` Hash and then apply
  # `overrides` to the params if any are given.
  #
  # params    - Parameters Hash
  # overrides - Optional parameter overrides as a Hash
  #
  # Returns a new params Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/snapshot.rb#117
  def update_params(params, overrides = T.unsafe(nil)); end
end

# source://elastomer-client//lib/elastomer_client/client/tasks.rb#15
class ElastomerClient::Client::Tasks
  # Create a new Tasks for introspecting on internal cluster activity.
  # More context: https://www.elastic.co/guide/en/elasticsearch/reference/5.6/tasks.html
  #
  # client     - ElastomerClient::Client used for HTTP requests to the server
  #
  # Raises IncompatibleVersionException if caller attempts to access Tasks API on ES version < 5.0.0
  #
  # @return [Tasks] a new instance of Tasks
  #
  # source://elastomer-client//lib/elastomer_client/client/tasks.rb#23
  def initialize(client); end

  # Cancels a task or group of tasks using various filtering parameters.
  #
  # params - Hash of request parameters to include
  #
  # Examples
  #
  #   tasks.cancel actions: "*reindex"
  #   tasks.cancel actions: "*search", nodes: "DmteLdw1QmSgW3GZmjmoKA,DmteLdw1QmSgW3GZmjmoKB,DmteLdw1QmSgW3GZmjmoKC"
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/tasks.rb#171
  def cancel(params = T.unsafe(nil)); end

  # Cancels a task running on a particular node.
  # NOTE: the API docs note the behavior wrong for this call; "task_id:<task_id>" is really "<node_id>:<task_id>"
  # where "node_id" is a value from the "nodes" hash returned from the /_tasks endpoint, and "task_id" is
  # from the "tasks" child hash of any of the "nodes" entries of the /_tasks endpoint
  #
  # node_id         - the ES node hosting the task to be cancelled
  # task_id         - ID of the task to be cancelled
  # params          - Hash of request parameters to include
  #
  # Examples
  #
  #   tasks.cancel_by_id "DmteLdw1QmSgW3GZmjmoKA", 123
  #   tasks.cancel_by_id "DmteLdw1QmSgW3GZmjmoKA", 456, pretty: true
  #
  # Returns the response body as a Hash
  #
  # @raise [ArgumentError]
  #
  # source://elastomer-client//lib/elastomer_client/client/tasks.rb#154
  def cancel_by_id(node_id, task_id, params = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/tasks.rb#27
  def client; end

  # Fetch results from the generic _tasks endpoint.
  #
  # params - Hash of request parameters, including:
  #
  # Examples
  #
  #   tasks.get
  #   tasks.get nodes: "DmteLdw1QmSgW3GZmjmoKA,DmteLdw1QmSgW3GZmjmoKB", actions: "cluster:*", detailed: true
  #
  # Examples (ES 5+ only)
  #
  #   tasks.get group_by: "parents"
  #   tasks.get group_by: "parents", actions: "*reindex", ...
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/tasks.rb#44
  def get(params = T.unsafe(nil)); end

  # Fetch results from the _tasks endpoint for a particular cluster node and task ID.
  # NOTE: the API docs note the behavior wrong for this call; "task_id:<task_id>" is really "<node_id>:<task_id>"
  # where "node_id" is a value from the "nodes" hash returned from the /_tasks endpoint, and "task_id" is
  # from the "tasks" child hash of any of the "nodes" entries of the /_tasks endpoint
  #
  # node_id - the name of the ES cluster node hosting the target task
  # task_id - the numerical ID of the task to return data about in the response
  # params  - Hash of request parameters to include
  #
  # Examples
  #
  #  tasks.get_by_id "DmteLdw1QmSgW3GZmjmoKA", 123
  #  tasks.get_by_id "DmteLdw1QmSgW3GZmjmoKA", 456, pretty: true
  #
  # Returns the response body as a Hash
  #
  # @raise [ArgumentError]
  #
  # source://elastomer-client//lib/elastomer_client/client/tasks.rb#64
  def get_by_id(node_id, task_id, params = T.unsafe(nil)); end

  # Fetch task details for all child tasks of the specified parent task.
  # NOTE: the API docs note the behavior wrong for this call: "parentTaskId:<task_id>"
  # is not the correct syntax for the parent_task_id param value. The correct
  # value syntax is "<parent_node_id>:<parent_task_id>"
  #
  # parent_node_id - ID of the node the parent task is hosted by
  # parent_task_id - ID of a parent task who's child tasks' data will be returned in the response
  # params         - Hash of request parameters to include
  #
  # Examples
  #
  #   tasks.get_by_parent_id "DmteLdw1QmSgW3GZmjmoKA", 123
  #   tasks.get_by_parent_id "DmteLdw1QmSgW3GZmjmoKB", 456, :detailed => true
  #
  # Returns the response body as a Hash
  #
  # @raise [ArgumentError]
  #
  # source://elastomer-client//lib/elastomer_client/client/tasks.rb#88
  def get_by_parent_id(parent_node_id, parent_task_id, params = T.unsafe(nil)); end

  # Wait for the specified amount of time (10 seconds by default) for some task(s) to complete.
  # Filters for task(s) to wait upon using same IDs and filter params as Tasks#get_by_id(params)
  #
  # node_id - the ID of the node on which the target task is hosted
  # task_id - the ID of the task to wait on
  # timeout - time for call to await target tasks completion before returning
  # params  - Hash of request params to include (mostly task filters in this context)
  #
  # Examples
  #
  # tasks.wait_by_id "DmteLdw1QmSgW3GZmjmoKA", 123, "15s"
  # tasks.wait_by_id "DmteLdw1QmSgW3GZmjmoKA", 456, "30s", actions: "*search"
  #
  # Returns the response body as a Hash when timeout expires or target tasks complete
  #
  # @raise [ArgumentError]
  #
  # source://elastomer-client//lib/elastomer_client/client/tasks.rb#132
  def wait_by_id(node_id, task_id, timeout = T.unsafe(nil), params = T.unsafe(nil)); end

  # Wait for the specified amount of time (10 seconds by default) for some task(s) to complete.
  # Filters for task(s) to wait upon using same filter params as Tasks#get(params)
  #
  # timeout - maximum time to wait for target task to complete before returning, example: "5s"
  # params  - Hash of request params to include (mostly task filters in this context)
  #
  # Examples
  #
  # tasks.wait_for "5s", actions: "*health"
  # tasks.wait_for("30s", actions: "*reindex", nodes: "DmteLdw1QmSgW3GZmjmoKA,DmteLdw1QmSgW3GZmjmoKB")
  #
  # Returns the response body as a Hash when timeout expires or target tasks complete
  # COMPATIBILITY WARNING: the response body differs between ES versions for this API
  #
  # source://elastomer-client//lib/elastomer_client/client/tasks.rb#114
  def wait_for(timeout = T.unsafe(nil), params = T.unsafe(nil)); end
end

# source://elastomer-client//lib/elastomer_client/client/template.rb#12
class ElastomerClient::Client::Template
  # Create a new template client for making API requests that pertain to
  # template management.
  #
  # client - ElastomerClient::Client used for HTTP requests to the server
  # name   - The name of the template as a String
  #
  # @return [Template] a new instance of Template
  #
  # source://elastomer-client//lib/elastomer_client/client/template.rb#20
  def initialize(client, name); end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/template.rb#25
  def client; end

  # Create the template on the cluster.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # template - The template as a Hash or a JSON encoded String
  # params   - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/template.rb#52
  def create(template, params = T.unsafe(nil)); end

  # Internal: Returns a Hash containing default parameters.
  #
  # source://elastomer-client//lib/elastomer_client/client/template.rb#82
  def defaults; end

  # Delete the template from the cluster.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html#delete
  #
  # params - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/template.rb#63
  def delete(params = T.unsafe(nil)); end

  # Returns true if the template already exists on the cluster.
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/template.rb#28
  def exist?(params = T.unsafe(nil)); end

  # Returns true if the template already exists on the cluster.
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/client/template.rb#28
  def exists?(params = T.unsafe(nil)); end

  # Get the template from the cluster.
  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html#getting
  #
  # params - Parameters Hash
  #
  # Returns the response body as a Hash
  #
  # source://elastomer-client//lib/elastomer_client/client/template.rb#40
  def get(params = T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://elastomer-client//lib/elastomer_client/client/template.rb#25
  def name; end

  # Internal: Add default parameters to the `params` Hash and then apply
  # `overrides` to the params if any are given.
  #
  # params    - Parameters Hash
  # overrides - Optional parameter overrides as a Hash
  #
  # Returns a new params Hash.
  #
  # source://elastomer-client//lib/elastomer_client/client/template.rb#75
  def update_params(params, overrides = T.unsafe(nil)); end
end

# Wrapper classes for specific Faraday errors.
#
# source://elastomer-client//lib/elastomer_client/client/errors.rb#78
class ElastomerClient::Client::TimeoutError < ::ElastomerClient::Client::Error; end

# source://elastomer-client//lib/elastomer_client/client/update_by_query.rb#32
class ElastomerClient::Client::UpdateByQuery
  # @return [UpdateByQuery] a new instance of UpdateByQuery
  #
  # source://elastomer-client//lib/elastomer_client/client/update_by_query.rb#35
  def initialize(client, query, parameters); end

  # Returns the value of attribute client.
  #
  # source://elastomer-client//lib/elastomer_client/client/update_by_query.rb#33
  def client; end

  # source://elastomer-client//lib/elastomer_client/client/update_by_query.rb#41
  def execute; end

  # Returns the value of attribute parameters.
  #
  # source://elastomer-client//lib/elastomer_client/client/update_by_query.rb#33
  def parameters; end

  # Returns the value of attribute query.
  #
  # source://elastomer-client//lib/elastomer_client/client/update_by_query.rb#33
  def query; end
end

# Parent class for all ElastomerClient errors.
#
# source://elastomer-client//lib/elastomer_client/client/errors.rb#6
class ElastomerClient::Error < ::StandardError; end

# source://elastomer-client//lib/elastomer_client/middleware/compress.rb#5
module ElastomerClient::Middleware; end

# Request middleware that compresses request bodies with GZip for supported
# versions of Elasticsearch.
#
# It will only compress when there is a request body that is a String. This
# middleware should be inserted after JSON serialization.
#
# source://elastomer-client//lib/elastomer_client/middleware/compress.rb#11
class ElastomerClient::Middleware::Compress < ::Faraday::Middleware
  # options - The Hash of "keyword" arguments.
  #           :compression - the compression level (0-9, default Zlib::DEFAULT_COMPRESSION)
  #
  # @return [Compress] a new instance of Compress
  #
  # source://elastomer-client//lib/elastomer_client/middleware/compress.rb#21
  def initialize(app, options = T.unsafe(nil)); end

  # source://elastomer-client//lib/elastomer_client/middleware/compress.rb#26
  def call(env); end

  # Returns the value of attribute compression.
  #
  # source://elastomer-client//lib/elastomer_client/middleware/compress.rb#17
  def compression; end
end

# source://elastomer-client//lib/elastomer_client/middleware/compress.rb#12
ElastomerClient::Middleware::Compress::CONTENT_ENCODING = T.let(T.unsafe(nil), String)

# source://elastomer-client//lib/elastomer_client/middleware/compress.rb#13
ElastomerClient::Middleware::Compress::GZIP = T.let(T.unsafe(nil), String)

# An Ethernet packet can hold 1500 bytes. No point in compressing anything smaller than that (plus some wiggle room).
#
# source://elastomer-client//lib/elastomer_client/middleware/compress.rb#15
ElastomerClient::Middleware::Compress::MIN_BYTES_FOR_COMPRESSION = T.let(T.unsafe(nil), Integer)

# Request middleware that encodes the body as JSON.
#
# Processes only requests with matching Content-type or those without a type.
# If a request doesn't have a type but has a body, it sets the Content-type
# to JSON MIME-type.
#
# Doesn't try to encode bodies that already are in string form.
#
# source://elastomer-client//lib/elastomer_client/middleware/encode_json.rb#12
class ElastomerClient::Middleware::EncodeJson < ::Faraday::Middleware
  # source://elastomer-client//lib/elastomer_client/middleware/encode_json.rb#49
  def add_content_type!(env); end

  # source://elastomer-client//lib/elastomer_client/middleware/encode_json.rb#16
  def call(env); end

  # source://elastomer-client//lib/elastomer_client/middleware/encode_json.rb#23
  def encode(data); end

  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/middleware/encode_json.rb#39
  def has_body?(env); end

  # source://elastomer-client//lib/elastomer_client/middleware/encode_json.rb#27
  def match_content_type(env); end

  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/middleware/encode_json.rb#34
  def process_request?(env); end

  # source://elastomer-client//lib/elastomer_client/middleware/encode_json.rb#43
  def request_type(env); end
end

# source://elastomer-client//lib/elastomer_client/middleware/encode_json.rb#13
ElastomerClient::Middleware::EncodeJson::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://elastomer-client//lib/elastomer_client/middleware/encode_json.rb#14
ElastomerClient::Middleware::EncodeJson::MIME_TYPE = T.let(T.unsafe(nil), String)

# Request middleware that raises an exception if the request body exceeds a
# `max_request_size`.
#
# source://elastomer-client//lib/elastomer_client/middleware/limit_size.rb#8
class ElastomerClient::Middleware::LimitSize < ::Faraday::Middleware
  # @return [LimitSize] a new instance of LimitSize
  #
  # source://elastomer-client//lib/elastomer_client/middleware/limit_size.rb#10
  def initialize(app = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://elastomer-client//lib/elastomer_client/middleware/limit_size.rb#17
  def call(env); end

  # Returns the value of attribute max_request_size.
  #
  # source://elastomer-client//lib/elastomer_client/middleware/limit_size.rb#15
  def max_request_size; end
end

# This Faraday middleware implements the "X-Opaque-Id" request / response
# headers for Elasticsearch. The X-Opaque-Id header, when provided on the
# request header, will be returned as a header in the response. This is
# useful in environments which reuse connections to ensure that cross-talk
# does not occur between two requests.
#
# The SecureRandom lib is used to generate a UUID string for each request.
# This value is used as the content for the "X-Opaque-Id" header. If the
# value is different between the request and the response, then an
# `ElastomerClient::Client::OpaqueIdError` is raised. In this case no response
# will be returned.
#
# See [Elasticsearch "X-Opaque-Id"
# header](https://github.com/elasticsearch/elasticsearch/issues/1202)
# for more details.
#
# source://elastomer-client//lib/elastomer_client/middleware/opaque_id.rb#23
class ElastomerClient::Middleware::OpaqueId < ::Faraday::Middleware
  # Faraday middleware implementation.
  #
  # env - Faraday environment Hash
  #
  # Returns the environment Hash
  #
  # source://elastomer-client//lib/elastomer_client/middleware/opaque_id.rb#32
  def call(env); end

  # Generate a UUID using the built-in SecureRandom class. This can be a
  # little slow at times, so we will reuse the same UUID and append an
  # incrementing counter.
  #
  # Returns the UUID string.
  #
  # source://elastomer-client//lib/elastomer_client/middleware/opaque_id.rb#51
  def generate_uuid; end
end

# source://elastomer-client//lib/elastomer_client/middleware/opaque_id.rb#25
ElastomerClient::Middleware::OpaqueId::COUNTER_MAX = T.let(T.unsafe(nil), Integer)

# source://elastomer-client//lib/elastomer_client/middleware/opaque_id.rb#24
ElastomerClient::Middleware::OpaqueId::X_OPAQUE_ID = T.let(T.unsafe(nil), String)

# Parse response bodies as JSON.
#
# source://elastomer-client//lib/elastomer_client/middleware/parse_json.rb#7
class ElastomerClient::Middleware::ParseJson < ::Faraday::Middleware
  # source://elastomer-client//lib/elastomer_client/middleware/parse_json.rb#11
  def call(environment); end

  # Parse the response body.
  #
  # source://elastomer-client//lib/elastomer_client/middleware/parse_json.rb#20
  def parse(body); end

  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/middleware/parse_json.rb#26
  def process_response?(env); end

  # source://elastomer-client//lib/elastomer_client/middleware/parse_json.rb#31
  def response_type(env); end
end

# source://elastomer-client//lib/elastomer_client/middleware/parse_json.rb#8
ElastomerClient::Middleware::ParseJson::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://elastomer-client//lib/elastomer_client/middleware/parse_json.rb#9
ElastomerClient::Middleware::ParseJson::MIME_TYPE = T.let(T.unsafe(nil), String)

# So you want to get notifications from your Elasticsearch client? Well,
# you've come to the right place!
#
#   require 'elastomer_client/notifications'
#
# Requiring this module will add ActiveSupport notifications to all
# Elasticsearch requests. To subscribe to those requests ...
#
#   ActiveSupport::Notifications.subscribe('request.client.elastomer') do |name, start_time, end_time, _, payload|
#     duration = end_time - start_time
#     $stderr.puts '[%s] %s %s (%.3f)' % [payload[:status], payload[:index], payload[:action], duration]
#   end
#
# The payload contains the following bits of information:
#
# * :index  - index name (if any)
# * :type   - document type (if any)
# * :action - the action being performed
# * :url    - request URL
# * :method - request method (:head, :get, :put, :post, :delete)
# * :status - response status code
#
# If you want to use your own notifications service then you will need to
# let ElastomerClient know by setting the `service` here in the Notifications
# module. The service should adhere to the ActiveSupport::Notifications
# specification.
#
#   ElastomerClient::Notifications.service = your_own_service
#
# source://elastomer-client//lib/elastomer_client/notifications.rb#39
module ElastomerClient::Notifications
  # Internal: Execute the given block and provide instrumentation info to
  # subscribers. The name we use for subscriptions is
  # `request.client.elastomer` and a supplemental payload is provided with
  # more information about the specific Elasticsearch request.
  #
  # path   - The full request path as a String
  # body   - The request body as a String or `nil`
  # params - The request params Hash
  # block  - The block that will be instrumented
  #
  # Returns the response from the block
  #
  # source://elastomer-client//lib/elastomer_client/notifications.rb#59
  def instrument(path, body, params); end

  class << self
    # Returns the value of attribute service.
    #
    # source://elastomer-client//lib/elastomer_client/notifications.rb#42
    def service; end

    # Sets the attribute service
    #
    # @param value the value to set the attribute service to.
    #
    # source://elastomer-client//lib/elastomer_client/notifications.rb#42
    def service=(_arg0); end
  end
end

# The name to subscribe to for notifications
#
# source://elastomer-client//lib/elastomer_client/notifications.rb#46
ElastomerClient::Notifications::NAME = T.let(T.unsafe(nil), String)

# source://elastomer-client//lib/elastomer_client/version.rb#4
ElastomerClient::VERSION = T.let(T.unsafe(nil), String)

# source://elastomer-client//lib/elastomer_client/version_support.rb#4
class ElastomerClient::VersionSupport
  # version - an Elasticsearch version string e.g., 5.6.6 or 8.7.0
  #
  # Raises ArgumentError if version is unsupported.
  #
  # @return [VersionSupport] a new instance of VersionSupport
  #
  # source://elastomer-client//lib/elastomer_client/version_support.rb#11
  def initialize(version); end

  # Returns true if Elasticsearch version is 8.x or higher.
  #
  # @return [Boolean]
  #
  # source://elastomer-client//lib/elastomer_client/version_support.rb#20
  def es_version_8_plus?; end

  # Returns the value of attribute version.
  #
  # source://elastomer-client//lib/elastomer_client/version_support.rb#6
  def version; end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::RepositoryStar`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::RepositoryStar`.

class Hydro::Schemas::Github::V1::RepositoryStar
  sig do
    params(
      action_type: T.nilable(T.any(Symbol, Integer)),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      context_type: T.nilable(T.any(Symbol, Integer)),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      repository_stars_count: T.nilable(Integer),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      star_id: T.nilable(Integer),
      starred_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(action_type: nil, actor: nil, context_type: nil, repository: nil, repository_owner: nil, repository_stars_count: nil, request_context: nil, star_id: nil, starred_at: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_action_type; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_context_type; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_repository_stars_count; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_star_id; end

  sig { void }
  def clear_starred_at; end

  sig { returns(T.any(Symbol, Integer)) }
  def context_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def context_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(Integer) }
  def repository_stars_count; end

  sig { params(value: Integer).void }
  def repository_stars_count=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(Integer) }
  def star_id; end

  sig { params(value: Integer).void }
  def star_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def starred_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def starred_at=(value); end
end

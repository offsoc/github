# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `statsd-ruby` gem.
# Please instead update this file by running `bin/tapioca gem statsd-ruby`.

# = Statsd: A Statsd client (https://github.com/etsy/statsd)
#
# @example Set up a global Statsd client for a server on localhost:8125
#   $statsd = Statsd.new 'localhost', 8125
# @example Send some stats
#   $statsd.increment 'garets'
#   $statsd.timing 'glork', 320
# @example Use {#time} to time the execution of a block
#   $statsd.time('account.activate') { @account.activate! }
# @example Create a namespaced statsd client and increment 'account.activate'
#   statsd = Statsd.new('localhost').tap{|sd| sd.namespace = 'account'}
#   statsd.increment 'activate'
class GitHub::Statsd
  # @return [Statsd] a new instance of Statsd
  #
  # source://statsd-ruby//lib/github/statsd.rb#95
  def initialize(client_class = T.unsafe(nil)); end

  # source://statsd-ruby//lib/github/statsd.rb#105
  def add_shard(*args); end

  # The client class used to initialize shard instances and send metrics.
  #
  # source://statsd-ruby//lib/github/statsd.rb#85
  def client_class; end

  # Sends an arbitrary count for the given stat to the statsd server.
  #
  # @param stat [String] stat name
  # @param count [Integer] count
  # @param sample_rate [Integer] sample rate, 1 for always
  #
  # source://statsd-ruby//lib/github/statsd.rb#148
  def count(stat, count, sample_rate = T.unsafe(nil)); end

  # Sends a decrement (count = -1) for the given stat to the statsd server.
  #
  # @param stat [String] stat name
  # @param sample_rate [Integer] sample rate, 1 for always
  # @see #count
  #
  # source://statsd-ruby//lib/github/statsd.rb#141
  def decrement(stat, sample_rate = T.unsafe(nil)); end

  # source://statsd-ruby//lib/github/statsd.rb#116
  def disable_buffering; end

  # source://statsd-ruby//lib/github/statsd.rb#110
  def enable_buffering(buffer_size = T.unsafe(nil)); end

  # source://statsd-ruby//lib/github/statsd.rb#123
  def flush_all; end

  # Sends an arbitary gauge value for the given stat to the statsd server.
  #
  # @example Report the current user count:
  #   $statsd.gauge('user.count', User.count)
  # @param stat [String] stat name.
  # @param gauge [Numeric] value.
  #
  # source://statsd-ruby//lib/github/statsd.rb#156
  def gauge(stat, value); end

  # Sends a histogram measurement for the given stat to the statsd server. The
  # sample_rate determines what percentage of the time this report is sent. The
  # statsd server then uses the sample_rate to correctly track the average
  # for the stat.
  #
  # source://statsd-ruby//lib/github/statsd.rb#189
  def histogram(stat, value, sample_rate = T.unsafe(nil)); end

  # Sends an increment (count = 1) for the given stat to the statsd server.
  #
  # @param stat [String] stat name
  # @param sample_rate [Integer] sample rate, 1 for always
  # @see #count
  #
  # source://statsd-ruby//lib/github/statsd.rb#134
  def increment(stat, sample_rate = T.unsafe(nil)); end

  # A namespace to prepend to all statsd calls.
  #
  # source://statsd-ruby//lib/github/statsd.rb#74
  def namespace; end

  # source://statsd-ruby//lib/github/statsd.rb#76
  def namespace=(namespace); end

  # All the endpoints where StatsD will report metrics
  #
  # source://statsd-ruby//lib/github/statsd.rb#82
  def shards; end

  # Reports execution time of the provided block using {#timing}.
  #
  # @example Report the time (in ms) taken to activate an account
  #   $statsd.time('account.activate') { @account.activate! }
  # @param stat stat name
  # @param sample_rate [Integer] sample rate, 1 for always
  # @see #timing
  # @yield The operation to be timed
  #
  # source://statsd-ruby//lib/github/statsd.rb#178
  def time(stat, sample_rate = T.unsafe(nil)); end

  # Sends a timing (in ms) for the given stat to the statsd server. The
  # sample_rate determines what percentage of the time this report is sent. The
  # statsd server then uses the sample_rate to correctly track the average
  # timing for the stat.
  #
  # @param stat stat name
  # @param ms [Integer] timing in milliseconds
  # @param sample_rate [Integer] sample rate, 1 for always
  #
  # source://statsd-ruby//lib/github/statsd.rb#168
  def timing(stat, ms, sample_rate = T.unsafe(nil)); end

  private

  # source://statsd-ruby//lib/github/statsd.rb#192
  def sampled(sample_rate); end

  # source://statsd-ruby//lib/github/statsd.rb#219
  def select_shard(stat); end

  # source://statsd-ruby//lib/github/statsd.rb#196
  def send(stat, delta, type, sample_rate = T.unsafe(nil)); end

  class << self
    # source://statsd-ruby//lib/github/statsd.rb#101
    def simple(addr, port = T.unsafe(nil)); end
  end
end

class GitHub::Statsd::Buffer
  # @return [Buffer] a new instance of Buffer
  #
  # source://statsd-ruby//lib/github/statsd.rb#233
  def initialize(client, buffer_cap = T.unsafe(nil)); end

  # Returns the value of attribute base_client.
  #
  # source://statsd-ruby//lib/github/statsd.rb#230
  def base_client; end

  # source://statsd-ruby//lib/github/statsd.rb#240
  def flush; end

  # Returns the value of attribute flush_count.
  #
  # source://statsd-ruby//lib/github/statsd.rb#231
  def flush_count; end

  # Sets the attribute flush_count
  #
  # @param value the value to set the attribute flush_count to.
  #
  # source://statsd-ruby//lib/github/statsd.rb#231
  def flush_count=(_arg0); end

  # source://statsd-ruby//lib/github/statsd.rb#247
  def send(msg); end
end

# source://statsd-ruby//lib/github/statsd.rb#228
GitHub::Statsd::Buffer::DEFAULT_BUFFER_CAP = T.let(T.unsafe(nil), Integer)

# source://statsd-ruby//lib/github/statsd.rb#90
GitHub::Statsd::COUNTER_TYPE = T.let(T.unsafe(nil), String)

# source://statsd-ruby//lib/github/statsd.rb#92
GitHub::Statsd::GAUGE_TYPE = T.let(T.unsafe(nil), String)

# source://statsd-ruby//lib/github/statsd.rb#93
GitHub::Statsd::HISTOGRAM_TYPE = T.let(T.unsafe(nil), String)

# characters that will be replaced with _ in stat names
#
# source://statsd-ruby//lib/github/statsd.rb#88
GitHub::Statsd::RESERVED_CHARS_REGEX = T.let(T.unsafe(nil), Regexp)

class GitHub::Statsd::SecureUDPClient < ::GitHub::Statsd::UDPClient
  # @return [SecureUDPClient] a new instance of SecureUDPClient
  #
  # source://statsd-ruby//lib/github/statsd.rb#37
  def initialize(address, port, key); end

  # source://statsd-ruby//lib/github/statsd.rb#42
  def send(msg); end

  private

  # source://statsd-ruby//lib/github/statsd.rb#68
  def nonce; end

  # source://statsd-ruby//lib/github/statsd.rb#57
  def signed_payload(message); end

  # source://statsd-ruby//lib/github/statsd.rb#64
  def timestamp; end

  class << self
    # defer loading openssl and securerandom unless needed. this shaves ~10ms off
    # of baseline require load time for environments that don't require message signing.
    #
    # source://statsd-ruby//lib/github/statsd.rb#49
    def setup_openssl; end
  end
end

# source://statsd-ruby//lib/github/statsd.rb#91
GitHub::Statsd::TIMING_TYPE = T.let(T.unsafe(nil), String)

class GitHub::Statsd::UDPClient
  # @return [UDPClient] a new instance of UDPClient
  #
  # source://statsd-ruby//lib/github/statsd.rb#21
  def initialize(address, port = T.unsafe(nil)); end

  # source://statsd-ruby//lib/github/statsd.rb#29
  def send(msg); end

  # Returns the value of attribute sock.
  #
  # source://statsd-ruby//lib/github/statsd.rb#19
  def sock; end
end

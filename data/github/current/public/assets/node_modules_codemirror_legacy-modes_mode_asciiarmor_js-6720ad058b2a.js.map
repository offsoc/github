{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_asciiarmor_js-xxxxxxxxxxxx.js","mappings":"sJAAA,SAASA,EAAgBC,CAAM,EAC7B,IAAIC,EAAQD,EAAOE,KAAK,CAAC,UAEzB,OADAF,EAAOG,SAAS,GACTF,EAAQ,QAAU,IAC3B,C,iCAEO,IAAMG,EAAa,CACxBC,KAAM,aACNC,MAAO,SAASN,CAAM,CAAEO,CAAK,EAC3B,IAAIC,EACJ,GAAID,OAAAA,EAAMA,KAAK,QACb,EAAWE,GAAG,IAAOD,CAAAA,EAAIR,EAAOE,KAAK,CAAC,6BAA4B,GAChEK,EAAMA,KAAK,CAAG,UACdA,EAAMG,IAAI,CAAGF,CAAC,CAAC,EAAE,CACV,OAEFT,EAAgBC,GAClB,GAAIO,WAAAA,EAAMA,KAAK,CAAe,CACnC,GAAIP,EAAOS,GAAG,IAAMT,EAAOE,KAAK,CAAC,SAE/B,OADAK,EAAMA,KAAK,CAAG,SACP,OAEP,IAAII,EAASZ,EAAgBC,GAE7B,OADIW,GAAQJ,CAAAA,EAAMA,KAAK,CAAG,MAAK,EACxBI,CAEX,OAAO,UAAIJ,EAAMA,KAAK,EACpBP,EAAOG,SAAS,GAChBI,EAAMA,KAAK,CAAG,UACP,UACEA,QAAAA,EAAMA,KAAK,CACpB,EAAWE,GAAG,IAAOD,CAAAA,EAAIR,EAAOE,KAAK,CAAC,2BAA0B,EAC9D,CAAK,CAAC,EAAE,EAAIK,EAAMG,IAAI,CAAS,SAC/BH,EAAMA,KAAK,CAAG,MACP,OAEP,EAAWK,QAAQ,CAAC,mBACX,MAEPZ,EAAOa,IAAI,GACJ,SAGFN,OAAAA,EAAMA,KAAK,CACbR,EAAgBC,SAE3B,EACAc,UAAW,SAASP,CAAK,EACJ,WAAfA,EAAMA,KAAK,EAAeA,CAAAA,EAAMA,KAAK,CAAG,MAAK,CACnD,EACAQ,WAAY,WACV,MAAO,CAACR,MAAO,MAAOG,KAAM,IAAI,CAClC,CACF,C","sources":["node_modules/@codemirror/legacy-modes/mode/asciiarmor.js"],"sourcesContent":["function errorIfNotEmpty(stream) {\n  var nonWS = stream.match(/^\\s*\\S/);\n  stream.skipToEnd();\n  return nonWS ? \"error\" : null;\n}\n\nexport const asciiArmor = {\n  name: \"asciiarmor\",\n  token: function(stream, state) {\n    var m;\n    if (state.state == \"top\") {\n      if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n        state.state = \"headers\";\n        state.type = m[1];\n        return \"tag\";\n      }\n      return errorIfNotEmpty(stream);\n    } else if (state.state == \"headers\") {\n      if (stream.sol() && stream.match(/^\\w+:/)) {\n        state.state = \"header\";\n        return \"atom\";\n      } else {\n        var result = errorIfNotEmpty(stream);\n        if (result) state.state = \"body\";\n        return result;\n      }\n    } else if (state.state == \"header\") {\n      stream.skipToEnd();\n      state.state = \"headers\";\n      return \"string\";\n    } else if (state.state == \"body\") {\n      if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n        if (m[1] != state.type) return \"error\";\n        state.state = \"end\";\n        return \"tag\";\n      } else {\n        if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n          return null;\n        } else {\n          stream.next();\n          return \"error\";\n        }\n      }\n    } else if (state.state == \"end\") {\n      return errorIfNotEmpty(stream);\n    }\n  },\n  blankLine: function(state) {\n    if (state.state == \"headers\") state.state = \"body\";\n  },\n  startState: function() {\n    return {state: \"top\", type: null};\n  }\n};\n"],"names":["errorIfNotEmpty","stream","nonWS","match","skipToEnd","asciiArmor","name","token","state","m","sol","type","result","eatWhile","next","blankLine","startState"],"sourceRoot":""}
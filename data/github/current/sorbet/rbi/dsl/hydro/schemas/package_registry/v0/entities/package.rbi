# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::PackageRegistry::V0::Entities::Package`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::PackageRegistry::V0::Entities::Package`.

class Hydro::Schemas::PackageRegistry::V0::Entities::Package
  sig do
    params(
      global_id: T.nilable(Google::Protobuf::StringValue),
      id: T.nilable(Integer),
      name: T.nilable(String),
      owner_global_id: T.nilable(Google::Protobuf::StringValue),
      owner_id: T.nilable(Integer),
      owner_org: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      owner_user: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      registry_type: T.nilable(T.any(Symbol, Integer)),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      total_size: T.nilable(Google::Protobuf::Int64Value),
      version_count: T.nilable(Google::Protobuf::Int64Value),
      visibility: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(global_id: nil, id: nil, name: nil, owner_global_id: nil, owner_id: nil, owner_org: nil, owner_user: nil, registry_type: nil, repository: nil, total_size: nil, version_count: nil, visibility: nil); end

  sig { void }
  def clear_global_id; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_owner_global_id; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_owner_org; end

  sig { void }
  def clear_owner_user; end

  sig { void }
  def clear_registry_type; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_total_size; end

  sig { void }
  def clear_version_count; end

  sig { void }
  def clear_visibility; end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def global_id; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def global_id=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def owner_global_id; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def owner_global_id=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def owner_org; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def owner_org=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def owner_user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def owner_user=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def registry_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def registry_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Google::Protobuf::Int64Value)) }
  def total_size; end

  sig { params(value: T.nilable(Google::Protobuf::Int64Value)).void }
  def total_size=(value); end

  sig { returns(T.nilable(Google::Protobuf::Int64Value)) }
  def version_count; end

  sig { params(value: T.nilable(Google::Protobuf::Int64Value)).void }
  def version_count=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def visibility; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def visibility=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Memex::V0::DraftIssueUpdateAssignee`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Memex::V0::DraftIssueUpdateAssignee`.

class Hydro::Schemas::Github::Memex::V0::DraftIssueUpdateAssignee
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      assignees: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::User], T::Array[Hydro::Schemas::Github::V1::Entities::User])),
      draft_issue: T.nilable(Hydro::Schemas::Github::V2::Entities::DraftIssue),
      previous_assignee: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      project: T.nilable(Hydro::Schemas::Github::V2::Entities::MemexProject),
      project_item: T.nilable(Hydro::Schemas::Github::V2::Entities::MemexProjectItem),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, assignees: T.unsafe(nil), draft_issue: nil, previous_assignee: nil, project: nil, project_item: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::User]) }
  def assignees; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::User]).void }
  def assignees=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_assignees; end

  sig { void }
  def clear_draft_issue; end

  sig { void }
  def clear_previous_assignee; end

  sig { void }
  def clear_project; end

  sig { void }
  def clear_project_item; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V2::Entities::DraftIssue)) }
  def draft_issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V2::Entities::DraftIssue)).void }
  def draft_issue=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def previous_assignee; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def previous_assignee=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V2::Entities::MemexProject)) }
  def project; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V2::Entities::MemexProject)).void }
  def project=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V2::Entities::MemexProjectItem)) }
  def project_item; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V2::Entities::MemexProjectItem)).void }
  def project_item=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

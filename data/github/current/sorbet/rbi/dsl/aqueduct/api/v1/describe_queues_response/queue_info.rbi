# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Aqueduct::Api::V1::DescribeQueuesResponse::QueueInfo`.
# Please instead update this file by running `bin/tapioca dsl Aqueduct::Api::V1::DescribeQueuesResponse::QueueInfo`.

class Aqueduct::Api::V1::DescribeQueuesResponse::QueueInfo
  sig do
    params(
      depth: T.nilable(Integer),
      is_paused: T.nilable(T::Boolean),
      pausing_rules: T.nilable(T.any(Google::Protobuf::RepeatedField[Aqueduct::Api::V1::PausingRulesResponse::Rule], T::Array[Aqueduct::Api::V1::PausingRulesResponse::Rule])),
      queue: T.nilable(Aqueduct::Api::V1::Queue),
      throttle_config: T.nilable(Aqueduct::Api::V1::ThrottleConfig),
      worker_limit: T.nilable(Aqueduct::Api::V1::WorkerLimitsResponse::WorkerLimit)
    ).void
  end
  def initialize(depth: nil, is_paused: nil, pausing_rules: T.unsafe(nil), queue: nil, throttle_config: nil, worker_limit: nil); end

  sig { void }
  def clear_depth; end

  sig { void }
  def clear_is_paused; end

  sig { void }
  def clear_pausing_rules; end

  sig { void }
  def clear_queue; end

  sig { void }
  def clear_throttle_config; end

  sig { void }
  def clear_worker_limit; end

  sig { returns(Integer) }
  def depth; end

  sig { params(value: Integer).void }
  def depth=(value); end

  sig { returns(T::Boolean) }
  def is_paused; end

  sig { params(value: T::Boolean).void }
  def is_paused=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Aqueduct::Api::V1::PausingRulesResponse::Rule]) }
  def pausing_rules; end

  sig { params(value: Google::Protobuf::RepeatedField[Aqueduct::Api::V1::PausingRulesResponse::Rule]).void }
  def pausing_rules=(value); end

  sig { returns(T.nilable(Aqueduct::Api::V1::Queue)) }
  def queue; end

  sig { params(value: T.nilable(Aqueduct::Api::V1::Queue)).void }
  def queue=(value); end

  sig { returns(T.nilable(Aqueduct::Api::V1::ThrottleConfig)) }
  def throttle_config; end

  sig { params(value: T.nilable(Aqueduct::Api::V1::ThrottleConfig)).void }
  def throttle_config=(value); end

  sig { returns(T.nilable(Aqueduct::Api::V1::WorkerLimitsResponse::WorkerLimit)) }
  def worker_limit; end

  sig { params(value: T.nilable(Aqueduct::Api::V1::WorkerLimitsResponse::WorkerLimit)).void }
  def worker_limit=(value); end
end

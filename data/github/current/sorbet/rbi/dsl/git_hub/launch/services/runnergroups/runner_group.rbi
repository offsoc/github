# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Services::Runnergroups::RunnerGroup`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Services::Runnergroups::RunnerGroup`.

class GitHub::Launch::Services::Runnergroups::RunnerGroup
  sig do
    params(
      allow_public: T.nilable(T::Boolean),
      id: T.nilable(Integer),
      inherited_allow_public: T.nilable(T::Boolean),
      is_default: T.nilable(T::Boolean),
      is_hosted: T.nilable(T::Boolean),
      name: T.nilable(String),
      owner_group_id: T.nilable(Integer),
      owner_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      restricted_to_workflows: T.nilable(T::Boolean),
      runner_scale_sets: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Launch::Services::Runnerscalesets::RunnerScaleSet], T::Array[GitHub::Launch::Services::Runnerscalesets::RunnerScaleSet])),
      runners: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Launch::Services::Selfhostedrunners::Runner], T::Array[GitHub::Launch::Services::Selfhostedrunners::Runner])),
      selected_targets: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Launch::Pbtypes::GitHub::Identity], T::Array[GitHub::Launch::Pbtypes::GitHub::Identity])),
      selected_workflow_refs: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      size: T.nilable(Integer),
      visibility: T.nilable(T.any(Symbol, Integer)),
      workflow_restrictions_read_only: T.nilable(T::Boolean)
    ).void
  end
  def initialize(allow_public: nil, id: nil, inherited_allow_public: nil, is_default: nil, is_hosted: nil, name: nil, owner_group_id: nil, owner_id: nil, restricted_to_workflows: nil, runner_scale_sets: T.unsafe(nil), runners: T.unsafe(nil), selected_targets: T.unsafe(nil), selected_workflow_refs: T.unsafe(nil), size: nil, visibility: nil, workflow_restrictions_read_only: nil); end

  sig { returns(T::Boolean) }
  def allow_public; end

  sig { params(value: T::Boolean).void }
  def allow_public=(value); end

  sig { void }
  def clear_allow_public; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_inherited_allow_public; end

  sig { void }
  def clear_is_default; end

  sig { void }
  def clear_is_hosted; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_owner_group_id; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_restricted_to_workflows; end

  sig { void }
  def clear_runner_scale_sets; end

  sig { void }
  def clear_runners; end

  sig { void }
  def clear_selected_targets; end

  sig { void }
  def clear_selected_workflow_refs; end

  sig { void }
  def clear_size; end

  sig { void }
  def clear_visibility; end

  sig { void }
  def clear_workflow_restrictions_read_only; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def inherited_allow_public; end

  sig { params(value: T::Boolean).void }
  def inherited_allow_public=(value); end

  sig { returns(T::Boolean) }
  def is_default; end

  sig { params(value: T::Boolean).void }
  def is_default=(value); end

  sig { returns(T::Boolean) }
  def is_hosted; end

  sig { params(value: T::Boolean).void }
  def is_hosted=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(Integer) }
  def owner_group_id; end

  sig { params(value: Integer).void }
  def owner_group_id=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def owner_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def owner_id=(value); end

  sig { returns(T::Boolean) }
  def restricted_to_workflows; end

  sig { params(value: T::Boolean).void }
  def restricted_to_workflows=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Launch::Services::Runnerscalesets::RunnerScaleSet]) }
  def runner_scale_sets; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[GitHub::Launch::Services::Runnerscalesets::RunnerScaleSet]
    ).void
  end
  def runner_scale_sets=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Launch::Services::Selfhostedrunners::Runner]) }
  def runners; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Launch::Services::Selfhostedrunners::Runner]).void }
  def runners=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Launch::Pbtypes::GitHub::Identity]) }
  def selected_targets; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Launch::Pbtypes::GitHub::Identity]).void }
  def selected_targets=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def selected_workflow_refs; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def selected_workflow_refs=(value); end

  sig { returns(Integer) }
  def size; end

  sig { params(value: Integer).void }
  def size=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def visibility; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def visibility=(value); end

  sig { returns(T::Boolean) }
  def workflow_restrictions_read_only; end

  sig { params(value: T::Boolean).void }
  def workflow_restrictions_read_only=(value); end
end

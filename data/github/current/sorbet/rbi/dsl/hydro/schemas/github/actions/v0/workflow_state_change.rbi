# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Actions::V0::WorkflowStateChange`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Actions::V0::WorkflowStateChange`.

class Hydro::Schemas::Github::Actions::V0::WorkflowStateChange
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      branch_ref: T.nilable(String),
      environment: T.nilable(String),
      installation_id: T.nilable(Integer),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      workflow_file_path: T.nilable(String),
      workflow_id: T.nilable(Integer),
      workflow_state: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(actor: nil, branch_ref: nil, environment: nil, installation_id: nil, repository: nil, workflow_file_path: nil, workflow_id: nil, workflow_state: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def branch_ref; end

  sig { params(value: String).void }
  def branch_ref=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_branch_ref; end

  sig { void }
  def clear_environment; end

  sig { void }
  def clear_installation_id; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_workflow_file_path; end

  sig { void }
  def clear_workflow_id; end

  sig { void }
  def clear_workflow_state; end

  sig { returns(String) }
  def environment; end

  sig { params(value: String).void }
  def environment=(value); end

  sig { returns(Integer) }
  def installation_id; end

  sig { params(value: Integer).void }
  def installation_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(String) }
  def workflow_file_path; end

  sig { params(value: String).void }
  def workflow_file_path=(value); end

  sig { returns(Integer) }
  def workflow_id; end

  sig { params(value: Integer).void }
  def workflow_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def workflow_state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def workflow_state=(value); end
end

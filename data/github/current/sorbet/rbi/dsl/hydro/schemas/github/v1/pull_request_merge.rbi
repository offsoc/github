# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::PullRequestMerge`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::PullRequestMerge`.

class Hydro::Schemas::Github::V1::PullRequestMerge
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      actor_has_write_access: T.nilable(T::Boolean),
      actor_profile_location: T.nilable(String),
      author: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      default_merge_commit_message_and_title: T.nilable(T::Boolean),
      issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue),
      merge_action: T.nilable(T.any(Symbol, Integer)),
      merge_commit_message: T.nilable(String),
      merge_commit_sha: T.nilable(String),
      merge_commit_title: T.nilable(String),
      merge_method: T.nilable(T.any(Symbol, Integer)),
      merge_state_status: T.nilable(T.any(Symbol, Integer)),
      opener_login: T.nilable(String),
      opener_profile_location: T.nilable(String),
      pr_approved: T.nilable(T::Boolean),
      protected_branch: T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch),
      pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(actor: nil, actor_has_write_access: nil, actor_profile_location: nil, author: nil, default_merge_commit_message_and_title: nil, issue: nil, merge_action: nil, merge_commit_message: nil, merge_commit_sha: nil, merge_commit_title: nil, merge_method: nil, merge_state_status: nil, opener_login: nil, opener_profile_location: nil, pr_approved: nil, protected_branch: nil, pull_request: nil, repository: nil, repository_owner: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T::Boolean) }
  def actor_has_write_access; end

  sig { params(value: T::Boolean).void }
  def actor_has_write_access=(value); end

  sig { returns(String) }
  def actor_profile_location; end

  sig { params(value: String).void }
  def actor_profile_location=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def author; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def author=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_actor_has_write_access; end

  sig { void }
  def clear_actor_profile_location; end

  sig { void }
  def clear_author; end

  sig { void }
  def clear_default_merge_commit_message_and_title; end

  sig { void }
  def clear_issue; end

  sig { void }
  def clear_merge_action; end

  sig { void }
  def clear_merge_commit_message; end

  sig { void }
  def clear_merge_commit_sha; end

  sig { void }
  def clear_merge_commit_title; end

  sig { void }
  def clear_merge_method; end

  sig { void }
  def clear_merge_state_status; end

  sig { void }
  def clear_opener_login; end

  sig { void }
  def clear_opener_profile_location; end

  sig { void }
  def clear_pr_approved; end

  sig { void }
  def clear_protected_branch; end

  sig { void }
  def clear_pull_request; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { returns(T::Boolean) }
  def default_merge_commit_message_and_title; end

  sig { params(value: T::Boolean).void }
  def default_merge_commit_message_and_title=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def issue=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def merge_action; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def merge_action=(value); end

  sig { returns(String) }
  def merge_commit_message; end

  sig { params(value: String).void }
  def merge_commit_message=(value); end

  sig { returns(String) }
  def merge_commit_sha; end

  sig { params(value: String).void }
  def merge_commit_sha=(value); end

  sig { returns(String) }
  def merge_commit_title; end

  sig { params(value: String).void }
  def merge_commit_title=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def merge_method; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def merge_method=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def merge_state_status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def merge_state_status=(value); end

  sig { returns(String) }
  def opener_login; end

  sig { params(value: String).void }
  def opener_login=(value); end

  sig { returns(String) }
  def opener_profile_location; end

  sig { params(value: String).void }
  def opener_profile_location=(value); end

  sig { returns(T::Boolean) }
  def pr_approved; end

  sig { params(value: T::Boolean).void }
  def pr_approved=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch)) }
  def protected_branch; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch)).void }
  def protected_branch=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def pull_request=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Reminder`.
# Please instead update this file by running `bin/tapioca dsl Reminder`.

class Reminder
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Reminder).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Reminder).void)).returns(::Reminder) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Reminder).void)).returns(::Reminder) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Reminder).void)).returns(::Reminder) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Reminder).void)).returns(::Reminder) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Reminder).void)).returns(::Reminder) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Reminder]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Reminder)) }
    def fifth; end

    sig { returns(::Reminder) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Reminder)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Reminder) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Reminder).void)
      ).returns(T.nilable(T::Enumerator[::Reminder]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Reminder]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Reminder]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Reminder).void)).returns(::Reminder) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Reminder).void)).returns(::Reminder) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Reminder).void)).returns(::Reminder) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Reminder)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Reminder) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Reminder) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Reminder) }
    def first!; end

    sig { returns(T.nilable(::Reminder)) }
    def forty_two; end

    sig { returns(::Reminder) }
    def forty_two!; end

    sig { returns(T.nilable(::Reminder)) }
    def fourth; end

    sig { returns(::Reminder) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Reminder) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Reminder).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Reminder).void)).returns(::Reminder) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Reminder).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Reminder).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Reminder)) }
    def second; end

    sig { returns(::Reminder) }
    def second!; end

    sig { returns(T.nilable(::Reminder)) }
    def second_to_last; end

    sig { returns(::Reminder) }
    def second_to_last!; end

    sig { returns(::Reminder) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Reminder) }
    def take!; end

    sig { returns(T.nilable(::Reminder)) }
    def third; end

    sig { returns(::Reminder) }
    def third!; end

    sig { returns(T.nilable(::Reminder)) }
    def third_to_last; end

    sig { returns(::Reminder) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::ReminderClientWorkspace) }
    def build_slack_workspace(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ReminderClientWorkspace) }
    def create_slack_workspace(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ReminderClientWorkspace) }
    def create_slack_workspace!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def delivery_time_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def delivery_time_ids=(ids); end

    # This method is created by ActiveRecord on the `Reminder` class because it declared `has_many :delivery_times`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReminderDeliveryTime::PrivateCollectionProxy) }
    def delivery_times; end

    sig { params(value: T::Enumerable[::ReminderDeliveryTime]).void }
    def delivery_times=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def delivery_times_attributes=(attributes); end

    sig { returns(T.untyped) }
    def reload_remindable; end

    sig { returns(T.nilable(::ReminderClientWorkspace)) }
    def reload_slack_workspace; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.untyped) }
    def remindable; end

    sig { params(value: T.untyped).void }
    def remindable=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_link_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_link_ids=(ids); end

    # This method is created by ActiveRecord on the `Reminder` class because it declared `has_many :repository_links`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReminderRepositoryLink::PrivateCollectionProxy) }
    def repository_links; end

    sig { params(value: T::Enumerable[::ReminderRepositoryLink]).void }
    def repository_links=(value); end

    sig { returns(T.nilable(::ReminderClientWorkspace)) }
    def slack_workspace; end

    sig { params(value: T.nilable(::ReminderClientWorkspace)).void }
    def slack_workspace=(value); end

    sig { returns(T::Array[T.untyped]) }
    def team_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def team_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def team_membership_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def team_membership_ids=(ids); end

    # This method is created by ActiveRecord on the `Reminder` class because it declared `has_many :team_memberships`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReminderTeamMembership::PrivateCollectionProxy) }
    def team_memberships; end

    sig { params(value: T::Enumerable[::ReminderTeamMembership]).void }
    def team_memberships=(value); end

    # This method is created by ActiveRecord on the `Reminder` class because it declared `has_many :teams, through: :team_memberships`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Team::PrivateCollectionProxy) }
    def teams; end

    sig { params(value: T::Enumerable[::Team]).void }
    def teams=(value); end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_all_repos(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_remindable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order_by_workspace(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def tied_to_single_team(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_linked_repo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_repo_nwo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_delivery_times; end

    sig { returns(Promise[T.untyped]) }
    def async_remindable; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_links; end

    sig { returns(Promise[T.untyped]) }
    def async_slack_workspace; end

    sig { returns(Promise[T.untyped]) }
    def async_team_memberships; end

    sig { returns(Promise[T.untyped]) }
    def async_teams; end

    sig { returns(Promise[T.untyped]) }
    def async_user; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def ignore_after_approval_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def ignore_after_approval_count=(value); end

    sig { returns(T::Boolean) }
    def ignore_after_approval_count?; end

    sig { returns(T.nilable(::Integer)) }
    def ignore_after_approval_count_before_last_save; end

    sig { returns(T.untyped) }
    def ignore_after_approval_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def ignore_after_approval_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ignore_after_approval_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ignore_after_approval_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def ignore_after_approval_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ignore_after_approval_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ignore_after_approval_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def ignore_after_approval_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ignore_after_approval_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def ignore_after_approval_count_was; end

    sig { void }
    def ignore_after_approval_count_will_change!; end

    sig { returns(T::Boolean) }
    def ignore_draft_prs; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def ignore_draft_prs=(value); end

    sig { returns(T::Boolean) }
    def ignore_draft_prs?; end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_draft_prs_before_last_save; end

    sig { returns(T.untyped) }
    def ignore_draft_prs_before_type_cast; end

    sig { returns(T::Boolean) }
    def ignore_draft_prs_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ignore_draft_prs_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ignore_draft_prs_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ignore_draft_prs_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_draft_prs_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ignore_draft_prs_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ignore_draft_prs_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_draft_prs_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_draft_prs_was; end

    sig { void }
    def ignore_draft_prs_will_change!; end

    sig { returns(T.untyped) }
    def ignored_labels; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def ignored_labels=(value); end

    sig { returns(T::Boolean) }
    def ignored_labels?; end

    sig { returns(T.untyped) }
    def ignored_labels_before_last_save; end

    sig { returns(T.untyped) }
    def ignored_labels_before_type_cast; end

    sig { returns(T::Boolean) }
    def ignored_labels_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def ignored_labels_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def ignored_labels_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def ignored_labels_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def ignored_labels_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def ignored_labels_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def ignored_labels_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def ignored_labels_previously_was; end

    sig { returns(T.untyped) }
    def ignored_labels_was; end

    sig { void }
    def ignored_labels_will_change!; end

    sig { returns(T.untyped) }
    def ignored_terms; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def ignored_terms=(value); end

    sig { returns(T::Boolean) }
    def ignored_terms?; end

    sig { returns(T.untyped) }
    def ignored_terms_before_last_save; end

    sig { returns(T.untyped) }
    def ignored_terms_before_type_cast; end

    sig { returns(T::Boolean) }
    def ignored_terms_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def ignored_terms_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def ignored_terms_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def ignored_terms_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def ignored_terms_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def ignored_terms_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def ignored_terms_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def ignored_terms_previously_was; end

    sig { returns(T.untyped) }
    def ignored_terms_was; end

    sig { void }
    def ignored_terms_will_change!; end

    sig { returns(T::Boolean) }
    def include_reviewed_prs; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def include_reviewed_prs=(value); end

    sig { returns(T::Boolean) }
    def include_reviewed_prs?; end

    sig { returns(T.nilable(T::Boolean)) }
    def include_reviewed_prs_before_last_save; end

    sig { returns(T.untyped) }
    def include_reviewed_prs_before_type_cast; end

    sig { returns(T::Boolean) }
    def include_reviewed_prs_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def include_reviewed_prs_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def include_reviewed_prs_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def include_reviewed_prs_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def include_reviewed_prs_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def include_reviewed_prs_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def include_reviewed_prs_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def include_reviewed_prs_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def include_reviewed_prs_was; end

    sig { void }
    def include_reviewed_prs_will_change!; end

    sig { returns(T::Boolean) }
    def include_unassigned_prs; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def include_unassigned_prs=(value); end

    sig { returns(T::Boolean) }
    def include_unassigned_prs?; end

    sig { returns(T.nilable(T::Boolean)) }
    def include_unassigned_prs_before_last_save; end

    sig { returns(T.untyped) }
    def include_unassigned_prs_before_type_cast; end

    sig { returns(T::Boolean) }
    def include_unassigned_prs_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def include_unassigned_prs_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def include_unassigned_prs_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def include_unassigned_prs_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def include_unassigned_prs_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def include_unassigned_prs_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def include_unassigned_prs_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def include_unassigned_prs_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def include_unassigned_prs_was; end

    sig { void }
    def include_unassigned_prs_will_change!; end

    sig { returns(::Integer) }
    def min_age; end

    sig { params(value: ::Integer).returns(::Integer) }
    def min_age=(value); end

    sig { returns(T::Boolean) }
    def min_age?; end

    sig { returns(T.nilable(::Integer)) }
    def min_age_before_last_save; end

    sig { returns(T.untyped) }
    def min_age_before_type_cast; end

    sig { returns(T::Boolean) }
    def min_age_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def min_age_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def min_age_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def min_age_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def min_age_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def min_age_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def min_age_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def min_age_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def min_age_was; end

    sig { void }
    def min_age_will_change!; end

    sig { returns(::Integer) }
    def min_staleness; end

    sig { params(value: ::Integer).returns(::Integer) }
    def min_staleness=(value); end

    sig { returns(T::Boolean) }
    def min_staleness?; end

    sig { returns(T.nilable(::Integer)) }
    def min_staleness_before_last_save; end

    sig { returns(T.untyped) }
    def min_staleness_before_type_cast; end

    sig { returns(T::Boolean) }
    def min_staleness_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def min_staleness_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def min_staleness_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def min_staleness_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def min_staleness_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def min_staleness_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def min_staleness_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def min_staleness_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def min_staleness_was; end

    sig { void }
    def min_staleness_will_change!; end

    sig { returns(::Integer) }
    def needed_reviews; end

    sig { params(value: ::Integer).returns(::Integer) }
    def needed_reviews=(value); end

    sig { returns(T::Boolean) }
    def needed_reviews?; end

    sig { returns(T.nilable(::Integer)) }
    def needed_reviews_before_last_save; end

    sig { returns(T.untyped) }
    def needed_reviews_before_type_cast; end

    sig { returns(T::Boolean) }
    def needed_reviews_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def needed_reviews_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def needed_reviews_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def needed_reviews_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def needed_reviews_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def needed_reviews_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def needed_reviews_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def needed_reviews_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def needed_reviews_was; end

    sig { void }
    def needed_reviews_will_change!; end

    sig { returns(::Integer) }
    def remindable_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def remindable_id=(value); end

    sig { returns(T::Boolean) }
    def remindable_id?; end

    sig { returns(T.nilable(::Integer)) }
    def remindable_id_before_last_save; end

    sig { returns(T.untyped) }
    def remindable_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def remindable_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def remindable_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def remindable_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def remindable_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def remindable_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def remindable_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def remindable_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def remindable_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def remindable_id_was; end

    sig { void }
    def remindable_id_will_change!; end

    sig { returns(::String) }
    def remindable_type; end

    sig { params(value: ::String).returns(::String) }
    def remindable_type=(value); end

    sig { returns(T::Boolean) }
    def remindable_type?; end

    sig { returns(T.nilable(::String)) }
    def remindable_type_before_last_save; end

    sig { returns(T.untyped) }
    def remindable_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def remindable_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def remindable_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def remindable_type_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def remindable_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def remindable_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def remindable_type_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def remindable_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def remindable_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def remindable_type_was; end

    sig { void }
    def remindable_type_will_change!; end

    sig { returns(::Integer) }
    def reminder_slack_workspace_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def reminder_slack_workspace_id=(value); end

    sig { returns(T::Boolean) }
    def reminder_slack_workspace_id?; end

    sig { returns(T.nilable(::Integer)) }
    def reminder_slack_workspace_id_before_last_save; end

    sig { returns(T.untyped) }
    def reminder_slack_workspace_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def reminder_slack_workspace_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def reminder_slack_workspace_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def reminder_slack_workspace_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def reminder_slack_workspace_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def reminder_slack_workspace_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def reminder_slack_workspace_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def reminder_slack_workspace_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def reminder_slack_workspace_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def reminder_slack_workspace_id_was; end

    sig { void }
    def reminder_slack_workspace_id_will_change!; end

    sig { returns(T::Boolean) }
    def require_review_request; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def require_review_request=(value); end

    sig { returns(T::Boolean) }
    def require_review_request?; end

    sig { returns(T.nilable(T::Boolean)) }
    def require_review_request_before_last_save; end

    sig { returns(T.untyped) }
    def require_review_request_before_type_cast; end

    sig { returns(T::Boolean) }
    def require_review_request_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def require_review_request_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def require_review_request_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def require_review_request_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def require_review_request_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def require_review_request_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def require_review_request_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def require_review_request_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def require_review_request_was; end

    sig { void }
    def require_review_request_will_change!; end

    sig { returns(T.untyped) }
    def required_labels; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def required_labels=(value); end

    sig { returns(T::Boolean) }
    def required_labels?; end

    sig { returns(T.untyped) }
    def required_labels_before_last_save; end

    sig { returns(T.untyped) }
    def required_labels_before_type_cast; end

    sig { returns(T::Boolean) }
    def required_labels_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def required_labels_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def required_labels_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def required_labels_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def required_labels_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def required_labels_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def required_labels_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def required_labels_previously_was; end

    sig { returns(T.untyped) }
    def required_labels_was; end

    sig { void }
    def required_labels_will_change!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_ignore_after_approval_count!; end

    sig { void }
    def restore_ignore_draft_prs!; end

    sig { void }
    def restore_ignored_labels!; end

    sig { void }
    def restore_ignored_terms!; end

    sig { void }
    def restore_include_reviewed_prs!; end

    sig { void }
    def restore_include_unassigned_prs!; end

    sig { void }
    def restore_min_age!; end

    sig { void }
    def restore_min_staleness!; end

    sig { void }
    def restore_needed_reviews!; end

    sig { void }
    def restore_remindable_id!; end

    sig { void }
    def restore_remindable_type!; end

    sig { void }
    def restore_reminder_slack_workspace_id!; end

    sig { void }
    def restore_require_review_request!; end

    sig { void }
    def restore_required_labels!; end

    sig { void }
    def restore_settings!; end

    sig { void }
    def restore_slack_channel!; end

    sig { void }
    def restore_slack_channel_id!; end

    sig { void }
    def restore_team_id!; end

    sig { void }
    def restore_time_zone_name!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_id!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_ignore_after_approval_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_ignore_after_approval_count?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_ignore_draft_prs; end

    sig { returns(T::Boolean) }
    def saved_change_to_ignore_draft_prs?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_ignored_labels; end

    sig { returns(T::Boolean) }
    def saved_change_to_ignored_labels?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_ignored_terms; end

    sig { returns(T::Boolean) }
    def saved_change_to_ignored_terms?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_include_reviewed_prs; end

    sig { returns(T::Boolean) }
    def saved_change_to_include_reviewed_prs?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_include_unassigned_prs; end

    sig { returns(T::Boolean) }
    def saved_change_to_include_unassigned_prs?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_min_age; end

    sig { returns(T::Boolean) }
    def saved_change_to_min_age?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_min_staleness; end

    sig { returns(T::Boolean) }
    def saved_change_to_min_staleness?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_needed_reviews; end

    sig { returns(T::Boolean) }
    def saved_change_to_needed_reviews?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_remindable_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_remindable_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_remindable_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_remindable_type?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_reminder_slack_workspace_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_reminder_slack_workspace_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_require_review_request; end

    sig { returns(T::Boolean) }
    def saved_change_to_require_review_request?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_required_labels; end

    sig { returns(T::Boolean) }
    def saved_change_to_required_labels?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_settings; end

    sig { returns(T::Boolean) }
    def saved_change_to_settings?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_slack_channel; end

    sig { returns(T::Boolean) }
    def saved_change_to_slack_channel?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_slack_channel_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_slack_channel_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_team_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_team_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_time_zone_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_time_zone_name?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.untyped) }
    def settings; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def settings=(value); end

    sig { returns(T::Boolean) }
    def settings?; end

    sig { returns(T.untyped) }
    def settings_before_last_save; end

    sig { returns(T.untyped) }
    def settings_before_type_cast; end

    sig { returns(T::Boolean) }
    def settings_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def settings_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def settings_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def settings_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def settings_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def settings_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def settings_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def settings_previously_was; end

    sig { returns(T.untyped) }
    def settings_was; end

    sig { void }
    def settings_will_change!; end

    sig { returns(::String) }
    def slack_channel; end

    sig { params(value: ::String).returns(::String) }
    def slack_channel=(value); end

    sig { returns(T::Boolean) }
    def slack_channel?; end

    sig { returns(T.nilable(::String)) }
    def slack_channel_before_last_save; end

    sig { returns(T.untyped) }
    def slack_channel_before_type_cast; end

    sig { returns(T::Boolean) }
    def slack_channel_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def slack_channel_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def slack_channel_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def slack_channel_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slack_channel_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def slack_channel_id=(value); end

    sig { returns(T::Boolean) }
    def slack_channel_id?; end

    sig { returns(T.nilable(::String)) }
    def slack_channel_id_before_last_save; end

    sig { returns(T.untyped) }
    def slack_channel_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def slack_channel_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slack_channel_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slack_channel_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def slack_channel_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slack_channel_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slack_channel_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def slack_channel_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slack_channel_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slack_channel_id_was; end

    sig { void }
    def slack_channel_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def slack_channel_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def slack_channel_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def slack_channel_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slack_channel_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slack_channel_was; end

    sig { void }
    def slack_channel_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def team_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def team_id=(value); end

    sig { returns(T::Boolean) }
    def team_id?; end

    sig { returns(T.nilable(::Integer)) }
    def team_id_before_last_save; end

    sig { returns(T.untyped) }
    def team_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def team_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def team_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def team_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def team_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def team_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def team_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def team_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def team_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def team_id_was; end

    sig { void }
    def team_id_will_change!; end

    sig { returns(::String) }
    def time_zone_name; end

    sig { params(value: ::String).returns(::String) }
    def time_zone_name=(value); end

    sig { returns(T::Boolean) }
    def time_zone_name?; end

    sig { returns(T.nilable(::String)) }
    def time_zone_name_before_last_save; end

    sig { returns(T.untyped) }
    def time_zone_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def time_zone_name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def time_zone_name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def time_zone_name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def time_zone_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def time_zone_name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def time_zone_name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def time_zone_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def time_zone_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def time_zone_name_was; end

    sig { void }
    def time_zone_name_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def user_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ignore_after_approval_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ignore_draft_prs?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ignored_labels?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ignored_terms?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_include_reviewed_prs?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_include_unassigned_prs?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_min_age?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_min_staleness?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_needed_reviews?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remindable_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remindable_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reminder_slack_workspace_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_require_review_request?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_required_labels?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_settings?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slack_channel?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slack_channel_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_team_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_time_zone_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_all_repos(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_remindable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order_by_workspace(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def tied_to_single_team(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_linked_repo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_repo_nwo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Reminder } }

    sig { returns(T::Array[::Reminder]) }
    def to_a; end

    sig { returns(T::Array[::Reminder]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Reminder } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Reminder } }

    sig do
      params(
        records: T.any(::Reminder, T::Enumerable[T.any(::Reminder, T::Enumerable[::Reminder])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Reminder, T::Enumerable[T.any(::Reminder, T::Enumerable[::Reminder])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Reminder, T::Enumerable[T.any(::Reminder, T::Enumerable[::Reminder])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Reminder]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Reminder, T::Enumerable[T.any(::Reminder, T::Enumerable[::Reminder])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Reminder, T::Enumerable[T.any(::Reminder, T::Enumerable[::Reminder])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Reminder, T::Enumerable[T.any(::Reminder, T::Enumerable[::Reminder])])
      ).returns(T::Array[::Reminder])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Reminder]) }
    def target; end

    sig { returns(T::Array[::Reminder]) }
    def to_a; end

    sig { returns(T::Array[::Reminder]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Reminder } }

    sig { returns(T::Array[::Reminder]) }
    def to_a; end

    sig { returns(T::Array[::Reminder]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Reminder } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Services::Credz::ListSecretsForRepositoryRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Services::Credz::ListSecretsForRepositoryRequest`.

class GitHub::Launch::Services::Credz::ListSecretsForRepositoryRequest
  sig do
    params(
      environments: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Launch::Services::Credz::CredentialOwner], T::Array[GitHub::Launch::Services::Credz::CredentialOwner])),
      include_value: T.nilable(T::Boolean),
      integration: T.nilable(String),
      integration_next_global_id: T.nilable(String),
      is_private: T.nilable(T::Boolean),
      repository: T.nilable(GitHub::Launch::Services::Credz::RepositoryWithOwner)
    ).void
  end
  def initialize(environments: T.unsafe(nil), include_value: nil, integration: nil, integration_next_global_id: nil, is_private: nil, repository: nil); end

  sig { void }
  def clear_environments; end

  sig { void }
  def clear_include_value; end

  sig { void }
  def clear_integration; end

  sig { void }
  def clear_integration_next_global_id; end

  sig { void }
  def clear_is_private; end

  sig { void }
  def clear_repository; end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Launch::Services::Credz::CredentialOwner]) }
  def environments; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Launch::Services::Credz::CredentialOwner]).void }
  def environments=(value); end

  sig { returns(T::Boolean) }
  def include_value; end

  sig { params(value: T::Boolean).void }
  def include_value=(value); end

  sig { returns(String) }
  def integration; end

  sig { params(value: String).void }
  def integration=(value); end

  sig { returns(String) }
  def integration_next_global_id; end

  sig { params(value: String).void }
  def integration_next_global_id=(value); end

  sig { returns(T::Boolean) }
  def is_private; end

  sig { params(value: T::Boolean).void }
  def is_private=(value); end

  sig { returns(T.nilable(GitHub::Launch::Services::Credz::RepositoryWithOwner)) }
  def repository; end

  sig { params(value: T.nilable(GitHub::Launch::Services::Credz::RepositoryWithOwner)).void }
  def repository=(value); end
end

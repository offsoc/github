<copilot-user-settings data-onboarding="<%= onboarding? %>" data-enabled="<%= !(@disabled || @copilot_user.is_enterprise_managed?) %>">
  <% if error? %>
    <%= render(Primer::Box.new(bg: :danger, border: true, border_radius: 3, border_color: :danger_emphasis, p: 3, mb: 4)) do |component| %>
      <%= render(Primer::Box.new(color: :danger, font_weight: :light)) do %>
        <%= render(Primer::Beta::Octicon.new(mr: 2, icon: :stop)) %>
        <span id="cfi-error-text">Select an option below to continue.</span>
      <% end %>
    <% end %>
  <% end %>

  <%= render(Primer::Box.new(display: :flex, justify_content: :space_between, direction: :row, align_items: :center, mb: 3)) do %>
    <%= render(Primer::Beta::Text.new(tag: :h3, font_size: 4, font_weight: :bold)) { "Copilot policies" } %>
    <% if has_single_seat? %>
      <%= render(Primer::Box.new) do %>
        <%= render(Primer::Beta::Octicon.new(icon: "shield-lock", size: :small, color: :muted)) %>
        <%= render(Primer::Beta::Text.new(color: :muted)) do %>
          Managed by <%= link_to(copilot_provider&.display_login, user_path(copilot_provider), class: "Link--inTextBlock") %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
  <%= form_with(
    url: @submit_path,
    method: "put",
    data: {
      target: "copilot-user-settings.form",
    }
  ) do |f| %>
    <input type="hidden" name="public_code_suggestions" value="<%= public_code_suggestion_value %>">
    <%= render(Primer::Beta::BorderBox.new(padding: :default, mb: 3)) do |component| %>

      <% if has_copilot_enterprise_access? %>
        <%= component.with_row do %>
          <%= render(Primer::Box.new(id: "copilot-in-dotcom-policy", display: :flex, justify_content: :space_between, flex: 1, direction: :row, align_items: :center)) do %>
            <%= render(Primer::Box.new(display: :inline_flex, justify_content: :space_between, flex: 1, direction: :column)) do %>
              <%= render(Primer::Box.new(display: :inline_flex, align_items: :center, justify_content: :space_between, direction: :row)) do %>
                <%= render(Primer::Beta::Text.new(tag: :span, mb: 1, font_weight: :bold)) do %>
                  <%= Copilot::COPILOT_IN_DOTCOM %>
                <% end %>
                <%= render_enablement_text("dotcom_chat", @copilot_user.dotcom_chat_enabled? ? "Enabled" : "Disabled") %>
              <% end %>
              <%= render(Primer::Beta::Text.new(tag: :p, mb: 2, mr: 6, color: :muted, id: "copilot_dotcom_setting_label", col: 10)) do %>
                You can use Copilot Chat in github.com, Copilot for pull requests, knowledge base search<% if user_feature_enabled?(:copilot_beta_features_opt_in) && @copilot_user.beta_features_github_chat_enabled? %><span>, and all of the preview features</span><% end %>. <%= inline_docs_link(Copilot::COPILOT_DOTCOM_CHAT_DOCUMENTATION, "Learn more about Copilot in github.com") %>
              <% end %>
              <% if @copilot_user.feature_enabled?(:copilot_show_policy_blocked_by) && !has_single_seat? && @copilot_user.dotcom_chat_disabled? %>
                <%= render(Primer::Beta::Text.new(tag: :p, mb: 0, mr: 6, color: :muted, id: "copilot_dotcom_setting_managed_by_label", col: 10)) do %>
                  <%= render(Primer::Beta::Octicon.new(icon: "shield-lock", size: :small, color: :muted)) %>
                  <%= policy_blocked_by(:dotcom_chat) %>
                <% end %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>
      <% end %>

      <%= component.with_row do %>
        <%= render(Primer::Box.new(id: "copilot-cli-policy", display: :flex, justify_content: :space_between, flex: 1, direction: :row, align_items: :center)) do %>
          <%= render(Primer::Box.new(display: :inline_flex, justify_content: :space_between, flex: 1, direction: :column)) do %>
            <%= render(Primer::Box.new(display: :inline_flex, align_items: :center, justify_content: :space_between, direction: :row)) do %>
              <%= render(Primer::Beta::Text.new(tag: :span, mb: 1, font_weight: :bold)) do %>
                <%= Copilot::CLI_UI_NAME %>
              <% end %>
              <%= render_enablement_text("cli", @copilot_user.cli_enabled? ? "Enabled" : "Disabled") %>
            <% end %>
            <%= render(Primer::Beta::Text.new(tag: :p, mb: 2, mr: 6, color: :muted, id: "copilot_cli_setting_label", col: 10)) do %>
              You can use <%= inline_docs_link(Copilot::COPILOT_FOR_CLI_USAGE_DOCUMENTATION, "GitHub Copilot for assistance in terminal") %>.
              <% if @copilot_user.feature_enabled?(:copilot_show_policy_blocked_by) && !has_single_seat? && @copilot_user.cli_disabled? %>
                <%= render(Primer::Beta::Text.new(tag: :p, mb: 0, mr: 6, color: :muted, id: "copilot_cli_setting_managed_by_label", col: 10)) do %>
                  <%= render(Primer::Beta::Octicon.new(icon: "shield-lock", size: :small, color: :muted)) %>
                  <%= policy_blocked_by(:cli) %>
                <% end %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>
      <% end %>

      <%= component.with_row do %>
        <%= render(Primer::Box.new(id: "copilot-chat-ide-policy", display: :flex, justify_content: :space_between, flex: 1, direction: :row, align_items: :center)) do %>
          <%= render(Primer::Box.new(display: :inline_flex, justify_content: :space_between, flex: 1, direction: :column)) do %>
            <%= render(Primer::Box.new(display: :inline_flex, align_items: :center, justify_content: :space_between, direction: :row)) do %>
              <%= render(Primer::Beta::Text.new(tag: :span, mb: 1, font_weight: :bold)) do %>
                <%= Copilot::COPILOT_CHAT_IN_IDE %>
              <% end %>
              <%= render_enablement_text("ide_chat", @copilot_user.chat_enabled? ? "Enabled" : "Disabled") %>
            <% end %>
            <%= render(Primer::Beta::Text.new(tag: :p, mb: 2, mr: 6, color: :muted, id: "copilot_chat_ide_label", col: 10)) do %>
              You can use <%= inline_docs_link(Copilot::COPILOT_CHAT_IDE_DOCS, "GitHub Copilot Chat in the IDE") %> to explain a piece of code, propose bug fixes, or generate unit tests in a chat interface from your editor.
              <% if @copilot_user.feature_enabled?(:copilot_show_policy_blocked_by) && !has_single_seat? && @copilot_user.chat_disabled? %>
                <%= render(Primer::Beta::Text.new(tag: :p, mb: 0, mr: 6, color: :muted, id: "copilot_chat_setting_managed_by_label", col: 10)) do %>
                  <%= render(Primer::Beta::Octicon.new(icon: "shield-lock", size: :small, color: :muted)) %>
                  <%= policy_blocked_by(:chat_enabled) %>
                <% end %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>
      <% end %>

      <%= component.with_row do %>
        <%= render(Primer::Box.new(id: "copilot-mobile-chat-policy", display: :flex, justify_content: :space_between, flex: 1, direction: :row, align_items: :center)) do %>
          <%= render(Primer::Box.new(display: :inline_flex, justify_content: :space_between, flex: 1, direction: :column)) do %>
            <%= render(Primer::Box.new(display: :inline_flex, align_items: :center, justify_content: :space_between, direction: :row)) do %>
              <%= render(Primer::Beta::Text.new(tag: :span, mb: 1, font_weight: :bold)) do %>
                <%= Copilot::COPILOT_CHAT_IN_MOBILE %>
              <% end %>
              <%= render(Primer::Box.new) do %>
                <%= render_enablement_text("mobile_chat", @copilot_user.mobile_chat_enabled? ? "Enabled" : "Disabled") %>
              <% end %>
            <% end %>
            <%= render(Primer::Beta::Text.new(tag: :p, mb: 2, mr: 6, color: :muted, id: "copilot_mobile_setting_label", col: 10)) do %>
              You can use <%= inline_docs_link(Copilot::COPILOT_CHAT_MOBILE_DOCS, "Copilot Chat in GitHub Mobile") %> personalized to a codebase.
              <% if @copilot_user.feature_enabled?(:copilot_show_policy_blocked_by) && !has_single_seat? && !@copilot_user.mobile_chat_enabled? %>
                <%= render(Primer::Beta::Text.new(tag: :p, mb: 0, mr: 6, color: :muted, id: "copilot_mobile_chat_setting_managed_by_label", col: 10)) do %>
                  <%= render(Primer::Beta::Octicon.new(icon: "shield-lock", size: :small, color: :muted)) %>
                  <%= policy_blocked_by(:mobile_chat) %>
                <% end %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>
      <% end %>

      <%= component.with_row(scheme: :default) do %>
        <%= render(Primer::Box.new(display: :flex, justify_content: :space_between, flex: 1, direction: :row, align_items: :center)) do %>
          <%= render(Primer::Box.new(display: :inline_flex, justify_content: :space_between, flex: 1, direction: :column)) do %>
            <%= render(Primer::Box.new(display: :inline_flex, align_items: :center, justify_content: :space_between, direction: :row)) do %>
              <%= render(Primer::Beta::Text.new(tag: :span, mb: 1, font_weight: :bold)) do %>
                Suggestions matching public code (duplication detection filter)
              <% end %>
              <%= render_enablement_text("copilot_settings_snippy", public_code_suggestion_setting) if is_readonly_mode? %>
            <% end %>
            <%= render(Primer::Beta::Text.new(tag: :p, mb: 1, mr: 6, color: :muted, id: "copilot_snippy_setting_label", col: 10)) do %>
              <% if @copilot_user.is_enterprise_managed? || @copilot_user.has_cfb_access? || @copilot_user.has_copilot_standalone_business? %>
                GitHub Copilot can provide you with details about matching code when you accept such suggestions. <%= inline_docs_link(Copilot::COPILOT_PUBLIC_CODE_SUGGESTIONS_DOCS, "Learn more") %>.
                <% if @copilot_user.feature_enabled?(:copilot_show_policy_blocked_by) && !has_single_seat? && @copilot_user.block_public_code_suggestions? %>
                  <%= render(Primer::Beta::Text.new(tag: :p, mb: 0, mr: 6, color: :muted, id: "copilot_block_public_code_suggestions_setting_managed_by_label", col: 10)) do %>
                    <%= render(Primer::Beta::Octicon.new(icon: "shield-lock", size: :small, color: :muted)) %>
                    <%= policy_blocked_by(:public_code_suggestions) %>
                  <% end %>
                <% end %>

              <% else %>
                Copilot can allow or block suggestions matching public code. Learn more about
                <%= render(Primer::Beta::Link.new(href: helpers.docs_url("copilot/configure-organization-matching-policies"), classes: "Link--inTextBlock")) { "code suggestions" } %>.
              <% end %>
            <% end %>
          <% end %>

          <%# snippy write %>
          <% unless is_readonly_mode? %>
            <%= render(Primer::Box.new(display: :flex, direction: :row, mb: 5, mt: 2)) do %>
              <% if changed?(:snippy_setting) %>
                <%= render Primer::Box.new(display: :flex, direction: :column, mr: 1, classes: 'hx_anim-fade-out') do %>
                  <%= render Primer::Beta::Octicon.new(icon: "check", size: :small, mt: 2, mr: 2, color: :success) %>
                <% end %>
              <% end %>
              <%= render GitHub::MenuComponent.new(
                id: "copilot_settings_snippy",
                tag: :button,
                style: "opacity: 0.5; pointer-events: none;",
                items: menu_items,
                align: :right,
                data: {
                  action: "click:copilot-user-settings#updateCodeSuggestionSetting",
                  target: "copilot-user-settings.snippy"
                }) do |menu| %>
                <% menu.with_summary do %>
                  <%= render Primer::Beta::Button.new(tag: :summary) do |component| %>
                    <% component.with_trailing_action_icon(icon: "triangle-down") %>
                    <span data-menu-button><%= menu.default_selection_text || "Select an option" %></span>
                  <% end %>
                <% end %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>

        <%# Show telemetry controls %>
        <% unless is_readonly_mode? %>
          <%= render(Primer::Box.new(display: :flex, justify_content: :space_between, flex: 1, direction: :row, align_items: :center)) do %>
            <%= render(Primer::Box.new(display: :inline_flex, justify_content: :space_between, flex: 1, direction: :column)) do %>
              <hr>
              <%= render(Primer::Box.new(display: :flex, direction: :row)) do %>
                <%= render(Primer::Beta::Text.new(tag: :p, font_weight: :bold)) do %>
                  <input
                    type="checkbox"
                    id="copilot_settings_telemetry"
                    name="telemetry"
                    value="Allow"
                    class="mr-1" <%= @copilot_user&.telemetry_enabled? ? "checked" : "" %>
                    data-action="click:copilot-user-settings#handleSubmit"
                    data-target="copilot-user-settings.telemetry"
                    disabled
                  >
                  <label for="telemetry">Allow GitHub to use my code snippets from the code editor for product improvements *</label>
                <% end %>
                <% if changed?(:telemetry_configuration) %>
                  <%= render Primer::Box.new(display: :flex, direction: :column, ml: 1, classes: 'hx_anim-fade-out') do %>
                    <%= render Primer::Beta::Octicon.new(icon: "check", size: :small, mr: 2, color: :success) %>
                  <% end %>
                <% end %>
              <% end %>
              <%= render(Primer::Box.new(mb: 1, mt: 1, color: :muted, font_weight: :light)) do %>
                Allow GitHub, its affiliates and third parties to use my code snippets to research and improve GitHub Copilot suggestions, related models and product features. More information in
                  <%= render(Primer::Beta::Link.new(href: helpers.docs_url("copilot/about-github-copilot-individual-privacy"), classes: "Link--inTextBlock")) do %>
                    About GitHub Copilot privacy.
                  <% end %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>
      <% end %>

      <% if has_copilot_enterprise_access? %>
        <%= component.with_row do %>
          <%= render(Primer::Box.new(id: "copilot-bing-chat-policy", display: :flex, justify_content: :space_between, flex: 1, direction: :row, align_items: :center)) do %>
            <%= render(Primer::Box.new(display: :inline_flex, justify_content: :space_between, flex: 1, direction: :column)) do %>
              <%= render(Primer::Box.new(display: :inline_flex, align_items: :center, justify_content: :space_between, direction: :row)) do %>
                <%= render(Primer::Beta::Text.new(tag: :span, mb: 1, font_weight: :bold)) do %>
                  <%= Copilot::COPILOT_BING_ACCESS %>
                <% end %>
                <%= render(Primer::Box.new) do %>
                  <%= render_enablement_text("bing_access", @copilot_user.bing_github_chat_enabled? ? "Enabled" : "Disabled") %>
                <% end %>
              <% end %>
              <%= render(Primer::Beta::Text.new(tag: :p, mb: 2, mr: 6, color: :muted, id: "copilot_bing_access_label", col: 10)) do %>
                Copilot can answer questions about new trends and give improved answers. <%= inline_docs_link(Copilot::Policies::BingForGitHubFormComponent::MICROSOFT_PRIVACY_STATEMENT_URL, "See Microsoft Privacy Statement") %>.
                <% if @copilot_user.feature_enabled?(:copilot_show_policy_blocked_by) && !has_single_seat? && @copilot_user.bing_github_chat_disabled? %>
                  <%= render(Primer::Beta::Text.new(tag: :p, mb: 0, mr: 6, color: :muted, id: "copilot_bing_copilot_chat_setting_managed_by_label", col: 10)) do %>
                    <%= render(Primer::Beta::Octicon.new(icon: "shield-lock", size: :small, color: :muted)) %>
                    <%= policy_blocked_by(:bing_github_chat) %>
                  <% end %>
                <% end %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>
      <% end %>
    <% end %>

    <%= render(Primer::Beta::Text.new(tag: :p, mt: 3, color: :muted, font_size: :small)) do %>
      <% unless features_for_data_retention.empty? %>
        <%= features_for_data_retention %> and updated <%= render(Primer::Beta::Link.new(href: Copilot::COPILOT_SPECIFIC_TERMS, classes: "Link--inTextBlock")) { "Product Terms" } %> apply.
      <% end %>
      For more information about the data your organization receives regarding your use of GitHub Copilot, please review <%= render(Primer::Beta::Link.new(href: Copilot::github_general_privacy_statement_url, classes: "Link--inTextBlock")) { "GitHub's Privacy Statement" } %>.
    <% end %>

    <% if onboarding? %>
      <%= render(Primer::Beta::Button.new(
        scheme: :primary,
        size: :medium,
        type: :submit,
        disabled: true,
        id: "copilot_settings_submit",
        data: {
          target: "copilot-user-settings.submit"
        }
      )) do %>
        Save and complete setup
      <% end %>
    <% end %>
  <% end %>
</copilot-user-settings>

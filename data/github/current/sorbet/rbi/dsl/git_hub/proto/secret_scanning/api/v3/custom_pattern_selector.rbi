# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Proto::SecretScanning::Api::V3::CustomPatternSelector`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Proto::SecretScanning::Api::V3::CustomPatternSelector`.

class GitHub::Proto::SecretScanning::Api::V3::CustomPatternSelector
  sig do
    params(
      business_selector: T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternBusinessSelector),
      ids_selector: T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternIdsSelector),
      org_selector: T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternOrgSelector),
      repo_selector: T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternRepoSelector),
      scan_selector: T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternScanSelector)
    ).void
  end
  def initialize(business_selector: nil, ids_selector: nil, org_selector: nil, repo_selector: nil, scan_selector: nil); end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternBusinessSelector)) }
  def business_selector; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternBusinessSelector)).void }
  def business_selector=(value); end

  sig { void }
  def clear_business_selector; end

  sig { void }
  def clear_ids_selector; end

  sig { void }
  def clear_org_selector; end

  sig { void }
  def clear_repo_selector; end

  sig { void }
  def clear_scan_selector; end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternIdsSelector)) }
  def ids_selector; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternIdsSelector)).void }
  def ids_selector=(value); end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternOrgSelector)) }
  def org_selector; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternOrgSelector)).void }
  def org_selector=(value); end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternRepoSelector)) }
  def repo_selector; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternRepoSelector)).void }
  def repo_selector=(value); end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternScanSelector)) }
  def scan_selector; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Api::V3::CustomPatternScanSelector)).void }
  def scan_selector=(value); end

  sig { returns(T.nilable(Symbol)) }
  def selector; end
end

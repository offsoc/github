# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::Search`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::Search`.

class Hydro::Schemas::Github::V1::Search
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      es_query: T.nilable(Hydro::Schemas::Github::V1::Entities::ElasticsearchQuery),
      escaped_query: T.nilable(String),
      max_score: T.nilable(Float),
      originating_request_id: T.nilable(String),
      page_number: T.nilable(Integer),
      per_page: T.nilable(Integer),
      query: T.nilable(String),
      query_id: T.nilable(String),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      results: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::SearchResult], T::Array[Hydro::Schemas::Github::V1::Entities::SearchResult])),
      search_context: T.nilable(String),
      search_scope: T.nilable(Google::Protobuf::StringValue),
      search_server_cumulative_ms: T.nilable(Integer),
      search_server_timed_out: T.nilable(T::Boolean),
      search_server_took_ms: T.nilable(Integer),
      search_type: T.nilable(T.any(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)], T::Array[T.any(Symbol, Integer)])),
      total_results: T.nilable(Integer),
      variant: T.nilable(Google::Protobuf::StringValue)
    ).void
  end
  def initialize(actor: nil, es_query: nil, escaped_query: nil, max_score: nil, originating_request_id: nil, page_number: nil, per_page: nil, query: nil, query_id: nil, request_context: nil, results: T.unsafe(nil), search_context: nil, search_scope: nil, search_server_cumulative_ms: nil, search_server_timed_out: nil, search_server_took_ms: nil, search_type: T.unsafe(nil), total_results: nil, variant: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_es_query; end

  sig { void }
  def clear_escaped_query; end

  sig { void }
  def clear_max_score; end

  sig { void }
  def clear_originating_request_id; end

  sig { void }
  def clear_page_number; end

  sig { void }
  def clear_per_page; end

  sig { void }
  def clear_query; end

  sig { void }
  def clear_query_id; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_results; end

  sig { void }
  def clear_search_context; end

  sig { void }
  def clear_search_scope; end

  sig { void }
  def clear_search_server_cumulative_ms; end

  sig { void }
  def clear_search_server_timed_out; end

  sig { void }
  def clear_search_server_took_ms; end

  sig { void }
  def clear_search_type; end

  sig { void }
  def clear_total_results; end

  sig { void }
  def clear_variant; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::ElasticsearchQuery)) }
  def es_query; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::ElasticsearchQuery)).void }
  def es_query=(value); end

  sig { returns(String) }
  def escaped_query; end

  sig { params(value: String).void }
  def escaped_query=(value); end

  sig { returns(Float) }
  def max_score; end

  sig { params(value: Float).void }
  def max_score=(value); end

  sig { returns(String) }
  def originating_request_id; end

  sig { params(value: String).void }
  def originating_request_id=(value); end

  sig { returns(Integer) }
  def page_number; end

  sig { params(value: Integer).void }
  def page_number=(value); end

  sig { returns(Integer) }
  def per_page; end

  sig { params(value: Integer).void }
  def per_page=(value); end

  sig { returns(String) }
  def query; end

  sig { params(value: String).void }
  def query=(value); end

  sig { returns(String) }
  def query_id; end

  sig { params(value: String).void }
  def query_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::SearchResult]) }
  def results; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::SearchResult]).void }
  def results=(value); end

  sig { returns(String) }
  def search_context; end

  sig { params(value: String).void }
  def search_context=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def search_scope; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def search_scope=(value); end

  sig { returns(Integer) }
  def search_server_cumulative_ms; end

  sig { params(value: Integer).void }
  def search_server_cumulative_ms=(value); end

  sig { returns(T::Boolean) }
  def search_server_timed_out; end

  sig { params(value: T::Boolean).void }
  def search_server_timed_out=(value); end

  sig { returns(Integer) }
  def search_server_took_ms; end

  sig { params(value: Integer).void }
  def search_server_took_ms=(value); end

  sig { returns(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]) }
  def search_type; end

  sig { params(value: Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]).void }
  def search_type=(value); end

  sig { returns(Integer) }
  def total_results; end

  sig { params(value: Integer).void }
  def total_results=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def variant; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def variant=(value); end
end

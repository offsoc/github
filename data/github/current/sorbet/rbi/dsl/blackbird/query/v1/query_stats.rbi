# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Blackbird::Query::V1::QueryStats`.
# Please instead update this file by running `bin/tapioca dsl Blackbird::Query::V1::QueryStats`.

class Blackbird::Query::V1::QueryStats
  sig do
    params(
      cost: T.nilable(Float),
      docs_retrieved: T.nilable(Integer),
      docs_scored: T.nilable(Integer),
      had_panic: T.nilable(T::Boolean),
      had_timeout: T.nilable(T::Boolean),
      hit_retrieval_limit: T.nilable(T::Boolean),
      hit_return_limit: T.nilable(T::Boolean),
      hit_scoring_limit: T.nilable(T::Boolean),
      iters_created: T.nilable(Integer),
      locations_retrieved: T.nilable(Integer),
      locations_scored: T.nilable(Integer),
      scoring_duration_micros: T.nilable(Integer)
    ).void
  end
  def initialize(cost: nil, docs_retrieved: nil, docs_scored: nil, had_panic: nil, had_timeout: nil, hit_retrieval_limit: nil, hit_return_limit: nil, hit_scoring_limit: nil, iters_created: nil, locations_retrieved: nil, locations_scored: nil, scoring_duration_micros: nil); end

  sig { void }
  def clear_cost; end

  sig { void }
  def clear_docs_retrieved; end

  sig { void }
  def clear_docs_scored; end

  sig { void }
  def clear_had_panic; end

  sig { void }
  def clear_had_timeout; end

  sig { void }
  def clear_hit_retrieval_limit; end

  sig { void }
  def clear_hit_return_limit; end

  sig { void }
  def clear_hit_scoring_limit; end

  sig { void }
  def clear_iters_created; end

  sig { void }
  def clear_locations_retrieved; end

  sig { void }
  def clear_locations_scored; end

  sig { void }
  def clear_scoring_duration_micros; end

  sig { returns(Float) }
  def cost; end

  sig { params(value: Float).void }
  def cost=(value); end

  sig { returns(Integer) }
  def docs_retrieved; end

  sig { params(value: Integer).void }
  def docs_retrieved=(value); end

  sig { returns(Integer) }
  def docs_scored; end

  sig { params(value: Integer).void }
  def docs_scored=(value); end

  sig { returns(T::Boolean) }
  def had_panic; end

  sig { params(value: T::Boolean).void }
  def had_panic=(value); end

  sig { returns(T::Boolean) }
  def had_timeout; end

  sig { params(value: T::Boolean).void }
  def had_timeout=(value); end

  sig { returns(T::Boolean) }
  def hit_retrieval_limit; end

  sig { params(value: T::Boolean).void }
  def hit_retrieval_limit=(value); end

  sig { returns(T::Boolean) }
  def hit_return_limit; end

  sig { params(value: T::Boolean).void }
  def hit_return_limit=(value); end

  sig { returns(T::Boolean) }
  def hit_scoring_limit; end

  sig { params(value: T::Boolean).void }
  def hit_scoring_limit=(value); end

  sig { returns(Integer) }
  def iters_created; end

  sig { params(value: Integer).void }
  def iters_created=(value); end

  sig { returns(Integer) }
  def locations_retrieved; end

  sig { params(value: Integer).void }
  def locations_retrieved=(value); end

  sig { returns(Integer) }
  def locations_scored; end

  sig { params(value: Integer).void }
  def locations_scored=(value); end

  sig { returns(Integer) }
  def scoring_duration_micros; end

  sig { params(value: Integer).void }
  def scoring_duration_micros=(value); end
end

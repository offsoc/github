# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ImportableIssue`.
# Please instead update this file by running `bin/tapioca dsl ImportableIssue`.

class ImportableIssue
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def state_reasons; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::ImportableIssue).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableIssue).void)
      ).returns(::ImportableIssue)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableIssue).void)
      ).returns(::ImportableIssue)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableIssue).void)
      ).returns(::ImportableIssue)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableIssue).void)
      ).returns(::ImportableIssue)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableIssue).void)
      ).returns(::ImportableIssue)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::ImportableIssue]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::ImportableIssue)) }
    def fifth; end

    sig { returns(::ImportableIssue) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::ImportableIssue)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::ImportableIssue) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::ImportableIssue).void)
      ).returns(T.nilable(T::Enumerator[::ImportableIssue]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::ImportableIssue]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::ImportableIssue]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableIssue).void)
      ).returns(::ImportableIssue)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableIssue).void)
      ).returns(::ImportableIssue)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableIssue).void)
      ).returns(::ImportableIssue)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::ImportableIssue)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::ImportableIssue) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::ImportableIssue) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::ImportableIssue) }
    def first!; end

    sig { returns(T.nilable(::ImportableIssue)) }
    def forty_two; end

    sig { returns(::ImportableIssue) }
    def forty_two!; end

    sig { returns(T.nilable(::ImportableIssue)) }
    def fourth; end

    sig { returns(::ImportableIssue) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::ImportableIssue) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::ImportableIssue).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableIssue).void)
      ).returns(::ImportableIssue)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::ImportableIssue).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::ImportableIssue).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::ImportableIssue)) }
    def second; end

    sig { returns(::ImportableIssue) }
    def second!; end

    sig { returns(T.nilable(::ImportableIssue)) }
    def second_to_last; end

    sig { returns(::ImportableIssue) }
    def second_to_last!; end

    sig { returns(::ImportableIssue) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::ImportableIssue) }
    def take!; end

    sig { returns(T.nilable(::ImportableIssue)) }
    def third; end

    sig { returns(::ImportableIssue) }
    def third!; end

    sig { returns(T.nilable(::ImportableIssue)) }
    def third_to_last; end

    sig { returns(::ImportableIssue) }
    def third_to_last!; end
  end

  module EnumMethodsModule; end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def abuse_report_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def abuse_report_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :abuse_reports`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AbuseReport::PrivateCollectionProxy) }
    def abuse_reports; end

    sig { params(value: T::Enumerable[::AbuseReport]).void }
    def abuse_reports=(value); end

    sig { returns(T.nilable(::User)) }
    def assignee; end

    sig { params(value: T.nilable(::User)).void }
    def assignee=(value); end

    sig { returns(T::Array[T.untyped]) }
    def assignee_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def assignee_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :assignees, through: :assignments`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def assignees; end

    sig { params(value: T::Enumerable[::User]).void }
    def assignees=(value); end

    sig { returns(T::Array[T.untyped]) }
    def assignment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def assignment_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :assignments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Assignment::PrivateCollectionProxy) }
    def assignments; end

    sig { params(value: T::Enumerable[::Assignment]).void }
    def assignments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def attachment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def attachment_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :attachments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Attachment::PrivateCollectionProxy) }
    def attachments; end

    sig { params(value: T::Enumerable[::Attachment]).void }
    def attachments=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_assignee(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IssueType) }
    def build_issue_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IssueEdit) }
    def build_latest_user_content_edit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Milestone) }
    def build_milestone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Issue) }
    def build_parent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SubIssue) }
    def build_parent_issue_relation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def build_performed_via_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PinnedIssue) }
    def build_pinned_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ImportablePullRequest) }
    def build_pull_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SubIssueList) }
    def build_sub_issue_list(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def card_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def card_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :cards`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ProjectCard::PrivateCollectionProxy) }
    def cards; end

    sig { params(value: T::Enumerable[::ProjectCard]).void }
    def cards=(value); end

    sig { returns(T::Array[T.untyped]) }
    def close_issue_reference_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def close_issue_reference_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :close_issue_references`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CloseIssueReference::PrivateCollectionProxy) }
    def close_issue_references; end

    sig { params(value: T::Enumerable[::CloseIssueReference]).void }
    def close_issue_references=(value); end

    sig { returns(T::Array[T.untyped]) }
    def comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def comment_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def commenter_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def commenter_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :commenters, through: :comments`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def commenters; end

    sig { params(value: T::Enumerable[::User]).void }
    def commenters=(value); end

    # This method is created by ActiveRecord on the `ImportableIssue` class because it declared `has_many :comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ImportableIssueComment::PrivateCollectionProxy) }
    def comments; end

    sig { params(value: T::Enumerable[::ImportableIssueComment]).void }
    def comments=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_assignee(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_assignee!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IssueType) }
    def create_issue_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IssueType) }
    def create_issue_type!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IssueEdit) }
    def create_latest_user_content_edit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IssueEdit) }
    def create_latest_user_content_edit!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Milestone) }
    def create_milestone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Milestone) }
    def create_milestone!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Issue) }
    def create_parent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Issue) }
    def create_parent!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SubIssue) }
    def create_parent_issue_relation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SubIssue) }
    def create_parent_issue_relation!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def create_performed_via_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def create_performed_via_integration!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PinnedIssue) }
    def create_pinned_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PinnedIssue) }
    def create_pinned_issue!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ImportablePullRequest) }
    def create_pull_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ImportablePullRequest) }
    def create_pull_request!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SubIssueList) }
    def create_sub_issue_list(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SubIssueList) }
    def create_sub_issue_list!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def event_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :events`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueEvent::PrivateCollectionProxy) }
    def events; end

    sig { params(value: T::Enumerable[::IssueEvent]).void }
    def events=(value); end

    sig { returns(T::Array[T.untyped]) }
    def issue_alert_link_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def issue_alert_link_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :issue_alert_links`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueAlertLink::PrivateCollectionProxy) }
    def issue_alert_links; end

    sig { params(value: T::Enumerable[::IssueAlertLink]).void }
    def issue_alert_links=(value); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :issue_priorities`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssuePriority::PrivateCollectionProxy) }
    def issue_priorities; end

    sig { params(value: T::Enumerable[::IssuePriority]).void }
    def issue_priorities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def issue_priority_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def issue_priority_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :issue_summaries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueSummary::PrivateCollectionProxy) }
    def issue_summaries; end

    sig { params(value: T::Enumerable[::IssueSummary]).void }
    def issue_summaries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def issue_summary_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def issue_summary_ids=(ids); end

    sig { returns(T.nilable(::IssueType)) }
    def issue_type; end

    sig { params(value: T.nilable(::IssueType)).void }
    def issue_type=(value); end

    sig { returns(T::Array[T.untyped]) }
    def issues_label_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def issues_label_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :issues_labels`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssuesLabels::PrivateCollectionProxy) }
    def issues_labels; end

    sig { params(value: T::Enumerable[::IssuesLabels]).void }
    def issues_labels=(value); end

    sig { returns(T::Array[T.untyped]) }
    def label_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def label_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :labels, through: :issues_labels`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Label::PrivateCollectionProxy) }
    def labels; end

    sig { params(value: T::Enumerable[::Label]).void }
    def labels=(value); end

    sig { returns(T.nilable(::IssueEdit)) }
    def latest_user_content_edit; end

    sig { params(value: T.nilable(::IssueEdit)).void }
    def latest_user_content_edit=(value); end

    sig { returns(T::Array[T.untyped]) }
    def legacy_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def legacy_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :legacy_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reaction::PrivateCollectionProxy) }
    def legacy_reactions; end

    sig { params(value: T::Enumerable[::Reaction]).void }
    def legacy_reactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def linked_branch_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def linked_branch_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :linked_branches`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BranchIssueReference::PrivateCollectionProxy) }
    def linked_branches; end

    sig { params(value: T::Enumerable[::BranchIssueReference]).void }
    def linked_branches=(value); end

    sig { returns(T::Array[T.untyped]) }
    def marked_canonical_issue_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def marked_canonical_issue_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :marked_canonical_issues`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DuplicateIssue::PrivateCollectionProxy) }
    def marked_canonical_issues; end

    sig { params(value: T::Enumerable[::DuplicateIssue]).void }
    def marked_canonical_issues=(value); end

    sig { returns(T::Array[T.untyped]) }
    def marked_duplicate_issue_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def marked_duplicate_issue_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :marked_duplicate_issues`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DuplicateIssue::PrivateCollectionProxy) }
    def marked_duplicate_issues; end

    sig { params(value: T::Enumerable[::DuplicateIssue]).void }
    def marked_duplicate_issues=(value); end

    sig { returns(T::Array[T.untyped]) }
    def memex_project_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def memex_project_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def memex_project_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def memex_project_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :memex_project_items`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MemexProjectItem::PrivateCollectionProxy) }
    def memex_project_items; end

    sig { params(value: T::Enumerable[::MemexProjectItem]).void }
    def memex_project_items=(value); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :memex_projects, through: :memex_project_items`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::MemexProject::PrivateCollectionProxy) }
    def memex_projects; end

    sig { params(value: T::Enumerable[::MemexProject]).void }
    def memex_projects=(value); end

    sig { returns(T::Array[T.untyped]) }
    def merge_event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def merge_event_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :merge_events`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueEvent::PrivateCollectionProxy) }
    def merge_events; end

    sig { params(value: T::Enumerable[::IssueEvent]).void }
    def merge_events=(value); end

    sig { returns(T.nilable(::Milestone)) }
    def milestone; end

    sig { params(value: T.nilable(::Milestone)).void }
    def milestone=(value); end

    sig { returns(T.nilable(::Issue)) }
    def parent; end

    sig { params(value: T.nilable(::Issue)).void }
    def parent=(value); end

    sig { returns(T.nilable(::SubIssue)) }
    def parent_issue_relation; end

    sig { params(value: T.nilable(::SubIssue)).void }
    def parent_issue_relation=(value); end

    sig { returns(T.nilable(::Integration)) }
    def performed_via_integration; end

    sig { params(value: T.nilable(::Integration)).void }
    def performed_via_integration=(value); end

    sig { returns(T.nilable(::PinnedIssue)) }
    def pinned_issue; end

    sig { params(value: T.nilable(::PinnedIssue)).void }
    def pinned_issue=(value); end

    sig { returns(T::Array[T.untyped]) }
    def prioritized_sub_issue_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def prioritized_sub_issue_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :prioritized_sub_issues, through: :sub_issue_relations`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Issue::PrivateCollectionProxy) }
    def prioritized_sub_issues; end

    sig { params(value: T::Enumerable[::Issue]).void }
    def prioritized_sub_issues=(value); end

    sig { returns(T::Array[T.untyped]) }
    def project_column_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def project_column_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :project_columns, through: :cards`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::ProjectColumn::PrivateCollectionProxy) }
    def project_columns; end

    sig { params(value: T::Enumerable[::ProjectColumn]).void }
    def project_columns=(value); end

    sig { returns(T::Array[T.untyped]) }
    def project_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def project_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :projects, through: :cards`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Project::PrivateCollectionProxy) }
    def projects; end

    sig { params(value: T::Enumerable[::Project]).void }
    def projects=(value); end

    sig { returns(T.nilable(::ImportablePullRequest)) }
    def pull_request; end

    sig { params(value: T.nilable(::ImportablePullRequest)).void }
    def pull_request=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueReaction::PrivateCollectionProxy) }
    def reactions; end

    sig { params(value: T::Enumerable[::IssueReaction]).void }
    def reactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reference_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reference_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :references`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CrossReference::PrivateCollectionProxy) }
    def references; end

    sig { params(value: T::Enumerable[::CrossReference]).void }
    def references=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_assignee; end

    sig { returns(T.nilable(::IssueType)) }
    def reload_issue_type; end

    sig { returns(T.nilable(::IssueEdit)) }
    def reload_latest_user_content_edit; end

    sig { returns(T.nilable(::Milestone)) }
    def reload_milestone; end

    sig { returns(T.nilable(::Issue)) }
    def reload_parent; end

    sig { returns(T.nilable(::SubIssue)) }
    def reload_parent_issue_relation; end

    sig { returns(T.nilable(::Integration)) }
    def reload_performed_via_integration; end

    sig { returns(T.nilable(::PinnedIssue)) }
    def reload_pinned_issue; end

    sig { returns(T.nilable(::ImportablePullRequest)) }
    def reload_pull_request; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::SubIssueList)) }
    def reload_sub_issue_list; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    sig { returns(T::Array[T.untyped]) }
    def source_issue_link_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def source_issue_link_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :source_issue_links`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueLink::PrivateCollectionProxy) }
    def source_issue_links; end

    sig { params(value: T::Enumerable[::IssueLink]).void }
    def source_issue_links=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sub_issue_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sub_issue_ids=(ids); end

    sig { returns(T.nilable(::SubIssueList)) }
    def sub_issue_list; end

    sig { params(value: T.nilable(::SubIssueList)).void }
    def sub_issue_list=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sub_issue_relation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sub_issue_relation_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :sub_issue_relations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SubIssue::PrivateCollectionProxy) }
    def sub_issue_relations; end

    sig { params(value: T::Enumerable[::SubIssue]).void }
    def sub_issue_relations=(value); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :sub_issues, through: :sub_issue_relations`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Issue::PrivateCollectionProxy) }
    def sub_issues; end

    sig { params(value: T::Enumerable[::Issue]).void }
    def sub_issues=(value); end

    sig { returns(T::Array[T.untyped]) }
    def target_issue_link_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def target_issue_link_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :target_issue_links`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueLink::PrivateCollectionProxy) }
    def target_issue_links; end

    sig { params(value: T::Enumerable[::IssueLink]).void }
    def target_issue_links=(value); end

    sig { returns(T::Array[T.untyped]) }
    def timeline_event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def timeline_event_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :timeline_events`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueEvent::PrivateCollectionProxy) }
    def timeline_events; end

    sig { params(value: T::Enumerable[::IssueEvent]).void }
    def timeline_events=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tracked_in_issue_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tracked_in_issue_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :tracked_in_issues, through: :target_issue_links`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Issue::PrivateCollectionProxy) }
    def tracked_in_issues; end

    sig { params(value: T::Enumerable[::Issue]).void }
    def tracked_in_issues=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tracked_issue_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tracked_issue_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :tracked_issues, through: :source_issue_links`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Issue::PrivateCollectionProxy) }
    def tracked_issues; end

    sig { params(value: T::Enumerable[::Issue]).void }
    def tracked_issues=(value); end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_content_edit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_content_edit_ids=(ids); end

    # This method is created by ActiveRecord on the `Issue` class because it declared `has_many :user_content_edits`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueEdit::PrivateCollectionProxy) }
    def user_content_edits; end

    sig { params(value: T::Enumerable[::IssueEdit]).void }
    def user_content_edits=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def assigned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def assigned_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def closed_issues(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding_repository_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding_states(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_milestone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_milestone_number(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_repository_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def fresh(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def grouped_by_repo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def has_tracked_link(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def labeled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def labeled_by_any(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def mentioning(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_state_reason_not_planned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def open_issues(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def participating(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sorted_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sorted_by_link_creation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def stale(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def state_reason_not_planned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def suggestions(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unassigned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_any_milestone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_no_milestone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_pull_requests(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_pull_requests(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_comments; end

    sig { returns(Promise[T.untyped]) }
    def async_pull_request; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def assignee_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def assignee_id=(value); end

    sig { returns(T::Boolean) }
    def assignee_id?; end

    sig { returns(T.nilable(::Integer)) }
    def assignee_id_before_last_save; end

    sig { returns(T.untyped) }
    def assignee_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def assignee_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def assignee_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def assignee_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def assignee_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def assignee_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def assignee_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def assignee_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def assignee_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def assignee_id_was; end

    sig { void }
    def assignee_id_will_change!; end

    sig { returns(T.untyped) }
    def body; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def body=(value); end

    sig { returns(T::Boolean) }
    def body?; end

    sig { returns(T.untyped) }
    def body_before_last_save; end

    sig { returns(T.untyped) }
    def body_before_type_cast; end

    sig { returns(T::Boolean) }
    def body_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def body_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def body_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def body_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def body_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def body_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def body_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def body_previously_was; end

    sig { returns(T.untyped) }
    def body_was; end

    sig { void }
    def body_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at=(value); end

    sig { returns(T::Boolean) }
    def closed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at_before_last_save; end

    sig { returns(T.untyped) }
    def closed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def closed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def closed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def closed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def closed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def closed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def closed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at_was; end

    sig { void }
    def closed_at_will_change!; end

    sig { returns(T.untyped) }
    def compressed_body; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def compressed_body=(value); end

    sig { returns(T::Boolean) }
    def compressed_body?; end

    sig { returns(T.untyped) }
    def compressed_body_before_last_save; end

    sig { returns(T.untyped) }
    def compressed_body_before_type_cast; end

    sig { returns(T::Boolean) }
    def compressed_body_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def compressed_body_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def compressed_body_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def compressed_body_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def compressed_body_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def compressed_body_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def compressed_body_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def compressed_body_previously_was; end

    sig { returns(T.untyped) }
    def compressed_body_was; end

    sig { void }
    def compressed_body_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_offset; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def contributed_at_offset=(value); end

    sig { returns(T::Boolean) }
    def contributed_at_offset?; end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_offset_before_last_save; end

    sig { returns(T.untyped) }
    def contributed_at_offset_before_type_cast; end

    sig { returns(T::Boolean) }
    def contributed_at_offset_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contributed_at_offset_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contributed_at_offset_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def contributed_at_offset_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_offset_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contributed_at_offset_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def contributed_at_offset_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_offset_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_offset_was; end

    sig { void }
    def contributed_at_offset_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_timestamp; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def contributed_at_timestamp=(value); end

    sig { returns(T::Boolean) }
    def contributed_at_timestamp?; end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_timestamp_before_last_save; end

    sig { returns(T.untyped) }
    def contributed_at_timestamp_before_type_cast; end

    sig { returns(T::Boolean) }
    def contributed_at_timestamp_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contributed_at_timestamp_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contributed_at_timestamp_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def contributed_at_timestamp_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_timestamp_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contributed_at_timestamp_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def contributed_at_timestamp_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_timestamp_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_timestamp_was; end

    sig { void }
    def contributed_at_timestamp_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T::Boolean) }
    def has_pull_request; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_pull_request=(value); end

    sig { returns(T::Boolean) }
    def has_pull_request?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_pull_request_before_last_save; end

    sig { returns(T.untyped) }
    def has_pull_request_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_pull_request_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_pull_request_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_pull_request_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_pull_request_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_pull_request_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_pull_request_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_pull_request_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_pull_request_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_pull_request_was; end

    sig { void }
    def has_pull_request_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def issue_comments_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def issue_comments_count=(value); end

    sig { returns(T::Boolean) }
    def issue_comments_count?; end

    sig { returns(T.nilable(::Integer)) }
    def issue_comments_count_before_last_save; end

    sig { returns(T.untyped) }
    def issue_comments_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def issue_comments_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_comments_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_comments_count_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def issue_comments_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def issue_comments_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_comments_count_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def issue_comments_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def issue_comments_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def issue_comments_count_was; end

    sig { void }
    def issue_comments_count_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def issue_type_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def issue_type_id=(value); end

    sig { returns(T::Boolean) }
    def issue_type_id?; end

    sig { returns(T.nilable(::Integer)) }
    def issue_type_id_before_last_save; end

    sig { returns(T.untyped) }
    def issue_type_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def issue_type_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_type_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_type_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def issue_type_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def issue_type_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_type_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def issue_type_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def issue_type_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def issue_type_id_was; end

    sig { void }
    def issue_type_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def locked_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def locked_at=(value); end

    sig { returns(T::Boolean) }
    def locked_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def locked_at_before_last_save; end

    sig { returns(T.untyped) }
    def locked_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def locked_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def locked_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def locked_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def locked_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def locked_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def locked_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def locked_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def locked_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def locked_at_was; end

    sig { void }
    def locked_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def milestone_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def milestone_id=(value); end

    sig { returns(T::Boolean) }
    def milestone_id?; end

    sig { returns(T.nilable(::Integer)) }
    def milestone_id_before_last_save; end

    sig { returns(T.untyped) }
    def milestone_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def milestone_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def milestone_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def milestone_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def milestone_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def milestone_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def milestone_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def milestone_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def milestone_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def milestone_id_was; end

    sig { void }
    def milestone_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def number; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def number=(value); end

    sig { returns(T::Boolean) }
    def number?; end

    sig { returns(T.nilable(::Integer)) }
    def number_before_last_save; end

    sig { returns(T.untyped) }
    def number_before_type_cast; end

    sig { returns(T::Boolean) }
    def number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def number_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def number_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def number_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def number_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def number_was; end

    sig { void }
    def number_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def performed_by_integration_id=(value); end

    sig { returns(T::Boolean) }
    def performed_by_integration_id?; end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id_before_last_save; end

    sig { returns(T.untyped) }
    def performed_by_integration_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def performed_by_integration_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def performed_by_integration_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def performed_by_integration_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def performed_by_integration_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def performed_by_integration_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def performed_by_integration_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id_was; end

    sig { void }
    def performed_by_integration_id_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def position; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def position=(value); end

    sig { returns(T::Boolean) }
    def position?; end

    sig { returns(T.nilable(::Float)) }
    def position_before_last_save; end

    sig { returns(T.untyped) }
    def position_before_type_cast; end

    sig { returns(T::Boolean) }
    def position_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def position_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def position_change_to_be_saved; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def position_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def position_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def position_previous_change; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def position_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def position_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def position_was; end

    sig { void }
    def position_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def pull_request_id=(value); end

    sig { returns(T::Boolean) }
    def pull_request_id?; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id_before_last_save; end

    sig { returns(T.untyped) }
    def pull_request_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def pull_request_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pull_request_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pull_request_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def pull_request_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pull_request_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def pull_request_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id_was; end

    sig { void }
    def pull_request_id_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_assignee_id!; end

    sig { void }
    def restore_body!; end

    sig { void }
    def restore_closed_at!; end

    sig { void }
    def restore_compressed_body!; end

    sig { void }
    def restore_contributed_at_offset!; end

    sig { void }
    def restore_contributed_at_timestamp!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_has_pull_request!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_issue_comments_count!; end

    sig { void }
    def restore_issue_type_id!; end

    sig { void }
    def restore_locked_at!; end

    sig { void }
    def restore_milestone_id!; end

    sig { void }
    def restore_number!; end

    sig { void }
    def restore_performed_by_integration_id!; end

    sig { void }
    def restore_position!; end

    sig { void }
    def restore_pull_request_id!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_state_reason!; end

    sig { void }
    def restore_title!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_hidden!; end

    sig { void }
    def restore_user_id!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_assignee_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_assignee_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_body; end

    sig { returns(T::Boolean) }
    def saved_change_to_body?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_closed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_closed_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_compressed_body; end

    sig { returns(T::Boolean) }
    def saved_change_to_compressed_body?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_contributed_at_offset; end

    sig { returns(T::Boolean) }
    def saved_change_to_contributed_at_offset?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_contributed_at_timestamp; end

    sig { returns(T::Boolean) }
    def saved_change_to_contributed_at_timestamp?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_pull_request; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_pull_request?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_issue_comments_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_issue_comments_count?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_issue_type_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_issue_type_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_locked_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_locked_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_milestone_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_milestone_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_number?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_performed_by_integration_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_performed_by_integration_id?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_position; end

    sig { returns(T::Boolean) }
    def saved_change_to_position?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_pull_request_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_pull_request_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_state_reason?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_title; end

    sig { returns(T::Boolean) }
    def saved_change_to_title?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_hidden; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_hidden?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable(::String)) }
    def state; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_reason; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def state_reason=(value); end

    sig { returns(T::Boolean) }
    def state_reason?; end

    sig { returns(T.nilable(::String)) }
    def state_reason_before_last_save; end

    sig { returns(T.untyped) }
    def state_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_reason_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_reason_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def state_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_reason_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def state_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_reason_was; end

    sig { void }
    def state_reason_will_change!; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.untyped) }
    def title; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def title=(value); end

    sig { returns(T::Boolean) }
    def title?; end

    sig { returns(T.untyped) }
    def title_before_last_save; end

    sig { returns(T.untyped) }
    def title_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def title_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def title_previously_was; end

    sig { returns(T.untyped) }
    def title_was; end

    sig { void }
    def title_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_hidden; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_hidden=(value); end

    sig { returns(T::Boolean) }
    def user_hidden?; end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_before_last_save; end

    sig { returns(T.untyped) }
    def user_hidden_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_hidden_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_hidden_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_hidden_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_was; end

    sig { void }
    def user_hidden_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def user_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_assignee_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_body?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_closed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_compressed_body?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_contributed_at_offset?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_contributed_at_timestamp?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_pull_request?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_issue_comments_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_issue_type_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_locked_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_milestone_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_performed_by_integration_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_position?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pull_request_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_title?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_hidden?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end
  end

  module GeneratedPreludeBatchMethods
    sig { returns(T.untyped) }
    def _repository_preloaded_via_domain; end

    sig { params(options: T.untyped).returns(T.untyped) }
    def prelude_body_html(options); end

    sig { returns(Promise[T.untyped]) }
    def async_batch__repository_preloaded_via_domain; end

    sig { params(options: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_body_html(options); end

    sig { returns(T.untyped) }
    def closed_by_commit_oids; end

    sig { params(emotion: T.untyped).returns(T.untyped) }
    def prelude_reaction_count_for_reaction(emotion); end

    sig { returns(T.untyped) }
    def prelude_user_logins_by_reaction; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_closed_by_commit_oids; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_prelude_user_logins_by_reaction; end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def is_read_by_viewer(viewer); end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def prelude_viewer_can_react(viewer); end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_is_read_by_viewer(viewer); end

    sig { params(emotion: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_reaction_count_for_reaction(emotion); end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_viewer_can_react(viewer); end

    sig { returns(T.untyped) }
    def issue_type; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_issue_type; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def assigned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def assigned_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def closed_issues(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding_repository_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding_states(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_milestone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_milestone_number(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_repository_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def fresh(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def grouped_by_repo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def has_tracked_link(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def labeled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def labeled_by_any(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def mentioning(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_state_reason_not_planned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def open_issues(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def participating(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sorted_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sorted_by_link_creation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def stale(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def state_reason_not_planned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def suggestions(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unassigned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_any_milestone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_no_milestone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_pull_requests(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_pull_requests(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ImportableIssue } }

    sig { returns(T::Array[::ImportableIssue]) }
    def to_a; end

    sig { returns(T::Array[::ImportableIssue]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::ImportableIssue } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ImportableIssue } }

    sig do
      params(
        records: T.any(::ImportableIssue, T::Enumerable[T.any(::ImportableIssue, T::Enumerable[::ImportableIssue])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::ImportableIssue, T::Enumerable[T.any(::ImportableIssue, T::Enumerable[::ImportableIssue])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::ImportableIssue, T::Enumerable[T.any(::ImportableIssue, T::Enumerable[::ImportableIssue])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::ImportableIssue]) }
    def load_target; end

    sig do
      params(
        records: T.any(::ImportableIssue, T::Enumerable[T.any(::ImportableIssue, T::Enumerable[::ImportableIssue])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::ImportableIssue, T::Enumerable[T.any(::ImportableIssue, T::Enumerable[::ImportableIssue])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::ImportableIssue, T::Enumerable[T.any(::ImportableIssue, T::Enumerable[::ImportableIssue])])
      ).returns(T::Array[::ImportableIssue])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::ImportableIssue]) }
    def target; end

    sig { returns(T::Array[::ImportableIssue]) }
    def to_a; end

    sig { returns(T::Array[::ImportableIssue]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::ImportableIssue } }

    sig { returns(T::Array[::ImportableIssue]) }
    def to_a; end

    sig { returns(T::Array[::ImportableIssue]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::ImportableIssue } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

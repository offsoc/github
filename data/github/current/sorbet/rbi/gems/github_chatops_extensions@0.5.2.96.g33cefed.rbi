# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `github_chatops_extensions` gem.
# Please instead update this file by running `bin/tapioca gem github_chatops_extensions`.

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/base.rb#3
module GitHubChatopsExtensions; end

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/base.rb#4
module GitHubChatopsExtensions::Checks; end

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/base.rb#5
class GitHubChatopsExtensions::Checks::Base
  # @return [Base] a new instance of Base
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/base.rb#6
  def initialize(params, banner, logger = T.unsafe(nil)); end

  private

  # Returns the value of attribute banner.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/base.rb#14
  def banner; end

  # Returns the value of attribute logger.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/base.rb#14
  def logger; end

  # Returns the value of attribute params.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/base.rb#14
  def params; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/base.rb#16
  def room_id; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/base.rb#20
  def user; end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#27
class GitHubChatopsExtensions::Checks::Entitlements < ::GitHubChatopsExtensions::Checks::Base
  # @return [Boolean]
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#54
  def member_of_entitlement?(path, username: T.unsafe(nil)); end

  # @raise [GitHubChatopsExtensions::Errors::NotEntitledError]
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#32
  def require_ldap_entitlement(path, username: T.unsafe(nil)); end

  private

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#97
  def dn_from_entitlement(path); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#103
  def github_path_for_entitlement(path); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#71
  def header; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#86
  def message_multi_entitlement(paths, username: T.unsafe(nil)); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#75
  def message_one_entitlement(path, username: T.unsafe(nil)); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#109
  def target_dn(username = T.unsafe(nil)); end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#30
GitHubChatopsExtensions::Checks::Entitlements::ENTITLEMENTS_BASEDIR = T.let(T.unsafe(nil), String)

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#29
GitHubChatopsExtensions::Checks::Entitlements::ENTITLEMENTS_OU = T.let(T.unsafe(nil), String)

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#28
GitHubChatopsExtensions::Checks::Entitlements::PEOPLE_OU = T.let(T.unsafe(nil), String)

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#28
class GitHubChatopsExtensions::Checks::Fido < ::GitHubChatopsExtensions::Checks::Base
  # Returns the value of attribute challenge_token.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#29
  def challenge_token; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#31
  def check_2fa; end

  private

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#101
  def email; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#66
  def fido_challenge; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#72
  def fido_check(challenge, poll = T.unsafe(nil)); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#88
  def fido_poll(challenge); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#97
  def fido_status(challenge); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#58
  def say(message); end

  # @raise [clazz]
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#110
  def tfa_fail(msg = T.unsafe(nil), clazz = T.unsafe(nil)); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#105
  def two_fa_message(url); end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#7
module GitHubChatopsExtensions::Checks::Includable; end

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#8
module GitHubChatopsExtensions::Checks::Includable::Entitlements
  # @return [Boolean]
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#19
  def member_of_entitlement?(path, username: T.unsafe(nil)); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/entitlements.rb#9
  def require_ldap_entitlement(path, username: T.unsafe(nil)); end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#12
module GitHubChatopsExtensions::Checks::Includable::Fido
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/fido.rb#13
  def require_fido_2fa; end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/room.rb#8
module GitHubChatopsExtensions::Checks::Includable::Room
  # Require that the chat message be sent in a particular chat room. If
  # room_id_or_list is not specified, then this will prohibit direct messages
  # but allow any chat room.
  #
  # room_id_or_list - A String or Array with acceptable room name(s).
  #
  # Returns nothing, but will `jsonrpc_response` an error if room does not match.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/room.rb#16
  def require_in_room(room_id_or_list = T.unsafe(nil)); end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/checks/room.rb#28
class GitHubChatopsExtensions::Checks::Room < ::GitHubChatopsExtensions::Checks::Base
  # Require that the chat message be sent in a particular chat room. If
  # room_id_or_list is not specified, then this will prohibit direct messages
  # but allow any chat room.
  #
  # room_id_or_list - A String or Array with acceptable room name(s).
  #
  # Returns nothing, but will raise RoomRestrictionError upon prohibited action.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/room.rb#36
  def require_in_room(room_id_or_list = T.unsafe(nil)); end

  private

  # @raise [GitHubChatopsExtensions::Errors::RoomRestrictionError]
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/room.rb#52
  def acceptable_room_error(acceptable_rooms); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/checks/room.rb#59
  def acceptable_room_string(acceptable_rooms); end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#6
module GitHubChatopsExtensions::Command; end

# Abstraction and utility methods around parsing arguments from ARGV
#
# This can take a specification from the command itself to help parse options in such
# a way as to be useful, without writing a bunch of custom parsing logic. The specification
# will look like this:
#
# {
#   variables: {
#     "verbose"  => { argument: false, default: false, required: false },
#     "username" => { argument: true, required: true }
#   },
#   aliases: {
#     "v" => "verbose",
#     "u" => "username"
#   },
#   placeholders: %w[username]
# }
#
# Here are some examples of how this specification would parse into keys and values:
#   `username=foo -v`              => { username: "foo", verbose: true }
#   `username=foo`                 => { username: "foo", verbose: false }
#   `--verbose -u foo`             => { username: "foo", verbose: true }
#   `--no-verbose --username=foo`  => { username: "foo", verbose: false }
#   `--verbose foo`                => { username: "foo", verbose: true } (because first placeholder argument is username)
#   `foo`                          => { username: "foo", verbose: false } (because first placeholder argument is username)
#   `--verbose`                    => Raises an error because username is not defined, but it's required per spec
#   `--chickens --username foo`    => Raises an error because chickens is not known as an argument
#
# source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#36
class GitHubChatopsExtensions::Command::Arguments
  # @return [Arguments] a new instance of Arguments
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#39
  def initialize(argv:, params:, spec: T.unsafe(nil)); end

  # Allow retrieving of key-values like a hash
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#183
  def [](val); end

  # :nocov:
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#177
  def debug; end

  # Returns the value of attribute kv.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#37
  def kv; end

  # Returns the value of attribute plain.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#37
  def plain; end

  # Returns the value of attribute raw.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#37
  def raw; end

  private

  # assemble a multi-word argument from the parts
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#241
  def assemble_multi_word_arg(arg, args); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#202
  def enforce_spec!; end

  # look for quoted multi-word argument or return single-word arg
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#225
  def get_multi_word_arg(arg, argv); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#189
  def initialize_spec!(argv, spec); end

  # @raise [GitHubChatopsExtensions::CommandError]
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/arguments.rb#210
  def validate_variable!(var); end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#5
class GitHubChatopsExtensions::Command::BaseCommand
  # @return [BaseCommand] a new instance of BaseCommand
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#12
  def initialize(args, namespace, params, response, logger); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#27
  def command; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#85
  def execute; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#68
  def header; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#77
  def help; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#87
  def run; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#45
  def subcommand; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#83
  def validate; end

  private

  # Returns the value of attribute args.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#106
  def args; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#108
  def banner; end

  # Returns the value of attribute jsonrpc_params.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#106
  def jsonrpc_params; end

  # Returns the value of attribute logger.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#106
  def logger; end

  # @return [Boolean]
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#192
  def member_of_entitlement?(entitlement, banner_in: T.unsafe(nil), username: T.unsafe(nil)); end

  # Returns the value of attribute params.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#106
  def params; end

  # Called from within an instantiated instance.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#185
  def require_entitlement(entitlement, banner_in: T.unsafe(nil), username: T.unsafe(nil)); end

  # Called from within an instantiated instance.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#159
  def require_fido_2fa(banner_in = T.unsafe(nil)); end

  # Called from within an instantiated instance.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#218
  def require_in_room(room_id_or_list = T.unsafe(nil), banner_in = T.unsafe(nil)); end

  # Returns the value of attribute response.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#106
  def response; end

  # Returns the value of attribute room_id.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#106
  def room_id; end

  # -------------------------------------------------------------------------------------
  # Reflecting some methods from helper classes for convenience.
  # -------------------------------------------------------------------------------------
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#138
  def say_in_direct_message(message, user: T.unsafe(nil)); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#143
  def say_out_of_band(message, user: T.unsafe(nil), room_id: T.unsafe(nil), mention: T.unsafe(nil)); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#149
  def statsd; end

  # Returns the value of attribute user.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#106
  def user; end

  class << self
    # Allow methods within the instance non-hacky access to the class variable.
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#205
    def _require_entitlement; end

    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#209
    def _require_entitlement_username; end

    # Allow methods within the instance non-hacky access to the class variable.
    #
    # @return [Boolean]
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#176
    def _require_fido_2fa?; end

    # Allow methods within the instance non-hacky access to the class variable.
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#232
    def _require_in_room; end

    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#51
    def banner; end

    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#53
    def base_help; end

    # header is for a one-liner about how to use the command or what it does in
    # general. This is shown in summary displays that often include multiple commands.
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#66
    def header; end

    # help is for a more detailed explanation. A longer wall of text is appropriate.
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#75
    def help; end

    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#37
    def regex; end

    # :nocov:
    #
    # @return [Boolean]
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#117
    def registerable?; end

    # @return [Boolean]
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#121
    def registered?; end

    # Class method to allow "require_entitlement" to be declared in a class.
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#199
    def require_entitlement(entitlement, username: T.unsafe(nil)); end

    # Class method for FIDO 2FA, to allow "require_fido_2fa" to be declared in a class.
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#171
    def require_fido_2fa; end

    # Class method to allow "require_in_room" to be declared in a class.
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#227
    def require_in_room(room_id_or_list = T.unsafe(nil)); end

    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#129
    def reset!; end

    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#6
    def run(argv:, namespace:, response:, logger:, params: T.unsafe(nil)); end

    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#125
    def set_registered; end

    # slug is used internally by chatops controller and should be declared as
    # "<command name> - <some brief header message>" to register with the handler.
    # Returns nil so the message is not registered with the handler if no header
    # details are given. (This should not be used within commands, so there is no
    # corresponding instance method of this defined.)
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#60
    def slug; end

    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#33
    def spec; end

    # source://github_chatops_extensions//lib/github_chatops_extensions/command/base_command.rb#41
    def subcommand; end
  end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/command/help_builder.rb#5
class GitHubChatopsExtensions::Command::HelpBuilder < ::GitHubChatopsExtensions::Command::BaseCommand
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/help_builder.rb#6
  def execute; end

  private

  # Generate the base help. Iterate through all classes in the command namespace.
  # If :base_help returns something then return it. If that isn't found anywhere, return
  # a list of all commands for which help was defined.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/help_builder.rb#47
  def base_help; end

  # Get a list of all classes in the parent namespace.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/help_builder.rb#74
  def classes_in_namespace; end

  # Take case-insensitive class name and find the match if it exists in the namespace.
  # This matches on the command name if defined, otherwise on the class name.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/help_builder.rb#90
  def find_class_in_namespace(text); end

  # Return codes:
  # nil    - Class not found
  # false  - Class found but it does not have help information
  # String - The help text
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/command/help_builder.rb#83
  def help_from_class(class_name, method_name); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/command/help_builder.rb#94
  def user; end
end

# source://github_chatops_extensions//lib/github_chatops_extensions.rb#19
class GitHubChatopsExtensions::CommandError < ::StandardError; end

# source://github_chatops_extensions//lib/github_chatops_extensions.rb#23
class GitHubChatopsExtensions::Errors; end

# source://github_chatops_extensions//lib/github_chatops_extensions.rb#24
class GitHubChatopsExtensions::Errors::FidoFailure < ::GitHubChatopsExtensions::HandledError; end

# source://github_chatops_extensions//lib/github_chatops_extensions.rb#25
class GitHubChatopsExtensions::Errors::FidoSetupFailure < ::GitHubChatopsExtensions::HandledError; end

# source://github_chatops_extensions//lib/github_chatops_extensions.rb#26
class GitHubChatopsExtensions::Errors::FidoUnauthorized < ::GitHubChatopsExtensions::CommandError; end

# source://github_chatops_extensions//lib/github_chatops_extensions.rb#27
class GitHubChatopsExtensions::Errors::LDAPConnectionError < ::GitHubChatopsExtensions::HandledError; end

# source://github_chatops_extensions//lib/github_chatops_extensions.rb#28
class GitHubChatopsExtensions::Errors::LDAPWTFError < ::GitHubChatopsExtensions::HandledError; end

# source://github_chatops_extensions//lib/github_chatops_extensions.rb#29
class GitHubChatopsExtensions::Errors::MissingArgumentError < ::GitHubChatopsExtensions::HandledError; end

# source://github_chatops_extensions//lib/github_chatops_extensions.rb#30
class GitHubChatopsExtensions::Errors::NotEntitledError < ::GitHubChatopsExtensions::CommandError; end

# source://github_chatops_extensions//lib/github_chatops_extensions.rb#31
class GitHubChatopsExtensions::Errors::RoomRestrictionError < ::GitHubChatopsExtensions::CommandError; end

# source://github_chatops_extensions//lib/github_chatops_extensions.rb#20
class GitHubChatopsExtensions::ExitError < ::StandardError; end

# source://github_chatops_extensions//lib/github_chatops_extensions.rb#21
class GitHubChatopsExtensions::HandledError < ::StandardError; end

# source://github_chatops_extensions//lib/github_chatops_extensions/helpers/chatterbox.rb#6
class GitHubChatopsExtensions::Helpers; end

# source://github_chatops_extensions//lib/github_chatops_extensions/helpers/chatterbox.rb#7
class GitHubChatopsExtensions::Helpers::Chatterbox
  class << self
    # Send a direct message to a user. Note that as presently implemented, this message
    # will appear under Slackbot, and not in any direct message the user may have open
    # with Hubot. I'm not sure if a fix for this is possible or desirable.
    #
    # user    - String - user ID who should receive the message
    # message - String - text of the message to send
    #
    # Returns nothing and does not block on failure.
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/chatterbox.rb#16
    def say_in_direct_message(user:, message:); end

    # Send an out-of-band reply, e.g. if you need to prompt a user to do something
    # before the command finishes running or surface an error immediately. This will
    # send the message to the room where it was typed, or direct-message it to the
    # person if the room cannot be determined.
    #
    # user    - String - user ID who should receive the message
    # room_id - String - room ID where message should be sent (nil for DM)
    # message - String - text of the message to send
    # mention - Boolean - whether to at-mention the recipient
    #
    # Returns nothing and does not block on failure.
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/chatterbox.rb#31
    def say_out_of_band(user:, message:, room_id: T.unsafe(nil), mention: T.unsafe(nil)); end
  end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#5
class GitHubChatopsExtensions::Helpers::Output
  # @return [Output] a new instance of Output
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#14
  def initialize; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#44
  def as_json; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#28
  def error(message); end

  # @raise [GitHubChatopsExtensions::ExitError]
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#38
  def exit(_code = T.unsafe(nil)); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#23
  def info(message); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#19
  def preformatted(message); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#33
  def success(message); end

  private

  # Returns the value of attribute color.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#50
  def color; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#53
  def colors; end

  # Returns the value of attribute messages.
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#51
  def messages; end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#8
GitHubChatopsExtensions::Helpers::Output::COLORS = T.let(T.unsafe(nil), Hash)

# source://github_chatops_extensions//lib/github_chatops_extensions/helpers/output.rb#6
class GitHubChatopsExtensions::Helpers::Output::ExitError < ::StandardError; end

# source://github_chatops_extensions//lib/github_chatops_extensions/helpers/statsd.rb#11
class GitHubChatopsExtensions::Helpers::Statsd
  # @return [Statsd] a new instance of Statsd
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/statsd.rb#15
  def initialize(command, subcommand, user, room_id); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/helpers/statsd.rb#28
  def client; end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/helpers/statsd.rb#12
GitHubChatopsExtensions::Helpers::Statsd::DATADOG_HOST = T.let(T.unsafe(nil), String)

# source://github_chatops_extensions//lib/github_chatops_extensions/helpers/statsd.rb#13
GitHubChatopsExtensions::Helpers::Statsd::DATADOG_PORT = T.let(T.unsafe(nil), Integer)

# source://github_chatops_extensions//lib/github_chatops_extensions/service/ldap.rb#23
module GitHubChatopsExtensions::Service; end

# source://github_chatops_extensions//lib/github_chatops_extensions/service/ldap.rb#24
class GitHubChatopsExtensions::Service::LDAP
  # @raise [GitHubChatopsExtensions::Errors::LDAPWTFError]
  # @return [LDAP] a new instance of LDAP
  #
  # source://github_chatops_extensions//lib/github_chatops_extensions/service/ldap.rb#27
  def initialize(uri: T.unsafe(nil), bind_dn: T.unsafe(nil), bind_pw: T.unsafe(nil)); end

  # source://github_chatops_extensions//lib/github_chatops_extensions/service/ldap.rb#57
  def method_missing(m, *args, &block); end

  private

  # source://github_chatops_extensions//lib/github_chatops_extensions/service/ldap.rb#63
  def ldap_binddn; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/service/ldap.rb#67
  def ldap_bindpw; end

  # source://github_chatops_extensions//lib/github_chatops_extensions/service/ldap.rb#71
  def ldap_uri; end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/service/ldap.rb#25
GitHubChatopsExtensions::Service::LDAP::SSL_CA_FILE = T.let(T.unsafe(nil), String)

# source://github_chatops_extensions//lib/github_chatops_extensions/util/validation.rb#4
module GitHubChatopsExtensions::Util; end

# source://github_chatops_extensions//lib/github_chatops_extensions/util/validation.rb#5
class GitHubChatopsExtensions::Util::Validation
  class << self
    # NOTE: This method is borrowed from entitlements-app.
    # Given a hash, validate options for correct data type and presence of required attributes.
    #
    # spec - A Hash with the specification (see contract)
    # data - A Hash with the actual options to test
    # text - A description of the thing being validated, to print in error messages
    #
    # Returns nothing but may raise error.
    #
    # source://github_chatops_extensions//lib/github_chatops_extensions/util/validation.rb#16
    def validate_attr!(spec, data, text); end
  end
end

# source://github_chatops_extensions//lib/github_chatops_extensions/util/validation.rb#6
class GitHubChatopsExtensions::Util::Validation::ValidationError < ::StandardError; end

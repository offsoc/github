# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::RegistryMetadata::V0::Entities::Package`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::RegistryMetadata::V0::Entities::Package`.

class Hydro::Schemas::RegistryMetadata::V0::Entities::Package
  sig do
    params(
      author_id: T.nilable(Integer),
      author_type: T.nilable(T.any(Symbol, Integer)),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      deleted_at: T.nilable(Google::Protobuf::Timestamp),
      description: T.nilable(String),
      display_login: T.nilable(String),
      ecosystem: T.nilable(T.any(Symbol, Integer)),
      id: T.nilable(Integer),
      is_public: T.nilable(T::Boolean),
      name: T.nilable(String),
      namespace: T.nilable(String),
      original_name: T.nilable(String),
      repo_id: T.nilable(Integer),
      updated_at: T.nilable(Google::Protobuf::Timestamp),
      visibility: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(author_id: nil, author_type: nil, created_at: nil, deleted_at: nil, description: nil, display_login: nil, ecosystem: nil, id: nil, is_public: nil, name: nil, namespace: nil, original_name: nil, repo_id: nil, updated_at: nil, visibility: nil); end

  sig { returns(Integer) }
  def author_id; end

  sig { params(value: Integer).void }
  def author_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def author_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def author_type=(value); end

  sig { void }
  def clear_author_id; end

  sig { void }
  def clear_author_type; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_deleted_at; end

  sig { void }
  def clear_description; end

  sig { void }
  def clear_display_login; end

  sig { void }
  def clear_ecosystem; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_is_public; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_namespace; end

  sig { void }
  def clear_original_name; end

  sig { void }
  def clear_repo_id; end

  sig { void }
  def clear_updated_at; end

  sig { void }
  def clear_visibility; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def deleted_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def deleted_at=(value); end

  sig { returns(String) }
  def description; end

  sig { params(value: String).void }
  def description=(value); end

  sig { returns(String) }
  def display_login; end

  sig { params(value: String).void }
  def display_login=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def ecosystem; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def ecosystem=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def is_public; end

  sig { params(value: T::Boolean).void }
  def is_public=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(String) }
  def namespace; end

  sig { params(value: String).void }
  def namespace=(value); end

  sig { returns(String) }
  def original_name; end

  sig { params(value: String).void }
  def original_name=(value); end

  sig { returns(Integer) }
  def repo_id; end

  sig { params(value: Integer).void }
  def repo_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def visibility; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def visibility=(value); end
end

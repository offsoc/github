# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Repository`.
# Please instead update this file by running `bin/tapioca dsl Repository`.

class Repository
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedColumnCoderAccessors
  include GeneratedSpammableMethods
  extend GeneratedSpammableClassMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods
  include GeneratedEntityReferenceMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Repository).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Repository).void)
      ).returns(::Repository)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Repository).void)
      ).returns(::Repository)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Repository).void)
      ).returns(::Repository)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Repository).void)
      ).returns(::Repository)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Repository).void)
      ).returns(::Repository)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Repository]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Repository)) }
    def fifth; end

    sig { returns(::Repository) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Repository)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Repository) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Repository).void)
      ).returns(T.nilable(T::Enumerator[::Repository]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Repository]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Repository]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Repository).void)
      ).returns(::Repository)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Repository).void)
      ).returns(::Repository)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Repository).void)
      ).returns(::Repository)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Repository)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Repository) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Repository) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Repository) }
    def first!; end

    sig { returns(T.nilable(::Repository)) }
    def forty_two; end

    sig { returns(::Repository) }
    def forty_two!; end

    sig { returns(T.nilable(::Repository)) }
    def fourth; end

    sig { returns(::Repository) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Repository) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Repository).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Repository).void)
      ).returns(::Repository)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Repository).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Repository).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Repository)) }
    def second; end

    sig { returns(::Repository) }
    def second!; end

    sig { returns(T.nilable(::Repository)) }
    def second_to_last; end

    sig { returns(::Repository) }
    def second_to_last!; end

    sig { returns(::Repository) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Repository) }
    def take!; end

    sig { returns(T.nilable(::Repository)) }
    def third; end

    sig { returns(::Repository) }
    def third!; end

    sig { returns(T.nilable(::Repository)) }
    def third_to_last; end

    sig { returns(::Repository) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def action_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def action_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :actions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryAction::PrivateCollectionProxy) }
    def actions; end

    sig { params(value: T::Enumerable[::RepositoryAction]).void }
    def actions=(value); end

    sig { returns(T.nilable(::ActionsPolicy::Allowlist)) }
    def actions_allowlist; end

    sig { params(value: T.nilable(::ActionsPolicy::Allowlist)).void }
    def actions_allowlist=(value); end

    sig { returns(T::Array[T.untyped]) }
    def actions_artifact_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def actions_artifact_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :actions_artifacts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Artifact::PrivateCollectionProxy) }
    def actions_artifacts; end

    sig { params(value: T::Enumerable[::Artifact]).void }
    def actions_artifacts=(value); end

    sig { returns(T.nilable(::ActionsCacheUsage)) }
    def actions_cache_usage; end

    sig { params(value: T.nilable(::ActionsCacheUsage)).void }
    def actions_cache_usage=(value); end

    sig { returns(T::Array[T.untyped]) }
    def all_hook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def all_hook_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :all_hooks`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Hook::PrivateCollectionProxy) }
    def all_hooks; end

    sig { params(value: T::Enumerable[::Hook]).void }
    def all_hooks=(value); end

    sig { returns(T::Array[T.untyped]) }
    def applied_discussion_label_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_discussion_label_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :applied_discussion_labels`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AppliedDiscussionLabel::PrivateCollectionProxy) }
    def applied_discussion_labels; end

    sig { params(value: T::Enumerable[::AppliedDiscussionLabel]).void }
    def applied_discussion_labels=(value); end

    sig { returns(T::Array[T.untyped]) }
    def applied_repository_topic_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_repository_topic_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :applied_repository_topics`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryTopic::PrivateCollectionProxy) }
    def applied_repository_topics; end

    sig { params(value: T::Enumerable[::RepositoryTopic]).void }
    def applied_repository_topics=(value); end

    sig { returns(T::Array[T.untyped]) }
    def asset_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def asset_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :assets, through: :attachments`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::UserAsset::PrivateCollectionProxy) }
    def assets; end

    sig { params(value: T::Enumerable[::UserAsset]).void }
    def assets=(value); end

    sig { returns(T::Array[T.untyped]) }
    def attachment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def attachment_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :attachments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Attachment::PrivateCollectionProxy) }
    def attachments; end

    sig { params(value: T::Enumerable[::Attachment]).void }
    def attachments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def branch_rename_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def branch_rename_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :branch_renames`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryBranchRename::PrivateCollectionProxy) }
    def branch_renames; end

    sig { params(value: T::Enumerable[::RepositoryBranchRename]).void }
    def branch_renames=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionsPolicy::Allowlist) }
    def build_actions_allowlist(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionsCacheUsage) }
    def build_actions_cache_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business) }
    def build_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ClassroomAssignment) }
    def build_classroom_assignment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ClassroomRepository) }
    def build_classroom_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CommunityProfile) }
    def build_community_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DisabledAccessReason) }
    def build_disabled_access_reason(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryGroupMap) }
    def build_group_map(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Import) }
    def build_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InternalRepository) }
    def build_internal_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAction) }
    def build_listed_action(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Mirror) }
    def build_mirror(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryNetwork) }
    def build_network(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Stafftools::NetworkPrivilege) }
    def build_network_privilege(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryImage) }
    def build_open_graph_image(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def build_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OrganizationDiscussionConfig) }
    def build_organization_discussion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositorySponsorable) }
    def build_owner_repository_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def build_owner_sponsors_listing_stafftools_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Page) }
    def build_page(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_parent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAdvisory) }
    def build_parent_advisory(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LanguageName) }
    def build_primary_language(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ProtectedBranch) }
    def build_protected_branch_for_default_branch(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InteractionLimit) }
    def build_repo_interaction_limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAuthVersion) }
    def build_repository_auth_version(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryImport) }
    def build_repository_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryLatestRelease) }
    def build_repository_latest_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryLicense) }
    def build_repository_license(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositorySecurityCenterConfig) }
    def build_repository_security_center_config(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositorySecurityConfiguration) }
    def build_repository_security_configuration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositorySequence) }
    def build_repository_sequence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryVulnerabilityAlertSequence) }
    def build_repository_vulnerability_alert_sequence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Release) }
    def build_saved_latest_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SecurityConfiguration) }
    def build_security_configuration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryClone) }
    def build_template_repository_clone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TokenScanResultSequence) }
    def build_token_scan_result_sequence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TokenScanStatus) }
    def build_token_scan_status(*args, &blk); end

    sig { returns(T.nilable(::Business)) }
    def business; end

    sig { params(value: T.nilable(::Business)).void }
    def business=(value); end

    sig { returns(T::Array[T.untyped]) }
    def check_suite_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def check_suite_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :check_suites`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CheckSuite::PrivateCollectionProxy) }
    def check_suites; end

    sig { params(value: T::Enumerable[::CheckSuite]).void }
    def check_suites=(value); end

    sig { returns(T::Array[T.untyped]) }
    def child_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def child_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :children`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def children; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def children=(value); end

    sig { returns(T.nilable(::ClassroomAssignment)) }
    def classroom_assignment; end

    sig { params(value: T.nilable(::ClassroomAssignment)).void }
    def classroom_assignment=(value); end

    sig { returns(T.nilable(::ClassroomRepository)) }
    def classroom_repository; end

    sig { params(value: T.nilable(::ClassroomRepository)).void }
    def classroom_repository=(value); end

    sig { returns(T::Array[T.untyped]) }
    def close_issue_reference_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def close_issue_reference_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :close_issue_references`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CloseIssueReference::PrivateCollectionProxy) }
    def close_issue_references; end

    sig { params(value: T::Enumerable[::CloseIssueReference]).void }
    def close_issue_references=(value); end

    sig { returns(T::Array[T.untyped]) }
    def commit_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def commit_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :commit_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CommitComment::PrivateCollectionProxy) }
    def commit_comments; end

    sig { params(value: T::Enumerable[::CommitComment]).void }
    def commit_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def commit_contribution_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def commit_contribution_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :commit_contributions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CommitContribution::PrivateCollectionProxy) }
    def commit_contributions; end

    sig { params(value: T::Enumerable[::CommitContribution]).void }
    def commit_contributions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def commit_mention_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def commit_mention_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :commit_mentions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CommitMention::PrivateCollectionProxy) }
    def commit_mentions; end

    sig { params(value: T::Enumerable[::CommitMention]).void }
    def commit_mentions=(value); end

    sig { returns(T.nilable(::CommunityProfile)) }
    def community_profile; end

    sig { params(value: T.nilable(::CommunityProfile)).void }
    def community_profile=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :configuration_entries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Configuration::Entry::PrivateCollectionProxy) }
    def configuration_entries; end

    sig { params(value: T::Enumerable[::Configuration::Entry]).void }
    def configuration_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def configuration_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def configuration_entry_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionsPolicy::Allowlist) }
    def create_actions_allowlist(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionsPolicy::Allowlist) }
    def create_actions_allowlist!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionsCacheUsage) }
    def create_actions_cache_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionsCacheUsage) }
    def create_actions_cache_usage!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business) }
    def create_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business) }
    def create_business!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ClassroomAssignment) }
    def create_classroom_assignment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ClassroomAssignment) }
    def create_classroom_assignment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ClassroomRepository) }
    def create_classroom_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ClassroomRepository) }
    def create_classroom_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CommunityProfile) }
    def create_community_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CommunityProfile) }
    def create_community_profile!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DisabledAccessReason) }
    def create_disabled_access_reason(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DisabledAccessReason) }
    def create_disabled_access_reason!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryGroupMap) }
    def create_group_map(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryGroupMap) }
    def create_group_map!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Import) }
    def create_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Import) }
    def create_import!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InternalRepository) }
    def create_internal_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InternalRepository) }
    def create_internal_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAction) }
    def create_listed_action(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAction) }
    def create_listed_action!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Mirror) }
    def create_mirror(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Mirror) }
    def create_mirror!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryNetwork) }
    def create_network(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryNetwork) }
    def create_network!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Stafftools::NetworkPrivilege) }
    def create_network_privilege(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Stafftools::NetworkPrivilege) }
    def create_network_privilege!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryImage) }
    def create_open_graph_image(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryImage) }
    def create_open_graph_image!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OrganizationDiscussionConfig) }
    def create_organization_discussion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OrganizationDiscussionConfig) }
    def create_organization_discussion!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_owner!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositorySponsorable) }
    def create_owner_repository_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositorySponsorable) }
    def create_owner_repository_sponsorable!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def create_owner_sponsors_listing_stafftools_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def create_owner_sponsors_listing_stafftools_metadata!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Page) }
    def create_page(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Page) }
    def create_page!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_parent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_parent!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAdvisory) }
    def create_parent_advisory(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAdvisory) }
    def create_parent_advisory!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LanguageName) }
    def create_primary_language(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LanguageName) }
    def create_primary_language!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ProtectedBranch) }
    def create_protected_branch_for_default_branch(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ProtectedBranch) }
    def create_protected_branch_for_default_branch!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InteractionLimit) }
    def create_repo_interaction_limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InteractionLimit) }
    def create_repo_interaction_limit!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAuthVersion) }
    def create_repository_auth_version(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAuthVersion) }
    def create_repository_auth_version!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryImport) }
    def create_repository_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryImport) }
    def create_repository_import!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryLatestRelease) }
    def create_repository_latest_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryLatestRelease) }
    def create_repository_latest_release!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryLicense) }
    def create_repository_license(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryLicense) }
    def create_repository_license!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositorySecurityCenterConfig) }
    def create_repository_security_center_config(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositorySecurityCenterConfig) }
    def create_repository_security_center_config!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositorySecurityConfiguration) }
    def create_repository_security_configuration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositorySecurityConfiguration) }
    def create_repository_security_configuration!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositorySequence) }
    def create_repository_sequence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositorySequence) }
    def create_repository_sequence!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryVulnerabilityAlertSequence) }
    def create_repository_vulnerability_alert_sequence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryVulnerabilityAlertSequence) }
    def create_repository_vulnerability_alert_sequence!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Release) }
    def create_saved_latest_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Release) }
    def create_saved_latest_release!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SecurityConfiguration) }
    def create_security_configuration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SecurityConfiguration) }
    def create_security_configuration!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryClone) }
    def create_template_repository_clone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryClone) }
    def create_template_repository_clone!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TokenScanResultSequence) }
    def create_token_scan_result_sequence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TokenScanResultSequence) }
    def create_token_scan_result_sequence!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TokenScanStatus) }
    def create_token_scan_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TokenScanStatus) }
    def create_token_scan_status!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def dependency_update_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def dependency_update_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :dependency_updates`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryDependencyUpdate::PrivateCollectionProxy) }
    def dependency_updates; end

    sig { params(value: T::Enumerable[::RepositoryDependencyUpdate]).void }
    def dependency_updates=(value); end

    sig { returns(T::Array[T.untyped]) }
    def deployment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def deployment_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :deployments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Deployment::PrivateCollectionProxy) }
    def deployments; end

    sig { params(value: T::Enumerable[::Deployment]).void }
    def deployments=(value); end

    sig { returns(T.nilable(::DisabledAccessReason)) }
    def disabled_access_reason; end

    sig { params(value: T.nilable(::DisabledAccessReason)).void }
    def disabled_access_reason=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :discussion_categories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionCategory::PrivateCollectionProxy) }
    def discussion_categories; end

    sig { params(value: T::Enumerable[::DiscussionCategory]).void }
    def discussion_categories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def discussion_category_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def discussion_category_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def discussion_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def discussion_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :discussion_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionComment::PrivateCollectionProxy) }
    def discussion_comments; end

    sig { params(value: T::Enumerable[::DiscussionComment]).void }
    def discussion_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def discussion_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def discussion_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def discussion_section_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def discussion_section_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :discussion_sections`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionSection::PrivateCollectionProxy) }
    def discussion_sections; end

    sig { params(value: T::Enumerable[::DiscussionSection]).void }
    def discussion_sections=(value); end

    sig { returns(T::Array[T.untyped]) }
    def discussion_spotlight_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def discussion_spotlight_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :discussion_spotlights`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionSpotlight::PrivateCollectionProxy) }
    def discussion_spotlights; end

    sig { params(value: T::Enumerable[::DiscussionSpotlight]).void }
    def discussion_spotlights=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :discussions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Discussion::PrivateCollectionProxy) }
    def discussions; end

    sig { params(value: T::Enumerable[::Discussion]).void }
    def discussions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def email_hook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def email_hook_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :email_hooks`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Hook::PrivateCollectionProxy) }
    def email_hooks; end

    sig { params(value: T::Enumerable[::Hook]).void }
    def email_hooks=(value); end

    sig { returns(T::Array[T.untyped]) }
    def environment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def environment_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :environments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Environment::PrivateCollectionProxy) }
    def environments; end

    sig { params(value: T::Enumerable[::Environment]).void }
    def environments=(value); end

    sig { returns(T.nilable(::RepositoryGroupMap)) }
    def group_map; end

    sig { params(value: T.nilable(::RepositoryGroupMap)).void }
    def group_map=(value); end

    sig { returns(T::Array[T.untyped]) }
    def hook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def hook_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :hooks`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Hook::PrivateCollectionProxy) }
    def hooks; end

    sig { params(value: T::Enumerable[::Hook]).void }
    def hooks=(value); end

    sig { returns(T.nilable(::Import)) }
    def import; end

    sig { params(value: T.nilable(::Import)).void }
    def import=(value); end

    sig { returns(T::Array[T.untyped]) }
    def integration_allowed_package_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_allowed_package_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :integration_allowed_packages`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationAllowedPackage::PrivateCollectionProxy) }
    def integration_allowed_packages; end

    sig { params(value: T::Enumerable[::IntegrationAllowedPackage]).void }
    def integration_allowed_packages=(value); end

    sig { returns(T.nilable(::InternalRepository)) }
    def internal_repository; end

    sig { params(value: T.nilable(::InternalRepository)).void }
    def internal_repository=(value); end

    sig { returns(T::Array[T.untyped]) }
    def issue_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def issue_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :issues`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Issue::PrivateCollectionProxy) }
    def issues; end

    sig { params(value: T::Enumerable[::Issue]).void }
    def issues=(value); end

    sig { returns(T::Array[T.untyped]) }
    def key_link_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def key_link_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :key_links`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::KeyLink::PrivateCollectionProxy) }
    def key_links; end

    sig { params(value: T::Enumerable[::KeyLink]).void }
    def key_links=(value); end

    sig { returns(T::Array[T.untyped]) }
    def label_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def label_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :labels`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Label::PrivateCollectionProxy) }
    def labels; end

    sig { params(value: T::Enumerable[::Label]).void }
    def labels=(value); end

    sig { returns(T::Array[T.untyped]) }
    def language_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def language_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :languages`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Language::PrivateCollectionProxy) }
    def languages; end

    sig { params(value: T::Enumerable[::Language]).void }
    def languages=(value); end

    sig { returns(T.nilable(::RepositoryAction)) }
    def listed_action; end

    sig { params(value: T.nilable(::RepositoryAction)).void }
    def listed_action=(value); end

    sig { returns(T::Array[T.untyped]) }
    def memex_project_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def memex_project_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def memex_project_link_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def memex_project_link_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :memex_project_links`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MemexProjectLink::PrivateCollectionProxy) }
    def memex_project_links; end

    sig { params(value: T::Enumerable[::MemexProjectLink]).void }
    def memex_project_links=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :memex_projects, through: :memex_project_links`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::MemexProject::PrivateCollectionProxy) }
    def memex_projects; end

    sig { params(value: T::Enumerable[::MemexProject]).void }
    def memex_projects=(value); end

    sig { returns(T::Array[T.untyped]) }
    def merge_queue_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def merge_queue_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :merge_queues`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MergeQueue::PrivateCollectionProxy) }
    def merge_queues; end

    sig { params(value: T::Enumerable[::MergeQueue]).void }
    def merge_queues=(value); end

    sig { returns(T::Array[T.untyped]) }
    def milestone_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def milestone_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :milestones`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Milestone::PrivateCollectionProxy) }
    def milestones; end

    sig { params(value: T::Enumerable[::Milestone]).void }
    def milestones=(value); end

    sig { returns(T.nilable(::Mirror)) }
    def mirror; end

    sig { params(value: T.nilable(::Mirror)).void }
    def mirror=(value); end

    sig { returns(T.nilable(::RepositoryNetwork)) }
    def network; end

    sig { params(value: T.nilable(::RepositoryNetwork)).void }
    def network=(value); end

    sig { returns(T.nilable(::Stafftools::NetworkPrivilege)) }
    def network_privilege; end

    sig { params(value: T.nilable(::Stafftools::NetworkPrivilege)).void }
    def network_privilege=(value); end

    sig { returns(T.nilable(::RepositoryImage)) }
    def open_graph_image; end

    sig { params(value: T.nilable(::RepositoryImage)).void }
    def open_graph_image=(value); end

    sig { returns(T::Array[T.untyped]) }
    def open_vulnerability_alert_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def open_vulnerability_alert_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :open_vulnerability_alerts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryVulnerabilityAlert::PrivateCollectionProxy) }
    def open_vulnerability_alerts; end

    sig { params(value: T::Enumerable[::RepositoryVulnerabilityAlert]).void }
    def open_vulnerability_alerts=(value); end

    sig { returns(T.nilable(::Organization)) }
    def organization; end

    sig { params(value: T.nilable(::Organization)).void }
    def organization=(value); end

    sig { returns(T.nilable(::OrganizationDiscussionConfig)) }
    def organization_discussion; end

    sig { params(value: T.nilable(::OrganizationDiscussionConfig)).void }
    def organization_discussion=(value); end

    sig { returns(T.nilable(::User)) }
    def owner; end

    sig { params(value: T.nilable(::User)).void }
    def owner=(value); end

    sig { returns(T.nilable(::RepositorySponsorable)) }
    def owner_repository_sponsorable; end

    sig { params(value: T.nilable(::RepositorySponsorable)).void }
    def owner_repository_sponsorable=(value); end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def owner_sponsors_listing_stafftools_metadata; end

    sig { params(value: T.nilable(::SponsorsListingStafftoolsMetadata)).void }
    def owner_sponsors_listing_stafftools_metadata=(value); end

    sig { returns(T::Array[T.untyped]) }
    def package_file_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def package_file_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :package_files, through: :packages`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Registry::File::PrivateCollectionProxy) }
    def package_files; end

    sig { params(value: T::Enumerable[::Registry::File]).void }
    def package_files=(value); end

    sig { returns(T::Array[T.untyped]) }
    def package_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def package_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :packages`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Registry::Package::PrivateCollectionProxy) }
    def packages; end

    sig { params(value: T::Enumerable[::Registry::Package]).void }
    def packages=(value); end

    sig { returns(T.nilable(::Page)) }
    def page; end

    sig { params(value: T.nilable(::Page)).void }
    def page=(value); end

    sig { returns(T.nilable(::Repository)) }
    def parent; end

    sig { params(value: T.nilable(::Repository)).void }
    def parent=(value); end

    sig { returns(T.nilable(::RepositoryAdvisory)) }
    def parent_advisory; end

    sig { params(value: T.nilable(::RepositoryAdvisory)).void }
    def parent_advisory=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pinned_environment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pinned_environment_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :pinned_environments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PinnedEnvironment::PrivateCollectionProxy) }
    def pinned_environments; end

    sig { params(value: T::Enumerable[::PinnedEnvironment]).void }
    def pinned_environments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pinned_issue_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pinned_issue_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :pinned_issues`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PinnedIssue::PrivateCollectionProxy) }
    def pinned_issues; end

    sig { params(value: T::Enumerable[::PinnedIssue]).void }
    def pinned_issues=(value); end

    sig { returns(T.nilable(::LanguageName)) }
    def primary_language; end

    sig { params(value: T.nilable(::LanguageName)).void }
    def primary_language=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :private_network_repositories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def private_network_repositories; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def private_network_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def private_network_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def private_network_repository_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def project_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def project_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def project_repository_link_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def project_repository_link_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :project_repository_links`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ProjectRepositoryLink::PrivateCollectionProxy) }
    def project_repository_links; end

    sig { params(value: T::Enumerable[::ProjectRepositoryLink]).void }
    def project_repository_links=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :projects`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Project::PrivateCollectionProxy) }
    def projects; end

    sig { params(value: T::Enumerable[::Project]).void }
    def projects=(value); end

    sig { returns(T.nilable(::ProtectedBranch)) }
    def protected_branch_for_default_branch; end

    sig { params(value: T.nilable(::ProtectedBranch)).void }
    def protected_branch_for_default_branch=(value); end

    sig { returns(T::Array[T.untyped]) }
    def protected_branch_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def protected_branch_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :protected_branches`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ProtectedBranch::PrivateCollectionProxy) }
    def protected_branches; end

    sig { params(value: T::Enumerable[::ProtectedBranch]).void }
    def protected_branches=(value); end

    sig { returns(T::Array[T.untyped]) }
    def public_key_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def public_key_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :public_keys`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PublicKey::PrivateCollectionProxy) }
    def public_keys; end

    sig { params(value: T::Enumerable[::PublicKey]).void }
    def public_keys=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pull_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pull_request_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def pull_request_review_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pull_request_review_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :pull_request_review_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewComment::PrivateCollectionProxy) }
    def pull_request_review_comments; end

    sig { params(value: T::Enumerable[::PullRequestReviewComment]).void }
    def pull_request_review_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pull_request_review_thread_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pull_request_review_thread_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :pull_request_review_threads`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewThread::PrivateCollectionProxy) }
    def pull_request_review_threads; end

    sig { params(value: T::Enumerable[::PullRequestReviewThread]).void }
    def pull_request_review_threads=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :pull_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequest::PrivateCollectionProxy) }
    def pull_requests; end

    sig { params(value: T::Enumerable[::PullRequest]).void }
    def pull_requests=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :pull_requests_as_head`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequest::PrivateCollectionProxy) }
    def pull_requests_as_head; end

    sig { params(value: T::Enumerable[::PullRequest]).void }
    def pull_requests_as_head=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pull_requests_as_head_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pull_requests_as_head_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def push_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def push_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :pushes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Push::PrivateCollectionProxy) }
    def pushes; end

    sig { params(value: T::Enumerable[::Push]).void }
    def pushes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def redirect_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def redirect_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :redirects`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryRedirect::PrivateCollectionProxy) }
    def redirects; end

    sig { params(value: T::Enumerable[::RepositoryRedirect]).void }
    def redirects=(value); end

    sig { returns(T::Array[T.untyped]) }
    def ref_push_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ref_push_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :ref_pushes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RefPush::PrivateCollectionProxy) }
    def ref_pushes; end

    sig { params(value: T::Enumerable[::RefPush]).void }
    def ref_pushes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def release_asset_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def release_asset_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :release_assets`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReleaseAsset::PrivateCollectionProxy) }
    def release_assets; end

    sig { params(value: T::Enumerable[::ReleaseAsset]).void }
    def release_assets=(value); end

    sig { returns(T::Array[T.untyped]) }
    def release_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def release_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :releases`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Release::PrivateCollectionProxy) }
    def releases; end

    sig { params(value: T::Enumerable[::Release]).void }
    def releases=(value); end

    sig { returns(T.nilable(::ActionsPolicy::Allowlist)) }
    def reload_actions_allowlist; end

    sig { returns(T.nilable(::ActionsCacheUsage)) }
    def reload_actions_cache_usage; end

    sig { returns(T.nilable(::Business)) }
    def reload_business; end

    sig { returns(T.nilable(::ClassroomAssignment)) }
    def reload_classroom_assignment; end

    sig { returns(T.nilable(::ClassroomRepository)) }
    def reload_classroom_repository; end

    sig { returns(T.nilable(::CommunityProfile)) }
    def reload_community_profile; end

    sig { returns(T.nilable(::DisabledAccessReason)) }
    def reload_disabled_access_reason; end

    sig { returns(T.nilable(::RepositoryGroupMap)) }
    def reload_group_map; end

    sig { returns(T.nilable(::Import)) }
    def reload_import; end

    sig { returns(T.nilable(::InternalRepository)) }
    def reload_internal_repository; end

    sig { returns(T.nilable(::RepositoryAction)) }
    def reload_listed_action; end

    sig { returns(T.nilable(::Mirror)) }
    def reload_mirror; end

    sig { returns(T.nilable(::RepositoryNetwork)) }
    def reload_network; end

    sig { returns(T.nilable(::Stafftools::NetworkPrivilege)) }
    def reload_network_privilege; end

    sig { returns(T.nilable(::RepositoryImage)) }
    def reload_open_graph_image; end

    sig { returns(T.nilable(::Organization)) }
    def reload_organization; end

    sig { returns(T.nilable(::OrganizationDiscussionConfig)) }
    def reload_organization_discussion; end

    sig { returns(T.nilable(::User)) }
    def reload_owner; end

    sig { returns(T.nilable(::RepositorySponsorable)) }
    def reload_owner_repository_sponsorable; end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def reload_owner_sponsors_listing_stafftools_metadata; end

    sig { returns(T.nilable(::Page)) }
    def reload_page; end

    sig { returns(T.nilable(::Repository)) }
    def reload_parent; end

    sig { returns(T.nilable(::RepositoryAdvisory)) }
    def reload_parent_advisory; end

    sig { returns(T.nilable(::LanguageName)) }
    def reload_primary_language; end

    sig { returns(T.nilable(::ProtectedBranch)) }
    def reload_protected_branch_for_default_branch; end

    sig { returns(T.nilable(::InteractionLimit)) }
    def reload_repo_interaction_limit; end

    sig { returns(T.nilable(::RepositoryAuthVersion)) }
    def reload_repository_auth_version; end

    sig { returns(T.nilable(::RepositoryImport)) }
    def reload_repository_import; end

    sig { returns(T.nilable(::RepositoryLatestRelease)) }
    def reload_repository_latest_release; end

    sig { returns(T.nilable(::RepositoryLicense)) }
    def reload_repository_license; end

    sig { returns(T.nilable(::RepositorySecurityCenterConfig)) }
    def reload_repository_security_center_config; end

    sig { returns(T.nilable(::RepositorySecurityConfiguration)) }
    def reload_repository_security_configuration; end

    sig { returns(T.nilable(::RepositorySequence)) }
    def reload_repository_sequence; end

    sig { returns(T.nilable(::RepositoryVulnerabilityAlertSequence)) }
    def reload_repository_vulnerability_alert_sequence; end

    sig { returns(T.nilable(::Release)) }
    def reload_saved_latest_release; end

    sig { returns(T.nilable(::SecurityConfiguration)) }
    def reload_security_configuration; end

    sig { returns(T.nilable(::RepositoryClone)) }
    def reload_template_repository_clone; end

    sig { returns(T.nilable(::TokenScanResultSequence)) }
    def reload_token_scan_result_sequence; end

    sig { returns(T.nilable(::TokenScanStatus)) }
    def reload_token_scan_status; end

    sig { returns(T.nilable(::InteractionLimit)) }
    def repo_interaction_limit; end

    sig { params(value: T.nilable(::InteractionLimit)).void }
    def repo_interaction_limit=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :repository_advisories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryAdvisory::PrivateCollectionProxy) }
    def repository_advisories; end

    sig { params(value: T::Enumerable[::RepositoryAdvisory]).void }
    def repository_advisories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_advisory_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_advisory_ids=(ids); end

    sig { returns(T.nilable(::RepositoryAuthVersion)) }
    def repository_auth_version; end

    sig { params(value: T.nilable(::RepositoryAuthVersion)).void }
    def repository_auth_version=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_clone_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_clone_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :repository_clones`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryClone::PrivateCollectionProxy) }
    def repository_clones; end

    sig { params(value: T::Enumerable[::RepositoryClone]).void }
    def repository_clones=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_file_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_file_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :repository_files`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryFile::PrivateCollectionProxy) }
    def repository_files; end

    sig { params(value: T::Enumerable[::RepositoryFile]).void }
    def repository_files=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_image_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_image_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :repository_images`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryImage::PrivateCollectionProxy) }
    def repository_images; end

    sig { params(value: T::Enumerable[::RepositoryImage]).void }
    def repository_images=(value); end

    sig { returns(T.nilable(::RepositoryImport)) }
    def repository_import; end

    sig { params(value: T.nilable(::RepositoryImport)).void }
    def repository_import=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :repository_invitations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryInvitation::PrivateCollectionProxy) }
    def repository_invitations; end

    sig { params(value: T::Enumerable[::RepositoryInvitation]).void }
    def repository_invitations=(value); end

    sig { returns(T.nilable(::RepositoryLatestRelease)) }
    def repository_latest_release; end

    sig { params(value: T.nilable(::RepositoryLatestRelease)).void }
    def repository_latest_release=(value); end

    sig { returns(T.nilable(::RepositoryLicense)) }
    def repository_license; end

    sig { params(value: T.nilable(::RepositoryLicense)).void }
    def repository_license=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_license_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_license_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :repository_licenses`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryLicense::PrivateCollectionProxy) }
    def repository_licenses; end

    sig { params(value: T::Enumerable[::RepositoryLicense]).void }
    def repository_licenses=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_preferred_file_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_preferred_file_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :repository_preferred_files`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryPreferredFile::PrivateCollectionProxy) }
    def repository_preferred_files; end

    sig { params(value: T::Enumerable[::RepositoryPreferredFile]).void }
    def repository_preferred_files=(value); end

    sig { returns(T.nilable(::RepositorySecurityCenterConfig)) }
    def repository_security_center_config; end

    sig { params(value: T.nilable(::RepositorySecurityCenterConfig)).void }
    def repository_security_center_config=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_security_center_status_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_security_center_status_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :repository_security_center_statuses`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositorySecurityCenterStatus::PrivateCollectionProxy) }
    def repository_security_center_statuses; end

    sig { params(value: T::Enumerable[::RepositorySecurityCenterStatus]).void }
    def repository_security_center_statuses=(value); end

    sig { returns(T.nilable(::RepositorySecurityConfiguration)) }
    def repository_security_configuration; end

    sig { params(value: T.nilable(::RepositorySecurityConfiguration)).void }
    def repository_security_configuration=(value); end

    sig { returns(T.nilable(::RepositorySequence)) }
    def repository_sequence; end

    sig { params(value: T.nilable(::RepositorySequence)).void }
    def repository_sequence=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_sponsorable_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_sponsorable_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :repository_sponsorables`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositorySponsorable::PrivateCollectionProxy) }
    def repository_sponsorables; end

    sig { params(value: T::Enumerable[::RepositorySponsorable]).void }
    def repository_sponsorables=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_topic_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_topic_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :repository_topics`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryTopic::PrivateCollectionProxy) }
    def repository_topics; end

    sig { params(value: T::Enumerable[::RepositoryTopic]).void }
    def repository_topics=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_vulnerability_alert_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_vulnerability_alert_ids=(ids); end

    sig { returns(T.nilable(::RepositoryVulnerabilityAlertSequence)) }
    def repository_vulnerability_alert_sequence; end

    sig { params(value: T.nilable(::RepositoryVulnerabilityAlertSequence)).void }
    def repository_vulnerability_alert_sequence=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :repository_vulnerability_alerts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryVulnerabilityAlert::PrivateCollectionProxy) }
    def repository_vulnerability_alerts; end

    sig { params(value: T::Enumerable[::RepositoryVulnerabilityAlert]).void }
    def repository_vulnerability_alerts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def role_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def role_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :roles`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Role::PrivateCollectionProxy) }
    def roles; end

    sig { params(value: T::Enumerable[::Role]).void }
    def roles=(value); end

    sig { returns(T::Array[T.untyped]) }
    def rule_suite_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def rule_suite_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :rule_suites`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RuleEngine::RuleSuite::PrivateCollectionProxy) }
    def rule_suites; end

    sig { params(value: T::Enumerable[::RuleEngine::RuleSuite]).void }
    def rule_suites=(value); end

    sig { returns(T::Array[T.untyped]) }
    def ruleset_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ruleset_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :rulesets`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryRuleset::PrivateCollectionProxy) }
    def rulesets; end

    sig { params(value: T::Enumerable[::RepositoryRuleset]).void }
    def rulesets=(value); end

    sig { returns(T.nilable(::Release)) }
    def saved_latest_release; end

    sig { params(value: T.nilable(::Release)).void }
    def saved_latest_release=(value); end

    sig { returns(T::Array[T.untyped]) }
    def secret_scan_custom_pattern_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def secret_scan_custom_pattern_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :secret_scan_custom_patterns`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SecretScanCustomPattern::PrivateCollectionProxy) }
    def secret_scan_custom_patterns; end

    sig { params(value: T::Enumerable[::SecretScanCustomPattern]).void }
    def secret_scan_custom_patterns=(value); end

    sig { returns(T::Array[T.untyped]) }
    def secret_scan_incremental_status_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def secret_scan_incremental_status_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :secret_scan_incremental_statuses`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SecretScanIncrementalStatus::PrivateCollectionProxy) }
    def secret_scan_incremental_statuses; end

    sig { params(value: T::Enumerable[::SecretScanIncrementalStatus]).void }
    def secret_scan_incremental_statuses=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :security_center_alert_severities`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SecurityCenterAlertSeverity::PrivateCollectionProxy) }
    def security_center_alert_severities; end

    sig { params(value: T::Enumerable[::SecurityCenterAlertSeverity]).void }
    def security_center_alert_severities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def security_center_alert_severity_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def security_center_alert_severity_ids=(ids); end

    sig { returns(T.nilable(::SecurityConfiguration)) }
    def security_configuration; end

    sig { params(value: T.nilable(::SecurityConfiguration)).void }
    def security_configuration=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsors_listing_featured_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsors_listing_featured_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :sponsors_listing_featured_items`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsListingFeaturedItem::PrivateCollectionProxy) }
    def sponsors_listing_featured_items; end

    sig { params(value: T::Enumerable[::SponsorsListingFeaturedItem]).void }
    def sponsors_listing_featured_items=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsors_tier_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsors_tier_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :sponsors_tiers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsTier::PrivateCollectionProxy) }
    def sponsors_tiers; end

    sig { params(value: T::Enumerable[::SponsorsTier]).void }
    def sponsors_tiers=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :sponsorship_repositories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorshipRepository::PrivateCollectionProxy) }
    def sponsorship_repositories; end

    sig { params(value: T::Enumerable[::SponsorshipRepository]).void }
    def sponsorship_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsorship_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsorship_repository_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def staff_access_grant_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def staff_access_grant_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :staff_access_grants`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::StaffAccessGrant::PrivateCollectionProxy) }
    def staff_access_grants; end

    sig { params(value: T::Enumerable[::StaffAccessGrant]).void }
    def staff_access_grants=(value); end

    sig { returns(T::Array[T.untyped]) }
    def staff_access_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def staff_access_request_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :staff_access_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::StaffAccessRequest::PrivateCollectionProxy) }
    def staff_access_requests; end

    sig { params(value: T::Enumerable[::StaffAccessRequest]).void }
    def staff_access_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def star_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def star_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :stars`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Star::PrivateCollectionProxy) }
    def stars; end

    sig { params(value: T::Enumerable[::Star]).void }
    def stars=(value); end

    sig { returns(T::Array[T.untyped]) }
    def status_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def status_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :statuses`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Status::PrivateCollectionProxy) }
    def statuses; end

    sig { params(value: T::Enumerable[::Status]).void }
    def statuses=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tab_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tab_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :tabs`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Tab::PrivateCollectionProxy) }
    def tabs; end

    sig { params(value: T::Enumerable[::Tab]).void }
    def tabs=(value); end

    sig { returns(T.nilable(::RepositoryClone)) }
    def template_repository_clone; end

    sig { params(value: T.nilable(::RepositoryClone)).void }
    def template_repository_clone=(value); end

    sig { returns(T::Array[T.untyped]) }
    def token_scan_result_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def token_scan_result_ids=(ids); end

    sig { returns(T.nilable(::TokenScanResultSequence)) }
    def token_scan_result_sequence; end

    sig { params(value: T.nilable(::TokenScanResultSequence)).void }
    def token_scan_result_sequence=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :token_scan_results`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TokenScanResult::PrivateCollectionProxy) }
    def token_scan_results; end

    sig { params(value: T::Enumerable[::TokenScanResult]).void }
    def token_scan_results=(value); end

    sig { returns(T.nilable(::TokenScanStatus)) }
    def token_scan_status; end

    sig { params(value: T.nilable(::TokenScanStatus)).void }
    def token_scan_status=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def token_scan_status_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def topic_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def topic_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :topics, through: :applied_repository_topics`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Topic::PrivateCollectionProxy) }
    def topics; end

    sig { params(value: T::Enumerable[::Topic]).void }
    def topics=(value); end

    sig { returns(T::Array[T.untyped]) }
    def transfer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def transfer_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :transfers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryTransfer::PrivateCollectionProxy) }
    def transfers; end

    sig { params(value: T::Enumerable[::RepositoryTransfer]).void }
    def transfers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_asset_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_asset_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :user_assets`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserAsset::PrivateCollectionProxy) }
    def user_assets; end

    sig { params(value: T::Enumerable[::UserAsset]).void }
    def user_assets=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_role_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_role_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :user_roles`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserRole::PrivateCollectionProxy) }
    def user_roles; end

    sig { params(value: T::Enumerable[::UserRole]).void }
    def user_roles=(value); end

    sig { returns(T::Array[T.untyped]) }
    def vulnerability_alert_rule_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def vulnerability_alert_rule_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def vulnerability_alert_rule_override_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def vulnerability_alert_rule_override_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :vulnerability_alert_rule_overrides`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::VulnerabilityAlertRuleOverride::PrivateCollectionProxy) }
    def vulnerability_alert_rule_overrides; end

    sig { params(value: T::Enumerable[::VulnerabilityAlertRuleOverride]).void }
    def vulnerability_alert_rule_overrides=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :vulnerability_alert_rules`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::VulnerabilityAlertRule::PrivateCollectionProxy) }
    def vulnerability_alert_rules; end

    sig { params(value: T::Enumerable[::VulnerabilityAlertRule]).void }
    def vulnerability_alert_rules=(value); end

    sig { returns(T::Array[T.untyped]) }
    def webhook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def webhook_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :webhooks`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Hook::PrivateCollectionProxy) }
    def webhooks; end

    sig { params(value: T::Enumerable[::Hook]).void }
    def webhooks=(value); end

    sig { returns(T::Array[T.untyped]) }
    def workflow_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def workflow_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def workflow_run_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def workflow_run_ids=(ids); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :workflow_runs`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Actions::WorkflowRun::PrivateCollectionProxy) }
    def workflow_runs; end

    sig { params(value: T::Enumerable[::Actions::WorkflowRun]).void }
    def workflow_runs=(value); end

    # This method is created by ActiveRecord on the `Repository` class because it declared `has_many :workflows`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Actions::Workflow::PrivateCollectionProxy) }
    def workflows; end

    sig { params(value: T::Enumerable[::Actions::Workflow]).void }
    def workflows=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def archived_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def can_enable_advanced_security(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def deleted_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding_organization_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def featured_actions(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_spam_and_disabled_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def forks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def forks_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def forks_owned_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_same_network_as(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def internal_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def is_not_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def locked_repos(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def most_starred(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def network_roots(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def network_safe_restoreable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_archived_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_forks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_owned_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_array_index(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def org_owned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def organization_member_private_forks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def owned_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def owned_by_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_not_internal_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def public_or_accessible_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def public_or_internal_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def public_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def recently_updated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def represented_by_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def search(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sorted_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sorted_by_name(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def templates(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def templates_relevant_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unlocked_repos(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def user_owned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_anonymous_git_access(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_global_health_files_name(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_issues_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_issues_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_language(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_sponsorable_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_vulnerability_alerts_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_actions; end

    sig { returns(Promise[T.untyped]) }
    def async_actions_allowlist; end

    sig { returns(Promise[T.untyped]) }
    def async_actions_artifacts; end

    sig { returns(Promise[T.untyped]) }
    def async_actions_cache_usage; end

    sig { returns(Promise[T.untyped]) }
    def async_all_hooks; end

    sig { returns(Promise[T.untyped]) }
    def async_applied_discussion_labels; end

    sig { returns(Promise[T.untyped]) }
    def async_applied_repository_topics; end

    sig { returns(Promise[T.untyped]) }
    def async_assets; end

    sig { returns(Promise[T.untyped]) }
    def async_attachments; end

    sig { returns(Promise[T.untyped]) }
    def async_branch_renames; end

    sig { returns(Promise[T.untyped]) }
    def async_business; end

    sig { returns(Promise[T.untyped]) }
    def async_check_suites; end

    sig { returns(Promise[T.untyped]) }
    def async_children; end

    sig { returns(Promise[T.untyped]) }
    def async_classroom_assignment; end

    sig { returns(Promise[T.untyped]) }
    def async_classroom_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_close_issue_references; end

    sig { returns(Promise[T.untyped]) }
    def async_commit_comments; end

    sig { returns(Promise[T.untyped]) }
    def async_commit_contributions; end

    sig { returns(Promise[T.untyped]) }
    def async_commit_mentions; end

    sig { returns(Promise[T.untyped]) }
    def async_community_profile; end

    sig { returns(Promise[T.untyped]) }
    def async_configuration_entries; end

    sig { returns(Promise[T.untyped]) }
    def async_dependency_updates; end

    sig { returns(Promise[T.untyped]) }
    def async_deployments; end

    sig { returns(Promise[T.untyped]) }
    def async_disabled_access_reason; end

    sig { returns(Promise[T.untyped]) }
    def async_discussion_categories; end

    sig { returns(Promise[T.untyped]) }
    def async_discussion_comments; end

    sig { returns(Promise[T.untyped]) }
    def async_discussion_sections; end

    sig { returns(Promise[T.untyped]) }
    def async_discussion_spotlights; end

    sig { returns(Promise[T.untyped]) }
    def async_discussions; end

    sig { returns(Promise[T.untyped]) }
    def async_email_hooks; end

    sig { returns(Promise[T.untyped]) }
    def async_environments; end

    sig { returns(Promise[T.untyped]) }
    def async_group_map; end

    sig { returns(Promise[T.untyped]) }
    def async_hooks; end

    sig { returns(Promise[T.untyped]) }
    def async_import; end

    sig { returns(Promise[T.untyped]) }
    def async_integration_allowed_packages; end

    sig { returns(Promise[T.untyped]) }
    def async_internal_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_issues; end

    sig { returns(Promise[T.untyped]) }
    def async_key_links; end

    sig { returns(Promise[T.untyped]) }
    def async_labels; end

    sig { returns(Promise[T.untyped]) }
    def async_languages; end

    sig { returns(Promise[T.untyped]) }
    def async_listed_action; end

    sig { returns(Promise[T.untyped]) }
    def async_memex_project_links; end

    sig { returns(Promise[T.untyped]) }
    def async_memex_projects; end

    sig { returns(Promise[T.untyped]) }
    def async_merge_queues; end

    sig { returns(Promise[T.untyped]) }
    def async_milestones; end

    sig { returns(Promise[T.untyped]) }
    def async_mirror; end

    sig { returns(Promise[T.untyped]) }
    def async_network; end

    sig { returns(Promise[T.untyped]) }
    def async_network_privilege; end

    sig { returns(Promise[T.untyped]) }
    def async_open_graph_image; end

    sig { returns(Promise[T.untyped]) }
    def async_open_vulnerability_alerts; end

    sig { returns(Promise[T.untyped]) }
    def async_organization; end

    sig { returns(Promise[T.untyped]) }
    def async_organization_discussion; end

    sig { returns(Promise[T.untyped]) }
    def async_owner; end

    sig { returns(Promise[T.untyped]) }
    def async_owner_repository_sponsorable; end

    sig { returns(Promise[T.untyped]) }
    def async_owner_sponsors_listing_stafftools_metadata; end

    sig { returns(Promise[T.untyped]) }
    def async_package_files; end

    sig { returns(Promise[T.untyped]) }
    def async_packages; end

    sig { returns(Promise[T.untyped]) }
    def async_page; end

    sig { returns(Promise[T.untyped]) }
    def async_parent; end

    sig { returns(Promise[T.untyped]) }
    def async_parent_advisory; end

    sig { returns(Promise[T.untyped]) }
    def async_pinned_environments; end

    sig { returns(Promise[T.untyped]) }
    def async_pinned_issues; end

    sig { returns(Promise[T.untyped]) }
    def async_primary_language; end

    sig { returns(Promise[T.untyped]) }
    def async_private_network_repositories; end

    sig { returns(Promise[T.untyped]) }
    def async_project_repository_links; end

    sig { returns(Promise[T.untyped]) }
    def async_projects; end

    sig { returns(Promise[T.untyped]) }
    def async_protected_branch_for_default_branch; end

    sig { returns(Promise[T.untyped]) }
    def async_protected_branches; end

    sig { returns(Promise[T.untyped]) }
    def async_public_keys; end

    sig { returns(Promise[T.untyped]) }
    def async_pull_request_review_comments; end

    sig { returns(Promise[T.untyped]) }
    def async_pull_request_review_threads; end

    sig { returns(Promise[T.untyped]) }
    def async_pull_requests; end

    sig { returns(Promise[T.untyped]) }
    def async_pull_requests_as_head; end

    sig { returns(Promise[T.untyped]) }
    def async_pushes; end

    sig { returns(Promise[T.untyped]) }
    def async_redirects; end

    sig { returns(Promise[T.untyped]) }
    def async_ref_pushes; end

    sig { returns(Promise[T.untyped]) }
    def async_release_assets; end

    sig { returns(Promise[T.untyped]) }
    def async_releases; end

    sig { returns(Promise[T.untyped]) }
    def async_repo_interaction_limit; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_advisories; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_auth_version; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_clones; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_files; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_images; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_import; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_invitations; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_latest_release; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_license; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_licenses; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_preferred_files; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_security_center_config; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_security_center_statuses; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_security_configuration; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_sequence; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_sponsorables; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_topics; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_vulnerability_alert_sequence; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_vulnerability_alerts; end

    sig { returns(Promise[T.untyped]) }
    def async_roles; end

    sig { returns(Promise[T.untyped]) }
    def async_rule_suites; end

    sig { returns(Promise[T.untyped]) }
    def async_rulesets; end

    sig { returns(Promise[T.untyped]) }
    def async_saved_latest_release; end

    sig { returns(Promise[T.untyped]) }
    def async_secret_scan_custom_patterns; end

    sig { returns(Promise[T.untyped]) }
    def async_secret_scan_incremental_statuses; end

    sig { returns(Promise[T.untyped]) }
    def async_security_center_alert_severities; end

    sig { returns(Promise[T.untyped]) }
    def async_security_configuration; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_listing_featured_items; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_tiers; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorship_repositories; end

    sig { returns(Promise[T.untyped]) }
    def async_staff_access_grants; end

    sig { returns(Promise[T.untyped]) }
    def async_staff_access_requests; end

    sig { returns(Promise[T.untyped]) }
    def async_stars; end

    sig { returns(Promise[T.untyped]) }
    def async_statuses; end

    sig { returns(Promise[T.untyped]) }
    def async_tabs; end

    sig { returns(Promise[T.untyped]) }
    def async_template_repository_clone; end

    sig { returns(Promise[T.untyped]) }
    def async_token_scan_result_sequence; end

    sig { returns(Promise[T.untyped]) }
    def async_token_scan_results; end

    sig { returns(Promise[T.untyped]) }
    def async_token_scan_status; end

    sig { returns(Promise[T.untyped]) }
    def async_topics; end

    sig { returns(Promise[T.untyped]) }
    def async_transfers; end

    sig { returns(Promise[T.untyped]) }
    def async_user_assets; end

    sig { returns(Promise[T.untyped]) }
    def async_user_roles; end

    sig { returns(Promise[T.untyped]) }
    def async_vulnerability_alert_rule_overrides; end

    sig { returns(Promise[T.untyped]) }
    def async_vulnerability_alert_rules; end

    sig { returns(Promise[T.untyped]) }
    def async_webhooks; end

    sig { returns(Promise[T.untyped]) }
    def async_workflow_runs; end

    sig { returns(Promise[T.untyped]) }
    def async_workflows; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(T::Boolean)) }
    def active; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def active=(value); end

    sig { returns(T::Boolean) }
    def active?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_before_last_save; end

    sig { returns(T.untyped) }
    def active_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def active_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def active_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_was; end

    sig { void }
    def active_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def archived_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def archived_at=(value); end

    sig { returns(T::Boolean) }
    def archived_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def archived_at_before_last_save; end

    sig { returns(T.untyped) }
    def archived_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def archived_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def archived_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def archived_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def archived_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def archived_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def archived_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def archived_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def archived_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def archived_at_was; end

    sig { void }
    def archived_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at=(value); end

    sig { returns(T::Boolean) }
    def deleted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_was; end

    sig { void }
    def deleted_at_will_change!; end

    sig { returns(T.untyped) }
    def description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.untyped) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_previously_was; end

    sig { returns(T.untyped) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def disabled_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def disabled_at=(value); end

    sig { returns(T::Boolean) }
    def disabled_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def disabled_at_before_last_save; end

    sig { returns(T.untyped) }
    def disabled_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def disabled_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def disabled_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def disabled_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def disabled_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def disabled_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def disabled_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def disabled_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def disabled_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def disabled_at_was; end

    sig { void }
    def disabled_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def disabled_by; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def disabled_by=(value); end

    sig { returns(T::Boolean) }
    def disabled_by?; end

    sig { returns(T.nilable(::Integer)) }
    def disabled_by_before_last_save; end

    sig { returns(T.untyped) }
    def disabled_by_before_type_cast; end

    sig { returns(T::Boolean) }
    def disabled_by_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def disabled_by_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def disabled_by_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def disabled_by_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def disabled_by_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def disabled_by_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def disabled_by_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def disabled_by_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def disabled_by_was; end

    sig { void }
    def disabled_by_will_change!; end

    sig { returns(T.nilable(::String)) }
    def disabling_detail; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def disabling_detail=(value); end

    sig { returns(T::Boolean) }
    def disabling_detail?; end

    sig { returns(T.nilable(::String)) }
    def disabling_detail_before_last_save; end

    sig { returns(T.untyped) }
    def disabling_detail_before_type_cast; end

    sig { returns(T::Boolean) }
    def disabling_detail_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def disabling_detail_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def disabling_detail_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def disabling_detail_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def disabling_detail_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def disabling_detail_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def disabling_detail_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def disabling_detail_previously_was; end

    sig { returns(T.nilable(::String)) }
    def disabling_detail_was; end

    sig { void }
    def disabling_detail_will_change!; end

    sig { returns(T.nilable(::String)) }
    def disabling_reason; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def disabling_reason=(value); end

    sig { returns(T::Boolean) }
    def disabling_reason?; end

    sig { returns(T.nilable(::String)) }
    def disabling_reason_before_last_save; end

    sig { returns(T.untyped) }
    def disabling_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def disabling_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def disabling_reason_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def disabling_reason_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def disabling_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def disabling_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def disabling_reason_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def disabling_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def disabling_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def disabling_reason_was; end

    sig { void }
    def disabling_reason_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def disk_usage; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def disk_usage=(value); end

    sig { returns(T::Boolean) }
    def disk_usage?; end

    sig { returns(T.nilable(::Integer)) }
    def disk_usage_before_last_save; end

    sig { returns(T.untyped) }
    def disk_usage_before_type_cast; end

    sig { returns(T::Boolean) }
    def disk_usage_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def disk_usage_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def disk_usage_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def disk_usage_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def disk_usage_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def disk_usage_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def disk_usage_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def disk_usage_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def disk_usage_was; end

    sig { void }
    def disk_usage_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_downloads; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def has_downloads=(value); end

    sig { returns(T::Boolean) }
    def has_downloads?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_downloads_before_last_save; end

    sig { returns(T.untyped) }
    def has_downloads_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_downloads_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_downloads_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_downloads_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_downloads_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_downloads_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_downloads_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_downloads_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_downloads_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_downloads_was; end

    sig { void }
    def has_downloads_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_issues; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def has_issues=(value); end

    sig { returns(T::Boolean) }
    def has_issues?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_issues_before_last_save; end

    sig { returns(T.untyped) }
    def has_issues_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_issues_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_issues_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_issues_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_issues_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_issues_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_issues_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_issues_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_issues_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_issues_was; end

    sig { void }
    def has_issues_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_wiki; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def has_wiki=(value); end

    sig { returns(T::Boolean) }
    def has_wiki?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_wiki_before_last_save; end

    sig { returns(T.untyped) }
    def has_wiki_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_wiki_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_wiki_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_wiki_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_wiki_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_wiki_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_wiki_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_wiki_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_wiki_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_wiki_was; end

    sig { void }
    def has_wiki_will_change!; end

    sig { returns(T.nilable(::String)) }
    def health_status; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def health_status=(value); end

    sig { returns(T::Boolean) }
    def health_status?; end

    sig { returns(T.nilable(::String)) }
    def health_status_before_last_save; end

    sig { returns(T.untyped) }
    def health_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def health_status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def health_status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def health_status_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def health_status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def health_status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def health_status_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def health_status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def health_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def health_status_was; end

    sig { void }
    def health_status_will_change!; end

    sig { returns(T.nilable(::String)) }
    def homepage; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def homepage=(value); end

    sig { returns(T::Boolean) }
    def homepage?; end

    sig { returns(T.nilable(::String)) }
    def homepage_before_last_save; end

    sig { returns(T.untyped) }
    def homepage_before_type_cast; end

    sig { returns(T::Boolean) }
    def homepage_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def homepage_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def homepage_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def homepage_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def homepage_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def homepage_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def homepage_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def homepage_previously_was; end

    sig { returns(T.nilable(::String)) }
    def homepage_was; end

    sig { void }
    def homepage_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def locked; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def locked=(value); end

    sig { returns(T::Boolean) }
    def locked?; end

    sig { returns(T.nilable(T::Boolean)) }
    def locked_before_last_save; end

    sig { returns(T.untyped) }
    def locked_before_type_cast; end

    sig { returns(T::Boolean) }
    def locked_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def locked_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def locked_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def locked_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def locked_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def locked_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def locked_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def locked_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def locked_was; end

    sig { void }
    def locked_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def made_public_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def made_public_at=(value); end

    sig { returns(T::Boolean) }
    def made_public_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def made_public_at_before_last_save; end

    sig { returns(T.untyped) }
    def made_public_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def made_public_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def made_public_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def made_public_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def made_public_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def made_public_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def made_public_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def made_public_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def made_public_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def made_public_at_was; end

    sig { void }
    def made_public_at_will_change!; end

    sig { returns(T::Boolean) }
    def maintained; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def maintained=(value); end

    sig { returns(T::Boolean) }
    def maintained?; end

    sig { returns(T.nilable(T::Boolean)) }
    def maintained_before_last_save; end

    sig { returns(T.untyped) }
    def maintained_before_type_cast; end

    sig { returns(T::Boolean) }
    def maintained_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def maintained_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def maintained_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def maintained_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def maintained_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def maintained_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def maintained_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def maintained_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def maintained_was; end

    sig { void }
    def maintained_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def organization_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def organization_id=(value); end

    sig { returns(T::Boolean) }
    def organization_id?; end

    sig { returns(T.nilable(::Integer)) }
    def organization_id_before_last_save; end

    sig { returns(T.untyped) }
    def organization_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def organization_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def organization_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def organization_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def organization_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def organization_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def organization_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def organization_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def organization_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def organization_id_was; end

    sig { void }
    def organization_id_will_change!; end

    sig { returns(::Integer) }
    def owner_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def owner_id=(value); end

    sig { returns(T::Boolean) }
    def owner_id?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_before_last_save; end

    sig { returns(T.untyped) }
    def owner_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def owner_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def owner_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def owner_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_was; end

    sig { void }
    def owner_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def owner_login; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def owner_login=(value); end

    sig { returns(T::Boolean) }
    def owner_login?; end

    sig { returns(T.nilable(::String)) }
    def owner_login_before_last_save; end

    sig { returns(T.untyped) }
    def owner_login_before_type_cast; end

    sig { returns(T::Boolean) }
    def owner_login_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def owner_login_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def owner_login_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def owner_login_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def owner_login_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def owner_login_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def owner_login_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def owner_login_previously_was; end

    sig { returns(T.nilable(::String)) }
    def owner_login_was; end

    sig { void }
    def owner_login_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def parent_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def parent_id=(value); end

    sig { returns(T::Boolean) }
    def parent_id?; end

    sig { returns(T.nilable(::Integer)) }
    def parent_id_before_last_save; end

    sig { returns(T.untyped) }
    def parent_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def parent_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def parent_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def parent_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def parent_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def parent_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def parent_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def parent_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def parent_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def parent_id_was; end

    sig { void }
    def parent_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def primary_language_name_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def primary_language_name_id=(value); end

    sig { returns(T::Boolean) }
    def primary_language_name_id?; end

    sig { returns(T.nilable(::Integer)) }
    def primary_language_name_id_before_last_save; end

    sig { returns(T.untyped) }
    def primary_language_name_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def primary_language_name_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def primary_language_name_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def primary_language_name_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def primary_language_name_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def primary_language_name_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def primary_language_name_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def primary_language_name_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def primary_language_name_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def primary_language_name_id_was; end

    sig { void }
    def primary_language_name_id_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def public; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def public=(value); end

    sig { returns(T::Boolean) }
    def public?; end

    sig { returns(T.nilable(T::Boolean)) }
    def public_before_last_save; end

    sig { returns(T.untyped) }
    def public_before_type_cast; end

    sig { returns(T::Boolean) }
    def public_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def public_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def public_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def public_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(::Integer) }
    def public_fork_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def public_fork_count=(value); end

    sig { returns(T::Boolean) }
    def public_fork_count?; end

    sig { returns(T.nilable(::Integer)) }
    def public_fork_count_before_last_save; end

    sig { returns(T.untyped) }
    def public_fork_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def public_fork_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def public_fork_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def public_fork_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def public_fork_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def public_fork_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def public_fork_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def public_fork_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def public_fork_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def public_fork_count_was; end

    sig { void }
    def public_fork_count_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def public_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def public_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def public_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def public_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def public_push; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def public_push=(value); end

    sig { returns(T::Boolean) }
    def public_push?; end

    sig { returns(T.nilable(T::Boolean)) }
    def public_push_before_last_save; end

    sig { returns(T.untyped) }
    def public_push_before_type_cast; end

    sig { returns(T::Boolean) }
    def public_push_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def public_push_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def public_push_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def public_push_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def public_push_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def public_push_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def public_push_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def public_push_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def public_push_was; end

    sig { void }
    def public_push_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def public_was; end

    sig { void }
    def public_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pushed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pushed_at=(value); end

    sig { returns(T::Boolean) }
    def pushed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pushed_at_before_last_save; end

    sig { returns(T.untyped) }
    def pushed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def pushed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pushed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pushed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def pushed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pushed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pushed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def pushed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pushed_at_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pushed_at_usec; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def pushed_at_usec=(value); end

    sig { returns(T::Boolean) }
    def pushed_at_usec?; end

    sig { returns(T.nilable(::Integer)) }
    def pushed_at_usec_before_last_save; end

    sig { returns(T.untyped) }
    def pushed_at_usec_before_type_cast; end

    sig { returns(T::Boolean) }
    def pushed_at_usec_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pushed_at_usec_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pushed_at_usec_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def pushed_at_usec_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pushed_at_usec_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pushed_at_usec_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def pushed_at_usec_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pushed_at_usec_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pushed_at_usec_was; end

    sig { void }
    def pushed_at_usec_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pushed_at_was; end

    sig { void }
    def pushed_at_will_change!; end

    sig { returns(T.untyped) }
    def raw_data; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def raw_data=(value); end

    sig { returns(T::Boolean) }
    def raw_data?; end

    sig { returns(T.untyped) }
    def raw_data_before_last_save; end

    sig { returns(T.untyped) }
    def raw_data_before_type_cast; end

    sig { returns(T::Boolean) }
    def raw_data_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def raw_data_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def raw_data_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def raw_data_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def raw_data_previously_was; end

    sig { returns(T.untyped) }
    def raw_data_was; end

    sig { void }
    def raw_data_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def reflog_sync_enabled; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def reflog_sync_enabled=(value); end

    sig { returns(T::Boolean) }
    def reflog_sync_enabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def reflog_sync_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def reflog_sync_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def reflog_sync_enabled_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def reflog_sync_enabled_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def reflog_sync_enabled_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def reflog_sync_enabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def reflog_sync_enabled_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def reflog_sync_enabled_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def reflog_sync_enabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def reflog_sync_enabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def reflog_sync_enabled_was; end

    sig { void }
    def reflog_sync_enabled_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def refset_updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def refset_updated_at=(value); end

    sig { returns(T::Boolean) }
    def refset_updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def refset_updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def refset_updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def refset_updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def refset_updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def refset_updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def refset_updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def refset_updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def refset_updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def refset_updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def refset_updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def refset_updated_at_was; end

    sig { void }
    def refset_updated_at_will_change!; end

    sig { void }
    def restore_active!; end

    sig { void }
    def restore_archived_at!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_deleted_at!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_disabled_at!; end

    sig { void }
    def restore_disabled_by!; end

    sig { void }
    def restore_disabling_detail!; end

    sig { void }
    def restore_disabling_reason!; end

    sig { void }
    def restore_disk_usage!; end

    sig { void }
    def restore_has_downloads!; end

    sig { void }
    def restore_has_issues!; end

    sig { void }
    def restore_has_wiki!; end

    sig { void }
    def restore_health_status!; end

    sig { void }
    def restore_homepage!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_locked!; end

    sig { void }
    def restore_made_public_at!; end

    sig { void }
    def restore_maintained!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_organization_id!; end

    sig { void }
    def restore_owner_id!; end

    sig { void }
    def restore_owner_login!; end

    sig { void }
    def restore_parent_id!; end

    sig { void }
    def restore_primary_language_name_id!; end

    sig { void }
    def restore_public!; end

    sig { void }
    def restore_public_fork_count!; end

    sig { void }
    def restore_public_push!; end

    sig { void }
    def restore_pushed_at!; end

    sig { void }
    def restore_pushed_at_usec!; end

    sig { void }
    def restore_raw_data!; end

    sig { void }
    def restore_reflog_sync_enabled!; end

    sig { void }
    def restore_refset_updated_at!; end

    sig { void }
    def restore_sandbox!; end

    sig { void }
    def restore_source_id!; end

    sig { void }
    def restore_template!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_hidden!; end

    sig { void }
    def restore_watcher_count!; end

    sig { void }
    def restore_world_writable_wiki!; end

    sig { returns(T.nilable(T::Boolean)) }
    def sandbox; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def sandbox=(value); end

    sig { returns(T::Boolean) }
    def sandbox?; end

    sig { returns(T.nilable(T::Boolean)) }
    def sandbox_before_last_save; end

    sig { returns(T.untyped) }
    def sandbox_before_type_cast; end

    sig { returns(T::Boolean) }
    def sandbox_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def sandbox_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def sandbox_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def sandbox_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def sandbox_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def sandbox_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def sandbox_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def sandbox_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def sandbox_was; end

    sig { void }
    def sandbox_will_change!; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_active; end

    sig { returns(T::Boolean) }
    def saved_change_to_active?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_archived_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_archived_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_deleted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_disabled_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_disabled_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_disabled_by; end

    sig { returns(T::Boolean) }
    def saved_change_to_disabled_by?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_disabling_detail; end

    sig { returns(T::Boolean) }
    def saved_change_to_disabling_detail?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_disabling_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_disabling_reason?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_disk_usage; end

    sig { returns(T::Boolean) }
    def saved_change_to_disk_usage?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_has_downloads; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_downloads?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_has_issues; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_issues?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_has_wiki; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_wiki?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_health_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_health_status?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_homepage; end

    sig { returns(T::Boolean) }
    def saved_change_to_homepage?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_locked; end

    sig { returns(T::Boolean) }
    def saved_change_to_locked?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_made_public_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_made_public_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_maintained; end

    sig { returns(T::Boolean) }
    def saved_change_to_maintained?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_organization_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_organization_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_owner_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_owner_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_owner_login; end

    sig { returns(T::Boolean) }
    def saved_change_to_owner_login?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_parent_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_parent_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_primary_language_name_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_primary_language_name_id?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_public; end

    sig { returns(T::Boolean) }
    def saved_change_to_public?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_public_fork_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_public_fork_count?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_public_push; end

    sig { returns(T::Boolean) }
    def saved_change_to_public_push?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_pushed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_pushed_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_pushed_at_usec; end

    sig { returns(T::Boolean) }
    def saved_change_to_pushed_at_usec?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_raw_data; end

    sig { returns(T::Boolean) }
    def saved_change_to_raw_data?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_reflog_sync_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_reflog_sync_enabled?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_refset_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_refset_updated_at?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_sandbox; end

    sig { returns(T::Boolean) }
    def saved_change_to_sandbox?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_source_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_source_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_template; end

    sig { returns(T::Boolean) }
    def saved_change_to_template?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_hidden; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_hidden?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_watcher_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_watcher_count?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_world_writable_wiki; end

    sig { returns(T::Boolean) }
    def saved_change_to_world_writable_wiki?; end

    sig { returns(T.nilable(::Integer)) }
    def source_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def source_id=(value); end

    sig { returns(T::Boolean) }
    def source_id?; end

    sig { returns(T.nilable(::Integer)) }
    def source_id_before_last_save; end

    sig { returns(T.untyped) }
    def source_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def source_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def source_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def source_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def source_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def source_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def source_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def source_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def source_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def source_id_was; end

    sig { void }
    def source_id_will_change!; end

    sig { returns(T::Boolean) }
    def template; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def template=(value); end

    sig { returns(T::Boolean) }
    def template?; end

    sig { returns(T.nilable(T::Boolean)) }
    def template_before_last_save; end

    sig { returns(T.untyped) }
    def template_before_type_cast; end

    sig { returns(T::Boolean) }
    def template_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def template_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def template_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def template_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def template_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def template_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def template_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def template_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def template_was; end

    sig { void }
    def template_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_hidden; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_hidden=(value); end

    sig { returns(T::Boolean) }
    def user_hidden?; end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_before_last_save; end

    sig { returns(T.untyped) }
    def user_hidden_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_hidden_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_hidden_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_hidden_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_was; end

    sig { void }
    def user_hidden_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def watcher_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def watcher_count=(value); end

    sig { returns(T::Boolean) }
    def watcher_count?; end

    sig { returns(T.nilable(::Integer)) }
    def watcher_count_before_last_save; end

    sig { returns(T.untyped) }
    def watcher_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def watcher_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def watcher_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def watcher_count_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def watcher_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def watcher_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def watcher_count_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def watcher_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def watcher_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def watcher_count_was; end

    sig { void }
    def watcher_count_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_archived_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disabled_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disabled_by?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disabling_detail?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disabling_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disk_usage?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_downloads?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_issues?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_wiki?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_health_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_homepage?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_locked?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_made_public_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_maintained?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_organization_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_owner_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_owner_login?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_parent_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_primary_language_name_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_public?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_public_fork_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_public_push?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pushed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pushed_at_usec?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_raw_data?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reflog_sync_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_refset_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sandbox?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_source_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_template?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_hidden?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_watcher_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_world_writable_wiki?; end

    sig { returns(T::Boolean) }
    def world_writable_wiki; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def world_writable_wiki=(value); end

    sig { returns(T::Boolean) }
    def world_writable_wiki?; end

    sig { returns(T.nilable(T::Boolean)) }
    def world_writable_wiki_before_last_save; end

    sig { returns(T.untyped) }
    def world_writable_wiki_before_type_cast; end

    sig { returns(T::Boolean) }
    def world_writable_wiki_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def world_writable_wiki_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def world_writable_wiki_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def world_writable_wiki_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def world_writable_wiki_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def world_writable_wiki_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def world_writable_wiki_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def world_writable_wiki_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def world_writable_wiki_was; end

    sig { void }
    def world_writable_wiki_will_change!; end
  end

  module GeneratedColumnCoderAccessors
    sig { returns(T.untyped) }
    def code_search_enabled; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def code_search_enabled=(value); end

    sig { returns(T::Boolean) }
    def code_search_enabled?; end

    sig { returns(T.untyped) }
    def completed_onboarding_tasks; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def completed_onboarding_tasks=(value); end

    sig { returns(T::Boolean) }
    def completed_onboarding_tasks?; end

    sig { returns(T.untyped) }
    def created_by_user_id; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def created_by_user_id=(value); end

    sig { returns(T::Boolean) }
    def created_by_user_id?; end

    sig { returns(T.untyped) }
    def created_for_demo_by_gh; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def created_for_demo_by_gh=(value); end

    sig { returns(T::Boolean) }
    def created_for_demo_by_gh?; end

    sig { returns(T.untyped) }
    def deleted_at; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def deleted_at=(value); end

    sig { returns(T::Boolean) }
    def deleted_at?; end

    sig { returns(T.untyped) }
    def deleted_by_user_id; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def deleted_by_user_id=(value); end

    sig { returns(T::Boolean) }
    def deleted_by_user_id?; end

    sig { returns(T.untyped) }
    def displayed_onboarding_tasks; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def displayed_onboarding_tasks=(value); end

    sig { returns(T::Boolean) }
    def displayed_onboarding_tasks?; end

    sig { returns(T.untyped) }
    def lock_reason; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def lock_reason=(value); end

    sig { returns(T::Boolean) }
    def lock_reason?; end

    sig { returns(T.untyped) }
    def primary_language_name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def primary_language_name=(value); end

    sig { returns(T::Boolean) }
    def primary_language_name?; end

    sig { returns(T.untyped) }
    def restorable; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def restorable=(value); end

    sig { returns(T::Boolean) }
    def restorable?; end
  end

  module GeneratedEntityReferenceMethods
    sig { returns(T.nilable(::User)) }
    def owner; end

    sig { returns(T.nilable(::Repositories::IRepository)) }
    def parent; end
  end

  module GeneratedPreludeBatchMethods
    sig { returns(T.untyped) }
    def custom_properties_values; end

    sig { returns(T.untyped) }
    def global_funding_file_repository_funding_links_enabled?; end

    sig { params(user: T.untyped).returns(T.untyped) }
    def starred_by?(user); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_custom_properties_values; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_funding_links_stafftools_disabled?; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_global_funding_file_repository_funding_links_enabled?; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_global_health_files_repo; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_owner_on_per_seat_plan?; end

    sig { params(user: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_starred_by?(user); end

    sig { returns(T.untyped) }
    def global_health_files_repo; end

    sig { params(actor: T.untyped).returns(T.untyped) }
    def most_capable_user_role_for_actor(actor); end

    sig { returns(T.untyped) }
    def repository_funding_links_enabled?; end

    sig { returns(T::Boolean) }
    def vulnerability_alerts_enabled?; end

    sig { params(actor: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_most_capable_user_role_for_actor(actor); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_open_issues_count; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_repository_funding_links_enabled?; end

    sig { returns(Promise[T::Boolean]) }
    def async_batch_vulnerability_alerts_enabled?; end

    sig { returns(T.untyped) }
    def all_forks_count; end

    sig { returns(T.untyped) }
    def funding_links_stafftools_disabled?; end

    sig { returns(T.untyped) }
    def inheriting_global_funding_file?; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_inheriting_global_funding_file?; end

    sig { returns(T.untyped) }
    def open_issues_count; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_all_forks_count; end

    sig { returns(T.untyped) }
    def full_network_count; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_full_network_count; end

    sig { returns(T.untyped) }
    def owner_on_per_seat_plan?; end

    sig { returns(T.untyped) }
    def show_sponsor_button?; end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_owner_sponsored_by_viewer?(viewer); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_show_sponsor_button?; end

    sig { params(actor: T.untyped).returns(T.untyped) }
    def latest_release(actor); end

    sig { returns(T.untyped) }
    def sponsorable_owner?; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_sponsorable_owner?; end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def owner_sponsored_by_viewer?(viewer); end

    sig { returns(T.untyped) }
    def topic_names; end

    sig { returns(Promise[T.untyped]) }
    def async_batch__owner_preloaded_via_domain; end

    sig { params(actor: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_latest_release(actor); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_topic_names; end

    sig { returns(T.untyped) }
    def _owner_preloaded_via_domain; end

    sig { returns(T.untyped) }
    def _parent_preloaded_via_domain; end

    sig { returns(T.untyped) }
    def has_any_trade_restrictions?; end

    sig { returns(Promise[T.untyped]) }
    def async_batch__parent_preloaded_via_domain; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_has_any_trade_restrictions?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def archived_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def can_enable_advanced_security(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def deleted_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding_organization_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def featured_actions(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_spam_and_disabled_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def forks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def forks_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def forks_owned_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_same_network_as(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def internal_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def is_not_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def locked_repos(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def most_starred(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def network_roots(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def network_safe_restoreable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_archived_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_forks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_owned_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_array_index(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def org_owned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def organization_member_private_forks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def owned_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def owned_by_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_not_internal_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def public_or_accessible_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def public_or_internal_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def public_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def recently_updated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def represented_by_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def search(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sorted_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sorted_by_name(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def templates(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def templates_relevant_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unlocked_repos(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def user_owned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_anonymous_git_access(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_global_health_files_name(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_issues_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_issues_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_language(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_sponsorable_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_vulnerability_alerts_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedSpammableClassMethods
    sig { returns(Symbol) }
    def spammable_user_foreign_key; end
  end

  module GeneratedSpammableMethods
    sig { params(viewer: User).returns(Promise[T::Boolean]) }
    def async_hide_from_user?(viewer); end

    sig { params(viewer: User).returns(T::Boolean) }
    def hide_from_user?(viewer); end

    sig { returns(Integer) }
    def set_user_hidden; end

    sig { returns(T::Boolean) }
    def spammy?; end

    sig { returns(Symbol) }
    def user_association_for_spammy; end

    sig { params(viewer: User).returns(T::Boolean) }
    def user_authored_content?(viewer); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Repository } }

    sig { returns(T::Array[::Repository]) }
    def to_a; end

    sig { returns(T::Array[::Repository]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Repository } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Repository } }

    sig do
      params(
        records: T.any(::Repository, T::Enumerable[T.any(::Repository, T::Enumerable[::Repository])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Repository, T::Enumerable[T.any(::Repository, T::Enumerable[::Repository])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Repository, T::Enumerable[T.any(::Repository, T::Enumerable[::Repository])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Repository]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Repository, T::Enumerable[T.any(::Repository, T::Enumerable[::Repository])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Repository, T::Enumerable[T.any(::Repository, T::Enumerable[::Repository])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Repository, T::Enumerable[T.any(::Repository, T::Enumerable[::Repository])])
      ).returns(T::Array[::Repository])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Repository]) }
    def target; end

    sig { returns(T::Array[::Repository]) }
    def to_a; end

    sig { returns(T::Array[::Repository]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Repository } }

    sig { returns(T::Array[::Repository]) }
    def to_a; end

    sig { returns(T::Array[::Repository]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Repository } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

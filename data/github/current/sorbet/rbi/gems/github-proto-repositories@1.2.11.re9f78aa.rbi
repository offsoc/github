# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `github-proto-repositories` gem.
# Please instead update this file by running `bin/tapioca gem github-proto-repositories`.

# source://github-proto-repositories//lib/github/proto/repositories/version.rb#3
module GitHub
  extend ::GitHub::Config::FirstPartyApps
  extend ::GitHub::Config::Metadata
  extend ::GitHub::Config::Datacenter
  extend ::GitHub::Config::ProximaSyncedThirdPartyApps
  extend ::GitHub::Config::Fastly
  extend ::GitHub::Config::Importers
  extend ::GitHub::Config::Kredz
  extend ::GitHub::Config::Varz
  extend ::GitHub::Config::Launch
  extend ::GitHub::Config::LegacyTextileFormatting
  extend ::GitHub::Config::Dreamlifter
  extend ::GitHub::Config::Migration
  extend ::GitHub::Config::Render
  extend ::GitHub::Config::Smtp
  extend ::GitHub::Config::Spokes
  extend ::GitHub::Config::Spokesd
  extend ::GitHub::Config::SupportLink
  extend ::GitHub::Config::Pages
  extend ::GitHub::Config::RequestLimits
  extend ::GitHub::Config::RateLimits
  extend ::GitHub::Config::OpenTelemetry
  extend ::GitHub::Config::HydroConfig
  extend ::GitHub::Config::Redis
  extend ::GitHub::Config::GroupSyncer
  extend ::GitHub::Config::Dependabot
  extend ::GitHub::Config::Twirp
  extend ::GitHub::Config::DriftwoodConfig
  extend ::GitHub::Config::PullRequests
  extend ::GitHub::Config::Repositories
  extend ::GitHub::Config::S3
  extend ::GitHub::Config::Registry
  extend ::GitHub::Config::SystemRoles
  extend ::GitHub::Config::Elasticsearch
  extend ::GitHub::Config::OpenApi
  extend ::GitHub::Config::AuditLogCuratorConfig
  extend ::GitHub::Config::AuditLog
  extend ::GitHub::Config::Billing
  extend ::GitHub::Config::AfterResponse
  extend ::GitHub::Config::Features
  extend ::GitHub::Config::ApiVersioning
  extend ::GitHub::Config::InsightsConfig
  extend ::GitHub::Config::HttpFluentbitConfig
  extend ::GitHub::Config::CodeScanning
  extend ::GitHub::Config::CodeQLVariantAnalysis
  extend ::GitHub::Config::OctoshiftStorage
  extend ::GitHub::Config::OIDCProviders
  extend ::GitHub::Config::BingIndexnow
  extend ::GitHub::Config::Chatops
  extend ::GitHub::Config::IssuesGraphApiConfig
  extend ::GitHub::Config::TimelineApiConfig
  extend ::GitHub::Config::Memex
  extend ::GitHub::Config::MergeQueue
  extend ::GitHub::Config::Codespaces
  extend ::GitHub::Config::Copilot
  extend ::GitHub::Config::Azure
  extend ::GitHub::Config::MultiTenantEnterprise
  extend ::GitHub::Config::NotebooksConfig
  extend ::GitHub::Config::ViewscreenConfig
  extend ::GitHub::Config::Freno
  extend ::GitHub::Config::ActionsResults
  extend ::GitHub::Config::Conduit
  extend ::GitHub::Config::ActionsBroker
  extend ::GitHub::Config::ActionsBrokerWorker
  extend ::GitHub::Config::ActionsRunnerAdmin
  extend ::GitHub::Config::ActionsRunService
  extend ::GitHub::Config::ActionsScaleUnitDomains
  extend ::GitHub::Config::Proxima
  extend ::GitHub::Config::ProximaLoginExperience
  extend ::GitHub::Config::GitSrcMigrator
  extend ::GitHub::Config::Projects
  extend ::GitHub::Config::EnterpriseAccounts
  extend ::GitHub::Config::Orca
  extend ::GitHub::Config::Orcid
  extend ::GitHub::Config::Context
  extend ::GitHub::Config
  extend ::GitHub::Version
  extend ::GitHub::Config::Stats

  class << self
    def after_response_middleware_enabled; end
    def after_response_middleware_enabled=(_arg0); end
    def after_response_middleware_enabled?; end
    def after_response_raise_on_exception; end
    def after_response_raise_on_exception=(_arg0); end
    def after_response_raise_on_exception?; end
    def robot?(useragent); end
  end
end

module GitHub::AppPartitioning; end
module GitHub::CSP; end
module GitHub::DataStructures; end

# source://github-proto-repositories//lib/github/proto/repositories/version.rb#4
module GitHub::Proto; end

# source://github-proto-repositories//lib/github/proto/repositories/version.rb#5
module GitHub::Proto::Repositories; end

# source://github-proto-repositories//lib/github-proto-repositories.rb#12
class GitHub::Proto::Repositories::Error < ::StandardError; end

# source://github-proto-repositories//lib/github/proto/repositories/v1/commits_api_pb.rb#22
module GitHub::Proto::Repositories::V1; end

# source://github-proto-repositories//lib/github/proto/repositories/v1/commits_api_twirp.rb#15
class GitHub::Proto::Repositories::V1::CommitsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def is_reachable_commit(input, req_opts = T.unsafe(nil)); end
end

# source://github-proto-repositories//lib/github/proto/repositories/v1/commits_api_twirp.rb#9
class GitHub::Proto::Repositories::V1::CommitsAPIService < ::Twirp::Service; end

class GitHub::Proto::Repositories::V1::FindRepositoriesByNameRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::Repositories::V1::FindRepositoriesByNameResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::Repositories::V1::FindRepositoriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::Repositories::V1::FindRepositoriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::Repositories::V1::FindRepositoryPermissionsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::Repositories::V1::FindRepositoryPermissionsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::Repositories::V1::IsReachableCommitRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::Repositories::V1::IsReachableCommitResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::Repositories::V1::IssueListItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://github-proto-repositories//lib/github/proto/repositories/v1/issues_api_twirp.rb#15
class GitHub::Proto::Repositories::V1::IssuesAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def issues_list(input, req_opts = T.unsafe(nil)); end
end

# source://github-proto-repositories//lib/github/proto/repositories/v1/issues_api_twirp.rb#9
class GitHub::Proto::Repositories::V1::IssuesAPIService < ::Twirp::Service; end

class GitHub::Proto::Repositories::V1::IssuesListRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::Repositories::V1::IssuesListResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://github-proto-repositories//lib/github/proto/repositories/v1/repositories_api_twirp.rb#17
class GitHub::Proto::Repositories::V1::RepositoriesAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def find_repositories(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def find_repositories_by_name(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def find_repository_permissions(input, req_opts = T.unsafe(nil)); end
end

# source://github-proto-repositories//lib/github/proto/repositories/v1/repositories_api_twirp.rb#9
class GitHub::Proto::Repositories::V1::RepositoriesAPIService < ::Twirp::Service; end

class GitHub::Proto::Repositories::V1::RepositoryListItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::Repositories::V1::RepositoryPermissionListItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::Repositories::V1::Status
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://github-proto-repositories//lib/github/proto/repositories/v1/status_pb.rb#22
GitHub::Proto::Repositories::V1::Status::STATUS_ACTIVE = T.let(T.unsafe(nil), Integer)

# source://github-proto-repositories//lib/github/proto/repositories/v1/status_pb.rb#22
GitHub::Proto::Repositories::V1::Status::STATUS_ARCHIVED = T.let(T.unsafe(nil), Integer)

# source://github-proto-repositories//lib/github/proto/repositories/v1/status_pb.rb#22
GitHub::Proto::Repositories::V1::Status::STATUS_DISABLED = T.let(T.unsafe(nil), Integer)

# source://github-proto-repositories//lib/github/proto/repositories/v1/status_pb.rb#22
GitHub::Proto::Repositories::V1::Status::STATUS_INVALID = T.let(T.unsafe(nil), Integer)

# source://github-proto-repositories//lib/github/proto/repositories/v1/status_pb.rb#22
GitHub::Proto::Repositories::V1::Status::STATUS_SPAMMY = T.let(T.unsafe(nil), Integer)

module GitHub::Proto::Repositories::V1::UserPermission
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://github-proto-repositories//lib/github/proto/repositories/v1/user_permission_pb.rb#22
GitHub::Proto::Repositories::V1::UserPermission::USER_PERMISSION_ADMIN = T.let(T.unsafe(nil), Integer)

# source://github-proto-repositories//lib/github/proto/repositories/v1/user_permission_pb.rb#22
GitHub::Proto::Repositories::V1::UserPermission::USER_PERMISSION_INVALID = T.let(T.unsafe(nil), Integer)

# source://github-proto-repositories//lib/github/proto/repositories/v1/user_permission_pb.rb#22
GitHub::Proto::Repositories::V1::UserPermission::USER_PERMISSION_NO_ACCESS = T.let(T.unsafe(nil), Integer)

# source://github-proto-repositories//lib/github/proto/repositories/v1/user_permission_pb.rb#22
GitHub::Proto::Repositories::V1::UserPermission::USER_PERMISSION_READ = T.let(T.unsafe(nil), Integer)

# source://github-proto-repositories//lib/github/proto/repositories/v1/user_permission_pb.rb#22
GitHub::Proto::Repositories::V1::UserPermission::USER_PERMISSION_WRITE = T.let(T.unsafe(nil), Integer)

module GitHub::Proto::Repositories::V1::Visibility
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://github-proto-repositories//lib/github/proto/repositories/v1/visibility_pb.rb#21
GitHub::Proto::Repositories::V1::Visibility::VISIBILITY_INTERNAL = T.let(T.unsafe(nil), Integer)

# source://github-proto-repositories//lib/github/proto/repositories/v1/visibility_pb.rb#21
GitHub::Proto::Repositories::V1::Visibility::VISIBILITY_INVALID = T.let(T.unsafe(nil), Integer)

# source://github-proto-repositories//lib/github/proto/repositories/v1/visibility_pb.rb#21
GitHub::Proto::Repositories::V1::Visibility::VISIBILITY_PRIVATE = T.let(T.unsafe(nil), Integer)

# source://github-proto-repositories//lib/github/proto/repositories/v1/visibility_pb.rb#21
GitHub::Proto::Repositories::V1::Visibility::VISIBILITY_PUBLIC = T.let(T.unsafe(nil), Integer)

# source://github-proto-repositories//lib/github/proto/repositories/version.rb#6
GitHub::Proto::Repositories::VERSION = T.let(T.unsafe(nil), String)

module GitHub::SCIM; end
module Google::Protobuf::MessageExts::ClassMethods; end

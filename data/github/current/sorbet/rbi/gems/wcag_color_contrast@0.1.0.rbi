# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `wcag_color_contrast` gem.
# Please instead update this file by running `bin/tapioca gem wcag_color_contrast`.

# source://wcag_color_contrast//lib/wcag_color_contrast/version.rb#1
module WCAGColorContrast
  class << self
    # Helper method for WCAGColorContrast::Ratio.new#ratio.
    #
    # source://wcag_color_contrast//lib/wcag_color_contrast.rb#7
    def ratio(*args); end

    # source://wcag_color_contrast//lib/wcag_color_contrast.rb#11
    def relative_luminance(rgb); end
  end
end

# source://wcag_color_contrast//lib/wcag_color_contrast.rb#4
class WCAGColorContrast::InvalidColorError < ::StandardError; end

# source://wcag_color_contrast//lib/wcag_color_contrast.rb#15
class WCAGColorContrast::Ratio
  # Calculate contast ratio beetween RGB1 and RGB2.
  #
  # @raise [InvalidColorError]
  #
  # source://wcag_color_contrast//lib/wcag_color_contrast.rb#17
  def ratio(rgb1, rgb2); end

  # Calculate the relative luminance for an rgb color
  #
  # @raise [InvalidColorError]
  #
  # source://wcag_color_contrast//lib/wcag_color_contrast.rb#31
  def relative_luminance(rgb); end

  private

  # Convert RGB color to sRGB.
  #
  # source://wcag_color_contrast//lib/wcag_color_contrast.rb#41
  def rgb_to_srgba(rgb); end

  # Calculate lightness for sRGB color.
  #
  # source://wcag_color_contrast//lib/wcag_color_contrast.rb#51
  def srgb_lightness(srgb); end

  # Validate RGB string.
  #
  # @return [Boolean]
  #
  # source://wcag_color_contrast//lib/wcag_color_contrast.rb#59
  def valid_rgb?(rgb); end
end

# source://wcag_color_contrast//lib/wcag_color_contrast/version.rb#2
WCAGColorContrast::VERSION = T.let(T.unsafe(nil), String)

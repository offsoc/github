# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Marketplace::V0::ActionList`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Marketplace::V0::ActionList`.

class Hydro::Schemas::Github::Marketplace::V0::ActionList
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      release_tag_name: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_action: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryAction),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, release_tag_name: nil, repository: nil, repository_action: nil, repository_owner: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_release_tag_name; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_action; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_request_context; end

  sig { returns(String) }
  def release_tag_name; end

  sig { params(value: String).void }
  def release_tag_name=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryAction)) }
  def repository_action; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryAction)).void }
  def repository_action=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

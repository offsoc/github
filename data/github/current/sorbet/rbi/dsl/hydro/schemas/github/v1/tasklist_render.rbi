# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::TasklistRender`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::TasklistRender`.

class Hydro::Schemas::Github::V1::TasklistRender
  sig do
    params(
      issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue),
      issue_repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      item_count: T.nilable(Integer),
      render_target: T.nilable(T.any(Symbol, Integer)),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      viewer: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(issue: nil, issue_repository: nil, item_count: nil, render_target: nil, request_context: nil, viewer: nil); end

  sig { void }
  def clear_issue; end

  sig { void }
  def clear_issue_repository; end

  sig { void }
  def clear_item_count; end

  sig { void }
  def clear_render_target; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_viewer; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def issue=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def issue_repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def issue_repository=(value); end

  sig { returns(Integer) }
  def item_count; end

  sig { params(value: Integer).void }
  def item_count=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def render_target; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def render_target=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def viewer; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def viewer=(value); end
end

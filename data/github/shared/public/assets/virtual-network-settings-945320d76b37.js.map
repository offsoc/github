{"version":3,"file":"virtual-network-settings-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/virtual-network-settings/auth-config.ts","app/assets/modules/virtual-network-settings/components/SignInButton.tsx","app/assets/modules/virtual-network-settings/components/SignOutButton.tsx","app/assets/modules/virtual-network-settings/graph.ts","app/assets/modules/virtual-network-settings/components/SubscriptionPicker.tsx","app/assets/modules/virtual-network-settings/components/ResourceGroupPicker.tsx","app/assets/modules/virtual-network-settings/components/VirtualNetworkPicker.tsx","app/assets/modules/virtual-network-settings/components/SubnetPicker.tsx","app/assets/modules/virtual-network-settings/components/RegisterVNetForm.tsx","app/assets/modules/virtual-network-settings/routes/NewPage.tsx","app/assets/modules/virtual-network-settings/index.ts","ui/packages/verified-fetch/verified-fetch.ts","ui/packages/react-core/JsonRoute.tsx"],"sourcesContent":["import {ssrSafeLocation} from '@github-ui/ssr-utils'\n\n/**\n * Configuration object to be passed to MSAL instance on creation.\n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\nexport const msalConfig = () => ({\n  auth: {\n    clientId: '669ab7d0-33a3-4db6-9f12-98be5fbe497f',\n    authority: 'https://login.microsoftonline.com/d140fce4-7363-4338-8dc0-c788481155d9',\n    redirectUri: `${ssrSafeLocation.origin}/enterprises/azure_callback`,\n  },\n  cache: {\n    cacheLocation: 'sessionStorage', // This configures where your cache will be stored\n    storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n  },\n})\n\nexport const loginRequest = {\n  scopes: ['https://management.core.windows.net/.default'],\n}\n","import {useMsal} from '@azure/msal-react'\nimport {loginRequest} from '../auth-config'\nimport {Button} from '@primer/react'\nimport type {ISignInButtonProps} from '../types/virtual-network-settings-types'\n\nexport const SignInButton = (props: ISignInButtonProps) => {\n  const {instance} = useMsal()\n  const {onError} = props\n\n  const handleLogin = () => {\n    try {\n      instance.loginPopup(loginRequest)\n    } catch (e) {\n      // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n      if (e.errorCode === 'popup_window_error') {\n        onError(new Error('Popup window was blocked. Please allow popups for this site and try again.'))\n      } else {\n        // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n        onError(e)\n      }\n\n      return\n    }\n  }\n  return (\n    <Button variant=\"primary\" onClick={handleLogin} sx={{display: 'inline'}}>\n      Sign in\n    </Button>\n  )\n}\n\ntry{ SignInButton.displayName ||= 'SignInButton' } catch {}","import {useMsal} from '@azure/msal-react'\nimport {Button} from '@primer/react'\n\n/**\n * Renders a sign-out button\n */\nexport const SignOutButton = () => {\n  const {instance} = useMsal()\n\n  const handleLogout = () => {\n    instance.logoutPopup({\n      postLogoutRedirectUri: '/',\n      mainWindowRedirectUri: '/',\n    })\n  }\n  return (\n    <Button variant=\"danger\" onClick={handleLogout}>\n      Sign out of Azure\n    </Button>\n  )\n}\n\ntry{ SignOutButton.displayName ||= 'SignOutButton' } catch {}","export async function callMsGraphSubscriptions(accessToken: string) {\n  const headers = new Headers()\n  // eslint-disable-next-line i18n-text/no-en\n  const bearer = `Bearer ${accessToken}`\n\n  headers.append('Authorization', bearer)\n\n  const options = {\n    method: 'GET',\n    headers,\n  }\n\n  let response\n  try {\n    response = await fetch('https://management.azure.com/subscriptions?api-version=2020-01-01', options)\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('Error occurred!', e)\n    throw e\n  }\n\n  return response.json()\n}\n\nexport async function callMsGraphResourceGroups(accessToken: string, subscriptionId: string) {\n  const headers = new Headers()\n  // eslint-disable-next-line i18n-text/no-en\n  const bearer = `Bearer ${accessToken}`\n\n  headers.append('Authorization', bearer)\n\n  const options = {\n    method: 'GET',\n    headers,\n  }\n\n  let response\n  try {\n    response = await fetch(\n      `https://management.azure.com/subscriptions/${subscriptionId}/resourcegroups?api-version=2021-04-01`,\n      options,\n    )\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('Error occurred!', e)\n    throw e\n  }\n\n  return response.json()\n}\n\nexport async function callMsGraphVirtualNetworks(accessToken: string, resourceGroupId: string) {\n  const headers = new Headers()\n  // eslint-disable-next-line i18n-text/no-en\n  const bearer = `Bearer ${accessToken}`\n\n  headers.append('Authorization', bearer)\n\n  const options = {\n    method: 'GET',\n    headers,\n  }\n\n  let response\n  try {\n    response = await fetch(\n      `https://management.azure.com/${resourceGroupId}/providers/Microsoft.Network/virtualNetworks?api-version=2021-08-01`,\n      options,\n    )\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('Error occurred!', e)\n    throw e\n  }\n\n  return response.json()\n}\n","import React, {useState, useEffect, useId, type ChangeEventHandler} from 'react'\nimport {callMsGraphSubscriptions} from '../graph'\nimport type {\n  IAzureSubscription,\n  ISubscriptionPickerProps,\n  ISubscriptionProps,\n} from '../types/virtual-network-settings-types'\nimport {FormControl, Autocomplete} from '@primer/react'\n\nexport function SubscriptionPicker(props: ISubscriptionPickerProps) {\n  const {onError, appState, setAppState} = props\n  const {accessToken, subscriptionError} = appState\n  const [subscriptionsLoaded, setSubscriptionsLoaded] = useState(false)\n  const [subscriptions, setSubscriptions] = useState<ISubscriptionProps[]>([])\n  const [currentSubscription, setCurrentSubscription] = useState<string>('')\n  const labelId = useId()\n\n  useEffect(() => {\n    const updateSubscriptions = async () => {\n      if (!accessToken) {\n        return\n      }\n\n      let response\n      try {\n        response = await callMsGraphSubscriptions(accessToken)\n      } catch (e) {\n        // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n        onError(e)\n        return\n      }\n\n      const subs = response.value.map(({subscriptionId, displayName}: IAzureSubscription) => {\n        return {\n          id: subscriptionId,\n          name: displayName,\n        }\n      })\n      setSubscriptions(subs)\n      setAppState({...appState, selectedSubscription: subs[0]})\n      setCurrentSubscription(`${subs[0].name} (${subs[0].id})`)\n      setSubscriptionsLoaded(true)\n    }\n\n    try {\n      updateSubscriptions()\n    } catch (e) {\n      // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n      onError(e)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [accessToken])\n\n  const selectionChanged = (items: AutocompleteItem | AutocompleteItem[]) => {\n    if (!Array.isArray(items)) {\n      return\n    }\n\n    const value = items[0]!\n    const sub = subscriptions.find(n => n.id === value.id)\n\n    if (sub) {\n      setCurrentSubscription(`${sub.name} (${sub.id})`)\n      setAppState({...appState, selectedSubscription: sub})\n    } else {\n      throw new Error(`Error locating subscription with id ${value.id}`)\n    }\n  }\n\n  const options = subscriptions.map(({id, name}): AutocompleteItem => {\n    return {text: `${name} (${id})`, id}\n  })\n\n  const [filterVal, setFilterVal] = React.useState('')\n  const handleChange: ChangeEventHandler<HTMLInputElement> = event => {\n    setFilterVal(event.currentTarget.value)\n  }\n  const customFilterFn = (item: AutocompleteItem) => item.text.includes(filterVal)\n  interface AutocompleteItem {\n    text: string\n    id: string\n  }\n\n  return (\n    <FormControl required sx={{mt: 3}}>\n      <FormControl.Label id={labelId}>Susbscription</FormControl.Label>\n      <Autocomplete>\n        <Autocomplete.Input\n          block\n          onChange={handleChange}\n          value={currentSubscription}\n          placeholder=\"Select a Subscription\"\n          aria-invalid={!!subscriptionError}\n        />\n        <Autocomplete.Overlay width=\"xlarge\">\n          <Autocomplete.Menu\n            aria-labelledby={labelId}\n            loading={!subscriptionsLoaded}\n            items={options}\n            selectedItemIds={[]}\n            filterFn={customFilterFn}\n            onSelectedChange={selectionChanged}\n            selectionVariant=\"single\"\n          />\n        </Autocomplete.Overlay>\n      </Autocomplete>\n      {!!subscriptionError && <FormControl.Validation variant=\"error\">{subscriptionError}</FormControl.Validation>}\n    </FormControl>\n  )\n}\n\ntry{ SubscriptionPicker.displayName ||= 'SubscriptionPicker' } catch {}","import {useState, useEffect, type ChangeEventHandler} from 'react'\nimport {FormControl, Select} from '@primer/react'\nimport {callMsGraphResourceGroups} from '../graph'\nimport type {IResourceGroupPickerProps} from '../types/virtual-network-settings-types'\ninterface IResourceGroupProps {\n  readonly id: string\n  readonly name: string\n}\n\nexport function ResourceGroupPicker(props: IResourceGroupPickerProps) {\n  const {appState, setAppState, onError} = props\n  const {accessToken, selectedSubscription, resourceGroupError} = appState\n  const [resourceGroups, setResourceGroups] = useState([])\n\n  useEffect(() => {\n    const updateResourceGroups = async () => {\n      if (!accessToken) {\n        return\n      }\n\n      if (selectedSubscription) {\n        const response = await callMsGraphResourceGroups(accessToken, selectedSubscription.id)\n\n        setResourceGroups(\n          response.value.map(({id, name}: IResourceGroupProps) => {\n            return {\n              id,\n              name,\n            }\n          }),\n        )\n\n        if (response.value.length > 0) {\n          setAppState({...appState, selectedResourceGroup: response.value[0].id})\n        } else {\n          setAppState({...appState, selectedResourceGroup: null})\n        }\n      } else {\n        setAppState({...appState, selectedResourceGroup: null})\n      }\n    }\n\n    try {\n      updateResourceGroups()\n    } catch (e) {\n      // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n      onError(e)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [accessToken, selectedSubscription])\n\n  const handleChange: ChangeEventHandler<HTMLSelectElement> = e => {\n    setAppState({...appState, selectedResourceGroup: e.target.value})\n  }\n\n  const options = resourceGroups.map(({id, name}) => {\n    return (\n      <Select.Option key={id} value={id}>\n        {name}\n      </Select.Option>\n    )\n  })\n\n  return (\n    <FormControl required sx={{mt: 3}}>\n      <FormControl.Label>Resource Group</FormControl.Label>\n      <Select block={true} onChange={handleChange} aria-invalid={!!resourceGroupError}>\n        {options}\n      </Select>\n      {!!resourceGroupError && <FormControl.Validation variant=\"error\">{resourceGroupError}</FormControl.Validation>}\n    </FormControl>\n  )\n}\n\ntry{ ResourceGroupPicker.displayName ||= 'ResourceGroupPicker' } catch {}","import {useState, useEffect, type ChangeEventHandler} from 'react'\nimport {callMsGraphVirtualNetworks} from '../graph'\nimport {FormControl, Select} from '@primer/react'\nimport type {\n  IVirtualNetworkPickerProps,\n  IAzureVirtualNetwork,\n  IAzureVirtualNetworkSubnet,\n  IVirtualNetworkProps,\n} from '../types/virtual-network-settings-types'\n\nexport function VirtualNetworkPicker(props: IVirtualNetworkPickerProps) {\n  const {appState, setAppState, onError} = props\n  const {accessToken, selectedResourceGroup, virtualNetworkError} = appState\n  const [virtualNetworks, setVirtualNetworks] = useState<IVirtualNetworkProps[]>([])\n\n  useEffect(() => {\n    const updateVirtualNetworks = async () => {\n      if (!accessToken) {\n        return\n      }\n\n      if (selectedResourceGroup) {\n        const response = await callMsGraphVirtualNetworks(accessToken, selectedResourceGroup)\n\n        const nets = response.value.map((vNet: IAzureVirtualNetwork) => {\n          const subnets = vNet.properties.subnets.map((subnet: IAzureVirtualNetworkSubnet) => {\n            return {\n              id: subnet.id,\n              name: subnet.name,\n            }\n          })\n\n          return {\n            id: vNet.id,\n            name: vNet.name,\n            subnets,\n          }\n        })\n        setVirtualNetworks(nets)\n\n        if (nets.length > 0) {\n          let selectedSubnet = null\n          if (nets[0].subnets.length > 0) {\n            selectedSubnet = nets[0].subnets[0]\n          }\n          setAppState({...appState, selectedVirtualNetwork: nets[0], subnets: nets[0].subnets, selectedSubnet})\n        } else {\n          setAppState({...appState, selectedVirtualNetwork: null, subnets: [], selectedSubnet: null})\n        }\n      } else {\n        setVirtualNetworks([])\n        setAppState({...appState, selectedVirtualNetwork: null, subnets: [], selectedSubnet: null})\n      }\n    }\n\n    try {\n      updateVirtualNetworks()\n    } catch (e) {\n      // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n      onError(e)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [accessToken, selectedResourceGroup])\n\n  const handleChange: ChangeEventHandler<HTMLSelectElement> = e => {\n    const value = e.target.value\n    const vNet = virtualNetworks.find(n => n.id === value)\n\n    if (vNet) {\n      let selectedSubnet = null\n      if (vNet.subnets.length > 0) {\n        selectedSubnet = vNet.subnets[0]!\n      }\n      setAppState({...appState, selectedVirtualNetwork: vNet, subnets: vNet.subnets, selectedSubnet})\n    } else {\n      throw new Error(`Error locating vNet with id ${value}`)\n    }\n  }\n\n  const options = virtualNetworks.map(({id, name}) => {\n    return (\n      <Select.Option key={id} value={id}>\n        {name}\n      </Select.Option>\n    )\n  })\n\n  return (\n    <FormControl required sx={{mt: 3}}>\n      <FormControl.Label>Virtual Network</FormControl.Label>\n      <Select block={true} onChange={handleChange} aria-invalid={!!virtualNetworkError}>\n        {options}\n      </Select>\n      {!!virtualNetworkError && <FormControl.Validation variant=\"error\">{virtualNetworkError}</FormControl.Validation>}\n    </FormControl>\n  )\n}\n\ntry{ VirtualNetworkPicker.displayName ||= 'VirtualNetworkPicker' } catch {}","import type {ChangeEventHandler} from 'react'\nimport {FormControl, Select} from '@primer/react'\nimport type {ISubnetPickerProps} from '../types/virtual-network-settings-types'\n\nexport function SubnetPicker(props: ISubnetPickerProps) {\n  const {appState, setAppState} = props\n  const {subnets, subnetError} = appState\n\n  const handleChange: ChangeEventHandler<HTMLSelectElement> = e => {\n    const value = e.target.value\n    const subnet = subnets.find(n => n.id === value)\n\n    if (subnet) {\n      setAppState({...appState, selectedSubnet: subnet})\n    } else {\n      throw new Error(`Error locating subnet with id ${value}`)\n    }\n  }\n\n  const options = subnets.map(({id, name}) => {\n    return (\n      <Select.Option key={id} value={id}>\n        {name}\n      </Select.Option>\n    )\n  })\n\n  return (\n    <FormControl required sx={{mt: 3}}>\n      <FormControl.Label>Subnet</FormControl.Label>\n      <Select block={true} onChange={handleChange} aria-invalid={!!subnetError}>\n        {options}\n      </Select>\n      {!!subnetError && <FormControl.Validation variant=\"error\">{subnetError}</FormControl.Validation>}\n    </FormControl>\n  )\n}\n\ntry{ SubnetPicker.displayName ||= 'SubnetPicker' } catch {}","import type React from 'react'\nimport {useEffect} from 'react'\nimport {loginRequest} from '../auth-config'\nimport {useMsal} from '@azure/msal-react'\nimport {InteractionRequiredAuthError} from '@azure/msal-browser'\nimport {SubscriptionPicker} from './SubscriptionPicker'\nimport {ResourceGroupPicker} from './ResourceGroupPicker'\nimport {VirtualNetworkPicker} from './VirtualNetworkPicker'\nimport {SubnetPicker} from './SubnetPicker'\nimport {Button} from '@primer/react'\nimport type {FormErrors, IRegisterVNetFormProps} from '../types/virtual-network-settings-types'\n\nexport function RegisterVNetForm(props: IRegisterVNetFormProps) {\n  const {instance, accounts} = useMsal()\n  const {appState, setAppState, businessName, createNetworkRegistration, onError} = props\n\n  useEffect(() => {\n    const getAccessToken = async () => {\n      let response\n\n      try {\n        response = await instance.acquireTokenSilent({\n          ...loginRequest,\n          account: accounts[0],\n        })\n      } catch (e) {\n        if (e instanceof InteractionRequiredAuthError) {\n          // fallback to interaction when silent call fails\n          try {\n            response = await instance.acquireTokenPopup(loginRequest)\n          } catch (err) {\n            // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n            if (err.errorCode === 'popup_window_error') {\n              onError(new Error('Popup window was blocked. Please allow popups for this site and try again.'))\n            } else {\n              // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n              onError(err)\n            }\n\n            return\n          }\n        }\n        // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n        onError(e)\n        return\n      }\n      setAppState({...appState, accessToken: response.accessToken})\n    }\n\n    try {\n      getAccessToken()\n    } catch (e) {\n      // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n      onError(e)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const onSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault()\n\n    const errors: FormErrors = {\n      subscriptionError: null,\n      resourceGroupError: null,\n      virtualNetworkError: null,\n      subnetError: null,\n    }\n\n    if (!appState.selectedSubscription) {\n      errors.subscriptionError = 'Subscription is required'\n    }\n    if (!appState.selectedResourceGroup) {\n      errors.resourceGroupError = 'Resource group is required'\n    }\n    if (!appState.selectedVirtualNetwork) {\n      errors.virtualNetworkError = 'Virtual network is required'\n    }\n    if (!appState.selectedSubnet) {\n      errors.subnetError = 'Subnet is required'\n    }\n\n    setAppState({...appState, ...errors})\n\n    if (\n      appState.selectedSubscription &&\n      appState.selectedVirtualNetwork &&\n      appState.selectedResourceGroup &&\n      appState.selectedSubnet\n    ) {\n      createNetworkRegistration(appState.selectedSubscription, appState.selectedVirtualNetwork, appState.selectedSubnet)\n    }\n  }\n\n  return (\n    <form noValidate onSubmit={onSubmit}>\n      <SubscriptionPicker appState={appState} setAppState={setAppState} onError={onError} />\n      <ResourceGroupPicker appState={appState} setAppState={setAppState} onError={onError} />\n      <VirtualNetworkPicker appState={appState} setAppState={setAppState} onError={onError} />\n      <SubnetPicker appState={appState} setAppState={setAppState} />\n      <div className=\"mt-3\">\n        <Button variant=\"primary\">Add to {businessName}</Button>\n      </div>\n    </form>\n  )\n}\n\ntry{ RegisterVNetForm.displayName ||= 'RegisterVNetForm' } catch {}","import {useState, useMemo} from 'react'\nimport {AuthenticatedTemplate, UnauthenticatedTemplate, MsalProvider} from '@azure/msal-react'\nimport {PublicClientApplication} from '@azure/msal-browser'\nimport {msalConfig} from '../auth-config'\nimport {SignInButton} from '../components/SignInButton'\nimport {SignOutButton} from '../components/SignOutButton'\nimport {RegisterVNetForm} from '../components/RegisterVNetForm'\nimport {BaseStyles, Flash} from '@primer/react'\nimport {verifiedFetchJSON} from '@github-ui/verified-fetch'\nimport {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport type {\n  AppState,\n  ISubscriptionProps,\n  IVirtualNetworkProps,\n  ISubnetProps,\n} from '../types/virtual-network-settings-types'\n\ninterface Business {\n  readonly name: string\n}\ninterface RoutePayload {\n  readonly business: Business\n  readonly formAction: string\n}\n\nexport function NewPage() {\n  const payload: RoutePayload = useRoutePayload()\n  const msalInstance = useMemo(() => new PublicClientApplication(msalConfig()), [])\n  const businessName = payload.business.name\n  const {formAction} = payload\n  const [error, setError] = useState<Error | null>(null)\n  const [appState, setAppState] = useState<AppState>({\n    accessToken: null,\n    selectedSubscription: null,\n    selectedResourceGroup: null,\n    selectedVirtualNetwork: null,\n    selectedSubnet: null,\n    subnets: [],\n    subscriptionError: null,\n    resourceGroupError: null,\n    virtualNetworkError: null,\n    subnetError: null,\n  })\n\n  const createNetworkRegistration = async (\n    subscription: ISubscriptionProps,\n    vnet: IVirtualNetworkProps,\n    subnet: ISubnetProps,\n  ) => {\n    const resp = await verifiedFetchJSON(formAction, {\n      method: 'POST',\n      body: {\n        subnet_id: subnet.id,\n        subnet_name: subnet.name,\n        subscription_id: subscription.id,\n        subscription_name: subscription.name,\n        virtual_network_name: vnet.name,\n      },\n    })\n\n    if (resp.ok) {\n      const body = await resp.json()\n      window.location.href = body.redirect_url\n      return\n    }\n\n    const body = await resp.json()\n    if (body.errors.length > 0) {\n      setError(Error(body.errors[0]))\n      return\n    }\n\n    throw Error('Unknown error')\n  }\n\n  return (\n    <MsalProvider instance={msalInstance}>\n      <BaseStyles>\n        <div className=\"Subhead\">\n          <h2 className=\"Subhead-heading\">\n            Add your Azure virtual network to <span className=\"text-bold\">{businessName}</span>\n          </h2>\n          <div className=\"Subhead-actions\">\n            <AuthenticatedTemplate>\n              <SignOutButton />\n            </AuthenticatedTemplate>\n          </div>\n        </div>\n\n        <div className=\"App\">\n          <AuthenticatedTemplate>\n            {error && <Flash variant=\"danger\">{error.message}</Flash>}\n            <RegisterVNetForm\n              appState={appState}\n              setAppState={setAppState}\n              onError={setError}\n              businessName={businessName}\n              createNetworkRegistration={createNetworkRegistration}\n            />\n          </AuthenticatedTemplate>\n\n          <UnauthenticatedTemplate>\n            <div className=\"blankslate\">\n              <h3 className=\"blankslate-heading\">Please sign-in to Azure to add a virtual network</h3>\n              <p>\n                GitHub currently only supports Azure Virtual Networks. Once you have your virtual network configured,\n                you can install the GitHub Virtual Network app in the Azure Marketplace to connect it to your GitHub\n                account.\n              </p>\n              <div className=\"blankslate-action\">\n                <SignInButton onError={setError} />\n              </div>\n            </div>\n          </UnauthenticatedTemplate>\n        </div>\n      </BaseStyles>\n    </MsalProvider>\n  )\n}\n\ntry{ NewPage.displayName ||= 'NewPage' } catch {}","import {NewPage} from './routes/NewPage'\nimport {registerReactAppFactory} from '@github-ui/react-core/register-app'\nimport {jsonRoute} from '@github-ui/react-core/json-route'\n\nregisterReactAppFactory('virtual-network-settings', () => ({\n  routes: [\n    jsonRoute({path: '/enterprises/:business/settings/virtual_networks/new', Component: NewPage}),\n    jsonRoute({path: '/enterprises/azure_callback', Component: NewPage}),\n  ],\n}))\n","/**\n * A Fetch function which will automatically add the correct headers for\n * making requests to GitHub application servers as long as the associated controller methods allow it.\n * Track down the associated controller method and confirm the controller includes\n * ApplicationController::VerifiedFetchDependency as well as `allow_verified_fetch only:`\n * to the relevant controller methods.\n *\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetch('/foo', {method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.text())\ntest.\n *     }\n */\nexport function verifiedFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  assertRelativePathOrSameOrigin(path)\n\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Verified-Fetch': 'true',\n    'X-Requested-With': 'XMLHttpRequest',\n  }\n\n  return fetch(path, {...init, headers})\n}\n\nexport interface JSONRequestInit extends Omit<RequestInit, 'body'> {\n  body?: unknown\n}\n\nfunction assertRelativePathOrSameOrigin(path: string) {\n  if (process.env.NODE_ENV === 'test' && !window.location.origin) return\n  const url = new URL(path, window.location.origin)\n  if (url.origin !== window.location.origin) {\n    throw new Error('Can not make cross-origin requests from verifiedFetch')\n  }\n}\n\n/**\n * A Fetch function which will automatically add the correct headers for\n * making JSON requests\n *\n * Will also `JSON.stringify` the request body if provided.\n\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetchJSON('/foo', {body: {foo: 'bar'}, method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.json())\n *     }\n */\nexport function verifiedFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  }\n\n  const body = init?.body ? JSON.stringify(init.body) : undefined\n\n  return verifiedFetch(path, {...init, body, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetch(path, {...init, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetchJSON(path, {...init, headers})\n}\n","import type {ChildRoute, LoaderResult, RouteRegistration, TransitionType} from './app-routing-types'\nimport type React from 'react'\nimport type {Location} from '@remix-run/router'\n\nexport interface JsonRouteProps {\n  path: string\n  Component: React.ComponentType\n  transitionType?: TransitionType\n  shouldNavigateOnError?: boolean\n  children?: ChildRoute[]\n}\n/**\n * A utility for building a route registration for a route that consumes a JSON object (either via embedding in a\n * script tag or via a JSON fetch on React soft navigations).\n */\nexport function jsonRoute<TRouteData, TEmbeddedData>({\n  path,\n  Component,\n  /**\n   * Some routes want to handle their own errors and not just show a generic error page. In this case,\n   * the error is just handled like any other payload for the route.\n   * NOTE: We might consider replacing the shouldNavigateOnError flag with a parallel implementation to jsonRoute.\n   */\n  shouldNavigateOnError,\n  transitionType,\n  children,\n}: JsonRouteProps): RouteRegistration<TRouteData, TEmbeddedData> {\n  async function coreLoader({location}: {location: Location}): Promise<LoaderResult<TRouteData>> {\n    let response: Response\n    try {\n      const fetchPath = `${location.pathname}${location.search}`\n      response = await window.fetch(fetchPath, {\n        headers: {\n          Accept: 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-GitHub-Target': 'dotcom',\n          'X-React-Router': 'json',\n        },\n      })\n    } catch (error) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'fetchError'},\n      }\n    }\n    if (response.redirected) {\n      return {\n        type: 'redirect',\n        url: response.url,\n      }\n    } else if (!response.ok) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'httpError', httpStatus: response.status},\n      }\n    } else {\n      try {\n        const responseJson = await response.json()\n        return {\n          type: 'loaded',\n          data: responseJson,\n          title: responseJson.title,\n        }\n      } catch (error) {\n        return {\n          type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n          error: {type: 'badResponseError'},\n        }\n      }\n    }\n  }\n\n  function loadFromEmbeddedData({embeddedData}: {embeddedData: TEmbeddedData}): {data: TRouteData; title: string} {\n    const data = embeddedData as unknown as TRouteData & {title: string}\n    return {data, title: data.title}\n  }\n\n  return {\n    path,\n    // TODO: consider wrapping Component with a component that passes payload as a prop — ideally as part of migrating\n    // away from useRoutePayload.\n    Component,\n    coreLoader,\n    loadFromEmbeddedData,\n    transitionType,\n    children,\n  }\n}\n"],"names":["msalConfig","auth","clientId","authority","redirectUri","ssrSafeLocation","origin","cache","cacheLocation","storeAuthStateInCookie","loginRequest","scopes","SignInButton","instance","useMsal","onError","props","Button","variant","onClick","loginPopup","e","errorCode","sx","display","displayName","SignOutButton","logoutPopup","postLogoutRedirectUri","mainWindowRedirectUri","callMsGraphSubscriptions","accessToken","response","headers","Headers","bearer","append","fetch","method","console","log","json","callMsGraphResourceGroups","subscriptionId","callMsGraphVirtualNetworks","resourceGroupId","SubscriptionPicker","appState","setAppState","subscriptionError","subscriptionsLoaded","setSubscriptionsLoaded","useState","subscriptions","setSubscriptions","currentSubscription","setCurrentSubscription","labelId","useId","useEffect","updateSubscriptions","subs","value","map","id","name","selectedSubscription","options","text","filterVal","setFilterVal","React","FormControl","required","mt","Label","Autocomplete","Input","block","onChange","event","currentTarget","placeholder","aria-invalid","Overlay","width","Menu","aria-labelledby","loading","items","selectedItemIds","filterFn","item","includes","onSelectedChange","Array","isArray","sub","find","n","selectionVariant","Validation","ResourceGroupPicker","resourceGroupError","resourceGroups","setResourceGroups","updateResourceGroups","length","selectedResourceGroup","Select","Option","target","VirtualNetworkPicker","virtualNetworkError","virtualNetworks","setVirtualNetworks","updateVirtualNetworks","nets","subnets","vNet","properties","subnet","selectedSubnet","selectedVirtualNetwork","SubnetPicker","subnetError","RegisterVNetForm","accounts","businessName","createNetworkRegistration","getAccessToken","acquireTokenSilent","account","InteractionRequiredAuthError","acquireTokenPopup","err","onSubmit","preventDefault","errors","form","noValidate","div","className","NewPage","payload","useRoutePayload","msalInstance","useMemo","PublicClientApplication","business","formAction","error","setError","subscription","vnet","resp","verifiedFetchJSON","body","subnet_id","subnet_name","subscription_id","subscription_name","virtual_network_name","ok","window","location","href","redirect_url","Error","MsalProvider","BaseStyles","h2","span","AuthenticatedTemplate","Flash","message","UnauthenticatedTemplate","h3","p","registerReactAppFactory","routes","jsonRoute","path","Component","verifiedFetch","init","assertRelativePathOrSameOrigin","url","URL","Accept","JSON","stringify","undefined","reactFetch","reactFetchJSON","shouldNavigateOnError","transitionType","children","coreLoader","fetchPath","pathname","search","type","redirected","httpStatus","status","responseJson","data","title","loadFromEmbeddedData","embeddedData"],"sourceRoot":""}
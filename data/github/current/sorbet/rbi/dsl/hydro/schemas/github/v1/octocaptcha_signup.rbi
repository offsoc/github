# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::OctocaptchaSignup`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::OctocaptchaSignup`.

class Hydro::Schemas::Github::V1::OctocaptchaSignup
  sig do
    params(
      email_address: T.nilable(String),
      event_id: T.nilable(String),
      event_type: T.nilable(T.any(Symbol, Integer)),
      funcaptcha_response: T.nilable(Hydro::Schemas::Github::V1::Entities::FuncaptchaResponse),
      occurred_at: T.nilable(Google::Protobuf::Timestamp),
      raw_funcaptcha_response_data: T.nilable(String),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      session_id: T.nilable(String),
      show_captcha: T.nilable(T::Boolean),
      show_one_page_flow: T.nilable(T::Boolean),
      signup_time: T.nilable(Integer),
      source_page: T.nilable(String),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      validation_error: T.nilable(String),
      validation_value: T.nilable(String)
    ).void
  end
  def initialize(email_address: nil, event_id: nil, event_type: nil, funcaptcha_response: nil, occurred_at: nil, raw_funcaptcha_response_data: nil, request_context: nil, session_id: nil, show_captcha: nil, show_one_page_flow: nil, signup_time: nil, source_page: nil, user: nil, validation_error: nil, validation_value: nil); end

  sig { void }
  def clear_email_address; end

  sig { void }
  def clear_event_id; end

  sig { void }
  def clear_event_type; end

  sig { void }
  def clear_funcaptcha_response; end

  sig { void }
  def clear_occurred_at; end

  sig { void }
  def clear_raw_funcaptcha_response_data; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_session_id; end

  sig { void }
  def clear_show_captcha; end

  sig { void }
  def clear_show_one_page_flow; end

  sig { void }
  def clear_signup_time; end

  sig { void }
  def clear_source_page; end

  sig { void }
  def clear_user; end

  sig { void }
  def clear_validation_error; end

  sig { void }
  def clear_validation_value; end

  sig { returns(String) }
  def email_address; end

  sig { params(value: String).void }
  def email_address=(value); end

  sig { returns(String) }
  def event_id; end

  sig { params(value: String).void }
  def event_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def event_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def event_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::FuncaptchaResponse)) }
  def funcaptcha_response; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::FuncaptchaResponse)).void }
  def funcaptcha_response=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def occurred_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def occurred_at=(value); end

  sig { returns(String) }
  def raw_funcaptcha_response_data; end

  sig { params(value: String).void }
  def raw_funcaptcha_response_data=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(String) }
  def session_id; end

  sig { params(value: String).void }
  def session_id=(value); end

  sig { returns(T::Boolean) }
  def show_captcha; end

  sig { params(value: T::Boolean).void }
  def show_captcha=(value); end

  sig { returns(T::Boolean) }
  def show_one_page_flow; end

  sig { params(value: T::Boolean).void }
  def show_one_page_flow=(value); end

  sig { returns(Integer) }
  def signup_time; end

  sig { params(value: Integer).void }
  def signup_time=(value); end

  sig { returns(String) }
  def source_page; end

  sig { params(value: String).void }
  def source_page=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end

  sig { returns(String) }
  def validation_error; end

  sig { params(value: String).void }
  def validation_error=(value); end

  sig { returns(String) }
  def validation_value; end

  sig { params(value: String).void }
  def validation_value=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::TokenScanningService::V0::BackfillRequest`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::TokenScanningService::V0::BackfillRequest`.

class Hydro::Schemas::TokenScanningService::V0::BackfillRequest
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      business: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::Business),
      business_id: T.nilable(Google::Protobuf::Int32Value),
      custom_patterns_scan_type: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::CustomPatternsScanType),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      full_scan_type: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::FullScanType),
      generic_secrets_scan_type: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::GenericSecretsScanType),
      gist_scope: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::GistScope),
      low_confidence_scan_type: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::LowConfidenceScanType),
      org_scope: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::OrganizationScope),
      repo_scope: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::RepoScanScope),
      requested_at: T.nilable(Google::Protobuf::Timestamp),
      type: T.nilable(T.any(Symbol, Integer)),
      wiki_scanning: T.nilable(T::Boolean)
    ).void
  end
  def initialize(actor: nil, business: nil, business_id: nil, custom_patterns_scan_type: nil, feature_flags: T.unsafe(nil), full_scan_type: nil, generic_secrets_scan_type: nil, gist_scope: nil, low_confidence_scan_type: nil, org_scope: nil, repo_scope: nil, requested_at: nil, type: nil, wiki_scanning: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::Business)) }
  def business; end

  sig { params(value: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::Business)).void }
  def business=(value); end

  sig { returns(T.nilable(Google::Protobuf::Int32Value)) }
  def business_id; end

  sig { params(value: T.nilable(Google::Protobuf::Int32Value)).void }
  def business_id=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_business; end

  sig { void }
  def clear_business_id; end

  sig { void }
  def clear_custom_patterns_scan_type; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_full_scan_type; end

  sig { void }
  def clear_generic_secrets_scan_type; end

  sig { void }
  def clear_gist_scope; end

  sig { void }
  def clear_low_confidence_scan_type; end

  sig { void }
  def clear_org_scope; end

  sig { void }
  def clear_repo_scope; end

  sig { void }
  def clear_requested_at; end

  sig { void }
  def clear_type; end

  sig { void }
  def clear_wiki_scanning; end

  sig { returns(T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::CustomPatternsScanType)) }
  def custom_patterns_scan_type; end

  sig do
    params(
      value: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::CustomPatternsScanType)
    ).void
  end
  def custom_patterns_scan_type=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::FullScanType)) }
  def full_scan_type; end

  sig { params(value: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::FullScanType)).void }
  def full_scan_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::GenericSecretsScanType)) }
  def generic_secrets_scan_type; end

  sig do
    params(
      value: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::GenericSecretsScanType)
    ).void
  end
  def generic_secrets_scan_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::GistScope)) }
  def gist_scope; end

  sig { params(value: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::GistScope)).void }
  def gist_scope=(value); end

  sig { returns(T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::LowConfidenceScanType)) }
  def low_confidence_scan_type; end

  sig do
    params(
      value: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::LowConfidenceScanType)
    ).void
  end
  def low_confidence_scan_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::OrganizationScope)) }
  def org_scope; end

  sig { params(value: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::OrganizationScope)).void }
  def org_scope=(value); end

  sig { returns(T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::RepoScanScope)) }
  def repo_scope; end

  sig { params(value: T.nilable(Hydro::Schemas::TokenScanningService::V0::BackfillRequest::RepoScanScope)).void }
  def repo_scope=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def requested_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def requested_at=(value); end

  sig { returns(T.nilable(Symbol)) }
  def scan_scope; end

  sig { returns(T.nilable(Symbol)) }
  def scan_type; end

  sig { returns(T.any(Symbol, Integer)) }
  def type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def type=(value); end

  sig { returns(T::Boolean) }
  def wiki_scanning; end

  sig { params(value: T::Boolean).void }
  def wiki_scanning=(value); end
end

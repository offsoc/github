# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry`.

class Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry
  sig do
    params(
      base_sha: T.nilable(String),
      blocked_by_merge_conflicts: T.nilable(T::Boolean),
      blocked_by_required_status: T.nilable(T::Boolean),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      head_ref: T.nilable(String),
      head_sha: T.nilable(String),
      id: T.nilable(Integer),
      jump_queue: T.nilable(T::Boolean),
      mergeable: T.nilable(T::Boolean),
      pull_request_id: T.nilable(Integer),
      solo: T.nilable(T::Boolean),
      state: T.nilable(T.any(Symbol, Integer)),
      updated_at: T.nilable(Google::Protobuf::Timestamp),
      waiting: T.nilable(T::Boolean)
    ).void
  end
  def initialize(base_sha: nil, blocked_by_merge_conflicts: nil, blocked_by_required_status: nil, created_at: nil, head_ref: nil, head_sha: nil, id: nil, jump_queue: nil, mergeable: nil, pull_request_id: nil, solo: nil, state: nil, updated_at: nil, waiting: nil); end

  sig { returns(String) }
  def base_sha; end

  sig { params(value: String).void }
  def base_sha=(value); end

  sig { returns(T::Boolean) }
  def blocked_by_merge_conflicts; end

  sig { params(value: T::Boolean).void }
  def blocked_by_merge_conflicts=(value); end

  sig { returns(T::Boolean) }
  def blocked_by_required_status; end

  sig { params(value: T::Boolean).void }
  def blocked_by_required_status=(value); end

  sig { void }
  def clear_base_sha; end

  sig { void }
  def clear_blocked_by_merge_conflicts; end

  sig { void }
  def clear_blocked_by_required_status; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_head_ref; end

  sig { void }
  def clear_head_sha; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_jump_queue; end

  sig { void }
  def clear_mergeable; end

  sig { void }
  def clear_pull_request_id; end

  sig { void }
  def clear_solo; end

  sig { void }
  def clear_state; end

  sig { void }
  def clear_updated_at; end

  sig { void }
  def clear_waiting; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(String) }
  def head_ref; end

  sig { params(value: String).void }
  def head_ref=(value); end

  sig { returns(String) }
  def head_sha; end

  sig { params(value: String).void }
  def head_sha=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def jump_queue; end

  sig { params(value: T::Boolean).void }
  def jump_queue=(value); end

  sig { returns(T::Boolean) }
  def mergeable; end

  sig { params(value: T::Boolean).void }
  def mergeable=(value); end

  sig { returns(Integer) }
  def pull_request_id; end

  sig { params(value: Integer).void }
  def pull_request_id=(value); end

  sig { returns(T::Boolean) }
  def solo; end

  sig { params(value: T::Boolean).void }
  def solo=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def state=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def waiting; end

  sig { params(value: T::Boolean).void }
  def waiting=(value); end
end

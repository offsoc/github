# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `redis-namespace` gem.
# Please instead update this file by running `bin/tapioca gem redis-namespace`.

class Redis::Namespace
  # @return [Namespace] a new instance of Namespace
  #
  # source://redis-namespace//lib/redis/namespace.rb#235
  def initialize(namespace, options = T.unsafe(nil)); end

  # source://redis-namespace//lib/redis/namespace.rb#261
  def _client; end

  # source://redis-namespace//lib/redis/namespace.rb#365
  def call_with_namespace(command, *args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#255
  def client; end

  # @return [Boolean]
  #
  # source://redis-namespace//lib/redis/namespace.rb#247
  def deprecations?; end

  # source://redis-namespace//lib/redis/namespace.rb#307
  def eval(*args); end

  # source://redis-namespace//lib/redis/namespace.rb#303
  def exec; end

  # source://redis-namespace//lib/redis/namespace.rb#345
  def inspect; end

  # source://redis-namespace//lib/redis/namespace.rb#278
  def keys(query = T.unsafe(nil)); end

  # source://redis-namespace//lib/redis/namespace.rb#311
  def method_missing(command, *args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#282
  def multi(&block); end

  # source://redis-namespace//lib/redis/namespace.rb#294
  def namespace(desired_namespace = T.unsafe(nil)); end

  # Sets the attribute namespace
  #
  # @param value the value to set the attribute namespace to.
  #
  # source://redis-namespace//lib/redis/namespace.rb#231
  def namespace=(_arg0); end

  # source://redis-namespace//lib/redis/namespace.rb#290
  def pipelined(&block); end

  # Returns the value of attribute redis.
  #
  # source://redis-namespace//lib/redis/namespace.rb#232
  def redis; end

  # emulate Ruby 1.9+ and keep respond_to_missing? logic together.
  #
  # @return [Boolean]
  #
  # source://redis-namespace//lib/redis/namespace.rb#274
  def respond_to?(command, include_private = T.unsafe(nil)); end

  def self_respond_to?(*_arg0); end

  # Ruby defines a now deprecated type method so we need to override it here
  # since it will never hit method_missing
  #
  # source://redis-namespace//lib/redis/namespace.rb#267
  def type(key); end

  # Returns the value of attribute warning.
  #
  # source://redis-namespace//lib/redis/namespace.rb#233
  def warning; end

  # Sets the attribute warning
  #
  # @param value the value to set the attribute warning to.
  #
  # source://redis-namespace//lib/redis/namespace.rb#233
  def warning=(_arg0); end

  # @return [Boolean]
  #
  # source://redis-namespace//lib/redis/namespace.rb#251
  def warning?; end

  private

  # source://redis-namespace//lib/redis/namespace.rb#488
  def add_namespace(key); end

  # source://redis-namespace//lib/redis/namespace.rb#473
  def call_site; end

  # Avoid modifying the caller's (pass-by-reference) arguments.
  #
  # source://redis-namespace//lib/redis/namespace.rb#463
  def clone_args(arg); end

  # source://redis-namespace//lib/redis/namespace.rb#519
  def create_enumerator(&block); end

  # source://redis-namespace//lib/redis/namespace.rb#477
  def namespaced_block(command, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#502
  def rem_namespace(key); end

  # @return [Boolean]
  #
  # source://redis-namespace//lib/redis/namespace.rb#350
  def respond_to_missing?(command, include_all = T.unsafe(nil)); end
end

# source://redis-namespace//lib/redis/namespace.rb#199
Redis::Namespace::ADMINISTRATIVE_COMMANDS = T.let(T.unsafe(nil), Hash)

# source://redis-namespace//lib/redis/namespace.rb#221
Redis::Namespace::COMMANDS = T.let(T.unsafe(nil), Hash)

# source://redis-namespace//lib/redis/namespace.rb#217
Redis::Namespace::DEPRECATED_COMMANDS = T.let(T.unsafe(nil), Hash)

# source://redis-namespace//lib/redis/namespace.rb#192
Redis::Namespace::HELPER_COMMANDS = T.let(T.unsafe(nil), Hash)

# The following tables define how input parameters and result
# values should be modified for the namespace.
#
# COMMANDS is a hash. Each key is the name of a command and each
# value is a two element array.
#
# The first element in the value array describes how to modify the
# arguments passed. It can be one of:
#
#   nil
#     Do nothing.
#   :first
#     Add the namespace to the first argument passed, e.g.
#       GET key => GET namespace:key
#   :all
#     Add the namespace to all arguments passed, e.g.
#       MGET key1 key2 => MGET namespace:key1 namespace:key2
#   :exclude_first
#     Add the namespace to all arguments but the first, e.g.
#   :exclude_last
#     Add the namespace to all arguments but the last, e.g.
#       BLPOP key1 key2 timeout =>
#       BLPOP namespace:key1 namespace:key2 timeout
#   :exclude_options
#     Add the namespace to all arguments, except the last argument,
#     if the last argument is a hash of options.
#       ZUNIONSTORE key1 2 key2 key3 WEIGHTS 2 1 =>
#       ZUNIONSTORE namespace:key1 2 namespace:key2 namespace:key3 WEIGHTS 2 1
#   :alternate
#     Add the namespace to every other argument, e.g.
#       MSET key1 value1 key2 value2 =>
#       MSET namespace:key1 value1 namespace:key2 value2
#   :sort
#     Add namespace to first argument if it is non-nil
#     Add namespace to second arg's :by and :store if second arg is a Hash
#     Add namespace to each element in second arg's :get if second arg is
#       a Hash; forces second arg's :get to be an Array if present.
#   :eval_style
#     Add namespace to each element in keys argument (via options hash or multi-args)
#   :scan_style
#     Add namespace to :match option, or supplies "#{namespace}:*" if not present.
#
# The second element in the value array describes how to modify
# the return value of the Redis call. It can be one of:
#
#   nil
#     Do nothing.
#   :all
#     Add the namespace to all elements returned, e.g.
#       key1 key2 => namespace:key1 namespace:key2
#
# source://redis-namespace//lib/redis/namespace.rb#56
Redis::Namespace::NAMESPACED_COMMANDS = T.let(T.unsafe(nil), Hash)

# source://redis-namespace//lib/redis/namespace.rb#185
Redis::Namespace::TRANSACTION_COMMANDS = T.let(T.unsafe(nil), Hash)

# source://redis-namespace//lib/redis/namespace/version.rb#5
Redis::Namespace::VERSION = T.let(T.unsafe(nil), String)

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Vulnerability`.
# Please instead update this file by running `bin/tapioca dsl Vulnerability`.

class Vulnerability
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Vulnerability).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Vulnerability).void)
      ).returns(::Vulnerability)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Vulnerability).void)
      ).returns(::Vulnerability)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Vulnerability).void)
      ).returns(::Vulnerability)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Vulnerability).void)
      ).returns(::Vulnerability)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Vulnerability).void)
      ).returns(::Vulnerability)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Vulnerability]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Vulnerability)) }
    def fifth; end

    sig { returns(::Vulnerability) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Vulnerability)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Vulnerability) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Vulnerability).void)
      ).returns(T.nilable(T::Enumerator[::Vulnerability]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Vulnerability]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Vulnerability]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Vulnerability).void)
      ).returns(::Vulnerability)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Vulnerability).void)
      ).returns(::Vulnerability)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Vulnerability).void)
      ).returns(::Vulnerability)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Vulnerability)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Vulnerability) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Vulnerability) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Vulnerability) }
    def first!; end

    sig { returns(T.nilable(::Vulnerability)) }
    def forty_two; end

    sig { returns(::Vulnerability) }
    def forty_two!; end

    sig { returns(T.nilable(::Vulnerability)) }
    def fourth; end

    sig { returns(::Vulnerability) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Vulnerability) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Vulnerability).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Vulnerability).void)
      ).returns(::Vulnerability)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Vulnerability).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Vulnerability).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Vulnerability)) }
    def second; end

    sig { returns(::Vulnerability) }
    def second!; end

    sig { returns(T.nilable(::Vulnerability)) }
    def second_to_last; end

    sig { returns(::Vulnerability) }
    def second_to_last!; end

    sig { returns(::Vulnerability) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Vulnerability) }
    def take!; end

    sig { returns(T.nilable(::Vulnerability)) }
    def third; end

    sig { returns(::Vulnerability) }
    def third!; end

    sig { returns(T.nilable(::Vulnerability)) }
    def third_to_last; end

    sig { returns(::Vulnerability) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::CVEEPSS) }
    def build_cve_epss(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAdvisory) }
    def build_repository_advisory(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CVEEPSS) }
    def create_cve_epss(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CVEEPSS) }
    def create_cve_epss!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAdvisory) }
    def create_repository_advisory(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAdvisory) }
    def create_repository_advisory!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def credit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def credit_ids=(ids); end

    # This method is created by ActiveRecord on the `Vulnerability` class because it declared `has_many :credits`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AdvisoryCredit::PrivateCollectionProxy) }
    def credits; end

    sig { params(value: T::Enumerable[::AdvisoryCredit]).void }
    def credits=(value); end

    sig { returns(T.nilable(::CVEEPSS)) }
    def cve_epss; end

    sig { params(value: T.nilable(::CVEEPSS)).void }
    def cve_epss=(value); end

    sig { returns(T::Array[T.untyped]) }
    def cwe_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def cwe_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def cwe_reference_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def cwe_reference_ids=(ids); end

    # This method is created by ActiveRecord on the `Vulnerability` class because it declared `has_many :cwe_references`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CWEReference::PrivateCollectionProxy) }
    def cwe_references; end

    sig { params(value: T::Enumerable[::CWEReference]).void }
    def cwe_references=(value); end

    # This method is created by ActiveRecord on the `Vulnerability` class because it declared `has_many :cwes, through: :cwe_references`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::CWE::PrivateCollectionProxy) }
    def cwes; end

    sig { params(value: T::Enumerable[::CWE]).void }
    def cwes=(value); end

    sig { returns(T.nilable(::CVEEPSS)) }
    def reload_cve_epss; end

    sig { returns(T.nilable(::RepositoryAdvisory)) }
    def reload_repository_advisory; end

    sig { returns(T.nilable(::RepositoryAdvisory)) }
    def repository_advisory; end

    sig { params(value: T.nilable(::RepositoryAdvisory)).void }
    def repository_advisory=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_vulnerability_alert_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_vulnerability_alert_ids=(ids); end

    # This method is created by ActiveRecord on the `Vulnerability` class because it declared `has_many :repository_vulnerability_alerts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryVulnerabilityAlert::PrivateCollectionProxy) }
    def repository_vulnerability_alerts; end

    sig { params(value: T::Enumerable[::RepositoryVulnerabilityAlert]).void }
    def repository_vulnerability_alerts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def vulnerability_alerting_event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def vulnerability_alerting_event_ids=(ids); end

    # This method is created by ActiveRecord on the `Vulnerability` class because it declared `has_many :vulnerability_alerting_events`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::VulnerabilityAlertingEvent::PrivateCollectionProxy) }
    def vulnerability_alerting_events; end

    sig { params(value: T::Enumerable[::VulnerabilityAlertingEvent]).void }
    def vulnerability_alerting_events=(value); end

    sig { returns(T::Array[T.untyped]) }
    def vulnerability_reference_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def vulnerability_reference_ids=(ids); end

    # This method is created by ActiveRecord on the `Vulnerability` class because it declared `has_many :vulnerability_references`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::VulnerabilityReference::PrivateCollectionProxy) }
    def vulnerability_references; end

    sig { params(value: T::Enumerable[::VulnerabilityReference]).void }
    def vulnerability_references=(value); end

    sig { returns(T::Array[T.untyped]) }
    def vulnerable_version_range_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def vulnerable_version_range_ids=(ids); end

    # This method is created by ActiveRecord on the `Vulnerability` class because it declared `has_many :vulnerable_version_ranges`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::VulnerableVersionRange::PrivateCollectionProxy) }
    def vulnerable_version_ranges; end

    sig { params(value: T::Enumerable[::VulnerableVersionRange]).void }
    def vulnerable_version_ranges=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependency_graph_supported(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def disclosed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def general_classification(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def has_a_severity(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def has_been_reviewed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_simulation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def severity(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unreviewed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_credits; end

    sig { returns(Promise[T.untyped]) }
    def async_cve_epss; end

    sig { returns(Promise[T.untyped]) }
    def async_cwe_references; end

    sig { returns(Promise[T.untyped]) }
    def async_cwes; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_advisory; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_vulnerability_alerts; end

    sig { returns(Promise[T.untyped]) }
    def async_vulnerability_alerting_events; end

    sig { returns(Promise[T.untyped]) }
    def async_vulnerability_references; end

    sig { returns(Promise[T.untyped]) }
    def async_vulnerable_version_ranges; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def classification; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def classification=(value); end

    sig { returns(T::Boolean) }
    def classification?; end

    sig { returns(T.nilable(::String)) }
    def classification_before_last_save; end

    sig { returns(T.untyped) }
    def classification_before_type_cast; end

    sig { returns(T::Boolean) }
    def classification_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def classification_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def classification_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def classification_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def classification_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def classification_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def classification_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def classification_previously_was; end

    sig { returns(T.nilable(::String)) }
    def classification_was; end

    sig { void }
    def classification_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def cve_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def cve_id=(value); end

    sig { returns(T::Boolean) }
    def cve_id?; end

    sig { returns(T.nilable(::String)) }
    def cve_id_before_last_save; end

    sig { returns(T.untyped) }
    def cve_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def cve_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def cve_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def cve_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def cve_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def cve_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def cve_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def cve_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def cve_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def cve_id_was; end

    sig { void }
    def cve_id_will_change!; end

    sig { returns(T.untyped) }
    def cvss_v3; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def cvss_v3=(value); end

    sig { returns(T::Boolean) }
    def cvss_v3?; end

    sig { returns(T.untyped) }
    def cvss_v3_before_last_save; end

    sig { returns(T.untyped) }
    def cvss_v3_before_type_cast; end

    sig { returns(T::Boolean) }
    def cvss_v3_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cvss_v3_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cvss_v3_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def cvss_v3_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def cvss_v3_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cvss_v3_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def cvss_v3_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def cvss_v3_previously_was; end

    sig { returns(T.untyped) }
    def cvss_v3_was; end

    sig { void }
    def cvss_v3_will_change!; end

    sig { returns(T.untyped) }
    def cvss_v4; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def cvss_v4=(value); end

    sig { returns(T::Boolean) }
    def cvss_v4?; end

    sig { returns(T.untyped) }
    def cvss_v4_before_last_save; end

    sig { returns(T.untyped) }
    def cvss_v4_before_type_cast; end

    sig { returns(T::Boolean) }
    def cvss_v4_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cvss_v4_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cvss_v4_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def cvss_v4_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def cvss_v4_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cvss_v4_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def cvss_v4_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def cvss_v4_previously_was; end

    sig { returns(T.untyped) }
    def cvss_v4_was; end

    sig { void }
    def cvss_v4_will_change!; end

    sig { returns(T.untyped) }
    def description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.untyped) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_previously_was; end

    sig { returns(T.untyped) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(::String) }
    def ghsa_id; end

    sig { params(value: ::String).returns(::String) }
    def ghsa_id=(value); end

    sig { returns(T::Boolean) }
    def ghsa_id?; end

    sig { returns(T.nilable(::String)) }
    def ghsa_id_before_last_save; end

    sig { returns(T.untyped) }
    def ghsa_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def ghsa_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def ghsa_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def ghsa_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def ghsa_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ghsa_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def ghsa_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def ghsa_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ghsa_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def ghsa_id_was; end

    sig { void }
    def ghsa_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def npm_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def npm_id=(value); end

    sig { returns(T::Boolean) }
    def npm_id?; end

    sig { returns(T.nilable(::Integer)) }
    def npm_id_before_last_save; end

    sig { returns(T.untyped) }
    def npm_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def npm_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def npm_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def npm_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def npm_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def npm_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def npm_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def npm_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def npm_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def npm_id_was; end

    sig { void }
    def npm_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def nvd_published_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def nvd_published_at=(value); end

    sig { returns(T::Boolean) }
    def nvd_published_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def nvd_published_at_before_last_save; end

    sig { returns(T.untyped) }
    def nvd_published_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def nvd_published_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def nvd_published_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def nvd_published_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def nvd_published_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def nvd_published_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def nvd_published_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def nvd_published_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def nvd_published_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def nvd_published_at_was; end

    sig { void }
    def nvd_published_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at=(value); end

    sig { returns(T::Boolean) }
    def published_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_before_last_save; end

    sig { returns(T.untyped) }
    def published_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def published_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def published_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def published_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def published_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def published_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def published_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_was; end

    sig { void }
    def published_at_will_change!; end

    sig { void }
    def restore_classification!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_cve_id!; end

    sig { void }
    def restore_cvss_v3!; end

    sig { void }
    def restore_cvss_v4!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_ghsa_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_npm_id!; end

    sig { void }
    def restore_nvd_published_at!; end

    sig { void }
    def restore_published_at!; end

    sig { void }
    def restore_reviewed_at!; end

    sig { void }
    def restore_severity!; end

    sig { void }
    def restore_simulation!; end

    sig { void }
    def restore_source_code_location!; end

    sig { void }
    def restore_status!; end

    sig { void }
    def restore_summary!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_white_source_id!; end

    sig { void }
    def restore_withdrawn_at!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reviewed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reviewed_at=(value); end

    sig { returns(T::Boolean) }
    def reviewed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reviewed_at_before_last_save; end

    sig { returns(T.untyped) }
    def reviewed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def reviewed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reviewed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reviewed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def reviewed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reviewed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reviewed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def reviewed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reviewed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reviewed_at_was; end

    sig { void }
    def reviewed_at_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_classification; end

    sig { returns(T::Boolean) }
    def saved_change_to_classification?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_cve_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_cve_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_cvss_v3; end

    sig { returns(T::Boolean) }
    def saved_change_to_cvss_v3?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_cvss_v4; end

    sig { returns(T::Boolean) }
    def saved_change_to_cvss_v4?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_ghsa_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_ghsa_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_npm_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_npm_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_nvd_published_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_nvd_published_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_published_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_published_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_reviewed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_reviewed_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_severity; end

    sig { returns(T::Boolean) }
    def saved_change_to_severity?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_simulation; end

    sig { returns(T::Boolean) }
    def saved_change_to_simulation?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_source_code_location; end

    sig { returns(T::Boolean) }
    def saved_change_to_source_code_location?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_status?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_summary; end

    sig { returns(T::Boolean) }
    def saved_change_to_summary?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_white_source_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_white_source_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_withdrawn_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_withdrawn_at?; end

    sig { returns(T.nilable(::String)) }
    def severity; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def severity=(value); end

    sig { returns(T::Boolean) }
    def severity?; end

    sig { returns(T.nilable(::String)) }
    def severity_before_last_save; end

    sig { returns(T.untyped) }
    def severity_before_type_cast; end

    sig { returns(T::Boolean) }
    def severity_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def severity_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def severity_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def severity_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def severity_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def severity_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def severity_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def severity_previously_was; end

    sig { returns(T.nilable(::String)) }
    def severity_was; end

    sig { void }
    def severity_will_change!; end

    sig { returns(T::Boolean) }
    def simulation; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def simulation=(value); end

    sig { returns(T::Boolean) }
    def simulation?; end

    sig { returns(T.nilable(T::Boolean)) }
    def simulation_before_last_save; end

    sig { returns(T.untyped) }
    def simulation_before_type_cast; end

    sig { returns(T::Boolean) }
    def simulation_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def simulation_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def simulation_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def simulation_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def simulation_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def simulation_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def simulation_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def simulation_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def simulation_was; end

    sig { void }
    def simulation_will_change!; end

    sig { returns(T.untyped) }
    def source_code_location; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def source_code_location=(value); end

    sig { returns(T::Boolean) }
    def source_code_location?; end

    sig { returns(T.untyped) }
    def source_code_location_before_last_save; end

    sig { returns(T.untyped) }
    def source_code_location_before_type_cast; end

    sig { returns(T::Boolean) }
    def source_code_location_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def source_code_location_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def source_code_location_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def source_code_location_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def source_code_location_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def source_code_location_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def source_code_location_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def source_code_location_previously_was; end

    sig { returns(T.untyped) }
    def source_code_location_was; end

    sig { void }
    def source_code_location_will_change!; end

    sig { returns(::String) }
    def status; end

    sig { params(value: ::String).returns(::String) }
    def status=(value); end

    sig { returns(T::Boolean) }
    def status?; end

    sig { returns(T.nilable(::String)) }
    def status_before_last_save; end

    sig { returns(T.untyped) }
    def status_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def status_was; end

    sig { void }
    def status_will_change!; end

    sig { returns(T.untyped) }
    def summary; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def summary=(value); end

    sig { returns(T::Boolean) }
    def summary?; end

    sig { returns(T.untyped) }
    def summary_before_last_save; end

    sig { returns(T.untyped) }
    def summary_before_type_cast; end

    sig { returns(T::Boolean) }
    def summary_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def summary_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def summary_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def summary_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def summary_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def summary_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def summary_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def summary_previously_was; end

    sig { returns(T.untyped) }
    def summary_was; end

    sig { void }
    def summary_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def white_source_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def white_source_id=(value); end

    sig { returns(T::Boolean) }
    def white_source_id?; end

    sig { returns(T.nilable(::String)) }
    def white_source_id_before_last_save; end

    sig { returns(T.untyped) }
    def white_source_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def white_source_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def white_source_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def white_source_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def white_source_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def white_source_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def white_source_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def white_source_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def white_source_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def white_source_id_was; end

    sig { void }
    def white_source_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_classification?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cve_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cvss_v3?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cvss_v4?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ghsa_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_npm_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_nvd_published_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_published_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reviewed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_severity?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_simulation?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_source_code_location?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_summary?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_white_source_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_withdrawn_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def withdrawn_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def withdrawn_at=(value); end

    sig { returns(T::Boolean) }
    def withdrawn_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def withdrawn_at_before_last_save; end

    sig { returns(T.untyped) }
    def withdrawn_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def withdrawn_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def withdrawn_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def withdrawn_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def withdrawn_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def withdrawn_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def withdrawn_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def withdrawn_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def withdrawn_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def withdrawn_at_was; end

    sig { void }
    def withdrawn_at_will_change!; end
  end

  module GeneratedPreludeBatchMethods
    sig { returns(T::Boolean) }
    def alertable?; end

    sig { returns(Promise[T::Boolean]) }
    def async_batch_alertable?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependency_graph_supported(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def disclosed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def general_classification(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def has_a_severity(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def has_been_reviewed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_simulation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def severity(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unreviewed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Vulnerability } }

    sig { returns(T::Array[::Vulnerability]) }
    def to_a; end

    sig { returns(T::Array[::Vulnerability]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Vulnerability } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Vulnerability } }

    sig do
      params(
        records: T.any(::Vulnerability, T::Enumerable[T.any(::Vulnerability, T::Enumerable[::Vulnerability])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Vulnerability, T::Enumerable[T.any(::Vulnerability, T::Enumerable[::Vulnerability])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Vulnerability, T::Enumerable[T.any(::Vulnerability, T::Enumerable[::Vulnerability])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Vulnerability]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Vulnerability, T::Enumerable[T.any(::Vulnerability, T::Enumerable[::Vulnerability])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Vulnerability, T::Enumerable[T.any(::Vulnerability, T::Enumerable[::Vulnerability])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Vulnerability, T::Enumerable[T.any(::Vulnerability, T::Enumerable[::Vulnerability])])
      ).returns(T::Array[::Vulnerability])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Vulnerability]) }
    def target; end

    sig { returns(T::Array[::Vulnerability]) }
    def to_a; end

    sig { returns(T::Array[::Vulnerability]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Vulnerability } }

    sig { returns(T::Array[::Vulnerability]) }
    def to_a; end

    sig { returns(T::Array[::Vulnerability]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Vulnerability } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end


syntax = "proto3";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "proto/rms/v1/pkg/entities.proto";

package github.registry.metadata.v1.pkg;

option go_package = "github.com/github/registry-metadata/rms/twirp/proto/rms/v1/pkg";
option ruby_package = "Proto::RegistryMetadata::V1::Package";

// The Metadata Twirp service is the primary interface to interact with RMS.
// It's meant to be used by all the registry frontend services as well as the monolith.
// RPCs exposed here should be ecosystem-agnostic.
//
// Generally we only want RPCs here that potentially are also used by the monolith.
// If you have RPCs that are not needed by the monolith, consider adding them to the Ecosystem service instead.
service Metadata {
    rpc GetPackageMetadata(GetPackageMetadataRequest) returns (GetPackageMetadataResponse);
    rpc GetPackagesMetadata(GetPackagesMetadataRequest) returns (GetPackagesMetadataResponse);
    rpc GetPackageVersion(GetPackageVersionRequest) returns (GetPackageVersionResponse);
    rpc UpdatePackage(UpdatePackageRequest) returns (UpdatePackageResponse);
    rpc DeletePackage(DeletePackageRequest) returns (DeletePackageResponse);
    rpc DeletePackageVersion(DeletePackageVersionRequest) returns (DeletePackageVersionResponse);
    rpc GetPackageVersionDownloadCounts(GetPackageVersionDownloadCountsRequest) returns (GetPackageVersionDownloadCountsResponse);
    rpc GetPackageTotalDownloadCounts(GetPackageTotalDownloadCountsRequest) returns (GetPackageTotalDownloadCountsResponse);
    rpc GetPackagesTotalDownloadCounts(GetPackagesTotalDownloadCountsRequest) returns (GetPackagesTotalDownloadCountsResponse);
    rpc GetAllPackages(GetAllPackagesRequest) returns (GetAllPackagesResponse);
    rpc GetAllPackageSummaries(GetAllPackageSummariesRequest) returns (GetAllPackageSummariesResponse);
    rpc GetPackageVisibility(GetPackageVisibilityRequest) returns (GetPackageVisibilityResponse);
    rpc GetDeletedPackageVersions(GetDeletedPackageVersionsRequest) returns (GetDeletedPackageVersionsResponse);
    rpc GetPackagesByNames(GetPackagesByNamesRequest) returns (GetPackagesByNamesResponse);
    rpc GetPackagesByOriginalName(GetPackagesByOriginalNameRequest) returns (GetPackagesByOriginalNameResponse);
    rpc UpdatePackageRepo(UpdatePackageRepoRequest) returns (UpdatePackageRepoResponse);
    rpc RestorePackage(RestorePackageRequest) returns (RestorePackageResponse);
    rpc RestorePackageVersion(RestorePackageVersionRequest) returns (RestorePackageVersionResponse);
    rpc ReindexSearch(ReindexSearchRequest) returns (ReindexSearchResponse);
    rpc GetPackagesByRepo(GetPackagesByRepoRequest) returns (GetPackagesByRepoResponse);
    rpc GetStorageUtilization(GetStorageUtilizationRequest) returns (GetStorageUtilizationResponse);
    rpc GetReclaimedStorage(GetReclaimedStorageRequest) returns (GetReclaimedStorageResponse);
    rpc GetAllNamespaces(GetAllNamespacesRequest) returns (GetAllNamespacesResponse);
    rpc GetPackageListing(GetPackageListingRequest) returns (GetPackageListingResponse);
    rpc UpdatePackageVersionEcodata(UpdatePackageVersionEcodataRequest) returns (UpdatePackageVersionEcodataResponse);
    rpc GetPackageVersionFiles(GetPackageVersionFilesRequest) returns (GetPackageVersionFilesResponse);
    rpc GetEcoNamespaceStorageUtilization(GetEcoNamespaceStorageUtilizationRequest) returns (GetEcoNamespaceStorageUtilizationResponse);
    rpc RetireNamespace(RetireNamespaceRequest) returns (RetireNamespaceResponse);
    rpc UnretireNamespace(UnretireNamespaceRequest) returns (UnretireNamespaceResponse);
    rpc CheckPackagesRetiredNamespace(CheckPackagesRetiredNamespaceRequest) returns (CheckPackagesRetiredNamespaceResponse);
    rpc GetContainerLatestVersion(GetContainerLatestVersionRequest) returns (GetContainerLatestVersionResponse);
}

enum EcoVersionFilterContainer {
    TAGGED = 0;
    UNTAGGED = 1;
    RECENT_TAGGED = 2;
}

message GetPackageMetadataRequest {
    string namespace = 1;
    string name = 2;
    Ecosystem ecosystem = 3;
    int64 user_id = 4;
    Order version_order = 5;
    int64 version_limit = 6;
    int64 version_offset = 7;
    oneof eco_version_filter {
        EcoVersionFilterContainer containerVersionFilter = 8;
    }
    bool include_deleted = 9;
    ActorType actor_type = 10;
    PackageSubtype package_subtype = 11;
    bool include_download_count = 12;
    string integration_name = 13;
}

message GetPackageMetadataResponse {
    PackageMetadata package_metadata = 1;
}

message GetPackagesMetadataRequest {
    int64 user_id = 1;
    repeated int64 package_ids = 2;
    bool include_deleted = 3;
    ActorType actor_type = 4;
    bool exclude_latest_version = 5;
    bool include_version_count = 6;
    string integration_name = 7;
}

message GetPackagesMetadataResponse {
    repeated PackagesMetadata packages_metadata = 1;
}

message GetPackageVersionRequest {
    int64 user_id = 1;
    string namespace = 2;
    string name = 3;
    Ecosystem ecosystem = 4;
    int64 version_id = 5;
    ActorType actor_type = 6;
    PackageSubtype package_subtype = 7;
    string integration_name = 8;
}

message GetPackageVersionResponse {
    Version version = 1;
}

message UpdatePackageRequest {
    string namespace = 1;
    string name = 2;
    Ecosystem ecosystem = 3;
    reserved 4; // bool is_public = 4; (deprecated)
    int64 user_id = 5;
    Visibility visibility = 6;
    int64 repo_id = 7;
    bool active_sync_perms = 8;
    google.protobuf.FieldMask update_mask = 9;
    ActorType actor_type = 10;
}

message UpdatePackageResponse {}

message UpdatePackageVersionEcodataRequest {
    int64 user_id = 1;
    int64 version_id = 2;
    string key = 3;
    string value = 4;
    ActorType actor_type = 5;
}

message UpdatePackageVersionEcodataResponse {}

message DeletePackageRequest {
    string namespace = 1;
    string name = 2;
    Ecosystem ecosystem = 3;
    int64 user_id = 4;
    DeleteMode mode = 5;
    bool staff_override = 6;
    ActorType actor_type = 7;
    PackageSubtype package_subtype = 8;
    string integration_name = 9;
}

message DeletePackageResponse {}

message DeletePackageVersionRequest {
    string namespace = 1;
    string name = 2;
    Ecosystem ecosystem = 3;
    int64 user_id = 4;
    DeleteMode mode = 5;
    string version = 6;
    bool staff_override = 7;
    ActorType actor_type = 8;
    PackageSubtype package_subtype = 9;
    string integration_name = 10;
}

message DeletePackageVersionResponse {}

message GetPackageVersionDownloadCountsRequest {
    int64 package_id = 1;
    int64 version_id = 2;
}

message GetPackageVersionDownloadCountsResponse {
    int64 total = 1;
    repeated int64 day_counts = 2;
}

message GetPackageTotalDownloadCountsRequest {
    int64 package_id = 1;
}

message GetPackageTotalDownloadCountsResponse {
    int64 total = 1;
    repeated int64 day_counts = 2;
}

message GetPackagesTotalDownloadCountsRequest {
    repeated int64 package_ids = 1;
}

message GetPackagesTotalDownloadCountsResponse {
    map<int64, int64> package_counts = 1;
}

message GetAllPackagesRequest {
  string namespace = 1;
  int64 limit = 2;
  int64 offset = 3;
  bool exclude_deleted = 4;
  Ecosystem ecosystem = 5;
  Filter filter = 6;
  Order order = 7;
}

message GetAllPackagesResponse {
  repeated Package packages = 1;
  int64 total_packages = 2;
}

message GetAllPackageSummariesRequest {
  string namespace = 1;
  int64 limit = 2;
  int64 offset = 3;
  bool exclude_deleted = 4;
  Ecosystem ecosystem = 5;
  Filter filter = 6;
  Order order = 7;
  bool perform_authz = 8;
  int64 actor_id = 9;
  ActorType actor_type = 10;
  bool exclude_download_count = 11;
  bool exclude_version_count = 12;
  string integration_name = 13;
}

message GetAllPackageSummariesResponse {
  repeated PackageSummary package_summaries = 1;
  int64 total_packages = 2;
}

message GetPackageVisibilityRequest {
    string namespace = 1;
    string name = 2;
    Ecosystem ecosystem = 3;
}

message GetPackageVisibilityResponse {
    Visibility visibility = 1;
}

message GetDeletedPackageVersionsRequest {
    string namespace = 1;
    string name = 2;
    Ecosystem ecosystem = 3;
    int64 user_id = 4;
    Order version_order = 5;
    int64 version_limit = 6;
    int64 version_offset = 7;
    int64 since_days = 8;
    ActorType actor_type = 9;
    PackageSubtype package_subtype = 10;
    string integration_name = 11;
}

message GetDeletedPackageVersionsResponse {
    PackageMetadata package_metadata = 1;
}

message GetPackagesByNamesRequest {
    string namespace = 1;
    repeated string package_names = 2;
    Ecosystem ecosystem = 3;
    int64 user_id = 4;
    ActorType actor_type = 5;
    string integration_name = 6;
}

message GetPackagesByNamesResponse {
    repeated PackageMetadata packages = 1;
}

message GetPackagesByOriginalNameRequest {
    string namespace = 1;
    string name = 2;
    Ecosystem ecosystem = 3;
    int64 user_id = 4;
    int64 since_days = 5;
    ActorType actor_type = 6;
    PackageSubtype package_subtype = 7;
    string integration_name = 8;
}

message GetPackagesByOriginalNameResponse {
    repeated Package packages = 1;
}

message UpdatePackageRepoRequest {
    int64 package_id = 1;
    int64 repo_id = 2;
}

message UpdatePackageRepoResponse {}

message RestorePackageRequest {
    string namespace = 1;
    string name = 2;
    Ecosystem ecosystem = 3;
    int64 user_id = 4;
    ActorType actor_type = 5;
    PackageSubtype package_subtype = 6;
    string integration_name = 7;
}

message RestorePackageResponse {
    Package package = 1;
}

message RestorePackageVersionRequest {
    string namespace = 1;
    string name = 2;
    Ecosystem ecosystem = 3;
    int64 user_id = 4;
    string version = 5;
    ActorType actor_type = 6;
    PackageSubtype package_subtype = 7;
    string integration_name = 8;
}

message RestorePackageVersionResponse {
    Version version = 1;
}

message ReindexSearchRequest {
    repeated int64 package_ids = 1;
    int64 range_min = 2;
    int64 range_max = 3;
}

message ReindexSearchResponse {
    repeated string errors = 1;
}

message GetPackagesByRepoRequest {
    int64 repo_id = 1;
}

message GetPackagesByRepoResponse {
    repeated Package packages = 1;
}

message GetStorageUtilizationRequest {
    repeated string namespaces = 1;
    google.protobuf.Timestamp effective_date = 2;
}

message GetStorageUtilizationResponse {
    uint64 total_storage_bytes = 1;
    map<string, uint64> namespaces = 2;
}

message GetReclaimedStorageRequest {
    repeated string billing_entity_namespaces = 1;
    string namespace = 2;
    string name = 3;
    string version = 4;
    Ecosystem ecosystem = 5;
}

message GetReclaimedStorageResponse {
    uint64 reclaimed_storage_bytes = 1;
}

message GetAllNamespacesRequest {}

message GetAllNamespacesResponse {
    repeated string namespaces = 1;
}

message GetPackageListingRequest {
    string namespace = 1;
    Ecosystem ecosystem = 2;
    int64 user_id = 3;
    int64 limit = 4;
    int64 offset = 5;
    ActorType actor_type = 6;
    repeated string internal_namespaces = 7;
    string visibility = 8;
    repeated int64 readable_repo_ids = 9;
    PackageSubtype package_subtype = 10;
    string integration_name = 11;
}

message GetPackageListingResponse {
    repeated PackagesMetadata packages = 1;
    int64 total_packages = 2;
    bool has_more_pages = 3;
}

message GetPackageVersionFilesRequest {
    int64 version_id = 1;
}

message GetPackageVersionFilesResponse {
    repeated PackageFile files = 1;
}

message GetEcoNamespaceStorageUtilizationRequest {
    string namespace = 1;
}

message GetEcoNamespaceStorageUtilizationResponse {
    uint64 total_storage_bytes = 1;
}
message UnretireNamespaceRequest{
    string name = 1;
    string namespace = 2;
    pkg.Ecosystem ecosystem = 3;
}

message UnretireNamespaceResponse{
   bool success=1;
}

message RetireNamespaceRequest{
    string name = 1;
    string namespace = 2;
    pkg.Ecosystem ecosystem = 3;
    int32 owner_id = 4;
}

message RetireNamespaceResponse{
   bool success=1;
}

message CheckPackagesRetiredNamespaceRequest {
    int32 owner_id = 1;
    string new_namespace = 2;
    string old_namespace  = 3;
}

message CheckPackagesRetiredNamespaceResponse {
    bool retired_namespace_exists = 1;
    string first_retired_namespace = 2;
}

message GetContainerLatestVersionRequest {
    string namespace = 1;
    string name = 2;
    Ecosystem ecosystem = 3;
    int64 user_id = 4;
    ActorType actor_type = 5;
    string integration_name = 6;
}

message GetContainerLatestVersionResponse {
    Version version = 1;
}

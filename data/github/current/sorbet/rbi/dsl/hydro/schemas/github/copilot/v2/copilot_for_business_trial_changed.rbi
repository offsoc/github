# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Copilot::V2::CopilotForBusinessTrialChanged`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Copilot::V2::CopilotForBusinessTrialChanged`.

class Hydro::Schemas::Github::Copilot::V2::CopilotForBusinessTrialChanged
  sig do
    params(
      business: T.nilable(Hydro::Schemas::Github::V1::Entities::Business),
      new_copilot_plan: T.nilable(T.any(Symbol, Integer)),
      old_copilot_plan: T.nilable(T.any(Symbol, Integer)),
      organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      previous_trial_ends_at: T.nilable(Google::Protobuf::Timestamp),
      reason: T.nilable(String),
      staff_actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      updated_trial_ends_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(business: nil, new_copilot_plan: nil, old_copilot_plan: nil, organization: nil, previous_trial_ends_at: nil, reason: nil, staff_actor: nil, updated_trial_ends_at: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Business)) }
  def business; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Business)).void }
  def business=(value); end

  sig { void }
  def clear_business; end

  sig { void }
  def clear_new_copilot_plan; end

  sig { void }
  def clear_old_copilot_plan; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_previous_trial_ends_at; end

  sig { void }
  def clear_reason; end

  sig { void }
  def clear_staff_actor; end

  sig { void }
  def clear_updated_trial_ends_at; end

  sig { returns(T.any(Symbol, Integer)) }
  def new_copilot_plan; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def new_copilot_plan=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def old_copilot_plan; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def old_copilot_plan=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def organization=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def previous_trial_ends_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def previous_trial_ends_at=(value); end

  sig { returns(String) }
  def reason; end

  sig { params(value: String).void }
  def reason=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def staff_actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def staff_actor=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_trial_ends_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_trial_ends_at=(value); end
end

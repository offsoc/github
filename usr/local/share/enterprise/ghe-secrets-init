#!/bin/bash
#/ Usage: ghe-secrets-init
#/ Initialize secrets needed for safe communication
set -e
set +x

export PATH="$PATH:/usr/local/share/enterprise"

[ "$(whoami)" = "root" ] || {
  exec sudo -u root "$0" "$@"
  echo Run this script as the root user. >&2
  exit 1
}

. /etc/github/enterprise-release

initialize_if_unset() {
  key_name=$1
  key_value=$2

  if ghe-config --blank "$key_name"; then
    ghe-config "$key_name" "$key_value"
  fi
}

# Generates a new certificate and sets the thumbprint (and optionally the key/cert) as secrets, if not already set
#
# Usage:
#  create_actions_certificate_if_unset <name of secret for certificate thumbprint> [name of secret for certificate key] [name of secret for certificate crt]
create_actions_certificate_if_unset() {
  if [ -z "$(ghe-config $1)" ]; then
    temp_dir=$( mktemp -d )
    openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -sha256 -subj "/CN=github_enterprise" -keyout $temp_dir/newcert.key  -out $temp_dir/newcert.crt

    if [ -n "$2" ] && [ -z "$(ghe-config $2)" ]; then
      ghe-config $2 "$(cat $temp_dir/newcert.key)"
    fi

    if [ -n "$3" ] && [ -z "$(ghe-config $3)" ]; then
      ghe-config $3 "$(cat $temp_dir/newcert.crt)"
    fi

    # Get thumbprint
    thumbprint=$(openssl x509 -in $temp_dir/newcert.crt -fingerprint -noout) # example: SHA1 Fingerprint=6D:49:FB:BA:34:66:E1:C3:B1:C1:A4:E3:3B:16:02:E6:63:7A:22:11
    thumbprint=$(cut -d "=" -f 2 <<< $thumbprint) # example: 6D:49:FB:BA:34:66:E1:C3:B1:C1:A4:E3:3B:16:02:E6:63:7A:22:11
    thumbprint="${thumbprint//:}"                 # example: 6D49FBBA3466E1C3B1C1A4E33B1602E6637A2211
    openssl pkcs12 -export -inkey $temp_dir/newcert.key -in $temp_dir/newcert.crt -nodes -password pass: -out "/data/user/actions/certificates/$thumbprint.pfx"
    chown actions:actions "/data/user/actions/certificates/$thumbprint.pfx"
    rm -rf $temp_dir
    ghe-config $1 "$thumbprint"
  fi
}

# Generates a new public-private key pair for audit log streaming
#
# Usage:
#  create_driftwood_streaming_keys__if_unset <name of the private key> <name of the public key>
create_driftwood_streaming_keys_if_unset() {
  private_entry="$1"
  public_entry="$2"

  if ! ghe-config --blank "$private_entry" && ! ghe-config --blank "$public_entry"; then
    return
  fi

  eval $(/usr/local/share/enterprise/ghe-streaming-generate-keys)

  # Set entries
  ghe-config "$private_entry" "$DRIFTWOOD_STREAMING_PRIVATE_KEY"
  ghe-config "$public_entry" "$DRIFTWOOD_STREAMING_PUBLIC_KEY"

  # Unset keys
  unset DRIFTWOOD_STREAMING_PRIVATE_KEY
  unset DRIFTWOOD_STREAMING_PUBLIC_KEY
}

# unique per-node uuid
if [ ! -f /data/user/common/uuid ]; then
  mkdir -p /data/user/common
  uuid -o /data/user/common/uuid || true
fi
chown admin:admin /data/user/common/uuid
chmod 0660 /data/user/common/uuid

#
# SAML SP cert and key generation
#
if [ ! -s /data/user/common/saml-sp.p12 ]; then
  saml_tempdir=$( mktemp -d )
  openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -sha256 -subj "/CN=github_enterprise" -keyout $saml_tempdir/saml.key  -out $saml_tempdir/saml.crt
  openssl pkcs12 -export -inkey $saml_tempdir/saml.key -in $saml_tempdir/saml.crt -nodes -password pass: -out /data/user/common/saml-sp.p12
  rm -rf $saml_tempdir
fi

if [ ! -f /data/user/common/secrets.conf ]; then
  touch /data/user/common/secrets.conf
fi
chown admin:admin /data/user/common/secrets.conf
chmod 0660 /data/user/common/secrets.conf

initialize_if_unset 'secrets.session' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.rails-secret-key-base' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.user-password-secrets' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.longpoll.socket-id-secret' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.alive.encryption-key' "$(openssl rand -base64 16)"

initialize_if_unset 'secrets.graphite' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.gist.oauth-client-id' "$(openssl rand -hex 10)"
initialize_if_unset 'secrets.gist.oauth-secret' "$(openssl rand -hex 20)"

initialize_if_unset 'secrets.hookshot.oauth-client-id' "$(openssl rand -hex 10)"
initialize_if_unset 'secrets.hookshot.oauth-secret' "$(openssl rand -hex 20)"
initialize_if_unset 'secrets.hookshot.callback-token' "$(openssl rand -hex 20)"

initialize_if_unset 'secrets.pages.oauth-client-id' "$(openssl rand -hex 10)"
initialize_if_unset 'secrets.pages.oauth-secret' "$(openssl rand -hex 20)"

initialize_if_unset 'secrets.session-manage' "$(openssl rand -hex 32)"

if [ "$(ghe-config 'secrets.manage-auth.argon-secret')" = "deprecated" ]; then
    ghe-config --unset 'secrets.manage-auth.argon-secret'
fi

initialize_if_unset 'secrets.ghes-manage.internal-api-key' "$(openssl rand -base64 32)"

initialize_if_unset 'secrets.ghes-manage.gateway-agent-hmac-key' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.pages.builds-hmac-key' "$(openssl rand -hex 32)"
initialize_if_unset 'secrets.pages.pages-deployer-api-hmac' "$(openssl rand -hex 32)"
initialize_if_unset 'secrets.github.api-internal-twirp-hmac-keys-for-pages-deployer' "$(openssl rand -hex 32)"


initialize_if_unset 'secrets.github.api-internal-pages-hmac' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.render-blob-storage-token' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.api-internal-repositories-hmac' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.api-internal-gists-hmac' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.api-internal-babeld-hmac' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.api-internal-pre-receive-hooks-hmac' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.gitauth-token-hmac' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.graphql-service-token' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.api-internal-twirp-hmac-keys-for-launch' "$(openssl rand -hex 32)"
initialize_if_unset 'secrets.github.api-internal-twirp-hmac-keys-for-kredz' "$(openssl rand -hex 32)"
initialize_if_unset 'secrets.github.api-internal-twirp-hmac-keys-for-mail-replies' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.api-internal-spokesd-hmac' "$(openssl rand -hex 32)"
initialize_if_unset 'secrets.github.api-internal-twirp-hmac-keys-for-spokesd' "$(openssl rand -hex 32)"
initialize_if_unset 'secrets.github.secrets.github.api-gitauth-spokesd-hmac' "$(openssl rand -hex 32)"

create_driftwood_streaming_keys_if_unset 'secrets.driftwood.stream-private-key' 'secrets.driftwood.stream-public-key'
initialize_if_unset 'secrets.driftwood.twirp-hmac-key' "$(openssl rand -hex 32)"
initialize_if_unset 'secrets.github.api-internal-twirp-hmac-keys-for-auditlog' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.smtp' "$(openssl rand -hex 32)"

#Kredz Secrets
initialize_if_unset 'secrets.kredz.credz-hmac-secret' "$(openssl rand -hex 32)"
initialize_if_unset 'secrets.kredz.varz-hmac-secret' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.alambic.hmac' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.alambic.cdn-token' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.alambic.fastly-token' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.alambic.replication-token' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.lfs.api-internal-hmac' "$(openssl rand -hex 32)"

if [ -z "$(ghe-config 'secrets.git-ssh-key')" ]; then
  filename=/home/git/.ssh/id_ed25519
  yes | ssh-keygen -t ed25519 -N "" -C "git@ghe" -f $filename
  ghe-config 'secrets.git-ssh-key' "$(cat $filename)"
  ghe-config 'secrets.git-ssh-pubkey' "$(cat $filename.pub)"
fi

initialize_if_unset 'secrets.mysql' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.mysql-replication' "$(openssl rand -hex 8)"

initialize_if_unset 'secrets.mysql-live-upgrade' "$(openssl rand -hex 8)"

initialize_if_unset 'secrets.mssql.sa-password' "$(openssl rand -base64 16)"
initialize_if_unset 'secrets.mssql.key-encryption-password' "$(openssl rand -base64 16)"

initialize_if_unset 'secrets.actions.ConfigurationDatabaseSqlLogin' "actionsCFG-$(openssl rand -base64 32)"
initialize_if_unset 'secrets.actions.ConfigurationDatabaseSqlPassword' "$(openssl rand -base64 32)"
initialize_if_unset 'secrets.actions.UrlSigningHmacKeyPrimary' "$(openssl rand -base64 16)"
initialize_if_unset 'secrets.actions.UrlSigningHmacKeySecondary' "$(openssl rand -base64 16)"

# Actions - Actions App auth hmac key
initialize_if_unset 'secrets.actions.ActionsAppAuthHmacKeyPrimary' "$(openssl rand -base64 16)"

# Actions - Realm auth hmac key
initialize_if_unset 'secrets.actions.ActionsAppRealmWideHmacKeyPrimary' "$(openssl rand -base64 16)"

# Actions - Run service hmac key
initialize_if_unset 'secrets.actions.RunServiceHmac' "$(openssl rand -base64 16)"

# Launch secrets
initialize_if_unset 'secrets.launch.actions-secrets-private-key' "$(openssl rand -base64 32)"
initialize_if_unset 'secrets.launch.deployer-hmac-secret' "$(openssl rand -hex 32)"
initialize_if_unset 'secrets.launch.action-runner-secret' "$(openssl rand -hex 32)"
initialize_if_unset 'secrets.launch.client-id' "$(openssl rand -hex 10)"
initialize_if_unset 'secrets.launch.client-secret' "$(openssl rand -hex 20)"
initialize_if_unset 'secrets.launch.receiver-webhook-secret' "$(openssl rand -hex 32)"

# Initialize actions related secrets/certificates/keys
if ghe-config --true 'app.actions.enabled' || ghe-config --true 'app.actions.start.token'; then

  # Actions - OAuthS2SSigningCertThumbprint
  # Note: store key and cert
  create_actions_certificate_if_unset 'secrets.actions.OAuthS2SSigningCertThumbprint' 'secrets.actions.OAuthS2SSigningKey' 'secrets.actions.OAuthS2SSigningCert'

  # OAuth secret for launch
  initialize_if_unset 'secrets.launch.token-oauth-key' "$(ghe-config 'secrets.actions.OAuthS2SSigningKey')"
  initialize_if_unset 'secrets.launch.token-oauth-cert' "$(ghe-config 'secrets.actions.OAuthS2SSigningCert')"

  # Actions - PrimaryEncryptionCertificateThumbprint - Certificate used to encrypt information in the databases
  create_actions_certificate_if_unset 'secrets.actions.PrimaryEncryptionCertificateThumbprint'

  # Actions - temporary certificates until refactor
  create_actions_certificate_if_unset 'secrets.actions.S2SEncryptionCertificate'
  create_actions_certificate_if_unset 'secrets.actions.SecondaryEncryptionCertificateThumbprint'
  create_actions_certificate_if_unset 'secrets.actions.SpsValidationCertThumbprint'

  if [ -z "$(ghe-config 'secrets.launch.app-private-key')" ]; then
    launch_app_key_file="/data/user/common/launch_github_app.key"
    launch_app_pem_file="/data/user/common/launch_github_app.pem"

    # Only create key if needed, to persist after ghe-actions-teardown runs
    if [ ! -f "$launch_app_key_file" ]; then
      # max key length is 2048 for an app's private key
      # https://github.com/github/github/blob/2494c02e5b716cda2fc81e907c9c23802b027ace/app/models/integration_key.rb#L7
      openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -sha256 -subj "/CN=github_enterprise" -keyout $launch_app_key_file
      openssl rsa -in $launch_app_key_file -pubout -out $launch_app_pem_file
    fi

    ghe-config 'secrets.launch.app-private-key' "$(cat $launch_app_key_file)"
    ghe-config 'secrets.launch.app-public-key' "$(cat $launch_app_pem_file)"
  fi

  if [ -z "$(ghe-config 'secrets.launch.azp-app-private-key')" ]; then
    openssl req -x509 -sha256 -nodes -newkey rsa:2048 -subj "/CN=github_enterprise" -keyout /data/user/common/launch_azp_app.key -out /data/user/common/launch_azp_app.crt
    ghe-config 'secrets.launch.azp-app-cert' "$(cat /data/user/common/launch_azp_app.crt)"
    ghe-config 'secrets.launch.azp-app-private-key' "$(cat /data/user/common/launch_azp_app.key)"
  fi
fi

# write blank secrets for launch-deployer Nomad config
# this prevents consul-template from erroring
# these secrets will be populated properly by ghe-run-migrations
initialize_if_unset 'secrets.launch.app-id' ''
initialize_if_unset 'secrets.launch.app-relay-id' ''

initialize_if_unset 'secrets.launch.bot-relay-id' ''
initialize_if_unset 'secrets.actions.storage.blob-provider' ''
initialize_if_unset 'secrets.actions.storage.container-prefix' "actions-$(openssl rand -hex 6)"

initialize_if_unset 'secrets.consul.gossip' "$(openssl rand -base64 16)"

initialize_if_unset 'secrets.consul.acl-master-token' "$(openssl rand -base64 16)"


initialize_if_unset 'secrets.mysql-orchestrator' "$(openssl rand -hex 8)"

initialize_if_unset 'secrets.consul.acl-master-token' "$(openssl rand -base64 16)"

initialize_if_unset 'secrets.consul.acl-agent-token' "$(openssl rand -base64 16)"

initialize_if_unset 'secrets.consul.acl-replicate-token' "$(openssl rand -base64 16)"

initialize_if_unset 'secrets.consul.acl-template-token' "$(openssl rand -base64 16)"

initialize_if_unset 'secrets.consul.acl-config-sync-token' "$(openssl rand -base64 16)"

initialize_if_unset 'secrets.nomad.gossip' "$(nomad operator gossip keyring generate)"

initialize_if_unset 'secrets.dependency-graph-api.hmac-key' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.dependency-graph-api.secret-key-base' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.api-internal-twirp-hmac-keys-for-dependency-graph-api' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.dependency-snapshots-api.hmac-key' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.github.api-internal-twirp-hmac-keys-for-dependency-snapshots-api' "$(openssl rand -hex 32)"

initialize_if_unset 'secrets.minio.accesskey' "$(openssl rand -base64 16)"
initialize_if_unset 'secrets.minio.secretkey' "$(openssl rand -base64 16)"

if ghe-config --true 'app.packages.enabled'; then
 # package packages service aws configuration
 initialize_if_unset 'secrets.packages.s3-bucket' ''
 initialize_if_unset 'secrets.packages.aws-secret-key' ''
 initialize_if_unset 'secrets.packages.aws-access-key' ''
 initialize_if_unset 'secrets.packages.blob-storage-type' 's3'
 initialize_if_unset 'secrets.packages.azure-account-name' ''
 initialize_if_unset 'secrets.packages.azure-account-key' ''
 initialize_if_unset 'secrets.packages.azure-container-name' ''
 initialize_if_unset 'secrets.packages.service-url' 'https://s3.us-east-1.amazonaws.com'
 initialize_if_unset 'secrets.packages.hmac-key' "$(openssl rand -hex 32)"
 initialize_if_unset 'secrets.packages-v2.rms.hmac-key' "$(openssl rand -hex 32)"
fi

initialize_if_unset 'secrets.github.api-internal-twirp-hmac-keys-for-package-registry' "$(openssl rand -hex 32)"

# Authzd secret
initialize_if_unset 'secrets.authzd.hmac-key' "$(openssl rand -hex 32)"

# WireGuard Keys
if [ ! -s /data/user/common/wireguard.key ]; then
  wg genkey > /data/user/common/wireguard.key
fi
setfacl --remove-all /data/user/common/wireguard.key
chown root:root /data/user/common/wireguard.key
chmod 0600 /data/user/common/wireguard.key

initialize_if_unset 'secrets.wireguard.psk' "$(wg genpsk)"

initialize_if_unset "secrets.advanced-security.turboghas-hmac-key" "$(openssl rand -hex 32)"

if ghe-config --true "app.code-scanning.enabled"; then
  initialize_if_unset "secrets.code-scanning.turboscan-hmac-key" "$(openssl rand -hex 32)"
fi

if ghe-config --true "app.secret-scanning.enabled"; then
  initialize_if_unset "secrets.secret-scanning.internal-token-scanning-hmac-key" "$(openssl rand -hex 32)"
  initialize_if_unset "secrets.secret-scanning.external-token-scanning-hmac-key" "$(openssl rand -hex 32)"
  ENCRYPTED_SECRETS_STORAGE_KEY=$(openssl rand -base64 32)
  initialize_if_unset "secrets.secret-scanning.encrypted-secrets-current-storage-key" "$ENCRYPTED_SECRETS_STORAGE_KEY"
  initialize_if_unset "secrets.secret-scanning.encrypted-secrets-delimited-storage-keys" "$ENCRYPTED_SECRETS_STORAGE_KEY"
  ENCRYPTED_SECRETS_TRANSIT_KEY=$(openssl rand -base64 32)
  initialize_if_unset "secrets.secret-scanning.encrypted-secrets-current-shared-transit-key" "$ENCRYPTED_SECRETS_TRANSIT_KEY"
  initialize_if_unset "secrets.secret-scanning.encrypted-secrets-delimited-shared-transit-keys" "$ENCRYPTED_SECRETS_TRANSIT_KEY"

  ENCRYPTED_SECRETS_USER_CONTENT_DELIMITED_ENCRYPTION_ROOT_KEYS=$(openssl rand -base64 32)
  initialize_if_unset "secrets.secret-scanning.secret-scanning-user-content-delimited-encryption-root-keys" "$ENCRYPTED_SECRETS_USER_CONTENT_DELIMITED_ENCRYPTION_ROOT_KEYS"
fi

if ghe-config --true 'app.dependabot.enabled'; then
  initialize_if_unset 'secrets.dependabot.dependabot-api-hmac-key' "$(openssl rand -hex 32)"
  initialize_if_unset 'secrets.dependabot.api-internal-twirp-hmac-keys-for-dependabot-api' "$(openssl rand -hex 32)"
  initialize_if_unset 'secrets.dependabot.secret-key-base' "$(openssl rand -hex 32)"
  initialize_if_unset 'secrets.dependabot.redis-enc-key' "$(openssl rand -base64 32)"
  initialize_if_unset 'secrets.dependabot.tmp-file-enc-key' "$(openssl rand -base64 32)"

  initialize_if_unset 'secrets.dependabot.receiver-webhook-secret' "$(openssl rand -hex 32)"
  # These placeholder secrets will be populated properly by ghe-run-migrations
  initialize_if_unset 'secrets.dependabot.app-id' '0'
  initialize_if_unset 'secrets.dependabot.app-relay-id' ''
  initialize_if_unset 'secrets.dependabot.github-org-id' '0'
  initialize_if_unset 'secrets.dependabot.github-dependabot-user-id' '0'

  # This is needed until updater and proxy images and updater-action are made
  # public, manually populate this placeholder with a valid PAT for now
  initialize_if_unset 'secrets.dependabot.updater-action-pat' '...'

  if [ -z "$(ghe-config 'secrets.dependabot.app-private-key')" ]; then
    dependabot_app_key_file="/data/user/common/dependabot_github_app.key"
    dependabot_app_pem_file="/data/user/common/dependabot_github_app.pem"

    # Only create key if needed
    if [ ! -f "$dependabot_app_key_file" ]; then
      openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -sha256 -subj "/CN=github_enterprise" -keyout $dependabot_app_key_file
      openssl rsa -in $dependabot_app_key_file -pubout -out $dependabot_app_pem_file
    fi

    ghe-config 'secrets.dependabot.app-private-key' "$(cat $dependabot_app_key_file)"
    ghe-config 'secrets.dependabot.app-public-key' "$(cat $dependabot_app_pem_file)"
  fi
fi

if ghe-config --true 'app.chatops.msteams.enabled'; then
  msteams_app_key_file="/data/user/common/msteams_github_app.key"
  msteams_app_pem_file="/data/user/common/msteams_github_app.pem"

  # Only create key if needed
  if [ ! -f "$msteams_app_key_file" ]; then
    openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -sha256 -subj "/CN=github_enterprise" -keyout $msteams_app_key_file
    openssl rsa -in $msteams_app_key_file -out $msteams_app_pem_file
  fi

  ghe-config 'secrets.msteams.app-private-key' "$(cat $msteams_app_key_file)"
  ghe-config 'secrets.msteams.app-private-key-pem' "$(cat $msteams_app_pem_file)"

  initialize_if_unset 'secrets.chatops.app-id-teams' ''
  initialize_if_unset 'secrets.chatops.webhook-secret-teams' "$(openssl rand -hex 32)"
  initialize_if_unset 'secrets.chatops.client-secret-teams' "$(openssl rand -hex 20)"
  initialize_if_unset 'secrets.chatops.client-id-teams' "Iv1.$(openssl rand -hex 8)"

  initialize_if_unset 'secrets.chatops.storage-secret' "$(openssl rand -hex 32)"
  initialize_if_unset 'secrets.chatops.session-secret' "$(openssl rand -hex 32)"
fi

if ghe-config --true 'app.chatops.slack.enabled'; then
  slack_app_key_file="/data/user/common/slack_github_app.key"
  slack_app_pem_file="/data/user/common/slack_github_app.pem"

  # Only create key if needed
  if [ ! -f "$slack_app_key_file" ]; then
    openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -sha256 -subj "/CN=github_enterprise" -keyout $slack_app_key_file
    openssl rsa -in $slack_app_key_file -out $slack_app_pem_file
  fi

  ghe-config 'secrets.slack.app-private-key' "$(cat $slack_app_key_file)"
  ghe-config 'secrets.slack.app-private-key-pem' "$(cat $slack_app_pem_file)"

  initialize_if_unset 'secrets.chatops.app-id-slack' ''
  initialize_if_unset 'secrets.chatops.webhook-secret-slack' "$(openssl rand -hex 32)"
  initialize_if_unset 'secrets.chatops.client-secret-slack' "$(openssl rand -hex 20)"
  initialize_if_unset 'secrets.chatops.client-id-slack' "Iv1.$(openssl rand -hex 8)"

  initialize_if_unset 'secrets.chatops.storage-secret' "$(openssl rand -hex 32)"
  initialize_if_unset 'secrets.chatops.session-secret' "$(openssl rand -hex 32)"
fi

initialize_if_unset 'secrets.github.encrypted-column-keying-material' "$(openssl rand -base64 32)"
initialize_if_unset 'secrets.github.encrypted-column-current-encryption-key' "$(ghe-config --get 'secrets.github.encrypted-column-keying-material'  | sed 's:.*;::')"

initialize_if_unset 'secrets.authnd.hmac-key' "$(openssl rand -hex 32)"

set -x

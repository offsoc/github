syntax = "proto3";

package actions.core.v1;

option go_package = "core/v1";
option ruby_package = "MonolithTwirp::Actions::Core::V1";

import "core/v1/identity.proto";

service PoliciesAPI {
  // CheckActionsPolicy checks if Actions are allowed to be used in a workflow per the repos policy.
  rpc CheckActionsPolicy(CheckActionsPolicyRequest) returns (CheckActionsPolicyResponse);
  // CheckWorkflowsPolicy checks if reusable workflows are allowed to be used in a workflow per the repos policy.
  rpc CheckWorkflowsPolicy(CheckWorkflowsPolicyRequest) returns (CheckWorkflowsPolicyResponse);
}

message CheckActionsPolicyRequest {
  // global id for the repository we're checking. (required)
  Identity repository_id = 1;

  // list of actions that are included in the workflow. "actions/checkout@v1" (required)
  repeated string actions = 2;

  // Include in the response which actions are only allowed under the policy due them being local to the owner/enterprise
  // Used for determining which actions are only allowed on the local instance and not via GH Connect (optional)
  bool include_local_only_actions = 3;

  // We want to ignore policies set at repo level for actions, when they are referenced in an
  // organization enforced required workflow. This will false by default.
  bool should_ignore_repo_policies = 4;
}

message CheckActionsPolicyResponse {
  // Whether or not the list of Actions is allowed under the policy
  bool is_execution_allowed = 1;

  // If not allowed, details on why
  string error_message = 2;

  // The actions that are only allowed under the policy due them being local to the owner/enterprise
  // Only populated when include_local_only_actions is true
  repeated string local_only_actions = 3;

  // To indicate whether actions from internal repos are allowed or not
  bool are_internal_actions_allowed = 4;

  // To indicate whether actions from private repos are allowed or not
  bool are_private_actions_allowed = 5;
}

message CheckWorkflowsPolicyRequest {
  // global id for the repository we're checking. (required)
  Identity repository_id = 1;

  // list of reusable workflows that are included in the workflow. "org/repo/.github/workflows/used.yml@v1" (required)
  repeated string workflows = 2;

  // We want to ignore policies set at repo level for reusable workflows, when they are referenced in an 
  // organization enforced required workflow. This will false by default.
  bool should_ignore_repo_policies = 3;
}

message CheckWorkflowsPolicyResponse {
  // Whether or not the list of workflows is allowed under the policy
  bool is_execution_allowed = 1;

  // If not allowed, details on why
  string error_message = 2;
}

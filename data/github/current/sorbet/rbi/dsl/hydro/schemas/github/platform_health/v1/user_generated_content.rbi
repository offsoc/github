# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::PlatformHealth::V1::UserGeneratedContent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::PlatformHealth::V1::UserGeneratedContent`.

class Hydro::Schemas::Github::PlatformHealth::V1::UserGeneratedContent
  sig do
    params(
      action_type: T.nilable(T.any(Symbol, Integer)),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      content: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData),
      content_created_at: T.nilable(Google::Protobuf::Timestamp),
      content_database_id: T.nilable(Integer),
      content_global_relay_id: T.nilable(String),
      content_type: T.nilable(T.any(Symbol, Integer)),
      content_updated_at: T.nilable(Google::Protobuf::Timestamp),
      content_visibility: T.nilable(T.any(Symbol, Integer)),
      original_type_url: T.nilable(String),
      owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      parent_content_author: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      parent_content_created_at: T.nilable(Google::Protobuf::Timestamp),
      parent_content_database_id: T.nilable(Integer),
      parent_content_global_relay_id: T.nilable(String),
      parent_content_updated_at: T.nilable(Google::Protobuf::Timestamp),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      spamurai_form_signals: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals),
      title: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)
    ).void
  end
  def initialize(action_type: nil, actor: nil, content: nil, content_created_at: nil, content_database_id: nil, content_global_relay_id: nil, content_type: nil, content_updated_at: nil, content_visibility: nil, original_type_url: nil, owner: nil, parent_content_author: nil, parent_content_created_at: nil, parent_content_database_id: nil, parent_content_global_relay_id: nil, parent_content_updated_at: nil, repository: nil, request_context: nil, spamurai_form_signals: nil, title: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_action_type; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_content; end

  sig { void }
  def clear_content_created_at; end

  sig { void }
  def clear_content_database_id; end

  sig { void }
  def clear_content_global_relay_id; end

  sig { void }
  def clear_content_type; end

  sig { void }
  def clear_content_updated_at; end

  sig { void }
  def clear_content_visibility; end

  sig { void }
  def clear_original_type_url; end

  sig { void }
  def clear_owner; end

  sig { void }
  def clear_parent_content_author; end

  sig { void }
  def clear_parent_content_created_at; end

  sig { void }
  def clear_parent_content_database_id; end

  sig { void }
  def clear_parent_content_global_relay_id; end

  sig { void }
  def clear_parent_content_updated_at; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_spamurai_form_signals; end

  sig { void }
  def clear_title; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)) }
  def content; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)).void }
  def content=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def content_created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def content_created_at=(value); end

  sig { returns(Integer) }
  def content_database_id; end

  sig { params(value: Integer).void }
  def content_database_id=(value); end

  sig { returns(String) }
  def content_global_relay_id; end

  sig { params(value: String).void }
  def content_global_relay_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def content_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def content_type=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def content_updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def content_updated_at=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def content_visibility; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def content_visibility=(value); end

  sig { returns(String) }
  def original_type_url; end

  sig { params(value: String).void }
  def original_type_url=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def parent_content_author; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def parent_content_author=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def parent_content_created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def parent_content_created_at=(value); end

  sig { returns(Integer) }
  def parent_content_database_id; end

  sig { params(value: Integer).void }
  def parent_content_database_id=(value); end

  sig { returns(String) }
  def parent_content_global_relay_id; end

  sig { params(value: String).void }
  def parent_content_global_relay_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def parent_content_updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def parent_content_updated_at=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)) }
  def spamurai_form_signals; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)).void }
  def spamurai_form_signals=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)) }
  def title; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)).void }
  def title=(value); end
end

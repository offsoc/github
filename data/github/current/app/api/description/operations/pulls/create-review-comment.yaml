---
summary: Create a review comment for a pull request
description: |-
  Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline, see "[Create an issue comment](${externalDocsUrl}/rest/issues/comments#create-an-issue-comment)."

  If your comment applies to more than one line in the pull request diff, you should use the parameters `line`, `side`, and optionally `start_line` and `start_side` in your request.

  The `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.

  This endpoint triggers [notifications](${externalDocsUrl}/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](${externalDocsUrl}/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
  and "[Best practices for using the REST API](${externalDocsUrl}/rest/guides/best-practices-for-using-the-rest-api)."

  This endpoint supports the following custom media types. For more information, see "[Media types](${externalDocsUrl}/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."

  - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
  - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
  - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
  - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
tags:
  - pulls
operationId: pulls/create-review-comment
externalDocs:
  description: API method documentation
  url: '${externalDocsUrl}/rest/pulls/comments#create-a-review-comment-for-a-pull-request'
parameters:
  - $ref: '../../components/parameters/owner.yaml'
  - $ref: '../../components/parameters/repo.yaml'
  - $ref: '../../components/parameters/pull-number.yaml'
requestBody:
  required: true
  content:
    application/json:
      schema:
        type: object
        properties:
          body:
            type: string
            description: The text of the review comment.
          commit_id:
            type: string
            description: The SHA of the commit needing a comment. Not using the latest
              commit SHA may render your comment outdated if a subsequent commit modifies
              the line you specify as the `position`.
          path:
            type: string
            description: The relative path to the file that necessitates a comment.
          position:
            type: integer
            description: '**This parameter is deprecated. Use `line` instead**. The position
              in the diff where you want to add a review comment. Note this value
              is not the same as the line number in the file. The position value equals the
              number of lines down from the first "@@" hunk header in the file you want to
              add a comment. The line just below the "@@" line is position 1, the next line
              is position 2, and so on. The position in the diff continues to increase through
              lines of whitespace and additional hunks until the beginning of a new file.'
            deprecated: true
            x-github:
              deprecationDate: '2022-11-01'
          side:
            type: string
            description: 'In a split diff
              view, the side of the diff that the pull request''s changes appear on.
              Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red.
              Use `RIGHT` for additions that appear in green or unchanged lines that
              appear in white and are shown for context. For a multi-line comment,
              side represents whether the last line of the comment range is a deletion
              or addition. For more information, see "[Diff view options](${externalDocsUrl}/articles/about-comparing-branches-in-pull-requests#diff-view-options)"
              in the GitHub Help documentation.'
            enum:
              - LEFT
              - RIGHT
          line:
            type: integer
            description: '**Required unless using `subject_type:file`**. The line of the
              blob in the pull request diff that the comment applies to. For a multi-line
              comment, the last line of the range that your comment applies to.'
          start_line:
            type: integer
            description: '**Required when using multi-line comments unless using `in_reply_to`**. The `start_line`
              is the first line in the pull request diff that your multi-line comment
              applies to. To learn more about multi-line comments, see "[Commenting
              on a pull request](${externalDocsUrl}/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)"
              in the GitHub Help documentation.'
          start_side:
            type: string
            description: '**Required when using multi-line comments unless using `in_reply_to`**. The `start_side`
              is the starting side of the diff that the comment applies to. Can be
              `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting
              on a pull request](${externalDocsUrl}/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)"
              in the GitHub Help documentation. See `side` in this table for additional
              context.'
            enum:
              - LEFT
              - RIGHT
              - side
          in_reply_to:
            type: integer
            example: 2
            description: 'The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.'
          subject_type:
            type: string
            description: The level at which the comment is targeted.
            enum:
              - line
              - file
        required:
          - body
          - commit_id
          - path
      examples:
        example-for-a-multi-line-comment:
          summary: Example for a multi-line comment
          value:
            body: Great stuff!
            commit_id: 6dcb09b5b57875f334f61aebed695e2e4193db5e
            path: file1.txt
            start_line: 1
            start_side: RIGHT
            line: 2
            side: RIGHT
responses:
  '201':
    description: Response
    content:
      application/json:
        schema:
          $ref: '../../components/schemas/pull-request-review-comment.yaml'
        examples:
          example-for-a-multi-line-comment:
            $ref: '../../components/examples/pull-request-review-comment-example-for-a-multi-line-comment.yaml'
    headers:
      Location:
        example: https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
        schema:
          type: string
  '422':
    $ref: '../../components/responses/validation_failed.yaml'
  '403':
    $ref: '../../components/responses/forbidden.yaml'
x-github-releases:
  - ghec
  - ghes:
      - '>= 2.20'
  - api.github.com
x-github:
  triggersNotification: true
  githubCloudOnly: false
  enabledForGitHubApps: true
  category: pulls
  subcategory: comments
x-github-internal:
  owner: '@github/pull-requests'
  path: '/repos/{owner}/{repo}/pulls/{pull_number}/comments'
  http-method: post
  service-tier: 1
  published: true
  deprecatedFields: true
x-githubEnterpriseOverlays:
  3.0 || 3.1 || 3.2:
    description: |2-

      Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](${externalDocsUrl}/rest/issues/comments#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.

      You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](${externalDocsUrl}/rest/pulls/comments#create-a-review-comment-for-a-pull-request-preview-notices).

      > [!NOTE]
      > The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.

      This endpoint triggers [notifications](${externalDocsUrl}/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](${externalDocsUrl}/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](${externalDocsUrl}/rest/guides/best-practices-for-using-the-rest-api)."
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              body:
                type: string
                description: The text of the review comment.
              commit_id:
                type: string
                description: The SHA of the commit needing a comment. Not using the latest
                  commit SHA may render your comment outdated if a subsequent commit modifies
                  the line you specify as the `position`.
              path:
                type: string
                description: The relative path to the file that necessitates a comment.
              position:
                type: integer
                description: '**Required without `comfort-fade` preview**. The position
                  in the diff where you want to add a review comment. Note this value
                  is not the same as the line number in the file. For help finding the
                  position value, read the note above.'
              side:
                type: string
                description: '**Required with `comfort-fade` preview**. In a split diff
                  view, the side of the diff that the pull request''s changes appear on.
                  Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red.
                  Use `RIGHT` for additions that appear in green or unchanged lines that
                  appear in white and are shown for context. For a multi-line comment,
                  side represents whether the last line of the comment range is a deletion
                  or addition. For more information, see "[Diff view options](${externalDocsUrl}/articles/about-comparing-branches-in-pull-requests#diff-view-options)"
                  in the GitHub Help documentation.'
                enum:
                  - LEFT
                  - RIGHT
              line:
                type: integer
                description: '**Required with `comfort-fade` preview**. The line of the
                  blob in the pull request diff that the comment applies to. For a multi-line
                  comment, the last line of the range that your comment applies to.'
              start_line:
                type: integer
                description: '**Required when using multi-line comments**. To create multi-line
                  comments, you must use the `comfort-fade` preview header. The `start_line`
                  is the first line in the pull request diff that your multi-line comment
                  applies to. To learn more about multi-line comments, see "[Commenting
                  on a pull request](${externalDocsUrl}/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)"
                  in the GitHub Help documentation.'
              start_side:
                type: string
                description: '**Required when using multi-line comments**. To create multi-line
                  comments, you must use the `comfort-fade` preview header. The `start_side`
                  is the starting side of the diff that the comment applies to. Can be
                  `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting
                  on a pull request](${externalDocsUrl}/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)"
                  in the GitHub Help documentation. See `side` in this table for additional
                  context.'
                enum:
                  - LEFT
                  - RIGHT
                  - side
              in_reply_to:
                type: integer
                example: 2
            required:
              - body
              - commit_id
              - path
              - line
    x-github:
      previews:
        - $ref: '../../components/x-previews/comfort-fade.yaml'
          required: false
  '<3.9':
    requestBody:
      content:
        application/json:
          schema:
            properties:
              subject_type:
x-github-breaking-changes:
  - changeset: remove_diff_relative_comment_fields
    patch:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                position:

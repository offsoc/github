# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::DiscussionClick`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::DiscussionClick`.

class Hydro::Schemas::Github::V1::DiscussionClick
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      current_repository_id: T.nilable(Integer),
      discussion_comment_id: T.nilable(Integer),
      discussion_id: T.nilable(Integer),
      discussion_repository_id: T.nilable(Integer),
      event_context: T.nilable(T.any(Symbol, Integer)),
      org_level: T.nilable(T::Boolean),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      target: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(actor: nil, current_repository_id: nil, discussion_comment_id: nil, discussion_id: nil, discussion_repository_id: nil, event_context: nil, org_level: nil, request_context: nil, target: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_current_repository_id; end

  sig { void }
  def clear_discussion_comment_id; end

  sig { void }
  def clear_discussion_id; end

  sig { void }
  def clear_discussion_repository_id; end

  sig { void }
  def clear_event_context; end

  sig { void }
  def clear_org_level; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_target; end

  sig { returns(Integer) }
  def current_repository_id; end

  sig { params(value: Integer).void }
  def current_repository_id=(value); end

  sig { returns(Integer) }
  def discussion_comment_id; end

  sig { params(value: Integer).void }
  def discussion_comment_id=(value); end

  sig { returns(Integer) }
  def discussion_id; end

  sig { params(value: Integer).void }
  def discussion_id=(value); end

  sig { returns(Integer) }
  def discussion_repository_id; end

  sig { params(value: Integer).void }
  def discussion_repository_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def event_context; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def event_context=(value); end

  sig { returns(T::Boolean) }
  def org_level; end

  sig { params(value: T::Boolean).void }
  def org_level=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def target; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def target=(value); end
end

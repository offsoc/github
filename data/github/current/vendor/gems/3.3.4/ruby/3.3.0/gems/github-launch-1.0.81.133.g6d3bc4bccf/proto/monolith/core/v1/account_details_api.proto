syntax = "proto3";

package actions.core.v1;

option go_package = "core/v1";
option ruby_package = "MonolithTwirp::Actions::Core::V1";

import "core/v1/identity.proto";
import "core/v1/plan.proto";

service AccountDetailsAPI {
  // GetAccountDetails retrieves account details for a given organization or enterprise
  rpc GetAccountDetails(GetAccountDetailsRequest) returns (GetAccountDetailsResponse);

  // GetAccountDetailsForRepository retrieves account details of the owner for a given repository
  rpc GetAccountDetailsForRepository(GetAccountDetailsForRepositoryRequest) returns (GetAccountDetailsForRepositoryResponse);
}

message GetAccountDetailsRequest {
  // entity_id is the global ID
  Identity entity_id = 1;
}

message GetAccountDetailsResponse {
  // Indicates account type (Organization or Business)
  string account_type = 1;

  // Indicates if the account is billing owner
  // - Business is billing owner
  // - Organization without business is billing owner
  // - Organization with business is not billing owner
  bool is_billing_owner = 2;

  // Trust tier of account
  int64 trust_tier = 3;

  // Customer ID for the account
  int64 customer_id = 4;
}

message GetAccountDetailsForRepositoryRequest {
  // repository_id is the global ID of the repository
  Identity repository_id = 1;
}

message GetAccountDetailsForRepositoryResponse {
  // Indicates account type (Organization or User)
  RepositoryOwner account_type = 1;

  // Plan name of the repository's owner
  PlanName plan_name = 2;
}

enum RepositoryOwner {
  // REPOSITORY_OWNER_INVALID is present because because enums require a zero value. This
  // should never be returned.
  REPOSITORY_OWNER_INVALID = 0;
  REPOSITORY_OWNER_ORGANIZATION = 1;
  REPOSITORY_OWNER_USER = 2;
}

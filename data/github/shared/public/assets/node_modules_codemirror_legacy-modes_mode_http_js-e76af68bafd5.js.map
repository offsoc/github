{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_http_js-xxxxxxxxxxxx.js","mappings":"gJAAA,SAASA,EAAcC,CAAM,CAAEC,CAAK,EAGlC,OAFAD,EAAOE,SAAS,GAChBD,EAAME,GAAG,CAAGC,EACL,OACT,CAEA,SAASC,EAAML,CAAM,CAAEC,CAAK,SAC1B,EAAWK,KAAK,CAAC,kBACfL,EAAME,GAAG,CAAGI,EACL,WACEP,EAAOM,KAAK,CAAC,YAAc,QAAQE,IAAI,CAACR,EAAOS,IAAI,KAC5DR,EAAME,GAAG,CAAGO,EACL,WAEAX,EAAcC,EAAQC,EAEjC,CAEA,SAASM,EAAmBP,CAAM,CAAEC,CAAK,EACvC,IAAIU,EAAOX,EAAOM,KAAK,CAAC,QACxB,GAAI,CAACK,EAAM,OAAOZ,EAAcC,EAAQC,EAExCA,CAAAA,EAAME,GAAG,CAAGS,EACZ,IAAIC,EAASC,OAAOH,CAAI,CAAC,EAAE,SAC3B,GAAc,KAAOE,EAAS,IACrB,OAEA,OAEX,CAEA,SAASD,EAAmBZ,CAAM,CAAEC,CAAK,EAGvC,OAFAD,EAAOE,SAAS,GAChBD,EAAME,GAAG,CAAGC,EACL,IACT,CAEA,SAASM,EAAYV,CAAM,CAAEC,CAAK,EAGhC,OAFAD,EAAOe,QAAQ,CAAC,MAChBd,EAAME,GAAG,CAAGa,EACL,gBACT,CAEA,SAASA,EAAgBhB,CAAM,CAAEC,CAAK,SACpC,EAAWK,KAAK,CAAC,mBACfL,EAAME,GAAG,CAAGC,EACL,WAEAL,EAAcC,EAAQC,EAEjC,CAEA,SAASG,EAAOJ,CAAM,QACpB,CAAIA,EAAOiB,GAAG,IAAOjB,EAAOkB,GAAG,CAAC,UAQ9BlB,EAAOE,SAAS,GACT,UARP,EAAWI,KAAK,CAAC,SACR,QAEPN,EAAOE,SAAS,GACT,QAMb,CAEA,SAASiB,EAAKnB,CAAM,EAElB,OADAA,EAAOE,SAAS,GACT,IACT,C,2BAEO,IAAMkB,EAAO,CAClBC,KAAM,OACNC,MAAO,SAAStB,CAAM,CAAEC,CAAK,EAC3B,IAAIE,EAAMF,EAAME,GAAG,QACnB,GAAWC,GAAUD,GAAOgB,GAAQnB,EAAOuB,QAAQ,GAAW,KACvDpB,EAAIH,EAAQC,EACrB,EAEAuB,UAAW,SAASvB,CAAK,EACvBA,EAAME,GAAG,CAAGgB,CACd,EAEAM,WAAY,WACV,MAAO,CAACtB,IAAKE,CAAK,CACpB,CACF,C","sources":["node_modules/@codemirror/legacy-modes/mode/http.js"],"sourcesContent":["function failFirstLine(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return \"error\";\n}\n\nfunction start(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n    state.cur = responseStatusCode;\n    return \"keyword\";\n  } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n    state.cur = requestPath;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction responseStatusCode(stream, state) {\n  var code = stream.match(/^\\d+/);\n  if (!code) return failFirstLine(stream, state);\n\n  state.cur = responseStatusText;\n  var status = Number(code[0]);\n  if (status >= 100 && status < 400) {\n    return \"atom\";\n  } else {\n    return \"error\";\n  }\n}\n\nfunction responseStatusText(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return null;\n}\n\nfunction requestPath(stream, state) {\n  stream.eatWhile(/\\S/);\n  state.cur = requestProtocol;\n  return \"string.special\";\n}\n\nfunction requestProtocol(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n    state.cur = header;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction header(stream) {\n  if (stream.sol() && !stream.eat(/[ \\t]/)) {\n    if (stream.match(/^.*?:/)) {\n      return \"atom\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else {\n    stream.skipToEnd();\n    return \"string\";\n  }\n}\n\nfunction body(stream) {\n  stream.skipToEnd();\n  return null;\n}\n\nexport const http = {\n  name: \"http\",\n  token: function(stream, state) {\n    var cur = state.cur;\n    if (cur != header && cur != body && stream.eatSpace()) return null;\n    return cur(stream, state);\n  },\n\n  blankLine: function(state) {\n    state.cur = body;\n  },\n\n  startState: function() {\n    return {cur: start};\n  }\n};\n"],"names":["failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","http","name","token","eatSpace","blankLine","startState"],"sourceRoot":""}
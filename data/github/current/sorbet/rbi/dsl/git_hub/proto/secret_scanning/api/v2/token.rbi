# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Proto::SecretScanning::Api::V2::Token`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Proto::SecretScanning::Api::V2::Token`.

class GitHub::Proto::SecretScanning::Api::V2::Token
  sig do
    params(
      created_at: T.nilable(Google::Protobuf::Timestamp),
      encrypted_token: T.nilable(String),
      external_remediation_doc_url: T.nilable(String),
      first_location: T.nilable(GitHub::Proto::SecretScanning::Api::V2::TokenLocation),
      id: T.nilable(Integer),
      is_multipart: T.nilable(T::Boolean),
      label: T.nilable(String),
      llm_detected: T.nilable(T::Boolean),
      low_confidence: T.nilable(T::Boolean),
      multi_repo: T.nilable(T::Boolean),
      number: T.nilable(Integer),
      publicly_leaked: T.nilable(T::Boolean),
      push_protection_bypassed: T.nilable(T::Boolean),
      push_protection_bypassed_at: T.nilable(Google::Protobuf::Timestamp),
      push_protection_bypassed_by_user_id: T.nilable(Integer),
      repository_id: T.nilable(Integer),
      resolution: T.nilable(T.any(Symbol, Integer)),
      resolution_comment: T.nilable(String),
      resolved_at: T.nilable(Google::Protobuf::Timestamp),
      resolver_id: T.nilable(Integer),
      revoked_at: T.nilable(Google::Protobuf::Timestamp),
      revoked_by: T.nilable(Integer),
      scan_scope: T.nilable(T.any(Symbol, Integer)),
      slug: T.nilable(String),
      token_groups: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Api::V2::TokenGroup], T::Array[GitHub::Proto::SecretScanning::Api::V2::TokenGroup])),
      token_of_type: T.nilable(T.any(Symbol, Integer)),
      token_signature: T.nilable(String),
      token_type: T.nilable(String),
      token_type_provider: T.nilable(String),
      token_url: T.nilable(String),
      updated_at: T.nilable(Google::Protobuf::Timestamp),
      validation_details: T.nilable(GitHub::Proto::SecretScanning::Api::V2::TokenValidationDetails),
      validation_support: T.nilable(GitHub::Proto::SecretScanning::Api::V2::TokenValidationSupport),
      validity: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(created_at: nil, encrypted_token: nil, external_remediation_doc_url: nil, first_location: nil, id: nil, is_multipart: nil, label: nil, llm_detected: nil, low_confidence: nil, multi_repo: nil, number: nil, publicly_leaked: nil, push_protection_bypassed: nil, push_protection_bypassed_at: nil, push_protection_bypassed_by_user_id: nil, repository_id: nil, resolution: nil, resolution_comment: nil, resolved_at: nil, resolver_id: nil, revoked_at: nil, revoked_by: nil, scan_scope: nil, slug: nil, token_groups: T.unsafe(nil), token_of_type: nil, token_signature: nil, token_type: nil, token_type_provider: nil, token_url: nil, updated_at: nil, validation_details: nil, validation_support: nil, validity: nil); end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_encrypted_token; end

  sig { void }
  def clear_external_remediation_doc_url; end

  sig { void }
  def clear_first_location; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_is_multipart; end

  sig { void }
  def clear_label; end

  sig { void }
  def clear_llm_detected; end

  sig { void }
  def clear_low_confidence; end

  sig { void }
  def clear_multi_repo; end

  sig { void }
  def clear_number; end

  sig { void }
  def clear_publicly_leaked; end

  sig { void }
  def clear_push_protection_bypassed; end

  sig { void }
  def clear_push_protection_bypassed_at; end

  sig { void }
  def clear_push_protection_bypassed_by_user_id; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_resolution; end

  sig { void }
  def clear_resolution_comment; end

  sig { void }
  def clear_resolved_at; end

  sig { void }
  def clear_resolver_id; end

  sig { void }
  def clear_revoked_at; end

  sig { void }
  def clear_revoked_by; end

  sig { void }
  def clear_scan_scope; end

  sig { void }
  def clear_slug; end

  sig { void }
  def clear_token_groups; end

  sig { void }
  def clear_token_of_type; end

  sig { void }
  def clear_token_signature; end

  sig { void }
  def clear_token_type; end

  sig { void }
  def clear_token_type_provider; end

  sig { void }
  def clear_token_url; end

  sig { void }
  def clear_updated_at; end

  sig { void }
  def clear_validation_details; end

  sig { void }
  def clear_validation_support; end

  sig { void }
  def clear_validity; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(String) }
  def encrypted_token; end

  sig { params(value: String).void }
  def encrypted_token=(value); end

  sig { returns(String) }
  def external_remediation_doc_url; end

  sig { params(value: String).void }
  def external_remediation_doc_url=(value); end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Api::V2::TokenLocation)) }
  def first_location; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Api::V2::TokenLocation)).void }
  def first_location=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def is_multipart; end

  sig { params(value: T::Boolean).void }
  def is_multipart=(value); end

  sig { returns(String) }
  def label; end

  sig { params(value: String).void }
  def label=(value); end

  sig { returns(T::Boolean) }
  def llm_detected; end

  sig { params(value: T::Boolean).void }
  def llm_detected=(value); end

  sig { returns(T::Boolean) }
  def low_confidence; end

  sig { params(value: T::Boolean).void }
  def low_confidence=(value); end

  sig { returns(T::Boolean) }
  def multi_repo; end

  sig { params(value: T::Boolean).void }
  def multi_repo=(value); end

  sig { returns(Integer) }
  def number; end

  sig { params(value: Integer).void }
  def number=(value); end

  sig { returns(T::Boolean) }
  def publicly_leaked; end

  sig { params(value: T::Boolean).void }
  def publicly_leaked=(value); end

  sig { returns(T::Boolean) }
  def push_protection_bypassed; end

  sig { params(value: T::Boolean).void }
  def push_protection_bypassed=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def push_protection_bypassed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def push_protection_bypassed_at=(value); end

  sig { returns(Integer) }
  def push_protection_bypassed_by_user_id; end

  sig { params(value: Integer).void }
  def push_protection_bypassed_by_user_id=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def resolution; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def resolution=(value); end

  sig { returns(String) }
  def resolution_comment; end

  sig { params(value: String).void }
  def resolution_comment=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def resolved_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def resolved_at=(value); end

  sig { returns(Integer) }
  def resolver_id; end

  sig { params(value: Integer).void }
  def resolver_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def revoked_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def revoked_at=(value); end

  sig { returns(Integer) }
  def revoked_by; end

  sig { params(value: Integer).void }
  def revoked_by=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def scan_scope; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def scan_scope=(value); end

  sig { returns(String) }
  def slug; end

  sig { params(value: String).void }
  def slug=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Api::V2::TokenGroup]) }
  def token_groups; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Api::V2::TokenGroup]).void }
  def token_groups=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def token_of_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def token_of_type=(value); end

  sig { returns(String) }
  def token_signature; end

  sig { params(value: String).void }
  def token_signature=(value); end

  sig { returns(String) }
  def token_type; end

  sig { params(value: String).void }
  def token_type=(value); end

  sig { returns(String) }
  def token_type_provider; end

  sig { params(value: String).void }
  def token_type_provider=(value); end

  sig { returns(String) }
  def token_url; end

  sig { params(value: String).void }
  def token_url=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Api::V2::TokenValidationDetails)) }
  def validation_details; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Api::V2::TokenValidationDetails)).void }
  def validation_details=(value); end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Api::V2::TokenValidationSupport)) }
  def validation_support; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Api::V2::TokenValidationSupport)).void }
  def validation_support=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def validity; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def validity=(value); end
end

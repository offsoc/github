{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_python_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/python.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\nvar commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                      \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                      \"for\", \"from\", \"global\", \"if\", \"import\",\n                      \"lambda\", \"pass\", \"raise\", \"return\",\n                      \"try\", \"while\", \"with\", \"yield\", \"in\"];\nvar commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                      \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                      \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                      \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                      \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                      \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                      \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                      \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                      \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                      \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                      \"Ellipsis\", \"__debug__\"];\n\nfunction top(state) {\n  return state.scopes[state.scopes.length - 1];\n}\n\nexport function mkPython(parserConf) {\n  var ERRORCLASS = \"error\";\n\n  var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n  //               (Backwards-compatibility with old, cumbersome config system)\n  var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                   parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n  for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n  var hangingIndent = parserConf.hangingIndent;\n\n  var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n  if (parserConf.extra_keywords != undefined)\n    myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n  if (parserConf.extra_builtins != undefined)\n    myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n  var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n  if (py3) {\n    // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n    var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n    myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n    myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n    var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  } else {\n    var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n    myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n    myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                    \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                    \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n    var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  }\n  var keywords = wordRegexp(myKeywords);\n  var builtins = wordRegexp(myBuiltins);\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    var sol = stream.sol() && state.lastToken != \"\\\\\"\n    if (sol) state.indent = stream.indentation()\n    // Handle scope changes\n    if (sol && top(state).type == \"py\") {\n      var scopeOffset = top(state).offset;\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset)\n          pushPyScope(stream, state);\n        else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n          state.errorToken = true;\n        return null;\n      } else {\n        var style = tokenBaseInner(stream, state);\n        if (scopeOffset > 0 && dedent(stream, state))\n          style += \" \" + ERRORCLASS;\n        return style;\n      }\n    }\n    return tokenBaseInner(stream, state);\n  }\n\n  function tokenBaseInner(stream, state, inFormat) {\n    if (stream.eatSpace()) return null;\n\n    // Handle Comments\n    if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.]/, false)) {\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n      if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n      if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n      if (floatLiteral) {\n        // Float literals may be \"imaginary\"\n        stream.eat(/J/i);\n        return \"number\";\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n      // Binary\n      if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n      // Octal\n      if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n      // Decimal\n      if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n        // Decimal literals may be \"imaginary\"\n        stream.eat(/J/i);\n        // TODO - Can you have imaginary longs?\n        intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n      if (intLiteral) {\n        // Integer literals may be \"long\"\n        stream.eat(/L/i);\n        return \"number\";\n      }\n    }\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n      if (!isFmtString) {\n        state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      } else {\n        state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      }\n    }\n\n    for (var i = 0; i < operators.length; i++)\n      if (stream.match(operators[i])) return \"operator\"\n\n    if (stream.match(delimiters)) return \"punctuation\";\n\n    if (state.lastToken == \".\" && stream.match(identifiers))\n      return \"property\";\n\n    if (stream.match(keywords) || stream.match(wordOperators))\n      return \"keyword\";\n\n    if (stream.match(builtins))\n      return \"builtin\";\n\n    if (stream.match(/^(self|cls)\\b/))\n      return \"self\";\n\n    if (stream.match(identifiers)) {\n      if (state.lastToken == \"def\" || state.lastToken == \"class\")\n        return \"def\";\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return inFormat ? null :ERRORCLASS;\n  }\n\n  function formatStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n      delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenNestedExpr(depth) {\n      return function(stream, state) {\n        var inner = tokenBaseInner(stream, state, true)\n        if (inner == \"punctuation\") {\n          if (stream.current() == \"{\") {\n            state.tokenize = tokenNestedExpr(depth + 1)\n          } else if (stream.current() == \"}\") {\n            if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n            else state.tokenize = tokenString\n          }\n        }\n        return inner\n      }\n    }\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol())\n            return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else if (stream.match('{{')) {\n          // ignore {{ in f-str\n          return OUTCLASS;\n        } else if (stream.match('{', false)) {\n          // switch to nested mode\n          state.tokenize = tokenNestedExpr(0)\n          if (stream.current()) return OUTCLASS;\n          else return state.tokenize(stream, state)\n        } else if (stream.match('}}')) {\n          return OUTCLASS;\n        } else if (stream.match('}')) {\n          // single } in f-string is an error\n          return ERRORCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors)\n          return ERRORCLASS;\n        else\n          state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function tokenStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n      delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol())\n            return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors)\n          return ERRORCLASS;\n        else\n          state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function pushPyScope(stream, state) {\n    while (top(state).type != \"py\") state.scopes.pop()\n    state.scopes.push({offset: top(state).offset + stream.indentUnit,\n                       type: \"py\",\n                       align: null})\n  }\n\n  function pushBracketScope(stream, state, type) {\n    var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1\n    state.scopes.push({offset: state.indent + (hangingIndent || stream.indentUnit),\n                       type: type,\n                       align: align})\n  }\n\n  function dedent(stream, state) {\n    var indented = stream.indentation();\n    while (state.scopes.length > 1 && top(state).offset > indented) {\n      if (top(state).type != \"py\") return true;\n      state.scopes.pop();\n    }\n    return top(state).offset != indented;\n  }\n\n  function tokenLexer(stream, state) {\n    if (stream.sol()) {\n      state.beginningOfLine = true;\n      state.dedent = false;\n    }\n\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle decorators\n    if (state.beginningOfLine && current == \"@\")\n      return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n    if (/\\S/.test(current)) state.beginningOfLine = false;\n\n    if ((style == \"variable\" || style == \"builtin\")\n        && state.lastToken == \"meta\")\n      style = \"meta\";\n\n    // Handle scope changes.\n    if (current == \"pass\" || current == \"return\")\n      state.dedent = true;\n\n    if (current == \"lambda\") state.lambda = true;\n    if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false))\n      pushPyScope(stream, state);\n\n    if (current.length == 1 && !/string|comment/.test(style)) {\n      var delimiter_index = \"[({\".indexOf(current);\n      if (delimiter_index != -1)\n        pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n      delimiter_index = \"])}\".indexOf(current);\n      if (delimiter_index != -1) {\n        if (top(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit)\n        else return ERRORCLASS;\n      }\n    }\n    if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1)\n      state.scopes.pop();\n\n    return style;\n  }\n\n  return {\n    name: \"python\",\n\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: [{offset: 0, type: \"py\", align: null}],\n        indent: 0,\n        lastToken: null,\n        lambda: false,\n        dedent: 0\n      };\n    },\n\n    token: function(stream, state) {\n      var addErr = state.errorToken;\n      if (addErr) state.errorToken = false;\n      var style = tokenLexer(stream, state);\n\n      if (style && style != \"comment\")\n        state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n      if (style == \"punctuation\") style = null;\n\n      if (stream.eol() && state.lambda)\n        state.lambda = false;\n      return addErr ? ERRORCLASS : style;\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize != tokenBase)\n        return state.tokenize.isString ? null : 0;\n\n      var scope = top(state)\n      var closing = scope.type == textAfter.charAt(0) ||\n          scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter)\n      if (scope.align != null)\n        return scope.align - (closing ? 1 : 0)\n      else\n        return scope.offset - (closing ? hangingIndent || cx.unit : 0)\n    },\n\n    languageData: {\n      autocomplete: commonKeywords.concat(commonBuiltins).concat([\"exec\", \"print\"]),\n      indentOnInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      commentTokens: {line: \"#\"},\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']}\n    }\n  };\n};\n\nvar words = function(str) { return str.split(\" \"); };\n\nexport const python = mkPython({})\n\nexport const cython = mkPython({\n  extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                        \"extern gil include nogil property public \"+\n                        \"readonly struct union DEF IF ELIF ELSE\")\n})\n"],"names":["wordRegexp","words","join","wordOperators","commonKeywords","commonBuiltins","top","state","scopes","length","mkPython","parserConf","ERRORCLASS","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","myKeywords","myBuiltins","undefined","extra_keywords","concat","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","inFormat","match","floatLiteral","eat","intLiteral","current","toLowerCase","indexOf","tokenize","formatStringFactory","delimiter","tokenOuter","charAt","substr","singleline","OUTCLASS","tokenString","eol","eatWhile","next","tokenNestedExpr","depth","inner","singleLineStringErrors","isString","tokenStringFactory","pop","push","indentUnit","align","indented","name","startState","lambda","token","addErr","tokenLexer","beginningOfLine","test","delimiter_index","pushBracketScope","column","slice","textAfter","cx","scope","closing","unit","languageData","autocomplete","indentOnInput","commentTokens","line","closeBrackets","brackets","python","cython","str","split"],"sourceRoot":""}
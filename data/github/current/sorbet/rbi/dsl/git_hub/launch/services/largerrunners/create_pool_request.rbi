# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Services::Largerrunners::CreatePoolRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Services::Largerrunners::CreatePoolRequest`.

class GitHub::Launch::Services::Largerrunners::CreatePoolRequest
  sig do
    params(
      image: T.nilable(GitHub::Launch::Services::Largerrunners::ImageKey),
      image_sas_uri: T.nilable(String),
      is_public_ip_enabled: T.nilable(T::Boolean),
      labels: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      machine_spec_id: T.nilable(String),
      maximum_runners: T.nilable(Integer),
      name: T.nilable(String),
      owner_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      persistent_os_disk: T.nilable(T::Boolean),
      platform: T.nilable(String),
      runner_group_id: T.nilable(Integer)
    ).void
  end
  def initialize(image: nil, image_sas_uri: nil, is_public_ip_enabled: nil, labels: T.unsafe(nil), machine_spec_id: nil, maximum_runners: nil, name: nil, owner_id: nil, persistent_os_disk: nil, platform: nil, runner_group_id: nil); end

  sig { void }
  def clear_image; end

  sig { void }
  def clear_image_sas_uri; end

  sig { void }
  def clear_is_public_ip_enabled; end

  sig { void }
  def clear_labels; end

  sig { void }
  def clear_machine_spec_id; end

  sig { void }
  def clear_maximum_runners; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_persistent_os_disk; end

  sig { void }
  def clear_platform; end

  sig { void }
  def clear_runner_group_id; end

  sig { returns(T.nilable(GitHub::Launch::Services::Largerrunners::ImageKey)) }
  def image; end

  sig { params(value: T.nilable(GitHub::Launch::Services::Largerrunners::ImageKey)).void }
  def image=(value); end

  sig { returns(String) }
  def image_sas_uri; end

  sig { params(value: String).void }
  def image_sas_uri=(value); end

  sig { returns(T::Boolean) }
  def is_public_ip_enabled; end

  sig { params(value: T::Boolean).void }
  def is_public_ip_enabled=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def labels; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def labels=(value); end

  sig { returns(String) }
  def machine_spec_id; end

  sig { params(value: String).void }
  def machine_spec_id=(value); end

  sig { returns(Integer) }
  def maximum_runners; end

  sig { params(value: Integer).void }
  def maximum_runners=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def owner_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def owner_id=(value); end

  sig { returns(T::Boolean) }
  def persistent_os_disk; end

  sig { params(value: T::Boolean).void }
  def persistent_os_disk=(value); end

  sig { returns(String) }
  def platform; end

  sig { params(value: String).void }
  def platform=(value); end

  sig { returns(Integer) }
  def runner_group_id; end

  sig { params(value: Integer).void }
  def runner_group_id=(value); end
end

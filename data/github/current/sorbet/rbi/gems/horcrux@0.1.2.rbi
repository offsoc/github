# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `horcrux` gem.
# Please instead update this file by running `bin/tapioca gem horcrux`.

# See the README.md
#
# source://horcrux//lib/horcrux.rb#2
module Horcrux; end

# source://horcrux//lib/horcrux/entity.rb#6
module Horcrux::Entity
  mixes_in_class_methods ::Horcrux::Entity::ClassMethods

  # Public
  #
  # source://horcrux//lib/horcrux/entity.rb#125
  def initialize(hash = T.unsafe(nil)); end

  # Public
  #
  # source://horcrux//lib/horcrux/entity.rb#161
  def ==(other); end

  # Public
  #
  # source://horcrux//lib/horcrux/entity.rb#150
  def each_attr(writable_only = T.unsafe(nil)); end

  # Public: Converts the valid attributes into a Hash of Symbol key and Object
  # value.
  #
  # Returns a Hash.
  #
  # source://horcrux//lib/horcrux/entity.rb#170
  def to_hash(writable_only = T.unsafe(nil)); end

  # Public: Updates multiple attributes.
  #
  # hash - A Hash containing valid attributes.
  #
  # Returns this Entity.
  #
  # source://horcrux//lib/horcrux/entity.rb#134
  def update_attrs(hash, all = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://horcrux//lib/horcrux/entity.rb#7
    def included(base); end
  end
end

# source://horcrux//lib/horcrux/entity.rb#17
module Horcrux::Entity::ClassMethods
  # Public
  #
  # source://horcrux//lib/horcrux/entity.rb#19
  def attr(type, *keys); end

  # source://horcrux//lib/horcrux/entity.rb#74
  def build_array_attr(keys, is_readonly); end

  # source://horcrux//lib/horcrux/entity.rb#113
  def build_attrs(keys, is_readonly); end

  # source://horcrux//lib/horcrux/entity.rb#54
  def build_bool_attr(keys, is_readonly); end

  # source://horcrux//lib/horcrux/entity.rb#96
  def build_class_attr(klass, keys, is_readonly); end

  # source://horcrux//lib/horcrux/entity.rb#78
  def build_hash_attr(keys, is_readonly); end

  # source://horcrux//lib/horcrux/entity.rb#43
  def build_string_attr(keys, is_readonly); end

  # source://horcrux//lib/horcrux/entity.rb#82
  def build_time_attr(keys, is_readonly); end

  # Public
  #
  # source://horcrux//lib/horcrux/entity.rb#39
  def from(hash = T.unsafe(nil)); end

  # Public
  #
  # source://horcrux//lib/horcrux/entity.rb#29
  def readonly(type, *keys); end
end

# source://horcrux//lib/horcrux.rb#125
class Horcrux::Memory
  include ::Horcrux::Methods

  # Sample Horcrux adapter that stores unmodified values in a ruby Hash.
  #
  # client - Optional Hash.
  #
  # @return [Memory] a new instance of Memory
  #
  # source://horcrux//lib/horcrux.rb#131
  def initialize(client = T.unsafe(nil), serializer = T.unsafe(nil)); end

  # source://horcrux//lib/horcrux.rb#8
  def client; end

  # Public: Deletes the value for the given key.
  #
  # key - The String key.
  #
  # Returns true if a value was deleted, or false.
  #
  # source://horcrux//lib/horcrux.rb#170
  def delete(key); end

  # Public: Gets the value for the given key.
  #
  # key - The String key.
  #
  # Returns the Object value.
  #
  # source://horcrux//lib/horcrux.rb#150
  def get(key); end

  # Public: Uses Hash#key? to check the existence of a key.
  #
  # key - String key.
  #
  # Returns true if the key exists, or false.
  #
  # @return [Boolean]
  #
  # source://horcrux//lib/horcrux.rb#141
  def key?(key); end

  # source://horcrux//lib/horcrux.rb#8
  def serializer; end

  # Public: Sets the value for the given key.
  #
  # key   - The String key.
  # value - The Object value.
  #
  # Returns true if the operation succeeded, or false.
  #
  # source://horcrux//lib/horcrux.rb#160
  def set(key, value); end
end

# Implements the optional methods of a Horcrux adapter.
#
# source://horcrux//lib/horcrux.rb#6
module Horcrux::Methods
  # Public: Sets up an adapter with the client.
  #
  # client     - This is the object that the adapter uses to store and
  #              retrieve data.
  # serializer - An object that responds to #pack and #unpack for
  #              serializing and deserializing values.  Default: a
  #              StringSerializer.
  #
  # source://horcrux//lib/horcrux.rb#18
  def initialize(client, serializer = T.unsafe(nil)); end

  # Public: Deletes the given keys.
  #
  #     @adapter.delete_all 'a', 'b'
  #     # => [true, false]
  #
  # keys - One or more String keys.
  #
  # Returns an Array of Booleans specifying whether the deletes were
  # successful.
  #
  # source://horcrux//lib/horcrux.rb#61
  def delete_all(*keys); end

  # Public: Either gets the value of the key, or sets it if it doesn't exist.
  #
  #     # if 'some-cache' is not set, call #slow_method
  #     @adapter.fetch('some-cache') { slow_method }
  #
  # key - A String key.
  #
  # Yields if the key does not exist.  The key is set to the return value of
  # the block.
  # Returns the Object value.
  #
  # source://horcrux//lib/horcrux.rb#84
  def fetch(key); end

  # Public: Gets all the values for the given keys.
  #
  #     @adapter.get_all('a', 'b')
  #     # => ['1', '2']
  #
  # keys - One or more String keys.
  #
  # Returns an Array of unpacked values in the order of their associated
  # keys.
  #
  # source://horcrux//lib/horcrux.rb#32
  def get_all(*keys); end

  # Public: Determines if the key is set.
  #
  # key - A String key.
  #
  # Returns true if the key is set, or false.
  #
  # @return [Boolean]
  #
  # source://horcrux//lib/horcrux.rb#70
  def key?(key); end

  # Public: Transforms the given application key to the internal key that
  # the storage system uses.
  #
  # key - The String key.
  #
  # Returns the String internal key for the adapter.
  #
  # source://horcrux//lib/horcrux.rb#98
  def key_for(key); end

  # Public: Sets the given values.
  #
  #     @adapter.set_all 'a' => '1', 'b' => '2'
  #     # => ['a', 'b']
  #
  # values - A Hash of String keys and Object values.
  #
  # Returns an Array of the successfully written String keys.
  #
  # source://horcrux//lib/horcrux.rb#44
  def set_all(values); end

  class << self
    # @private
    #
    # source://horcrux//lib/horcrux.rb#7
    def included(klass); end
  end
end

# Passes values through Horcrux untouched.
#
# source://horcrux//lib/horcrux.rb#104
module Horcrux::NullSerializer
  class << self
    # source://horcrux//lib/horcrux.rb#105
    def dump(value); end

    # source://horcrux//lib/horcrux.rb#109
    def load(str); end
  end
end

# Ensures that Horcrux values are turned to strings.
#
# source://horcrux//lib/horcrux.rb#115
module Horcrux::StringSerializer
  class << self
    # source://horcrux//lib/horcrux.rb#116
    def dump(value); end

    # source://horcrux//lib/horcrux.rb#120
    def load(str); end
  end
end

# source://horcrux//lib/horcrux.rb#3
Horcrux::VERSION = T.let(T.unsafe(nil), String)

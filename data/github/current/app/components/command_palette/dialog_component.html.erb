<%# erblint:counter DeprecatedComponentsCounter 1 %>
<details
  class="details-reset details-overlay details-overlay-dark js-command-palette-dialog"
  id="command-palette-pjax-container"
  data-turbo-replace
>
  <summary aria-label="Command palette trigger" tabindex="-1"></summary>
  <details-dialog class="command-palette-details-dialog d-flex flex-column flex-justify-center height-fit" aria-label="Command palette"><%# erblint:disable A11yDetailsDialogMigration %>
    <command-palette
      class="command-palette color-bg-default rounded-3 border color-shadow-small"
      return-to=<%= request.fullpath %>
      user-id="<%= current_user&.id %>"
      activation-hotkey="<%= activation_hotkey %>"
      command-mode-hotkey="<%= command_mode_hotkey %>"
      <% if current_user&.commands_provider_enabled? %>
        commands-path="<%= command_palette_command_path %>"
      <% end %>
      <% if page_breadcrumb.is_a?(MemexProject) %>
        memex-hotkey-enabled
      <% end %>
      <% if default_open? %>
        default-open
      <% end %>
      data-action="
        command-palette-input-ready:command-palette#inputReady
        command-palette-page-stack-updated:command-palette#updateInputScope
        itemsUpdated:command-palette#itemsUpdated
        keydown:command-palette#onKeydown
        loadingStateChanged:command-palette#loadingStateChanged
        selectedItemChanged:command-palette#selectedItemChanged
        pageFetchError:command-palette#pageFetchError
      ">

      <% CommandPalette::Modes.all_except_default.each do |mode| %>
        <command-palette-mode
          data-char="<%= mode.character %>"
          <% if mode.scope_types.any? %>
            data-scope-types="<%= mode.scope_types.to_json %>"
          <% end %>
          <% unless mode.placeholder.blank? %>
            data-placeholder="<%= mode.placeholder %>"
          <% end %>
        ></command-palette-mode>
      <% end %>
      <command-palette-mode
        class="js-command-palette-default-mode"
        data-char="<%= CommandPalette::Modes.default.character %>"
        data-placeholder="<%= CommandPalette::Modes.default.placeholder %>"
      ></command-palette-mode>

      <command-palette-input placeholder="Search or jump to..."
        <% if default_open? %>
         input-value="<%= command_mode %><%= command_query %>"
        <% end %>

        data-action="
          command-palette-input:command-palette#onInput
          command-palette-select:command-palette#onSelect
          command-palette-descope:command-palette#onDescope
          command-palette-cleared:command-palette#onInputClear
        "
      >
        <div class="js-search-icon d-flex flex-items-center mr-2" style="height: 26px">
          <%= primer_octicon(:search, color: :muted) %>
        </div>
        <div class="js-spinner d-flex flex-items-center mr-2 color-fg-muted" hidden>
          <svg aria-label="Loading" class="anim-rotate" viewBox="0 0 16 16" fill="none" width="16" height="16">
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              stroke-opacity="0.25"
              stroke-width="2"
              vector-effect="non-scaling-stroke"
            ></circle>
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              vector-effect="non-scaling-stroke"
            ></path>
          </svg>
        </div>
        <command-palette-scope <% if !search_scoped? %>hidden<%end%>>
          <div data-target="command-palette-scope.placeholder" hidden class="color-fg-subtle">/&nbsp;&nbsp;<span class="text-semibold color-fg-default">...</span>&nbsp;&nbsp;/&nbsp;&nbsp;</div>
          <% if search_scoped? %>
            <% scope_tokens.each do |token| %>
              <command-palette-token
                data-text="<%= token.text %>"
                data-id="<%= token.id %>"
                data-type="<%= token.type %>"
                data-value="<%= token.value %>"
                data-targets="command-palette-scope.tokens"
                class="color-fg-default text-semibold"
                style="white-space:nowrap;line-height:20px;"
                ><%= token.text.truncate(20) %><span class="color-fg-subtle text-normal">&nbsp;&nbsp;/&nbsp;&nbsp;</span></command-palette-token>
            <% end %>
          <% end %>
        </command-palette-scope>
        <div class="command-palette-input-group flex-1 form-control border-0 box-shadow-none" style="z-index: 0">
          <div class="command-palette-typeahead position-absolute d-flex flex-items-center Truncate">
            <span class="typeahead-segment input-mirror" data-target="command-palette-input.mirror"></span>
            <span class="Truncate-text" data-target="command-palette-input.typeaheadText"></span>
            <span class="typeahead-segment" data-target="command-palette-input.typeaheadPlaceholder"></span>
          </div>
          <input
            class="js-overlay-input typeahead-input d-none"
            disabled
            tabindex="-1"
            aria-label="Hidden input for typeahead"
          >
          <input
            type="text"
            autocomplete="off"
            autocorrect="off"
            autocapitalize="off"
            spellcheck="false"
            class="js-input typeahead-input form-control border-0 box-shadow-none input-block width-full no-focus-indicator"
            aria-label="Command palette input"
            aria-haspopup="listbox"
            aria-expanded="false"
            aria-autocomplete="list"
            aria-controls="command-palette-page-stack"
            role="combobox"
            data-action="
              input:command-palette-input#onInput
              keydown:command-palette-input#onKeydown
            "
          >
        </div>
        <%= render(Primer::IconButton.new(
          icon: "x-circle-fill",
          "aria-label": "Clear Command Palette",
          "aria-keyshortcuts": clear_keyboard_shortcut,
          "data-action": "click:command-palette-input#onClear keypress:command-palette-input#onClear",
          "data-target": "command-palette-input.clearButton",
          id: "command-palette-clear-button",
          tooltip_direction: :w,
          classes: ["command-palette-input-clear-button"],
          hidden: true
        )) %>
      </command-palette-input>

      <command-palette-page-stack
        data-default-scope-id="<%= default_scope_id %>"
        data-default-scope-type="<%= default_scope_type %>"
        data-action="command-palette-page-octicons-cached:command-palette-page-stack#cacheOcticons"
      >
        <% CommandPalette::Tips.all.each do |tip| %>
          <command-palette-tip
            class="<%= tip_classes %>"
            <% if tip.scope_types.any? %>
              data-scope-types="<%= tip.scope_types.to_json %>"
            <% end %>
            data-mode="<%= tip.mode %>"
            data-value="">
            <div class="d-flex flex-items-start flex-justify-between">
              <div>
                <span class="text-bold">Tip:</span>
                <% if tip.prefix %>
                  Type <kbd class="hx_kbd"><%= tip.prefix %></kbd> <%= tip.title %>
                <% else %>
                  <%= tip.title %>
                <% end %>
              </div>
              <div class="ml-2 flex-shrink-0">
                Type <kbd class="hx_kbd">?</kbd> for help and tips
              </div>
            </div>
          </command-palette-tip>
        <% end %>
        <command-palette-tip class="mx-3 my-2 flash flash-error d-flex flex-items-center" data-scope-types="*" data-on-error>
          <div>
            <%= render(Primer::Beta::Octicon.new(:alert)) %>
          </div>
          <div class="px-2">
            Weâ€™ve encountered an error and some results aren't available at this time. Type a new search or try again later.
          </div>
        </command-palette-tip>
        <command-palette-tip class="h4 color-fg-default pl-3 pb-2 pt-3" data-on-empty data-scope-types="*" data-match-mode="[^?]|^$">
          No results matched your search
        </command-palette-tip>

        <div hidden>
          <%# put "metadata" elements in this hidden div, such as octicons and group info %>

          <%# these octicons are used by local providers and are cached by the PageStack element %>
          <% local_provider_octicons.each do |octicon| %>
            <div data-targets="command-palette-page-stack.localOcticons" data-octicon-id="<%= octicon.id %>">
              <%= octicon.icon %>
            </div>
          <% end %>

          <%# groups are added to the document and are cloned into pages as needed %>
          <% groups.each_with_index do |group, index| %>
            <command-palette-item-group
              data-group-id="<%= group.id %>"
              data-group-title="<%= group.display_title %>"
              data-group-hint="<%= group.hint %>"
              data-group-limits="<%= group.limits.to_json %>"
              data-default-priority="<%= index %>"
            >
            </command-palette-item-group>
          <% end %>

          <%# default pages are cloned as needed when reseting page stack %>
          <% scope_tokens.each do |token| %>
            <command-palette-page
              data-page-title="<%= token.text %>"
              data-scope-id="<%= token.id %>"
              data-scope-type="<%= token.type %>"
              data-targets="command-palette-page-stack.defaultPages"
              hidden
            >
            </command-palette-page>
          <% end %>
        </div>

        <command-palette-page data-is-root>
          <%# the root page doesn't get popped from the page stack and is always present %>
        </command-palette-page>
        <% scope_tokens.each do |token| %>
          <command-palette-page
            data-page-title="<%= token.text %>"
            data-scope-id="<%= token.id %>"
            data-scope-type="<%= token.type %>"
          >
          </command-palette-page>
        <% end %>
      </command-palette-page-stack>

      <%# These providers should be defined as <client-defined-providers> in JS %>
      <server-defined-provider data-type="search-links" data-targets="command-palette.serverDefinedProviderElements"></server-defined-provider>
      <server-defined-provider data-type="help" data-targets="command-palette.serverDefinedProviderElements">
        <% CommandPalette::HelpItems.all.each do |item| %>
          <command-palette-help
            data-group="<%= item.group %>"
            <% if item.prefix %>
              data-prefix="<%= item.prefix %>"
            <% end %>
            <% if item.scope_types.any? %>
              data-scope-types="<%= item.scope_types.to_json %>"
            <% end %>
          >
            <span data-target="command-palette-help.titleElement"><%= item.title %></span>
            <% if item.hint %>
              <span data-target="command-palette-help.hintElement">
                <kbd class="hx_kbd"><%= item.hint %></kbd>
              </span>
            <% end %>
          </command-palette-help>
        <% end %>
      </server-defined-provider>

      <% providers.each do |provider| %>
        <server-defined-provider
          data-type="<%= provider.type %>"
          data-fetch-debounce="<%= provider.debounce %>"
          <% if provider.remote_src? %>
            data-src="<%= provider_path(provider.factory_identifier) %>"
          <% end %>
          data-supported-modes="<%= provider.supported_modes.to_json %>"
          <% if provider.supported_scope_types.any? %>
            data-supported-scope-types="<%= provider.supported_scope_types.to_json %>"
          <% end %>
          <% if provider.has_commands? %>
            data-supports-commands
          <% end %>
          <%= test_selector(provider.factory_identifier) %>
          data-targets="command-palette.serverDefinedProviderElements"
          ></server-defined-provider>
      <% end %>
    </command-palette>
  </details-dialog>
</details>

<div class="position-fixed bottom-0 left-0 ml-5 mb-5 js-command-palette-toasts" style="z-index: 1000">
  <div hidden class="Toast Toast--loading">
    <span class="Toast-icon">
      <svg class="Toast--spinner" viewBox="0 0 32 32" width="18" height="18" aria-hidden="true">
        <path
          fill="#959da5"
          d="M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4"
        />
        <path fill="#ffffff" d="M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z"></path>
      </svg>
    </span>
    <span class="Toast-content"></span>
  </div>

  <div hidden class="anim-fade-in fast Toast Toast--error">
    <span class="Toast-icon">
      <%= render(Primer::Beta::Octicon.new(icon: "stop")) %>
    </span>
    <span class="Toast-content"></span>
  </div>

  <div hidden class="anim-fade-in fast Toast Toast--warning">
    <span class="Toast-icon">
      <%= render(Primer::Beta::Octicon.new(icon: "alert")) %>
    </span>
    <span class="Toast-content"></span>
  </div>


  <div hidden class="anim-fade-in fast Toast Toast--success">
    <span class="Toast-icon">
      <%= render(Primer::Beta::Octicon.new(icon: "check")) %>
    </span>
    <span class="Toast-content"></span>
  </div>

  <div hidden class="anim-fade-in fast Toast">
    <span class="Toast-icon">
      <%= render(Primer::Beta::Octicon.new(icon: "info")) %>
    </span>
    <span class="Toast-content"></span>
  </div>
</div>

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::GitSrcMigrator::Migrations::V1::StartMigrationRequest`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::GitSrcMigrator::Migrations::V1::StartMigrationRequest`.

class MonolithTwirp::GitSrcMigrator::Migrations::V1::StartMigrationRequest
  sig do
    params(
      git_archive_url: T.nilable(String),
      repository_id: T.nilable(Integer),
      source_access_token: T.nilable(String),
      source_type: T.nilable(T.any(Symbol, Integer)),
      source_url: T.nilable(String),
      source_username: T.nilable(String),
      tags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      target_owner_id: T.nilable(Integer),
      target_ssh_url: T.nilable(String),
      target_wiki_ssh_url: T.nilable(String),
      user_id: T.nilable(Integer)
    ).void
  end
  def initialize(git_archive_url: nil, repository_id: nil, source_access_token: nil, source_type: nil, source_url: nil, source_username: nil, tags: T.unsafe(nil), target_owner_id: nil, target_ssh_url: nil, target_wiki_ssh_url: nil, user_id: nil); end

  sig { void }
  def clear_git_archive_url; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_source_access_token; end

  sig { void }
  def clear_source_type; end

  sig { void }
  def clear_source_url; end

  sig { void }
  def clear_source_username; end

  sig { void }
  def clear_tags; end

  sig { void }
  def clear_target_owner_id; end

  sig { void }
  def clear_target_ssh_url; end

  sig { void }
  def clear_target_wiki_ssh_url; end

  sig { void }
  def clear_user_id; end

  sig { returns(String) }
  def git_archive_url; end

  sig { params(value: String).void }
  def git_archive_url=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(String) }
  def source_access_token; end

  sig { params(value: String).void }
  def source_access_token=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def source_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def source_type=(value); end

  sig { returns(String) }
  def source_url; end

  sig { params(value: String).void }
  def source_url=(value); end

  sig { returns(String) }
  def source_username; end

  sig { params(value: String).void }
  def source_username=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def tags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def tags=(value); end

  sig { returns(Integer) }
  def target_owner_id; end

  sig { params(value: Integer).void }
  def target_owner_id=(value); end

  sig { returns(String) }
  def target_ssh_url; end

  sig { params(value: String).void }
  def target_ssh_url=(value); end

  sig { returns(String) }
  def target_wiki_ssh_url; end

  sig { params(value: String).void }
  def target_wiki_ssh_url=(value); end

  sig { returns(Integer) }
  def user_id; end

  sig { params(value: Integer).void }
  def user_id=(value); end
end

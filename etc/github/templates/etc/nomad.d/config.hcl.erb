name = "<%= cluster_node_name %>"
datacenter = "<%= nomad_datacenter %>"
region = "<%= nomad_datacenter %>"
enable_syslog = "true"
log_level = "<%= nomad_debug_level %>"
disable_update_check = "true"
data_dir = "/data/user/nomad/"

advertise {
  http = "<%= node_ip %>"
  rpc  = "<%= node_ip %>"
  serf = "<%= node_ip %>"
}

limits {
  http_max_conns_per_client = 1000
  rpc_max_conns_per_client = 1000
}

server {
  enabled = "<%= nomad_server_enabled %>"
  bootstrap_expect = "<%= nomad_server_bootstrap_expect %>"
  encrypt = "<%= secret_value("nomad", "gossip") %>"
  default_scheduler_config {
    scheduler_algorithm = "spread"
  }
  raft_protocol = 3
}

client {
  enabled = "true"
  network_interface = "lo"
  network_speed = 1000
  max_kill_timeout = "10m"

  # The default value for gc_max_allocs is 50
  # For allocations that exceed this value, and do not use alternative logging,
  # such as journald or a file, the alloc logs are immediately gc'd.
  # This can be problematic for dispatch jobs that may rely on fetching alloc
  # logs (using "get_alloc_logs")
  gc_max_allocs = 150

  reserved {
    # Nomad dynamically allocates ports in a range from 20000 to 32000
    # Let's negate the upper part of that range thus limiting it further down to 20000-20499
    reserved_ports = "20500-32000"
  }

  meta {
    cluster_roles = "<%= nomad_cluster_roles %>"
    offline = "<%= cluster_value_true?(cluster_node_name, "offline") %>"
    node_uuid = "<%= node_uuid %>"
    node_name = "<%= cluster_node_name %>"
    node_is_replica = "<%= cluster_replica? %>"
    node_resqued_jobs_enabled = "<%= resqued_jobs_enabled %>"
    node_resqued_maintenance_enabled = "<%= resqued_maintenance_enabled %>"
    cluster_datacenter = "<%= cluster_datacenter %>"
    memory_mb = "<%= memory_mb %>"
    memory_budget_mssql_mb = "<%= memory_budget_mssql_mb %>"
    memcache_memory_mb = "<%= memcache_memory_mb %>"
    github_unicorns = "<%= github_unicorns %>"
    github_ernicorns = "<%= github_ernicorns %>"
    gitauth_unicorns = "<%= gitauth_unicorns %>"
    resqued_low_workers = "<%= resqued_low_workers %>"
    resqued_high_workers = "<%= resqued_high_workers %>"
    resqued_maint_workers = "<%= resqued_maint_workers %>"
    disable_mssql_replica = "false"
    disable_mysql_replica = "false"
    es_heap_size = "<%= es_heap_size %>"
    es_worker_count = "<%= es_worker_count %>"
    redis_master = "<%= redis_master %>"
    is_nomad_delegate = "<%= ghes_nomad_delegate? %>"
    is_git_server = "<%= nomad_cluster_roles.include?("git-server")%>"
    is_pages_server = "<%= nomad_cluster_roles.include?("pages-server")%>"
    is_web_server = "<%= nomad_cluster_roles.include?("web-server")%>"
    is_job_server = "<%= nomad_cluster_roles.include?("job-server")%>"
    is_storage_server = "<%= nomad_cluster_roles.include?("storage-server")%>"
    <%= all_app_config %>
  }
}

acl {
  enabled = false
}

consul {
  token = "<%= secret_value("consul", "acl-master-token") %>"
}

plugin "docker" {
  config {
    allow_privileged = true
    allow_caps = ["audit_write", "chown", "dac_override", "fowner", "fsetid", "kill", "mknod",
 "net_bind_service", "setfcap", "setgid", "setpcap", "setuid", "sys_chroot", "sys_nice"]
    gc {
      image = false
    }

    volumes {
      enabled = true
    }
  }
}

# Raw exec is intentionally disabled.
# Please ensure all new jobs run inside a container.
plugin "raw_exec"{
  config {
    enabled = false
  }
}

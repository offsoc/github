# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::Entities::RepositoryDependencyUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::Entities::RepositoryDependencyUpdate`.

class Hydro::Schemas::Github::V1::Entities::RepositoryDependencyUpdate
  sig do
    params(
      created_at: T.nilable(Google::Protobuf::Timestamp),
      dry_run: T.nilable(T::Boolean),
      error_body: T.nilable(String),
      error_title: T.nilable(String),
      error_type: T.nilable(String),
      id_value: T.nilable(Integer),
      manifest_path: T.nilable(String),
      package_name: T.nilable(String),
      reason: T.nilable(T.any(Symbol, Integer)),
      state: T.nilable(T.any(Symbol, Integer)),
      trigger: T.nilable(T.any(Symbol, Integer)),
      updated_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(created_at: nil, dry_run: nil, error_body: nil, error_title: nil, error_type: nil, id_value: nil, manifest_path: nil, package_name: nil, reason: nil, state: nil, trigger: nil, updated_at: nil); end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_dry_run; end

  sig { void }
  def clear_error_body; end

  sig { void }
  def clear_error_title; end

  sig { void }
  def clear_error_type; end

  sig { void }
  def clear_id_value; end

  sig { void }
  def clear_manifest_path; end

  sig { void }
  def clear_package_name; end

  sig { void }
  def clear_reason; end

  sig { void }
  def clear_state; end

  sig { void }
  def clear_trigger; end

  sig { void }
  def clear_updated_at; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def dry_run; end

  sig { params(value: T::Boolean).void }
  def dry_run=(value); end

  sig { returns(String) }
  def error_body; end

  sig { params(value: String).void }
  def error_body=(value); end

  sig { returns(String) }
  def error_title; end

  sig { params(value: String).void }
  def error_title=(value); end

  sig { returns(String) }
  def error_type; end

  sig { params(value: String).void }
  def error_type=(value); end

  sig { returns(Integer) }
  def id_value; end

  sig { params(value: Integer).void }
  def id_value=(value); end

  sig { returns(String) }
  def manifest_path; end

  sig { params(value: String).void }
  def manifest_path=(value); end

  sig { returns(String) }
  def package_name; end

  sig { params(value: String).void }
  def package_name=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def reason; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def reason=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def state=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def trigger; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def trigger=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end
end

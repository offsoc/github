<% package_settings_channel = GitHub::WebSocket::Channels.packages_migration("package_settings") %>
<div id="packages_migration_org_list" class="js-socket-channel js-updatable-content"
        data-channel="<%= live_update_view_channel(package_settings_channel) %>"
        data-url="<%= reload_package_settings_enterprise_path %>">

   <% if namespaces_list.count == 0 && error_namespaces_list.count == 0 && complete_namespaces_list.count == 0 && !query.nil? %>
      <%= render Primer::Beta::Blankslate.new do |c| %>
         <% c.with_visual_icon(icon: "search") %>

         <% c.with_heading(tag: :h2) do %>
         No organizations found
         <% end %>

         <% c.with_description do %>
         <%= "There arenâ€™t any organizations in this enterprise matching '#{query}'." %>
         <% end %>
      <% end %>
   <% end %>

   <% if namespace_count > 0 && !Registry::PackagesMigration.exists? %>
      <% paginated_namespaces = namespaces_list.paginate(page: params[:page], per_page: Businesses::PackagesMigrationController::NAMESPACE_LIMIT_COUNT,  total_entries: namespaces_list.count, offset: (params[:page].to_i+1)-1) %>
      <div class="mt-3">
         <%= render partial: "businesses/packages_settings/orgs_list_start_migration", locals: {
            namespaces: paginated_namespaces, unmigrated_pkg_count: unmigrated_package_count, namespace_count: namespace_count
         } %>
      </div>
      <div class="paginate-container">
         <div class="pagination">
            <%= will_paginate paginated_namespaces %>
         </div>
      </div>
   <% end %>

   <% migration_run_in_progress = Registry::PackagesMigration.find_by_state(:inProgress) %>
   <% if migration_run_in_progress.nil? && Registry::PackagesMigration.exists? %>
      <% paginated_error_namespaces = error_namespaces_list.paginate(page: 1, per_page: session[:show_more_pagination]*Businesses::PackagesMigrationController::ERROR_NAMESPACE_LIMIT_COUNT, total_entries: error_namespaces_list.count, offset: 0)%>
      <% if failed_count > 0 %>
         <div class="mt-3 Box .rounded-top-2">
         <%= render "businesses/packages_settings/section_header", namespaces: paginated_error_namespaces, failed_pkg_count: failed_count, error_namespace_count: error_namespace_count, section_type: "failed" %>
         <%= render partial: "businesses/packages_settings/orgs_list_error_migration", locals: {
            namespaces: paginated_error_namespaces, failed_pkg_count: failed_count, section_header: "failed", error_index: error_index, error_namespace_count: error_namespace_count
         } %>
         </div>
      <% end %>
      <% if completed_count > 0 %>
         <% paginated_complete_namespaces = complete_namespaces_list.paginate(page: params[:page], per_page: Businesses::PackagesMigrationController::NAMESPACE_LIMIT_COUNT,  total_entries: complete_namespaces_list.count, offset: (params[:page].to_i+1)-1)%>
         <div class="mt-3">
            <%= render partial: "businesses/packages_settings/orgs_list_complete_migration", locals: {
               namespaces: paginated_complete_namespaces, completed_pkg_count: completed_count, complete_namespace_count: complete_namespace_count
            } %>
         </div>
         <div class="paginate-container">
            <div class="pagination">
               <%= will_paginate paginated_complete_namespaces %>
            </div>
         </div>
      <%end%>
   <% elsif !migration_run_in_progress.nil? %>
      <% if Registry::PackagesMigration.count == 1  %>
         <% all_namespaces = (namespaces_list + error_namespaces_list + complete_namespaces_list).uniq.reverse %>
         <% all_namespaces = all_namespaces.paginate(page: params[:page], per_page: Businesses::PackagesMigrationController::NAMESPACE_LIMIT_COUNT,  total_entries: all_namespaces.count, offset: (params[:page].to_i+1)-1) %>
         <div class="mt-3">
            <%= render partial: "businesses/packages_settings/orgs_list_inprogress_migration", locals: {
               all_namespaces: all_namespaces, namespaces: namespaces_list, unmigrated_pkg_count: unmigrated_package_count, error_namespaces: error_namespaces_list, complete_namespaces: complete_namespaces_list, namespace_count: namespace_count
            } %>
         </div>
         <div class="paginate-container">
            <div class="pagination">
               <%= will_paginate all_namespaces %>
            </div>
         </div>
      <% else %>
         <% if failed_count > 0 %>
            <div class="mt-3 Box .rounded-top-2">
               <% paginated_error_namespaces = error_namespaces_list.paginate(page: 1, per_page: session[:show_more_pagination]*Businesses::PackagesMigrationController::ERROR_NAMESPACE_LIMIT_COUNT, total_entries: error_namespaces_list.count, offset: 0)%>
               <%= render "businesses/packages_settings/section_header", namespaces: paginated_error_namespaces, failed_pkg_count: failed_count, error_namespace_count: error_namespace_count, section_type: "inprogress" %>
               <%= render partial: "businesses/packages_settings/orgs_list_error_migration", locals: {
                  namespaces: paginated_error_namespaces, failed_pkg_count: failed_count, section_header: "inprogress", error_index: error_index, error_namespace_count: error_namespace_count
            } %>
            </div>
         <% end %>
         <% if completed_count > 0 %>
            <% paginated_complete_namespaces = complete_namespaces_list.paginate(page: params[:page], per_page: Businesses::PackagesMigrationController::NAMESPACE_LIMIT_COUNT,  total_entries: complete_namespaces_list.count, offset: (params[:page].to_i+1)-1)%>
            <div class="mt-3">
               <%= render partial: "businesses/packages_settings/orgs_list_complete_migration", locals: {
                  namespaces: paginated_complete_namespaces, completed_pkg_count: completed_count, complete_namespace_count: complete_namespace_count
               } %>
            </div>
            <div class="paginate-container">
               <div class="pagination">
                  <%= will_paginate paginated_complete_namespaces %>
               </div>
            </div>
         <% end %>
      <% end %>
   <% end %>
</div>

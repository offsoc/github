# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `vexi_management` gem.
# Please instead update this file by running `bin/tapioca gem vexi_management`.

# Public: The VexiManagement module for feature management code.
#
# source://vexi_management//lib/vexi_management/adapter.rb#6
module VexiManagement; end

# Public: The Vexi Management Adapter interface.
#
# @abstract Subclasses must implement the `abstract` methods below.
#
# source://vexi_management//lib/vexi_management/adapter.rb#8
module VexiManagement::Adapter
  interface!

  # @abstract
  #
  # source://vexi_management//lib/vexi_management/adapter.rb#29
  sig { abstract.params(name: T.any(::String, ::Symbol), actor: T.any(::String, ::Vexi::Actor)).void }
  def add_actor(name, actor); end

  # @abstract
  #
  # source://vexi_management//lib/vexi_management/adapter.rb#41
  sig { abstract.params(name: T.any(::String, ::Symbol), custom_gate: ::String).void }
  def add_custom_gate(name, custom_gate); end

  # @abstract
  #
  # source://vexi_management//lib/vexi_management/adapter.rb#14
  sig { abstract.params(feature_flag: ::Vexi::FeatureFlag).void }
  def create(feature_flag); end

  # @abstract
  #
  # source://vexi_management//lib/vexi_management/adapter.rb#20
  sig { abstract.params(name: T.any(::String, ::Symbol)).void }
  def delete(name); end

  # @abstract
  #
  # source://vexi_management//lib/vexi_management/adapter.rb#26
  sig { abstract.params(name: T.any(::String, ::Symbol)).void }
  def disable(name); end

  # @abstract
  #
  # source://vexi_management//lib/vexi_management/adapter.rb#23
  sig { abstract.params(name: T.any(::String, ::Symbol)).void }
  def enable(name); end

  # @abstract
  #
  # source://vexi_management//lib/vexi_management/adapter.rb#38
  sig { abstract.params(name: T.any(::String, ::Symbol), percentage: ::Float).void }
  def enable_percentage_of_actors(name, percentage); end

  # @abstract
  #
  # source://vexi_management//lib/vexi_management/adapter.rb#35
  sig { abstract.params(name: T.any(::String, ::Symbol), percentage: ::Float).void }
  def enable_percentage_of_calls(name, percentage); end

  # @abstract
  #
  # source://vexi_management//lib/vexi_management/adapter.rb#17
  sig { abstract.params(name: T.any(::String, ::Symbol)).returns(T.nilable(::Vexi::FeatureFlag)) }
  def get(name); end

  # @abstract
  #
  # source://vexi_management//lib/vexi_management/adapter.rb#32
  sig { abstract.params(name: T.any(::String, ::Symbol), actor: T.any(::String, ::Vexi::Actor)).void }
  def remove_actor(name, actor); end

  # @abstract
  #
  # source://vexi_management//lib/vexi_management/adapter.rb#44
  sig { abstract.params(name: T.any(::String, ::Symbol), custom_gate: ::String).void }
  def remove_custom_gate(name, custom_gate); end
end

# source://vexi_management//lib/vexi_management/version.rb#4
VexiManagement::VERSION = T.let(T.unsafe(nil), String)

# Public: The VexiManagement class for performing feature flag management operations.
#
# source://vexi_management//lib/vexi_management.rb#15
class VexiManagement::VexiManagement
  # source://vexi_management//lib/vexi_management.rb#19
  sig { params(adapter: ::VexiManagement::Adapter).void }
  def initialize(adapter); end

  # source://vexi_management//lib/vexi_management.rb#49
  sig { params(name: T.any(::String, ::Symbol), actor: T.any(::String, ::Vexi::Actor)).void }
  def add_actor(name, actor); end

  # source://vexi_management//lib/vexi_management.rb#69
  sig { params(name: T.any(::String, ::Symbol), custom_gate: ::String).void }
  def add_custom_gate(name, custom_gate); end

  # source://vexi_management//lib/vexi_management.rb#24
  sig { params(feature_flag: ::Vexi::FeatureFlag).void }
  def create(feature_flag); end

  # source://vexi_management//lib/vexi_management.rb#34
  sig { params(name: T.any(::String, ::Symbol)).void }
  def delete(name); end

  # source://vexi_management//lib/vexi_management.rb#44
  sig { params(name: T.any(::String, ::Symbol)).void }
  def disable(name); end

  # source://vexi_management//lib/vexi_management.rb#39
  sig { params(name: T.any(::String, ::Symbol)).void }
  def enable(name); end

  # source://vexi_management//lib/vexi_management.rb#64
  sig { params(name: T.any(::String, ::Symbol), percentage: ::Float).void }
  def enable_percentage_of_actors(name, percentage); end

  # source://vexi_management//lib/vexi_management.rb#59
  sig { params(name: T.any(::String, ::Symbol), percentage: ::Float).void }
  def enable_percentage_of_calls(name, percentage); end

  # source://vexi_management//lib/vexi_management.rb#29
  sig { params(name: T.any(::String, ::Symbol)).returns(T.nilable(::Vexi::FeatureFlag)) }
  def get(name); end

  # source://vexi_management//lib/vexi_management.rb#54
  sig { params(name: T.any(::String, ::Symbol), actor: T.any(::String, ::Vexi::Actor)).void }
  def remove_actor(name, actor); end

  # source://vexi_management//lib/vexi_management.rb#74
  sig { params(name: T.any(::String, ::Symbol), custom_gate: ::String).void }
  def remove_custom_gate(name, custom_gate); end
end

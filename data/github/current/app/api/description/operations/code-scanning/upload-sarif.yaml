---
summary: Upload an analysis as SARIF data
description: |-
  Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see "[Troubleshooting SARIF uploads](${externalDocsUrl}/code-security/code-scanning/troubleshooting-sarif)."

  There are two places where you can upload code scanning results.
   - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
   - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."

  You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:

  ```
  gzip -c analysis-data.sarif | base64 -w0
  ```

  SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
  To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see "[SARIF results exceed one or more limits](${externalDocsUrl}/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit)."


  | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
  |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
  | Runs per file                    |         20         |                                                                                  |
  | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
  | Rules per run                    |       25,000       |                                                                                  |
  | Tool extensions per run          |        100         |                                                                                  |
  | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
  | Location per result	             |       1,000        | Only 100 locations will be included.                                             |
  | Tags per rule	                   |         20         | Only 10 tags will be included.                                                   |


  The `202 Accepted` response includes an `id` value.
  You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
  For more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."

  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.

  This endpoint is limited to 1,000 requests per hour for each user or app installation calling it.
operationId: code-scanning/upload-sarif
tags:
  - code-scanning
externalDocs:
  description: API method documentation
  url: '${externalDocsUrl}/rest/code-scanning/code-scanning#upload-an-analysis-as-sarif-data'
parameters:
  - $ref: '../../components/parameters/owner.yaml'
  - $ref: '../../components/parameters/repo.yaml'
requestBody:
  required: true
  content:
    application/json:
      schema:
        type: object
        properties:
          commit_sha:
            $ref: '../../components/schemas/code-scanning-analysis-commit-sha.yaml'
          ref:
            $ref: '../../components/schemas/code-scanning-ref-full.yaml'
          sarif:
            $ref: '../../components/schemas/code-scanning-analysis-sarif-file.yaml'
          checkout_uri:
            description: |-
              The base directory used in the analysis, as it appears in the SARIF file.
              This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
            example: file:///github/workspace/
            type: string
            format: uri
          started_at:
            description: 'The time that the analysis run began. This is a timestamp
              in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.'
            format: date-time
            type: string
          tool_name:
            description: The name of the tool used to generate the code scanning analysis.
              If this parameter is not used, the tool name defaults to "API". If the
              uploaded SARIF contains a tool GUID, this will be available for filtering
              using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
            type: string
          validate:
            description: |-
              Whether the SARIF file will be validated according to the code scanning specifications.
              This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.
            type: boolean
        additionalProperties: false
        required:
          - commit_sha
          - ref
          - sarif
      examples:
        default:
          value:
            commit_sha: 4b6472266afd7b471e86085a6659e8c7f2b119da
            ref: refs/heads/master
            sarif: 'H4sICMLGdF4AA2V4YW1wbGUuc2FyaWYAvVjdbts2FL7PUxDCijaA/CM7iRNfLkPXYgHSNstumlzQ0pHFVCI1korjFgH2ONtr7Ul2KFmy/mOn6QIkjsjDw0/nfN85NL8dEGL9pNwAImqRObECrWM1H40kXQ2XTAfJIlEgXcE1cD10RTQSVDE10K4aKSqZP1AxuKOIKg1ydJU60jSfSh8Hk6EzHA/vlOCWbfa7B6kYPpj90rlsWCZcmbHP5Bs+4oAWIjQD2SMOeJLh2vIQDnIaQerqXHjw8YIgxohybxAyDsS4cAPKsp03K4RcUs6+Up2D+JXpd8mibKIQN9fM/aMCdbyBujGSSQgVxJtx5qX2d2qUcIweQhEuDQf3GBO6CKHkogx/N3MVCKl/AeVKFuf4y5ubsMGDTj1ep+5I7sgmLIpxtU38hLtmMRGSuCFVyip5eKzs5ydh+LztVL6f2m6oih1BkYiuyQIIJWodxVpERPj4sEiWBNNH8EWT0DMG8EAjzKVHXCrB4FkPu/F64NMk1OeC+2yZSNoBOoR7CC0EzYWGbm+xFDFIzbI011+cLjfZtyJkmMZfumAh02uL3NpV2y+MZ6RAjxibyKrNxxJcVjANSb4eBGwZ1M0KsuyR2poLr5rMl8vaDSeVn6eTWEO2j2xIEcmhwlTKNOi4GMOI8gfuZYkvJ7b4v5Tiumyz7RnHeodFzpS8ASIZCH/AYdWi2z3sG8JtFxJ6fF9yR9CdifBr9Pd6d5V2+zbJKjjCFGGmsHuYFy2ytJq9tUxcLSRSQecppOGKrpUxYfxefMEFK+wOGa4hudQByBVT0L+EKtyACxnRsABhEx1QjVDs1KNI9MbpnhqfE45B6FJvu3hRu5VRU9MhZLmK7fqkKyQSTHNoyMqUFMqXCV3CwAeqEwmVokraK8IuBaGvHjQ0gMYrKjnjyw7uk9uD8tgmsBbFMPnU1bV2ZhkJNkuolUiWys3UPWzs5aaIUz9TBe8zMb+6+nT+6fLy91dlE3xzeDDT4zYszb0bW6NjJd0Rvn2EnLvWLFSdKPpBzInzfRgu8ETyMcH8nIfMnJCeC2PyfTA+UKngcnGH7Hw2hGkVQs5YlIRCtdWZYQ4/73es2JlxkfViOEIhoWJq5Oo6UBBfiKIqFBWhiE3jJGbFwVoxBHTRSuIS67sMeplei24X20shLjG+8gqbKC/bESiNMC+wd5q5id0yeS7CJEqXzmrTWNq3k05l84P6f4/bEmXFJjI0fIt1BGQssUnUDkBYeVhE5TqPnMH3jqogDcP0zKcTgLPTMSzOjhbjuVOmW23l1fYNStulfo6sXlFsGLhbDy5RECPRYGCTgOj2bd4nUQEivEd0H7KKYxqnEhFohuur3a3UPskbH/+Yg0+M5P2MHRJu3ziHh3Z2NCrWt3XF1rWTw8Ne/pfbWYXnDSE0SNZQQt1i18q7te2vOhu7ehWuvVyeu0wbLZi24mhoo6aOOTltzG/lgdVvVoXQq5V+pewkFIzL8fjEcadT55jOjpzFzHuOTtDNrMkJPMVQDd7F09RID72O/UPZ0tmctqZ7kWX6EmSZnDpP8GU67SXM8XE3YSrxbKsx6UReZ4y6n/FVZfJjs9Z7stma75W5yQtkzjk5eSJxk1lv4o7+j8TlhaJ2lsKWZO6lruDPBLib3x5ZN/KGWzZ+pn///evv7OOf4iIBv3oY9L/l1wiJ9p0Tc+F1zZnOE9NxXWEus6IQhr5pMfoqxi8WPsuu0azsns4UC6WzNzHIzbeEx4P/AJ3SefgcFAAA'
responses:
  '202':
    description: Response
    content:
      application/json:
        schema:
          $ref: '../../components/schemas/code-scanning-sarifs-receipt.yaml'
        examples:
          default:
            $ref: '../../components/examples/code-scanning-sarif-upload.yaml'
  '400':
    description: Bad Request if the sarif field is invalid
  '403':
    $ref: '../../components/responses/code_scanning_forbidden_write.yaml'
  '404':
    $ref: '../../components/responses/not_found.yaml'
  '413':
    description: Payload Too Large if the sarif field is too large
  '503':
    $ref: '../../components/responses/service_unavailable.yaml'
x-githubEnterpriseOverlays:
  '3.0':
    # Old versions still have a SARIF limit of 1000 results instead of 5000.
    # The docs are have moved to the new "product" location at "https://docs.github.com/code-security".
    description: |-
      Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.

      There are two places where you can upload code scanning results.
       - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
       - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."

      You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:

      ```
      gzip -c analysis-data.sarif | base64 -w0
      ```

      SARIF upload supports a maximum of 1000 results per analysis run. Any results over this limit are ignored. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.

      The `202 Accepted` response includes an `id` value.
      You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
      For more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."
  '3.1 || 3.2 || 3.3':
    description: |-
      Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.

      There are two places where you can upload code scanning results.
       - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
       - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."

      You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
      ```
      gzip -c analysis-data.sarif | base64 -w0
      ```

      <br>
      SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
      To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries.

      | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
      |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
      | Runs per file                    |         15         |                                                                                  |
      | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
      | Rules per run                    |       25,000       |                                                                                  |
      | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
      | Location per result	             |       1,000        | Only 100 locations will be included.                                             |

      The `202 Accepted` response includes an `id` value.
      You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
      For more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."
  '3.4 || 3.5 || 3.6 || 3.7':
    description: |-
      Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.

      There are two places where you can upload code scanning results.
      - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
      - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."

      You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:

      ```
      gzip -c analysis-data.sarif | base64 -w0
      ```
      <br>
      SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
      To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries.


      | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
      |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
      | Runs per file                    |         15         |                                                                                  |
      | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
      | Rules per run                    |       25,000       |                                                                                  |
      | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
      | Location per result	             |       1,000        | Only 100 locations will be included.                                             |

      The `202 Accepted` response includes an `id` value.
      You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
      For more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."

  '3.8':
    description: |-
      Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.

      There are two places where you can upload code scanning results.
      - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
      - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."

      You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:

      ```
      gzip -c analysis-data.sarif | base64 -w0
      ```
      <br>
      SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
      To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries.


      | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
      |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
      | Runs per file                    |         15         |                                                                                  |
      | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
      | Rules per run                    |       25,000       |                                                                                  |
      | Tool extensions per run          |        100         |                                                                                  |
      | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
      | Location per result	             |       1,000        | Only 100 locations will be included.                                             |
      | Tags per rule	                   |         20         | Only 10 tags will be included.                                                   |

      The `202 Accepted` response includes an `id` value.
      You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
      For more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."
  '*':
    requestBody:
      content:
        application/json:
          schema:
            properties:
              validate:
x-github:
  enabledForGitHubApps: true
  githubCloudOnly: false

  category: code-scanning
  subcategory: code-scanning
x-github-releases:
  - ghec
  - ghes:
      - '>= 2.22'
  - api.github.com
x-github-internal:
  path: '/repos/{owner}/{repo}/code-scanning/sarifs'
  http-method: post
  service-tier: 2
  owner: '@github/code-scanning-experiences'
  published: true

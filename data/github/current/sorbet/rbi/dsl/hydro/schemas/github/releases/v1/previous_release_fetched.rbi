# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Releases::V1::PreviousReleaseFetched`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Releases::V1::PreviousReleaseFetched`.

class Hydro::Schemas::Github::Releases::V1::PreviousReleaseFetched
  sig do
    params(
      previous_release: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release),
      release: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      tags_fetched_limit_reached: T.nilable(T::Boolean),
      time_elapsed: T.nilable(Float)
    ).void
  end
  def initialize(previous_release: nil, release: nil, repository: nil, tags_fetched_limit_reached: nil, time_elapsed: nil); end

  sig { void }
  def clear_previous_release; end

  sig { void }
  def clear_release; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_tags_fetched_limit_reached; end

  sig { void }
  def clear_time_elapsed; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)) }
  def previous_release; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)).void }
  def previous_release=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)) }
  def release; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)).void }
  def release=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T::Boolean) }
  def tags_fetched_limit_reached; end

  sig { params(value: T::Boolean).void }
  def tags_fetched_limit_reached=(value); end

  sig { returns(Float) }
  def time_elapsed; end

  sig { params(value: Float).void }
  def time_elapsed=(value); end
end

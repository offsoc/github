# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Blackbird::Query::V1::SearchResult`.
# Please instead update this file by running `bin/tapioca dsl Blackbird::Query::V1::SearchResult`.

class Blackbird::Query::V1::SearchResult
  sig do
    params(
      blob_sha: T.nilable(String),
      commit_sha: T.nilable(String),
      debug_info: T.nilable(Blackbird::Query::V1::DebugInfo),
      duplicate_locations: T.nilable(T.any(Google::Protobuf::RepeatedField[Blackbird::Query::V1::DuplicateLocationInfo], T::Array[Blackbird::Query::V1::DuplicateLocationInfo])),
      enclosing_symbols: T.nilable(T.any(Google::Protobuf::RepeatedField[Blackbird::Query::V1::Symbol], T::Array[Blackbird::Query::V1::Symbol])),
      file_size: T.nilable(Integer),
      has_language_id: T.nilable(T::Boolean),
      language_color: T.nilable(String),
      language_id: T.nilable(Integer),
      language_name: T.nilable(String),
      line_number: T.nilable(Integer),
      match_count: T.nilable(Integer),
      matched_symbols: T.nilable(T.any(Google::Protobuf::RepeatedField[Blackbird::Query::V1::Symbol], T::Array[Blackbird::Query::V1::Symbol])),
      owner_id: T.nilable(Integer),
      path: T.nilable(String),
      ref_name: T.nilable(String),
      repo_id: T.nilable(Integer),
      repo_nwo: T.nilable(String),
      snippets: T.nilable(T.any(Google::Protobuf::RepeatedField[Blackbird::Query::V1::RenderedSnippet], T::Array[Blackbird::Query::V1::RenderedSnippet])),
      term_matches: T.nilable(T.any(Google::Protobuf::RepeatedField[Blackbird::Query::V1::Range], T::Array[Blackbird::Query::V1::Range]))
    ).void
  end
  def initialize(blob_sha: nil, commit_sha: nil, debug_info: nil, duplicate_locations: T.unsafe(nil), enclosing_symbols: T.unsafe(nil), file_size: nil, has_language_id: nil, language_color: nil, language_id: nil, language_name: nil, line_number: nil, match_count: nil, matched_symbols: T.unsafe(nil), owner_id: nil, path: nil, ref_name: nil, repo_id: nil, repo_nwo: nil, snippets: T.unsafe(nil), term_matches: T.unsafe(nil)); end

  sig { returns(String) }
  def blob_sha; end

  sig { params(value: String).void }
  def blob_sha=(value); end

  sig { void }
  def clear_blob_sha; end

  sig { void }
  def clear_commit_sha; end

  sig { void }
  def clear_debug_info; end

  sig { void }
  def clear_duplicate_locations; end

  sig { void }
  def clear_enclosing_symbols; end

  sig { void }
  def clear_file_size; end

  sig { void }
  def clear_has_language_id; end

  sig { void }
  def clear_language_color; end

  sig { void }
  def clear_language_id; end

  sig { void }
  def clear_language_name; end

  sig { void }
  def clear_line_number; end

  sig { void }
  def clear_match_count; end

  sig { void }
  def clear_matched_symbols; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_path; end

  sig { void }
  def clear_ref_name; end

  sig { void }
  def clear_repo_id; end

  sig { void }
  def clear_repo_nwo; end

  sig { void }
  def clear_snippets; end

  sig { void }
  def clear_term_matches; end

  sig { returns(String) }
  def commit_sha; end

  sig { params(value: String).void }
  def commit_sha=(value); end

  sig { returns(T.nilable(Blackbird::Query::V1::DebugInfo)) }
  def debug_info; end

  sig { params(value: T.nilable(Blackbird::Query::V1::DebugInfo)).void }
  def debug_info=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Blackbird::Query::V1::DuplicateLocationInfo]) }
  def duplicate_locations; end

  sig { params(value: Google::Protobuf::RepeatedField[Blackbird::Query::V1::DuplicateLocationInfo]).void }
  def duplicate_locations=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Blackbird::Query::V1::Symbol]) }
  def enclosing_symbols; end

  sig { params(value: Google::Protobuf::RepeatedField[Blackbird::Query::V1::Symbol]).void }
  def enclosing_symbols=(value); end

  sig { returns(Integer) }
  def file_size; end

  sig { params(value: Integer).void }
  def file_size=(value); end

  sig { returns(T::Boolean) }
  def has_language_id; end

  sig { params(value: T::Boolean).void }
  def has_language_id=(value); end

  sig { returns(String) }
  def language_color; end

  sig { params(value: String).void }
  def language_color=(value); end

  sig { returns(Integer) }
  def language_id; end

  sig { params(value: Integer).void }
  def language_id=(value); end

  sig { returns(String) }
  def language_name; end

  sig { params(value: String).void }
  def language_name=(value); end

  sig { returns(Integer) }
  def line_number; end

  sig { params(value: Integer).void }
  def line_number=(value); end

  sig { returns(Integer) }
  def match_count; end

  sig { params(value: Integer).void }
  def match_count=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Blackbird::Query::V1::Symbol]) }
  def matched_symbols; end

  sig { params(value: Google::Protobuf::RepeatedField[Blackbird::Query::V1::Symbol]).void }
  def matched_symbols=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(String) }
  def path; end

  sig { params(value: String).void }
  def path=(value); end

  sig { returns(String) }
  def ref_name; end

  sig { params(value: String).void }
  def ref_name=(value); end

  sig { returns(Integer) }
  def repo_id; end

  sig { params(value: Integer).void }
  def repo_id=(value); end

  sig { returns(String) }
  def repo_nwo; end

  sig { params(value: String).void }
  def repo_nwo=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Blackbird::Query::V1::RenderedSnippet]) }
  def snippets; end

  sig { params(value: Google::Protobuf::RepeatedField[Blackbird::Query::V1::RenderedSnippet]).void }
  def snippets=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Blackbird::Query::V1::Range]) }
  def term_matches; end

  sig { params(value: Google::Protobuf::RepeatedField[Blackbird::Query::V1::Range]).void }
  def term_matches=(value); end
end

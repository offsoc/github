# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: services/deploy.proto

require 'google/protobuf'

require 'pbtypes/github_pb'
require 'pbtypes/deploy_pb'
require 'google/protobuf/empty_pb'
require 'google/protobuf/timestamp_pb'
Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("services/deploy.proto", :syntax => :proto3) do
    add_message "git_hub.launch.services.deploy.ActionReference" do
      optional :name, :string, 1
      optional :version, :string, 2
      optional :path, :string, 3
    end
    add_message "git_hub.launch.services.deploy.ResolvedActionAuthentication" do
      optional :token, :string, 1
      optional :expires_at, :message, 2, "google.protobuf.Timestamp"
    end
    add_message "git_hub.launch.services.deploy.ResolvedAction" do
      optional :action, :message, 1, "git_hub.launch.services.deploy.ActionReference"
      optional :resolved_name, :string, 2
      optional :resolved_sha, :string, 3
      optional :tar_url, :string, 4
      optional :zip_url, :string, 5
      optional :authentication, :message, 6, "git_hub.launch.services.deploy.ResolvedActionAuthentication"
    end
    add_message "git_hub.launch.services.deploy.ResolveActionsRequest" do
      optional :workflow_id, :string, 1
      optional :job_id, :string, 2
      repeated :actions, :message, 3, "git_hub.launch.services.deploy.ActionReference"
    end
    add_message "git_hub.launch.services.deploy.ResolveActionsResponse" do
      repeated :actions, :message, 1, "git_hub.launch.services.deploy.ResolvedAction"
      repeated :errors, :message, 2, "git_hub.launch.services.deploy.ResolvedActionError"
    end
    add_message "git_hub.launch.services.deploy.ResolvedActionError" do
      optional :action, :message, 1, "git_hub.launch.services.deploy.ActionReference"
      optional :message, :string, 2
    end
    add_message "git_hub.launch.services.deploy.SetupRepositoryRequest" do
      optional :repository_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :owner_id, :message, 2, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :plan_owner_id, :message, 3, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :owner, :string, 4
      optional :name, :string, 5
    end
    add_message "git_hub.launch.services.deploy.SetupRepositoryResponse" do
      optional :status, :string, 1
      optional :error, :string, 2
    end
    add_message "git_hub.launch.services.deploy.SetupTenantRequest" do
      optional :global_relay_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :timeout_ms, :int64, 2
      optional :owner_global_relay_id, :message, 3, "git_hub.launch.pbtypes.git_hub.Identity"
    end
    add_message "git_hub.launch.services.deploy.SetupTenantResponse" do
      optional :status, :string, 1
      optional :error, :string, 2
    end
    add_message "git_hub.launch.services.deploy.WorkSlowResponse" do
      optional :job_id, :string, 1
      optional :hostname, :string, 2
    end
    add_message "git_hub.launch.services.deploy.ActionBuildStepStatus" do
      optional :identifier, :string, 1
      optional :external_id, :string, 2
      optional :external_status, :string, 3
    end
    add_message "git_hub.launch.services.deploy.WorkflowCancelRequest" do
      optional :check_suite_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :canceled_by_id, :int64, 2
      optional :canceled_by_name, :string, 3
      optional :canceled_by_global_id, :message, 4, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :force, :bool, 5
    end
    add_message "git_hub.launch.services.deploy.WorkflowCancelAllRequest" do
      optional :owner, :string, 1
      optional :name, :string, 2
      optional :repository_id, :message, 3, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :event_type, :string, 4
    end
    add_message "git_hub.launch.services.deploy.WorkflowCancelAllResponse" do
    end
    add_message "git_hub.launch.services.deploy.WorkflowCancelAllForNonOwnerReposRequest" do
      optional :actor_id, :int64, 1
      optional :actor_name, :string, 2
      optional :actor_global_id, :message, 3, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :data, :string, 4
    end
    add_message "git_hub.launch.services.deploy.WorkflowCancelAllForNonOwnerReposResponse" do
      optional :workflow_count, :int64, 1
    end
    add_message "git_hub.launch.services.deploy.GetAZForGlobalIDChatopsRequest" do
      optional :global_relay_id, :string, 1
      optional :env, :string, 2
    end
    add_message "git_hub.launch.services.deploy.GetAZForGlobalIDChatopsResponse" do
      optional :AzTenantName, :string, 1
      optional :AzTenantID, :string, 2
      optional :GlobalID, :string, 3
    end
    add_message "git_hub.launch.services.deploy.GetWorkflowBillingDetailsRequest" do
      optional :WorkflowID, :string, 1
      optional :JobID, :string, 2
      optional :ProductSku, :string, 3
      optional :IsHostedRunner, :bool, 4
    end
    add_message "git_hub.launch.services.deploy.WorkflowBillingDetailsResponse" do
      optional :IsStorageAllowed, :bool, 1
      optional :IsUsageAllowed, :bool, 2
      optional :IsOwnerSpammy, :bool, 3
      optional :repository_id, :message, 4, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :IsBillingChecked, :bool, 5
    end
    add_message "git_hub.launch.services.deploy.GetWorkflowSecurityDetailsRequest" do
      optional :WorkflowID, :string, 1
    end
    add_message "git_hub.launch.services.deploy.GetWorkflowSecurityDetailsResponse" do
      optional :AreActionsSecretsAllowed, :bool, 1
      optional :AreActionsEnvironmentSecretsAllowed, :bool, 2
      optional :IsIDTokenGenerationAllowed, :bool, 3
      optional :AreActionsEnvironmentVariablesAllowed, :bool, 4
    end
    add_message "git_hub.launch.services.deploy.WorkflowWithBuild" do
      optional :BuildURL, :string, 1
      optional :WorkflowFilePath, :string, 2
      optional :QueuedAt, :message, 3, "google.protobuf.Timestamp"
      optional :WorkflowBuildID, :string, 4
    end
    add_message "git_hub.launch.services.deploy.AbuseStatusRequest" do
      optional :status, :bytes, 1
      optional :requestURI, :string, 2
      optional :signature, :bytes, 3
    end
    add_message "git_hub.launch.services.deploy.AbuseStatusResponse" do
      optional :validSignature, :bool, 1
    end
    add_message "git_hub.launch.services.deploy.RepoByAZPTenantRequest" do
      optional :name, :string, 1
    end
    add_message "git_hub.launch.services.deploy.RepoByAZPTenantResponse" do
      optional :repository_id, :string, 1
      optional :nwo, :string, 2
      optional :env, :string, 3
    end
    add_message "git_hub.launch.services.deploy.ReportAdminEventForOwnerReposRequest" do
      optional :owner_id, :int64, 1
      optional :owner_name, :string, 2
      optional :owner_global_id, :string, 3
      optional :admin_event, :string, 4
      optional :data, :string, 5
    end
    add_message "git_hub.launch.services.deploy.GetTenantIDsRequest" do
      repeated :owner_ids, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
    end
    add_message "git_hub.launch.services.deploy.GetTenantIDsResponse" do
      repeated :tenant_ids, :string, 1
    end
    add_message "git_hub.launch.services.deploy.ReportAdminEventForBillingOwnerRequest" do
      optional :owner_id, :int64, 1
      optional :owner_name, :string, 2
      optional :owner_global_id, :string, 3
      optional :admin_event, :string, 4
      optional :data, :string, 5
    end
    add_message "git_hub.launch.services.deploy.RunDynamicWorkflowRequest" do
      optional :repository_id, :message, 1, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :installation_id, :int64, 2
      optional :actor_id, :message, 3, "git_hub.launch.pbtypes.git_hub.Identity"
      optional :actor_login, :string, 4
      optional :workflow, :string, 5
      optional :ref, :string, 6
      map :inputs, :string, :string, 7
      optional :integration_name, :string, 8
      optional :slug, :string, 9
      optional :workflow_name, :string, 10
      optional :visibility, :enum, 11, "git_hub.launch.services.deploy.Visibility"
      optional :owner_id, :int64, 14
      optional :installation_valid_after, :message, 15, "google.protobuf.Timestamp"
    end
    add_message "git_hub.launch.services.deploy.RunDynamicWorkflowResponse" do
      optional :execution_id, :string, 1
      optional :workflow_run_id, :int64, 2
    end
    add_enum "git_hub.launch.services.deploy.RepositoryChangeType" do
      value :DefaultBranch, 0
    end
    add_enum "git_hub.launch.services.deploy.Visibility" do
      value :DEFAULT, 0
      value :VISIBLE, 1
      value :HIDDEN, 2
    end
  end
end

module GitHub
  module Launch
    module Services
      module Deploy
        ActionReference = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.ActionReference").msgclass
        ResolvedActionAuthentication = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.ResolvedActionAuthentication").msgclass
        ResolvedAction = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.ResolvedAction").msgclass
        ResolveActionsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.ResolveActionsRequest").msgclass
        ResolveActionsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.ResolveActionsResponse").msgclass
        ResolvedActionError = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.ResolvedActionError").msgclass
        SetupRepositoryRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.SetupRepositoryRequest").msgclass
        SetupRepositoryResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.SetupRepositoryResponse").msgclass
        SetupTenantRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.SetupTenantRequest").msgclass
        SetupTenantResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.SetupTenantResponse").msgclass
        WorkSlowResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.WorkSlowResponse").msgclass
        ActionBuildStepStatus = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.ActionBuildStepStatus").msgclass
        WorkflowCancelRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.WorkflowCancelRequest").msgclass
        WorkflowCancelAllRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.WorkflowCancelAllRequest").msgclass
        WorkflowCancelAllResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.WorkflowCancelAllResponse").msgclass
        WorkflowCancelAllForNonOwnerReposRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.WorkflowCancelAllForNonOwnerReposRequest").msgclass
        WorkflowCancelAllForNonOwnerReposResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.WorkflowCancelAllForNonOwnerReposResponse").msgclass
        GetAZForGlobalIDChatopsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.GetAZForGlobalIDChatopsRequest").msgclass
        GetAZForGlobalIDChatopsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.GetAZForGlobalIDChatopsResponse").msgclass
        GetWorkflowBillingDetailsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.GetWorkflowBillingDetailsRequest").msgclass
        WorkflowBillingDetailsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.WorkflowBillingDetailsResponse").msgclass
        GetWorkflowSecurityDetailsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.GetWorkflowSecurityDetailsRequest").msgclass
        GetWorkflowSecurityDetailsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.GetWorkflowSecurityDetailsResponse").msgclass
        WorkflowWithBuild = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.WorkflowWithBuild").msgclass
        AbuseStatusRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.AbuseStatusRequest").msgclass
        AbuseStatusResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.AbuseStatusResponse").msgclass
        RepoByAZPTenantRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.RepoByAZPTenantRequest").msgclass
        RepoByAZPTenantResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.RepoByAZPTenantResponse").msgclass
        ReportAdminEventForOwnerReposRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.ReportAdminEventForOwnerReposRequest").msgclass
        GetTenantIDsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.GetTenantIDsRequest").msgclass
        GetTenantIDsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.GetTenantIDsResponse").msgclass
        ReportAdminEventForBillingOwnerRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.ReportAdminEventForBillingOwnerRequest").msgclass
        RunDynamicWorkflowRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.RunDynamicWorkflowRequest").msgclass
        RunDynamicWorkflowResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.RunDynamicWorkflowResponse").msgclass
        RepositoryChangeType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.RepositoryChangeType").enummodule
        Visibility = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.deploy.Visibility").enummodule
      end
    end
  end
end

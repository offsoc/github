
syntax = "proto3";

import "proto/rms/v1/container/entities.proto";

package github.registry.metadata.v1.container;

option go_package = "github.com/github/registry-metadata/rms/twirp/proto/rms/v1/container";
option ruby_package = "Proto::RegistryMetadata::V1::Container";

// The Metadata Container service provides methods for storing and retrieving metadata specific to container images.
// Non container specific methods should live inside the main Metadata service or the Ecosystem service.
//
// This service is only intended to be used by the container registry frontend service.
service Metadata {
    rpc PutMetadata(PutMetadataRequest) returns (PutMetadataResponse);
    rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse);
    rpc GetTags(GetTagsRequest) returns (GetTagsResponse);
    rpc GetTag(GetTagRequest) returns (GetTagResponse);
    rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);
    rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
    rpc PutLayer(PutLayerRequest) returns(PutLayerResponse);
    rpc GetLayer(GetLayerRequest) returns (GetLayerResponse);
    rpc GetLayers(GetLayersRequest) returns (GetLayersResponse);
    rpc ValidateAndUpdateLayers(UpdateLayersRequest) returns (UpdateLayersResponse);
    rpc LinkLayer(LinkLayerRequest) returns (LinkLayerResponse);
    rpc GetCatalog(GetCatalogRequest) returns (GetCatalogResponse);
}

message PutMetadataRequest {
    string namespace = 1;
    string package_name = 2;
    string blob_store = 3;
    ContainerMetadata metadata = 4;
    string user_agent = 5;
}

message PutMetadataResponse {}

message GetMetadataRequest {
    string namespace = 1;
    string package_name = 2;
    Tag tag = 3;
    string user_agent = 4;
    bool is_non_download = 5;
}

message GetMetadataResponse {
    ContainerMetadata metadata = 1;
}

message GetTagsRequest {
    string namespace = 1;
    string package_name = 2;
    int64 limit = 3;
    string last = 4;
    bool include_deleted = 5;
    bool only_immutable_tags = 6;
    bool use_replica = 7;

}

message GetTagsResponse {
    repeated Tag tags = 1;
    string next = 2;
}

message GetTagRequest {
    string namespace = 1;
    string package_name = 2;
    Tag tag = 3;
}

message GetTagResponse {
    Tag tag = 1;
}

message AuthenticateRequest {
    enum Action {
        READ_PACKAGE = 0;
        WRITE_PACKAGE = 1;
    }
    Action action = 1;
    string package_name = 2;
    string namespace = 3;
}

message AuthenticateResponse {}

message ValidateTokenRequest {
    string username = 1;
}

message ValidateTokenResponse {
    repeated string scopes = 1;
}

message GetLayerRequest {
    string digest = 1;
    string package_name = 2;
    string namespace = 3;
    bool is_non_download = 4;
    string user_agent = 5;
    bool checkConnectedVersions = 6;
}

message GetLayerResponse {
    Layer layer = 1;
}

message GetLayersRequest {
    string package_name = 1;
    string namespace = 2;
    repeated string digests = 3;
}

message GetLayersResponse {
    repeated Layer layers = 1;
}

message PutLayerRequest {
    Layer layer = 1;
    string package_name = 2;
    string namespace = 3;
}

message PutLayerResponse{}

message UpdateLayersRequest {
    string package_name = 1;
    string namespace = 2;
    repeated Layer layers = 3;
}

message UpdateLayerError {
    string digest = 1;
    string error = 2;
}
message UpdateLayersResponse {
    repeated UpdateLayerError failed = 1;
}

message LinkLayerRequest {
    Layer layer = 1;
    string source_package_name = 2; // Currently unused, but exposed for future use (ie billing)
    string source_namespace = 3; // Currently unused, but exposed for future use (ie billing)
    string destination_package_name = 4;
    string destination_namespace = 5;
}

message LinkLayerResponse{}

message GetCatalogRequest{
    int64 limit = 1;
    string last = 2;
}

message GetCatalogResponse{
    repeated string repositories = 1;
    bool has_more_pages = 2;
}

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Services::Deploy::RunDynamicWorkflowRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Services::Deploy::RunDynamicWorkflowRequest`.

class GitHub::Launch::Services::Deploy::RunDynamicWorkflowRequest
  sig do
    params(
      actor_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      actor_login: T.nilable(String),
      inputs: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      installation_id: T.nilable(Integer),
      installation_valid_after: T.nilable(Google::Protobuf::Timestamp),
      integration_name: T.nilable(String),
      owner_id: T.nilable(Integer),
      ref: T.nilable(String),
      repository_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      slug: T.nilable(String),
      visibility: T.nilable(T.any(Symbol, Integer)),
      workflow: T.nilable(String),
      workflow_name: T.nilable(String)
    ).void
  end
  def initialize(actor_id: nil, actor_login: nil, inputs: T.unsafe(nil), installation_id: nil, installation_valid_after: nil, integration_name: nil, owner_id: nil, ref: nil, repository_id: nil, slug: nil, visibility: nil, workflow: nil, workflow_name: nil); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def actor_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def actor_id=(value); end

  sig { returns(String) }
  def actor_login; end

  sig { params(value: String).void }
  def actor_login=(value); end

  sig { void }
  def clear_actor_id; end

  sig { void }
  def clear_actor_login; end

  sig { void }
  def clear_inputs; end

  sig { void }
  def clear_installation_id; end

  sig { void }
  def clear_installation_valid_after; end

  sig { void }
  def clear_integration_name; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_ref; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_slug; end

  sig { void }
  def clear_visibility; end

  sig { void }
  def clear_workflow; end

  sig { void }
  def clear_workflow_name; end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def inputs; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def inputs=(value); end

  sig { returns(Integer) }
  def installation_id; end

  sig { params(value: Integer).void }
  def installation_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def installation_valid_after; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def installation_valid_after=(value); end

  sig { returns(String) }
  def integration_name; end

  sig { params(value: String).void }
  def integration_name=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(String) }
  def ref; end

  sig { params(value: String).void }
  def ref=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def repository_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def repository_id=(value); end

  sig { returns(String) }
  def slug; end

  sig { params(value: String).void }
  def slug=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def visibility; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def visibility=(value); end

  sig { returns(String) }
  def workflow; end

  sig { params(value: String).void }
  def workflow=(value); end

  sig { returns(String) }
  def workflow_name; end

  sig { params(value: String).void }
  def workflow_name=(value); end
end

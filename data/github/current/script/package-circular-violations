#!/usr/bin/env safe-ruby
# typed: strict
# frozen_string_literal: true

require "optparse"
require "parse_packwerk"
require "github/packwerk/circular_dependencies"

# Set all packages as enforce_privacy, enforce_dependencies, and remove all private_constants
# Update all todo files
# Turn all implicit dependencies from todos into explicit dependencies
# Calculate all circular dependency violations
# Optionally set `package_of_interest` to only include direct peers of that package
#
# `script/package-circular-violations` Enforce strict dependencies and output dependency violations
# `script/package-circular-violations --package=packages/repositories` Limit to a single package
# `script/package-circular-violations --reset` Reset changed files

IOptions = T.type_alias do
  {
    reset: T::Boolean,
    package_of_interest: T.nilable(String),
  }
end

options = T.let({
  reset: false,
  package_of_interest: nil,
}, IOptions)
OptionParser.new do |opts|
  opts.banner = "Usage: script/package-circular-violations [options]"

  opts.on("--package=PACKAGE", "Limit to a single package") do |package_of_interest|
    options[:package_of_interest] = package_of_interest
  end

  opts.on("--reset", "Reset package config/todo files") do
    options[:reset] = true
  end
end.parse!

if options[:package_of_interest] && ParsePackwerk.find(options[:package_of_interest]).nil?
  puts "Error: Package not found: #{options[:package_of_interest]}"
  exit 1
end

GitHub::Packwerk::CircularDependencies.run(**options)

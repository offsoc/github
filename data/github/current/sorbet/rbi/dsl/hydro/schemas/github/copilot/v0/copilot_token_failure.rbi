# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Copilot::V0::CopilotTokenFailure`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Copilot::V0::CopilotTokenFailure`.

class Hydro::Schemas::Github::Copilot::V0::CopilotTokenFailure
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      copilot_user_details: T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails),
      editor_plugin_version: T.nilable(String),
      editor_version: T.nilable(String),
      failure_reason: T.nilable(String),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, copilot_user_details: nil, editor_plugin_version: nil, editor_version: nil, failure_reason: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_copilot_user_details; end

  sig { void }
  def clear_editor_plugin_version; end

  sig { void }
  def clear_editor_version; end

  sig { void }
  def clear_failure_reason; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails)) }
  def copilot_user_details; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails)).void }
  def copilot_user_details=(value); end

  sig { returns(String) }
  def editor_plugin_version; end

  sig { params(value: String).void }
  def editor_plugin_version=(value); end

  sig { returns(String) }
  def editor_version; end

  sig { params(value: String).void }
  def editor_version=(value); end

  sig { returns(String) }
  def failure_reason; end

  sig { params(value: String).void }
  def failure_reason=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

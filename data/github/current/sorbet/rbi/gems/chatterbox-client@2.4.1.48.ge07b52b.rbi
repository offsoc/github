# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `chatterbox-client` gem.
# Please instead update this file by running `bin/tapioca gem chatterbox-client`.

# source://chatterbox-client//chatterbox/client.rb#5
module Chatterbox; end

# Post things to chatterbox!
#
# Set a CHATTERBOX_TOKEN environment variable to use this.
#
# You can also optionally set a CHATTERBOX_URL to something like
# http://chatterbox.localhost
#
# source://chatterbox-client//chatterbox/client.rb#28
module Chatterbox::Client
  class << self
    # Print a message that will appear, in slack, with a colored bar
    # to decorate it.
    #
    # topic - The String topic to post to
    # color - The String HTML color or slack color bar to decorate a message with
    # msg   - The String message to post
    #
    # Returns true if the message posted successfully
    #
    # source://chatterbox-client//chatterbox/client.rb#72
    def colored_say(topic, color, msg, options = T.unsafe(nil)); end

    # The same as .colored_say, but will never raise an exception.
    #
    # topic - The String topic to post to
    # color - The String HTML color or slack color bar to decorate a message with
    # msg   - The String message to post
    #
    # Returns true if the message posted successfully
    #
    # source://chatterbox-client//chatterbox/client.rb#92
    def colored_say!(topic, color, msg); end

    # Create a new room
    # Creates a new room. Will default to slack and create a channel
    # if the room name begins with a '#'.
    #
    # name        - The name of the room to create
    # description - The optional description of the room to create
    # adapter     - Optionally the adapter to create the room on
    #
    # Returns true if the room was created
    #
    # source://chatterbox-client//chatterbox/client.rb#174
    def create_room(name, description = T.unsafe(nil), adapter = T.unsafe(nil)); end

    # source://chatterbox-client//chatterbox/client.rb#212
    def get(path); end

    # Check connectivity to chatterbox.
    #
    # Returns nothing, raises StandardError (or a subclass) if there are any
    # issues.
    #
    # @raise [StandardError]
    #
    # source://chatterbox-client//chatterbox/client.rb#189
    def ping; end

    # source://chatterbox-client//chatterbox/client.rb#218
    def post(path, data); end

    # Sends a multipart/form-data request where form_parts is an array of
    # arrays for the parts such as [['upload', File.open('foo.bar')]]
    # see https://www.rubydoc.info/stdlib/net/Net%2FHTTPHeader:set_form
    #
    # source://chatterbox-client//chatterbox/client.rb#242
    def post_multipart(path, form_parts); end

    # Disable test mode. Used for chatterbox client tests. Not part of
    # the supported API.
    #
    # source://chatterbox-client//chatterbox/client.rb#208
    def reset_test; end

    # Post a message to a chatterbox topic.
    #
    # topic - The String topic to post to. For direct message use @user_handle as a topic
    # msg   - The String message to post
    #
    # Returns truthy if the message posted successfully. Raises a
    # Chatterbox::Error if an error was returned.
    #
    # source://chatterbox-client//chatterbox/client.rb#36
    def say(topic, msg, options = T.unsafe(nil)); end

    # The same thing as .say, but will never raise an exception.
    #
    # topic - The String topic to post to
    # msg   - The String message to post
    #
    # Returns true if the message posted successfully
    #
    # source://chatterbox-client//chatterbox/client.rb#58
    def say!(topic, msg); end

    # Issue a request to the chatterbox backend.
    #
    # request :: Net::HTTPGenericRequest subclass
    #            The request to issue.
    #
    # Returns a Net::HTTPResponse subclass or raises one of the Net exceptions.
    #
    # source://chatterbox-client//chatterbox/client.rb#254
    def send_request(request); end

    # Subscribe a room to a topic
    #
    # adapter -     The adapter to subscribe
    # adapter_id -  The adapter_id to subscribe
    # topic -       The topic to subscribe a room to
    #
    # REturns true if the subscription was created
    #
    # source://chatterbox-client//chatterbox/client.rb#146
    def subscribe(adapter, adapter_id, topic); end

    # source://chatterbox-client//chatterbox/client.rb#153
    def subscriptions(adapter, adapter_id); end

    # Instead of posting to chatterbox, run the specified block.
    # Use for setting up mocks. Colored messages will be passed through as
    # plaintext.
    #
    #  block arg - topic - A String Topic being posted to
    #  block arg - text  - String message being posted to the topic
    #
    # Returns nothing.
    #
    # source://chatterbox-client//chatterbox/client.rb#202
    def test(&block); end

    # Returns true if a test block has been given.
    #
    # @return [Boolean]
    #
    # source://chatterbox-client//chatterbox/client.rb#268
    def test_mode?; end

    # Calls back using test block instead of "real" block in test mode
    #
    # Returns nothing
    #
    # source://chatterbox-client//chatterbox/client.rb#275
    def test_say(topic, message, options); end

    # Calls back using test block instead of "real" block in test mode
    #
    # Returns nothing
    #
    # source://chatterbox-client//chatterbox/client.rb#289
    def test_upload_say(topic, filename, content, comment); end

    # Upload a file to a chatterbox topic.
    #
    # topic     - The String topic to post to. For direct message use @user_handle as a topic
    # filename  - The filename with extension of the file to post
    # content   - The content of the file as an IO object or text
    # comment   - The comment to post with the file, defaults to empty string
    #
    # Returns truthy if the message posted successfully. Raises a
    # Chatterbox::Error if an error was returned.
    #
    # source://chatterbox-client//chatterbox/client.rb#107
    def upload_say(topic, filename, content, comment = T.unsafe(nil)); end

    # The same as .upload_say, but will never raise an exception.
    #
    # topic     - The String topic to post to. For direct message use @user_handle as a topic
    # filename  - The filename with extension of the file to post
    # content   - The content of the file as an IO object or text
    # comment   - The comment to post with the file, defaults to empty string
    #
    # Returns truthy if the message posted successfully.
    #
    # source://chatterbox-client//chatterbox/client.rb#133
    def upload_say!(topic, filename, content, comment = T.unsafe(nil)); end
  end
end

# source://chatterbox-client//chatterbox/client.rb#10
class Chatterbox::Error < ::StandardError
  # A Net::HTTP response (or something duck-typing #code and #response) that
  # was associated with posting this message. May or may not be available,
  # but note that Error can be raised in situations that can also raise
  # network errors.
  #
  # source://chatterbox-client//chatterbox/client.rb#15
  def response; end

  # A Net::HTTP response (or something duck-typing #code and #response) that
  # was associated with posting this message. May or may not be available,
  # but note that Error can be raised in situations that can also raise
  # network errors.
  #
  # source://chatterbox-client//chatterbox/client.rb#15
  def response=(_arg0); end
end

# source://chatterbox-client//chatterbox/client.rb#6
Chatterbox::GREEN = T.let(T.unsafe(nil), String)

# source://chatterbox-client//chatterbox/client.rb#7
Chatterbox::RED = T.let(T.unsafe(nil), String)

# Chatterbox::Error is the preferred version, but a few releases had SayError,
# so we keep it around for compatibility
#
# source://chatterbox-client//chatterbox/client.rb#20
Chatterbox::SayError = Chatterbox::Error

# source://chatterbox-client//chatterbox/client.rb#8
Chatterbox::YELLOW = T.let(T.unsafe(nil), String)

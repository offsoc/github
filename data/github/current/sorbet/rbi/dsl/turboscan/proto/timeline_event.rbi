# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Turboscan::Proto::TimelineEvent`.
# Please instead update this file by running `bin/tapioca dsl Turboscan::Proto::TimelineEvent`.

class Turboscan::Proto::TimelineEvent
  sig do
    params(
      category: T.nilable(String),
      commit_oid: T.nilable(String),
      environment: T.nilable(T.any(Google::Protobuf::RepeatedField[Turboscan::Proto::EnvironmentData], T::Array[Turboscan::Proto::EnvironmentData])),
      file_path: T.nilable(String),
      id: T.nilable(Integer),
      logical_alert_id: T.nilable(Integer),
      message: T.nilable(String),
      ref_name_bytes: T.nilable(String),
      resolution: T.nilable(T.any(Symbol, Integer)),
      resolution_note: T.nilable(String),
      start_line: T.nilable(Integer),
      timestamp: T.nilable(Google::Protobuf::Timestamp),
      tool_version: T.nilable(String),
      type: T.nilable(T.any(Symbol, Integer)),
      user_id: T.nilable(Integer),
      workflow_run_id: T.nilable(Integer)
    ).void
  end
  def initialize(category: nil, commit_oid: nil, environment: T.unsafe(nil), file_path: nil, id: nil, logical_alert_id: nil, message: nil, ref_name_bytes: nil, resolution: nil, resolution_note: nil, start_line: nil, timestamp: nil, tool_version: nil, type: nil, user_id: nil, workflow_run_id: nil); end

  sig { returns(String) }
  def category; end

  sig { params(value: String).void }
  def category=(value); end

  sig { void }
  def clear_category; end

  sig { void }
  def clear_commit_oid; end

  sig { void }
  def clear_environment; end

  sig { void }
  def clear_file_path; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_logical_alert_id; end

  sig { void }
  def clear_message; end

  sig { void }
  def clear_ref_name_bytes; end

  sig { void }
  def clear_resolution; end

  sig { void }
  def clear_resolution_note; end

  sig { void }
  def clear_start_line; end

  sig { void }
  def clear_timestamp; end

  sig { void }
  def clear_tool_version; end

  sig { void }
  def clear_type; end

  sig { void }
  def clear_user_id; end

  sig { void }
  def clear_workflow_run_id; end

  sig { returns(String) }
  def commit_oid; end

  sig { params(value: String).void }
  def commit_oid=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Turboscan::Proto::EnvironmentData]) }
  def environment; end

  sig { params(value: Google::Protobuf::RepeatedField[Turboscan::Proto::EnvironmentData]).void }
  def environment=(value); end

  sig { returns(String) }
  def file_path; end

  sig { params(value: String).void }
  def file_path=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(Integer) }
  def logical_alert_id; end

  sig { params(value: Integer).void }
  def logical_alert_id=(value); end

  sig { returns(String) }
  def message; end

  sig { params(value: String).void }
  def message=(value); end

  sig { returns(String) }
  def ref_name_bytes; end

  sig { params(value: String).void }
  def ref_name_bytes=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def resolution; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def resolution=(value); end

  sig { returns(String) }
  def resolution_note; end

  sig { params(value: String).void }
  def resolution_note=(value); end

  sig { returns(Integer) }
  def start_line; end

  sig { params(value: Integer).void }
  def start_line=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def timestamp; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def timestamp=(value); end

  sig { returns(String) }
  def tool_version; end

  sig { params(value: String).void }
  def tool_version=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def type=(value); end

  sig { returns(Integer) }
  def user_id; end

  sig { params(value: Integer).void }
  def user_id=(value); end

  sig { returns(Integer) }
  def workflow_run_id; end

  sig { params(value: Integer).void }
  def workflow_run_id=(value); end
end

#!/bin/bash
#/ Usage:
#/    ghe-mssql-shrinkfile [-h] [--disable-mssql-replication] [--set-simple-recovery-model]
#/
#/ When using backup-utils and/or replication, the FULL recovery model is enabled on MSSQL 
#/ databases. The usual way to free up logical pages within the MSSQL transaction log is
#/ to take a backup, and to make sure replication is up-to-date (if applicable). However,
#/ that does not reduce the physical size of the transaction log. This command uses 
#/ `DBCC SHRINKFILE` to shrink the physical size of the transaction log.
#/ If backups aren't taken regularly (or if there is a problem with replication sync), then
#/ the transaction log can grow unbounded, causing more serious issues. The advanced options
#/ to this script let you make some tradeoffs to reduce the transaction log size:
#/   --disable-mssql-replication  Only applicable if on the primary node of an HA setup, this
#/                                option will first run `ghe-mssql-repl-stop` and then drop
#/                                the availability group. This will make `dbcc shrinkfile`
#/                                less likely to encounter the error "Cannot shrink because
#/                                logical log file is in use." This script will tell you 
#/                                what commands to run to restore replication when done.
#/   --set-simple-recovery-model  Changes the MSSQL recovery model from FULL to SIMPLE. 
#/                                Note that this will destroy point-in-time-recovery until
#/                                you change it back to FULL. But this option can be used
#/                                if it is impractical to take a backup first. This script will
#/                                tell you what commands to run to restore the FULL recovery
#/                                model when done.
#/
set -e

export PATH="$PATH:/usr/local/share/enterprise"

#shellcheck source=vm_files/usr/local/share/enterprise/ghe-repl-lib
. ghe-repl-lib
#shellcheck source=vm_files/usr/local/share/enterprise/ghe-mssql-lib
. ghe-mssql-lib

usage() {
  grep '^#/' < "$0" | cut -c 4-
  exit 2
}

disable_mssql_replication=
set_simple_recovery_model=
prompt_less=
while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)
      usage
      exit 2
      ;;
    --disable-mssql-replication)
      disable_mssql_replication=1
      shift
      ;;
    --set-simple-recovery-model)
      set_simple_recovery_model=1
      shift
      ;;
    -y|--yes)
      prompt_less=1
      shift
      ;;
    *)
      fail "Error: Unrecognized argument: $1"
      ;;
  esac
done

dbs=()
declare -A recovery_models

# https://stackoverflow.com/questions/11426529/reading-output-of-a-command-into-an-array-in-bash
IFS=$'\n' read -rd '' -a all_dbs < <( ghe-mssql-console -y -n -q "SET NOCOUNT ON; SELECT name, recovery_model_desc FROM sys.databases WHERE name NOT IN('master', 'tempdb', 'model', 'msdb')" && printf '\0' )
for dbpair in "${all_dbs[@]}"
do
  read -a parts <<< "$dbpair"
  dbs+=("${parts[0]}")
  recovery_models["${parts[0]}"]="${parts[1]}"
done

if [[ -n "$set_simple_recovery_model" ]]; then
  dbs_with_full_recovery_model=
  for db in "${dbs[@]}"; do
    if [[ "${recovery_models["$db"]}" != "SIMPLE" ]]; then
      dbs_with_full_recovery_model+=" $db"
    fi
  done
fi

ag_role=$(get-ag-role)
if echo "$ag_role" | grep -q "PRIMARY"; then
  if [[ -n "$disable_mssql_replication" ]]; then
    if [[ -n "$set_simple_recovery_model" ]]; then
      step2="
    2. Change the recovery model to SIMPLE. THIS WILL DISABLE POINT-IN-TIME-RECOVERY (PITR) UNTIL THE RECOVERY MODEL IS CHANGED BACK.
    3."
      recovery_model_note=" and change the recovery model to FULL"
    else
    step2="
    2."
      recovery_model_note=""
    fi

    prompt="This will attempt an aggressive MSSQL shrinkfile operation, which will:
    1. Disable MSSQL replication on all replica instances and drop the availability group on this primary instance.$step2 Shrink the transaction log via DBCC SHRINKFILE. 
At the end, if you are satisfied with the results, you should re-enable replication. You can do that with 
    ghe-cluster-each --serial --replica --role mssql -- /usr/local/share/enterprise/ghe-repl-start-mssql
(That will also automatically re-create the availability group on this primary instance$recovery_model_note.)"
  fi
elif echo "$ag_role" | grep -q "SECONDARY"; then
  echo "ghe-mssql-shrinkfile is not recommended on replicas. Either run /usr/local/share/enterprise/ghe-mssql-shrinkfile on the primary, or stop and restart mssql replication on the replica (/usr/local/share/enterprise/ghe-repl-stop-mssql, ghe-repl-start-mssql) to reseed the data files."
  exit 1
else
  if [[ -n "$set_simple_recovery_model" ]]; then
    if [[ -n "$dbs_with_full_recovery_model" ]]; then
      prompt="This will attempt an aggressive MSSQL shrinkfile operation, which will:
        1. Change the MSSQL recovery models to SIMPLE on the following databases: $dbs_with_full_recovery_model. THIS WILL DISABLE POINT-IN-TIME-RECOVERY (PITR) UNTIL THE RECOVERY MODEL IS CHANGED BACK.
        2. Shrink the transaction log via DBCC SHRINKFILE.
        At the end, if you are satisfied with the results, you should re-enable the FULL recovery model. The simplest way to do that is to use backup-utils to take a full backup, which will automatically set the recovery model to FULL."
    fi
  fi
fi

if [[ -z "$prompt_less" ]] && [[ -n "$prompt" ]]; then
      read -p "$prompt
Continue? [y/n] " -r
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
          exit 1
      fi
fi

if [[ -n "$disable_mssql_replication" ]]; then
  if echo "$ag_role" | grep -q "PRIMARY"; then
    ghe-cluster-each --serial --replica --role mssql -- /usr/local/share/enterprise/ghe-repl-stop-mssql
    ghe-mssql-console -y -q "DROP AVAILABILITY GROUP ha"
  fi
fi

for db in "${dbs[@]}"; do
  echo "Shrinking transaction log for $db: ${recovery_models["$db"]}"
  if [[ -n "$set_simple_recovery_model" ]] && [[ "${recovery_models["$db"]}" != "SIMPLE" ]]; then
    ghe-mssql-console -y -q "ALTER DATABASE [$db] SET RECOVERY SIMPLE"
  fi
  ghe-mssql-console -y -q "use [$db]; DBCC SHRINKFILE ([${db}_Log], 1)"
  ghe-mssql-console -y -q "use [$db]; DBCC LOGINFO"
  ghe-mssql-console -y -q "use [$db]; DBCC OPENTRAN"
done

echo "Gathering post-shrinkfile diagnostics..."
ghe-mssql-console -y -q "sp_server_diagnostics"
ghe-mssql-console -y -q "DBCC SQLPERF(LOGSPACE);"
ghe-mssql-console -y -q "select Db.name ,vfs.* from
  sys.dm_io_virtual_file_stats(NULL, NULL) AS VFS
    JOIN sys.databases AS Db 
  ON vfs.database_id = Db.database_id"

if [[ -n "$disable_mssql_replication" ]]; then
  if echo "$ag_role" | grep -q "PRIMARY"; then
    echo "Shrinkfile done! To restore replication, run the following command (from this instance, the primary):
    ghe-cluster-each --serial --replica --role mssql -- /usr/local/share/enterprise/ghe-repl-start-mssql"
    if [[ -n "$set_simple_recovery_model" ]]; then
      echo "(That will also restore the recovery model to FULL automatically)"
    fi
    echo "Note that re-seeding the replica databases may take a long time. Before doing so, you may want to validate that shrinkfile was effective by running ghe-mssql-health-check."
  fi
elif [[ -n "$set_simple_recovery_model" ]]; then
  echo "Shrinkfile done! You should now take a full backup from backup-utils. That process will automatically restore the databases to the FULL recovery model."
fi


# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Proto::TrustMetadataApi::V0::ProvenanceSummary`.
# Please instead update this file by running `bin/tapioca dsl Proto::TrustMetadataApi::V0::ProvenanceSummary`.

class Proto::TrustMetadataApi::V0::ProvenanceSummary
  sig do
    params(
      artifact_name: T.nilable(String),
      build_config_display_name: T.nilable(String),
      build_config_uri: T.nilable(String),
      build_trigger: T.nilable(String),
      certificate_issuer: T.nilable(String),
      expires_at: T.nilable(Google::Protobuf::Timestamp),
      included_at: T.nilable(Google::Protobuf::Timestamp),
      issuer: T.nilable(String),
      issuer_display_name: T.nilable(String),
      resolved_build_config_uri: T.nilable(String),
      resolved_source_repository_commit_uri: T.nilable(String),
      run_invocation_uri: T.nilable(String),
      source_repository_digest: T.nilable(String),
      source_repository_ref: T.nilable(String),
      source_repository_uri: T.nilable(String),
      subject_alternative_name: T.nilable(String),
      transparency_log_uri: T.nilable(String)
    ).void
  end
  def initialize(artifact_name: nil, build_config_display_name: nil, build_config_uri: nil, build_trigger: nil, certificate_issuer: nil, expires_at: nil, included_at: nil, issuer: nil, issuer_display_name: nil, resolved_build_config_uri: nil, resolved_source_repository_commit_uri: nil, run_invocation_uri: nil, source_repository_digest: nil, source_repository_ref: nil, source_repository_uri: nil, subject_alternative_name: nil, transparency_log_uri: nil); end

  sig { returns(String) }
  def artifact_name; end

  sig { params(value: String).void }
  def artifact_name=(value); end

  sig { returns(String) }
  def build_config_display_name; end

  sig { params(value: String).void }
  def build_config_display_name=(value); end

  sig { returns(String) }
  def build_config_uri; end

  sig { params(value: String).void }
  def build_config_uri=(value); end

  sig { returns(String) }
  def build_trigger; end

  sig { params(value: String).void }
  def build_trigger=(value); end

  sig { returns(String) }
  def certificate_issuer; end

  sig { params(value: String).void }
  def certificate_issuer=(value); end

  sig { void }
  def clear_artifact_name; end

  sig { void }
  def clear_build_config_display_name; end

  sig { void }
  def clear_build_config_uri; end

  sig { void }
  def clear_build_trigger; end

  sig { void }
  def clear_certificate_issuer; end

  sig { void }
  def clear_expires_at; end

  sig { void }
  def clear_included_at; end

  sig { void }
  def clear_issuer; end

  sig { void }
  def clear_issuer_display_name; end

  sig { void }
  def clear_resolved_build_config_uri; end

  sig { void }
  def clear_resolved_source_repository_commit_uri; end

  sig { void }
  def clear_run_invocation_uri; end

  sig { void }
  def clear_source_repository_digest; end

  sig { void }
  def clear_source_repository_ref; end

  sig { void }
  def clear_source_repository_uri; end

  sig { void }
  def clear_subject_alternative_name; end

  sig { void }
  def clear_transparency_log_uri; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def expires_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def expires_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def included_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def included_at=(value); end

  sig { returns(String) }
  def issuer; end

  sig { params(value: String).void }
  def issuer=(value); end

  sig { returns(String) }
  def issuer_display_name; end

  sig { params(value: String).void }
  def issuer_display_name=(value); end

  sig { returns(String) }
  def resolved_build_config_uri; end

  sig { params(value: String).void }
  def resolved_build_config_uri=(value); end

  sig { returns(String) }
  def resolved_source_repository_commit_uri; end

  sig { params(value: String).void }
  def resolved_source_repository_commit_uri=(value); end

  sig { returns(String) }
  def run_invocation_uri; end

  sig { params(value: String).void }
  def run_invocation_uri=(value); end

  sig { returns(String) }
  def source_repository_digest; end

  sig { params(value: String).void }
  def source_repository_digest=(value); end

  sig { returns(String) }
  def source_repository_ref; end

  sig { params(value: String).void }
  def source_repository_ref=(value); end

  sig { returns(String) }
  def source_repository_uri; end

  sig { params(value: String).void }
  def source_repository_uri=(value); end

  sig { returns(String) }
  def subject_alternative_name; end

  sig { params(value: String).void }
  def subject_alternative_name=(value); end

  sig { returns(String) }
  def transparency_log_uri; end

  sig { params(value: String).void }
  def transparency_log_uri=(value); end
end

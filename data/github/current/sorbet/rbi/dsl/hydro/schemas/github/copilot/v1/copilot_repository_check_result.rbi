# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Copilot::V1::CopilotRepositoryCheckResult`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Copilot::V1::CopilotRepositoryCheckResult`.

class Hydro::Schemas::Github::Copilot::V1::CopilotRepositoryCheckResult
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      actor_analytics_tracking_id: T.nilable(String),
      copilot_access_type: T.nilable(T.any(Symbol, Integer)),
      copilot_user_details: T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails),
      editor_plugin_version: T.nilable(String),
      editor_version: T.nilable(String),
      enabled: T.nilable(T::Boolean),
      organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      organization_analytics_tracking_ids: T.nilable(String),
      other_free_access_type: T.nilable(String),
      remote_repository: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V2::Entities::Repository),
      request_id: T.nilable(String)
    ).void
  end
  def initialize(actor: nil, actor_analytics_tracking_id: nil, copilot_access_type: nil, copilot_user_details: nil, editor_plugin_version: nil, editor_version: nil, enabled: nil, organization: nil, organization_analytics_tracking_ids: nil, other_free_access_type: nil, remote_repository: nil, repository: nil, request_id: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def actor_analytics_tracking_id; end

  sig { params(value: String).void }
  def actor_analytics_tracking_id=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_actor_analytics_tracking_id; end

  sig { void }
  def clear_copilot_access_type; end

  sig { void }
  def clear_copilot_user_details; end

  sig { void }
  def clear_editor_plugin_version; end

  sig { void }
  def clear_editor_version; end

  sig { void }
  def clear_enabled; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_organization_analytics_tracking_ids; end

  sig { void }
  def clear_other_free_access_type; end

  sig { void }
  def clear_remote_repository; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_id; end

  sig { returns(T.any(Symbol, Integer)) }
  def copilot_access_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def copilot_access_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails)) }
  def copilot_user_details; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails)).void }
  def copilot_user_details=(value); end

  sig { returns(String) }
  def editor_plugin_version; end

  sig { params(value: String).void }
  def editor_plugin_version=(value); end

  sig { returns(String) }
  def editor_version; end

  sig { params(value: String).void }
  def editor_version=(value); end

  sig { returns(T::Boolean) }
  def enabled; end

  sig { params(value: T::Boolean).void }
  def enabled=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def organization=(value); end

  sig { returns(String) }
  def organization_analytics_tracking_ids; end

  sig { params(value: String).void }
  def organization_analytics_tracking_ids=(value); end

  sig { returns(String) }
  def other_free_access_type; end

  sig { params(value: String).void }
  def other_free_access_type=(value); end

  sig { returns(String) }
  def remote_repository; end

  sig { params(value: String).void }
  def remote_repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V2::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V2::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(String) }
  def request_id; end

  sig { params(value: String).void }
  def request_id=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `SpamPattern`.
# Please instead update this file by running `bin/tapioca dsl SpamPattern`.

class SpamPattern
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::SpamPattern).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SpamPattern).void)
      ).returns(::SpamPattern)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SpamPattern).void)
      ).returns(::SpamPattern)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SpamPattern).void)
      ).returns(::SpamPattern)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SpamPattern).void)
      ).returns(::SpamPattern)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SpamPattern).void)
      ).returns(::SpamPattern)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::SpamPattern]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::SpamPattern)) }
    def fifth; end

    sig { returns(::SpamPattern) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::SpamPattern)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::SpamPattern) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::SpamPattern).void)
      ).returns(T.nilable(T::Enumerator[::SpamPattern]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::SpamPattern]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::SpamPattern]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SpamPattern).void)
      ).returns(::SpamPattern)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SpamPattern).void)
      ).returns(::SpamPattern)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SpamPattern).void)
      ).returns(::SpamPattern)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::SpamPattern)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::SpamPattern) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::SpamPattern) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::SpamPattern) }
    def first!; end

    sig { returns(T.nilable(::SpamPattern)) }
    def forty_two; end

    sig { returns(::SpamPattern) }
    def forty_two!; end

    sig { returns(T.nilable(::SpamPattern)) }
    def fourth; end

    sig { returns(::SpamPattern) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::SpamPattern) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::SpamPattern).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SpamPattern).void)
      ).returns(::SpamPattern)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::SpamPattern).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::SpamPattern).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::SpamPattern)) }
    def second; end

    sig { returns(::SpamPattern) }
    def second!; end

    sig { returns(T.nilable(::SpamPattern)) }
    def second_to_last; end

    sig { returns(::SpamPattern) }
    def second_to_last!; end

    sig { returns(::SpamPattern) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::SpamPattern) }
    def take!; end

    sig { returns(T.nilable(::SpamPattern)) }
    def third; end

    sig { returns(::SpamPattern) }
    def third!; end

    sig { returns(T.nilable(::SpamPattern)) }
    def third_to_last; end

    sig { returns(::SpamPattern) }
    def third_to_last!; end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def inactive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def last_ip_patterns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def active; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def active=(value); end

    sig { returns(T::Boolean) }
    def active?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_before_last_save; end

    sig { returns(T.untyped) }
    def active_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def active_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def active_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_was; end

    sig { void }
    def active_will_change!; end

    sig { returns(::String) }
    def attribute_name; end

    sig { params(value: ::String).returns(::String) }
    def attribute_name=(value); end

    sig { returns(T::Boolean) }
    def attribute_name?; end

    sig { returns(T.nilable(::String)) }
    def attribute_name_before_last_save; end

    sig { returns(T.untyped) }
    def attribute_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def attribute_name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def attribute_name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def attribute_name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def attribute_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def attribute_name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def attribute_name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def attribute_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def attribute_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def attribute_name_was; end

    sig { void }
    def attribute_name_will_change!; end

    sig { returns(::String) }
    def class_name; end

    sig { params(value: ::String).returns(::String) }
    def class_name=(value); end

    sig { returns(T::Boolean) }
    def class_name?; end

    sig { returns(T.nilable(::String)) }
    def class_name_before_last_save; end

    sig { returns(T.untyped) }
    def class_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def class_name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def class_name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def class_name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def class_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def class_name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def class_name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def class_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def class_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def class_name_was; end

    sig { void }
    def class_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def comment; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def comment=(value); end

    sig { returns(T::Boolean) }
    def comment?; end

    sig { returns(T.nilable(::String)) }
    def comment_before_last_save; end

    sig { returns(T.untyped) }
    def comment_before_type_cast; end

    sig { returns(T::Boolean) }
    def comment_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def comment_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def comment_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def comment_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def comment_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def comment_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def comment_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def comment_previously_was; end

    sig { returns(T.nilable(::String)) }
    def comment_was; end

    sig { void }
    def comment_will_change!; end

    sig { returns(::Integer) }
    def false_positives; end

    sig { params(value: ::Integer).returns(::Integer) }
    def false_positives=(value); end

    sig { returns(T::Boolean) }
    def false_positives?; end

    sig { returns(T.nilable(::Integer)) }
    def false_positives_before_last_save; end

    sig { returns(T.untyped) }
    def false_positives_before_type_cast; end

    sig { returns(T::Boolean) }
    def false_positives_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def false_positives_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def false_positives_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def false_positives_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def false_positives_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def false_positives_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def false_positives_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def false_positives_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def false_positives_was; end

    sig { void }
    def false_positives_will_change!; end

    sig { returns(T::Boolean) }
    def flag; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def flag=(value); end

    sig { returns(T::Boolean) }
    def flag?; end

    sig { returns(T.nilable(T::Boolean)) }
    def flag_before_last_save; end

    sig { returns(T.untyped) }
    def flag_before_type_cast; end

    sig { returns(T::Boolean) }
    def flag_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def flag_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def flag_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def flag_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def flag_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def flag_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def flag_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def flag_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def flag_was; end

    sig { void }
    def flag_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_false_positive_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_false_positive_at=(value); end

    sig { returns(T::Boolean) }
    def last_false_positive_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_false_positive_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_false_positive_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_false_positive_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_false_positive_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_false_positive_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_false_positive_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_false_positive_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_false_positive_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_false_positive_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_false_positive_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_false_positive_at_was; end

    sig { void }
    def last_false_positive_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_matched_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_matched_at=(value); end

    sig { returns(T::Boolean) }
    def last_matched_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_matched_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_matched_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_matched_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_matched_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_matched_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_matched_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_matched_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_matched_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_matched_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_matched_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_matched_at_was; end

    sig { void }
    def last_matched_at_will_change!; end

    sig { returns(T::Boolean) }
    def log; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def log=(value); end

    sig { returns(T::Boolean) }
    def log?; end

    sig { returns(T.nilable(T::Boolean)) }
    def log_before_last_save; end

    sig { returns(T.untyped) }
    def log_before_type_cast; end

    sig { returns(T::Boolean) }
    def log_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def log_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def log_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def log_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def log_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def log_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def log_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def log_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def log_was; end

    sig { void }
    def log_will_change!; end

    sig { returns(::Integer) }
    def match_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def match_count=(value); end

    sig { returns(T::Boolean) }
    def match_count?; end

    sig { returns(T.nilable(::Integer)) }
    def match_count_before_last_save; end

    sig { returns(T.untyped) }
    def match_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def match_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def match_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def match_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def match_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def match_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def match_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def match_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def match_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def match_count_was; end

    sig { void }
    def match_count_will_change!; end

    sig { returns(::String) }
    def pattern; end

    sig { params(value: ::String).returns(::String) }
    def pattern=(value); end

    sig { returns(T::Boolean) }
    def pattern?; end

    sig { returns(T.nilable(::String)) }
    def pattern_before_last_save; end

    sig { returns(T.untyped) }
    def pattern_before_type_cast; end

    sig { returns(T::Boolean) }
    def pattern_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def pattern_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def pattern_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def pattern_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pattern_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def pattern_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def pattern_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pattern_previously_was; end

    sig { returns(T.nilable(::String)) }
    def pattern_was; end

    sig { void }
    def pattern_will_change!; end

    sig { returns(T::Boolean) }
    def queue; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def queue=(value); end

    sig { returns(T::Boolean) }
    def queue?; end

    sig { returns(T.nilable(T::Boolean)) }
    def queue_before_last_save; end

    sig { returns(T.untyped) }
    def queue_before_type_cast; end

    sig { returns(T::Boolean) }
    def queue_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def queue_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def queue_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def queue_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def queue_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def queue_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def queue_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def queue_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def queue_was; end

    sig { void }
    def queue_will_change!; end

    sig { void }
    def restore_active!; end

    sig { void }
    def restore_attribute_name!; end

    sig { void }
    def restore_class_name!; end

    sig { void }
    def restore_comment!; end

    sig { void }
    def restore_false_positives!; end

    sig { void }
    def restore_flag!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_last_false_positive_at!; end

    sig { void }
    def restore_last_matched_at!; end

    sig { void }
    def restore_log!; end

    sig { void }
    def restore_match_count!; end

    sig { void }
    def restore_pattern!; end

    sig { void }
    def restore_queue!; end

    sig { void }
    def restore_suspend!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_active; end

    sig { returns(T::Boolean) }
    def saved_change_to_active?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_attribute_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_attribute_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_class_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_class_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_comment; end

    sig { returns(T::Boolean) }
    def saved_change_to_comment?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_false_positives; end

    sig { returns(T::Boolean) }
    def saved_change_to_false_positives?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_flag; end

    sig { returns(T::Boolean) }
    def saved_change_to_flag?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_false_positive_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_false_positive_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_matched_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_matched_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_log; end

    sig { returns(T::Boolean) }
    def saved_change_to_log?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_match_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_match_count?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_pattern; end

    sig { returns(T::Boolean) }
    def saved_change_to_pattern?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_queue; end

    sig { returns(T::Boolean) }
    def saved_change_to_queue?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_suspend; end

    sig { returns(T::Boolean) }
    def saved_change_to_suspend?; end

    sig { returns(T::Boolean) }
    def suspend; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def suspend=(value); end

    sig { returns(T::Boolean) }
    def suspend?; end

    sig { returns(T.nilable(T::Boolean)) }
    def suspend_before_last_save; end

    sig { returns(T.untyped) }
    def suspend_before_type_cast; end

    sig { returns(T::Boolean) }
    def suspend_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def suspend_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def suspend_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def suspend_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def suspend_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def suspend_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def suspend_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def suspend_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def suspend_was; end

    sig { void }
    def suspend_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_attribute_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_class_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_comment?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_false_positives?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_flag?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_false_positive_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_matched_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_log?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_match_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pattern?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_queue?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_suspend?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def inactive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def last_ip_patterns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::SpamPattern } }

    sig { returns(T::Array[::SpamPattern]) }
    def to_a; end

    sig { returns(T::Array[::SpamPattern]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::SpamPattern } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::SpamPattern } }

    sig do
      params(
        records: T.any(::SpamPattern, T::Enumerable[T.any(::SpamPattern, T::Enumerable[::SpamPattern])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::SpamPattern, T::Enumerable[T.any(::SpamPattern, T::Enumerable[::SpamPattern])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::SpamPattern, T::Enumerable[T.any(::SpamPattern, T::Enumerable[::SpamPattern])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::SpamPattern]) }
    def load_target; end

    sig do
      params(
        records: T.any(::SpamPattern, T::Enumerable[T.any(::SpamPattern, T::Enumerable[::SpamPattern])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::SpamPattern, T::Enumerable[T.any(::SpamPattern, T::Enumerable[::SpamPattern])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::SpamPattern, T::Enumerable[T.any(::SpamPattern, T::Enumerable[::SpamPattern])])
      ).returns(T::Array[::SpamPattern])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::SpamPattern]) }
    def target; end

    sig { returns(T::Array[::SpamPattern]) }
    def to_a; end

    sig { returns(T::Array[::SpamPattern]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::SpamPattern } }

    sig { returns(T::Array[::SpamPattern]) }
    def to_a; end

    sig { returns(T::Array[::SpamPattern]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::SpamPattern } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

# frozen_string_literal: true

# Because Unicorn is such a brilliant piece of software, it wraps older,
# non-Rack versions of Rails in a Rack handler. That way Unicorn
# itself can target Rack and not have to worry about monkey patching
# Rails' dispatcher.
#
# This means we can do the same, and even more.
#
# Starting Rackhub locally:
#
# Unicorn:
#   $ unicorn_rails -c config/unicorn.rb

# Tweak environment
ENV["RACK_ENV"] ||= ENV["RAILS_ENV"]

# Load our Rails app and Rack wrapper
require File.expand_path("../config/environment", __FILE__)
require "rack/events"

require "rack/common_logger"

module Rack
  class CommonLogger
    def log(env, status, header, began_at)
      # Silence CommonLogger
    end
  end
end

# If possible, please add new middleware to the Rails middleware stack in
# config/application.rb or an environment-specific file in config/environments.
# This will ensure that behavior is consistently present in all environments.

# InvalidParametersMiddleware must be part of Rack config rather than the Rails middleware stack,
# because the exception it catches is generated by Rack before the Rails application
# is called.
use GitHub::InvalidParametersMiddleware

##
# Main GitHub Rails app
#
#   github.com, api.github.com

if GitHub.private_mode_enabled?
  map "/sessions/_auth_request_endpoint" do
    run GitHub::PrivateModeMiddleware
  end
end

map "/" do
  run GitHub::Application
end

if ENV["RACK_ENV"] != "development" || ENV["PRELOAD"]
  warmup do |app|
    client = Rack::MockRequest.new(app)
    client.get("/status")
    GC.start
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::NewsletterPreferenceChange`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::NewsletterPreferenceChange`.

class Hydro::Schemas::Github::V1::NewsletterPreferenceChange
  sig do
    params(
      experimental_arm: T.nilable(T.any(Symbol, Integer)),
      preference_choice: T.nilable(T.any(Symbol, Integer)),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      visitor_id: T.nilable(String),
      write_type: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(experimental_arm: nil, preference_choice: nil, user: nil, visitor_id: nil, write_type: nil); end

  sig { void }
  def clear_experimental_arm; end

  sig { void }
  def clear_preference_choice; end

  sig { void }
  def clear_user; end

  sig { void }
  def clear_visitor_id; end

  sig { void }
  def clear_write_type; end

  sig { returns(T.any(Symbol, Integer)) }
  def experimental_arm; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def experimental_arm=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def preference_choice; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def preference_choice=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end

  sig { returns(String) }
  def visitor_id; end

  sig { params(value: String).void }
  def visitor_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def write_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def write_type=(value); end
end

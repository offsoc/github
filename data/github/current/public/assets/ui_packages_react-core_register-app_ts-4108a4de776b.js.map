{"version":3,"file":"ui_packages_react-core_register-app_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/aria-live/aria-live.ts","ui/packages/document-metadata/document-metadata.ts","ui/packages/hydro-analytics/hydro-analytics.ts","ui/packages/react-core/app-routing-types.ts","ui/packages/react-core/deferred-registry.ts","ui/packages/react-core/prevent-autofocus.ts","ui/packages/react-core/react-app-registry.ts","ui/packages/react-core/use-title-manager.ts","ui/packages/react-core/use-navigator.ts","ui/packages/react-core/use-soft-nav-lifecycle.ts","ui/packages/react-core/use-scroll-restoration.ts","ui/packages/react-core/ClientEntry.tsx","ui/packages/react-core/use-navigation-focus.ts","ui/packages/react-core/ReactAppElement.tsx","ui/packages/react-core/register-app.ts","ui/packages/react-core/route-state-map-context.ts","ui/packages/react-core/use-app-payload.ts","ui/packages/react-core/use-current-route-state.ts","ui/packages/react-core/use-route-payload.ts","ui/packages/react-profiling-mode/src/index.ts","ui/packages/safe-storage/session-storage.ts","ui/packages/soft-nav/events.ts","ui/packages/soft-nav/state.ts","ui/packages/soft-nav/states.ts","ui/packages/soft-nav/stats.ts","ui/packages/soft-nav/utils.ts","ui/packages/use-layout-effect/use-layout-effect.ts","ui/packages/react-core/AppWrapper.tsx","ui/packages/react-core/use-publish-payload.ts","ui/packages/react-core/AppRouter.tsx","ui/packages/react-core/ErrorBoundary.tsx","ui/packages/react-core/ErrorPage.tsx","ui/packages/react-core/ReactBaseElement.tsx"],"sourcesContent":["import {ssrSafeDocument} from '@github-ui/ssr-utils'\nimport {isFeatureEnabled} from '@github-ui/feature-flags'\nimport {\n  announce as liveRegionAnnounce,\n  announceFromElement as liveRegionAnnounceFromElement,\n} from '@primer/live-region-element'\n\nexport interface ElementWithAriaNotify extends Element {\n  ariaNotify: (\n    message: string,\n    options?: {interrupt?: 'none' | 'pending' | 'all'; priority?: 'none' | 'important'},\n  ) => void\n}\n\n/**\n * Troubleshooting guide for aria-live regions available on the Hub\n * - https://thehub.github.com/epd/engineering/dev-practicals/frontend/accessibility/readiness-routine/screenreaders/live-regions-and-focus-management-techniques/#why-isnt-my-live-region-working-as-i-expect\n */\n\n// Announce an element's text to the screen reader.\nexport function announceFromElement(el: HTMLElement, options?: {assertive?: boolean; element?: HTMLElement}) {\n  if (isFeatureEnabled('arianotify_comprehensive_migration')) {\n    announce(getTextContent(el), {...options, element: options?.element ?? el})\n  } else if (isFeatureEnabled('primer_live_region_element') && options?.element === undefined) {\n    liveRegionAnnounceFromElement(el, {\n      politeness: options?.assertive ? 'assertive' : 'polite',\n    })\n  } else {\n    announce(getTextContent(el), options)\n  }\n}\n\n// Announce message update to screen reader.\n// Note: Use caution when using this function while a dialog is active.\n// If the message is updated while the dialog is open, the screen reader may not announce the live region.\n// For more information, view the document on dialog and live region support: https://github.com/github/accessibility/blob/main/docs/dialog-live-region-support.md\nexport function announce(message: string, options?: {assertive?: boolean; element?: HTMLElement}) {\n  const {assertive, element} = options ?? {}\n\n  if (isFeatureEnabled('arianotify_comprehensive_migration') && 'ariaNotify' in Element.prototype) {\n    ;((element || document.body) as Element as ElementWithAriaNotify).ariaNotify(message, {\n      interrupt: options?.assertive ? 'all' : 'none',\n    })\n  } else if (isFeatureEnabled('primer_live_region_element') && element === undefined) {\n    liveRegionAnnounce(message, {\n      politeness: assertive ? 'assertive' : 'polite',\n    })\n  } else {\n    setContainerContent(message, assertive, element)\n  }\n}\n\n// Set aria-live container to message.\nfunction setContainerContent(message: string, assertive?: boolean, element?: HTMLElement) {\n  const getQuerySelector = () => {\n    return assertive ? '#js-global-screen-reader-notice-assertive' : '#js-global-screen-reader-notice'\n  }\n  const container = element ?? ssrSafeDocument?.querySelector(getQuerySelector())\n  if (!container) return\n  if (container.textContent === message) {\n    /* This is a hack due to the way the aria live API works.\n    A screen reader will not read a live region again\n    if the text is the same. Adding a space character tells\n    the browser that the live region has updated,\n    which will cause it to read again, but with no audible difference. */\n    container.textContent = `${message}\\u00A0`\n  } else {\n    container.textContent = message\n  }\n}\n\n// Gets the trimmed text content of an element.\nfunction getTextContent(el: HTMLElement): string {\n  // innerText does not contain hidden text\n  /* eslint-disable-next-line github/no-innerText */\n  return (el.getAttribute('aria-label') || el.innerText || '').trim()\n}\n","import {announce} from '@github-ui/aria-live'\nimport {ssrSafeDocument} from '@github-ui/ssr-utils'\n\nexport function setTitle(title: string) {\n  if (!ssrSafeDocument) return\n\n  const oldTitle = ssrSafeDocument.querySelector('title')\n  const newTitle = ssrSafeDocument.createElement('title')\n  newTitle.textContent = title\n\n  if (!oldTitle) {\n    ssrSafeDocument.head.appendChild(newTitle)\n    announce(title)\n  } else if (oldTitle.textContent !== title) {\n    // only replace and announce the title if it's changed\n    oldTitle.replaceWith(newTitle)\n    announce(title)\n  }\n}\n","import {AnalyticsClient, getOptionsFromMeta} from '@github/hydro-analytics-client'\nimport type {Context} from '@github/hydro-analytics-client'\nimport safeStorage from '@github-ui/safe-storage'\nimport {isStaff} from '@github-ui/stats'\nconst {getItem} = safeStorage('localStorage')\n\ndeclare const process: {\n  env: {\n    NODE_ENV: string\n  }\n}\n\nconst dimensionPrefix = 'dimension_'\nlet hydroAnalyticsClient: AnalyticsClient | undefined\n\nconst MARKETING_PARAMS = ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content', 'scid']\n\ntry {\n  const options = getOptionsFromMeta('octolytics')\n\n  // Remove the base context because meta tags can change as the user navigates with Turbo\n  // These will be folded in for each event & page view\n  delete options.baseContext\n\n  hydroAnalyticsClient = new AnalyticsClient(options)\n} catch (_) {\n  // Failed to get options from meta tags.  This most likely means analytics are disabled.\n}\n\nfunction extendBaseContext(context?: Context) {\n  const baseContext = getOptionsFromMeta('octolytics').baseContext || {}\n\n  if (baseContext) {\n    delete baseContext.app_id\n    delete baseContext.event_url\n    delete baseContext.host\n\n    for (const [key, value] of Object.entries(baseContext)) {\n      // some octolytics meta tags are prefixed with dimension-, which we don't need with the new hydro-analytics-client\n      if (key.startsWith(dimensionPrefix)) {\n        baseContext[key.replace(dimensionPrefix, '')] = value\n        delete baseContext[key]\n      }\n    }\n  }\n\n  const visitorMeta = document.querySelector<HTMLMetaElement>('meta[name=visitor-payload]')\n  if (visitorMeta) {\n    const visitorHash = JSON.parse(atob(visitorMeta.content))\n    Object.assign(baseContext, visitorHash)\n  }\n\n  const urlParams = new URLSearchParams(window.location.search)\n  for (const [key, value] of urlParams) {\n    if (MARKETING_PARAMS.includes(key.toLowerCase())) {\n      baseContext[key] = value\n    }\n  }\n\n  // Include additional context from the page\n  baseContext.staff = isStaff().toString()\n\n  return Object.assign(baseContext, context)\n}\n\nexport function sendPageView(context?: Context) {\n  hydroAnalyticsClient?.sendPageView(extendBaseContext(context))\n}\n\nexport function sendEvent(type: string, context: Record<string, string | number | boolean | undefined | null> = {}) {\n  const service = document.head?.querySelector<HTMLMetaElement>('meta[name=\"current-catalog-service\"]')?.content\n\n  const cleanContext: Context = service ? {service} : {}\n\n  for (const [key, value] of Object.entries(context)) {\n    if (value !== undefined && value !== null) {\n      cleanContext[key] = `${value}`\n    }\n  }\n\n  if (hydroAnalyticsClient) {\n    const typeWithFallback = type || 'unknown'\n    const fullContext = extendBaseContext(cleanContext)\n    hydroAnalyticsClient.sendEvent(typeWithFallback, extendBaseContext(cleanContext))\n\n    if (process.env.NODE_ENV === 'development') {\n      debugSendEvent(typeWithFallback, fullContext)\n    }\n  }\n}\n\nexport function stringifyObjectValues(obj: object) {\n  return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, JSON.stringify(v)]))\n}\n\nfunction debugSendEvent(type: string, context: Context) {\n  if (getItem('hydro-debug.send-event') === 'true') {\n    // eslint-disable-next-line no-console\n    console.group('[hydro-debug.send-event]')\n    // eslint-disable-next-line no-console\n    console.log({type, context})\n    // eslint-disable-next-line no-console\n    console.groupEnd()\n  }\n}\n","import type React from 'react'\nimport type {Location, Params} from 'react-router-dom'\n\nexport interface PageError {\n  httpStatus?: number\n  type: 'fetchError' | 'httpError' | 'badResponseError'\n}\n\nexport type ChildRoute = {path: string; Component: React.ComponentType; children?: ChildRoute[]}\n/**\n * All the information the framework needs about a route.\n *\n * Note: you most often want to use one of the route registration helpers like jsonRoute or relayRoute\n */\nexport interface RouteRegistration<TRouteData = unknown, TEmbeddedData = unknown> {\n  /**\n   * The path pattern to match against.\n   * @see {@link https://reactrouter.com/en/main/route/route#path}\n   */\n  path: string\n\n  /**\n   * The component to render when the route matches\n   */\n  Component: React.ComponentType\n\n  /**\n   * A function mapping from the initial embedded data on a page to the data for that route.\n   * JSON-island routes might simply pass through the embedded data, while other routes may\n   * need to construct parts of the data based on provided information about the request. Note\n   * that this function must return the data type and not a promise, as that would block the\n   * initial render of the app.\n   */\n  loadFromEmbeddedData: (initialDataArgs: {\n    embeddedData: TEmbeddedData\n    location: Location\n    pathParams: Params<string>\n  }) => {data: TRouteData; title: string}\n\n  /**\n   * A function that returns a promise for the data to be loaded for this route.\n   *\n   * Note: this was Renamed from `loader` to disambiguate from React Router `loader`s.\n   */\n  coreLoader: (loaderArgs: {location: Location; pathParams: Params<string>}) => Promise<LoaderResult<TRouteData>>\n\n  /**\n   * The transition type for this route.\n   * @see {@link TransitionType}\n   */\n  transitionType?: TransitionType\n\n  children?: ChildRoute[]\n}\n\n/**\n * The possible results to be returned by a loader function.\n */\nexport type LoaderResult<TRouteData> =\n  | LoaderResultLoaded<TRouteData>\n  // TODO: when we add Relay support, we'll likely want to use LoaderResultPrepared:\n  // | LoaderResultPrepared<TRouteData>\n  | LoaderResultRedirect\n  | LoaderResultError\n  | LoaderResultRouteHandledError\n\n/**\n * When the route wants to be shown and the primary data for the page is ready for render.\n */\nexport interface LoaderResultLoaded<TRouteData> {\n  type: 'loaded'\n  data: TRouteData\n  title: string\n}\n\n/**\n * When the route wants to be shown but is not yet fully loaded. This will be used by Relay routes, and routes that\n * want to manage their own loading state.\n */\n// interface LoaderResultPrepared<TRouteData> {\n//   type: 'prepared'\n//   data?: TRouteData\n//   finalResult: Promise<LoaderResult<TRouteData>>\n// }\n\ninterface LoaderResultRedirect {\n  type: 'redirect'\n  url: string\n}\n\ninterface LoaderResultError {\n  type: 'error'\n  error: PageError\n}\n\n/**\n * This is a special case of a loader result that is used when an error occurs, but it should be handled by the route\n * itself and not the framework.\n */\ninterface LoaderResultRouteHandledError {\n  type: 'route-handled-error'\n  error: PageError\n}\n\n/**\n * The transition type defines whether, when soft navigating to this route, the framework begins:\n *  - FETCH_THEN_TRANSITION => (default) rendering the page after a response has been received for the corresponding fetch of JSON\n *  - TRANSITION_WHILE_FETCHING => rendering the page before a response has been received for the corresponding fetch of JSON\n *  - TRANSITION_WITHOUT_FETCH => rendering the page without a fetch of JSON\n */\nexport const enum TransitionType {\n  FETCH_THEN_TRANSITION = 'fetch-then-transition',\n  TRANSITION_WHILE_FETCHING = 'transition-while-fetch',\n  TRANSITION_WITHOUT_FETCH = 'transition-without-fetch',\n}\n","export class DeferredRegistry<T> {\n  private registrationEntries: Record<\n    string,\n    {\n      promise: Promise<T>\n      resolve?: (r: T) => void\n    }\n  > = {}\n\n  public register(name: string, registration: T) {\n    const entry = this.registrationEntries[name]\n    if (entry) {\n      entry.resolve?.(registration)\n    } else {\n      this.registrationEntries[name] = {\n        promise: Promise.resolve(registration),\n      }\n    }\n  }\n\n  public getRegistration(name: string): Promise<T> {\n    this.registrationEntries[name] ||= new Deferred()\n    return this.registrationEntries[name].promise\n  }\n}\n\nclass Deferred<T> {\n  declare promise\n  declare resolve: (r: T) => void\n\n  constructor() {\n    this.promise = new Promise<T>(resolve => {\n      this.resolve = resolve\n    })\n  }\n}\n","export const PREVENT_AUTOFOCUS_KEY = '__gh__react-core-preventAutofocus'\n","import {DeferredRegistry} from './deferred-registry'\nimport type {RouteRegistration} from './app-routing-types'\n\nexport interface AppRegistration {\n  App?: React.ComponentType<{children?: React.ReactNode}>\n  routes: RouteRegistration[]\n}\n\nexport type AppRegistrationFn = () => AppRegistration\n\nexport const appRegistryFactory = new DeferredRegistry<AppRegistrationFn>()\n\nexport async function getReactApp(appName: string) {\n  const factory = await appRegistryFactory.getRegistration(appName)\n  return factory()\n}\n","import {useEffect, useRef} from 'react'\nimport type {PageError} from './app-routing-types'\nimport {setTitle} from '@github-ui/document-metadata'\nimport type {Location} from 'react-router-dom'\nimport type {RouteState} from './route-state'\n\nexport const isHashNav = (current: Location | null, target: Location | null) => {\n  if (current === null || target === null) return false\n  return current.pathname === target.pathname && current.search === target.search && Boolean(target.hash)\n}\n\nexport function useTitleManager(currentRouteState: RouteState | null, error: PageError | null, location: Location) {\n  const previousLocation = useRef<Location | null>(null)\n\n  useEffect(() => {\n    if (!previousLocation.current) {\n      previousLocation.current = location\n    }\n\n    if (!isHashNav(previousLocation.current, location) && (error || currentRouteState)) {\n      if (error) {\n        const errorTitle = getTitleForError(error)\n        setTitle(errorTitle)\n      } else if (currentRouteState?.type === 'loaded') {\n        // Some of our React applications manage their own title,\n        // so we only set the title if it's present in the payload\n        currentRouteState.title && setTitle(addGitHubToTitle(currentRouteState.title))\n      }\n    }\n\n    if (previousLocation.current?.key !== location.key) {\n      previousLocation.current = location\n    }\n  }, [error, currentRouteState, location])\n}\n\nconst getTitleForError = (error: PageError) => {\n  const innerTitle =\n    error.httpStatus === 404\n      ? '404 Page not found'\n      : error.httpStatus === 500\n        ? '500 Internal server error'\n        : error.httpStatus\n          ? `Error ${error.httpStatus}`\n          : 'Error'\n  return addGitHubToTitle(innerTitle)\n}\n\nfunction addGitHubToTitle(title: string) {\n  // This matches Rails-generated HTML where \" · GitHub\" is only added to the title for logged out users\n  // Here's the original PR that added that behavior: https://github.com/github/github/pull/2899\n  if (document.body.classList.contains('logged-out')) return `${title} · GitHub`\n  return title\n}\n","import {startSoftNav} from '@github-ui/soft-nav/state'\nimport {ssrSafeHistory} from '@github-ui/ssr-utils'\nimport type {AgnosticRouteMatch, History} from '@remix-run/router'\nimport {startTransition, useCallback, useRef, useState} from 'react'\nimport type {Location} from 'react-router-dom'\nimport {matchRoutes} from 'react-router-dom'\nimport {TransitionType, type PageError, type RouteRegistration} from './app-routing-types'\nimport type {EmbeddedData} from './embedded-data-types'\nimport type {AppRegistration} from './react-app-registry'\nimport type {RouteState} from './route-state'\nimport {isHashNav} from './use-title-manager'\n\ntype Key = Location['key']\ntype Update = Parameters<Parameters<History['listen']>[0]>[0]\n\n/**\n * A map from location key to route data.\n */\nexport type RouteStateMap = Record<Key, RouteState>\n\ninterface AppNavigationState {\n  location: Location\n  error: PageError | null\n  navigateOnError: boolean\n  routeStateMap: RouteStateMap\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  appPayload: any\n  isLoading: boolean\n}\n\ninterface AppNavigationMutations {\n  handleHistoryUpdate: (update: Update) => void\n}\n\ntype Result = [AppNavigationState, AppNavigationMutations]\n\ntype AppNavigationStateCallback = (\n  state: AppNavigationState | ((prevState: AppNavigationState) => AppNavigationState),\n) => void\n\ninterface ManagerState {\n  /**\n   * The location the app should render (and when there is a pendingNavigation, this is the \"old\" location)\n   */\n  location: Location\n\n  /**\n   * The error with the current location. TODO: should we be including this in responses?\n   */\n  error: PageError | null\n\n  /**\n   * Whether the app should navigate to the route page when there is an error\n   */\n  navigateOnError: boolean\n\n  /**\n   * Map from history-provided location key to a data blob for that page:\n   */\n  routeStateMap: RouteStateMap\n\n  /**\n   * Data for the app provided by the controller (independent of the location). This data is not scoped to a single\n   * route within the React app and currently has no mechanism to be updated.\n   */\n  appPayload: unknown\n\n  /**\n   * The current navigation in progress.\n   */\n  pendingNavigation: {\n    update: Update\n  } | null\n\n  /**\n   * Counter indicating how many turbo navs happened. This will be used to know if a navigation was managed by turbo\n   * when navigating using history.\n   */\n  turboCount: number\n}\n\n/**\n * Navigator is a state machine that handles navigation events and fetch results. State is pushed back into react via\n * the setAppNavigationState callback passed to the constructor.\n */\nclass Navigator {\n  state: ManagerState\n  private appNavigationStateCallback?: AppNavigationStateCallback\n\n  constructor(\n    initialLocation: Location,\n    embeddedData: unknown,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    appPayload: any,\n    private routes: AppRegistration['routes'],\n  ) {\n    const matchedRoute = this.matchLocation(initialLocation)\n    if (!matchedRoute) {\n      throw new Error(`No route found for initial location: ${initialLocation.pathname} in [${this.getRoutesText()}]`)\n    }\n    const {data, title} = matchedRoute.route.loadFromEmbeddedData({\n      embeddedData,\n      location: initialLocation,\n      pathParams: matchedRoute.params,\n    })\n\n    this.state = {\n      location: initialLocation,\n      routeStateMap: {[initialLocation.key]: {type: 'loaded', data, title}},\n      appPayload,\n      pendingNavigation: null,\n      error: null,\n      navigateOnError: false,\n      turboCount: ssrSafeHistory?.state?.turboCount,\n    }\n  }\n\n  setAppNavigationStateCallback(appNavigationStateCallback: AppNavigationStateCallback) {\n    this.appNavigationStateCallback = appNavigationStateCallback\n  }\n\n  // On calls to `update` we update internal state _and_ call the setAppNavigationState callback passed to our constructor\n  update(updates: Partial<ManagerState>) {\n    Object.assign(this.state, updates) // we could make this a deepmerge if it proved helpful\n\n    const appNavigationState = this.getAppNavigationState()\n    this.appNavigationStateCallback?.(appNavigationState)\n  }\n\n  getAppNavigationState(): AppNavigationState {\n    const {location, error, navigateOnError, routeStateMap: routeStateMap, appPayload, pendingNavigation} = this.state\n    return {\n      location,\n      error,\n      navigateOnError,\n      routeStateMap,\n      appPayload,\n      isLoading: Boolean(pendingNavigation),\n    }\n  }\n\n  async handleHistoryUpdate(update: Update) {\n    // If the `turboCount` is different, it means that the navigation was managed by Turbo so Turbo should\n    // also do the restore.\n    if (update.action === 'POP' && history.state?.turboCount !== this.state.turboCount) return\n    // Do not load any new data if we are simply setting a hash location\n    if (this.isHashNavigation(update)) {\n      this.navigateWithCurrentPayload(update)\n      return\n    }\n\n    // We don't want to trigger soft navigations when using the back/forward buttons.\n    if (update.action !== 'POP') startSoftNav('react')\n\n    // TODO: check for and cancel a pending navigation\n    // TODO: make sure this isn't the current page?\n    if (this.state.routeStateMap[update.location.key] !== undefined) {\n      this.navigateFromHistory(update)\n    } else {\n      const matchedRoute = this.matchLocation(update.location)\n      if (!matchedRoute) {\n        throw new Error('handleHistoryUpdate should only be called for matching routes')\n      }\n\n      if (matchedRoute.route.transitionType === TransitionType.TRANSITION_WHILE_FETCHING) {\n        this.navigateWithoutPayload(update)\n      }\n      if (matchedRoute.route.transitionType === TransitionType.TRANSITION_WITHOUT_FETCH) {\n        this.navigateWithoutPayload(update)\n        return\n      }\n\n      this.enterLoadingState(update)\n\n      const loaderResult = await matchedRoute.route.coreLoader({\n        location: update.location,\n        pathParams: matchedRoute.params,\n      })\n\n      // this update is no longer the latest pending navigation, so we can ignore the result\n      if (update.location !== this.state.pendingNavigation?.update.location) {\n        return\n      }\n\n      if (history.state && update.action !== 'POP') {\n        const {turbo, ...state} = history.state\n\n        // When using React to navigate, we don't want Turbo to set restorationIdentifiers. Without\n        // the identifier, Turbo won't try to restore the page and cause an unwanted request.\n        history.replaceState({...state, skipTurbo: true}, '', location.href)\n      }\n\n      switch (loaderResult.type) {\n        case 'loaded':\n          this.leaveLoadingStateWithRouteData(update, loaderResult.data, loaderResult.title)\n          break\n        case 'error':\n          this.leaveLoadingStateWithError(update, loaderResult.error, false)\n          break\n        case 'redirect':\n          // At this point, window.history.pushState will have already been called\n          // with the pre-redirect URL. So we want to (a) ensure that URL doesn't stay\n          // in history and (b) force a hard navigation. We can achieve that by calling\n          // window.location.replace.\n\n          // NOTE: even if `response.url` is redirecting within this app, we'll still\n          // force a hard navigation. We might consider supporting a soft navigation to\n          // some redirected URLs if it turns out to be common enough that the better UX\n          // is worth the increased code complexity.\n\n          // Redirects don't preserve hash, so we need to manually add it back\n          window.location.replace(loaderResult.url + location.hash)\n          break\n        case 'route-handled-error':\n          this.leaveLoadingStateWithError(update, loaderResult.error, true)\n          break\n        default:\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          throw new Error(`Unexpected loader result type: ${(loaderResult as any).type}`)\n      }\n    }\n  }\n\n  matchLocation(location: Location): AgnosticRouteMatch<string, RouteRegistration<unknown, unknown>> | undefined {\n    return matchLocation(this.routes, location)\n  }\n\n  isHashNavigation(update: Update) {\n    const current = this.state.location\n    const target = update.location\n\n    return isHashNav(current, target)\n  }\n\n  //\n  // State transitions\n  //\n\n  navigateFromHistory(update: Update) {\n    this.update({\n      location: update.location,\n      pendingNavigation: null,\n      error: null,\n    })\n  }\n\n  enterLoadingState(update: Update) {\n    this.update({pendingNavigation: {update}})\n  }\n\n  leaveLoadingStateWithError(update: Update, error: PageError, navigateOnError: boolean) {\n    this.update({location: update.location, error, pendingNavigation: null, navigateOnError})\n  }\n\n  navigateWithoutPayload(update: Update) {\n    this.update({location: update.location, error: null})\n  }\n\n  // when navigating with a hash, we don't want to fetch any new data\n  // however, react router will give us a bad location.key:\n  // 1. if the navigation was via RR Link, the key will be a new hash that we don't have in our routeStateMap\n  // 2. if the navigation was via the browser, the key will be the string \"default\"\n  // so we need to create a new key and copy the response from the current location\n  navigateWithCurrentPayload(update: Update) {\n    const currentLocationKey = this.state.location.key\n    const updateLocationKey = currentLocationKey + update.location.hash\n    const location = {...update.location, key: updateLocationKey}\n    const routeStateMap = {\n      ...this.state.routeStateMap,\n      [updateLocationKey]: this.state.routeStateMap[currentLocationKey]!,\n    }\n\n    this.update({...update, location, routeStateMap, error: null})\n  }\n\n  leaveLoadingStateWithRouteData(update: Update, data: unknown, title: string) {\n    this.update({\n      location: update.location,\n      pendingNavigation: null,\n      routeStateMap: data\n        ? {...this.state.routeStateMap, [update.location.key]: {type: 'loaded', data, title}}\n        : this.state.routeStateMap,\n      error: null,\n    })\n  }\n\n  private getRoutesText(): string {\n    return this.routes.map(route => route.path).join(', ')\n  }\n}\n\nexport function matchLocation(\n  routes: Array<RouteRegistration<unknown, unknown>>,\n  location: Location,\n): AgnosticRouteMatch<string, RouteRegistration<unknown, unknown>> | undefined {\n  return matchRoutes(routes, location.pathname)?.[0]\n}\n\nexport function useNavigator({\n  initialLocation,\n  embeddedData,\n  routes,\n}: {\n  initialLocation: Location\n  appName: string\n  embeddedData: EmbeddedData\n  routes: AppRegistration['routes']\n}): Result {\n  // because we want to keep the navigator in state, with a reference to the callback, and also with the state set on\n  // the first render, we do a little dance where we first create the navigator, then use create the state, then use\n  // a ref to only set the callback on the navigator once:\n\n  const [navigator] = useState((): Navigator => {\n    const {appPayload, ...embeddedRouteData} = embeddedData\n    return new Navigator(\n      initialLocation,\n      {...embeddedRouteData, enabled_features: appPayload?.enabled_features ? appPayload.enabled_features : {}}, // TODO: is it safe to assume the island data is associated with this location?\n      appPayload,\n      routes,\n    )\n  })\n\n  const [appNavigationState, setAppNavigationState] = useState<AppNavigationState>((): AppNavigationState => {\n    return navigator.getAppNavigationState()\n  })\n\n  const hasSetCallback = useRef(false)\n  if (!hasSetCallback.current) {\n    navigator.setAppNavigationStateCallback(setAppNavigationState)\n    hasSetCallback.current = true\n  }\n\n  const handleHistoryUpdate = useCallback(\n    (update: Update) => {\n      startTransition(() => {\n        navigator.handleHistoryUpdate(update)\n      })\n    },\n    [navigator],\n  )\n\n  return [appNavigationState, {handleHistoryUpdate}]\n}\n","import type {Location} from 'react-router-dom'\nimport type {PageError} from './app-routing-types'\nimport {useEffect, useRef} from 'react'\nimport {sendStats} from '@github-ui/stats'\nimport {sendPageView} from '@github-ui/hydro-analytics'\nimport {inSoftNav} from '@github-ui/soft-nav/utils'\nimport {failSoftNav, renderedSoftNav, succeedSoftNav} from '@github-ui/soft-nav/state'\n\nexport const useSoftNavLifecycle = (\n  location: Location,\n  isLoading: boolean,\n  error: PageError | null,\n  reactAppName: string,\n) => {\n  // Send page view analytics when the route changes\n  useEffect(() => {\n    if (isLoading) {\n      // we don't want to send the page view until the page is done loading\n      return\n    }\n\n    // location.key is used to trigger this effect when it changes, but is not used in the effect\n    void location.key\n\n    // Note: this will cause a duplicate page view stat on the initial page load.  Another will be sent\n    // _without the app name_ when turbo finishes loading in hydro-analytics-pageview.ts\n    // Note: sendPageView will pull the current location from the window.location\n    // Depending on changes we make to this file, it's possible we could trigger this at a point when the href is not\n    // aligned with what react currently has rendered to the page.  We may eventually want to add an override option\n    // to pass in the href we have here.\n    sendPageView({\n      react_app: reactAppName,\n    })\n  }, [reactAppName, location.key, isLoading])\n\n  const lastRecordedKey = useRef<string | undefined>(undefined)\n  useEffect(() => {\n    if (!isLoading && (lastRecordedKey.current === undefined || lastRecordedKey.current !== location.key)) {\n      // At this point, React is done rendering, so we can end the navigation\n      if (inSoftNav()) {\n        finishSoftNav(error)\n      } else {\n        finishHardNav(error)\n      }\n\n      lastRecordedKey.current = location.key\n    }\n  }, [location.key, isLoading, error])\n}\n\nconst finishSoftNav = (error: PageError | null) => {\n  if (error) {\n    failSoftNav()\n  } else {\n    renderedSoftNav()\n    succeedSoftNav()\n  }\n}\n\nconst finishHardNav = (error: PageError | null) => {\n  // We don't want to measure pages with errors.\n  if (error) return\n\n  const navDuration = getReactNavDuration()\n\n  if (!navDuration) return\n\n  sendStats({\n    requestUrl: window.location.href,\n    distributionKey: 'REACT_NAV_DURATION',\n    distributionValue: Math.round(navDuration),\n    distributionTags: ['REACT_NAV_HARD'],\n  })\n}\n\nconst reactNavDurationStat = 'react_nav_duration'\nfunction getReactNavDuration() {\n  window.performance.measure(reactNavDurationStat)\n  const measures = window.performance.getEntriesByName(reactNavDurationStat)\n  const measure = measures.pop()\n  return measure ? measure.duration : null\n}\n","import {useLayoutEffect} from '@github-ui/use-layout-effect'\nimport {ssrSafeWindow} from '@github-ui/ssr-utils'\nimport type {Position} from '@github/turbo/dist/types/core/types'\nimport {noop} from '@github-ui/noop'\n\nconst scrollMap = new Map<string, Position>()\n\nlet installed = false\n\nasync function saveScrollPosition() {\n  const {session} = await import('@github/turbo')\n\n  window.addEventListener('popstate', () => {\n    const {scrollPosition} =\n      session.history.getRestorationDataForIdentifier(session.history.restorationIdentifier) || {}\n    if (!scrollPosition) return\n    scrollMap.set(window.location.href, scrollPosition)\n  })\n}\n\nexport function installScrollRestoration() {\n  if (ssrSafeWindow) {\n    if (installed) return\n    saveScrollPosition()\n    installed = true\n  }\n}\n\nfunction useScrollRestorationInBrowser() {\n  useLayoutEffect(() => {\n    const href = window.location.href\n    const scroll = scrollMap.get(href)\n\n    if (!scroll) return\n    const timeout = setTimeout(() => {\n      window.scrollTo(scroll.x, scroll.y)\n    }, 0)\n    return () => {\n      clearTimeout(timeout)\n    }\n  })\n}\n\n/**\n * This hook restores turbo-scroll-restoration position AFTER the page has been rendered.\n * Otherwise, turbo was restoring scroll on the page before react had rendered.\n */\nexport const useScrollRestoration = ssrSafeWindow ? useScrollRestorationInBrowser : noop\n\nif (typeof afterEach === 'function') {\n  afterEach(() => {\n    scrollMap.clear()\n    installed = false\n  })\n}\n","import {useNavigator} from './use-navigator'\nimport {useLayoutEffect} from '@github-ui/use-layout-effect'\nimport {Router} from 'react-router-dom'\nimport type {History, Location} from '@remix-run/router'\nimport {ErrorBoundary} from './ErrorBoundary'\nimport type {EmbeddedData} from './embedded-data-types'\nimport type {AppRegistration} from './react-app-registry'\nimport {BaseProviders} from './BaseProviders'\nimport {CommonElements} from './CommonElements'\nimport {useSoftNavLifecycle} from './use-soft-nav-lifecycle'\nimport {useNavigationFocus} from './use-navigation-focus'\nimport {useTitleManager} from './use-title-manager'\nimport {useScrollRestoration, installScrollRestoration} from './use-scroll-restoration'\nimport type {AppComponentType} from './AppWrapper'\nimport {AppRouter} from './AppRouter'\n\ninstallScrollRestoration()\n\ninterface Props {\n  appName: string\n  initialLocation: Location<unknown>\n  embeddedData: EmbeddedData\n  routes: AppRegistration['routes']\n  App?: AppComponentType\n  wasServerRendered: boolean\n  ssrError?: HTMLScriptElement\n  history: History\n}\n\nexport function ClientEntry({\n  appName,\n  initialLocation,\n  history,\n  embeddedData,\n  routes,\n  App,\n  wasServerRendered,\n  ssrError,\n}: Props) {\n  // We create our \"app\" here. The app is a state machine that lets you dispatch a history update\n  // and gives you a resolved location (after e.g., loading, redirects, etc.)\n  const [{location, error, routeStateMap, appPayload, navigateOnError, isLoading}, {handleHistoryUpdate}] =\n    useNavigator({\n      initialLocation,\n      appName,\n      embeddedData,\n      routes,\n    })\n\n  useTitleManager(routeStateMap[location.key]!, error, location)\n  useNavigationFocus(isLoading, location)\n  useSoftNavLifecycle(location, isLoading, error, appName)\n  useScrollRestoration()\n\n  // When we get a history update, we send it to our app via handleHistoryUpdate\n  // Note, we only want this to run in the browser to avoid SSR warnings about useLayoutEffect\n  useLayoutEffect(() => {\n    const unlisten = history.listen(handleHistoryUpdate)\n    return unlisten\n  }, [history, handleHistoryUpdate])\n\n  return (\n    <BaseProviders appName={appName} wasServerRendered={wasServerRendered}>\n      <ErrorBoundary>\n        <AppRouter\n          App={App}\n          appPayload={appPayload}\n          error={error}\n          history={history}\n          location={location}\n          navigateOnError={navigateOnError}\n          Router={Router}\n          routes={routes}\n          routeStateMap={routeStateMap}\n        >\n          <CommonElements ssrError={ssrError} />\n        </AppRouter>\n      </ErrorBoundary>\n    </BaseProviders>\n  )\n}\n\ntry{ ClientEntry.displayName ||= 'ClientEntry' } catch {}","import type {Location} from 'react-router-dom'\nimport {useEffect, useRef} from 'react'\nimport {PREVENT_AUTOFOCUS_KEY} from './prevent-autofocus'\n\nexport function useNavigationFocus(isLoading: boolean, location: Location) {\n  // focus on navigations:\n  const lastFocusedPath = useRef<string | undefined>(undefined)\n  const state = useRef(location.state)\n  useEffect(() => {\n    state.current = location.state\n  })\n  useEffect(() => {\n    // we don't want to focus when only the hash changes\n    const currentPath = location.pathname + location.search\n    // initially this is undefined because we don't want to focus on the initial page load\n    if (lastFocusedPath.current === undefined) {\n      lastFocusedPath.current = currentPath\n    } else if (lastFocusedPath.current !== currentPath) {\n      if (!isLoading) {\n        if (!autofocusPrevented(state.current)) {\n          let focusElement = document.querySelector<HTMLElement>('[data-react-autofocus]')\n          if (!focusElement) {\n            focusElement = document.querySelector<HTMLElement>('react-app h1')\n            if (focusElement && !focusElement.hasAttribute('tabindex')) {\n              focusElement.setAttribute('tabindex', '-1')\n            }\n          }\n          focusElement?.focus()\n        }\n\n        lastFocusedPath.current = currentPath\n      }\n    }\n  }, [isLoading, location.pathname, location.search])\n}\n\nfunction autofocusPrevented(state: unknown) {\n  return (\n    typeof state === 'object' &&\n    state !== null &&\n    PREVENT_AUTOFOCUS_KEY in state &&\n    state[PREVENT_AUTOFOCUS_KEY] === true\n  )\n}\n","import {controller} from '@github/catalyst'\nimport {ClientEntry} from './ClientEntry'\nimport {getReactApp} from './react-app-registry'\nimport type {EmbeddedData} from './embedded-data-types'\nimport {ReactBaseElement} from './ReactBaseElement'\nimport {createBrowserHistory} from './create-browser-history'\n\n// What is this silliness? Is it react or a web component?!\n// It's a web component we use to bootstrap react apps within the monolith.\n@controller\nexport class ReactAppElement extends ReactBaseElement<EmbeddedData> {\n  nameAttribute = 'app-name'\n\n  async getReactNode(embeddedData: EmbeddedData) {\n    const appName = this.name\n    const initialPath = this.getAttribute('initial-path') as string\n    const {App, routes} = await getReactApp(appName)\n\n    if (this.isLazy) {\n      const request = await fetch(initialPath, {\n        mode: 'no-cors',\n        cache: 'no-cache',\n        credentials: 'include',\n      })\n      const {payload} = await request.json()\n\n      embeddedData.payload = payload\n    }\n\n    const window = globalThis.window as Window | undefined\n\n    // Initial path is set by ruby. Anchors are not sent to the server.\n    // Therefore anchors must be set explicitly by the client.\n    const {pathname, search, hash} = new URL(\n      `${initialPath}${window?.location.hash ?? ''}`,\n      window?.location.href ?? 'https://github.com',\n    )\n\n    const history = createBrowserHistory({window, v5Compat: true})\n    const {key, state} = history.location\n    const initialLocation = {\n      pathname,\n      search,\n      hash,\n      key,\n      state,\n    }\n\n    return (\n      <ClientEntry\n        appName={appName}\n        initialLocation={initialLocation}\n        history={history}\n        embeddedData={embeddedData}\n        routes={routes}\n        App={App}\n        wasServerRendered={this.hasSSRContent}\n        ssrError={this.ssrError}\n      />\n    )\n  }\n\n  get isLazy() {\n    return this.getAttribute('data-lazy') === 'true'\n  }\n}\n","import {appRegistryFactory, type AppRegistrationFn} from './react-app-registry'\n// Import the web component to get it registered on the window\nimport './ReactAppElement'\n\nexport function registerReactAppFactory(appName: string, factory: AppRegistrationFn) {\n  appRegistryFactory.register(appName, factory)\n}\n","import type {RouteStateMap} from './use-navigator'\nimport {createContext} from 'react'\n\nexport const RouteStateMapContext = createContext<RouteStateMap>({})\n","import {createContext, useContext} from 'react'\n\nexport const AppPayloadContext = createContext<unknown>(undefined)\n\nexport function useAppPayload<T>(): T {\n  const appPayload = useContext(AppPayloadContext)\n\n  return appPayload as T\n}\n","import {useContext} from 'react'\nimport {useLocation} from 'react-router-dom'\nimport {RouteStateMapContext} from './route-state-map-context'\n\nexport function useCurrentRouteState<T>() {\n  const routeStateMap = useContext(RouteStateMapContext)\n  const location = useLocation()\n\n  return routeStateMap[location.key] as T\n}\n","import {useCurrentRouteState} from './use-current-route-state'\n\nexport function useRoutePayload<T>(): T {\n  const state = useCurrentRouteState<{type: 'loaded'; data: unknown}>()\n  const data = (state && state.type === 'loaded' ? state.data : undefined) as {payload: unknown} | undefined\n\n  return data?.payload as T\n}\n","import safeStorage from '@github-ui/safe-storage'\n\nconst {getItem, setItem, removeItem} = safeStorage('localStorage')\nconst REACT_PROFILING_ENABLED = 'REACT_PROFILING_ENABLED'\n\ninterface ReactProfilingModeMethods {\n  enable: () => void\n  disable: () => void\n  isEnabled: () => boolean\n}\n\nconst ReactProfilingMode: ReactProfilingModeMethods = {\n  enable: () => setItem(REACT_PROFILING_ENABLED, 'true'),\n  disable: () => removeItem(REACT_PROFILING_ENABLED),\n  isEnabled: () => !!getItem(REACT_PROFILING_ENABLED),\n}\n\nexport default ReactProfilingMode\n","import safeStorage from './safe-storage'\n\nexport const {getItem, setItem, removeItem} = safeStorage('sessionStorage')\n","import {SOFT_NAV_STATE} from './states'\n\nexport type SoftNavMechanism = 'turbo' | 'react' | 'turbo.frame'\n\nclass SoftNavEvent extends Event {\n  mechanism: SoftNavMechanism\n\n  constructor(mechanism: SoftNavMechanism, type: string) {\n    super(type)\n    this.mechanism = mechanism\n  }\n}\n\nexport class SoftNavStartEvent extends SoftNavEvent {\n  constructor(mechanism: SoftNavMechanism) {\n    super(mechanism, SOFT_NAV_STATE.START)\n  }\n}\n\nexport class SoftNavSuccessEvent extends SoftNavEvent {\n  visitCount: number\n\n  constructor(mechanism: SoftNavMechanism, visitCount: number) {\n    super(mechanism, SOFT_NAV_STATE.SUCCESS)\n    this.visitCount = visitCount\n  }\n}\n\nexport class SoftNavErrorEvent extends SoftNavEvent {\n  error: string\n\n  constructor(mechanism: SoftNavMechanism, error: string) {\n    super(mechanism, SOFT_NAV_STATE.ERROR)\n    this.error = error\n  }\n}\n\nexport class SoftNavEndEvent extends SoftNavEvent {\n  constructor(mechanism: SoftNavMechanism) {\n    super(mechanism, SOFT_NAV_STATE.END)\n  }\n}\n","import {SOFT_NAV_STATE} from './states'\nimport {\n  SoftNavEndEvent,\n  SoftNavErrorEvent,\n  type SoftNavMechanism,\n  SoftNavStartEvent,\n  SoftNavSuccessEvent,\n} from './events'\nimport {markStart, sendFailureStats, sendRenderStats} from './stats'\nimport {\n  clearSoftNav,\n  getSoftNavFailReason,\n  getSoftNavMechanism,\n  setSoftNavMechanism,\n  unsetSoftNav,\n  setSoftNavReferrer,\n  setSoftNavReactAppName,\n  inSoftNav,\n  getCurrentReactAppName,\n  DEFAULT_SOFT_NAV_ERROR_REASON,\n  setLatestMechanism,\n} from './utils'\n\ninterface SoftNavOptions {\n  skipIfGoingToReactApp?: boolean\n  allowedMechanisms?: SoftNavMechanism[]\n}\n\nlet visitCount = 0\n\nexport function initSoftNav() {\n  visitCount = 0\n  document.dispatchEvent(new Event(SOFT_NAV_STATE.INITIAL))\n\n  clearSoftNav()\n}\n\nexport function startSoftNav(mechanism: SoftNavMechanism) {\n  if (inSoftNav()) return\n\n  startProgressBar()\n  document.dispatchEvent(new SoftNavStartEvent(mechanism))\n\n  setSoftNavMechanism(mechanism)\n  setSoftNavReactAppName()\n  setSoftNavReferrer()\n  markStart()\n}\n\nexport function succeedSoftNav(options: SoftNavOptions = {}) {\n  if (!canTriggerEvent(options)) return\n\n  visitCount += 1\n\n  document.dispatchEvent(new SoftNavSuccessEvent(getSoftNavMechanism(), visitCount))\n  endSoftNav(options)\n}\n\nexport function failSoftNav(options: SoftNavOptions = {}) {\n  if (!canTriggerEvent(options)) return\n\n  visitCount = 0\n  const reason = getSoftNavFailReason() || DEFAULT_SOFT_NAV_ERROR_REASON\n  document.dispatchEvent(new SoftNavErrorEvent(getSoftNavMechanism(), reason))\n\n  endProgressBar()\n  sendFailureStats(reason)\n  clearSoftNav()\n}\n\nexport function endSoftNav(options: SoftNavOptions = {}) {\n  if (!canTriggerEvent(options)) return\n\n  const mechanism = getSoftNavMechanism()\n  endProgressBar()\n  document.dispatchEvent(new SoftNavEndEvent(mechanism))\n\n  unsetSoftNav()\n  setLatestMechanism(mechanism)\n}\n\nexport function renderedSoftNav(options: SoftNavOptions = {}) {\n  if (!canTriggerEvent(options)) return\n\n  sendRenderStats()\n  document.dispatchEvent(new Event(SOFT_NAV_STATE.RENDER))\n}\n\nexport function updateFrame() {\n  document.dispatchEvent(new Event(SOFT_NAV_STATE.FRAME_UPDATE))\n}\n\nfunction startProgressBar() {\n  document.dispatchEvent(new Event(SOFT_NAV_STATE.PROGRESS_BAR.START))\n}\n\nfunction endProgressBar() {\n  document.dispatchEvent(new Event(SOFT_NAV_STATE.PROGRESS_BAR.END))\n}\n\nfunction canTriggerEvent({skipIfGoingToReactApp, allowedMechanisms = []}: SoftNavOptions = {}) {\n  return (\n    inSoftNav() &&\n    (allowedMechanisms.length === 0 || allowedMechanisms.includes(getSoftNavMechanism())) &&\n    (!skipIfGoingToReactApp || !getCurrentReactAppName())\n  )\n}\n","export const SOFT_NAV_STATE = Object.freeze({\n  INITIAL: 'soft-nav:initial',\n  START: 'soft-nav:start',\n  SUCCESS: 'soft-nav:success',\n  ERROR: 'soft-nav:error',\n  FRAME_UPDATE: 'soft-nav:frame-update',\n  END: 'soft-nav:end',\n  RENDER: 'soft-nav:render',\n  PROGRESS_BAR: {\n    START: 'soft-nav:progress-bar:start',\n    END: 'soft-nav:progress-bar:end',\n  },\n})\n","import {sendStats} from '@github-ui/stats'\nimport {getCurrentReactAppName, getSoftNavMechanism, getSoftNavReactAppName, getSoftNavReferrer} from './utils'\nimport type {SoftNavMechanism} from './events'\n\nexport const SOFT_NAV_DURATION_MARK = 'stats:soft-nav-duration'\nexport const MECHANISM_MAPPING: Record<SoftNavMechanism | 'ui' | 'hard', PlatformBrowserSoftNavigationMechanism> = {\n  turbo: 'TURBO',\n  react: 'REACT',\n  'turbo.frame': 'FRAME',\n  ui: 'UI',\n  hard: 'HARD',\n}\nexport function markStart() {\n  // browswers only record the first ~150 resources\n  // clearing it here provides room to track additional resources loaded during the soft-nav\n  performance.clearResourceTimings()\n  performance.mark(SOFT_NAV_DURATION_MARK)\n}\n\nfunction getDurationSinceLastSoftNav() {\n  if (performance.getEntriesByName(SOFT_NAV_DURATION_MARK).length === 0) {\n    return null\n  }\n\n  performance.measure(SOFT_NAV_DURATION_MARK, SOFT_NAV_DURATION_MARK)\n  const measures = performance.getEntriesByName(SOFT_NAV_DURATION_MARK)\n  const measure = measures.pop()\n  return measure ? measure.duration : null\n}\n\nexport function sendFailureStats(turboFailureReason: string) {\n  sendStats({\n    turboFailureReason,\n    turboStartUrl: getSoftNavReferrer(),\n    turboEndUrl: window.location.href,\n  })\n}\n\nexport function sendRenderStats() {\n  const duration = getDurationSinceLastSoftNav()\n\n  if (!duration) return\n\n  const mechanism = MECHANISM_MAPPING[getSoftNavMechanism()]\n  const roundedDuration = Math.round(duration)\n\n  if (mechanism === MECHANISM_MAPPING.react)\n    document.dispatchEvent(new CustomEvent('staffbar-update', {detail: {duration: roundedDuration}}))\n\n  sendStats({\n    requestUrl: window.location.href,\n    softNavigationTiming: {\n      mechanism,\n      destination: getCurrentReactAppName() || 'rails',\n      duration: roundedDuration,\n      initiator: getSoftNavReactAppName() || 'rails',\n    },\n  })\n}\n","import {getItem, removeItem, setItem} from '@github-ui/safe-storage/session-storage'\nimport type {SoftNavMechanism} from './events'\n\nexport const DEFAULT_SOFT_NAV_ERROR_REASON = 'reload'\n\nexport const SOFT_NAV_FAIL = 'soft-nav:fail'\nexport const SOFT_NAV_FAIL_REFERRER = 'soft-nav:fail-referrer'\nexport const SOFT_NAV_REFERRER = 'soft-nav:referrer'\nexport const SOFT_NAV_MARK = 'soft-nav:marker'\nexport const SOFT_NAV_REACT_APP_NAME = 'soft-nav:react-app-name'\nexport const SOFT_NAV_LATEST_MECHANISM = 'soft-nav:latest-mechanism'\n\nexport function clearSoftNav() {\n  setItem(SOFT_NAV_MARK, '0')\n  removeItem(SOFT_NAV_REFERRER)\n  removeItem(SOFT_NAV_FAIL)\n  removeItem(SOFT_NAV_FAIL_REFERRER)\n  removeItem(SOFT_NAV_REACT_APP_NAME)\n  removeItem(SOFT_NAV_LATEST_MECHANISM)\n}\n\nexport function setSoftNavMechanism(mechanism: SoftNavMechanism) {\n  setItem(SOFT_NAV_MARK, mechanism)\n}\n\nexport function unsetSoftNav() {\n  setItem(SOFT_NAV_MARK, '0')\n}\n\nexport function inSoftNav() {\n  const softNav = getItem(SOFT_NAV_MARK)\n  return softNav && softNav !== '0'\n}\n\nexport function getSoftNavMechanism(): SoftNavMechanism {\n  return getItem(SOFT_NAV_MARK) as SoftNavMechanism\n}\n\nexport function hasSoftNavFailure() {\n  return Boolean(getSoftNavFailReason())\n}\n\nexport function getSoftNavFailReason() {\n  return getItem(SOFT_NAV_FAIL)\n}\n\nexport function setSoftNavFailReason(reason: string) {\n  setItem(SOFT_NAV_FAIL, reason || DEFAULT_SOFT_NAV_ERROR_REASON)\n  setItem(SOFT_NAV_FAIL_REFERRER, window.location.href)\n}\n\nexport function setSoftNavReferrer() {\n  setItem(SOFT_NAV_REFERRER, window.location.href)\n}\n\nexport function getSoftNavReferrer() {\n  return getItem(SOFT_NAV_REFERRER) || document.referrer\n}\n\nexport function setSoftNavReactAppName() {\n  const appName = getCurrentReactAppName()\n\n  if (appName) {\n    setItem(SOFT_NAV_REACT_APP_NAME, appName)\n  } else {\n    removeItem(SOFT_NAV_REACT_APP_NAME)\n  }\n}\n\nexport function getSoftNavReactAppName() {\n  return getItem(SOFT_NAV_REACT_APP_NAME)\n}\n\nexport function getCurrentReactAppName() {\n  if (document.querySelector('meta[name=\"ui\"]')) return 'ui'\n\n  return document.querySelector('react-app')?.getAttribute('app-name')\n}\n\nexport function setLatestMechanism(mechanism: SoftNavMechanism) {\n  setItem(SOFT_NAV_LATEST_MECHANISM, mechanism)\n}\n\nexport function getLatestMechanism() {\n  return getItem(SOFT_NAV_LATEST_MECHANISM) as SoftNavMechanism\n}\n","import {ssrSafeWindow} from '@github-ui/ssr-utils'\n// eslint-disable-next-line no-restricted-imports\nimport {useEffect, useLayoutEffect as unsafe_useLayoutEffect} from 'react'\n\n/**\n * Provides a safe version of `useLayoutEffect` that calls to `useEffect` on the server.\n * This is useful for components that use `useLayoutEffect` but are rendered on the server,\n * since useLayoutEffect cannot run on the server and warns in that environment\n */\nexport const useLayoutEffect =\n  typeof ssrSafeWindow?.document?.createElement !== 'undefined' ? unsafe_useLayoutEffect : useEffect\n","import {Outlet} from 'react-router-dom'\nimport {usePublishPayload} from './use-publish-payload'\nimport type {ReactNode} from 'react'\n\n/**\n * Wraps an optional App component around the outlet.\n */\nexport function AppWrapper({App}: {App?: AppComponentType}) {\n  usePublishPayload()\n\n  return App ? (\n    <App>\n      <Outlet />\n    </App>\n  ) : (\n    <Outlet />\n  )\n}\n\nexport type AppComponentType = React.ComponentType<{children?: ReactNode}>\n\ntry{ AppWrapper.displayName ||= 'AppWrapper' } catch {}","import {useEffect} from 'react'\nimport {SOFT_NAV_STATE} from '@github-ui/soft-nav/states'\nimport {useAppPayload} from './use-app-payload'\nimport {useRoutePayload} from './use-route-payload'\n\nexport function usePublishPayload() {\n  const payload = useRoutePayload()\n  const appPayload = useAppPayload()\n\n  useEffect(() => {\n    function onInitialSoftNav() {\n      // For a hard navigation, we publish the payload on INITIAL event\n      // because the first payload changed is too early and some components (Catalyst) may not be ready yet.\n      // This may trigger the same event twice.\n      document.dispatchEvent(new CustomEvent('soft-nav:payload', {detail: {payload, appPayload}}))\n    }\n    document.addEventListener(SOFT_NAV_STATE.INITIAL, onInitialSoftNav)\n\n    return () => {\n      document.removeEventListener(SOFT_NAV_STATE.INITIAL, onInitialSoftNav)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    document.dispatchEvent(new CustomEvent('soft-nav:payload', {detail: {payload, appPayload}}))\n  }, [appPayload, payload])\n}\n","import {AppContextProvider} from './AppContextProvider'\nimport {type AppComponentType, AppWrapper} from './AppWrapper'\nimport type {PageError} from './app-routing-types'\nimport type {AppRegistration} from './react-app-registry'\nimport {type Location, type Router as ReactRouterRouter, useRoutes} from 'react-router-dom'\nimport type {History} from '@remix-run/router'\nimport type {RouteStateMap} from './use-navigator'\nimport {ErrorPage} from './ErrorPage'\nimport {AppPayloadContext} from './use-app-payload'\nimport {createContext} from 'react'\nimport {RouteStateMapContext} from './route-state-map-context'\n\nexport const NavigationErrorContext = createContext<PageError | null>(null)\n\ninterface Props {\n  App?: AppComponentType\n  appPayload: unknown\n\n  /**\n   * Children will be included within the router context, but outside and after any routes.\n   */\n  children?: React.ReactNode\n  error: PageError | null\n  history: History\n  location: Location\n  navigateOnError: boolean\n  Router: typeof ReactRouterRouter\n  routes: AppRegistration['routes']\n  routeStateMap: RouteStateMap\n}\n\n/**\n * Given a list of React core routes and routing state, render the app. The implementation of this component should be\n * client/server agnostic, and differences probably should live in the appropriate Entry instead.\n */\nexport function AppRouter({\n  App,\n  appPayload,\n  children,\n  error,\n  history,\n  location,\n  navigateOnError,\n  Router,\n  routes,\n  routeStateMap,\n}: Props) {\n  return (\n    <AppContextProvider routes={routes} history={history}>\n      {error && !navigateOnError ? (\n        <ErrorPage {...error} />\n      ) : (\n        <AppPayloadContext.Provider value={appPayload}>\n          <NavigationErrorContext.Provider value={error}>\n            <RouteStateMapContext.Provider value={routeStateMap}>\n              <Router location={location} navigator={history}>\n                <AppRoutes routes={routes} App={App} />\n                {children}\n              </Router>\n            </RouteStateMapContext.Provider>\n          </NavigationErrorContext.Provider>\n        </AppPayloadContext.Provider>\n      )}\n    </AppContextProvider>\n  )\n}\n\nfunction AppRoutes({App, routes}: Pick<Props, 'routes' | 'App'>) {\n  return useRoutes([{element: <AppWrapper App={App} />, children: routes}])\n}\n\ntry{ NavigationErrorContext.displayName ||= 'NavigationErrorContext' } catch {}\ntry{ AppRouter.displayName ||= 'AppRouter' } catch {}\ntry{ AppRoutes.displayName ||= 'AppRoutes' } catch {}","import {ErrorPage} from './ErrorPage'\nimport React from 'react'\n\n// NOTE(jon, 2022-02-28): I copied 99% of this from memex's error-boundary\n\nexport interface ErrorBoundaryProps {\n  children: React.ReactNode\n  fallback?: React.ReactNode\n  /**\n   * Provide a callback to be invoked when an error is thrown (can be used for logging errors)\n   */\n  onError?: (error: Error) => void\n}\n\ninterface ErrorBoundaryState {\n  error: Error | null\n}\n\nexport class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props)\n\n    this.state = {\n      error: null,\n    }\n  }\n\n  /**\n   * Invoked when an error is thrown in the child component,\n   * and used to update state in a concurrent friendly manner\n   */\n  static getDerivedStateFromError(error: Error) {\n    return {error}\n  }\n\n  /**\n   * Called _after_ the re-render, used for performing side-effects such as logging\n   */\n  override componentDidCatch(error: Error) {\n    if (typeof this.props.onError === 'function') {\n      this.props.onError(error)\n    } else {\n      defaultOnError(error)\n    }\n  }\n\n  override render() {\n    if (!this.state.error) return this.props.children\n\n    return this.props.fallback === undefined ? <ErrorPage type=\"httpError\" /> : this.props.fallback\n  }\n}\n\n/**\n * Re-throws the error out of the rendering context to ensure that it propagates to failbot.\n * Also avoids react unmounting the entire tree from an uncaught error.\n */\nfunction defaultOnError(error: Error) {\n  setTimeout(() => {\n    throw error\n  })\n}\n","import {Box, Heading} from '@primer/react'\nimport type {PageError} from './app-routing-types'\n\nconst errorMessages: {[httpStatus: number]: string} = {\n  404: 'Didn’t find anything here!',\n  500: 'Looks like something went wrong!',\n}\n\nexport function ErrorPage({httpStatus, type}: PageError) {\n  const message = type === 'fetchError' ? 'Looks like network is down!' : errorMessages[httpStatus || 500]\n  return (\n    <Heading\n      as=\"h1\"\n      tabIndex={-1}\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: '100%',\n        minHeight: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      Error\n      {httpStatus ? <Box sx={{fontSize: '144px', fontWeight: 'bold', lineHeight: 1}}>{httpStatus}</Box> : null}\n      <Box sx={{fontSize: 4, pt: 2}}>{message}</Box>\n    </Heading>\n  )\n}\n\ntry{ ErrorPage.displayName ||= 'ErrorPage' } catch {}","import {target} from '@github/catalyst'\nimport {createRoot, hydrateRoot} from 'react-dom/client'\nimport type {createRoot as createRootType, hydrateRoot as hydrateRootType, Root} from 'react-dom/client'\nimport React from 'react'\nimport ReactProfilingMode from '@github-ui/react-profiling-mode'\nimport {EXPECTED_ERRORS} from './expected-errors'\nimport {sendStats} from '@github-ui/stats'\n\ntype ReactDOM = {\n  createRoot: typeof createRootType\n  hydrateRoot: typeof hydrateRootType\n}\n\nconst REACT_INVARIANT_ERROR_REGEX = /Minified React error #(?<invariant>\\d+)/\n\nexport abstract class ReactBaseElement<T> extends HTMLElement {\n  @target embeddedData: HTMLScriptElement | undefined\n  @target ssrError: HTMLScriptElement | undefined\n  @target reactRoot: HTMLElement | undefined\n  private root: Root | undefined\n\n  abstract nameAttribute: string\n  abstract getReactNode(embeddedData: T): Promise<React.ReactNode>\n\n  protected get name() {\n    return this.getAttribute(this.nameAttribute) as string\n  }\n\n  private get embeddedDataText() {\n    const text = this.embeddedData?.textContent\n\n    if (!text) {\n      throw new Error(`No embedded data provided for react element ${this.name}`)\n    }\n\n    return text\n  }\n\n  get hasSSRContent() {\n    return this.getAttribute('data-ssr') === 'true'\n  }\n\n  connectedCallback() {\n    this.renderReact()\n  }\n\n  disconnectedCallback() {\n    this.root?.unmount()\n    this.root = undefined\n  }\n\n  private async renderReact() {\n    if (!this.reactRoot) throw new Error('No react root provided')\n    let reactDom: ReactDOM = {\n      createRoot,\n      hydrateRoot,\n    }\n\n    // Override the react-dom import if we're in profiling mode\n    if (ReactProfilingMode.isEnabled()) {\n      reactDom = await this.getReactDomWithProfiling()\n    }\n\n    const embeddedData = JSON.parse(this.embeddedDataText) as T\n    const ssrErrorText = this.ssrError?.textContent\n    const node = await this.getReactNode(embeddedData)\n    const baseNode = <React.StrictMode>{node}</React.StrictMode>\n\n    if (ssrErrorText) {\n      this.logSSRError(ssrErrorText)\n    }\n\n    if (this.hasSSRContent) {\n      /**\n       * Styled-components automatically looks for style tags to hydrate on first page load, but will not detect them\n       * if they are added after the initial page load. This causes a hydration error because React isn't expecting\n       * a style tag within the app. To work around this, we need to manually move the style tags to the head before\n       * hydrating the app.\n       *\n       * During hydration, styled-components will create a new style tag which matches the one we moved to the head.\n       * This means that after hydration, we can safely remove the style tag we manually moved to the head.\n       */\n      const styles = this.querySelector('style[data-styled=\"true\"]')\n      if (styles) document.head.appendChild(styles)\n\n      // Hydrate the react app\n      // onRecoverableError is disabled until we have a react version with this fix in:\n      // https://github.com/facebook/react/pull/25692\n      this.root = reactDom.hydrateRoot(this.reactRoot, baseNode, {\n        onRecoverableError: error => {\n          if (!(error instanceof Error)) return\n\n          const match = REACT_INVARIANT_ERROR_REGEX.exec(error.message)\n          const invariant = String(match?.groups?.invariant)\n\n          sendStats({\n            incrementKey: 'REACT_HYDRATION_ERROR',\n            incrementTags: {\n              appName: this.name,\n              invariant,\n            },\n          })\n        },\n      })\n\n      // Remove the manually moved style tag after hydration\n      if (styles) {\n        // Wait until things are idle to remove the style tag. If we do it immediately, we can cause a flash of unstyled content.\n        requestIdleCallback(() => {\n          // styles could have already been removed by Turbo if a navigation happens quickly. Only remove it from the DOM if it's still there.\n          styles.parentElement?.removeChild(styles)\n        })\n      }\n    } else {\n      this.root = reactDom.createRoot(this.reactRoot)\n      this.root.render(baseNode)\n    }\n\n    this.classList.add('loaded')\n  }\n\n  private getReactDomWithProfiling() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return import('react-dom/profiling') as any as Promise<ReactDOM>\n  }\n\n  private logSSRError(ssrErrorText: string) {\n    if (EXPECTED_ERRORS[ssrErrorText]) {\n      // eslint-disable-next-line no-console\n      return console.error('SSR failed with an expected error:', EXPECTED_ERRORS[ssrErrorText])\n    }\n\n    try {\n      const error = JSON.parse(ssrErrorText) as PlatformJavascriptError\n      const stacktrace = parseFailbotStacktrace(error)\n      // eslint-disable-next-line no-console\n      console.error('Error During Alloy SSR:', `${error.type}: ${error.value}\\n`, error, stacktrace)\n    } catch {\n      /**\n       * In the event we couldn't log the error, we should not break the application\n       */\n      // eslint-disable-next-line no-console\n      console.error('Error During Alloy SSR:', ssrErrorText, 'unable to parse as json')\n    }\n  }\n}\n\nfunction parseFailbotStacktrace(error: PlatformJavascriptError) {\n  if (!error.stacktrace) return ''\n  let prefix = '\\n '\n  const stack = error.stacktrace.map((frame: PlatformStackframe) => {\n    const {function: func, filename, lineno, colno} = frame\n    const line = `${prefix} at ${func} (${filename}:${lineno}:${colno})`\n    prefix = ' '\n    return line\n  })\n  return stack.join('\\n')\n}\n\ntry{ REACT_INVARIANT_ERROR_REGEX.displayName ||= 'REACT_INVARIANT_ERROR_REGEX' } catch {}"],"names":["announceFromElement","el","options","isFeatureEnabled","announce","getTextContent","element","undefined","liveRegionAnnounceFromElement","politeness","assertive","message","Element","prototype","document","body","ariaNotify","interrupt","liveRegionAnnounce","setContainerContent","container","ssrSafeDocument","querySelector","textContent","getAttribute","innerText","trim","setTitle","title","oldTitle","newTitle","createElement","replaceWith","head","appendChild","hydroAnalyticsClient","getItem","safeStorage","dimensionPrefix","MARKETING_PARAMS","getOptionsFromMeta","baseContext","AnalyticsClient","_","extendBaseContext","context","key","value","app_id","event_url","host","Object","entries","startsWith","replace","visitorMeta","assign","JSON","parse","atob","content","URLSearchParams","window","location","search","includes","toLowerCase","staff","isStaff","toString","sendPageView","sendEvent","type","service","cleanContext","stringifyObjectValues","obj","fromEntries","map","k","v","stringify","TransitionType","DeferredRegistry","register","name","registration","entry","registrationEntries","resolve","promise","Promise","getRegistration","Deferred","constructor","PREVENT_AUTOFOCUS_KEY","appRegistryFactory","getReactApp","appName","factory","isHashNav","current","target","pathname","Boolean","hash","getTitleForError","addGitHubToTitle","error","httpStatus","classList","contains","Navigator","setAppNavigationStateCallback","appNavigationStateCallback","update","updates","state","appNavigationState","getAppNavigationState","navigateOnError","routeStateMap","appPayload","pendingNavigation","isLoading","handleHistoryUpdate","action","history","turboCount","isHashNavigation","navigateWithCurrentPayload","startSoftNav","navigateFromHistory","matchedRoute","matchLocation","route","transitionType","TRANSITION_WHILE_FETCHING","navigateWithoutPayload","TRANSITION_WITHOUT_FETCH","enterLoadingState","loaderResult","coreLoader","pathParams","params","turbo","replaceState","skipTurbo","href","leaveLoadingStateWithRouteData","data","leaveLoadingStateWithError","url","routes","matchRoutes","currentLocationKey","updateLocationKey","getRoutesText","path","join","initialLocation","embeddedData","loadFromEmbeddedData","ssrSafeHistory","useSoftNavLifecycle","reactAppName","useEffect","react_app","lastRecordedKey","useRef","inSoftNav","finishSoftNav","finishHardNav","failSoftNav","renderedSoftNav","succeedSoftNav","navDuration","getReactNavDuration","performance","measure","reactNavDurationStat","measures","getEntriesByName","pop","duration","sendStats","requestUrl","distributionKey","distributionValue","Math","round","distributionTags","scrollMap","Map","installed","saveScrollPosition","session","addEventListener","scrollPosition","getRestorationDataForIdentifier","restorationIdentifier","set","useScrollRestoration","ssrSafeWindow","useLayoutEffect","scroll","get","timeout","setTimeout","scrollTo","x","y","clearTimeout","noop","afterEach","clear","ClientEntry","App","wasServerRendered","ssrError","useNavigator","navigator","useState","embeddedRouteData","enabled_features","setAppNavigationState","hasSetCallback","useCallback","startTransition","useTitleManager","currentRouteState","previousLocation","errorTitle","useNavigationFocus","lastFocusedPath","currentPath","focusElement","hasAttribute","setAttribute","focus","listen","BaseProviders","ErrorBoundary","AppRouter","Router","CommonElements","displayName","ReactAppElement","ReactBaseElement","getReactNode","initialPath","isLazy","request","fetch","mode","cache","credentials","payload","json","globalThis","URL","createBrowserHistory","v5Compat","hasSSRContent","nameAttribute","registerReactAppFactory","controller","RouteStateMapContext","createContext","AppPayloadContext","useAppPayload","useContext","useCurrentRouteState","useLocation","useRoutePayload","setItem","removeItem","REACT_PROFILING_ENABLED","enable","disable","isEnabled","SoftNavEvent","Event","mechanism","SoftNavStartEvent","SOFT_NAV_STATE","START","SoftNavSuccessEvent","visitCount","SUCCESS","SoftNavErrorEvent","ERROR","SoftNavEndEvent","END","initSoftNav","dispatchEvent","INITIAL","clearSoftNav","PROGRESS_BAR","setSoftNavMechanism","setSoftNavReactAppName","setSoftNavReferrer","markStart","canTriggerEvent","getSoftNavMechanism","endSoftNav","reason","getSoftNavFailReason","DEFAULT_SOFT_NAV_ERROR_REASON","endProgressBar","sendFailureStats","unsetSoftNav","setLatestMechanism","sendRenderStats","RENDER","updateFrame","FRAME_UPDATE","skipIfGoingToReactApp","allowedMechanisms","length","getCurrentReactAppName","freeze","SOFT_NAV_DURATION_MARK","MECHANISM_MAPPING","react","ui","hard","clearResourceTimings","mark","turboFailureReason","turboStartUrl","getSoftNavReferrer","turboEndUrl","getDurationSinceLastSoftNav","roundedDuration","CustomEvent","detail","softNavigationTiming","destination","initiator","getSoftNavReactAppName","SOFT_NAV_FAIL","SOFT_NAV_FAIL_REFERRER","SOFT_NAV_REFERRER","SOFT_NAV_MARK","SOFT_NAV_REACT_APP_NAME","SOFT_NAV_LATEST_MECHANISM","softNav","hasSoftNavFailure","setSoftNavFailReason","referrer","getLatestMechanism","unsafe_useLayoutEffect","AppWrapper","usePublishPayload","onInitialSoftNav","removeEventListener","Outlet","NavigationErrorContext","children","AppContextProvider","ErrorPage","Provider","AppRoutes","useRoutes","React","getDerivedStateFromError","props","onError","render","fallback","errorMessages","Heading","as","tabIndex","sx","display","flexDirection","minWidth","minHeight","alignItems","justifyContent","Box","fontSize","fontWeight","lineHeight","pt","REACT_INVARIANT_ERROR_REGEX","HTMLElement","embeddedDataText","text","connectedCallback","renderReact","disconnectedCallback","root","unmount","reactRoot","reactDom","createRoot","hydrateRoot","ReactProfilingMode","getReactDomWithProfiling","ssrErrorText","node","baseNode","logSSRError","styles","onRecoverableError","Error","match","exec","invariant","String","groups","incrementKey","incrementTags","requestIdleCallback","parentElement","removeChild","add","EXPECTED_ERRORS","console","stacktrace","parseFailbotStacktrace","prefix","stack","function","func","filename","lineno","colno","frame","line"],"sourceRoot":""}
---
summary: 'List attestations'
description: |-
  List a collection of artifact attestations with a given subject digest that are associated with a repository.

  The authenticated user making the request must have read access to the repository. In addition, when using a fine-grained access token the `attestations:read` permission is required.

  **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](${externalDocsUrl}/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).

tags:
  - repos
operationId: repos/list-attestations

externalDocs:
  description: API method documentation
  # You must fill out the URL.
  # The format if the operation has a subcategory:
  # url: '${externalDocsUrl}/rest/repos/SUBCATEGORY#create-an-attestation'
  # The format if the operation does not have a subcategory:
  # url: '${externalDocsUrl}/rest/repos#create-an-attestation'
  url: '${externalDocsUrl}/rest/repos/repos#list-attestations'

# Describe how this operation is accessible
# This is essential for us to generate the final OpenAPI description
x-github-internal:
  path: /repos/{owner}/{repo}/attestations/{subject_digest}
  http-method: get
  published: true
  # Make sure you set your team as a resource owner
  owner: '@github/package-security'

# Our OpenAPI description describes all versions of GitHub API
# Define in which versions your operation is available.
x-github-releases:
  - api.github.com
  - ghec
  # ghes accepts a semver range of versions
  # ghes: '>= 3.1'
parameters:
  - $ref: '../../components/parameters/owner.yaml'
  - $ref: '../../components/parameters/repo.yaml'
  - $ref: '../../components/parameters/per-page.yaml'
  - $ref: '../../components/parameters/pagination-before.yaml'
  - $ref: '../../components/parameters/pagination-after.yaml'
  - name: subject_digest
    description: The parameter should be set to the attestation's subject's SHA256 digest, in the form `sha256:HEX_DIGEST`.
    in: path
    required: true
    schema:
      type: string
    x-multi-segment: true

# Describe any query and/or path parameters this operation
# might receive. Check out existing parameter definitions
# in `app/api/description/components/parameters`
# parameters:
#  - $ref: '../../components/parameters/owner.yaml'
#  - $ref: '../../components/parameters/repo.yaml'
# If your operation receives a requestBody (POST, PUT, PATCH requests)
# Describe it here using JSON Schema.
# requestBody:
#   content:
#     application/json:
#       schema:
#         type: object
#         properties:
#           octocat:
#             type: string
#             description: This is an example requestBody property
#       examples:
#         exampleKey1:
#           # This is the request example description used on docs.github.com
#           # More info about examples: https://thehub.github.com/epd/engineering/products-and-services/public-apis/rest/openapi/examples/
#           summary: Example with Mona the octocat
#           value:
#             octocat: Mona
#         # Optionally, you can create more than one example by matching
#         # the `examples` key between the response and request
#         exampleKey2:
#           summary: Example with Codertocat the octocat
#           value:
#             octocat: Codertocat

# Now describe what this operation can respond with.
# There is no need in describing common error status codes
# unless they have a specific semantic meaning in your operation.
responses:
  '200':
    description: Response
    content:
      application/json:
        schema:
          type: object
          properties:
            attestations:
              type: array
              items:
                type: object
                properties:
                  bundle:
                    type: object
                    properties:
                      mediaType:
                        type: string
                      verificationMaterial:
                        type: object
                        properties: {}
                        additionalProperties: true
                      dsseEnvelope:
                        type: object
                        properties: {}
                        additionalProperties: true
                    description: |-
                      The attestation's Sigstore Bundle.
                      Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
                  repository_id:
                    type: integer
        examples:
          default:
            $ref: '../../components/examples/list-attestations.yaml'

#         # Describe the schema and examples for this response
#         # Look for existing schemas in `components/schemas` or create your own
#         # More info about examples: https://thehub.github.com/epd/engineering/products-and-services/public-apis/rest/openapi/examples/
#         schema:
#           $ref: '../../components/schemas/new-or-existing-schema.yaml'
#         examples:
#           exampleKey1:
#             $ref: '../../components/examples/new-or-existing-example.yaml'
#           exampleKey2:
#             # This is the example response description used on docs.github.com
#             summary: Response for Codertocat octocat
#             value:
#               created: '2011-01-26T19:14:43Z'
#               octocat: Codertocat

# Finally, we must tag our operations with some additional metadata
x-github:
  # If the operation is only in GitHub Enterprise Cloud, set this to true
  githubCloudOnly: false
  enabledForGitHubApps: true
  # category and subcategory affect where the operation appears in https://docs.github.com/rest
  category: repos
  subcategory: repos

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Sponsors::V1::SponsorshipPaymentComplete`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Sponsors::V1::SponsorshipPaymentComplete`.

class Hydro::Schemas::Github::Sponsors::V1::SponsorshipPaymentComplete
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      completed_at: T.nilable(Google::Protobuf::Timestamp),
      first_payment: T.nilable(T::Boolean),
      first_time_sponsor: T.nilable(T::Boolean),
      first_time_sponsorable: T.nilable(T::Boolean),
      goal: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::Goal),
      invoiced: T.nilable(T::Boolean),
      listing: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing),
      matchable: T.nilable(T::Boolean),
      payment_source: T.nilable(T.any(Symbol, Integer)),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      sponsorship: T.nilable(Hydro::Schemas::Github::Sponsors::V0::Entities::Sponsorship),
      tier: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsTier),
      via_bulk_sponsorship: T.nilable(T::Boolean)
    ).void
  end
  def initialize(actor: nil, completed_at: nil, first_payment: nil, first_time_sponsor: nil, first_time_sponsorable: nil, goal: nil, invoiced: nil, listing: nil, matchable: nil, payment_source: nil, request_context: nil, sponsorship: nil, tier: nil, via_bulk_sponsorship: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_completed_at; end

  sig { void }
  def clear_first_payment; end

  sig { void }
  def clear_first_time_sponsor; end

  sig { void }
  def clear_first_time_sponsorable; end

  sig { void }
  def clear_goal; end

  sig { void }
  def clear_invoiced; end

  sig { void }
  def clear_listing; end

  sig { void }
  def clear_matchable; end

  sig { void }
  def clear_payment_source; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_sponsorship; end

  sig { void }
  def clear_tier; end

  sig { void }
  def clear_via_bulk_sponsorship; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def completed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def completed_at=(value); end

  sig { returns(T::Boolean) }
  def first_payment; end

  sig { params(value: T::Boolean).void }
  def first_payment=(value); end

  sig { returns(T::Boolean) }
  def first_time_sponsor; end

  sig { params(value: T::Boolean).void }
  def first_time_sponsor=(value); end

  sig { returns(T::Boolean) }
  def first_time_sponsorable; end

  sig { params(value: T::Boolean).void }
  def first_time_sponsorable=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::Goal)) }
  def goal; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::Goal)).void }
  def goal=(value); end

  sig { returns(T::Boolean) }
  def invoiced; end

  sig { params(value: T::Boolean).void }
  def invoiced=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing)) }
  def listing; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing)).void }
  def listing=(value); end

  sig { returns(T::Boolean) }
  def matchable; end

  sig { params(value: T::Boolean).void }
  def matchable=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def payment_source; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def payment_source=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V0::Entities::Sponsorship)) }
  def sponsorship; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V0::Entities::Sponsorship)).void }
  def sponsorship=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsTier)) }
  def tier; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsTier)).void }
  def tier=(value); end

  sig { returns(T::Boolean) }
  def via_bulk_sponsorship; end

  sig { params(value: T::Boolean).void }
  def via_bulk_sponsorship=(value); end
end

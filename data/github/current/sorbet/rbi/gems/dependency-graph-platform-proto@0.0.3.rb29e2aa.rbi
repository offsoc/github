# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dependency-graph-platform-proto` gem.
# Please instead update this file by running `bin/tapioca gem dependency-graph-platform-proto`.

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#64
module Github; end

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#65
module Github::DependencyGraphPlatform; end

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#66
module Github::DependencyGraphPlatform::Experimental; end

class Github::DependencyGraphPlatform::Experimental::Cursor
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_twirp.rb#14
class Github::DependencyGraphPlatform::Experimental::DependenciesAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_dependencies(input, req_opts = T.unsafe(nil)); end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_twirp.rb#8
class Github::DependencyGraphPlatform::Experimental::DependenciesAPIService < ::Twirp::Service; end

class Github::DependencyGraphPlatform::Experimental::GetDependenciesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::Experimental::GetDependenciesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::Experimental::GetDependenciesResponse::Dependency
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::Experimental::GetDependenciesResponse::TransitiveDependency
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Github::DependencyGraphPlatform::Experimental::PackageManager
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#72
Github::DependencyGraphPlatform::Experimental::PackageManager::PACKAGE_MANAGER_ACTIONS = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#72
Github::DependencyGraphPlatform::Experimental::PackageManager::PACKAGE_MANAGER_COMPOSER = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#72
Github::DependencyGraphPlatform::Experimental::PackageManager::PACKAGE_MANAGER_GOMOD = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#72
Github::DependencyGraphPlatform::Experimental::PackageManager::PACKAGE_MANAGER_MAVEN = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#72
Github::DependencyGraphPlatform::Experimental::PackageManager::PACKAGE_MANAGER_NPM = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#72
Github::DependencyGraphPlatform::Experimental::PackageManager::PACKAGE_MANAGER_NUGET = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#72
Github::DependencyGraphPlatform::Experimental::PackageManager::PACKAGE_MANAGER_PIP = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#72
Github::DependencyGraphPlatform::Experimental::PackageManager::PACKAGE_MANAGER_PUB = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#72
Github::DependencyGraphPlatform::Experimental::PackageManager::PACKAGE_MANAGER_RUBYGEMS = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#72
Github::DependencyGraphPlatform::Experimental::PackageManager::PACKAGE_MANAGER_RUST = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#72
Github::DependencyGraphPlatform::Experimental::PackageManager::PACKAGE_MANAGER_SWIFT = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#72
Github::DependencyGraphPlatform::Experimental::PackageManager::PACKAGE_MANAGER_UNKNOWN = T.let(T.unsafe(nil), Integer)

module Github::DependencyGraphPlatform::Experimental::Relationship
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#74
Github::DependencyGraphPlatform::Experimental::Relationship::RELATIONSHIP_DIRECT = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#74
Github::DependencyGraphPlatform::Experimental::Relationship::RELATIONSHIP_TRANSITIVE = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#74
Github::DependencyGraphPlatform::Experimental::Relationship::RELATIONSHIP_UNKNOWN = T.let(T.unsafe(nil), Integer)

module Github::DependencyGraphPlatform::Experimental::Scope
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#73
Github::DependencyGraphPlatform::Experimental::Scope::SCOPE_DEVELOPMENT = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#73
Github::DependencyGraphPlatform::Experimental::Scope::SCOPE_RUNTIME = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/v1/experimental/dependencies_pb.rb#73
Github::DependencyGraphPlatform::Experimental::Scope::SCOPE_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/repositories/v1/repositories_api_pb.rb#41
module Github::DependencyGraphPlatform::GhInternal; end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#81
module Github::DependencyGraphPlatform::GhInternal::Actions; end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#82
module Github::DependencyGraphPlatform::GhInternal::Actions::V1; end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_twirp.rb#17
class Github::DependencyGraphPlatform::GhInternal::Actions::V1::ActionsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_check_run_annotations(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_workflow_run(input, req_opts = T.unsafe(nil)); end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_twirp.rb#10
class Github::DependencyGraphPlatform::GhInternal::Actions::V1::ActionsAPIService < ::Twirp::Service; end

class Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckAnnotation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckAnnotationLevel
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#93
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckAnnotationLevel::CHECK_ANNOTATION_LEVEL_FAILURE = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#93
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckAnnotationLevel::CHECK_ANNOTATION_LEVEL_NOTICE = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#93
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckAnnotationLevel::CHECK_ANNOTATION_LEVEL_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#93
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckAnnotationLevel::CHECK_ANNOTATION_LEVEL_WARNING = T.let(T.unsafe(nil), Integer)

class Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRun
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunConclusion
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#92
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunConclusion::CHECK_RUN_CONCLUSION_ACTION_REQUIRED = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#92
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunConclusion::CHECK_RUN_CONCLUSION_CANCELLED = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#92
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunConclusion::CHECK_RUN_CONCLUSION_FAILURE = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#92
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunConclusion::CHECK_RUN_CONCLUSION_NEUTRAL = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#92
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunConclusion::CHECK_RUN_CONCLUSION_SKIPPED = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#92
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunConclusion::CHECK_RUN_CONCLUSION_STALE = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#92
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunConclusion::CHECK_RUN_CONCLUSION_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#92
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunConclusion::CHECK_RUN_CONCLUSION_TIMED_OUT = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#92
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunConclusion::CHECK_RUN_CONCLUSION_UNKNOWN = T.let(T.unsafe(nil), Integer)

module Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunStatus
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#91
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunStatus::CHECK_RUN_STATUS_COMPLETED = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#91
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunStatus::CHECK_RUN_STATUS_IN_PROGRESS = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#91
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunStatus::CHECK_RUN_STATUS_PENDING = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#91
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunStatus::CHECK_RUN_STATUS_QUEUED = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#91
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunStatus::CHECK_RUN_STATUS_REQUESTED = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#91
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunStatus::CHECK_RUN_STATUS_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/actions/v1/actions_api_pb.rb#91
Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckRunStatus::CHECK_RUN_STATUS_WAITING = T.let(T.unsafe(nil), Integer)

class Github::DependencyGraphPlatform::GhInternal::Actions::V1::CheckStep
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::GhInternal::Actions::V1::GetCheckRunAnnotationsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::GhInternal::Actions::V1::GetCheckRunAnnotationsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::GhInternal::Actions::V1::GetWorkflowRunRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::GhInternal::Actions::V1::GetWorkflowRunResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::GhInternal::Actions::V1::WorkflowRun
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/integrations/v1/integrations_api_pb.rb#29
module Github::DependencyGraphPlatform::GhInternal::Integrations; end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/integrations/v1/integrations_api_pb.rb#30
module Github::DependencyGraphPlatform::GhInternal::Integrations::V1; end

class Github::DependencyGraphPlatform::GhInternal::Integrations::V1::Bot
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::GhInternal::Integrations::V1::GetIntegrationsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::GhInternal::Integrations::V1::GetIntegrationsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::GhInternal::Integrations::V1::Integration
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/integrations/v1/integrations_api_twirp.rb#16
class Github::DependencyGraphPlatform::GhInternal::Integrations::V1::IntegrationsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_integrations(input, req_opts = T.unsafe(nil)); end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/integrations/v1/integrations_api_twirp.rb#10
class Github::DependencyGraphPlatform::GhInternal::Integrations::V1::IntegrationsAPIService < ::Twirp::Service; end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/repositories/v1/repositories_api_pb.rb#42
module Github::DependencyGraphPlatform::GhInternal::Repositories; end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/repositories/v1/repositories_api_pb.rb#43
module Github::DependencyGraphPlatform::GhInternal::Repositories::V1; end

class Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse::RepositoryOwnerType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/repositories/v1/repositories_api_pb.rb#46
Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse::RepositoryOwnerType::ORG = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/repositories/v1/repositories_api_pb.rb#46
Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse::RepositoryOwnerType::UNKNOWN_REPOSITORY_OWNER_TYPE = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/repositories/v1/repositories_api_pb.rb#46
Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse::RepositoryOwnerType::USER = T.let(T.unsafe(nil), Integer)

module Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse::RepositoryVisibility
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/repositories/v1/repositories_api_pb.rb#47
Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse::RepositoryVisibility::INTERNAL = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/repositories/v1/repositories_api_pb.rb#47
Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse::RepositoryVisibility::PRIVATE = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/repositories/v1/repositories_api_pb.rb#47
Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse::RepositoryVisibility::PUBLIC = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/repositories/v1/repositories_api_pb.rb#47
Github::DependencyGraphPlatform::GhInternal::Repositories::V1::GetRepositoryStateResponse::RepositoryVisibility::UNKNOWN_REPOSITORY_VISIBILITY = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/repositories/v1/repositories_api_twirp.rb#16
class Github::DependencyGraphPlatform::GhInternal::Repositories::V1::RepositoriesAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_repository_state(input, req_opts = T.unsafe(nil)); end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/gh-internal/repositories/v1/repositories_api_twirp.rb#10
class Github::DependencyGraphPlatform::GhInternal::Repositories::V1::RepositoriesAPIService < ::Twirp::Service; end

# source://dependency-graph-platform-proto//gen/ruby/lib/health/v1/health_api_pb.rb#18
module Github::DependencyGraphPlatform::Health; end

# source://dependency-graph-platform-proto//gen/ruby/lib/health/v1/health_api_pb.rb#19
module Github::DependencyGraphPlatform::Health::V1; end

# source://dependency-graph-platform-proto//gen/ruby/lib/health/v1/health_api_twirp.rb#15
class Github::DependencyGraphPlatform::Health::V1::HealthServiceClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def ping(input, req_opts = T.unsafe(nil)); end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/health/v1/health_api_twirp.rb#9
class Github::DependencyGraphPlatform::Health::V1::HealthServiceService < ::Twirp::Service; end

class Github::DependencyGraphPlatform::Health::V1::PingRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::Health::V1::PingResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/reachability/v1/dependencies_api_pb.rb#30
module Github::DependencyGraphPlatform::Reachability; end

# source://dependency-graph-platform-proto//gen/ruby/lib/reachability/v1/dependencies_api_pb.rb#31
module Github::DependencyGraphPlatform::Reachability::V1; end

# source://dependency-graph-platform-proto//gen/ruby/lib/reachability/v1/dependencies_api_twirp.rb#15
class Github::DependencyGraphPlatform::Reachability::V1::DependenciesAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_dependencies(input, req_opts = T.unsafe(nil)); end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/reachability/v1/dependencies_api_twirp.rb#9
class Github::DependencyGraphPlatform::Reachability::V1::DependenciesAPIService < ::Twirp::Service; end

class Github::DependencyGraphPlatform::Reachability::V1::GetDependenciesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::Reachability::V1::GetDependenciesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Github::DependencyGraphPlatform::Reachability::V1::JobStatus
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/reachability/v1/dependencies_api_pb.rb#34
Github::DependencyGraphPlatform::Reachability::V1::JobStatus::JOB_STATUS_COMPLETED = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/reachability/v1/dependencies_api_pb.rb#34
Github::DependencyGraphPlatform::Reachability::V1::JobStatus::JOB_STATUS_FAILED = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/reachability/v1/dependencies_api_pb.rb#34
Github::DependencyGraphPlatform::Reachability::V1::JobStatus::JOB_STATUS_PROCESSING = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#65
module Github::DependencyGraphPlatform::RepoInsights; end

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#66
module Github::DependencyGraphPlatform::RepoInsights::V1; end

class Github::DependencyGraphPlatform::RepoInsights::V1::Dependency
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Github::DependencyGraphPlatform::RepoInsights::V1::Ecosystem
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#73
Github::DependencyGraphPlatform::RepoInsights::V1::Ecosystem::ECOSYSTEM_NPM = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#73
Github::DependencyGraphPlatform::RepoInsights::V1::Ecosystem::ECOSYSTEM_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Github::DependencyGraphPlatform::RepoInsights::V1::GetDependenciesForRepositoryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::RepoInsights::V1::GetDependenciesForRepositoryResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Github::DependencyGraphPlatform::RepoInsights::V1::Pagination
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Github::DependencyGraphPlatform::RepoInsights::V1::Relationship
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#75
Github::DependencyGraphPlatform::RepoInsights::V1::Relationship::RELATIONSHIP_DIRECT = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#75
Github::DependencyGraphPlatform::RepoInsights::V1::Relationship::RELATIONSHIP_INDIRECT = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#75
Github::DependencyGraphPlatform::RepoInsights::V1::Relationship::RELATIONSHIP_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_twirp.rb#15
class Github::DependencyGraphPlatform::RepoInsights::V1::RepoInsightsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_dependencies_for_repository(input, req_opts = T.unsafe(nil)); end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_twirp.rb#9
class Github::DependencyGraphPlatform::RepoInsights::V1::RepoInsightsAPIService < ::Twirp::Service; end

module Github::DependencyGraphPlatform::RepoInsights::V1::Scope
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#74
Github::DependencyGraphPlatform::RepoInsights::V1::Scope::SCOPE_DEVELOPMENT = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#74
Github::DependencyGraphPlatform::RepoInsights::V1::Scope::SCOPE_RUNTIME = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#74
Github::DependencyGraphPlatform::RepoInsights::V1::Scope::SCOPE_UNKNOWN = T.let(T.unsafe(nil), Integer)

module Github::DependencyGraphPlatform::RepoInsights::V1::VulnerabilityFilter
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#72
Github::DependencyGraphPlatform::RepoInsights::V1::VulnerabilityFilter::VULNERABILITY_FILTER_NOT_VULNERABLE = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#72
Github::DependencyGraphPlatform::RepoInsights::V1::VulnerabilityFilter::VULNERABILITY_FILTER_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/repo-insights/v1/repo_insights_api_pb.rb#72
Github::DependencyGraphPlatform::RepoInsights::V1::VulnerabilityFilter::VULNERABILITY_FILTER_VULNERABLE = T.let(T.unsafe(nil), Integer)

class Github::DependencyGraphPlatform::RepoInsights::V1::VulnerableVersionRange
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/types/v1/dependency_pb.rb#37
module Github::DependencyGraphPlatform::Types; end

# source://dependency-graph-platform-proto//gen/ruby/lib/types/v1/dependency_pb.rb#38
module Github::DependencyGraphPlatform::Types::V1; end

class Github::DependencyGraphPlatform::Types::V1::Dependency
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Github::DependencyGraphPlatform::Types::V1::Ecosystem
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/types/v1/manifest_pb.rb#29
Github::DependencyGraphPlatform::Types::V1::Ecosystem::ECOSYSTEM_MAVEN = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/types/v1/manifest_pb.rb#29
Github::DependencyGraphPlatform::Types::V1::Ecosystem::ECOSYSTEM_NPM = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/types/v1/manifest_pb.rb#29
Github::DependencyGraphPlatform::Types::V1::Ecosystem::ECOSYSTEM_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Github::DependencyGraphPlatform::Types::V1::Manifest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Github::DependencyGraphPlatform::Types::V1::Relationship
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/types/v1/dependency_pb.rb#42
Github::DependencyGraphPlatform::Types::V1::Relationship::RELATIONSHIP_DIRECT = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/types/v1/dependency_pb.rb#42
Github::DependencyGraphPlatform::Types::V1::Relationship::RELATIONSHIP_TRANSITIVE = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/types/v1/dependency_pb.rb#42
Github::DependencyGraphPlatform::Types::V1::Relationship::RELATIONSHIP_UNKNOWN = T.let(T.unsafe(nil), Integer)

module Github::DependencyGraphPlatform::Types::V1::Scope
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://dependency-graph-platform-proto//gen/ruby/lib/types/v1/dependency_pb.rb#41
Github::DependencyGraphPlatform::Types::V1::Scope::SCOPE_DEVELOPMENT = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/types/v1/dependency_pb.rb#41
Github::DependencyGraphPlatform::Types::V1::Scope::SCOPE_RUNTIME = T.let(T.unsafe(nil), Integer)

# source://dependency-graph-platform-proto//gen/ruby/lib/types/v1/dependency_pb.rb#41
Github::DependencyGraphPlatform::Types::V1::Scope::SCOPE_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Github::DependencyGraphPlatform::Types::V1::TransitiveDependency
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Google::Protobuf::MessageExts::ClassMethods; end

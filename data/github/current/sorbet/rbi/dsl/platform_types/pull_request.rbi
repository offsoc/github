# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PlatformTypes::PullRequest`.
# Please instead update this file by running `bin/tapioca dsl PlatformTypes::PullRequest`.

class PlatformTypes::PullRequest < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(PlatformTypes::AbuseReportConnection) }
  def abuse_reports; end

  sig { returns(T::Boolean) }
  def abuse_reports?; end

  sig { returns(Integer) }
  def action_required_workflow_run_count; end

  sig { returns(T::Boolean) }
  def action_required_workflow_run_count?; end

  sig { returns(T.nilable(String)) }
  def active_lock_reason; end

  sig { returns(T::Boolean) }
  def active_lock_reason?; end

  sig { returns(Integer) }
  def additions; end

  sig { returns(T::Boolean) }
  def additions?; end

  sig { returns(PlatformTypes::UserConnection) }
  def assignees; end

  sig { returns(T::Boolean) }
  def assignees?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def author; end

  sig { returns(T::Boolean) }
  def author?; end

  sig { returns(String) }
  def author_association; end

  sig { returns(T::Boolean) }
  def author_association?; end

  sig { returns(T.nilable(PlatformTypes::Sponsorship)) }
  def author_to_repo_owner_sponsorship; end

  sig { returns(T::Boolean) }
  def author_to_repo_owner_sponsorship?; end

  sig { returns(T::Boolean) }
  def authored_by_subject_author; end

  sig { returns(T::Boolean) }
  def authored_by_subject_author?; end

  sig { returns(T.nilable(PlatformTypes::AutoMergeRequest)) }
  def auto_merge_request; end

  sig { returns(T::Boolean) }
  def auto_merge_request?; end

  sig { returns(T.nilable(PlatformTypes::Ref)) }
  def base_ref; end

  sig { returns(T::Boolean) }
  def base_ref?; end

  sig { returns(String) }
  def base_ref_name; end

  sig { returns(T::Boolean) }
  def base_ref_name?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def base_ref_oid; end

  sig { returns(T::Boolean) }
  def base_ref_oid?; end

  sig { returns(T.nilable(PlatformTypes::Repository)) }
  def base_repository; end

  sig { returns(T::Boolean) }
  def base_repository?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def base_repository_owner; end

  sig { returns(T::Boolean) }
  def base_repository_owner?; end

  sig { returns(String) }
  def body; end

  sig { returns(T::Boolean) }
  def body?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def body_html; end

  sig { returns(T::Boolean) }
  def body_html?; end

  sig { returns(String) }
  def body_text; end

  sig { returns(T::Boolean) }
  def body_text?; end

  sig { returns(String) }
  def body_version; end

  sig { returns(T::Boolean) }
  def body_version?; end

  sig { returns(T::Boolean) }
  def can_be_rebased; end

  sig { returns(T::Boolean) }
  def can_be_rebased?; end

  sig { returns(PlatformTypes::CandidateReviewerConnection) }
  def candidate_reviewers; end

  sig { returns(T::Boolean) }
  def candidate_reviewers?; end

  sig { returns(Integer) }
  def changed_files; end

  sig { returns(T::Boolean) }
  def changed_files?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def checks_resource_path; end

  sig { returns(T::Boolean) }
  def checks_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def checks_url; end

  sig { returns(T::Boolean) }
  def checks_url?; end

  sig { returns(T::Boolean) }
  def closed; end

  sig { returns(T::Boolean) }
  def closed?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def closed_at; end

  sig { returns(T::Boolean) }
  def closed_at?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def closed_by; end

  sig { returns(T::Boolean) }
  def closed_by?; end

  sig { returns(T.nilable(PlatformTypes::IssueConnection)) }
  def closing_issues_references; end

  sig { returns(T::Boolean) }
  def closing_issues_references?; end

  sig { returns(T.nilable(T::Array[T.any(PlatformTypes::User, PlatformTypes::Team)])) }
  def codeowners; end

  sig { returns(T::Boolean) }
  def codeowners?; end

  sig { returns(T.nilable(PlatformTypes::IssueComment)) }
  def comment; end

  sig { returns(T::Boolean) }
  def comment?; end

  sig { returns(String) }
  def comment_type; end

  sig { returns(T::Boolean) }
  def comment_type?; end

  sig { returns(PlatformTypes::IssueCommentConnection) }
  def comments; end

  sig { returns(T::Boolean) }
  def comments?; end

  sig { returns(PlatformTypes::PullRequestCommitConnection) }
  def commits; end

  sig { returns(T::Boolean) }
  def commits?; end

  sig { returns(PlatformTypes::CommitConnection) }
  def commits_since_viewer_last_seen; end

  sig { returns(T::Boolean) }
  def commits_since_viewer_last_seen?; end

  sig { returns(T.nilable(PlatformTypes::PullRequestComparison)) }
  def comparison; end

  sig { returns(T::Boolean) }
  def comparison?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def created_at; end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T::Boolean) }
  def created_via_email; end

  sig { returns(T::Boolean) }
  def created_via_email?; end

  sig { returns(T.nilable(Integer)) }
  def database_id; end

  sig { returns(T::Boolean) }
  def database_id?; end

  sig { returns(Integer) }
  def deletions; end

  sig { returns(T::Boolean) }
  def deletions?; end

  sig { returns(T.nilable(PlatformTypes::Diff)) }
  def diff; end

  sig { returns(T::Boolean) }
  def diff?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def dismiss_merge_tip_resource_path; end

  sig { returns(T::Boolean) }
  def dismiss_merge_tip_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def dismiss_merge_tip_url; end

  sig { returns(T::Boolean) }
  def dismiss_merge_tip_url?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def editor; end

  sig { returns(T::Boolean) }
  def editor?; end

  sig { returns(T.nilable(PlatformTypes::PullRequestChangedFileConnection)) }
  def files; end

  sig { returns(T::Boolean) }
  def files?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def full_database_id; end

  sig { returns(T::Boolean) }
  def full_database_id?; end

  sig { returns(T.nilable(PlatformTypes::PullRequestCommit)) }
  def head_commit; end

  sig { returns(T::Boolean) }
  def head_commit?; end

  sig { returns(T.nilable(PlatformTypes::Ref)) }
  def head_ref; end

  sig { returns(T::Boolean) }
  def head_ref?; end

  sig { returns(String) }
  def head_ref_name; end

  sig { returns(T::Boolean) }
  def head_ref_name?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def head_ref_oid; end

  sig { returns(T::Boolean) }
  def head_ref_oid?; end

  sig { returns(T.nilable(PlatformTypes::Repository)) }
  def head_repository; end

  sig { returns(T::Boolean) }
  def head_repository?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def head_repository_owner; end

  sig { returns(T::Boolean) }
  def head_repository_owner?; end

  sig { returns(PlatformTypes::Hovercard) }
  def hovercard; end

  sig { returns(T::Boolean) }
  def hovercard?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T::Boolean) }
  def includes_created_edit; end

  sig { returns(T::Boolean) }
  def includes_created_edit?; end

  sig { returns(T::Boolean) }
  def is_corrupt; end

  sig { returns(T::Boolean) }
  def is_corrupt?; end

  sig { returns(T::Boolean) }
  def is_cross_repository; end

  sig { returns(T::Boolean) }
  def is_cross_repository?; end

  sig { returns(T::Boolean) }
  def is_draft; end

  sig { returns(T::Boolean) }
  def is_draft?; end

  sig { returns(T::Boolean) }
  def is_in_merge_queue; end

  sig { returns(T::Boolean) }
  def is_in_merge_queue?; end

  sig { returns(T::Boolean) }
  def is_merge_queue_enabled; end

  sig { returns(T::Boolean) }
  def is_merge_queue_enabled?; end

  sig { returns(T.nilable(T::Boolean)) }
  def is_read_by_viewer; end

  sig { returns(T::Boolean) }
  def is_read_by_viewer?; end

  sig { returns(Integer) }
  def issue_database_id; end

  sig { returns(T::Boolean) }
  def issue_database_id?; end

  sig { returns(T.nilable(PlatformTypes::LabelConnection)) }
  def labels; end

  sig { returns(T::Boolean) }
  def labels?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def last_edited_at; end

  sig { returns(T::Boolean) }
  def last_edited_at?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def last_reported_at; end

  sig { returns(T::Boolean) }
  def last_reported_at?; end

  sig { returns(T.nilable(PlatformTypes::UserContentEdit)) }
  def last_user_content_edit; end

  sig { returns(T::Boolean) }
  def last_user_content_edit?; end

  sig { returns(T.nilable(PlatformTypes::PullRequestReviewConnection)) }
  def latest_opinionated_reviews; end

  sig { returns(T::Boolean) }
  def latest_opinionated_reviews?; end

  sig { returns(T.nilable(PlatformTypes::PullRequestReviewComment)) }
  def latest_review_comment_by_viewer; end

  sig { returns(T::Boolean) }
  def latest_review_comment_by_viewer?; end

  sig { returns(T.nilable(PlatformTypes::PullRequestReviewConnection)) }
  def latest_reviews; end

  sig { returns(T::Boolean) }
  def latest_reviews?; end

  sig { returns(T::Boolean) }
  def locked; end

  sig { returns(T::Boolean) }
  def locked?; end

  sig { returns(T::Boolean) }
  def maintainer_can_modify; end

  sig { returns(T::Boolean) }
  def maintainer_can_modify?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def markdown_preview; end

  sig { returns(T::Boolean) }
  def markdown_preview?; end

  sig { returns(T.nilable(PlatformTypes::MentionableItemConnection)) }
  def mentionable_items; end

  sig { returns(T::Boolean) }
  def mentionable_items?; end

  sig { returns(T.nilable(PlatformTypes::Commit)) }
  def merge_commit; end

  sig { returns(T::Boolean) }
  def merge_commit?; end

  sig { returns(T.nilable(PlatformTypes::MergeQueue)) }
  def merge_queue; end

  sig { returns(T::Boolean) }
  def merge_queue?; end

  sig { returns(T.nilable(PlatformTypes::MergeQueueEntry)) }
  def merge_queue_entry; end

  sig { returns(T::Boolean) }
  def merge_queue_entry?; end

  sig { returns(PlatformTypes::PullRequestMergeRequirements) }
  def merge_requirements; end

  sig { returns(T::Boolean) }
  def merge_requirements?; end

  sig { returns(String) }
  def merge_state_status; end

  sig { returns(T::Boolean) }
  def merge_state_status?; end

  sig { returns(String) }
  def mergeable; end

  sig { returns(T::Boolean) }
  def mergeable?; end

  sig { returns(T::Boolean) }
  def merged; end

  sig { returns(T::Boolean) }
  def merged?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def merged_at; end

  sig { returns(T::Boolean) }
  def merged_at?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def merged_by; end

  sig { returns(T::Boolean) }
  def merged_by?; end

  sig { returns(T.nilable(PlatformTypes::Milestone)) }
  def milestone; end

  sig { returns(T::Boolean) }
  def milestone?; end

  sig { returns(Integer) }
  def number; end

  sig { returns(T::Boolean) }
  def number?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def og_image_url; end

  sig { returns(T::Boolean) }
  def og_image_url?; end

  sig { returns(T::Boolean) }
  def over_comment_limit; end

  sig { returns(T::Boolean) }
  def over_comment_limit?; end

  sig { returns(PlatformTypes::UserConnection) }
  def participants; end

  sig { returns(T::Boolean) }
  def participants?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def permalink; end

  sig { returns(T::Boolean) }
  def permalink?; end

  sig { returns(T.nilable(PlatformTypes::Commit)) }
  def potential_merge_commit; end

  sig { returns(T::Boolean) }
  def potential_merge_commit?; end

  sig { returns(PlatformTypes::ProjectCardConnection) }
  def project_cards; end

  sig { returns(T::Boolean) }
  def project_cards?; end

  sig { returns(PlatformTypes::ProjectV2ItemConnection) }
  def project_items; end

  sig { returns(T::Boolean) }
  def project_items?; end

  sig { returns(T.nilable(PlatformTypes::ProjectV2ItemConnection)) }
  def project_items_next; end

  sig { returns(T::Boolean) }
  def project_items_next?; end

  sig { returns(T.nilable(PlatformTypes::ProjectNext)) }
  def project_next; end

  sig { returns(T::Boolean) }
  def project_next?; end

  sig { returns(PlatformTypes::ProjectNextItemConnection) }
  def project_next_items; end

  sig { returns(T::Boolean) }
  def project_next_items?; end

  sig { returns(T.nilable(PlatformTypes::ProjectV2)) }
  def project_v2; end

  sig { returns(T::Boolean) }
  def project_v2?; end

  sig { returns(PlatformTypes::ProjectNextConnection) }
  def projects_next; end

  sig { returns(T::Boolean) }
  def projects_next?; end

  sig { returns(PlatformTypes::ProjectV2Connection) }
  def projects_v2; end

  sig { returns(T::Boolean) }
  def projects_v2?; end

  sig { returns(PlatformTypes::ProjectV2Connection) }
  def projects_v2_by_number; end

  sig { returns(T::Boolean) }
  def projects_v2_by_number?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def published_at; end

  sig { returns(T::Boolean) }
  def published_at?; end

  sig { returns(GraphQL::Client::Schema::InterfaceType) }
  def reaction_admin; end

  sig { returns(T::Boolean) }
  def reaction_admin?; end

  sig { returns(T.nilable(T::Array[PlatformTypes::ReactionGroup])) }
  def reaction_groups; end

  sig { returns(T::Boolean) }
  def reaction_groups?; end

  sig { returns(String) }
  def reaction_path; end

  sig { returns(T::Boolean) }
  def reaction_path?; end

  sig { returns(PlatformTypes::ReactionConnection) }
  def reactions; end

  sig { returns(T::Boolean) }
  def reactions?; end

  sig { returns(T.nilable(Integer)) }
  def report_count; end

  sig { returns(T::Boolean) }
  def report_count?; end

  sig { returns(PlatformTypes::Repository) }
  def repository; end

  sig { returns(T::Boolean) }
  def repository?; end

  sig { returns(PlatformTypes::RequiredStatusCheckConnection) }
  def required_status_checks; end

  sig { returns(T::Boolean) }
  def required_status_checks?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def resource_path; end

  sig { returns(T::Boolean) }
  def resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def restore_head_ref_resource_path; end

  sig { returns(T::Boolean) }
  def restore_head_ref_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def restore_head_ref_url; end

  sig { returns(T::Boolean) }
  def restore_head_ref_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def revert_resource_path; end

  sig { returns(T::Boolean) }
  def revert_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def revert_url; end

  sig { returns(T::Boolean) }
  def revert_url?; end

  sig { returns(T.nilable(PlatformTypes::PullRequestReview)) }
  def review; end

  sig { returns(T::Boolean) }
  def review?; end

  sig { returns(T.nilable(PlatformTypes::PullRequestReviewComment)) }
  def review_comment; end

  sig { returns(T::Boolean) }
  def review_comment?; end

  sig { returns(T.nilable(String)) }
  def review_decision; end

  sig { returns(T::Boolean) }
  def review_decision?; end

  sig { returns(T.nilable(PlatformTypes::ReviewRequestConnection)) }
  def review_requests; end

  sig { returns(T::Boolean) }
  def review_requests?; end

  sig { returns(PlatformTypes::PullRequestReviewThreadConnection) }
  def review_threads; end

  sig { returns(T::Boolean) }
  def review_threads?; end

  sig { returns(T.nilable(PlatformTypes::PullRequestReviewConnection)) }
  def reviews; end

  sig { returns(T::Boolean) }
  def reviews?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def safe_user; end

  sig { returns(T::Boolean) }
  def safe_user?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def short_body_html; end

  sig { returns(T::Boolean) }
  def short_body_html?; end

  sig { returns(T::Boolean) }
  def show_edit_history_onboarding; end

  sig { returns(T::Boolean) }
  def show_edit_history_onboarding?; end

  sig { returns(T::Boolean) }
  def show_first_contribution_prompt; end

  sig { returns(T::Boolean) }
  def show_first_contribution_prompt?; end

  sig { returns(T::Boolean) }
  def spammy; end

  sig { returns(T::Boolean) }
  def spammy?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def stafftools_url; end

  sig { returns(T::Boolean) }
  def stafftools_url?; end

  sig { returns(String) }
  def state; end

  sig { returns(T::Boolean) }
  def state?; end

  sig { returns(T.nilable(PlatformTypes::Status)) }
  def status_at_merge; end

  sig { returns(T::Boolean) }
  def status_at_merge?; end

  sig { returns(T.nilable(PlatformTypes::StatusCheckRollup)) }
  def status_check_rollup; end

  sig { returns(T::Boolean) }
  def status_check_rollup?; end

  sig { returns(T.nilable(T.any(String, Integer))) }
  def subject_id; end

  sig { returns(T::Boolean) }
  def subject_id?; end

  sig { returns(PlatformTypes::UserConnection) }
  def suggested_assignees; end

  sig { returns(T::Boolean) }
  def suggested_assignees?; end

  sig { returns(T::Array[PlatformTypes::SuggestedReviewer]) }
  def suggested_reviewers; end

  sig { returns(T::Boolean) }
  def suggested_reviewers?; end

  sig { returns(Integer) }
  def task_list_item_count; end

  sig { returns(T::Boolean) }
  def task_list_item_count?; end

  sig { returns(PlatformTypes::PullRequestThreadConnection) }
  def threads; end

  sig { returns(T::Boolean) }
  def threads?; end

  sig { returns(PlatformTypes::PullRequestTimelineConnection) }
  def timeline; end

  sig { returns(T::Boolean) }
  def timeline?; end

  sig do
    returns(T.nilable(T.any(PlatformTypes::PullRequestCommit, PlatformTypes::PullRequestCommitCommentThread, PlatformTypes::PullRequestReview, PlatformTypes::PullRequestReviewThread, PlatformTypes::PullRequestRevisionMarker, PlatformTypes::AutomaticBaseChangeFailedEvent, PlatformTypes::AutomaticBaseChangeSucceededEvent, PlatformTypes::AutoMergeDisabledEvent, PlatformTypes::AutoMergeEnabledEvent, PlatformTypes::AutoRebaseEnabledEvent, PlatformTypes::AutoSquashEnabledEvent, PlatformTypes::BaseRefChangedEvent, PlatformTypes::BaseRefForcePushedEvent, PlatformTypes::BaseRefDeletedEvent, PlatformTypes::DeployedEvent, PlatformTypes::DeploymentEnvironmentChangedEvent, PlatformTypes::HeadRefDeletedEvent, PlatformTypes::HeadRefForcePushedEvent, PlatformTypes::HeadRefRestoredEvent, PlatformTypes::MergedEvent, PlatformTypes::ReviewDismissedEvent, PlatformTypes::ReviewRequestedEvent, PlatformTypes::ReviewRequestRemovedEvent, PlatformTypes::ReadyForReviewEvent, PlatformTypes::ConvertToDraftEvent, PlatformTypes::AddedToMergeQueueEvent, PlatformTypes::RemovedFromMergeQueueEvent, PlatformTypes::IssueComment, PlatformTypes::CrossReferencedEvent, PlatformTypes::AddedToProjectEvent, PlatformTypes::AddedToProjectV2Event, PlatformTypes::AssignedEvent, PlatformTypes::ClosedEvent, PlatformTypes::CommentDeletedEvent, PlatformTypes::ConnectedEvent, PlatformTypes::ConvertedFromDraftEvent, PlatformTypes::ConvertedNoteToIssueEvent, PlatformTypes::ConvertedToDiscussionEvent, PlatformTypes::DemilestonedEvent, PlatformTypes::DisconnectedEvent, PlatformTypes::LabeledEvent, PlatformTypes::LockedEvent, PlatformTypes::MarkedAsDuplicateEvent, PlatformTypes::MentionedEvent, PlatformTypes::MilestonedEvent, PlatformTypes::MovedColumnsInProjectEvent, PlatformTypes::PinnedEvent, PlatformTypes::ProjectV2ItemStatusChangedEvent, PlatformTypes::ReferencedEvent, PlatformTypes::RemovedFromProjectEvent, PlatformTypes::RemovedFromProjectV2Event, PlatformTypes::RenamedTitleEvent, PlatformTypes::ReopenedEvent, PlatformTypes::SubscribedEvent, PlatformTypes::TransferredEvent, PlatformTypes::UnassignedEvent, PlatformTypes::UnlabeledEvent, PlatformTypes::UnlockedEvent, PlatformTypes::UserBlockedEvent, PlatformTypes::UnmarkedAsDuplicateEvent, PlatformTypes::UnpinnedEvent, PlatformTypes::UnsubscribedEvent)))
  end
  def timeline_item; end

  sig { returns(T::Boolean) }
  def timeline_item?; end

  sig { returns(PlatformTypes::PullRequestTimelineItemsConnection) }
  def timeline_items; end

  sig { returns(T::Boolean) }
  def timeline_items?; end

  sig { returns(String) }
  def title; end

  sig { returns(T::Boolean) }
  def title?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def title_html; end

  sig { returns(T::Boolean) }
  def title_html?; end

  sig { returns(T.nilable(String)) }
  def top_report_reason; end

  sig { returns(T::Boolean) }
  def top_report_reason?; end

  sig { returns(T.nilable(Integer)) }
  def total_comments_count; end

  sig { returns(T::Boolean) }
  def total_comments_count?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def updated_at; end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(String)) }
  def updates_channel; end

  sig { returns(T::Boolean) }
  def updates_channel?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def url; end

  sig { returns(T::Boolean) }
  def url?; end

  sig { returns(T.nilable(PlatformTypes::UserContentEditConnection)) }
  def user_content_edits; end

  sig { returns(T::Boolean) }
  def user_content_edits?; end

  sig { returns(T.nilable(PlatformTypes::App)) }
  def via_app; end

  sig { returns(T::Boolean) }
  def via_app?; end

  sig { returns(T::Boolean) }
  def viewer_blocked_by_author; end

  sig { returns(T::Boolean) }
  def viewer_blocked_by_author?; end

  sig { returns(T::Boolean) }
  def viewer_can_add_and_remove_from_merge_queue; end

  sig { returns(T::Boolean) }
  def viewer_can_add_and_remove_from_merge_queue?; end

  sig { returns(T::Boolean) }
  def viewer_can_apply_suggestion; end

  sig { returns(T::Boolean) }
  def viewer_can_apply_suggestion?; end

  sig { returns(T::Boolean) }
  def viewer_can_assign; end

  sig { returns(T::Boolean) }
  def viewer_can_assign?; end

  sig { returns(T::Boolean) }
  def viewer_can_block_from_org; end

  sig { returns(T::Boolean) }
  def viewer_can_block_from_org?; end

  sig { returns(T::Boolean) }
  def viewer_can_change_base_branch; end

  sig { returns(T::Boolean) }
  def viewer_can_change_base_branch?; end

  sig { returns(T::Boolean) }
  def viewer_can_close; end

  sig { returns(T::Boolean) }
  def viewer_can_close?; end

  sig { returns(T::Boolean) }
  def viewer_can_comment; end

  sig { returns(T::Boolean) }
  def viewer_can_comment?; end

  sig { returns(T::Boolean) }
  def viewer_can_delete_head_ref; end

  sig { returns(T::Boolean) }
  def viewer_can_delete_head_ref?; end

  sig { returns(T::Boolean) }
  def viewer_can_disable_auto_merge; end

  sig { returns(T::Boolean) }
  def viewer_can_disable_auto_merge?; end

  sig { returns(T::Boolean) }
  def viewer_can_edit_files; end

  sig { returns(T::Boolean) }
  def viewer_can_edit_files?; end

  sig { returns(T::Boolean) }
  def viewer_can_enable_auto_merge; end

  sig { returns(T::Boolean) }
  def viewer_can_enable_auto_merge?; end

  sig { returns(T::Boolean) }
  def viewer_can_label; end

  sig { returns(T::Boolean) }
  def viewer_can_label?; end

  sig { returns(T::Boolean) }
  def viewer_can_leave_non_comment_reviews; end

  sig { returns(T::Boolean) }
  def viewer_can_leave_non_comment_reviews?; end

  sig { returns(T::Boolean) }
  def viewer_can_merge_as_admin; end

  sig { returns(T::Boolean) }
  def viewer_can_merge_as_admin?; end

  sig { returns(T::Boolean) }
  def viewer_can_react; end

  sig { returns(T::Boolean) }
  def viewer_can_react?; end

  sig { returns(T::Boolean) }
  def viewer_can_read_user_content_edits; end

  sig { returns(T::Boolean) }
  def viewer_can_read_user_content_edits?; end

  sig { returns(T::Boolean) }
  def viewer_can_reopen; end

  sig { returns(T::Boolean) }
  def viewer_can_reopen?; end

  sig { returns(T::Boolean) }
  def viewer_can_report; end

  sig { returns(T::Boolean) }
  def viewer_can_report?; end

  sig { returns(T::Boolean) }
  def viewer_can_report_to_maintainer; end

  sig { returns(T::Boolean) }
  def viewer_can_report_to_maintainer?; end

  sig { returns(T::Boolean) }
  def viewer_can_restore_head_ref; end

  sig { returns(T::Boolean) }
  def viewer_can_restore_head_ref?; end

  sig { returns(T::Boolean) }
  def viewer_can_subscribe; end

  sig { returns(T::Boolean) }
  def viewer_can_subscribe?; end

  sig { returns(T::Boolean) }
  def viewer_can_unblock_from_org; end

  sig { returns(T::Boolean) }
  def viewer_can_unblock_from_org?; end

  sig { returns(T::Boolean) }
  def viewer_can_unsubscribe; end

  sig { returns(T::Boolean) }
  def viewer_can_unsubscribe?; end

  sig { returns(T::Boolean) }
  def viewer_can_update; end

  sig { returns(T::Boolean) }
  def viewer_can_update?; end

  sig { returns(T::Boolean) }
  def viewer_can_update_branch; end

  sig { returns(T::Boolean) }
  def viewer_can_update_branch?; end

  sig { returns(T::Array[String]) }
  def viewer_cannot_update_reasons; end

  sig { returns(T::Boolean) }
  def viewer_cannot_update_reasons?; end

  sig { returns(T::Boolean) }
  def viewer_did_author; end

  sig { returns(T::Boolean) }
  def viewer_did_author?; end

  sig { returns(T::Boolean) }
  def viewer_has_pending_review; end

  sig { returns(T::Boolean) }
  def viewer_has_pending_review?; end

  sig { returns(T.nilable(T::Boolean)) }
  def viewer_has_violated_push_policy; end

  sig { returns(T::Boolean) }
  def viewer_has_violated_push_policy?; end

  sig { returns(T.nilable(PlatformTypes::PullRequestReview)) }
  def viewer_latest_review; end

  sig { returns(T::Boolean) }
  def viewer_latest_review?; end

  sig { returns(T.nilable(PlatformTypes::ReviewRequest)) }
  def viewer_latest_review_request; end

  sig { returns(T::Boolean) }
  def viewer_latest_review_request?; end

  sig { returns(T::Array[PlatformTypes::AllowablePullRequestMergeAction]) }
  def viewer_merge_actions; end

  sig { returns(T::Boolean) }
  def viewer_merge_actions?; end

  sig { returns(String) }
  def viewer_merge_body_text; end

  sig { returns(T::Boolean) }
  def viewer_merge_body_text?; end

  sig { returns(String) }
  def viewer_merge_headline_text; end

  sig { returns(T::Boolean) }
  def viewer_merge_headline_text?; end

  sig { returns(T.nilable(PlatformTypes::PullRequestReview)) }
  def viewer_pending_review; end

  sig { returns(T::Boolean) }
  def viewer_pending_review?; end

  sig { returns(PlatformTypes::PullRequestUserPreferences) }
  def viewer_preferences; end

  sig { returns(T::Boolean) }
  def viewer_preferences?; end

  sig { returns(String) }
  def viewer_relationship; end

  sig { returns(T::Boolean) }
  def viewer_relationship?; end

  sig { returns(T.nilable(String)) }
  def viewer_subscription; end

  sig { returns(T::Boolean) }
  def viewer_subscription?; end

  sig { returns(Integer) }
  def viewer_viewed_files; end

  sig { returns(T::Boolean) }
  def viewer_viewed_files?; end

  sig { returns(String) }
  def websocket; end

  sig { returns(T::Boolean) }
  def websocket?; end
end

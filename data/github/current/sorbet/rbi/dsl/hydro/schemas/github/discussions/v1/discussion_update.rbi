# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Discussions::V1::DiscussionUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Discussions::V1::DiscussionUpdate`.

class Hydro::Schemas::Github::Discussions::V1::DiscussionUpdate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      author: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      current_category: T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::DiscussionCategory),
      discussion: T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::Discussion),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      previous_category: T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::DiscussionCategory),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      spamurai_form_signals: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals),
      specimen_body: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData),
      specimen_title: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)
    ).void
  end
  def initialize(actor: nil, author: nil, current_category: nil, discussion: nil, feature_flags: T.unsafe(nil), previous_category: nil, repository: nil, repository_owner: nil, request_context: nil, spamurai_form_signals: nil, specimen_body: nil, specimen_title: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def author; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def author=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_author; end

  sig { void }
  def clear_current_category; end

  sig { void }
  def clear_discussion; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_previous_category; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_spamurai_form_signals; end

  sig { void }
  def clear_specimen_body; end

  sig { void }
  def clear_specimen_title; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::DiscussionCategory)) }
  def current_category; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::DiscussionCategory)).void }
  def current_category=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::Discussion)) }
  def discussion; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::Discussion)).void }
  def discussion=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::DiscussionCategory)) }
  def previous_category; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::DiscussionCategory)).void }
  def previous_category=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)) }
  def spamurai_form_signals; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)).void }
  def spamurai_form_signals=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)) }
  def specimen_body; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)).void }
  def specimen_body=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)) }
  def specimen_title; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)).void }
  def specimen_title=(value); end
end

<%
    textarea_id = "comment-field-#{SecureRandom.hex(4)}" unless local_assigns[:textarea_id]

    comment_body = nil unless local_assigns[:comment_body]
    templated_content = nil unless local_assigns[:templated_content]
    textarea_name = "body" unless local_assigns[:textarea_name]
    include_comment_form_error = local_assigns.fetch(:include_comment_form_error, true)
    include_hidden_saved_reply_id = local_assigns.fetch(:include_hidden_saved_reply_id, true)
    issue_suggestions_url = nil unless local_assigns[:issue_suggestions_url]
    mention_suggestions_url = nil unless local_assigns[:mention_suggestions_url]
    tabindex = local_assigns[:tabindex]
%>

<tab-container class="js-previewable-comment-form Box CommentBox write-selected" data-preview-url="<%= data_preview_url %>">
  <%= csrf_hidden_input_for data_preview_url, class: "js-data-preview-url-csrf" %>
  <div class="tabnav CommentBox-header width-full">
    <div class="tabnav-tabs" role="tablist">
      <%= render(Primer::Beta::BaseButton.new(flex: [1, nil, :auto], classes: "tabnav-tab write-tab js-write-tab", role: "tab", aria: { selected: true })) { "Write" } %>
      <%= render(Primer::Beta::BaseButton.new(flex: [1, nil, :auto], classes: "tabnav-tab preview-tab js-preview-tab", role: "tab")) { "Preview" } %>
    </div>
    <%= render Comments::GitHubSpecificMarkdownToolbarComponent.new(
      textarea_id: textarea_id,
      hide_mentions: mention_suggestions_url.nil?,
      hide_cross_references: issue_suggestions_url.nil?) %>
  </div>

    <% if include_comment_form_error %>
      <div class="comment-form-error js-comment-form-error" role="alert" hidden></div>
    <% end %>

    <%= file_attachment_tag(model: :assets, class: "js-upload-markdown-image", input: "fc-#{textarea_id}", role: "tabpanel", "data-tab-container-no-tabstop": true, "data-upload-repository-id": local_assigns[:repository_id]) do |upload_enabled| %>
      <div class="js-write-bucket">
        <% if include_hidden_saved_reply_id %>
          <input type="hidden" name="saved_reply_id" id="<%= textarea_id %>_saved_reply_id" class="js-resettable-field" value="" data-reset-value="">
        <% end %>

        <% keys = [":", mention_suggestions_url ? "@" : nil, issue_suggestions_url ? "#" : nil].compact %>
        <text-expander keys="<%= keys.join(" ") %>"
          <% if mention_suggestions_url %>data-mention-url="<%= mention_suggestions_url %>"<% end %>
          <% if issue_suggestions_url %>data-issue-url="<%= issue_suggestions_url %>"<% end %>
          data-emoji-url="<%= emoji_suggestions_path %>">
          <div class="CommentBox-container">
            <textarea name="<%= textarea_name %>"
                    id="<%= textarea_id %>"
                    <% if current_user&.paste_url_link_as_plain_text? %>data-paste-url-links-as-plain-text<% end %>
                    placeholder="<%= local_assigns[:placeholder] || "Leave a comment" %>"
                    aria-label="<%= local_assigns[:aria_label] || "Comment body" %>"
                    class="FormControl-textarea CommentBox-input js-comment-field js-paste-markdown js-task-list-field js-quick-submit js-size-to-fit js-session-resumable"
                    <% if tabindex %>
                    tabindex="<%= tabindex %>"
                    <% end %>
                    data-templated-content="<%= templated_content %>"
                    required><%= comment_body %></textarea>
          </div>
        </text-expander>
        <input <%= upload_policy_accept_extensions_attribute([:assets]) %> type="file" multiple hidden id="<%= "fc-#{textarea_id}" %>">
        <div class="file-attachment-errors">
          <%= render(Primer::Alpha::Banner.new(border_bottom: 0, scheme: :danger, classes: "rounded-bottom-2 bad-file repository-required", full: true, description: "Try again with #{upload_policy_friendly_extensions([:assets])}")) { "We don’t support that file type." } %>
          <%= render(Primer::Alpha::Banner.new(border_bottom: 0, scheme: :danger, classes: "rounded-bottom-2 bad-permissions", full: true, description: "Try again with #{upload_policy_friendly_extensions([:assets])}")) { "Attaching documents requires write permission to this repository." } %>
          <%# This HTML has been moved off the render thread. The error message will come from the server response and be inserted in the DOM by JavaScript %>
          <%= render(Primer::Alpha::Banner.new(border_bottom: 0, scheme: :danger, classes: "rounded-bottom-2 too-big js-upload-too-big", full: true)) { "" } %>
          <%= render(Primer::Alpha::Banner.new(border_bottom: 0, scheme: :danger, classes: "rounded-bottom-2 empty", full: true, description: "Try again with a file that’s not empty.")) { "This file is empty." } %>
          <%= render(Primer::Alpha::Banner.new(border_bottom: 0, scheme: :danger, classes: "rounded-bottom-2 hidden-file", full: true, description: "Try again with another file.")) { "This file is hidden." } %>
          <%= render(Primer::Alpha::Banner.new(border_bottom: 0, scheme: :danger, classes: "rounded-bottom-2 failed-request", full: true, description: "Try again.")) { "Something went really wrong, and we can’t process that file." } %>
        </div>
      </div>
    <% end %>

  <div class="js-preview-panel overflow-auto CommentBox-comment" role="tabpanel" hidden>
    <%= render partial: "comments/preview_comment" %>
  </div>

  <% if include_comment_form_error %>
    <div class="comment-form-error mb-2 js-comment-update-error" hidden></div>
  <% end %>
</tab-container>

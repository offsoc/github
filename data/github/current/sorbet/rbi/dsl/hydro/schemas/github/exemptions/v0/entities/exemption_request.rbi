# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionRequest`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionRequest`.

class Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionRequest
  sig do
    params(
      created_at: T.nilable(Google::Protobuf::Timestamp),
      expires_at: T.nilable(Google::Protobuf::Timestamp),
      id: T.nilable(Integer),
      metadata: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      number: T.nilable(Integer),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_type: T.nilable(T.any(Symbol, Integer)),
      requester: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      resource_identifier: T.nilable(String),
      resource_owner_id: T.nilable(Integer),
      resource_owner_type: T.nilable(String),
      responses: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionResponse], T::Array[Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionResponse])),
      status: T.nilable(T.any(Symbol, Integer)),
      updated_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(created_at: nil, expires_at: nil, id: nil, metadata: T.unsafe(nil), number: nil, repository: nil, request_type: nil, requester: nil, resource_identifier: nil, resource_owner_id: nil, resource_owner_type: nil, responses: T.unsafe(nil), status: nil, updated_at: nil); end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_expires_at; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_metadata; end

  sig { void }
  def clear_number; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_type; end

  sig { void }
  def clear_requester; end

  sig { void }
  def clear_resource_identifier; end

  sig { void }
  def clear_resource_owner_id; end

  sig { void }
  def clear_resource_owner_type; end

  sig { void }
  def clear_responses; end

  sig { void }
  def clear_status; end

  sig { void }
  def clear_updated_at; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def expires_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def expires_at=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def metadata; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def metadata=(value); end

  sig { returns(Integer) }
  def number; end

  sig { params(value: Integer).void }
  def number=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def request_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def request_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def requester; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def requester=(value); end

  sig { returns(String) }
  def resource_identifier; end

  sig { params(value: String).void }
  def resource_identifier=(value); end

  sig { returns(Integer) }
  def resource_owner_id; end

  sig { params(value: Integer).void }
  def resource_owner_id=(value); end

  sig { returns(String) }
  def resource_owner_type; end

  sig { params(value: String).void }
  def resource_owner_type=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionResponse]) }
  def responses; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionResponse]
    ).void
  end
  def responses=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end
end

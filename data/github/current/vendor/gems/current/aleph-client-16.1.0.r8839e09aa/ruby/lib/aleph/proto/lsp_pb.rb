# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: aleph/proto/lsp.proto

require 'google/protobuf'

require 'hydro/schemas/blackbird/v0/entities/symbol_kind_pb'
Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("aleph/proto/lsp.proto", :syntax => :proto3) do
    add_message "github.aleph.Actor" do
      optional :actor_id, :uint32, 1
      optional :request_ip, :string, 2
      optional :access_token, :string, 3
      optional :access_token_expires, :int64, 4
      optional :session_id, :string, 5
      optional :access_token_kind, :string, 6
    end
    add_message "github.aleph.ExistRequest" do
      optional :root_id, :uint64, 1
      optional :commit_oid, :string, 2
      optional :backend, :enum, 3, "github.aleph.Backend"
      optional :repository_owner, :string, 4
      optional :repository_name, :string, 5
      repeated :backends, :enum, 6, "github.aleph.Backend"
      optional :network_id, :uint64, 7
      optional :repository_id, :uint64, 8
      optional :actor, :message, 9, "github.aleph.Actor"
    end
    add_message "github.aleph.ExistResponse" do
      optional :backend, :enum, 1, "github.aleph.Backend"
    end
    add_message "github.aleph.TextDocumentLocationResponse" do
      repeated :locations, :message, 1, "github.aleph.Location"
      optional :repository_id, :uint64, 2
      optional :commit_oid, :string, 3
      optional :backend, :enum, 4, "github.aleph.Backend"
      repeated :available_backends, :enum, 5, "github.aleph.Backend"
    end
    add_message "github.aleph.TextDocumentPositionRequest" do
      optional :root_id, :uint64, 1
      optional :commit_oid, :string, 2
      optional :path, :string, 3
      optional :position, :message, 4, "github.aleph.Position"
      optional :backend, :enum, 5, "github.aleph.Backend"
      optional :repository_owner, :string, 6
      optional :repository_name, :string, 7
      repeated :backends, :enum, 8, "github.aleph.Backend"
      optional :network_id, :uint64, 9
      optional :repository_id, :uint64, 10
      optional :search_dependencies, :bool, 11
      optional :ref, :string, 12
      optional :actor, :message, 13, "github.aleph.Actor"
      optional :query, :string, 14
      optional :language, :string, 15
      optional :symbol_kind, :enum, 16, "hydro.schemas.blackbird.v0.entities.SymbolKind"
    end
    add_message "github.aleph.GetPartialCallGraphResponse" do
      optional :repository_id, :uint64, 1
      optional :commit_oid, :string, 2
      optional :backend, :enum, 3, "github.aleph.Backend"
      repeated :available_backends, :enum, 4, "github.aleph.Backend"
      repeated :symbols, :message, 5, "github.aleph.CallGraphSymbol"
    end
    add_message "github.aleph.CallGraphSymbol" do
      optional :location, :message, 1, "github.aleph.Location"
      optional :ident_offset, :message, 2, "github.aleph.ByteOffset"
      optional :extent_offset, :message, 3, "github.aleph.ByteOffset"
      optional :fully_qualified_name, :string, 4
      optional :name, :string, 5
      repeated :calls, :uint32, 6
      repeated :call_references, :message, 7, "github.aleph.Location"
    end
    add_message "github.aleph.FindDefinitionsOfQualifiedNamesRequest" do
      optional :root_id, :uint64, 1
      optional :commit_oid, :string, 2
      repeated :qualified_names, :string, 3
      optional :network_id, :uint64, 4
      optional :repository_id, :uint64, 5
      optional :language, :string, 6
      optional :ref, :string, 7
    end
    add_message "github.aleph.FindDefinitionsOfQualifiedNamesResponse" do
      optional :repository_id, :uint64, 1
      optional :commit_oid, :string, 2
      optional :backend, :enum, 3, "github.aleph.Backend"
      repeated :definitions, :message, 4, "github.aleph.QualifiedNameLocation"
    end
    add_message "github.aleph.FindReferencesToQualifiedNamesRequest" do
      optional :root_id, :uint64, 1
      optional :commit_oid, :string, 2
      repeated :qualified_names, :string, 3
      optional :network_id, :uint64, 4
      optional :repository_id, :uint64, 5
      optional :language, :string, 6
      optional :ref, :string, 7
    end
    add_message "github.aleph.FindReferencesToQualifiedNamesResponse" do
      optional :repository_id, :uint64, 1
      optional :commit_oid, :string, 2
      optional :backend, :enum, 3, "github.aleph.Backend"
      repeated :references, :message, 4, "github.aleph.QualifiedNameLocation"
    end
    add_message "github.aleph.FindDefinedNameByDefiniensLocationRequest" do
      optional :commit_oid, :string, 1
      optional :path, :string, 2
      optional :range, :message, 3, "github.aleph.Range"
      optional :network_id, :uint64, 4
      optional :repository_id, :uint64, 5
      optional :language, :string, 6
      optional :ref, :string, 7
      repeated :backends, :enum, 8, "github.aleph.Backend"
    end
    add_message "github.aleph.FindDefinedNameByDefiniensLocationResponse" do
      optional :repository_id, :uint64, 1
      optional :commit_oid, :string, 2
      optional :backend, :enum, 3, "github.aleph.Backend"
      repeated :references, :message, 4, "github.aleph.Location"
      repeated :available_backends, :enum, 5, "github.aleph.Backend"
      repeated :symbols, :message, 6, "github.aleph.SymbolInformation"
    end
    add_message "github.aleph.FindReferencesForSearchKeysRequest" do
      optional :commit_oid, :string, 1
      optional :network_id, :uint64, 2
      optional :repository_id, :uint64, 3
      optional :ref, :string, 4
      repeated :search_keys, :string, 5
      optional :references_to_consider, :enum, 6, "github.aleph.ReferencesForSearchKeysAllowAliasedReferences"
    end
    add_message "github.aleph.FindReferencesForSearchKeysResponse" do
      optional :repository_id, :uint64, 1
      optional :commit_oid, :string, 2
      optional :backend, :enum, 3, "github.aleph.Backend"
      repeated :results, :message, 5, "github.aleph.SearchKeySymbolInformation"
      repeated :references, :message, 4, "github.aleph.Location"
    end
    add_message "github.aleph.SearchKeySymbolInformation" do
      optional :search_key, :string, 1
      repeated :symbols, :message, 2, "github.aleph.SymbolInformation"
    end
    add_message "github.aleph.FindSymbolInformationForFullyQualifiedNameRequest" do
      optional :commit_oid, :string, 1
      optional :network_id, :uint64, 2
      optional :repository_id, :uint64, 3
      optional :language, :string, 4
      optional :ref, :string, 5
      optional :fully_qualified_name, :string, 6
    end
    add_message "github.aleph.FindSymbolInformationForFullyQualifiedNameResponse" do
      optional :commit_oid, :string, 1
      optional :repository_id, :uint64, 2
      optional :backend, :enum, 3, "github.aleph.Backend"
      repeated :symbols, :message, 4, "github.aleph.SymbolInformation"
    end
    add_message "github.aleph.FindReflexiveTransitiveCallersByDefiniensLocationRequest" do
      optional :commit_oid, :string, 1
      optional :path, :string, 2
      optional :range, :message, 3, "github.aleph.Range"
      optional :network_id, :uint64, 4
      optional :repository_id, :uint64, 5
      optional :language, :string, 6
      optional :ref, :string, 7
      repeated :backends, :enum, 8, "github.aleph.Backend"
      repeated :ranges, :message, 9, "github.aleph.Range"
    end
    add_message "github.aleph.FindReflexiveTransitiveCallersByDefiniensLocationResponse" do
      optional :repository_id, :uint64, 1
      optional :commit_oid, :string, 2
      optional :backend, :enum, 3, "github.aleph.Backend"
      repeated :available_backends, :enum, 4, "github.aleph.Backend"
      repeated :symbols, :message, 5, "github.aleph.SymbolInformation"
    end
    add_message "github.aleph.SymbolInformation" do
      optional :location, :message, 1, "github.aleph.Location"
      optional :definition, :message, 4, "github.aleph.DefinitionInformation"
      optional :reference, :message, 5, "github.aleph.ReferenceInformation"
      repeated :fully_qualified_names, :string, 2
      repeated :search_keys, :string, 3
    end
    add_message "github.aleph.DefinitionInformation" do
      repeated :fully_qualified_names, :string, 1
      repeated :search_keys, :string, 2
    end
    add_message "github.aleph.ReferenceInformation" do
    end
    add_message "github.aleph.QualifiedNameLocation" do
      optional :qualified_name, :string, 1
      repeated :symbols, :message, 3, "github.aleph.SymbolInformation"
      repeated :locations, :message, 2, "github.aleph.Location"
    end
    add_message "github.aleph.Position" do
      optional :line, :uint32, 1
      optional :character, :uint32, 2
    end
    add_message "github.aleph.Range" do
      optional :start, :message, 1, "github.aleph.Position"
      optional :end, :message, 2, "github.aleph.Position"
    end
    add_message "github.aleph.ByteOffset" do
      optional :start, :uint32, 1
      optional :end, :uint32, 2
    end
    add_message "github.aleph.Package" do
      optional :repository_id, :uint64, 1
      optional :commit_oid, :string, 2
    end
    add_message "github.aleph.Location" do
      optional :path, :string, 3
      optional :kind, :string, 4
      optional :symbol_kind, :enum, 14, "hydro.schemas.blackbird.v0.entities.SymbolKind"
      optional :uri, :string, 5
      optional :local, :bool, 6
      optional :pkg, :message, 9, "github.aleph.Package"
      optional :first_line, :string, 1
      optional :leading_whitespace, :uint32, 10
      optional :trailing_whitespace, :uint32, 11
      optional :ident, :message, 12, "github.aleph.Range"
      optional :extent, :message, 13, "github.aleph.Range"
      optional :range, :message, 2, "github.aleph.Range"
    end
    add_message "github.aleph.WorkspaceAssetRequest" do
      optional :uri, :string, 1
    end
    add_message "github.aleph.WorkspaceAssetResponse" do
      optional :content, :bytes, 1
    end
    add_enum "github.aleph.ReferencesForSearchKeysAllowAliasedReferences" do
      value :OnlyDirectReferences, 0
      value :DirectAndAliasedReferences, 1
    end
    add_enum "github.aleph.Backend" do
      value :AUTO, 0
      value :RICH_NAV, 1
      value :ALEPH_FUZZY, 2
      value :ALEPH_PRECISE, 3
      value :ALEPH_PRECISE_PREVIEW, 4
      value :ALEPH_FUZZY_PREVIEW, 5
      value :BLACKBIRD, 6
      value :ALEPH_PRECISE_DEVELOPMENT, 7
    end
  end
end

module Aleph::Proto
  Actor = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.Actor").msgclass
  ExistRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.ExistRequest").msgclass
  ExistResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.ExistResponse").msgclass
  TextDocumentLocationResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.TextDocumentLocationResponse").msgclass
  TextDocumentPositionRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.TextDocumentPositionRequest").msgclass
  GetPartialCallGraphResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.GetPartialCallGraphResponse").msgclass
  CallGraphSymbol = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.CallGraphSymbol").msgclass
  FindDefinitionsOfQualifiedNamesRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.FindDefinitionsOfQualifiedNamesRequest").msgclass
  FindDefinitionsOfQualifiedNamesResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.FindDefinitionsOfQualifiedNamesResponse").msgclass
  FindReferencesToQualifiedNamesRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.FindReferencesToQualifiedNamesRequest").msgclass
  FindReferencesToQualifiedNamesResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.FindReferencesToQualifiedNamesResponse").msgclass
  FindDefinedNameByDefiniensLocationRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.FindDefinedNameByDefiniensLocationRequest").msgclass
  FindDefinedNameByDefiniensLocationResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.FindDefinedNameByDefiniensLocationResponse").msgclass
  FindReferencesForSearchKeysRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.FindReferencesForSearchKeysRequest").msgclass
  FindReferencesForSearchKeysResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.FindReferencesForSearchKeysResponse").msgclass
  SearchKeySymbolInformation = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.SearchKeySymbolInformation").msgclass
  FindSymbolInformationForFullyQualifiedNameRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.FindSymbolInformationForFullyQualifiedNameRequest").msgclass
  FindSymbolInformationForFullyQualifiedNameResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.FindSymbolInformationForFullyQualifiedNameResponse").msgclass
  FindReflexiveTransitiveCallersByDefiniensLocationRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.FindReflexiveTransitiveCallersByDefiniensLocationRequest").msgclass
  FindReflexiveTransitiveCallersByDefiniensLocationResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.FindReflexiveTransitiveCallersByDefiniensLocationResponse").msgclass
  SymbolInformation = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.SymbolInformation").msgclass
  DefinitionInformation = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.DefinitionInformation").msgclass
  ReferenceInformation = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.ReferenceInformation").msgclass
  QualifiedNameLocation = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.QualifiedNameLocation").msgclass
  Position = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.Position").msgclass
  Range = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.Range").msgclass
  ByteOffset = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.ByteOffset").msgclass
  Package = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.Package").msgclass
  Location = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.Location").msgclass
  WorkspaceAssetRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.WorkspaceAssetRequest").msgclass
  WorkspaceAssetResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.WorkspaceAssetResponse").msgclass
  ReferencesForSearchKeysAllowAliasedReferences = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.ReferencesForSearchKeysAllowAliasedReferences").enummodule
  Backend = Google::Protobuf::DescriptorPool.generated_pool.lookup("github.aleph.Backend").enummodule
end

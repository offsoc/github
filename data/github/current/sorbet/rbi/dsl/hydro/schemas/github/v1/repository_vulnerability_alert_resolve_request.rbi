# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::RepositoryVulnerabilityAlertResolveRequest`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::RepositoryVulnerabilityAlertResolveRequest`.

class Hydro::Schemas::Github::V1::RepositoryVulnerabilityAlertResolveRequest
  sig do
    params(
      config: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryDependencyConfig),
      description: T.nilable(String),
      dry_run: T.nilable(T::Boolean),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      github_bot_install_id: T.nilable(String),
      owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_dependency_update_id: T.nilable(String),
      repository_vulnerability_alert: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryVulnerabilityAlert),
      security_advisory: T.nilable(Hydro::Schemas::Github::V1::Entities::SecurityAdvisory),
      security_vulnerability: T.nilable(Hydro::Schemas::Github::V1::Entities::SecurityVulnerability),
      trigger: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(config: nil, description: nil, dry_run: nil, feature_flags: T.unsafe(nil), github_bot_install_id: nil, owner: nil, repository: nil, repository_dependency_update_id: nil, repository_vulnerability_alert: nil, security_advisory: nil, security_vulnerability: nil, trigger: nil); end

  sig { void }
  def clear_config; end

  sig { void }
  def clear_description; end

  sig { void }
  def clear_dry_run; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_github_bot_install_id; end

  sig { void }
  def clear_owner; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_dependency_update_id; end

  sig { void }
  def clear_repository_vulnerability_alert; end

  sig { void }
  def clear_security_advisory; end

  sig { void }
  def clear_security_vulnerability; end

  sig { void }
  def clear_trigger; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryDependencyConfig)) }
  def config; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryDependencyConfig)).void }
  def config=(value); end

  sig { returns(String) }
  def description; end

  sig { params(value: String).void }
  def description=(value); end

  sig { returns(T::Boolean) }
  def dry_run; end

  sig { params(value: T::Boolean).void }
  def dry_run=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(String) }
  def github_bot_install_id; end

  sig { params(value: String).void }
  def github_bot_install_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(String) }
  def repository_dependency_update_id; end

  sig { params(value: String).void }
  def repository_dependency_update_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryVulnerabilityAlert)) }
  def repository_vulnerability_alert; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryVulnerabilityAlert)).void }
  def repository_vulnerability_alert=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SecurityAdvisory)) }
  def security_advisory; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SecurityAdvisory)).void }
  def security_advisory=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SecurityVulnerability)) }
  def security_vulnerability; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SecurityVulnerability)).void }
  def security_vulnerability=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def trigger; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def trigger=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Billing::ProductUUID`.
# Please instead update this file by running `bin/tapioca dsl Billing::ProductUUID`.

class Billing::ProductUUID
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def billing_cycles; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::ProductUUID).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::ProductUUID).void)
      ).returns(::Billing::ProductUUID)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::ProductUUID).void)
      ).returns(::Billing::ProductUUID)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::ProductUUID).void)
      ).returns(::Billing::ProductUUID)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::ProductUUID).void)
      ).returns(::Billing::ProductUUID)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::ProductUUID).void)
      ).returns(::Billing::ProductUUID)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Billing::ProductUUID]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Billing::ProductUUID)) }
    def fifth; end

    sig { returns(::Billing::ProductUUID) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Billing::ProductUUID)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Billing::ProductUUID) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Billing::ProductUUID).void)
      ).returns(T.nilable(T::Enumerator[::Billing::ProductUUID]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Billing::ProductUUID]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Billing::ProductUUID]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::ProductUUID).void)
      ).returns(::Billing::ProductUUID)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::ProductUUID).void)
      ).returns(::Billing::ProductUUID)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::ProductUUID).void)
      ).returns(::Billing::ProductUUID)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Billing::ProductUUID)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Billing::ProductUUID) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Billing::ProductUUID) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Billing::ProductUUID) }
    def first!; end

    sig { returns(T.nilable(::Billing::ProductUUID)) }
    def forty_two; end

    sig { returns(::Billing::ProductUUID) }
    def forty_two!; end

    sig { returns(T.nilable(::Billing::ProductUUID)) }
    def fourth; end

    sig { returns(::Billing::ProductUUID) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Billing::ProductUUID) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::ProductUUID).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::ProductUUID).void)
      ).returns(::Billing::ProductUUID)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::ProductUUID).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::ProductUUID).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Billing::ProductUUID)) }
    def second; end

    sig { returns(::Billing::ProductUUID) }
    def second!; end

    sig { returns(T.nilable(::Billing::ProductUUID)) }
    def second_to_last; end

    sig { returns(::Billing::ProductUUID) }
    def second_to_last!; end

    sig { returns(::Billing::ProductUUID) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Billing::ProductUUID) }
    def take!; end

    sig { returns(T.nilable(::Billing::ProductUUID)) }
    def third; end

    sig { returns(::Billing::ProductUUID) }
    def third!; end

    sig { returns(T.nilable(::Billing::ProductUUID)) }
    def third_to_last; end

    sig { returns(::Billing::ProductUUID) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def billing_cycle_month!; end

    sig { returns(T::Boolean) }
    def billing_cycle_month?; end

    sig { void }
    def billing_cycle_one_time!; end

    sig { returns(T::Boolean) }
    def billing_cycle_one_time?; end

    sig { void }
    def billing_cycle_year!; end

    sig { returns(T::Boolean) }
    def billing_cycle_year?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def billing_transaction_line_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def billing_transaction_line_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Billing::ProductUUID` class because it declared `has_many :billing_transaction_line_items`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::BillingTransaction::LineItem::PrivateCollectionProxy) }
    def billing_transaction_line_items; end

    sig { params(value: T::Enumerable[::Billing::BillingTransaction::LineItem]).void }
    def billing_transaction_line_items=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pending_subscription_item_change_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pending_subscription_item_change_ids=(ids); end

    # This method is created by ActiveRecord on the `Billing::ProductUUID` class because it declared `has_many :pending_subscription_item_changes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PendingSubscriptionItemChange::PrivateCollectionProxy) }
    def pending_subscription_item_changes; end

    sig { params(value: T::Enumerable[::Billing::PendingSubscriptionItemChange]).void }
    def pending_subscription_item_changes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def subscription_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subscription_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Billing::ProductUUID` class because it declared `has_many :subscription_items`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::SubscriptionItem::PrivateCollectionProxy) }
    def subscription_items; end

    sig { params(value: T::Enumerable[::Billing::SubscriptionItem]).void }
    def subscription_items=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def billable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def billing_cycle_month(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def billing_cycle_one_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def billing_cycle_year(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def copilot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def discountable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def discounts(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_billing_interval(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_zuora_product_rate_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def github_products(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def marketplace(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def metered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def non_metered_github_plans(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_billing_cycle_month(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_billing_cycle_one_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_billing_cycle_year(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sponsors(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sponsors_listings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sponsors_tiers(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def subscribable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_product_key(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_billing_transaction_line_items; end

    sig { returns(Promise[T.untyped]) }
    def async_pending_subscription_item_changes; end

    sig { returns(Promise[T.untyped]) }
    def async_subscription_items; end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def bill_on_trial_expiration; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def bill_on_trial_expiration=(value); end

    sig { returns(T::Boolean) }
    def bill_on_trial_expiration?; end

    sig { returns(T.nilable(T::Boolean)) }
    def bill_on_trial_expiration_before_last_save; end

    sig { returns(T.untyped) }
    def bill_on_trial_expiration_before_type_cast; end

    sig { returns(T::Boolean) }
    def bill_on_trial_expiration_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def bill_on_trial_expiration_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def bill_on_trial_expiration_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def bill_on_trial_expiration_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def bill_on_trial_expiration_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def bill_on_trial_expiration_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def bill_on_trial_expiration_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def bill_on_trial_expiration_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def bill_on_trial_expiration_was; end

    sig { void }
    def bill_on_trial_expiration_will_change!; end

    sig { returns(::String) }
    def billing_cycle; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def billing_cycle=(value); end

    sig { returns(T::Boolean) }
    def billing_cycle?; end

    sig { returns(T.nilable(::String)) }
    def billing_cycle_before_last_save; end

    sig { returns(T.untyped) }
    def billing_cycle_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_cycle_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def billing_cycle_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def billing_cycle_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def billing_cycle_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_cycle_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def billing_cycle_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def billing_cycle_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_cycle_previously_was; end

    sig { returns(T.nilable(::String)) }
    def billing_cycle_was; end

    sig { void }
    def billing_cycle_will_change!; end

    sig { returns(T.untyped) }
    def charges; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def charges=(value); end

    sig { returns(T::Boolean) }
    def charges?; end

    sig { returns(T.untyped) }
    def charges_before_last_save; end

    sig { returns(T.untyped) }
    def charges_before_type_cast; end

    sig { returns(T::Boolean) }
    def charges_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def charges_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def charges_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def charges_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def charges_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def charges_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def charges_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def charges_previously_was; end

    sig { returns(T.untyped) }
    def charges_was; end

    sig { void }
    def charges_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Boolean) }
    def metered; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def metered=(value); end

    sig { returns(T::Boolean) }
    def metered?; end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_before_last_save; end

    sig { returns(T.untyped) }
    def metered_before_type_cast; end

    sig { returns(T::Boolean) }
    def metered_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def metered_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def metered_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def metered_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def metered_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def metered_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_was; end

    sig { void }
    def metered_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::String) }
    def product_key; end

    sig { params(value: ::String).returns(::String) }
    def product_key=(value); end

    sig { returns(T::Boolean) }
    def product_key?; end

    sig { returns(T.nilable(::String)) }
    def product_key_before_last_save; end

    sig { returns(T.untyped) }
    def product_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def product_key_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def product_key_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def product_key_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def product_key_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def product_key_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def product_key_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def product_key_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def product_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def product_key_was; end

    sig { void }
    def product_key_will_change!; end

    sig { returns(::String) }
    def product_type; end

    sig { params(value: ::String).returns(::String) }
    def product_type=(value); end

    sig { returns(T::Boolean) }
    def product_type?; end

    sig { returns(T.nilable(::String)) }
    def product_type_before_last_save; end

    sig { returns(T.untyped) }
    def product_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def product_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def product_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def product_type_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def product_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def product_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def product_type_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def product_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def product_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def product_type_was; end

    sig { void }
    def product_type_will_change!; end

    sig { void }
    def restore_bill_on_trial_expiration!; end

    sig { void }
    def restore_billing_cycle!; end

    sig { void }
    def restore_charges!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_metered!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_product_key!; end

    sig { void }
    def restore_product_type!; end

    sig { void }
    def restore_zuora_product_id!; end

    sig { void }
    def restore_zuora_product_rate_plan_charge_ids!; end

    sig { void }
    def restore_zuora_product_rate_plan_id!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_bill_on_trial_expiration; end

    sig { returns(T::Boolean) }
    def saved_change_to_bill_on_trial_expiration?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_billing_cycle; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_cycle?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_charges; end

    sig { returns(T::Boolean) }
    def saved_change_to_charges?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_metered; end

    sig { returns(T::Boolean) }
    def saved_change_to_metered?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_product_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_product_key?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_product_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_product_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_zuora_product_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_zuora_product_id?; end

    sig { returns(T.nilable([T::Hash[T.untyped, T.untyped], T::Hash[T.untyped, T.untyped]])) }
    def saved_change_to_zuora_product_rate_plan_charge_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_zuora_product_rate_plan_charge_ids?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_zuora_product_rate_plan_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_zuora_product_rate_plan_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bill_on_trial_expiration?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_cycle?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_charges?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_metered?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_product_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_product_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_zuora_product_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_zuora_product_rate_plan_charge_ids?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_zuora_product_rate_plan_id?; end

    sig { returns(T.nilable(::String)) }
    def zuora_product_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def zuora_product_id=(value); end

    sig { returns(T::Boolean) }
    def zuora_product_id?; end

    sig { returns(T.nilable(::String)) }
    def zuora_product_id_before_last_save; end

    sig { returns(T.untyped) }
    def zuora_product_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def zuora_product_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_product_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_product_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_product_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_product_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_product_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_product_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_product_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def zuora_product_id_was; end

    sig { void }
    def zuora_product_id_will_change!; end

    sig { returns(T::Hash[T.untyped, T.untyped]) }
    def zuora_product_rate_plan_charge_ids; end

    sig { params(value: T.nilable(T::Hash[T.untyped, T.untyped])).returns(T.nilable(T::Hash[T.untyped, T.untyped])) }
    def zuora_product_rate_plan_charge_ids=(value); end

    sig { returns(T::Boolean) }
    def zuora_product_rate_plan_charge_ids?; end

    sig { returns(T.nilable(T::Hash[T.untyped, T.untyped])) }
    def zuora_product_rate_plan_charge_ids_before_last_save; end

    sig { returns(T.untyped) }
    def zuora_product_rate_plan_charge_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def zuora_product_rate_plan_charge_ids_came_from_user?; end

    sig { returns(T.nilable([T::Hash[T.untyped, T.untyped], T::Hash[T.untyped, T.untyped]])) }
    def zuora_product_rate_plan_charge_ids_change; end

    sig { returns(T.nilable([T::Hash[T.untyped, T.untyped], T::Hash[T.untyped, T.untyped]])) }
    def zuora_product_rate_plan_charge_ids_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T::Hash[T.untyped, T.untyped]),
        to: T.nilable(T::Hash[T.untyped, T.untyped])
      ).returns(T::Boolean)
    end
    def zuora_product_rate_plan_charge_ids_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Hash[T.untyped, T.untyped])) }
    def zuora_product_rate_plan_charge_ids_in_database; end

    sig { returns(T.nilable([T::Hash[T.untyped, T.untyped], T::Hash[T.untyped, T.untyped]])) }
    def zuora_product_rate_plan_charge_ids_previous_change; end

    sig do
      params(
        from: T.nilable(T::Hash[T.untyped, T.untyped]),
        to: T.nilable(T::Hash[T.untyped, T.untyped])
      ).returns(T::Boolean)
    end
    def zuora_product_rate_plan_charge_ids_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Hash[T.untyped, T.untyped])) }
    def zuora_product_rate_plan_charge_ids_previously_was; end

    sig { returns(T.nilable(T::Hash[T.untyped, T.untyped])) }
    def zuora_product_rate_plan_charge_ids_was; end

    sig { void }
    def zuora_product_rate_plan_charge_ids_will_change!; end

    sig { returns(T.nilable(::String)) }
    def zuora_product_rate_plan_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def zuora_product_rate_plan_id=(value); end

    sig { returns(T::Boolean) }
    def zuora_product_rate_plan_id?; end

    sig { returns(T.nilable(::String)) }
    def zuora_product_rate_plan_id_before_last_save; end

    sig { returns(T.untyped) }
    def zuora_product_rate_plan_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def zuora_product_rate_plan_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_product_rate_plan_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_product_rate_plan_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_product_rate_plan_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_product_rate_plan_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_product_rate_plan_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_product_rate_plan_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_product_rate_plan_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def zuora_product_rate_plan_id_was; end

    sig { void }
    def zuora_product_rate_plan_id_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def billable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def billing_cycle_month(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def billing_cycle_one_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def billing_cycle_year(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def copilot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def discountable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def discounts(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_billing_interval(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_zuora_product_rate_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def github_products(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def marketplace(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def metered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def non_metered_github_plans(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_billing_cycle_month(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_billing_cycle_one_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_billing_cycle_year(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sponsors(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sponsors_listings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sponsors_tiers(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def subscribable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_product_key(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Billing::ProductUUID } }

    sig { returns(T::Array[::Billing::ProductUUID]) }
    def to_a; end

    sig { returns(T::Array[::Billing::ProductUUID]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Billing::ProductUUID } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Billing::ProductUUID } }

    sig do
      params(
        records: T.any(::Billing::ProductUUID, T::Enumerable[T.any(::Billing::ProductUUID, T::Enumerable[::Billing::ProductUUID])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Billing::ProductUUID, T::Enumerable[T.any(::Billing::ProductUUID, T::Enumerable[::Billing::ProductUUID])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Billing::ProductUUID, T::Enumerable[T.any(::Billing::ProductUUID, T::Enumerable[::Billing::ProductUUID])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Billing::ProductUUID]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Billing::ProductUUID, T::Enumerable[T.any(::Billing::ProductUUID, T::Enumerable[::Billing::ProductUUID])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Billing::ProductUUID, T::Enumerable[T.any(::Billing::ProductUUID, T::Enumerable[::Billing::ProductUUID])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Billing::ProductUUID, T::Enumerable[T.any(::Billing::ProductUUID, T::Enumerable[::Billing::ProductUUID])])
      ).returns(T::Array[::Billing::ProductUUID])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Billing::ProductUUID]) }
    def target; end

    sig { returns(T::Array[::Billing::ProductUUID]) }
    def to_a; end

    sig { returns(T::Array[::Billing::ProductUUID]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Billing::ProductUUID } }

    sig { returns(T::Array[::Billing::ProductUUID]) }
    def to_a; end

    sig { returns(T::Array[::Billing::ProductUUID]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Billing::ProductUUID } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

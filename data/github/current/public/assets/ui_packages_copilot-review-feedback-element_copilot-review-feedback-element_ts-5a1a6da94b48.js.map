{"version":3,"file":"chunk-ui_packages_copilot-review-feedback-element_copilot-review-feedback-element_ts-xxxxxxxxxxxx.js","mappings":"0lBAIO,uCAAMA,qCAAqCC,YAQhDC,mBAAoB,CAClB,IAAI,CAACC,mBAAmB,GACxB,IAAI,CAACC,aAAa,EACpB,CAEAC,kBAAmB,CACjBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAc,IAAI,CAACC,YAAY,EAC/B,IAAI,CAACC,YAAY,CAACC,QAAQ,CAAG,GAC7B,IAAI,CAACC,cAAc,CAACC,MAAM,CAAG,EAC/B,CAEAR,qBAAsB,QAGpB,IAAIS,IAFoB,CAACC,kBAAkB,CAACC,gBAAgB,CAAC,iBAE7CC,MAAM,EACpB,IAAI,CAACC,aAAa,GACX,KAEP,IAAI,CAACZ,aAAa,GACX,GAEX,CAEAY,eAAgB,CACd,IAAI,CAACC,YAAY,CAACR,QAAQ,CAAG,GAC7B,IAAI,CAACI,kBAAkB,CAACK,SAAS,CAACC,MAAM,CAAC,QAEzC,IAAMC,EAAc,IAAI,CAACP,kBAAkB,CAACQ,kBAAkB,CAC1DD,GACFA,CAAAA,EAAYT,MAAM,CAAG,EAAI,CAE7B,CAEAP,eAAgB,CACd,IAAI,CAACa,YAAY,CAACR,QAAQ,CAAG,GAC7B,IAAI,CAACI,kBAAkB,CAACK,SAAS,CAACI,GAAG,CAAC,QAEtC,IAAMF,EAAc,IAAI,CAACP,kBAAkB,CAACQ,kBAAkB,CAC1DD,GACFA,CAAAA,EAAYT,MAAM,CAAG,EAAG,CAE5B,CAEAY,iBAAiBC,CAAY,CAAE,CAE7B,GADAA,EAAMC,cAAc,GAChB,IAAI,CAACtB,mBAAmB,GAAI,CAC9B,IAAI,CAACO,cAAc,CAACD,QAAQ,CAAG,GAC/B,IAAI,CAACD,YAAY,CAACG,MAAM,CAAG,GAE3B,IAAMe,EAAc,IAAI,CAACC,YAAY,CAACC,aAAa,CAAC,8BAChDF,GAAaA,EAAYG,KAAK,GAClCvB,CAAAA,EAAAA,EAAAA,EAAAA,EAAc,IAAI,CAACqB,YAAY,CACjC,CACF,CACF,E,GA7DGG,EAAAA,EAAMA,C,CADI9B,6BAAAA,SAAAA,CAAAA,eAAAA,KAAAA,G,GAEV8B,EAAAA,EAAMA,C,CAFI9B,6BAAAA,SAAAA,CAAAA,iBAAAA,KAAAA,G,GAGV8B,EAAAA,EAAMA,C,CAHI9B,6BAAAA,SAAAA,CAAAA,qBAAAA,KAAAA,G,GAIV8B,EAAAA,EAAMA,C,CAJI9B,6BAAAA,SAAAA,CAAAA,eAAAA,KAAAA,G,GAKV8B,EAAAA,EAAMA,C,CALI9B,6BAAAA,SAAAA,CAAAA,eAAAA,KAAAA,G,GAMV8B,EAAAA,EAAMA,C,CANI9B,6BAAAA,SAAAA,CAAAA,eAAAA,KAAAA,GAAAA,6BAAAA,EAAAA,CADZ+B,EAAAA,EAAUA,C,CACE/B,6B,gGCCb,SAASgC,EAAKF,CAAmB,CAAEG,CAAY,CAAEC,CAAmB,EAClE,OAAOJ,EAAOK,aAAa,CACzB,IAAIC,YAAYH,EAAM,CACpBI,QAAS,GACTH,WAAAA,CACF,GAEJ,CASO,SAAS5B,EAAcgC,CAAqB,CAAEC,CAAkB,EACjEA,IACFC,SAUyBF,CAAqB,CAAEC,CAAiB,EACnE,GAAI,CAAED,CAAAA,aAAgBG,eAAc,EAAI,MAAM,UAAc,yDAC5D,GAAI,CAAEF,CAAAA,aAAqBtC,WAAU,EAAI,MAAM,UAAc,qDAC7D,GAAIsC,WAAAA,EAAUG,IAAI,CAAe,MAAM,UAAc,iDACrD,GAAI,CAACJ,GAAQA,IAASC,EAAUD,IAAI,CAAE,MAAM,MAAU,0DACxD,EAfwBA,EAAMC,GAC1BI,CAAAA,EAAAA,EAAAA,CAAAA,EAAyBJ,IAEvBP,EAAKM,EAAM,SAAU,KACvBA,EAAKM,MAAM,EAEf,CAcO,SAASC,EAAYC,CAAgB,CAAEC,CAAuB,EACnE,GAAI,kBAAOA,GACT,GAAID,aAAiBE,iBACnBF,EAAMG,OAAO,CAAGF,OAEhB,MAAM,UAAc,mDAEjB,CACL,GAAID,aAAAA,EAAMJ,IAAI,CACZ,MAAM,UAAc,wCAEpBI,CAAAA,EAAMC,KAAK,CAAGA,CAElB,CACAf,EAAKc,EAAO,SAAU,GACxB,CAGO,SAASI,EAAeZ,CAAqB,CAAEa,CAA+B,EACnF,IAAK,IAAMlB,KAAQkB,EAAQ,CACzB,IAAMJ,EAAQI,CAAM,CAAClB,EAAK,CACpBmB,EAAUd,EAAKe,QAAQ,CAACC,SAAS,CAACrB,EAEpCmB,CAAAA,aAAmBJ,iBACrBI,EAAQL,KAAK,CAAGA,EACPK,aAAmBG,qBAC5BH,CAAAA,EAAQL,KAAK,CAAGA,CAAI,CAExB,CACF,CAGO,SAASS,EAAYJ,CAAa,EACvC,GAAI,CAAEA,CAAAA,aAAmBnD,WAAU,EACjC,MAAO,GAGT,IAAMgC,EAAOmB,EAAQK,QAAQ,CAACC,WAAW,GACnChB,EAAO,CAACU,EAAQO,YAAY,CAAC,SAAW,EAAC,EAAGD,WAAW,GAC7D,MACEzB,WAAAA,GACAA,aAAAA,GACCA,UAAAA,GAAoBS,WAAAA,GAAqBA,UAAAA,GAC1CU,EAAQQ,iBAAiB,CAI7B,SAASC,EAAyBC,CAAkB,EAElD,OAAO,IAAIC,gBAAgBD,EAC7B,CAGO,SAASE,EAA2BC,CAAe,CAAEH,CAAkB,EAC5E,IAAMI,EAAkB,IAAIH,gBAAgBE,EAAWE,MAAM,EAE7D,IAAK,GAAM,CAACC,EAAKrB,EAAM,GADQc,EAAyBC,GAEtDI,EAAgBG,MAAM,CAACD,EAAKrB,GAE9B,OAAOmB,EAAgBI,QAAQ,EACjC,CAGO,SAASC,EAAUjC,CAAqB,EAC7C,OAAOuB,EAAyB,IAAIW,SAASlC,IAAOgC,QAAQ,EAC9D,C,kBCvFO,SAAS3B,EAAyB8B,CAA4C,EACnF,IAAMnC,EAAOmC,EAAOC,OAAO,CAAC,QAC5B,GAAI,CAAEpC,CAAAA,aAAgBG,eAAc,EAClC,OAGF,IAAIK,EAAQ6B,EAA+BrC,GAE3C,GAAImC,EAAOxC,IAAI,CAAE,CACf,IAAM2C,EAAeH,EAAOI,OAAO,CAAC,sBAAwB,SAAW,GACjE9B,EAAQ0B,EAAO1B,KAAK,EAAI6B,EACzB9B,IAEHA,CADAA,EAAQgC,SAASC,aAAa,CAAC,QAAO,EAChCrC,IAAI,CAAG,SACbI,EAAM5B,SAAS,CAACI,GAAG,CAAC,0BACpBgB,EAAK0C,OAAO,CAAClC,IAEfA,EAAMb,IAAI,CAAGwC,EAAOxC,IAAI,CACxBa,EAAMC,KAAK,CAAGA,CAChB,MAAWD,GACTA,EAAM3B,MAAM,EAEhB,CAEO,SAASwD,EAA+BrC,CAAqB,EAClE,IAAMQ,EAAQR,EAAKV,aAAa,CAAC,gCACjC,OAAOkB,aAAiBE,iBAAmBF,EAAQ,IACrD,C","sources":["ui/packages/copilot-review-feedback-element/copilot-review-feedback-element.ts","ui/packages/form-utils/form-utils.ts","ui/packages/form-utils/remote-submit.ts"],"sourcesContent":["import {controller, target} from '@github/catalyst'\nimport {requestSubmit} from '@github-ui/form-utils'\n\n@controller\nexport class CopilotReviewFeedbackElement extends HTMLElement {\n  @target voteUpButton!: HTMLButtonElement\n  @target voteDownButton!: HTMLButtonElement\n  @target feedbackCheckboxes!: HTMLElement\n  @target submitButton!: HTMLButtonElement\n  @target positiveForm!: HTMLFormElement\n  @target negativeForm!: HTMLFormElement\n\n  connectedCallback() {\n    this.validateAnySelected()\n    this.hideErrorText()\n  }\n\n  positiveFeedback() {\n    requestSubmit(this.positiveForm)\n    this.voteUpButton.disabled = true\n    this.voteDownButton.hidden = true\n  }\n\n  validateAnySelected() {\n    const checkedList = this.feedbackCheckboxes.querySelectorAll('input:checked')\n\n    if (checkedList.length === 0) {\n      this.showErrorText()\n      return false\n    } else {\n      this.hideErrorText()\n      return true\n    }\n  }\n\n  showErrorText() {\n    this.submitButton.disabled = true\n    this.feedbackCheckboxes.classList.remove('mb-5')\n\n    const nextElement = this.feedbackCheckboxes.nextElementSibling as HTMLElement\n    if (nextElement) {\n      nextElement.hidden = false\n    }\n  }\n\n  hideErrorText() {\n    this.submitButton.disabled = false\n    this.feedbackCheckboxes.classList.add('mb-5')\n\n    const nextElement = this.feedbackCheckboxes.nextElementSibling as HTMLElement\n    if (nextElement) {\n      nextElement.hidden = true\n    }\n  }\n\n  negativeFeedback(event: Event) {\n    event.preventDefault()\n    if (this.validateAnySelected()) {\n      this.voteDownButton.disabled = true\n      this.voteUpButton.hidden = true\n\n      const closeButton = this.negativeForm.querySelector('button[aria-label=\"Close\"]') as HTMLElement\n      if (closeButton) closeButton.click()\n      requestSubmit(this.negativeForm)\n    }\n  }\n}\n","import {persistSubmitButtonValue} from './remote-submit'\n\ntype TextField = HTMLInputElement | HTMLTextAreaElement\ntype Button = HTMLInputElement | HTMLButtonElement\n\nfunction fire(target: HTMLElement, name: string, cancelable: boolean): boolean {\n  return target.dispatchEvent(\n    new CustomEvent(name, {\n      bubbles: true,\n      cancelable,\n    }),\n  )\n}\n\n// Submit a form while ensuring that `submit` event is also triggered.\n//\n// Calling native `form.submit()` method immediately submits the form without triggering the `submit` event.\n// As a result, code that wants to hook into form submits would never execute.\n//\n// This method first triggers the `submit` event and, if that event wasn't `preventDefault`d, submits the\n// form natively.\nexport function requestSubmit(form: HTMLFormElement, submitter?: Button) {\n  if (submitter) {\n    checkButtonValidity(form, submitter)\n    persistSubmitButtonValue(submitter)\n  }\n  if (fire(form, 'submit', true)) {\n    form.submit()\n  }\n}\n\n// Check submitter validity for form.requestSubmit compatibility.\n// See https://html.spec.whatwg.org/#dom-form-requestsubmit.\nfunction checkButtonValidity(form: HTMLFormElement, submitter: Button) {\n  if (!(form instanceof HTMLFormElement)) throw new TypeError('The specified element is not of type HTMLFormElement.')\n  if (!(submitter instanceof HTMLElement)) throw new TypeError('The specified element is not of type HTMLElement.')\n  if (submitter.type !== 'submit') throw new TypeError('The specified element is not a submit button.')\n  if (!form || form !== submitter.form) throw new Error('The specified element is not owned by the form element.')\n}\n\n// Set a form field value while ensuring that `change` event is also triggered.\n//\n// Having the `change` event fire is important for various behaviors to react, such as form validation.\nexport function changeValue(input: TextField, value: string | boolean) {\n  if (typeof value === 'boolean') {\n    if (input instanceof HTMLInputElement) {\n      input.checked = value\n    } else {\n      throw new TypeError('only checkboxes can be set to boolean value')\n    }\n  } else {\n    if (input.type === 'checkbox') {\n      throw new TypeError(\"checkbox can't be set to string value\")\n    } else {\n      input.value = value\n    }\n  }\n  fire(input, 'change', false)\n}\n\n// Fill multiple form fields by item name.\nexport function fillFormValues(form: HTMLFormElement, fields: {[key: string]: string}) {\n  for (const name in fields) {\n    const value = fields[name]\n    const element = form.elements.namedItem(name)\n\n    if (element instanceof HTMLInputElement) {\n      element.value = value!\n    } else if (element instanceof HTMLTextAreaElement) {\n      element.value = value!\n    }\n  }\n}\n\n// Test if element is a form field.\nexport function isFormField(element: Node): boolean {\n  if (!(element instanceof HTMLElement)) {\n    return false\n  }\n\n  const name = element.nodeName.toLowerCase()\n  const type = (element.getAttribute('type') || '').toLowerCase()\n  return (\n    name === 'select' ||\n    name === 'textarea' ||\n    (name === 'input' && type !== 'submit' && type !== 'reset') ||\n    element.isContentEditable\n  )\n}\n\nfunction searchParamsFromFormData(formData: FormData): URLSearchParams {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new URLSearchParams(formData as any)\n}\n\n// Get a `?` search string for a URL for a GET form, using its `action` attribute as well as its other fields.\nexport function combineGetFormSearchParams(formAction: URL, formData: FormData): string {\n  const allSearchParams = new URLSearchParams(formAction.search)\n  const searchParamsFromInputs = searchParamsFromFormData(formData)\n  for (const [key, value] of searchParamsFromInputs) {\n    allSearchParams.append(key, value)\n  }\n  return allSearchParams.toString()\n}\n\n// Serialize form data into string.\nexport function serialize(form: HTMLFormElement): string {\n  return searchParamsFromFormData(new FormData(form)).toString()\n}\n","// Emulates submit button submission values by inserting a hidden input to the form.\n//\n// Submit events can be triggerd in the following ways:\n// - User clicks on a submit button.\n// - User press Enter when focusing on a form field; also known as \"implicit submission\".\n// - Programmatically via requestSubmit helper.\n//\n// On GitHub.com, the submission is either handled by the browser or remoteForm.\n//\n// For submissions triggered by user actions, the name and value of the clicked submit button (also known as\n// \"the submitter\") is passed along in the request, and can be programmatically retrieved with FormData.entries().\n//\n// However, this value will be lost in the following cases:\n// - 1. When the submitter button is disabled, most commonly by [data-disable-with].\n// - 2. When submitting via requestSubmit (from form.js), because the submission does not originated from a submitter.\n// - 3. When submitting with remoteForm, because FormData(form).entries() does not know about the submitter. In Safari\n// the submitter is known during the submission steps, but this behavior is not supported in any other browsers.\n//\n// @see {@link https://github.com/github/form-data-entries/pull/7}.\n//\n// For the exact workarounds, refer to ./form.js and ./remote.js.\nexport function persistSubmitButtonValue(button: HTMLButtonElement | HTMLInputElement) {\n  const form = button.closest('form')\n  if (!(form instanceof HTMLFormElement)) {\n    return\n  }\n\n  let input = findPersistedSubmitButtonValue(form)\n\n  if (button.name) {\n    const defaultValue = button.matches('input[type=submit]') ? 'Submit' : ''\n    const value = button.value || defaultValue\n    if (!input) {\n      input = document.createElement('input')\n      input.type = 'hidden'\n      input.classList.add('js-submit-button-value')\n      form.prepend(input)\n    }\n    input.name = button.name\n    input.value = value\n  } else if (input) {\n    input.remove()\n  }\n}\n\nexport function findPersistedSubmitButtonValue(form: HTMLFormElement): HTMLInputElement | null {\n  const input = form.querySelector('input.js-submit-button-value')\n  return input instanceof HTMLInputElement ? input : null\n}\n"],"names":["CopilotReviewFeedbackElement","HTMLElement","connectedCallback","validateAnySelected","hideErrorText","positiveFeedback","requestSubmit","positiveForm","voteUpButton","disabled","voteDownButton","hidden","checkedList","feedbackCheckboxes","querySelectorAll","length","showErrorText","submitButton","classList","remove","nextElement","nextElementSibling","add","negativeFeedback","event","preventDefault","closeButton","negativeForm","querySelector","click","target","controller","fire","name","cancelable","dispatchEvent","CustomEvent","bubbles","form","submitter","checkButtonValidity","HTMLFormElement","type","persistSubmitButtonValue","submit","changeValue","input","value","HTMLInputElement","checked","fillFormValues","fields","element","elements","namedItem","HTMLTextAreaElement","isFormField","nodeName","toLowerCase","getAttribute","isContentEditable","searchParamsFromFormData","formData","URLSearchParams","combineGetFormSearchParams","formAction","allSearchParams","search","key","append","toString","serialize","FormData","button","closest","findPersistedSubmitButtonValue","defaultValue","matches","document","createElement","prepend"],"sourceRoot":""}
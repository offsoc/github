# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Blackbird::Admin::V1::GitHubRepositoryDetails`.
# Please instead update this file by running `bin/tapioca dsl Blackbird::Admin::V1::GitHubRepositoryDetails`.

class Blackbird::Admin::V1::GitHubRepositoryDetails
  sig do
    params(
      archived: T.nilable(T::Boolean),
      archived_at: T.nilable(Google::Protobuf::Timestamp),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      disk_usage: T.nilable(Integer),
      experiments: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      has_readme: T.nilable(T::Boolean),
      id: T.nilable(Integer),
      is_fork: T.nilable(T::Boolean),
      license_name: T.nilable(String),
      name: T.nilable(String),
      network_id: T.nilable(Integer),
      num_stars: T.nilable(Integer),
      num_watchers: T.nilable(Integer),
      owner_id: T.nilable(Integer),
      owner_login: T.nilable(String),
      owner_spammy: T.nilable(T::Boolean),
      paying_customer: T.nilable(T::Boolean),
      public: T.nilable(T::Boolean),
      public_fork_count: T.nilable(Integer),
      pushed_at: T.nilable(Google::Protobuf::Timestamp),
      updated_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(archived: nil, archived_at: nil, created_at: nil, disk_usage: nil, experiments: T.unsafe(nil), has_readme: nil, id: nil, is_fork: nil, license_name: nil, name: nil, network_id: nil, num_stars: nil, num_watchers: nil, owner_id: nil, owner_login: nil, owner_spammy: nil, paying_customer: nil, public: nil, public_fork_count: nil, pushed_at: nil, updated_at: nil); end

  sig { returns(T::Boolean) }
  def archived; end

  sig { params(value: T::Boolean).void }
  def archived=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def archived_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def archived_at=(value); end

  sig { void }
  def clear_archived; end

  sig { void }
  def clear_archived_at; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_disk_usage; end

  sig { void }
  def clear_experiments; end

  sig { void }
  def clear_has_readme; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_is_fork; end

  sig { void }
  def clear_license_name; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_network_id; end

  sig { void }
  def clear_num_stars; end

  sig { void }
  def clear_num_watchers; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_owner_login; end

  sig { void }
  def clear_owner_spammy; end

  sig { void }
  def clear_paying_customer; end

  sig { void }
  def clear_public; end

  sig { void }
  def clear_public_fork_count; end

  sig { void }
  def clear_pushed_at; end

  sig { void }
  def clear_updated_at; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(Integer) }
  def disk_usage; end

  sig { params(value: Integer).void }
  def disk_usage=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def experiments; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def experiments=(value); end

  sig { returns(T::Boolean) }
  def has_readme; end

  sig { params(value: T::Boolean).void }
  def has_readme=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def is_fork; end

  sig { params(value: T::Boolean).void }
  def is_fork=(value); end

  sig { returns(String) }
  def license_name; end

  sig { params(value: String).void }
  def license_name=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(Integer) }
  def network_id; end

  sig { params(value: Integer).void }
  def network_id=(value); end

  sig { returns(Integer) }
  def num_stars; end

  sig { params(value: Integer).void }
  def num_stars=(value); end

  sig { returns(Integer) }
  def num_watchers; end

  sig { params(value: Integer).void }
  def num_watchers=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(String) }
  def owner_login; end

  sig { params(value: String).void }
  def owner_login=(value); end

  sig { returns(T::Boolean) }
  def owner_spammy; end

  sig { params(value: T::Boolean).void }
  def owner_spammy=(value); end

  sig { returns(T::Boolean) }
  def paying_customer; end

  sig { params(value: T::Boolean).void }
  def paying_customer=(value); end

  sig { returns(T::Boolean) }
  def public; end

  sig { params(value: T::Boolean).void }
  def public=(value); end

  sig { returns(Integer) }
  def public_fork_count; end

  sig { params(value: Integer).void }
  def public_fork_count=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def pushed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def pushed_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end
end

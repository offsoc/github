# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Proto::RegistryMetadata::V1::Package::GetAllPackageSummariesRequest`.
# Please instead update this file by running `bin/tapioca dsl Proto::RegistryMetadata::V1::Package::GetAllPackageSummariesRequest`.

class Proto::RegistryMetadata::V1::Package::GetAllPackageSummariesRequest
  sig do
    params(
      actor_id: T.nilable(Integer),
      actor_type: T.nilable(T.any(Symbol, Integer)),
      ecosystem: T.nilable(T.any(Symbol, Integer)),
      exclude_deleted: T.nilable(T::Boolean),
      exclude_download_count: T.nilable(T::Boolean),
      exclude_version_count: T.nilable(T::Boolean),
      filter: T.nilable(T.any(Symbol, Integer)),
      integration_name: T.nilable(String),
      limit: T.nilable(Integer),
      namespace: T.nilable(String),
      offset: T.nilable(Integer),
      order: T.nilable(T.any(Symbol, Integer)),
      perform_authz: T.nilable(T::Boolean)
    ).void
  end
  def initialize(actor_id: nil, actor_type: nil, ecosystem: nil, exclude_deleted: nil, exclude_download_count: nil, exclude_version_count: nil, filter: nil, integration_name: nil, limit: nil, namespace: nil, offset: nil, order: nil, perform_authz: nil); end

  sig { returns(Integer) }
  def actor_id; end

  sig { params(value: Integer).void }
  def actor_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def actor_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def actor_type=(value); end

  sig { void }
  def clear_actor_id; end

  sig { void }
  def clear_actor_type; end

  sig { void }
  def clear_ecosystem; end

  sig { void }
  def clear_exclude_deleted; end

  sig { void }
  def clear_exclude_download_count; end

  sig { void }
  def clear_exclude_version_count; end

  sig { void }
  def clear_filter; end

  sig { void }
  def clear_integration_name; end

  sig { void }
  def clear_limit; end

  sig { void }
  def clear_namespace; end

  sig { void }
  def clear_offset; end

  sig { void }
  def clear_order; end

  sig { void }
  def clear_perform_authz; end

  sig { returns(T.any(Symbol, Integer)) }
  def ecosystem; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def ecosystem=(value); end

  sig { returns(T::Boolean) }
  def exclude_deleted; end

  sig { params(value: T::Boolean).void }
  def exclude_deleted=(value); end

  sig { returns(T::Boolean) }
  def exclude_download_count; end

  sig { params(value: T::Boolean).void }
  def exclude_download_count=(value); end

  sig { returns(T::Boolean) }
  def exclude_version_count; end

  sig { params(value: T::Boolean).void }
  def exclude_version_count=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def filter; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def filter=(value); end

  sig { returns(String) }
  def integration_name; end

  sig { params(value: String).void }
  def integration_name=(value); end

  sig { returns(Integer) }
  def limit; end

  sig { params(value: Integer).void }
  def limit=(value); end

  sig { returns(String) }
  def namespace; end

  sig { params(value: String).void }
  def namespace=(value); end

  sig { returns(Integer) }
  def offset; end

  sig { params(value: Integer).void }
  def offset=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def order; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def order=(value); end

  sig { returns(T::Boolean) }
  def perform_authz; end

  sig { params(value: T::Boolean).void }
  def perform_authz=(value); end
end

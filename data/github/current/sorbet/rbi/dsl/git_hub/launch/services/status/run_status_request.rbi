# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Services::Status::RunStatusRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Services::Status::RunStatusRequest`.

class GitHub::Launch::Services::Status::RunStatusRequest
  sig do
    params(
      annotations: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Launch::Services::Status::Annotation], T::Array[GitHub::Launch::Services::Status::Annotation])),
      artifacts: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Launch::Services::Status::Artifact], T::Array[GitHub::Launch::Services::Status::Artifact])),
      complete: T.nilable(GitHub::Launch::Services::Status::RunComplete),
      completed_log: T.nilable(GitHub::Launch::Services::Status::Log),
      concurrency: T.nilable(GitHub::Launch::Services::Status::Concurrency),
      not_started: T.nilable(GitHub::Launch::Services::Status::RunNotStarted),
      workflow_id: T.nilable(String)
    ).void
  end
  def initialize(annotations: T.unsafe(nil), artifacts: T.unsafe(nil), complete: nil, completed_log: nil, concurrency: nil, not_started: nil, workflow_id: nil); end

  sig { returns(T.nilable(Symbol)) }
  def Progress; end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Launch::Services::Status::Annotation]) }
  def annotations; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Launch::Services::Status::Annotation]).void }
  def annotations=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Launch::Services::Status::Artifact]) }
  def artifacts; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Launch::Services::Status::Artifact]).void }
  def artifacts=(value); end

  sig { void }
  def clear_annotations; end

  sig { void }
  def clear_artifacts; end

  sig { void }
  def clear_complete; end

  sig { void }
  def clear_completed_log; end

  sig { void }
  def clear_concurrency; end

  sig { void }
  def clear_not_started; end

  sig { void }
  def clear_workflow_id; end

  sig { returns(T.nilable(GitHub::Launch::Services::Status::RunComplete)) }
  def complete; end

  sig { params(value: T.nilable(GitHub::Launch::Services::Status::RunComplete)).void }
  def complete=(value); end

  sig { returns(T.nilable(GitHub::Launch::Services::Status::Log)) }
  def completed_log; end

  sig { params(value: T.nilable(GitHub::Launch::Services::Status::Log)).void }
  def completed_log=(value); end

  sig { returns(T.nilable(GitHub::Launch::Services::Status::Concurrency)) }
  def concurrency; end

  sig { params(value: T.nilable(GitHub::Launch::Services::Status::Concurrency)).void }
  def concurrency=(value); end

  sig { returns(T.nilable(GitHub::Launch::Services::Status::RunNotStarted)) }
  def not_started; end

  sig { params(value: T.nilable(GitHub::Launch::Services::Status::RunNotStarted)).void }
  def not_started=(value); end

  sig { returns(String) }
  def workflow_id; end

  sig { params(value: String).void }
  def workflow_id=(value); end
end

{"version":3,"file":"notification-settings-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/notification-settings/components/Table.tsx","ui/packages/notification-settings/components/table/Header.tsx","ui/packages/notification-settings/components/table/Row.tsx","ui/packages/notification-settings/components/dropdown/MultipleSelect.tsx","ui/packages/notification-settings/helpers/selectors.ts","ui/packages/notification-settings/components/State.tsx","ui/packages/notification-settings/components/WatchingSettings.tsx","ui/packages/notification-settings/components/dropdown/SingleSelect.tsx","ui/packages/notification-settings/components/ToggleBox.tsx","ui/packages/notification-settings/components/SystemSettings.tsx","ui/packages/notification-settings/components/NotificationsSettings.tsx","ui/packages/notification-settings/services/api.ts","ui/packages/notification-settings/pages/IndexPage.tsx","ui/packages/notification-settings/types/custom-route-types.ts","ui/packages/notification-settings/components/dropdown/OrganizationSelect.tsx","ui/packages/notification-settings/components/CustomRouteRow.tsx","ui/packages/notification-settings/components/CustomRouteSettings.tsx","ui/packages/notification-settings/pages/CustomRoutesPage.tsx","ui/packages/notification-settings/notification-settings.ts","ui/packages/verified-fetch/verified-fetch.ts","ui/packages/react-core/JsonRoute.tsx","ui/packages/react-core/Link.tsx"],"sourcesContent":["import {Box} from '@primer/react'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction Table(props: any) {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        width: '100%',\n        flexDirection: 'column',\n        borderColor: 'border.default',\n        borderWidth: 1,\n        borderStyle: 'solid',\n        borderRadius: 2,\n      }}\n    >\n      {props.children}\n    </Box>\n  )\n}\n\nexport default Table\n\ntry{ Table.displayName ||= 'Table' } catch {}","import {Box, Heading} from '@primer/react'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction Header(props: any) {\n  return (\n    <Box\n      sx={{\n        backgroundColor: 'canvas.inset',\n        borderRadius: 2,\n        borderBottomLeftRadius: 0,\n        borderBottomRightRadius: 0,\n        borderColor: 'border.default',\n        borderBottomWidth: 1,\n        borderBottomStyle: 'solid',\n      }}\n    >\n      <Heading as=\"h2\" sx={{display: 'flex', justifyContent: 'space-between', fontSize: 1, mb: 0, pl: 3, py: 3}}>\n        {props.children}\n      </Heading>\n    </Box>\n  )\n}\n\nexport default Header\n\ntry{ Header.displayName ||= 'Header' } catch {}","import type React from 'react'\nimport type {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'\nimport {Box, Heading, Text} from '@primer/react'\n\nexport interface RowProps {\n  title: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  subtitle?: React.ComponentElement<any, any> | string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  action?: React.ComponentElement<any, any>\n  separator?: boolean\n  sx?: BetterSystemStyleObject\n  labelId?: string\n}\n\nfunction Row(props: RowProps) {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        py: 3,\n        mx: 3,\n        borderColor: 'border.default',\n        borderBottomWidth: props.separator === false ? 0 : 1,\n        borderBottomStyle: 'solid',\n        ...props.sx,\n      }}\n    >\n      <div className={`mr-sm-0 ml-sm-0`}>\n        <Heading as=\"h3\" sx={{fontSize: 1, mb: 0}} id={props.labelId}>\n          {props.title}\n        </Heading>\n        <Text sx={{color: 'fg.muted', m: 0}}>{props.subtitle}</Text>\n        {props.action && (\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'row',\n              gap: 2,\n              alignItems: 'flex-start',\n              justifyContent: 'space-between',\n              mt: 2,\n              mb: 1,\n            }}\n          >\n            {props.action}\n          </Box>\n        )}\n      </div>\n    </Box>\n  )\n}\n\nexport default Row\n\ntry{ Row.displayName ||= 'Row' } catch {}","import {useEffect, useState, useCallback} from 'react'\nimport {ActionList, Text} from '@primer/react'\nimport {SelectPanel} from '@primer/react/experimental'\n\ninterface Props {\n  menuButtonPrefix?: string\n  title: string\n  defaultMenuButtonOption?: string\n  menuButtonOptions?: {[key: string]: string}\n  menuButtonVariants?: {[key: string]: string}\n  listOptions: {[key: string]: string}\n  selectedListOptions: string[]\n  listVariants?: {[key: string]: string}\n  selectedListVariants?: string[]\n  width?: 'small' | 'medium'\n  onSaveCallback: {(selectedOptions: string[], selectedVariants: string[]): void}\n}\n\nfunction MultipleSelect(props: Props) {\n  const {onSaveCallback, selectedListOptions, selectedListVariants, title, width} = props\n\n  const optionKeys = Object.keys(props.listOptions || {})\n  const variantKeys = Object.keys(props.listVariants || {})\n\n  const [selectedOptions, setSelectedOptionsState] = useState<string[]>(selectedListOptions)\n  const [selectedVariants, setSelectedVariantsState] = useState<string[]>(selectedListVariants || [])\n\n  useEffect(\n    function syncPropsWithState() {\n      setSelectedOptionsState(selectedListOptions)\n      setSelectedVariantsState(selectedListVariants || [])\n    },\n    [selectedListOptions, selectedListVariants],\n  )\n\n  const onCancel = useCallback(() => {\n    setSelectedOptionsState(selectedListOptions)\n    setSelectedVariantsState(selectedListVariants || [])\n  }, [setSelectedOptionsState, setSelectedVariantsState, selectedListOptions, selectedListVariants])\n\n  const onSave = useCallback(() => {\n    onSaveCallback(selectedOptions, selectedVariants)\n  }, [onSaveCallback, selectedOptions, selectedVariants])\n\n  const onSelect = useCallback((value: string, list: string[], action: {(selected: string[]): void}) => {\n    if (list.includes(value)) {\n      action(list.filter(f => f !== value).sort())\n    } else {\n      action([...list, value])\n    }\n  }, [])\n\n  const onSelectOption = useCallback(\n    (option: string) => {\n      onSelect(option, selectedOptions, setSelectedOptionsState)\n    },\n    [selectedOptions, onSelect],\n  )\n\n  const onSelectVariant = useCallback(\n    (variant: string) => {\n      if (selectedOptions.length !== 0) {\n        onSelect(variant, selectedVariants, setSelectedVariantsState)\n      }\n    },\n    [selectedOptions, selectedVariants, onSelect],\n  )\n\n  const renderSelected = () => {\n    if (selectedListOptions.length === 0) {\n      return props.defaultMenuButtonOption\n    }\n    const renderedOptions = optionKeys.map(value => {\n      if (selectedListOptions.includes(value)) {\n        return props.menuButtonOptions ? props.menuButtonOptions[value] : props.listOptions[value]\n      }\n    })\n    const prefix = props.menuButtonPrefix || ''\n    if (!selectedListVariants || selectedListVariants.length < 1) {\n      return (\n        <>\n          <Text as=\"span\" sx={{color: 'fg.muted'}}>\n            {prefix}\n          </Text>\n          <span>{renderSentence(renderedOptions)}</span>\n        </>\n      )\n    } else {\n      const renderedVariants = selectedListVariants?.map(value => {\n        return props.menuButtonVariants\n          ? props.menuButtonVariants[value]\n          : props.listVariants && props.listVariants[value]\n      })\n      return (\n        <>\n          <Text as=\"span\" className=\"hide-sm\" sx={{color: 'fg.muted'}}>\n            {prefix}\n          </Text>\n          <span>\n            {renderSentence(renderedOptions)}. ({renderSentence(renderedVariants)})\n          </span>\n        </>\n      )\n    }\n  }\n\n  const renderSentence = (array: Array<string | undefined> | undefined) => {\n    if (!array) return\n    return array.filter(item => item).join(', ')\n  }\n\n  return (\n    // eslint-disable-next-line primer-react/no-system-props\n    <SelectPanel title={title} onSubmit={onSave} onCancel={onCancel} width={width || 'small'} height=\"fit-content\">\n      <SelectPanel.Button size=\"small\">{renderSelected()}</SelectPanel.Button>\n      <ActionList>\n        {optionKeys.map((option: string, index) => (\n          <ActionList.Item\n            key={index}\n            selected={selectedOptions.includes(option)}\n            onSelect={() => onSelectOption(option)}\n          >\n            {props.listOptions[option]}\n          </ActionList.Item>\n        ))}\n        {props.listVariants && selectedOptions.length !== 0 && (\n          <>\n            <ActionList.Divider />\n            <ActionList selectionVariant=\"multiple\" sx={{p: 0}} role=\"listbox\">\n              {variantKeys.map((variant: string, index) => (\n                <ActionList.Item\n                  key={index}\n                  selected={selectedVariants.includes(variant)}\n                  onSelect={() => onSelectVariant(variant)}\n                >\n                  {props.listVariants && props.listVariants[variant]}\n                </ActionList.Item>\n              ))}\n            </ActionList>\n          </>\n        )}\n      </ActionList>\n      <SelectPanel.Footer />\n    </SelectPanel>\n  )\n}\n\nexport default MultipleSelect\n\ntry{ MultipleSelect.displayName ||= 'MultipleSelect' } catch {}","export const defaultOption = \"Don't notify\"\nexport const defaultPrefix = 'Notify me: '\nexport const defaultEmailNotificationPreferenceOption = 'No additional events'\nexport const digestOptions = {\n  none: \"Don't send\",\n  weekly: 'Send weekly',\n  daily: 'Send daily',\n}\nexport const watchingDropdownOptions = {web: 'On GitHub', email: 'Email'}\nexport const watchingDisplayOptions = {web: 'on GitHub', email: 'Email'}\nexport const actionsDropdownOptions = {continuousIntegrationWeb: 'On GitHub', continuousIntegrationEmail: 'Email'}\nexport const actionsDisplayOptions = {continuousIntegrationWeb: 'on GitHub', continuousIntegrationEmail: 'Email'}\nexport const actionsDropdownVariants = {continuousIntegrationFailuresOnly: 'Only notify for failed workflows'}\nexport const actionsDisplayVariants = {continuousIntegrationFailuresOnly: 'Failed workflows only'}\nexport const vulnerabilityDropdownOptions = {\n  vulnerabilityWeb: 'On GitHub',\n  vulnerabilityEmail: 'Email',\n  vulnerabilityCli: 'CLI',\n}\nexport const vulnerabilityDisplayOptions = {...vulnerabilityDropdownOptions, ...{vulnerabilityWeb: 'on GitHub'}}\nexport const emailNotificationPreferenceDropdownOptions = {\n  pullRequestReview: 'Pull Request reviews',\n  pullRequestPush: 'Pull Request pushes',\n  commentEmail: 'Comments on Issues and Pull Requests',\n  ownViaEmail: 'Includes your own updates',\n}\nexport const emailNotificationPreferenceDisplayOptions = {\n  pullRequestReview: 'Reviews',\n  pullRequestPush: 'Pushes',\n  commentEmail: 'Comments',\n  ownViaEmail: 'My own updates',\n}\n\nexport function getSelectedOptionsAndVariants(\n  selected: {[key: string]: boolean},\n  options: {[key: string]: string},\n  variants: {[key: string]: string},\n) {\n  const selectedOptions: string[] = []\n  const selectedVariants: string[] = []\n  Object.keys(options).map(key => {\n    if (selected[key]) {\n      selectedOptions.push(key)\n    }\n  })\n  Object.keys(variants).map(key => {\n    if (selected[key]) {\n      selectedVariants.push(key)\n    }\n  })\n  return [selectedOptions, selectedVariants]\n}\n","import React, {useEffect} from 'react'\nimport {announceFromElement} from '@github-ui/aria-live'\nimport type {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'\nimport {Box, Text, Octicon, Spinner} from '@primer/react'\nimport {CheckIcon, AlertIcon} from '@primer/octicons-react'\n\nexport enum Sections {\n  Notifications = 'notifications',\n  Watching = 'watching',\n  System = 'system',\n}\n\nexport enum SavingStatus {\n  IDLE = '',\n  LOADING = 'loading',\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\ninterface StateProps {\n  sx?: BetterSystemStyleObject\n  status: SavingStatus\n}\n\nfunction State(props: StateProps) {\n  const {status} = props\n  const ref = React.useRef<HTMLDivElement>(null)\n  const [isDisplayed, setDisplayed] = React.useState(status !== SavingStatus.IDLE)\n\n  const successStatus = () => {\n    return (\n      <>\n        <Octicon icon={CheckIcon} size={12} sx={{verticalAlign: 'top', color: 'success.fg', marginRight: 1}} />\n        <Text sx={{fontSize: '12px', fontWeight: 400}}>Saved</Text>\n      </>\n    )\n  }\n\n  const succeeded = status === SavingStatus.SUCCESS\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout> | null\n\n    if (succeeded) {\n      timeoutId = setTimeout(() => setDisplayed(false), 3000)\n    } else {\n      setDisplayed(true)\n    }\n\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId)\n      }\n    }\n  }, [succeeded])\n\n  const renderStatus = () => {\n    return status === SavingStatus.SUCCESS ? successStatus() : <Text sx={{fontSize: '12px'}}>{status}</Text>\n  }\n\n  useEffect(() => {\n    if (ref.current) {\n      announceFromElement(ref.current, {assertive: status === SavingStatus.ERROR})\n    }\n  }, [status, ref])\n\n  if (!isDisplayed) return null\n\n  return (\n    <Box sx={{...props.sx}} ref={ref}>\n      {status === SavingStatus.ERROR ? (\n        <Text sx={{color: 'fg.muted', fontSize: '12px'}}>\n          <Octicon icon={AlertIcon} size={12} sx={{verticalAlign: 'top', color: 'danger.fg', marginRight: 1}} />\n          Oops, something went wrong.\n        </Text>\n      ) : (\n        <>{status === SavingStatus.LOADING ? <Spinner size=\"small\" /> : renderStatus()}</>\n      )}\n    </Box>\n  )\n}\n\nexport default State\n\ntry{ State.displayName ||= 'State' } catch {}","import {useState} from 'react'\nimport {Box, Link} from '@primer/react'\nimport type {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'\nimport Table from './Table'\nimport Header from './table/Header'\nimport Row, {type RowProps} from './table/Row'\nimport MultiSelect from './dropdown/MultipleSelect'\nimport {\n  emailNotificationPreferenceDropdownOptions,\n  emailNotificationPreferenceDisplayOptions,\n  watchingDropdownOptions,\n  watchingDisplayOptions,\n  defaultOption,\n  defaultEmailNotificationPreferenceOption,\n  defaultPrefix,\n  getSelectedOptionsAndVariants,\n} from '../helpers/selectors'\nimport {Sections} from '../components/State'\n\nconst watchingRow: RowProps = {\n  title: 'Watching',\n}\n\nconst participatingRow: RowProps = {\n  title: 'Participating, @mentions and custom',\n  subtitle:\n    'Notifications for the conversations you are participating in, or if someone cites you with an @mention. Also for all activity when subscribed to specific events.',\n}\n\nconst emailNotificationPreferencesRow: RowProps = {\n  title: 'Customize email updates',\n  subtitle: \"Choose which additional events you'll receive emails for when participating or watching.\",\n}\n\nconst ignoredRow: RowProps = {\n  title: 'Ignored repositories',\n  separator: false,\n}\n\nfunction EmailPreferencesSelect(props: {selected: string[]; onSaveCallback: {(selectedOptions: string[]): void}}) {\n  const {selected, onSaveCallback} = props\n\n  return (\n    <MultiSelect\n      title=\"Select events\"\n      listOptions={emailNotificationPreferenceDropdownOptions}\n      menuButtonOptions={emailNotificationPreferenceDisplayOptions}\n      defaultMenuButtonOption={defaultEmailNotificationPreferenceOption}\n      selectedListOptions={selected}\n      onSaveCallback={onSaveCallback}\n      width=\"medium\"\n    />\n  )\n}\n\nfunction Select(props: {selected: string[]; onSaveCallback: {(selectedOptions: string[]): void}}) {\n  const {selected, onSaveCallback} = props\n  return (\n    <MultiSelect\n      title=\"Select notification channels\"\n      menuButtonPrefix={defaultPrefix}\n      defaultMenuButtonOption={defaultOption}\n      menuButtonOptions={watchingDisplayOptions}\n      listOptions={watchingDropdownOptions}\n      selectedListOptions={selected}\n      onSaveCallback={onSaveCallback}\n    />\n  )\n}\n\ninterface Props {\n  sx?: BetterSystemStyleObject\n  subscribedSettings: string[]\n  participatingSettings: string[]\n  saveData: (section: Sections, formData: FormData) => void\n  emailNotificationPreferences: {[key: string]: boolean}\n  watchingUrl: string\n  renderState: (section: Sections) => void\n}\n\nfunction WatchingSettings(props: Props) {\n  const watchingDescription = (\n    <>\n      <span>Notifications for all repositories, teams, or conversations you&apos;re watching.&nbsp;</span>\n      <Link inline href={props.watchingUrl}>\n        View watched repositories\n      </Link>\n      .\n    </>\n  )\n  const ignoredDescription = (\n    <>\n      <span>You&apos;ll never be notified.&nbsp;</span>\n      <Link inline href={props.watchingUrl}>\n        View ignored repositories\n      </Link>\n      .\n    </>\n  )\n  const {sx, emailNotificationPreferences} = props\n\n  const [subscribedSettings, setSubscribedSettings] = useState<string[]>(props.subscribedSettings || [])\n  const [participatingSettings, setParticipatingSettings] = useState<string[]>(props.participatingSettings || [])\n\n  const [selectedEmailPreferenceOptions] = getSelectedOptionsAndVariants(\n    emailNotificationPreferences,\n    emailNotificationPreferenceDropdownOptions,\n    {},\n  )\n  const [selectedEmailDeliveryPreferences, setSelectedEmailDeliveryPreferences] = useState<string[]>(\n    selectedEmailPreferenceOptions || [],\n  )\n\n  // Callbacks called by multiple select component\n  const saveSetting = (setting: string, selected: string[]) => {\n    const formData = new FormData()\n    formData.append(`${setting}[web]`, selected.includes('web') ? '1' : '0')\n    formData.append(`${setting}[email]`, selected.includes('email') ? '1' : '0')\n    props.saveData(Sections.Watching, formData)\n  }\n\n  // Subscribed\n  const onSaveSubscribedCallback = (onSaveSelectedOptions: string[]) => {\n    saveSetting('subscribed_settings', onSaveSelectedOptions)\n    setSubscribedSettings(onSaveSelectedOptions)\n  }\n\n  // Participating\n  const onSaveParticipatingCallback = (onSaveSelectedOptions: string[]) => {\n    saveSetting('participating_settings', onSaveSelectedOptions)\n    setParticipatingSettings(onSaveSelectedOptions)\n  }\n\n  // Email Notification Preferences\n  const onSaveEmailNotificationPreferencesCallback = (onSaveSelectedOptions: string[]) => {\n    const formData = new FormData()\n    formData.append('notify_own_via_email', onSaveSelectedOptions.includes('ownViaEmail') ? '1' : '0')\n    formData.append('notify_comment_email', onSaveSelectedOptions.includes('commentEmail') ? '1' : '0')\n    formData.append('notify_pull_request_review_email', onSaveSelectedOptions.includes('pullRequestReview') ? '1' : '0')\n    formData.append('notify_pull_request_push_email', onSaveSelectedOptions.includes('pullRequestPush') ? '1' : '0')\n    props.saveData(Sections.Watching, formData)\n    setSelectedEmailDeliveryPreferences(onSaveSelectedOptions)\n  }\n\n  return (\n    <Box sx={sx}>\n      <Table>\n        <Header style={{display: 'flex', alignItems: 'center'}}>\n          Subscriptions\n          {props.renderState(Sections.Watching)}\n        </Header>\n        <Row\n          {...watchingRow}\n          action={<Select selected={subscribedSettings} onSaveCallback={onSaveSubscribedCallback} />}\n          subtitle={watchingDescription}\n        />\n        <Row\n          {...participatingRow}\n          action={<Select selected={participatingSettings} onSaveCallback={onSaveParticipatingCallback} />}\n        />\n        {(subscribedSettings.includes('email') || participatingSettings.includes('email')) && (\n          <Row\n            {...emailNotificationPreferencesRow}\n            action={\n              <EmailPreferencesSelect\n                selected={selectedEmailDeliveryPreferences}\n                onSaveCallback={onSaveEmailNotificationPreferencesCallback}\n              />\n            }\n          />\n        )}\n        <Row {...ignoredRow} subtitle={ignoredDescription} />\n      </Table>\n    </Box>\n  )\n}\n\nexport default WatchingSettings\n\ntry{ EmailPreferencesSelect.displayName ||= 'EmailPreferencesSelect' } catch {}\ntry{ Select.displayName ||= 'Select' } catch {}\ntry{ WatchingSettings.displayName ||= 'WatchingSettings' } catch {}","import type {FC} from 'react'\nimport type React from 'react'\nimport {useCallback, useState} from 'react'\nimport {ActionMenu, ActionList, type ActionMenuProps} from '@primer/react'\n\ntype Props = Partial<ActionMenuProps> & {\n  options: string[]\n  defaultOption: string\n  open?: boolean /// Whether the dropdown starts open\n  disabled?: boolean /// Whether the dropdown is disabled\n  onChange?: (option: string) => void /// Callback when selection is changed\n  optionOverride?: (option: string) => React.ReactNode /// Custom option rendering override\n}\n\nconst SingleSelect: FC<Props> = ({options, defaultOption, onChange, optionOverride, disabled, open, ...rest}) => {\n  const [selectedOption, setSelected] = useState<number>(options.indexOf(defaultOption))\n\n  const onSelectOption = useCallback(\n    (idx: number) => {\n      setSelected(idx)\n      onChange && onChange(options[idx]!)\n    },\n    [options, onChange, setSelected],\n  )\n\n  const optionList = options.map((option, index) => (\n    <ActionList.Item\n      key={index}\n      selected={selectedOption === index}\n      onSelect={() => {\n        onSelectOption(index)\n      }}\n    >\n      {optionOverride ? optionOverride(option) : option}\n    </ActionList.Item>\n  ))\n\n  return (\n    <ActionMenu open={open} {...rest}>\n      <ActionMenu.Button size={'small'} disabled={disabled}>\n        {options[selectedOption] ?? defaultOption}\n      </ActionMenu.Button>\n      <ActionMenu.Overlay>\n        <>{optionList.length > 0 && <ActionList selectionVariant=\"single\">{optionList}</ActionList>}</>\n      </ActionMenu.Overlay>\n    </ActionMenu>\n  )\n}\n\nexport default SingleSelect\n\ntry{ SingleSelect.displayName ||= 'SingleSelect' } catch {}","import {useState, useId} from 'react'\nimport type {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'\nimport {Box, Heading, Text, ToggleSwitch} from '@primer/react'\n\ninterface ToggleBoxProps {\n  title?: string\n  subtitle?: string\n  checked?: boolean\n  sx?: BetterSystemStyleObject\n  onChange?: (value: boolean) => void\n  labelId?: string\n}\n\nfunction ToggleBox(props: ToggleBoxProps) {\n  const [checked, setChecked] = useState<boolean>(props.checked || false)\n\n  const onToggle = (value: boolean) => {\n    setChecked(value)\n    props.onChange && props.onChange(value)\n  }\n\n  // hooks cannot be called conditionally, so we create a generated id in case it's not provided\n  const generatedId = useId()\n  const labelId = props.labelId || generatedId\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        flexBasis: '100%',\n        ...props.sx,\n      }}\n    >\n      {props.title && (\n        <Box sx={{display: 'flex', mt: 0, justifyContent: 'space-between'}}>\n          <Heading as=\"h3\" sx={{fontSize: 1, fontWeight: 'bold', m: 0}} id={labelId}>\n            {props.title}\n          </Heading>\n        </Box>\n      )}\n      {props.subtitle && (\n        <Text as=\"p\" sx={{color: 'fg.muted', mt: 0, mb: 2, flexGrow: 2}}>\n          {props.subtitle}\n        </Text>\n      )}\n      <ToggleSwitch\n        checked={checked}\n        aria-labelledby={labelId}\n        size=\"small\"\n        statusLabelPosition=\"end\"\n        sx={{mr: 'auto'}}\n        onClick={() => onToggle(!checked)}\n      />\n    </Box>\n  )\n}\n\nexport default ToggleBox\n\ntry{ ToggleBox.displayName ||= 'ToggleBox' } catch {}","import type React from 'react'\nimport {useState, useId} from 'react'\nimport type {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'\nimport {Box, Link} from '@primer/react'\nimport Table from './Table'\nimport Header from './table/Header'\nimport Row, {type RowProps} from './table/Row'\nimport MultipleSelect from './dropdown/MultipleSelect'\nimport SingleSelect from './dropdown/SingleSelect'\nimport ToggleBox from './ToggleBox'\nimport {\n  defaultOption,\n  defaultPrefix,\n  actionsDropdownOptions,\n  actionsDisplayOptions,\n  actionsDropdownVariants,\n  vulnerabilityDropdownOptions,\n  vulnerabilityDisplayOptions,\n  digestOptions,\n  getSelectedOptionsAndVariants,\n  actionsDisplayVariants,\n} from '../helpers/selectors'\nimport {Sections} from '../components/State'\n\nconst actionsRow: RowProps = {\n  title: 'Actions',\n}\n\nconst dependabotAlertsRow: RowProps = {\n  title: 'Dependabot alerts: New vulnerabilities',\n  separator: false,\n}\n\nconst emailWeeklyDigestRow: RowProps = {\n  title: 'Email weekly digest',\n  subtitle: 'Email a weekly summary summarizing alerts for up to 10 of your repositories.',\n  sx: {pt: 0},\n}\n\nconst deployKeyAlertRow: RowProps = {\n  title: \"'Deploy key' alert email\",\n  subtitle:\n    'When you are given admin permissions to an organization, automatically receive notifications when a new deploy key is added.',\n  separator: false,\n}\n\nfunction ActionsSelect(props: {\n  selected: {[key: string]: boolean}\n  saveData: (section: Sections, formData: FormData) => void\n}) {\n  const [selectedOptions, selectedVariants] = getSelectedOptionsAndVariants(\n    props.selected,\n    actionsDropdownOptions,\n    actionsDropdownVariants,\n  )\n  const [continuousIntegrationSelectedOptions, setContinuousIntegrationSelectedOptions] = useState<string[]>(\n    selectedOptions || [],\n  )\n  const [continuousIntegrationSelectedVariants, setContinuousIntegrationSelectedVariants] = useState<string[]>(\n    selectedVariants || [],\n  )\n\n  const onSaveCallback = (onSaveSelectedOptions: string[], onSaveSelectedVariants: string[]) => {\n    const newSelectedVariants = onSaveSelectedOptions.length > 0 ? onSaveSelectedVariants : []\n    const formData = new FormData()\n    formData.set('continuous_integration_web', onSaveSelectedOptions.includes('continuousIntegrationWeb') ? '1' : '0')\n    formData.set(\n      'continuous_integration_email',\n      onSaveSelectedOptions.includes('continuousIntegrationEmail') ? '1' : '0',\n    )\n    formData.set(\n      'continuous_integration_failures_only',\n      newSelectedVariants.includes('continuousIntegrationFailuresOnly') ? '1' : '0',\n    )\n    props.saveData(Sections.System, formData)\n\n    setContinuousIntegrationSelectedOptions(onSaveSelectedOptions)\n    setContinuousIntegrationSelectedVariants(newSelectedVariants)\n  }\n  return (\n    <MultipleSelect\n      title=\"Select notification channels\"\n      menuButtonPrefix={defaultPrefix}\n      defaultMenuButtonOption={defaultOption}\n      menuButtonOptions={actionsDisplayOptions}\n      menuButtonVariants={actionsDisplayVariants}\n      listOptions={actionsDropdownOptions}\n      listVariants={actionsDropdownVariants}\n      selectedListOptions={continuousIntegrationSelectedOptions}\n      selectedListVariants={continuousIntegrationSelectedVariants}\n      onSaveCallback={onSaveCallback}\n    />\n  )\n}\n\nfunction VulnerabilitySelect(props: {\n  selected: {[key: string]: boolean}\n  saveData: (section: Sections, formData: FormData) => void\n}) {\n  const [selectedOptions] = getSelectedOptionsAndVariants(props.selected, vulnerabilityDropdownOptions, {})\n  const [vulnerabilitySelectedOptions, setVulnerabilitySelectedOptions] = useState<string[]>(selectedOptions || [])\n\n  const onSaveCallback = (onSaveSelectedOptions: string[]) => {\n    const formData = new FormData()\n    formData.set('vulnerability_web', onSaveSelectedOptions.includes('vulnerabilityWeb') ? '1' : '0')\n    formData.set('vulnerability_cli', onSaveSelectedOptions.includes('vulnerabilityCli') ? '1' : '0')\n    formData.set('vulnerability_email', onSaveSelectedOptions.includes('vulnerabilityEmail') ? '1' : '0')\n    props.saveData(Sections.System, formData)\n\n    setVulnerabilitySelectedOptions(onSaveSelectedOptions)\n  }\n\n  return (\n    <MultipleSelect\n      title=\"Select notification channels\"\n      menuButtonPrefix={defaultPrefix}\n      defaultMenuButtonOption={defaultOption}\n      menuButtonOptions={vulnerabilityDisplayOptions}\n      listOptions={vulnerabilityDropdownOptions}\n      selectedListOptions={vulnerabilitySelectedOptions}\n      onSaveCallback={onSaveCallback}\n    />\n  )\n}\n\ninterface Props {\n  sx?: BetterSystemStyleObject\n  continuousIntegration: {[key: string]: boolean}\n  vulnerability: {[key: string]: boolean}\n  vulnerabilitySubscription: string\n  deployKeyAlert: string[]\n  actionsUrl: string\n  dependabotHelpUrl: string\n  saveData: (section: Sections, formData: FormData) => void\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  renderState: (section: Sections) => React.ComponentElement<any, any>\n}\n\nfunction SystemSettings(props: Props) {\n  const actionsDesciption = (\n    <>\n      Notifications for workflow runs on repositories set up with&nbsp;\n      <Link inline href={props.actionsUrl}>\n        GitHub Actions\n      </Link>\n      .\n    </>\n  )\n  const dependabotDesciption = (\n    <>\n      When you&apos;re given access to&nbsp;\n      <Link inline href={props.dependabotHelpUrl}>\n        Dependabot alerts\n      </Link>\n      &nbsp;automatically receive notifications when a new vulnerability is found in one of your dependencies.\n    </>\n  )\n  const saveEmailWeeklyDigest = (data: string) => {\n    const formData = new FormData()\n    if (data.includes('weekly') || data.includes('daily')) {\n      formData.set('vulnerability_digest', '1')\n      formData.set('subscription_kind', data.includes('weekly') ? 'weekly' : 'daily')\n    } else {\n      formData.set('vulnerability_digest', '0')\n    }\n    props.saveData(Sections.System, formData)\n  }\n\n  const saveDeployKeyAlert = (value: boolean) => {\n    const formData = new FormData()\n    formData.append(`org_deploy_key_settings[email]`, value ? '1' : '0')\n    props.saveData(Sections.System, formData)\n  }\n\n  const deployKeyToggleLabelId = useId()\n\n  return (\n    <Box sx={props.sx}>\n      <Table>\n        <Header style={{display: 'flex', alignItems: 'center'}}>\n          System\n          {props.renderState(Sections.System)}\n        </Header>\n        <Row\n          {...actionsRow}\n          action={<ActionsSelect selected={props.continuousIntegration} saveData={props.saveData} />}\n          subtitle={actionsDesciption}\n        />\n        <Row\n          {...dependabotAlertsRow}\n          action={<VulnerabilitySelect selected={props.vulnerability} saveData={props.saveData} />}\n          subtitle={dependabotDesciption}\n        />\n        <Row\n          {...emailWeeklyDigestRow}\n          action={\n            <SingleSelect\n              options={Object.values(digestOptions)}\n              defaultOption={digestOptions[(props.vulnerabilitySubscription as keyof typeof digestOptions) || 'none']}\n              onChange={saveEmailWeeklyDigest}\n            />\n          }\n        />\n        <Row\n          {...deployKeyAlertRow}\n          labelId={deployKeyToggleLabelId}\n          action={\n            <ToggleBox\n              checked={props.deployKeyAlert.includes('email')}\n              onChange={saveDeployKeyAlert}\n              labelId={deployKeyToggleLabelId}\n            />\n          }\n        />\n      </Table>\n    </Box>\n  )\n}\n\nexport default SystemSettings\n\ntry{ ActionsSelect.displayName ||= 'ActionsSelect' } catch {}\ntry{ VulnerabilitySelect.displayName ||= 'VulnerabilitySelect' } catch {}\ntry{ SystemSettings.displayName ||= 'SystemSettings' } catch {}","import {Box, Heading, Text, Link as PrimerLink} from '@primer/react'\nimport {Link} from '@github-ui/react-core/link'\nimport SingleSelect from './dropdown/SingleSelect'\nimport ToggleBox from './ToggleBox'\nimport {Sections} from '../components/State'\n\ninterface Props {\n  autoSubscribeRepositories: boolean\n  autoSubscribeTeams: boolean\n  emails: string[]\n  defaultEmail: string\n  isEmailReadonly?: boolean\n  saveData: (section: Sections, formData: FormData) => void\n}\n\nfunction NotificationsSettings(props: Props) {\n  const toggleStyle = {\n    borderColor: 'border.default',\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderRadius: 2,\n    p: 3,\n  }\n\n  const saveEmail = (email: string) => {\n    const formData = new FormData()\n    formData.set('email', email)\n    props.saveData(Sections.Notifications, formData)\n  }\n\n  const saveWatchRepositories = (value: boolean) => {\n    const formData = new FormData()\n    formData.set('auto_subscribe_repositories', value ? '1' : '0')\n    props.saveData(Sections.Notifications, formData)\n  }\n\n  const saveWatchTeams = (value: boolean) => {\n    const formData = new FormData()\n    formData.set('auto_subscribe_teams', value ? '1' : '0')\n    props.saveData(Sections.Notifications, formData)\n  }\n\n  return (\n    <>\n      <Box sx={{borderColor: 'border.default', borderWidth: 1, borderStyle: 'solid', borderRadius: 2, p: 3, mb: 3}}>\n        <Heading as=\"h3\" sx={{fontSize: 1, fontWeight: 'bold', m: 0}}>\n          Default notifications email\n        </Heading>\n        <Text as=\"p\" sx={{color: 'fg.muted', display: 'flex', width: '80%', mb: 2}}>\n          {!props.isEmailReadonly\n            ? \"Choose where you'd like emails to be sent. You can add more email addresses. Use custom routes to specify different email addresses to be used for individual organizations.\"\n            : 'Your email address is managed by your enterprise.'}\n        </Text>\n        <Box sx={{display: 'flex', mt: 2, flexWrap: 'wrap', gap: 2}}>\n          <SingleSelect\n            options={props.emails}\n            defaultOption={props.defaultEmail}\n            onChange={saveEmail}\n            disabled={props.isEmailReadonly ?? false}\n          />\n          {!props.isEmailReadonly && (\n            <PrimerLink\n              as={Link}\n              to=\"/settings/notifications/custom_routing\"\n              className={'btn btn-sm'}\n              sx={{'&:hover': {textDecoration: 'none'}, color: 'inherit', fontWeight: 'bold'}}\n            >\n              Custom routing\n            </PrimerLink>\n          )}\n        </Box>\n      </Box>\n\n      <Box\n        sx={{\n          display: 'grid',\n          gap: '16px',\n          mb: 4,\n          gridTemplateColumns: 'repeat(auto-fill, minmax(320px, 1fr))',\n        }}\n      >\n        <ToggleBox\n          title=\"Automatically watch repositories\"\n          subtitle=\"When you're given push access to a repository, automatically receive notifications for it.\"\n          checked={props.autoSubscribeRepositories}\n          sx={toggleStyle}\n          onChange={saveWatchRepositories}\n        />\n        <ToggleBox\n          title=\"Automatically watch teams\"\n          subtitle=\"Anytime you join a new team, you will automatically be subscribed to updates and receive notification when that team is @mentioned.\"\n          checked={props.autoSubscribeTeams}\n          sx={toggleStyle}\n          onChange={saveWatchTeams}\n        />\n      </Box>\n    </>\n  )\n}\n\nexport default NotificationsSettings\n\ntry{ NotificationsSettings.displayName ||= 'NotificationsSettings' } catch {}","import {verifiedFetch, verifiedFetchJSON} from '@github-ui/verified-fetch'\n\nexport const request = (url: string) => {\n  return async (formData: FormData) => {\n    try {\n      const response = await verifiedFetch(url, {\n        method: 'PUT',\n        body: formData,\n      })\n      if (response.ok) {\n        return response\n      } else {\n        return new Error('Failed to update')\n      }\n    } catch (error) {\n      return error\n    }\n  }\n}\n\nexport const updateSettings = request('/settings/notifications')\n\nexport const updateOrgNotificationPrefs = (login: string, email: string) => {\n  const formData = new FormData()\n  formData.set('email', email)\n  return request(`/settings/notification_preferences/organizations/${login}`)(formData)\n}\n\nexport const clearOrgNotificationPrefs = async (login: string) => {\n  try {\n    const res = await verifiedFetchJSON(`/settings/notification_preferences/organizations/${login}`, {\n      method: 'delete',\n    })\n    if (res.ok) {\n      return res\n    } else {\n      return new Error(`API response not OK: ${res.status}`)\n    }\n  } catch (error) {\n    return error\n  }\n}\n","import {useState} from 'react'\nimport {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {Box, Heading} from '@primer/react'\nimport type {SettingsPayload} from '../types/settings-types'\nimport WatchingSettings from '../components/WatchingSettings'\nimport SystemSettings from '../components/SystemSettings'\nimport NotificationsSettings from '../components/NotificationsSettings'\nimport State, {Sections, SavingStatus} from '../components/State'\nimport {updateSettings} from '../services/api'\n\nexport function IndexPage() {\n  const payload = useRoutePayload<SettingsPayload>()\n  const {\n    subscribedSettings,\n    participatingSettings,\n    autoSubscribeRepositories,\n    autoSubscribeTeams,\n    continuousIntegrationEmail,\n    continuousIntegrationFailuresOnly,\n    continuousIntegrationWeb,\n    vulnerabilityCli,\n    vulnerabilityEmail,\n    vulnerabilityWeb,\n    vulnerabilitySubscription,\n    notifiableEmails,\n    orgDeployKeySettings,\n    pullRequestReview,\n    pullRequestPush,\n    ownViaEmail,\n    commentEmail,\n    emails: {\n      global: {address, readonly},\n    },\n    watchingUrl,\n    actionsUrl,\n    dependabotHelpUrl,\n  } = payload\n\n  const [savingStatus, setSavingStatus] = useState<SavingStatus>(SavingStatus.IDLE)\n  const [savingSection, setSavingSection] = useState<string>(Sections.Notifications)\n\n  const saveData = async (section: Sections, formData: FormData) => {\n    setSavingSection(section)\n    setSavingStatus(SavingStatus.LOADING)\n    const response = await updateSettings(formData)\n    // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n    if (response.ok) {\n      setSavingStatus(SavingStatus.SUCCESS)\n    } else {\n      setSavingStatus(SavingStatus.ERROR)\n    }\n  }\n\n  const renderState = (section: Sections) => {\n    const status = savingSection === section ? savingStatus : SavingStatus.IDLE\n    return <State status={status} sx={{marginRight: 3, display: 'flex', alignItems: 'center'}} />\n  }\n\n  return (\n    <>\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          borderColor: 'border.default',\n          borderBottomWidth: 1,\n          borderBottomStyle: 'solid',\n          justifyContent: 'space-between',\n          pb: 2,\n          mb: 3,\n        }}\n      >\n        <Heading as=\"h2\" sx={{fontSize: 4, fontWeight: 400}} data-hpc>\n          Notifications\n        </Heading>\n        {renderState(Sections.Notifications)}\n      </Box>\n      <NotificationsSettings\n        autoSubscribeRepositories={autoSubscribeRepositories}\n        autoSubscribeTeams={autoSubscribeTeams}\n        emails={notifiableEmails}\n        defaultEmail={address}\n        saveData={saveData}\n        isEmailReadonly={readonly}\n      />\n      <WatchingSettings\n        subscribedSettings={subscribedSettings}\n        participatingSettings={participatingSettings}\n        saveData={saveData}\n        renderState={renderState}\n        emailNotificationPreferences={{\n          pullRequestReview,\n          pullRequestPush,\n          ownViaEmail,\n          commentEmail,\n        }}\n        watchingUrl={watchingUrl}\n      />\n      <SystemSettings\n        sx={{mt: 3}}\n        continuousIntegration={{\n          continuousIntegrationEmail,\n          continuousIntegrationFailuresOnly,\n          continuousIntegrationWeb,\n        }}\n        vulnerability={{\n          vulnerabilityCli,\n          vulnerabilityEmail,\n          vulnerabilityWeb,\n        }}\n        vulnerabilitySubscription={vulnerabilitySubscription}\n        deployKeyAlert={orgDeployKeySettings}\n        saveData={saveData}\n        renderState={renderState}\n        actionsUrl={actionsUrl}\n        dependabotHelpUrl={dependabotHelpUrl}\n      />\n    </>\n  )\n}\n\ntry{ IndexPage.displayName ||= 'IndexPage' } catch {}","import type {SavingStatus} from '../components/State'\nimport type {OrganizationRecord} from './settings-types'\n\n/**\n * Encapsulate the custom route API response\n */\nexport type CustomRoutesPayload = {\n  organizationRecords: OrganizationRecord[]\n  verificationEnabled: boolean\n  newsiesAvailable: boolean\n  globalEmailAddress: string\n}\n\n/**\n * Manage state key for each CustomRouteRow, usually an organization login or reserved keyword\n */\nexport type CustomRouteKey = string\nexport const DRAFT_KEY = '__draft'\n\n/**\n * Managed state value for each CustomRouteRow\n */\nexport type CustomRouteState = {\n  status: SavingStatus /// Current save status\n  email: string | null /// Email address for custom route\n}\n\n/**\n * Organization login map to its custom route state\n */\nexport type RouteStateMap = Map<CustomRouteKey, CustomRouteState>\n\n/**\n * Organization login map to its DB record\n */\nexport type OrganizationMap = Map<CustomRouteKey, OrganizationRecord>\n\nexport enum RouteActions {\n  DELETE = 'DELETE',\n  UPDATE = 'UPDATE',\n}\ntype RouteDeleteAction = {\n  type: RouteActions.DELETE\n}\ntype RouteUpdateAction = {\n  type: RouteActions.UPDATE\n} & Partial<CustomRouteState>\n\n/**\n * Required parameters for dispatch calls\n */\ntype RouteActionBase = {\n  type: RouteActions\n  login: string\n}\n\n/**\n * Actions that can be performed on the custom route settings\n */\nexport type RouteStateAction = RouteActionBase & (RouteDeleteAction | RouteUpdateAction)\n","import {type FC, useCallback, useState} from 'react'\n\nimport {Button, SelectPanel} from '@primer/react'\nimport type {ItemInput} from '@primer/react/lib-esm/deprecated/ActionList/List'\nimport {TriangleDownIcon} from '@primer/octicons-react'\nimport type {ItemProps} from '@primer/react/lib-esm/deprecated/ActionList'\nimport type {OrganizationRecord} from '../../types/settings-types'\n\ntype SelectPanelCallback = (param: ItemInput[] | ItemInput | undefined) => void\n\ntype OrganizationSelectProps = {\n  orgLogin?: string | null /// The org login to pre-select\n  organizations: OrganizationRecord[] /// The list of organizations to select from\n  open?: boolean /// Whether the dropdown starts open\n\n  onChange?: (orgLogin: string) => void /// Callback when organization is selected\n}\n\nconst OrganizationSelect: FC<OrganizationSelectProps> = ({orgLogin, organizations, onChange, open}) => {\n  const [selectedOrgLogin, setSelectedOrgLogin] = useState<string | null>(orgLogin || null)\n  const [isOpen, setOpen] = useState<boolean>(open ?? false)\n  const [filter, setFilter] = useState<string>('')\n\n  const items = organizations.map(org => ({\n    leadingVisual: () => (\n      <>\n        <img width={16} height={16} src={org.avatarUrl} alt={org.login} />\n      </>\n    ),\n    text: org.login,\n    id: org.login,\n    selectionVariant: 'single',\n    sx: {paddingLeft: '0'},\n  })) as ItemProps[]\n  const filteredItems = items.filter(item => item.text?.toLowerCase()?.includes(filter.toLowerCase()))\n\n  const selectCallback: SelectPanelCallback = param => {\n    if (param === undefined) {\n      return\n    }\n\n    // We only allow one organization to be selected at a time\n    const selectedItemInputs = Array.isArray(param) ? param : [param]\n    const selectedItem = selectedItemInputs[0]!\n\n    // Handle selected item (if we have a callback and item value)\n    setOpen(false)\n    selectedItem && selectedItem.text && onChange && onChange(selectedItem.text)\n    setSelectedOrgLogin(selectedItem.text || null)\n  }\n  const onSelect = useCallback(selectCallback, [selectCallback])\n  const onFilter = useCallback(setFilter, [setFilter])\n  const onOpen = useCallback(() => setOpen(!isOpen), [isOpen, setOpen])\n\n  return (\n    <SelectPanel\n      renderAnchor={({children, ...anchorProps}) => (\n        <Button trailingVisual={TriangleDownIcon} {...anchorProps}>\n          {children || 'Pick organization'}\n        </Button>\n      )}\n      placeholderText=\"Search organizations\"\n      items={filteredItems}\n      selected={items.find(item => item.id === selectedOrgLogin)}\n      onSelectedChange={onSelect}\n      onOpenChange={onOpen}\n      onFilterChange={onFilter}\n      open={isOpen}\n      overlayProps={{width: 'small', height: filteredItems.length > 6 ? 'small' : 'auto'}}\n    />\n  )\n}\n\nexport default OrganizationSelect\n\ntry{ OrganizationSelect.displayName ||= 'OrganizationSelect' } catch {}","import {type FC, useCallback, useState, useEffect, useRef} from 'react'\nimport {ActionMenu, ActionList, Box, type BoxProps, Button, IconButton, Text, Select, FormControl} from '@primer/react'\nimport {ArrowRightIcon, KebabHorizontalIcon, PencilIcon, TrashIcon} from '@primer/octicons-react'\nimport State, {type SavingStatus} from './State'\nimport OrganizationSelect from '../components/dropdown/OrganizationSelect'\nimport type {OrganizationRecord} from '../types/settings-types'\nimport type {CustomRouteKey} from '../types/custom-route-types'\n\ntype CustomRouteRowProps = {\n  /// Selection state\n  email: string | null /// Email key to pre-select\n  login: CustomRouteKey /// Organization login for use in callbacks\n  organization: OrganizationRecord | null /// Organization to pre-select\n  organizationRecords: OrganizationRecord[] /// List of selecable organizations\n\n  /// Row state\n  isEditing?: boolean | null /// Whether component is in edit mode\n  isEditDisabled?: boolean | null /// Whether to disallow editing\n  stateStatus?: SavingStatus | null /// Status of saving state\n\n  /// Callbacks\n  onSave: {(login: CustomRouteKey, email: string): void} /// Callback to save route changes\n  onDelete: {(login: CustomRouteKey): void} /// Callback to delete route\n  onEdit: {(login: CustomRouteKey | null): void} /// Callback to edit route (null to cancel)\n}\n\n/**\n * @summary Render a custom route.\n *\n * @description The component is responsbile for rendering the provided\n * custom route mapping. It provides a button to edit the custom route,\n * which it will call back with once an edit is saved. There is also\n * an option to delete the custom route. By default, the component will\n * be in edit mode, unless an orgId/email combination is passed in.\n * If an orgId is passed in, it will not be allowed to be changed.\n *\n * @param props Current configuration (if any) and available options\n * @returns Route row\n */\nconst CustomRouteRow: FC<CustomRouteRowProps & BoxProps> = ({\n  email,\n  login: organizationLogin,\n  organization,\n  organizationRecords,\n  isEditing,\n  isEditDisabled,\n  stateStatus,\n  onSave,\n  onDelete,\n  onEdit,\n  ...rest\n}) => {\n  const [readOnly, setReadOnly] = useState<boolean>(!isEditing ?? true)\n  const [hasEdited, setHasEdited] = useState<boolean>(false)\n  const actionMenuRef = useRef<HTMLButtonElement>(null)\n  const selectEmailRef = useRef<HTMLSelectElement>(null)\n  // Once an organization is selected, it cannot be changed without deleting the route\n  const [selectedOrganization, setSelectedOrganization] = useState<OrganizationRecord | null>(organization ?? null)\n  const isOrgReadOnly = selectedOrganization ? true : false\n  const [selectedEmail, setSelectedEmail] = useState<string | null>(email)\n\n  const isValid = selectedEmail && selectedOrganization\n\n  useEffect(() => {\n    setSelectedEmail(email)\n  }, [email])\n\n  /**\n   * @summary Cancel edit action and put row back in original state\n   */\n  const cancelCallback = useCallback(() => {\n    // External callback\n    if (!organization) return onDelete(organizationLogin)\n\n    // Internal state reset\n    setSelectedOrganization(organization ?? null)\n    setSelectedEmail(organization ? organization.email : null)\n    setHasEdited(true)\n    setReadOnly(true)\n\n    // External callback\n    if (onEdit) {\n      onEdit(null)\n    }\n  }, [onDelete, onEdit, organization, organizationLogin])\n\n  /**\n   * @summary Commit edit action and callback with updated custom route\n   */\n  const saveCallback = useCallback(() => {\n    // Quit if we are not ready to save yet\n    if (!isValid) return\n\n    // External callback\n    onSave(selectedOrganization.login, selectedEmail)\n\n    // Internal state update\n    setHasEdited(true)\n    setReadOnly(true)\n  }, [onSave, selectedEmail, selectedOrganization, isValid])\n\n  /**\n   * @summary Put row into editing mode\n   */\n  const editCallback = useCallback(() => {\n    // External callback\n    if (onEdit) {\n      onEdit(organizationLogin)\n    }\n\n    // Internal state update\n    setReadOnly(false)\n    setSelectedEmail(null) // Clear email selection so that the dropdown opens\n  }, [onEdit, organizationLogin])\n\n  /**\n   * @summary Delete custom route\n   */\n  const deleteCallback = useCallback(() => {\n    // External callback\n    onDelete(organizationLogin)\n  }, [onDelete, organizationLogin])\n\n  useEffect(() => {\n    // return focus to SelectEmailRef\n    if (!readOnly && selectedOrganization) {\n      selectEmailRef.current?.focus()\n    }\n  }, [readOnly, selectEmailRef, selectedOrganization])\n\n  useEffect(() => {\n    // return focus to actionMenu on save or cancel\n    if (hasEdited && readOnly) {\n      actionMenuRef.current?.focus()\n    }\n  }, [readOnly, hasEdited, actionMenuRef])\n\n  return (\n    <Box\n      className=\"Box-row\"\n      // Make sure we extend styled props\n      {...rest}\n      sx={{\n        ...(rest.sx || {}),\n        display: 'flex',\n        flexWrap: readOnly ? 'nowrap' : 'wrap',\n        gap: 2,\n      }}\n    >\n      <div\n        className=\"d-block d-sm-flex flex-sm-row\"\n        style={{display: 'flex', flexGrow: '1', overflow: 'hidden', gap: '8px'}}\n      >\n        {/* Organization picker */}\n        <div\n          className=\"mb-1 mb-sm-0\"\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            flexBasis: readOnly ? '16em' : 'auto',\n            minWidth: '8em',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n          }}\n        >\n          {(readOnly || isOrgReadOnly) && selectedOrganization ? (\n            <>\n              <Box sx={{pr: 2, display: 'flex'}}>\n                <img width={16} height={16} alt={selectedOrganization.login} src={selectedOrganization.avatarUrl} />\n              </Box>\n              <Box sx={{overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap'}}>\n                {selectedOrganization.login}\n              </Box>\n            </>\n          ) : (\n            <OrganizationSelect\n              organizations={organizationRecords}\n              orgLogin={selectedOrganization ? selectedOrganization.login : null}\n              // Open immediately if no organization is selected\n              open={selectedOrganization ? false : true}\n              onChange={login => {\n                return setSelectedOrganization(organizationRecords.find(org => org.login === login) ?? null)\n              }}\n            />\n          )}\n        </div>\n\n        {/* Route arrow (make sure we pad it out and vertically center it) */}\n        <Box\n          className=\"hide-sm\"\n          sx={{\n            px: 3,\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <ArrowRightIcon size={16} />\n        </Box>\n\n        {/* Email picker */}\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <div\n            className=\"hide-md hide-lg hide-xl\"\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              marginRight: '8px',\n            }}\n          >\n            <ArrowRightIcon size={16} />\n          </div>\n          {readOnly ? (\n            <Box sx={{display: 'flex', alignItems: 'center', overflow: 'hidden'}}>\n              <Text as=\"span\" sx={{overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap'}}>\n                {selectedEmail}\n              </Text>\n            </Box>\n          ) : (\n            <FormControl>\n              <FormControl.Label visuallyHidden>Email</FormControl.Label>\n              <Select\n                ref={selectEmailRef}\n                placeholder=\"Select Email\"\n                defaultValue={selectedEmail ? selectedEmail : 'Select email'}\n                onChange={e => setSelectedEmail(e.target.value)}\n              >\n                {(selectedOrganization?.notifiableEmailsForUser ?? []).map(notifiableEmail => (\n                  <option key={notifiableEmail} value={notifiableEmail} data-testid=\"email-option\">\n                    {notifiableEmail}\n                  </option>\n                ))}\n              </Select>\n            </FormControl>\n          )}\n        </div>\n      </div>\n\n      {/* Route actions */}\n      <Box sx={{display: 'flex', marginLeft: 'auto', justifyContent: 'flex-end'}}>\n        {stateStatus && <State status={stateStatus} sx={{display: 'flex', alignItems: 'center', mx: 3}} />}\n\n        {readOnly ? (\n          <ActionMenu anchorRef={actionMenuRef}>\n            <ActionMenu.Anchor data-testid=\"custom-route-row-actions\">\n              {/* eslint-disable-next-line primer-react/a11y-remove-disable-tooltip */}\n              <IconButton\n                unsafeDisableTooltip={true}\n                icon={KebabHorizontalIcon}\n                variant=\"invisible\"\n                aria-label=\"Open column options\"\n              />\n            </ActionMenu.Anchor>\n\n            <ActionMenu.Overlay>\n              <ActionList>\n                <ActionList.Item onSelect={editCallback} disabled={isEditDisabled ?? false} role=\"menuitem\">\n                  <ActionList.LeadingVisual>\n                    <PencilIcon />\n                  </ActionList.LeadingVisual>\n                  Edit\n                </ActionList.Item>\n                <ActionList.Item variant=\"danger\" onSelect={deleteCallback} role=\"menuitem\">\n                  <ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>\n                  Delete\n                </ActionList.Item>\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>\n        ) : (\n          <Box sx={{display: 'flex', alignItems: 'flex-end', gap: 2}}>\n            <Button variant=\"danger\" onClick={cancelCallback}>\n              Cancel\n            </Button>\n            <Button variant=\"primary\" onClick={saveCallback} disabled={!isValid}>\n              Save\n            </Button>\n          </Box>\n        )}\n      </Box>\n    </Box>\n  )\n}\nexport default CustomRouteRow\n\ntry{ CustomRouteRow.displayName ||= 'CustomRouteRow' } catch {}","/**\n * @fileoverview User notification custom route settings.\n *\n * Renders table consisting of \"custom route\" rows,\n * each row is editable and deletable. Changes are\n * persisted in the DB using callbacks.\n */\nimport React, {type FC, useCallback, useReducer, useRef, useMemo, useEffect} from 'react'\nimport {Box, type BoxProps, Button} from '@primer/react'\n\nimport {SavingStatus} from './State'\nimport {\n  type CustomRoutesPayload,\n  type CustomRouteKey,\n  type CustomRouteState,\n  type OrganizationMap,\n  type RouteStateMap,\n  RouteActions,\n  type RouteStateAction,\n  DRAFT_KEY,\n} from '../types/custom-route-types'\n\nimport {updateOrgNotificationPrefs, clearOrgNotificationPrefs} from '../services/api'\nimport CustomRouteRow from './CustomRouteRow'\nimport type {OrganizationRecord} from '../types/settings-types'\n\nexport const FALLBACK_TEXT = 'No custom routes yet.'\n\n/**\n * CustomRouteSettings props containing API payload\n */\ntype CustomRouteSettingsProps = {\n  payload: CustomRoutesPayload /// API response for custom routes\n}\n\n/**\n * @summary Render the custom routes settings page.\n *\n * @description Our API returns the list of organizations, which may\n * or may not have custom routes. If they do not have a custom route,\n * they are considered default routes.\n *\n * For default routes, do not render them but allow them to be added.\n * For custom routes, render them and allow them to be edited/deleted.\n *\n * Note that a custom route can be created that matches a default route,\n * in which case it should take presedence over the default route.\n * Meaning a change to the default email address should not affect the route.\n *\n * @param props Box props and Custom Routes API payload\n * @returns Current routes\n */\nconst CustomRouteSettings: FC<BoxProps & CustomRouteSettingsProps> = ({payload, ...rest}) => {\n  const {organizationRecords, verificationEnabled, globalEmailAddress} = payload\n  const addNewRouteButton = useRef<HTMLButtonElement>(null)\n\n  const initialState: RouteStateMap = useMemo(\n    /**\n     * @returns Inital state for custom routes\n     */\n    function initialiseState() {\n      return new Map(\n        organizationRecords\n          // Only display organizations that have custom routes\n          .filter(org => org.display)\n          // `new Map()` takes in an array of [key, value] pairs\n          .map(org => [org.login, {status: SavingStatus.IDLE, email: org.email}]),\n      )\n    },\n    [organizationRecords],\n  )\n  const organizationMap: OrganizationMap = useMemo(\n    /**\n     * @returns Organization record hashmap keyed by login\n     */\n    function mapOrganizationRecords() {\n      return new Map(organizationRecords.map(org => [org.login, org]))\n    },\n    [organizationRecords],\n  )\n\n  /**\n   * Dispatch handler\n   *\n   * @param state Current state\n   * @param action Action that was dispatched\n   *\n   * @returns Updated state\n   */\n  const stateReducer = (state: RouteStateMap, action: RouteStateAction) => {\n    const newState = new Map(state.entries())\n\n    const {type, login, ...up} = action\n    const oldRowState = login ? state.get(login) : {}\n\n    switch (type) {\n      case RouteActions.DELETE:\n        // Remove the row from the state\n        newState.delete(login)\n        break\n\n      case RouteActions.UPDATE:\n        // Update old value in-place, overriding any previous state;\n        // we support partial updates assuming the initial state is valid\n        // hence why the type cast is safe (@see `#initialiseState()`)\n        newState.set(login, {...oldRowState, ...up} as CustomRouteState)\n        break\n    }\n    return newState\n  }\n  const [stateMap, dispatch] = useReducer(stateReducer, initialState)\n\n  // Make sure we are only rendering one status message at a time\n  const [statusLogin, setStatusLogin] = React.useState<CustomRouteKey | null>(null)\n\n  // Make sure we are only allowing 1 row to be edited at a time\n  const [editingLogin, setEditingLogin] = React.useState<CustomRouteKey | null>(null)\n\n  const isEditing: boolean = editingLogin ? true : false\n  const [isEditingNewRoute, setIsEditingNewRoute] = React.useState<boolean>(false)\n\n  // Helper methods to reset the state to the original values\n  const clearStatus = useCallback(() => setStatusLogin(null), [setStatusLogin])\n  const finishEditing = useCallback(() => {\n    setEditingLogin(null)\n  }, [setEditingLogin])\n\n  useEffect(() => {\n    if (!editingLogin && isEditingNewRoute) {\n      addNewRouteButton.current?.focus()\n      setIsEditingNewRoute(false)\n    }\n  }, [editingLogin, isEditingNewRoute, setIsEditingNewRoute, addNewRouteButton])\n\n  const orderedLogins: CustomRouteKey[] = useMemo(\n    /**\n     * @returns Ordered list of organization logins\n     */\n    function orderLogins() {\n      return Array.from(stateMap.keys()).sort()\n    },\n    [stateMap],\n  )\n  const selectableOrganizations: OrganizationRecord[] = useMemo(\n    /**\n     * @returns Array of selectable organizations\n     */\n    function filterSelectedOrganizations() {\n      // Only allow an organization to be selected if it has no custom route\n      return organizationRecords.filter(org => {\n        for (const [login] of stateMap) {\n          if (login === org.login) {\n            return false\n          }\n        }\n        return true\n      })\n    },\n    [organizationRecords, stateMap],\n  )\n\n  /**\n   * @summary Delete a custom route\n   *\n   * @param login Organization login\n   */\n  const deleteCallback = useCallback(\n    async (login: CustomRouteKey) => {\n      // Handle deleting a 'draft' route\n      if (login === DRAFT_KEY) {\n        dispatch({type: RouteActions.DELETE, login})\n        finishEditing()\n        return\n      }\n\n      // Update status so that we render it loading\n      setEditingLogin(login)\n      setStatusLogin(login)\n      dispatch({type: RouteActions.UPDATE, login, status: SavingStatus.LOADING})\n\n      // Fire off request to delete route\n      const res = await clearOrgNotificationPrefs(login)\n      // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n      if (res.ok) {\n        // Remove the route from the displayed list once it's deleted\n        dispatch({type: RouteActions.DELETE, login})\n      } else {\n        dispatch({type: RouteActions.UPDATE, login, status: SavingStatus.ERROR})\n      }\n\n      // Status immediately clears as row is no longer rendered\n      finishEditing()\n      clearStatus()\n    },\n    [dispatch, finishEditing, clearStatus],\n  )\n\n  /**\n   * @summary Save changes made to a custom route\n   */\n  const saveCallback = useCallback(\n    async (login: CustomRouteKey, email: string) => {\n      // Handle saving a 'draft' route\n      if (!(login in stateMap.keys())) {\n        dispatch({type: RouteActions.DELETE, login: DRAFT_KEY})\n      }\n\n      // Update status so that we render it loading\n      setStatusLogin(login)\n      dispatch({type: RouteActions.UPDATE, login, status: SavingStatus.LOADING})\n\n      // Fire off request to save route\n      const res = await updateOrgNotificationPrefs(login, email)\n      // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n      if (res.ok) {\n        // Update the route once it's saved\n        dispatch({type: RouteActions.UPDATE, login, email, status: SavingStatus.SUCCESS})\n      } else {\n        dispatch({type: RouteActions.UPDATE, login, status: SavingStatus.ERROR})\n      }\n      finishEditing()\n    },\n    [stateMap, dispatch, finishEditing],\n  )\n\n  /**\n   * @summary Handle edit/cancel from a custom route row\n   */\n  const editCallback = useCallback(\n    (login: CustomRouteKey | null) => {\n      clearStatus()\n      setEditingLogin(login)\n    },\n    [setEditingLogin, clearStatus],\n  )\n\n  /**\n   * @summary Create a new 'draft' custom route row for the user to edit\n   */\n  const addCallback = useCallback(() => {\n    dispatch({type: RouteActions.UPDATE, login: DRAFT_KEY, status: SavingStatus.IDLE, email: null})\n    setIsEditingNewRoute(true)\n    editCallback(DRAFT_KEY)\n  }, [dispatch, editCallback])\n\n  return (\n    <Box {...rest}>\n      {/* Explainer section with new route button */}\n      <Box as=\"section\" sx={{display: 'flex', flexDirection: 'column'}}>\n        <div>\n          <p>\n            You can send notifications to different {verificationEnabled ? <strong>verified </strong> : null}\n            email addresses depending on the organization that owns the repository.\n          </p>\n        </div>\n        <Box\n          as=\"section\"\n          sx={{display: 'flex', flexWrap: 'wrap', gap: 3, justifyContent: 'space-between', alignItems: 'center'}}\n        >\n          <small>{globalEmailAddress} is your current default email for notifications.</small>\n          <Button\n            variant=\"primary\"\n            sx={{mt: 'auto', ml: 'auto'}} // Bottom-right align\n            // Prevent 'draft' routes from being created if one is already present\n            // or if a row is in edit mode\n            disabled={isEditing}\n            onClick={addCallback}\n            ref={addNewRouteButton}\n          >\n            Add new route\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Custom route table, n.b. we must render a top border as part of the parent list element */}\n      <Box\n        sx={{mt: 3, borderTopStyle: 'solid', borderColor: 'border.default', borderRadius: '6px', borderWidth: '1px'}}\n      >\n        {orderedLogins.length < 1 ? (\n          <Box\n            className=\"Box-row text-center\"\n            key=\"no-routes\"\n            sx={{\n              borderStyle: 'solid',\n              borderColor: 'border.default',\n              borderWidth: '1px',\n            }}\n          >\n            <span>{FALLBACK_TEXT}</span>\n          </Box>\n        ) : (\n          orderedLogins.map(login => {\n            // Build the custom route row component in a closure\n            // so that we can lookup and inject any necessary state\n            const {email, status} = stateMap.get(login)!\n            const record = organizationMap.get(login)!\n            return (\n              <CustomRouteRow\n                data-testid=\"custom-route-row\"\n                key={login}\n                login={login}\n                email={email}\n                organization={record}\n                organizationRecords={selectableOrganizations}\n                isEditing={login === editingLogin}\n                // Prevent more than one row from being edited at a time\n                isEditDisabled={isEditing}\n                stateStatus={login === statusLogin ? status : null}\n                onDelete={deleteCallback}\n                onSave={saveCallback}\n                onEdit={editCallback}\n                sx={{\n                  borderStyle: 'solid',\n                  borderColor: 'border.default',\n                  borderWidth: '1px',\n                }}\n              />\n            )\n          })\n        )}\n      </Box>\n    </Box>\n  )\n}\nexport default CustomRouteSettings\n\ntry{ CustomRouteSettings.displayName ||= 'CustomRouteSettings' } catch {}","import {Link} from '@github-ui/react-core/link'\nimport {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {Box, Heading, Text, Link as PrimerLink} from '@primer/react'\nimport type {FC} from 'react'\n\nimport type {CustomRoutesPayload} from '../types/custom-route-types'\nimport CustomRouteSettings from '../components/CustomRouteSettings'\n\nexport const CustomRoutesPage: FC = () => {\n  const routePayload = useRoutePayload<CustomRoutesPayload>()\n  return (\n    <>\n      {/* Custom Route header */}\n      <Box sx={{borderColor: 'border.default', borderBottomWidth: 1, borderBottomStyle: 'solid', pb: 2, mb: 3}}>\n        <Heading as=\"h1\" sx={{fontSize: 4, fontWeight: 400, display: 'flex'}} data-hpc>\n          <PrimerLink as={Link} to=\"/settings/notifications\">\n            Notifications\n          </PrimerLink>\n          <Text as=\"span\" sx={{ml: 2}}>\n            / Custom Routing\n          </Text>\n        </Heading>\n      </Box>\n\n      {/* Custom Route settings table */}\n      <CustomRouteSettings payload={routePayload} />\n    </>\n  )\n}\n\ntry{ CustomRoutesPage.displayName ||= 'CustomRoutesPage' } catch {}","import {registerReactAppFactory} from '@github-ui/react-core/register-app'\nimport {jsonRoute} from '@github-ui/react-core/json-route'\nimport {IndexPage} from './pages/IndexPage'\nimport {CustomRoutesPage} from './pages/CustomRoutesPage'\n\nregisterReactAppFactory('notification-settings', () => ({\n  routes: [\n    jsonRoute({path: '/settings/notifications', Component: IndexPage}),\n    jsonRoute({path: '/settings/notifications/custom_routing', Component: CustomRoutesPage}),\n  ],\n}))\n","/**\n * A Fetch function which will automatically add the correct headers for\n * making requests to GitHub application servers as long as the associated controller methods allow it.\n * Track down the associated controller method and confirm the controller includes\n * ApplicationController::VerifiedFetchDependency as well as `allow_verified_fetch only:`\n * to the relevant controller methods.\n *\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetch('/foo', {method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.text())\ntest.\n *     }\n */\nexport function verifiedFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  assertRelativePathOrSameOrigin(path)\n\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Verified-Fetch': 'true',\n    'X-Requested-With': 'XMLHttpRequest',\n  }\n\n  return fetch(path, {...init, headers})\n}\n\nexport interface JSONRequestInit extends Omit<RequestInit, 'body'> {\n  body?: unknown\n}\n\nfunction assertRelativePathOrSameOrigin(path: string) {\n  if (process.env.NODE_ENV === 'test' && !window.location.origin) return\n  const url = new URL(path, window.location.origin)\n  if (url.origin !== window.location.origin) {\n    throw new Error('Can not make cross-origin requests from verifiedFetch')\n  }\n}\n\n/**\n * A Fetch function which will automatically add the correct headers for\n * making JSON requests\n *\n * Will also `JSON.stringify` the request body if provided.\n\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetchJSON('/foo', {body: {foo: 'bar'}, method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.json())\n *     }\n */\nexport function verifiedFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  }\n\n  const body = init?.body ? JSON.stringify(init.body) : undefined\n\n  return verifiedFetch(path, {...init, body, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetch(path, {...init, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetchJSON(path, {...init, headers})\n}\n","import type {ChildRoute, LoaderResult, RouteRegistration, TransitionType} from './app-routing-types'\nimport type React from 'react'\nimport type {Location} from '@remix-run/router'\n\nexport interface JsonRouteProps {\n  path: string\n  Component: React.ComponentType\n  transitionType?: TransitionType\n  shouldNavigateOnError?: boolean\n  children?: ChildRoute[]\n}\n/**\n * A utility for building a route registration for a route that consumes a JSON object (either via embedding in a\n * script tag or via a JSON fetch on React soft navigations).\n */\nexport function jsonRoute<TRouteData, TEmbeddedData>({\n  path,\n  Component,\n  /**\n   * Some routes want to handle their own errors and not just show a generic error page. In this case,\n   * the error is just handled like any other payload for the route.\n   * NOTE: We might consider replacing the shouldNavigateOnError flag with a parallel implementation to jsonRoute.\n   */\n  shouldNavigateOnError,\n  transitionType,\n  children,\n}: JsonRouteProps): RouteRegistration<TRouteData, TEmbeddedData> {\n  async function coreLoader({location}: {location: Location}): Promise<LoaderResult<TRouteData>> {\n    let response: Response\n    try {\n      const fetchPath = `${location.pathname}${location.search}`\n      response = await window.fetch(fetchPath, {\n        headers: {\n          Accept: 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-GitHub-Target': 'dotcom',\n          'X-React-Router': 'json',\n        },\n      })\n    } catch (error) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'fetchError'},\n      }\n    }\n    if (response.redirected) {\n      return {\n        type: 'redirect',\n        url: response.url,\n      }\n    } else if (!response.ok) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'httpError', httpStatus: response.status},\n      }\n    } else {\n      try {\n        const responseJson = await response.json()\n        return {\n          type: 'loaded',\n          data: responseJson,\n          title: responseJson.title,\n        }\n      } catch (error) {\n        return {\n          type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n          error: {type: 'badResponseError'},\n        }\n      }\n    }\n  }\n\n  function loadFromEmbeddedData({embeddedData}: {embeddedData: TEmbeddedData}): {data: TRouteData; title: string} {\n    const data = embeddedData as unknown as TRouteData & {title: string}\n    return {data, title: data.title}\n  }\n\n  return {\n    path,\n    // TODO: consider wrapping Component with a component that passes payload as a prop — ideally as part of migrating\n    // away from useRoutePayload.\n    Component,\n    coreLoader,\n    loadFromEmbeddedData,\n    transitionType,\n    children,\n  }\n}\n","import {useContext, forwardRef, type ForwardedRef, type ReactElement} from 'react'\nimport {\n  Link as RouterLink,\n  NavLink as RouterNavLink,\n  type LinkProps,\n  type NavLinkProps,\n  resolvePath,\n  matchRoutes,\n} from 'react-router-dom'\nimport {AppContext} from './app-context'\nimport {ssrSafeLocation} from '@github-ui/ssr-utils'\nimport {PREVENT_AUTOFOCUS_KEY} from './prevent-autofocus'\n\ntype PreventAutofocusProp = {preventAutofocus?: boolean}\n\nexport const Link = forwardRef(\n  (\n    {to, reloadDocument, preventAutofocus, ...props}: LinkProps & PreventAutofocusProp,\n    ref: ForwardedRef<HTMLAnchorElement>,\n  ): ReactElement => {\n    const {routes} = useContext(AppContext)\n    const pathname = resolvePath(to, ssrSafeLocation.pathname).pathname\n    reloadDocument = reloadDocument ?? !matchRoutes(routes, pathname)\n    return (\n      <RouterLink\n        to={to}\n        {...props}\n        state={\n          preventAutofocus\n            ? {\n                [PREVENT_AUTOFOCUS_KEY]: true,\n                ...props.state,\n              }\n            : props.state\n        }\n        reloadDocument={reloadDocument}\n        ref={ref}\n      />\n    )\n  },\n)\n\nLink.displayName = 'Link'\n\nexport const NavLink = forwardRef(function NavLink(\n  {to, reloadDocument, preventAutofocus, ...props}: NavLinkProps & PreventAutofocusProp,\n  ref: React.ForwardedRef<HTMLAnchorElement>,\n): React.ReactElement {\n  const {routes} = useContext(AppContext)\n  const pathname = resolvePath(to, ssrSafeLocation.pathname).pathname\n  reloadDocument = reloadDocument ?? !matchRoutes(routes, pathname)\n  return (\n    <RouterNavLink\n      to={to}\n      {...props}\n      state={\n        preventAutofocus\n          ? {\n              [PREVENT_AUTOFOCUS_KEY]: true,\n              ...props.state,\n            }\n          : props.state\n      }\n      reloadDocument={reloadDocument}\n      ref={ref}\n    />\n  )\n})\n\ntry{ NavLink.displayName ||= 'NavLink' } catch {}"],"names":["Table","props","Box","sx","display","width","flexDirection","borderColor","borderWidth","borderStyle","borderRadius","children","displayName","Header","backgroundColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomWidth","borderBottomStyle","Heading","as","justifyContent","fontSize","mb","pl","py","Row","mx","separator","div","className","id","labelId","title","Text","color","m","subtitle","action","gap","alignItems","mt","MultipleSelect","onSaveCallback","selectedListOptions","selectedListVariants","optionKeys","Object","keys","listOptions","variantKeys","listVariants","selectedOptions","setSelectedOptionsState","useState","selectedVariants","setSelectedVariantsState","useEffect","onCancel","useCallback","onSave","onSelect","value","list","includes","filter","f","sort","onSelectOption","option","onSelectVariant","length","variant","renderSentence","array","item","join","SelectPanel","onSubmit","height","Button","size","renderSelected","defaultMenuButtonOption","renderedOptions","map","menuButtonOptions","prefix","menuButtonPrefix","span","renderedVariants","menuButtonVariants","ActionList","index","Item","selected","Divider","selectionVariant","p","role","Footer","defaultOption","defaultPrefix","digestOptions","none","weekly","daily","watchingDropdownOptions","web","email","watchingDisplayOptions","actionsDropdownOptions","continuousIntegrationWeb","continuousIntegrationEmail","actionsDisplayOptions","actionsDropdownVariants","continuousIntegrationFailuresOnly","actionsDisplayVariants","vulnerabilityDropdownOptions","vulnerabilityWeb","vulnerabilityEmail","vulnerabilityCli","vulnerabilityDisplayOptions","emailNotificationPreferenceDropdownOptions","pullRequestReview","pullRequestPush","commentEmail","ownViaEmail","emailNotificationPreferenceDisplayOptions","getSelectedOptionsAndVariants","options","variants","key","push","State","status","ref","React","isDisplayed","setDisplayed","succeeded","timeoutId","setTimeout","clearTimeout","current","announceFromElement","assertive","Octicon","icon","AlertIcon","verticalAlign","marginRight","Spinner","CheckIcon","fontWeight","Sections","SavingStatus","watchingRow","participatingRow","emailNotificationPreferencesRow","ignoredRow","EmailPreferencesSelect","MultiSelect","Select","WatchingSettings","watchingDescription","Link","inline","href","watchingUrl","ignoredDescription","emailNotificationPreferences","subscribedSettings","setSubscribedSettings","participatingSettings","setParticipatingSettings","selectedEmailPreferenceOptions","selectedEmailDeliveryPreferences","setSelectedEmailDeliveryPreferences","saveSetting","setting","formData","FormData","append","saveData","Watching","style","renderState","onSaveSelectedOptions","SingleSelect","onChange","optionOverride","disabled","open","rest","selectedOption","setSelected","indexOf","idx","optionList","ActionMenu","Overlay","ToggleBox","checked","setChecked","onToggle","generatedId","useId","flexBasis","flexGrow","ToggleSwitch","aria-labelledby","statusLabelPosition","mr","onClick","actionsRow","dependabotAlertsRow","emailWeeklyDigestRow","pt","deployKeyAlertRow","ActionsSelect","continuousIntegrationSelectedOptions","setContinuousIntegrationSelectedOptions","continuousIntegrationSelectedVariants","setContinuousIntegrationSelectedVariants","onSaveSelectedVariants","newSelectedVariants","set","System","VulnerabilitySelect","vulnerabilitySelectedOptions","setVulnerabilitySelectedOptions","SystemSettings","actionsDesciption","actionsUrl","dependabotDesciption","dependabotHelpUrl","deployKeyToggleLabelId","continuousIntegration","vulnerability","values","vulnerabilitySubscription","data","deployKeyAlert","NotificationsSettings","toggleStyle","isEmailReadonly","flexWrap","emails","defaultEmail","Notifications","PrimerLink","to","textDecoration","gridTemplateColumns","autoSubscribeRepositories","autoSubscribeTeams","request","response","verifiedFetch","url","method","body","ok","error","updateSettings","updateOrgNotificationPrefs","login","clearOrgNotificationPrefs","res","verifiedFetchJSON","IndexPage","notifiableEmails","orgDeployKeySettings","global","address","readonly","useRoutePayload","savingStatus","setSavingStatus","IDLE","savingSection","setSavingSection","section","LOADING","SUCCESS","ERROR","pb","data-hpc","DRAFT_KEY","RouteActions","OrganizationSelect","orgLogin","organizations","selectedOrgLogin","setSelectedOrgLogin","isOpen","setOpen","setFilter","items","org","leadingVisual","img","src","avatarUrl","alt","text","paddingLeft","filteredItems","toLowerCase","selectCallback","param","undefined","selectedItem","selectedItemInputs","Array","isArray","onFilter","onOpen","renderAnchor","anchorProps","trailingVisual","TriangleDownIcon","placeholderText","find","onSelectedChange","onOpenChange","onFilterChange","overlayProps","CustomRouteRow","organizationLogin","organization","organizationRecords","isEditing","isEditDisabled","stateStatus","onDelete","onEdit","readOnly","setReadOnly","hasEdited","setHasEdited","actionMenuRef","useRef","selectEmailRef","selectedOrganization","setSelectedOrganization","isOrgReadOnly","selectedEmail","setSelectedEmail","isValid","cancelCallback","saveCallback","editCallback","deleteCallback","focus","overflow","minWidth","whiteSpace","textOverflow","pr","px","ArrowRightIcon","FormControl","Label","visuallyHidden","placeholder","defaultValue","e","target","notifiableEmailsForUser","notifiableEmail","data-testid","marginLeft","anchorRef","Anchor","IconButton","unsafeDisableTooltip","KebabHorizontalIcon","aria-label","LeadingVisual","PencilIcon","TrashIcon","CustomRouteSettings","payload","verificationEnabled","globalEmailAddress","addNewRouteButton","initialState","useMemo","Map","organizationMap","stateMap","dispatch","useReducer","state","newState","entries","type","up","oldRowState","get","DELETE","delete","UPDATE","statusLogin","setStatusLogin","editingLogin","setEditingLogin","isEditingNewRoute","setIsEditingNewRoute","clearStatus","finishEditing","orderedLogins","from","selectableOrganizations","addCallback","strong","small","ml","borderTopStyle","record","CustomRoutesPage","routePayload","registerReactAppFactory","routes","jsonRoute","path","Component","init","assertRelativePathOrSameOrigin","URL","window","location","origin","headers","fetch","Accept","JSON","stringify","reactFetch","reactFetchJSON","shouldNavigateOnError","transitionType","coreLoader","fetchPath","pathname","search","redirected","httpStatus","responseJson","json","loadFromEmbeddedData","embeddedData","forwardRef","reloadDocument","preventAutofocus","useContext","AppContext","resolvePath","ssrSafeLocation","matchRoutes","RouterLink","PREVENT_AUTOFOCUS_KEY","NavLink","RouterNavLink"],"sourceRoot":""}
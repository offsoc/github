# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `DiscussionEvent`.
# Please instead update this file by running `bin/tapioca dsl DiscussionEvent`.

class DiscussionEvent
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def event_types; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def state_reasons; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::DiscussionEvent).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::DiscussionEvent).void)
      ).returns(::DiscussionEvent)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::DiscussionEvent).void)
      ).returns(::DiscussionEvent)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::DiscussionEvent).void)
      ).returns(::DiscussionEvent)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::DiscussionEvent).void)
      ).returns(::DiscussionEvent)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::DiscussionEvent).void)
      ).returns(::DiscussionEvent)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::DiscussionEvent]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::DiscussionEvent)) }
    def fifth; end

    sig { returns(::DiscussionEvent) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::DiscussionEvent)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::DiscussionEvent) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::DiscussionEvent).void)
      ).returns(T.nilable(T::Enumerator[::DiscussionEvent]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::DiscussionEvent]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::DiscussionEvent]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::DiscussionEvent).void)
      ).returns(::DiscussionEvent)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::DiscussionEvent).void)
      ).returns(::DiscussionEvent)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::DiscussionEvent).void)
      ).returns(::DiscussionEvent)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::DiscussionEvent)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::DiscussionEvent) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::DiscussionEvent) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::DiscussionEvent) }
    def first!; end

    sig { returns(T.nilable(::DiscussionEvent)) }
    def forty_two; end

    sig { returns(::DiscussionEvent) }
    def forty_two!; end

    sig { returns(T.nilable(::DiscussionEvent)) }
    def fourth; end

    sig { returns(::DiscussionEvent) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::DiscussionEvent) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::DiscussionEvent).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::DiscussionEvent).void)
      ).returns(::DiscussionEvent)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::DiscussionEvent).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::DiscussionEvent).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::DiscussionEvent)) }
    def second; end

    sig { returns(::DiscussionEvent) }
    def second!; end

    sig { returns(T.nilable(::DiscussionEvent)) }
    def second_to_last; end

    sig { returns(::DiscussionEvent) }
    def second_to_last!; end

    sig { returns(::DiscussionEvent) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::DiscussionEvent) }
    def take!; end

    sig { returns(T.nilable(::DiscussionEvent)) }
    def third; end

    sig { returns(::DiscussionEvent) }
    def third!; end

    sig { returns(T.nilable(::DiscussionEvent)) }
    def third_to_last; end

    sig { returns(::DiscussionEvent) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def answer_marked!; end

    sig { returns(T::Boolean) }
    def answer_marked?; end

    sig { void }
    def answer_unmarked!; end

    sig { returns(T::Boolean) }
    def answer_unmarked?; end

    sig { void }
    def closed!; end

    sig { returns(T::Boolean) }
    def closed?; end

    sig { void }
    def created_issue!; end

    sig { returns(T::Boolean) }
    def created_issue?; end

    sig { void }
    def locked!; end

    sig { returns(T::Boolean) }
    def locked?; end

    sig { void }
    def reopened!; end

    sig { returns(T::Boolean) }
    def reopened?; end

    sig { void }
    def state_reason_duplicate!; end

    sig { returns(T::Boolean) }
    def state_reason_duplicate?; end

    sig { void }
    def state_reason_outdated!; end

    sig { returns(T::Boolean) }
    def state_reason_outdated?; end

    sig { void }
    def state_reason_reopened!; end

    sig { returns(T::Boolean) }
    def state_reason_reopened?; end

    sig { void }
    def state_reason_resolved!; end

    sig { returns(T::Boolean) }
    def state_reason_resolved?; end

    sig { void }
    def transferred!; end

    sig { returns(T::Boolean) }
    def transferred?; end

    sig { void }
    def unlocked!; end

    sig { returns(T::Boolean) }
    def unlocked?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::User)) }
    def actor; end

    sig { params(value: T.nilable(::User)).void }
    def actor=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_actor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionComment) }
    def build_comment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Discussion) }
    def build_discussion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionTransfer) }
    def build_discussion_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Issue) }
    def build_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def build_performed_via_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { returns(T.nilable(::DiscussionComment)) }
    def comment; end

    sig { params(value: T.nilable(::DiscussionComment)).void }
    def comment=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_actor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_actor!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionComment) }
    def create_comment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionComment) }
    def create_comment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Discussion) }
    def create_discussion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Discussion) }
    def create_discussion!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionTransfer) }
    def create_discussion_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionTransfer) }
    def create_discussion_transfer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Issue) }
    def create_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Issue) }
    def create_issue!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def create_performed_via_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def create_performed_via_integration!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { returns(T.nilable(::Discussion)) }
    def discussion; end

    sig { params(value: T.nilable(::Discussion)).void }
    def discussion=(value); end

    sig { returns(T.nilable(::DiscussionTransfer)) }
    def discussion_transfer; end

    sig { params(value: T.nilable(::DiscussionTransfer)).void }
    def discussion_transfer=(value); end

    sig { returns(T.nilable(::Issue)) }
    def issue; end

    sig { params(value: T.nilable(::Issue)).void }
    def issue=(value); end

    sig { returns(T.nilable(::Integration)) }
    def performed_via_integration; end

    sig { params(value: T.nilable(::Integration)).void }
    def performed_via_integration=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_actor; end

    sig { returns(T.nilable(::DiscussionComment)) }
    def reload_comment; end

    sig { returns(T.nilable(::Discussion)) }
    def reload_discussion; end

    sig { returns(T.nilable(::DiscussionTransfer)) }
    def reload_discussion_transfer; end

    sig { returns(T.nilable(::Issue)) }
    def reload_issue; end

    sig { returns(T.nilable(::Integration)) }
    def reload_performed_via_integration; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def answer_marked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def answer_unmarked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_actor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_comment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_comment_authored_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_discussion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def locked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_answer_marked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_answer_unmarked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_created_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_locked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_state_reason_duplicate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_state_reason_outdated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_state_reason_resolved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_transferred(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unlocked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def state_reason_duplicate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def state_reason_outdated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def state_reason_resolved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def still_marked_as_answer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def transferred(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unlocked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_actor; end

    sig { returns(Promise[T.untyped]) }
    def async_comment; end

    sig { returns(Promise[T.untyped]) }
    def async_discussion; end

    sig { returns(Promise[T.untyped]) }
    def async_discussion_transfer; end

    sig { returns(Promise[T.untyped]) }
    def async_issue; end

    sig { returns(Promise[T.untyped]) }
    def async_performed_via_integration; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def actor_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def actor_id=(value); end

    sig { returns(T::Boolean) }
    def actor_id?; end

    sig { returns(T.nilable(::Integer)) }
    def actor_id_before_last_save; end

    sig { returns(T.untyped) }
    def actor_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def actor_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def actor_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def actor_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def actor_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def actor_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def actor_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def actor_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def actor_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def actor_id_was; end

    sig { void }
    def actor_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def comment_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def comment_id=(value); end

    sig { returns(T::Boolean) }
    def comment_id?; end

    sig { returns(T.nilable(::Integer)) }
    def comment_id_before_last_save; end

    sig { returns(T.untyped) }
    def comment_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def comment_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def comment_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def comment_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def comment_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def comment_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def comment_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def comment_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def comment_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def comment_id_was; end

    sig { void }
    def comment_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def discussion_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def discussion_id=(value); end

    sig { returns(T::Boolean) }
    def discussion_id?; end

    sig { returns(T.nilable(::Integer)) }
    def discussion_id_before_last_save; end

    sig { returns(T.untyped) }
    def discussion_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def discussion_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def discussion_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def discussion_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def discussion_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def discussion_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def discussion_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def discussion_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def discussion_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def discussion_id_was; end

    sig { void }
    def discussion_id_will_change!; end

    sig { returns(::String) }
    def event_type; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def event_type=(value); end

    sig { returns(T::Boolean) }
    def event_type?; end

    sig { returns(T.nilable(::String)) }
    def event_type_before_last_save; end

    sig { returns(T.untyped) }
    def event_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def event_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def event_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def event_type_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def event_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def event_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def event_type_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def event_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def event_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def event_type_was; end

    sig { void }
    def event_type_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def issue_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def issue_id=(value); end

    sig { returns(T::Boolean) }
    def issue_id?; end

    sig { returns(T.nilable(::Integer)) }
    def issue_id_before_last_save; end

    sig { returns(T.untyped) }
    def issue_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def issue_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def issue_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def issue_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def issue_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def issue_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def issue_id_was; end

    sig { void }
    def issue_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def issue_repository_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def issue_repository_id=(value); end

    sig { returns(T::Boolean) }
    def issue_repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def issue_repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def issue_repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def issue_repository_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_repository_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_repository_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def issue_repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def issue_repository_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_repository_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def issue_repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def issue_repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def issue_repository_id_was; end

    sig { void }
    def issue_repository_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def performed_by_integration_id=(value); end

    sig { returns(T::Boolean) }
    def performed_by_integration_id?; end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id_before_last_save; end

    sig { returns(T.untyped) }
    def performed_by_integration_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def performed_by_integration_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def performed_by_integration_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def performed_by_integration_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def performed_by_integration_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def performed_by_integration_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def performed_by_integration_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id_was; end

    sig { void }
    def performed_by_integration_id_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_actor_id!; end

    sig { void }
    def restore_comment_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_discussion_id!; end

    sig { void }
    def restore_event_type!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_issue_id!; end

    sig { void }
    def restore_issue_repository_id!; end

    sig { void }
    def restore_performed_by_integration_id!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_state_reason!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_actor_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_actor_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_comment_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_comment_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_discussion_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_discussion_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_event_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_event_type?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_issue_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_issue_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_issue_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_issue_repository_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_performed_by_integration_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_performed_by_integration_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_state_reason?; end

    sig { returns(T.nilable(::String)) }
    def state_reason; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def state_reason=(value); end

    sig { returns(T::Boolean) }
    def state_reason?; end

    sig { returns(T.nilable(::String)) }
    def state_reason_before_last_save; end

    sig { returns(T.untyped) }
    def state_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_reason_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_reason_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def state_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_reason_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def state_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_reason_was; end

    sig { void }
    def state_reason_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_actor_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_comment_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_discussion_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_event_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_issue_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_issue_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_performed_by_integration_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state_reason?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def answer_marked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def answer_unmarked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_actor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_comment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_comment_authored_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_discussion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def locked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_answer_marked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_answer_unmarked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_created_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_locked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_state_reason_duplicate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_state_reason_outdated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_state_reason_resolved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_transferred(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unlocked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def state_reason_duplicate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def state_reason_outdated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def state_reason_resolved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def still_marked_as_answer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def transferred(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unlocked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::DiscussionEvent } }

    sig { returns(T::Array[::DiscussionEvent]) }
    def to_a; end

    sig { returns(T::Array[::DiscussionEvent]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::DiscussionEvent } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::DiscussionEvent } }

    sig do
      params(
        records: T.any(::DiscussionEvent, T::Enumerable[T.any(::DiscussionEvent, T::Enumerable[::DiscussionEvent])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::DiscussionEvent, T::Enumerable[T.any(::DiscussionEvent, T::Enumerable[::DiscussionEvent])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::DiscussionEvent, T::Enumerable[T.any(::DiscussionEvent, T::Enumerable[::DiscussionEvent])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::DiscussionEvent]) }
    def load_target; end

    sig do
      params(
        records: T.any(::DiscussionEvent, T::Enumerable[T.any(::DiscussionEvent, T::Enumerable[::DiscussionEvent])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::DiscussionEvent, T::Enumerable[T.any(::DiscussionEvent, T::Enumerable[::DiscussionEvent])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::DiscussionEvent, T::Enumerable[T.any(::DiscussionEvent, T::Enumerable[::DiscussionEvent])])
      ).returns(T::Array[::DiscussionEvent])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::DiscussionEvent]) }
    def target; end

    sig { returns(T::Array[::DiscussionEvent]) }
    def to_a; end

    sig { returns(T::Array[::DiscussionEvent]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::DiscussionEvent } }

    sig { returns(T::Array[::DiscussionEvent]) }
    def to_a; end

    sig { returns(T::Array[::DiscussionEvent]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::DiscussionEvent } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

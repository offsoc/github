# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::Types::V1::RequestContext`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::Types::V1::RequestContext`.

class GitHub::Spokes::Proto::Types::V1::RequestContext
  sig do
    params(
      push_state: T.nilable(String),
      quality_of_service: T.nilable(T.any(Symbol, Integer)),
      read_after_write: T.nilable(T::Boolean),
      read_uncommitted: T.nilable(T::Boolean),
      real_ip: T.nilable(String),
      reduce_cost_for_spokes_api: T.nilable(T::Boolean),
      user_id: T.nilable(Integer)
    ).void
  end
  def initialize(push_state: nil, quality_of_service: nil, read_after_write: nil, read_uncommitted: nil, real_ip: nil, reduce_cost_for_spokes_api: nil, user_id: nil); end

  sig { void }
  def clear_push_state; end

  sig { void }
  def clear_quality_of_service; end

  sig { void }
  def clear_read_after_write; end

  sig { void }
  def clear_read_uncommitted; end

  sig { void }
  def clear_real_ip; end

  sig { void }
  def clear_reduce_cost_for_spokes_api; end

  sig { void }
  def clear_user_id; end

  sig { returns(String) }
  def push_state; end

  sig { params(value: String).void }
  def push_state=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def quality_of_service; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def quality_of_service=(value); end

  sig { returns(T::Boolean) }
  def read_after_write; end

  sig { params(value: T::Boolean).void }
  def read_after_write=(value); end

  sig { returns(T::Boolean) }
  def read_uncommitted; end

  sig { params(value: T::Boolean).void }
  def read_uncommitted=(value); end

  sig { returns(String) }
  def real_ip; end

  sig { params(value: String).void }
  def real_ip=(value); end

  sig { returns(T::Boolean) }
  def reduce_cost_for_spokes_api; end

  sig { params(value: T::Boolean).void }
  def reduce_cost_for_spokes_api=(value); end

  sig { returns(Integer) }
  def user_id; end

  sig { params(value: Integer).void }
  def user_id=(value); end
end

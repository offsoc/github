# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Sponsors::V1::BulkSponsorshipsImport::ErrorCountDetails`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Sponsors::V1::BulkSponsorshipsImport::ErrorCountDetails`.

class Hydro::Schemas::Github::Sponsors::V1::BulkSponsorshipsImport::ErrorCountDetails
  sig do
    params(
      duplicate_error_count: T.nilable(Integer),
      locked_sponsorship_error_count: T.nilable(Integer),
      login_missing_error_count: T.nilable(Integer),
      max_amount_error_count: T.nilable(Integer),
      min_amount_error_count: T.nilable(Integer),
      non_sponsorable_error_count: T.nilable(Integer),
      recurring_sponsorship_exists_error_count: T.nilable(Integer),
      self_dealing_error_count: T.nilable(Integer)
    ).void
  end
  def initialize(duplicate_error_count: nil, locked_sponsorship_error_count: nil, login_missing_error_count: nil, max_amount_error_count: nil, min_amount_error_count: nil, non_sponsorable_error_count: nil, recurring_sponsorship_exists_error_count: nil, self_dealing_error_count: nil); end

  sig { void }
  def clear_duplicate_error_count; end

  sig { void }
  def clear_locked_sponsorship_error_count; end

  sig { void }
  def clear_login_missing_error_count; end

  sig { void }
  def clear_max_amount_error_count; end

  sig { void }
  def clear_min_amount_error_count; end

  sig { void }
  def clear_non_sponsorable_error_count; end

  sig { void }
  def clear_recurring_sponsorship_exists_error_count; end

  sig { void }
  def clear_self_dealing_error_count; end

  sig { returns(Integer) }
  def duplicate_error_count; end

  sig { params(value: Integer).void }
  def duplicate_error_count=(value); end

  sig { returns(Integer) }
  def locked_sponsorship_error_count; end

  sig { params(value: Integer).void }
  def locked_sponsorship_error_count=(value); end

  sig { returns(Integer) }
  def login_missing_error_count; end

  sig { params(value: Integer).void }
  def login_missing_error_count=(value); end

  sig { returns(Integer) }
  def max_amount_error_count; end

  sig { params(value: Integer).void }
  def max_amount_error_count=(value); end

  sig { returns(Integer) }
  def min_amount_error_count; end

  sig { params(value: Integer).void }
  def min_amount_error_count=(value); end

  sig { returns(Integer) }
  def non_sponsorable_error_count; end

  sig { params(value: Integer).void }
  def non_sponsorable_error_count=(value); end

  sig { returns(Integer) }
  def recurring_sponsorship_exists_error_count; end

  sig { params(value: Integer).void }
  def recurring_sponsorship_exists_error_count=(value); end

  sig { returns(Integer) }
  def self_dealing_error_count; end

  sig { params(value: Integer).void }
  def self_dealing_error_count=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `github-telemetry` gem.
# Please instead update this file by running `bin/tapioca gem github-telemetry`.

# source://github-telemetry//lib/github/telemetry/railtie.rb#3
module GitHub
  extend ::GitHub::Config::FirstPartyApps
  extend ::GitHub::Config::Metadata
  extend ::GitHub::Config::Datacenter
  extend ::GitHub::Config::ProximaSyncedThirdPartyApps
  extend ::GitHub::Config::Fastly
  extend ::GitHub::Config::Importers
  extend ::GitHub::Config::Kredz
  extend ::GitHub::Config::Varz
  extend ::GitHub::Config::Launch
  extend ::GitHub::Config::LegacyTextileFormatting
  extend ::GitHub::Config::Dreamlifter
  extend ::GitHub::Config::Migration
  extend ::GitHub::Config::Render
  extend ::GitHub::Config::Smtp
  extend ::GitHub::Config::Spokes
  extend ::GitHub::Config::Spokesd
  extend ::GitHub::Config::SupportLink
  extend ::GitHub::Config::Pages
  extend ::GitHub::Config::RequestLimits
  extend ::GitHub::Config::RateLimits
  extend ::GitHub::Config::OpenTelemetry
  extend ::GitHub::Config::HydroConfig
  extend ::GitHub::Config::Redis
  extend ::GitHub::Config::GroupSyncer
  extend ::GitHub::Config::Dependabot
  extend ::GitHub::Config::Twirp
  extend ::GitHub::Config::DriftwoodConfig
  extend ::GitHub::Config::PullRequests
  extend ::GitHub::Config::Repositories
  extend ::GitHub::Config::S3
  extend ::GitHub::Config::Registry
  extend ::GitHub::Config::SystemRoles
  extend ::GitHub::Config::Elasticsearch
  extend ::GitHub::Config::OpenApi
  extend ::GitHub::Config::AuditLogCuratorConfig
  extend ::GitHub::Config::AuditLog
  extend ::GitHub::Config::Billing
  extend ::GitHub::Config::AfterResponse
  extend ::GitHub::Config::Features
  extend ::GitHub::Config::ApiVersioning
  extend ::GitHub::Config::InsightsConfig
  extend ::GitHub::Config::HttpFluentbitConfig
  extend ::GitHub::Config::CodeScanning
  extend ::GitHub::Config::CodeQLVariantAnalysis
  extend ::GitHub::Config::OctoshiftStorage
  extend ::GitHub::Config::OIDCProviders
  extend ::GitHub::Config::BingIndexnow
  extend ::GitHub::Config::Chatops
  extend ::GitHub::Config::IssuesGraphApiConfig
  extend ::GitHub::Config::TimelineApiConfig
  extend ::GitHub::Config::Memex
  extend ::GitHub::Config::MergeQueue
  extend ::GitHub::Config::MergeCommitUpdateRef
  extend ::GitHub::Config::Codespaces
  extend ::GitHub::Config::Copilot
  extend ::GitHub::Config::Azure
  extend ::GitHub::Config::MultiTenantEnterprise
  extend ::GitHub::Config::NotebooksConfig
  extend ::GitHub::Config::ViewscreenConfig
  extend ::GitHub::Config::Freno
  extend ::GitHub::Config::ActionsResults
  extend ::GitHub::Config::Conduit
  extend ::GitHub::Config::ActionsBroker
  extend ::GitHub::Config::ActionsBrokerWorker
  extend ::GitHub::Config::ActionsRunnerAdmin
  extend ::GitHub::Config::ActionsRunService
  extend ::GitHub::Config::ActionsScaleUnitDomains
  extend ::GitHub::Config::Proxima
  extend ::GitHub::Config::ProximaLoginExperience
  extend ::GitHub::Config::GitSrcMigrator
  extend ::GitHub::Config::Projects
  extend ::GitHub::Config::EnterpriseAccounts
  extend ::GitHub::Config::Orca
  extend ::GitHub::Config::Orcid
  extend ::GitHub::Config::Neutron
  extend ::GitHub::Config::Context
  extend ::GitHub::Config
  extend ::GitHub::Version
  extend ::GitHub::Config::Stats

  class << self
    def after_response_middleware_enabled; end
    def after_response_middleware_enabled=(_arg0); end
    def after_response_middleware_enabled?; end
    def after_response_raise_on_exception; end
    def after_response_raise_on_exception=(_arg0); end
    def after_response_raise_on_exception?; end
    def robot?(useragent); end
  end
end

module GitHub::AppPartitioning; end

module GitHub::Authentication
  # source://github-telemetry//lib/github/telemetry/logs/loggable.rb#41
  def logger; end

  # source://github-telemetry//lib/github/telemetry/logs/loggable.rb#46
  def logger=(logger); end

  class << self
    # source://github-telemetry//lib/github/telemetry/logs/loggable.rb#31
    def logger; end

    # source://github-telemetry//lib/github/telemetry/logs/loggable.rb#36
    def logger=(logger); end
  end
end

class GitHub::Authentication::LDAP < ::GitHub::Authentication::Default
  def admin_membership_validator; end
  def admin_membership_validator=(_arg0); end
  def authentication_group_entries; end
  def authentication_groups; end
  def builtin_auth_fallback?; end
  def collision_with_existing_user?(uid, entry, user); end
  def create_emails(user, emails_info); end
  def create_gpg_keys(user, user_info); end
  def create_profile(user, user_info); end
  def create_public_keys(user, user_info); end
  def create_user(uid, entry); end
  def default_config; end
  def emails_managed_externally?; end
  def external?; end
  def external_mapping(user); end
  def external_user?(user_or_login); end
  def find_ldap_mapping_by_login(login); end
  def find_user(uid, entry); end
  def find_user_by_ldap_fallback_uid(uid); end
  def gpg_keys_managed_externally?; end
  def is_admin?(entry); end
  def ldap_admin_group; end
  def ldap_authenticate(login, password); end
  def ldap_authenticate_by_fallback_uid(login, password, attempted: T.unsafe(nil)); end
  def ldap_authenticate_by_ldap_mapping(entry, login, password, attempted: T.unsafe(nil)); end
  def ldap_authenticate_by_login(login, password, fallback: T.unsafe(nil), attempted: T.unsafe(nil)); end
  def ldap_authorization(entry); end
  def ldap_domains; end
  def ldap_mapping_present?(dn); end
  def ldap_password_authenticate(login, password); end
  def ldap_profile; end
  def ldap_tls_options; end

  # source://github-telemetry//lib/github/telemetry/logs/loggable.rb#41
  def logger; end

  # source://github-telemetry//lib/github/telemetry/logs/loggable.rb#46
  def logger=(logger); end

  def membership_validator; end
  def membership_validator=(_arg0); end
  def name; end
  def password_authenticate(login, password); end
  def profile_info(entry, field); end
  def profile_name_managed_externally?; end
  def query_attributes; end
  def reconcile_access(user, ldap_authorization, reactivate_suspended_user:); end
  def reconcile_admin(user, entry); end
  def reconcile_fallback_uid(user, entry); end
  def signup_enabled?; end
  def ssh_keys_managed_externally?; end
  def strategy; end
  def two_factor_authentication_allowed?(user); end
  def two_factor_authentication_enabled?; end
  def user_account_control(entry); end
  def user_account_control_authorized?(user_account_control); end
  def user_change_email_enabled?(user); end
  def user_change_gpg_key_enabled?(user); end
  def user_change_profile_name_enabled?(user); end
  def user_change_ssh_key_enabled?(user); end
  def user_renaming_enabled?(user); end
  def valid_authentication?(base_name, domain, entry, login, password); end
  def valid_authentication_bind?(dn, password); end
  def valid_membership?(entry); end
  def validate_membership?; end
  def with_ldap_domains; end

  class << self
    # source://github-telemetry//lib/github/telemetry/logs/loggable.rb#31
    def logger; end

    # source://github-telemetry//lib/github/telemetry/logs/loggable.rb#36
    def logger=(logger); end
  end
end

module GitHub::CSP; end
module GitHub::DataStructures; end
module GitHub::SCIM; end

# Top module for this gem
#
# source://github-telemetry//lib/github/telemetry/railtie.rb#4
module GitHub::Telemetry
  class << self
    # Provides an opinionated way to configure the global OpenTelemetry instance.
    # Notably, we apply the following defaults:
    #
    # - We configure a {https://open-telemetry.github.io/opentelemetry-ruby/opentelemetry-sdk/latest/OpenTelemetry/SDK/Trace/Export/BatchSpanProcessor.html BatchSpanProcessor} by default.
    # - We set span attribute/event/link limits to 256 (rather than the default of 128) unless you have specified these limits in the `ENV`.
    # - We configure the tracecontext (W3C trace context) in order to propagate traces.
    #
    # @example Basic configuration
    #   GitHub::Telemetry.configure
    #   # later on...
    #   GitHub::Telemetry.tracer.start_span
    # @example Further customization directly with OpenTelemetry
    #   GitHub::Telemetry.configure do |c|
    #   c.use_all # Instructing OpenTelemetry to use all available auto-instrumentation
    #   end
    # @example Disabling the span limit overrides
    #   # These variables can be found here:
    #   # https://open-telemetry.github.io/opentelemetry-ruby/opentelemetry-sdk/latest/OpenTelemetry/SDK/Trace/Config/SpanLimits.html#initialize-instance_method
    #   ENV["OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT"] = 128
    #   GitHub::Telemetry.configure(service_name: "my_service")
    # @param telemetry_config [GitHub::Telemetry::Config] An optional parameter of OTel SDK and Logger configurations.
    # @return [nil]
    # @yieldparam c [Object] An {https://open-telemetry.github.io/opentelemetry-ruby/opentelemetry-sdk/latest/OpenTelemetry/SDK/Configurator.html OpenTelemetry::Configurator}
    #   object, which can be used to further customize configuration.
    #
    # source://github-telemetry//lib/github/telemetry.rb#67
    def configure(telemetry_config = T.unsafe(nil)); end

    # @api private
    # @param statsd [Object] An optional instance/derived type of {https://github.com/Shopify/statsd-instrument/blob/master/lib/statsd/instrument/client.rb StatsD::Instrument::Client}
    #   or {https://github.com/DataDog/dogstatsd-ruby/blob/master/lib/datadog/statsd.rb Datadog::Statsd}
    #   If provided, the OpenTelemetry Exporters are initialized with a metrics reporter.
    # @return [OpenTelemetry::SDK::Trace::Export::MetricsReporter, nil] return a MetricsReporter or nil if the statsd library is not supported
    #
    # source://github-telemetry//lib/github/telemetry.rb#134
    def new_metrics_reporter(statsd); end

    # Used for tests
    #
    # @api private
    # @return [nil]
    #
    # source://github-telemetry//lib/github/telemetry.rb#161
    def reset_resources; end

    # Provides access to resource attributes.
    #
    # There are cases, e.g. logging, where the SDK is not initialized but the code needs access to at least the default resource attributes.
    #
    # @api private
    # @return OpenTelemetry::SDK::Resources::Resource attributes extracted from environment variables
    #
    # source://github-telemetry//lib/github/telemetry.rb#153
    def resources; end

    # EXPERIMENTAL: Attempts to gracefully flush and shutdown the underlying OpenTelemetry SDK
    #
    # @param timeout [optional Numeric] An optional timeout in seconds. Default is 5.
    # @return [nil]
    #
    # source://github-telemetry//lib/github/telemetry.rb#170
    def shutdown(timeout: T.unsafe(nil)); end

    # Returns an {https://open-telemetry.github.io/opentelemetry-ruby/opentelemetry-api/latest/OpenTelemetry/Trace/Tracer.html OpenTelemetry::Trace::Tracer} instance.
    #
    # @example Using the configured tracer
    #   GitHub::Telemetry.tracer("my_service").in_span("span_name") do |span|
    #   do_things
    #   end
    # @param name [String] If provided, the tracer returned will be configured with this name.
    #   If not provided, the tracer returned will be configured with the current global OpenTelemetry service.name.
    # @param version [String] If provided, the tracer returned will be configured with this version.
    #   If not provided, the tracer returned will be configured with the current global OpenTelemetry service.version.
    # @return [Object] An {https://open-telemetry.github.io/opentelemetry-ruby/opentelemetry-api/latest/OpenTelemetry/Trace/Tracer.html OpenTelemetry::Trace::Tracer} instance.
    #
    # source://github-telemetry//lib/github/telemetry.rb#119
    def tracer(name = T.unsafe(nil), version = T.unsafe(nil)); end

    private

    # source://github-telemetry//lib/github/telemetry.rb#200
    def apply_trace_config_overrides; end

    # source://github-telemetry//lib/github/telemetry.rb#230
    def enable_trace_correlation; end

    # source://github-telemetry//lib/github/telemetry.rb#218
    def new_exporter(reporter); end

    # source://github-telemetry//lib/github/telemetry.rb#226
    def new_span_processor(exporter, metrics_reporter: T.unsafe(nil)); end
  end
end

# Encapsulates configuration for the GitHub::Telemetry library.
# There are several options that can be configured, but the defaults should be sufficient for most use cases.
# All Boolean options default to `true`, and all other options default to `nil` or an empty Enumerable.
#
# @example Overriding the default configuration
#   config = GitHub::Telemetry::Config.new(
#   statsd: Datadog::Statsd.new('localhost', 8125),
#   exporter: OpenTelemetry::SDK::Trace::Export::InMemorySpanExporter.new(recording: true),
#   enable_span_event_log_exporter: false,
#   install_exit_handler: false
#   )
#   GitHub::Telemetry.configure(config)
# @example Disable ActiveJob log subscriber
#   # config/initializers/github_telemetry.rb
#   config.logs.active_job.enabled = false
class GitHub::Telemetry::Config
  # @return [Config] a new instance of Config
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#97
  def initialize(enable_span_event_log_exporter: T.unsafe(nil), enable_rack_github_request_id: T.unsafe(nil), instrumentation: T.unsafe(nil), logger: T.unsafe(nil), statsd: T.unsafe(nil), exporter: T.unsafe(nil), install_exit_handler: T.unsafe(nil)); end

  # @return [Boolean] Whether or not to enable the Rack middleware that sets the `X-GitHub-Request-Id` header.
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#95
  def enable_rack_github_request_id=(_arg0); end

  # @return [Boolean]
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#116
  def enable_rack_github_request_id?; end

  # @return [Boolean] Whether or not to enable the span event log exporter.
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#95
  def enable_span_event_log_exporter=(_arg0); end

  # @return [Boolean]
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#120
  def enable_span_event_log_exporter?; end

  # @return [OpenTelemetry::SDK::Trace::Export::SpanExporter] The exporter to use for spans. (Advanced configuration option)
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#93
  def exporter; end

  # @return [OpenTelemetry::SDK::Trace::Export::SpanExporter] The exporter to use for spans. (Advanced configuration option)
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#93
  def exporter=(_arg0); end

  # @return [Boolean] Whether or not to install an exit handler that will shutdown the Global Tracer Provider.
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#95
  def install_exit_handler=(_arg0); end

  # @return [Boolean]
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#124
  def install_exit_handler?; end

  # @return [Hash] A hash of instrumentation class names to configuration options defaults and any overrides.
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#93
  def instrumentation; end

  # @return [Hash] A hash of instrumentation class names to configuration options defaults and any overrides.
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#93
  def instrumentation=(_arg0); end

  # source://github-telemetry//lib/github/telemetry/config.rb#128
  def instrumentations_to_install; end

  # @return [SemanticLogger::Logger] The logger to use for SDK diagnostic ouput.
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#93
  def logger; end

  # @return [SemanticLogger::Logger] The logger to use for SDK diagnostic ouput.
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#93
  def logger=(_arg0); end

  # @return [GitHub::Telemetry::Config::Logs] The configuration for Rails log subscriber instrumentation.
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#94
  def logs; end

  # @return [Datadog::Statsd|Statsd::Instrument] The statsd client to use for metrics.
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#93
  def statsd; end

  # @return [Datadog::Statsd|Statsd::Instrument] The statsd client to use for metrics.
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#93
  def statsd=(_arg0); end
end

class GitHub::Telemetry::Config::Base
  # @return [Base] a new instance of Base
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#73
  def initialize(enabled: T.unsafe(nil)); end

  # Sets the attribute enabled
  #
  # @param value the value to set the attribute enabled to.
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#71
  def enabled=(_arg0); end

  # @return [Boolean]
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#77
  def enabled?; end
end

# source://github-telemetry//lib/github/telemetry/config.rb#39
GitHub::Telemetry::Config::INSTRUMENTATION_DEFAULTS = T.let(T.unsafe(nil), Hash)

# Encapsulates Rails log subscriber configurations
class GitHub::Telemetry::Config::Logs
  # @return [Logs] a new instance of Logs
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#88
  def initialize; end

  # @return [GitHub::Telemetry::Config::Base] The configuration for the ActiveJob log subscriber.
  #
  # source://github-telemetry//lib/github/telemetry/config.rb#86
  def active_job; end
end

class GitHub::Telemetry::Error < ::StandardError; end

# source://github-telemetry//lib/github/telemetry.rb#32
GitHub::Telemetry::HTTP_REQUEST_ID_HEADER = T.let(T.unsafe(nil), String)

# This module includes hacks for the monolith.
# Please don't use these in your app.
#
# source://github-telemetry//lib/github/telemetry/hacks.rb#7
module GitHub::Telemetry::Hacks
  private

  # This hack returns the "current" span from the context stack bound to a thread
  # It falls back to a backup span context in the case one does not exist.
  #
  # Please don't use this method.
  #
  # @param thread [Thread] the thread to get the current span from
  # @return [OpenTelemetry::Trace::Span] the current span
  #
  # source://github-telemetry//lib/github/telemetry/hacks.rb#17
  def current_span_from(thread); end

  class << self
    # This hack returns the "current" span from the context stack bound to a thread
    # It falls back to a backup span context in the case one does not exist.
    #
    # Please don't use this method.
    #
    # @param thread [Thread] the thread to get the current span from
    # @return [OpenTelemetry::Trace::Span] the current span
    #
    # source://github-telemetry//lib/github/telemetry/hacks.rb#17
    def current_span_from(thread); end
  end
end

# Namespace for custom logging
module GitHub::Telemetry::Logs
  private

  # source://github-telemetry//lib/github/telemetry/logs.rb#150
  def add_file_appender(file_name, formatter); end

  # Adds a syslog appender if one is not already configured
  #
  # @return [void]
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#131
  def add_syslog_appender; end

  # Disables logfmt formatted logs to stdout
  #
  # This is useful in cases where you are running an interactive REPL and do not want logs printed to screen
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#122
  def disable_logfmt; end

  # source://github-telemetry//lib/github/telemetry/logs.rb#167
  def enable; end

  # Conditionally replaces existing IO Appenders with a logfmt formatted appender
  #
  # @return [void]
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#108
  def enable_logfmt; end

  # Clears existing SemanticLogger appenders and adds the noop appender
  #
  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#290
  def enable_noop_appender; end

  # Switches semantic logger to using a synchronous appender
  #
  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#283
  def enable_sync_appender; end

  # source://github-telemetry//lib/github/telemetry/logs.rb#146
  def enable_trace_correlation; end

  # Set log destinations based on environment variables
  #
  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#227
  def initialize_log_destinations; end

  # Set log levels based on environment variables
  #
  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#219
  def initialize_log_levels; end

  # source://github-telemetry//lib/github/telemetry/logs.rb#57
  def level; end

  # source://github-telemetry//lib/github/telemetry/logs.rb#61
  def level=(log_level); end

  # source://github-telemetry//lib/github/telemetry/logs.rb#69
  def lib_level; end

  # source://github-telemetry//lib/github/telemetry/logs.rb#65
  def lib_level=(log_level); end

  # Logger lookup method for 3rd party libs
  #
  # &#9888; You must call `enable` before loading lib_loggers otherwise they will default to the `debug` levels.
  #
  # @param class [String|Class] used to create a named logger
  # @return SemanticLogger::Logger for the supplied class or class_name
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#47
  def lib_logger(klass, level: T.unsafe(nil)); end

  # Logs a message indicating that logging has already been enabled and cannot be re-enabled
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#252
  def log_already_enabled_message; end

  # Logs diagnostic info about the `Telemetry` configurations
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#236
  def log_diagnostic_info; end

  # Logger lookup method
  #
  # By default this method returns a global logger instance,
  # however if a `Class` parameter is provided this will create a new named logger instance.
  #
  # @param class [String|Class] used to create a named logger
  # @return SemanticLogger::Logger for the supplied class or class_name
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#33
  def logger(klass = T.unsafe(nil)); end

  # source://github-telemetry//lib/github/telemetry/logs.rb#97
  def noop_logging=(enable); end

  # source://github-telemetry//lib/github/telemetry/logs.rb#101
  def noop_logging?; end

  # Initialize a new null logger
  #
  # @return GitHub::Telemetry::Logs::NullLogger instance
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#53
  def null_logger; end

  # After forking an active process call SemanticLogger.reopen to re-open
  # any open file handles etc to resources.
  #
  # Delegates to SemanticLogger.reopen
  #
  # See [SematicLogger Docs on Forking](https://logger.rocketjob.io/forking.html)
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#204
  def reopen; end

  # Flushes and removes loaded appenders.
  # This is useful for testing
  #
  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#189
  def reset; end

  # Sets the default environment variables
  #
  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#211
  def set_default_env_settings; end

  # Prevents users from tweaking verbosity levels for logging backtraces
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#267
  def silence_global_backtraces; end

  # source://github-telemetry//lib/github/telemetry/logs.rb#73
  def stdout_logging=(enable); end

  # source://github-telemetry//lib/github/telemetry/logs.rb#77
  def stdout_logging?; end

  # source://github-telemetry//lib/github/telemetry/logs.rb#89
  def sync_appender=(enable); end

  # source://github-telemetry//lib/github/telemetry/logs.rb#93
  def sync_appender?; end

  # Syslog Identifier for the program
  # It is backward compatible with the Scrolls Logger identifier to allow fluentbit to route logs for programs like `ops-shell/gh-console`
  #
  # See https://github.com/asenchi/scrolls/blob/364efb989ff87ec205e7e901aa312aa2e15c57d8/lib/scrolls/logger.rb#L298
  #
  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/logs.rb#276
  def syslog_identifier; end

  # source://github-telemetry//lib/github/telemetry/logs.rb#81
  def syslog_logging=(enable); end

  # source://github-telemetry//lib/github/telemetry/logs.rb#85
  def syslog_logging?; end

  class << self
    # source://github-telemetry//lib/github/telemetry/logs.rb#150
    def add_file_appender(file_name, formatter); end

    # Adds a syslog appender if one is not already configured
    #
    # @return [void]
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#131
    def add_syslog_appender; end

    # Disables logfmt formatted logs to stdout
    #
    # This is useful in cases where you are running an interactive REPL and do not want logs printed to screen
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#122
    def disable_logfmt; end

    # source://github-telemetry//lib/github/telemetry/logs.rb#167
    def enable; end

    # Conditionally replaces existing IO Appenders with a logfmt formatted appender
    #
    # @return [void]
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#108
    def enable_logfmt; end

    # Clears existing SemanticLogger appenders and adds the noop appender
    #
    # @api private
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#290
    def enable_noop_appender; end

    # Switches semantic logger to using a synchronous appender
    #
    # @api private
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#283
    def enable_sync_appender; end

    # source://github-telemetry//lib/github/telemetry/logs.rb#146
    def enable_trace_correlation; end

    # Set log destinations based on environment variables
    #
    # @api private
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#227
    def initialize_log_destinations; end

    # Set log levels based on environment variables
    #
    # @api private
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#219
    def initialize_log_levels; end

    # source://github-telemetry//lib/github/telemetry/logs.rb#57
    def level; end

    # source://github-telemetry//lib/github/telemetry/logs.rb#61
    def level=(log_level); end

    # source://github-telemetry//lib/github/telemetry/logs.rb#69
    def lib_level; end

    # source://github-telemetry//lib/github/telemetry/logs.rb#65
    def lib_level=(log_level); end

    # Logger lookup method for 3rd party libs
    #
    # &#9888; You must call `enable` before loading lib_loggers otherwise they will default to the `debug` levels.
    #
    # @param class [String|Class] used to create a named logger
    # @return SemanticLogger::Logger for the supplied class or class_name
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#47
    def lib_logger(klass, level: T.unsafe(nil)); end

    # Logs a message indicating that logging has already been enabled and cannot be re-enabled
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#252
    def log_already_enabled_message; end

    # Logs diagnostic info about the `Telemetry` configurations
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#236
    def log_diagnostic_info; end

    # Logger lookup method
    #
    # By default this method returns a global logger instance,
    # however if a `Class` parameter is provided this will create a new named logger instance.
    #
    # @param class [String|Class] used to create a named logger
    # @return SemanticLogger::Logger for the supplied class or class_name
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#33
    def logger(klass = T.unsafe(nil)); end

    # source://github-telemetry//lib/github/telemetry/logs.rb#97
    def noop_logging=(enable); end

    # @return [Boolean]
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#101
    def noop_logging?; end

    # Initialize a new null logger
    #
    # @return GitHub::Telemetry::Logs::NullLogger instance
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#53
    def null_logger; end

    # After forking an active process call SemanticLogger.reopen to re-open
    # any open file handles etc to resources.
    #
    # Delegates to SemanticLogger.reopen
    #
    # See [SematicLogger Docs on Forking](https://logger.rocketjob.io/forking.html)
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#204
    def reopen; end

    # Flushes and removes loaded appenders.
    # This is useful for testing
    #
    # @api private
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#189
    def reset; end

    # Sets the default environment variables
    #
    # @api private
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#211
    def set_default_env_settings; end

    # Prevents users from tweaking verbosity levels for logging backtraces
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#267
    def silence_global_backtraces; end

    # source://github-telemetry//lib/github/telemetry/logs.rb#73
    def stdout_logging=(enable); end

    # @return [Boolean]
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#77
    def stdout_logging?; end

    # source://github-telemetry//lib/github/telemetry/logs.rb#89
    def sync_appender=(enable); end

    # @return [Boolean]
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#93
    def sync_appender?; end

    # Syslog Identifier for the program
    # It is backward compatible with the Scrolls Logger identifier to allow fluentbit to route logs for programs like `ops-shell/gh-console`
    #
    # See https://github.com/asenchi/scrolls/blob/364efb989ff87ec205e7e901aa312aa2e15c57d8/lib/scrolls/logger.rb#L298
    #
    # @api private
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#276
    def syslog_identifier; end

    # source://github-telemetry//lib/github/telemetry/logs.rb#81
    def syslog_logging=(enable); end

    # @return [Boolean]
    #
    # source://github-telemetry//lib/github/telemetry/logs.rb#85
    def syslog_logging?; end
  end
end

module GitHub::Telemetry::Logs::Appenders; end

class GitHub::Telemetry::Logs::Appenders::MemoryAppender < ::SemanticLogger::Subscriber
  # @return [MemoryAppender] a new instance of MemoryAppender
  #
  # source://github-telemetry//lib/github/telemetry/logs/appenders/memory_appender.rb#10
  def initialize(level: T.unsafe(nil)); end

  # source://github-telemetry//lib/github/telemetry/logs/appenders/memory_appender.rb#19
  def clear; end

  # source://github-telemetry//lib/github/telemetry/logs/appenders/memory_appender.rb#15
  def log(log); end

  # Returns the value of attribute logs.
  #
  # source://github-telemetry//lib/github/telemetry/logs/appenders/memory_appender.rb#8
  def logs; end

  # Sets the attribute logs
  #
  # @param value the value to set the attribute logs to.
  #
  # source://github-telemetry//lib/github/telemetry/logs/appenders/memory_appender.rb#8
  def logs=(_arg0); end
end

# Suppresses logging by no-oping logs and returning nil
class GitHub::Telemetry::Logs::Appenders::NoopAppender < ::SemanticLogger::Subscriber
  # source://github-telemetry//lib/github/telemetry/logs/appenders/noop_appender.rb#9
  def log(_log); end
end

# Adds trace context correlation to log lines as named tags
class GitHub::Telemetry::Logs::Correlation
  # @return [Correlation] a new instance of Correlation
  #
  # source://github-telemetry//lib/github/telemetry/logs/correlation.rb#17
  def initialize(resources = T.unsafe(nil)); end

  # Amends trace context to a log event as named tags
  #
  # @param log [SemanticLogger::Log] to add context
  #
  # source://github-telemetry//lib/github/telemetry/logs/correlation.rb#25
  def call(log); end

  private

  # source://github-telemetry//lib/github/telemetry/logs/correlation.rb#35
  def current_span_context; end
end

# source://github-telemetry//lib/github/telemetry/logs/correlation.rb#9
GitHub::Telemetry::Logs::Correlation::DEFAULT_RESOURCE_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://github-telemetry//lib/github/telemetry/logs/correlation.rb#8
GitHub::Telemetry::Logs::Correlation::EMPTY_ATTRS = T.let(T.unsafe(nil), Hash)

# source://github-telemetry//lib/github/telemetry/logs.rb#14
GitHub::Telemetry::Logs::ENABLE_SYNC_APPENDER = T.let(T.unsafe(nil), String)

# Namespace for custom log formatters middleware
module GitHub::Telemetry::Logs::Formatters; end

# Provides logfmt formatted log records
#
# Records contain the following fields to have parity with uber/zap
# - `ts`: Timestamp
# - `logger`: Name of the logger object for Rails apps that will be the classname
# - `level`: Human readable severity level TRACE...FATAL
# - `msg`: Event name provided in log event
#
# **Notes**
#
# - All other fields use strict `logfmt` key-value pairs
# - All values are surrounded by double quotes
# - New lines are escaped in values
# - Only Primative Value Types are supported (String, Numeric, Float)
# - Object Values Types are converted to JSON escaped representation
# - Supports tags, named tags, and local record payloads
# - Duplicate fields are overriden giving preference to payloads then named tags then tags
# - All tags are converted to fields with boolean value set to true e.g. `happy=true`
#
# @example Usage
#   SemanticLogger.add_appender(io: $stdout, formatter: GitHub::Telemetry::Logs::Formatters::Logfmt.new)
class GitHub::Telemetry::Logs::Formatters::Logfmt
  # @return [Logfmt] a new instance of Logfmt
  #
  # source://github-telemetry//lib/github/telemetry/logs/formatters/logfmt.rb#49
  def initialize(exception_formatter: T.unsafe(nil)); end

  # Formats a log event into a logfmt string
  #
  # @param log [SemanticLogger::Log] event record to format
  # @param logger [SemanticLogger::Logger] not used
  # @return [String] `logfmt` formatted string
  #
  # source://github-telemetry//lib/github/telemetry/logs/formatters/logfmt.rb#58
  def call(log, _); end

  # source://github-telemetry//lib/github/telemetry/logs/formatters/logfmt.rb#131
  def format_exception(log); end

  # Formats a string using Strict Logfmt formats
  #
  # * All string values are enclosed in double quotes
  # * Strings that contain double quotes are escaped
  #
  # Inspired by https://github.com/asenchi/scrolls/blob/master/lib/scrolls/parser.rb#L7
  #
  # @api private
  # @param String value to format
  # @return String
  #
  # source://github-telemetry//lib/github/telemetry/logs/formatters/logfmt.rb#119
  def format_string_value(value); end
end

# source://github-telemetry//lib/github/telemetry/logs/formatters/logfmt.rb#30
GitHub::Telemetry::Logs::Formatters::Logfmt::DEFAULT_PAYLOAD = T.let(T.unsafe(nil), Hash)

# source://github-telemetry//lib/github/telemetry/logs/formatters/logfmt.rb#31
GitHub::Telemetry::Logs::Formatters::Logfmt::LEVEL_MAP = T.let(T.unsafe(nil), Hash)

# Regular expression used to test if a value should be surrounded by double quotes.
# ' ' is a delimeter for a set of key-value pairs
# `=` is a delimeter between a key and value
# `:` and `,` are special characters in systems like [Splunk](https://github.com/asenchi/scrolls/pull/48)
# `"` is the quote character which requires escaping
#
# source://github-telemetry//lib/github/telemetry/logs/formatters/logfmt.rb#45
GitHub::Telemetry::Logs::Formatters::Logfmt::REQUIRES_QUOTES_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://github-telemetry//lib/github/telemetry/logs/formatters/logfmt.rb#47
GitHub::Telemetry::Logs::Formatters::Logfmt::RESERVED_KEYS = T.let(T.unsafe(nil), Set)

# source://github-telemetry//lib/github/telemetry/logs/formatters/logfmt.rb#29
GitHub::Telemetry::Logs::Formatters::Logfmt::TIME_PRECISION = T.let(T.unsafe(nil), Integer)

# Converts a log event with exception information into a logfmt friendly hash using semantic convention keys
#
# [Semantic Attribute Names](https://github.com/github/github-semantic-conventions/blob/main/combined-docs/trace/exceptions.md#attributes)
# - `Body`: The message that was recorded in the log event.
# - `exception.type`: the exception class name
# - `exception.message`: the exception message
# - `exception.stacktrace`: A non-tty formatted stacktrace based on [`Exception#full_message`](https://ruby-doc.org/core-2.6/Exception.html#method-i-full_message)
#
# This class omits the backtrace for common exceptions raised by the Rails Framework whose backtrace information is not useful for debugging via logs.
#
# **Notes**
#
# - If no custom message was logged, it will fallback to `Body=exception` to match Span Event Exception Format
class GitHub::Telemetry::Logs::Formatters::SemConvException
  # Creates a new instance of SemConvException
  #
  # @param omit_backtrace_classes [Array<String>] an array of exception class names to omit exception.backtrace attribute
  # @return [SemConvException] a new instance of SemConvException
  #
  # source://github-telemetry//lib/github/telemetry/logs/formatters/sem_conv_exception.rb#36
  def initialize(omit_backtrace_classes: T.unsafe(nil)); end

  # Converts a log event with exception information into a logfmt friendly hash using semantic convention keys
  #
  # @param log [SemanticLogger::Log]
  # @return [Hash] with semantic key value pairs or an empty hash if no exception is present
  #
  # source://github-telemetry//lib/github/telemetry/logs/formatters/sem_conv_exception.rb#44
  def call(log); end

  # Returns the value of attribute omit_backtrace_classes.
  #
  # source://github-telemetry//lib/github/telemetry/logs/formatters/sem_conv_exception.rb#32
  def omit_backtrace_classes; end

  private

  # @return [Boolean]
  #
  # source://github-telemetry//lib/github/telemetry/logs/formatters/sem_conv_exception.rb#61
  def include_backtrace?(exception); end
end

# source://github-telemetry//lib/github/telemetry/logs/formatters/sem_conv_exception.rb#23
GitHub::Telemetry::Logs::Formatters::SemConvException::EMPTY_RECORD = T.let(T.unsafe(nil), Hash)

# source://github-telemetry//lib/github/telemetry/logs/formatters/sem_conv_exception.rb#24
GitHub::Telemetry::Logs::Formatters::SemConvException::OMIT_BACKTRACE_CLASSES = T.let(T.unsafe(nil), Array)

# source://github-telemetry//lib/github/telemetry/logs/formatters/sem_conv_exception.rb#22
GitHub::Telemetry::Logs::Formatters::SemConvException::REPLACEMENT_CHARACTER = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/logs.rb#17
GitHub::Telemetry::Logs::INCLUDE_RESOURCE_ATTRIBUTES = T.let(T.unsafe(nil), String)

# Provides a valid IO instance for use in creating a SemanticLogger::Appender::IO appender
class GitHub::Telemetry::Logs::IOStreamProvider
  # @return [IOStreamProvider] a new instance of IOStreamProvider
  #
  # source://github-telemetry//lib/github/telemetry/logs/io_stream_provider.rb#12
  def initialize; end

  # source://github-telemetry//lib/github/telemetry/logs/io_stream_provider.rb#16
  def build_io_stream; end

  # source://github-telemetry//lib/github/telemetry/logs/io_stream_provider.rb#33
  def io_for_proc_one; end

  # source://github-telemetry//lib/github/telemetry/logs/io_stream_provider.rb#48
  def new_io_for_proc_one; end

  # Returns the value of attribute stream.
  #
  # source://github-telemetry//lib/github/telemetry/logs/io_stream_provider.rb#10
  def stream; end

  # source://github-telemetry//lib/github/telemetry/logs/io_stream_provider.rb#22
  def stream_for_tty; end

  # source://github-telemetry//lib/github/telemetry/logs/io_stream_provider.rb#41
  def stream_to_proc_one; end
end

# source://github-telemetry//lib/github/telemetry/logs/io_stream_provider.rb#8
GitHub::Telemetry::Logs::IOStreamProvider::PROC_1_FILE_DESCRIPTOR = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/logs.rb#16
GitHub::Telemetry::Logs::LEVEL = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/logs.rb#15
GitHub::Telemetry::Logs::LIB_LEVEL = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/logs.rb#12
GitHub::Telemetry::Logs::LOG_TO_FILE = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/logs.rb#13
GitHub::Telemetry::Logs::LOG_TO_NOOP = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/logs.rb#10
GitHub::Telemetry::Logs::LOG_TO_STDOUT = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/logs.rb#11
GitHub::Telemetry::Logs::LOG_TO_SYSLOG = T.let(T.unsafe(nil), String)

# Provides class and instance level logger methods
#
# Example:
#
#   class ExternalSupplier
#     # Create class and instance logger methods
#     include ::GitHub::Telemetry::Logs::Loggable
#
#     def call_supplier(amount, name)
#       logger.debug "Calculating with amount", { amount: amount, name: name }
#       # ...
#     end
#   end
module GitHub::Telemetry::Logs::Loggable
  class << self
    # @private
    #
    # source://github-telemetry//lib/github/telemetry/logs/loggable.rb#21
    def included(base); end
  end
end

# Provide a logger instance that does not log
class GitHub::Telemetry::Logs::NullLogger < ::SemanticLogger::Logger
  # @return [NullLogger] a new instance of NullLogger
  #
  # source://github-telemetry//lib/github/telemetry/logs/null_logger.rb#8
  def initialize; end

  # source://github-telemetry//lib/github/telemetry/logs/null_logger.rb#12
  def log_internal(level, index, message = T.unsafe(nil), payload = T.unsafe(nil), exception = T.unsafe(nil)); end
end

# source://github-telemetry//lib/github/telemetry/logs.rb#18
GitHub::Telemetry::Logs::SEVERITY_LEVEL = T.let(T.unsafe(nil), String)

# Extended version of the `SemanticLogger::Base` class
# that includes additional methods such as `named_tagged`
# and `with_named_tags`
module GitHub::Telemetry::Logs::SemanticLoggerBasePatch
  # Public: set a hash of named_tags for the span of the block
  #
  # hash - hash of key-value pairs to add to every log within the block
  # block - block of work to add the key value pairs to
  #
  # Example:
  # logger.named_tagged(foo: :bar) do
  #   logger.info("boo")
  #   logger.warn("baz")
  # end
  # => Severity="INFO" Body="boo" foo="bar"
  # => Severity="WARN" Body="baz" foo="bar"
  #
  # source://github-telemetry//lib/github/telemetry/logs/semantic_logger_base_patch.rb#23
  def named_tagged(hash); end

  # Public: set a hash of named_tags for the span of the block
  #
  # hash - hash of key-value pairs to add to every log within the block
  # block - block of work to add the key value pairs to
  #
  # Example:
  # logger.named_tagged(foo: :bar) do
  #   logger.info("boo")
  #   logger.warn("baz")
  # end
  # => Severity="INFO" Body="boo" foo="bar"
  # => Severity="WARN" Body="baz" foo="bar"
  # Public: set a hash of named_tags for the span of the block
  #
  # hash - hash of key-value pairs to add to every log within the block
  # block - block of work to add the key value pairs to
  #
  # Example:
  # logger.named_tagged(foo: :bar) do
  #   logger.info("boo")
  #   logger.warn("baz")
  # end
  # => Severity="INFO" Body="boo" foo="bar"
  # => Severity="WARN" Body="baz" foo="bar"
  #
  # source://github-telemetry//lib/github/telemetry/logs/semantic_logger_base_patch.rb#23
  def with_named_tags(hash); end
end

# Extended version of the `SemanticLogger::Logger` class
# that includes additional mthods such as `async!`
module GitHub::Telemetry::Logs::SemanticLoggerLoggerPatch
  # source://github-telemetry//lib/github/telemetry/logs/semantic_logger_base_patch.rb#47
  def async!; end
end

# List of supported Severity Levels
module GitHub::Telemetry::Logs::Severity; end

# source://github-telemetry//lib/github/telemetry/logs.rb#21
GitHub::Telemetry::Logs::Severity::DEBUG = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/logs.rb#21
GitHub::Telemetry::Logs::Severity::ERROR = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/logs.rb#21
GitHub::Telemetry::Logs::Severity::FATAL = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/logs.rb#21
GitHub::Telemetry::Logs::Severity::INFO = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/logs.rb#21
GitHub::Telemetry::Logs::Severity::TRACE = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/logs.rb#21
GitHub::Telemetry::Logs::Severity::WARN = T.let(T.unsafe(nil), String)

# Namespace for test utlities
class GitHub::Telemetry::Logs::Test
  class << self
    # source://github-telemetry//lib/github/telemetry/logs/test.rb#8
    def capture_logs(log_level: T.unsafe(nil), &blk); end

    private

    # source://github-telemetry//lib/github/telemetry/logs/test.rb#34
    def add_io_appender; end

    # source://github-telemetry//lib/github/telemetry/logs/test.rb#52
    def add_new_io_appender(io); end

    # source://github-telemetry//lib/github/telemetry/logs/test.rb#48
    def disable_sync_appender; end

    # source://github-telemetry//lib/github/telemetry/logs/test.rb#26
    def enable_log_level(level, &blk); end

    # source://github-telemetry//lib/github/telemetry/logs/test.rb#44
    def enable_sync_appender; end

    # source://github-telemetry//lib/github/telemetry/logs/test.rb#18
    def enable_sync_processor(&blk); end

    # source://github-telemetry//lib/github/telemetry/logs/test.rb#60
    def read_output(io); end

    # source://github-telemetry//lib/github/telemetry/logs/test.rb#64
    def remove_io_appender; end
  end
end

# source://github-telemetry//lib/github/telemetry.rb#31
GitHub::Telemetry::RACK_REQUEST_ID_HEADER = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry.rb#33
GitHub::Telemetry::REQUEST_ID_BAGGAGE_KEY = T.let(T.unsafe(nil), String)

# Namespace for telemetry middleware
module GitHub::Telemetry::Rack; end

# Rack middleware that extracts GitHub specific HTTP headers used to correlate requests.
#
# X-GitHub-Request-Id: Generated by [GLB](https://github.com/github/glb/blob/63d86e8f1d00c75b1b8bcd7c8daa99fd6d257638/docs/prr.md#does-your-service-receive-http-requests-if-so-does-it-log-and-add-the-x-github-request-id-http-header-to-needles-if-you-application-performs-http-requests-does-it-also-relay-the-x-github-request-id-http-header-in-those-requests-docs) if not found.
# If the request bypasses GLB this middleware will generate a new `SecureRandom.uuid` as the request header.
#
# Inspired by https://github.com/github/github/blob/master/lib/rack/request_id.rb
class GitHub::Telemetry::Rack::RequestId
  # @return [RequestId] a new instance of RequestId
  #
  # source://github-telemetry//lib/github/telemetry/rack/request_id.rb#13
  def initialize(app, request_id_provider: T.unsafe(nil)); end

  # source://github-telemetry//lib/github/telemetry/rack/request_id.rb#18
  def call(env); end
end

# Provides a Railtie to ease OpenTelemetry configuration in Rails environments. Configuration should be
# done under `Rails.appplication.config.telemetry`.
#
# Accepted configuration options:
#
# - `config.telemetry.logger` allows you to pass a custom Logger-compatible class, which will be used for the OpenTelemetry logger. Defaults to `Rails.logger`.
# - `config.telemetry.exporter` allows you to set a custom exporter. If not set, then:
#   - In the Rails console, a {https://open-telemetry.github.io/opentelemetry-ruby/opentelemetry-sdk/latest/OpenTelemetry/SDK/Trace/Export/InMemorySpanExporter.html InMemorySpanExporter} will be used.
#   - In development, our {GitHub::Telemetry::Traces::Export::LogSpanExporter LogSpanExporter} will be used.
#   - In test, an {https://open-telemetry.github.io/opentelemetry-ruby/opentelemetry-sdk/latest/OpenTelemetry/SDK/Trace/Export/InMemorySpanExporter.html InMemorySpanExporter} will be used.
#   - In all other environments, the {GitHub::Telemetry} defaults will be used.
# - `config.telemetry.instrumentation` allows you to select which of the registered {https://github.com/open-telemetry/opentelemetry-ruby/tree/main/instrumentation instrumentation libraries}
#   will be used. Accepts an array of instrumentation class names, or a hash of instrumentation class names to configuration options. Rack and Rails instrumentation will always be added for you.
#
# @example Configuring a list of custom instrumentation:
#
#   module MyRailsApp
#   class Application < Rails::Application
#   config.telemetry.instrumentation = {
#   'OpenTelemetry::Instrumentation::Mysql2' => {
#   # relevant options go here
#   },
#   # pass an empty hash if there are no options to configure, or you don't need to configure anything.
#   'OpenTelemetry::Instrumentation::Redis' => {},
#   }
#   end
#   end
# @example Overriding a logger
#   module MyRailsApp
#   class Application < Rails::Application
#   config.telemetry.logger = SemanticLogger[MyRailsApp] # `Rails.logger` would have been used, by default.
#   end
#   end
# @note No configuration is required, by default (if you have an OpenTelemetry collector running on `localhost`). This railtie will be automatically
#   detected and loaded by Bundler when running as part of Rails. The following is provided for more advanced configuration needs!
# @note By default, if you have included the Mysql2 instrumentation, we enforce SQL obfuscation in the Rails production env.. You may pass an option to the instrumentation to disable it, if you must.
# @note By default, if you have included the ActiveJob instrumentation, we configure the span_name option and force_flush options for you. You may override if needed.
#
# source://github-telemetry//lib/github/telemetry/railtie.rb#45
class GitHub::Telemetry::Railtie < ::Rails::Railtie
  class << self
    # source://github-telemetry//lib/github/telemetry/railtie.rb#48
    def reset_telemetry_config; end
  end
end

# Provides access to the GitHub Request ID used for legacy correlation.
class GitHub::Telemetry::RequestIdProvider
  # @return [String] Request ID stored in the current `Baggage` entry or generate a new v4 UUID
  #   if the baggage entry could not be found
  #
  # source://github-telemetry//lib/github/telemetry/request_id_provider.rb#22
  def find_or_generate_request_id; end

  # Creates a `OpenTelemetry::Context` with updated `Baggage` that includes a Request ID.
  #
  # @param request_id [String] that optionally contains a `X-GitHub-Request-Id` generated upstream
  # @return [OpenTelemetry::Context]
  #
  # source://github-telemetry//lib/github/telemetry/request_id_provider.rb#36
  def new_context_from(request_id:); end

  # @return [String, nil] Request ID stored in the current `Baggage` entry or nil
  #   if the baggage entry could not be found
  #
  # source://github-telemetry//lib/github/telemetry/request_id_provider.rb#28
  def request_id_from_baggage; end

  # Creates an updated context with the current request id.
  # This method will extract the request-id from the supplied Rack Environment, if none is present it will
  # generate a new v4 UUID request id for use in downstream service calls and log correlation.
  #
  # @param env [Hash] that optionally contains an `X-GitHub-Request-Id` generated upstream
  # @yield block to execute with current context information
  #
  # source://github-telemetry//lib/github/telemetry/request_id_provider.rb#13
  def using_request_id_from_baggage_or(env:, &block); end

  private

  # @return [String] v4 UUID
  #
  # source://github-telemetry//lib/github/telemetry/request_id_provider.rb#49
  def new_request_id; end

  # if it is missing
  #
  # @return [String, nil] Request ID from the legacy HTTP request headers or nil
  #
  # source://github-telemetry//lib/github/telemetry/request_id_provider.rb#44
  def request_id_from_rack(env:); end
end

# Mirror of the OpenTelemetry::SDK::Resource dedicated to our internal resources
module GitHub::Telemetry::Resource
  private

  # source://github-telemetry//lib/github/telemetry/resource.rb#9
  def build; end

  class << self
    # source://github-telemetry//lib/github/telemetry/resource.rb#9
    def build; end
  end
end

# Detecors namespace
module GitHub::Telemetry::Resource::Detectors; end

# Provides resource attributes injected via Environment Variables into Bare Metal Apps
#
# https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/sdk.md
# https://github.com/open-telemetry/opentelemetry-ruby/tree/main/resource_detectors
module GitHub::Telemetry::Resource::Detectors::BareMetal
  private

  # source://github-telemetry//lib/github/telemetry/resource/detectors/bare_metal.rb#14
  def detect; end

  class << self
    # source://github-telemetry//lib/github/telemetry/resource/detectors/bare_metal.rb#14
    def detect; end
  end
end

# Provides resource attributes for Host Related attributes
#
# https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/sdk.md
# https://github.com/open-telemetry/opentelemetry-ruby/tree/main/resource_detectors
module GitHub::Telemetry::Resource::Detectors::Host
  private

  # source://github-telemetry//lib/github/telemetry/resource/detectors/host.rb#14
  def detect; end

  # Returns the HOSTNAME environment variable if it is set by puppet
  # or attempts to determine the hostname from a socket call
  # otherwise returns `invalid_hostname` as a default
  #
  # @return [String] the hostname
  #
  # source://github-telemetry//lib/github/telemetry/resource/detectors/host.rb#28
  def hostname_or_default; end

  class << self
    # source://github-telemetry//lib/github/telemetry/resource/detectors/host.rb#14
    def detect; end

    # Returns the HOSTNAME environment variable if it is set by puppet
    # or attempts to determine the hostname from a socket call
    # otherwise returns `invalid_hostname` as a default
    #
    # @return [String] the hostname
    #
    # source://github-telemetry//lib/github/telemetry/resource/detectors/host.rb#28
    def hostname_or_default; end
  end
end

# Provides resource attributes to identify the SDK
module GitHub::Telemetry::Resource::Detectors::SDK
  private

  # source://github-telemetry//lib/github/telemetry/resource/detectors/sdk.rb#11
  def detect; end

  class << self
    # source://github-telemetry//lib/github/telemetry/resource/detectors/sdk.rb#11
    def detect; end
  end
end

# source://github-telemetry//lib/github/telemetry.rb#34
GitHub::Telemetry::SHUTDOWN_TIMEOUT_SECONDS = T.let(T.unsafe(nil), String)

# Namespace for GitHub Internal Semantic Conventions
module GitHub::Telemetry::SemConv; end

# See https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/http.md#http-request-and-response-headers
# See https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
# See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers
#
# @example Recording HTTP Response Headers
#   logger.debug("Response Headers", GitHub::SemanticConventions::HTTP.response_headers(response.headers, "Content-Length", "User-Agent")
#   span.add_event("Response Headers", GitHub::SemanticConventions::HTTP.response_headers(response.headers, "Content-Length", "User-Agent"))
#   span.add_attributes(GitHub::SemanticConventions::HTTP.response_headers(response.headers, "Content-Length", "User-Agent"))
#   stats.distribution("browser.request.latency", span.duration, tags: GitHub::SemanticConventions::HTTP.response_headers(response.headers, "User-Agent")
module GitHub::Telemetry::SemConv::HTTP
  private

  # Formats Request Headers to OTel Semantic conventions for telemetry attributes
  #
  # @param request_headers [Hash<String, String>] Request Headers
  # @param header_keys [Array<String>] Headers to extract and format to OTel Semantic conventions
  #
  # source://github-telemetry//lib/github/telemetry/sem_conv/http.rb#43
  def request_headers(request_headers, *header_keys); end

  # Formats Response Headers to OTel Semantic conventions for telemetry attributes
  #
  # @param response_headers [Hash<String, String>] Response Headers
  # @param header_keys [Array<String>] Headers to extract and format to OTel Semantic conventions
  #
  # source://github-telemetry//lib/github/telemetry/sem_conv/http.rb#56
  def response_headers(response_headers, *header_keys); end

  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/sem_conv/http.rb#66
  def semconv_request_header(header); end

  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/sem_conv/http.rb#71
  def semconv_response_header(header); end

  class << self
    # Formats Request Headers to OTel Semantic conventions for telemetry attributes
    #
    # @param request_headers [Hash<String, String>] Request Headers
    # @param header_keys [Array<String>] Headers to extract and format to OTel Semantic conventions
    #
    # source://github-telemetry//lib/github/telemetry/sem_conv/http.rb#43
    def request_headers(request_headers, *header_keys); end

    # Formats Response Headers to OTel Semantic conventions for telemetry attributes
    #
    # @param response_headers [Hash<String, String>] Response Headers
    # @param header_keys [Array<String>] Headers to extract and format to OTel Semantic conventions
    #
    # source://github-telemetry//lib/github/telemetry/sem_conv/http.rb#56
    def response_headers(response_headers, *header_keys); end

    # @api private
    #
    # source://github-telemetry//lib/github/telemetry/sem_conv/http.rb#66
    def semconv_request_header(header); end

    # @api private
    #
    # source://github-telemetry//lib/github/telemetry/sem_conv/http.rb#71
    def semconv_response_header(header); end
  end
end

# source://github-telemetry//lib/github/telemetry/sem_conv/http.rb#24
GitHub::Telemetry::SemConv::HTTP::REQUEST_HEADER_PREFIX = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/sem_conv/http.rb#27
GitHub::Telemetry::SemConv::HTTP::RESERVERED_REQUEST_SEMANTIC_CONVENTIONS = T.let(T.unsafe(nil), Hash)

# source://github-telemetry//lib/github/telemetry/sem_conv/http.rb#33
GitHub::Telemetry::SemConv::HTTP::RESERVERED_RESPONSE_SEMANTIC_CONVENTIONS = T.let(T.unsafe(nil), Hash)

# source://github-telemetry//lib/github/telemetry/sem_conv/http.rb#25
GitHub::Telemetry::SemConv::HTTP::RESPONSE_HEADER_PREFIX = T.let(T.unsafe(nil), String)

# See https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/http.md#http-request-and-response-headers
# See https://api.rubyonrails.org/classes/ActionDispatch/Http/Headers.html
# See https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
# See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers
#
# @example Recording a Rack HTTP Response Header
#   logger.debug("Response Headers", GitHub::SemanticConventions::Rack.response_headers(response.headers, "Content-Length", "User-Agent")
#   span.add_event("Response Headers", GitHub::SemanticConventions::Rack.response_headers(response.headers, "Content-Length", "User-Agent"))
#   span.add_attributes(GitHub::SemanticConventions::Rack.response_headers(response.headers, "Content-Length", "User-Agent"))
#   stats.distribution("browser.request.latency", span.duration, tags: GitHub::SemanticConventions::Rack.response_headers(response.headers, "User-Agent")
module GitHub::Telemetry::SemConv::Rack
  private

  # Formats Rack HTTP Request Headers to OTel Semantic conventions for telemetry attributes
  #
  # @param env [Hash] env Rack HTTP Request environment
  # @param header_keys [Array<String>] Headers to extract and format to OTel Semantic conventions
  #
  # source://github-telemetry//lib/github/telemetry/sem_conv/rack.rb#51
  def request_headers(env, *header_keys); end

  # Formats Rack HTTP Response Headers to OTel Semantic conventions for telemetry attributes
  #
  # @param response_headers [Hash] Rack HTTP Response headers
  # @param header_keys [Array<String>] Headers to extract and format to OTel Semantic conventions
  #
  # source://github-telemetry//lib/github/telemetry/sem_conv/rack.rb#71
  def response_headers(response_headers, *header_keys); end

  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/sem_conv/rack.rb#63
  def semconv_request_header(rack_header); end

  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/sem_conv/rack.rb#81
  def semconv_response_header(rack_header); end

  class << self
    # Formats Rack HTTP Request Headers to OTel Semantic conventions for telemetry attributes
    #
    # @param env [Hash] env Rack HTTP Request environment
    # @param header_keys [Array<String>] Headers to extract and format to OTel Semantic conventions
    #
    # source://github-telemetry//lib/github/telemetry/sem_conv/rack.rb#51
    def request_headers(env, *header_keys); end

    # Formats Rack HTTP Response Headers to OTel Semantic conventions for telemetry attributes
    #
    # @param response_headers [Hash] Rack HTTP Response headers
    # @param header_keys [Array<String>] Headers to extract and format to OTel Semantic conventions
    #
    # source://github-telemetry//lib/github/telemetry/sem_conv/rack.rb#71
    def response_headers(response_headers, *header_keys); end

    # @api private
    #
    # source://github-telemetry//lib/github/telemetry/sem_conv/rack.rb#63
    def semconv_request_header(rack_header); end

    # @api private
    #
    # source://github-telemetry//lib/github/telemetry/sem_conv/rack.rb#81
    def semconv_response_header(rack_header); end
  end
end

# source://github-telemetry//lib/github/telemetry/sem_conv/rack.rb#32
GitHub::Telemetry::SemConv::Rack::REQUEST_HEADER_PREFIX = T.let(T.unsafe(nil), String)

# source://github-telemetry//lib/github/telemetry/sem_conv/rack.rb#35
GitHub::Telemetry::SemConv::Rack::RESERVERED_REQUEST_SEMANTIC_CONVENTIONS = T.let(T.unsafe(nil), Hash)

# source://github-telemetry//lib/github/telemetry/sem_conv/rack.rb#41
GitHub::Telemetry::SemConv::Rack::RESERVERED_RESPONSE_SEMANTIC_CONVENTIONS = T.let(T.unsafe(nil), Hash)

# source://github-telemetry//lib/github/telemetry/sem_conv/rack.rb#33
GitHub::Telemetry::SemConv::Rack::RESPONSE_HEADER_PREFIX = T.let(T.unsafe(nil), String)

# namespace for StatsD::Instrument based reporter
module GitHub::Telemetry::Statsd; end

# MetricsReporter tracks the performance of the OTel SDK using StatsD::Instrument
class GitHub::Telemetry::Statsd::MetricsReporter
  include ::OpenTelemetry::SDK::Trace::Export::MetricsReporter

  # @return [MetricsReporter] a new instance of MetricsReporter
  #
  # source://github-telemetry//lib/github/telemetry/statsd/metrics_reporter.rb#11
  def initialize(statsd:); end

  # https://github.com/open-telemetry/opentelemetry-ruby/blob/c0872228a92f0e82a4c9d07b980a341286af207c/sdk/lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#L167
  #
  # source://github-telemetry//lib/github/telemetry/statsd/metrics_reporter.rb#30
  def add_to_counter(metric, increment: T.unsafe(nil), labels: T.unsafe(nil)); end

  # https://github.com/open-telemetry/opentelemetry-ruby/blob/c0872228a92f0e82a4c9d07b980a341286af207c/sdk/lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#L167
  #
  # source://github-telemetry//lib/github/telemetry/statsd/metrics_reporter.rb#23
  def observe_value(metric, value:, labels: T.unsafe(nil)); end

  # https://github.com/open-telemetry/opentelemetry-ruby/blob/c0872228a92f0e82a4c9d07b980a341286af207c/exporter/otlp/lib/opentelemetry/exporter/otlp/exporter.rb
  #
  # source://github-telemetry//lib/github/telemetry/statsd/metrics_reporter.rb#16
  def record_value(metric, value:, labels: T.unsafe(nil)); end

  # Returns the value of attribute statsd.
  #
  # source://github-telemetry//lib/github/telemetry/statsd/metrics_reporter.rb#9
  def statsd; end

  private

  # source://github-telemetry//lib/github/telemetry/statsd/metrics_reporter.rb#38
  def format_tags(labels); end
end

# Namespace for custom traces
module GitHub::Telemetry::Traces; end

# Namespace for custom trace exporters
module GitHub::Telemetry::Traces::Export; end

# A customized Span exporter, which logs a span more effectively
# than the default {https://open-telemetry.github.io/opentelemetry-ruby/opentelemetry-sdk/latest/OpenTelemetry/SDK/Trace/Export/ConsoleSpanExporter.html ConsoleSpanExporter}.
# The spans will be logged using the default OpenTelemetry logger. For convenience,
# you can also configure a desired logging object via {GitHub::Telemetry.configure}.
#
# Sample output:
#
#     I, [2021-03-04T15:09:34.115467 #45202]  INFO -- : {:trace_id=>"34dd71b4edf058e2616e854524f1b65b", :span_id=>"4fa1c290e71f011a", :name=>"test span", :kind=>nil, :start_timestamp=>2021-03-04 15:09:31.48832 -0600, :end_timestamp=>2021-03-04 15:09:31.488405 -0600}
#     I, [2021-03-04T15:09:34.115579 #45202]  INFO -- : {:trace_id=>"34dd71b4edf058e2616e854524f1b65b", :span_id=>"4fa1c290e71f011a", :event=>{:name=>"exception", :timestamp=>2021-03-04 15:09:31.488383 -0600}}
#
# @example
#   log_exporter = GitHub::Telemetry::Traces::Export::LogSpanExporter.new
#   GitHub::Telemetry.configure(service_name: "my_service", exporter: log_exporter)
class GitHub::Telemetry::Traces::Export::LogSpanExporter < ::OpenTelemetry::SDK::Trace::Export::ConsoleSpanExporter
  include ::OpenTelemetry::SDK::Trace::Export

  # source://github-telemetry//lib/github/telemetry/traces/export/log_span_exporter.rb#23
  def export(spans, timeout: T.unsafe(nil)); end
end

# Extended version of the `OpenTelemetry::Exporter::OTLP::Exporter` class
# that forces the HTTP client to re-connect on 503 errors
module GitHub::Telemetry::Traces::Export::OTLPExporterPatch
  # @return [Boolean]
  #
  # source://github-telemetry//lib/github/telemetry/traces/export/otlp_exporter_patch.rb#10
  def backoff?(retry_count:, reason:, retry_after: T.unsafe(nil)); end
end

# A processor that keeps track of the global set of unfinished pending_spans and attempts to export them at shutdown.
#
# One challenge we face with the OpenTelemetry SDK is that pending_spans are not intended to be guaranteed to be exported.
# This means that if the OpenTelemetrySDK exits, pending_spans that were started but not finished will be lost.
#
# This processor wraps is intended for use by wrapping a BatchSpanProcessor and attempts to export all unfinished at shutdown.
# It does so by iterating over the pending_spans and calling finish on them, which in turn will send them through the
# span processor `on_finish` pipeline.
#
# Unlike the BatchSpanProcessor, this processor keeps an unbounded stack of unfinished pending_spans.
# This means that for a trace that generates a large amount of pending_spans, which are already stored in the `Context` stack,
# will also be tracked by this processor.
#
# Like other span processors, this processor is thread safe and synchronizes access to the unfinished span buffer using a `Mutex`.
#
# Metrics emitted by this processor:
# - `gh.otel.pending_spans`: `GAUGE` the number of pending_spans that have been started but not finished
# - `gh.otel.pending_spans.error.count`: `COUNT` records the number of errors that occur while processing pending_spans
#
# @note EXPERIMENTAL: This is experimental and may change or be removed in the future.
class GitHub::Telemetry::Traces::Export::PendingSpanProcessor < ::SimpleDelegator
  # @param span_processor [OpenTelemetry::SDK::Trace::SpanProcessor] the span processor to wrap
  # @param reports [OpenTelemetry::SDK::Trace::Export::MetricsReporter] metrics about this span processor
  # @return [PendingSpanProcessor] a new instance of PendingSpanProcessor
  #
  # source://github-telemetry//lib/github/telemetry/traces/export/pending_span_processor.rb#37
  def initialize(span_processor, metrics_reporter: T.unsafe(nil), reset_on_fork: T.unsafe(nil)); end

  # @return [Boolean] true if the span buffer is empty
  #
  # source://github-telemetry//lib/github/telemetry/traces/export/pending_span_processor.rb#76
  def empty?; end

  # @return [OpenTelemetry::SDK::Trace::Export::MetricsReporter] used to record metrics about this span processor
  #
  # source://github-telemetry//lib/github/telemetry/traces/export/pending_span_processor.rb#33
  def metrics_reporter; end

  # @see OpenTelemetry::SDK::Trace::SpanProcessor#on_finish
  #
  # source://github-telemetry//lib/github/telemetry/traces/export/pending_span_processor.rb#55
  def on_finish(span); end

  # @see OpenTelemetry::SDK::Trace::SpanProcessor#on_start
  #
  # source://github-telemetry//lib/github/telemetry/traces/export/pending_span_processor.rb#45
  def on_start(span, parent_context); end

  # Prevents forked processes from having a copy of the pending_spans from the parent process,
  # which would ultimately result in the same pending_spans being exported multiple times.
  #
  # It works in conjuction with the `reset_on_fork` option, which is enabled by default.
  # Users who disable `reset_on_fork` are responsible for ensuring that the pending_spans are not exported multiple times.
  #
  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/traces/export/pending_span_processor.rb#90
  def reset; end

  # @see OpenTelemetry::SDK::Trace::SpanProcessor#shutdown
  #
  # source://github-telemetry//lib/github/telemetry/traces/export/pending_span_processor.rb#65
  def shutdown(**args); end

  private

  # source://github-telemetry//lib/github/telemetry/traces/export/pending_span_processor.rb#100
  def lock(&block); end

  # Returns the value of attribute pending_spans.
  #
  # source://github-telemetry//lib/github/telemetry/traces/export/pending_span_processor.rb#98
  def pending_spans; end

  # source://github-telemetry//lib/github/telemetry/traces/export/pending_span_processor.rb#104
  def with_error_reporting(&block); end
end

class GitHub::Telemetry::Traces::Export::SpanProcessorFactory
  class << self
    # Creation method that instantiates a span processor based on the exporter
    #
    # - OTLP Exporters will always be paired with a BatchSpanProcessor
    # - Non-OTLP Exporters will always be paired with a SimpleSpanProcessor
    #
    # If the environment variable GITHUB_TELEMETRY_PENDING_SPANS_ENABLED is set to true, then
    # the BatchSpanProcessor will be wrapped in a PendingSpanProcessor to avoid dropping
    # spans when the application exits gracefully.
    #
    # @return OpenTelemetry::SDK::Trace::SpanProcessor
    #
    # source://github-telemetry//lib/github/telemetry/traces/export/span_processor_factory.rb#20
    def new_span_processor(exporter, metrics_reporter:); end
  end
end

# source://github-telemetry//lib/github/telemetry/traces/export/span_processor_factory.rb#8
GitHub::Telemetry::Traces::Export::SpanProcessorFactory::PENDING_SPANS_ENABLED = T.let(T.unsafe(nil), String)

module GitHub::Telemetry::Traces::NoopStacktraceCleaner
  private

  # source://github-telemetry//lib/github/telemetry/traces/stacktrace_filter.rb#22
  def clean(backtrace, _ = T.unsafe(nil)); end

  class << self
    # source://github-telemetry//lib/github/telemetry/traces/stacktrace_filter.rb#22
    def clean(backtrace, _ = T.unsafe(nil)); end
  end
end

module GitHub::Telemetry::Traces::NoopStacktraceTrimmer
  private

  # source://github-telemetry//lib/github/telemetry/traces/stacktrace_filter.rb#13
  def should_trim?(klass, backtrace); end

  # source://github-telemetry//lib/github/telemetry/traces/stacktrace_filter.rb#9
  def trim(backtrace); end

  class << self
    # @return [Boolean]
    #
    # source://github-telemetry//lib/github/telemetry/traces/stacktrace_filter.rb#13
    def should_trim?(klass, backtrace); end

    # source://github-telemetry//lib/github/telemetry/traces/stacktrace_filter.rb#9
    def trim(backtrace); end
  end
end

module GitHub::Telemetry::Traces::ProxyTracerProviderPatches
  # source://github-telemetry//lib/github/telemetry/traces/span_patches.rb#64
  def force_flush; end
end

# Contains workarounds for missing OTel SDK Features
module GitHub::Telemetry::Traces::ReadWriteSpanPatches
  # Patches the upstream SDK that records exceptions as Span Events types
  # This allows us to keep track of the original exception and process it for reporting to OTel Backends including applying scrubbing and backtrace truncation rules
  #
  # source://github-telemetry//lib/github/telemetry/traces/span_patches.rb#29
  def record_exception(exception, attributes: T.unsafe(nil)); end
end

# Contains workarounds for missing OTel API Features
# The logger may be initialized and emit log statements _before_ the SDK has been initialized,
# and that causes errors to occur during the correlation check.
module GitHub::Telemetry::Traces::SpanPatches
  # Attribute readers are present on the SDK span but not API spans.
  # This seems like an oversight but the specification does not seem to specify that noop spans should return empty attributes
  #
  # source://github-telemetry//lib/github/telemetry/traces/span_patches.rb#12
  def attributes; end

  # source://github-telemetry//lib/github/telemetry/traces/span_patches.rb#20
  def hex_parent_span_id; end

  # source://github-telemetry//lib/github/telemetry/traces/span_patches.rb#16
  def parent_span_id; end
end

# Mediator used to process backtraces leveraging multiple backtrace cleaners with distinct interfaces:
# - ActiveSupport::BacktraceCleaner
# - Failbot::BacktraceTrimmer
#
# @api private
class GitHub::Telemetry::Traces::StacktraceFilter
  # Use `.new_instance` instead
  #
  # @api private
  # @return [StacktraceFilter] a new instance of StacktraceFilter
  #
  # source://github-telemetry//lib/github/telemetry/traces/stacktrace_filter.rb#39
  def initialize(trimmer, cleaner); end

  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/traces/stacktrace_filter.rb#33
  def backtrace_cleaner; end

  # @api private
  #
  # source://github-telemetry//lib/github/telemetry/traces/stacktrace_filter.rb#34
  def backtrace_trimmer; end

  # Cleans and optionally trims an exception's backtrace
  #
  # Trimming occurs if the Failbot::Backtrace::Trimmer#should_trim? method returns true
  #
  # @api private
  # @param exception [Exception] the exception to clean
  # @return [Array<String>] the cleaned and trimmed backtrace
  #
  # source://github-telemetry//lib/github/telemetry/traces/stacktrace_filter.rb#50
  def clean(exception); end

  class << self
    # Creates a new instance of the StacktraceFilter with a default trimmer and cleaner.
    #
    # It attempts to use the globally configured Failbot.backtrace_trimmer and Rails.backtrace_cleaner.
    # It will use the NoopStacktraceCleaner in cases where neither are present or initialized.
    #
    # @api private
    # @return [StacktraceFilter] used to process backtraces
    #
    # source://github-telemetry//lib/github/telemetry/traces/stacktrace_filter.rb#64
    def new_instance; end
  end
end

# Wrapper around OpenTelemetry::Trace::Tracer
#
# Example:
#
#   class ExternalSupplier
#     # Create class and instance methods to access a named tracer
#     include ::GitHub::Telemetry::Traces::Traceable
#
#     def call_supplier(amount, name)
#       attributes = { "gh.external_supplier.amount" => amount, "gh.external_supplier.name" => name }
#       tracer.in_span("call_supplier", attributes: attributes) do |span|
#       # ...
#       end
#     end
#   end
module GitHub::Telemetry::Traces::Traceable
  # Returns the value of attribute tracer.
  #
  # source://github-telemetry//lib/github/telemetry/traces/traceable.rb#23
  def tracer; end

  class << self
    # @private
    #
    # source://github-telemetry//lib/github/telemetry/traces/traceable.rb#25
    def included(base); end
  end
end

# Utility methods
module GitHub::Telemetry::Utils
  class << self
    # Guesses the currently-running branch.
    #
    # The branch is guessed by:
    #
    # 1. Looking for `APP_REF` in the environment
    # 2. Looking for a file at `#{Rails.root}/BRANCH_NAME` and reading its value, if `Rails` is defined
    #
    # @return [String] The guessed SHA of the running code, or `unknown` if no guessing fails.
    #
    # source://github-telemetry//lib/github/telemetry/utils.rb#30
    def current_ref; end

    # Guesses the currently-running SHA.
    #
    # The SHA is guessed by:
    #
    # 1. Looking for `FAILBOT_CONTEXT_RELEASE` in the environment
    # 2. Looking for `CURRENT_SHA` in the environment
    # 3. Looking for `GIT_SHA` in the environment
    # 4. Looking for a file at `#{Rails.root}/SHA1` and reading its value, if `Rails` is defined
    #
    # @return [String] The guessed SHA of the running code, or `unknown` if no guessing fails.
    #
    # source://github-telemetry//lib/github/telemetry/utils.rb#18
    def current_sha; end

    private

    # source://github-telemetry//lib/github/telemetry/utils.rb#46
    def get_from_file(name); end

    # source://github-telemetry//lib/github/telemetry/utils.rb#36
    def get_sha_from_env; end

    # source://github-telemetry//lib/github/telemetry/utils.rb#42
    def ref_from_env; end
  end
end

# source://github-telemetry//lib/github/telemetry/version.rb#5
GitHub::Telemetry::VERSION = T.let(T.unsafe(nil), String)

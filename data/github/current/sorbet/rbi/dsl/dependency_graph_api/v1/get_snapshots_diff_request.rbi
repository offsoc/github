# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `DependencyGraphAPI::V1::GetSnapshotsDiffRequest`.
# Please instead update this file by running `bin/tapioca dsl DependencyGraphAPI::V1::GetSnapshotsDiffRequest`.

class DependencyGraphAPI::V1::GetSnapshotsDiffRequest
  sig do
    params(
      base_sha: T.nilable(String),
      decompose_updates: T.nilable(T::Boolean),
      include_dependency_snapshots: T.nilable(T::Boolean),
      limit_to_files: T.nilable(DependencyGraphAPI::V1::LimitToFiles),
      page_metadata: T.nilable(DependencyGraphAPI::V1::RequestPageMetadata),
      repository_id: T.nilable(Integer),
      target_sha: T.nilable(String)
    ).void
  end
  def initialize(base_sha: nil, decompose_updates: nil, include_dependency_snapshots: nil, limit_to_files: nil, page_metadata: nil, repository_id: nil, target_sha: nil); end

  sig { returns(String) }
  def base_sha; end

  sig { params(value: String).void }
  def base_sha=(value); end

  sig { void }
  def clear_base_sha; end

  sig { void }
  def clear_decompose_updates; end

  sig { void }
  def clear_include_dependency_snapshots; end

  sig { void }
  def clear_limit_to_files; end

  sig { void }
  def clear_page_metadata; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_target_sha; end

  sig { returns(T::Boolean) }
  def decompose_updates; end

  sig { params(value: T::Boolean).void }
  def decompose_updates=(value); end

  sig { returns(T::Boolean) }
  def include_dependency_snapshots; end

  sig { params(value: T::Boolean).void }
  def include_dependency_snapshots=(value); end

  sig { returns(T.nilable(DependencyGraphAPI::V1::LimitToFiles)) }
  def limit_to_files; end

  sig { params(value: T.nilable(DependencyGraphAPI::V1::LimitToFiles)).void }
  def limit_to_files=(value); end

  sig { returns(T.nilable(DependencyGraphAPI::V1::RequestPageMetadata)) }
  def page_metadata; end

  sig { params(value: T.nilable(DependencyGraphAPI::V1::RequestPageMetadata)).void }
  def page_metadata=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(String) }
  def target_sha; end

  sig { params(value: String).void }
  def target_sha=(value); end
end

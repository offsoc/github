# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::Entities::NewsFeedEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::Entities::NewsFeedEvent`.

class Hydro::Schemas::Github::V1::Entities::NewsFeedEvent
  sig do
    params(
      actor_id: T.nilable(Integer),
      additional_details_shown: T.nilable(T::Boolean),
      grouped: T.nilable(T::Boolean),
      id: T.nilable(Integer),
      repo_id: T.nilable(Integer),
      target_id: T.nilable(Integer),
      type: T.nilable(T.any(Symbol, Integer)),
      visibility: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(actor_id: nil, additional_details_shown: nil, grouped: nil, id: nil, repo_id: nil, target_id: nil, type: nil, visibility: nil); end

  sig { returns(Integer) }
  def actor_id; end

  sig { params(value: Integer).void }
  def actor_id=(value); end

  sig { returns(T::Boolean) }
  def additional_details_shown; end

  sig { params(value: T::Boolean).void }
  def additional_details_shown=(value); end

  sig { void }
  def clear_actor_id; end

  sig { void }
  def clear_additional_details_shown; end

  sig { void }
  def clear_grouped; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_repo_id; end

  sig { void }
  def clear_target_id; end

  sig { void }
  def clear_type; end

  sig { void }
  def clear_visibility; end

  sig { returns(T::Boolean) }
  def grouped; end

  sig { params(value: T::Boolean).void }
  def grouped=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(Integer) }
  def repo_id; end

  sig { params(value: Integer).void }
  def repo_id=(value); end

  sig { returns(Integer) }
  def target_id; end

  sig { params(value: Integer).void }
  def target_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def type=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def visibility; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def visibility=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Proto::SecretScanning::Api::V2::GetTokenRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Proto::SecretScanning::Api::V2::GetTokenRequest`.

class GitHub::Proto::SecretScanning::Api::V2::GetTokenRequest
  sig do
    params(
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      include_commit_oids: T.nilable(T::Boolean),
      include_config_filters: T.nilable(T::Boolean),
      include_included_locations: T.nilable(T::Boolean),
      include_location_count: T.nilable(T::Boolean),
      limit: T.nilable(Integer),
      page: T.nilable(Integer),
      repository_id: T.nilable(Integer),
      token_id: T.nilable(Integer)
    ).void
  end
  def initialize(feature_flags: T.unsafe(nil), include_commit_oids: nil, include_config_filters: nil, include_included_locations: nil, include_location_count: nil, limit: nil, page: nil, repository_id: nil, token_id: nil); end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_include_commit_oids; end

  sig { void }
  def clear_include_config_filters; end

  sig { void }
  def clear_include_included_locations; end

  sig { void }
  def clear_include_location_count; end

  sig { void }
  def clear_limit; end

  sig { void }
  def clear_page; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_token_id; end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(T::Boolean) }
  def include_commit_oids; end

  sig { params(value: T::Boolean).void }
  def include_commit_oids=(value); end

  sig { returns(T::Boolean) }
  def include_config_filters; end

  sig { params(value: T::Boolean).void }
  def include_config_filters=(value); end

  sig { returns(T::Boolean) }
  def include_included_locations; end

  sig { params(value: T::Boolean).void }
  def include_included_locations=(value); end

  sig { returns(T::Boolean) }
  def include_location_count; end

  sig { params(value: T::Boolean).void }
  def include_location_count=(value); end

  sig { returns(Integer) }
  def limit; end

  sig { params(value: Integer).void }
  def limit=(value); end

  sig { returns(Integer) }
  def page; end

  sig { params(value: Integer).void }
  def page=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(Integer) }
  def token_id; end

  sig { params(value: Integer).void }
  def token_id=(value); end
end

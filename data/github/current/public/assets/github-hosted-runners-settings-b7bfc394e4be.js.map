{"version":3,"file":"github-hosted-runners-settings-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/github-hosted-runners-settings/App.tsx","ui/packages/github-hosted-runners-settings/views/components/context.ts","ui/packages/github-hosted-runners-settings/views/components/shared/RunnerNameInput.tsx","ui/packages/github-hosted-runners-settings/helpers/constants.ts","ui/packages/github-hosted-runners-settings/views/components/shared/RunnerMaxConcurrencyInput.tsx","ui/packages/github-hosted-runners-settings/types/runner.ts","ui/packages/github-hosted-runners-settings/views/components/shared/RunnerGroupSelector.tsx","ui/packages/github-hosted-runners-settings/views/components/shared/RunnerPublicIpCheckbox.tsx","ui/packages/github-hosted-runners-settings/views/components/shared/ImageVersionSelector.tsx","ui/packages/github-hosted-runners-settings/helpers/paths.ts","ui/packages/github-hosted-runners-settings/services/runner.ts","ui/packages/github-hosted-runners-settings/routes/EditRunner.tsx","ui/packages/github-hosted-runners-settings/views/components/shared/FieldProgressionField.tsx","ui/packages/github-hosted-runners-settings/views/components/shared/FieldProgression.tsx","ui/packages/github-hosted-runners-settings/views/components/shared/PlatformSelector.tsx","ui/packages/github-hosted-runners-settings/types/image-upload.ts","ui/packages/github-hosted-runners-settings/views/components/shared/ImageUploadValuesSelector.tsx","ui/packages/github-hosted-runners-settings/views/components/shared/ImageSelector.tsx","ui/packages/github-hosted-runners-settings/views/components/shared/MachineSpecSelect.tsx","ui/packages/github-hosted-runners-settings/routes/NewRunner.tsx","ui/packages/github-hosted-runners-settings/github-hosted-runners-settings.ts","ui/packages/github-hosted-runners-settings/types/image.ts","ui/packages/github-hosted-runners-settings/types/machine-spec.ts","ui/packages/github-hosted-runners-settings/types/platform.ts","ui/packages/is-hash-navigation/is-hash-navigation.ts","ui/packages/use-navigate/use-navigate.ts","ui/packages/verified-fetch/verified-fetch.ts","ui/packages/github-hosted-runners-settings/views/components/shared/PlatformIcon.tsx","ui/packages/react-core/JsonRoute.tsx"],"sourcesContent":["import type React from 'react'\n\n/**\n * The App component is used to render content which should be present on _all_ routes within this app\n */\nexport function App(props: {children?: React.ReactNode}) {\n  return <>{props.children}</>\n}\n\ntry{ App.displayName ||= 'App' } catch {}","import {createContext} from 'react'\n\nexport const DocsContext = createContext<string>('')\n","import {FormControl, TextInput} from '@primer/react'\nimport type {FormEvent} from 'react'\n\ninterface Props {\n  runnerName: string\n  onChange: (name: string) => void\n  validationError: boolean\n  onValidationError: (value: boolean) => void\n}\n\nexport function RunnerNameInput({runnerName, onChange, validationError, onValidationError}: Props) {\n  // Can contain only alphanumeric characters, \".\", \"_\", and \"-\", and be between 1 and 64 characters long.  These\n  // requirements should match actions-dotnet/Runner/Service/Server/ArgumentValidation#CheckScaleSetName.\n  const runnerNameRegex = /^[a-zA-Z0-9\\-_.]{1,64}$/\n  const runnerNameValidationId = 'runner-name-validation'\n\n  const handleChange = (e: FormEvent<HTMLInputElement>) => {\n    onChange(e.currentTarget.value)\n    onValidationError(!runnerNameRegex.test(e.currentTarget.value))\n  }\n\n  return (\n    <FormControl required>\n      <FormControl.Label>Name</FormControl.Label>\n      <TextInput\n        aria-label=\"Hosted runner name\"\n        aria-invalid={validationError}\n        aria-describedby={runnerNameValidationId}\n        name=\"runnerName\"\n        value={runnerName}\n        onChange={handleChange}\n        sx={{width: '50%'}}\n        data-testid=\"runner-name-input\"\n      />\n      {validationError && (\n        <FormControl.Validation variant=\"error\" id={runnerNameValidationId}>\n          Name must be between 1 and 64 characters and may only contain alphanumeric characters, &apos;.&apos;,\n          &apos;-&apos;, and &apos;_&apos;.\n        </FormControl.Validation>\n      )}\n    </FormControl>\n  )\n}\n\ntry{ RunnerNameInput.displayName ||= 'RunnerNameInput' } catch {}","export const SETTINGS = {\n  DEFAULT_RUNNER_GROUP_ID: 1,\n} as const\n\nexport const ERRORS = {\n  INVALID_FORM: 'Some fields are invalid. Please check the form and try again.',\n  CREATION_FAILED_REASON_UNKNOWN: 'Failed to create runner. Please try again later.',\n  RUNNER_NAME_ALREADY_EXISTS: (runnerName: string) =>\n    `The runner name ${runnerName} already exists. Please try a different name.`,\n  UPDATE_FAILED_REASON_UNKNOWN: 'Failed to update runner. Please try again later.',\n} as const\n\nexport const URLS = {\n  // Larger runners documentation URLs\n  NETWORKING_DOCS: '/actions/using-github-hosted-runners/using-larger-runners#networking-for-larger-runners',\n  RUNNER_GROUPS_DOCS: '/actions/using-github-hosted-runners/controlling-access-to-larger-runners',\n  USAGE_LIMITS: '/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits',\n  LATEST_IMAGE_TAG: 'https://github.com/actions/runner-images#label-scheme',\n  PARTNER_IMAGES_REPO: 'https://github.com/actions/partner-runner-images',\n\n  // General documentation URLs\n  ENTERPRISE_DOCS: '/enterprise-cloud@latest/admin/overview/setting-up-a-trial-of-github-enterprise-cloud',\n  PRICING: '/pricing',\n} as const\n","import {Box, FormControl, Link, TextInput} from '@primer/react'\nimport {useContext, type FormEvent} from 'react'\nimport {URLS} from '../../../helpers/constants'\nimport {DocsContext} from '../context'\n\nexport function RunnerMaxConcurrencyInput(props: {\n  value: number\n  min: number\n  max: number\n  gpuRunnerSelected: boolean\n  onChange: (value: number) => void\n}) {\n  const handleChange = (e: FormEvent<HTMLInputElement>) => {\n    const currentValue = parseInt(e.currentTarget.value)\n    props.onChange(currentValue)\n  }\n\n  const baseDocsUrl = useContext(DocsContext)\n\n  const error = getMaxRunnerConcurrencyError({\n    value: props.value,\n    min: props.min,\n    max: props.max,\n    gpuRunnerSelected: props.gpuRunnerSelected,\n  })\n\n  return (\n    <Box\n      as=\"div\"\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        borderColor: 'border.default',\n        borderRadius: 2,\n        borderStyle: 'solid',\n        borderWidth: 1,\n        marginBottom: 2,\n        width: '100%',\n        padding: 3,\n      }}\n    >\n      <FormControl>\n        <TextInput\n          aria-label=\"Maximum runner job concurrency\"\n          aria-invalid={!!error}\n          type=\"number\"\n          inputMode=\"numeric\"\n          name=\"maximumConcurrentJobs\"\n          min={props.min}\n          max={props.max}\n          onChange={handleChange}\n          value={props.value}\n          validationStatus={error ? 'error' : undefined}\n          data-testid=\"runner-max-concurrency-input\"\n        />\n        <FormControl.Label>Maximum concurrency</FormControl.Label>\n        <FormControl.Caption>\n          Limits the{' '}\n          <Link inline href={`${baseDocsUrl}${URLS.USAGE_LIMITS}`} underline>\n            number of jobs\n          </Link>{' '}\n          that can run at the same time.\n        </FormControl.Caption>\n        <div data-testid=\"runner-max-concurrency-input-error\">\n          {error && <FormControl.Validation variant=\"error\">{error}</FormControl.Validation>}\n        </div>\n      </FormControl>\n    </Box>\n  )\n}\n\nexport function getMaxRunnerConcurrencyError(input: {\n  value: number\n  min: number\n  max: number\n  gpuRunnerSelected: boolean\n}) {\n  if (input.value === null || isNaN(input.value)) {\n    return 'Must be a valid number'\n  }\n\n  if (input.value < input.min) {\n    return `Must be at least ${input.min}`\n  }\n\n  if (input.value > input.max) {\n    const extraInfo = input.gpuRunnerSelected ? ' for GPU-powered runners' : ''\n    return `Must be at most ${input.max}${extraInfo}`\n  }\n\n  return null\n}\n\ntry{ RunnerMaxConcurrencyInput.displayName ||= 'RunnerMaxConcurrencyInput' } catch {}","import type {ImageSource} from './image'\nimport type {PlatformId} from './platform'\n\nexport type RunnerCreateForm = {\n  name: string\n  platform: PlatformId | null\n  runnerGroupId: number\n  maximumConcurrentJobs: number\n  imageId: string | null\n  imageSource: ImageSource\n  imageVersion: string | null\n  imageName: string | null\n  machineSpecId: string | null\n  isPublicIpEnabled: boolean\n  imageSasUri: string\n  isImageGenerationEnabled: boolean\n}\n\nexport type RunnerEditForm = {\n  imageVersion: string | null\n  isPublicIpEnabled: boolean\n  maximumConcurrentJobs: number\n  name: string\n  runnerGroupId: number\n}\n\nexport type RunnerGroup = {\n  id: number\n  name: string\n  visibility: RunnerGroupVisibility\n  allowPublic: boolean\n  selectedTargets: unknown[]\n  precreated: boolean\n}\n\nexport enum RunnerGroupVisibility {\n  All = 'ALL',\n  Selected = 'SELECTED',\n  Private = 'PRIVATE',\n}\n","import {useEffect, useState, useMemo, useContext} from 'react'\nimport {TriangleDownIcon} from '@primer/octicons-react'\nimport {FormControl, SelectPanel, Link, Text, Box, Button} from '@primer/react'\nimport type {ItemInput} from '@primer/react/lib-esm/deprecated/ActionList/List'\nimport {ActionList} from '@primer/react/deprecated'\nimport {type RunnerGroup, RunnerGroupVisibility} from '../../../types/runner'\nimport {DocsContext} from '../context'\nimport {URLS, SETTINGS} from '../../../helpers/constants'\n\ninterface Props {\n  groups: RunnerGroup[]\n  value: number\n  setValue: (value: number) => void\n  validationError?: boolean\n}\n\nconst runnerGroupValidationId = 'runner-group-validation'\n\nconst isDefaultGroupLabelNeeded = (groupId: number | string | undefined, groups: RunnerGroup[]) => {\n  const group = groups.find(g => g.id === groupId)\n  if (!group) return false\n  return group.id === SETTINGS.DEFAULT_RUNNER_GROUP_ID && !group.name.match(/default/i)\n}\n\nconst groupDescription = (groupId: number | string | undefined, groups: RunnerGroup[]) => {\n  const group = groups.find(g => g.id === groupId)\n  if (!group) return ''\n  const repoCount = group.selectedTargets.length\n  const repoInfo =\n    group.visibility === RunnerGroupVisibility.All ? 'All repositories' : `Selected repositories (${repoCount})`\n  const privacyInfo = group.allowPublic ? 'including public repositories' : 'excluding public repositories'\n\n  return `${repoInfo}, ${privacyInfo}`\n}\n\nexport function RunnerGroupSelector({groups, value, setValue, validationError}: Props) {\n  const docsUrlBase = useContext(DocsContext)\n  const mappedGroups = useMemo(() => groups.map(group => ({id: group.id, text: group.name})), [groups])\n  const [selectedGroup, setSelectedGroup] = useState<ItemInput | undefined>(\n    mappedGroups.find(group => group.id === value),\n  )\n  const [filter, setFilter] = useState<string>('')\n  const [open, setOpen] = useState(false)\n  const filteredItems = useMemo(\n    () => mappedGroups.filter(group => group.text?.toLowerCase().startsWith(filter.toLowerCase())),\n    [filter, mappedGroups],\n  )\n\n  // if value prop changes, update selected group\n  useEffect(() => {\n    const newSelectedGroup = mappedGroups.find(group => group.id === value)\n    if (newSelectedGroup) {\n      setSelectedGroup(newSelectedGroup)\n    }\n  }, [value, mappedGroups])\n\n  const onSelectChange = (item: ItemInput | undefined) => {\n    if (!item || !item.id) return\n    setSelectedGroup(item)\n\n    if (typeof item.id === 'string') {\n      setValue(parseInt(item.id))\n      return\n    }\n    setValue(item.id)\n  }\n\n  return (\n    <FormControl>\n      <FormControl.Label>Runner group</FormControl.Label>\n      <Text sx={{color: 'fg.muted', fontSize: 0}}>\n        The runner group will determine which organizations and repositories can use the runner.{' '}\n        <Link inline href={`${docsUrlBase}${URLS.RUNNER_GROUPS_DOCS}`}>\n          Learn more about runner groups.\n        </Link>\n      </Text>\n      {groups.length === 0 ? (\n        <Text sx={{color: 'danger.fg'}} data-testid=\"no-runner-groups-error\">\n          No runner groups available.\n        </Text>\n      ) : (\n        <>\n          <SelectPanel\n            placeholderText=\"Filter groups\"\n            items={filteredItems}\n            selected={selectedGroup}\n            onSelectedChange={onSelectChange}\n            onFilterChange={setFilter}\n            open={open}\n            onOpenChange={setOpen}\n            showItemDividers={true}\n            overlayProps={{width: 'large', maxHeight: 'large'}}\n            renderItem={item => (\n              <ActionList.Item {...item} text={undefined}>\n                <Box sx={{display: 'flex', flexDirection: 'column'}}>\n                  {item.text}\n                  <div>\n                    <Text sx={{color: 'fg.muted', fontSize: 0}}>{groupDescription(item.id, groups)}</Text>\n                  </div>\n                </Box>\n              </ActionList.Item>\n            )}\n            renderAnchor={({...anchorProps}) => (\n              <Button\n                trailingAction={TriangleDownIcon}\n                {...anchorProps}\n                aria-haspopup=\"dialog\"\n                data-testid=\"runner-group-selector\"\n                aria-invalid={validationError}\n                aria-describedby={runnerGroupValidationId}\n                sx={{borderColor: validationError ? 'danger.fg' : 'border.default'}}\n              >\n                {isDefaultGroupLabelNeeded(value, groups) && <Text sx={{color: 'fg.muted'}}>Default group: </Text>}\n                {selectedGroup?.text}\n              </Button>\n            )}\n          />\n          {validationError && (\n            <FormControl.Validation variant=\"error\" id={runnerGroupValidationId}>\n              Invalid group selected\n            </FormControl.Validation>\n          )}\n        </>\n      )}\n    </FormControl>\n  )\n}\n\ntry{ RunnerGroupSelector.displayName ||= 'RunnerGroupSelector' } catch {}","import {useContext} from 'react'\nimport {Box, Link, Checkbox, FormControl, Text} from '@primer/react'\nimport {OrganizationIcon} from '@primer/octicons-react'\nimport {URLS} from '../../../helpers/constants'\nimport {DocsContext} from '../context'\n\nexport function RunnerPublicIpCheckbox(props: {\n  checked: boolean\n  onChange: (checked: boolean) => void\n  isPublicIpAllowed: boolean\n  usedIpCount: number\n  totalIpCount: number\n  runnerHasPublicIp?: boolean\n}) {\n  const docsUrlBase = useContext(DocsContext)\n  const networkingDocsUrl = `${docsUrlBase}${URLS.NETWORKING_DOCS}`\n\n  // Disable the checkbox when public IP is not allowed, and when all the public ips are in use (unless the runner already owns one -- need to be able to uncheck it!)\n  const disabled = !props.isPublicIpAllowed || (!props.runnerHasPublicIp && props.usedIpCount >= props.totalIpCount)\n\n  return (\n    <FormControl disabled={disabled}>\n      <Checkbox\n        aria-label=\"Assign a unique and static public IP address range for this runner\"\n        checked={props.checked}\n        name=\"isPublicIpEnabled\"\n        value=\"default\"\n        onChange={event => props.onChange(event.target.checked)}\n        data-testid=\"runner-public-ip-checkbox\"\n      />\n      <FormControl.Label sx={{pb: 1}}>\n        Assign a unique &amp; static public IP address range for this runner\n      </FormControl.Label>\n      <FormControl.Caption>\n        <Box sx={{display: 'flex', flexDirection: 'column', gap: 3}}>\n          <span>\n            All instances of this GitHub-hosted runner will be assigned a static IP from a range unique to this runner.{' '}\n            <Link inline href={networkingDocsUrl}>\n              Learn more about networking for runners.\n            </Link>\n          </span>\n          <span>\n            You have used{' '}\n            <Text sx={{fontWeight: 600, color: 'fg.default'}}>\n              {props.usedIpCount} of {props.totalIpCount}\n            </Text>{' '}\n            available Actions Hosted Runner IP address ranges for this organization.\n          </span>\n          {!props.isPublicIpAllowed && <PublicIpDisallowed docsUrlBase={docsUrlBase} />}\n        </Box>\n      </FormControl.Caption>\n    </FormControl>\n  )\n}\n\nfunction PublicIpDisallowed(props: {docsUrlBase: string}) {\n  const enterpriseDocsUrl = `${props.docsUrlBase}${URLS.ENTERPRISE_DOCS}`\n  const pricingPageUrl = URLS.PRICING\n\n  return (\n    <Text sx={{color: 'fg.default', fontSize: '14px'}}>\n      <OrganizationIcon /> Static IP is a GitHub Enterprise feature. Please take a look at our{' '}\n      <Link inline href={pricingPageUrl}>\n        pricing page\n      </Link>{' '}\n      to set up your Enterprise account or{' '}\n      <Link inline href={enterpriseDocsUrl}>\n        learn more\n      </Link>\n      .\n    </Text>\n  )\n}\n\ntry{ RunnerPublicIpCheckbox.displayName ||= 'RunnerPublicIpCheckbox' } catch {}\ntry{ PublicIpDisallowed.displayName ||= 'PublicIpDisallowed' } catch {}","import {Text, ActionMenu, ActionList, FormControl} from '@primer/react'\nimport {ImageVersionState, type ImageVersion} from '../../../types/image'\nimport {TriangleDownIcon} from '@primer/octicons-react'\n\ntype Props = {\n  imageVersions: ImageVersion[]\n  selectedImageVersion: ImageVersion | null\n  setSelectedImageVersion: (version: ImageVersion | null) => void\n  hideLabel?: boolean\n}\n\nexport function ImageVersionSelector({imageVersions, selectedImageVersion, setSelectedImageVersion, hideLabel}: Props) {\n  if (!imageVersions.length) {\n    return <Text sx={{color: 'danger.fg'}}>No image versions available.</Text>\n  }\n\n  const isSelected = (imageVersion: ImageVersion) => {\n    return (\n      selectedImageVersion?.version === imageVersion.version ||\n      (!selectedImageVersion && imageVersion.version === imageVersions[0]?.version)\n    )\n  }\n\n  return (\n    <FormControl>\n      <FormControl.Label visuallyHidden={hideLabel}>Image version</FormControl.Label>\n      <ActionMenu>\n        <ActionMenu.Button data-testid=\"image-versions-selector-btn\" trailingAction={TriangleDownIcon} size=\"medium\">\n          <Text sx={{color: 'fg.muted'}}>Version: </Text>\n          {selectedImageVersion ? selectedImageVersion.version : imageVersions[0]?.version}\n        </ActionMenu.Button>\n        <ActionMenu.Overlay>\n          <ActionList selectionVariant=\"single\">\n            {imageVersions.map(version => (\n              <ActionList.Item\n                key={version.version}\n                selected={isSelected(version)}\n                onSelect={() => setSelectedImageVersion(version)}\n              >\n                {version.version}\n              </ActionList.Item>\n            ))}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>\n    </FormControl>\n  )\n}\n\nexport function getAvailableImageVersions(imageVersions: ImageVersion[]) {\n  // we don't allow creating runner with failed or currently being deleted image version\n  return imageVersions.filter(\n    version => ![ImageVersionState.ImportFailed, ImageVersionState.Deleting].includes(version.state),\n  )\n}\n\ntry{ ImageVersionSelector.displayName ||= 'ImageVersionSelector' } catch {}","function getRoot(isEnterprise: boolean) {\n  return isEnterprise ? '/enterprises/' : '/organizations/'\n}\n\nexport function createRunnerPath({isEnterprise, entityLogin}: {isEnterprise: boolean; entityLogin: string}) {\n  return `${getRoot(isEnterprise)}${entityLogin}/settings/actions/github-hosted-runners/`\n}\n\nexport function runnerDetailsPath({\n  isEnterprise,\n  entityLogin,\n  runnerId,\n}: {\n  isEnterprise: boolean\n  entityLogin: string\n  runnerId: number\n}) {\n  return `${getRoot(isEnterprise)}${entityLogin}/settings/actions/github-hosted-runners/${runnerId}`\n}\n\nexport function updateRunnerPath({\n  isEnterprise,\n  entityLogin,\n  runnerId,\n}: {\n  isEnterprise: boolean\n  entityLogin: string\n  runnerId: number\n}) {\n  return `${getRoot(isEnterprise)}${entityLogin}/settings/actions/github-hosted-runners/${runnerId}`\n}\n","import {verifiedFetchJSON} from '@github-ui/verified-fetch'\n\nimport type {RunnerEditForm, RunnerCreateForm} from '../types/runner'\nimport {ERRORS} from '../helpers/constants'\nimport {createRunnerPath, updateRunnerPath} from '../helpers/paths'\n\nconst request = async (url: string, method: string, body: RunnerCreateForm | RunnerEditForm) => {\n  const response = await verifiedFetchJSON(url, {\n    method,\n    body,\n  })\n\n  try {\n    return {\n      ...(await response.json()),\n      status: response.status,\n    }\n  } catch (e) {\n    throw new Error('Failed to read response')\n  }\n}\n\nexport const createRunner = async (payload: RunnerCreateForm, entityLogin: string, isEnterprise: boolean = false) => {\n  const url = createRunnerPath({isEnterprise, entityLogin})\n  const result = await request(url, 'POST', payload)\n  if (result.success) {\n    return result.data.runnerId\n  }\n\n  switch (result.status) {\n    case 409:\n      throw new Error(ERRORS.RUNNER_NAME_ALREADY_EXISTS(payload.name))\n    case 422:\n      if (result.error_category === 'known') {\n        throw new Error(result.error)\n      }\n    // eslint-disable-next-line no-fallthrough\n    default:\n      throw new Error(ERRORS.CREATION_FAILED_REASON_UNKNOWN)\n  }\n}\n\nexport const updateRunner = async (\n  payload: RunnerEditForm,\n  runnerId: number,\n  entityLogin: string,\n  isEnterprise: boolean = false,\n) => {\n  const url = updateRunnerPath({runnerId, isEnterprise, entityLogin})\n  const result = await request(url, 'PATCH', payload)\n\n  switch (result.status) {\n    case 200:\n      return result.success\n    case 409:\n      throw new Error(ERRORS.RUNNER_NAME_ALREADY_EXISTS(payload.name))\n    case 422:\n      if (result.error_category === 'known') {\n        throw new Error(result.error)\n      }\n    // eslint-disable-next-line no-fallthrough\n    default:\n      throw new Error(ERRORS.UPDATE_FAILED_REASON_UNKNOWN)\n  }\n}\n","import {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {DocsContext} from '../views/components/context'\nimport {Box, Button, Flash, Heading, Link, PageLayout} from '@primer/react'\nimport {RunnerNameInput} from '../views/components/shared/RunnerNameInput'\nimport {useState} from 'react'\nimport {useNavigate} from '@github-ui/use-navigate'\nimport {\n  RunnerMaxConcurrencyInput,\n  getMaxRunnerConcurrencyError,\n} from '../views/components/shared/RunnerMaxConcurrencyInput'\nimport {RunnerGroupSelector} from '../views/components/shared/RunnerGroupSelector'\nimport {RunnerPublicIpCheckbox} from '../views/components/shared/RunnerPublicIpCheckbox'\nimport type {RunnerEditForm, RunnerGroup} from '../types/runner'\nimport {ERRORS} from '../helpers/constants'\nimport type {ImageVersion} from '../types/image'\nimport {ImageVersionSelector} from '../views/components/shared/ImageVersionSelector'\nimport {updateRunner} from '../services/runner'\nimport {runnerDetailsPath} from '../helpers/paths'\n\nexport interface EditRunnerPayload {\n  docsUrlBase: string\n  entityLogin: string\n  imageVersions: ImageVersion[]\n  isEnterprise: boolean\n  isPublicIpAllowed: boolean\n  maxConcurrentJobsMax: number\n  maxConcurrentJobsMin: number\n  runnerGroupId: number\n  runnerGroups: RunnerGroup[]\n  runnerHasCustomImage: boolean\n  runnerHasGpuSpec: boolean\n  runnerHasPublicIp: boolean\n  runnerId: number\n  runnerImageVersion: string\n  runnerListPath: string\n  runnerMaxConcurrentJobs: number\n  runnerName: string\n  totalIpCount: number\n  usedIpCount: number\n}\n\nexport function EditRunner() {\n  const {\n    docsUrlBase,\n    entityLogin,\n    imageVersions,\n    isEnterprise,\n    isPublicIpAllowed,\n    maxConcurrentJobsMin,\n    maxConcurrentJobsMax,\n    runnerGroupId,\n    runnerGroups,\n    runnerHasCustomImage,\n    runnerHasGpuSpec,\n    runnerHasPublicIp,\n    runnerId,\n    runnerImageVersion,\n    runnerListPath,\n    runnerMaxConcurrentJobs,\n    runnerName,\n    totalIpCount,\n    usedIpCount,\n  } = useRoutePayload<EditRunnerPayload>()\n\n  const [formError, setFormError] = useState<string>('')\n\n  const [selectedRunnerName, setSelectedRunnerName] = useState<string>(runnerName)\n  const [runnerNameError, setRunnerNameError] = useState<boolean>(false)\n\n  const [maxConcurrentJobs, setMaxConcurrentJobs] = useState<number>(runnerMaxConcurrentJobs)\n\n  const [isPublicIpEnabled, setIsPublicIpEnabled] = useState<boolean>(runnerHasPublicIp)\n\n  // it's not possible to have group with ID 0, so we use it to validate if no groups are available\n  const [selectedRunnerGroupId, setSelectedRunnerGroupId] = useState<number>(runnerGroupId)\n  const [runnerGroupError, setRunnerGroupError] = useState<boolean>(false)\n\n  // initialize with selected image version based on runnerImageVersion\n  const [selectedImageVersion, setSelectedImageVersion] = useState<ImageVersion | null>(\n    imageVersions?.find(version => version.version === runnerImageVersion) || null,\n  )\n\n  const navigate = useNavigate()\n\n  const resetFormError = () => {\n    setFormError('')\n  }\n\n  const isFormValid = () => {\n    let validForm = true\n    if (!selectedRunnerName || runnerNameError) {\n      setRunnerNameError(true)\n      validForm = false\n    }\n\n    const isGroupInvalid = !runnerGroups.find(group => group.id === runnerGroupId)\n    if (!runnerGroupId || isGroupInvalid || runnerGroupError) {\n      setRunnerGroupError(true)\n      validForm = false\n    }\n\n    const maxRunnerConcurrencyError = getMaxRunnerConcurrencyError({\n      value: maxConcurrentJobs,\n      min: maxConcurrentJobsMin,\n      max: maxConcurrentJobsMax,\n      gpuRunnerSelected: runnerHasGpuSpec,\n    })\n    if (maxRunnerConcurrencyError) {\n      validForm = false\n    }\n\n    return validForm\n  }\n\n  const handleSubmit = async (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault()\n    resetFormError()\n\n    if (!isFormValid()) {\n      setFormError(ERRORS.INVALID_FORM)\n      return\n    }\n\n    const form: RunnerEditForm = {\n      name: selectedRunnerName,\n      runnerGroupId: selectedRunnerGroupId,\n      maximumConcurrentJobs: maxConcurrentJobs,\n      isPublicIpEnabled,\n      imageVersion: selectedImageVersion?.version || null,\n    }\n\n    try {\n      const success = await updateRunner(form, runnerId, entityLogin, isEnterprise)\n      if (success) {\n        navigate(runnerDetailsPath({isEnterprise, entityLogin, runnerId}))\n      } else {\n        setFormError(ERRORS.UPDATE_FAILED_REASON_UNKNOWN)\n      }\n    } catch (error: unknown) {\n      setFormError((error as Error)?.message ?? ERRORS.UPDATE_FAILED_REASON_UNKNOWN)\n    }\n  }\n\n  const onCancel = () => {\n    navigate(runnerDetailsPath({isEnterprise, entityLogin, runnerId}))\n  }\n\n  return (\n    <DocsContext.Provider value={docsUrlBase}>\n      {formError && <Flash variant=\"danger\">{formError}</Flash>}\n      <PageLayout padding=\"none\">\n        <PageLayout.Header sx={{mb: '16px !important'}}>\n          <Heading as=\"h2\" className=\"h2 text-normal\">\n            <Link href={runnerListPath} data-testid=\"subhead-runner-list-path\">\n              Runners\n            </Link>\n            &nbsp;/ Edit {runnerName}\n          </Heading>\n          <Box sx={{borderBottom: '1px solid', borderColor: 'border.default', pt: '8px'}} />\n        </PageLayout.Header>\n        <PageLayout.Content>\n          {/* noValidate disables native browser validation, that causes inaccessible tooltip to appear */}\n          <form onSubmit={handleSubmit} noValidate data-hpc>\n            <Box sx={{display: 'flex', flexDirection: 'column', gap: 4}}>\n              <div data-testid=\"runner-name-input-section\">\n                <RunnerNameInput\n                  runnerName={selectedRunnerName}\n                  onChange={setSelectedRunnerName}\n                  validationError={runnerNameError}\n                  onValidationError={setRunnerNameError}\n                />\n              </div>\n              {runnerHasCustomImage && (\n                <Box\n                  sx={{display: 'flex', flexDirection: 'column', gap: 2}}\n                  data-testid=\"edit-runner-specifications-section\"\n                >\n                  <Heading as=\"h3\" className=\"h3 text-normal\">\n                    Runner specifications\n                  </Heading>\n                  <ImageVersionSelector\n                    imageVersions={imageVersions}\n                    selectedImageVersion={selectedImageVersion}\n                    setSelectedImageVersion={setSelectedImageVersion}\n                  />\n                </Box>\n              )}\n              <Box sx={{display: 'flex', flexDirection: 'column', gap: 2}}>\n                <Heading as=\"h3\" className=\"h3 text-normal\">\n                  Capacity\n                </Heading>\n                <RunnerMaxConcurrencyInput\n                  value={maxConcurrentJobs}\n                  min={maxConcurrentJobsMin}\n                  max={maxConcurrentJobsMax}\n                  gpuRunnerSelected={runnerHasGpuSpec}\n                  onChange={setMaxConcurrentJobs}\n                />\n              </Box>\n              <Box sx={{display: 'flex', flexDirection: 'column', gap: 2}} data-testid=\"runner-group-section\">\n                <Heading as=\"h3\" className=\"h3 text-normal\">\n                  Permissions\n                </Heading>\n                <RunnerGroupSelector\n                  value={selectedRunnerGroupId}\n                  setValue={setSelectedRunnerGroupId}\n                  groups={runnerGroups}\n                  validationError={runnerGroupError}\n                />\n              </Box>\n              <Box sx={{display: 'flex', flexDirection: 'column', gap: 2}}>\n                <Heading as=\"h3\" className=\"h3 text-normal\">\n                  Networking\n                </Heading>\n                <RunnerPublicIpCheckbox\n                  checked={isPublicIpEnabled}\n                  onChange={setIsPublicIpEnabled}\n                  isPublicIpAllowed={isPublicIpAllowed}\n                  usedIpCount={usedIpCount}\n                  totalIpCount={totalIpCount}\n                  runnerHasPublicIp={runnerHasPublicIp}\n                />\n              </Box>\n            </Box>\n            <Box sx={{display: 'flex', flexDirection: 'row', gap: 3, mt: 3}}>\n              <Button type=\"submit\" variant=\"primary\" data-testid=\"edit-runner-save-button\">\n                Save\n              </Button>\n              <Button type=\"button\" variant=\"default\" data-testid=\"edit-runner-cancel-button\" onClick={onCancel}>\n                Cancel\n              </Button>\n            </Box>\n          </form>\n        </PageLayout.Content>\n      </PageLayout>\n    </DocsContext.Provider>\n  )\n}\n\ntry{ EditRunner.displayName ||= 'EditRunner' } catch {}","import {Box, Button, FormControl, Text} from '@primer/react'\nimport {cloneElement, type ReactElement} from 'react'\nimport type {Platform} from '../../../types/platform'\nimport type {MachineSpec} from '../../../types/machine-spec'\n\n// Custom editor components are expected to implement this interface\nexport interface FieldProgressionFieldEditComponentProps<T> {\n  value: T | null\n  setValue: (value: T | null) => void\n  onSave?: () => void\n}\n\ninterface FieldProgressionFieldEditComponent extends ReactElement {\n  props: FieldProgressionFieldEditComponentProps<MachineSpec | Platform | string>\n}\n\nexport type FieldProgressionFieldProps = {\n  name: string\n  displayValue: string | null\n  isActive?: boolean\n  index?: number\n  onEditClick?: () => void\n  onSave?: () => void\n  error?: boolean\n  editComponent: FieldProgressionFieldEditComponent\n}\n\nexport default function FieldProgressionField({\n  name,\n  displayValue,\n  isActive,\n  index,\n  onEditClick,\n  onSave,\n  editComponent,\n  error,\n}: FieldProgressionFieldProps) {\n  // FieldProgression will pass an index prop to its editComponent\n  if (index === undefined) {\n    throw new Error('FieldProgressionField must be rendered as a child of a FieldProgression component')\n  }\n\n  const hasValue = displayValue !== null\n  const validationId = `field-progression-field-validation-${index}`\n\n  const activeField = cloneElement(editComponent, {onSave})\n  const inactiveField = (\n    <Box\n      sx={{\n        pl: 3,\n        pr: 3,\n      }}\n    >\n      {hasValue ? (\n        <span>{displayValue}</span>\n      ) : (\n        <Text sx={{color: 'fg.muted'}}>{`No ${name.toLowerCase()} selected`}</Text>\n      )}\n    </Box>\n  )\n\n  return (\n    <>\n      <Box\n        data-testid={`field-progression-field-${index}`}\n        className=\"d-flex flex-items-center\"\n        aria-describedby={validationId}\n        area-invalid={error}\n        sx={{\n          borderColor: error ? 'danger.fg' : 'border.default',\n          borderRadius: 2,\n          borderStyle: 'solid',\n          borderWidth: 1,\n          marginBottom: 2,\n          width: '100%',\n        }}\n      >\n        <FormControl sx={{width: '100%'}}>\n          <FormControl.Label\n            sx={{\n              p: 3,\n              pb: 0,\n            }}\n          >\n            {name}\n          </FormControl.Label>\n          <Box as=\"div\" sx={{pb: 3, width: '100%'}}>\n            {isActive ? activeField : inactiveField}\n          </Box>\n        </FormControl>\n        {!isActive && hasValue && (\n          <Button\n            sx={{\n              margin: 3,\n            }}\n            variant=\"invisible\"\n            onClick={onEditClick}\n          >\n            Edit\n          </Button>\n        )}\n      </Box>\n\n      {error && (\n        <FormControl.Validation\n          variant=\"error\"\n          sx={{pb: 3}}\n          id={validationId}\n        >{`${name} is required.`}</FormControl.Validation>\n      )}\n    </>\n  )\n}\n\ntry{ FieldProgressionField.displayName ||= 'FieldProgressionField' } catch {}","import {useCallback, useState} from 'react'\nimport FieldProgressionField, {type FieldProgressionFieldProps} from './FieldProgressionField'\n\ntype Props = {\n  fields: FieldProgressionFieldProps[]\n}\n\nexport default function FieldProgression({fields}: Props) {\n  const [currentFieldIndex, setCurrentFieldIndex] = useState(0)\n\n  const handleSave = useCallback(\n    (fieldIndex: number) => {\n      // reset subsequent fields\n      for (const field of fields.slice(fieldIndex + 1)) {\n        field.editComponent.props.setValue(null)\n      }\n      // move to the next field if there is one, else be done\n      setCurrentFieldIndex(fieldIndex + 1)\n    },\n    [fields],\n  )\n\n  const setActive = useCallback((fieldIndex: number) => {\n    setCurrentFieldIndex(fieldIndex)\n  }, [])\n\n  const fieldProgressionFieldsWithIndexesAdded = fields.map((field, index) => {\n    const isActive = index === currentFieldIndex\n    return (\n      <FieldProgressionField\n        {...field}\n        index={index}\n        key={index}\n        isActive={isActive}\n        onEditClick={() => setActive(index)}\n        onSave={() => handleSave(index)}\n      />\n    )\n  })\n\n  return <>{fieldProgressionFieldsWithIndexesAdded}</>\n}\n\ntry{ FieldProgression.displayName ||= 'FieldProgression' } catch {}","import {Box, Button, FormControl, Radio, RadioGroup} from '@primer/react'\nimport {useState, type ChangeEvent} from 'react'\nimport type {FieldProgressionFieldEditComponentProps} from './FieldProgressionField'\nimport {PlatformOsType, type Platform, platformOptions} from '../../../types/platform'\nimport {PlatformIcon} from './PlatformIcon'\nimport {MachineSpecArchitecture, type MachineSpec} from '../../../types/machine-spec'\nimport type {Image} from '../../../types/image'\n\ninterface IProps extends FieldProgressionFieldEditComponentProps<Platform> {\n  isCustomImageUploadingEnabled: boolean\n  machineSpecs: MachineSpec[]\n  images: {[key: string]: Image[]}\n  onValidationError: (error: boolean) => void\n}\n\nfunction isArmMachineSpecAvailable(machineSpecs: MachineSpec[]) {\n  return machineSpecs.some((machineSpec: MachineSpec) => machineSpec.architecture === MachineSpecArchitecture.ARM64)\n}\n\nfunction isLinuxArmAvailable(machineSpecs: MachineSpec[], images: {[key: string]: Image[]}) {\n  const linuxArmImages = Object.values(images)\n    .reduce((acc, value) => acc.concat(value), [])\n    .some(image => image.platform === 'linux-arm64')\n\n  return linuxArmImages && isArmMachineSpecAvailable(machineSpecs)\n}\n\nfunction isWindowsArmAvailable(machineSpecs: MachineSpec[], images: {[key: string]: Image[]}) {\n  const windowsArmImages = Object.values(images)\n    .reduce((acc, value) => acc.concat(value), [])\n    .some(image => image.platform === 'win-arm64')\n\n  return windowsArmImages && isArmMachineSpecAvailable(machineSpecs)\n}\n\nexport function PlatformSelector(props: IProps) {\n  const [editorValue, setEditorValue] = useState<Platform | null>(props.value || platformOptions[0] || null)\n\n  const handleInputChange = (selected: string | null, e: React.ChangeEvent<HTMLInputElement> | undefined) => {\n    if (e) {\n      const selectedPlatform = platformOptions.find(option => option.id === selected)\n      setEditorValue(selectedPlatform || null)\n    }\n  }\n\n  const handleSave = () => {\n    props.onValidationError(false)\n    if (!editorValue) {\n      props.onValidationError(true)\n      return\n    }\n\n    props.setValue(editorValue)\n    if (props.onSave) {\n      props.onSave()\n    }\n  }\n\n  const availableOptions = platformOptions.filter(option => {\n    const isLinuxArm64 = option.architecture === MachineSpecArchitecture.ARM64 && option.osType === PlatformOsType.Linux\n    const isWindowsArm64 =\n      option.architecture === MachineSpecArchitecture.ARM64 && option.osType === PlatformOsType.Windows\n    const isCustomPlatform = option.osType === PlatformOsType.Custom\n\n    return (\n      (props.isCustomImageUploadingEnabled || !isCustomPlatform) &&\n      (isLinuxArmAvailable(props.machineSpecs, props.images) || !isLinuxArm64) &&\n      (isWindowsArmAvailable(props.machineSpecs, props.images) || !isWindowsArm64)\n    )\n  })\n\n  return (\n    <>\n      <Box sx={{m: 3, mt: 2}} data-testid=\"platform-input\">\n        <RadioGroup\n          name={'platformRadioGroup'}\n          onChange={(selected, e: ChangeEvent<HTMLInputElement> | undefined) => {\n            handleInputChange(selected, e)\n          }}\n        >\n          <RadioGroup.Label visuallyHidden>Platform</RadioGroup.Label>\n          {availableOptions.map(option => (\n            <FormControl key={option.id}>\n              <Radio\n                value={option.id}\n                checked={option === editorValue}\n                data-testid={`platform-option-radio-${option.id}`}\n              />\n              <FormControl.Label sx={{fontWeight: 'normal'}} data-testid={`platform-option-label-${option.id}`}>\n                <PlatformIcon osType={option.osType} className=\"mr-2 color-fg-muted\" />\n                {option.displayName}\n              </FormControl.Label>\n            </FormControl>\n          ))}\n        </RadioGroup>\n      </Box>\n      <Box sx={{borderTopColor: 'border.default', borderTopStyle: 'solid', borderTopWidth: 1}}>\n        <Button sx={{m: 3, mb: 0}} onClick={handleSave} data-testid=\"platform-save-button\">\n          Save\n        </Button>\n      </Box>\n    </>\n  )\n}\n\ntry{ PlatformSelector.displayName ||= 'PlatformSelector' } catch {}","import type {PlatformId} from './platform'\n\nexport const imageUploadTypeOptions = [\n  {displayName: 'Linux', id: 'linux-x64' satisfies PlatformId},\n  {displayName: 'Windows', id: 'win-x64' satisfies PlatformId},\n] as const\nexport type ImageUploadType = (typeof imageUploadTypeOptions)[number]\n\nexport type ImageUploadValues = {\n  imageType: ImageUploadType\n  sasUri: string\n}\nexport const imageUploadValuesDefault = {\n  imageType: imageUploadTypeOptions[0],\n  sasUri: '',\n} as const satisfies ImageUploadValues\n","import {Box, FormControl, Select, TextInput} from '@primer/react'\nimport {type ImageUploadValues, type ImageUploadType, imageUploadTypeOptions} from '../../../types/image-upload'\nimport type {FormEvent} from 'react'\n\ninterface Props {\n  value: ImageUploadValues\n  onChange: (value: ImageUploadValues) => void\n  validationError: boolean\n  onValidationErrorChange: (value: boolean) => void\n}\n\nexport function ImageUploadValuesSelector({value, onChange, validationError, onValidationErrorChange}: Props) {\n  const sasUriValidationId = 'sas-uri-validation'\n  const selectedType: ImageUploadType = value.imageType\n\n  function handleImageTypeChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    const selectedImageType = imageUploadTypeOptions.find(option => option.id === e.target.value)\n    if (!selectedImageType) return\n    onChange({...value, imageType: selectedImageType})\n  }\n\n  function handleSasUriChange(e: FormEvent<HTMLInputElement>) {\n    onChange({...value, sasUri: e.currentTarget.value})\n    onValidationErrorChange(e.currentTarget.value.length === 0)\n  }\n\n  return (\n    <Box sx={{display: 'flex', flexDirection: 'column', gap: 2, m: 3, mt: 0}}>\n      <span>Using an Azure shared access signature (SAS) URI, you can provide the custom VHD for this runner.</span>\n      <Box sx={{display: 'flex', flexDirection: 'row', gap: 2}}>\n        <FormControl>\n          <FormControl.Label visuallyHidden={true}>Select platform for custom image upload</FormControl.Label>\n          <Select\n            onChange={handleImageTypeChange}\n            sx={{width: '100px'}}\n            value={selectedType.id}\n            data-testid=\"image-upload-image-type-select\"\n          >\n            {imageUploadTypeOptions.map(option => (\n              <Select.Option key={option.id} value={option.id}>\n                {option.displayName}\n              </Select.Option>\n            ))}\n          </Select>\n        </FormControl>\n        <FormControl required sx={{width: '100%'}}>\n          <FormControl.Label visuallyHidden={true}>Azure shared access signature URI</FormControl.Label>\n          <TextInput\n            aria-invalid={validationError}\n            data-testid=\"image-upload-uri-input\"\n            placeholder=\"Azure shared access signature URI\"\n            sx={{width: '100%'}}\n            value={value?.sasUri}\n            onChange={handleSasUriChange}\n          />\n          {validationError && (\n            <FormControl.Validation variant=\"error\" id={sasUriValidationId}>\n              Azure SAS URI may not be empty.\n            </FormControl.Validation>\n          )}\n        </FormControl>\n      </Box>\n    </Box>\n  )\n}\n\ntry{ ImageUploadValuesSelector.displayName ||= 'ImageUploadValuesSelector' } catch {}","import {\n  Box,\n  Button,\n  Checkbox,\n  TabNav,\n  FormControl,\n  TextInput,\n  Text,\n  RadioGroup,\n  Radio,\n  Link,\n  Label,\n} from '@primer/react'\nimport {SearchIcon} from '@primer/octicons-react'\nimport {useEffect, useState} from 'react'\nimport type {FieldProgressionFieldEditComponentProps} from './FieldProgressionField'\nimport {ImageVersionSelector, getAvailableImageVersions} from './ImageVersionSelector'\nimport {ImageUploadValuesSelector} from './ImageUploadValuesSelector'\nimport {ImageSource, type Image, type ImageVersion} from '../../../types/image'\nimport type {Platform} from '../../../types/platform'\nimport type {ImageUploadValues} from '../../../types/image-upload'\nimport {URLS} from '../../../helpers/constants'\n\ninterface IProps extends FieldProgressionFieldEditComponentProps<Image> {\n  allImages: {[key: string]: Image[]}\n  platform: Platform\n  onValidationError: (error: boolean) => void\n  imageVersion: ImageVersion | null\n  setImageVersion: (version: ImageVersion | null) => void\n  isImageGenerationFeatureEnabled: boolean\n  isImageGenerationEnabled: boolean\n  setIsImageGenerationEnabled: (isEnabled: boolean) => void\n  imageUploadValues: ImageUploadValues\n  setImageUploadValues: (options: ImageUploadValues) => void\n}\n\nenum ActiveTab {\n  GitHub = 'github',\n  Partner = 'partner',\n  Custom = 'custom',\n}\n\nconst tabsDescription = {\n  [ActiveTab.GitHub]: (\n    <>\n      <Text sx={{pt: 3}}>\n        GitHub images are kept up to date and secure, containing all the tools you need to get started building and\n        testing your applications.\n      </Text>\n      <Text sx={{pt: 1}} data-testid=\"image-selector-latest-caption\">\n        &ldquo;Latest&rdquo; tag matches with standard GitHub-hosted runners latest tag for the images.{' '}\n        <Link inline href={URLS.LATEST_IMAGE_TAG}>\n          Learn more about latest tags.\n        </Link>\n      </Text>\n    </>\n  ),\n  [ActiveTab.Partner]: (\n    <Text sx={{pt: 3}}>\n      Partner images are created and managed by members of GitHub&apos;s Technology Partner Program.{' '}\n      <Link inline href={URLS.PARTNER_IMAGES_REPO}>\n        Learn more about partner images.\n      </Link>\n    </Text>\n  ),\n  [ActiveTab.Custom]: (\n    <Text sx={{pt: 3}}>\n      Custom images are created by the user using a workflow and available in this area once they finish running.\n    </Text>\n  ),\n} as const\n\nconst imageSourceToTabMapping = {\n  [ImageSource.Curated]: ActiveTab.GitHub,\n  [ImageSource.Marketplace]: ActiveTab.Partner,\n  [ImageSource.Custom]: ActiveTab.Custom,\n} as const\n\nfunction getStartTab(selectedImage: Image | null, filteredImages: {[key: string]: Image[]}) {\n  // first we try to set default tab to the one that contains selected image\n  if (selectedImage) {\n    return imageSourceToTabMapping[selectedImage.source]\n  }\n\n  // if no image selected, we try to set default tab to the first one that contains images\n  for (const tab of Object.keys(filteredImages)) {\n    if (filteredImages[tab]?.length) {\n      return tab as ActiveTab\n    }\n  }\n\n  // if none of above - fault in into GitHub-owned tab\n  return ActiveTab.GitHub\n}\n\nfunction getImagesForTab(tab: ActiveTab, filteredImages: {[key: string]: Image[]}) {\n  return filteredImages[tab]\n}\n\nfunction getPreselectedImageVersion(\n  currentImage: Image,\n  savedImage: Image | null,\n  savedImageVersion: ImageVersion | null,\n) {\n  // if selected image is the one that was saved before - we preselect the saved image version,\n  // otherwise we preselect the latest image version\n  if (currentImage.id === savedImage?.id) {\n    return savedImageVersion\n  }\n\n  return currentImage?.imageVersions?.[0] ?? null\n}\n\nexport default function ImageSelector({\n  allImages,\n  platform,\n  value,\n  setValue,\n  onSave,\n  onValidationError,\n  imageVersion,\n  setImageVersion,\n  isImageGenerationFeatureEnabled,\n  isImageGenerationEnabled,\n  setIsImageGenerationEnabled,\n  imageUploadValues,\n  setImageUploadValues,\n}: IProps) {\n  const [selectedImage, setSelectedImage] = useState<Image | null>(value)\n  const [selectedImageVersion, setSelectedImageVersion] = useState<ImageVersion | null>(imageVersion)\n  const [selectedIsImageGenerationEnabled, setSelectedIsImageGenerationEnabled] =\n    useState<boolean>(isImageGenerationEnabled)\n  const [selectedImageUploadValues, setSelectedImageUploadValues] = useState<ImageUploadValues>(imageUploadValues)\n  const [imageUploadError, setImageUploadError] = useState<boolean>(false)\n\n  const isImageUpload = platform.id === 'custom'\n\n  let githubImages = allImages[ActiveTab.GitHub]?.filter(image => image.platform === platform.id) ?? []\n  const partnerImages = allImages[ActiveTab.Partner]?.filter(image => image.platform === platform.id) ?? []\n  const customImages =\n    allImages[ActiveTab.Custom]?.filter(image => {\n      if (!image.imageVersions?.length) {\n        return false\n      }\n      const availableImageVersions = getAvailableImageVersions(image.imageVersions)\n\n      // if there are no available image versions OR the only available image version is 'latest', we don't allow creating runner.\n      // `latest` version is added by us to pin runner to the latest available custom image version.\n      // If there are no non-failed/non-deleting versions, `latest` has nothing to resolve to on the Runner service side.\n      const hasAvailableImageVersions = availableImageVersions.filter(v => v.version !== 'latest').length > 0\n\n      return image.platform === platform.id && hasAvailableImageVersions\n    }) ?? []\n\n  githubImages = githubImages.map(image => {\n    const displayNamePrefix =\n      (image.id.includes('ubuntu') && 'Ubuntu') || (image.id.includes('windows') && 'Windows Server') || ''\n\n    return {\n      ...image,\n      displayName: `${displayNamePrefix} ${image.displayName}`,\n    }\n  })\n\n  // order of images is important for proper default tab selection\n  const filteredAndSortedImages = {\n    [ActiveTab.GitHub]: githubImages,\n    [ActiveTab.Partner]: partnerImages,\n    [ActiveTab.Custom]: customImages,\n  }\n\n  const [activeTab, setActiveTab] = useState<ActiveTab>(getStartTab(value, filteredAndSortedImages))\n  const [currentTabImages, setCurrentTabImages] = useState<Image[]>(\n    getImagesForTab(activeTab, filteredAndSortedImages) ?? [],\n  )\n\n  function handleSave() {\n    onValidationError(false)\n    setImageUploadError(false)\n\n    if (isImageUpload && (!selectedImageUploadValues || !selectedImageUploadValues.sasUri)) {\n      setImageUploadError(true)\n      return\n    }\n\n    if (!isImageUpload && (!selectedImage || (selectedImage.source === ImageSource.Custom && !selectedImageVersion))) {\n      onValidationError(true)\n      return\n    }\n\n    setValue(selectedImage)\n    setImageVersion(selectedImageVersion)\n    setIsImageGenerationEnabled(selectedIsImageGenerationEnabled)\n    setImageUploadValues(selectedImageUploadValues)\n\n    if (onSave) {\n      onSave()\n    }\n  }\n\n  function onTabClick(e: React.MouseEvent) {\n    const tab = e.currentTarget.getAttribute('id')\n    if (tab) {\n      setActiveTab(tab as ActiveTab)\n      setCurrentTabImages(getImagesForTab(tab as ActiveTab, filteredAndSortedImages) ?? [])\n    }\n  }\n\n  useEffect(() => {\n    // when the tab changes - we need to preselect either first image on the tab if there was no saved image yet\n    // or we preselect only saved image and no other images on tabs to not confuse customer that we changed image for them\n    const preSelectedImageForTab = value ?? currentTabImages[0]\n    setSelectedImage(preSelectedImageForTab ?? null)\n\n    // keeping selectedImageVersion in sync with different image types.\n    // It shouldn't have any value if we select image without versions,\n    // and should have value if we select image with versions.\n    preSelectedImageForTab?.imageVersions?.length\n      ? setSelectedImageVersion(getPreselectedImageVersion(preSelectedImageForTab, value, imageVersion))\n      : setSelectedImageVersion(null)\n\n    // keep selectedIsImageGenerationEnabled in sync with different image types\n    // it should be unchecked if we select image that does not support\n    // image generation\n    if (!preSelectedImageForTab || !preSelectedImageForTab?.isImageGenerationSupported) {\n      setSelectedIsImageGenerationEnabled(false)\n    }\n  }, [currentTabImages, setSelectedImageVersion, setSelectedIsImageGenerationEnabled, value, imageVersion])\n\n  const onSelectChange = (image: Image | null) => {\n    onValidationError(false)\n    setSelectedImage(image)\n\n    // keeping selectedImageVersion in sync with different image types.\n    // It shouldn't have any value if we select image without versions,\n    // and should have value if we select image with versions.\n    image?.imageVersions?.length\n      ? setSelectedImageVersion(getPreselectedImageVersion(image, value, imageVersion))\n      : setSelectedImageVersion(null)\n\n    // keeping selectedIsImageGenerationEnabled in sync with different image\n    // types. It should be unchecked if we select an image that does not support\n    // image generation\n    if (!image || !image?.isImageGenerationSupported) {\n      setSelectedIsImageGenerationEnabled(false)\n    }\n  }\n\n  return (\n    <>\n      {isImageUpload && (\n        <div data-testid=\"image-upload-values\">\n          <ImageUploadValuesSelector\n            value={selectedImageUploadValues}\n            onChange={setSelectedImageUploadValues}\n            validationError={imageUploadError}\n            onValidationErrorChange={setImageUploadError}\n          />\n        </div>\n      )}\n\n      {!isImageUpload && (\n        <>\n          <Box sx={{paddingX: 0, paddingBottom: 3, paddingTop: 2}} data-testid=\"image-selector-tabs\">\n            <TabNav\n              sx={{\n                paddingX: '8px',\n                '> nav': {\n                  marginX: '-8px',\n                  paddingX: '8px',\n                },\n              }}\n              aria-label=\"Image\"\n            >\n              {!!githubImages?.length && (\n                <ImageTab\n                  tabId={ActiveTab.GitHub}\n                  tabHeader=\"GitHub-owned\"\n                  activeTab={activeTab}\n                  onTabClick={onTabClick}\n                />\n              )}\n              {!!partnerImages?.length && (\n                <ImageTab tabId={ActiveTab.Partner} tabHeader=\"Partner\" activeTab={activeTab} onTabClick={onTabClick} />\n              )}\n              {!!customImages?.length && (\n                <ImageTab tabId={ActiveTab.Custom} tabHeader=\"Custom\" activeTab={activeTab} onTabClick={onTabClick} />\n              )}\n            </TabNav>\n          </Box>\n          <ImageTabContent\n            images={currentTabImages}\n            preSelectedImage={selectedImage}\n            onImageSelect={onSelectChange}\n            tabDescription={tabsDescription[activeTab]}\n          />\n          {!!isImageGenerationFeatureEnabled && (\n            <Box sx={{m: 3, mt: 0}}>\n              <FormControl disabled={!selectedImage || !selectedImage.isImageGenerationSupported}>\n                <Checkbox\n                  aria-label=\"Enable this runner to generate custom images\"\n                  checked={selectedIsImageGenerationEnabled}\n                  name=\"selectedIsImageGenerationEnabled\"\n                  value=\"default\"\n                  onChange={event => setSelectedIsImageGenerationEnabled(event.target.checked)}\n                  data-testid=\"runner-enable-image-generation-checkbox\"\n                />\n                <FormControl.Label sx={{pb: 1}}>\n                  Enable this runner to generate custom images{' '}\n                  <Label sx={{mx: 1}} variant=\"success\">\n                    Alpha\n                  </Label>\n                </FormControl.Label>\n                <FormControl.Caption>\n                  <Box sx={{display: 'flex', flexDirection: 'column', gap: 3}}>\n                    <span>\n                      Custom image generation is supported for Linux x64 and Windows x64 and requires a base image from\n                      the &quot;Partner&quot; images tab.\n                    </span>\n                  </Box>\n                </FormControl.Caption>\n              </FormControl>\n            </Box>\n          )}\n        </>\n      )}\n\n      <Box\n        sx={{\n          gap: 3,\n          display: 'flex',\n          flexDirection: 'row',\n          borderTopColor: 'border.default',\n          borderTopStyle: 'solid',\n          borderTopWidth: 1,\n          padding: 3,\n          paddingBottom: 0,\n          width: '100%',\n        }}\n      >\n        {activeTab === ActiveTab.Custom && !!selectedImage && selectedImage.source === ImageSource.Custom && (\n          <ImageVersionSelector\n            imageVersions={getAvailableImageVersions(selectedImage.imageVersions ?? [])}\n            selectedImageVersion={selectedImageVersion}\n            setSelectedImageVersion={setSelectedImageVersion}\n            hideLabel={true} /* visually hide label for version selector embedded in image selector */\n          />\n        )}\n        <Button data-testid=\"image-save-button\" onClick={handleSave}>\n          Save\n        </Button>\n      </Box>\n    </>\n  )\n}\n\ntype ImageTabProps = {\n  tabId: ActiveTab\n  tabHeader: string\n  activeTab: ActiveTab\n  onTabClick: (e: React.MouseEvent) => void\n}\n\nfunction ImageTab({tabId, tabHeader, activeTab, onTabClick}: ImageTabProps) {\n  return (\n    <TabNav.Link\n      id={tabId}\n      sx={{cursor: 'pointer'}}\n      selected={activeTab === tabId}\n      aria-controls=\"image-selector-tab-content\"\n      onClick={onTabClick}\n      as={Button}\n    >\n      {tabHeader}\n    </TabNav.Link>\n  )\n}\n\nfunction showLabelForImage(image: Image | null) {\n  if (!image) {\n    return\n  }\n\n  if (image.id === 'ubuntu-latest' || image.id === 'windows-latest') {\n    return (\n      <Label sx={{mx: 1}} data-testid=\"image-selector-latest-label\">\n        Latest\n      </Label>\n    )\n  }\n\n  if (image.id === 'ubuntu-24.04') {\n    return (\n      <Label sx={{mx: 1}} variant=\"success\">\n        Beta\n      </Label>\n    )\n  }\n}\n\ntype ImageTabContentProps = {\n  images: Image[]\n  preSelectedImage: Image | null\n  onImageSelect: (image: Image | null) => void\n  tabDescription: JSX.Element\n}\n\nfunction ImageTabContent({images, onImageSelect, preSelectedImage, tabDescription}: ImageTabContentProps) {\n  const [imageFilter, setImageFilter] = useState<string | null>(null)\n\n  const filteredImages = images.filter(image =>\n    imageFilter === null ? image : image.displayName.toLowerCase().includes(imageFilter.toLowerCase()),\n  )\n\n  function onRadioChange(selected: string | null) {\n    const selectedImage = images.find(image => image.id.toString() === selected)\n    onImageSelect(selectedImage ?? null)\n  }\n\n  return (\n    <Box sx={{m: 3, mt: 0}} data-testid=\"image-selector-tab-content\">\n      <Box sx={{display: 'flex', flexDirection: 'column', pb: 3}}>\n        <span className=\"sr-only\" id=\"images-filter\">\n          Filter runner images\n        </span>\n        <TextInput\n          area-labelledby=\"images-filter\"\n          onChange={event => setImageFilter(event.target.value)}\n          leadingVisual={SearchIcon}\n          placeholder=\"Filter runner images\"\n        />\n        {tabDescription}\n        <div role=\"status\" style={{marginTop: 6}}>\n          {filteredImages.length === 0 ? (\n            <Text sx={{color: 'fg.muted'}}>No images match that filter</Text>\n          ) : (\n            <span className=\"sr-only\">{filteredImages.length} images match that filter</span>\n          )}\n        </div>\n      </Box>\n      <Box sx={{overflowY: 'auto', maxHeight: '33vh'}}>\n        {images.length === 0 ? (\n          <Text sx={{color: 'danger.fg'}} data-testid=\"no-images-error\">\n            No images available.\n          </Text>\n        ) : (\n          !!filteredImages && (\n            <RadioGroup name=\"image-selector\" onChange={onRadioChange} required>\n              <RadioGroup.Label visuallyHidden>Runner images</RadioGroup.Label>\n              {filteredImages.map(image => (\n                <FormControl key={image.id}>\n                  <Radio\n                    value={image.id}\n                    checked={preSelectedImage?.id === image.id}\n                    data-testid={`image-option-radio-${image.id}`}\n                  />\n                  <FormControl.Label sx={{fontWeight: 'normal'}} data-testid={`image-option-label-${image.id}`}>\n                    {image.displayName}\n                    {showLabelForImage(image)}\n                  </FormControl.Label>\n                </FormControl>\n              ))}\n            </RadioGroup>\n          )\n        )}\n      </Box>\n    </Box>\n  )\n}\n\ntry{ ImageSelector.displayName ||= 'ImageSelector' } catch {}\ntry{ ImageTab.displayName ||= 'ImageTab' } catch {}\ntry{ ImageTabContent.displayName ||= 'ImageTabContent' } catch {}","import {Box, Button, Link, Text, TabNav, RadioGroup, FormControl, Radio} from '@primer/react'\nimport {useEffect, useState} from 'react'\nimport type {FieldProgressionFieldEditComponentProps} from './FieldProgressionField'\nimport type {MachineSpec} from '../../../types/machine-spec'\nimport {ImageSource, type Image} from '../../../types/image'\nimport type {Platform} from '../../../types/platform'\n\nconst tabs = [\n  {name: 'General', specType: 'basic'} as const,\n  {name: 'GPU-powered', specType: 'gpu_optimized'} as const,\n] as const satisfies ReadonlyArray<{specType: MachineSpec['type']; name: string}>\n\ntype Tab = (typeof tabs)[number]\n\nexport default function MachineSpecSelect({\n  value,\n  setValue,\n  onSave,\n  options,\n  runnerImage,\n  platform,\n  onSelect,\n  isImageGenerationEnabled,\n}: FieldProgressionFieldEditComponentProps<MachineSpec> & {\n  options: MachineSpec[]\n  platform: Platform | null\n  runnerImage: Image | null\n  onSelect: () => void\n  isImageGenerationEnabled: boolean\n}) {\n  const [selectedSpec, setSelectedSpec] = useState<MachineSpec | null>(value)\n  const [selectedTab, setSelectedTab] = useState<Tab | null>(null)\n\n  // determine which specs to show for this runner image, which spec types to show as tabs (e.g. basic, gpu type specs),\n  // and which tab to make active (defaults to the first tab in case the selected tab is not available for this runner image)\n  const filteredSpecs = filterSpecs({machineSpecs: options, runnerImage, platform, isImageGenerationEnabled})\n  const filteredTabs = tabs.filter(tab => filteredSpecs.some(spec => spec.type === tab.specType))\n  const activeTab =\n    filteredTabs.find(tab => tab.specType === selectedTab?.specType) ??\n    filteredTabs.find(tab => tab.specType === selectedSpec?.type) ??\n    filteredTabs[0]\n  const activeTabSpecs = filteredSpecs.filter(spec => spec.type === activeTab?.specType)\n\n  const handleRadioSelect = (id: string | null) => {\n    const matchingSpec = activeTabSpecs.find(spec => spec.id === id) ?? null\n    setSelectedSpec(matchingSpec)\n    onSelect()\n  }\n\n  const handleSave = () => {\n    setValue(selectedSpec)\n    onSave?.()\n\n    // treat clicking save as a select event, in case a radio option was selected,\n    // but the user forgot to click save\n    onSelect()\n  }\n\n  useEffect(() => {\n    // if there is no selected spec yet, preselect first spec on the tab\n    if (!selectedSpec && activeTabSpecs.length > 0) {\n      setSelectedSpec(activeTabSpecs[0] ?? null)\n    }\n  }, [activeTabSpecs, selectedSpec])\n\n  return (\n    <div data-testid=\"runner-machine-spec-select\">\n      {filteredTabs.length > 1 && (\n        <TabNav\n          sx={{\n            paddingTop: 2,\n            paddingX: '8px',\n            '> nav': {\n              marginX: '-8px',\n              paddingX: '8px',\n            },\n          }}\n          data-testid=\"runner-machine-spec-tabs\"\n          aria-label=\"Size\"\n        >\n          {filteredTabs.map(tab => (\n            <TabNav.Link\n              data-testid={`runner-machine-spec-tab-${tab.specType}`}\n              sx={{\n                cursor: tab === activeTab ? 'default' : 'pointer',\n              }}\n              key={tab.name}\n              selected={activeTab === tab}\n              onClick={() => setSelectedTab(tab)}\n              aria-controls=\"runner-machine-spec-tabs\"\n              as={Button}\n            >\n              {tab.name}\n            </TabNav.Link>\n          ))}\n        </TabNav>\n      )}\n\n      <RadioGroup\n        name=\"runner-machine-spec-radio-group\"\n        sx={{padding: 3, display: 'flex', flexDirection: 'column', gap: 2}}\n        onChange={handleRadioSelect}\n      >\n        <RadioGroup.Label visuallyHidden>Size</RadioGroup.Label>\n        {activeTabSpecs\n          .map(spec => ({...spec, displayText: machineSpecDisplayText(spec)}))\n          .map(spec => (\n            <FormControl key={spec.id} sx={{paddingBottom: 2}}>\n              <Radio\n                checked={selectedSpec?.id === spec.id}\n                value={spec.id}\n                data-testid={`runner-machine-spec-radio-${spec.id}`}\n                aria-labelledby=\"size\"\n              />\n              <FormControl.Label>\n                <Text sx={{display: 'block'}} data-testid={`runner-machine-spec-radio-text-primary-${spec.id}`}>\n                  {spec.displayText.radioButtonPrimary}\n                </Text>\n                <Text\n                  className=\"text-small text-normal\"\n                  sx={{color: 'fg.subtle', display: 'block'}}\n                  data-testid={`runner-machine-spec-radio-text-secondary-${spec.id}`}\n                >\n                  {spec.displayText.radioButtonSecondary}\n                </Text>\n                {spec.documentationUrl && (\n                  <Link\n                    className=\"text-small text-normal\"\n                    href={spec.documentationUrl}\n                    data-testid={`runner-machine-spec-radio-documentation-link-${spec.id}`}\n                  >\n                    {spec.id}\n                  </Link>\n                )}\n              </FormControl.Label>\n            </FormControl>\n          ))}\n      </RadioGroup>\n\n      <Box\n        sx={{\n          borderTopColor: 'border.default',\n          borderTopStyle: 'solid',\n          borderTopWidth: 1,\n          padding: 3,\n          paddingBottom: 0,\n          width: '100%',\n        }}\n      >\n        <Button data-testid=\"runner-machine-spec-save-button\" onClick={handleSave} disabled={!selectedSpec}>\n          Save\n        </Button>\n      </Box>\n    </div>\n  )\n}\n\nexport function machineSpecDisplayText(spec: MachineSpec) {\n  if (spec.type === 'gpu_optimized' && spec.gpu) {\n    return {\n      radioButtonPrimary: `${spec.gpu?.count} x ${spec.gpu?.name} · ${spec.gpu?.memoryGb} GB VRAM`,\n      radioButtonSecondary: `${spec.cpuCores}-core · ${spec.memoryGb} GB RAM · ${spec.storageGb} GB SSD`,\n      closedBoxSummary: `GPU-powered, ${spec.gpu?.count} x ${spec.gpu?.name} · ${spec.cpuCores}-core\n         · ${spec.gpu?.memoryGb} GB VRAM · ${spec.memoryGb} GB RAM · ${spec.storageGb} GB SSD`,\n    } as const\n  }\n\n  return {\n    radioButtonPrimary: `${spec.cpuCores}-core`,\n    radioButtonSecondary: `${spec.memoryGb} GB RAM · ${spec.storageGb} GB SSD`,\n    closedBoxSummary: `${spec.cpuCores}-core · ${spec.memoryGb} GB RAM · ${spec.storageGb} GB SSD`,\n  } as const\n}\n\nfunction filterSpecs(input: {\n  machineSpecs: MachineSpec[]\n  runnerImage: Image | null\n  platform: Platform | null\n  isImageGenerationEnabled: boolean\n}) {\n  const isImageRestrictedForGpu =\n    input.runnerImage?.source === ImageSource.Curated && input.runnerImage?.platform !== 'custom'\n\n  return (\n    input.machineSpecs\n      .map(spec => ({\n        ...spec,\n        // If image generation is enabled, we need to truncate the machine spec storage size to 1024GB.\n        // This ensures that the displayed value and validation matches the backend logic.\n        storageGb: input.isImageGenerationEnabled ? Math.min(spec.storageGb, 1024) : spec.storageGb,\n      }))\n      // only include specs that can satisfy the min storage requirement for the selected image\n      .filter(spec => input.runnerImage === null || spec.storageGb >= input.runnerImage.sizeGb)\n      // Curated images don't play well with GPU SKUs, so we hide GPU specs if the selected image is curated\n      .filter(spec => !(isImageRestrictedForGpu && spec.type === 'gpu_optimized'))\n      // x64 platform supports only x64 specs, and arm64 platform supports only arm64 specs\n      .filter(spec => spec.architecture === input.platform?.architecture)\n  )\n}\n\ntry{ MachineSpecSelect.displayName ||= 'MachineSpecSelect' } catch {}","import {useEffect, useState} from 'react'\nimport {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {useNavigate, useSearchParams} from '@github-ui/use-navigate'\nimport {Box, PageLayout, Button, Link, Flash, Heading} from '@primer/react'\n\nimport {RunnerNameInput} from '../views/components/shared/RunnerNameInput'\nimport FieldProgression from '../views/components/shared/FieldProgression'\nimport {PlatformSelector} from '../views/components/shared/PlatformSelector'\nimport ImageSelector from '../views/components/shared/ImageSelector'\nimport MachineSpecSelect, {machineSpecDisplayText} from '../views/components/shared/MachineSpecSelect'\nimport {createRunner} from '../services/runner'\nimport {ImageSource} from '../types/image'\nimport {\n  RunnerMaxConcurrencyInput,\n  getMaxRunnerConcurrencyError,\n} from '../views/components/shared/RunnerMaxConcurrencyInput'\nimport type {RunnerCreateForm, RunnerGroup} from '../types/runner'\nimport type {Image, ImageVersion} from '../types/image'\nimport {SETTINGS, ERRORS} from '../helpers/constants'\nimport {RunnerPublicIpCheckbox} from '../views/components/shared/RunnerPublicIpCheckbox'\nimport type {Platform} from '../types/platform'\nimport {type ImageUploadValues, imageUploadValuesDefault} from '../types/image-upload'\nimport type {MachineSpec} from '../types/machine-spec'\nimport {RunnerGroupSelector} from '../views/components/shared/RunnerGroupSelector'\nimport {DocsContext} from '../views/components/context'\nimport {runnerDetailsPath} from '../helpers/paths'\n\nexport interface NewRunnerPayload {\n  runnerListPath: string\n  entityLogin: string\n  docsUrlBase: string\n  isPublicIpAllowed: boolean\n  usedIpCount: number\n  totalIpCount: number\n  isCustomImageUploadingEnabled: boolean\n  machineSpecs: MachineSpec[]\n  runnerGroups: RunnerGroup[]\n  images: {[key: string]: Image[]}\n  maxConcurrentJobsDefault: number\n  maxConcurrentJobsMin: number\n  maxConcurrentJobsDefaultMax: number\n  maxConcurrentJobsGpuMax: number\n  isEnterprise: boolean\n  isCustomImagesFeatureEnabled: boolean\n}\n\nexport function NewRunner() {\n  const {\n    runnerListPath,\n    entityLogin,\n    docsUrlBase,\n    usedIpCount,\n    totalIpCount,\n    isPublicIpAllowed,\n    runnerGroups,\n    maxConcurrentJobsDefault,\n    maxConcurrentJobsMin,\n    maxConcurrentJobsDefaultMax,\n    maxConcurrentJobsGpuMax,\n    machineSpecs,\n    isCustomImageUploadingEnabled,\n    images,\n    isEnterprise,\n    isCustomImagesFeatureEnabled,\n  } = useRoutePayload<NewRunnerPayload>()\n  const [runnerName, setRunnerName] = useState<string>('')\n  const [isPublicIpEnabled, setIsPublicIpEnabled] = useState<boolean>(false)\n  const [selectedPlatform, setSelectedPlatform] = useState<Platform | null>(null)\n  const [selectedImage, setSelectedImage] = useState<Image | null>(null)\n  const [selectedImageVersion, setSelectedImageVersion] = useState<ImageVersion | null>(null)\n  const [isImageGenerationEnabled, setIsImageGenerationEnabled] = useState<boolean>(false)\n  const [imageUploadValues, setImageUploadValues] = useState<ImageUploadValues>(imageUploadValuesDefault)\n  const [selectedMachineSpec, setSelectedMachineSpec] = useState<MachineSpec | null>(null)\n  const [formError, setFormError] = useState<string>('')\n  const [runnerNameError, setRunnerNameError] = useState<boolean>(false)\n  const [maxConcurrentJobs, setMaxConcurrentJobs] = useState<number>(maxConcurrentJobsDefault)\n  const [machineSpecError, setMachineSpecError] = useState<boolean>(false)\n  const [imageError, setImageError] = useState<boolean>(false)\n  const [platformError, setPlatformError] = useState<boolean>(false)\n\n  // it's not possible to have group with ID 0, so we use it to validate if no groups are available\n  const [runnerGroupId, setRunnerGroupId] = useState<number>(runnerGroups.length ? SETTINGS.DEFAULT_RUNNER_GROUP_ID : 0)\n  const [runnerGroupError, setRunnerGroupError] = useState<boolean>(false)\n\n  const isImageUpload = selectedPlatform?.id === 'custom'\n  const selectedImageDisplayName = isImageUpload\n    ? getCustomImageDisplayName(imageUploadValues)\n    : getImageDisplayName(selectedImage, selectedImageVersion, isImageGenerationEnabled)\n\n  const gpuRunnerSelected = selectedMachineSpec?.type === 'gpu_optimized'\n\n  const maxConcurrentJobsMax = gpuRunnerSelected ? maxConcurrentJobsGpuMax : maxConcurrentJobsDefaultMax\n\n  const navigate = useNavigate()\n\n  const [searchParams] = useSearchParams()\n  useEffect(() => {\n    const presetRunnerGroupId = getPresetRunnerGroupId(searchParams)\n    if (presetRunnerGroupId !== undefined && runnerGroups.some(group => group.id === presetRunnerGroupId)) {\n      setRunnerGroupId(presetRunnerGroupId)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []) // run only once on component mount\n\n  const resetFormError = () => {\n    setFormError('')\n  }\n\n  const isFormValid = () => {\n    let validForm = true\n    if (!runnerName || runnerNameError) {\n      setRunnerNameError(true)\n      validForm = false\n    }\n\n    const isGroupInvalid = !runnerGroups.find(group => group.id === runnerGroupId)\n    if (!runnerGroupId || isGroupInvalid || runnerGroupError) {\n      setRunnerGroupError(true)\n      validForm = false\n    }\n\n    if (!selectedPlatform) {\n      setPlatformError(true)\n      validForm = false\n    }\n\n    // unless the user is uploading a new custom image, we require an image to be selected\n    if (!isImageUpload) {\n      if (!selectedImage) {\n        setImageError(true)\n        validForm = false\n      }\n\n      // if the selected image is a previously uploaded custom image, require a version to be selected\n      if (selectedImage && selectedImage.source === ImageSource.Custom && !selectedImageVersion) {\n        setImageError(true)\n        validForm = false\n      }\n    }\n\n    if (!selectedMachineSpec) {\n      setMachineSpecError(true)\n      validForm = false\n    }\n\n    const maxRunnerConcurrencyError = getMaxRunnerConcurrencyError({\n      value: maxConcurrentJobs,\n      min: maxConcurrentJobsMin,\n      max: maxConcurrentJobsMax,\n      gpuRunnerSelected,\n    })\n    if (maxRunnerConcurrencyError) {\n      validForm = false\n    }\n\n    return validForm\n  }\n\n  const handleSubmit = async (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault()\n    resetFormError()\n\n    if (!isFormValid()) {\n      setFormError(ERRORS.INVALID_FORM)\n      return\n    }\n\n    const runner: RunnerCreateForm = {\n      name: runnerName,\n      runnerGroupId,\n      maximumConcurrentJobs: maxConcurrentJobs,\n      machineSpecId: selectedMachineSpec!.id,\n      isPublicIpEnabled,\n      ...(isImageUpload\n        ? {\n            imageSource: ImageSource.Custom,\n            imageId: null,\n            imageVersion: null,\n            imageName: null,\n            imageSasUri: imageUploadValues.sasUri,\n            platform: imageUploadValues.imageType.id,\n            isImageGenerationEnabled: false,\n          }\n        : {\n            imageSource: selectedImage!.source,\n            imageId: selectedImage!.id,\n            imageVersion: selectedImageVersion?.version ?? null, // null will be transformed to \"latest\" for non-custom images\n            imageName: selectedImage!.displayName, // is needed to determine on a backend if persistent disk should be used\n            imageSasUri: '',\n            platform: selectedPlatform!.id,\n            isImageGenerationEnabled,\n          }),\n    }\n\n    try {\n      const runnerId = await createRunner(runner, entityLogin, isEnterprise)\n      navigate(runnerDetailsPath({isEnterprise, entityLogin, runnerId}))\n    } catch (error: unknown) {\n      setFormError((error as Error)?.message ?? ERRORS.CREATION_FAILED_REASON_UNKNOWN)\n    }\n  }\n\n  return (\n    <DocsContext.Provider value={docsUrlBase}>\n      {formError && <Flash variant=\"danger\">{formError}</Flash>}\n      <PageLayout padding=\"none\">\n        <PageLayout.Header sx={{mb: '16px !important'}}>\n          <Heading as=\"h2\" className=\"h2 text-normal\">\n            <Link href={runnerListPath} data-testid=\"subhead-runner-list-path\">\n              Runners\n            </Link>\n            &nbsp;/ Create new runner\n          </Heading>\n          <Box sx={{borderBottom: '1px solid', borderColor: 'border.default', pt: '8px'}} />\n        </PageLayout.Header>\n        <PageLayout.Content>\n          {/* noValidate disables native browser validation, that causes inaccessible tooltip to appear */}\n          <form onSubmit={handleSubmit} noValidate data-hpc>\n            <Box sx={{display: 'flex', flexDirection: 'column', gap: 4}}>\n              <div data-testid=\"runner-name-input-section\">\n                <RunnerNameInput\n                  runnerName={runnerName}\n                  onChange={setRunnerName}\n                  validationError={runnerNameError}\n                  onValidationError={setRunnerNameError}\n                />\n              </div>\n              <Box sx={{display: 'flex', flexDirection: 'column'}}>\n                <Heading as=\"h3\" className=\"h3 text-normal\" sx={{mb: 2}}>\n                  Runner specifications\n                </Heading>\n                <FieldProgression\n                  fields={[\n                    {\n                      name: 'Platform',\n                      displayValue: selectedPlatform?.displayName ?? null,\n                      error: platformError,\n                      editComponent: (\n                        <PlatformSelector\n                          value={selectedPlatform}\n                          setValue={setSelectedPlatform}\n                          isCustomImageUploadingEnabled={isCustomImageUploadingEnabled}\n                          machineSpecs={machineSpecs}\n                          images={images}\n                          onValidationError={setPlatformError}\n                        />\n                      ),\n                    },\n                    {\n                      name: 'Image',\n                      displayValue: selectedImageDisplayName,\n                      error: imageError,\n                      editComponent: (\n                        <ImageSelector\n                          allImages={images}\n                          platform={selectedPlatform!}\n                          value={selectedImage}\n                          setValue={setSelectedImage}\n                          onValidationError={setImageError}\n                          isImageGenerationEnabled={isImageGenerationEnabled}\n                          setIsImageGenerationEnabled={setIsImageGenerationEnabled}\n                          imageVersion={selectedImageVersion}\n                          setImageVersion={setSelectedImageVersion}\n                          imageUploadValues={imageUploadValues}\n                          setImageUploadValues={setImageUploadValues}\n                          isImageGenerationFeatureEnabled={isCustomImagesFeatureEnabled}\n                        />\n                      ),\n                    },\n                    {\n                      name: 'Size',\n                      displayValue: selectedMachineSpec\n                        ? machineSpecDisplayText(selectedMachineSpec).closedBoxSummary\n                        : null,\n                      error: machineSpecError,\n                      editComponent: (\n                        <MachineSpecSelect\n                          value={selectedMachineSpec}\n                          setValue={setSelectedMachineSpec}\n                          onSelect={() => setMachineSpecError(false)}\n                          runnerImage={selectedImage}\n                          platform={selectedPlatform}\n                          options={machineSpecs}\n                          isImageGenerationEnabled={isCustomImagesFeatureEnabled && isImageGenerationEnabled}\n                        />\n                      ),\n                    },\n                  ]}\n                />\n              </Box>\n              <Box sx={{display: 'flex', flexDirection: 'column', gap: 2}}>\n                <Heading as=\"h3\" className=\"h3 text-normal\">\n                  Capacity\n                </Heading>\n                <RunnerMaxConcurrencyInput\n                  value={maxConcurrentJobs}\n                  min={maxConcurrentJobsMin}\n                  max={maxConcurrentJobsMax}\n                  gpuRunnerSelected={gpuRunnerSelected}\n                  onChange={setMaxConcurrentJobs}\n                />\n              </Box>\n\n              <Box sx={{display: 'flex', flexDirection: 'column', gap: 2}} data-testid=\"runner-group-section\">\n                <Heading as=\"h3\" className=\"h3 text-normal\">\n                  Permissions\n                </Heading>\n                <RunnerGroupSelector\n                  value={runnerGroupId}\n                  setValue={setRunnerGroupId}\n                  groups={runnerGroups}\n                  validationError={runnerGroupError}\n                />\n              </Box>\n              <Box sx={{display: 'flex', flexDirection: 'column', gap: 2}}>\n                <Heading as=\"h3\" className=\"h3 text-normal\">\n                  Networking\n                </Heading>\n                <RunnerPublicIpCheckbox\n                  checked={isPublicIpEnabled}\n                  onChange={setIsPublicIpEnabled}\n                  isPublicIpAllowed={isPublicIpAllowed}\n                  usedIpCount={usedIpCount}\n                  totalIpCount={totalIpCount}\n                />\n              </Box>\n            </Box>\n            <Button type=\"submit\" variant=\"primary\" data-testid=\"create-runner-button\" sx={{mt: 3}}>\n              Create runner\n            </Button>\n          </form>\n        </PageLayout.Content>\n      </PageLayout>\n    </DocsContext.Provider>\n  )\n}\n\nfunction getCustomImageDisplayName(imageUploadValues: ImageUploadValues) {\n  return !imageUploadValues.sasUri\n    ? null\n    : `Custom, ${imageUploadValues.imageType.displayName}, ${imageUploadValues.sasUri}`\n}\n\nfunction getImageDisplayName(\n  image: Image | null,\n  imageVersion: ImageVersion | null,\n  showImageGenerationEnabled: boolean,\n) {\n  if (!image) {\n    return null\n  }\n\n  const imageVersionDisplayName = imageVersion ? `, ${imageVersion.version}` : ''\n  const imageGenerationEnabledText = showImageGenerationEnabled ? ', Image Generation Enabled' : ''\n  const imageSource =\n    (image.source === ImageSource.Curated && 'GitHub-owned') ||\n    (image.source === ImageSource.Marketplace && 'Partner') ||\n    image.source\n\n  return `${imageSource}, ${image.displayName}${imageVersionDisplayName}${imageGenerationEnabledText}`\n}\n\n// Read runner_group_id query param and try to parse as a number\nfunction getPresetRunnerGroupId(searchParams: URLSearchParams) {\n  const presetGroupIdAsString = searchParams.get('runner_group_id')\n  if (presetGroupIdAsString !== null) {\n    const presetGroupId: number = parseInt(presetGroupIdAsString, 10)\n    if (!isNaN(presetGroupId)) {\n      return presetGroupId\n    }\n  }\n  return undefined\n}\n\ntry{ NewRunner.displayName ||= 'NewRunner' } catch {}","import {App} from './App'\nimport {EditRunner} from './routes/EditRunner'\nimport {NewRunner} from './routes/NewRunner'\nimport {registerReactAppFactory} from '@github-ui/react-core/register-app'\nimport {jsonRoute} from '@github-ui/react-core/json-route'\n\nregisterReactAppFactory('github-hosted-runners-settings', () => ({\n  App,\n  routes: [\n    jsonRoute({\n      path: '/organizations/:organization_id/settings/actions/github-hosted-runners/new',\n      Component: NewRunner,\n    }),\n    jsonRoute({\n      path: '/organizations/:organization_id/settings/actions/github-hosted-runners/:runner_id/edit',\n      Component: EditRunner,\n    }),\n    jsonRoute({\n      path: '/enterprises/:business/settings/actions/github-hosted-runners/new',\n      Component: NewRunner,\n    }),\n    jsonRoute({\n      path: '/enterprises/:business/settings/actions/github-hosted-runners/:runner_id/edit',\n      Component: EditRunner,\n    }),\n  ],\n}))\n","import type {PlatformId} from './platform'\n\nexport enum ImageSource {\n  Marketplace = 'Marketplace',\n  Curated = 'Curated',\n  Custom = 'Custom',\n}\n\nexport enum ImageDefinitionState {\n  Provisioning = 'Provisioning',\n  Ready = 'Ready',\n  Deleting = 'Deleting',\n}\n\nexport enum ImageVersionState {\n  Ready = 'Ready',\n  ImportFailed = 'ImportFailed',\n  ImportingBlob = 'ImportingBlob',\n  ProvisioningImageVersion = 'ProvisioningImageVersion',\n  Deleting = 'Deleting',\n  Generating = 'Generating',\n}\n\nexport type Image = {\n  id: string\n  displayName: string\n  source: ImageSource\n  platform: PlatformId\n  sizeGb: number\n  state?: ImageDefinitionState\n  versionCount?: number\n  totalVersionsSize?: number\n  latestVersion?: string\n  imageVersions?: ImageVersion[]\n  isImageGenerationSupported?: boolean\n}\n\nexport type ImageVersion = {\n  version: string\n  state: ImageVersionState\n  failureReason?: string\n  size?: number\n  createdOn: string\n  lastUsedOn?: string\n}\n","export enum MachineSpecArchitecture {\n  x64 = '', // empty string is the current default\n  ARM64 = 'Arm64',\n}\n\nexport type MachineSpec = {\n  id: string\n  architecture: MachineSpecArchitecture\n  storageGb: number\n  memoryGb: number\n  cpuCores: number\n  type: 'basic' | 'gpu_optimized'\n  documentationUrl: string\n  gpu: {\n    name: string\n    count: number\n    memoryGb: number\n  } | null\n}\n","import {MachineSpecArchitecture} from './machine-spec'\n\nexport enum PlatformOsType {\n  Linux = 'Linux',\n  Windows = 'Windows',\n  Custom = 'Custom',\n}\n\nexport const platformOptions = [\n  {\n    displayName: 'Linux x64',\n    id: 'linux-x64',\n    osType: PlatformOsType.Linux,\n    architecture: MachineSpecArchitecture.x64,\n  },\n  {\n    displayName: 'Linux ARM64',\n    id: 'linux-arm64',\n    osType: PlatformOsType.Linux,\n    architecture: MachineSpecArchitecture.ARM64,\n  },\n  {\n    displayName: 'Windows x64',\n    id: 'win-x64',\n    osType: PlatformOsType.Windows,\n    architecture: MachineSpecArchitecture.x64,\n  },\n  {\n    displayName: 'Windows ARM64',\n    id: 'win-arm64',\n    osType: PlatformOsType.Windows,\n    architecture: MachineSpecArchitecture.ARM64,\n  },\n  {\n    displayName: 'Upload custom image',\n    id: 'custom',\n    osType: PlatformOsType.Custom,\n    architecture: MachineSpecArchitecture.x64,\n  },\n] as const\n\n// `Platform` is a type that can be any of the objects in the `platformOptions` array\nexport type Platform = (typeof platformOptions)[number]\nexport type PlatformId = Platform['id']\n\nexport function platformToOsType(platformInput: PlatformId): PlatformOsType {\n  return platformOptions.find(p => p.id === platformInput)?.osType ?? PlatformOsType.Custom\n}\n","// Check if the navigation is only a hash change.\nconst isHashNavigation = (currentUrl: string, targetUrl: string): boolean => {\n  const current = new URL(currentUrl, window.location.origin)\n  const target = new URL(targetUrl, window.location.origin)\n  const hasHash = target.href.includes('#')\n\n  return (\n    hasHash && current.host === target.host && current.pathname === target.pathname && current.search === target.search\n  )\n}\n\nexport default isHashNavigation\n","import React, {startTransition} from 'react'\nimport {\n  createSearchParams,\n  matchRoutes,\n  resolvePath,\n  useLocation,\n  useNavigate as useReactRouterNavigate,\n  useSearchParams as useReactRouterSearchParams,\n  type NavigateOptions,\n  type To,\n  type URLSearchParamsInit,\n} from 'react-router-dom'\n\nimport isHashNavigation from '@github-ui/is-hash-navigation'\nimport {AppContext} from '@github-ui/react-core/app-context'\nimport {startSoftNav} from '@github-ui/soft-nav/state'\nimport {PREVENT_AUTOFOCUS_KEY} from '@github-ui/react-core/prevent-autofocus'\n\nexport interface NavigateOptionsWithPreventAutofocus extends NavigateOptions {\n  preventAutofocus?: boolean\n}\n\nexport const useNavigate = (): ((to: To, options?: NavigateOptionsWithPreventAutofocus) => void) => {\n  const {routes, history} = React.useContext(AppContext)\n  const reactRouterNavigate = useReactRouterNavigate()\n  return React.useCallback(\n    (to, navigateOptions = {}) => {\n      const pathname = resolvePath(to).pathname\n      const isExternalToApp = !matchRoutes(routes, pathname)\n\n      if (isExternalToApp) {\n        const href = history.createHref(to)\n        ;(async () => {\n          const {softNavigate: turboSoftNavigate} = await import('@github-ui/soft-navigate')\n          turboSoftNavigate(href)\n        })()\n      } else {\n        if (!isHashNavigation(location.href, to.toString())) {\n          startSoftNav('react')\n        }\n        const {preventAutofocus, ...options} = navigateOptions\n        startTransition(() => {\n          reactRouterNavigate(\n            to,\n            preventAutofocus\n              ? {\n                  ...options,\n                  state: {\n                    [PREVENT_AUTOFOCUS_KEY]: true,\n                    ...options.state,\n                  },\n                }\n              : options,\n          )\n          const {turbo, ...state} = window.history.state\n          window.history.replaceState({...state, skipTurbo: true}, '', location.href)\n        })\n      }\n    },\n    [history, reactRouterNavigate, routes],\n  )\n}\n\n/**\n * An implementation of `useSearchParams` that mirrors `react-router-dom`'s `useSearchParams` hook\n * but utilizes `@github-ui/useNavigate` instead of `react-router` `useNavigate` to handle updates.\n */\nexport const useSearchParams = () => {\n  const [searchParams] = useReactRouterSearchParams()\n  const navigate = useNavigate()\n  const {pathname} = useLocation()\n\n  const setSearchParams = React.useCallback<\n    (\n      nextInit?: URLSearchParamsInit | ((prev: URLSearchParams) => URLSearchParamsInit),\n      navigateOpts?: NavigateOptionsWithPreventAutofocus,\n    ) => void\n  >(\n    (nextInit, navigateOptions = {}) => {\n      const newSearchParams = createSearchParams(typeof nextInit === 'function' ? nextInit(searchParams) : nextInit)\n      navigate(\n        {\n          pathname,\n          search: newSearchParams.toString(),\n        },\n        navigateOptions,\n      )\n    },\n    [searchParams, navigate, pathname],\n  )\n\n  return [searchParams, setSearchParams] as const\n}\n","/**\n * A Fetch function which will automatically add the correct headers for\n * making requests to GitHub application servers as long as the associated controller methods allow it.\n * Track down the associated controller method and confirm the controller includes\n * ApplicationController::VerifiedFetchDependency as well as `allow_verified_fetch only:`\n * to the relevant controller methods.\n *\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetch('/foo', {method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.text())\ntest.\n *     }\n */\nexport function verifiedFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  assertRelativePathOrSameOrigin(path)\n\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Verified-Fetch': 'true',\n    'X-Requested-With': 'XMLHttpRequest',\n  }\n\n  return fetch(path, {...init, headers})\n}\n\nexport interface JSONRequestInit extends Omit<RequestInit, 'body'> {\n  body?: unknown\n}\n\nfunction assertRelativePathOrSameOrigin(path: string) {\n  if (process.env.NODE_ENV === 'test' && !window.location.origin) return\n  const url = new URL(path, window.location.origin)\n  if (url.origin !== window.location.origin) {\n    throw new Error('Can not make cross-origin requests from verifiedFetch')\n  }\n}\n\n/**\n * A Fetch function which will automatically add the correct headers for\n * making JSON requests\n *\n * Will also `JSON.stringify` the request body if provided.\n\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetchJSON('/foo', {body: {foo: 'bar'}, method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.json())\n *     }\n */\nexport function verifiedFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  }\n\n  const body = init?.body ? JSON.stringify(init.body) : undefined\n\n  return verifiedFetch(path, {...init, body, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetch(path, {...init, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetchJSON(path, {...init, headers})\n}\n","import {Octicon} from '@primer/react'\nimport {GearIcon} from '@primer/octicons-react'\nimport {PlatformOsType as OsType} from '../../../types/platform'\n\nexport function PlatformIcon({className, osType, size = 16}: {className?: string; osType?: OsType; size?: number}) {\n  if (osType === OsType.Linux) {\n    return <LinuxIcon className={className} size={size} />\n  } else if (osType === OsType.Windows) {\n    return <WindowsIcon className={className} size={size} />\n  } else {\n    return <Octicon icon={GearIcon} className={className} size={size} />\n  }\n}\n\nfunction LinuxIcon({className, size}: {className?: string; size: number}) {\n  return (\n    <BaseIconSvg className={className} size={size} altText=\"Linux icon\">\n      <path\n        data-testid=\"svg-icon-path\"\n        fillRule=\"evenodd\"\n        d=\"M5.773 1.197a2.416 2.416 0 0 0-.246 1.059 17.76 17.76 0 0 0 .02 1.583c.014.24.023.383-.011.78-.026.306-.162.765-.385 1.213a6.517 6.517 0 0 1-.601.942c-.07.097-.135.185-.19.265-.088.132-.176.26-.262.385-.309.449-.599.87-.83 1.337-.167.34-.288.819-.34 1.162a4.73 4.73 0 0 0-.031.806c-.113.097-.195.23-.281.369-.073.118-.15.24-.247.347-.135.145-.391.195-.678.25l-.021.004c-.253.049-.52.147-.614.298a.578.578 0 0 0-.029.052c-.116.224-.091.537-.065.859.021.267.043.54-.014.777a3.83 3.83 0 0 1-.062.215c-.043.142-.085.278-.086.405 0 .099.022.204.09.322.075.13.24.224.475.305.214.074.49.14.812.215l.021.005.114.026.009.002c.146.035.29.07.438.099a5.8 5.8 0 0 0 .185.036l.017.003c.21.037.29.052.852.271.136.053.286.11.445.158.314.097.669.168.996.109.166-.03.323-.093.462-.202.144-.113.283-.264.382-.418a1.265 1.265 0 0 0 .12-.241.79.79 0 0 0 .033-.109c.132-.065.459-.165 1.237-.172 1.174-.012 1.955.412 1.955.412v-.01c.01.056.022.108.038.158a.845.845 0 0 0 .248.386c.07.064.153.123.25.174a1.4 1.4 0 0 0 .298.115 1.629 1.629 0 0 0 .66.033 1.23 1.23 0 0 0 .481-.172c.128-.08.232-.174.339-.27l.003-.004.002-.001c.07-.063.14-.127.219-.186a10.755 10.755 0 0 0 .292-.226l.047-.036c.101-.08.205-.162.309-.239a6.43 6.43 0 0 1 .399-.277 50.235 50.235 0 0 0 .713-.47l.024-.016.042-.028c.204-.137.452-.303.552-.512a.438.438 0 0 0 .052-.232c-.016-.241-.275-.46-.531-.677a20.204 20.204 0 0 1-.08-.068l-.014-.011c-.13-.113-.26-.224-.33-.338a1.21 1.21 0 0 1-.147-.344 5.396 5.396 0 0 1-.032-.197c-.03-.195-.054-.355-.159-.5-.126-.176-.236-.227-.43-.249a1.729 1.729 0 0 1-.083-.011c.126-.464.163-.759.14-1.148-.053-.888-.611-1.828-1.34-2.898a22.344 22.344 0 0 0-.325-.46c-.15-.207-.295-.41-.413-.595-.237-.37-.483-.8-.579-1.19-.071-.293-.101-.847-.111-1.769.035-1.413-.403-2.066-.932-2.473-.53-.407-1.307-.4-1.587-.376-.235.02-1.224.258-1.685 1.188Zm2.512 1.065c-.319-.004-.626.244-.727.577-.084.278-.08.498-.067.62.094.027.191.064.303.107a.604.604 0 0 1 .027-.523c.13-.24.389-.316.577-.171.188.145.234.455.103.694a.492.492 0 0 1-.183.193c.125.043.225.08.306.113a1.93 1.93 0 0 0 .301-.526c.095-.294.022-.817-.374-1.018a.598.598 0 0 0-.266-.066Zm-2.083.142c-.05 0-.105.01-.163.03-.251.087-.347.51-.258.893.049.21.135.411.264.536l.081-.06.063-.043c-.162-.08-.27-.326-.241-.565.03-.249.195-.395.37-.327.174.068.291.325.262.573a.592.592 0 0 1-.018.093c.052-.027.098-.048.142-.065l.031-.012a1.234 1.234 0 0 0-.013-.398c-.076-.375-.246-.655-.52-.655Zm2.642 2.329c-.06.03-.164.074-.324.197-.115.09-.33.278-.494.392a2.025 2.025 0 0 1-.34.189 1.3 1.3 0 0 1-.45.119c-.44.023-.648-.085-.847-.294-.084-.087-.148-.183-.253-.3a1.21 1.21 0 0 0-.178-.167c-.002.057-.186 1.282-.434 1.824-.247.541-.235.357-.402.923-.23.21-.484.774-.65 1.259-.173.569-.303 1.008-.314 1.646a1.686 1.686 0 0 1-.172-.557c-.086-.704.1-1.544.657-2.15.024-.025.023-.035.013-.034a.073.073 0 0 0-.036.02c-.695.62-.86 1.764-.79 2.275.052.366.147.681.341.937v.002l.01.011a1.351 1.351 0 0 0 .174.185c.113.126.255.263.544.482.532.404.904.617.977.88.098.35-.12.58-.394.723.2.2.836.608 1.997.557 1.022-.045 1.663-.432 2.21-1.099.003-.154.02-.41.028-.688.007-.265.009-.53.05-.736a.743.743 0 0 1 .043-.135.488.488 0 0 1 .419-.285c.09-.004.185-.01.276.008.016-.13.03-.257.039-.38a2.6 2.6 0 0 1 .57-.073c.383-.013.843.023 1.075.168a.812.812 0 0 0-.183-.117c-.271-.13-.643-.174-1.021-.186.1-.268.205-.654.194-.942-.029-.757-.405-1.34-.941-1.745a.11.11 0 0 0-.031-.018c-.005-.001-.002.005.016.022.62.588.828 1.257.777 1.907-.02.253-.13.54-.256.773-.06 0-.129.003-.188.004.03-.796-.127-1.463-.57-2.392-.043-.08-.245-.422-.367-.518-.094-.463-.107-.44-.296-.865-.287-.643-.391-1.386-.479-1.822Z\"\n      />\n    </BaseIconSvg>\n  )\n}\n\nfunction WindowsIcon({className, size}: {className?: string; size?: number}) {\n  return (\n    <BaseIconSvg className={className} size={size} altText=\"Windows icon\">\n      <path\n        data-testid=\"svg-icon-path\"\n        fillRule=\"evenodd\"\n        d=\"M6.917 1.662 1.6 2.419V13.53l5.317.74V8.32l-5.314-.037v-.612l5.314-.04v-5.97Zm.742-.106v6.071l7.44-.055V.497L7.66 1.556Zm7.44 6.822-7.44-.052v6.047l7.44 1.034V8.378Z\"\n      />\n    </BaseIconSvg>\n  )\n}\n\nfunction BaseIconSvg({\n  children,\n  className,\n  altText,\n  size,\n}: {\n  children: React.ReactNode\n  className?: string\n  altText?: string\n  size?: number\n}) {\n  return (\n    <svg\n      data-testid=\"svg-icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 16 16\"\n      role=\"img\"\n      aria-label={altText}\n      className={`octicon ${className}`}\n      style={{\n        display: 'inline-block',\n        userSelect: 'none',\n        overflow: 'visible',\n      }}\n    >\n      {children}\n    </svg>\n  )\n}\n\ntry{ PlatformIcon.displayName ||= 'PlatformIcon' } catch {}\ntry{ LinuxIcon.displayName ||= 'LinuxIcon' } catch {}\ntry{ WindowsIcon.displayName ||= 'WindowsIcon' } catch {}\ntry{ BaseIconSvg.displayName ||= 'BaseIconSvg' } catch {}","import type {ChildRoute, LoaderResult, RouteRegistration, TransitionType} from './app-routing-types'\nimport type React from 'react'\nimport type {Location} from '@remix-run/router'\n\nexport interface JsonRouteProps {\n  path: string\n  Component: React.ComponentType\n  transitionType?: TransitionType\n  shouldNavigateOnError?: boolean\n  children?: ChildRoute[]\n}\n/**\n * A utility for building a route registration for a route that consumes a JSON object (either via embedding in a\n * script tag or via a JSON fetch on React soft navigations).\n */\nexport function jsonRoute<TRouteData, TEmbeddedData>({\n  path,\n  Component,\n  /**\n   * Some routes want to handle their own errors and not just show a generic error page. In this case,\n   * the error is just handled like any other payload for the route.\n   * NOTE: We might consider replacing the shouldNavigateOnError flag with a parallel implementation to jsonRoute.\n   */\n  shouldNavigateOnError,\n  transitionType,\n  children,\n}: JsonRouteProps): RouteRegistration<TRouteData, TEmbeddedData> {\n  async function coreLoader({location}: {location: Location}): Promise<LoaderResult<TRouteData>> {\n    let response: Response\n    try {\n      const fetchPath = `${location.pathname}${location.search}`\n      response = await window.fetch(fetchPath, {\n        headers: {\n          Accept: 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-GitHub-Target': 'dotcom',\n          'X-React-Router': 'json',\n        },\n      })\n    } catch (error) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'fetchError'},\n      }\n    }\n    if (response.redirected) {\n      return {\n        type: 'redirect',\n        url: response.url,\n      }\n    } else if (!response.ok) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'httpError', httpStatus: response.status},\n      }\n    } else {\n      try {\n        const responseJson = await response.json()\n        return {\n          type: 'loaded',\n          data: responseJson,\n          title: responseJson.title,\n        }\n      } catch (error) {\n        return {\n          type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n          error: {type: 'badResponseError'},\n        }\n      }\n    }\n  }\n\n  function loadFromEmbeddedData({embeddedData}: {embeddedData: TEmbeddedData}): {data: TRouteData; title: string} {\n    const data = embeddedData as unknown as TRouteData & {title: string}\n    return {data, title: data.title}\n  }\n\n  return {\n    path,\n    // TODO: consider wrapping Component with a component that passes payload as a prop — ideally as part of migrating\n    // away from useRoutePayload.\n    Component,\n    coreLoader,\n    loadFromEmbeddedData,\n    transitionType,\n    children,\n  }\n}\n"],"names":["App","props","children","displayName","DocsContext","createContext","RunnerNameInput","runnerName","onChange","validationError","onValidationError","runnerNameRegex","runnerNameValidationId","FormControl","required","Label","TextInput","aria-label","aria-invalid","aria-describedby","name","value","e","currentTarget","test","sx","width","data-testid","Validation","variant","id","SETTINGS","DEFAULT_RUNNER_GROUP_ID","ERRORS","INVALID_FORM","CREATION_FAILED_REASON_UNKNOWN","RUNNER_NAME_ALREADY_EXISTS","UPDATE_FAILED_REASON_UNKNOWN","URLS","NETWORKING_DOCS","RUNNER_GROUPS_DOCS","USAGE_LIMITS","LATEST_IMAGE_TAG","PARTNER_IMAGES_REPO","ENTERPRISE_DOCS","PRICING","RunnerMaxConcurrencyInput","baseDocsUrl","useContext","error","getMaxRunnerConcurrencyError","min","max","gpuRunnerSelected","Box","as","display","alignItems","borderColor","borderRadius","borderStyle","borderWidth","marginBottom","padding","type","inputMode","currentValue","parseInt","validationStatus","undefined","Caption","Link","inline","href","underline","div","input","isNaN","extraInfo","RunnerGroupVisibility","runnerGroupValidationId","isDefaultGroupLabelNeeded","groupId","groups","group","find","g","match","groupDescription","repoCount","selectedTargets","length","repoInfo","visibility","All","privacyInfo","allowPublic","RunnerGroupSelector","setValue","docsUrlBase","mappedGroups","useMemo","map","text","selectedGroup","setSelectedGroup","useState","filter","setFilter","open","setOpen","filteredItems","toLowerCase","startsWith","useEffect","newSelectedGroup","Text","color","fontSize","SelectPanel","placeholderText","items","selected","onSelectedChange","item","onFilterChange","onOpenChange","showItemDividers","overlayProps","maxHeight","renderItem","ActionList","Item","flexDirection","renderAnchor","anchorProps","Button","trailingAction","TriangleDownIcon","aria-haspopup","RunnerPublicIpCheckbox","networkingDocsUrl","disabled","isPublicIpAllowed","runnerHasPublicIp","usedIpCount","totalIpCount","Checkbox","checked","event","target","pb","gap","span","fontWeight","PublicIpDisallowed","enterpriseDocsUrl","pricingPageUrl","OrganizationIcon","ImageVersionSelector","imageVersions","selectedImageVersion","setSelectedImageVersion","hideLabel","isSelected","version","imageVersion","visuallyHidden","ActionMenu","size","Overlay","selectionVariant","onSelect","getAvailableImageVersions","ImageVersionState","ImportFailed","Deleting","includes","state","getRoot","isEnterprise","runnerDetailsPath","entityLogin","runnerId","request","url","method","body","response","verifiedFetchJSON","json","status","createRunner","payload","createRunnerPath","result","success","data","error_category","updateRunner","updateRunnerPath","EditRunner","maxConcurrentJobsMin","maxConcurrentJobsMax","runnerGroupId","runnerGroups","runnerHasCustomImage","runnerHasGpuSpec","runnerImageVersion","runnerListPath","runnerMaxConcurrentJobs","useRoutePayload","formError","setFormError","selectedRunnerName","setSelectedRunnerName","runnerNameError","setRunnerNameError","maxConcurrentJobs","setMaxConcurrentJobs","isPublicIpEnabled","setIsPublicIpEnabled","selectedRunnerGroupId","setSelectedRunnerGroupId","runnerGroupError","setRunnerGroupError","navigate","useNavigate","resetFormError","isFormValid","validForm","isGroupInvalid","handleSubmit","preventDefault","form","maximumConcurrentJobs","message","Provider","Flash","PageLayout","Header","mb","Heading","className","borderBottom","pt","Content","onSubmit","noValidate","data-hpc","mt","onClick","FieldProgressionField","displayValue","isActive","index","onEditClick","onSave","editComponent","hasValue","validationId","activeField","cloneElement","inactiveField","pl","pr","area-invalid","p","margin","FieldProgression","fields","currentFieldIndex","setCurrentFieldIndex","handleSave","useCallback","field","slice","fieldIndex","setActive","fieldProgressionFieldsWithIndexesAdded","key","isArmMachineSpecAvailable","machineSpecs","some","machineSpec","architecture","MachineSpecArchitecture","ARM64","PlatformSelector","editorValue","setEditorValue","platformOptions","handleInputChange","selectedPlatform","option","availableOptions","isLinuxArm64","osType","PlatformOsType","Linux","isWindowsArm64","Windows","isCustomPlatform","Custom","isCustomImageUploadingEnabled","isLinuxArmAvailable","Object","values","images","reduce","acc","concat","image","platform","isWindowsArmAvailable","m","RadioGroup","Radio","PlatformIcon","borderTopColor","borderTopStyle","borderTopWidth","imageUploadTypeOptions","imageUploadValuesDefault","imageType","sasUri","ImageUploadValuesSelector","onValidationErrorChange","selectedType","Select","selectedImageType","Option","placeholder","ActiveTab","tabsDescription","imageSourceToTabMapping","ImageSource","Curated","Marketplace","getPreselectedImageVersion","currentImage","savedImage","savedImageVersion","ImageSelector","allImages","setImageVersion","isImageGenerationFeatureEnabled","isImageGenerationEnabled","setIsImageGenerationEnabled","imageUploadValues","setImageUploadValues","selectedImage","setSelectedImage","selectedIsImageGenerationEnabled","setSelectedIsImageGenerationEnabled","selectedImageUploadValues","setSelectedImageUploadValues","imageUploadError","setImageUploadError","isImageUpload","githubImages","partnerImages","customImages","hasAvailableImageVersions","availableImageVersions","v","filteredAndSortedImages","displayNamePrefix","activeTab","setActiveTab","getStartTab","filteredImages","source","tab","keys","currentTabImages","setCurrentTabImages","getImagesForTab","onTabClick","getAttribute","preSelectedImageForTab","isImageGenerationSupported","paddingX","paddingBottom","paddingTop","TabNav","marginX","ImageTab","tabId","tabHeader","ImageTabContent","preSelectedImage","onImageSelect","tabDescription","mx","cursor","aria-controls","imageFilter","setImageFilter","area-labelledby","leadingVisual","SearchIcon","role","style","marginTop","overflowY","toString","tabs","specType","MachineSpecSelect","options","runnerImage","selectedSpec","setSelectedSpec","selectedTab","setSelectedTab","filteredSpecs","filterSpecs","isImageRestrictedForGpu","spec","storageGb","Math","sizeGb","filteredTabs","activeTabSpecs","displayText","machineSpecDisplayText","aria-labelledby","radioButtonPrimary","radioButtonSecondary","documentationUrl","gpu","count","memoryGb","cpuCores","closedBoxSummary","NewRunner","maxConcurrentJobsDefault","maxConcurrentJobsDefaultMax","maxConcurrentJobsGpuMax","isCustomImagesFeatureEnabled","setRunnerName","setSelectedPlatform","selectedMachineSpec","setSelectedMachineSpec","machineSpecError","setMachineSpecError","imageError","setImageError","platformError","setPlatformError","setRunnerGroupId","selectedImageDisplayName","getImageDisplayName","showImageGenerationEnabled","imageVersionDisplayName","imageSource","searchParams","useSearchParams","presetRunnerGroupId","getPresetRunnerGroupId","presetGroupIdAsString","get","presetGroupId","runner","machineSpecId","imageId","imageName","imageSasUri","registerReactAppFactory","routes","jsonRoute","path","Component","ImageDefinitionState","x64","platformToOsType","platformInput","currentUrl","targetUrl","current","URL","window","location","origin","hasHash","host","pathname","search","history","React","AppContext","reactRouterNavigate","useReactRouterNavigate","to","navigateOptions","resolvePath","matchRoutes","isHashNavigation","startSoftNav","preventAutofocus","startTransition","PREVENT_AUTOFOCUS_KEY","turbo","replaceState","skipTurbo","createHref","softNavigate","turboSoftNavigate","useReactRouterSearchParams","useLocation","setSearchParams","nextInit","newSearchParams","createSearchParams","verifiedFetch","init","assertRelativePathOrSameOrigin","headers","fetch","Accept","JSON","stringify","reactFetch","reactFetchJSON","OsType","LinuxIcon","WindowsIcon","Octicon","icon","GearIcon","BaseIconSvg","altText","fillRule","d","svg","xmlns","height","viewBox","userSelect","overflow","shouldNavigateOnError","transitionType","coreLoader","fetchPath","redirected","ok","httpStatus","responseJson","title","loadFromEmbeddedData","embeddedData"],"sourceRoot":""}
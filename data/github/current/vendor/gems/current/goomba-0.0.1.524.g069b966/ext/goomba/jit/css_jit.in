/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.3.0, DynASM x64 version 1.3.0
** DO NOT EDIT! The original file is in "ext/goomba/jit/css_jit.c.dynasm".
*/

#line 1 "ext/goomba/jit/css_jit.c.dynasm"
#include <sys/mman.h>
#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
#	define MAP_ANONYMOUS MAP_ANON
#endif

#include "jit/dasm_proto.h"
#include "jit/dasm_x86.h"

static void jit_one(const uint8_t **select,
	dasm_State **Dst, unsigned *pc);

static void* link_and_encode(dasm_State** d, size_t *size_out)
{
	size_t sz;
	void* buf;
	dasm_link(d, &sz);
	buf = mmap(0, sz, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
	dasm_encode(d, buf);
	mprotect(buf, sz, PROT_READ | PROT_EXEC);
	if (size_out)
		*size_out = sz;
	return buf;
}

void css_selector_jit(CSS_Selector *selector)
{
	//|.arch x64
#if DASM_VERSION != 10300
#error "Version mismatch between DynASM and included encoding engine"
#endif
#line 28 "ext/goomba/jit/css_jit.c.dynasm"
	//|.section code
#define DASM_SECTION_CODE	0
#define DASM_MAXSECTION		1
#line 29 "ext/goomba/jit/css_jit.c.dynasm"
	//|.globals lbl_
enum {
  lbl_selector_main,
  lbl__MAX
};
#line 30 "ext/goomba/jit/css_jit.c.dynasm"
	//|.actionlist css_actions
static const unsigned char css_actions[464] = {
  254,0,248,10,83,65,84,65,85,65,86,73,137,252,252,72,49,219,255,72,137,216,
  65,94,65,93,65,92,91,195,255,65,84,255,132,219,15,132,245,48,219,255,249,
  77,139,164,253,36,233,77,133,228,15,132,245,255,132,219,15,132,245,255,69,
  48,252,246,77,139,172,253,36,233,77,133,252,237,15,132,244,247,65,129,189,
  233,239,65,15,149,214,248,1,69,132,252,246,15,132,245,255,77,139,172,253,
  36,233,73,129,197,239,77,139,109,0,69,139,180,253,36,233,255,249,77,133,252,
  246,15,132,245,73,131,252,238,1,79,139,100,252,245,0,65,129,188,253,36,233,
  239,15,133,245,65,85,65,86,255,65,94,65,93,255,249,65,92,255,249,255,132,
  219,15,133,245,255,76,137,231,72,129,199,239,72,190,237,237,72,184,237,237,
  252,255,208,255,65,129,188,253,36,233,239,15,133,244,247,255,72,133,192,15,
  149,211,248,1,255,72,133,192,15,132,244,247,255,72,139,184,233,72,190,237,
  237,255,72,184,237,237,252,255,208,133,192,15,148,211,255,72,184,237,237,
  252,255,208,132,192,15,149,211,255,72,184,237,237,252,255,208,72,133,192,
  15,149,211,255,69,48,252,246,77,139,172,253,36,233,77,133,252,237,15,132,
  244,247,65,129,189,233,239,65,15,149,214,248,1,69,132,252,246,15,132,244,
  247,65,129,188,253,36,233,239,15,133,244,247,76,137,231,255,132,192,15,149,
  211,248,1,255,129,252,248,239,255,129,232,239,187,237,49,210,252,247,252,
  243,133,210,255,15,148,211,248,1,255,179,1,255,128,252,243,1,255,65,129,188,
  253,36,233,239,15,148,211,255,65,129,188,253,36,233,239,15,133,244,247,65,
  129,188,253,36,233,239,15,148,211,248,1,255,65,129,188,253,36,233,239,15,
  148,211,65,129,188,253,36,233,239,15,148,211,255,48,219,77,139,172,253,36,
  233,77,133,252,237,15,132,244,247,65,129,189,233,239,15,149,211,248,1,128,
  252,243,1,255,76,137,231,72,184,237,237,252,255,208,132,192,15,149,211,255
};

#line 31 "ext/goomba/jit/css_jit.c.dynasm"

	const uint8_t *bytecode = selector->bytecode;
	dasm_State *state;
	dasm_State **Dst;
	void *labels[lbl__MAX];
	void *memory;
	unsigned pc = 0;

	if (selector->compiled)
		return;

	dasm_init(&state, DASM_MAXSECTION);
	dasm_setupglobal(&state, labels, lbl__MAX);
	dasm_setup(&state, css_actions);

	//|.define aMatch, bl
	//|.define aNode, r12
	//|.define rArg1, rdi
	//|.define rArg2, rsi
	//|.macro prologue
		//| push rbx
		//| push aNode
		//| push r13
		//| push r14
		//| mov aNode, rArg1
		//| xor rbx, rbx
	//|.endmacro
	//|.macro epilogue
		//| mov rax, rbx
		//| pop r14
		//| pop r13
		//| pop aNode
		//| pop rbx
		//| ret
	//|.endmacro
	//|.macro callp, addr
		//| mov64 rax, (uintptr_t)addr
		//| call rax
	//|.endmacro
	//|.macro hasparent, rnode, aux, out
		//| xor out, out
		//| mov aux, node:rnode->parent
		//| test aux, aux
		//| jz >1
		//| cmp dword node:aux->type, GUMBO_NODE_DOCUMENT
		//| setnz out
		//|1:
	//|.endmacro
	//|.type node, GumboNode
#define Dt1(_V) (int)(ptrdiff_t)&(((GumboNode *)0)_V)
#line 80 "ext/goomba/jit/css_jit.c.dynasm"
	//|.type attribute, GumboAttribute
#define Dt2(_V) (int)(ptrdiff_t)&(((GumboAttribute *)0)_V)
#line 81 "ext/goomba/jit/css_jit.c.dynasm"

	Dst = &state;
	//|.code
	dasm_put(Dst, 0);
#line 84 "ext/goomba/jit/css_jit.c.dynasm"
	//|->selector_main:
	//| prologue
	dasm_put(Dst, 2);
#line 86 "ext/goomba/jit/css_jit.c.dynasm"
	jit_one(&bytecode, Dst, &pc);
	//| epilogue
	dasm_put(Dst, 19);
#line 88 "ext/goomba/jit/css_jit.c.dynasm"

	memory = link_and_encode(Dst, &selector->memsize);
	selector->compiled = labels[lbl_selector_main];

	/* Ensure that the entry point of the function is
	 * at the beginning of the mapped space */
	assert(memory == selector->compiled);
	dasm_free(Dst);
}

static inline unsigned get_label(dasm_State **Dst, unsigned *pc)
{
	dasm_State *D = Dst_REF;
	if (*pc == D->pcsize)
		dasm_growpc(Dst, D->pcsize ? D->pcsize * 2 : 8);
	return (*pc)++;
}

static void jit_combinator(const uint8_t **select,
	dasm_State **Dst, unsigned *pc)
{
	uint8_t mode = READ_BYTE(select);
	unsigned end_block = get_label(Dst, pc);

	//| push aNode
	dasm_put(Dst, 31);
#line 113 "ext/goomba/jit/css_jit.c.dynasm"
	jit_one(select, Dst, pc);
	//| test aMatch, aMatch
	//| jz =>end_block
	//| xor aMatch, aMatch
	dasm_put(Dst, 34, end_block);
#line 117 "ext/goomba/jit/css_jit.c.dynasm"

	switch (mode) {
	case ' ':
	{
		unsigned begin_loop = get_label(Dst, pc);

		//|=>begin_loop:
		//| mov aNode, node:aNode->parent
		//| test aNode, aNode
		//| jz =>end_block
		dasm_put(Dst, 42, begin_loop, Dt1(->parent), end_block);
#line 127 "ext/goomba/jit/css_jit.c.dynasm"
		jit_one(select, Dst, pc);
		//| test aMatch, aMatch
		//| jz =>begin_loop
		dasm_put(Dst, 56, begin_loop);
#line 130 "ext/goomba/jit/css_jit.c.dynasm"

		break;
	}

	case '>':
		//| mov aNode, node:aNode->parent
		//| test aNode, aNode
		//| jz =>end_block
		dasm_put(Dst, 43, Dt1(->parent), end_block);
#line 138 "ext/goomba/jit/css_jit.c.dynasm"
		jit_one(select, Dst, pc);
		break;

	case '+':
	case '~':
	{
		unsigned begin_loop = get_label(Dst, pc);

		//| hasparent aNode, r13, r14b
		//| test r14b, r14b
		//| jz =>end_block
		dasm_put(Dst, 62, Dt1(->parent), Dt1(->type), GUMBO_NODE_DOCUMENT, end_block);
#line 149 "ext/goomba/jit/css_jit.c.dynasm"

		//| mov r13, node:aNode->parent
		//| add r13, offsetof(GumboNode, v.element.children.data)
		//| mov r13, aword [r13]
		//| mov r14d, dword node:aNode->index_within_parent
		dasm_put(Dst, 99, Dt1(->parent), offsetof(GumboNode, v.element.children.data), Dt1(->index_within_parent));
#line 154 "ext/goomba/jit/css_jit.c.dynasm"

		//|=>begin_loop:
		//| test r14, r14
		//| jz =>end_block
		//| sub r14, 1
		//| mov aNode, aword [r13+r14*8]
		//| cmp dword node:aNode->type, GUMBO_NODE_ELEMENT
		//| jne =>begin_loop
		//| push r13
		//| push r14
		dasm_put(Dst, 120, begin_loop, end_block, Dt1(->type), GUMBO_NODE_ELEMENT, begin_loop);
#line 164 "ext/goomba/jit/css_jit.c.dynasm"
		jit_one(select, Dst, pc);
		//| pop r14
		//| pop r13
		dasm_put(Dst, 154);
#line 167 "ext/goomba/jit/css_jit.c.dynasm"
		if (mode == '~') {
			//| test aMatch, aMatch
			//| jz =>begin_loop
			dasm_put(Dst, 56, begin_loop);
#line 170 "ext/goomba/jit/css_jit.c.dynasm"
		}
		break;
	}

	default:
		assert(0);
	}

	//|=>end_block:
	//| pop aNode
	dasm_put(Dst, 159, end_block);
#line 180 "ext/goomba/jit/css_jit.c.dynasm"
}

static void jit_and(const uint8_t **select,
	dasm_State **Dst, unsigned *pc)
{
	uint8_t i, count = READ_BYTE(select);
	unsigned this_block = get_label(Dst, pc);

	for (i = 0; i < count; ++i) {
		jit_one(select, Dst, pc);
		//| test aMatch, aMatch
		//| jz =>this_block
		dasm_put(Dst, 56, this_block);
#line 192 "ext/goomba/jit/css_jit.c.dynasm"
	}
	//|=>this_block:
	dasm_put(Dst, 163, this_block);
#line 194 "ext/goomba/jit/css_jit.c.dynasm"
}

static void jit_or(const uint8_t **select,
	dasm_State **Dst, unsigned *pc)
{
	uint8_t i, count = READ_BYTE(select);
	unsigned this_block = get_label(Dst, pc);

	for (i = 0; i < count; ++i) {
		jit_one(select, Dst, pc);
		//| test aMatch, aMatch
		//| jnz =>this_block
		dasm_put(Dst, 165, this_block);
#line 206 "ext/goomba/jit/css_jit.c.dynasm"
	}
	//|=>this_block:
	dasm_put(Dst, 163, this_block);
#line 208 "ext/goomba/jit/css_jit.c.dynasm"
}

static void jit_lookup_attribute(const char *attr_name, dasm_State **Dst)
{
	//| mov rArg1, aNode
	//| add rArg1, offsetof(GumboNode, v.element.attributes)
	//| mov64 rArg2, (uintptr_t)attr_name
	//| callp gumbo_get_attribute
	dasm_put(Dst, 171, offsetof(GumboNode, v.element.attributes), (unsigned int)((uintptr_t)attr_name), (unsigned int)(((uintptr_t)attr_name)>>32), (unsigned int)((uintptr_t)gumbo_get_attribute), (unsigned int)(((uintptr_t)gumbo_get_attribute)>>32));
#line 216 "ext/goomba/jit/css_jit.c.dynasm"
}

static void jit_attribute(const uint8_t **select, dasm_State **Dst)
{
	const char *attr = (const char *)(*select);
	(*select) += strlen(attr) + 1;

	//| cmp dword node:aNode->type, GUMBO_NODE_ELEMENT
	//| jne >1
	dasm_put(Dst, 190, Dt1(->type), GUMBO_NODE_ELEMENT);
#line 225 "ext/goomba/jit/css_jit.c.dynasm"
	jit_lookup_attribute(attr, Dst);
	//| test rax, rax
	//| setnz aMatch
	//|1:
	dasm_put(Dst, 202);
#line 229 "ext/goomba/jit/css_jit.c.dynasm"
}

static void jit_attribute_value(const uint8_t **select, dasm_State **Dst)
{
	uint8_t mode = READ_BYTE(select);
	const char *attr, *value;

	attr = (const char *)(*select);
	(*select) += strlen(attr) + 1;

	value = (const char *)(*select);
	(*select) += strlen(value) + 1;

	if (value[0] == '\0' && mode != '=')
		return;

	//| cmp dword node:aNode->type, GUMBO_NODE_ELEMENT
	//| jne >1
	dasm_put(Dst, 190, Dt1(->type), GUMBO_NODE_ELEMENT);
#line 247 "ext/goomba/jit/css_jit.c.dynasm"

	jit_lookup_attribute(attr, Dst);
	//| test rax, rax
	//| jz >1
	dasm_put(Dst, 211);
#line 251 "ext/goomba/jit/css_jit.c.dynasm"

	//| mov rArg1, aword attribute:rax->value
	//| mov64 rArg2, (uintptr_t)value
	dasm_put(Dst, 219, Dt2(->value), (unsigned int)((uintptr_t)value), (unsigned int)(((uintptr_t)value)>>32));
#line 254 "ext/goomba/jit/css_jit.c.dynasm"

	switch (mode) {
	case '=':
		//| callp strcmp
		//| test eax, eax
		//| setz aMatch
		dasm_put(Dst, 228, (unsigned int)((uintptr_t)strcmp), (unsigned int)(((uintptr_t)strcmp)>>32));
#line 260 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	case '^':
		//| callp css_starts_with
		//| test al, al
		//| setnz aMatch
		dasm_put(Dst, 241, (unsigned int)((uintptr_t)css_starts_with), (unsigned int)(((uintptr_t)css_starts_with)>>32));
#line 265 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	case '$':
		//| callp css_ends_with
		//| test al, al
		//| setnz aMatch
		dasm_put(Dst, 241, (unsigned int)((uintptr_t)css_ends_with), (unsigned int)(((uintptr_t)css_ends_with)>>32));
#line 270 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	case '*':
		//| callp strstr
		//| test rax, rax
		//| setnz aMatch
		dasm_put(Dst, 254, (unsigned int)((uintptr_t)strstr), (unsigned int)(((uintptr_t)strstr)>>32));
#line 275 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	case '|':
		//| callp css_starts_with_class
		//| test al, al
		//| setnz aMatch
		dasm_put(Dst, 241, (unsigned int)((uintptr_t)css_starts_with_class), (unsigned int)(((uintptr_t)css_starts_with_class)>>32));
#line 280 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	case '~':
		//| callp css_value_contains
		//| test al, al
		//| setnz aMatch
		dasm_put(Dst, 241, (unsigned int)((uintptr_t)css_value_contains), (unsigned int)(((uintptr_t)css_value_contains)>>32));
#line 285 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	default:
		assert(0);
	}
	/* Node not an element or Attribute not found */
	//|1:
	dasm_put(Dst, 208);
#line 291 "ext/goomba/jit/css_jit.c.dynasm"
}

//|.macro pseudo_before
	//| hasparent aNode, r13, r14b
	//| test r14b, r14b
	//| jz >1
	//| cmp dword node:aNode->type, GUMBO_NODE_ELEMENT
	//| jnz >1
	//| mov rArg1, aNode
//|.endmacro

static void jit_pseudo_pos(const uint8_t **select, dasm_State **Dst)
{
	enum PseudoClass_Position pclass = READ_BYTE(select);

	//| pseudo_before
	dasm_put(Dst, 268, Dt1(->parent), Dt1(->type), GUMBO_NODE_DOCUMENT, Dt1(->type), GUMBO_NODE_ELEMENT);
#line 307 "ext/goomba/jit/css_jit.c.dynasm"

	switch (pclass) {
	case PSEUDO_FIRST_CHILD:
		//| callp is_first_child
		dasm_put(Dst, 182, (unsigned int)((uintptr_t)is_first_child), (unsigned int)(((uintptr_t)is_first_child)>>32));
#line 311 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	case PSEUDO_LAST_CHILD:
		//| callp is_last_child
		dasm_put(Dst, 182, (unsigned int)((uintptr_t)is_last_child), (unsigned int)(((uintptr_t)is_last_child)>>32));
#line 314 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	case PSEUDO_FIRST_OF_TYPE:
		//| callp is_first_of_type
		dasm_put(Dst, 182, (unsigned int)((uintptr_t)is_first_of_type), (unsigned int)(((uintptr_t)is_first_of_type)>>32));
#line 317 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	case PSEUDO_LAST_OF_TYPE:
		//| callp is_last_of_type
		dasm_put(Dst, 182, (unsigned int)((uintptr_t)is_last_of_type), (unsigned int)(((uintptr_t)is_last_of_type)>>32));
#line 320 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	case PSEUDO_ONLY_CHILD:
		//| callp is_only_child
		dasm_put(Dst, 182, (unsigned int)((uintptr_t)is_only_child), (unsigned int)(((uintptr_t)is_only_child)>>32));
#line 323 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	case PSEUDO_ONLY_OF_TYPE:
		//| callp is_only_of_type
		dasm_put(Dst, 182, (unsigned int)((uintptr_t)is_only_of_type), (unsigned int)(((uintptr_t)is_only_of_type)>>32));
#line 326 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	}

	//| test al, al
	//| setnz aMatch
	//|1:
	dasm_put(Dst, 320);
#line 332 "ext/goomba/jit/css_jit.c.dynasm"
}

static void jit_pseudo_nth(const uint8_t **select, dasm_State **Dst)
{
	enum PseudoClass_PositionNth pclass;
	uint8_t an, b;

	pclass = READ_BYTE(select);
	an = READ_BYTE(select);
	b = READ_BYTE(select);

	//| pseudo_before
	dasm_put(Dst, 268, Dt1(->parent), Dt1(->type), GUMBO_NODE_DOCUMENT, Dt1(->type), GUMBO_NODE_ELEMENT);
#line 344 "ext/goomba/jit/css_jit.c.dynasm"

	switch (pclass) {
	case PSEUDO_NTH_CHILD:
		//| callp find_nth_child
		dasm_put(Dst, 182, (unsigned int)((uintptr_t)find_nth_child), (unsigned int)(((uintptr_t)find_nth_child)>>32));
#line 348 "ext/goomba/jit/css_jit.c.dynasm"
		break;

	case PSEUDO_NTH_LAST_CHILD:
		//| callp find_nth_last_child
		dasm_put(Dst, 182, (unsigned int)((uintptr_t)find_nth_last_child), (unsigned int)(((uintptr_t)find_nth_last_child)>>32));
#line 352 "ext/goomba/jit/css_jit.c.dynasm"
		break;

	case PSEUDO_NTH_OF_TYPE:
		//| callp find_nth_of_type
		dasm_put(Dst, 182, (unsigned int)((uintptr_t)find_nth_of_type), (unsigned int)(((uintptr_t)find_nth_of_type)>>32));
#line 356 "ext/goomba/jit/css_jit.c.dynasm"
		break;

	case PSEUDO_NTH_LAST_OF_TYPE:
		//| callp find_nth_last_of_type
		dasm_put(Dst, 182, (unsigned int)((uintptr_t)find_nth_last_of_type), (unsigned int)(((uintptr_t)find_nth_last_of_type)>>32));
#line 360 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	}

	if (an == 0) {
		//| cmp eax, (int32_t)b
		dasm_put(Dst, 328, (int32_t)b);
#line 365 "ext/goomba/jit/css_jit.c.dynasm"
	} else {
		//| sub eax, (int32_t)b
		//| mov ebx, (int32_t)an
		//| xor edx, edx
		//| div ebx
		//| test edx, edx
		dasm_put(Dst, 333, (int32_t)b, (int32_t)an);
#line 371 "ext/goomba/jit/css_jit.c.dynasm"
	}
	//| setz aMatch
	//|1:
	dasm_put(Dst, 347);
#line 374 "ext/goomba/jit/css_jit.c.dynasm"
}

static void jit_one(const uint8_t **select,
	dasm_State **Dst, unsigned *pc)
{
	enum SelectionOp op = READ_BYTE(select);

	//| xor aMatch, aMatch
	dasm_put(Dst, 39);
#line 382 "ext/goomba/jit/css_jit.c.dynasm"

	switch (op) {
	case SELECT_ALL:
		//| mov aMatch, 1
		dasm_put(Dst, 353);
#line 386 "ext/goomba/jit/css_jit.c.dynasm"
		break;

	case SELECT_AND:
		jit_and(select, Dst, pc);
		break;

	case SELECT_OR:
		jit_or(select, Dst, pc);
		break;

	case SELECT_NOT:
		jit_one(select, Dst, pc);
		//| xor aMatch, 1
		dasm_put(Dst, 356);
#line 399 "ext/goomba/jit/css_jit.c.dynasm"
		break;

	case SELECT_COMBINATOR:
		jit_combinator(select, Dst, pc);
		break;

	case SELECT_ANY_ELEMENT:
		//| cmp dword node:aNode->type, GUMBO_NODE_ELEMENT
		//| setz aMatch
		dasm_put(Dst, 361, Dt1(->type), GUMBO_NODE_ELEMENT);
#line 408 "ext/goomba/jit/css_jit.c.dynasm"
		break;

	case SELECT_ELEMENT:
	{
		uint8_t tag = READ_BYTE(select);
		//| cmp dword node:aNode->type, GUMBO_NODE_ELEMENT
		//| jne >1
		//| cmp dword node:aNode->v.element.tag, tag
		//| setz aMatch
		//|1:
		dasm_put(Dst, 372, Dt1(->type), GUMBO_NODE_ELEMENT, Dt1(->v.element.tag), tag);
#line 418 "ext/goomba/jit/css_jit.c.dynasm"
		break;
	}

	case SELECT_TEXT:
		//| cmp dword node:aNode->type, GUMBO_NODE_TEXT
		//| setz aMatch
		//| cmp dword node:aNode->type, GUMBO_NODE_WHITESPACE
		//| setz aMatch
		dasm_put(Dst, 396, Dt1(->type), GUMBO_NODE_TEXT, Dt1(->type), GUMBO_NODE_WHITESPACE);
#line 426 "ext/goomba/jit/css_jit.c.dynasm"
		break;

	case SELECT_COMMENT:
		//| cmp dword node:aNode->type, GUMBO_NODE_COMMENT
		//| setz aMatch
		dasm_put(Dst, 361, Dt1(->type), GUMBO_NODE_COMMENT);
#line 431 "ext/goomba/jit/css_jit.c.dynasm"
		break;

	case SELECT_PSEUDO_ROOT:
		//| hasparent aNode, r13, aMatch
		//| xor aMatch, 1
		dasm_put(Dst, 417, Dt1(->parent), Dt1(->type), GUMBO_NODE_DOCUMENT);
#line 436 "ext/goomba/jit/css_jit.c.dynasm"
		break;

	case SELECT_PSEUDO_EMPTY:
		//| mov rArg1, aNode
		//| callp css_node_is_empty
		//| test al, al
		//| setnz aMatch
		dasm_put(Dst, 448, (unsigned int)((uintptr_t)css_node_is_empty), (unsigned int)(((uintptr_t)css_node_is_empty)>>32));
#line 443 "ext/goomba/jit/css_jit.c.dynasm"
		break;

	case SELECT_ATTRIBUTE:
		jit_attribute(select, Dst);
		break;

	case SELECT_ATTRIBUTE_VALUE:
		jit_attribute_value(select, Dst);
		break;

	case SELECT_PSEUDO_POSITION:
		jit_pseudo_pos(select, Dst);
		break;

	case SELECT_PSEUDO_NTH:
		jit_pseudo_nth(select, Dst);
		break;

	case SELECT_PSEUDO_CUSTOM:
		assert(0);
		break;
	}
}

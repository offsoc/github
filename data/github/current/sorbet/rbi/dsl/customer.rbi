# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Customer`.
# Please instead update this file by running `bin/tapioca dsl Customer`.

class Customer
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def purposes; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Customer).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Customer]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Customer)) }
    def fifth; end

    sig { returns(::Customer) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Customer)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Customer) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Customer).void)
      ).returns(T.nilable(T::Enumerator[::Customer]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Customer]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Customer]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Customer)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Customer) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Customer) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Customer) }
    def first!; end

    sig { returns(T.nilable(::Customer)) }
    def forty_two; end

    sig { returns(::Customer) }
    def forty_two!; end

    sig { returns(T.nilable(::Customer)) }
    def fourth; end

    sig { returns(::Customer) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Customer) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Customer).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Customer).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Customer).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Customer)) }
    def second; end

    sig { returns(::Customer) }
    def second!; end

    sig { returns(T.nilable(::Customer)) }
    def second_to_last; end

    sig { returns(::Customer) }
    def second_to_last!; end

    sig { returns(::Customer) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Customer) }
    def take!; end

    sig { returns(T.nilable(::Customer)) }
    def third; end

    sig { returns(::Customer) }
    def third!; end

    sig { returns(T.nilable(::Customer)) }
    def third_to_last; end

    sig { returns(::Customer) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def general_purpose!; end

    sig { returns(T::Boolean) }
    def general_purpose?; end

    sig { void }
    def sponsors_purpose!; end

    sig { returns(T::Boolean) }
    def sponsors_purpose?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def active_subscription_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def active_subscription_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :active_subscription_items, through: :plan_subscriptions`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::SubscriptionItem::PrivateCollectionProxy) }
    def active_subscription_items; end

    sig { params(value: T::Enumerable[::Billing::SubscriptionItem]).void }
    def active_subscription_items=(value); end

    sig { returns(T.nilable(::Billing::Contact)) }
    def billing_contact; end

    sig { params(value: T.nilable(::Billing::Contact)).void }
    def billing_contact=(value); end

    sig { returns(T.nilable(::UserEmail)) }
    def billing_email; end

    sig { params(value: T.nilable(::UserEmail)).void }
    def billing_email=(value); end

    sig { returns(T.nilable(::BillingPlatformEnabledProduct)) }
    def billing_platform_enabled_product; end

    sig { params(value: T.nilable(::BillingPlatformEnabledProduct)).void }
    def billing_platform_enabled_product=(value); end

    sig { returns(T::Array[T.untyped]) }
    def billing_transaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def billing_transaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :billing_transactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::BillingTransaction::PrivateCollectionProxy) }
    def billing_transactions; end

    sig { params(value: T::Enumerable[::Billing::BillingTransaction]).void }
    def billing_transactions=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::Contact) }
    def build_billing_contact(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def build_billing_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BillingPlatformEnabledProduct) }
    def build_billing_platform_enabled_product(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business) }
    def build_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::CreditCheck) }
    def build_credit_check(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::ManualDunningPeriod) }
    def build_manual_dunning_period(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def build_parent_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentMethod) }
    def build_payment_method(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def build_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::SalesServePlanSubscription) }
    def build_sales_serve_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::Contact) }
    def build_shipping_contact(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def build_sponsors_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::TaxExemptionStatus) }
    def build_tax_exemption_status(*args, &blk); end

    sig { returns(T.nilable(::Business)) }
    def business; end

    sig { params(value: T.nilable(::Business)).void }
    def business=(value); end

    sig { returns(T::Array[T.untyped]) }
    def child_customer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def child_customer_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :child_customers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Customer::PrivateCollectionProxy) }
    def child_customers; end

    sig { params(value: T::Enumerable[::Customer]).void }
    def child_customers=(value); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :configuration_entries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Configuration::Entry::PrivateCollectionProxy) }
    def configuration_entries; end

    sig { params(value: T::Enumerable[::Configuration::Entry]).void }
    def configuration_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def configuration_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def configuration_entry_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def contact_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def contact_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :contacts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::Contact::PrivateCollectionProxy) }
    def contacts; end

    sig { params(value: T::Enumerable[::Billing::Contact]).void }
    def contacts=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::Contact) }
    def create_billing_contact(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::Contact) }
    def create_billing_contact!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_billing_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_billing_email!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BillingPlatformEnabledProduct) }
    def create_billing_platform_enabled_product(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BillingPlatformEnabledProduct) }
    def create_billing_platform_enabled_product!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business) }
    def create_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business) }
    def create_business!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::CreditCheck) }
    def create_credit_check(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::CreditCheck) }
    def create_credit_check!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::ManualDunningPeriod) }
    def create_manual_dunning_period(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::ManualDunningPeriod) }
    def create_manual_dunning_period!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_parent_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_parent_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentMethod) }
    def create_payment_method(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentMethod) }
    def create_payment_method!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_plan_subscription!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::SalesServePlanSubscription) }
    def create_sales_serve_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::SalesServePlanSubscription) }
    def create_sales_serve_plan_subscription!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::Contact) }
    def create_shipping_contact(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::Contact) }
    def create_shipping_contact!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_sponsors_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_sponsors_plan_subscription!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::TaxExemptionStatus) }
    def create_tax_exemption_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::TaxExemptionStatus) }
    def create_tax_exemption_status!(*args, &blk); end

    sig { returns(T.nilable(::Billing::CreditCheck)) }
    def credit_check; end

    sig { params(value: T.nilable(::Billing::CreditCheck)).void }
    def credit_check=(value); end

    sig { returns(T::Array[T.untyped]) }
    def customer_account_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def customer_account_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :customer_accounts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CustomerAccount::PrivateCollectionProxy) }
    def customer_accounts; end

    sig { params(value: T::Enumerable[::CustomerAccount]).void }
    def customer_accounts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def incomplete_pending_plan_change_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def incomplete_pending_plan_change_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :incomplete_pending_plan_changes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PendingPlanChange::PrivateCollectionProxy) }
    def incomplete_pending_plan_changes; end

    sig { params(value: T::Enumerable[::Billing::PendingPlanChange]).void }
    def incomplete_pending_plan_changes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def licensing_model_transition_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def licensing_model_transition_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :licensing_model_transitions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Licensing::LicensingModelTransition::PrivateCollectionProxy) }
    def licensing_model_transitions; end

    sig { params(value: T::Enumerable[::Licensing::LicensingModelTransition]).void }
    def licensing_model_transitions=(value); end

    sig { returns(T.nilable(::Billing::ManualDunningPeriod)) }
    def manual_dunning_period; end

    sig { params(value: T.nilable(::Billing::ManualDunningPeriod)).void }
    def manual_dunning_period=(value); end

    sig { returns(T::Array[T.untyped]) }
    def organization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def organization_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :organizations, through: :customer_accounts`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Organization::PrivateCollectionProxy) }
    def organizations; end

    sig { params(value: T::Enumerable[::Organization]).void }
    def organizations=(value); end

    sig { returns(T.nilable(::Customer)) }
    def parent_customer; end

    sig { params(value: T.nilable(::Customer)).void }
    def parent_customer=(value); end

    sig { returns(T.nilable(::PaymentMethod)) }
    def payment_method; end

    sig { params(value: T.nilable(::PaymentMethod)).void }
    def payment_method=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pending_plan_change_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pending_plan_change_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :pending_plan_changes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PendingPlanChange::PrivateCollectionProxy) }
    def pending_plan_changes; end

    sig { params(value: T::Enumerable[::Billing::PendingPlanChange]).void }
    def pending_plan_changes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pending_subscription_item_change_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pending_subscription_item_change_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :pending_subscription_item_changes, through: :incomplete_pending_plan_changes`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::PendingSubscriptionItemChange::PrivateCollectionProxy) }
    def pending_subscription_item_changes; end

    sig { params(value: T::Enumerable[::Billing::PendingSubscriptionItemChange]).void }
    def pending_subscription_item_changes=(value); end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def plan_subscription; end

    sig { params(value: T.nilable(::Billing::PlanSubscription)).void }
    def plan_subscription=(value); end

    sig { returns(T::Array[T.untyped]) }
    def plan_subscription_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def plan_subscription_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :plan_subscriptions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PlanSubscription::PrivateCollectionProxy) }
    def plan_subscriptions; end

    sig { params(value: T::Enumerable[::Billing::PlanSubscription]).void }
    def plan_subscriptions=(value); end

    sig { returns(T.nilable(::Billing::Contact)) }
    def reload_billing_contact; end

    sig { returns(T.nilable(::UserEmail)) }
    def reload_billing_email; end

    sig { returns(T.nilable(::BillingPlatformEnabledProduct)) }
    def reload_billing_platform_enabled_product; end

    sig { returns(T.nilable(::Business)) }
    def reload_business; end

    sig { returns(T.nilable(::Billing::CreditCheck)) }
    def reload_credit_check; end

    sig { returns(T.nilable(::Billing::ManualDunningPeriod)) }
    def reload_manual_dunning_period; end

    sig { returns(T.nilable(::Customer)) }
    def reload_parent_customer; end

    sig { returns(T.nilable(::PaymentMethod)) }
    def reload_payment_method; end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def reload_plan_subscription; end

    sig { returns(T.nilable(::Billing::SalesServePlanSubscription)) }
    def reload_sales_serve_plan_subscription; end

    sig { returns(T.nilable(::Billing::Contact)) }
    def reload_shipping_contact; end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def reload_sponsors_plan_subscription; end

    sig { returns(T.nilable(::Billing::TaxExemptionStatus)) }
    def reload_tax_exemption_status; end

    sig { returns(T.nilable(::Billing::SalesServePlanSubscription)) }
    def sales_serve_plan_subscription; end

    sig { params(value: T.nilable(::Billing::SalesServePlanSubscription)).void }
    def sales_serve_plan_subscription=(value); end

    sig { returns(T.nilable(::Billing::Contact)) }
    def shipping_contact; end

    sig { params(value: T.nilable(::Billing::Contact)).void }
    def shipping_contact=(value); end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def sponsors_plan_subscription; end

    sig { params(value: T.nilable(::Billing::PlanSubscription)).void }
    def sponsors_plan_subscription=(value); end

    sig { returns(T::Array[T.untyped]) }
    def subscription_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subscription_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :subscription_items, through: :plan_subscriptions`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::SubscriptionItem::PrivateCollectionProxy) }
    def subscription_items; end

    sig { params(value: T::Enumerable[::Billing::SubscriptionItem]).void }
    def subscription_items=(value); end

    sig { returns(T.nilable(::Billing::TaxExemptionStatus)) }
    def tax_exemption_status; end

    sig { params(value: T.nilable(::Billing::TaxExemptionStatus)).void }
    def tax_exemption_status=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :users, through: :customer_accounts`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def users; end

    sig { params(value: T::Enumerable[::User]).void }
    def users=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def billed_in_billing_platform(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def general_purpose(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_general_purpose(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_sponsors_purpose(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sponsors_purpose(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_zuora_account_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_active_subscription_items; end

    sig { returns(Promise[T.untyped]) }
    def async_billing_contact; end

    sig { returns(Promise[T.untyped]) }
    def async_billing_email; end

    sig { returns(Promise[T.untyped]) }
    def async_billing_platform_enabled_product; end

    sig { returns(Promise[T.untyped]) }
    def async_billing_transactions; end

    sig { returns(Promise[T.untyped]) }
    def async_business; end

    sig { returns(Promise[T.untyped]) }
    def async_child_customers; end

    sig { returns(Promise[T.untyped]) }
    def async_configuration_entries; end

    sig { returns(Promise[T.untyped]) }
    def async_contacts; end

    sig { returns(Promise[T.untyped]) }
    def async_credit_check; end

    sig { returns(Promise[T.untyped]) }
    def async_customer_accounts; end

    sig { returns(Promise[T.untyped]) }
    def async_incomplete_pending_plan_changes; end

    sig { returns(Promise[T.untyped]) }
    def async_licensing_model_transitions; end

    sig { returns(Promise[T.untyped]) }
    def async_manual_dunning_period; end

    sig { returns(Promise[T.untyped]) }
    def async_organizations; end

    sig { returns(Promise[T.untyped]) }
    def async_parent_customer; end

    sig { returns(Promise[T.untyped]) }
    def async_payment_method; end

    sig { returns(Promise[T.untyped]) }
    def async_pending_plan_changes; end

    sig { returns(Promise[T.untyped]) }
    def async_pending_subscription_item_changes; end

    sig { returns(Promise[T.untyped]) }
    def async_plan_subscription; end

    sig { returns(Promise[T.untyped]) }
    def async_plan_subscriptions; end

    sig { returns(Promise[T.untyped]) }
    def async_sales_serve_plan_subscription; end

    sig { returns(Promise[T.untyped]) }
    def async_shipping_contact; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_plan_subscription; end

    sig { returns(Promise[T.untyped]) }
    def async_subscription_items; end

    sig { returns(Promise[T.untyped]) }
    def async_tax_exemption_status; end

    sig { returns(Promise[T.untyped]) }
    def async_users; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.untyped) }
    def auto_pay_reasons; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def auto_pay_reasons=(value); end

    sig { returns(T::Boolean) }
    def auto_pay_reasons?; end

    sig { returns(T.untyped) }
    def auto_pay_reasons_before_last_save; end

    sig { returns(T.untyped) }
    def auto_pay_reasons_before_type_cast; end

    sig { returns(T::Boolean) }
    def auto_pay_reasons_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def auto_pay_reasons_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def auto_pay_reasons_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def auto_pay_reasons_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def auto_pay_reasons_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def auto_pay_reasons_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def auto_pay_reasons_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def auto_pay_reasons_previously_was; end

    sig { returns(T.untyped) }
    def auto_pay_reasons_was; end

    sig { void }
    def auto_pay_reasons_will_change!; end

    sig { returns(T.nilable(::String)) }
    def azure_subscription_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def azure_subscription_id=(value); end

    sig { returns(T::Boolean) }
    def azure_subscription_id?; end

    sig { returns(T.nilable(::String)) }
    def azure_subscription_id_before_last_save; end

    sig { returns(T.untyped) }
    def azure_subscription_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def azure_subscription_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def azure_subscription_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def azure_subscription_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def azure_subscription_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def azure_subscription_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def azure_subscription_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def azure_subscription_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def azure_subscription_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def azure_subscription_id_was; end

    sig { void }
    def azure_subscription_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def azure_subscription_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def azure_subscription_name=(value); end

    sig { returns(T::Boolean) }
    def azure_subscription_name?; end

    sig { returns(T.nilable(::String)) }
    def azure_subscription_name_before_last_save; end

    sig { returns(T.untyped) }
    def azure_subscription_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def azure_subscription_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def azure_subscription_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def azure_subscription_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def azure_subscription_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def azure_subscription_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def azure_subscription_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def azure_subscription_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def azure_subscription_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def azure_subscription_name_was; end

    sig { void }
    def azure_subscription_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def bill_cycle_day; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def bill_cycle_day=(value); end

    sig { returns(T::Boolean) }
    def bill_cycle_day?; end

    sig { returns(T.nilable(::Integer)) }
    def bill_cycle_day_before_last_save; end

    sig { returns(T.untyped) }
    def bill_cycle_day_before_type_cast; end

    sig { returns(T::Boolean) }
    def bill_cycle_day_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def bill_cycle_day_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def bill_cycle_day_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def bill_cycle_day_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def bill_cycle_day_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def bill_cycle_day_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def bill_cycle_day_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def bill_cycle_day_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def bill_cycle_day_was; end

    sig { void }
    def bill_cycle_day_will_change!; end

    sig { returns(T.nilable(::String)) }
    def bill_to; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def bill_to=(value); end

    sig { returns(T::Boolean) }
    def bill_to?; end

    sig { returns(T.nilable(::String)) }
    def bill_to_before_last_save; end

    sig { returns(T.untyped) }
    def bill_to_before_type_cast; end

    sig { returns(T::Boolean) }
    def bill_to_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def bill_to_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def bill_to_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def bill_to_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def bill_to_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def bill_to_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def bill_to_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def bill_to_previously_was; end

    sig { returns(T.nilable(::String)) }
    def bill_to_was; end

    sig { void }
    def bill_to_will_change!; end

    sig { returns(T::Boolean) }
    def billed_via_billing_platform; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def billed_via_billing_platform=(value); end

    sig { returns(T::Boolean) }
    def billed_via_billing_platform?; end

    sig { returns(T.nilable(T::Boolean)) }
    def billed_via_billing_platform_before_last_save; end

    sig { returns(T.untyped) }
    def billed_via_billing_platform_before_type_cast; end

    sig { returns(T::Boolean) }
    def billed_via_billing_platform_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def billed_via_billing_platform_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def billed_via_billing_platform_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def billed_via_billing_platform_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def billed_via_billing_platform_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def billed_via_billing_platform_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def billed_via_billing_platform_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def billed_via_billing_platform_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def billed_via_billing_platform_was; end

    sig { void }
    def billed_via_billing_platform_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def billing_attempts; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def billing_attempts=(value); end

    sig { returns(T::Boolean) }
    def billing_attempts?; end

    sig { returns(T.nilable(::Integer)) }
    def billing_attempts_before_last_save; end

    sig { returns(T.untyped) }
    def billing_attempts_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_attempts_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def billing_attempts_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def billing_attempts_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def billing_attempts_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def billing_attempts_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def billing_attempts_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def billing_attempts_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def billing_attempts_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def billing_attempts_was; end

    sig { void }
    def billing_attempts_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def billing_email_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def billing_email_id=(value); end

    sig { returns(T::Boolean) }
    def billing_email_id?; end

    sig { returns(T.nilable(::Integer)) }
    def billing_email_id_before_last_save; end

    sig { returns(T.untyped) }
    def billing_email_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_email_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def billing_email_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def billing_email_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def billing_email_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def billing_email_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def billing_email_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def billing_email_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def billing_email_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def billing_email_id_was; end

    sig { void }
    def billing_email_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_end_date; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_end_date=(value); end

    sig { returns(T::Boolean) }
    def billing_end_date?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_end_date_before_last_save; end

    sig { returns(T.untyped) }
    def billing_end_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_end_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def billing_end_date_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def billing_end_date_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def billing_end_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_end_date_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def billing_end_date_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def billing_end_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_end_date_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_end_date_was; end

    sig { void }
    def billing_end_date_will_change!; end

    sig { returns(T.nilable(::String)) }
    def billing_extra; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def billing_extra=(value); end

    sig { returns(T::Boolean) }
    def billing_extra?; end

    sig { returns(T.nilable(::String)) }
    def billing_extra_before_last_save; end

    sig { returns(T.untyped) }
    def billing_extra_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_extra_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_extra_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_extra_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_extra_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_extra_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_extra_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_extra_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_extra_previously_was; end

    sig { returns(T.nilable(::String)) }
    def billing_extra_was; end

    sig { void }
    def billing_extra_will_change!; end

    sig { returns(T.nilable(::String)) }
    def billing_instructions; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def billing_instructions=(value); end

    sig { returns(T::Boolean) }
    def billing_instructions?; end

    sig { returns(T.nilable(::String)) }
    def billing_instructions_before_last_save; end

    sig { returns(T.untyped) }
    def billing_instructions_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_instructions_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_instructions_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_instructions_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_instructions_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_instructions_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_instructions_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_instructions_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_instructions_previously_was; end

    sig { returns(T.nilable(::String)) }
    def billing_instructions_was; end

    sig { void }
    def billing_instructions_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_start_date; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_start_date=(value); end

    sig { returns(T::Boolean) }
    def billing_start_date?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_start_date_before_last_save; end

    sig { returns(T.untyped) }
    def billing_start_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_start_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def billing_start_date_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def billing_start_date_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def billing_start_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_start_date_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def billing_start_date_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def billing_start_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_start_date_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_start_date_was; end

    sig { void }
    def billing_start_date_will_change!; end

    sig { returns(T.nilable(::String)) }
    def billing_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def billing_type=(value); end

    sig { returns(T::Boolean) }
    def billing_type?; end

    sig { returns(T.nilable(::String)) }
    def billing_type_before_last_save; end

    sig { returns(T.untyped) }
    def billing_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_type_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_type_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def billing_type_was; end

    sig { void }
    def billing_type_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country_code_alpha2; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country_code_alpha2=(value); end

    sig { returns(T::Boolean) }
    def country_code_alpha2?; end

    sig { returns(T.nilable(::String)) }
    def country_code_alpha2_before_last_save; end

    sig { returns(T.untyped) }
    def country_code_alpha2_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_code_alpha2_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_code_alpha2_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_code_alpha2_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_code_alpha2_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_code_alpha2_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_code_alpha2_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_code_alpha2_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_code_alpha2_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_code_alpha2_was; end

    sig { void }
    def country_code_alpha2_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def custom_volume_discount; end

    sig { params(value: ::Integer).returns(::Integer) }
    def custom_volume_discount=(value); end

    sig { returns(T::Boolean) }
    def custom_volume_discount?; end

    sig { returns(T.nilable(::Integer)) }
    def custom_volume_discount_before_last_save; end

    sig { returns(T.untyped) }
    def custom_volume_discount_before_type_cast; end

    sig { returns(T::Boolean) }
    def custom_volume_discount_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def custom_volume_discount_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def custom_volume_discount_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def custom_volume_discount_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def custom_volume_discount_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def custom_volume_discount_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def custom_volume_discount_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def custom_volume_discount_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def custom_volume_discount_was; end

    sig { void }
    def custom_volume_discount_will_change!; end

    sig { returns(T.nilable(::String)) }
    def description; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.untyped) }
    def disabled_reasons; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def disabled_reasons=(value); end

    sig { returns(T::Boolean) }
    def disabled_reasons?; end

    sig { returns(T.untyped) }
    def disabled_reasons_before_last_save; end

    sig { returns(T.untyped) }
    def disabled_reasons_before_type_cast; end

    sig { returns(T::Boolean) }
    def disabled_reasons_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def disabled_reasons_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def disabled_reasons_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def disabled_reasons_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def disabled_reasons_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def disabled_reasons_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def disabled_reasons_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def disabled_reasons_previously_was; end

    sig { returns(T.untyped) }
    def disabled_reasons_was; end

    sig { void }
    def disabled_reasons_will_change!; end

    sig { returns(T.nilable(::String)) }
    def emails; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def emails=(value); end

    sig { returns(T::Boolean) }
    def emails?; end

    sig { returns(T.nilable(::String)) }
    def emails_before_last_save; end

    sig { returns(T.untyped) }
    def emails_before_type_cast; end

    sig { returns(T::Boolean) }
    def emails_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def emails_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def emails_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def emails_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def emails_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def emails_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def emails_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def emails_previously_was; end

    sig { returns(T.nilable(::String)) }
    def emails_was; end

    sig { void }
    def emails_will_change!; end

    sig { returns(::String) }
    def external_uuid; end

    sig { params(value: ::String).returns(::String) }
    def external_uuid=(value); end

    sig { returns(T::Boolean) }
    def external_uuid?; end

    sig { returns(T.nilable(::String)) }
    def external_uuid_before_last_save; end

    sig { returns(T.untyped) }
    def external_uuid_before_type_cast; end

    sig { returns(T::Boolean) }
    def external_uuid_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def external_uuid_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def external_uuid_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def external_uuid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def external_uuid_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def external_uuid_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def external_uuid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def external_uuid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def external_uuid_was; end

    sig { void }
    def external_uuid_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Boolean) }
    def metered_ghe; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def metered_ghe=(value); end

    sig { returns(T::Boolean) }
    def metered_ghe?; end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_ghe_before_last_save; end

    sig { returns(T.untyped) }
    def metered_ghe_before_type_cast; end

    sig { returns(T::Boolean) }
    def metered_ghe_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def metered_ghe_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def metered_ghe_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def metered_ghe_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_ghe_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def metered_ghe_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def metered_ghe_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_ghe_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_ghe_was; end

    sig { void }
    def metered_ghe_will_change!; end

    sig { returns(T::Boolean) }
    def metered_plan; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def metered_plan=(value); end

    sig { returns(T::Boolean) }
    def metered_plan?; end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_plan_before_last_save; end

    sig { returns(T.untyped) }
    def metered_plan_before_type_cast; end

    sig { returns(T::Boolean) }
    def metered_plan_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def metered_plan_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def metered_plan_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def metered_plan_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_plan_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def metered_plan_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def metered_plan_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_plan_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_plan_was; end

    sig { void }
    def metered_plan_will_change!; end

    sig { returns(T::Boolean) }
    def metered_via_azure; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def metered_via_azure=(value); end

    sig { returns(T::Boolean) }
    def metered_via_azure?; end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_via_azure_before_last_save; end

    sig { returns(T.untyped) }
    def metered_via_azure_before_type_cast; end

    sig { returns(T::Boolean) }
    def metered_via_azure_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def metered_via_azure_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def metered_via_azure_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def metered_via_azure_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_via_azure_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def metered_via_azure_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def metered_via_azure_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_via_azure_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def metered_via_azure_was; end

    sig { void }
    def metered_via_azure_will_change!; end

    sig { returns(T.untyped) }
    def name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.untyped) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def name_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def name_previously_was; end

    sig { returns(T.untyped) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def parent_customer_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def parent_customer_id=(value); end

    sig { returns(T::Boolean) }
    def parent_customer_id?; end

    sig { returns(T.nilable(::Integer)) }
    def parent_customer_id_before_last_save; end

    sig { returns(T.untyped) }
    def parent_customer_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def parent_customer_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def parent_customer_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def parent_customer_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def parent_customer_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def parent_customer_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def parent_customer_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def parent_customer_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def parent_customer_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def parent_customer_id_was; end

    sig { void }
    def parent_customer_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def postal_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def postal_code=(value); end

    sig { returns(T::Boolean) }
    def postal_code?; end

    sig { returns(T.nilable(::String)) }
    def postal_code_before_last_save; end

    sig { returns(T.untyped) }
    def postal_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def postal_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def postal_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def postal_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def postal_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def postal_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def postal_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def postal_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def postal_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def postal_code_was; end

    sig { void }
    def postal_code_will_change!; end

    sig { returns(::String) }
    def purpose; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def purpose=(value); end

    sig { returns(T::Boolean) }
    def purpose?; end

    sig { returns(T.nilable(::String)) }
    def purpose_before_last_save; end

    sig { returns(T.untyped) }
    def purpose_before_type_cast; end

    sig { returns(T::Boolean) }
    def purpose_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def purpose_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def purpose_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def purpose_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def purpose_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def purpose_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def purpose_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def purpose_previously_was; end

    sig { returns(T.nilable(::String)) }
    def purpose_was; end

    sig { void }
    def purpose_will_change!; end

    sig { returns(T.nilable(::String)) }
    def region; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def region=(value); end

    sig { returns(T::Boolean) }
    def region?; end

    sig { returns(T.nilable(::String)) }
    def region_before_last_save; end

    sig { returns(T.untyped) }
    def region_before_type_cast; end

    sig { returns(T::Boolean) }
    def region_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region_previously_was; end

    sig { returns(T.nilable(::String)) }
    def region_was; end

    sig { void }
    def region_will_change!; end

    sig { void }
    def restore_auto_pay_reasons!; end

    sig { void }
    def restore_azure_subscription_id!; end

    sig { void }
    def restore_azure_subscription_name!; end

    sig { void }
    def restore_bill_cycle_day!; end

    sig { void }
    def restore_bill_to!; end

    sig { void }
    def restore_billed_via_billing_platform!; end

    sig { void }
    def restore_billing_attempts!; end

    sig { void }
    def restore_billing_email_id!; end

    sig { void }
    def restore_billing_end_date!; end

    sig { void }
    def restore_billing_extra!; end

    sig { void }
    def restore_billing_instructions!; end

    sig { void }
    def restore_billing_start_date!; end

    sig { void }
    def restore_billing_type!; end

    sig { void }
    def restore_country_code_alpha2!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_custom_volume_discount!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_disabled_reasons!; end

    sig { void }
    def restore_emails!; end

    sig { void }
    def restore_external_uuid!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_metered_ghe!; end

    sig { void }
    def restore_metered_plan!; end

    sig { void }
    def restore_metered_via_azure!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_parent_customer_id!; end

    sig { void }
    def restore_postal_code!; end

    sig { void }
    def restore_purpose!; end

    sig { void }
    def restore_region!; end

    sig { void }
    def restore_street_address!; end

    sig { void }
    def restore_term_length!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_vat_code!; end

    sig { void }
    def restore_zuora_account_id!; end

    sig { void }
    def restore_zuora_account_number!; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_auto_pay_reasons; end

    sig { returns(T::Boolean) }
    def saved_change_to_auto_pay_reasons?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_azure_subscription_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_azure_subscription_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_azure_subscription_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_azure_subscription_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_bill_cycle_day; end

    sig { returns(T::Boolean) }
    def saved_change_to_bill_cycle_day?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_bill_to; end

    sig { returns(T::Boolean) }
    def saved_change_to_bill_to?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_billed_via_billing_platform; end

    sig { returns(T::Boolean) }
    def saved_change_to_billed_via_billing_platform?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_billing_attempts; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_attempts?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_billing_email_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_email_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_billing_end_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_end_date?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_billing_extra; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_extra?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_billing_instructions; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_instructions?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_billing_start_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_start_date?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_billing_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country_code_alpha2; end

    sig { returns(T::Boolean) }
    def saved_change_to_country_code_alpha2?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_custom_volume_discount; end

    sig { returns(T::Boolean) }
    def saved_change_to_custom_volume_discount?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_disabled_reasons; end

    sig { returns(T::Boolean) }
    def saved_change_to_disabled_reasons?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_emails; end

    sig { returns(T::Boolean) }
    def saved_change_to_emails?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_external_uuid; end

    sig { returns(T::Boolean) }
    def saved_change_to_external_uuid?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_metered_ghe; end

    sig { returns(T::Boolean) }
    def saved_change_to_metered_ghe?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_metered_plan; end

    sig { returns(T::Boolean) }
    def saved_change_to_metered_plan?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_metered_via_azure; end

    sig { returns(T::Boolean) }
    def saved_change_to_metered_via_azure?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_parent_customer_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_parent_customer_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_postal_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_postal_code?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_purpose; end

    sig { returns(T::Boolean) }
    def saved_change_to_purpose?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_region; end

    sig { returns(T::Boolean) }
    def saved_change_to_region?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_street_address; end

    sig { returns(T::Boolean) }
    def saved_change_to_street_address?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_term_length; end

    sig { returns(T::Boolean) }
    def saved_change_to_term_length?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_vat_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_vat_code?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_zuora_account_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_zuora_account_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_zuora_account_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_zuora_account_number?; end

    sig { returns(T.nilable(::String)) }
    def street_address; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def street_address=(value); end

    sig { returns(T::Boolean) }
    def street_address?; end

    sig { returns(T.nilable(::String)) }
    def street_address_before_last_save; end

    sig { returns(T.untyped) }
    def street_address_before_type_cast; end

    sig { returns(T::Boolean) }
    def street_address_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def street_address_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def street_address_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def street_address_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def street_address_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def street_address_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def street_address_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def street_address_previously_was; end

    sig { returns(T.nilable(::String)) }
    def street_address_was; end

    sig { void }
    def street_address_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def term_length; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def term_length=(value); end

    sig { returns(T::Boolean) }
    def term_length?; end

    sig { returns(T.nilable(::Integer)) }
    def term_length_before_last_save; end

    sig { returns(T.untyped) }
    def term_length_before_type_cast; end

    sig { returns(T::Boolean) }
    def term_length_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def term_length_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def term_length_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def term_length_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def term_length_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def term_length_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def term_length_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def term_length_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def term_length_was; end

    sig { void }
    def term_length_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def vat_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def vat_code=(value); end

    sig { returns(T::Boolean) }
    def vat_code?; end

    sig { returns(T.nilable(::String)) }
    def vat_code_before_last_save; end

    sig { returns(T.untyped) }
    def vat_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def vat_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def vat_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def vat_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def vat_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def vat_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def vat_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def vat_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def vat_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def vat_code_was; end

    sig { void }
    def vat_code_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_auto_pay_reasons?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_azure_subscription_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_azure_subscription_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bill_cycle_day?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bill_to?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billed_via_billing_platform?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_attempts?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_email_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_end_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_extra?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_instructions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_start_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country_code_alpha2?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_custom_volume_discount?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disabled_reasons?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_emails?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_external_uuid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_metered_ghe?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_metered_plan?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_metered_via_azure?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_parent_customer_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_postal_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_purpose?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_region?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_street_address?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_term_length?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vat_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_zuora_account_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_zuora_account_number?; end

    sig { returns(T.nilable(::String)) }
    def zuora_account_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def zuora_account_id=(value); end

    sig { returns(T::Boolean) }
    def zuora_account_id?; end

    sig { returns(T.nilable(::String)) }
    def zuora_account_id_before_last_save; end

    sig { returns(T.untyped) }
    def zuora_account_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def zuora_account_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_account_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_account_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_account_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_account_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_account_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_account_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_account_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def zuora_account_id_was; end

    sig { void }
    def zuora_account_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def zuora_account_number; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def zuora_account_number=(value); end

    sig { returns(T::Boolean) }
    def zuora_account_number?; end

    sig { returns(T.nilable(::String)) }
    def zuora_account_number_before_last_save; end

    sig { returns(T.untyped) }
    def zuora_account_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def zuora_account_number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_account_number_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_account_number_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_account_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_account_number_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zuora_account_number_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zuora_account_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zuora_account_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def zuora_account_number_was; end

    sig { void }
    def zuora_account_number_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def billed_in_billing_platform(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def general_purpose(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_general_purpose(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_sponsors_purpose(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sponsors_purpose(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_zuora_account_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Customer } }

    sig { returns(T::Array[::Customer]) }
    def to_a; end

    sig { returns(T::Array[::Customer]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Customer } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Customer } }

    sig do
      params(
        records: T.any(::Customer, T::Enumerable[T.any(::Customer, T::Enumerable[::Customer])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Customer, T::Enumerable[T.any(::Customer, T::Enumerable[::Customer])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Customer, T::Enumerable[T.any(::Customer, T::Enumerable[::Customer])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Customer]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Customer, T::Enumerable[T.any(::Customer, T::Enumerable[::Customer])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Customer, T::Enumerable[T.any(::Customer, T::Enumerable[::Customer])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Customer, T::Enumerable[T.any(::Customer, T::Enumerable[::Customer])])
      ).returns(T::Array[::Customer])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Customer]) }
    def target; end

    sig { returns(T::Array[::Customer]) }
    def to_a; end

    sig { returns(T::Array[::Customer]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Customer } }

    sig { returns(T::Array[::Customer]) }
    def to_a; end

    sig { returns(T::Array[::Customer]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Customer } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

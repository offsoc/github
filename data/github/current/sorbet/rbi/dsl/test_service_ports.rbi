# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `TestServicePorts`.
# Please instead update this file by running `bin/tapioca dsl TestServicePorts`.

module TestServicePorts
  extend GeneratedReservedRangeAccessors

  module GeneratedReservedRangeAccessors
    sig { returns(Integer) }
    def aqueduct_lite_port; end

    sig { returns(Integer) }
    def authzd_port; end

    sig { returns(Integer) }
    def babeld_git_port; end

    sig { returns(Integer) }
    def babeld_http_port; end

    sig { returns(Integer) }
    def babeld_preload_port; end

    sig { returns(Integer) }
    def babeld_repl_svnpush_port; end

    sig { returns(Integer) }
    def babeld_ssh_port; end

    sig { returns(Integer) }
    def babeld_svn_port; end

    sig { returns(Integer) }
    def babeld_svn_push_port; end

    sig { returns(Integer) }
    def bad_gpgverify_port; end

    sig { returns(Integer) }
    def capybara_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_10_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_11_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_12_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_13_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_14_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_15_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_16_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_17_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_18_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_19_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_1_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_20_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_2_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_3_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_4_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_5_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_6_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_7_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_8_port; end

    sig { returns(Integer) }
    def dgit_gitrpc_9_port; end

    sig { returns(Integer) }
    def empty_port; end

    sig { returns(Integer) }
    def ernicorn1_port; end

    sig { returns(Integer) }
    def ernicorn2_port; end

    sig { returns(Integer) }
    def ernicorn3_port; end

    sig { returns(Integer) }
    def ernicorn4_port; end

    sig { returns(Integer) }
    def ernicorn_port; end

    sig { returns(Integer) }
    def expvar_server_port; end

    sig { returns(Integer) }
    def git_daemon_admin_port; end

    sig { returns(Integer) }
    def git_daemon_port; end

    sig { returns(Integer) }
    def git_http_port; end

    sig { returns(Integer) }
    def gitauth_internal_api_port; end

    sig { returns(Integer) }
    def gitauth_port; end

    sig { returns(Integer) }
    def gitrpcd1_git_port; end

    sig { returns(Integer) }
    def gitrpcd1_http_port; end

    sig { returns(Integer) }
    def gitrpcd2_git_port; end

    sig { returns(Integer) }
    def gitrpcd2_http_port; end

    sig { returns(Integer) }
    def gitrpcd3_git_port; end

    sig { returns(Integer) }
    def gitrpcd3_http_port; end

    sig { returns(Integer) }
    def gitrpcd4_git_port; end

    sig { returns(Integer) }
    def gitrpcd4_http_port; end

    sig { returns(Integer) }
    def gitrpcd_http_port; end

    sig { returns(Integer) }
    def gpgverify_port; end

    sig { returns(Integer) }
    def ldap_port; end

    sig { returns(Integer) }
    def memcached_1_port; end

    sig { returns(Integer) }
    def memcached_2_port; end

    sig { returns(Integer) }
    def notifications_primary_toxiproxy_port; end

    sig { returns(Integer) }
    def notifications_readonly_toxiproxy_port; end

    sig { returns(Integer) }
    def postrx_internal_api_port; end

    sig { returns(Integer) }
    def resilient_trilogy_toxiproxy_port; end

    sig { returns(Integer) }
    def slumlord_port; end

    sig { returns(Integer) }
    def spokesd_http_port; end

    sig { returns(Integer) }
    def spokesd_internal_port; end
  end
end

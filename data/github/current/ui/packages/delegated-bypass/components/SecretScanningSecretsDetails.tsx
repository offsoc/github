import {ChevronDownIcon, ChevronUpIcon, StopIcon} from '@primer/octicons-react'
import {Box, Octicon, Text, IconButton} from '@primer/react'
import {Fragment, useMemo, useState} from 'react'
import {useRoutePayload} from '@github-ui/react-core/use-route-payload'
import type {ExemptionRequestPayload, NewExemptionRequestPayload} from '../delegated-bypass-types'
// eslint-disable-next-line @github-ui/github-monorepo/restrict-package-deep-imports
import type {RuleRun} from '@github-ui/repos-rules/types/rules-types'

export function SecretScanningSecretsDetails({ruleRuns}: {ruleRuns: RuleRun[]}) {
  const [showDetails, setShowDetails] = useState(false)
  const payload = useRoutePayload<ExemptionRequestPayload | NewExemptionRequestPayload>()
  let resourceId = 'Unknown'
  if ('resourceId' in payload && payload.resourceId) {
    resourceId = payload.resourceId
  } else if ('request' in payload && payload.request.resourceId) {
    resourceId = payload.request.resourceId
  }

  const {tokenType, commitMetadata} = useMemo((): {
    tokenType: string
    commitMetadata: Array<{commitHash: string; path: string; refName: string}>
  } => {
    const ruleRun = ruleRuns.at(-1)
    let reloadedTokenType = 'Unknown'
    let reloadedCommitMetadata = [{commitHash: 'Unknown', path: 'Unknown', refName: 'Unknown'}]

    if (ruleRun?.metadata && 'secrets' in ruleRun.metadata) {
      const matchingSecrets = ruleRun.metadata.secrets.filter(secret => secret.bypass_placeholder_ksuid === resourceId)
      if (matchingSecrets.length === 1 && matchingSecrets[0]) {
        reloadedTokenType = matchingSecrets[0].token_metadata.label
        reloadedCommitMetadata = matchingSecrets[0].locations.map(location => ({
          commitHash: location.commit_oid,
          path: location ? `${location.path}:${location.start_line}:${location.start_line_byte_position}` : `Unknown`,
          refName: payload.ruleSuite.refName,
        }))
      }
    } else if (ruleRun?.metadata) {
      // Metadata generated by the secret scanning content scan rule is in the format: {<path>: <SecretsMetadata>}.
      // We'll take the first secret from the first SecretsMetadata value.
      const metadataValues = Object.entries(ruleRun?.metadata)[0]
      if (metadataValues) {
        const [key, scanResults] = metadataValues
        if (scanResults.secrets.length > 0) {
          const secret = scanResults.secrets[0]
          const location = secret?.locations[0]
          reloadedTokenType = secret.token_metadata.label
          // The commit is still pending since it's being tried via the web UI.
          reloadedCommitMetadata = [
            {
              commitHash: 'Pending (from file editor)',
              path: `${key}${location ? `:${location?.start_line}:${location?.start_line_byte_position}` : ``}`,
              refName: payload.ruleSuite.refName,
            },
          ]
        }
      }
    }
    return {
      tokenType: reloadedTokenType,
      commitMetadata: reloadedCommitMetadata,
    }
  }, [ruleRuns, resourceId, payload.ruleSuite.refName])

  const ruleDisplayName = 'Secrets detected'

  return (
    <Box sx={{mx: 4, py: 3}}>
      <Box sx={{display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}>
        <Box sx={{display: 'flex', alignItems: 'center'}}>
          <Octicon icon={StopIcon} size={16} sx={{color: 'danger.fg'}} />
          <Text sx={{fontSize: 2, fontWeight: 'bold', ml: 2}}>{ruleDisplayName} </Text>
        </Box>
        <Box sx={{display: 'flex', alignItems: 'center'}}>
          {/* eslint-disable-next-line primer-react/a11y-remove-disable-tooltip */}
          <IconButton
            unsafeDisableTooltip={true}
            aria-label="View details"
            variant="invisible"
            icon={showDetails ? ChevronUpIcon : ChevronDownIcon}
            sx={{ml: 2}}
            onClick={() => setShowDetails(!showDetails)}
          />
        </Box>
      </Box>
      {showDetails && (
        <>
          <Box sx={{display: 'flex', alignItems: 'center'}}>
            <Text sx={{fontSize: 2, fontWeight: 'bold', ml: 2, marginTop: 3}}>{tokenType}</Text>
          </Box>
          <Box
            as="ul"
            sx={{
              p: 3,
              my: 3,
              display: 'flex',
              flexDirection: 'column',
              fontFamily: 'mono',
              fontSize: 12,
              backgroundColor: 'canvas.subtle',
              overflowX: 'auto',
              whiteSpace: 'nowrap',
              listStyleType: 'none',
              '> li.commitHash::before': {
                content: "'-'",
                mr: 1,
              },
              '> li.metadata::before': {
                content: "' '",
                whiteSpace: 'pre',
                mr: 1,
              },
            }}
            tabIndex={0}
            className="Box"
          >
            {commitMetadata.map(({commitHash, path, refName}) => {
              return (
                <Fragment key={`${commitHash}-container`}>
                  <li className="commitHash" key={commitHash}>
                    commit: {commitHash}
                  </li>
                  <li className="metadata" key={`${commitHash}:${path}`}>
                    path: {path}
                  </li>
                  <li className="metadata" key={`${commitHash}:${refName}`}>
                    branch: {refName}
                  </li>
                </Fragment>
              )
            })}
          </Box>
        </>
      )}
    </Box>
  )
}

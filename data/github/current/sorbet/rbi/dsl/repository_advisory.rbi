# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `RepositoryAdvisory`.
# Please instead update this file by running `bin/tapioca dsl RepositoryAdvisory`.

class RepositoryAdvisory
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def repo_advisory_types; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def severities; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def states; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::RepositoryAdvisory).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryAdvisory).void)
      ).returns(::RepositoryAdvisory)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryAdvisory).void)
      ).returns(::RepositoryAdvisory)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryAdvisory).void)
      ).returns(::RepositoryAdvisory)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryAdvisory).void)
      ).returns(::RepositoryAdvisory)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryAdvisory).void)
      ).returns(::RepositoryAdvisory)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::RepositoryAdvisory]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::RepositoryAdvisory)) }
    def fifth; end

    sig { returns(::RepositoryAdvisory) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::RepositoryAdvisory)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::RepositoryAdvisory) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::RepositoryAdvisory).void)
      ).returns(T.nilable(T::Enumerator[::RepositoryAdvisory]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::RepositoryAdvisory]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::RepositoryAdvisory]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryAdvisory).void)
      ).returns(::RepositoryAdvisory)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryAdvisory).void)
      ).returns(::RepositoryAdvisory)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryAdvisory).void)
      ).returns(::RepositoryAdvisory)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::RepositoryAdvisory)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::RepositoryAdvisory) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::RepositoryAdvisory) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::RepositoryAdvisory) }
    def first!; end

    sig { returns(T.nilable(::RepositoryAdvisory)) }
    def forty_two; end

    sig { returns(::RepositoryAdvisory) }
    def forty_two!; end

    sig { returns(T.nilable(::RepositoryAdvisory)) }
    def fourth; end

    sig { returns(::RepositoryAdvisory) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::RepositoryAdvisory) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::RepositoryAdvisory).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryAdvisory).void)
      ).returns(::RepositoryAdvisory)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::RepositoryAdvisory).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::RepositoryAdvisory).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::RepositoryAdvisory)) }
    def second; end

    sig { returns(::RepositoryAdvisory) }
    def second!; end

    sig { returns(T.nilable(::RepositoryAdvisory)) }
    def second_to_last; end

    sig { returns(::RepositoryAdvisory) }
    def second_to_last!; end

    sig { returns(::RepositoryAdvisory) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::RepositoryAdvisory) }
    def take!; end

    sig { returns(T.nilable(::RepositoryAdvisory)) }
    def third; end

    sig { returns(::RepositoryAdvisory) }
    def third!; end

    sig { returns(T.nilable(::RepositoryAdvisory)) }
    def third_to_last; end

    sig { returns(::RepositoryAdvisory) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def closed!; end

    sig { returns(T::Boolean) }
    def closed?; end

    sig { void }
    def critical!; end

    sig { returns(T::Boolean) }
    def critical?; end

    sig { void }
    def high!; end

    sig { returns(T::Boolean) }
    def high?; end

    sig { void }
    def innersource!; end

    sig { returns(T::Boolean) }
    def innersource?; end

    sig { void }
    def low!; end

    sig { returns(T::Boolean) }
    def low?; end

    sig { void }
    def moderate!; end

    sig { returns(T::Boolean) }
    def moderate?; end

    sig { void }
    def open!; end

    sig { returns(T::Boolean) }
    def open?; end

    sig { void }
    def open_source!; end

    sig { returns(T::Boolean) }
    def open_source?; end

    sig { void }
    def published!; end

    sig { returns(T::Boolean) }
    def published?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def abuse_report_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def abuse_report_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryAdvisory` class because it declared `has_many :abuse_reports`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AbuseReport::PrivateCollectionProxy) }
    def abuse_reports; end

    sig { params(value: T::Enumerable[::AbuseReport]).void }
    def abuse_reports=(value); end

    sig { returns(T::Array[T.untyped]) }
    def affected_product_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def affected_product_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryAdvisory` class because it declared `has_many :affected_products`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryAdvisoryAffectedProduct::PrivateCollectionProxy) }
    def affected_products; end

    sig { params(value: T::Enumerable[::RepositoryAdvisoryAffectedProduct]).void }
    def affected_products=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def affected_products_attributes=(attributes); end

    sig { returns(T.nilable(::User)) }
    def author; end

    sig { params(value: T.nilable(::User)).void }
    def author=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_author(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAdvisoryEdit) }
    def build_latest_user_content_edit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_publisher(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ScopedVulnerability) }
    def build_scoped_vulnerability(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Vulnerability) }
    def build_vulnerability(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_workspace_repository(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def comment_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryAdvisory` class because it declared `has_many :comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryAdvisoryComment::PrivateCollectionProxy) }
    def comments; end

    sig { params(value: T::Enumerable[::RepositoryAdvisoryComment]).void }
    def comments=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_author(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_author!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAdvisoryEdit) }
    def create_latest_user_content_edit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAdvisoryEdit) }
    def create_latest_user_content_edit!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_publisher(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_publisher!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ScopedVulnerability) }
    def create_scoped_vulnerability(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ScopedVulnerability) }
    def create_scoped_vulnerability!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Vulnerability) }
    def create_vulnerability(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Vulnerability) }
    def create_vulnerability!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_workspace_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_workspace_repository!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def credit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def credit_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryAdvisory` class because it declared `has_many :credits`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AdvisoryCredit::PrivateCollectionProxy) }
    def credits; end

    sig { params(value: T::Enumerable[::AdvisoryCredit]).void }
    def credits=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def credits_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def cwe_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def cwe_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def cwe_reference_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def cwe_reference_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryAdvisory` class because it declared `has_many :cwe_references`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CWEReference::PrivateCollectionProxy) }
    def cwe_references; end

    sig { params(value: T::Enumerable[::CWEReference]).void }
    def cwe_references=(value); end

    # This method is created by ActiveRecord on the `RepositoryAdvisory` class because it declared `has_many :cwes, through: :cwe_references`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::CWE::PrivateCollectionProxy) }
    def cwes; end

    sig { params(value: T::Enumerable[::CWE]).void }
    def cwes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def event_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryAdvisory` class because it declared `has_many :events`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryAdvisoryEvent::PrivateCollectionProxy) }
    def events; end

    sig { params(value: T::Enumerable[::RepositoryAdvisoryEvent]).void }
    def events=(value); end

    sig { returns(T.nilable(::RepositoryAdvisoryEdit)) }
    def latest_user_content_edit; end

    sig { params(value: T.nilable(::RepositoryAdvisoryEdit)).void }
    def latest_user_content_edit=(value); end

    sig { returns(T.nilable(::User)) }
    def publisher; end

    sig { params(value: T.nilable(::User)).void }
    def publisher=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryAdvisory` class because it declared `has_many :reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reaction::PrivateCollectionProxy) }
    def reactions; end

    sig { params(value: T::Enumerable[::Reaction]).void }
    def reactions=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_author; end

    sig { returns(T.nilable(::RepositoryAdvisoryEdit)) }
    def reload_latest_user_content_edit; end

    sig { returns(T.nilable(::User)) }
    def reload_publisher; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::ScopedVulnerability)) }
    def reload_scoped_vulnerability; end

    sig { returns(T.nilable(::Vulnerability)) }
    def reload_vulnerability; end

    sig { returns(T.nilable(::Repository)) }
    def reload_workspace_repository; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    sig { returns(T.nilable(::ScopedVulnerability)) }
    def scoped_vulnerability; end

    sig { params(value: T.nilable(::ScopedVulnerability)).void }
    def scoped_vulnerability=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_content_edit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_content_edit_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryAdvisory` class because it declared `has_many :user_content_edits`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryAdvisoryEdit::PrivateCollectionProxy) }
    def user_content_edits; end

    sig { params(value: T::Enumerable[::RepositoryAdvisoryEdit]).void }
    def user_content_edits=(value); end

    sig { returns(T.nilable(::Vulnerability)) }
    def vulnerability; end

    sig { params(value: T.nilable(::Vulnerability)).void }
    def vulnerability=(value); end

    sig { returns(T.nilable(::Repository)) }
    def workspace_repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def workspace_repository=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def critical(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def high(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def innersource(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def low(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def moderate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_critical(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_high(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_innersource(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_low(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_moderate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_open_source(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def open_source(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def open_triaged(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def open_untriaged(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_to_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unpublished(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_abuse_reports; end

    sig { returns(Promise[T.untyped]) }
    def async_affected_products; end

    sig { returns(Promise[T.untyped]) }
    def async_author; end

    sig { returns(Promise[T.untyped]) }
    def async_comments; end

    sig { returns(Promise[T.untyped]) }
    def async_credits; end

    sig { returns(Promise[T.untyped]) }
    def async_cwe_references; end

    sig { returns(Promise[T.untyped]) }
    def async_cwes; end

    sig { returns(Promise[T.untyped]) }
    def async_events; end

    sig { returns(Promise[T.untyped]) }
    def async_latest_user_content_edit; end

    sig { returns(Promise[T.untyped]) }
    def async_publisher; end

    sig { returns(Promise[T.untyped]) }
    def async_reactions; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_scoped_vulnerability; end

    sig { returns(Promise[T.untyped]) }
    def async_user_content_edits; end

    sig { returns(Promise[T.untyped]) }
    def async_vulnerability; end

    sig { returns(Promise[T.untyped]) }
    def async_workspace_repository; end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def accepted; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def accepted=(value); end

    sig { returns(T::Boolean) }
    def accepted?; end

    sig { returns(T.nilable(T::Boolean)) }
    def accepted_before_last_save; end

    sig { returns(T.untyped) }
    def accepted_before_type_cast; end

    sig { returns(T::Boolean) }
    def accepted_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def accepted_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def accepted_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def accepted_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def accepted_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def accepted_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def accepted_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def accepted_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def accepted_was; end

    sig { void }
    def accepted_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def assignee_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def assignee_id=(value); end

    sig { returns(T::Boolean) }
    def assignee_id?; end

    sig { returns(T.nilable(::Integer)) }
    def assignee_id_before_last_save; end

    sig { returns(T.untyped) }
    def assignee_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def assignee_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def assignee_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def assignee_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def assignee_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def assignee_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def assignee_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def assignee_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def assignee_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def assignee_id_was; end

    sig { void }
    def assignee_id_will_change!; end

    sig { returns(::Integer) }
    def author_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def author_id=(value); end

    sig { returns(T::Boolean) }
    def author_id?; end

    sig { returns(T.nilable(::Integer)) }
    def author_id_before_last_save; end

    sig { returns(T.untyped) }
    def author_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def author_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def author_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def author_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def author_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def author_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def author_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def author_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def author_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def author_id_was; end

    sig { void }
    def author_id_will_change!; end

    sig { returns(T.untyped) }
    def body; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def body=(value); end

    sig { returns(T::Boolean) }
    def body?; end

    sig { returns(T.untyped) }
    def body_before_last_save; end

    sig { returns(T.untyped) }
    def body_before_type_cast; end

    sig { returns(T::Boolean) }
    def body_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def body_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def body_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def body_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def body_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def body_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def body_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def body_previously_was; end

    sig { returns(T.untyped) }
    def body_was; end

    sig { void }
    def body_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at=(value); end

    sig { returns(T::Boolean) }
    def closed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at_before_last_save; end

    sig { returns(T.untyped) }
    def closed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def closed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def closed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def closed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def closed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def closed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def closed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at_was; end

    sig { void }
    def closed_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.untyped) }
    def cve_id; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def cve_id=(value); end

    sig { returns(T::Boolean) }
    def cve_id?; end

    sig { returns(T.untyped) }
    def cve_id_before_last_save; end

    sig { returns(T.untyped) }
    def cve_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def cve_id_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cve_id_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cve_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def cve_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def cve_id_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cve_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def cve_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def cve_id_previously_was; end

    sig { returns(T.untyped) }
    def cve_id_was; end

    sig { void }
    def cve_id_will_change!; end

    sig { returns(T.untyped) }
    def cvss_v3; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def cvss_v3=(value); end

    sig { returns(T::Boolean) }
    def cvss_v3?; end

    sig { returns(T.untyped) }
    def cvss_v3_before_last_save; end

    sig { returns(T.untyped) }
    def cvss_v3_before_type_cast; end

    sig { returns(T::Boolean) }
    def cvss_v3_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cvss_v3_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cvss_v3_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def cvss_v3_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def cvss_v3_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def cvss_v3_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def cvss_v3_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def cvss_v3_previously_was; end

    sig { returns(T.untyped) }
    def cvss_v3_was; end

    sig { void }
    def cvss_v3_will_change!; end

    sig { returns(T.nilable(::String)) }
    def cvss_v4; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def cvss_v4=(value); end

    sig { returns(T::Boolean) }
    def cvss_v4?; end

    sig { returns(T.nilable(::String)) }
    def cvss_v4_before_last_save; end

    sig { returns(T.untyped) }
    def cvss_v4_before_type_cast; end

    sig { returns(T::Boolean) }
    def cvss_v4_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def cvss_v4_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def cvss_v4_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def cvss_v4_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def cvss_v4_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def cvss_v4_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def cvss_v4_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def cvss_v4_previously_was; end

    sig { returns(T.nilable(::String)) }
    def cvss_v4_was; end

    sig { void }
    def cvss_v4_will_change!; end

    sig { returns(T.untyped) }
    def description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.untyped) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_previously_was; end

    sig { returns(T.untyped) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T::Boolean) }
    def external; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def external=(value); end

    sig { returns(T::Boolean) }
    def external?; end

    sig { returns(T.nilable(T::Boolean)) }
    def external_before_last_save; end

    sig { returns(T.untyped) }
    def external_before_type_cast; end

    sig { returns(T::Boolean) }
    def external_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def external_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def external_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def external_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def external_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def external_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def external_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def external_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def external_was; end

    sig { void }
    def external_will_change!; end

    sig { returns(T.untyped) }
    def frozen_description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def frozen_description=(value); end

    sig { returns(T::Boolean) }
    def frozen_description?; end

    sig { returns(T.untyped) }
    def frozen_description_before_last_save; end

    sig { returns(T.untyped) }
    def frozen_description_before_type_cast; end

    sig { returns(T::Boolean) }
    def frozen_description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def frozen_description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def frozen_description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def frozen_description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def frozen_description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def frozen_description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def frozen_description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def frozen_description_previously_was; end

    sig { returns(T.untyped) }
    def frozen_description_was; end

    sig { void }
    def frozen_description_will_change!; end

    sig { returns(T.untyped) }
    def frozen_title; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def frozen_title=(value); end

    sig { returns(T::Boolean) }
    def frozen_title?; end

    sig { returns(T.untyped) }
    def frozen_title_before_last_save; end

    sig { returns(T.untyped) }
    def frozen_title_before_type_cast; end

    sig { returns(T::Boolean) }
    def frozen_title_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def frozen_title_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def frozen_title_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def frozen_title_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def frozen_title_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def frozen_title_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def frozen_title_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def frozen_title_previously_was; end

    sig { returns(T.untyped) }
    def frozen_title_was; end

    sig { void }
    def frozen_title_will_change!; end

    sig { returns(::String) }
    def ghsa_id; end

    sig { params(value: ::String).returns(::String) }
    def ghsa_id=(value); end

    sig { returns(T::Boolean) }
    def ghsa_id?; end

    sig { returns(T.nilable(::String)) }
    def ghsa_id_before_last_save; end

    sig { returns(T.untyped) }
    def ghsa_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def ghsa_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def ghsa_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def ghsa_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def ghsa_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ghsa_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def ghsa_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def ghsa_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ghsa_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def ghsa_id_was; end

    sig { void }
    def ghsa_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.untyped) }
    def impact; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def impact=(value); end

    sig { returns(T::Boolean) }
    def impact?; end

    sig { returns(T.untyped) }
    def impact_before_last_save; end

    sig { returns(T.untyped) }
    def impact_before_type_cast; end

    sig { returns(T::Boolean) }
    def impact_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def impact_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def impact_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def impact_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def impact_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def impact_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def impact_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def impact_previously_was; end

    sig { returns(T.untyped) }
    def impact_was; end

    sig { void }
    def impact_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def owner_id=(value); end

    sig { returns(T::Boolean) }
    def owner_id?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_before_last_save; end

    sig { returns(T.untyped) }
    def owner_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def owner_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def owner_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def owner_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def owner_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def owner_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def owner_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_was; end

    sig { void }
    def owner_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at=(value); end

    sig { returns(T::Boolean) }
    def published_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_before_last_save; end

    sig { returns(T.untyped) }
    def published_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def published_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def published_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def published_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def published_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def published_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def published_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_was; end

    sig { void }
    def published_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def publisher_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def publisher_id=(value); end

    sig { returns(T::Boolean) }
    def publisher_id?; end

    sig { returns(T.nilable(::Integer)) }
    def publisher_id_before_last_save; end

    sig { returns(T.untyped) }
    def publisher_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def publisher_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def publisher_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def publisher_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def publisher_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def publisher_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def publisher_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def publisher_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def publisher_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def publisher_id_was; end

    sig { void }
    def publisher_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def repo_advisory_type; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def repo_advisory_type=(value); end

    sig { returns(T::Boolean) }
    def repo_advisory_type?; end

    sig { returns(T.nilable(::String)) }
    def repo_advisory_type_before_last_save; end

    sig { returns(T.untyped) }
    def repo_advisory_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def repo_advisory_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def repo_advisory_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def repo_advisory_type_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def repo_advisory_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def repo_advisory_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def repo_advisory_type_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def repo_advisory_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def repo_advisory_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def repo_advisory_type_was; end

    sig { void }
    def repo_advisory_type_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_accepted!; end

    sig { void }
    def restore_assignee_id!; end

    sig { void }
    def restore_author_id!; end

    sig { void }
    def restore_body!; end

    sig { void }
    def restore_closed_at!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_cve_id!; end

    sig { void }
    def restore_cvss_v3!; end

    sig { void }
    def restore_cvss_v4!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_external!; end

    sig { void }
    def restore_frozen_description!; end

    sig { void }
    def restore_frozen_title!; end

    sig { void }
    def restore_ghsa_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_impact!; end

    sig { void }
    def restore_owner_id!; end

    sig { void }
    def restore_published_at!; end

    sig { void }
    def restore_publisher_id!; end

    sig { void }
    def restore_repo_advisory_type!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_severity!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_title!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_id!; end

    sig { void }
    def restore_withdrawn_at!; end

    sig { void }
    def restore_workarounds!; end

    sig { void }
    def restore_workspace_repository_id!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_accepted; end

    sig { returns(T::Boolean) }
    def saved_change_to_accepted?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_assignee_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_assignee_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_author_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_author_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_body; end

    sig { returns(T::Boolean) }
    def saved_change_to_body?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_closed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_closed_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_cve_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_cve_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_cvss_v3; end

    sig { returns(T::Boolean) }
    def saved_change_to_cvss_v3?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_cvss_v4; end

    sig { returns(T::Boolean) }
    def saved_change_to_cvss_v4?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_external; end

    sig { returns(T::Boolean) }
    def saved_change_to_external?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_frozen_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_frozen_description?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_frozen_title; end

    sig { returns(T::Boolean) }
    def saved_change_to_frozen_title?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_ghsa_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_ghsa_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_impact; end

    sig { returns(T::Boolean) }
    def saved_change_to_impact?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_owner_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_owner_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_published_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_published_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_publisher_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_publisher_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_repo_advisory_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_repo_advisory_type?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_severity; end

    sig { returns(T::Boolean) }
    def saved_change_to_severity?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_title; end

    sig { returns(T::Boolean) }
    def saved_change_to_title?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_withdrawn_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_withdrawn_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_workarounds; end

    sig { returns(T::Boolean) }
    def saved_change_to_workarounds?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_workspace_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_workspace_repository_id?; end

    sig { returns(T.nilable(::String)) }
    def severity; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def severity=(value); end

    sig { returns(T::Boolean) }
    def severity?; end

    sig { returns(T.nilable(::String)) }
    def severity_before_last_save; end

    sig { returns(T.untyped) }
    def severity_before_type_cast; end

    sig { returns(T::Boolean) }
    def severity_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def severity_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def severity_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def severity_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def severity_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def severity_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def severity_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def severity_previously_was; end

    sig { returns(T.nilable(::String)) }
    def severity_was; end

    sig { void }
    def severity_will_change!; end

    sig { returns(::String) }
    def state; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.untyped) }
    def title; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def title=(value); end

    sig { returns(T::Boolean) }
    def title?; end

    sig { returns(T.untyped) }
    def title_before_last_save; end

    sig { returns(T.untyped) }
    def title_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def title_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def title_previously_was; end

    sig { returns(T.untyped) }
    def title_was; end

    sig { void }
    def title_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_accepted?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_assignee_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_author_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_body?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_closed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cve_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cvss_v3?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cvss_v4?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_external?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_frozen_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_frozen_title?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ghsa_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_impact?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_owner_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_published_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_publisher_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repo_advisory_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_severity?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_title?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_withdrawn_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_workarounds?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_workspace_repository_id?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def withdrawn_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def withdrawn_at=(value); end

    sig { returns(T::Boolean) }
    def withdrawn_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def withdrawn_at_before_last_save; end

    sig { returns(T.untyped) }
    def withdrawn_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def withdrawn_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def withdrawn_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def withdrawn_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def withdrawn_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def withdrawn_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def withdrawn_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def withdrawn_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def withdrawn_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def withdrawn_at_was; end

    sig { void }
    def withdrawn_at_will_change!; end

    sig { returns(T.untyped) }
    def workarounds; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def workarounds=(value); end

    sig { returns(T::Boolean) }
    def workarounds?; end

    sig { returns(T.untyped) }
    def workarounds_before_last_save; end

    sig { returns(T.untyped) }
    def workarounds_before_type_cast; end

    sig { returns(T::Boolean) }
    def workarounds_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def workarounds_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def workarounds_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def workarounds_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def workarounds_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def workarounds_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def workarounds_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def workarounds_previously_was; end

    sig { returns(T.untyped) }
    def workarounds_was; end

    sig { void }
    def workarounds_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def workspace_repository_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def workspace_repository_id=(value); end

    sig { returns(T::Boolean) }
    def workspace_repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def workspace_repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def workspace_repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def workspace_repository_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def workspace_repository_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def workspace_repository_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def workspace_repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def workspace_repository_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def workspace_repository_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def workspace_repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def workspace_repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def workspace_repository_id_was; end

    sig { void }
    def workspace_repository_id_will_change!; end
  end

  module GeneratedPreludeBatchMethods
    sig { returns(T.untyped) }
    def prelude_user_logins_by_reaction; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_prelude_user_logins_by_reaction; end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def prelude_viewer_can_react(viewer); end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_viewer_can_react(viewer); end

    sig { params(emotion: T.untyped).returns(T.untyped) }
    def prelude_reaction_count_for_reaction(emotion); end

    sig { params(emotion: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_reaction_count_for_reaction(emotion); end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def critical(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def high(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def innersource(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def low(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def moderate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_critical(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_high(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_innersource(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_low(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_moderate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_open_source(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def open_source(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def open_triaged(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def open_untriaged(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_to_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unpublished(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::RepositoryAdvisory } }

    sig { returns(T::Array[::RepositoryAdvisory]) }
    def to_a; end

    sig { returns(T::Array[::RepositoryAdvisory]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::RepositoryAdvisory } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::RepositoryAdvisory } }

    sig do
      params(
        records: T.any(::RepositoryAdvisory, T::Enumerable[T.any(::RepositoryAdvisory, T::Enumerable[::RepositoryAdvisory])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::RepositoryAdvisory, T::Enumerable[T.any(::RepositoryAdvisory, T::Enumerable[::RepositoryAdvisory])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::RepositoryAdvisory, T::Enumerable[T.any(::RepositoryAdvisory, T::Enumerable[::RepositoryAdvisory])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::RepositoryAdvisory]) }
    def load_target; end

    sig do
      params(
        records: T.any(::RepositoryAdvisory, T::Enumerable[T.any(::RepositoryAdvisory, T::Enumerable[::RepositoryAdvisory])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::RepositoryAdvisory, T::Enumerable[T.any(::RepositoryAdvisory, T::Enumerable[::RepositoryAdvisory])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::RepositoryAdvisory, T::Enumerable[T.any(::RepositoryAdvisory, T::Enumerable[::RepositoryAdvisory])])
      ).returns(T::Array[::RepositoryAdvisory])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::RepositoryAdvisory]) }
    def target; end

    sig { returns(T::Array[::RepositoryAdvisory]) }
    def to_a; end

    sig { returns(T::Array[::RepositoryAdvisory]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::RepositoryAdvisory } }

    sig { returns(T::Array[::RepositoryAdvisory]) }
    def to_a; end

    sig { returns(T::Array[::RepositoryAdvisory]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::RepositoryAdvisory } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

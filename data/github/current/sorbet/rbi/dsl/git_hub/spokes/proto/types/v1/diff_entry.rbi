# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::Types::V1::DiffEntry`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::Types::V1::DiffEntry`.

class GitHub::Spokes::Proto::Types::V1::DiffEntry
  sig do
    params(
      destination: T.nilable(GitHub::Spokes::Proto::Types::V1::Path),
      destination_mode: T.nilable(GitHub::Spokes::Proto::Types::V1::Mode),
      destination_oid: T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID),
      score: T.nilable(Integer),
      source: T.nilable(GitHub::Spokes::Proto::Types::V1::Path),
      source_mode: T.nilable(GitHub::Spokes::Proto::Types::V1::Mode),
      source_oid: T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID),
      status: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(destination: nil, destination_mode: nil, destination_oid: nil, score: nil, source: nil, source_mode: nil, source_oid: nil, status: nil); end

  sig { void }
  def clear_destination; end

  sig { void }
  def clear_destination_mode; end

  sig { void }
  def clear_destination_oid; end

  sig { void }
  def clear_score; end

  sig { void }
  def clear_source; end

  sig { void }
  def clear_source_mode; end

  sig { void }
  def clear_source_oid; end

  sig { void }
  def clear_status; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Path)) }
  def destination; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Path)).void }
  def destination=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Mode)) }
  def destination_mode; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Mode)).void }
  def destination_mode=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)) }
  def destination_oid; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)).void }
  def destination_oid=(value); end

  sig { returns(Integer) }
  def score; end

  sig { params(value: Integer).void }
  def score=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Path)) }
  def source; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Path)).void }
  def source=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Mode)) }
  def source_mode; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Mode)).void }
  def source_mode=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)) }
  def source_oid; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)).void }
  def source_oid=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end
end

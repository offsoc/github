{"version":3,"file":"codespaces-survey-xxxxxxxxxxxx.js","mappings":"sLAWO,SAASA,EAAiB,CAC/BC,WAAAA,CAAU,CACVC,uBAAAA,CAAsB,CACtBC,0BAAAA,CAAyB,CACH,EACtB,GAAM,CAACC,EAAYC,EAAc,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC7C,GAAI,CAACF,EAAY,OAAO,KAExB,IAAMG,EAAgB,UACpBF,EAAc,IACd,MAAMG,CAAAA,EAAAA,EAAAA,EAAAA,EAAcL,EAA2B,CAACM,OAAQ,MAAM,EAChE,EAEMC,EAAa,UACjB,MAAMF,CAAAA,EAAAA,EAAAA,EAAAA,EAAcN,EAAwB,CAACO,OAAQ,MAAM,GAC3DJ,EAAc,IACdM,OAAOC,QAAQ,CAACC,IAAI,CAAGZ,CACzB,EAEA,MACE,UAACa,EAAAA,CAAYA,CAAAA,CACXC,QAAQ,cACRC,MAAM,oCACNC,KAAMC,EAAAA,cAAcA,CACpBC,iBAAkBZ,EAClBa,mBAAoB,CAClBC,QAASX,EACTY,SAAU,eACZ,E,SACD,uF,EAIL,CAEA,GAAG,CAAEtB,EAAiBuB,WAAW,EAA5BvB,CAAAA,EAAiBuB,WAAW,CAAK,kBAAiB,CAAE,CAAE,KAAM,CAAC,CC3ClEC,CAAAA,EAAAA,EAAAA,CAAAA,EAAqB,oBAAqB,CACxCC,UAAWzB,CACb,E,kBCUO,SAASQ,EAAckB,CAAY,CAAEC,EAAoB,CAAC,CAAC,GAChEC,SAesCF,CAAY,EAGlD,GAAIG,IADYC,IAAIJ,EAAMf,OAAOC,QAAQ,CAACmB,MAAM,EACxCA,MAAM,GAAKpB,OAAOC,QAAQ,CAACmB,MAAM,CACvC,MAAM,MAAU,wDAEpB,EArBiCL,GAE/B,IAAMM,EAAuB,CAC3B,GAAGL,EAAKK,OAAO,CACf,wBAAyB,OACzB,mBAAoB,gBACtB,EAEA,OAAOC,MAAMP,EAAM,CAAC,GAAGC,CAAI,CAAEK,QAAAA,CAAO,EACtC,CA2BO,SAASE,EAAkBR,CAAY,CAAEC,CAAsB,EAGpE,IAAMK,EAAuB,CAFuB,GAAnBL,GAAMK,SAAW,CAAC,CAGjD,CACAG,OAAQ,mBACR,eAAgB,kBAClB,EAEMC,EAAOT,GAAMS,KAAOC,KAAKC,SAAS,CAACX,EAAKS,IAAI,EAAIG,KAAAA,EAEtD,OAAO/B,EAAckB,EAAM,CAAC,GAAGC,CAAI,CAAES,KAAAA,EAAMJ,QAAAA,CAAO,EACpD,CASO,SAASQ,EAAWd,CAAY,CAAEC,EAAoB,CAAC,CAAC,EAC7D,IAAMK,EAAuB,CAC3B,GAAGL,EAAKK,OAAO,CACf,kBAAmB,MACrB,EAEA,OAAOxB,EAAckB,EAAM,CAAC,GAAGC,CAAI,CAAEK,QAAAA,CAAO,EAC9C,CASO,SAASS,EAAef,CAAY,CAAEC,CAAsB,EAGjE,IAAMK,EAAuB,CAFuB,GAAnBL,GAAMK,SAAW,CAAC,CAGjD,CACA,kBAAmB,MACrB,EAEA,OAAOE,EAAkBR,EAAM,CAAC,GAAGC,CAAI,CAAEK,QAAAA,CAAO,EAClD,C","sources":["ui/packages/codespaces-survey/CodespacesSurvey.tsx","ui/packages/codespaces-survey/codespaces-survey.ts","ui/packages/verified-fetch/verified-fetch.ts"],"sourcesContent":["import {GrowthBanner} from '@github-ui/growth-banner'\nimport {verifiedFetch} from '@github-ui/verified-fetch'\nimport {CodespacesIcon} from '@primer/octicons-react'\nimport {useState} from 'react'\n\nexport interface CodespacesSurveyProps {\n  surveyLink: string\n  surveyOpenCallbackPath: string\n  surveyDismissCallbackPath: string\n}\n\nexport function CodespacesSurvey({\n  surveyLink,\n  surveyOpenCallbackPath,\n  surveyDismissCallbackPath,\n}: CodespacesSurveyProps) {\n  const [showBanner, setShowBanner] = useState(true)\n  if (!showBanner) return null\n\n  const handleDismiss = async () => {\n    setShowBanner(false)\n    await verifiedFetch(surveyDismissCallbackPath, {method: 'POST'})\n  }\n\n  const handleOpen = async () => {\n    await verifiedFetch(surveyOpenCallbackPath, {method: 'POST'})\n    setShowBanner(false)\n    window.location.href = surveyLink\n  }\n\n  return (\n    <GrowthBanner\n      variant=\"information\"\n      title=\"Help us improve GitHub Codespaces\"\n      icon={CodespacesIcon}\n      closeButtonClick={handleDismiss}\n      primaryButtonProps={{\n        onClick: handleOpen,\n        children: 'Give feedback',\n      }}\n    >\n      Tell us how to make GitHub Codespaces work better for you with three quick questions.\n    </GrowthBanner>\n  )\n}\n\ntry{ CodespacesSurvey.displayName ||= 'CodespacesSurvey' } catch {}","import {registerReactPartial} from '@github-ui/react-core/register-partial'\nimport {CodespacesSurvey} from './CodespacesSurvey'\n\nregisterReactPartial('codespaces-survey', {\n  Component: CodespacesSurvey,\n})\n","/**\n * A Fetch function which will automatically add the correct headers for\n * making requests to GitHub application servers as long as the associated controller methods allow it.\n * Track down the associated controller method and confirm the controller includes\n * ApplicationController::VerifiedFetchDependency as well as `allow_verified_fetch only:`\n * to the relevant controller methods.\n *\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetch('/foo', {method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.text())\ntest.\n *     }\n */\nexport function verifiedFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  assertRelativePathOrSameOrigin(path)\n\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Verified-Fetch': 'true',\n    'X-Requested-With': 'XMLHttpRequest',\n  }\n\n  return fetch(path, {...init, headers})\n}\n\nexport interface JSONRequestInit extends Omit<RequestInit, 'body'> {\n  body?: unknown\n}\n\nfunction assertRelativePathOrSameOrigin(path: string) {\n  if (process.env.NODE_ENV === 'test' && !window.location.origin) return\n  const url = new URL(path, window.location.origin)\n  if (url.origin !== window.location.origin) {\n    throw new Error('Can not make cross-origin requests from verifiedFetch')\n  }\n}\n\n/**\n * A Fetch function which will automatically add the correct headers for\n * making JSON requests\n *\n * Will also `JSON.stringify` the request body if provided.\n\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetchJSON('/foo', {body: {foo: 'bar'}, method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.json())\n *     }\n */\nexport function verifiedFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  }\n\n  const body = init?.body ? JSON.stringify(init.body) : undefined\n\n  return verifiedFetch(path, {...init, body, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetch(path, {...init, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetchJSON(path, {...init, headers})\n}\n"],"names":["CodespacesSurvey","surveyLink","surveyOpenCallbackPath","surveyDismissCallbackPath","showBanner","setShowBanner","useState","handleDismiss","verifiedFetch","method","handleOpen","window","location","href","GrowthBanner","variant","title","icon","CodespacesIcon","closeButtonClick","primaryButtonProps","onClick","children","displayName","registerReactPartial","Component","path","init","assertRelativePathOrSameOrigin","url","URL","origin","headers","fetch","verifiedFetchJSON","Accept","body","JSON","stringify","undefined","reactFetch","reactFetchJSON"],"sourceRoot":""}
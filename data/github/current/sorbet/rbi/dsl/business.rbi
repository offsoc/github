# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Business`.
# Please instead update this file by running `bin/tapioca dsl Business`.

class Business
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedColumnCoderAccessors
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def business_types; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def seats_plan_types; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def trial_completion_statuses; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Business).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Business).void)).returns(::Business) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Business).void)).returns(::Business) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Business).void)).returns(::Business) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Business).void)).returns(::Business) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Business).void)).returns(::Business) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Business]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Business)) }
    def fifth; end

    sig { returns(::Business) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Business)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Business) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Business).void)
      ).returns(T.nilable(T::Enumerator[::Business]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Business]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Business]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Business).void)).returns(::Business) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Business).void)).returns(::Business) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Business).void)).returns(::Business) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Business)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Business) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Business) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Business) }
    def first!; end

    sig { returns(T.nilable(::Business)) }
    def forty_two; end

    sig { returns(::Business) }
    def forty_two!; end

    sig { returns(T.nilable(::Business)) }
    def fourth; end

    sig { returns(::Business) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Business) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Business).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Business).void)).returns(::Business) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Business).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Business).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Business)) }
    def second; end

    sig { returns(::Business) }
    def second!; end

    sig { returns(T.nilable(::Business)) }
    def second_to_last; end

    sig { returns(::Business) }
    def second_to_last!; end

    sig { returns(::Business) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Business) }
    def take!; end

    sig { returns(T.nilable(::Business)) }
    def third; end

    sig { returns(::Business) }
    def third!; end

    sig { returns(T.nilable(::Business)) }
    def third_to_last; end

    sig { returns(::Business) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def created_from_coupon!; end

    sig { returns(T::Boolean) }
    def created_from_coupon?; end

    sig { void }
    def creation_from_coupon_purchase_initiated!; end

    sig { returns(T::Boolean) }
    def creation_from_coupon_purchase_initiated?; end

    sig { void }
    def creation_initiated_from_coupon!; end

    sig { returns(T::Boolean) }
    def creation_initiated_from_coupon?; end

    sig { void }
    def default_managed!; end

    sig { returns(T::Boolean) }
    def default_managed?; end

    sig { void }
    def enterprise_managed!; end

    sig { returns(T::Boolean) }
    def enterprise_managed?; end

    sig { void }
    def no_trial_or_active_trial!; end

    sig { returns(T::Boolean) }
    def no_trial_or_active_trial?; end

    sig { void }
    def organization_direct_upgraded!; end

    sig { returns(T::Boolean) }
    def organization_direct_upgraded?; end

    sig { void }
    def organization_upgrade_completed!; end

    sig { returns(T::Boolean) }
    def organization_upgrade_completed?; end

    sig { void }
    def organization_upgrade_initiated!; end

    sig { returns(T::Boolean) }
    def organization_upgrade_initiated?; end

    sig { void }
    def organization_upgrade_purchase_initiated!; end

    sig { returns(T::Boolean) }
    def organization_upgrade_purchase_initiated?; end

    sig { void }
    def seats_plan_basic!; end

    sig { returns(T::Boolean) }
    def seats_plan_basic?; end

    sig { void }
    def seats_plan_full!; end

    sig { returns(T::Boolean) }
    def seats_plan_full?; end

    sig { void }
    def trial_cancelled!; end

    sig { returns(T::Boolean) }
    def trial_cancelled?; end

    sig { void }
    def trial_conversion_initiated!; end

    sig { returns(T::Boolean) }
    def trial_conversion_initiated?; end

    sig { void }
    def trial_converted!; end

    sig { returns(T::Boolean) }
    def trial_converted?; end

    sig { void }
    def trial_expired!; end

    sig { returns(T::Boolean) }
    def trial_expired?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::ActionsPolicy::Allowlist)) }
    def actions_allowlist; end

    sig { params(value: T.nilable(::ActionsPolicy::Allowlist)).void }
    def actions_allowlist=(value); end

    sig { returns(T::Array[T.untyped]) }
    def audit_log_git_event_export_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def audit_log_git_event_export_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :audit_log_git_event_exports`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AuditLogGitEventExport::PrivateCollectionProxy) }
    def audit_log_git_event_exports; end

    sig { params(value: T::Enumerable[::AuditLogGitEventExport]).void }
    def audit_log_git_event_exports=(value); end

    sig { returns(T::Array[T.untyped]) }
    def audit_log_stream_configuration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def audit_log_stream_configuration_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :audit_log_stream_configurations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AuditLogStreamConfiguration::PrivateCollectionProxy) }
    def audit_log_stream_configurations; end

    sig { params(value: T::Enumerable[::AuditLogStreamConfiguration]).void }
    def audit_log_stream_configurations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def audit_log_web_export_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def audit_log_web_export_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :audit_log_web_exports`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AuditLogWebExport::PrivateCollectionProxy) }
    def audit_log_web_exports; end

    sig { params(value: T::Enumerable[::AuditLogWebExport]).void }
    def audit_log_web_exports=(value); end

    sig { returns(T::Array[T.untyped]) }
    def avatar_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def avatar_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :avatars`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Avatar::PrivateCollectionProxy) }
    def avatars; end

    sig { params(value: T::Enumerable[::Avatar]).void }
    def avatars=(value); end

    sig { returns(T::Array[T.untyped]) }
    def billing_external_email_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def billing_external_email_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :billing_external_emails`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BillingExternalEmail::PrivateCollectionProxy) }
    def billing_external_emails; end

    sig { params(value: T::Enumerable[::BillingExternalEmail]).void }
    def billing_external_emails=(value); end

    sig { returns(T::Array[T.untyped]) }
    def billing_transaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def billing_transaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :billing_transactions, through: :customer`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::BillingTransaction::PrivateCollectionProxy) }
    def billing_transactions; end

    sig { params(value: T::Enumerable[::Billing::BillingTransaction]).void }
    def billing_transactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def billing_transactions_sale_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def billing_transactions_sale_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :billing_transactions_sales, through: :customer`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::BillingTransaction::PrivateCollectionProxy) }
    def billing_transactions_sales; end

    sig { params(value: T::Enumerable[::Billing::BillingTransaction]).void }
    def billing_transactions_sales=(value); end

    sig { returns(T::Array[T.untyped]) }
    def budget_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def budget_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :budgets`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::Budget::PrivateCollectionProxy) }
    def budgets; end

    sig { params(value: T::Enumerable[::Billing::Budget]).void }
    def budgets=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionsPolicy::Allowlist) }
    def build_actions_allowlist(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def build_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business::LicenseUsage) }
    def build_license_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business::OIDCProvider) }
    def build_oidc_provider(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PrereleaseProgramMember) }
    def build_prerelease_agreement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business::SamlProvider) }
    def build_saml_provider(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BusinessStartupsProgram) }
    def build_startups_program(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TeamSync::BusinessTenant) }
    def build_team_sync_tenant(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AccountScreeningProfile) }
    def build_trade_screening_record(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def build_upgrade_initiated_from_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_upgrade_reviewed_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def build_upgraded_from(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def bundled_license_assignment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def bundled_license_assignment_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :bundled_license_assignments`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Licensing::BundledLicenseAssignment::PrivateCollectionProxy) }
    def bundled_license_assignments; end

    sig { params(value: T::Enumerable[::Licensing::BundledLicenseAssignment]).void }
    def bundled_license_assignments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def business_report_export_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def business_report_export_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :business_report_exports`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BusinessReportExport::PrivateCollectionProxy) }
    def business_report_exports; end

    sig { params(value: T::Enumerable[::BusinessReportExport]).void }
    def business_report_exports=(value); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :configuration_entries`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Configuration::Entry::PrivateCollectionProxy) }
    def configuration_entries; end

    sig { params(value: T::Enumerable[::Configuration::Entry]).void }
    def configuration_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def configuration_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def configuration_entry_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def coupon_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def coupon_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def coupon_redemption_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def coupon_redemption_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :coupon_redemptions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CouponRedemption::PrivateCollectionProxy) }
    def coupon_redemptions; end

    sig { params(value: T::Enumerable[::CouponRedemption]).void }
    def coupon_redemptions=(value); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :coupons, through: :coupon_redemptions`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Coupon::PrivateCollectionProxy) }
    def coupons; end

    sig { params(value: T::Enumerable[::Coupon]).void }
    def coupons=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionsPolicy::Allowlist) }
    def create_actions_allowlist(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionsPolicy::Allowlist) }
    def create_actions_allowlist!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business::LicenseUsage) }
    def create_license_usage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business::LicenseUsage) }
    def create_license_usage!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business::OIDCProvider) }
    def create_oidc_provider(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business::OIDCProvider) }
    def create_oidc_provider!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PrereleaseProgramMember) }
    def create_prerelease_agreement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PrereleaseProgramMember) }
    def create_prerelease_agreement!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business::SamlProvider) }
    def create_saml_provider(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business::SamlProvider) }
    def create_saml_provider!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BusinessStartupsProgram) }
    def create_startups_program(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BusinessStartupsProgram) }
    def create_startups_program!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TeamSync::BusinessTenant) }
    def create_team_sync_tenant(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TeamSync::BusinessTenant) }
    def create_team_sync_tenant!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AccountScreeningProfile) }
    def create_trade_screening_record(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AccountScreeningProfile) }
    def create_trade_screening_record!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_upgrade_initiated_from_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_upgrade_initiated_from_organization!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_upgrade_reviewed_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_upgrade_reviewed_by!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_upgraded_from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_upgraded_from!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def credential_authorization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def credential_authorization_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :credential_authorizations, through: :organizations`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Organization::CredentialAuthorization::PrivateCollectionProxy) }
    def credential_authorizations; end

    sig { params(value: T::Enumerable[::Organization::CredentialAuthorization]).void }
    def credential_authorizations=(value); end

    sig { returns(T.nilable(::Customer)) }
    def customer; end

    sig { params(value: T.nilable(::Customer)).void }
    def customer=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def customer_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def enterprise_agreement_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def enterprise_agreement_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :enterprise_agreements`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Licensing::EnterpriseAgreement::PrivateCollectionProxy) }
    def enterprise_agreements; end

    sig { params(value: T::Enumerable[::Licensing::EnterpriseAgreement]).void }
    def enterprise_agreements=(value); end

    sig { returns(T::Array[T.untyped]) }
    def enterprise_contribution_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def enterprise_contribution_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :enterprise_contributions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::EnterpriseContribution::PrivateCollectionProxy) }
    def enterprise_contributions; end

    sig { params(value: T::Enumerable[::EnterpriseContribution]).void }
    def enterprise_contributions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def enterprise_installation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def enterprise_installation_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def enterprise_installation_user_accounts_upload_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def enterprise_installation_user_accounts_upload_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :enterprise_installation_user_accounts_uploads`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::EnterpriseInstallationUserAccountsUpload::PrivateCollectionProxy) }
    def enterprise_installation_user_accounts_uploads; end

    sig { params(value: T::Enumerable[::EnterpriseInstallationUserAccountsUpload]).void }
    def enterprise_installation_user_accounts_uploads=(value); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :enterprise_installations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::EnterpriseInstallation::PrivateCollectionProxy) }
    def enterprise_installations; end

    sig { params(value: T::Enumerable[::EnterpriseInstallation]).void }
    def enterprise_installations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def enterprise_team_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def enterprise_team_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :enterprise_teams`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::EnterpriseTeam::PrivateCollectionProxy) }
    def enterprise_teams; end

    sig { params(value: T::Enumerable[::EnterpriseTeam]).void }
    def enterprise_teams=(value); end

    sig { returns(T::Array[T.untyped]) }
    def expired_coupon_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def expired_coupon_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :expired_coupons`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CouponRedemption::PrivateCollectionProxy) }
    def expired_coupons; end

    sig { params(value: T::Enumerable[::CouponRedemption]).void }
    def expired_coupons=(value); end

    sig { returns(T::Array[T.untyped]) }
    def footer_link_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def footer_link_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :footer_links`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BusinessFooterLink::PrivateCollectionProxy) }
    def footer_links; end

    sig { params(value: T::Enumerable[::BusinessFooterLink]).void }
    def footer_links=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def footer_links_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def ghes_license_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ghes_license_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :ghes_licenses`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Licensing::GhesLicense::PrivateCollectionProxy) }
    def ghes_licenses; end

    sig { params(value: T::Enumerable[::Licensing::GhesLicense]).void }
    def ghes_licenses=(value); end

    sig { returns(T::Array[T.untyped]) }
    def hook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def hook_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :hooks`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Hook::PrivateCollectionProxy) }
    def hooks; end

    sig { params(value: T::Enumerable[::Hook]).void }
    def hooks=(value); end

    sig { returns(T::Array[T.untyped]) }
    def integration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def integration_installation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_installation_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :integration_installations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationInstallation::PrivateCollectionProxy) }
    def integration_installations; end

    sig { params(value: T::Enumerable[::IntegrationInstallation]).void }
    def integration_installations=(value); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :integrations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Integration::PrivateCollectionProxy) }
    def integrations; end

    sig { params(value: T::Enumerable[::Integration]).void }
    def integrations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :invitations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BusinessAdministratorInvitation::PrivateCollectionProxy) }
    def invitations; end

    sig { params(value: T::Enumerable[::BusinessAdministratorInvitation]).void }
    def invitations=(value); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :ip_allowlist_entries`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IpAllowlistEntry::PrivateCollectionProxy) }
    def ip_allowlist_entries; end

    sig { params(value: T::Enumerable[::IpAllowlistEntry]).void }
    def ip_allowlist_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def ip_allowlist_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ip_allowlist_entry_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def license_consumption_export_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def license_consumption_export_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :license_consumption_exports`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Business::LicenseConsumptionExport::PrivateCollectionProxy) }
    def license_consumption_exports; end

    sig { params(value: T::Enumerable[::Business::LicenseConsumptionExport]).void }
    def license_consumption_exports=(value); end

    sig { returns(T.nilable(::Business::LicenseUsage)) }
    def license_usage; end

    sig { params(value: T.nilable(::Business::LicenseUsage)).void }
    def license_usage=(value); end

    sig { returns(T::Array[T.untyped]) }
    def line_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def line_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :line_items, through: :billing_transactions`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::BillingTransaction::LineItem::PrivateCollectionProxy) }
    def line_items; end

    sig { params(value: T::Enumerable[::Billing::BillingTransaction::LineItem]).void }
    def line_items=(value); end

    sig { returns(T::Array[T.untyped]) }
    def metered_usage_export_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def metered_usage_export_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :metered_usage_exports`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::MeteredUsageExport::PrivateCollectionProxy) }
    def metered_usage_exports; end

    sig { params(value: T::Enumerable[::Billing::MeteredUsageExport]).void }
    def metered_usage_exports=(value); end

    sig { returns(T.nilable(::Business::OIDCProvider)) }
    def oidc_provider; end

    sig { params(value: T.nilable(::Business::OIDCProvider)).void }
    def oidc_provider=(value); end

    sig { returns(T::Array[T.untyped]) }
    def organization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def organization_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def organization_invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def organization_invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :organization_invitations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BusinessOrganizationInvitation::PrivateCollectionProxy) }
    def organization_invitations; end

    sig { params(value: T::Enumerable[::BusinessOrganizationInvitation]).void }
    def organization_invitations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def organization_membership_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def organization_membership_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :organization_memberships`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Business::OrganizationMembership::PrivateCollectionProxy) }
    def organization_memberships; end

    sig { params(value: T::Enumerable[::Business::OrganizationMembership]).void }
    def organization_memberships=(value); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :organizations, through: :organization_memberships`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Organization::PrivateCollectionProxy) }
    def organizations; end

    sig { params(value: T::Enumerable[::Organization]).void }
    def organizations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def plan_subscription_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def plan_subscription_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :plan_subscriptions, through: :customer`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::PlanSubscription::PrivateCollectionProxy) }
    def plan_subscriptions; end

    sig { params(value: T::Enumerable[::Billing::PlanSubscription]).void }
    def plan_subscriptions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def policy_group_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def policy_group_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :policy_groups`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Codespaces::PolicyGroup::PrivateCollectionProxy) }
    def policy_groups; end

    sig { params(value: T::Enumerable[::Codespaces::PolicyGroup]).void }
    def policy_groups=(value); end

    sig { returns(T.nilable(::PrereleaseProgramMember)) }
    def prerelease_agreement; end

    sig { params(value: T.nilable(::PrereleaseProgramMember)).void }
    def prerelease_agreement=(value); end

    sig { returns(T.nilable(::ActionsPolicy::Allowlist)) }
    def reload_actions_allowlist; end

    sig { returns(T.nilable(::Customer)) }
    def reload_customer; end

    sig { returns(T.nilable(::Business::LicenseUsage)) }
    def reload_license_usage; end

    sig { returns(T.nilable(::Business::OIDCProvider)) }
    def reload_oidc_provider; end

    sig { returns(T.nilable(::PrereleaseProgramMember)) }
    def reload_prerelease_agreement; end

    sig { returns(T.nilable(::Business::SamlProvider)) }
    def reload_saml_provider; end

    sig { returns(T.nilable(::BusinessStartupsProgram)) }
    def reload_startups_program; end

    sig { returns(T.nilable(::TeamSync::BusinessTenant)) }
    def reload_team_sync_tenant; end

    sig { returns(T.nilable(::AccountScreeningProfile)) }
    def reload_trade_screening_record; end

    sig { returns(T.nilable(::Organization)) }
    def reload_upgrade_initiated_from_organization; end

    sig { returns(T.nilable(::User)) }
    def reload_upgrade_reviewed_by; end

    sig { returns(T.nilable(::Organization)) }
    def reload_upgraded_from; end

    sig { returns(T::Array[T.untyped]) }
    def ruleset_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ruleset_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :rulesets`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryRuleset::PrivateCollectionProxy) }
    def rulesets; end

    sig { params(value: T::Enumerable[::RepositoryRuleset]).void }
    def rulesets=(value); end

    sig { returns(T.nilable(::Business::SamlProvider)) }
    def saml_provider; end

    sig { params(value: T.nilable(::Business::SamlProvider)).void }
    def saml_provider=(value); end

    sig { returns(T::Array[T.untyped]) }
    def soft_deleted_organization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def soft_deleted_organization_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :soft_deleted_organizations, through: :organization_memberships`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Organization::PrivateCollectionProxy) }
    def soft_deleted_organizations; end

    sig { params(value: T::Enumerable[::Organization]).void }
    def soft_deleted_organizations=(value); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :ssh_certificate_authorities`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SshCertificateAuthority::PrivateCollectionProxy) }
    def ssh_certificate_authorities; end

    sig { params(value: T::Enumerable[::SshCertificateAuthority]).void }
    def ssh_certificate_authorities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def ssh_certificate_authority_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ssh_certificate_authority_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def staff_note_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def staff_note_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :staff_notes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::StaffNote::PrivateCollectionProxy) }
    def staff_notes; end

    sig { params(value: T::Enumerable[::StaffNote]).void }
    def staff_notes=(value); end

    sig { returns(T.nilable(::BusinessStartupsProgram)) }
    def startups_program; end

    sig { params(value: T.nilable(::BusinessStartupsProgram)).void }
    def startups_program=(value); end

    sig { returns(T.nilable(::TeamSync::BusinessTenant)) }
    def team_sync_tenant; end

    sig { params(value: T.nilable(::TeamSync::BusinessTenant)).void }
    def team_sync_tenant=(value); end

    sig { returns(T.nilable(::AccountScreeningProfile)) }
    def trade_screening_record; end

    sig { params(value: T.nilable(::AccountScreeningProfile)).void }
    def trade_screening_record=(value); end

    sig { returns(T.nilable(::Organization)) }
    def upgrade_initiated_from_organization; end

    sig { params(value: T.nilable(::Organization)).void }
    def upgrade_initiated_from_organization=(value); end

    sig { returns(T.nilable(::User)) }
    def upgrade_reviewed_by; end

    sig { params(value: T.nilable(::User)).void }
    def upgrade_reviewed_by=(value); end

    sig { returns(T.nilable(::Organization)) }
    def upgraded_from; end

    sig { params(value: T.nilable(::Organization)).void }
    def upgraded_from=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_account_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_account_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :user_accounts`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BusinessUserAccount::PrivateCollectionProxy) }
    def user_accounts; end

    sig { params(value: T::Enumerable[::BusinessUserAccount]).void }
    def user_accounts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def verifiable_domain_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def verifiable_domain_ids=(ids); end

    # This method is created by ActiveRecord on the `Business` class because it declared `has_many :verifiable_domains`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::VerifiableDomain::PrivateCollectionProxy) }
    def verifiable_domains; end

    sig { params(value: T::Enumerable[::VerifiableDomain]).void }
    def verifiable_domains=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def auto_pay_rbi_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_slug(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_from_coupon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def creation_from_coupon_purchase_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def creation_initiated_from_coupon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def default_managed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def enterprise_managed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_query(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def including_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def is_staff_owned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def metered_ghe(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def no_trial_or_active_trial(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_created_from_coupon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_creation_from_coupon_purchase_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_creation_initiated_from_coupon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_default_managed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_enterprise_managed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_no_trial_or_active_trial(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_organization_direct_upgraded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_organization_upgrade_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_organization_upgrade_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_organization_upgrade_purchase_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_seats_plan_basic(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_seats_plan_full(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_staff_owned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_trial(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_trial_cancelled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_trial_conversion_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_trial_converted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_trial_expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def on_paid_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def organization_direct_upgraded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def organization_upgrade_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def organization_upgrade_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def organization_upgrade_purchase_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def purgeable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def seats_plan_basic(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def seats_plan_full(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def self_serve_organization_upgrading_or_upgraded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def trial(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def trial_active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def trial_cancelled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def trial_conversion_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def trial_conversion_not_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def trial_converted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def trial_expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def trial_not_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def trial_with_conversion_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def upgrade_purchase_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def upgraded_and_not_reviewed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def upgraded_and_reviewed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def volume_ghe(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_active_azure_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_actions_allowlist; end

    sig { returns(Promise[T.untyped]) }
    def async_audit_log_git_event_exports; end

    sig { returns(Promise[T.untyped]) }
    def async_audit_log_stream_configurations; end

    sig { returns(Promise[T.untyped]) }
    def async_audit_log_web_exports; end

    sig { returns(Promise[T.untyped]) }
    def async_avatars; end

    sig { returns(Promise[T.untyped]) }
    def async_billing_external_emails; end

    sig { returns(Promise[T.untyped]) }
    def async_billing_transactions; end

    sig { returns(Promise[T.untyped]) }
    def async_billing_transactions_sales; end

    sig { returns(Promise[T.untyped]) }
    def async_budgets; end

    sig { returns(Promise[T.untyped]) }
    def async_bundled_license_assignments; end

    sig { returns(Promise[T.untyped]) }
    def async_business_report_exports; end

    sig { returns(Promise[T.untyped]) }
    def async_configuration_entries; end

    sig { returns(Promise[T.untyped]) }
    def async_coupon_redemptions; end

    sig { returns(Promise[T.untyped]) }
    def async_coupons; end

    sig { returns(Promise[T.untyped]) }
    def async_credential_authorizations; end

    sig { returns(Promise[T.untyped]) }
    def async_customer; end

    sig { returns(Promise[T.untyped]) }
    def async_enterprise_agreements; end

    sig { returns(Promise[T.untyped]) }
    def async_enterprise_contributions; end

    sig { returns(Promise[T.untyped]) }
    def async_enterprise_installation_user_accounts_uploads; end

    sig { returns(Promise[T.untyped]) }
    def async_enterprise_installations; end

    sig { returns(Promise[T.untyped]) }
    def async_enterprise_teams; end

    sig { returns(Promise[T.untyped]) }
    def async_expired_coupons; end

    sig { returns(Promise[T.untyped]) }
    def async_footer_links; end

    sig { returns(Promise[T.untyped]) }
    def async_ghes_licenses; end

    sig { returns(Promise[T.untyped]) }
    def async_hooks; end

    sig { returns(Promise[T.untyped]) }
    def async_integration_installations; end

    sig { returns(Promise[T.untyped]) }
    def async_integrations; end

    sig { returns(Promise[T.untyped]) }
    def async_invitations; end

    sig { returns(Promise[T.untyped]) }
    def async_ip_allowlist_entries; end

    sig { returns(Promise[T.untyped]) }
    def async_license_consumption_exports; end

    sig { returns(Promise[T.untyped]) }
    def async_license_usage; end

    sig { returns(Promise[T.untyped]) }
    def async_line_items; end

    sig { returns(Promise[T.untyped]) }
    def async_metered_usage_exports; end

    sig { returns(Promise[T.untyped]) }
    def async_oidc_provider; end

    sig { returns(Promise[T.untyped]) }
    def async_organization_invitations; end

    sig { returns(Promise[T.untyped]) }
    def async_organization_memberships; end

    sig { returns(Promise[T.untyped]) }
    def async_organizations; end

    sig { returns(Promise[T.untyped]) }
    def async_plan_subscriptions; end

    sig { returns(Promise[T.untyped]) }
    def async_policy_groups; end

    sig { returns(Promise[T.untyped]) }
    def async_prerelease_agreement; end

    sig { returns(Promise[T.untyped]) }
    def async_rulesets; end

    sig { returns(Promise[T.untyped]) }
    def async_saml_provider; end

    sig { returns(Promise[T.untyped]) }
    def async_soft_deleted_organizations; end

    sig { returns(Promise[T.untyped]) }
    def async_ssh_certificate_authorities; end

    sig { returns(Promise[T.untyped]) }
    def async_staff_notes; end

    sig { returns(Promise[T.untyped]) }
    def async_startups_program; end

    sig { returns(Promise[T.untyped]) }
    def async_team_sync_tenant; end

    sig { returns(Promise[T.untyped]) }
    def async_trade_screening_record; end

    sig { returns(Promise[T.untyped]) }
    def async_upgrade_initiated_from_organization; end

    sig { returns(Promise[T.untyped]) }
    def async_upgrade_reviewed_by; end

    sig { returns(Promise[T.untyped]) }
    def async_upgraded_from; end

    sig { returns(Promise[T.untyped]) }
    def async_user_accounts; end

    sig { returns(Promise[T.untyped]) }
    def async_verifiable_domains; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def billing_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def billing_email=(value); end

    sig { returns(T::Boolean) }
    def billing_email?; end

    sig { returns(T.nilable(::String)) }
    def billing_email_before_last_save; end

    sig { returns(T.untyped) }
    def billing_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def billing_email_was; end

    sig { void }
    def billing_email_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_term_ends_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_term_ends_at=(value); end

    sig { returns(T::Boolean) }
    def billing_term_ends_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_term_ends_at_before_last_save; end

    sig { returns(T.untyped) }
    def billing_term_ends_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_term_ends_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def billing_term_ends_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def billing_term_ends_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def billing_term_ends_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_term_ends_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def billing_term_ends_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def billing_term_ends_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_term_ends_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def billing_term_ends_at_was; end

    sig { void }
    def billing_term_ends_at_will_change!; end

    sig { returns(::String) }
    def business_type; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def business_type=(value); end

    sig { returns(T::Boolean) }
    def business_type?; end

    sig { returns(T.nilable(::String)) }
    def business_type_before_last_save; end

    sig { returns(T.untyped) }
    def business_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def business_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def business_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def business_type_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def business_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def business_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def business_type_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def business_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def business_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def business_type_was; end

    sig { void }
    def business_type_will_change!; end

    sig { returns(T::Boolean) }
    def can_self_serve; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def can_self_serve=(value); end

    sig { returns(T::Boolean) }
    def can_self_serve?; end

    sig { returns(T.nilable(T::Boolean)) }
    def can_self_serve_before_last_save; end

    sig { returns(T.untyped) }
    def can_self_serve_before_type_cast; end

    sig { returns(T::Boolean) }
    def can_self_serve_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def can_self_serve_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def can_self_serve_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def can_self_serve_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def can_self_serve_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def can_self_serve_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def can_self_serve_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def can_self_serve_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def can_self_serve_was; end

    sig { void }
    def can_self_serve_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def customer_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def customer_id=(value); end

    sig { returns(T::Boolean) }
    def customer_id?; end

    sig { returns(T.nilable(::Integer)) }
    def customer_id_before_last_save; end

    sig { returns(T.untyped) }
    def customer_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def customer_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def customer_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def customer_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def customer_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def customer_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def customer_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def customer_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def customer_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def customer_id_was; end

    sig { void }
    def customer_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at=(value); end

    sig { returns(T::Boolean) }
    def deleted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_was; end

    sig { void }
    def deleted_at_will_change!; end

    sig { returns(T.untyped) }
    def description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.untyped) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_previously_was; end

    sig { returns(T.untyped) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def downgraded_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def downgraded_at=(value); end

    sig { returns(T::Boolean) }
    def downgraded_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def downgraded_at_before_last_save; end

    sig { returns(T.untyped) }
    def downgraded_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def downgraded_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def downgraded_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def downgraded_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def downgraded_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def downgraded_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def downgraded_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def downgraded_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def downgraded_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def downgraded_at_was; end

    sig { void }
    def downgraded_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def enterprise_web_business_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def enterprise_web_business_id=(value); end

    sig { returns(T::Boolean) }
    def enterprise_web_business_id?; end

    sig { returns(T.nilable(::Integer)) }
    def enterprise_web_business_id_before_last_save; end

    sig { returns(T.untyped) }
    def enterprise_web_business_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def enterprise_web_business_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def enterprise_web_business_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def enterprise_web_business_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def enterprise_web_business_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def enterprise_web_business_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def enterprise_web_business_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def enterprise_web_business_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def enterprise_web_business_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def enterprise_web_business_id_was; end

    sig { void }
    def enterprise_web_business_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def location; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def location=(value); end

    sig { returns(T::Boolean) }
    def location?; end

    sig { returns(T.nilable(::String)) }
    def location_before_last_save; end

    sig { returns(T.untyped) }
    def location_before_type_cast; end

    sig { returns(T::Boolean) }
    def location_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def location_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def location_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_previously_was; end

    sig { returns(T.nilable(::String)) }
    def location_was; end

    sig { void }
    def location_will_change!; end

    sig { returns(T.untyped) }
    def long_description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def long_description=(value); end

    sig { returns(T::Boolean) }
    def long_description?; end

    sig { returns(T.untyped) }
    def long_description_before_last_save; end

    sig { returns(T.untyped) }
    def long_description_before_type_cast; end

    sig { returns(T::Boolean) }
    def long_description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def long_description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def long_description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def long_description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def long_description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def long_description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def long_description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def long_description_previously_was; end

    sig { returns(T.untyped) }
    def long_description_was; end

    sig { void }
    def long_description_will_change!; end

    sig { returns(T.untyped) }
    def name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.untyped) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def name_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def name_previously_was; end

    sig { returns(T.untyped) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::String) }
    def plan_duration; end

    sig { params(value: ::String).returns(::String) }
    def plan_duration=(value); end

    sig { returns(T::Boolean) }
    def plan_duration?; end

    sig { returns(T.nilable(::String)) }
    def plan_duration_before_last_save; end

    sig { returns(T.untyped) }
    def plan_duration_before_type_cast; end

    sig { returns(T::Boolean) }
    def plan_duration_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def plan_duration_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def plan_duration_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def plan_duration_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def plan_duration_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def plan_duration_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def plan_duration_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def plan_duration_previously_was; end

    sig { returns(T.nilable(::String)) }
    def plan_duration_was; end

    sig { void }
    def plan_duration_will_change!; end

    sig { returns(T.untyped) }
    def raw_data; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def raw_data=(value); end

    sig { returns(T::Boolean) }
    def raw_data?; end

    sig { returns(T.untyped) }
    def raw_data_before_last_save; end

    sig { returns(T.untyped) }
    def raw_data_before_type_cast; end

    sig { returns(T::Boolean) }
    def raw_data_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def raw_data_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def raw_data_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def raw_data_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def raw_data_previously_was; end

    sig { returns(T.untyped) }
    def raw_data_was; end

    sig { void }
    def raw_data_will_change!; end

    sig { void }
    def restore_billing_email!; end

    sig { void }
    def restore_billing_term_ends_at!; end

    sig { void }
    def restore_business_type!; end

    sig { void }
    def restore_can_self_serve!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_customer_id!; end

    sig { void }
    def restore_deleted_at!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_downgraded_at!; end

    sig { void }
    def restore_enterprise_web_business_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_location!; end

    sig { void }
    def restore_long_description!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_plan_duration!; end

    sig { void }
    def restore_raw_data!; end

    sig { void }
    def restore_seats!; end

    sig { void }
    def restore_seats_plan_type!; end

    sig { void }
    def restore_shortcode!; end

    sig { void }
    def restore_slug!; end

    sig { void }
    def restore_spammy!; end

    sig { void }
    def restore_spammy_reason!; end

    sig { void }
    def restore_staff_owned!; end

    sig { void }
    def restore_suspended_at!; end

    sig { void }
    def restore_terms_of_service_company_name!; end

    sig { void }
    def restore_terms_of_service_notes!; end

    sig { void }
    def restore_terms_of_service_type!; end

    sig { void }
    def restore_trial_completed_at!; end

    sig { void }
    def restore_trial_completion_status!; end

    sig { void }
    def restore_trial_conversion_initiated_at!; end

    sig { void }
    def restore_trial_expires_at!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_upgrade_initiated_from_organization_id!; end

    sig { void }
    def restore_upgrade_purchase_initiated_at!; end

    sig { void }
    def restore_upgrade_reviewed_at!; end

    sig { void }
    def restore_upgrade_reviewed_by_id!; end

    sig { void }
    def restore_upgraded_at!; end

    sig { void }
    def restore_upgraded_from_id!; end

    sig { void }
    def restore_upgraded_from_plan!; end

    sig { void }
    def restore_website_url!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_billing_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_email?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_billing_term_ends_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_term_ends_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_business_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_business_type?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_can_self_serve; end

    sig { returns(T::Boolean) }
    def saved_change_to_can_self_serve?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_customer_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_customer_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_deleted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_downgraded_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_downgraded_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_enterprise_web_business_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_enterprise_web_business_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_location; end

    sig { returns(T::Boolean) }
    def saved_change_to_location?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_long_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_long_description?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_plan_duration; end

    sig { returns(T::Boolean) }
    def saved_change_to_plan_duration?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_raw_data; end

    sig { returns(T::Boolean) }
    def saved_change_to_raw_data?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_seats; end

    sig { returns(T::Boolean) }
    def saved_change_to_seats?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_seats_plan_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_seats_plan_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_shortcode; end

    sig { returns(T::Boolean) }
    def saved_change_to_shortcode?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_slug?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_spammy; end

    sig { returns(T::Boolean) }
    def saved_change_to_spammy?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_spammy_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_spammy_reason?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_staff_owned; end

    sig { returns(T::Boolean) }
    def saved_change_to_staff_owned?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_suspended_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_suspended_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_terms_of_service_company_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_terms_of_service_company_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_terms_of_service_notes; end

    sig { returns(T::Boolean) }
    def saved_change_to_terms_of_service_notes?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_terms_of_service_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_terms_of_service_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_trial_completed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_trial_completed_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_trial_completion_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_trial_completion_status?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_trial_conversion_initiated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_trial_conversion_initiated_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_trial_expires_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_trial_expires_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_upgrade_initiated_from_organization_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_upgrade_initiated_from_organization_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_upgrade_purchase_initiated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_upgrade_purchase_initiated_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_upgrade_reviewed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_upgrade_reviewed_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_upgrade_reviewed_by_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_upgrade_reviewed_by_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_upgraded_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_upgraded_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_upgraded_from_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_upgraded_from_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_upgraded_from_plan; end

    sig { returns(T::Boolean) }
    def saved_change_to_upgraded_from_plan?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_website_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_website_url?; end

    sig { returns(::Integer) }
    def seats; end

    sig { params(value: ::Integer).returns(::Integer) }
    def seats=(value); end

    sig { returns(T::Boolean) }
    def seats?; end

    sig { returns(T.nilable(::Integer)) }
    def seats_before_last_save; end

    sig { returns(T.untyped) }
    def seats_before_type_cast; end

    sig { returns(T::Boolean) }
    def seats_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def seats_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def seats_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def seats_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def seats_in_database; end

    sig { returns(::String) }
    def seats_plan_type; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def seats_plan_type=(value); end

    sig { returns(T::Boolean) }
    def seats_plan_type?; end

    sig { returns(T.nilable(::String)) }
    def seats_plan_type_before_last_save; end

    sig { returns(T.untyped) }
    def seats_plan_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def seats_plan_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def seats_plan_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def seats_plan_type_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def seats_plan_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def seats_plan_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def seats_plan_type_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def seats_plan_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def seats_plan_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def seats_plan_type_was; end

    sig { void }
    def seats_plan_type_will_change!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def seats_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def seats_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def seats_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def seats_was; end

    sig { void }
    def seats_will_change!; end

    sig { returns(T.nilable(::String)) }
    def shortcode; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def shortcode=(value); end

    sig { returns(T::Boolean) }
    def shortcode?; end

    sig { returns(T.nilable(::String)) }
    def shortcode_before_last_save; end

    sig { returns(T.untyped) }
    def shortcode_before_type_cast; end

    sig { returns(T::Boolean) }
    def shortcode_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shortcode_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shortcode_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shortcode_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shortcode_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shortcode_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shortcode_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shortcode_previously_was; end

    sig { returns(T.nilable(::String)) }
    def shortcode_was; end

    sig { void }
    def shortcode_will_change!; end

    sig { returns(::String) }
    def slug; end

    sig { params(value: ::String).returns(::String) }
    def slug=(value); end

    sig { returns(T::Boolean) }
    def slug?; end

    sig { returns(T.nilable(::String)) }
    def slug_before_last_save; end

    sig { returns(T.untyped) }
    def slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def slug_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def slug_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def slug_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slug_was; end

    sig { void }
    def slug_will_change!; end

    sig { returns(T::Boolean) }
    def spammy; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def spammy=(value); end

    sig { returns(T::Boolean) }
    def spammy?; end

    sig { returns(T.nilable(T::Boolean)) }
    def spammy_before_last_save; end

    sig { returns(T.untyped) }
    def spammy_before_type_cast; end

    sig { returns(T::Boolean) }
    def spammy_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def spammy_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def spammy_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def spammy_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def spammy_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def spammy_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def spammy_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def spammy_previously_was; end

    sig { returns(T.nilable(::String)) }
    def spammy_reason; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def spammy_reason=(value); end

    sig { returns(T::Boolean) }
    def spammy_reason?; end

    sig { returns(T.nilable(::String)) }
    def spammy_reason_before_last_save; end

    sig { returns(T.untyped) }
    def spammy_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def spammy_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def spammy_reason_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def spammy_reason_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def spammy_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def spammy_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def spammy_reason_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def spammy_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def spammy_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def spammy_reason_was; end

    sig { void }
    def spammy_reason_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def spammy_was; end

    sig { void }
    def spammy_will_change!; end

    sig { returns(T::Boolean) }
    def staff_owned; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def staff_owned=(value); end

    sig { returns(T::Boolean) }
    def staff_owned?; end

    sig { returns(T.nilable(T::Boolean)) }
    def staff_owned_before_last_save; end

    sig { returns(T.untyped) }
    def staff_owned_before_type_cast; end

    sig { returns(T::Boolean) }
    def staff_owned_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def staff_owned_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def staff_owned_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def staff_owned_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def staff_owned_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def staff_owned_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def staff_owned_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def staff_owned_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def staff_owned_was; end

    sig { void }
    def staff_owned_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at=(value); end

    sig { returns(T::Boolean) }
    def suspended_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_before_last_save; end

    sig { returns(T.untyped) }
    def suspended_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def suspended_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def suspended_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def suspended_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def suspended_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def suspended_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def suspended_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_was; end

    sig { void }
    def suspended_at_will_change!; end

    sig { returns(T.untyped) }
    def terms_of_service_company_name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def terms_of_service_company_name=(value); end

    sig { returns(T::Boolean) }
    def terms_of_service_company_name?; end

    sig { returns(T.untyped) }
    def terms_of_service_company_name_before_last_save; end

    sig { returns(T.untyped) }
    def terms_of_service_company_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def terms_of_service_company_name_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def terms_of_service_company_name_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def terms_of_service_company_name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def terms_of_service_company_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def terms_of_service_company_name_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def terms_of_service_company_name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def terms_of_service_company_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def terms_of_service_company_name_previously_was; end

    sig { returns(T.untyped) }
    def terms_of_service_company_name_was; end

    sig { void }
    def terms_of_service_company_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def terms_of_service_notes; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def terms_of_service_notes=(value); end

    sig { returns(T::Boolean) }
    def terms_of_service_notes?; end

    sig { returns(T.nilable(::String)) }
    def terms_of_service_notes_before_last_save; end

    sig { returns(T.untyped) }
    def terms_of_service_notes_before_type_cast; end

    sig { returns(T::Boolean) }
    def terms_of_service_notes_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def terms_of_service_notes_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def terms_of_service_notes_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def terms_of_service_notes_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def terms_of_service_notes_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def terms_of_service_notes_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def terms_of_service_notes_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def terms_of_service_notes_previously_was; end

    sig { returns(T.nilable(::String)) }
    def terms_of_service_notes_was; end

    sig { void }
    def terms_of_service_notes_will_change!; end

    sig { returns(::String) }
    def terms_of_service_type; end

    sig { params(value: ::String).returns(::String) }
    def terms_of_service_type=(value); end

    sig { returns(T::Boolean) }
    def terms_of_service_type?; end

    sig { returns(T.nilable(::String)) }
    def terms_of_service_type_before_last_save; end

    sig { returns(T.untyped) }
    def terms_of_service_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def terms_of_service_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def terms_of_service_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def terms_of_service_type_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def terms_of_service_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def terms_of_service_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def terms_of_service_type_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def terms_of_service_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def terms_of_service_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def terms_of_service_type_was; end

    sig { void }
    def terms_of_service_type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_completed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_completed_at=(value); end

    sig { returns(T::Boolean) }
    def trial_completed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_completed_at_before_last_save; end

    sig { returns(T.untyped) }
    def trial_completed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def trial_completed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def trial_completed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def trial_completed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def trial_completed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_completed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def trial_completed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def trial_completed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_completed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_completed_at_was; end

    sig { void }
    def trial_completed_at_will_change!; end

    sig { returns(::String) }
    def trial_completion_status; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def trial_completion_status=(value); end

    sig { returns(T::Boolean) }
    def trial_completion_status?; end

    sig { returns(T.nilable(::String)) }
    def trial_completion_status_before_last_save; end

    sig { returns(T.untyped) }
    def trial_completion_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def trial_completion_status_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def trial_completion_status_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def trial_completion_status_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def trial_completion_status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def trial_completion_status_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def trial_completion_status_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def trial_completion_status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def trial_completion_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def trial_completion_status_was; end

    sig { void }
    def trial_completion_status_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_conversion_initiated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_conversion_initiated_at=(value); end

    sig { returns(T::Boolean) }
    def trial_conversion_initiated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_conversion_initiated_at_before_last_save; end

    sig { returns(T.untyped) }
    def trial_conversion_initiated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def trial_conversion_initiated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def trial_conversion_initiated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def trial_conversion_initiated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def trial_conversion_initiated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_conversion_initiated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def trial_conversion_initiated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def trial_conversion_initiated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_conversion_initiated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_conversion_initiated_at_was; end

    sig { void }
    def trial_conversion_initiated_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_expires_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_expires_at=(value); end

    sig { returns(T::Boolean) }
    def trial_expires_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_expires_at_before_last_save; end

    sig { returns(T.untyped) }
    def trial_expires_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def trial_expires_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def trial_expires_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def trial_expires_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def trial_expires_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_expires_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def trial_expires_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def trial_expires_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_expires_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def trial_expires_at_was; end

    sig { void }
    def trial_expires_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_initiated_from_organization_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def upgrade_initiated_from_organization_id=(value); end

    sig { returns(T::Boolean) }
    def upgrade_initiated_from_organization_id?; end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_initiated_from_organization_id_before_last_save; end

    sig { returns(T.untyped) }
    def upgrade_initiated_from_organization_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def upgrade_initiated_from_organization_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upgrade_initiated_from_organization_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upgrade_initiated_from_organization_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def upgrade_initiated_from_organization_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_initiated_from_organization_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upgrade_initiated_from_organization_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def upgrade_initiated_from_organization_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_initiated_from_organization_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_initiated_from_organization_id_was; end

    sig { void }
    def upgrade_initiated_from_organization_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgrade_purchase_initiated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgrade_purchase_initiated_at=(value); end

    sig { returns(T::Boolean) }
    def upgrade_purchase_initiated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgrade_purchase_initiated_at_before_last_save; end

    sig { returns(T.untyped) }
    def upgrade_purchase_initiated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def upgrade_purchase_initiated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def upgrade_purchase_initiated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def upgrade_purchase_initiated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def upgrade_purchase_initiated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgrade_purchase_initiated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def upgrade_purchase_initiated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def upgrade_purchase_initiated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgrade_purchase_initiated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgrade_purchase_initiated_at_was; end

    sig { void }
    def upgrade_purchase_initiated_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgrade_reviewed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgrade_reviewed_at=(value); end

    sig { returns(T::Boolean) }
    def upgrade_reviewed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgrade_reviewed_at_before_last_save; end

    sig { returns(T.untyped) }
    def upgrade_reviewed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def upgrade_reviewed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def upgrade_reviewed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def upgrade_reviewed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def upgrade_reviewed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgrade_reviewed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def upgrade_reviewed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def upgrade_reviewed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgrade_reviewed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgrade_reviewed_at_was; end

    sig { void }
    def upgrade_reviewed_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_reviewed_by_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def upgrade_reviewed_by_id=(value); end

    sig { returns(T::Boolean) }
    def upgrade_reviewed_by_id?; end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_reviewed_by_id_before_last_save; end

    sig { returns(T.untyped) }
    def upgrade_reviewed_by_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def upgrade_reviewed_by_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upgrade_reviewed_by_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upgrade_reviewed_by_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def upgrade_reviewed_by_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_reviewed_by_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upgrade_reviewed_by_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def upgrade_reviewed_by_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_reviewed_by_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_reviewed_by_id_was; end

    sig { void }
    def upgrade_reviewed_by_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgraded_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgraded_at=(value); end

    sig { returns(T::Boolean) }
    def upgraded_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgraded_at_before_last_save; end

    sig { returns(T.untyped) }
    def upgraded_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def upgraded_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def upgraded_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def upgraded_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def upgraded_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgraded_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def upgraded_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def upgraded_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgraded_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upgraded_at_was; end

    sig { void }
    def upgraded_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def upgraded_from_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def upgraded_from_id=(value); end

    sig { returns(T::Boolean) }
    def upgraded_from_id?; end

    sig { returns(T.nilable(::Integer)) }
    def upgraded_from_id_before_last_save; end

    sig { returns(T.untyped) }
    def upgraded_from_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def upgraded_from_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upgraded_from_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upgraded_from_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def upgraded_from_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upgraded_from_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upgraded_from_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def upgraded_from_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upgraded_from_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def upgraded_from_id_was; end

    sig { void }
    def upgraded_from_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def upgraded_from_plan; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def upgraded_from_plan=(value); end

    sig { returns(T::Boolean) }
    def upgraded_from_plan?; end

    sig { returns(T.nilable(::String)) }
    def upgraded_from_plan_before_last_save; end

    sig { returns(T.untyped) }
    def upgraded_from_plan_before_type_cast; end

    sig { returns(T::Boolean) }
    def upgraded_from_plan_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def upgraded_from_plan_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def upgraded_from_plan_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def upgraded_from_plan_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def upgraded_from_plan_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def upgraded_from_plan_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def upgraded_from_plan_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def upgraded_from_plan_previously_was; end

    sig { returns(T.nilable(::String)) }
    def upgraded_from_plan_was; end

    sig { void }
    def upgraded_from_plan_will_change!; end

    sig { returns(T.nilable(::String)) }
    def website_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def website_url=(value); end

    sig { returns(T::Boolean) }
    def website_url?; end

    sig { returns(T.nilable(::String)) }
    def website_url_before_last_save; end

    sig { returns(T.untyped) }
    def website_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def website_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def website_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def website_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def website_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def website_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def website_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def website_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def website_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def website_url_was; end

    sig { void }
    def website_url_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_term_ends_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_business_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_can_self_serve?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_customer_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_downgraded_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_enterprise_web_business_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_location?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_long_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_plan_duration?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_raw_data?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_seats?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_seats_plan_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_shortcode?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_spammy?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_spammy_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_staff_owned?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_suspended_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_terms_of_service_company_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_terms_of_service_notes?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_terms_of_service_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_trial_completed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_trial_completion_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_trial_conversion_initiated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_trial_expires_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upgrade_initiated_from_organization_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upgrade_purchase_initiated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upgrade_reviewed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upgrade_reviewed_by_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upgraded_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upgraded_from_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upgraded_from_plan?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_website_url?; end
  end

  module GeneratedColumnCoderAccessors
    sig { returns(T.untyped) }
    def completed_onboarding_tasks; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def completed_onboarding_tasks=(value); end

    sig { returns(T::Boolean) }
    def completed_onboarding_tasks?; end
  end

  module GeneratedPreludeBatchMethods
    sig { returns(T.untyped) }
    def coupon; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_coupon; end

    sig { returns(T.untyped) }
    def coupon_redemption; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_coupon_redemption; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def auto_pay_rbi_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_slug(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_from_coupon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def creation_from_coupon_purchase_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def creation_initiated_from_coupon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def default_managed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def enterprise_managed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_query(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def including_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def is_staff_owned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def metered_ghe(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def no_trial_or_active_trial(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_created_from_coupon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_creation_from_coupon_purchase_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_creation_initiated_from_coupon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_default_managed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_enterprise_managed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_no_trial_or_active_trial(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_organization_direct_upgraded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_organization_upgrade_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_organization_upgrade_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_organization_upgrade_purchase_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_seats_plan_basic(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_seats_plan_full(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_staff_owned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_trial(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_trial_cancelled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_trial_conversion_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_trial_converted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_trial_expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def on_paid_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def organization_direct_upgraded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def organization_upgrade_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def organization_upgrade_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def organization_upgrade_purchase_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def purgeable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def seats_plan_basic(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def seats_plan_full(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def self_serve_organization_upgrading_or_upgraded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def trial(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def trial_active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def trial_cancelled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def trial_conversion_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def trial_conversion_not_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def trial_converted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def trial_expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def trial_not_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def trial_with_conversion_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def upgrade_purchase_initiated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def upgraded_and_not_reviewed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def upgraded_and_reviewed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def volume_ghe(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_active_azure_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Business } }

    sig { returns(T::Array[::Business]) }
    def to_a; end

    sig { returns(T::Array[::Business]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Business } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Business } }

    sig do
      params(
        records: T.any(::Business, T::Enumerable[T.any(::Business, T::Enumerable[::Business])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Business, T::Enumerable[T.any(::Business, T::Enumerable[::Business])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Business, T::Enumerable[T.any(::Business, T::Enumerable[::Business])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Business]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Business, T::Enumerable[T.any(::Business, T::Enumerable[::Business])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Business, T::Enumerable[T.any(::Business, T::Enumerable[::Business])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Business, T::Enumerable[T.any(::Business, T::Enumerable[::Business])])
      ).returns(T::Array[::Business])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Business]) }
    def target; end

    sig { returns(T::Array[::Business]) }
    def to_a; end

    sig { returns(T::Array[::Business]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Business } }

    sig { returns(T::Array[::Business]) }
    def to_a; end

    sig { returns(T::Array[::Business]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Business } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

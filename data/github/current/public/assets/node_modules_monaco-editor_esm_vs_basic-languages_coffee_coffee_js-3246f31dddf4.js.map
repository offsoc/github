{"version":3,"file":"chunk-node_modules_monaco-editor_esm_vs_basic-languages_coffee_coffee_js-xxxxxxxxxxxx.js","mappings":"0MAAA;;;;;+EAK+E,EAI/E,IAAIA,EAAO,CACTC,YAAa,wFACbC,SAAU,CACRC,aAAc,CAAC,MAAO,MAAM,CAC5BC,YAAa,GACf,EACAC,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACDC,iBAAkB,CAChB,CAAEC,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACzB,CACDC,iBAAkB,CAChB,CAAEF,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACzB,CACDE,QAAS,CACPC,QAAS,CACPC,MAAO,OAAW,mBAClBC,IAAK,OAAW,qBAClB,CACF,CACF,EACIC,EAAW,CACbC,aAAc,GACdC,WAAY,GACZC,aAAc,UACdZ,SAAU,CACR,CAAEE,KAAM,IAAKC,MAAO,IAAKU,MAAO,iBAAkB,EAClD,CAAEX,KAAM,IAAKC,MAAO,IAAKU,MAAO,kBAAmB,EACnD,CAAEX,KAAM,IAAKC,MAAO,IAAKU,MAAO,uBAAwB,EACzD,CACDC,MAAO,qCACPC,SAAU,CACR,MACA,KACA,KACA,OACA,MACA,KACA,MACA,IACA,KACA,MACA,OACA,QACA,OACA,OACA,MACA,SACA,SACA,KACA,aACA,SACA,QACA,QACA,WACA,WACA,KACA,OACA,SACA,MACA,QACA,KACA,MACA,QACA,UACA,QACA,UACA,QACA,YACA,OACA,SACA,QACA,OACA,KACA,KACA,OACD,CAEDC,QAAS,4BACTC,QAAS,yEAETC,UAAW,CACTC,KAAM,CAEJ,CAAC,iBAAkB,sBAAsB,CACzC,CACE,eACA,CACEC,MAAO,CACLC,KAAM,sBACN,YAAa,CAAER,MAAO,YAAa,EACnC,WAAY,EACd,CACF,EACD,CAED,CAAC,aAAc,GAAG,CAElB,CAAC,MAAO,UAAW,WAAW,CAC9B,CAAC,OAAQ,UAAU,CAEnB,CAAC,MAAO,CAAEA,MAAO,SAAUS,KAAM,aAAc,EAAE,CACjD,CAAC,iBAAkB,CAAC,GAAI,SAAS,CAAC,CAClC,CAAC,oBAAqB,CAAC,YAAa,GAAI,SAAS,CAAC,CAClD,CAAC,oBAAqB,CAAC,YAAa,GAAI,SAAS,CAAC,CAClD,CAAC,oBAAqB,CAAC,YAAa,GAAI,SAAS,CAAC,CAClD,CAAC,oBAAqB,CAAC,YAAa,GAAI,SAAS,CAAC,CAClD,CAAC,oBAAqB,CAAC,YAAa,GAAI,SAAS,CAAC,CAClD,CAAC,oBAAqB,CAAC,YAAa,GAAI,SAAS,CAAC,CAClD,CAAC,oBAAqB,CAAC,YAAa,GAAI,SAAS,CAAC,CAClD,CAAC,oBAAqB,CAAC,YAAa,GAAI,SAAS,CAAC,CAClD,CAAC,oBAAqB,CAAC,YAAa,GAAI,SAAS,CAAC,CAClD,CAAC,oBAAqB,CAAC,YAAa,GAAI,SAAS,CAAC,CAClD,CAAC,oBAAqB,CAAC,GAAI,GAAI,SAAS,CAAC,CAEzC,CACE,IACA,CACEF,MAAO,CACL,0BAA2B,CACzBP,MAAO,SACPS,KAAM,MACR,EACA,WAAY,WACd,CACF,EACD,CACD,CAAC,aAAc,YAAY,CAC3B,CAAC,WAAY,YAAY,CAEzB,CAAC,sBAAuB,eAAe,CACvC,CAAC,2BAA4B,eAAe,CAC5C,CAAC,oBAAqB,aAAa,CACnC,CAAC,gBAAiB,eAAe,CACjC,CAAC,MAAO,SAAS,CAEjB,CAAC,OAAQ,YAAY,CAErB,CAAC,MAAO,SAAU,kBAAkB,CACpC,CAAC,MAAO,SAAU,kBAAkB,CACpC,CACE,IACA,CACEF,MAAO,CACL,OAAQ,SACR,WAAY,CAAEP,MAAO,SAAUS,KAAM,WAAY,CACnD,CACF,EACD,CACD,CACE,IACA,CACEF,MAAO,CACL,OAAQ,SACR,WAAY,CAAEP,MAAO,SAAUS,KAAM,WAAY,CACnD,CACF,EACD,CACF,CACDC,OAAQ,CACN,CAAC,aAAc,SAAS,CACxB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,KAAM,wBAAwB,CAC/B,CAAC,KAAM,wBAAwB,CAC/B,CACE,KACA,CACEH,MAAO,CACL,SAAU,CACRP,MAAO,SACPS,KAAM,yBACR,EACA,WAAY,QACd,CACF,EACD,CACD,CACE,OACA,CACEF,MAAO,CACL,UAAW,CAAEP,MAAO,SAAUS,KAAM,MAAO,EAC3C,WAAY,QACd,CACF,EACD,CACD,CAAC,IAAK,SAAS,CAChB,CACDE,WAAY,CACV,CACE,YACA,CACEJ,MAAO,CACL,UAAW,CAAEP,MAAO,SAAUS,KAAM,MAAO,EAC3C,WAAY,QACd,CACF,EACD,CACD,CAAC,YAAa,SAAS,CACvB,CAAC,QAAS,SAAS,CACnB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,KAAM,wBAAwB,CAC/B,CAAC,KAAM,CAAET,MAAO,eAAgBS,KAAM,yBAA0B,EAAE,CAClE,CAAC,IAAK,SAAS,CAChB,CACDG,QAAS,CACP,CAAC,QAAS,UAAU,CACpB,CAAC,MAAO,UAAW,OAAO,CAC1B,CAAC,IAAK,UAAU,CACjB,CACDC,WAAY,CACV,CAAC,YAAa,SAAS,CACvB,CAAC,MAAO,SAAS,CACjB,CAAC,OAAQ,UAAU,CACnB,CAAC,YAAa,CAAEb,MAAO,SAAUS,KAAM,MAAO,EAAE,CAChD,CAAC,KAAM,SAAS,CACjB,CAEL,C","sources":["node_modules/monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.49.0(383fdf3fc0e1e1a024068b8d0fd4f3dcbae74d04)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/coffee/coffee.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    blockComment: [\"###\", \"###\"],\n    lineComment: \"#\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  ignoreCase: true,\n  tokenPostfix: \".coffee\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\n  ],\n  regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n  keywords: [\n    \"and\",\n    \"or\",\n    \"is\",\n    \"isnt\",\n    \"not\",\n    \"on\",\n    \"yes\",\n    \"@\",\n    \"no\",\n    \"off\",\n    \"true\",\n    \"false\",\n    \"null\",\n    \"this\",\n    \"new\",\n    \"delete\",\n    \"typeof\",\n    \"in\",\n    \"instanceof\",\n    \"return\",\n    \"throw\",\n    \"break\",\n    \"continue\",\n    \"debugger\",\n    \"if\",\n    \"else\",\n    \"switch\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"try\",\n    \"catch\",\n    \"finally\",\n    \"class\",\n    \"extends\",\n    \"super\",\n    \"undefined\",\n    \"then\",\n    \"unless\",\n    \"until\",\n    \"loop\",\n    \"of\",\n    \"by\",\n    \"when\"\n  ],\n  // we include these common regular expressions\n  symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // identifiers and keywords\n      [/\\@[a-zA-Z_]\\w*/, \"variable.predefined\"],\n      [\n        /[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            this: \"variable.predefined\",\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"\"\n          }\n        }\n      ],\n      // whitespace\n      [/[ \\t\\r\\n]+/, \"\"],\n      // Comments\n      [/###/, \"comment\", \"@comment\"],\n      [/#.*$/, \"comment\"],\n      // regular expressions\n      [\"///\", { token: \"regexp\", next: \"@hereregexp\" }],\n      [/^(\\s*)(@regEx)/, [\"\", \"regexp\"]],\n      [/(\\()(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]],\n      [/(\\,)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\=)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\:)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\[)(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]],\n      [/(\\!)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\&)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\|)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\?)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\{)(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]],\n      [/(\\;)(\\s*)(@regEx)/, [\"\", \"\", \"regexp\"]],\n      // delimiters\n      [\n        /}/,\n        {\n          cases: {\n            \"$S2==interpolatedstring\": {\n              token: \"string\",\n              next: \"@pop\"\n            },\n            \"@default\": \"@brackets\"\n          }\n        }\n      ],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/@symbols/, \"delimiter\"],\n      // numbers\n      [/\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"],\n      [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/0[0-7]+(?!\\d)/, \"number.octal\"],\n      [/\\d+/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[,.]/, \"delimiter\"],\n      // strings:\n      [/\"\"\"/, \"string\", '@herestring.\"\"\"'],\n      [/'''/, \"string\", \"@herestring.'''\"],\n      [\n        /\"/,\n        {\n          cases: {\n            \"@eos\": \"string\",\n            \"@default\": { token: \"string\", next: '@string.\"' }\n          }\n        }\n      ],\n      [\n        /'/,\n        {\n          cases: {\n            \"@eos\": \"string\",\n            \"@default\": { token: \"string\", next: \"@string.'\" }\n          }\n        }\n      ]\n    ],\n    string: [\n      [/[^\"'\\#\\\\]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\./, \"string.escape.invalid\"],\n      [/\\./, \"string.escape.invalid\"],\n      [\n        /#{/,\n        {\n          cases: {\n            '$S2==\"': {\n              token: \"string\",\n              next: \"root.interpolatedstring\"\n            },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      [\n        /[\"']/,\n        {\n          cases: {\n            \"$#==$S2\": { token: \"string\", next: \"@pop\" },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      [/#/, \"string\"]\n    ],\n    herestring: [\n      [\n        /(\"\"\"|''')/,\n        {\n          cases: {\n            \"$1==$S2\": { token: \"string\", next: \"@pop\" },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      [/[^#\\\\'\"]+/, \"string\"],\n      [/['\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\./, \"string.escape.invalid\"],\n      [/#{/, { token: \"string.quote\", next: \"root.interpolatedstring\" }],\n      [/#/, \"string\"]\n    ],\n    comment: [\n      [/[^#]+/, \"comment\"],\n      [/###/, \"comment\", \"@pop\"],\n      [/#/, \"comment\"]\n    ],\n    hereregexp: [\n      [/[^\\\\\\/#]+/, \"regexp\"],\n      [/\\\\./, \"regexp\"],\n      [/#.*$/, \"comment\"],\n      [\"///[igm]*\", { token: \"regexp\", next: \"@pop\" }],\n      [/\\//, \"regexp\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["conf","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","end","language","defaultToken","ignoreCase","tokenPostfix","token","regEx","keywords","symbols","escapes","tokenizer","root","cases","this","next","string","herestring","comment","hereregexp"],"sourceRoot":""}
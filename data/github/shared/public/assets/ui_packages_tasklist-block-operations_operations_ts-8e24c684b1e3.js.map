{"version":3,"file":"chunk-ui_packages_tasklist-block-operations_operations_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/tasklist-block-operations/operations.ts"],"sourcesContent":["import type {BlockContent, Code, List, Literal, ListItem, Root, Content, Heading} from 'mdast'\nimport {micromark} from 'micromark'\nimport {gfm, gfmHtml} from 'micromark-extension-gfm'\nimport {remark} from 'remark'\nimport remarkGfm from 'remark-gfm'\n\ninterface Raw extends Literal {\n  type: 'raw'\n}\n\ndeclare module 'mdast' {\n  interface StaticPhrasingContentMap {\n    raw: Raw\n  }\n}\n\nexport function appendItem(source: string, position: number, value: string): string {\n  transform(source, (ast: Root) => {\n    const block = getTasklistBlocks(ast)[position]\n    if (!block) return\n\n    block.value = transformBlock(block.value, list => {\n      list.children.push({\n        type: 'listItem',\n        checked: false,\n        children: transformText(value),\n      })\n    })\n    source = replaceBlock(source, block)\n  })\n\n  return source\n}\n\nexport function removeItem(source: string, position: [number, number]): string {\n  transform(source, (ast: Root) => {\n    const block = getTasklistBlocks(ast)[position[0]]\n    if (!block) return\n\n    block.value = transformBlock(block.value, list => {\n      list.children.splice(position[1], 1)\n    })\n\n    source = replaceBlock(source, block)\n  })\n\n  return source\n}\n\nexport function removeTasklistBlock(source: string, position: number): string {\n  transform(source, (ast: Root) => {\n    const block = getTasklistBlocks(ast)[position]\n    if (!block) return\n\n    const index = ast.children.indexOf(block)\n    ast.children.splice(index, 1)\n\n    source = removeBlock(source, block)\n  })\n\n  return source\n}\n\nexport function updateItemPosition(source: string, src: [number, number], dst: [number, number]): string {\n  transform(source, (ast: Root) => {\n    const srcBlock = getTasklistBlocks(ast)[src[0]]\n    const dstBlock = getTasklistBlocks(ast)[dst[0]]\n    if (!srcBlock || !dstBlock) return\n\n    let item: ListItem | undefined\n\n    srcBlock.value = transformBlock(srcBlock.value, list => {\n      item = list.children[src[1]]\n\n      // Remove item from original position before inserting into new position\n      list.children.splice(src[1], 1)\n    })\n\n    dstBlock.value = transformBlock(dstBlock.value, list => {\n      if (item) list.children.splice(dst[1], 0, item)\n    })\n\n    if (srcBlock === dstBlock) {\n      source = replaceBlock(source, srcBlock)\n    } else if (src[0] < dst[0]) {\n      source = replaceBlock(source, dstBlock)\n      source = replaceBlock(source, srcBlock)\n    } else {\n      source = replaceBlock(source, srcBlock)\n      source = replaceBlock(source, dstBlock)\n    }\n  })\n\n  return source\n}\n\nexport function updateItemState(source: string, position: [number, number], closed: boolean): string {\n  transform(source, (ast: Root) => {\n    const block = getTasklistBlocks(ast)[position[0]]\n    if (!block) return\n\n    block.value = transformBlock(block.value, list => {\n      const item = list.children[position[1]]\n      if (!item) return\n      item.checked = closed\n    })\n\n    source = replaceBlock(source, block)\n  })\n\n  return source\n}\n\nexport function updateItemTitle(source: string, position: [number, number], value: string): string {\n  transform(source, (ast: Root) => {\n    const block = getTasklistBlocks(ast)[position[0]]\n    if (!block) return\n\n    block.value = transformBlock(block.value, list => {\n      const item = list.children[position[1]]\n      if (!item) return\n      item.children = transformText(value)\n    })\n\n    source = replaceBlock(source, block)\n  })\n\n  return source\n}\n\nexport function updateTasklistTitle(source: string, position: number, value: string): string {\n  transform(source, (ast: Root) => {\n    const cleanTitle = value.trim()\n\n    const block = getTasklistBlocks(ast)[position]\n    if (!block) return\n\n    block.value = transformBlock(block.value, (_, root, heading) => {\n      if (!cleanTitle) {\n        // Delete heading node when title is empty\n        const index = root.children.findIndex(node => node.type === 'heading')\n        if (index > -1) root.children.splice(index, 1)\n        return\n      }\n      if (!heading) {\n        heading = {type: 'heading', depth: 3, children: []}\n        root.children.unshift(heading) // Place heading above the list\n      }\n      heading.children = [{type: 'raw', value: cleanTitle}]\n    })\n\n    source = replaceBlock(source, block)\n  })\n\n  return source\n}\n\nfunction getTasklistBlocks(ast: Root): Code[] {\n  return ast.children.filter(node => node.type === 'code' && node.lang === '[tasklist]') as Code[]\n}\n\nfunction removeBlock(source: string, block: Code): string {\n  const before = source.slice(0, block.position!.start.offset)\n  const after = source.slice(block.position!.end.offset)\n\n  return [before.trimEnd(), after.trimStart()].filter(Boolean).join('\\n\\n')\n}\n\nfunction replaceBlock(source: string, block: Code): string {\n  const before = source.slice(0, block.position!.start.offset)\n  const after = source.slice(block.position!.end.offset)\n\n  return `${before}\\`\\`\\`[tasklist]\\n${block.value}\\n\\`\\`\\`${after}`\n}\n\nfunction transform(source: string, callback: (ast: Root) => void): string {\n  return remark()\n    .use(remarkGfm)\n    .use(() => callback)\n    .data('settings', {\n      bullet: '-',\n      listItemIndent: 'one',\n      join: [\n        (left: Content, right: Content) => {\n          if (left.type === 'heading' && right.type === 'list') {\n            return 0\n          }\n        },\n      ],\n      handlers: {\n        raw: (node: Raw) => node.value,\n      },\n    })\n    .processSync(source)\n    .toString()\n}\n\nfunction transformBlock(source: string, callback: (list: List, root: Root, heading?: Heading) => void): string {\n  const output = transform(source, (root: Root) => {\n    let list = root.children.find(node => node.type === 'list') as List\n    const heading = root.children.find(node => node.type === 'heading') as Heading\n\n    if (!list) {\n      list = {type: 'list', children: []}\n      root.children.push(list)\n    }\n\n    for (const listItem of list.children) {\n      for (const paragraph of listItem.children) {\n        if (paragraph.type === 'paragraph') {\n          paragraph.children = paragraph.children.map(child => ({\n            type: 'raw',\n            value: source.slice(child.position!.start.offset, child.position!.end.offset),\n          }))\n        }\n      }\n    }\n\n    callback(list, root, heading)\n  })\n\n  // Remove trailing newline\n  return output.replace(/\\n+$/, '')\n}\n\nfunction transformText(text: string): BlockContent[] {\n  return [{type: 'paragraph', children: [{type: 'raw', value: text.trim()}]}]\n}\n\nexport function transformToHTML(source: string): string {\n  const html = micromark(source, {extensions: [gfm()], htmlExtensions: [gfmHtml()]})\n\n  // Remove the wrapping <p> tag\n  return html.replace(/^<p>|<\\/p>$/g, '')\n}\n"],"names":["appendItem","source","position","value","transform","block","getTasklistBlocks","ast","transformBlock","list","children","push","type","checked","transformText","replaceBlock","removeItem","splice","removeTasklistBlock","index","indexOf","removeBlock","before","slice","start","offset","after","end","trimEnd","trimStart","filter","Boolean","join","updateItemPosition","src","dst","item","srcBlock","dstBlock","updateItemState","closed","updateItemTitle","updateTasklistTitle","cleanTitle","trim","_","root","heading","findIndex","node","depth","unshift","lang","callback","remark","use","remarkGfm","data","bullet","listItemIndent","left","right","handlers","raw","processSync","toString","output","find","listItem","paragraph","map","child","replace","text","transformToHTML","html","micromark","extensions","gfm","htmlExtensions","gfmHtml"],"sourceRoot":""}
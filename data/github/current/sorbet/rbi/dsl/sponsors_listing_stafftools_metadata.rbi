# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `SponsorsListingStafftoolsMetadata`.
# Please instead update this file by running `bin/tapioca dsl SponsorsListingStafftoolsMetadata`.

class SponsorsListingStafftoolsMetadata
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::SponsorsListingStafftoolsMetadata).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListingStafftoolsMetadata).void)
      ).returns(::SponsorsListingStafftoolsMetadata)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListingStafftoolsMetadata).void)
      ).returns(::SponsorsListingStafftoolsMetadata)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListingStafftoolsMetadata).void)
      ).returns(::SponsorsListingStafftoolsMetadata)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListingStafftoolsMetadata).void)
      ).returns(::SponsorsListingStafftoolsMetadata)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListingStafftoolsMetadata).void)
      ).returns(::SponsorsListingStafftoolsMetadata)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::SponsorsListingStafftoolsMetadata]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def fifth; end

    sig { returns(::SponsorsListingStafftoolsMetadata) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::SponsorsListingStafftoolsMetadata).void)
      ).returns(T.nilable(T::Enumerator[::SponsorsListingStafftoolsMetadata]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::SponsorsListingStafftoolsMetadata]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::SponsorsListingStafftoolsMetadata]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListingStafftoolsMetadata).void)
      ).returns(::SponsorsListingStafftoolsMetadata)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListingStafftoolsMetadata).void)
      ).returns(::SponsorsListingStafftoolsMetadata)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListingStafftoolsMetadata).void)
      ).returns(::SponsorsListingStafftoolsMetadata)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::SponsorsListingStafftoolsMetadata) }
    def first!; end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def forty_two; end

    sig { returns(::SponsorsListingStafftoolsMetadata) }
    def forty_two!; end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def fourth; end

    sig { returns(::SponsorsListingStafftoolsMetadata) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::SponsorsListingStafftoolsMetadata) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::SponsorsListingStafftoolsMetadata).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListingStafftoolsMetadata).void)
      ).returns(::SponsorsListingStafftoolsMetadata)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::SponsorsListingStafftoolsMetadata).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::SponsorsListingStafftoolsMetadata).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def second; end

    sig { returns(::SponsorsListingStafftoolsMetadata) }
    def second!; end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def second_to_last; end

    sig { returns(::SponsorsListingStafftoolsMetadata) }
    def second_to_last!; end

    sig { returns(::SponsorsListingStafftoolsMetadata) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::SponsorsListingStafftoolsMetadata) }
    def take!; end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def third; end

    sig { returns(::SponsorsListingStafftoolsMetadata) }
    def third!; end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def third_to_last; end

    sig { returns(::SponsorsListingStafftoolsMetadata) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::User)) }
    def banned_by; end

    sig { params(value: T.nilable(::User)).void }
    def banned_by=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_banned_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Profile) }
    def build_sponsorable_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def build_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_banned_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_banned_by!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_sponsorable!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Profile) }
    def create_sponsorable_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Profile) }
    def create_sponsorable_profile!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_sponsors_listing!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def reload_banned_by; end

    sig { returns(T.nilable(::User)) }
    def reload_sponsorable; end

    sig { returns(T.nilable(::Profile)) }
    def reload_sponsorable_profile; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def reload_sponsors_listing; end

    sig { returns(T.nilable(::User)) }
    def sponsorable; end

    sig { params(value: T.nilable(::User)).void }
    def sponsorable=(value); end

    # This method is created by ActiveRecord on the `SponsorsListingStafftoolsMetadata` class because it declared `has_many :sponsorable_non_fork_public_repositories`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def sponsorable_non_fork_public_repositories; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def sponsorable_non_fork_public_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsorable_non_fork_public_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsorable_non_fork_public_repository_ids=(ids); end

    sig { returns(T.nilable(::Profile)) }
    def sponsorable_profile; end

    sig { params(value: T.nilable(::Profile)).void }
    def sponsorable_profile=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsorable_received_abuse_report_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsorable_received_abuse_report_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListingStafftoolsMetadata` class because it declared `has_many :sponsorable_received_abuse_reports`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AbuseReport::PrivateCollectionProxy) }
    def sponsorable_received_abuse_reports; end

    sig { params(value: T::Enumerable[::AbuseReport]).void }
    def sponsorable_received_abuse_reports=(value); end

    sig { returns(T.nilable(::SponsorsListing)) }
    def sponsors_listing; end

    sig { params(value: T.nilable(::SponsorsListing)).void }
    def sponsors_listing=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ignored(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def newly_created_sponsorables(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_ignored(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_approval_requested_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_reviewed_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_user_creation_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uncustomized_github_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unsupported_time_zone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_time_zone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_time_zone_matching_country(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_public_non_fork_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_time_zone(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_banned_by; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorable; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorable_non_fork_public_repositories; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorable_profile; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorable_received_abuse_reports; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_listing; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def approval_requested_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def approval_requested_at=(value); end

    sig { returns(T::Boolean) }
    def approval_requested_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def approval_requested_at_before_last_save; end

    sig { returns(T.untyped) }
    def approval_requested_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def approval_requested_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def approval_requested_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def approval_requested_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def approval_requested_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def approval_requested_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def approval_requested_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def approval_requested_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def approval_requested_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def approval_requested_at_was; end

    sig { void }
    def approval_requested_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def banned_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def banned_at=(value); end

    sig { returns(T::Boolean) }
    def banned_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def banned_at_before_last_save; end

    sig { returns(T.untyped) }
    def banned_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def banned_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def banned_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def banned_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def banned_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def banned_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def banned_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def banned_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def banned_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def banned_at_was; end

    sig { void }
    def banned_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def banned_by_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def banned_by_id=(value); end

    sig { returns(T::Boolean) }
    def banned_by_id?; end

    sig { returns(T.nilable(::Integer)) }
    def banned_by_id_before_last_save; end

    sig { returns(T.untyped) }
    def banned_by_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def banned_by_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def banned_by_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def banned_by_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def banned_by_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def banned_by_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def banned_by_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def banned_by_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def banned_by_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def banned_by_id_was; end

    sig { void }
    def banned_by_id_will_change!; end

    sig { returns(T.untyped) }
    def banned_reason; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def banned_reason=(value); end

    sig { returns(T::Boolean) }
    def banned_reason?; end

    sig { returns(T.untyped) }
    def banned_reason_before_last_save; end

    sig { returns(T.untyped) }
    def banned_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def banned_reason_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def banned_reason_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def banned_reason_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def banned_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def banned_reason_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def banned_reason_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def banned_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def banned_reason_previously_was; end

    sig { returns(T.untyped) }
    def banned_reason_was; end

    sig { void }
    def banned_reason_will_change!; end

    sig { returns(T::Boolean) }
    def has_customized_user_profile; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_customized_user_profile=(value); end

    sig { returns(T::Boolean) }
    def has_customized_user_profile?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_customized_user_profile_before_last_save; end

    sig { returns(T.untyped) }
    def has_customized_user_profile_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_customized_user_profile_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_customized_user_profile_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_customized_user_profile_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_customized_user_profile_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_customized_user_profile_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_customized_user_profile_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_customized_user_profile_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_customized_user_profile_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_customized_user_profile_was; end

    sig { void }
    def has_customized_user_profile_will_change!; end

    sig { returns(T::Boolean) }
    def has_public_non_fork_repository; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_public_non_fork_repository=(value); end

    sig { returns(T::Boolean) }
    def has_public_non_fork_repository?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_public_non_fork_repository_before_last_save; end

    sig { returns(T.untyped) }
    def has_public_non_fork_repository_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_public_non_fork_repository_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_public_non_fork_repository_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_public_non_fork_repository_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_public_non_fork_repository_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_public_non_fork_repository_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_public_non_fork_repository_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_public_non_fork_repository_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_public_non_fork_repository_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_public_non_fork_repository_was; end

    sig { void }
    def has_public_non_fork_repository_will_change!; end

    sig { returns(T::Boolean) }
    def has_received_abuse_report; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_received_abuse_report=(value); end

    sig { returns(T::Boolean) }
    def has_received_abuse_report?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_received_abuse_report_before_last_save; end

    sig { returns(T.untyped) }
    def has_received_abuse_report_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_received_abuse_report_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_received_abuse_report_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_received_abuse_report_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_received_abuse_report_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_received_abuse_report_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_received_abuse_report_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_received_abuse_report_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_received_abuse_report_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_received_abuse_report_was; end

    sig { void }
    def has_received_abuse_report_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Boolean) }
    def ignored; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def ignored=(value); end

    sig { returns(T::Boolean) }
    def ignored?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def ignored_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def ignored_at=(value); end

    sig { returns(T::Boolean) }
    def ignored_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def ignored_at_before_last_save; end

    sig { returns(T.untyped) }
    def ignored_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def ignored_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def ignored_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def ignored_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def ignored_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def ignored_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def ignored_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def ignored_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def ignored_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def ignored_at_was; end

    sig { void }
    def ignored_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def ignored_before_last_save; end

    sig { returns(T.untyped) }
    def ignored_before_type_cast; end

    sig { returns(T::Boolean) }
    def ignored_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ignored_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ignored_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ignored_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ignored_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ignored_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ignored_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ignored_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def ignored_was; end

    sig { void }
    def ignored_will_change!; end

    sig { void }
    def restore_approval_requested_at!; end

    sig { void }
    def restore_banned_at!; end

    sig { void }
    def restore_banned_by_id!; end

    sig { void }
    def restore_banned_reason!; end

    sig { void }
    def restore_has_customized_user_profile!; end

    sig { void }
    def restore_has_public_non_fork_repository!; end

    sig { void }
    def restore_has_received_abuse_report!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_ignored!; end

    sig { void }
    def restore_ignored_at!; end

    sig { void }
    def restore_reviewed_at!; end

    sig { void }
    def restore_sponsorable_created_at!; end

    sig { void }
    def restore_sponsorable_id!; end

    sig { void }
    def restore_sponsorable_time_zone_name!; end

    sig { void }
    def restore_sponsors_listing_id!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reviewed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reviewed_at=(value); end

    sig { returns(T::Boolean) }
    def reviewed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reviewed_at_before_last_save; end

    sig { returns(T.untyped) }
    def reviewed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def reviewed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reviewed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reviewed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def reviewed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reviewed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reviewed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def reviewed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reviewed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reviewed_at_was; end

    sig { void }
    def reviewed_at_will_change!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_approval_requested_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_approval_requested_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_banned_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_banned_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_banned_by_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_banned_by_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_banned_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_banned_reason?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_customized_user_profile; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_customized_user_profile?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_public_non_fork_repository; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_public_non_fork_repository?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_received_abuse_report; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_received_abuse_report?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_ignored; end

    sig { returns(T::Boolean) }
    def saved_change_to_ignored?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_ignored_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_ignored_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_reviewed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_reviewed_at?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_sponsorable_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsorable_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sponsorable_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsorable_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_sponsorable_time_zone_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsorable_time_zone_name?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sponsors_listing_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsors_listing_id?; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def sponsorable_created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def sponsorable_created_at=(value); end

    sig { returns(T::Boolean) }
    def sponsorable_created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def sponsorable_created_at_before_last_save; end

    sig { returns(T.untyped) }
    def sponsorable_created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsorable_created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def sponsorable_created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def sponsorable_created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def sponsorable_created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def sponsorable_created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def sponsorable_created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def sponsorable_created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def sponsorable_created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def sponsorable_created_at_was; end

    sig { void }
    def sponsorable_created_at_will_change!; end

    sig { returns(::Integer) }
    def sponsorable_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sponsorable_id=(value); end

    sig { returns(T::Boolean) }
    def sponsorable_id?; end

    sig { returns(T.nilable(::Integer)) }
    def sponsorable_id_before_last_save; end

    sig { returns(T.untyped) }
    def sponsorable_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsorable_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsorable_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsorable_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsorable_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsorable_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsorable_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsorable_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsorable_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sponsorable_id_was; end

    sig { void }
    def sponsorable_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def sponsorable_time_zone_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def sponsorable_time_zone_name=(value); end

    sig { returns(T::Boolean) }
    def sponsorable_time_zone_name?; end

    sig { returns(T.nilable(::String)) }
    def sponsorable_time_zone_name_before_last_save; end

    sig { returns(T.untyped) }
    def sponsorable_time_zone_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsorable_time_zone_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sponsorable_time_zone_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sponsorable_time_zone_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def sponsorable_time_zone_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def sponsorable_time_zone_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sponsorable_time_zone_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def sponsorable_time_zone_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def sponsorable_time_zone_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def sponsorable_time_zone_name_was; end

    sig { void }
    def sponsorable_time_zone_name_will_change!; end

    sig { returns(::Integer) }
    def sponsors_listing_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sponsors_listing_id=(value); end

    sig { returns(T::Boolean) }
    def sponsors_listing_id?; end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id_before_last_save; end

    sig { returns(T.untyped) }
    def sponsors_listing_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsors_listing_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsors_listing_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsors_listing_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsors_listing_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsors_listing_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsors_listing_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id_was; end

    sig { void }
    def sponsors_listing_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_approval_requested_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_banned_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_banned_by_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_banned_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_customized_user_profile?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_public_non_fork_repository?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_received_abuse_report?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ignored?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ignored_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reviewed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsorable_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsorable_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsorable_time_zone_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsors_listing_id?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ignored(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def newly_created_sponsorables(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_ignored(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_approval_requested_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_reviewed_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_user_creation_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uncustomized_github_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unsupported_time_zone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_time_zone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_time_zone_matching_country(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_public_non_fork_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_time_zone(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::SponsorsListingStafftoolsMetadata } }

    sig { returns(T::Array[::SponsorsListingStafftoolsMetadata]) }
    def to_a; end

    sig { returns(T::Array[::SponsorsListingStafftoolsMetadata]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::SponsorsListingStafftoolsMetadata } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::SponsorsListingStafftoolsMetadata } }

    sig do
      params(
        records: T.any(::SponsorsListingStafftoolsMetadata, T::Enumerable[T.any(::SponsorsListingStafftoolsMetadata, T::Enumerable[::SponsorsListingStafftoolsMetadata])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::SponsorsListingStafftoolsMetadata, T::Enumerable[T.any(::SponsorsListingStafftoolsMetadata, T::Enumerable[::SponsorsListingStafftoolsMetadata])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::SponsorsListingStafftoolsMetadata, T::Enumerable[T.any(::SponsorsListingStafftoolsMetadata, T::Enumerable[::SponsorsListingStafftoolsMetadata])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::SponsorsListingStafftoolsMetadata]) }
    def load_target; end

    sig do
      params(
        records: T.any(::SponsorsListingStafftoolsMetadata, T::Enumerable[T.any(::SponsorsListingStafftoolsMetadata, T::Enumerable[::SponsorsListingStafftoolsMetadata])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::SponsorsListingStafftoolsMetadata, T::Enumerable[T.any(::SponsorsListingStafftoolsMetadata, T::Enumerable[::SponsorsListingStafftoolsMetadata])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::SponsorsListingStafftoolsMetadata, T::Enumerable[T.any(::SponsorsListingStafftoolsMetadata, T::Enumerable[::SponsorsListingStafftoolsMetadata])])
      ).returns(T::Array[::SponsorsListingStafftoolsMetadata])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::SponsorsListingStafftoolsMetadata]) }
    def target; end

    sig { returns(T::Array[::SponsorsListingStafftoolsMetadata]) }
    def to_a; end

    sig { returns(T::Array[::SponsorsListingStafftoolsMetadata]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::SponsorsListingStafftoolsMetadata } }

    sig { returns(T::Array[::SponsorsListingStafftoolsMetadata]) }
    def to_a; end

    sig { returns(T::Array[::SponsorsListingStafftoolsMetadata]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::SponsorsListingStafftoolsMetadata } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

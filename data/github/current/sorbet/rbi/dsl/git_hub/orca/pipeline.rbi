# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Orca::Pipeline`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Orca::Pipeline`.

class GitHub::Orca::Pipeline
  sig do
    params(
      completed_at: T.nilable(String),
      config_metadata: T.nilable(Google::Protobuf::Struct),
      created_at: T.nilable(String),
      id: T.nilable(String),
      organization: T.nilable(GitHub::Orca::Organization),
      request_actor: T.nilable(GitHub::Orca::Actor),
      request_source: T.nilable(String),
      started_at: T.nilable(String),
      status: T.nilable(T.any(Symbol, Integer)),
      status_string: T.nilable(String),
      training_inputs: T.nilable(GitHub::Orca::PipelineTrainingInputs)
    ).void
  end
  def initialize(completed_at: nil, config_metadata: nil, created_at: nil, id: nil, organization: nil, request_actor: nil, request_source: nil, started_at: nil, status: nil, status_string: nil, training_inputs: nil); end

  sig { void }
  def clear_completed_at; end

  sig { void }
  def clear_config_metadata; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_request_actor; end

  sig { void }
  def clear_request_source; end

  sig { void }
  def clear_started_at; end

  sig { void }
  def clear_status; end

  sig { void }
  def clear_status_string; end

  sig { void }
  def clear_training_inputs; end

  sig { returns(String) }
  def completed_at; end

  sig { params(value: String).void }
  def completed_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Struct)) }
  def config_metadata; end

  sig { params(value: T.nilable(Google::Protobuf::Struct)).void }
  def config_metadata=(value); end

  sig { returns(String) }
  def created_at; end

  sig { params(value: String).void }
  def created_at=(value); end

  sig { returns(String) }
  def id; end

  sig { params(value: String).void }
  def id=(value); end

  sig { returns(T.nilable(GitHub::Orca::Organization)) }
  def organization; end

  sig { params(value: T.nilable(GitHub::Orca::Organization)).void }
  def organization=(value); end

  sig { returns(T.nilable(GitHub::Orca::Actor)) }
  def request_actor; end

  sig { params(value: T.nilable(GitHub::Orca::Actor)).void }
  def request_actor=(value); end

  sig { returns(String) }
  def request_source; end

  sig { params(value: String).void }
  def request_source=(value); end

  sig { returns(String) }
  def started_at; end

  sig { params(value: String).void }
  def started_at=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end

  sig { returns(String) }
  def status_string; end

  sig { params(value: String).void }
  def status_string=(value); end

  sig { returns(T.nilable(GitHub::Orca::PipelineTrainingInputs)) }
  def training_inputs; end

  sig { params(value: T.nilable(GitHub::Orca::PipelineTrainingInputs)).void }
  def training_inputs=(value); end
end

# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: feature_management/feature_flags/data/v1/checks.proto
# typed: strict

class FeatureManagement::FeatureFlags::Data::V1::ListFeatureFlagsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V1::ListFeatureFlagsRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V1::ListFeatureFlagsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V1::ListFeatureFlagsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V1::ListFeatureFlagsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      names: T.nilable(T::Array[String]),
      owning_service: T.nilable(String)
    ).void
  end
  def initialize(
    names: [],
    owning_service: ""
  )
  end

  # names is a list of feature flag names.
  sig { returns(T::Array[String]) }
  def names
  end

  # names is a list of feature flag names.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def names=(value)
  end

  # names is a list of feature flag names.
  sig { void }
  def clear_names
  end

  # owning_service is the service name from the Service Catalog. This will be used to filter feature flags that are owned by provided service.
  sig { returns(String) }
  def owning_service
  end

  # owning_service is the service name from the Service Catalog. This will be used to filter feature flags that are owned by provided service.
  sig { params(value: String).void }
  def owning_service=(value)
  end

  # owning_service is the service name from the Service Catalog. This will be used to filter feature flags that are owned by provided service.
  sig { void }
  def clear_owning_service
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Data::V1::ListFeatureFlagsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V1::ListFeatureFlagsResponse) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V1::ListFeatureFlagsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V1::ListFeatureFlagsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V1::ListFeatureFlagsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      feature_flags: T.nilable(T::Array[T.nilable(FeatureManagement::FeatureFlags::Data::V1::FeatureFlag)])
    ).void
  end
  def initialize(
    feature_flags: []
  )
  end

  # features is a list of read optimized feature flag definitions.
  sig { returns(T::Array[T.nilable(FeatureManagement::FeatureFlags::Data::V1::FeatureFlag)]) }
  def feature_flags
  end

  # features is a list of read optimized feature flag definitions.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def feature_flags=(value)
  end

  # features is a list of read optimized feature flag definitions.
  sig { void }
  def clear_feature_flags
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Data::V1::CheckActorsOnSegmentRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V1::CheckActorsOnSegmentRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V1::CheckActorsOnSegmentRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V1::CheckActorsOnSegmentRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V1::CheckActorsOnSegmentRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      segment_name: T.nilable(String),
      actor_ids: T.nilable(T::Array[String])
    ).void
  end
  def initialize(
    segment_name: "",
    actor_ids: []
  )
  end

  # segment_name is the name of the segment.
  sig { returns(String) }
  def segment_name
  end

  # segment_name is the name of the segment.
  sig { params(value: String).void }
  def segment_name=(value)
  end

  # segment_name is the name of the segment.
  sig { void }
  def clear_segment_name
  end

  # actor_ids is a list of actor ids to fetch.
  sig { returns(T::Array[String]) }
  def actor_ids
  end

  # actor_ids is a list of actor ids to fetch.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def actor_ids=(value)
  end

  # actor_ids is a list of actor ids to fetch.
  sig { void }
  def clear_actor_ids
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Data::V1::CheckActorsOnSegmentResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V1::CheckActorsOnSegmentResponse) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V1::CheckActorsOnSegmentResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V1::CheckActorsOnSegmentResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V1::CheckActorsOnSegmentResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      actors: T.nilable(T::Array[T.nilable(FeatureManagement::FeatureFlags::Data::V1::Actor)])
    ).void
  end
  def initialize(
    actors: []
  )
  end

  # actors is a list of actors and its enabled value if actor is enabled for the feature flag.
  sig { returns(T::Array[T.nilable(FeatureManagement::FeatureFlags::Data::V1::Actor)]) }
  def actors
  end

  # actors is a list of actors and its enabled value if actor is enabled for the feature flag.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def actors=(value)
  end

  # actors is a list of actors and its enabled value if actor is enabled for the feature flag.
  sig { void }
  def clear_actors
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Data::V1::GetSegmentRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V1::GetSegmentRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V1::GetSegmentRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V1::GetSegmentRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V1::GetSegmentRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String)
    ).void
  end
  def initialize(
    name: ""
  )
  end

  # name is the name of the segment.
  sig { returns(String) }
  def name
  end

  # name is the name of the segment.
  sig { params(value: String).void }
  def name=(value)
  end

  # name is the name of the segment.
  sig { void }
  def clear_name
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::PullRequestMultilineSelect`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::PullRequestMultilineSelect`.

class Hydro::Schemas::Github::V1::PullRequestMultilineSelect
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      diff_type: T.nilable(T.any(Symbol, Integer)),
      ending_diff_position: T.nilable(String),
      line_count: T.nilable(Integer),
      pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      starting_diff_position: T.nilable(String),
      whitespace_ignored: T.nilable(T::Boolean)
    ).void
  end
  def initialize(actor: nil, diff_type: nil, ending_diff_position: nil, line_count: nil, pull_request: nil, repository: nil, starting_diff_position: nil, whitespace_ignored: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_diff_type; end

  sig { void }
  def clear_ending_diff_position; end

  sig { void }
  def clear_line_count; end

  sig { void }
  def clear_pull_request; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_starting_diff_position; end

  sig { void }
  def clear_whitespace_ignored; end

  sig { returns(T.any(Symbol, Integer)) }
  def diff_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def diff_type=(value); end

  sig { returns(String) }
  def ending_diff_position; end

  sig { params(value: String).void }
  def ending_diff_position=(value); end

  sig { returns(Integer) }
  def line_count; end

  sig { params(value: Integer).void }
  def line_count=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def pull_request=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(String) }
  def starting_diff_position; end

  sig { params(value: String).void }
  def starting_diff_position=(value); end

  sig { returns(T::Boolean) }
  def whitespace_ignored; end

  sig { params(value: T::Boolean).void }
  def whitespace_ignored=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MergeQueueEntry`.
# Please instead update this file by running `bin/tapioca dsl MergeQueueEntry`.

class MergeQueueEntry
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def states; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::MergeQueueEntry).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MergeQueueEntry).void)
      ).returns(::MergeQueueEntry)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MergeQueueEntry).void)
      ).returns(::MergeQueueEntry)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MergeQueueEntry).void)
      ).returns(::MergeQueueEntry)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MergeQueueEntry).void)
      ).returns(::MergeQueueEntry)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MergeQueueEntry).void)
      ).returns(::MergeQueueEntry)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::MergeQueueEntry]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::MergeQueueEntry)) }
    def fifth; end

    sig { returns(::MergeQueueEntry) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::MergeQueueEntry)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::MergeQueueEntry) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::MergeQueueEntry).void)
      ).returns(T.nilable(T::Enumerator[::MergeQueueEntry]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::MergeQueueEntry]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::MergeQueueEntry]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MergeQueueEntry).void)
      ).returns(::MergeQueueEntry)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MergeQueueEntry).void)
      ).returns(::MergeQueueEntry)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MergeQueueEntry).void)
      ).returns(::MergeQueueEntry)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::MergeQueueEntry)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::MergeQueueEntry) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::MergeQueueEntry) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::MergeQueueEntry) }
    def first!; end

    sig { returns(T.nilable(::MergeQueueEntry)) }
    def forty_two; end

    sig { returns(::MergeQueueEntry) }
    def forty_two!; end

    sig { returns(T.nilable(::MergeQueueEntry)) }
    def fourth; end

    sig { returns(::MergeQueueEntry) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::MergeQueueEntry) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::MergeQueueEntry).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MergeQueueEntry).void)
      ).returns(::MergeQueueEntry)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::MergeQueueEntry).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::MergeQueueEntry).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::MergeQueueEntry)) }
    def second; end

    sig { returns(::MergeQueueEntry) }
    def second!; end

    sig { returns(T.nilable(::MergeQueueEntry)) }
    def second_to_last; end

    sig { returns(::MergeQueueEntry) }
    def second_to_last!; end

    sig { returns(::MergeQueueEntry) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::MergeQueueEntry) }
    def take!; end

    sig { returns(T.nilable(::MergeQueueEntry)) }
    def third; end

    sig { returns(::MergeQueueEntry) }
    def third!; end

    sig { returns(T.nilable(::MergeQueueEntry)) }
    def third_to_last; end

    sig { returns(::MergeQueueEntry) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def awaiting_checks!; end

    sig { returns(T::Boolean) }
    def awaiting_checks?; end

    sig { void }
    def mergeable!; end

    sig { returns(T::Boolean) }
    def mergeable?; end

    sig { void }
    def queued!; end

    sig { returns(T::Boolean) }
    def queued?; end

    sig { void }
    def unmergeable!; end

    sig { returns(T::Boolean) }
    def unmergeable?; end

    sig { void }
    def waiting!; end

    sig { returns(T::Boolean) }
    def waiting?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::User)) }
    def author; end

    sig { params(value: T.nilable(::User)).void }
    def author=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_author(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RuleEngine::RuleSuite) }
    def build_enqueued_rule_suite(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_enqueuer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
    def build_pull_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MergeQueue) }
    def build_queue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MergeQueueEntryStat) }
    def build_stat(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_author(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_author!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RuleEngine::RuleSuite) }
    def create_enqueued_rule_suite(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RuleEngine::RuleSuite) }
    def create_enqueued_rule_suite!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_enqueuer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_enqueuer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
    def create_pull_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
    def create_pull_request!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MergeQueue) }
    def create_queue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MergeQueue) }
    def create_queue!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MergeQueueEntryStat) }
    def create_stat(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MergeQueueEntryStat) }
    def create_stat!(*args, &blk); end

    sig { returns(T.nilable(::RuleEngine::RuleSuite)) }
    def enqueued_rule_suite; end

    sig { params(value: T.nilable(::RuleEngine::RuleSuite)).void }
    def enqueued_rule_suite=(value); end

    sig { returns(T.nilable(::User)) }
    def enqueuer; end

    sig { params(value: T.nilable(::User)).void }
    def enqueuer=(value); end

    sig { returns(T.nilable(::PullRequest)) }
    def pull_request; end

    sig { params(value: T.nilable(::PullRequest)).void }
    def pull_request=(value); end

    sig { returns(T.nilable(::MergeQueue)) }
    def queue; end

    sig { params(value: T.nilable(::MergeQueue)).void }
    def queue=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_author; end

    sig { returns(T.nilable(::RuleEngine::RuleSuite)) }
    def reload_enqueued_rule_suite; end

    sig { returns(T.nilable(::User)) }
    def reload_enqueuer; end

    sig { returns(T.nilable(::PullRequest)) }
    def reload_pull_request; end

    sig { returns(T.nilable(::MergeQueue)) }
    def reload_queue; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::MergeQueueEntryStat)) }
    def reload_stat; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    sig { returns(T.nilable(::MergeQueueEntryStat)) }
    def stat; end

    sig { params(value: T.nilable(::MergeQueueEntryStat)).void }
    def stat=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def awaiting_checks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def locked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def mergeable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_awaiting_checks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_mergeable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_queued(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unmergeable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_waiting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def queued(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sorted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unmergeable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def waiting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_author; end

    sig { returns(Promise[T.untyped]) }
    def async_enqueued_rule_suite; end

    sig { returns(Promise[T.untyped]) }
    def async_enqueuer; end

    sig { returns(Promise[T.untyped]) }
    def async_pull_request; end

    sig { returns(Promise[T.untyped]) }
    def async_queue; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_stat; end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def attempts; end

    sig { params(value: ::Integer).returns(::Integer) }
    def attempts=(value); end

    sig { returns(T::Boolean) }
    def attempts?; end

    sig { returns(T.nilable(::Integer)) }
    def attempts_before_last_save; end

    sig { returns(T.untyped) }
    def attempts_before_type_cast; end

    sig { returns(T::Boolean) }
    def attempts_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def attempts_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def attempts_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def attempts_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def attempts_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def attempts_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def attempts_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def attempts_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def attempts_was; end

    sig { void }
    def attempts_will_change!; end

    sig { returns(::Integer) }
    def author_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def author_id=(value); end

    sig { returns(T::Boolean) }
    def author_id?; end

    sig { returns(T.nilable(::Integer)) }
    def author_id_before_last_save; end

    sig { returns(T.untyped) }
    def author_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def author_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def author_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def author_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def author_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def author_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def author_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def author_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def author_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def author_id_was; end

    sig { void }
    def author_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def base_sha; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def base_sha=(value); end

    sig { returns(T::Boolean) }
    def base_sha?; end

    sig { returns(T.nilable(::String)) }
    def base_sha_before_last_save; end

    sig { returns(T.untyped) }
    def base_sha_before_type_cast; end

    sig { returns(T::Boolean) }
    def base_sha_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def base_sha_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def base_sha_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def base_sha_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def base_sha_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def base_sha_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def base_sha_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def base_sha_previously_was; end

    sig { returns(T.nilable(::String)) }
    def base_sha_was; end

    sig { void }
    def base_sha_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def checks_requested_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def checks_requested_at=(value); end

    sig { returns(T::Boolean) }
    def checks_requested_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def checks_requested_at_before_last_save; end

    sig { returns(T.untyped) }
    def checks_requested_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def checks_requested_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def checks_requested_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def checks_requested_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def checks_requested_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def checks_requested_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def checks_requested_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def checks_requested_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def checks_requested_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def checks_requested_at_was; end

    sig { void }
    def checks_requested_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def dequeue_reason; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def dequeue_reason=(value); end

    sig { returns(T::Boolean) }
    def dequeue_reason?; end

    sig { returns(T.nilable(::Integer)) }
    def dequeue_reason_before_last_save; end

    sig { returns(T.untyped) }
    def dequeue_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def dequeue_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def dequeue_reason_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def dequeue_reason_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def dequeue_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def dequeue_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def dequeue_reason_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def dequeue_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def dequeue_reason_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def dequeue_reason_was; end

    sig { void }
    def dequeue_reason_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def enqueued_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def enqueued_at=(value); end

    sig { returns(T::Boolean) }
    def enqueued_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def enqueued_at_before_last_save; end

    sig { returns(T.untyped) }
    def enqueued_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def enqueued_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def enqueued_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def enqueued_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def enqueued_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def enqueued_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def enqueued_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def enqueued_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def enqueued_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def enqueued_at_was; end

    sig { void }
    def enqueued_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def enqueued_rule_suite_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def enqueued_rule_suite_id=(value); end

    sig { returns(T::Boolean) }
    def enqueued_rule_suite_id?; end

    sig { returns(T.nilable(::Integer)) }
    def enqueued_rule_suite_id_before_last_save; end

    sig { returns(T.untyped) }
    def enqueued_rule_suite_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def enqueued_rule_suite_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def enqueued_rule_suite_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def enqueued_rule_suite_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def enqueued_rule_suite_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def enqueued_rule_suite_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def enqueued_rule_suite_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def enqueued_rule_suite_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def enqueued_rule_suite_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def enqueued_rule_suite_id_was; end

    sig { void }
    def enqueued_rule_suite_id_will_change!; end

    sig { returns(::Integer) }
    def enqueuer_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def enqueuer_id=(value); end

    sig { returns(T::Boolean) }
    def enqueuer_id?; end

    sig { returns(T.nilable(::Integer)) }
    def enqueuer_id_before_last_save; end

    sig { returns(T.untyped) }
    def enqueuer_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def enqueuer_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def enqueuer_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def enqueuer_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def enqueuer_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def enqueuer_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def enqueuer_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def enqueuer_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def enqueuer_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def enqueuer_id_was; end

    sig { void }
    def enqueuer_id_will_change!; end

    sig { returns(T.untyped) }
    def head_ref; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def head_ref=(value); end

    sig { returns(T::Boolean) }
    def head_ref?; end

    sig { returns(T.untyped) }
    def head_ref_before_last_save; end

    sig { returns(T.untyped) }
    def head_ref_before_type_cast; end

    sig { returns(T::Boolean) }
    def head_ref_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def head_ref_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def head_ref_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def head_ref_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def head_ref_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def head_ref_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def head_ref_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def head_ref_previously_was; end

    sig { returns(T.untyped) }
    def head_ref_was; end

    sig { void }
    def head_ref_will_change!; end

    sig { returns(T.nilable(::String)) }
    def head_sha; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def head_sha=(value); end

    sig { returns(T::Boolean) }
    def head_sha?; end

    sig { returns(T.nilable(::String)) }
    def head_sha_before_last_save; end

    sig { returns(T.untyped) }
    def head_sha_before_type_cast; end

    sig { returns(T::Boolean) }
    def head_sha_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def head_sha_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def head_sha_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def head_sha_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def head_sha_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def head_sha_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def head_sha_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def head_sha_previously_was; end

    sig { returns(T.nilable(::String)) }
    def head_sha_was; end

    sig { void }
    def head_sha_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Boolean) }
    def jump_queue; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def jump_queue=(value); end

    sig { returns(T::Boolean) }
    def jump_queue?; end

    sig { returns(T.nilable(T::Boolean)) }
    def jump_queue_before_last_save; end

    sig { returns(T.untyped) }
    def jump_queue_before_type_cast; end

    sig { returns(T::Boolean) }
    def jump_queue_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def jump_queue_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def jump_queue_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def jump_queue_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def jump_queue_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def jump_queue_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def jump_queue_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def jump_queue_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def jump_queue_was; end

    sig { void }
    def jump_queue_will_change!; end

    sig { returns(T::Boolean) }
    def locked; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def locked=(value); end

    sig { returns(T::Boolean) }
    def locked?; end

    sig { returns(T.nilable(T::Boolean)) }
    def locked_before_last_save; end

    sig { returns(T.untyped) }
    def locked_before_type_cast; end

    sig { returns(T::Boolean) }
    def locked_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def locked_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def locked_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def locked_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def locked_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def locked_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def locked_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def locked_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def locked_was; end

    sig { void }
    def locked_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def merge_queue_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def merge_queue_id=(value); end

    sig { returns(T::Boolean) }
    def merge_queue_id?; end

    sig { returns(T.nilable(::Integer)) }
    def merge_queue_id_before_last_save; end

    sig { returns(T.untyped) }
    def merge_queue_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def merge_queue_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def merge_queue_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def merge_queue_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def merge_queue_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def merge_queue_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def merge_queue_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def merge_queue_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def merge_queue_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def merge_queue_id_was; end

    sig { void }
    def merge_queue_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def position; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def position=(value); end

    sig { returns(T::Boolean) }
    def position?; end

    sig { returns(T.nilable(::Integer)) }
    def position_before_last_save; end

    sig { returns(T.untyped) }
    def position_before_type_cast; end

    sig { returns(T::Boolean) }
    def position_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def position_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def position_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def position_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def position_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def position_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def position_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def position_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def position_was; end

    sig { void }
    def position_will_change!; end

    sig { returns(::Integer) }
    def pull_request_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def pull_request_id=(value); end

    sig { returns(T::Boolean) }
    def pull_request_id?; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id_before_last_save; end

    sig { returns(T.untyped) }
    def pull_request_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def pull_request_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pull_request_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pull_request_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pull_request_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pull_request_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pull_request_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id_was; end

    sig { void }
    def pull_request_id_will_change!; end

    sig { void }
    def restore_attempts!; end

    sig { void }
    def restore_author_id!; end

    sig { void }
    def restore_base_sha!; end

    sig { void }
    def restore_checks_requested_at!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_dequeue_reason!; end

    sig { void }
    def restore_enqueued_at!; end

    sig { void }
    def restore_enqueued_rule_suite_id!; end

    sig { void }
    def restore_enqueuer_id!; end

    sig { void }
    def restore_head_ref!; end

    sig { void }
    def restore_head_sha!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_jump_queue!; end

    sig { void }
    def restore_locked!; end

    sig { void }
    def restore_merge_queue_id!; end

    sig { void }
    def restore_position!; end

    sig { void }
    def restore_pull_request_id!; end

    sig { void }
    def restore_solo!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_attempts; end

    sig { returns(T::Boolean) }
    def saved_change_to_attempts?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_author_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_author_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_base_sha; end

    sig { returns(T::Boolean) }
    def saved_change_to_base_sha?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_checks_requested_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_checks_requested_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_dequeue_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_dequeue_reason?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_enqueued_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_enqueued_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_enqueued_rule_suite_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_enqueued_rule_suite_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_enqueuer_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_enqueuer_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_head_ref; end

    sig { returns(T::Boolean) }
    def saved_change_to_head_ref?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_head_sha; end

    sig { returns(T::Boolean) }
    def saved_change_to_head_sha?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_jump_queue; end

    sig { returns(T::Boolean) }
    def saved_change_to_jump_queue?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_locked; end

    sig { returns(T::Boolean) }
    def saved_change_to_locked?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_merge_queue_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_merge_queue_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_position; end

    sig { returns(T::Boolean) }
    def saved_change_to_position?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_pull_request_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_pull_request_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_solo; end

    sig { returns(T::Boolean) }
    def saved_change_to_solo?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def solo; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def solo=(value); end

    sig { returns(T::Boolean) }
    def solo?; end

    sig { returns(T.nilable(T::Boolean)) }
    def solo_before_last_save; end

    sig { returns(T.untyped) }
    def solo_before_type_cast; end

    sig { returns(T::Boolean) }
    def solo_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def solo_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def solo_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def solo_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def solo_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def solo_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def solo_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def solo_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def solo_was; end

    sig { void }
    def solo_will_change!; end

    sig { returns(::String) }
    def state; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_attempts?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_author_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_base_sha?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_checks_requested_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dequeue_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_enqueued_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_enqueued_rule_suite_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_enqueuer_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_head_ref?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_head_sha?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_jump_queue?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_locked?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_merge_queue_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_position?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pull_request_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_solo?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def awaiting_checks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def locked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def mergeable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_awaiting_checks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_mergeable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_queued(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unmergeable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_waiting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def queued(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sorted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unmergeable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def waiting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::MergeQueueEntry } }

    sig { returns(T::Array[::MergeQueueEntry]) }
    def to_a; end

    sig { returns(T::Array[::MergeQueueEntry]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::MergeQueueEntry } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::MergeQueueEntry } }

    sig do
      params(
        records: T.any(::MergeQueueEntry, T::Enumerable[T.any(::MergeQueueEntry, T::Enumerable[::MergeQueueEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::MergeQueueEntry, T::Enumerable[T.any(::MergeQueueEntry, T::Enumerable[::MergeQueueEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::MergeQueueEntry, T::Enumerable[T.any(::MergeQueueEntry, T::Enumerable[::MergeQueueEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::MergeQueueEntry]) }
    def load_target; end

    sig do
      params(
        records: T.any(::MergeQueueEntry, T::Enumerable[T.any(::MergeQueueEntry, T::Enumerable[::MergeQueueEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::MergeQueueEntry, T::Enumerable[T.any(::MergeQueueEntry, T::Enumerable[::MergeQueueEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::MergeQueueEntry, T::Enumerable[T.any(::MergeQueueEntry, T::Enumerable[::MergeQueueEntry])])
      ).returns(T::Array[::MergeQueueEntry])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::MergeQueueEntry]) }
    def target; end

    sig { returns(T::Array[::MergeQueueEntry]) }
    def to_a; end

    sig { returns(T::Array[::MergeQueueEntry]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::MergeQueueEntry } }

    sig { returns(T::Array[::MergeQueueEntry]) }
    def to_a; end

    sig { returns(T::Array[::MergeQueueEntry]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::MergeQueueEntry } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

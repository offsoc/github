<% page_info \
  :title => "#{project.owner} Project ##{project.number}"
%>

<%
  has_iteration_fields = project.memex_project_columns.iteration.any?
  elasticsearch_consistency = project.memex_project_elasticsearch_consistency
%>

<div>
  <%= render(Primer::Beta::BorderBox.new(mt: 0, padding: :condensed)) do |component| %>
    <% component.with_header do %>
      <%= render(Primer::Beta::Heading.new(tag: :h5)) { "Project metadata for \"#{project.name}\"" } %>
    <% end %>

    <% component.with_row do %>
      <%= render(Primer::Box.new(display: :flex)) do %>
        <%= render(Primer::Box.new(style: "flex: 1", font_weight: :bold)) { "Owner" } %>
        <%= render(Primer::Box.new(style: "flex: 2", word_break: :break_all)) do %>
          <%= link_to project.owner, stafftools_user_projects_path(project.owner) %>
        <% end %>
      <% end %>
    <% end %>

    <% component.with_row do %>
      <%= render(Primer::Box.new(display: :flex)) do %>
        <%= render(Primer::Box.new(style: "flex: 1", font_weight: :bold)) { "Project fields" } %>
        <%= render(Primer::Box.new(style: "flex: 2")) do %>
          <%= project.memex_project_columns.count %>
        <% end %>
      <% end %>
    <% end %>

    <% component.with_row do %>
      <%= render(Primer::Box.new(display: :flex)) do %>
        <%= render(Primer::Box.new(style: "flex: 1", font_weight: :bold)) { "Project items" } %>
        <%= render(Primer::Box.new(style: "flex: 2")) do %>
          <%= project.memex_project_items.not_archived.count %>
        <% end %>
      <% end %>
    <% end %>

    <% component.with_row do %>
      <%= render(Primer::Box.new(display: :flex)) do %>
        <%= render(Primer::Box.new(style: "flex: 1", font_weight: :bold)) { "Archived items" } %>
        <%= render(Primer::Box.new(style: "flex: 2")) do %>
          <%= project.memex_project_items.archived.count %>
        <% end %>
      <% end %>
    <% end %>

    <% component.with_row do %>
      <%= render(Primer::Box.new(display: :flex)) do %>
        <%= render(Primer::Box.new(style: "flex: 1", font_weight: :bold)) { "Elasticsearch data consistency" } %>
        <%= render(Primer::Box.new(style: "flex: 2")) do %>
          <% if elasticsearch_consistency.blank? %>
            <%= render(Primer::Beta::Text.new(tag: :span, color: :muted)) { "unknown" } %>
          <% else %>
            <%= render(Primer::Beta::Text.new(tag: :span, color: elasticsearch_consistency.consistent? ? :success : :danger)) { "#{elasticsearch_consistency.percentage}%" } %>
          <% end %>
        <% end %>
      <% end %>
    <% end %>

    <% component.with_row do %>
      <%= render(Primer::Box.new(display: :flex)) do %>
        <%= render(Primer::Box.new(style: "flex: 1", font_weight: :bold)) { "Consistency last evaluated at" } %>
        <%= render(Primer::Box.new(style: "flex: 2")) do %>
          <% if elasticsearch_consistency&.evaluated_at %>
            <%= render(Primer::Beta::Text.new(tag: :span)) { "#{elasticsearch_consistency.evaluated_at}" } %>
          <% end %>
        <% end %>
      <% end %>
    <% end %>

    <% component.with_row do %>
      <%= render(Primer::Box.new(display: :flex)) do %>
        <%= render(Primer::Box.new(style: "flex: 1", font_weight: :bold)) { "Elasticsearch repair logs" } %>
        <%= render(Primer::Box.new(style: "flex: 2")) do %>
          <% if splunk_url = elasticsearch_consistency&.splunk_repair_log_url %>
            <%= render(Primer::Beta::Link.new(href: splunk_url,  underline: false)) { "Splunk repair logs" } %>
          <% end %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
</div>

<div>
  <%= render(Primer::Beta::BorderBox.new(mt: 5, padding: :condensed)) do |component| %>
    <% component.with_header do %>
      <%= render(Primer::Beta::Heading.new(tag: :h5)) { "Project items by category" } %>
    <% end %>

    <% content_type.keys.each do |type| %>
      <% component.with_row do %>
        <%= render(Primer::Box.new(display: :flex)) do %>
          <%= render(Primer::Box.new(style: "flex: 1", font_weight: :bold)) { type.split(/(?=[A-Z])/).join(" ") } %>
          <%= render(Primer::Box.new(style: "flex: 2")) do %>
            <%= content_type[type] %>
          <% end %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
</div>

<%
  columns = project.attributes.keys.sort
  data = columns.sort.map { |column| [column, project.attributes[column]] }
%>

<%= render(Primer::Beta::BorderBox.new(mt: 5, padding: :condensed)) do |component| %>
  <% component.with_header do %>
    <%= render(Primer::Beta::Heading.new(tag: :h5)) { "Project record" } %>
  <% end %>
  <% data.each do |key, value| %>
    <% component.with_row do %>
      <%= render(Primer::Box.new(display: :flex)) do %>
        <%= render(Primer::Box.new(style: "flex: 1", font_weight: :bold)) { key } %>
        <%= render(Primer::Box.new(style: "flex: 2", word_break: :break_all)) do %>
          <% if value.nil? %>
          <em>nil</em>
          <% else %>
            <% if value.instance_of? String %>
              <%= scrubbed_utf8(value) %>
            <% else %>
              <%= value %>
            <% end %>
          <% end %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
<% end %>

<%= render(Primer::Beta::BorderBox.new(mt: 5)) do |component| %>
  <% component.with_header do %>
    <%= render(Primer::Beta::Heading.new(tag: :h5)) { "Actions" } %>
  <% end %>
  <% component.with_row do %>
    <div class="d-flex flex-items-center">
      <div class="col-9">
        <h4 class="mb-2">Normalize iterations fields</h4>

        <span class="d-block color-fg-muted">
          This action will update all iteration fields for the project to remove duplicated entries.
          This is recommended only if a user has reported duplicates of iterations being visible within a project.
        </span>

        <% unless has_iteration_fields %>
          <span class="d-block mt-2 color-fg-muted">
            <%= render(Primer::Beta::Octicon.new(icon: "circle-slash", color: :danger)) %>
            No iteration fields are present for this project.
          </span>
        <% end %>
      </div>
      <div class="col-3 d-flex flex-justify-end">
        <%= form_with url: stafftools_projects_beta_sync_iteration_fields_path(project), method: :patch do  %>
          <%= render(Primer::Beta::Button.new(type: :submit, disabled: !has_iteration_fields)) { "Normalize" } %>
        <% end %>
      </div>
    </div>
  <% end %>

  <% component.with_row do %>
    <div class="d-flex flex-items-center">
      <div class="col-9">
        <h4 class="mb-2">Rebalance project items</h4>

        <span class="d-block color-fg-muted">
          This action will enqueue a job to re-compute the priority of all project items.
          This may be required if a project item cannot be created or updated due to the <code>priority</code> values
          of other items being in an inconsistent state.
        </span>
      </div>
      <div class="col-3 d-flex flex-justify-end">
        <%= form_with url: stafftools_projects_beta_rebalance_items_path(project), method: :patch do  %>
          <%= render(Primer::Beta::Button.new(type: :submit)) { "Rebalance" } %>
        <% end %>
      </div>
    </div>
  <% end %>

  <% component.with_row do %>
    <div class="d-flex flex-items-center">
      <div class="col-9">
        <h4 class="mb-2">Rebalance project views</h4>

        <span class="d-block color-fg-muted">
          This action will enqueue a job to re-compute the priority of all project views.
          This may be required if a project view cannot be created or updated due to the <code>priority</code> values
          of other views being in an inconsistent state.
        </span>
      </div>
      <div class="col-3 d-flex flex-justify-end">
        <%= form_with url: stafftools_projects_beta_rebalance_views_path(project), method: :patch do  %>
          <%= render(Primer::Beta::Button.new(type: :submit)) { "Rebalance" } %>
        <% end %>
      </div>
    </div>
  <% end %>

  <% component.with_row do %>
    <div class="d-flex flex-items-center">
      <div class="col-9">
        <h4 class="mb-2">Reindex project items</h4>

        <span class="d-block color-fg-muted">
          This action will enqueue a job to reindex all memex project items in elastic search. This can also be
          used to index items for the first time after a project is added to the memex without limits alpha.
        </span>
      </div>
      <div class="col-3 d-flex flex-justify-end">
        <%= form_with url: stafftools_projects_beta_reindex_items_path(project), method: :patch do  %>
          <%= render(Primer::Beta::Button.new(type: :submit)) { "Reindex" } %>
        <% end %>
      </div>
    </div>
  <% end %>

  <% component.with_row do %>
    <div class="d-flex flex-items-center">
      <div class="col-9">
        <h4 class="mb-2">Synchronize project item issue data</h4>

        <span class="d-block color-fg-muted">
          This action will enqueue a job to synchronize issue state for all items in the project (i.e., denormalize).
          This is only recommended if a user has reported stale issue data being visible in a project for a long period of time.
        </span>
      </div>
      <div class="col-3 d-flex flex-justify-end">
        <%= form_with url: stafftools_projects_beta_sync_denormalized_data_path(project), method: :patch do  %>
          <%= render(Primer::Beta::Button.new(type: :submit)) { "Synchronize" } %>
        <% end %>
      </div>
    </div>
  <% end %>

  <% if GitHub.flipper[:tasklist_block].enabled?(project.owner) %>
    <% component.with_row do %>
      <div class="d-flex flex-items-center">
        <div class="col-9">
          <h4 class="mb-2">Synchronize project hierarchy</h4>

          <span class="d-block color-fg-muted">This action will enqueue a job to synchronize the relationship between project items in MySQL to the Cosmos DB backend.</span>
        </div>
        <div class="col-3 d-flex flex-justify-end">
          <%= form_with url: stafftools_projects_beta_sync_hierarchy_path(project), method: :patch do  %>
            <%= render(Primer::Beta::Button.new(type: :submit)) { "Synchronize" } %>
          <% end %>
        </div>
      </div>
    <% end %>
  <% end %>
<% end %>

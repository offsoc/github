{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_asn1_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/asn1.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nconst defaults = {\n  keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" +\n                  \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" +\n                  \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" +\n                  \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" +\n                  \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" +\n                  \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" +\n                  \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" +\n                  \" IMPLIED EXPORTS\"),\n  cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n  compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" +\n                      \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" +\n                      \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" +\n                      \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" +\n                      \" TEXTUAL-CONVENTION\"),\n  status: words(\"current deprecated mandatory obsolete\"),\n  tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" +\n              \" UNIVERSAL\"),\n  storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" +\n                 \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" +\n                 \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" +\n                 \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" +\n                 \" TruthValue RowStatus DisplayString GeneralString\" +\n                 \" GraphicString IA5String NumericString\" +\n                 \" PrintableString SnmpAdminString TeletexString\" +\n                 \" UTF8String VideotexString VisibleString StringStore\" +\n                 \" ISO646String T61String UniversalString Unsigned32\" +\n                 \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n  modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" +\n                  \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" +\n                  \" DEFINED\"),\n  accessTypes: words(\"not-accessible accessible-for-notify read-only\" +\n                     \" read-create read-write\"),\n  multiLineStrings: true\n}\n\nexport function asn1(parserConfig) {\n  var keywords = parserConfig.keywords || defaults.keywords,\n      cmipVerbs = parserConfig.cmipVerbs || defaults.cmipVerbs,\n      compareTypes = parserConfig.compareTypes || defaults.compareTypes,\n      status = parserConfig.status || defaults.status,\n      tags = parserConfig.tags || defaults.tags,\n      storage = parserConfig.storage || defaults.storage,\n      modifier = parserConfig.modifier || defaults.modifier,\n      accessTypes = parserConfig.accessTypes|| defaults.accessTypes,\n      multiLineStrings = parserConfig.multiLineStrings || defaults.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false;\n  var isOperatorChar = /[\\|\\^]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n      curPunc = ch;\n      return \"punctuation\";\n    }\n    if (ch == \"-\"){\n      if (stream.eat(\"-\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n\n    stream.eatWhile(/[\\w\\-]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (cmipVerbs.propertyIsEnumerable(cur)) return \"variableName\";\n    if (compareTypes.propertyIsEnumerable(cur)) return \"atom\";\n    if (status.propertyIsEnumerable(cur)) return \"comment\";\n    if (tags.propertyIsEnumerable(cur)) return \"typeName\";\n    if (storage.propertyIsEnumerable(cur)) return \"modifier\";\n    if (modifier.propertyIsEnumerable(cur)) return \"modifier\";\n    if (accessTypes.propertyIsEnumerable(cur)) return \"modifier\";\n\n    return \"variableName\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped){\n          var afterNext = stream.peek();\n          //look if the character if the quote is like the B in '10100010'B\n          if (afterNext){\n            afterNext = afterNext.toLowerCase();\n            if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n              stream.next();\n          }\n          end = true; break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\")\n      indent = state.context.indented;\n    return state.context = new Context(indent, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  //Interface\n  return {\n    name: \"asn1\",\n    startState: function() {\n      return {\n        tokenize: null,\n        context: new Context(-2, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n          && ctx.type == \"statement\"){\n        popContext(state);\n      }\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n                                     && curPunc != ';') || (ctx.type == \"statement\"\n                                                            && curPunc == \"newstatement\")))\n        pushContext(state, stream.column(), \"statement\");\n\n      state.startOfLine = false;\n      return style;\n    },\n\n    languageData: {\n      indentOnInput: /^\\s*[{}]$/,\n      commentTokens: {line: \"--\"}\n    }\n  };\n};\n"],"names":["words","str","obj","split","i","length","defaults","keywords","cmipVerbs","compareTypes","status","tags","storage","modifier","accessTypes","multiLineStrings","asn1","parserConfig","curPunc","indentStatements","isOperatorChar","Context","indented","column","type","align","prev","pushContext","state","col","indent","context","popContext","t","name","startState","tokenize","startOfLine","token","stream","ctx","sol","indentation","eatSpace","style","ch","next","escaped","end","afterNext","peek","toLowerCase","test","eat","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","languageData","indentOnInput","commentTokens","line"],"sourceRoot":""}
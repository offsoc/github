# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::Entities::ElasticsearchQuery`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::Entities::ElasticsearchQuery`.

class Hydro::Schemas::Github::V1::Entities::ElasticsearchQuery
  sig do
    params(
      body: T.nilable(String),
      doc_type: T.nilable(String),
      es_version: T.nilable(String),
      index: T.nilable(String),
      submitted_at: T.nilable(Google::Protobuf::Timestamp),
      target_headers: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      url: T.nilable(String)
    ).void
  end
  def initialize(body: nil, doc_type: nil, es_version: nil, index: nil, submitted_at: nil, target_headers: T.unsafe(nil), url: nil); end

  sig { returns(String) }
  def body; end

  sig { params(value: String).void }
  def body=(value); end

  sig { void }
  def clear_body; end

  sig { void }
  def clear_doc_type; end

  sig { void }
  def clear_es_version; end

  sig { void }
  def clear_index; end

  sig { void }
  def clear_submitted_at; end

  sig { void }
  def clear_target_headers; end

  sig { void }
  def clear_url; end

  sig { returns(String) }
  def doc_type; end

  sig { params(value: String).void }
  def doc_type=(value); end

  sig { returns(String) }
  def es_version; end

  sig { params(value: String).void }
  def es_version=(value); end

  sig { returns(String) }
  def index; end

  sig { params(value: String).void }
  def index=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def submitted_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def submitted_at=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def target_headers; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def target_headers=(value); end

  sig { returns(String) }
  def url; end

  sig { params(value: String).void }
  def url=(value); end
end

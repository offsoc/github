{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_sieve_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/sieve.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = words(\"if elsif else stop require\");\nvar atoms = words(\"true false not\");\n\nfunction tokenBase(stream, state) {\n\n  var ch = stream.next();\n  if (ch == \"/\" && stream.eat(\"*\")) {\n    state.tokenize = tokenCComment;\n    return tokenCComment(stream, state);\n  }\n\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch == \"\\\"\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (ch == \"(\") {\n    state._indent.push(\"(\");\n    // add virtual angel wings so that editor behaves...\n    // ...more sane incase of broken brackets\n    state._indent.push(\"{\");\n    return null;\n  }\n\n  if (ch === \"{\") {\n    state._indent.push(\"{\");\n    return null;\n  }\n\n  if (ch == \")\")  {\n    state._indent.pop();\n    state._indent.pop();\n  }\n\n  if (ch === \"}\") {\n    state._indent.pop();\n    return null;\n  }\n\n  if (ch == \",\")\n    return null;\n\n  if (ch == \";\")\n    return null;\n\n\n  if (/[{}\\(\\),;]/.test(ch))\n    return null;\n\n  // 1*DIGIT \"K\" / \"M\" / \"G\"\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\d]/);\n    stream.eat(/[KkMmGg]/);\n    return \"number\";\n  }\n\n  // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n  if (ch == \":\") {\n    stream.eatWhile(/[a-zA-Z_]/);\n    stream.eatWhile(/[a-zA-Z0-9_]/);\n\n    return \"operator\";\n  }\n\n  stream.eatWhile(/\\w/);\n  var cur = stream.current();\n\n  // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n  // *(multiline-literal / multiline-dotstart)\n  // \".\" CRLF\n  if ((cur == \"text\") && stream.eat(\":\"))\n  {\n    state.tokenize = tokenMultiLineString;\n    return \"string\";\n  }\n\n  if (keywords.propertyIsEnumerable(cur))\n    return \"keyword\";\n\n  if (atoms.propertyIsEnumerable(cur))\n    return \"atom\";\n\n  return null;\n}\n\nfunction tokenMultiLineString(stream, state)\n{\n  state._multiLineString = true;\n  // the first line is special it may contain a comment\n  if (!stream.sol()) {\n    stream.eatSpace();\n\n    if (stream.peek() == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    stream.skipToEnd();\n    return \"string\";\n  }\n\n  if ((stream.next() == \".\")  && (stream.eol()))\n  {\n    state._multiLineString = false;\n    state.tokenize = tokenBase;\n  }\n\n  return \"string\";\n}\n\nfunction tokenCComment(stream, state) {\n  var maybeEnd = false, ch;\n  while ((ch = stream.next()) != null) {\n    if (maybeEnd && ch == \"/\") {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped)\n        break;\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nexport const sieve = {\n  name: \"sieve\",\n  startState: function(base) {\n    return {tokenize: tokenBase,\n            baseIndent: base || 0,\n            _indent: []};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace())\n      return null;\n\n    return (state.tokenize || tokenBase)(stream, state);\n  },\n\n  indent: function(state, _textAfter, cx) {\n    var length = state._indent.length;\n    if (_textAfter && (_textAfter[0] == \"}\"))\n      length--;\n\n    if (length <0)\n      length = 0;\n\n    return length * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*\\}$/\n  }\n};\n"],"names":["words","str","obj","split","i","length","keywords","atoms","tokenBase","stream","state","ch","next","eat","tokenize","tokenCComment","skipToEnd","escaped","_indent","push","pop","test","eatWhile","cur","current","tokenMultiLineString","propertyIsEnumerable","_multiLineString","sol","eol","eatSpace","peek","maybeEnd","sieve","name","startState","base","baseIndent","token","indent","_textAfter","cx","unit","languageData","indentOnInput"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `expression_parser` gem.
# Please instead update this file by running `bin/tapioca gem expression_parser`.

# Taken from http://lukaszwrobel.pl/blog/math-parser-part-3-implementation
#
# source://expression_parser//lib/expression_parser/token.rb#2
module ExpressionParser; end

# source://expression_parser//lib/expression_parser/lexer.rb#4
class ExpressionParser::Lexer
  # @return [Lexer] a new instance of Lexer
  #
  # source://expression_parser//lib/expression_parser/lexer.rb#6
  def initialize(input); end

  # source://expression_parser//lib/expression_parser/lexer.rb#11
  def get_next_token; end

  # source://expression_parser//lib/expression_parser/lexer.rb#72
  def revert; end
end

# source://expression_parser//lib/expression_parser/parser.rb#4
class ExpressionParser::Parser
  # source://expression_parser//lib/expression_parser/parser.rb#5
  def parse(input); end

  protected

  # source://expression_parser//lib/expression_parser/parser.rb#33
  def expression; end

  # source://expression_parser//lib/expression_parser/parser.rb#55
  def factor; end

  # source://expression_parser//lib/expression_parser/parser.rb#79
  def number; end
end

# source://expression_parser//lib/expression_parser/token.rb#4
class ExpressionParser::Token
  # @return [Token] a new instance of Token
  #
  # source://expression_parser//lib/expression_parser/token.rb#28
  def initialize; end

  # Returns the value of attribute kind.
  #
  # source://expression_parser//lib/expression_parser/token.rb#25
  def kind; end

  # Sets the attribute kind
  #
  # @param value the value to set the attribute kind to.
  #
  # source://expression_parser//lib/expression_parser/token.rb#25
  def kind=(_arg0); end

  # @return [Boolean]
  #
  # source://expression_parser//lib/expression_parser/token.rb#33
  def unknown?; end

  # Returns the value of attribute value.
  #
  # source://expression_parser//lib/expression_parser/token.rb#26
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://expression_parser//lib/expression_parser/token.rb#26
  def value=(_arg0); end
end

# source://expression_parser//lib/expression_parser/token.rb#8
ExpressionParser::Token::Divide = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#23
ExpressionParser::Token::End = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#18
ExpressionParser::Token::Equal = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#16
ExpressionParser::Token::GThan = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#20
ExpressionParser::Token::GThanE = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#12
ExpressionParser::Token::LParen = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#17
ExpressionParser::Token::LThan = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#21
ExpressionParser::Token::LThanE = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#15
ExpressionParser::Token::MOD = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#6
ExpressionParser::Token::Minus = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#7
ExpressionParser::Token::Multiply = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#19
ExpressionParser::Token::NotEqual = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#10
ExpressionParser::Token::Number = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#5
ExpressionParser::Token::Plus = T.let(T.unsafe(nil), Integer)

# source://expression_parser//lib/expression_parser/token.rb#13
ExpressionParser::Token::RParen = T.let(T.unsafe(nil), Integer)

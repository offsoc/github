{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_ruby_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/ruby.js"],"sourcesContent":["function wordObj(words) {\n  var o = {};\n  for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n  return o;\n}\n\nvar keywordList = [\n  \"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\",\n  \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\",\n  \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\",\n  \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\",\n  \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\",\n  \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"\n], keywords = wordObj(keywordList);\n\nvar indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\",\n                           \"catch\", \"loop\", \"proc\", \"begin\"]);\nvar dedentWords = wordObj([\"end\", \"until\"]);\nvar opening = {\"[\": \"]\", \"{\": \"}\", \"(\": \")\"};\nvar closing = {\"]\": \"[\", \"}\": \"{\", \")\": \"(\"};\n\nvar curPunc;\n\nfunction chain(newtok, stream, state) {\n  state.tokenize.push(newtok);\n  return newtok(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n    state.tokenize.push(readBlockComment);\n    return \"comment\";\n  }\n  if (stream.eatSpace()) return null;\n  var ch = stream.next(), m;\n  if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n    return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n  } else if (ch == \"/\") {\n    if (regexpAhead(stream))\n      return chain(readQuoted(ch, \"string.special\", true), stream, state);\n    else\n      return \"operator\";\n  } else if (ch == \"%\") {\n    var style = \"string\", embed = true;\n    if (stream.eat(\"s\")) style = \"atom\";\n    else if (stream.eat(/[WQ]/)) style = \"string\";\n    else if (stream.eat(/[r]/)) style = \"string.special\";\n    else if (stream.eat(/[wxq]/)) { style = \"string\"; embed = false; }\n    var delim = stream.eat(/[^\\w\\s=]/);\n    if (!delim) return \"operator\";\n    if (opening.propertyIsEnumerable(delim)) delim = opening[delim];\n    return chain(readQuoted(delim, style, embed, true), stream, state);\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n    return chain(readHereDoc(m[2], m[1]), stream, state);\n  } else if (ch == \"0\") {\n    if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);\n    else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);\n    else stream.eatWhile(/[0-7]/);\n    return \"number\";\n  } else if (/\\d/.test(ch)) {\n    stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n    return \"number\";\n  } else if (ch == \"?\") {\n    while (stream.match(/^\\\\[CM]-/)) {}\n    if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);\n    else stream.next();\n    return \"string\";\n  } else if (ch == \":\") {\n    if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n    if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state);\n\n    // :> :>> :< :<< are valid symbols\n    if (stream.eat(/[\\<\\>]/)) {\n      stream.eat(/[\\<\\>]/);\n      return \"atom\";\n    }\n\n    // :+ :- :/ :* :| :& :! are valid symbols\n    if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n      return \"atom\";\n    }\n\n    // Symbols can't start by a digit\n    if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n      stream.eatWhile(/[\\w$\\xa1-\\uffff]/);\n      // Only one ? ! = is allowed and only as the last character\n      stream.eat(/[\\?\\!\\=]/);\n      return \"atom\";\n    }\n    return \"operator\";\n  } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n    stream.eat(\"@\");\n    stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n    return \"propertyName\";\n  } else if (ch == \"$\") {\n    if (stream.eat(/[a-zA-Z_]/)) {\n      stream.eatWhile(/[\\w]/);\n    } else if (stream.eat(/\\d/)) {\n      stream.eat(/\\d/);\n    } else {\n      stream.next(); // Must be a special global like $: or $!\n    }\n    return \"variableName.special\";\n  } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n    stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n    stream.eat(/[\\?\\!]/);\n    if (stream.eat(\":\")) return \"atom\";\n    return \"variable\";\n  } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n    curPunc = \"|\";\n    return null;\n  } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  } else if (ch == \"-\" && stream.eat(\">\")) {\n    return \"operator\";\n  } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n    var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n    if (ch == \".\" && !more) curPunc = \".\";\n    return \"operator\";\n  } else {\n    return null;\n  }\n}\n\nfunction regexpAhead(stream) {\n  var start = stream.pos, depth = 0, next, found = false, escaped = false\n  while ((next = stream.next()) != null) {\n    if (!escaped) {\n      if (\"[{(\".indexOf(next) > -1) {\n        depth++\n      } else if (\"]})\".indexOf(next) > -1) {\n        depth--\n        if (depth < 0) break\n      } else if (next == \"/\" && depth == 0) {\n        found = true\n        break\n      }\n      escaped = next == \"\\\\\"\n    } else {\n      escaped = false\n    }\n  }\n  stream.backUp(stream.pos - start)\n  return found\n}\n\nfunction tokenBaseUntilBrace(depth) {\n  if (!depth) depth = 1;\n  return function(stream, state) {\n    if (stream.peek() == \"}\") {\n      if (depth == 1) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length-1](stream, state);\n      } else {\n        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n      }\n    } else if (stream.peek() == \"{\") {\n      state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n    }\n    return tokenBase(stream, state);\n  };\n}\nfunction tokenBaseOnce() {\n  var alreadyCalled = false;\n  return function(stream, state) {\n    if (alreadyCalled) {\n      state.tokenize.pop();\n      return state.tokenize[state.tokenize.length-1](stream, state);\n    }\n    alreadyCalled = true;\n    return tokenBase(stream, state);\n  };\n}\nfunction readQuoted(quote, style, embed, unescaped) {\n  return function(stream, state) {\n    var escaped = false, ch;\n\n    if (state.context.type === 'read-quoted-paused') {\n      state.context = state.context.prev;\n      stream.eat(\"}\");\n    }\n\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && (unescaped || !escaped)) {\n        state.tokenize.pop();\n        break;\n      }\n      if (embed && ch == \"#\" && !escaped) {\n        if (stream.eat(\"{\")) {\n          if (quote == \"}\") {\n            state.context = {prev: state.context, type: 'read-quoted-paused'};\n          }\n          state.tokenize.push(tokenBaseUntilBrace());\n          break;\n        } else if (/[@\\$]/.test(stream.peek())) {\n          state.tokenize.push(tokenBaseOnce());\n          break;\n        }\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return style;\n  };\n}\nfunction readHereDoc(phrase, mayIndent) {\n  return function(stream, state) {\n    if (mayIndent) stream.eatSpace()\n    if (stream.match(phrase)) state.tokenize.pop();\n    else stream.skipToEnd();\n    return \"string\";\n  };\n}\nfunction readBlockComment(stream, state) {\n  if (stream.sol() && stream.match(\"=end\") && stream.eol())\n    state.tokenize.pop();\n  stream.skipToEnd();\n  return \"comment\";\n}\n\nexport const ruby = {\n  name: \"ruby\",\n  startState: function(indentUnit) {\n    return {tokenize: [tokenBase],\n            indented: 0,\n            context: {type: \"top\", indented: -indentUnit},\n            continuedLine: false,\n            lastTok: null,\n            varList: false};\n  },\n\n  token: function(stream, state) {\n    curPunc = null;\n    if (stream.sol()) state.indented = stream.indentation();\n    var style = state.tokenize[state.tokenize.length-1](stream, state), kwtype;\n    var thisTok = curPunc;\n    if (style == \"variable\") {\n      var word = stream.current();\n      style = state.lastTok == \".\" ? \"property\"\n        : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\"\n        : /^[A-Z]/.test(word) ? \"tag\"\n        : (state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList) ? \"def\"\n        : \"variable\";\n      if (style == \"keyword\") {\n        thisTok = word;\n        if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";\n        else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";\n        else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation())\n          kwtype = \"indent\";\n        else if (word == \"do\" && state.context.indented < state.indented)\n          kwtype = \"indent\";\n      }\n    }\n    if (curPunc || (style && style != \"comment\")) state.lastTok = thisTok;\n    if (curPunc == \"|\") state.varList = !state.varList;\n\n    if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc))\n      state.context = {prev: state.context, type: curPunc || style, indented: state.indented};\n    else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev)\n      state.context = state.context.prev;\n\n    if (stream.eol())\n      state.continuedLine = (curPunc == \"\\\\\" || style == \"operator\");\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize[state.tokenize.length-1] != tokenBase) return null;\n    var firstChar = textAfter && textAfter.charAt(0);\n    var ct = state.context;\n    var closed = ct.type == closing[firstChar] ||\n        ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n    return ct.indented + (closed ? 0 : cx.unit) +\n      (state.continuedLine ? cx.unit : 0);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n    commentTokens: {line: \"#\"},\n    autocomplete: keywordList\n  }\n};\n\n"],"names":["wordObj","words","o","i","e","length","curPunc","keywordList","keywords","indentWords","dedentWords","opening","closing","chain","newtok","stream","state","tokenize","push","tokenBase","sol","match","eol","readBlockComment","eatSpace","phrase","mayIndent","m","ch","next","readQuoted","regexpAhead","start","pos","depth","found","escaped","indexOf","backUp","style","embed","eat","delim","propertyIsEnumerable","skipToEnd","pop","eatWhile","test","varList","lastTok","more","quote","unescaped","context","type","prev","tokenBaseUntilBrace","peek","tokenBaseOnce","alreadyCalled","ruby","name","startState","indentUnit","indented","continuedLine","token","indentation","kwtype","thisTok","word","current","column","indent","textAfter","cx","firstChar","charAt","ct","closed","unit","languageData","indentOnInput","commentTokens","line","autocomplete"],"sourceRoot":""}
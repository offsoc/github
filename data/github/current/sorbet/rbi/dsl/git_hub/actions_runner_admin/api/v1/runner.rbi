# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::ActionsRunnerAdmin::Api::V1::Runner`.
# Please instead update this file by running `bin/tapioca dsl GitHub::ActionsRunnerAdmin::Api::V1::Runner`.

class GitHub::ActionsRunnerAdmin::Api::V1::Runner
  sig do
    params(
      arch: T.nilable(String),
      assigned_request: T.nilable(GitHub::ActionsRunnerAdmin::Api::V1::AssignedRequest),
      client_id: T.nilable(String),
      created: T.nilable(String),
      current_parallelism: T.nilable(Integer),
      ephemeral: T.nilable(T::Boolean),
      group_id: T.nilable(Integer),
      id: T.nilable(Integer),
      labels: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::ActionsRunnerAdmin::Api::V1::RunnerLabel], T::Array[GitHub::ActionsRunnerAdmin::Api::V1::RunnerLabel])),
      modified: T.nilable(String),
      name: T.nilable(String),
      os: T.nilable(String),
      owner_id: T.nilable(GitHub::ActionsRunnerAdmin::Entities::V1::Identity),
      runner_status: T.nilable(T.any(Symbol, Integer)),
      status: T.nilable(String),
      updates_disabled: T.nilable(T::Boolean),
      version: T.nilable(String)
    ).void
  end
  def initialize(arch: nil, assigned_request: nil, client_id: nil, created: nil, current_parallelism: nil, ephemeral: nil, group_id: nil, id: nil, labels: T.unsafe(nil), modified: nil, name: nil, os: nil, owner_id: nil, runner_status: nil, status: nil, updates_disabled: nil, version: nil); end

  sig { returns(String) }
  def arch; end

  sig { params(value: String).void }
  def arch=(value); end

  sig { returns(T.nilable(GitHub::ActionsRunnerAdmin::Api::V1::AssignedRequest)) }
  def assigned_request; end

  sig { params(value: T.nilable(GitHub::ActionsRunnerAdmin::Api::V1::AssignedRequest)).void }
  def assigned_request=(value); end

  sig { void }
  def clear_arch; end

  sig { void }
  def clear_assigned_request; end

  sig { void }
  def clear_client_id; end

  sig { void }
  def clear_created; end

  sig { void }
  def clear_current_parallelism; end

  sig { void }
  def clear_ephemeral; end

  sig { void }
  def clear_group_id; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_labels; end

  sig { void }
  def clear_modified; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_os; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_runner_status; end

  sig { void }
  def clear_status; end

  sig { void }
  def clear_updates_disabled; end

  sig { void }
  def clear_version; end

  sig { returns(String) }
  def client_id; end

  sig { params(value: String).void }
  def client_id=(value); end

  sig { returns(String) }
  def created; end

  sig { params(value: String).void }
  def created=(value); end

  sig { returns(Integer) }
  def current_parallelism; end

  sig { params(value: Integer).void }
  def current_parallelism=(value); end

  sig { returns(T::Boolean) }
  def ephemeral; end

  sig { params(value: T::Boolean).void }
  def ephemeral=(value); end

  sig { returns(Integer) }
  def group_id; end

  sig { params(value: Integer).void }
  def group_id=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::ActionsRunnerAdmin::Api::V1::RunnerLabel]) }
  def labels; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::ActionsRunnerAdmin::Api::V1::RunnerLabel]).void }
  def labels=(value); end

  sig { returns(String) }
  def modified; end

  sig { params(value: String).void }
  def modified=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(String) }
  def os; end

  sig { params(value: String).void }
  def os=(value); end

  sig { returns(T.nilable(GitHub::ActionsRunnerAdmin::Entities::V1::Identity)) }
  def owner_id; end

  sig { params(value: T.nilable(GitHub::ActionsRunnerAdmin::Entities::V1::Identity)).void }
  def owner_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def runner_status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def runner_status=(value); end

  sig { returns(String) }
  def status; end

  sig { params(value: String).void }
  def status=(value); end

  sig { returns(T::Boolean) }
  def updates_disabled; end

  sig { params(value: T::Boolean).void }
  def updates_disabled=(value); end

  sig { returns(String) }
  def version; end

  sig { params(value: String).void }
  def version=(value); end
end

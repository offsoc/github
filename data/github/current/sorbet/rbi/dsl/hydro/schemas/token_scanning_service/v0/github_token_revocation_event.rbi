# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::TokenScanningService::V0::GithubTokenRevocationEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::TokenScanningService::V0::GithubTokenRevocationEvent`.

class Hydro::Schemas::TokenScanningService::V0::GithubTokenRevocationEvent
  sig do
    params(
      commit_oid: T.nilable(String),
      repository_id: T.nilable(Integer),
      repository_type: T.nilable(T.any(Symbol, Integer)),
      token_hash: T.nilable(String),
      token_source: T.nilable(T.any(Symbol, Integer)),
      token_user_id: T.nilable(Integer),
      type: T.nilable(T.any(Symbol, Integer)),
      url: T.nilable(String)
    ).void
  end
  def initialize(commit_oid: nil, repository_id: nil, repository_type: nil, token_hash: nil, token_source: nil, token_user_id: nil, type: nil, url: nil); end

  sig { void }
  def clear_commit_oid; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_repository_type; end

  sig { void }
  def clear_token_hash; end

  sig { void }
  def clear_token_source; end

  sig { void }
  def clear_token_user_id; end

  sig { void }
  def clear_type; end

  sig { void }
  def clear_url; end

  sig { returns(String) }
  def commit_oid; end

  sig { params(value: String).void }
  def commit_oid=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def repository_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def repository_type=(value); end

  sig { returns(String) }
  def token_hash; end

  sig { params(value: String).void }
  def token_hash=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def token_source; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def token_source=(value); end

  sig { returns(Integer) }
  def token_user_id; end

  sig { params(value: Integer).void }
  def token_user_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def type=(value); end

  sig { returns(String) }
  def url; end

  sig { params(value: String).void }
  def url=(value); end
end

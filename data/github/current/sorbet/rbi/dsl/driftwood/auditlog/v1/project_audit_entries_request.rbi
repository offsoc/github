# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Driftwood::Auditlog::V1::ProjectAuditEntriesRequest`.
# Please instead update this file by running `bin/tapioca dsl Driftwood::Auditlog::V1::ProjectAuditEntriesRequest`.

class Driftwood::Auditlog::V1::ProjectAuditEntriesRequest
  sig do
    params(
      after: T.nilable(String),
      before: T.nilable(String),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      latest_allowed_entry_time: T.nilable(Google::Protobuf::Timestamp),
      per_page: T.nilable(Integer),
      project_id: T.nilable(Integer),
      region: T.nilable(Driftwood::Auditlog::V1::Region)
    ).void
  end
  def initialize(after: nil, before: nil, feature_flags: T.unsafe(nil), latest_allowed_entry_time: nil, per_page: nil, project_id: nil, region: nil); end

  sig { returns(String) }
  def after; end

  sig { params(value: String).void }
  def after=(value); end

  sig { returns(String) }
  def before; end

  sig { params(value: String).void }
  def before=(value); end

  sig { void }
  def clear_after; end

  sig { void }
  def clear_before; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_latest_allowed_entry_time; end

  sig { void }
  def clear_per_page; end

  sig { void }
  def clear_project_id; end

  sig { void }
  def clear_region; end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def latest_allowed_entry_time; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def latest_allowed_entry_time=(value); end

  sig { returns(Integer) }
  def per_page; end

  sig { params(value: Integer).void }
  def per_page=(value); end

  sig { returns(Integer) }
  def project_id; end

  sig { params(value: Integer).void }
  def project_id=(value); end

  sig { returns(T.nilable(Driftwood::Auditlog::V1::Region)) }
  def region; end

  sig { params(value: T.nilable(Driftwood::Auditlog::V1::Region)).void }
  def region=(value); end
end

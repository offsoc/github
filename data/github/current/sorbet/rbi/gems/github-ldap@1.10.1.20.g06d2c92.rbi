# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `github-ldap` gem.
# Please instead update this file by running `bin/tapioca gem github-ldap`.

# source://github-ldap//lib/github/ldap/filter.rb#1
module GitHub
  extend ::GitHub::Config::FirstPartyApps
  extend ::GitHub::Config::Metadata
  extend ::GitHub::Config::Datacenter
  extend ::GitHub::Config::ProximaSyncedThirdPartyApps
  extend ::GitHub::Config::Fastly
  extend ::GitHub::Config::Importers
  extend ::GitHub::Config::Kredz
  extend ::GitHub::Config::Varz
  extend ::GitHub::Config::Launch
  extend ::GitHub::Config::LegacyTextileFormatting
  extend ::GitHub::Config::Dreamlifter
  extend ::GitHub::Config::Migration
  extend ::GitHub::Config::Render
  extend ::GitHub::Config::Smtp
  extend ::GitHub::Config::Spokes
  extend ::GitHub::Config::Spokesd
  extend ::GitHub::Config::SupportLink
  extend ::GitHub::Config::Pages
  extend ::GitHub::Config::RequestLimits
  extend ::GitHub::Config::RateLimits
  extend ::GitHub::Config::OpenTelemetry
  extend ::GitHub::Config::HydroConfig
  extend ::GitHub::Config::Redis
  extend ::GitHub::Config::GroupSyncer
  extend ::GitHub::Config::Dependabot
  extend ::GitHub::Config::Twirp
  extend ::GitHub::Config::DriftwoodConfig
  extend ::GitHub::Config::PullRequests
  extend ::GitHub::Config::Repositories
  extend ::GitHub::Config::S3
  extend ::GitHub::Config::Registry
  extend ::GitHub::Config::SystemRoles
  extend ::GitHub::Config::Elasticsearch
  extend ::GitHub::Config::OpenApi
  extend ::GitHub::Config::AuditLogCuratorConfig
  extend ::GitHub::Config::AuditLog
  extend ::GitHub::Config::Billing
  extend ::GitHub::Config::AfterResponse
  extend ::GitHub::Config::Features
  extend ::GitHub::Config::ApiVersioning
  extend ::GitHub::Config::InsightsConfig
  extend ::GitHub::Config::HttpFluentbitConfig
  extend ::GitHub::Config::CodeScanning
  extend ::GitHub::Config::CodeQLVariantAnalysis
  extend ::GitHub::Config::OctoshiftStorage
  extend ::GitHub::Config::OIDCProviders
  extend ::GitHub::Config::BingIndexnow
  extend ::GitHub::Config::Chatops
  extend ::GitHub::Config::IssuesGraphApiConfig
  extend ::GitHub::Config::TimelineApiConfig
  extend ::GitHub::Config::Memex
  extend ::GitHub::Config::MergeQueue
  extend ::GitHub::Config::Codespaces
  extend ::GitHub::Config::Copilot
  extend ::GitHub::Config::Azure
  extend ::GitHub::Config::MultiTenantEnterprise
  extend ::GitHub::Config::NotebooksConfig
  extend ::GitHub::Config::ViewscreenConfig
  extend ::GitHub::Config::Freno
  extend ::GitHub::Config::ActionsResults
  extend ::GitHub::Config::Conduit
  extend ::GitHub::Config::ActionsBroker
  extend ::GitHub::Config::ActionsBrokerWorker
  extend ::GitHub::Config::ActionsRunnerAdmin
  extend ::GitHub::Config::ActionsRunService
  extend ::GitHub::Config::ActionsScaleUnitDomains
  extend ::GitHub::Config::Proxima
  extend ::GitHub::Config::ProximaLoginExperience
  extend ::GitHub::Config::GitSrcMigrator
  extend ::GitHub::Config::Projects
  extend ::GitHub::Config::EnterpriseAccounts
  extend ::GitHub::Config::Orca
  extend ::GitHub::Config::Orcid
  extend ::GitHub::Config::Context
  extend ::GitHub::Config
  extend ::GitHub::Version
  extend ::GitHub::Config::Stats

  class << self
    def after_response_middleware_enabled; end
    def after_response_middleware_enabled=(_arg0); end
    def after_response_middleware_enabled?; end
    def after_response_raise_on_exception; end
    def after_response_raise_on_exception=(_arg0); end
    def after_response_raise_on_exception?; end
    def robot?(useragent); end
  end
end

module GitHub::AppPartitioning; end
module GitHub::CSP; end
module GitHub::DataStructures; end

# source://github-ldap//lib/github/ldap/filter.rb#2
class GitHub::Ldap
  include ::GitHub::Ldap::Instrumentation
  extend ::Forwardable

  # Build a new GitHub::Ldap instance
  #
  # ## Connection
  #
  # host: required string ldap server host address
  # port: required string or number ldap server port
  # hosts: an enumerable of pairs of hosts and corresponding ports with
  #   which to attempt opening connections (default [[host, port]]). Overrides
  #   host and port if set.
  # encryption: optional string. `ssl` or `tls`. nil by default
  # tls_options: optional hash with TLS options for encrypted connections.
  #   Empty by default. See http://ruby-doc.org/stdlib/libdoc/openssl/rdoc/OpenSSL/SSL/SSLContext.html
  #   for available values
  # admin_user: optional string ldap administrator user dn for authentication
  # admin_password: optional string ldap administrator user password
  #
  # ## Behavior
  #
  # uid: optional field name used to authenticate users. Defaults to `sAMAccountName` (what ActiveDirectory uses)
  # virtual_attributes: optional. boolean true to use server's virtual attributes. Hash to specify custom mapping. Default false.
  # recursive_group_search_fallback: optional boolean whether membership checks should recurse into nested groups when virtual attributes aren't enabled. Default false.
  # posix_support: optional boolean `posixGroup` support. Default true.
  # search_domains: optional array of string bases to search through
  #
  # ## Diagnostics
  #
  # instrumentation_service: optional ActiveSupport::Notifications compatible object
  #
  # @return [Ldap] a new instance of Ldap
  #
  # source://github-ldap//lib/github/ldap.rb#86
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute admin_password.
  #
  # source://github-ldap//lib/github/ldap.rb#48
  def admin_password; end

  # Returns the value of attribute admin_user.
  #
  # source://github-ldap//lib/github/ldap.rb#48
  def admin_user; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def bind(*args, **_arg1, &block); end

  # Internal: Searches the host LDAP server's Root DSE for capabilities and
  # extensions.
  #
  # Returns a Net::LDAP::Entry object.
  #
  # source://github-ldap//lib/github/ldap.rb#226
  def capabilities; end

  # Internal - Determine whether to use encryption or not.
  #
  # encryption: is the encryption method, either 'ssl', 'tls', 'simple_tls' or 'start_tls'.
  # tls_options: is the options hash for tls encryption method
  #
  # Returns the real encryption type.
  #
  # source://github-ldap//lib/github/ldap.rb#245
  def check_encryption(encryption, tls_options = T.unsafe(nil)); end

  # Internal: Configure the member search strategy.
  #
  #
  # If no known strategy is provided, detects ActiveDirectory capabilities or
  # falls back to the Recursive strategy by default.
  #
  # Returns the selected strategy Class.
  #
  # source://github-ldap//lib/github/ldap.rb#341
  def configure_member_search_strategy(strategy = T.unsafe(nil)); end

  # Internal: Configure the membership validation strategy.
  #
  # If no known strategy is provided, detects ActiveDirectory capabilities or
  # falls back to the Recursive strategy by default.
  #
  # Returns the membership validator strategy Class.
  #
  # source://github-ldap//lib/github/ldap.rb#293
  def configure_membership_validation_strategy(strategy = T.unsafe(nil)); end

  # Internal: Configure the member search and membership validation strategies.
  #
  # TODO: Inline the logic in these two methods here.
  #
  # Returns nothing.
  #
  # source://github-ldap//lib/github/ldap.rb#279
  def configure_search_strategy(strategy = T.unsafe(nil)); end

  # Internal:  Set the user search strategy that will be used by
  #            Domain#user?.
  #
  # strategy - Can be either 'default' or 'global_catalog'.
  #            'default' strategy will search the configured
  #            domain controller with a search base relative
  #            to the controller's domain context.
  #            'global_catalog' will search the entire forest
  #            using Active Directory's Global Catalog
  #            functionality.
  #
  # source://github-ldap//lib/github/ldap.rb#322
  def configure_user_search_strategy(strategy); end

  # Internal - Configure virtual attributes for this server.
  # If the option is `true`, we'll use the default virual attributes.
  # If it's a Hash we'll map the attributes in the hash.
  #
  # attributes: is the option set when Ldap is initialized.
  #
  # Returns a VirtualAttributes.
  #
  # source://github-ldap//lib/github/ldap.rb#264
  def configure_virtual_attributes(attributes); end

  # Returns the value of attribute connection.
  #
  # source://github-ldap//lib/github/ldap.rb#48
  def connection; end

  # Public - Creates a new domain object to perform operations
  #
  # base_name: is the dn of the base root.
  #
  # Returns a new Domain object.
  #
  # source://github-ldap//lib/github/ldap.rb#167
  def domain(base_name); end

  # Public - Creates a new group object to perform operations
  #
  # base_name: is the dn of the base root.
  #
  # Returns a new Group object.
  # Returns nil if the dn is not in the server.
  #
  # source://github-ldap//lib/github/ldap.rb#177
  def group(base_name); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def host(*args, **_arg1, &block); end

  # Returns the value of attribute instrumentation_service.
  #
  # source://github-ldap//lib/github/ldap.rb#48
  def instrumentation_service; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def last_operation_result(*args, **_arg1, &block); end

  # Public - Create a new group object based on a Net::LDAP::Entry.
  #
  # group_entry: is a Net::LDAP::Entry.
  #
  # Returns a Group, PosixGroup or VirtualGroup object.
  #
  # source://github-ldap//lib/github/ldap.rb#189
  def load_group(group_entry); end

  # Returns the value of attribute member_search_strategy.
  #
  # source://github-ldap//lib/github/ldap.rb#48
  def member_search_strategy; end

  # Returns the value of attribute membership_validator.
  #
  # source://github-ldap//lib/github/ldap.rb#48
  def membership_validator; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def open(*args, **_arg1, &block); end

  # Returns the value of attribute port.
  #
  # source://github-ldap//lib/github/ldap.rb#48
  def port; end

  # Public - Whether membership checks should include posixGroup filter
  # conditions on `memberUid`. Configurable since some LDAP servers don't
  # handle unsupported attribute queries gracefully.
  #
  # Enable by passing :posix_support => true.
  #
  # Returns true, false, or nil (assumed false).
  #
  # @return [Boolean]
  #
  # source://github-ldap//lib/github/ldap.rb#148
  def posix_support_enabled?; end

  # Public - Whether membership checks should recurse into nested groups when
  # virtual attributes aren't enabled. The fallback search has poor
  # performance characteristics in some cases, in which case this should be
  # disabled by passing :recursive_group_search_fallback => false.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-ldap//lib/github/ldap.rb#137
  def recursive_group_search_fallback?; end

  # Public - Search entries in the ldap server.
  #
  # options: is a hash with the same options that Net::LDAP::Connection#search supports.
  # block: is an optional block to pass to the search.
  #
  # Returns an Array of Net::LDAP::Entry.
  #
  # source://github-ldap//lib/github/ldap.rb#205
  def search(options, &block); end

  # Returns the value of attribute search_domains.
  #
  # source://github-ldap//lib/github/ldap.rb#48
  def search_domains; end

  # Public - Utility method to check if the connection with the server can be stablished.
  # It tries to bind with the ldap auth default configuration.
  #
  # Returns an OpenStruct with `code` and `message`.
  # If `code` is 0, the operation succeeded and there is no message.
  #
  # source://github-ldap//lib/github/ldap.rb#157
  def test_connection; end

  # Returns the value of attribute uid.
  #
  # source://github-ldap//lib/github/ldap.rb#48
  def uid; end

  # Returns the value of attribute user_search_strategy.
  #
  # source://github-ldap//lib/github/ldap.rb#48
  def user_search_strategy; end

  # Returns the value of attribute virtual_attributes.
  #
  # source://github-ldap//lib/github/ldap.rb#48
  def virtual_attributes; end

  private

  # Internal: Detect whether the LDAP host is an ActiveDirectory server.
  #
  # See: http://msdn.microsoft.com/en-us/library/cc223359.aspx.
  #
  # Returns true if the host is an ActiveDirectory server, false otherwise.
  #
  # @return [Boolean]
  #
  # source://github-ldap//lib/github/ldap.rb#365
  def active_directory_capability?; end
end

# Internal: The capability required to use ActiveDirectory features.
# See: http://msdn.microsoft.com/en-us/library/cc223359.aspx.
#
# source://github-ldap//lib/github/ldap.rb#27
GitHub::Ldap::ACTIVE_DIRECTORY_V51_OID = T.let(T.unsafe(nil), String)

# A simple cache of GitHub::Ldap objects to prevent creating multiple
# instances of connections that point to the same URI/host.
#
# source://github-ldap//lib/github/ldap/connection_cache.rb#6
class GitHub::Ldap::ConnectionCache
  # source://github-ldap//lib/github/ldap/connection_cache.rb#20
  def get_connection(options); end

  class << self
    # Public - Create or return cached instance of GitHub::Ldap created with options,
    # where the cache key is the value of options[:host].
    #
    # options - Initialization attributes suitable for creating a new connection with
    # GitHub::Ldap.new(options)
    #
    # Returns true or false.
    #
    # source://github-ldap//lib/github/ldap/connection_cache.rb#15
    def get_connection(options = T.unsafe(nil)); end
  end
end

# A domain represents the base object for an ldap tree.
# It encapsulates the operations that you can perform against a tree, authenticating users, for instance.
#
# This makes possible to reuse a server connection to perform operations with two different domain bases.
#
# To get a domain, you'll need to create a `Ldap` object and then call the method `domain` with the name of the base.
#
# For example:
#
# domain = GitHub::Ldap.new(options).domain("dc=github,dc=com")
#
# source://github-ldap//lib/github/ldap/domain.rb#14
class GitHub::Ldap::Domain
  include ::GitHub::Ldap::Filter

  # @return [Domain] a new instance of Domain
  #
  # source://github-ldap//lib/github/ldap/domain.rb#17
  def initialize(ldap, base_name, uid); end

  # List all groups under this tree, including subgroups.
  #
  # Returns a list of ldap entries.
  #
  # source://github-ldap//lib/github/ldap/domain.rb#24
  def all_groups; end

  # Check if a user can be bound with a password.
  #
  # user: is a ldap entry representing the user.
  # password: is the user's password.
  #
  # Returns true if the user can be bound.
  #
  # source://github-ldap//lib/github/ldap/domain.rb#127
  def auth(user, password); end

  # Authenticate a user with the ldap server.
  #
  # login: is the user's login. This method doesn't accept email identifications.
  # password: is the user's password.
  # group_names: is an array of group CNs.
  #
  # Returns the user info if the credentials are valid and there are no groups configured.
  # Returns the user info if the credentials are valid and the user belongs to a configured group.
  # Returns nil if the credentials are invalid
  #
  # source://github-ldap//lib/github/ldap/domain.rb#140
  def authenticate!(login, password, group_names = T.unsafe(nil)); end

  # Get the entry for this domain.
  #
  # Returns a Net::LDAP::Entry
  #
  # source://github-ldap//lib/github/ldap/domain.rb#163
  def bind(options = T.unsafe(nil)); end

  # List all groups under this tree that match the query.
  #
  # query: is the partial name to filter for.
  # opts: additional options to filter with. It's specially recommended to restrict this search by size.
  # block: is an optional block to pass to the search.
  #
  # Returns a list of ldap entries.
  #
  # source://github-ldap//lib/github/ldap/domain.rb#35
  def filter_groups(query, opts = T.unsafe(nil), &block); end

  # List the groups in the ldap server that match the configured ones.
  #
  # group_names: is an array of group CNs.
  #
  # Returns a list of ldap entries for the configured groups.
  #
  # source://github-ldap//lib/github/ldap/domain.rb#44
  def groups(group_names); end

  # Check if the user is include in any of the configured groups.
  #
  # user_entry: is the entry for the user in the server.
  # group_names: is an array of group CNs.
  #
  # Returns true if the user belongs to any of the groups.
  # Returns false otherwise.
  #
  # @return [Boolean]
  #
  # source://github-ldap//lib/github/ldap/domain.rb#88
  def is_member?(user_entry, group_names); end

  # List the groups that a user is member of.
  #
  # user_entry: is the entry for the user in the server.
  # group_names: is an array of group CNs.
  #
  # Return an Array with the groups that the given user is member of that belong to the given group list.
  #
  # source://github-ldap//lib/github/ldap/domain.rb#54
  def membership(user_entry, group_names); end

  # Search entries using this domain as base.
  #
  # options: is a Hash with the options for the search. The base option is always overriden.
  # block: is an optional block to pass to the search.
  #
  # Returns an array with the entries found.
  #
  # source://github-ldap//lib/github/ldap/domain.rb#152
  def search(options, &block); end

  # Check if a user exists based in the `uid`.
  #
  # login: is the user's login
  # search_options: Net::LDAP#search compatible options to pass through
  #
  # Returns the user if the login matches any `uid`.
  # Returns nil if there are no matches.
  #
  # @return [Boolean]
  #
  # source://github-ldap//lib/github/ldap/domain.rb#117
  def user?(login, search_options = T.unsafe(nil)); end

  # Check if the user credentials are valid.
  #
  # login: is the user's login.
  # password: is the user's password.
  #
  # Returns a Ldap::Entry if the credentials are valid.
  # Returns nil if the credentials are invalid.
  #
  # @return [Boolean]
  #
  # source://github-ldap//lib/github/ldap/domain.rb#104
  def valid_login?(login, password); end
end

# source://github-ldap//lib/github/ldap/filter.rb#3
module GitHub::Ldap::Filter
  # Filter to get all the members of a group which uid is included in `memberUid`.
  #
  # uids: is an array with all the uids to search.
  # uid_attr: is the names of the uid attribute in the directory.
  #
  # Returns a Net::LDAP::Filter
  #
  # source://github-ldap//lib/github/ldap/filter.rb#106
  def all_members_by_uid(uids, uid_attr); end

  # Filter groups that match a query cn.
  #
  # query: is a string to match the cn with.
  #
  # Returns a Net::LDAP::Filter.
  #
  # source://github-ldap//lib/github/ldap/filter.rb#76
  def group_contains_filter(query); end

  # Filter to get the configured groups in the ldap server.
  # Takes the list of the group names and generate a filter for the groups
  # with cn that match.
  #
  # group_names: is an array of group CNs.
  #
  # Returns a Net::LDAP::Filter.
  #
  # source://github-ldap//lib/github/ldap/filter.rb#18
  def group_filter(group_names); end

  # Filter to map a uid with a login.
  # It escapes the login before creating the filter.
  #
  # uid: the entry field to map.
  # login: the login to map.
  #
  # Returns a Net::LDAP::Filter.
  #
  # source://github-ldap//lib/github/ldap/filter.rb#67
  def login_filter(uid, login); end

  # Filter to check group membership.
  #
  # entry: finds groups this entry is a member of (optional)
  #        Expects a Net::LDAP::Entry or String DN.
  #
  # Returns a Net::LDAP::Filter.
  #
  # source://github-ldap//lib/github/ldap/filter.rb#28
  def member_filter(entry = T.unsafe(nil)); end

  # Filter to get all the members of a group using the virtual attribute `memberOf`.
  #
  # group_dn: is the group dn to look members for.
  # attr: is the membership attribute.
  #
  # Returns a Net::LDAP::Filter
  #
  # source://github-ldap//lib/github/ldap/filter.rb#86
  def members_of_group(group_dn, attr = T.unsafe(nil)); end

  # Filter to check group membership for posixGroups.
  #
  # Used by Domain#membership when posix_support_enabled? is true.
  #
  # entry:    finds groups this Net::LDAP::Entry is a member of
  # uid_attr: specifies the memberUid attribute to match with
  #
  # Returns a Net::LDAP::Filter or nil if no entry has no UID set.
  #
  # source://github-ldap//lib/github/ldap/filter.rb#47
  def posix_member_filter(entry_or_uid, uid_attr = T.unsafe(nil)); end

  # Filter to get all the members of a group that are groups using the virtual attribute `memberOf`.
  #
  # group_dn: is the group dn to look members for.
  # attr: is the membership attribute.
  #
  # Returns a Net::LDAP::Filter
  #
  # source://github-ldap//lib/github/ldap/filter.rb#96
  def subgroups_of_group(group_dn, attr = T.unsafe(nil)); end
end

# source://github-ldap//lib/github/ldap/filter.rb#4
GitHub::Ldap::Filter::ALL_GROUPS_FILTER = T.let(T.unsafe(nil), Net::LDAP::Filter)

# source://github-ldap//lib/github/ldap/filter.rb#9
GitHub::Ldap::Filter::MEMBERSHIP_NAMES = T.let(T.unsafe(nil), Array)

# This class represents an LDAP group.
# It encapsulates operations that you can perform against a group, like retrieving its members.
#
# To get a group, you'll need to create a `Ldap` object and then call the method `group` with the name of its base.
#
# For example:
#
# domain = GitHub::Ldap.new(options).group("cn=enterprise,dc=github,dc=com")
#
# source://github-ldap//lib/github/ldap/group.rb#12
class GitHub::Ldap::Group
  include ::GitHub::Ldap::Filter

  # @return [Group] a new instance of Group
  #
  # source://github-ldap//lib/github/ldap/group.rb#19
  def initialize(ldap, entry); end

  # Returns the value of attribute entry.
  #
  # source://github-ldap//lib/github/ldap/group.rb#17
  def entry; end

  # Internal: Returns true if the object class(es) provided match a group's.
  #
  # @return [Boolean]
  #
  # source://github-ldap//lib/github/ldap/group.rb#73
  def group?(object_class); end

  # Internal - Inspect the ldap server searching for group and member entries.
  #
  # Returns two arrays, the first one with subgroups and the second one with users.
  #
  # source://github-ldap//lib/github/ldap/group.rb#127
  def group_and_member_entries; end

  # Internal - Divide members of a group in user and subgroups.
  #
  # Returns two arrays, the first one with subgroups and the second one with users.
  #
  # source://github-ldap//lib/github/ldap/group.rb#120
  def groups_and_members; end

  # Public - Check if a user dn is included in the members of this group and its subgroups.
  #
  # user_entry: is the user entry to check the membership.
  #
  # Returns true if the dn is in the list of members.
  #
  # @return [Boolean]
  #
  # source://github-ldap//lib/github/ldap/group.rb#47
  def is_member?(user_entry); end

  # Returns the value of attribute ldap.
  #
  # source://github-ldap//lib/github/ldap/group.rb#17
  def ldap; end

  # Internal - Generate a hash with all the group DNs for caching purposes.
  #
  # groups: is an array of group entries.
  #
  # Returns a hash with the cache groups.
  #
  # source://github-ldap//lib/github/ldap/group.rb#93
  def load_cache(groups); end

  # Internal - Iterate over a collection of groups recursively.
  # Remove groups already inspected before iterating over subgroups.
  #
  # groups: is an array of group entries.
  # cache: is a hash where the keys are group dns.
  # block: is a block to call with the groups and members of subgroups.
  #
  # Returns nothing.
  #
  # source://github-ldap//lib/github/ldap/group.rb#105
  def loop_cached_groups(groups, cache, &block); end

  # Internal - Get all the member entries for a group.
  #
  # Returns an array of Net::LDAP::Entry.
  #
  # source://github-ldap//lib/github/ldap/group.rb#56
  def member_entries; end

  # Internal - Get all the names under `member` and `uniqueMember`.
  #
  # Returns an array with all the DN members.
  #
  # source://github-ldap//lib/github/ldap/group.rb#66
  def member_names; end

  # Public - Get all members that belong to a group.
  # This list also includes the members of subgroups.
  #
  # Returns an array with all the member entries.
  #
  # source://github-ldap//lib/github/ldap/group.rb#27
  def members; end

  # Public - Get all the subgroups from a group recursively.
  #
  # Returns an array with all the subgroup entries.
  #
  # source://github-ldap//lib/github/ldap/group.rb#36
  def subgroups; end

  class << self
    # Internal - Check if an object class includes the member names
    # Use `&` rathen than `include?` because both are arrays.
    #
    # NOTE: object classes are downcased by default in Net::LDAP, so this
    # will fail to match correctly unless we also downcase our group classes.
    #
    # Returns true if the object class includes one of the group class names.
    #
    # @return [Boolean]
    #
    # source://github-ldap//lib/github/ldap/group.rb#84
    def group?(object_class); end
  end
end

# source://github-ldap//lib/github/ldap/group.rb#15
GitHub::Ldap::Group::GROUP_CLASS_NAMES = T.let(T.unsafe(nil), Array)

# Encapsulates common instrumentation behavior.
#
# source://github-ldap//lib/github/ldap/instrumentation.rb#4
module GitHub::Ldap::Instrumentation
  private

  # Internal: Instrument a block with the defined instrumentation service.
  #
  # Yields the event payload if a block is given.
  #
  # Skips instrumentation if no service is set.
  #
  # Returns the return value of the block.
  #
  # source://github-ldap//lib/github/ldap/instrumentation.rb#15
  def instrument(event, payload = T.unsafe(nil)); end

  # Returns the value of attribute instrumentation_service.
  #
  # source://github-ldap//lib/github/ldap/instrumentation.rb#5
  def instrumentation_service; end
end

# source://github-ldap//lib/github/ldap/member_search/base.rb#3
module GitHub::Ldap::MemberSearch; end

# Look up group members using the ActiveDirectory "in chain" matching rule.
#
# The 1.2.840.113556.1.4.1941 matching rule (LDAP_MATCHING_RULE_IN_CHAIN)
# "walks the chain of ancestry in objects all the way to the root until
# it finds a match".
# Source: http://msdn.microsoft.com/en-us/library/aa746475(v=vs.85).aspx
#
# This means we have an efficient method of searching for group members,
# even in nested groups, performed on the server side.
#
# source://github-ldap//lib/github/ldap/member_search/active_directory.rb#13
class GitHub::Ldap::MemberSearch::ActiveDirectory < ::GitHub::Ldap::MemberSearch::Base
  # Public: Instantiate new search strategy.
  #
  # - ldap:    GitHub::Ldap object
  # - options: Hash of options
  #
  # NOTE: This overrides default behavior to configure attrs`.
  #
  # @return [ActiveDirectory] a new instance of ActiveDirectory
  #
  # source://github-ldap//lib/github/ldap/member_search/active_directory.rb#30
  def initialize(ldap, options = T.unsafe(nil)); end

  # Internal: The attributes to search for.
  #
  # source://github-ldap//lib/github/ldap/member_search/active_directory.rb#22
  def attrs; end

  # Internal: Constructs a member filter using the "in chain"
  # extended matching rule afforded by ActiveDirectory.
  #
  # Returns a Net::LDAP::Filter object.
  #
  # source://github-ldap//lib/github/ldap/member_search/active_directory.rb#54
  def member_of_in_chain_filter(entry); end

  # Public: Performs search for group members, including groups and
  # members of subgroups, using ActiveDirectory's "in chain" matching
  # rule.
  #
  # Returns Array of Net::LDAP::Entry objects.
  #
  # source://github-ldap//lib/github/ldap/member_search/active_directory.rb#40
  def perform(group); end
end

# Internal: The default attributes to query for.
# NOTE: We technically don't need any by default, but if we left this
# empty, we'd be querying for *all* attributes which is less ideal.
#
# source://github-ldap//lib/github/ldap/member_search/active_directory.rb#19
GitHub::Ldap::MemberSearch::ActiveDirectory::DEFAULT_ATTRS = T.let(T.unsafe(nil), Array)

# source://github-ldap//lib/github/ldap/member_search/active_directory.rb#14
GitHub::Ldap::MemberSearch::ActiveDirectory::OID = T.let(T.unsafe(nil), String)

# source://github-ldap//lib/github/ldap/member_search/base.rb#4
class GitHub::Ldap::MemberSearch::Base
  # Public: Instantiate new search strategy.
  #
  # - ldap:    GitHub::Ldap object
  # - options: Hash of options
  #
  # @return [Base] a new instance of Base
  #
  # source://github-ldap//lib/github/ldap/member_search/base.rb#13
  def initialize(ldap, options = T.unsafe(nil)); end

  # Internal: The GitHub::Ldap object to search domains with.
  #
  # source://github-ldap//lib/github/ldap/member_search/base.rb#7
  def ldap; end

  private

  # Internal: Domains to search through.
  #
  # Returns an Array of GitHub::Ldap::Domain objects.
  #
  # source://github-ldap//lib/github/ldap/member_search/base.rb#27
  def domains; end
end

# Look up group members using the existing `Group#members` and
# `Group#subgroups` API.
#
# source://github-ldap//lib/github/ldap/member_search/classic.rb#6
class GitHub::Ldap::MemberSearch::Classic < ::GitHub::Ldap::MemberSearch::Base
  # Public: Performs search for group members, including groups and
  # members of subgroups recursively.
  #
  # Returns Array of Net::LDAP::Entry objects.
  #
  # source://github-ldap//lib/github/ldap/member_search/classic.rb#11
  def perform(group_entry); end
end

# Look up group members recursively.
#
# This results in a maximum of `depth` iterations/recursions to look up
# members of a group and its subgroups.
#
# source://github-ldap//lib/github/ldap/member_search/recursive.rb#8
class GitHub::Ldap::MemberSearch::Recursive < ::GitHub::Ldap::MemberSearch::Base
  include ::GitHub::Ldap::Filter

  # Public: Instantiate new search strategy.
  #
  # - ldap:    GitHub::Ldap object
  # - options: Hash of options
  #
  # NOTE: This overrides default behavior to configure `depth` and `attrs`.
  #
  # @return [Recursive] a new instance of Recursive
  #
  # source://github-ldap//lib/github/ldap/member_search/recursive.rb#26
  def initialize(ldap, options = T.unsafe(nil)); end

  # Internal: The attributes to search for.
  #
  # source://github-ldap//lib/github/ldap/member_search/recursive.rb#18
  def attrs; end

  # Internal: The maximum depth to search for members.
  #
  # source://github-ldap//lib/github/ldap/member_search/recursive.rb#15
  def depth; end

  # Public: Performs search for group members, including groups and
  # members of subgroups recursively.
  #
  # Returns Array of Net::LDAP::Entry objects.
  #
  # source://github-ldap//lib/github/ldap/member_search/recursive.rb#36
  def perform(group); end

  private

  # Internal: Fetch entries by UID.
  #
  # Returns an Array of Net::LDAP::Entry objects.
  #
  # source://github-ldap//lib/github/ldap/member_search/recursive.rb#133
  def entries_by_uid(members); end

  # Internal: Search for Groups by DN.
  #
  # Given a Distinguished Name (DN) String value, find the Group entry
  # that matches it. The DN may map to a `person` entry, but we want to
  # filter those out.
  #
  # This will find zero or one entry most of the time, but it's not
  # guaranteed so we account for the possibility of more.
  #
  # This method is intended to be used with `Array#concat` by the caller.
  #
  # Returns an Array of zero or more Net::LDAP::Entry objects.
  #
  # source://github-ldap//lib/github/ldap/member_search/recursive.rb#121
  def find_groups_by_dn(dn); end

  # Internal: Returns an Array of String DNs for `groupOfNames` and
  # `uniqueGroupOfNames` members.
  #
  # source://github-ldap//lib/github/ldap/member_search/recursive.rb#143
  def member_dns(entry); end

  # Internal: Returns an Array of String UIDs for PosixGroups members.
  #
  # source://github-ldap//lib/github/ldap/member_search/recursive.rb#151
  def member_uids(entry); end
end

# source://github-ldap//lib/github/ldap/member_search/recursive.rb#12
GitHub::Ldap::MemberSearch::Recursive::DEFAULT_ATTRS = T.let(T.unsafe(nil), Array)

# source://github-ldap//lib/github/ldap/member_search/recursive.rb#11
GitHub::Ldap::MemberSearch::Recursive::DEFAULT_MAX_DEPTH = T.let(T.unsafe(nil), Integer)

# source://github-ldap//lib/github/ldap/membership_validators/base.rb#3
module GitHub::Ldap::MembershipValidators; end

# source://github-ldap//lib/github/ldap/membership_validators/active_directory.rb#4
GitHub::Ldap::MembershipValidators::ATTRS = T.let(T.unsafe(nil), Array)

# Validates membership using the ActiveDirectory "in chain" matching rule.
#
# The 1.2.840.113556.1.4.1941 matching rule (LDAP_MATCHING_RULE_IN_CHAIN)
# "walks the chain of ancestry in objects all the way to the root until
# it finds a match".
# Source: http://msdn.microsoft.com/en-us/library/aa746475(v=vs.85).aspx
#
# This means we have an efficient method of searching membership even in
# nested groups, performed on the server side.
#
# source://github-ldap//lib/github/ldap/membership_validators/active_directory.rb#16
class GitHub::Ldap::MembershipValidators::ActiveDirectory < ::GitHub::Ldap::MembershipValidators::Base
  # Internal: the group DNs to check against.
  #
  # Returns an Array of String DNs.
  #
  # source://github-ldap//lib/github/ldap/membership_validators/active_directory.rb#59
  def group_dns; end

  # Internal: Constructs a membership filter using the "in chain"
  # extended matching rule afforded by ActiveDirectory.
  #
  # Returns a Net::LDAP::Filter object.
  #
  # source://github-ldap//lib/github/ldap/membership_validators/active_directory.rb#50
  def membership_in_chain_filter(entry); end

  # source://github-ldap//lib/github/ldap/membership_validators/active_directory.rb#17
  def perform(entry); end

  # source://github-ldap//lib/github/ldap/membership_validators/active_directory.rb#42
  def referral_chaser; end
end

# source://github-ldap//lib/github/ldap/membership_validators/base.rb#4
class GitHub::Ldap::MembershipValidators::Base
  # Public: Instantiate new validator.
  #
  # - ldap:   GitHub::Ldap object
  # - groups: Array of Net::LDAP::Entry group objects
  # - options: Hash of options
  #
  # @return [Base] a new instance of Base
  #
  # source://github-ldap//lib/github/ldap/membership_validators/base.rb#17
  def initialize(ldap, groups, options = T.unsafe(nil)); end

  # Internal: an Array of Net::LDAP::Entry group objects to validate with.
  #
  # source://github-ldap//lib/github/ldap/membership_validators/base.rb#10
  def groups; end

  # Internal: The GitHub::Ldap object to search domains with.
  #
  # source://github-ldap//lib/github/ldap/membership_validators/base.rb#7
  def ldap; end

  private

  # Internal: Domains to search through.
  #
  # Returns an Array of GitHub::Ldap::Domain objects.
  #
  # source://github-ldap//lib/github/ldap/membership_validators/base.rb#32
  def domains; end
end

# Validates membership using `GitHub::Ldap::Domain#membership`.
#
# This is a simple wrapper for existing functionality in order to expose
# it consistently with the new approach.
#
# source://github-ldap//lib/github/ldap/membership_validators/classic.rb#8
class GitHub::Ldap::MembershipValidators::Classic < ::GitHub::Ldap::MembershipValidators::Base
  # Internal: the group names to look up membership for.
  #
  # Returns an Array of String group names (CNs).
  #
  # source://github-ldap//lib/github/ldap/membership_validators/classic.rb#28
  def group_names; end

  # source://github-ldap//lib/github/ldap/membership_validators/classic.rb#9
  def perform(entry); end
end

# source://github-ldap//lib/github/ldap/membership_validators/active_directory.rb#5
GitHub::Ldap::MembershipValidators::OID = T.let(T.unsafe(nil), String)

# Validates membership recursively.
#
# The first step checks whether the entry is a direct member of the given
# groups. If they are, then we've validated membership successfully.
#
# If not, query for all of the groups that have our groups as members,
# then we check if the entry is a member of any of those.
#
# This is repeated until the entry is found, recursing and requesting
# groups in bulk each iteration until we hit the maximum depth allowed
# and have to give up.
#
# This results in a maximum of `depth` queries (per domain) to validate
# membership in a list of groups.
#
# source://github-ldap//lib/github/ldap/membership_validators/recursive.rb#18
class GitHub::Ldap::MembershipValidators::Recursive < ::GitHub::Ldap::MembershipValidators::Base
  include ::GitHub::Ldap::Filter

  # Public: Instantiate new search strategy.
  #
  # - ldap:    GitHub::Ldap object
  # - groups:  Array of Net::LDAP::Entry group objects
  # - options: Hash of options
  #   depth:   Integer limit of recursion
  #
  # NOTE: This overrides default behavior to configure `depth`.
  #
  # @return [Recursive] a new instance of Recursive
  #
  # source://github-ldap//lib/github/ldap/membership_validators/recursive.rb#35
  def initialize(ldap, groups, options = T.unsafe(nil)); end

  # Internal: The maximum depth to search for membership.
  #
  # source://github-ldap//lib/github/ldap/membership_validators/recursive.rb#25
  def depth; end

  # Internal: the group DNs to check against.
  #
  # Returns an Array of String DNs.
  #
  # source://github-ldap//lib/github/ldap/membership_validators/recursive.rb#111
  def group_dns; end

  # Internal: Construct a filter to find groups this entry is a direct
  # member of.
  #
  # Overloads the included `GitHub::Ldap::Filters#member_filter` method
  # to inject `posixGroup` handling.
  #
  # Returns a Net::LDAP::Filter object.
  #
  # source://github-ldap//lib/github/ldap/membership_validators/recursive.rb#88
  def member_filter(entry_or_uid, uid = T.unsafe(nil)); end

  # Internal: Construct a filter to find groups whose members are the
  # Array of String group DNs passed in.
  #
  # Returns a String filter.
  #
  # source://github-ldap//lib/github/ldap/membership_validators/recursive.rb#104
  def membership_filter(groups); end

  # source://github-ldap//lib/github/ldap/membership_validators/recursive.rb#40
  def perform(entry, depth_override = T.unsafe(nil)); end
end

# source://github-ldap//lib/github/ldap/membership_validators/recursive.rb#22
GitHub::Ldap::MembershipValidators::Recursive::ATTRS = T.let(T.unsafe(nil), Array)

# source://github-ldap//lib/github/ldap/membership_validators/recursive.rb#21
GitHub::Ldap::MembershipValidators::Recursive::DEFAULT_MAX_DEPTH = T.let(T.unsafe(nil), Integer)

# This class represents a POSIX group.
#
# To get a POSIX group, you'll need to create a `Ldap` object and then call the method `group`.
# The parameter for `group` must be a dn to a group entry with `posixGroup` amongs the values for the attribute `objectClass`.
#
# For example:
#
# domain = GitHub::Ldap.new(options).group("cn=enterprise,dc=github,dc=com")
#
# source://github-ldap//lib/github/ldap/posix_group.rb#12
class GitHub::Ldap::PosixGroup < ::GitHub::Ldap::Group
  # Internal - Check if this posix group also includes `member` and `uniqueMember` entries.
  #
  # Returns true if any of the membership names is include in this group entry.
  #
  # @return [Boolean]
  #
  # source://github-ldap//lib/github/ldap/posix_group.rb#65
  def combined_group?; end

  # Public - Overrides Group#is_member?
  #
  # Chech if the user entry uid exists in the collection of `memberUid`.
  # It calls `super` if the group entry includes `member` or `uniqueMember`.
  #
  # Return true if the user is member if this group or any subgroup.
  #
  # @return [Boolean]
  #
  # source://github-ldap//lib/github/ldap/posix_group.rb#55
  def is_member?(user_entry); end

  # Public - Overrides Group#members
  #
  # Search the entries corresponding to the members in the `memberUid` attribute.
  # It calls `super` if the group entry includes `member` or `uniqueMember`.
  #
  # Returns an array with the members of this group and its submembers if there is any.
  #
  # source://github-ldap//lib/github/ldap/posix_group.rb#28
  def members; end

  # Internal - Search all members by uid.
  #
  # Return an array of user entries.
  #
  # source://github-ldap//lib/github/ldap/posix_group.rb#72
  def search_members_by_uids; end

  # Public - Overrides Group#subgroups
  #
  # Prevent to call super when the group entry does not include `member` or `uniqueMember`.
  #
  # Returns an array with the subgroups of this group.
  #
  # source://github-ldap//lib/github/ldap/posix_group.rb#43
  def subgroups; end

  class << self
    # Public - Check if an ldap entry is a valid posixGroup.
    #
    # entry: is the ldap entry to check.
    #
    # Returns true if the entry includes the objectClass `posixGroup`.
    #
    # @return [Boolean]
    #
    # source://github-ldap//lib/github/ldap/posix_group.rb#18
    def valid?(entry); end
  end
end

# This class adds referral chasing capability to a GitHub::Ldap connection.
#
# See: https://technet.microsoft.com/en-us/library/cc978014.aspx
#      http://www.umich.edu/~dirsvcs/ldap/doc/other/ldap-ref.html
#
# source://github-ldap//lib/github/ldap/referral_chaser.rb#9
class GitHub::Ldap::ReferralChaser
  # Public - Creates a ReferralChaser that decorates an instance of GitHub::Ldap
  # with additional functionality to the #search method, allowing it to chase
  # any referral entries and aggregate the results into a single response.
  #
  # connection - The instance of GitHub::Ldap to use for searching. Will use
  # the connection's authentication, (admin_user and admin_password) as credentials
  # for connecting to referred domain controllers.
  #
  # @return [ReferralChaser] a new instance of ReferralChaser
  #
  # source://github-ldap//lib/github/ldap/referral_chaser.rb#18
  def initialize(connection); end

  # Public - Search the domain controller represented by this instance's connection.
  # If a referral is returned, search only one of the domain controllers indicated
  # by the referral entries, per RFC 4511 (https://tools.ietf.org/html/rfc4511):
  #
  # "If the client wishes to progress the operation, it contacts one of
  #  the supported services found in the referral.  If multiple URIs are
  #  present, the client assumes that any supported URI may be used to
  #  progress the operation."
  #
  # options - is a hash with the same options that Net::LDAP::Connection#search supports.
  #           Referral searches will use the given options, but will replace options[:base]
  #           with the referral URL's base search dn.
  #
  # Does not take a block argument as GitHub::Ldap and Net::LDAP::Connection#search do.
  #
  # Will not recursively follow any subsequent referrals.
  #
  # Returns an Array of Net::LDAP::Entry.
  #
  # source://github-ldap//lib/github/ldap/referral_chaser.rb#43
  def search(options); end

  private

  # Returns the value of attribute admin_password.
  #
  # source://github-ldap//lib/github/ldap/referral_chaser.rb#67
  def admin_password; end

  # Returns the value of attribute admin_user.
  #
  # source://github-ldap//lib/github/ldap/referral_chaser.rb#67
  def admin_user; end

  # Returns the value of attribute connection.
  #
  # source://github-ldap//lib/github/ldap/referral_chaser.rb#67
  def connection; end

  # Returns the value of attribute port.
  #
  # source://github-ldap//lib/github/ldap/referral_chaser.rb#67
  def port; end
end

# Represents a referral entry from an LDAP search result. Constructs a corresponding
# GitHub::Ldap object from the paramaters on the referral_url and provides a #search
# method to continue the search on the referred domain.
#
# source://github-ldap//lib/github/ldap/referral_chaser.rb#72
class GitHub::Ldap::ReferralChaser::Referral
  # @return [Referral] a new instance of Referral
  #
  # source://github-ldap//lib/github/ldap/referral_chaser.rb#73
  def initialize(referral_url, admin_user, admin_password, port = T.unsafe(nil)); end

  # Returns the value of attribute connection.
  #
  # source://github-ldap//lib/github/ldap/referral_chaser.rb#94
  def connection; end

  # Search the referred domain controller with options, merging in the referred search
  # base DN onto options[:base].
  #
  # source://github-ldap//lib/github/ldap/referral_chaser.rb#90
  def search(options); end

  # Returns the value of attribute search_base.
  #
  # source://github-ldap//lib/github/ldap/referral_chaser.rb#94
  def search_base; end
end

# This class represents an LDAP URL
#
# See: https://tools.ietf.org/html/rfc4516#section-2
#      https://docs.oracle.com/cd/E19957-01/817-6707/urls.html
#
# source://github-ldap//lib/github/ldap/url.rb#9
class GitHub::Ldap::URL
  extend ::Forwardable

  # Public - Creates a new GitHub::Ldap::URL object with :port, :host and :scheme
  # delegated to a URI object parsed from url_string, and then parses the
  # query params according to the LDAP specification.
  #
  # url_string  - An LDAP URL string.
  # returns     - a GitHub::Ldap::URL with the following attributes:
  #   host         - Name or IP of the LDAP server.
  #   port         - The given port, defaults to 389.
  #   dn           - The base search DN.
  #   attributes   - The comma-delimited list of attributes to be returned.
  #   scope        - The scope of the search.
  #   filter       - Search filter to apply to entries within the specified scope of the search.
  #
  # Supported LDAP URL strings look like this, where sections in brackets are optional:
  #
  #          ldap[s]://[hostport][/[dn[?[attributes][?[scope][?[filter]]]]]]
  #
  #      where:
  #
  #          hostport is a host name with an optional ":portnumber"
  #          dn is the base DN to be used for an LDAP search operation
  #          attributes is a comma separated list of attributes to be retrieved
  #          scope is one of these three strings: base one sub (default=base)
  #          filter is LDAP search filter as used in a call to ldap_search
  #
  #      For example:
  #
  #      ldap://dc4.ghe.local:456/CN=Maggie,DC=dc4,DC=ghe,DC=local?cn,mail?base?(cn=Charlie)
  #
  # @return [URL] a new instance of URL
  #
  # source://github-ldap//lib/github/ldap/url.rb#51
  def initialize(url_string); end

  # Returns the value of attribute attributes.
  #
  # source://github-ldap//lib/github/ldap/url.rb#18
  def attributes; end

  # Returns the value of attribute dn.
  #
  # source://github-ldap//lib/github/ldap/url.rb#18
  def dn; end

  # Returns the value of attribute filter.
  #
  # source://github-ldap//lib/github/ldap/url.rb#18
  def filter; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def host(*args, **_arg1, &block); end

  # Maps the returned scope value from the URL to one of Net::LDAP::Scopes
  #
  # The URL scope value can be one of:
  #     "base" - retrieves information only about the DN (base_dn) specified.
  #     "one"  - retrieves information about entries one level below the DN (base_dn) specified. The base entry is not included in this scope.
  #     "sub"  - retrieves information about entries at all levels below the DN (base_dn) specified. The base entry is included in this scope.
  #
  # Which will map to one of the following Net::LDAP::Scopes:
  #   SearchScope_BaseObject   = 0
  #   SearchScope_SingleLevel  = 1
  #   SearchScope_WholeSubtree = 2
  #
  # If no scope or an invalid scope is given, defaults to SearchScope_BaseObject
  #
  # source://github-ldap//lib/github/ldap/url.rb#79
  def net_ldap_scope; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def port(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def scheme(*args, **_arg1, &block); end

  # Returns the value of attribute scope.
  #
  # source://github-ldap//lib/github/ldap/url.rb#18
  def scope; end

  class << self
    # @return [Boolean]
    #
    # source://github-ldap//lib/github/ldap/url.rb#62
    def valid?(url_string); end
  end
end

# source://github-ldap//lib/github/ldap/url.rb#83
class GitHub::Ldap::URL::InvalidLdapURLException < ::Exception; end

# source://github-ldap//lib/github/ldap/url.rb#11
GitHub::Ldap::URL::SCOPES = T.let(T.unsafe(nil), Hash)

# source://github-ldap//lib/github/ldap/user_search/default.rb#3
module GitHub::Ldap::UserSearch; end

# source://github-ldap//lib/github/ldap/user_search/active_directory.rb#4
class GitHub::Ldap::UserSearch::ActiveDirectory < ::GitHub::Ldap::UserSearch::Default
  private

  # source://github-ldap//lib/github/ldap/user_search/active_directory.rb#14
  def global_catalog_connection; end

  # When doing a global search for a user's DN, set the search base to blank
  #
  # source://github-ldap//lib/github/ldap/user_search/active_directory.rb#19
  def options; end

  # Private - Overridden from base class to set the base to "", and use the
  # Global Catalog to perform the user search.
  #
  # source://github-ldap//lib/github/ldap/user_search/active_directory.rb#10
  def search(search_options); end
end

# The default user search strategy, mainly for allowing Domain#user? to
# search for a user on the configured domain controller, or use the Global
# Catalog to search across the entire Active Directory forest.
#
# source://github-ldap//lib/github/ldap/user_search/default.rb#7
class GitHub::Ldap::UserSearch::Default
  include ::GitHub::Ldap::Filter

  # @return [Default] a new instance of Default
  #
  # source://github-ldap//lib/github/ldap/user_search/default.rb#10
  def initialize(ldap); end

  # Performs a normal search on the configured domain controller
  # using the default base DN, uid, search_options
  #
  # source://github-ldap//lib/github/ldap/user_search/default.rb#21
  def perform(login, base_name, uid, search_options); end

  # The default search. This can be overridden by a child class
  # like GitHub::Ldap::UserSearch::ActiveDirectory to change the
  # scope of the search.
  #
  # source://github-ldap//lib/github/ldap/user_search/default.rb#30
  def search(options); end

  private

  # Returns the value of attribute ldap.
  #
  # source://github-ldap//lib/github/ldap/user_search/default.rb#36
  def ldap; end

  # Returns the value of attribute options.
  #
  # source://github-ldap//lib/github/ldap/user_search/default.rb#36
  def options; end
end

# source://github-ldap//lib/github/ldap/user_search/active_directory.rb#24
class GitHub::Ldap::UserSearch::GlobalCatalog < ::Net::LDAP
  class << self
    # Returns a connection to the Active Directory Global Catalog
    #
    # See: https://technet.microsoft.com/en-us/library/cc728188(v=ws.10).aspx
    #
    # source://github-ldap//lib/github/ldap/user_search/active_directory.rb#32
    def connection(ldap); end
  end
end

# source://github-ldap//lib/github/ldap/user_search/active_directory.rb#26
GitHub::Ldap::UserSearch::GlobalCatalog::LDAPS_GC_PORT = T.let(T.unsafe(nil), Integer)

# source://github-ldap//lib/github/ldap/user_search/active_directory.rb#25
GitHub::Ldap::UserSearch::GlobalCatalog::STANDARD_GC_PORT = T.let(T.unsafe(nil), Integer)

# source://github-ldap//lib/github/ldap/virtual_attributes.rb#3
class GitHub::Ldap::VirtualAttributes
  # @return [VirtualAttributes] a new instance of VirtualAttributes
  #
  # source://github-ldap//lib/github/ldap/virtual_attributes.rb#4
  def initialize(enabled, attributes = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://github-ldap//lib/github/ldap/virtual_attributes.rb#9
  def enabled?; end

  # source://github-ldap//lib/github/ldap/virtual_attributes.rb#13
  def virtual_membership; end
end

# source://github-ldap//lib/github/ldap/virtual_group.rb#3
class GitHub::Ldap::VirtualGroup < ::GitHub::Ldap::Group
  # source://github-ldap//lib/github/ldap/virtual_group.rb#14
  def is_member(user_dn); end

  # source://github-ldap//lib/github/ldap/virtual_group.rb#6
  def members; end

  # Internal - Get the attribute to use for membership filtering.
  #
  # Returns a string.
  #
  # source://github-ldap//lib/github/ldap/virtual_group.rb#21
  def membership_attribute; end

  # source://github-ldap//lib/github/ldap/virtual_group.rb#10
  def subgroups; end
end

module GitHub::SCIM; end

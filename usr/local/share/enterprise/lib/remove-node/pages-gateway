#!/bin/bash
# This file contains utilties for removing pages services from a node. It wraps many of the ghe-dpages commands
# so that they are easier to work with in bash scripts.

source /usr/local/share/enterprise/lib/ghe-cluster-commons

#/ function: is_pages_server
#/ Desciption:
#/    Returns 0 if host is a pages server.
#/    Returns 1 if host is NOT a pages server.
#/
#/ Usage:
#/    is_pages_server <hostname>
is_pages_server() {
  ghe-config --true "cluster.$1.pages-server"
}

#/ function: get_pages_object_count
#/ Desciption:
#/    Print the pages object count to stdout.
#/
#/ Usage:
#/    get_pages_object_count <hostname>
get_pages_object_count() {
  local hostname="$1"
  is_pages_server "$hostname" || {
    echo "warn: $hostname is not a pages server. Operation skipped." >&2
    return 0
  }
  local uuid
  uuid="$(uuid_from_hostname "$hostname")"
  # We enforce strict UUID validation here to avoid sql injection when passing this input
  # to the query below.
  /usr/local/share/enterprise/lib/remove-node/validate_uuid "$uuid" || {
    return 1
  }

  local output
  output="$(/usr/local/share/enterprise/github-mysql "select count(*) from pages_replicas where host = 'pages-server-$uuid'")"
  ## Expected output format:
  # count(*)
  # 0
  if ! [[ "$output" == *"count(*)"* ]]; then
    echo "error: could not determine pages object count" >&2
    echo "$output" >&2
    return 1
  fi

  local pages_count
  pages_count="$(echo "$output" | awk 'END {print $0}' )"
  if [ -z "$pages_count" ]; then
    echo "error: could not determine pages object count" >&2
    return 1
  fi
  echo "$pages_count"
  return 0
}

#/ function: mark_pages_offline
#/ Desciption:
#/    Sets the pages server status to "offline". Does NOT perform an evacaution.
#/
#/ Usage:
#/    mark_pages_offline <hostname>
mark_pages_offline() {
  local hostname="$1"
  is_pages_server "$hostname" || {
    echo "warn: $hostname is not a pages server. Operation skipped." >&2
    return 0
  }
  local uuid
  uuid="$(uuid_from_hostname "$hostname")"

  local output
  output="$(ghe-dpages offline "pages-server-$uuid")"
  ## Expected output:
  # I, [2023-09-09T00:04:42.770237 #432]  INFO -- : Set host=pages-server-6b3a3f62-4cf4-11ee-9281-f7ebea130331 online=0
  if ! [[ "$output" == *"online=0"* ]]; then
    echo "warn: failed to mark pages server offline" >&2
    echo "$output" >&2
    return 1
  fi
  return 0
}

#/ function: evacuate_pages
#/ Desciption:
#/    Sets the pages server status to "evacuating". Evacuation is performed asynchronously via a background job
#/
#/ Usage:
#/    evacuate_pages <hostname>
evacuate_pages() {
  local hostname="$1"
  is_pages_server "$hostname" || {
    echo "warn: $hostname is not a pages server. Operation skipped." >&2
    return 0
  }
  local uuid
  uuid="$(uuid_from_hostname "$hostname")"

  local output
  output="$(ghe-dpages evacuate "pages-server-$uuid")"
  ## Expected output:
  # pages_output="I, [2023-09-08T23:44:03.887264 #388]  INFO -- : Set host=pages-server-6b3a3f62-4cf4-11ee-9281-f7ebea130331 evacuating=true."
  ## Expected output if the pages server doesn't exist:
  # I, [2023-09-09T00:00:44.312012 #410]  INFO -- : No such host=pages-server-68c708e6-4cf4-11ee-b83a-dba1d6fed2bd

  if ! [[ "$output" == *"evacuating=true"* ]]; then
    echo "error: failed to initiate pages evacuation" >&2
    echo "$output" >&2
    return 1
  fi

  return 0
}

#/ function: remove_pages_server
#/ Desciption:
#/    Removes the pages server from the pages server list. Cannot be undone. If evacuation is required, evacuate
#/    wait until evacuation is complete before calling remove_pages_server.
#/
#/ Usage:
#/    remove_pages_server <hostname>
remove_pages_server() {
  local hostname="$1"
  is_pages_server "$hostname" || {
    echo "warn: $hostname is not a pages server. Operation skipped." >&2
    return 0
  }
  local uuid
  uuid="$(uuid_from_hostname "$hostname")"

  local output
  ghe-dpages remove "pages-server-$uuid"
}

#/ function: is_pages_evacuated
#/ Desciption:
#/    Returns 0 if evacuation is complete.
#/    Returns 1 if evacuation is not complete.
#/
#/ Usage:
#/    is_pages_evacuated <hostname>
is_pages_evacuated() {
  local hostname="$1"
  is_pages_server "$hostname" || {
    echo "warn: $hostname is not a pages server. Operation skipped." >&2
    return 0
  }
  local uuid
  uuid="$(uuid_from_hostname "$hostname")"

  # We enforce strict UUID validation here to avoid sql injection when passing this input
  # to the query below.
  /usr/local/share/enterprise/lib/remove-node/validate_uuid "$uuid" || {
    return 1
  }

  local output
  output="$(/usr/local/share/enterprise/github-mysql "select count(*) from pages_replicas where host = 'pages-server-$uuid'")"
  ## Expected output format:
  # count(*)
  # 0
  if ! [[ "$output" = *"count(*)"* ]]; then
    echo "error: could not determine pages object count" >&2
    echo "$output" >&2
    return 1
  fi

  local objects_remaining
  objects_remaining="$(echo "$output" | awk 'END {print $0}' )"
  if [ -z "$objects_remaining" ]; then
    echo "error: could not determine pages object count" >&2
    return 1
  fi

  if (( objects_remaining > 0 )); then
    return 1
  else
    return 0
  fi
}

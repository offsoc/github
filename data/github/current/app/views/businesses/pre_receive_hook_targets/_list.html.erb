<%# erblint:counter DeprecatedComponentsCounter 1 %>
<%# erblint:counter DeprecatedComponentsCounter 1 %>
<%# erblint:counter ButtonComponentMigrationCounter 1 %>
<div class="hooks-listing" <%= test_selector "enterprise-pre-receive-hooks-listing" %>>
  <%= render Primer::Beta::Subhead.new do |component| %>
    <% component.with_heading(tag: :h2) do %>Pre-receive hooks<% end %>
    <% component.with_actions do %>
      <%= link_to "Add pre-receive hook", new_enterprise_pre_receive_hook_target_path(GitHub.global_business), class: "btn btn-sm", "data-pjax" => true %>
      <%= link_to "Manage environments", enterprise_pre_receive_environments_path(GitHub.global_business), class: "btn btn-sm", "data-pjax" => true %>
    <% end %>
  <% end %>
  <p>
    Pre-receive hooks are scripts that run on the GitHub Enterprise server to enforce policy.
    When a push occurs, each script runs in an
    <a class="Link--inTextBlock" href="<%= GitHub.enterprise_admin_help_url %>/policies/creating-a-pre-receive-hook-environment">isolated environment</a>
    to determine whether the push is accepted or rejected.
  </p>

  <% if pre_receive_targets_with_hook.empty? %>
    <%= render Primer::Beta::Blankslate.new do |c| %>
      <% c.with_visual_icon(icon: "circle-slash") %>

      <% c.with_heading(tag: :h2) do %>
        No pre-receive hooks
      <% end %>

      <% c.with_description do %>
        No pre-receive hooks have been created yet.
      <% end %>
    <% end %>
  <% else %>
    <ul class="listgroup">
      <% pre_receive_targets_with_hook.each do |target_with_hook| %>
        <li class="listgroup-item pre-receive-hook-list <%= view.enforcement_class(target_with_hook) %>">
          <span class="item-status">
            <%= link_to enterprise_pre_receive_hook_target_path(GitHub.global_business, target_with_hook), class: "tooltipped tooltipped-n", 'aria-label':  view.enforcement_class(target_with_hook).camelcase do %><%# erblint:disable Primer::Accessibility::TooltippedMigration %>
              <%= primer_octicon(:"dot-fill", classes: "icon-for-enabled") %>
              <%= primer_octicon(:"dot-fill", classes: "icon-for-disabled") %>
              <%= primer_octicon(:"dot-fill", classes: "icon-for-testing") %>
            <% end %>
          </span>

          <div class="content">
            <div class="float-right">
              <a href="<%= enterprise_pre_receive_hook_target_path(GitHub.global_business, target_with_hook) %>"
                class="btn btn-sm" data-pjax>
                Edit
              </a>

              <%= render layout: "shared/details_dialog", locals: {
                button_text: "Delete",
                button_class: "btn btn-sm btn-danger",
                title: "Delete #{target_with_hook.hook.name}?"
              } do %>
                <%= render(Primer::Beta::Flash.new(scheme: :warning, full: true)) do %>
                  This action cannot be undone.
                <% end %>
                <div class="Box-body">
                  <%= button_to "Yes, delete #{target_with_hook.hook.name}",
                    enterprise_pre_receive_hook_path(GitHub.global_business, target_with_hook.hook.id),
                    class: "btn btn-block btn-danger", method: :delete %>
                </div>
              <% end %>
            </div>

            <span <%= test_selector "target-with-hook-#{target_with_hook.id}" %>>
              <strong><%= target_with_hook.hook.name %></strong>
            </span>

            <ul class="details">
            <% repo = target_with_hook.hook.repository %>
            <% if repo.present? %>
              <li>
                <span class="title">Hook: </span>
                <span><%= view.repository_display(repo) %>/<%= target_with_hook.hook.script %></span>
                |
                <span><%=link_to "Audit log", stafftools_audit_log_path(query: driftwood_ade_query?(current_user) ? view.audit_log_kql_query(target_with_hook) : view.audit_log_query(target_with_hook)) %></span>
              </li>
              <li>
                <span class="title">Enforced: </span>
                <span><%= view.enforcement_class(target_with_hook).camelcase %></span>
              </li>
              <li>
                <span class="title">Environment: </span>
                <span><%= target_with_hook.hook.environment.name if target_with_hook.hook.environment %></span>
              </li>
            <% else %>
              <li>
                <span class="pre-receive-hook-error-color">Hook is disabled. The repository containing the hook no longer exists.</span>
              </li>
            <% end %>
            </ul>
          </div>
        </li>
      <% end %>
    </ul>
  <% end %>
</div>

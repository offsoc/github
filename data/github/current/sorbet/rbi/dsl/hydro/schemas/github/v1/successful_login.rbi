# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::SuccessfulLogin`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::SuccessfulLogin`.

class Hydro::Schemas::Github::V1::SuccessfulLogin
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      elected_to_receive_marketing_email: T.nilable(T::Boolean),
      email: T.nilable(Hydro::Schemas::Github::V1::Entities::UserEmail),
      ga_id: T.nilable(String),
      known_device: T.nilable(T::Boolean),
      known_location: T.nilable(T::Boolean),
      passwordless: T.nilable(T::Boolean),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      return_to: T.nilable(String),
      spamurai_form_signals: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals),
      visitor_id: T.nilable(String)
    ).void
  end
  def initialize(actor: nil, elected_to_receive_marketing_email: nil, email: nil, ga_id: nil, known_device: nil, known_location: nil, passwordless: nil, request_context: nil, return_to: nil, spamurai_form_signals: nil, visitor_id: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_elected_to_receive_marketing_email; end

  sig { void }
  def clear_email; end

  sig { void }
  def clear_ga_id; end

  sig { void }
  def clear_known_device; end

  sig { void }
  def clear_known_location; end

  sig { void }
  def clear_passwordless; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_return_to; end

  sig { void }
  def clear_spamurai_form_signals; end

  sig { void }
  def clear_visitor_id; end

  sig { returns(T::Boolean) }
  def elected_to_receive_marketing_email; end

  sig { params(value: T::Boolean).void }
  def elected_to_receive_marketing_email=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::UserEmail)) }
  def email; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::UserEmail)).void }
  def email=(value); end

  sig { returns(String) }
  def ga_id; end

  sig { params(value: String).void }
  def ga_id=(value); end

  sig { returns(T::Boolean) }
  def known_device; end

  sig { params(value: T::Boolean).void }
  def known_device=(value); end

  sig { returns(T::Boolean) }
  def known_location; end

  sig { params(value: T::Boolean).void }
  def known_location=(value); end

  sig { returns(T::Boolean) }
  def passwordless; end

  sig { params(value: T::Boolean).void }
  def passwordless=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(String) }
  def return_to; end

  sig { params(value: String).void }
  def return_to=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)) }
  def spamurai_form_signals; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)).void }
  def spamurai_form_signals=(value); end

  sig { returns(String) }
  def visitor_id; end

  sig { params(value: String).void }
  def visitor_id=(value); end
end

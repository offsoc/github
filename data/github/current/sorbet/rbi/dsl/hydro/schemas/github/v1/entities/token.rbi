# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::Entities::Token`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::Entities::Token`.

class Hydro::Schemas::Github::V1::Entities::Token
  sig do
    params(
      blob: T.nilable(String),
      commit: T.nilable(String),
      content_id: T.nilable(Integer),
      content_number: T.nilable(Integer),
      content_type: T.nilable(T.any(Symbol, Integer)),
      end_column: T.nilable(Integer),
      end_line: T.nilable(Integer),
      path: T.nilable(String),
      post_processing: T.nilable(Hydro::Schemas::Github::V1::Entities::PostProcessing),
      result: T.nilable(String),
      start_column: T.nilable(Integer),
      start_line: T.nilable(Integer),
      token_hash: T.nilable(String),
      token_type: T.nilable(String)
    ).void
  end
  def initialize(blob: nil, commit: nil, content_id: nil, content_number: nil, content_type: nil, end_column: nil, end_line: nil, path: nil, post_processing: nil, result: nil, start_column: nil, start_line: nil, token_hash: nil, token_type: nil); end

  sig { returns(String) }
  def blob; end

  sig { params(value: String).void }
  def blob=(value); end

  sig { void }
  def clear_blob; end

  sig { void }
  def clear_commit; end

  sig { void }
  def clear_content_id; end

  sig { void }
  def clear_content_number; end

  sig { void }
  def clear_content_type; end

  sig { void }
  def clear_end_column; end

  sig { void }
  def clear_end_line; end

  sig { void }
  def clear_path; end

  sig { void }
  def clear_post_processing; end

  sig { void }
  def clear_result; end

  sig { void }
  def clear_start_column; end

  sig { void }
  def clear_start_line; end

  sig { void }
  def clear_token_hash; end

  sig { void }
  def clear_token_type; end

  sig { returns(String) }
  def commit; end

  sig { params(value: String).void }
  def commit=(value); end

  sig { returns(Integer) }
  def content_id; end

  sig { params(value: Integer).void }
  def content_id=(value); end

  sig { returns(Integer) }
  def content_number; end

  sig { params(value: Integer).void }
  def content_number=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def content_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def content_type=(value); end

  sig { returns(Integer) }
  def end_column; end

  sig { params(value: Integer).void }
  def end_column=(value); end

  sig { returns(Integer) }
  def end_line; end

  sig { params(value: Integer).void }
  def end_line=(value); end

  sig { returns(String) }
  def path; end

  sig { params(value: String).void }
  def path=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PostProcessing)) }
  def post_processing; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PostProcessing)).void }
  def post_processing=(value); end

  sig { returns(String) }
  def result; end

  sig { params(value: String).void }
  def result=(value); end

  sig { returns(Integer) }
  def start_column; end

  sig { params(value: Integer).void }
  def start_column=(value); end

  sig { returns(Integer) }
  def start_line; end

  sig { params(value: Integer).void }
  def start_line=(value); end

  sig { returns(String) }
  def token_hash; end

  sig { params(value: String).void }
  def token_hash=(value); end

  sig { returns(String) }
  def token_type; end

  sig { params(value: String).void }
  def token_type=(value); end
end

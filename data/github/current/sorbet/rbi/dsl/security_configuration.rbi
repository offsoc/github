# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `SecurityConfiguration`.
# Please instead update this file by running `bin/tapioca dsl SecurityConfiguration`.

class SecurityConfiguration
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def code_scannings; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def dependabot_alerts; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def dependabot_security_updates; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def dependency_graph_autosubmit_actions; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def dependency_graphs; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def private_vulnerability_reportings; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def secret_scanning_non_provider_patterns; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def secret_scanning_push_protections; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def secret_scanning_validity_checks; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def secret_scannings; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::SecurityConfiguration).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityConfiguration).void)
      ).returns(::SecurityConfiguration)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityConfiguration).void)
      ).returns(::SecurityConfiguration)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityConfiguration).void)
      ).returns(::SecurityConfiguration)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityConfiguration).void)
      ).returns(::SecurityConfiguration)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityConfiguration).void)
      ).returns(::SecurityConfiguration)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::SecurityConfiguration]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::SecurityConfiguration)) }
    def fifth; end

    sig { returns(::SecurityConfiguration) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::SecurityConfiguration)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::SecurityConfiguration) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::SecurityConfiguration).void)
      ).returns(T.nilable(T::Enumerator[::SecurityConfiguration]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::SecurityConfiguration]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::SecurityConfiguration]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityConfiguration).void)
      ).returns(::SecurityConfiguration)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityConfiguration).void)
      ).returns(::SecurityConfiguration)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityConfiguration).void)
      ).returns(::SecurityConfiguration)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::SecurityConfiguration)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::SecurityConfiguration) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::SecurityConfiguration) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::SecurityConfiguration) }
    def first!; end

    sig { returns(T.nilable(::SecurityConfiguration)) }
    def forty_two; end

    sig { returns(::SecurityConfiguration) }
    def forty_two!; end

    sig { returns(T.nilable(::SecurityConfiguration)) }
    def fourth; end

    sig { returns(::SecurityConfiguration) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::SecurityConfiguration) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::SecurityConfiguration).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityConfiguration).void)
      ).returns(::SecurityConfiguration)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::SecurityConfiguration).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::SecurityConfiguration).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::SecurityConfiguration)) }
    def second; end

    sig { returns(::SecurityConfiguration) }
    def second!; end

    sig { returns(T.nilable(::SecurityConfiguration)) }
    def second_to_last; end

    sig { returns(::SecurityConfiguration) }
    def second_to_last!; end

    sig { returns(::SecurityConfiguration) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::SecurityConfiguration) }
    def take!; end

    sig { returns(T.nilable(::SecurityConfiguration)) }
    def third; end

    sig { returns(::SecurityConfiguration) }
    def third!; end

    sig { returns(T.nilable(::SecurityConfiguration)) }
    def third_to_last; end

    sig { returns(::SecurityConfiguration) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def code_scanning_disabled!; end

    sig { returns(T::Boolean) }
    def code_scanning_disabled?; end

    sig { void }
    def code_scanning_enabled!; end

    sig { returns(T::Boolean) }
    def code_scanning_enabled?; end

    sig { void }
    def code_scanning_not_set!; end

    sig { returns(T::Boolean) }
    def code_scanning_not_set?; end

    sig { void }
    def dependabot_alerts_disabled!; end

    sig { returns(T::Boolean) }
    def dependabot_alerts_disabled?; end

    sig { void }
    def dependabot_alerts_enabled!; end

    sig { returns(T::Boolean) }
    def dependabot_alerts_enabled?; end

    sig { void }
    def dependabot_alerts_not_set!; end

    sig { returns(T::Boolean) }
    def dependabot_alerts_not_set?; end

    sig { void }
    def dependabot_security_updates_disabled!; end

    sig { returns(T::Boolean) }
    def dependabot_security_updates_disabled?; end

    sig { void }
    def dependabot_security_updates_enabled!; end

    sig { returns(T::Boolean) }
    def dependabot_security_updates_enabled?; end

    sig { void }
    def dependabot_security_updates_not_set!; end

    sig { returns(T::Boolean) }
    def dependabot_security_updates_not_set?; end

    sig { void }
    def dependency_graph_autosubmit_action_disabled!; end

    sig { returns(T::Boolean) }
    def dependency_graph_autosubmit_action_disabled?; end

    sig { void }
    def dependency_graph_autosubmit_action_enabled!; end

    sig { returns(T::Boolean) }
    def dependency_graph_autosubmit_action_enabled?; end

    sig { void }
    def dependency_graph_autosubmit_action_not_set!; end

    sig { returns(T::Boolean) }
    def dependency_graph_autosubmit_action_not_set?; end

    sig { void }
    def dependency_graph_disabled!; end

    sig { returns(T::Boolean) }
    def dependency_graph_disabled?; end

    sig { void }
    def dependency_graph_enabled!; end

    sig { returns(T::Boolean) }
    def dependency_graph_enabled?; end

    sig { void }
    def dependency_graph_not_set!; end

    sig { returns(T::Boolean) }
    def dependency_graph_not_set?; end

    sig { void }
    def private_vulnerability_reporting_disabled!; end

    sig { returns(T::Boolean) }
    def private_vulnerability_reporting_disabled?; end

    sig { void }
    def private_vulnerability_reporting_enabled!; end

    sig { returns(T::Boolean) }
    def private_vulnerability_reporting_enabled?; end

    sig { void }
    def private_vulnerability_reporting_not_set!; end

    sig { returns(T::Boolean) }
    def private_vulnerability_reporting_not_set?; end

    sig { void }
    def secret_scanning_disabled!; end

    sig { returns(T::Boolean) }
    def secret_scanning_disabled?; end

    sig { void }
    def secret_scanning_enabled!; end

    sig { returns(T::Boolean) }
    def secret_scanning_enabled?; end

    sig { void }
    def secret_scanning_non_provider_patterns_disabled!; end

    sig { returns(T::Boolean) }
    def secret_scanning_non_provider_patterns_disabled?; end

    sig { void }
    def secret_scanning_non_provider_patterns_enabled!; end

    sig { returns(T::Boolean) }
    def secret_scanning_non_provider_patterns_enabled?; end

    sig { void }
    def secret_scanning_non_provider_patterns_not_set!; end

    sig { returns(T::Boolean) }
    def secret_scanning_non_provider_patterns_not_set?; end

    sig { void }
    def secret_scanning_not_set!; end

    sig { returns(T::Boolean) }
    def secret_scanning_not_set?; end

    sig { void }
    def secret_scanning_push_protection_disabled!; end

    sig { returns(T::Boolean) }
    def secret_scanning_push_protection_disabled?; end

    sig { void }
    def secret_scanning_push_protection_enabled!; end

    sig { returns(T::Boolean) }
    def secret_scanning_push_protection_enabled?; end

    sig { void }
    def secret_scanning_push_protection_not_set!; end

    sig { returns(T::Boolean) }
    def secret_scanning_push_protection_not_set?; end

    sig { void }
    def secret_scanning_validity_checks_disabled!; end

    sig { returns(T::Boolean) }
    def secret_scanning_validity_checks_disabled?; end

    sig { void }
    def secret_scanning_validity_checks_enabled!; end

    sig { returns(T::Boolean) }
    def secret_scanning_validity_checks_enabled?; end

    sig { void }
    def secret_scanning_validity_checks_not_set!; end

    sig { returns(T::Boolean) }
    def secret_scanning_validity_checks_not_set?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.untyped) }
    def reload_target; end

    sig { returns(T::Array[T.untyped]) }
    def repository_security_configuration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_security_configuration_ids=(ids); end

    # This method is created by ActiveRecord on the `SecurityConfiguration` class because it declared `has_many :repository_security_configurations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositorySecurityConfiguration::PrivateCollectionProxy) }
    def repository_security_configurations; end

    sig { params(value: T::Enumerable[::RepositorySecurityConfiguration]).void }
    def repository_security_configurations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def security_configuration_default_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def security_configuration_default_ids=(ids); end

    # This method is created by ActiveRecord on the `SecurityConfiguration` class because it declared `has_many :security_configuration_defaults`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SecurityConfigurationDefault::PrivateCollectionProxy) }
    def security_configuration_defaults; end

    sig { params(value: T::Enumerable[::SecurityConfigurationDefault]).void }
    def security_configuration_defaults=(value); end

    # This method is created by ActiveRecord on the `SecurityConfiguration` class because it declared `has_many :security_configuration_policies`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SecurityConfigurationPolicy::PrivateCollectionProxy) }
    def security_configuration_policies; end

    sig { params(value: T::Enumerable[::SecurityConfigurationPolicy]).void }
    def security_configuration_policies=(value); end

    sig { returns(T::Array[T.untyped]) }
    def security_configuration_policy_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def security_configuration_policy_ids=(ids); end

    sig { returns(T.untyped) }
    def target; end

    sig { params(value: T.untyped).void }
    def target=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def code_scanning_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def code_scanning_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def code_scanning_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependabot_alerts_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependabot_alerts_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependabot_alerts_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependabot_security_updates_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependabot_security_updates_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependabot_security_updates_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependency_graph_autosubmit_action_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependency_graph_autosubmit_action_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependency_graph_autosubmit_action_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependency_graph_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependency_graph_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependency_graph_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_code_scanning_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_code_scanning_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_code_scanning_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependabot_alerts_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependabot_alerts_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependabot_alerts_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependabot_security_updates_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependabot_security_updates_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependabot_security_updates_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependency_graph_autosubmit_action_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependency_graph_autosubmit_action_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependency_graph_autosubmit_action_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependency_graph_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependency_graph_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependency_graph_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_private_vulnerability_reporting_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_private_vulnerability_reporting_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_private_vulnerability_reporting_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret_scanning_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret_scanning_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret_scanning_non_provider_patterns_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret_scanning_non_provider_patterns_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret_scanning_non_provider_patterns_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret_scanning_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret_scanning_push_protection_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret_scanning_push_protection_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret_scanning_push_protection_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret_scanning_validity_checks_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret_scanning_validity_checks_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret_scanning_validity_checks_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_vulnerability_reporting_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_vulnerability_reporting_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_vulnerability_reporting_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret_scanning_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret_scanning_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret_scanning_non_provider_patterns_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret_scanning_non_provider_patterns_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret_scanning_non_provider_patterns_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret_scanning_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret_scanning_push_protection_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret_scanning_push_protection_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret_scanning_push_protection_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret_scanning_validity_checks_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret_scanning_validity_checks_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret_scanning_validity_checks_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_repository_security_configurations; end

    sig { returns(Promise[T.untyped]) }
    def async_security_configuration_defaults; end

    sig { returns(Promise[T.untyped]) }
    def async_security_configuration_policies; end

    sig { returns(Promise[T.untyped]) }
    def async_target; end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def code_scanning; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def code_scanning=(value); end

    sig { returns(T::Boolean) }
    def code_scanning?; end

    sig { returns(T.nilable(::String)) }
    def code_scanning_before_last_save; end

    sig { returns(T.untyped) }
    def code_scanning_before_type_cast; end

    sig { returns(T::Boolean) }
    def code_scanning_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def code_scanning_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def code_scanning_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def code_scanning_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def code_scanning_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def code_scanning_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def code_scanning_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def code_scanning_previously_was; end

    sig { returns(T.nilable(::String)) }
    def code_scanning_was; end

    sig { void }
    def code_scanning_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::String) }
    def dependabot_alerts; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def dependabot_alerts=(value); end

    sig { returns(T::Boolean) }
    def dependabot_alerts?; end

    sig { returns(T.nilable(::String)) }
    def dependabot_alerts_before_last_save; end

    sig { returns(T.untyped) }
    def dependabot_alerts_before_type_cast; end

    sig { returns(T::Boolean) }
    def dependabot_alerts_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def dependabot_alerts_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def dependabot_alerts_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def dependabot_alerts_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def dependabot_alerts_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def dependabot_alerts_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def dependabot_alerts_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def dependabot_alerts_previously_was; end

    sig { returns(T.nilable(::String)) }
    def dependabot_alerts_was; end

    sig { void }
    def dependabot_alerts_will_change!; end

    sig { returns(::String) }
    def dependabot_security_updates; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def dependabot_security_updates=(value); end

    sig { returns(T::Boolean) }
    def dependabot_security_updates?; end

    sig { returns(T.nilable(::String)) }
    def dependabot_security_updates_before_last_save; end

    sig { returns(T.untyped) }
    def dependabot_security_updates_before_type_cast; end

    sig { returns(T::Boolean) }
    def dependabot_security_updates_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def dependabot_security_updates_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def dependabot_security_updates_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def dependabot_security_updates_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def dependabot_security_updates_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def dependabot_security_updates_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def dependabot_security_updates_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def dependabot_security_updates_previously_was; end

    sig { returns(T.nilable(::String)) }
    def dependabot_security_updates_was; end

    sig { void }
    def dependabot_security_updates_will_change!; end

    sig { returns(::String) }
    def dependency_graph; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def dependency_graph=(value); end

    sig { returns(T::Boolean) }
    def dependency_graph?; end

    sig { returns(::String) }
    def dependency_graph_autosubmit_action; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def dependency_graph_autosubmit_action=(value); end

    sig { returns(T::Boolean) }
    def dependency_graph_autosubmit_action?; end

    sig { returns(T.nilable(::String)) }
    def dependency_graph_autosubmit_action_before_last_save; end

    sig { returns(T.untyped) }
    def dependency_graph_autosubmit_action_before_type_cast; end

    sig { returns(T::Boolean) }
    def dependency_graph_autosubmit_action_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def dependency_graph_autosubmit_action_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def dependency_graph_autosubmit_action_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def dependency_graph_autosubmit_action_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def dependency_graph_autosubmit_action_in_database; end

    sig { returns(T.untyped) }
    def dependency_graph_autosubmit_action_options; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def dependency_graph_autosubmit_action_options=(value); end

    sig { returns(T::Boolean) }
    def dependency_graph_autosubmit_action_options?; end

    sig { returns(T.untyped) }
    def dependency_graph_autosubmit_action_options_before_last_save; end

    sig { returns(T.untyped) }
    def dependency_graph_autosubmit_action_options_before_type_cast; end

    sig { returns(T::Boolean) }
    def dependency_graph_autosubmit_action_options_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def dependency_graph_autosubmit_action_options_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def dependency_graph_autosubmit_action_options_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def dependency_graph_autosubmit_action_options_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def dependency_graph_autosubmit_action_options_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def dependency_graph_autosubmit_action_options_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def dependency_graph_autosubmit_action_options_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def dependency_graph_autosubmit_action_options_previously_was; end

    sig { returns(T.untyped) }
    def dependency_graph_autosubmit_action_options_was; end

    sig { void }
    def dependency_graph_autosubmit_action_options_will_change!; end

    sig { returns(T.nilable([::String, ::String])) }
    def dependency_graph_autosubmit_action_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def dependency_graph_autosubmit_action_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def dependency_graph_autosubmit_action_previously_was; end

    sig { returns(T.nilable(::String)) }
    def dependency_graph_autosubmit_action_was; end

    sig { void }
    def dependency_graph_autosubmit_action_will_change!; end

    sig { returns(T.nilable(::String)) }
    def dependency_graph_before_last_save; end

    sig { returns(T.untyped) }
    def dependency_graph_before_type_cast; end

    sig { returns(T::Boolean) }
    def dependency_graph_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def dependency_graph_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def dependency_graph_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def dependency_graph_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def dependency_graph_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def dependency_graph_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def dependency_graph_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def dependency_graph_previously_was; end

    sig { returns(T.nilable(::String)) }
    def dependency_graph_was; end

    sig { void }
    def dependency_graph_will_change!; end

    sig { returns(::String) }
    def description; end

    sig { params(value: ::String).returns(::String) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def description_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def description_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def description_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T::Boolean) }
    def enable_ghas; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def enable_ghas=(value); end

    sig { returns(T::Boolean) }
    def enable_ghas?; end

    sig { returns(T.nilable(T::Boolean)) }
    def enable_ghas_before_last_save; end

    sig { returns(T.untyped) }
    def enable_ghas_before_type_cast; end

    sig { returns(T::Boolean) }
    def enable_ghas_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def enable_ghas_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def enable_ghas_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def enable_ghas_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def enable_ghas_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def enable_ghas_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def enable_ghas_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def enable_ghas_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def enable_ghas_was; end

    sig { void }
    def enable_ghas_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::String) }
    def private_vulnerability_reporting; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def private_vulnerability_reporting=(value); end

    sig { returns(T::Boolean) }
    def private_vulnerability_reporting?; end

    sig { returns(T.nilable(::String)) }
    def private_vulnerability_reporting_before_last_save; end

    sig { returns(T.untyped) }
    def private_vulnerability_reporting_before_type_cast; end

    sig { returns(T::Boolean) }
    def private_vulnerability_reporting_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def private_vulnerability_reporting_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def private_vulnerability_reporting_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def private_vulnerability_reporting_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def private_vulnerability_reporting_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def private_vulnerability_reporting_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def private_vulnerability_reporting_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def private_vulnerability_reporting_previously_was; end

    sig { returns(T.nilable(::String)) }
    def private_vulnerability_reporting_was; end

    sig { void }
    def private_vulnerability_reporting_will_change!; end

    sig { void }
    def restore_code_scanning!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_dependabot_alerts!; end

    sig { void }
    def restore_dependabot_security_updates!; end

    sig { void }
    def restore_dependency_graph!; end

    sig { void }
    def restore_dependency_graph_autosubmit_action!; end

    sig { void }
    def restore_dependency_graph_autosubmit_action_options!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_enable_ghas!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_private_vulnerability_reporting!; end

    sig { void }
    def restore_secret_scanning!; end

    sig { void }
    def restore_secret_scanning_delegated_bypass!; end

    sig { void }
    def restore_secret_scanning_non_provider_patterns!; end

    sig { void }
    def restore_secret_scanning_push_protection!; end

    sig { void }
    def restore_secret_scanning_push_protection_custom_message!; end

    sig { void }
    def restore_secret_scanning_validity_checks!; end

    sig { void }
    def restore_target_id!; end

    sig { void }
    def restore_target_type!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_code_scanning; end

    sig { returns(T::Boolean) }
    def saved_change_to_code_scanning?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_dependabot_alerts; end

    sig { returns(T::Boolean) }
    def saved_change_to_dependabot_alerts?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_dependabot_security_updates; end

    sig { returns(T::Boolean) }
    def saved_change_to_dependabot_security_updates?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_dependency_graph; end

    sig { returns(T::Boolean) }
    def saved_change_to_dependency_graph?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_dependency_graph_autosubmit_action; end

    sig { returns(T::Boolean) }
    def saved_change_to_dependency_graph_autosubmit_action?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_dependency_graph_autosubmit_action_options; end

    sig { returns(T::Boolean) }
    def saved_change_to_dependency_graph_autosubmit_action_options?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_enable_ghas; end

    sig { returns(T::Boolean) }
    def saved_change_to_enable_ghas?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_private_vulnerability_reporting; end

    sig { returns(T::Boolean) }
    def saved_change_to_private_vulnerability_reporting?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_secret_scanning; end

    sig { returns(T::Boolean) }
    def saved_change_to_secret_scanning?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_secret_scanning_delegated_bypass; end

    sig { returns(T::Boolean) }
    def saved_change_to_secret_scanning_delegated_bypass?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_secret_scanning_non_provider_patterns; end

    sig { returns(T::Boolean) }
    def saved_change_to_secret_scanning_non_provider_patterns?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_secret_scanning_push_protection; end

    sig { returns(T::Boolean) }
    def saved_change_to_secret_scanning_push_protection?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_secret_scanning_push_protection_custom_message; end

    sig { returns(T::Boolean) }
    def saved_change_to_secret_scanning_push_protection_custom_message?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_secret_scanning_validity_checks; end

    sig { returns(T::Boolean) }
    def saved_change_to_secret_scanning_validity_checks?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_target_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_target_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_target_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_target_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(::String) }
    def secret_scanning; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def secret_scanning=(value); end

    sig { returns(T::Boolean) }
    def secret_scanning?; end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_before_last_save; end

    sig { returns(T.untyped) }
    def secret_scanning_before_type_cast; end

    sig { returns(T::Boolean) }
    def secret_scanning_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def secret_scanning_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def secret_scanning_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def secret_scanning_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def secret_scanning_delegated_bypass; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def secret_scanning_delegated_bypass=(value); end

    sig { returns(T::Boolean) }
    def secret_scanning_delegated_bypass?; end

    sig { returns(T.nilable(::Integer)) }
    def secret_scanning_delegated_bypass_before_last_save; end

    sig { returns(T.untyped) }
    def secret_scanning_delegated_bypass_before_type_cast; end

    sig { returns(T::Boolean) }
    def secret_scanning_delegated_bypass_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def secret_scanning_delegated_bypass_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def secret_scanning_delegated_bypass_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def secret_scanning_delegated_bypass_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def secret_scanning_delegated_bypass_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def secret_scanning_delegated_bypass_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def secret_scanning_delegated_bypass_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def secret_scanning_delegated_bypass_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def secret_scanning_delegated_bypass_was; end

    sig { void }
    def secret_scanning_delegated_bypass_will_change!; end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_in_database; end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_non_provider_patterns; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def secret_scanning_non_provider_patterns=(value); end

    sig { returns(T::Boolean) }
    def secret_scanning_non_provider_patterns?; end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_non_provider_patterns_before_last_save; end

    sig { returns(T.untyped) }
    def secret_scanning_non_provider_patterns_before_type_cast; end

    sig { returns(T::Boolean) }
    def secret_scanning_non_provider_patterns_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def secret_scanning_non_provider_patterns_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def secret_scanning_non_provider_patterns_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def secret_scanning_non_provider_patterns_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_non_provider_patterns_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def secret_scanning_non_provider_patterns_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def secret_scanning_non_provider_patterns_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_non_provider_patterns_previously_was; end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_non_provider_patterns_was; end

    sig { void }
    def secret_scanning_non_provider_patterns_will_change!; end

    sig { returns(T.nilable([::String, ::String])) }
    def secret_scanning_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def secret_scanning_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_previously_was; end

    sig { returns(::String) }
    def secret_scanning_push_protection; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def secret_scanning_push_protection=(value); end

    sig { returns(T::Boolean) }
    def secret_scanning_push_protection?; end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_push_protection_before_last_save; end

    sig { returns(T.untyped) }
    def secret_scanning_push_protection_before_type_cast; end

    sig { returns(T::Boolean) }
    def secret_scanning_push_protection_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def secret_scanning_push_protection_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def secret_scanning_push_protection_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def secret_scanning_push_protection_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def secret_scanning_push_protection_custom_message; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def secret_scanning_push_protection_custom_message=(value); end

    sig { returns(T::Boolean) }
    def secret_scanning_push_protection_custom_message?; end

    sig { returns(T.nilable(::Integer)) }
    def secret_scanning_push_protection_custom_message_before_last_save; end

    sig { returns(T.untyped) }
    def secret_scanning_push_protection_custom_message_before_type_cast; end

    sig { returns(T::Boolean) }
    def secret_scanning_push_protection_custom_message_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def secret_scanning_push_protection_custom_message_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def secret_scanning_push_protection_custom_message_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def secret_scanning_push_protection_custom_message_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def secret_scanning_push_protection_custom_message_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def secret_scanning_push_protection_custom_message_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def secret_scanning_push_protection_custom_message_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def secret_scanning_push_protection_custom_message_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def secret_scanning_push_protection_custom_message_was; end

    sig { void }
    def secret_scanning_push_protection_custom_message_will_change!; end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_push_protection_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def secret_scanning_push_protection_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def secret_scanning_push_protection_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_push_protection_previously_was; end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_push_protection_was; end

    sig { void }
    def secret_scanning_push_protection_will_change!; end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_validity_checks; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def secret_scanning_validity_checks=(value); end

    sig { returns(T::Boolean) }
    def secret_scanning_validity_checks?; end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_validity_checks_before_last_save; end

    sig { returns(T.untyped) }
    def secret_scanning_validity_checks_before_type_cast; end

    sig { returns(T::Boolean) }
    def secret_scanning_validity_checks_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def secret_scanning_validity_checks_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def secret_scanning_validity_checks_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def secret_scanning_validity_checks_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_validity_checks_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def secret_scanning_validity_checks_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def secret_scanning_validity_checks_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_validity_checks_previously_was; end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_validity_checks_was; end

    sig { void }
    def secret_scanning_validity_checks_will_change!; end

    sig { returns(T.nilable(::String)) }
    def secret_scanning_was; end

    sig { void }
    def secret_scanning_will_change!; end

    sig { returns(::Integer) }
    def target_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def target_id=(value); end

    sig { returns(T::Boolean) }
    def target_id?; end

    sig { returns(T.nilable(::Integer)) }
    def target_id_before_last_save; end

    sig { returns(T.untyped) }
    def target_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def target_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def target_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def target_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def target_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def target_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def target_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def target_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def target_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def target_id_was; end

    sig { void }
    def target_id_will_change!; end

    sig { returns(::String) }
    def target_type; end

    sig { params(value: ::String).returns(::String) }
    def target_type=(value); end

    sig { returns(T::Boolean) }
    def target_type?; end

    sig { returns(T.nilable(::String)) }
    def target_type_before_last_save; end

    sig { returns(T.untyped) }
    def target_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def target_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def target_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def target_type_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def target_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def target_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def target_type_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def target_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def target_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def target_type_was; end

    sig { void }
    def target_type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_code_scanning?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dependabot_alerts?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dependabot_security_updates?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dependency_graph?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dependency_graph_autosubmit_action?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dependency_graph_autosubmit_action_options?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_enable_ghas?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_private_vulnerability_reporting?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_secret_scanning?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_secret_scanning_delegated_bypass?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_secret_scanning_non_provider_patterns?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_secret_scanning_push_protection?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_secret_scanning_push_protection_custom_message?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_secret_scanning_validity_checks?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_target_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_target_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def code_scanning_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def code_scanning_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def code_scanning_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependabot_alerts_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependabot_alerts_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependabot_alerts_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependabot_security_updates_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependabot_security_updates_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependabot_security_updates_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependency_graph_autosubmit_action_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependency_graph_autosubmit_action_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependency_graph_autosubmit_action_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependency_graph_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependency_graph_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependency_graph_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_code_scanning_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_code_scanning_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_code_scanning_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependabot_alerts_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependabot_alerts_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependabot_alerts_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependabot_security_updates_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependabot_security_updates_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependabot_security_updates_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependency_graph_autosubmit_action_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependency_graph_autosubmit_action_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependency_graph_autosubmit_action_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependency_graph_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependency_graph_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependency_graph_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_private_vulnerability_reporting_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_private_vulnerability_reporting_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_private_vulnerability_reporting_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret_scanning_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret_scanning_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret_scanning_non_provider_patterns_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret_scanning_non_provider_patterns_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret_scanning_non_provider_patterns_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret_scanning_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret_scanning_push_protection_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret_scanning_push_protection_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret_scanning_push_protection_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret_scanning_validity_checks_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret_scanning_validity_checks_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret_scanning_validity_checks_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_vulnerability_reporting_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_vulnerability_reporting_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_vulnerability_reporting_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret_scanning_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret_scanning_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret_scanning_non_provider_patterns_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret_scanning_non_provider_patterns_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret_scanning_non_provider_patterns_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret_scanning_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret_scanning_push_protection_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret_scanning_push_protection_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret_scanning_push_protection_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret_scanning_validity_checks_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret_scanning_validity_checks_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret_scanning_validity_checks_not_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::SecurityConfiguration } }

    sig { returns(T::Array[::SecurityConfiguration]) }
    def to_a; end

    sig { returns(T::Array[::SecurityConfiguration]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::SecurityConfiguration } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::SecurityConfiguration } }

    sig do
      params(
        records: T.any(::SecurityConfiguration, T::Enumerable[T.any(::SecurityConfiguration, T::Enumerable[::SecurityConfiguration])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::SecurityConfiguration, T::Enumerable[T.any(::SecurityConfiguration, T::Enumerable[::SecurityConfiguration])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::SecurityConfiguration, T::Enumerable[T.any(::SecurityConfiguration, T::Enumerable[::SecurityConfiguration])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::SecurityConfiguration]) }
    def load_target; end

    sig do
      params(
        records: T.any(::SecurityConfiguration, T::Enumerable[T.any(::SecurityConfiguration, T::Enumerable[::SecurityConfiguration])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::SecurityConfiguration, T::Enumerable[T.any(::SecurityConfiguration, T::Enumerable[::SecurityConfiguration])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::SecurityConfiguration, T::Enumerable[T.any(::SecurityConfiguration, T::Enumerable[::SecurityConfiguration])])
      ).returns(T::Array[::SecurityConfiguration])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::SecurityConfiguration]) }
    def target; end

    sig { returns(T::Array[::SecurityConfiguration]) }
    def to_a; end

    sig { returns(T::Array[::SecurityConfiguration]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::SecurityConfiguration } }

    sig { returns(T::Array[::SecurityConfiguration]) }
    def to_a; end

    sig { returns(T::Array[::SecurityConfiguration]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::SecurityConfiguration } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

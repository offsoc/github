{"version":3,"file":"ui_packages_diff-lines_helpers_document-hash-helpers_ts-ui_packages_copilot-code-chat_diff-vi-16a20e-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/copilot-code-chat/__generated__/useFileDiffReference_Comparison.graphql.ts","ui/packages/copilot-code-chat/__generated__/useFileDiffReference_DiffEntry.graphql.ts","ui/packages/copilot-code-chat/diff-view/shared/__generated__/AskCopilotDiffEntriesSelectPanel_data.graphql.ts","ui/packages/copilot-code-chat/diff-view/shared/__generated__/DiffEntriesList_EntryItem_entry.graphql.ts","ui/packages/copilot-code-chat/diff-view/shared/__generated__/DiffEntriesList_entriesData.graphql.ts","ui/packages/copilot-code-chat/diff-view/shared/__generated__/DiffEntriesList_entriesData_refetchQuery.graphql.ts","ui/packages/copilot-code-chat/diff-view/shared/__generated__/DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data.graphql.ts","ui/packages/copilot-code-chat/diff-view/shared/__generated__/DiffHeaderAskCopilotButton_data.graphql.ts","ui/packages/copilot-code-chat/use-file-diff-reference.ts","ui/packages/diff-lines/helpers/document-hash-helpers.ts","ui/packages/copilot-code-chat/diff-view/shared/DiffEntriesList.tsx","ui/packages/copilot-code-chat/map-utils.ts","ui/packages/copilot-code-chat/diff-view/shared/AskCopilotDiffEntriesSelectPanel.tsx","ui/packages/copilot-code-chat/diff-view/shared/DiffHeaderAskCopilotButton.tsx","ui/packages/copilot-code-chat/diff-view/shared/DiffHeaderAskCopilotButton.module.css","ui/packages/copilot-code-chat/diff-view/shared/DiffLinesAttachMenuItem.tsx","ui/packages/copilot-code-chat/diff-view/shared/DiffLinesExplainMenuItem.tsx"],"sourcesContent":["/**\n * @generated SignedSource<<c34f1ed45ae3cb39eb54094e580e3055>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type useFileDiffReference_Comparison$data = {\n  readonly newCommit: {\n    readonly oid: any;\n    readonly repository: {\n      readonly databaseId: number | null | undefined;\n      readonly name: string;\n      readonly owner: {\n        readonly login: string;\n      };\n      readonly url: string;\n    };\n  };\n  readonly oldCommit: {\n    readonly oid: any;\n    readonly repository: {\n      readonly databaseId: number | null | undefined;\n      readonly name: string;\n      readonly owner: {\n        readonly login: string;\n      };\n      readonly url: string;\n    };\n  };\n  readonly \" $fragmentType\": \"useFileDiffReference_Comparison\";\n};\nexport type useFileDiffReference_Comparison$key = {\n  readonly \" $data\"?: useFileDiffReference_Comparison$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"useFileDiffReference_Comparison\">;\n};\n\nconst node: ReaderFragment = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"oid\",\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"Repository\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"repository\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"databaseId\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"url\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": null,\n        \"kind\": \"LinkedField\",\n        \"name\": \"owner\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"login\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"useFileDiffReference_Comparison\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"Commit\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"oldCommit\",\n      \"plural\": false,\n      \"selections\": (v0/*: any*/),\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"Commit\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"newCommit\",\n      \"plural\": false,\n      \"selections\": (v0/*: any*/),\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"PullRequestComparison\",\n  \"abstractKey\": null\n};\n})();\n\n(node as any).hash = \"fb70959c69497160ff44b9b0c7820e08\";\n\nexport default node;\n","/**\n * @generated SignedSource<<a32e260b0ef457460b648d2a46274c20>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type useFileDiffReference_DiffEntry$data = {\n  readonly isBinary: boolean;\n  readonly isLfsPointer: boolean;\n  readonly isSubmodule: boolean;\n  readonly newTreeEntry: {\n    readonly path: string | null | undefined;\n    readonly size: number;\n  } | null | undefined;\n  readonly oldTreeEntry: {\n    readonly path: string | null | undefined;\n    readonly size: number;\n  } | null | undefined;\n  readonly path: string;\n  readonly pathDigest: string;\n  readonly rawUrl: string | null | undefined;\n  readonly \" $fragmentType\": \"useFileDiffReference_DiffEntry\";\n};\nexport type useFileDiffReference_DiffEntry$key = {\n  readonly \" $data\"?: useFileDiffReference_DiffEntry$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"useFileDiffReference_DiffEntry\">;\n};\n\nconst node: ReaderFragment = (function(){\nvar v0 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"path\",\n  \"storageKey\": null\n},\nv1 = [\n  (v0/*: any*/),\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"size\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"useFileDiffReference_DiffEntry\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"pathDigest\",\n      \"storageKey\": null\n    },\n    (v0/*: any*/),\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"rawUrl\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"isBinary\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"isSubmodule\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"isLfsPointer\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"TreeEntry\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"oldTreeEntry\",\n      \"plural\": false,\n      \"selections\": (v1/*: any*/),\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"TreeEntry\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"newTreeEntry\",\n      \"plural\": false,\n      \"selections\": (v1/*: any*/),\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"PullRequestDiffEntry\",\n  \"abstractKey\": null\n};\n})();\n\n(node as any).hash = \"f853615ae640634aad832da060f944cf\";\n\nexport default node;\n","/**\n * @generated SignedSource<<d628904df9f7355fa090601d446aad3f>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AskCopilotDiffEntriesSelectPanel_data$data = {\n  readonly \" $fragmentSpreads\": FragmentRefs<\"DiffEntriesList_entriesData\">;\n  readonly \" $fragmentType\": \"AskCopilotDiffEntriesSelectPanel_data\";\n};\nexport type AskCopilotDiffEntriesSelectPanel_data$key = {\n  readonly \" $data\"?: AskCopilotDiffEntriesSelectPanel_data$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AskCopilotDiffEntriesSelectPanel_data\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"AskCopilotDiffEntriesSelectPanel_data\",\n  \"selections\": [\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"DiffEntriesList_entriesData\"\n    }\n  ],\n  \"type\": \"PullRequest\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"bf02812b64fb6441cda370bf2156e54f\";\n\nexport default node;\n","/**\n * @generated SignedSource<<4ceb0d4c3ed1f1d55a88c5bce67498d3>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type DiffEntriesList_EntryItem_entry$data = {\n  readonly path: string;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"useFileDiffReference_DiffEntry\">;\n  readonly \" $fragmentType\": \"DiffEntriesList_EntryItem_entry\";\n};\nexport type DiffEntriesList_EntryItem_entry$key = {\n  readonly \" $data\"?: DiffEntriesList_EntryItem_entry$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"DiffEntriesList_EntryItem_entry\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"DiffEntriesList_EntryItem_entry\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"path\",\n      \"storageKey\": null\n    },\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"useFileDiffReference_DiffEntry\"\n    }\n  ],\n  \"type\": \"PullRequestDiffEntry\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"eb7d43db9623680dc60c042aad9d97fc\";\n\nexport default node;\n","/**\n * @generated SignedSource<<28d0ff66b00e3035b1064eb757c20a29>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ReaderFragment, RefetchableFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type DiffEntriesList_entriesData$data = {\n  readonly comparison: {\n    readonly diffEntries: {\n      readonly edges: ReadonlyArray<{\n        readonly node: {\n          readonly path: string;\n          readonly \" $fragmentSpreads\": FragmentRefs<\"DiffEntriesList_EntryItem_entry\">;\n        } | null | undefined;\n      } | null | undefined> | null | undefined;\n    };\n    readonly \" $fragmentSpreads\": FragmentRefs<\"useFileDiffReference_Comparison\">;\n  } | null | undefined;\n  readonly id: string;\n  readonly \" $fragmentType\": \"DiffEntriesList_entriesData\";\n};\nexport type DiffEntriesList_entriesData$key = {\n  readonly \" $data\"?: DiffEntriesList_entriesData$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"DiffEntriesList_entriesData\">;\n};\n\nconst node: ReaderFragment = (function(){\nvar v0 = [\n  \"comparison\",\n  \"diffEntries\"\n];\nreturn {\n  \"argumentDefinitions\": [\n    {\n      \"defaultValue\": 10,\n      \"kind\": \"LocalArgument\",\n      \"name\": \"count\"\n    },\n    {\n      \"defaultValue\": null,\n      \"kind\": \"LocalArgument\",\n      \"name\": \"cursor\"\n    },\n    {\n      \"kind\": \"RootArgument\",\n      \"name\": \"endOid\"\n    },\n    {\n      \"kind\": \"RootArgument\",\n      \"name\": \"startOid\"\n    }\n  ],\n  \"kind\": \"Fragment\",\n  \"metadata\": {\n    \"connection\": [\n      {\n        \"count\": \"count\",\n        \"cursor\": \"cursor\",\n        \"direction\": \"forward\",\n        \"path\": (v0/*: any*/)\n      }\n    ],\n    \"refetch\": {\n      \"connection\": {\n        \"forward\": {\n          \"count\": \"count\",\n          \"cursor\": \"cursor\"\n        },\n        \"backward\": null,\n        \"path\": (v0/*: any*/)\n      },\n      \"fragmentPathInResult\": [\n        \"node\"\n      ],\n      \"operation\": require('./DiffEntriesList_entriesData_refetchQuery.graphql'),\n      \"identifierInfo\": {\n        \"identifierField\": \"id\",\n        \"identifierQueryVariableName\": \"id\"\n      }\n    }\n  },\n  \"name\": \"DiffEntriesList_entriesData\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": [\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"endOid\",\n          \"variableName\": \"endOid\"\n        },\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"startOid\",\n          \"variableName\": \"startOid\"\n        }\n      ],\n      \"concreteType\": \"PullRequestComparison\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"comparison\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"args\": null,\n          \"kind\": \"FragmentSpread\",\n          \"name\": \"useFileDiffReference_Comparison\"\n        },\n        {\n          \"alias\": \"diffEntries\",\n          \"args\": null,\n          \"concreteType\": \"PullRequestDiffEntryConnection\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"__DiffEntriesList_entriesData_diffEntries_connection\",\n          \"plural\": false,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"PullRequestDiffEntryEdge\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"edges\",\n              \"plural\": true,\n              \"selections\": [\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"concreteType\": \"PullRequestDiffEntry\",\n                  \"kind\": \"LinkedField\",\n                  \"name\": \"node\",\n                  \"plural\": false,\n                  \"selections\": [\n                    {\n                      \"alias\": null,\n                      \"args\": null,\n                      \"kind\": \"ScalarField\",\n                      \"name\": \"path\",\n                      \"storageKey\": null\n                    },\n                    {\n                      \"args\": null,\n                      \"kind\": \"FragmentSpread\",\n                      \"name\": \"DiffEntriesList_EntryItem_entry\"\n                    },\n                    {\n                      \"alias\": null,\n                      \"args\": null,\n                      \"kind\": \"ScalarField\",\n                      \"name\": \"__typename\",\n                      \"storageKey\": null\n                    }\n                  ],\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"cursor\",\n                  \"storageKey\": null\n                }\n              ],\n              \"storageKey\": null\n            },\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"PageInfo\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"pageInfo\",\n              \"plural\": false,\n              \"selections\": [\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"endCursor\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"hasNextPage\",\n                  \"storageKey\": null\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"id\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"PullRequest\",\n  \"abstractKey\": null\n};\n})();\n\n(node as any).hash = \"8f4d08ab4a59d5f9437e9c5f5341ab1b\";\n\nexport default node;\n","/**\n * @generated SignedSource<<0da00d4c8dc216d193139412e28fd28d>>\n * @relayHash fbe72483e15e7bd51eb99023d8310702\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\n// @relayRequestID fbe72483e15e7bd51eb99023d8310702\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type DiffEntriesList_entriesData_refetchQuery$variables = {\n  count?: number | null | undefined;\n  cursor?: string | null | undefined;\n  endOid?: string | null | undefined;\n  id: string;\n  startOid?: string | null | undefined;\n};\nexport type DiffEntriesList_entriesData_refetchQuery$data = {\n  readonly node: {\n    readonly \" $fragmentSpreads\": FragmentRefs<\"DiffEntriesList_entriesData\">;\n  } | null | undefined;\n};\nexport type DiffEntriesList_entriesData_refetchQuery = {\n  response: DiffEntriesList_entriesData_refetchQuery$data;\n  variables: DiffEntriesList_entriesData_refetchQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"defaultValue\": 10,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"count\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"cursor\"\n},\nv2 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"endOid\"\n},\nv3 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"id\"\n},\nv4 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"startOid\"\n},\nv5 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"id\"\n  }\n],\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"__typename\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv8 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"oid\",\n    \"storageKey\": null\n  },\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"Repository\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"repository\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"databaseId\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"url\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": null,\n        \"kind\": \"LinkedField\",\n        \"name\": \"owner\",\n        \"plural\": false,\n        \"selections\": [\n          (v6/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"login\",\n            \"storageKey\": null\n          },\n          (v7/*: any*/)\n        ],\n        \"storageKey\": null\n      },\n      (v7/*: any*/)\n    ],\n    \"storageKey\": null\n  },\n  (v7/*: any*/)\n],\nv9 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"after\",\n    \"variableName\": \"cursor\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"first\",\n    \"variableName\": \"count\"\n  }\n],\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"path\",\n  \"storageKey\": null\n},\nv11 = [\n  (v10/*: any*/),\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"size\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v3/*: any*/),\n      (v4/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"DiffEntriesList_entriesData_refetchQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v5/*: any*/),\n        \"concreteType\": null,\n        \"kind\": \"LinkedField\",\n        \"name\": \"node\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"args\": [\n              {\n                \"kind\": \"Variable\",\n                \"name\": \"count\",\n                \"variableName\": \"count\"\n              },\n              {\n                \"kind\": \"Variable\",\n                \"name\": \"cursor\",\n                \"variableName\": \"cursor\"\n              }\n            ],\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"DiffEntriesList_entriesData\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/),\n      (v2/*: any*/),\n      (v4/*: any*/),\n      (v3/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"DiffEntriesList_entriesData_refetchQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v5/*: any*/),\n        \"concreteType\": null,\n        \"kind\": \"LinkedField\",\n        \"name\": \"node\",\n        \"plural\": false,\n        \"selections\": [\n          (v6/*: any*/),\n          (v7/*: any*/),\n          {\n            \"kind\": \"InlineFragment\",\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": [\n                  {\n                    \"kind\": \"Variable\",\n                    \"name\": \"endOid\",\n                    \"variableName\": \"endOid\"\n                  },\n                  {\n                    \"kind\": \"Variable\",\n                    \"name\": \"startOid\",\n                    \"variableName\": \"startOid\"\n                  }\n                ],\n                \"concreteType\": \"PullRequestComparison\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"comparison\",\n                \"plural\": false,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Commit\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"oldCommit\",\n                    \"plural\": false,\n                    \"selections\": (v8/*: any*/),\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Commit\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"newCommit\",\n                    \"plural\": false,\n                    \"selections\": (v8/*: any*/),\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": (v9/*: any*/),\n                    \"concreteType\": \"PullRequestDiffEntryConnection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"diffEntries\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"PullRequestDiffEntryEdge\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"edges\",\n                        \"plural\": true,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"PullRequestDiffEntry\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"node\",\n                            \"plural\": false,\n                            \"selections\": [\n                              (v10/*: any*/),\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"pathDigest\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"rawUrl\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"isBinary\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"isSubmodule\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"kind\": \"ScalarField\",\n                                \"name\": \"isLfsPointer\",\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"concreteType\": \"TreeEntry\",\n                                \"kind\": \"LinkedField\",\n                                \"name\": \"oldTreeEntry\",\n                                \"plural\": false,\n                                \"selections\": (v11/*: any*/),\n                                \"storageKey\": null\n                              },\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"concreteType\": \"TreeEntry\",\n                                \"kind\": \"LinkedField\",\n                                \"name\": \"newTreeEntry\",\n                                \"plural\": false,\n                                \"selections\": (v11/*: any*/),\n                                \"storageKey\": null\n                              },\n                              (v7/*: any*/),\n                              (v6/*: any*/)\n                            ],\n                            \"storageKey\": null\n                          },\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"kind\": \"ScalarField\",\n                            \"name\": \"cursor\",\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"PageInfo\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"pageInfo\",\n                        \"plural\": false,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"kind\": \"ScalarField\",\n                            \"name\": \"endCursor\",\n                            \"storageKey\": null\n                          },\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"kind\": \"ScalarField\",\n                            \"name\": \"hasNextPage\",\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": (v9/*: any*/),\n                    \"filters\": null,\n                    \"handle\": \"connection\",\n                    \"key\": \"DiffEntriesList_entriesData_diffEntries\",\n                    \"kind\": \"LinkedHandle\",\n                    \"name\": \"diffEntries\"\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"type\": \"PullRequest\",\n            \"abstractKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"id\": \"fbe72483e15e7bd51eb99023d8310702\",\n    \"metadata\": {},\n    \"name\": \"DiffEntriesList_entriesData_refetchQuery\",\n    \"operationKind\": \"query\",\n    \"text\": null\n  }\n};\n})();\n\n(node as any).hash = \"8f4d08ab4a59d5f9437e9c5f5341ab1b\";\n\nexport default node;\n","/**\n * @generated SignedSource<<3a6f681b563b5a08c57df9fcf5b93814>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data$data = {\n  readonly firstDiffEntry: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly \" $fragmentSpreads\": FragmentRefs<\"useFileDiffReference_DiffEntry\">;\n      };\n    } | null | undefined>;\n  };\n  readonly \" $fragmentSpreads\": FragmentRefs<\"useFileDiffReference_Comparison\">;\n  readonly \" $fragmentType\": \"DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data\";\n};\nexport type DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data$key = {\n  readonly \" $data\"?: DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data\",\n  \"selections\": [\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"useFileDiffReference_Comparison\"\n    },\n    {\n      \"alias\": \"firstDiffEntry\",\n      \"args\": [\n        {\n          \"kind\": \"Literal\",\n          \"name\": \"first\",\n          \"value\": 1\n        }\n      ],\n      \"concreteType\": \"PullRequestDiffEntryConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"diffEntries\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"kind\": \"RequiredField\",\n          \"field\": {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"PullRequestDiffEntryEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"kind\": \"RequiredField\",\n                \"field\": {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"concreteType\": \"PullRequestDiffEntry\",\n                  \"kind\": \"LinkedField\",\n                  \"name\": \"node\",\n                  \"plural\": false,\n                  \"selections\": [\n                    {\n                      \"args\": null,\n                      \"kind\": \"FragmentSpread\",\n                      \"name\": \"useFileDiffReference_DiffEntry\"\n                    }\n                  ],\n                  \"storageKey\": null\n                },\n                \"action\": \"THROW\",\n                \"path\": \"firstDiffEntry.edges.node\"\n              }\n            ],\n            \"storageKey\": null\n          },\n          \"action\": \"THROW\",\n          \"path\": \"firstDiffEntry.edges\"\n        }\n      ],\n      \"storageKey\": \"diffEntries(first:1)\"\n    }\n  ],\n  \"type\": \"PullRequestComparison\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"df2dc0094e0be2b849b51a29547f1d99\";\n\nexport default node;\n","/**\n * @generated SignedSource<<f00817bb95058e63d43bb0e18081f9f4>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { Fragment, ReaderFragment } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type DiffHeaderAskCopilotButton_data$data = {\n  readonly comparison: {\n    readonly diffEntriesMetadata: {\n      readonly totalCount: number;\n    };\n    readonly \" $fragmentSpreads\": FragmentRefs<\"DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data\">;\n  } | null | undefined;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"AskCopilotDiffEntriesSelectPanel_data\">;\n  readonly \" $fragmentType\": \"DiffHeaderAskCopilotButton_data\";\n};\nexport type DiffHeaderAskCopilotButton_data$key = {\n  readonly \" $data\"?: DiffHeaderAskCopilotButton_data$data;\n  readonly \" $fragmentSpreads\": FragmentRefs<\"DiffHeaderAskCopilotButton_data\">;\n};\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [\n    {\n      \"kind\": \"RootArgument\",\n      \"name\": \"endOid\"\n    },\n    {\n      \"kind\": \"RootArgument\",\n      \"name\": \"startOid\"\n    }\n  ],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"DiffHeaderAskCopilotButton_data\",\n  \"selections\": [\n    {\n      \"args\": null,\n      \"kind\": \"FragmentSpread\",\n      \"name\": \"AskCopilotDiffEntriesSelectPanel_data\"\n    },\n    {\n      \"alias\": null,\n      \"args\": [\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"endOid\",\n          \"variableName\": \"endOid\"\n        },\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"startOid\",\n          \"variableName\": \"startOid\"\n        }\n      ],\n      \"concreteType\": \"PullRequestComparison\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"comparison\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"args\": null,\n          \"kind\": \"FragmentSpread\",\n          \"name\": \"DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data\"\n        },\n        {\n          \"alias\": \"diffEntriesMetadata\",\n          \"args\": null,\n          \"concreteType\": \"PullRequestDiffEntryConnection\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"diffEntries\",\n          \"plural\": false,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"kind\": \"ScalarField\",\n              \"name\": \"totalCount\",\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"PullRequest\",\n  \"abstractKey\": null\n};\n\n(node as any).hash = \"139f7ee7a7166dc06fca372f0a595c24\";\n\nexport default node;\n","import type {FileDiffReference} from '@github-ui/copilot-chat/utils/copilot-chat-types'\nimport {useMemo} from 'react'\nimport {graphql, useFragment} from 'react-relay'\nimport type {\n  useFileDiffReference_Comparison$data,\n  useFileDiffReference_Comparison$key,\n} from './__generated__/useFileDiffReference_Comparison.graphql'\nimport type {\n  useFileDiffReference_DiffEntry$data,\n  useFileDiffReference_DiffEntry$key,\n} from './__generated__/useFileDiffReference_DiffEntry.graphql'\n\nconst ComparisonFragment = graphql`\n  fragment useFileDiffReference_Comparison on PullRequestComparison {\n    oldCommit {\n      oid\n      repository {\n        databaseId\n        name\n        url\n        owner {\n          login\n        }\n      }\n    }\n    newCommit {\n      oid\n      repository {\n        databaseId\n        name\n        url\n        owner {\n          login\n        }\n      }\n    }\n  }\n`\n\nconst DiffEntryFragment = graphql`\n  fragment useFileDiffReference_DiffEntry on PullRequestDiffEntry {\n    pathDigest\n    path\n    rawUrl\n    isBinary\n    isSubmodule\n    isLfsPointer\n    oldTreeEntry {\n      path\n      size\n    }\n    newTreeEntry {\n      path\n      size\n    }\n  }\n`\n\n// CAPI will only pull in files that are less than 1MB in size\nconst ONE_MB = 1_048_576\n\n// omitting the $fragmentType just for easier use externally\ntype FileDiffReferenceDiffEntry = Omit<useFileDiffReference_DiffEntry$data, ' $fragmentType'>\n\n// force these to be writeable\ntype DeepWriteable<T> = {-readonly [P in keyof T]: DeepWriteable<T[P]>}\nexport type CopilotChatFileDiffReferenceData = DeepWriteable<FileDiffReferenceDiffEntry>\n\n/** Convert the GraphQL query result to a `FileDiffReference` compatible with Copilot. */\nexport const buildFileDiffReference = (\n  {oldCommit, newCommit}: useFileDiffReference_Comparison$data,\n  {oldTreeEntry, newTreeEntry, ...diffEntry}: FileDiffReferenceDiffEntry,\n  latestCommitOid?: string,\n): FileDiffReference | undefined => {\n  if (\n    diffEntry.isBinary ||\n    diffEntry.isSubmodule ||\n    diffEntry.isLfsPointer ||\n    !newTreeEntry || // deleted files\n    (oldTreeEntry?.size ?? 0) > ONE_MB ||\n    (newTreeEntry.size ?? 0) > ONE_MB\n  )\n    return undefined\n\n  const headFileCommitOid = oldTreeEntry || !latestCommitOid ? newCommit.oid : latestCommitOid\n  return {\n    type: 'file-diff',\n    id: `diff-${diffEntry.pathDigest}`,\n    url: diffEntry.rawUrl ?? '',\n    baseFile: oldTreeEntry\n      ? {\n          type: 'file',\n          repoID: oldCommit.repository.databaseId ?? 0,\n          repoName: oldCommit.repository.name,\n          repoOwner: oldCommit.repository.owner.login,\n          path: oldTreeEntry.path ?? '',\n          commitOID: oldCommit.oid,\n          url: `${oldCommit.repository.url}/raw/${oldCommit.oid}/${oldTreeEntry.path}`,\n          ref: oldCommit.oid,\n        }\n      : null,\n    headFile: {\n      type: 'file',\n      repoID: newCommit.repository.databaseId ?? 0,\n      repoName: newCommit.repository.name,\n      repoOwner: newCommit.repository.owner.login,\n      path: newTreeEntry.path ?? '',\n      commitOID: headFileCommitOid,\n      url: `${newCommit.repository.url}/raw/${headFileCommitOid}/${newTreeEntry.path}`,\n      ref: headFileCommitOid,\n    },\n    head: null,\n    base: null,\n  }\n}\n\nexport const useFileDiffReference = (\n  comparisonKey: useFileDiffReference_Comparison$key,\n  diffEntryKey: useFileDiffReference_DiffEntry$key,\n  latestCommitOid?: string,\n) => {\n  const comparison = useFragment(ComparisonFragment, comparisonKey)\n  const diffEntry = useFragment(DiffEntryFragment, diffEntryKey)\n\n  return useMemo(\n    () => buildFileDiffReference(comparison, diffEntry, latestCommitOid),\n    [comparison, diffEntry, latestCommitOid],\n  )\n}\n\nexport const useFileDiffReferenceWithEntryProvided = (\n  comparisonKey: useFileDiffReference_Comparison$key,\n  diffEntry: FileDiffReferenceDiffEntry,\n) => {\n  const comparison = useFragment(ComparisonFragment, comparisonKey)\n\n  return useMemo(() => buildFileDiffReference(comparison, diffEntry), [comparison, diffEntry])\n}\n","import type {LineRange} from '../types'\n\n/**\n * Detect if location Hash matches a diff anchor with line numbers\n */\nexport function matchHash(hash: string): RegExpMatchArray | null {\n  const diffAnchorMatch = hash.match(/^#?(diff-[a-f0-9]+)(L|R)(\\d+)(?:-(L|R)(\\d+))?$/i)\n  if (diffAnchorMatch != null && diffAnchorMatch.length === 6) {\n    return diffAnchorMatch\n  }\n\n  const discussionAnchorMatch = hash.match(/^#?(discussion-diff-[0-9]+)(L|R)(\\d+)(?:-(L|R)(\\d+))?$/i)\n  if (discussionAnchorMatch != null && discussionAnchorMatch.length === 6) {\n    return discussionAnchorMatch\n  }\n\n  return null\n}\n\nfunction lineHashFragmentFrom(lineNumber: number, orientation: 'left' | 'right'): string {\n  return `${orientation === 'left' ? 'L' : 'R'}${lineNumber}`\n}\n\nexport function parseDiffHash(hash: string): string | undefined {\n  const diffMatch = hash.match(/^#?(diff-[a-f0-9]+)/)\n  return diffMatch?.[1]\n}\n\n/**\n *\n * Check if we're specifying a comment in the hash.\n * This format is defined in\n * [Platform::Models::PullRequestReviewComment#async_current_diff_path_uri](https://github.com/github/github/blob/420ce06f085acf1c9fd9d8948472b3fcca3ba467/packages/pull_requests/app/models/pull_request_review_comment.rb#L571)\n *\n * Basically `#r<database-id>`\n */\nexport function parseCommentHash(hash: string): number | undefined {\n  const resourceMatch = hash.match(/^#?(r\\d+)/)\n  // coerce the match to a number if it exists\n  const commentId = resourceMatch?.[1]\n\n  if (commentId) {\n    return parseInt(commentId.slice(1))\n  } else {\n    return undefined\n  }\n}\n\nexport function parseAnnotationHash(hash: string): number | undefined {\n  const resourceMatch = hash.match(/^#annotation_(\\d+)/)\n  const annotationId = resourceMatch?.[1]\n\n  if (annotationId) {\n    return parseInt(annotationId)\n  } else {\n    return undefined\n  }\n}\n\n/**\n * Returns the LineRange from the given hash\n *\n * @param hash e.g. #diff-146c1d65b0054fb45053c61a749f7cd421c4e62fdce49e86470aa9d7c32052ccR21-R25\n * @returns LineRange | undefined\n */\nexport function parseLineRangeHash(hash: string): LineRange | undefined {\n  const match = matchHash(hash)\n  if (match) {\n    // match[0] is the full match so start at 1\n    const diffAnchor = match[1]\n\n    // start of range\n    const startOrientation = match[2] ? (match[2] === 'L' ? 'left' : 'right') : undefined\n    const startLineNumber = match[3] ? parseInt(match[3]) : undefined\n\n    if (!diffAnchor || !startOrientation || startLineNumber === undefined) return undefined\n\n    // end of range\n    const endOrientation = match[4] ? (match[4] === 'L' ? 'left' : 'right') : undefined\n    const endLineNumber = match[5] ? parseInt(match[5]) : undefined\n\n    return {\n      diffAnchor,\n      startOrientation,\n      startLineNumber,\n      endOrientation: endOrientation ?? startOrientation,\n      endLineNumber: endLineNumber ?? startLineNumber,\n      firstSelectedLineNumber: startLineNumber,\n      firstSelectedOrientation: startOrientation,\n    }\n  }\n}\n\nexport function updateURLHashFromLineRange(lineRange: LineRange) {\n  const newHash = urlHashFromLineRange(lineRange)\n  updateURLHash(newHash)\n}\n\nexport function urlHashFromLineRange(lineRange: LineRange) {\n  const lineStartFragment = lineHashFragmentFrom(lineRange.startLineNumber, lineRange.startOrientation)\n  let newHash = `${lineRange.diffAnchor}${lineStartFragment}`\n  if (\n    lineRange.endLineNumber !== lineRange.startLineNumber ||\n    lineRange.endOrientation !== lineRange.startOrientation\n  ) {\n    const lineEndFragment = lineHashFragmentFrom(lineRange.endLineNumber, lineRange.endOrientation)\n    newHash += `-${lineEndFragment}`\n  }\n\n  return newHash\n}\n\nexport function updateURLHash(hash: string) {\n  const newHash = `#${hash}`\n  if (newHash === window.location.hash) return\n\n  const oldURL = window.location.href\n  history.replaceState({...history.state}, '', newHash)\n  window.dispatchEvent(\n    new HashChangeEvent('hashchange', {\n      newURL: window.location.href,\n      oldURL,\n    }),\n  )\n}\nexport const clearURLHash = () => updateURLHash('')\n","import {assertDataPresent} from '@github-ui/assert-data-present'\nimport type {FileDiffReference} from '@github-ui/copilot-chat/utils/copilot-chat-types'\nimport {ActionList, Box, Spinner} from '@primer/react'\nimport {useEffect, useMemo, type ReactElement} from 'react'\nimport {useFragment, usePaginationFragment} from 'react-relay'\nimport {graphql} from 'relay-runtime'\nimport type {useFileDiffReference_Comparison$key} from '../../__generated__/useFileDiffReference_Comparison.graphql'\nimport {mapWith, mapWithout} from '../../map-utils'\nimport {useFileDiffReference} from '../../use-file-diff-reference'\nimport type {DiffEntriesList_EntryItem_entry$key} from './__generated__/DiffEntriesList_EntryItem_entry.graphql'\nimport type {DiffEntriesList_entriesData$key} from './__generated__/DiffEntriesList_entriesData.graphql'\n\ninterface EntryItemProps {\n  entryKey: DiffEntriesList_EntryItem_entry$key\n  comparisonKey: useFileDiffReference_Comparison$key\n  selected: boolean\n  onSelect: (reference: FileDiffReference) => void\n  onDeselect: () => void\n}\n\nfunction EntryItem({entryKey, comparisonKey, selected, onSelect, onDeselect}: EntryItemProps) {\n  const entry = useFragment(\n    graphql`\n      fragment DiffEntriesList_EntryItem_entry on PullRequestDiffEntry {\n        path\n        ...useFileDiffReference_DiffEntry\n      }\n    `,\n    entryKey,\n  )\n\n  const reference = useFileDiffReference(comparisonKey, entry)\n\n  return reference ? (\n    <ActionList.Item\n      disabled={!reference}\n      selected={selected}\n      onSelect={() => (selected ? onDeselect() : onSelect(reference))}\n    >\n      {entry.path}\n    </ActionList.Item>\n  ) : (\n    <ActionList.Item disabled={!reference} inactiveText=\"Copilot is not available for this file\">\n      {entry.path}\n    </ActionList.Item>\n  )\n}\n\ninterface DiffEntriesListProps {\n  pullRequestKey: DiffEntriesList_entriesData$key\n  filter: string\n  selectedReferences: ReadonlyMap<string, FileDiffReference>\n  onSelectedReferencesChange: (newSelectedReferences: Map<string, FileDiffReference>) => void\n  emptyState: ReactElement\n}\n\nconst ENTRIES_LIMIT = 100\nconst PAGE_SIZE = 25\n\nexport function DiffEntriesList({\n  pullRequestKey,\n  filter,\n  selectedReferences,\n  onSelectedReferencesChange,\n  emptyState,\n}: DiffEntriesListProps) {\n  const {\n    data: entriesData,\n    loadNext,\n    hasNext,\n    isLoadingNext,\n  } = usePaginationFragment(\n    graphql`\n      fragment DiffEntriesList_entriesData on PullRequest\n      @argumentDefinitions(cursor: {type: \"String\"}, count: {type: \"Int\", defaultValue: 10})\n      @refetchable(queryName: \"DiffEntriesList_entriesData_refetchQuery\") {\n        comparison(startOid: $startOid, endOid: $endOid) {\n          ...useFileDiffReference_Comparison\n          diffEntries(after: $cursor, first: $count) @connection(key: \"DiffEntriesList_entriesData_diffEntries\") {\n            edges {\n              node {\n                path\n                ...DiffEntriesList_EntryItem_entry\n              }\n            }\n          }\n        }\n      }\n    `,\n    pullRequestKey,\n  )\n  const totalLoaded = entriesData.comparison?.diffEntries.edges?.length ?? 0\n\n  // Load all pages up to the limit (making several small requests feels more responsive than the user having to wait\n  // on one large one):\n  useEffect(() => {\n    if (hasNext && !isLoadingNext && totalLoaded < ENTRIES_LIMIT) {\n      // Ensure the last page is reduced so we don't go over the limit\n      const thisPageSize = Math.min(ENTRIES_LIMIT - totalLoaded, PAGE_SIZE)\n      loadNext(thisPageSize)\n    }\n  }, [totalLoaded, hasNext, isLoadingNext, loadNext])\n\n  const comparison = entriesData.comparison\n  assertDataPresent(comparison)\n\n  const filteredEntries = useMemo(() => {\n    const lowercaseFilter = filter.toLowerCase()\n    const newFilteredEntries = []\n    for (const edge of entriesData.comparison?.diffEntries.edges ?? [])\n      if (edge?.node?.path.toLowerCase().includes(lowercaseFilter)) newFilteredEntries.push(edge.node)\n    return newFilteredEntries\n  }, [entriesData, filter])\n\n  const onSelectEntry = (path: string, reference: FileDiffReference) =>\n    onSelectedReferencesChange(mapWith(selectedReferences, [path, reference]))\n\n  const onDeselectEntry = (path: string) => onSelectedReferencesChange(mapWithout(selectedReferences, path))\n\n  return filteredEntries.length === 0 && !isLoadingNext ? (\n    emptyState\n  ) : (\n    <>\n      <ActionList>\n        {filteredEntries.map(entry => (\n          <EntryItem\n            key={entry.path}\n            entryKey={entry}\n            comparisonKey={comparison}\n            selected={selectedReferences.has(entry.path)}\n            onSelect={reference => onSelectEntry(entry.path, reference)}\n            onDeselect={() => onDeselectEntry(entry.path)}\n          />\n        ))}\n        <Box sx={{px: 3, py: 2, display: 'flex', gap: 2}}>\n          {isLoadingNext && (\n            <>\n              <Spinner size=\"small\" />\n              <span>Loading more files…</span>\n            </>\n          )}\n          {hasNext && !isLoadingNext && totalLoaded === ENTRIES_LIMIT && `Maximum of ${ENTRIES_LIMIT} files loaded`}\n        </Box>\n      </ActionList>\n    </>\n  )\n}\n\ntry{ EntryItem.displayName ||= 'EntryItem' } catch {}\ntry{ DiffEntriesList.displayName ||= 'DiffEntriesList' } catch {}","/** Return a copy of the map with the entry added to it. */\nexport function mapWith<K, V>(map: ReadonlyMap<K, V>, [key, value]: [key: K, value: V]) {\n  const copy = new Map(map)\n  copy.set(key, value)\n  return copy\n}\n\n/** Return a copy of the map with the entry deleted from it. */\nexport function mapWithout<K, V>(map: ReadonlyMap<K, V>, key: K) {\n  const copy = new Map(map)\n  copy.delete(key)\n  return copy\n}\n","import type {FileDiffReference} from '@github-ui/copilot-chat/utils/copilot-chat-types'\nimport {SelectPanel} from '@primer/react/drafts'\nimport {Suspense, memo, useEffect, useRef, useState, type ComponentProps} from 'react'\nimport {useFragment} from 'react-relay'\nimport {graphql} from 'relay-runtime'\nimport {DiffEntriesList} from './DiffEntriesList'\nimport type {AskCopilotDiffEntriesSelectPanel_data$key} from './__generated__/AskCopilotDiffEntriesSelectPanel_data.graphql'\n\ninterface DiffHeaderAskCopilotButton {\n  pullRequestKey: AskCopilotDiffEntriesSelectPanel_data$key\n  anchorProps: ComponentProps<typeof SelectPanel.Button>\n  onSubmit: (references: FileDiffReference[]) => void\n}\n\nexport const AskCopilotDiffEntriesSelectPanel = memo(function CopilotChatDiffHeaderButton({\n  pullRequestKey,\n  anchorProps,\n  onSubmit,\n}: DiffHeaderAskCopilotButton) {\n  const data = useFragment(\n    graphql`\n      fragment AskCopilotDiffEntriesSelectPanel_data on PullRequest {\n        ...DiffEntriesList_entriesData\n      }\n    `,\n    pullRequestKey,\n  )\n\n  const [filter, setFilter] = useState('')\n  const [selectedReferences, setSelectedReferences] = useState<ReadonlyMap<string, FileDiffReference>>(new Map())\n\n  const containerRef = useRef<HTMLDivElement>(null)\n  const anchorRef = useRef<HTMLButtonElement>(null)\n\n  // Hack alert: SelectPanel does not automatically adjust when it's too close to the edge of the screen so we have to\n  // change the orientation in an effect\n  // FIXME: get rid of this when https://github.com/primer/react/issues/3919 is resolved\n  useEffect(function positionDialogAtAnchorEnd() {\n    const container = containerRef.current\n    const anchorRect = anchorRef.current?.getBoundingClientRect()\n    const dialog = container?.querySelector('dialog')\n\n    if (!anchorRect || !dialog) return\n\n    dialog.style.left = `auto`\n    dialog.style.right = `${document.body.clientWidth - anchorRect.right}px`\n  })\n\n  // Gross hack alert: change the save button text because it's not supported yet in the API\n  // FIXME: get rid of this when https://github.com/github/primer/issues/2645 is resolved\n  useEffect(function changeSaveButtonText() {\n    const saveButton = containerRef.current?.querySelector('dialog button[type=\"submit\"]')\n    if (saveButton) saveButton.textContent = 'Start chat'\n  })\n\n  const submitSelectedReferences = () => onSubmit(Array.from(selectedReferences.values()))\n\n  return (\n    <div ref={containerRef}>\n      <SelectPanel title=\"Select files to discuss\" onSubmit={submitSelectedReferences} anchorRef={anchorRef}>\n        <SelectPanel.Button {...anchorProps} />\n\n        <SelectPanel.Header>\n          <SelectPanel.SearchInput onChange={e => setFilter(e.target.value)} />\n        </SelectPanel.Header>\n\n        <Suspense fallback={<SelectPanel.Loading>Loading files…</SelectPanel.Loading>}>\n          <DiffEntriesList\n            pullRequestKey={data}\n            filter={filter}\n            selectedReferences={selectedReferences}\n            onSelectedReferencesChange={setSelectedReferences}\n            emptyState={\n              <SelectPanel.Message variant=\"empty\" title=\"No files found\">\n                Try a different search term\n              </SelectPanel.Message>\n            }\n          />\n        </Suspense>\n\n        <SelectPanel.Footer />\n      </SelectPanel>\n    </div>\n  )\n})\n\ntry{ AskCopilotDiffEntriesSelectPanel.displayName ||= 'AskCopilotDiffEntriesSelectPanel' } catch {}","import {assertDataPresent} from '@github-ui/assert-data-present'\nimport {publishOpenCopilotChat} from '@github-ui/copilot-chat/utils/copilot-chat-events'\nimport {CopilotChatIntents, type FileDiffReference} from '@github-ui/copilot-chat/utils/copilot-chat-types'\nimport {sendEvent} from '@github-ui/hydro-analytics'\nimport {CopilotIcon, TriangleDownIcon} from '@primer/octicons-react'\nimport {Button, Tooltip} from '@primer/react'\nimport {memo} from 'react'\nimport {useFragment} from 'react-relay'\nimport {graphql} from 'relay-runtime'\nimport {useFileDiffReference} from '../../use-file-diff-reference'\nimport {AskCopilotDiffEntriesSelectPanel} from './AskCopilotDiffEntriesSelectPanel'\nimport styles from './DiffHeaderAskCopilotButton.module.css'\nimport type {DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data$key} from './__generated__/DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data.graphql'\nimport type {DiffHeaderAskCopilotButton_data$key} from './__generated__/DiffHeaderAskCopilotButton_data.graphql'\nimport type {ButtonProps} from '@primer/react'\n\nconst askCopilotButtonProps = {\n  size: 'small',\n  leadingVisual: CopilotIcon,\n  className: styles.askCopilotButton,\n  children: 'Ask Copilot',\n  trailingVisual: TriangleDownIcon,\n} as const satisfies Partial<ButtonProps>\n\ninterface DiffHeaderAskCopilotButtonProps {\n  pullRequestKey: DiffHeaderAskCopilotButton_data$key\n}\n\nexport const DiffHeaderAskCopilotButton = memo(function CopilotChatDiffHeaderButton({\n  pullRequestKey,\n}: DiffHeaderAskCopilotButtonProps) {\n  const data = useFragment(\n    graphql`\n      fragment DiffHeaderAskCopilotButton_data on PullRequest {\n        ...AskCopilotDiffEntriesSelectPanel_data\n        comparison(startOid: $startOid, endOid: $endOid) {\n          ...DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data\n          diffEntriesMetadata: diffEntries {\n            totalCount\n          }\n        }\n      }\n    `,\n    pullRequestKey,\n  )\n  const entriesCount = data.comparison?.diffEntriesMetadata.totalCount\n\n  const onSubmit = (references: FileDiffReference[]) => {\n    publishOpenCopilotChat({\n      intent: CopilotChatIntents.conversation,\n      references,\n    })\n    sendEvent('copilot.file-diff-header.discuss')\n  }\n\n  if (!data.comparison || entriesCount === 0) {\n    return <UnavailableAskCopilotButton />\n  }\n  if (entriesCount === 1) {\n    return <SingleFileAskCopilotButton comparisonKey={data.comparison} onSubmit={onSubmit} />\n  }\n  return (\n    <AskCopilotDiffEntriesSelectPanel pullRequestKey={data} anchorProps={askCopilotButtonProps} onSubmit={onSubmit} />\n  )\n})\n\nfunction UnavailableAskCopilotButton() {\n  return (\n    <Tooltip aria-label=\"Copilot is not available for this pull request\">\n      <Button {...askCopilotButtonProps} disabled />\n    </Tooltip>\n  )\n}\n\nexport const ErrorAskCopilotButton = memo(function ErrorAskCopilotButton() {\n  return (\n    <Tooltip aria-label=\"Copilot failed to load\">\n      <Button {...askCopilotButtonProps} disabled />\n    </Tooltip>\n  )\n})\n\nexport const LoadingAskCopilotButton = memo(function LoadingAskCopilotButton() {\n  return (\n    <Tooltip aria-label=\"Loading Copilot features…\">\n      <Button {...askCopilotButtonProps} disabled />\n    </Tooltip>\n  )\n})\ninterface SingleFileAskCopilotButtonProps {\n  comparisonKey: DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data$key\n  onSubmit: (references: FileDiffReference[]) => void\n}\n\nfunction SingleFileAskCopilotButton({comparisonKey, onSubmit}: SingleFileAskCopilotButtonProps) {\n  const data = useFragment(\n    graphql`\n      fragment DiffHeaderAskCopilotButton_SingleFileAskCopilotButton_data on PullRequestComparison {\n        ...useFileDiffReference_Comparison\n        firstDiffEntry: diffEntries(first: 1) {\n          edges @required(action: THROW) {\n            node @required(action: THROW) {\n              ...useFileDiffReference_DiffEntry\n            }\n          }\n        }\n      }\n    `,\n    comparisonKey,\n  )\n  const firstEntry = data.firstDiffEntry.edges[0]?.node\n  assertDataPresent(firstEntry)\n\n  const reference = useFileDiffReference(data, firstEntry)\n\n  // if we only have one item, and that item is not copilotable, there's nothing we can do here but throw to put the\n  // button into an error state\n  if (reference === undefined) {\n    return <UnavailableAskCopilotButton />\n  }\n\n  return <Button {...askCopilotButtonProps} onClick={() => onSubmit([reference])} trailingVisual={null} />\n}\n\ntry{ DiffHeaderAskCopilotButton.displayName ||= 'DiffHeaderAskCopilotButton' } catch {}\ntry{ UnavailableAskCopilotButton.displayName ||= 'UnavailableAskCopilotButton' } catch {}\ntry{ ErrorAskCopilotButton.displayName ||= 'ErrorAskCopilotButton' } catch {}\ntry{ LoadingAskCopilotButton.displayName ||= 'LoadingAskCopilotButton' } catch {}\ntry{ SingleFileAskCopilotButton.displayName ||= 'SingleFileAskCopilotButton' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"askCopilotButton\":\"DiffHeaderAskCopilotButton-module__askCopilotButton--XnBQK\"};","import {publishAddCopilotChatReference} from '@github-ui/copilot-chat/utils/copilot-chat-events'\nimport type {FileDiffReference} from '@github-ui/copilot-chat/utils/copilot-chat-types'\nimport {sendEvent} from '@github-ui/hydro-analytics'\n// eslint-disable-next-line no-restricted-imports\nimport {useToastContext} from '@github-ui/toast/ToastContext'\nimport {ActionList} from '@primer/react'\n\nexport interface DiffLinesAttachMenuItemProps {\n  fileDiffReference: FileDiffReference\n  eventContext?: Parameters<typeof sendEvent>[1]\n  afterSelect?: () => void\n}\n\nexport const DiffLinesAttachMenuItem: React.FC<DiffLinesAttachMenuItemProps> = ({\n  fileDiffReference,\n  eventContext,\n  afterSelect,\n}) => {\n  const {addToast} = useToastContext()\n\n  const handleAttach = () => {\n    publishAddCopilotChatReference(fileDiffReference)\n    // eslint-disable-next-line @github-ui/dotcom-primer/toast-migration\n    addToast({message: 'Reference added to thread', type: 'success'})\n    sendEvent('copilot.file-diff.add', eventContext)\n    afterSelect?.()\n  }\n\n  return <ActionList.Item onSelect={handleAttach}>Attach to current thread</ActionList.Item>\n}\n\ntry{ DiffLinesAttachMenuItem.displayName ||= 'DiffLinesAttachMenuItem' } catch {}","import {publishOpenCopilotChat} from '@github-ui/copilot-chat/utils/copilot-chat-events'\nimport {CopilotChatIntents, type FileDiffReference} from '@github-ui/copilot-chat/utils/copilot-chat-types'\nimport {sendEvent} from '@github-ui/hydro-analytics'\nimport {ActionList} from '@primer/react'\n\nexport interface DiffLinesExplainMenuItemProps {\n  fileDiffReference: FileDiffReference\n  eventContext?: Parameters<typeof sendEvent>[1]\n  afterSelect?: () => void\n}\n\nexport const DiffLinesExplainMenuItem: React.FC<DiffLinesExplainMenuItemProps> = ({\n  fileDiffReference,\n  eventContext,\n  afterSelect,\n}) => {\n  const handleExplain = () => {\n    publishOpenCopilotChat({\n      content: 'Explain',\n      intent: CopilotChatIntents.explainFileDiff,\n      references: [fileDiffReference],\n    })\n    sendEvent('copilot.file-diff.explain', eventContext)\n    afterSelect?.()\n  }\n\n  return <ActionList.Item onSelect={handleExplain}>Explain</ActionList.Item>\n}\n\ntry{ DiffLinesExplainMenuItem.displayName ||= 'DiffLinesExplainMenuItem' } catch {}"],"names":["node","v0","hash","v1","require","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","ComparisonFragment","DiffEntryFragment","buildFileDiffReference","oldCommit","newCommit","oldTreeEntry","newTreeEntry","diffEntry","latestCommitOid","isBinary","isSubmodule","isLfsPointer","size","headFileCommitOid","oid","type","id","pathDigest","url","rawUrl","baseFile","repoID","repository","databaseId","repoName","name","repoOwner","owner","login","path","commitOID","ref","headFile","head","base","useFileDiffReference","comparisonKey","diffEntryKey","comparison","useFragment","useMemo","useFileDiffReferenceWithEntryProvided","lineHashFragmentFrom","lineNumber","orientation","parseDiffHash","diffMatch","match","parseCommentHash","resourceMatch","commentId","parseInt","slice","parseAnnotationHash","annotationId","parseLineRangeHash","matchHash","diffAnchorMatch","length","discussionAnchorMatch","diffAnchor","startOrientation","undefined","startLineNumber","endOrientation","endLineNumber","firstSelectedLineNumber","firstSelectedOrientation","updateURLHashFromLineRange","lineRange","updateURLHash","urlHashFromLineRange","lineStartFragment","newHash","lineEndFragment","window","location","oldURL","href","history","replaceState","state","dispatchEvent","HashChangeEvent","newURL","EntryItem","entryKey","selected","onSelect","onDeselect","entry","reference","ActionList","Item","disabled","inactiveText","DiffEntriesList","pullRequestKey","filter","selectedReferences","onSelectedReferencesChange","emptyState","data","entriesData","loadNext","hasNext","isLoadingNext","usePaginationFragment","totalLoaded","diffEntries","edges","useEffect","Math","min","ENTRIES_LIMIT","assertDataPresent","filteredEntries","lowercaseFilter","toLowerCase","newFilteredEntries","edge","includes","push","onSelectEntry","mapWith","map","key","value","copy","Map","set","onDeselectEntry","mapWithout","delete","has","Box","sx","px","py","display","gap","Spinner","span","displayName","AskCopilotDiffEntriesSelectPanel","memo","anchorProps","onSubmit","setFilter","useState","setSelectedReferences","containerRef","useRef","anchorRef","container","current","anchorRect","getBoundingClientRect","dialog","querySelector","style","left","right","document","body","clientWidth","saveButton","textContent","div","SelectPanel","title","Array","from","values","Button","Header","SearchInput","onChange","e","target","Suspense","fallback","Loading","Message","variant","Footer","askCopilotButtonProps","leadingVisual","CopilotIcon","className","children","trailingVisual","TriangleDownIcon","DiffHeaderAskCopilotButton","entriesCount","diffEntriesMetadata","totalCount","publishOpenCopilotChat","intent","CopilotChatIntents","conversation","references","sendEvent","SingleFileAskCopilotButton","UnavailableAskCopilotButton","Tooltip","aria-label","ErrorAskCopilotButton","LoadingAskCopilotButton","firstEntry","firstDiffEntry","onClick","DiffLinesAttachMenuItem","fileDiffReference","eventContext","afterSelect","addToast","useToastContext","publishAddCopilotChatReference","message","DiffLinesExplainMenuItem","content","explainFileDiff"],"sourceRoot":""}
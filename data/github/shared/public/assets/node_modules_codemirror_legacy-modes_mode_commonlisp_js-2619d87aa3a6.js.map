{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_commonlisp_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/commonlisp.js"],"sourcesContent":["var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\nvar assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\nvar numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\nvar symbol = /[^\\s'`,@()\\[\\]\";]/;\nvar type;\n\nfunction readSym(stream) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"\\\\\") stream.next();\n    else if (!symbol.test(ch)) { stream.backUp(1); break; }\n  }\n  return stream.current();\n}\n\nfunction base(stream, state) {\n  if (stream.eatSpace()) {type = \"ws\"; return null;}\n  if (stream.match(numLiteral)) return \"number\";\n  var ch = stream.next();\n  if (ch == \"\\\\\") ch = stream.next();\n\n  if (ch == '\"') return (state.tokenize = inString)(stream, state);\n  else if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n  else if (ch == \")\" || ch == \"]\") { type = \"close\"; return \"bracket\"; }\n  else if (ch == \";\") { stream.skipToEnd(); type = \"ws\"; return \"comment\"; }\n  else if (/['`,@]/.test(ch)) return null;\n  else if (ch == \"|\") {\n    if (stream.skipTo(\"|\")) { stream.next(); return \"variableName\"; }\n    else { stream.skipToEnd(); return \"error\"; }\n  } else if (ch == \"#\") {\n    var ch = stream.next();\n    if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n    else if (/[+\\-=\\.']/.test(ch)) return null;\n    else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;\n    else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);\n    else if (ch == \":\") { readSym(stream); return \"meta\"; }\n    else if (ch == \"\\\\\") { stream.next(); readSym(stream); return \"string.special\" }\n    else return \"error\";\n  } else {\n    var name = readSym(stream);\n    if (name == \".\") return null;\n    type = \"symbol\";\n    if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n    if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n    if (name.charAt(0) == \"&\") return \"variableName.special\";\n    return \"variableName\";\n  }\n}\n\nfunction inString(stream, state) {\n  var escaped = false, next;\n  while (next = stream.next()) {\n    if (next == '\"' && !escaped) { state.tokenize = base; break; }\n    escaped = !escaped && next == \"\\\\\";\n  }\n  return \"string\";\n}\n\nfunction inComment(stream, state) {\n  var next, last;\n  while (next = stream.next()) {\n    if (next == \"#\" && last == \"|\") { state.tokenize = base; break; }\n    last = next;\n  }\n  type = \"ws\";\n  return \"comment\";\n}\n\nexport const commonLisp = {\n  name: \"commonlisp\",\n  startState: function () {\n    return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};\n  },\n\n  token: function (stream, state) {\n    if (stream.sol() && typeof state.ctx.indentTo != \"number\")\n      state.ctx.indentTo = state.ctx.start + 1;\n\n    type = null;\n    var style = state.tokenize(stream, state);\n    if (type != \"ws\") {\n      if (state.ctx.indentTo == null) {\n        if (type == \"symbol\" && assumeBody.test(stream.current()))\n          state.ctx.indentTo = state.ctx.start + stream.indentUnit;\n        else\n          state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo == \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n      state.lastType = type;\n    }\n    if (type == \"open\") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n    else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n    return style;\n  },\n\n  indent: function (state) {\n    var i = state.ctx.indentTo;\n    return typeof i == \"number\" ? i : state.ctx.start + 1;\n  },\n\n  languageData: {\n    commentTokens: {line: \";;\", block: {open: \"#|\", close: \"|#\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']}\n  }\n};\n\n"],"names":["type","specialForm","assumeBody","numLiteral","symbol","readSym","stream","ch","next","test","backUp","current","base","state","eatSpace","match","tokenize","inString","skipToEnd","skipTo","inComment","name","charAt","lastType","escaped","last","commonLisp","startState","ctx","prev","start","indentTo","token","sol","style","indentUnit","column","indent","i","languageData","commentTokens","line","block","open","close","closeBrackets","brackets"],"sourceRoot":""}
{"version":3,"file":"chunk-app_assets_modules_react-code-view_components_blob_BlobContent_CSV_CSVBlob_tsx-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/react-code-view/components/blob/BlobContent/CSV/CSVBlob.tsx"],"sourcesContent":["import type {SafeHTMLString} from '@github-ui/safe-html'\nimport {useVirtualWindow} from '@github-ui/use-virtual'\nimport {SearchIcon} from '@primer/octicons-react'\nimport {Box, TextInput} from '@primer/react'\nimport {ScrollableRegion} from '@primer/react/drafts'\nimport {clsx} from 'clsx'\nimport React, {useCallback, useEffect, useImperativeHandle, useRef, useState} from 'react'\n// useLocation is safe for files not rendered in a partial on the overview.\n// eslint-disable-next-line no-restricted-imports\nimport {useLocation} from 'react-router-dom'\n\n// eslint-disable-next-line no-restricted-imports\nimport {type BlobRange, parseFileAnchor} from '../../../../../github/blob-anchor'\nimport {useCurrentLineHeight} from '../../../../hooks/use-current-line-height'\nimport {isLineInViewport} from '../../../../utilities/lines'\nimport {BidiAlert, hasBidiCharacters, isBidiShown, showBidiCharacters} from '../../Banners/Bidi'\nimport type {CodeLinesHandle} from '../Code/code-lines-handle'\nimport {HighlightedLinesProvider, useHighlightedLinesInfo} from '../Code/HighlightedLineProvider'\nimport {LineNumber} from '../Code/LineNumber'\nimport {HighlightedLineMenuContainer} from '../HighlightedLineMenu'\n\ninterface CSVRowData {\n  lineNumber: number\n  cells: React.ReactNode[]\n  highlighted: boolean\n  bidi: boolean\n}\n\nexport default function CSVBlob({csv}: {csv: SafeHTMLString[][]}) {\n  const tableHandle = useRef<CSVTableHandle>(null)\n  const [highlightedLines, setHighlightedLines] = useHighlightedLines()\n  const csvRows = useCSVData(csv, highlightedLines)\n  const showBidiAlert = csvRows.some(row => row.bidi)\n  const {anchorPrefix} = parseFileAnchor(useLocation().hash)\n  const onLineNumberClick = useCallback(() => {\n    setHighlightedLines(parseFileAnchor(window.location.hash)?.blobRange)\n  }, [setHighlightedLines])\n\n  useEffect(() => {\n    const anchorInfo = parseFileAnchor(window.location.hash)\n    const table = tableHandle.current\n    if (!highlightedLines || !table) return\n\n    if (isLineInViewport(anchorInfo.blobRange.start.line)) return\n\n    if (highlightedLines.start.line < 10) {\n      // If the line is near the top, scroll to the top of the sticky thing\n      tableHandle.current?.scrollToTop()\n    } else {\n      tableHandle.current?.scrollToLine(anchorInfo.blobRange.start.line)\n    }\n  }, [highlightedLines, anchorPrefix])\n\n  return (\n    <HighlightedLinesProvider highlightedLines={highlightedLines}>\n      <CSVFilter onFilterChange={query => tableHandle.current?.setFilter(query)} />\n      {showBidiAlert && <BidiAlert />}\n      <HighlightedLineMenuContainer>\n        <CSVTable ref={tableHandle} csvRows={csvRows} onLineNumberClick={onLineNumberClick} />\n      </HighlightedLineMenuContainer>\n    </HighlightedLinesProvider>\n  )\n}\n\nfunction CSVFilter({onFilterChange}: {onFilterChange: (value: string) => void}) {\n  return (\n    <Box\n      sx={{\n        backgroundColor: 'var(--bgColor-muted, var(--color-canvas-subtle))',\n        borderBottom: '1px solid var(--borderColor-default, var(--color-border-default))',\n        position: 'relative',\n        px: 3,\n        py: 2,\n      }}\n    >\n      <TextInput\n        aria-label=\"Search this file\"\n        autoCapitalize=\"off\"\n        leadingVisual={SearchIcon}\n        onChange={e => {\n          const query = (e.target as HTMLInputElement).value.toLowerCase()\n          onFilterChange(query)\n        }}\n        block\n        name=\"filter\"\n        placeholder=\"Search this file\"\n        type=\"text\"\n      />\n    </Box>\n  )\n}\n\ninterface CSVTableHandle extends CodeLinesHandle {\n  setFilter: (query: string) => void\n}\n\ninterface CSVTableProps {\n  csvRows: readonly CSVRowData[]\n  onLineNumberClick: React.MouseEventHandler<HTMLDivElement>\n}\n\nconst CSVTable = React.forwardRef(CSVTableWithRef)\n\nfunction CSVTableWithRef({csvRows, onLineNumberClick}: CSVTableProps, ref: React.ForwardedRef<CSVTableHandle>) {\n  const [filter, setFilter] = useState<string | null>(null)\n  const parentRef = useRef<HTMLTableElement>(null)\n  const currentLineHeight = useCurrentLineHeight('react-csv-table-body', 35)\n\n  const filteredCSVRows = filter\n    ? csvRows.slice(1).filter(row => row.cells.join(' ').toLowerCase().includes(filter.toLowerCase()))\n    : csvRows.slice(1)\n\n  const virtualizer = useVirtualWindow({\n    parentRef,\n    size: filteredCSVRows.length,\n    overscan: 200,\n    estimateSize: useCallback(() => currentLineHeight, [currentLineHeight]),\n  })\n\n  useImperativeHandle(ref, () => ({\n    scrollToTop: () => virtualizer.scrollToIndex(0, {align: 'start'}),\n    scrollToLine: lineNumber => {\n      const index = filteredCSVRows.findIndex(row => row.lineNumber === lineNumber)\n      virtualizer.scrollToIndex(index, {align: 'start'})\n    },\n    setFilter,\n  }))\n\n  return (\n    <ScrollableRegion aria-labelledby=\"LC1\">\n      <Box\n        as=\"table\"\n        ref={parentRef}\n        sx={{\n          display: 'block',\n          isolation: 'isolate',\n        }}\n        // Add the headers height to the total size\n        style={{\n          height: virtualizer.totalSize + currentLineHeight,\n          paddingTop: `${virtualizer.virtualItems[0]?.start ?? 0}px`,\n        }}\n        data-hpc\n        data-testid=\"csv-table\"\n      >\n        {csvRows.length > 0 && (\n          <>\n            <CSVHeader bidi={csvRows[0]!.bidi} cells={csvRows[0]!.cells} onLineNumberClick={onLineNumberClick} />\n            <tbody className=\"react-csv-table-body\">\n              {virtualizer.virtualItems.map(virtualItem => {\n                const {cells, bidi, lineNumber} = filteredCSVRows[virtualItem.index]!\n\n                return (\n                  <CSVRow\n                    key={lineNumber}\n                    lineNumber={lineNumber}\n                    cells={cells}\n                    bidi={bidi}\n                    onLineNumberClick={onLineNumberClick}\n                  />\n                )\n              })}\n            </tbody>\n          </>\n        )}\n      </Box>\n    </ScrollableRegion>\n  )\n}\n\nconst CSVHeader = React.memo(CSVHeaderUnmemoized)\n\nfunction CSVHeaderUnmemoized({\n  cells,\n  bidi,\n  onLineNumberClick,\n}: {\n  cells: React.ReactNode[]\n  bidi: boolean\n  onLineNumberClick: React.MouseEventHandler<HTMLDivElement>\n}) {\n  return (\n    <thead>\n      <tr id={`LC1`} className=\"react-csv-row\">\n        <th className=\"react-csv-line-number\">\n          <LineNumber codeLineData={{lineNumber: 1, bidi}} onClick={onLineNumberClick} />\n        </th>\n        {cells.map((cellContents, columnIndex) => {\n          return (\n            <th className=\"react-csv-cell react-csv-cell--header\" key={`0-${columnIndex}`}>\n              {cellContents}\n            </th>\n          )\n        })}\n      </tr>\n    </thead>\n  )\n}\n\nconst CSVRow = React.memo(CSVRowUnmemoized)\n\nfunction CSVRowUnmemoized({\n  lineNumber,\n  cells,\n  bidi,\n  onLineNumberClick,\n}: {\n  lineNumber: number\n  cells: React.ReactNode[]\n  bidi: boolean\n  onLineNumberClick: React.MouseEventHandler<HTMLDivElement>\n}) {\n  const highlightedLines = useHighlightedLinesInfo(lineNumber)\n  const highlighted =\n    !!highlightedLines && lineNumber >= highlightedLines.start.line && lineNumber <= highlightedLines.end.line\n  const className = clsx('react-csv-row', highlighted && 'react-csv-row--highlighted')\n\n  return (\n    <tr id={`LC${lineNumber}`} className={className}>\n      <td className=\"react-csv-line-number\">\n        <LineNumber codeLineData={{lineNumber, bidi}} onClick={onLineNumberClick} />\n      </td>\n      {cells.map((cellContents, columnIndex) => {\n        return (\n          <td key={`${lineNumber}-${columnIndex}`} className=\"react-csv-cell\">\n            {cellContents}\n          </td>\n        )\n      })}\n    </tr>\n  )\n}\n\nfunction useCSVData(csv: SafeHTMLString[][], highlightedLines: BlobRange | undefined): CSVRowData[] {\n  return csv.map((row, rowIndex) => {\n    const bidiShown = isBidiShown()\n    const bidi = hasBidiCharacters(row.join(''))\n    const cells = bidiShown && bidi ? row.map(cell => (cell ? showBidiCharacters(cell) ?? cell : cell)) : row\n\n    const lineNumber = rowIndex + 1\n    const highlighted =\n      !!highlightedLines && lineNumber >= highlightedLines.start.line && lineNumber <= highlightedLines.end.line\n\n    return {lineNumber, cells, bidi, highlighted}\n  })\n}\n\nfunction useHighlightedLines(): [BlobRange | undefined, React.Dispatch<React.SetStateAction<BlobRange | undefined>>] {\n  const {hash} = useLocation()\n  const initialHighlightedLines = parseFileAnchor(hash).blobRange\n  const highlightedLinesRef = useRef<BlobRange | undefined>(initialHighlightedLines)\n  const [highlightedLines, setHighlightedLines] = useState<BlobRange | undefined>(initialHighlightedLines)\n\n  useEffect(() => {\n    const newBlobRange = parseFileAnchor(window.location.hash).blobRange\n\n    if (\n      newBlobRange?.start.line !== highlightedLinesRef.current?.start.line ||\n      newBlobRange?.end.line !== highlightedLinesRef.current?.end.line\n    ) {\n      highlightedLinesRef.current = newBlobRange\n      setHighlightedLines(newBlobRange)\n    }\n  }, [hash])\n\n  return [highlightedLines, setHighlightedLines]\n}\n\ntry{ CSVBlob.displayName ||= 'CSVBlob' } catch {}\ntry{ CSVFilter.displayName ||= 'CSVFilter' } catch {}\ntry{ CSVTable.displayName ||= 'CSVTable' } catch {}\ntry{ CSVTableWithRef.displayName ||= 'CSVTableWithRef' } catch {}\ntry{ CSVHeader.displayName ||= 'CSVHeader' } catch {}\ntry{ CSVHeaderUnmemoized.displayName ||= 'CSVHeaderUnmemoized' } catch {}\ntry{ CSVRow.displayName ||= 'CSVRow' } catch {}\ntry{ CSVRowUnmemoized.displayName ||= 'CSVRowUnmemoized' } catch {}"],"names":["CSVBlob","csv","tableHandle","useRef","highlightedLines","setHighlightedLines","useHighlightedLines","hash","useLocation","initialHighlightedLines","parseFileAnchor","blobRange","highlightedLinesRef","useState","useEffect","newBlobRange","window","location","start","line","current","end","csvRows","map","row","rowIndex","bidiShown","isBidiShown","bidi","hasBidiCharacters","join","cells","cell","showBidiCharacters","lineNumber","highlighted","showBidiAlert","some","anchorPrefix","onLineNumberClick","useCallback","anchorInfo","table","isLineInViewport","scrollToTop","scrollToLine","HighlightedLinesProvider","CSVFilter","onFilterChange","query","setFilter","BidiAlert","HighlightedLineMenuContainer","CSVTable","ref","Box","sx","backgroundColor","borderBottom","position","px","py","TextInput","aria-label","autoCapitalize","leadingVisual","SearchIcon","onChange","e","target","value","toLowerCase","block","name","placeholder","type","React","CSVTableWithRef","filter","parentRef","currentLineHeight","useCurrentLineHeight","filteredCSVRows","slice","includes","virtualizer","useVirtualWindow","size","length","overscan","estimateSize","useImperativeHandle","scrollToIndex","align","index","findIndex","ScrollableRegion","aria-labelledby","as","display","isolation","style","height","totalSize","paddingTop","virtualItems","data-hpc","data-testid","CSVHeader","tbody","className","virtualItem","CSVRow","CSVHeaderUnmemoized","thead","tr","id","th","LineNumber","codeLineData","onClick","cellContents","columnIndex","CSVRowUnmemoized","useHighlightedLinesInfo","clsx","td","displayName"],"sourceRoot":""}
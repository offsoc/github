{"version":3,"file":"ui_packages_ui-commands_ui-commands_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/get-os/get-os.ts","ui/packages/hotkey/hotkey.ts","ui/packages/hotkey/keyboard-shortcuts-helper.ts","ui/packages/ui-commands/command-event.ts","ui/packages/ui-commands/commands-context.ts","ui/packages/ui-commands/commands-registry.ts","ui/packages/ui-commands/commands.ts","ui/packages/ui-commands/metrics.ts","ui/packages/ui-commands/use-detect-conflicts.ts","ui/packages/ui-commands/use-on-key-down.ts","ui/packages/ui-commands/utils.ts","ui/packages/use-ignore-keyboard-actions-while-composing/use-ignore-keyboard-actions-while-composing.ts","ui/packages/use-tracking-ref/use-tracking-ref.ts","ui/packages/keyboard-key/KeyboardKey.tsx","ui/packages/ui-commands/components/CommandActionListItem.tsx","ui/packages/ui-commands/components/CommandButton.tsx","ui/packages/ui-commands/components/CommandIconButton.tsx","ui/packages/ui-commands/components/CommandKeybindingHint.tsx","ui/packages/ui-commands/components/GlobalCommands.tsx","ui/packages/ui-commands/components/ScopedCommands.tsx"],"sourcesContent":["import type {NavigatorUA} from './@types/user-agent-data'\nimport {ssrSafeWindow} from '@github-ui/ssr-utils'\n\nexport type NavigatorUserAgent = NavigatorUA\n\nexport const OS = {\n  Android: 'Android',\n  iOS: 'iOS',\n  macOS: 'macOS',\n  Windows: 'Windows',\n  Linux: 'Linux',\n  Unknown: 'Unknown',\n}\nexport type OS = (typeof OS)[keyof typeof OS]\n\nexport type OSInformation = {\n  os: OS\n  isAndroid: boolean\n  isIOS: boolean\n  isLinux: boolean\n  isMacOS: boolean\n  isWindows: boolean\n  isDesktop: boolean\n  isMobile: boolean\n}\n\nexport function getOS(): OSInformation {\n  let os: OS = OS.Unknown\n  let isMobileOS = false\n  if (ssrSafeWindow) {\n    // TypeScript doesn't 'know' about userAgentData yet\n    const navigator = ssrSafeWindow.navigator as Navigator & NavigatorUA\n    const userAgent = navigator.userAgent\n    const platform = navigator?.userAgentData?.platform || navigator.platform\n    const macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K', 'macOS']\n    const windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE']\n    const iosPlatforms = ['iPhone', 'iPad', 'iPod']\n\n    if (macosPlatforms.indexOf(platform) !== -1) {\n      os = OS.macOS\n    } else if (iosPlatforms.indexOf(platform) !== -1) {\n      os = OS.iOS\n    } else if (windowsPlatforms.indexOf(platform) !== -1) {\n      os = OS.Windows\n    } else if (/Android/.test(userAgent)) {\n      os = OS.Android\n    } else if (/Linux/.test(platform)) {\n      os = OS.Linux\n    }\n    isMobileOS = navigator?.userAgentData?.mobile ?? (os === OS.Android || os === OS.iOS)\n  }\n\n  return {\n    os,\n    isAndroid: os === OS.Android,\n    isIOS: os === OS.iOS,\n    isMacOS: os === OS.macOS,\n    isWindows: os === OS.Windows,\n    isLinux: os === OS.Linux,\n    isDesktop: os === OS.macOS || os === OS.Windows || os === OS.Linux,\n    isMobile: isMobileOS,\n  }\n}\n\nexport function isMobile(): boolean {\n  return getOS().isMobile\n}\n\nexport function isDesktop(): boolean {\n  return getOS().isDesktop\n}\n\nexport function isAndroid(): boolean {\n  return getOS().isAndroid\n}\n\nexport function isIOS(): boolean {\n  return getOS().isIOS\n}\n\nexport function isMacOS(): boolean {\n  return getOS().isMacOS\n}\n\nexport function isWindows(): boolean {\n  return getOS().isWindows\n}\n\nexport function isLinux(): boolean {\n  return getOS().isLinux\n}\n","// this file is a shim to allow importing @github/hotkey and is the only allowed import for @github/hotkey\n// eslint-disable-next-line no-restricted-imports\nexport * from '@github/hotkey'\n\n// - (?:^|,)    Starting with the beginning of the string or the comma delineating the previous item\n// - ((?:[^,]|,(?=\\+| |$))*(?:,(?=,))?)    The target capture group, consisting of:\n//   - (?:[^,]|,(?=\\+| |$))*    Any number of characters that are not commas, or are commas that are followed by a\n//     plus sign, space, or end of string (ie, the commas in `,+Control` or `Control+, g` or `Control+,`)\n//   - (?:,(?=,))?    Optionally ending with a comma followed by another comma, like the commas in `Control+,,n` or\n//     `Control+,,,`\n// - (?=,|$)    Ending with a comma or the end of the string\nconst chordOrKeyRegex = /(?:^|,)((?:[^,]|,(?=\\+| |$))*(?:,(?=,))?)/g\n\nexport function splitHotkeyString(hotkey: string) {\n  // \",\" is a valid key name, so we can't just use `String.split()`. Even with a regular expression we can't split, for\n  // example \"Control+,,,\" into [\"Control+,\", \",\"] without a lookbehind (not supported in Safari).\n\n  // Instead, we match against all valid substrings:\n  return Array.from(hotkey.matchAll(chordOrKeyRegex)).map(([, chord]) => chord!)\n}\n","import {eventToHotkeyString} from './hotkey'\n\n/** Returns false if a user has explicitly disabled character key shortcuts. */\nexport const areCharacterKeyShortcutsEnabled = () => {\n  const keyboardShortcutsPreference = document.querySelector<HTMLMetaElement>(\n    'meta[name=keyboard-shortcuts-preference]',\n  )\n  if (keyboardShortcutsPreference) {\n    return keyboardShortcutsPreference.content === 'all'\n  }\n  return true\n}\n\n/**\n * Character-key shortcuts are implemented only with lowercase characters (\"g\", \"g f\"), uppercase characters (\"Shift+A\", \"a\"),\n * symbols (\"Alt+g\"), and punctuation (\"?\", \"!\", \"/\").\n *\n * Returns true if string is NOT what we define as a character key shortcut.\n */\nexport const isNonCharacterKeyShortcut = (hotkey: string) => {\n  return /Enter|Arrow|Escape|Meta|Control|Mod|Esc/.test(hotkey) || (hotkey.includes('Alt') && hotkey.includes('Shift'))\n}\n\nconst nonEditableInputTypes = new Set([\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit',\n])\n\n/**\n * Returns true if `element` is editable - that is, if it can be focused and typed in like an input or textarea.\n */\nexport function isEditableElement(target: EventTarget | null): boolean {\n  if (!(target instanceof HTMLElement)) return false\n\n  const name = target.nodeName.toLowerCase()\n  const type = target.getAttribute('type')?.toLowerCase() ?? 'text'\n\n  const isReadonly =\n    target.ariaReadOnly === 'true' ||\n    target.getAttribute('aria-readonly') === 'true' ||\n    target.getAttribute('readonly') !== null\n\n  return (\n    (name === 'select' ||\n      name === 'textarea' ||\n      (name === 'input' && !nonEditableInputTypes.has(type)) ||\n      target.isContentEditable) &&\n    !isReadonly\n  )\n}\n\n/**\n * Returns false if a user settings has character key shortcut disabled and keyboard event corresponds to a character\n * key shortcut. Character key shortcuts are never enabled on editable form inputs.\n */\nexport const isShortcutAllowed = (event: KeyboardEvent) => {\n  const hotkey = eventToHotkeyString(event)\n\n  // Never allow character key shortcuts in inputs\n  const allowCharacterKeyShortcuts = areCharacterKeyShortcutsEnabled() && !isEditableElement(event.target)\n\n  return isNonCharacterKeyShortcut(hotkey) || allowCharacterKeyShortcuts\n}\n","import {CommandId} from './commands'\n\nexport class CommandEvent<Id extends CommandId = CommandId> {\n  constructor(public readonly commandId: Id) {}\n}\n\nexport type CommandEventHandler<Id extends CommandId = CommandId> = (event: CommandEvent<Id>) => void\n\nexport type CommandEventHandlersMapEntry<Id extends CommandId = CommandId> = [key: Id, handler: CommandEventHandler<Id>]\n\nexport type CommandEventHandlersMap = {\n  [Id in CommandId]?: CommandEventHandler<Id>\n}\nexport const CommandEventHandlersMap = {\n  /**\n   * Iterate over the entries in a handlers map.\n   *\n   * `Object.entries` will broaden the entry type to `[string, CommandEventHandler]` because objects can have unknown\n   * keys (ie, `{a: 1, b: 2}` is assignable to `{a: number}`), so this narrows it back down.\n   */\n  entries: (map: CommandEventHandlersMap) =>\n    Object.entries(map).filter(\n      (entry): entry is CommandEventHandlersMapEntry => CommandId.is(entry[0]) && entry[1] !== undefined,\n    ),\n  keys: (map: CommandEventHandlersMap) => Object.keys(map).filter(CommandId.is),\n}\n","import {createContext, useContext} from 'react'\n\nimport type {CommandId} from './commands'\nimport {dispatchGlobalCommand} from './components/GlobalCommands'\n\ninterface CommandsContext {\n  triggerCommand: (id: CommandId, domEvent: KeyboardEvent | MouseEvent) => void\n}\n\nconst CommandsContext = createContext<CommandsContext>({\n  // Without any scope context, we just emit a global event\n  triggerCommand: dispatchGlobalCommand,\n})\n\nexport const CommandsContextProvider = CommandsContext.Provider\n\nexport const useCommandsContext = () => useContext(CommandsContext)\n","import {useEffect, useId} from 'react'\n\nimport {CommandEventHandlersMap} from './command-event'\nimport {CommandId, getCommandMetadata, getServiceMetadata, type ServiceId} from './commands'\n\n/**\n * Registered command IDs. The key is a globally unique ID for each source that will be used to unregister or update\n * the commands; this allows commands to be registered multiple times on a page (ie, in different scopes).\n */\nconst registeredCommands = new Map<string, CommandId[]>()\n\nexport type UIService = {\n  id: string\n  name: string\n}\n\nexport type UICommand = {\n  id: CommandId\n  name: string\n  description: string\n  keybinding?: string | string[]\n}\n\nexport type UICommandGroup = {\n  service: UIService\n  commands: UICommand[]\n}\n\n/**\n * Get the set of IDs of all commands currently registered on the page, regardless of scope. From these IDs the\n * command metadata can be obtained with `getCommandMetadata(commandId)`, and the service metadata can be obtained with\n * `getServiceMetadata(CommandId.getServiceId(commandId))`.\n */\nexport function getAllRegisteredCommands(): UICommandGroup[] {\n  const uiCommandGroupMap = new Map<ServiceId, UICommandGroup>()\n  for (const commandId of new Set(Array.from(registeredCommands.values()).flat())) {\n    const serviceId = CommandId.getServiceId(commandId)\n    if (!uiCommandGroupMap.has(serviceId)) {\n      const service = getServiceMetadata(serviceId)\n      uiCommandGroupMap.set(serviceId, {\n        service: {id: service.id, name: service.name},\n        commands: [],\n      })\n    }\n    const command = getCommandMetadata(commandId)\n    if (command && command.defaultBinding) {\n      uiCommandGroupMap.get(serviceId)?.commands.push({\n        id: commandId,\n        name: command.name,\n        description: command.description,\n        keybinding: command.defaultBinding,\n      })\n    }\n  }\n\n  return Array.from(uiCommandGroupMap.values())\n}\n\n/** Register commands into the global command registry for display in help dialog. */\nexport const useRegisterCommands = (commands: CommandEventHandlersMap) => {\n  const sourceId = useId()\n\n  useEffect(() => {\n    registeredCommands.set(sourceId, CommandEventHandlersMap.keys(commands))\n\n    return () => {\n      registeredCommands.delete(sourceId)\n    }\n  }, [commands, sourceId])\n}\n","import {isFeatureEnabled} from '@github-ui/feature-flags'\nimport type {NormalizedSequenceString} from '@github-ui/hotkey'\nimport {normalizeSequence} from '@github-ui/hotkey'\n\nimport jsonMetadata from './__generated__/ui-commands.json'\n\nconst {commands, services} = jsonMetadata\n\nconst serviceCommandIds = new Set(Object.keys(commands) as CommandId[])\n\nexport type ServiceId = keyof typeof services\n\n/** Full joined command ID (in `serviceId:commandId` form). */\nexport type CommandId = keyof typeof commands\nexport const CommandId = {\n  is: (str: string): str is CommandId => serviceCommandIds.has(str as CommandId),\n  getServiceId: (commandId: CommandId) => commandId.split(':')[0] as ServiceId,\n}\n\nexport interface CommandMetadata {\n  name: string\n  description: string\n  defaultBinding?: string\n  featureFlag?: string\n}\n\n/**\n * Get the documentation metadata for the given command. Returns `undefined` if the command is\n * disabled via feature flag.\n */\nexport const getCommandMetadata = (commandId: CommandId) => {\n  const metadata = commands[commandId] as CommandMetadata\n  return !metadata.featureFlag || isFeatureEnabled(metadata.featureFlag.toUpperCase()) ? metadata : undefined\n}\n\n/** Get the documentation metadata for the given service. */\nexport const getServiceMetadata = (serviceId: ServiceId) => services[serviceId]\n\nexport const getKeybinding = (commandId: CommandId): NormalizedSequenceString | undefined => {\n  const metadata = getCommandMetadata(commandId)\n  return metadata?.defaultBinding ? normalizeSequence(metadata.defaultBinding) : undefined\n}\n\n/** Returns a map of id to keybinding, without entries for commands that don't have keybindings. */\nexport const getKeybindings = (commandIds: CommandId[]) =>\n  new Map(\n    commandIds\n      .map(id => [id, getKeybinding(id)])\n      .filter((entry): entry is [CommandId, NormalizedSequenceString] => entry[1] !== undefined),\n  )\n","import {AnalyticsClient} from '@github/hydro-analytics-client'\nimport type {NormalizedSequenceString} from '@github-ui/hotkey'\n\nimport type {CommandEvent} from './command-event'\nimport {type CommandId, getKeybinding} from './commands'\n\n/** https://hydro.githubapp.com/hydro_analytics/apps/ui-commands */\nconst HYDRO_APP_ID = 'ui-commands'\n\nconst client = new AnalyticsClient({\n  collectorUrl: `https://collector.githubapp.com/${HYDRO_APP_ID}/collect`,\n})\n\ntype CommandTriggerEvent = {\n  /** Full command ID in `service:command` form. */\n  command_id: CommandId\n  /**\n   * How the event was triggered. More event methods may be added in the future:\n   *  - `\"keybinding\"`: Via a keydown event according to the configured keybinding for the command.\n   */\n  trigger_type: 'keybinding' | 'click'\n  /**\n   * HTML of the opening tag of the target element for the event that triggered this command. When `trigger_type` is\n   * `\"keybinding\"` this is the currently focused element if there is one; otherwise it will be the `<body>`.\n   */\n  target_element_html?: string\n  /** The keybinding (in hotkey string format) configured for this command, if there is one. */\n  keybinding?: NormalizedSequenceString\n  /** If the handler threw an exception synchronously, this is a string representation of that exception. */\n  handler_exception?: string\n}\nconst CommandTriggerEvent = {\n  TYPE: 'command.trigger',\n  send(context: CommandTriggerEvent) {\n    client.sendEvent(CommandTriggerEvent.TYPE, context)\n  },\n}\n\n/** Get the opening HTML tag of the given element. */\nfunction getOpeningHtmlTag(element: HTMLElement) {\n  const tagName = element.tagName.toLowerCase()\n  const attributes = Array.from(element.attributes)\n    .map(attr => `${attr.name}=\"${attr.value.replaceAll('\"', '\\\\\"')}\"`)\n    .join(' ')\n  return `<${tagName}${attributes ? ` ${attributes}` : ''}>`\n}\n\n/** Record a Hydro analytics event for triggering a command. */\nexport function recordCommandTriggerEvent(commandEvent: CommandEvent, domEvent: KeyboardEvent | MouseEvent) {\n  CommandTriggerEvent.send({\n    // eslint-disable-next-line camelcase\n    command_id: commandEvent.commandId,\n    // eslint-disable-next-line camelcase\n    trigger_type: domEvent instanceof KeyboardEvent ? 'keybinding' : 'click',\n    // eslint-disable-next-line camelcase\n    target_element_html: domEvent.target instanceof HTMLElement ? getOpeningHtmlTag(domEvent.target) : undefined,\n    keybinding: getKeybinding(commandEvent.commandId),\n  })\n}\n","import type {NormalizedSequenceString} from '@github-ui/hotkey'\nimport {useEffect, useMemo} from 'react'\n\nimport {CommandEventHandlersMap} from './command-event'\nimport type {CommandId} from './commands'\nimport {getKeybindings} from './commands'\nimport {filterOnce} from './utils'\n\n/**\n * Mutable map of registered commands. Keys are the resolved keybindings, while the values are arrays of all\n * existing registered command IDs with that keybinding. Since the same command could potentially be accidentally\n * registered twice, the value is an array rather than a set.\n */\ntype CommandRegistry = Map<NormalizedSequenceString, readonly CommandId[]>\n\nconst registeredGlobalCommands: CommandRegistry = new Map()\n\nexport function useDetectConflicts(scope: 'global' | 'scoped', commands: CommandEventHandlersMap) {\n  const registeredScopedCommands = useMemo<CommandRegistry>(() => new Map(), [])\n\n  const registeredCommands = scope === 'global' ? registeredGlobalCommands : registeredScopedCommands\n\n  /** Add commands to the global registry and log a warning if there is a conflict. */\n  useEffect(() => {\n    for (const [commandId, keybinding] of getKeybindings(CommandEventHandlersMap.keys(commands))) {\n      const alreadyRegisteredIds = registeredCommands.get(keybinding)?.filter(id => id !== commandId) ?? []\n\n      if (alreadyRegisteredIds.length)\n        // eslint-disable-next-line no-console\n        console.warn(\n          `The keybinding (${keybinding}) for the \"${commandId}\" command conflicts with the keybinding for the already-registered command(s) \"${alreadyRegisteredIds.join(\n            ', ',\n          )}\". This may result in unpredictable behavior.`,\n        )\n\n      registeredCommands.set(keybinding, alreadyRegisteredIds.concat(commandId))\n    }\n\n    return () => {\n      for (const [commandId, keybinding] of getKeybindings(CommandEventHandlersMap.keys(commands))) {\n        // If it was registered multiple times, be careful only to remove one so we can accurately keep warning\n        const remainingCommandIds = filterOnce(registeredCommands.get(keybinding) ?? [], commandId)\n\n        if (remainingCommandIds?.length) registeredCommands.set(keybinding, remainingCommandIds)\n        else registeredCommands.delete(keybinding)\n      }\n    }\n  }, [commands, registeredCommands])\n}\n","import type {NormalizedSequenceString} from '@github-ui/hotkey'\nimport {eventToHotkeyString, SequenceTracker} from '@github-ui/hotkey'\nimport {isShortcutAllowed} from '@github-ui/hotkey/keyboard-shortcuts-helper'\nimport {useCallback, useMemo, useRef} from 'react'\n\nimport type {CommandId} from './commands'\nimport {getKeybinding} from './commands'\n\nexport function useOnKeyDown(commandsIds: CommandId[], triggerCommand: (id: CommandId, event: KeyboardEvent) => void) {\n  const sequenceTracker = useMemo(() => new SequenceTracker(), [])\n\n  /** Map of keybinding string to command ID for fast lookup. */\n  const keybindingMap = useMemo(() => {\n    const map = new Map<NormalizedSequenceString, CommandId>()\n\n    for (const id of commandsIds) {\n      const keybinding = getKeybinding(id)\n      if (keybinding) map.set(keybinding, id)\n    }\n\n    return map\n  }, [commandsIds])\n\n  const lastEventRef = useRef<KeyboardEvent | null>(null)\n\n  return useCallback(\n    (event: React.KeyboardEvent | KeyboardEvent) => {\n      const nativeEvent = 'nativeEvent' in event ? event.nativeEvent : event\n\n      // This handler may be registered at both the DOM and React levels; in that case we want to avoid registering /\n      // handling the same event twice.\n      if (lastEventRef.current === nativeEvent) return\n      lastEventRef.current = nativeEvent\n\n      if (!isShortcutAllowed(nativeEvent)) {\n        sequenceTracker.reset()\n        return\n      }\n\n      sequenceTracker.registerKeypress(nativeEvent)\n\n      // First look for matching sequences, then for a matching hotkey for just this press\n      const commandId =\n        keybindingMap.get(sequenceTracker.sequence) ?? keybindingMap.get(eventToHotkeyString(nativeEvent))\n      if (!commandId) return\n\n      sequenceTracker.reset()\n      event.preventDefault()\n      event.stopPropagation()\n      // avoids double triggering an event if an element is rendered twice\n      // for example when a mobile version is hidden by CSS\n      nativeEvent.stopImmediatePropagation()\n\n      triggerCommand(commandId, nativeEvent)\n    },\n    [keybindingMap, sequenceTracker, triggerCommand],\n  )\n}\n","/** Return a copy of the array without the first encountered instance of `value` (based on `===` comparison). */\nexport function filterOnce<T>(array: readonly T[], value: T) {\n  let encounteredOnce = false\n  return array.filter(el => {\n    if (el === value && !encounteredOnce) {\n      encounteredOnce = true\n      return false\n    }\n    return true\n  })\n}\n","import {isMacOS} from '@github-ui/get-os'\nimport {type CompositionEventHandler, type KeyboardEventHandler, useCallback, useMemo, useRef} from 'react'\n\nconst ignoredKeysLowercase = new Set(['enter', 'tab'])\n\n/**\n * If the user is composing text, we don't want to respond to\n * the `Enter` key to perform a typical activation\n *\n * Composing text is a special case where the user is inputting\n * text from IME (e.g. Japanese) and we don't want to save the\n * item upon receiving the enter key as that may be part of the\n * selection of the character into the input.\n *\n * issue: https://github.com/github/memex/issues/5680\n * related: https://github.com/github/memex/issues/5680\n * related: https://github.com/facebook/react/issues/3926\n *\n * @param onKeyDown: A keyboard handler callback to wrap with a callback which ignores `ENTER`\n * and `TAB` while composing.\n *\n * @returns props which should be spread onto an `<input>` element\n **/\nexport const useIgnoreKeyboardActionsWhileComposing = (\n  onKeyDown: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement | HTMLDivElement>,\n) => {\n  const isComposingRef = useRef(false)\n  const hasCompositionEndedRef = useRef(false)\n\n  const handleComposition: CompositionEventHandler<HTMLInputElement | HTMLTextAreaElement | HTMLDivElement> =\n    useCallback(event => {\n      if (event.type === 'compositionstart') {\n        isComposingRef.current = true\n        hasCompositionEndedRef.current = false\n      }\n      if (event.type === 'compositionend') {\n        isComposingRef.current = false\n        hasCompositionEndedRef.current = true\n      }\n    }, [])\n\n  const wrappedOnKeyDown: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement | HTMLDivElement> = useCallback(\n    event => {\n      // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      if (ignoredKeysLowercase.has(event.key.toLowerCase()) && isComposingRef.current) {\n        return\n      }\n\n      /*\n       * Safari is known to fire the a unprintable keydown event of 229\n       * after the `compositionend` event.\n       * This is a workaround to prevent the keydown event from firing and causing\n       * the input to be saved.\n       *\n       * Related: https://bugs.webkit.org/show_bug.cgi?id=165004\n       * Related: https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/\n       */\n\n      if (isMacOS() && event.keyCode === 229 && hasCompositionEndedRef.current) {\n        hasCompositionEndedRef.current = false\n        return\n      }\n      onKeyDown(event)\n    },\n    [onKeyDown],\n  )\n\n  const inputProps = useMemo(() => {\n    return {\n      onCompositionStart: handleComposition,\n      onCompositionEnd: handleComposition,\n      onKeyDown: wrappedOnKeyDown,\n    }\n  }, [handleComposition, wrappedOnKeyDown])\n\n  return inputProps\n}\n","import {useLayoutEffect} from '@github-ui/use-layout-effect'\nimport {useRef} from 'react'\n\nexport function useTrackingRef<T>(value: T): React.MutableRefObject<T> {\n  const ref = useRef(value)\n\n  useLayoutEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref\n}\n","import {Text} from '@primer/react'\nimport capitalize from 'lodash-es/capitalize'\nimport type {ReactNode} from 'react'\nimport {Fragment, memo} from 'react'\n\nimport {isMacOS} from '@github-ui/get-os'\n\nexport interface KeyboardKeyProps {\n  /**\n   * The keys involved in this shortcut. These should be the full names of the keys as would\n   * be returned by `KeyboardEvent.key` (e.g. \"Control\", \"Shift\", \"ArrowUp\", \"a\", etc.).\n   *\n   * Combine keys with the \"+\" character to form chords. To represent the \"+\" key, use \"Plus\".\n   *\n   * Combine chords/keys with \" \" to form sequences that should be pressed one after the other. For example, \"a b\"\n   * represents \"a then b\". To represent the \" \" key, use \"Space\".\n   *\n   * The fake key name \"Mod\" can be used to represent \"Command\" on macOS and \"Control\" on other platforms.\n   *\n   * See https://github.com/github/hotkey for format details.\n   */\n  keys: string\n  /**\n   * Control the display format. Condensed is most useful in menus and tooltips, while\n   * the full form is better for prose.\n   */\n  format?: KeyboardKeyFormat\n  /**\n   * Set to `onEmphasis` for display on emphasis colors.\n   */\n  variant?: KeyboardKeyVariant\n}\n\ntype KeyboardKeyFormat = 'condensed' | 'full'\n\ntype KeyboardKeyVariant = 'normal' | 'onEmphasis'\n\n// In the below records, we don't intend to cover every single possible key - only those that\n// would be realistically used in shortcuts. For example, the Pause/Break key is not necessary\n// because it is not found on many keyboards.\n\n/**\n * Short-form iconic versions of keys. These should be intuitive and match icons on keyboards.\n */\nconst condensedKeys: Record<string, string> = {\n  alt: isMacOS() ? '⌥' : 'Alt', // the alt key _is_ the option key on MacOS - in the browser there is no \"option\" key\n  control: '⌃',\n  shift: '⇧',\n  meta: isMacOS() ? '⌘' : 'Win',\n  mod: isMacOS() ? '⌘' : '⌃',\n  pageup: 'PgUp',\n  pagedown: 'PgDn',\n  arrowup: '↑',\n  arrowdown: '↓',\n  arrowleft: '←',\n  arrowright: '→',\n  plus: '+', // needed to allow +-separated key names\n  backspace: '⌫',\n  delete: 'Del',\n  space: '␣', // allow consumers to use the word \"Space\" even though it's not the browser key name, because it's more readable in props\n  tab: '⇥',\n  enter: '⏎',\n  escape: 'Esc',\n  function: 'Fn',\n  capslock: 'CapsLock',\n  insert: 'Ins',\n  printscreen: 'PrtScn',\n}\n\n/**\n * Specific key displays for 'full' format. We still do show some icons (ie punctuation)\n * because that's more intuitive, but for the rest of keys we show the standard key name.\n */\nconst fullKeys: Record<string, string> = {\n  alt: isMacOS() ? 'Option' : 'Alt',\n  mod: isMacOS() ? 'Command' : 'Control',\n  '+': 'Plus',\n  pageup: 'Page Up',\n  pagedown: 'Page Down',\n  arrowup: 'Up Arrow',\n  arrowdown: 'Down Arrow',\n  arrowleft: 'Left Arrow',\n  arrowright: 'Right Arrow',\n  capslock: 'Caps Lock',\n  printscreen: 'Print Screen',\n}\n\n/**\n * Accessible key names intended to be read by a screen reader. This prevents screen\n * readers from expressing punctuation in speech, ie, reading a long pause instead of the\n * word \"period\".\n */\nconst keyDescriptions: Record<string, string> = {\n  alt: isMacOS() ? 'option' : 'alt',\n  meta: isMacOS() ? 'command' : 'Windows',\n  mod: isMacOS() ? 'command' : 'control',\n  // Screen readers may not be able to pronounce concatenated words - this provides a better experience\n  pageup: 'page up',\n  pagedown: 'page down',\n  arrowup: 'up arrow',\n  arrowdown: 'down arrow',\n  arrowleft: 'left arrow',\n  arrowright: 'right arrow',\n  capslock: 'caps lock',\n  printscreen: 'print screen',\n  // We don't need to represent _every_ symbol - only those found on standard keyboards.\n  // Other symbols should be avoided as keyboard shortcuts anyway.\n  // These should match the colloqiual names of the keys, not the names of the symbols. Ie,\n  // \"Equals\" not \"Equal Sign\", \"Dash\" not \"Minus\", \"Period\" not \"Dot\", etc.\n  '`': 'backtick',\n  '~': 'tilde',\n  '!': 'exclamation point',\n  '@': 'at',\n  '#': 'hash',\n  $: 'dollar sign',\n  '%': 'percent',\n  '^': 'caret',\n  '&': 'ampersand',\n  '*': 'asterisk',\n  '(': 'left parenthesis',\n  ')': 'right parenthesis',\n  _: 'underscore',\n  '-': 'dash',\n  '+': 'plus',\n  '=': 'equals',\n  '[': 'left bracket',\n  '{': 'left curly brace',\n  ']': 'right bracket',\n  '}': 'right curly brace',\n  '\\\\': 'backslash',\n  '|': 'pipe',\n  ';': 'semicolon',\n  ':': 'colon',\n  \"'\": 'single quote',\n  '\"': 'double quote',\n  ',': 'comma',\n  '<': 'left angle bracket',\n  '.': 'period',\n  '>': 'right angle bracket',\n  '/': 'forward slash',\n  '?': 'question mark',\n  ' ': 'space',\n}\n\n/**\n * Consistent sort order for modifier keys. There should never be more than one non-modifier\n * key in a shortcut, so we don't need to worry about sorting those - we just put them at\n * the end.\n */\nconst keySortPriorities = {\n  control: 1,\n  meta: 2,\n  alt: 3,\n  option: 4,\n  shift: 5,\n  function: 6,\n  /** Maximum value for pushing other keys to end. */\n  DEFAULT: 7,\n} as const\n\nfunction isValidKeySortPriority(priority: string): priority is keyof typeof keySortPriorities {\n  return priority in keySortPriorities\n}\n\nfunction getKeySortPriorityValue(priority: string) {\n  if (isValidKeySortPriority(priority)) {\n    return keySortPriorities[priority]\n  }\n  return keySortPriorities.DEFAULT\n}\n\n/** `kbd` element with style resets. */\nconst Kbd = ({children}: {children: ReactNode}) => (\n  <Text\n    as=\"kbd\"\n    sx={{\n      color: 'inherit',\n      fontFamily: 'inherit',\n      fontSize: 'inherit',\n      border: 'none',\n      background: 'none',\n      boxShadow: 'none',\n      p: 0,\n      lineHeight: 'unset',\n      position: 'relative',\n      overflow: 'visible',\n      verticalAlign: 'baseline',\n    }}\n  >\n    {children}\n  </Text>\n)\n\ninterface KeyProps {\n  name: string\n  format: KeyboardKeyFormat\n}\n\nconst keyToAccessibleString = (name: string) => keyDescriptions[name] || name\n\n/** A single key in a shortcut. */\nconst Key = ({name, format}: KeyProps) => (\n  // We represent each individual key as a <kbd> inside a single container <kbd> element.\n  // This requires a bit more styling to override the defaults but is the most semantic way\n  // to do it:\n  //\n  //  > To describe an input comprised of multiple keystrokes, you can nest multiple <kbd>\n  //  > elements, with an outer <kbd> element representing the overall input and each\n  //  > individual keystroke or component of the input enclosed within its own <kbd>.\n  //  > (https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd#representing_keystrokes_within_an_input)\n  <>\n    <span className=\"sr-only\">{keyToAccessibleString(name)}</span>\n    <span aria-hidden>{(format === 'condensed' ? condensedKeys[name] : fullKeys[name]) ?? capitalize(name)}</span>\n  </>\n)\n\n/** Split and sort the chord keys in standard order. */\nconst splitChord = (chord: string) =>\n  chord\n    .split('+')\n    .map(k => k.toLowerCase())\n    .sort(compareLowercaseKeys)\n\nconst compareLowercaseKeys = (a: string, b: string) => getKeySortPriorityValue(a) - getKeySortPriorityValue(b)\n\nconst chordToAccessibleString = (chord: string) => splitChord(chord).map(keyToAccessibleString).join(' ')\n\nconst Chord = ({keys, format = 'condensed', variant = 'normal'}: KeyboardKeyProps) => (\n  <Text\n    sx={{\n      display: 'inline-flex',\n      bg: variant === 'onEmphasis' ? 'transparent' : 'canvas.default',\n      color: variant === 'onEmphasis' ? 'fg.onEmphasis' : 'fg.muted',\n      border: '1px solid',\n      borderColor: 'border.default',\n      borderRadius: 2,\n      fontWeight: 'normal',\n      fontFamily: 'normal',\n      fontSize: 0,\n      p: 1,\n      gap: '0.5ch',\n      boxShadow: 'none',\n      verticalAlign: 'baseline',\n      overflow: 'hidden',\n      lineHeight: '10px',\n    }}\n  >\n    {splitChord(keys).map((k, i) => (\n      <Fragment key={i}>\n        {i > 0 && format === 'full' ? (\n          <span aria-hidden> + </span> // hiding the plus sign helps screen readers be more concise\n        ) : (\n          ' ' // space is nonvisual due to flex layout but critical for labelling / screen readers\n        )}\n\n        <Key name={k} format={format} />\n      </Fragment>\n    ))}\n  </Text>\n)\n\nconst splitSequence = (sequence: string) => sequence.split(' ')\n\nconst sequenceToAccessibleString = (sequence: string) =>\n  splitSequence(sequence).map(chordToAccessibleString).join(', then ')\n\n/**\n * A consistent and accessible keyboard shortcut representation.\n */\n// KeyboardKey is a good candidate for memoizing since props will almost never change\nexport const KeyboardKey = memo(({keys, format = 'condensed', variant}: KeyboardKeyProps) => (\n  <Kbd>\n    {splitSequence(keys).map((c, i) => (\n      <Fragment key={i}>\n        {\n          //  Since we audibly separate individual keys in chord with space, we need some other separator for chords in a sequence\n          i > 0 && (\n            <>\n              <span className=\"sr-only\">, then</span>{' '}\n            </>\n          )\n        }\n        <Chord keys={c} format={format} variant={variant} />\n      </Fragment>\n    ))}\n  </Kbd>\n))\nKeyboardKey.displayName = 'KeyboardKey'\n\n/**\n * AVOID: `KeyboardKey` is nearly always sufficient for providing both visible and accessible keyboard hints, and will\n * result in a good screen reader experience when used as the target for `aria-describedby` and `aria-labelledby`.\n * However, there may be cases where we need a plain string version, such as when building `aria-label` or\n * `aria-description`. In that case, this plain string builder can be used instead.\n *\n * NOTE that this string should _only_ be used when building `aria-label` or `aria-description` props (never rendered\n * to the visible DOM!) and should nearly always also be paired with a visible hint for sighted users. The only\n * exception is in cases where keyboard shortcuts exist solely to provide accessible alternatives to inaccessible\n * visible UI.\n */\nexport const getAccessibleKeyboardKeyString = (keys: string) => sequenceToAccessibleString(keys)\n\ntry{ Kbd.displayName ||= 'Kbd' } catch {}\ntry{ Chord.displayName ||= 'Chord' } catch {}","import type {ActionListItemProps} from '@primer/react'\nimport {ActionList} from '@primer/react'\nimport {forwardRef} from 'react'\n\nimport {type CommandId, getCommandMetadata} from '../commands'\nimport {useCommandsContext} from '../commands-context'\nimport {CommandKeybindingHint} from './CommandKeybindingHint'\n\nexport interface CommandActionListItemProps extends Omit<ActionListItemProps, 'onClick'> {\n  commandId: CommandId\n  /** If `children` is not provided, the item will render the command name by default. */\n  children?: ActionListItemProps['children']\n  /**\n   * Set the item description (components that wrap Primer components can't use the composable APIs, so this is\n   * required instead of `ActionList.Description`).\n   */\n  description?: React.ReactNode\n  /**\n   * Set the leading visual (components that wrap Primer components can't use the composable APIs, so this is\n   * required instead of `ActionList.LeadingVisual`).\n   */\n  leadingVisual?: React.ReactNode\n  /**\n   * Override the trailing visual (components that wrap Primer components can't use the composable APIs, so this is\n   * required instead of `ActionList.TrailingVisual`).\n   *\n   * By default, if a keybinding is configured for the command, this will be a visual keybinding hint. To disable this\n   * without providing an alternative, set `trailingVisual` to `null`.\n   */\n  trailingVisual?: React.ReactNode\n}\n\n/**\n * `CommandActionListItem` is a wrapper around `@primer/react` `ActionList.Item`, but instead of an `onClick` handler\n * it takes a command ID and handles clicks by emitting command trigger events.\n *\n * If the command is gated by a disabled feature flag, nothing will render.\n */\nexport const CommandActionListItem = forwardRef<HTMLLIElement, CommandActionListItemProps>(\n  ({commandId, children, description, leadingVisual, trailingVisual, ...forwardProps}, ref) => {\n    const metadata = getCommandMetadata(commandId)\n    const {triggerCommand} = useCommandsContext()\n\n    if (!metadata) return null\n\n    return (\n      <ActionList.Item {...forwardProps} onSelect={event => triggerCommand(commandId, event.nativeEvent)} ref={ref}>\n        {children ?? metadata.name}\n\n        {description && <ActionList.Description>{description}</ActionList.Description>}\n\n        {leadingVisual && <ActionList.LeadingVisual>{leadingVisual}</ActionList.LeadingVisual>}\n\n        {\n          // Allow disabling the keybinding hint by explicitly setting `trailingVisual` to `null`\n          trailingVisual !== null && (\n            <ActionList.TrailingVisual>\n              {trailingVisual ?? <CommandKeybindingHint commandId={commandId} format=\"condensed\" />}\n            </ActionList.TrailingVisual>\n          )\n        }\n      </ActionList.Item>\n    )\n  },\n)\nCommandActionListItem.displayName = 'ActionList.CommandItem'\n","import type {KeyboardKeyProps} from '@github-ui/keyboard-key'\nimport type {ButtonProps} from '@primer/react'\nimport {Button} from '@primer/react'\nimport {forwardRef} from 'react'\n\nimport {type CommandId, getCommandMetadata} from '../commands'\nimport {useCommandsContext} from '../commands-context'\nimport {CommandKeybindingHint} from './CommandKeybindingHint'\n\nexport interface CommandButtonProps extends Omit<ButtonProps, 'onClick'> {\n  commandId: CommandId\n  /** If `children` is not provided, the button will render the command name as its label by default. */\n  children?: ButtonProps['children']\n  /** If `true` and no `trailingVisual` is set, will render a keybinding hint as the trailing visual. */\n  showKeybindingHint?: boolean\n\n  keybindingHintVariant?: KeyboardKeyProps['variant']\n}\n\n/**\n * `CommandButton` is a wrapper around `@primer/react` `Button`, but instead of an `onClick` handler it takes a\n * command ID and handles clicks by emitting command trigger events.\n *\n * If the command is gated by a disabled feature flag, nothing will render.\n */\nexport const CommandButton = forwardRef<HTMLButtonElement, CommandButtonProps>(\n  ({commandId, children, trailingVisual, showKeybindingHint = false, keybindingHintVariant, ...forwardProps}, ref) => {\n    const metadata = getCommandMetadata(commandId)\n    const {triggerCommand} = useCommandsContext()\n\n    if (!metadata) return null\n\n    const variant = keybindingHintVariant ?? (forwardProps.variant === 'primary' ? 'onEmphasis' : 'normal')\n\n    // trailingVisual only accepts components, not JSX, so we have to jump through hoops to render anything more complex\n    // than an icon (https://github.com/primer/react/issues/3948)\n    // This becomes part of the label which gets noisy (but we don't want to hide this info from screen reader users),\n    // so we wrap in hidden parentheses to offset it a little and make it read better\n    const HintVisual = () => (\n      <>\n        <span className=\"sr-only\">(</span>\n        <CommandKeybindingHint commandId={commandId} format=\"condensed\" variant={variant} />\n        <span className=\"sr-only\">)</span>\n      </>\n    )\n\n    return (\n      <Button\n        {...forwardProps}\n        onClick={event => triggerCommand(commandId, event.nativeEvent)}\n        trailingVisual={trailingVisual ?? showKeybindingHint ? HintVisual : undefined}\n        ref={ref}\n      >\n        {children ?? metadata.name}\n      </Button>\n    )\n  },\n)\nCommandButton.displayName = 'CommandButton'\n\ntry{ HintVisual.displayName ||= 'HintVisual' } catch {}","import type {IconButtonProps} from '@primer/react'\nimport {IconButton} from '@primer/react'\nimport {forwardRef} from 'react'\n\nimport {type CommandId, getCommandMetadata} from '../commands'\nimport {useCommandsContext} from '../commands-context'\n\nexport interface CommandIconButtonProps extends Omit<IconButtonProps, 'onClick' | 'aria-label' | 'aria-labelledby'> {\n  commandId: CommandId\n  /** If `aria-label` is not provided, the button will render the command name as its label by default. */\n  ['aria-label']?: IconButtonProps['aria-label']\n}\n\n/**\n * `CommandButton` is a wrapper around `@primer/react` `Button`, but instead of an `onClick` handler it takes a\n * command ID and handles clicks by emitting command trigger events.\n *\n * If the command is gated by a disabled feature flag, nothing will render.\n */\nexport const CommandIconButton = forwardRef<HTMLButtonElement, CommandIconButtonProps>(\n  ({commandId, ['aria-label']: ariaLabel, ...forwardProps}, ref) => {\n    const metadata = getCommandMetadata(commandId)\n    const {triggerCommand} = useCommandsContext()\n\n    if (!metadata) return null\n\n    return (\n      <IconButton\n        {...forwardProps}\n        aria-label={ariaLabel ?? metadata.name}\n        onClick={event => triggerCommand(commandId, event.nativeEvent)}\n        ref={ref}\n      />\n    )\n  },\n)\nCommandIconButton.displayName = 'CommandIconButton'\n","import type {KeyboardKeyProps} from '@github-ui/keyboard-key'\nimport {KeyboardKey} from '@github-ui/keyboard-key'\n\nimport type {CommandId} from '../commands'\nimport {getKeybinding} from '../commands'\n\ninterface CommandKeybindingHintProps extends Omit<KeyboardKeyProps, 'keys'> {\n  commandId: CommandId\n}\n\n/** Renders a visual representing the keybinding for a command. If no keybinding is present, renders nothing. */\nexport const CommandKeybindingHint = ({commandId, ...props}: CommandKeybindingHintProps) => {\n  const keys = getKeybinding(commandId)\n  return keys ? <KeyboardKey keys={keys} {...props} /> : null\n}\n\ntry{ CommandKeybindingHint.displayName ||= 'CommandKeybindingHint' } catch {}","import {useCallback, useEffect} from 'react'\n\nimport {CommandEvent, CommandEventHandlersMap} from '../command-event'\nimport {CommandId} from '../commands'\nimport {useRegisterCommands} from '../commands-registry'\nimport {recordCommandTriggerEvent} from '../metrics'\nimport {useDetectConflicts} from '../use-detect-conflicts'\nimport {useOnKeyDown} from '../use-on-key-down'\n\nexport interface GlobalCommandsProps {\n  /** Map of command IDs to the corresponding event handler. */\n  commands: CommandEventHandlersMap\n}\n\n/**\n * There's no context for global commands because they can be defined in any react app on the page. So to be able to\n * trigger them without keyboard events, we emit and listen for custom DOM events instead.\n */\nconst customDomEventName = 'ui-command-trigger'\n\n/** Trigger a global command without a keyboard event. */\nexport function dispatchGlobalCommand(commandId: CommandId, domEvent: KeyboardEvent | MouseEvent) {\n  document.dispatchEvent(\n    new CustomEvent(customDomEventName, {\n      detail: {\n        commandId,\n        domEvent,\n      },\n    }),\n  )\n}\n\n/**\n * Provide command handlers that are activatable when focus is anywhere on the current page, including outside this\n * React app.\n *\n * @example\n * <GlobalCommands commands={{'issues:navigateToCode': navigateToCode}} />\n */\nexport const GlobalCommands = ({commands}: GlobalCommandsProps) => {\n  const triggerCommand = useCallback(\n    <T extends CommandId>(commandId: T, domEvent: KeyboardEvent | MouseEvent) => {\n      const handler = commands[commandId]\n\n      if (handler) {\n        const event = new CommandEvent(commandId)\n        try {\n          handler(event)\n        } finally {\n          recordCommandTriggerEvent(event, domEvent)\n        }\n      }\n    },\n    [commands],\n  )\n\n  const onKeyDown = useOnKeyDown(CommandEventHandlersMap.keys(commands), triggerCommand)\n\n  useDetectConflicts('global', commands)\n\n  useRegisterCommands(commands)\n\n  useEffect(() => {\n    // Types for this are a massive pain because _anything_ can emit an event with this name\n    const onCustomEvent = (event: Event) => {\n      const detail = 'detail' in event && typeof event.detail === 'object' ? event.detail : undefined\n      if (!detail) return\n\n      const commandId =\n        'commandId' in detail && typeof detail.commandId === 'string' && CommandId.is(detail.commandId)\n          ? detail.commandId\n          : undefined\n      const domEvent =\n        'domEvent' in detail && (detail.domEvent instanceof KeyboardEvent || detail.domEvent instanceof MouseEvent)\n          ? detail.domEvent\n          : undefined\n      if (!commandId || !domEvent) return\n\n      triggerCommand(commandId, domEvent)\n    }\n\n    document.addEventListener('keydown', onKeyDown)\n    document.addEventListener(customDomEventName, onCustomEvent)\n\n    return () => {\n      document.removeEventListener('keydown', onKeyDown)\n      document.removeEventListener(customDomEventName, onCustomEvent)\n    }\n  }, [onKeyDown, triggerCommand])\n\n  return null\n}\n\ntry{ GlobalCommands.displayName ||= 'GlobalCommands' } catch {}","import {useIgnoreKeyboardActionsWhileComposing} from '@github-ui/use-ignore-keyboard-actions-while-composing'\nimport {useTrackingRef} from '@github-ui/use-tracking-ref'\nimport {useRefObjectAsForwardedRef} from '@primer/react'\nimport type {ForwardRefComponent} from '@primer/react/lib-esm/utils/polymorphic'\nimport {forwardRef, useCallback, useEffect, useMemo, useRef} from 'react'\n\nimport {CommandEvent, CommandEventHandlersMap} from '../command-event'\nimport type {CommandId} from '../commands'\nimport {CommandsContextProvider, useCommandsContext} from '../commands-context'\nimport {useRegisterCommands} from '../commands-registry'\nimport {recordCommandTriggerEvent} from '../metrics'\nimport {useDetectConflicts} from '../use-detect-conflicts'\nimport {useOnKeyDown} from '../use-on-key-down'\n\nexport interface ScopedCommandsProps {\n  /** Map of command IDs to the corresponding event handler. */\n  commands: CommandEventHandlersMap\n  // 🧙 You Shall Not Pass:\n  onCompositionStart?: never\n  onCompositionEnd?: never\n  onKeyDown?: never\n}\n\n/**\n * Provide command handlers that only work when focus is within a certain part of the React component tree.\n *\n * NOTE: By default this component will wrap contents in a `div` with `display: contents`. In certain cases this breaks\n * the page's HTML structure (for example, when wrapping list items or table cells). In this case the component element\n * type can be overridden with `as`.\n * @example\n * <ScopedCommands commands={{\n *   'commentBox:formatBold': handleFormatBold\n * }}>\n *   <textarea></textarea>\n * </ScopedCommands>\n */\nexport const ScopedCommands = forwardRef(({commands, as: Wrapper = 'div', ...props}, forwardedRef) => {\n  // We store the commands object in a ref so the context won't change on every render and recalculate the whole child tree\n  const commandsRef = useTrackingRef(commands)\n\n  const parentContext = useCommandsContext()\n\n  const triggerCommand = useCallback(\n    <T extends CommandId>(commandId: T, domEvent: KeyboardEvent | MouseEvent) => {\n      const handler = commandsRef.current[commandId]\n\n      if (handler) {\n        const event = new CommandEvent(commandId)\n        try {\n          handler(event)\n        } finally {\n          recordCommandTriggerEvent(event, domEvent)\n        }\n      } else {\n        // no handler here, pass it on up\n        parentContext.triggerCommand(commandId, domEvent)\n      }\n    },\n    [commandsRef, parentContext],\n  )\n\n  useDetectConflicts('scoped', commands)\n\n  useRegisterCommands(commands)\n\n  const contextValue = useMemo(() => ({triggerCommand}), [triggerCommand])\n\n  const onKeyDown = useOnKeyDown(CommandEventHandlersMap.keys(commands), triggerCommand)\n\n  const keyDownProps = useIgnoreKeyboardActionsWhileComposing(onKeyDown)\n\n  const containerRef = useRef<HTMLDivElement>(null)\n  useRefObjectAsForwardedRef(forwardedRef, containerRef)\n\n  // Events first bubble up the DOM tree, then React handles them at the document level and rebuilds a 'synthetic'\n  // JSX tree. If we only handle our events with React, we cannot stop native DOM handlers from capturing those events\n  // first, even if we `stopPropagation`. For example, `@primer/behaviors` uses DOM handlers. So must handle events\n  // with DOM handlers so we can 'get to them first'. However, this is not good enough because with scoped commands we\n  // want the user to be able to fire commands when their focus is inside a menu overlay. This only works with React\n  // handlers because overlays are rendered inside Portals. So we must bind _both_ DOM and React handlers, allowing\n  // `useOnKeyDown` to handle ignoring duplicates.\n  useEffect(() => {\n    const target = containerRef.current\n    // we are lying by passing DOM events to a React handler, but it works in this case because the handler we passed in can accept DOM events\n    const handler = keyDownProps.onKeyDown as unknown as (e: KeyboardEvent) => void\n    if (!target) return\n\n    target.addEventListener('keydown', handler)\n    return () => target.removeEventListener('keydown', handler)\n  })\n\n  // Typically we want to avoid `display: contents` due to its rocky history in terms of web browser accessibility\n  // support. We've seen bugs appear, get fixed, and then regress again with this property. Unfortunately, there's no\n  // good alternative here. We must wrap contents in some element to intercept keyboard shortcuts, and wrapping\n  // contents in an element inherently introduces potential style and layout breaks. The only way to avoid that is\n  // with `display: contents`; otherwise consumers will have to deal with fixing everything that this breaks every time\n  // they use this component and they will be discouraged from adopting the new platform.\n  // If `as` is set to something other than `div`, we don't do this, because we assume the consumer is now thinking\n  // about styling and expects an element to appear.\n  const style = Wrapper !== 'div' ? undefined : {display: 'contents'}\n\n  return (\n    <CommandsContextProvider value={contextValue}>\n      <Wrapper style={style} {...props} {...keyDownProps} ref={containerRef} />\n    </CommandsContextProvider>\n  )\n}) as ForwardRefComponent<'div', ScopedCommandsProps>\nScopedCommands.displayName = 'ScopedCommands'\n"],"names":["OS","Android","iOS","macOS","Windows","Linux","Unknown","isMacOS","getOS","os","isMobileOS","ssrSafeWindow","navigator","userAgent","platform","userAgentData","macosPlatforms","indexOf","iosPlatforms","windowsPlatforms","test","mobile","isAndroid","isIOS","isWindows","isLinux","isDesktop","isMobile","chordOrKeyRegex","splitHotkeyString","hotkey","Array","from","matchAll","map","chord","areCharacterKeyShortcutsEnabled","keyboardShortcutsPreference","document","querySelector","content","isNonCharacterKeyShortcut","includes","nonEditableInputTypes","Set","isShortcutAllowed","eventToHotkeyString","event","allowCharacterKeyShortcuts","isEditableElement","target","HTMLElement","name","nodeName","toLowerCase","type","getAttribute","isReadonly","ariaReadOnly","has","isContentEditable","CommandEvent","constructor","commandId","CommandEventHandlersMap","entries","Object","filter","CommandId","is","entry","undefined","keys","CommandsContext","createContext","triggerCommand","dispatchGlobalCommand","CommandsContextProvider","Provider","useCommandsContext","useContext","registeredCommands","Map","getAllRegisteredCommands","uiCommandGroupMap","values","flat","serviceId","getServiceId","service","getServiceMetadata","set","id","commands","command","getCommandMetadata","defaultBinding","get","push","description","keybinding","useRegisterCommands","sourceId","useId","useEffect","delete","services","serviceCommandIds","str","split","metadata","featureFlag","isFeatureEnabled","toUpperCase","getKeybinding","normalizeSequence","getKeybindings","commandIds","client","AnalyticsClient","collectorUrl","CommandTriggerEvent","TYPE","send","context","sendEvent","recordCommandTriggerEvent","commandEvent","domEvent","command_id","trigger_type","KeyboardEvent","target_element_html","getOpeningHtmlTag","element","tagName","attributes","attr","value","replaceAll","join","registeredGlobalCommands","useDetectConflicts","scope","registeredScopedCommands","useMemo","alreadyRegisteredIds","length","console","warn","concat","remainingCommandIds","filterOnce","useOnKeyDown","commandsIds","sequenceTracker","SequenceTracker","keybindingMap","lastEventRef","useRef","useCallback","nativeEvent","current","reset","registerKeypress","sequence","preventDefault","stopPropagation","stopImmediatePropagation","array","encounteredOnce","el","ignoredKeysLowercase","useIgnoreKeyboardActionsWhileComposing","isComposingRef","hasCompositionEndedRef","handleComposition","wrappedOnKeyDown","key","keyCode","onKeyDown","onCompositionStart","onCompositionEnd","useTrackingRef","ref","useLayoutEffect","condensedKeys","alt","control","shift","meta","mod","pageup","pagedown","arrowup","arrowdown","arrowleft","arrowright","plus","backspace","space","tab","enter","escape","function","capslock","insert","printscreen","fullKeys","keyDescriptions","$","_","keySortPriorities","option","DEFAULT","getKeySortPriorityValue","priority","Kbd","children","Text","as","sx","color","fontFamily","fontSize","border","background","boxShadow","p","lineHeight","position","overflow","verticalAlign","keyToAccessibleString","Key","format","span","className","aria-hidden","capitalize","splitChord","k","sort","compareLowercaseKeys","a","b","Chord","variant","display","bg","borderColor","borderRadius","fontWeight","gap","i","Fragment","splitSequence","KeyboardKey","memo","c","displayName","CommandActionListItem","forwardRef","leadingVisual","trailingVisual","forwardProps","ActionList","Item","onSelect","Description","LeadingVisual","TrailingVisual","CommandKeybindingHint","HintVisual","CommandButton","showKeybindingHint","keybindingHintVariant","Button","onClick","CommandIconButton","ariaLabel","IconButton","aria-label","props","customDomEventName","dispatchEvent","CustomEvent","detail","GlobalCommands","handler","onCustomEvent","MouseEvent","addEventListener","removeEventListener","ScopedCommands","Wrapper","forwardedRef","commandsRef","parentContext","contextValue","keyDownProps","containerRef","useRefObjectAsForwardedRef","style"],"sourceRoot":""}
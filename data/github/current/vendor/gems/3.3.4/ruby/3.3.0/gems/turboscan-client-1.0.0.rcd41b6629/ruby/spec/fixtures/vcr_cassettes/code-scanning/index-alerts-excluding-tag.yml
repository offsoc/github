# generated by turbocassette ts/cassettes/sessions/getalerts_test.go
---
http_interactions:
  - request:
      method: post
      uri: http://localhost:8888/twirp/github.turboscan.Results/GetAlerts
      body:
        encoding: UTF-8
        string: |-
          {
            "excluded_rule_tags": [
              "maintainability"
            ],
            "repository_id": "351"
          }
      headers:
        Accept:
          - '*/*'
        Accept-Encoding:
          - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
        Content-Type:
          - application/json
    response:
      status:
        code: 200
        message: null
      headers:
        Content-Length:
          - "16386"
        Content-Type:
          - application/json
      body:
        encoding: UTF-8
        string: |-
          {
            "analysisExists": true,
            "nextCursor": "",
            "openCount": "3",
            "prevCursor": "",
            "resolvedCount": "0",
            "results": [
              {
                "createdAt": "0001-01-01T00:00:00Z",
                "fixedAt": null,
                "guid": "11111111-2222-3333-4444-000000000000",
                "isFixed": false,
                "messageMarkdown": "",
                "messageText": "The hard-coded value \"user:abcdefgh\" is used as [credentials](1).",
                "mostRecentInstance": {
                  "analysisKey": {
                    "analysisKey": ".github/workflows/w1.yml:job1",
                    "category": ".github/workflows/w1.yml:job1",
                    "commitOid": "b000000000000000000000000000000000000000",
                    "environment": "{}",
                    "id": "1",
                    "tool": "CodeQL"
                  },
                  "classification": [],
                  "commitOid": "b000000000000000000000000000000000000000",
                  "createdAt": "0001-01-01T00:00:00Z",
                  "hasFileClassification": false,
                  "isFixed": false,
                  "isOutdated": false,
                  "location": {
                    "endColumn": 49,
                    "endLine": 15,
                    "filePath": "main.js",
                    "startColumn": 34,
                    "startLine": 15
                  },
                  "messageText": "The hard-coded value \"user:abcdefgh\" is used as [credentials](1).",
                  "refNameBytes": "cmVmcy9oZWFkcy9tYXN0ZXI="
                },
                "number": 3,
                "resolution": "NO_RESOLUTION",
                "resolutionNote": "",
                "resolvedAt": null,
                "resolverId": 0,
                "rule": {
                  "fullDescription": "Hard-coding credentials in source code may enable an attacker to gain unauthorized access.",
                  "help": "# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response =\u003e response.json())\n.then(json =\u003e console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response =\u003e response.json())\n.then(json =\u003e console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n",
                  "helpUri": "",
                  "name": "js/hardcoded-credentials",
                  "queryUri": "https://github.com/github/codeql/blob/0000000000000000000000000000000000000000/javascript/ql/src/Security/CWE-798/HardcodedCredentials.ql",
                  "sarifIdentifier": "js/hardcoded-credentials",
                  "severity": "WARNING",
                  "shortDescription": "Hard-coded credentials",
                  "tags": [
                    "external/cwe/cwe-259",
                    "external/cwe/cwe-321",
                    "external/cwe/cwe-798",
                    "security"
                  ]
                },
                "ruleSeverity": "WARNING",
                "securitySeverity": "CRITICAL",
                "tool": {
                  "alertCount": "0",
                  "guid": "",
                  "name": "CodeQL",
                  "version": "2.4.1"
                },
                "updatedAt": "0001-01-01T00:00:00Z"
              },
              {
                "createdAt": "0001-01-01T00:00:00Z",
                "fixedAt": null,
                "guid": "11111111-2222-3333-4444-000000000000",
                "isFixed": false,
                "messageMarkdown": "",
                "messageText": "The hard-coded value \"abcdefgh\" is used as [password](1).",
                "mostRecentInstance": {
                  "analysisKey": {
                    "analysisKey": ".github/workflows/w1.yml:job1",
                    "category": ".github/workflows/w1.yml:job1",
                    "commitOid": "b000000000000000000000000000000000000000",
                    "environment": "{}",
                    "id": "1",
                    "tool": "CodeQL"
                  },
                  "classification": [],
                  "commitOid": "b000000000000000000000000000000000000000",
                  "createdAt": "0001-01-01T00:00:00Z",
                  "hasFileClassification": false,
                  "isFixed": false,
                  "isOutdated": false,
                  "location": {
                    "endColumn": 25,
                    "endLine": 10,
                    "filePath": "main.js",
                    "startColumn": 15,
                    "startLine": 10
                  },
                  "messageText": "The hard-coded value \"abcdefgh\" is used as [password](1).",
                  "refNameBytes": "cmVmcy9oZWFkcy9tYXN0ZXI="
                },
                "number": 2,
                "resolution": "NO_RESOLUTION",
                "resolutionNote": "",
                "resolvedAt": null,
                "resolverId": 0,
                "rule": {
                  "fullDescription": "Hard-coding credentials in source code may enable an attacker to gain unauthorized access.",
                  "help": "# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response =\u003e response.json())\n.then(json =\u003e console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response =\u003e response.json())\n.then(json =\u003e console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n",
                  "helpUri": "",
                  "name": "js/hardcoded-credentials",
                  "queryUri": "https://github.com/github/codeql/blob/0000000000000000000000000000000000000000/javascript/ql/src/Security/CWE-798/HardcodedCredentials.ql",
                  "sarifIdentifier": "js/hardcoded-credentials",
                  "severity": "WARNING",
                  "shortDescription": "Hard-coded credentials",
                  "tags": [
                    "external/cwe/cwe-259",
                    "external/cwe/cwe-321",
                    "external/cwe/cwe-798",
                    "security"
                  ]
                },
                "ruleSeverity": "WARNING",
                "securitySeverity": "CRITICAL",
                "tool": {
                  "alertCount": "0",
                  "guid": "",
                  "name": "CodeQL",
                  "version": "2.4.1"
                },
                "updatedAt": "0001-01-01T00:00:00Z"
              },
              {
                "createdAt": "0001-01-01T00:00:00Z",
                "fixedAt": null,
                "guid": "11111111-2222-3333-4444-000000000000",
                "isFixed": false,
                "messageMarkdown": "",
                "messageText": "The hard-coded value \"dbuser\" is used as [user name](1).",
                "mostRecentInstance": {
                  "analysisKey": {
                    "analysisKey": ".github/workflows/w1.yml:job1",
                    "category": ".github/workflows/w1.yml:job1",
                    "commitOid": "b000000000000000000000000000000000000000",
                    "environment": "{}",
                    "id": "1",
                    "tool": "CodeQL"
                  },
                  "classification": [],
                  "commitOid": "b000000000000000000000000000000000000000",
                  "createdAt": "0001-01-01T00:00:00Z",
                  "hasFileClassification": false,
                  "isFixed": false,
                  "isOutdated": false,
                  "location": {
                    "endColumn": 19,
                    "endLine": 7,
                    "filePath": "main.js",
                    "startColumn": 11,
                    "startLine": 7
                  },
                  "messageText": "The hard-coded value \"dbuser\" is used as [user name](1).",
                  "refNameBytes": "cmVmcy9oZWFkcy9tYXN0ZXI="
                },
                "number": 1,
                "resolution": "NO_RESOLUTION",
                "resolutionNote": "",
                "resolvedAt": null,
                "resolverId": 0,
                "rule": {
                  "fullDescription": "Hard-coding credentials in source code may enable an attacker to gain unauthorized access.",
                  "help": "# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response =\u003e response.json())\n.then(json =\u003e console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response =\u003e response.json())\n.then(json =\u003e console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n",
                  "helpUri": "",
                  "name": "js/hardcoded-credentials",
                  "queryUri": "https://github.com/github/codeql/blob/0000000000000000000000000000000000000000/javascript/ql/src/Security/CWE-798/HardcodedCredentials.ql",
                  "sarifIdentifier": "js/hardcoded-credentials",
                  "severity": "WARNING",
                  "shortDescription": "Hard-coded credentials",
                  "tags": [
                    "external/cwe/cwe-259",
                    "external/cwe/cwe-321",
                    "external/cwe/cwe-798",
                    "security"
                  ]
                },
                "ruleSeverity": "WARNING",
                "securitySeverity": "CRITICAL",
                "tool": {
                  "alertCount": "0",
                  "guid": "",
                  "name": "CodeQL",
                  "version": "2.4.1"
                },
                "updatedAt": "0001-01-01T00:00:00Z"
              }
            ],
            "searchStatus": "STATUS_OK",
            "totalCount": "3"
          }
      http_version: null
    recorded_at: Mon, 20 May 2024 18:11:44 GMT
recorded_with: ""

# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opentelemetry-exporter-otlp` gem.
# Please instead update this file by running `bin/tapioca gem opentelemetry-exporter-otlp`.

module Google::Protobuf::MessageExts::ClassMethods; end
module OpenTelemetry::Exporter; end
module OpenTelemetry::Exporter::OTLP; end

# An OpenTelemetry trace exporter that sends spans over HTTP as Protobuf encoded OTLP ExportTraceServiceRequests.
class OpenTelemetry::Exporter::OTLP::Exporter
  # @raise [ArgumentError]
  # @return [Exporter] a new instance of Exporter
  #
  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#49
  def initialize(endpoint: T.unsafe(nil), certificate_file: T.unsafe(nil), ssl_verify_mode: T.unsafe(nil), headers: T.unsafe(nil), compression: T.unsafe(nil), timeout: T.unsafe(nil), metrics_reporter: T.unsafe(nil)); end

  # Called to export sampled {OpenTelemetry::SDK::Trace::SpanData} structs.
  #
  # @param span_data [Enumerable<OpenTelemetry::SDK::Trace::SpanData>] the
  #   list of recorded {OpenTelemetry::SDK::Trace::SpanData} structs to be
  #   exported.
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] the result of the export.
  #
  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#77
  def export(span_data, timeout: T.unsafe(nil)); end

  # Called when {OpenTelemetry::SDK::Trace::TracerProvider#force_flush} is called, if
  # this exporter is registered to a {OpenTelemetry::SDK::Trace::TracerProvider}
  # object.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  #
  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#88
  def force_flush(timeout: T.unsafe(nil)); end

  # Called when {OpenTelemetry::SDK::Trace::TracerProvider#shutdown} is called, if
  # this exporter is registered to a {OpenTelemetry::SDK::Trace::TracerProvider}
  # object.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  #
  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#97
  def shutdown(timeout: T.unsafe(nil)); end

  private

  # The around_request is a private method that provides an extension
  # point for the exporters network calls. The default behaviour
  # is to not trace these operations.
  #
  # An example use case would be to prepend a patch, or extend this class
  # and override this method's behaviour to explicitly trace the HTTP request.
  # This would allow you to trace your export pipeline.
  #
  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#121
  def around_request; end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#376
  def as_otlp_any_value(value); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#368
  def as_otlp_key_value(key, value); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#309
  def as_otlp_span(span_data); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#357
  def as_otlp_span_kind(kind); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#349
  def as_otlp_status_code(code); end

  # @return [Boolean]
  #
  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#247
  def backoff?(retry_count:, reason:, retry_after: T.unsafe(nil)); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#273
  def encode(span_data); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#214
  def handle_redirect(location); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#105
  def http_connection(uri, ssl_verify_mode, certificate_file); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#229
  def log_request_failure(response_code); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#218
  def log_status(body); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#234
  def measure_request_duration; end

  # @raise [ArgumentError]
  #
  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#422
  def parse_headers(raw); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#394
  def prepare_endpoint(endpoint); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#409
  def prepare_headers(config_headers); end

  # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#125
  def send_bytes(bytes, timeout:); end

  class << self
    # source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#39
    def ssl_verify_mode; end
  end
end

# source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#37
OpenTelemetry::Exporter::OTLP::Exporter::DEFAULT_USER_AGENT = T.let(T.unsafe(nil), String)

# source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#34
OpenTelemetry::Exporter::OTLP::Exporter::ERROR_MESSAGE_INVALID_HEADERS = T.let(T.unsafe(nil), String)

# source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#25
OpenTelemetry::Exporter::OTLP::Exporter::FAILURE = T.let(T.unsafe(nil), Integer)

# Default timeouts in seconds.
#
# source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#29
OpenTelemetry::Exporter::OTLP::Exporter::KEEP_ALIVE_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#30
OpenTelemetry::Exporter::OTLP::Exporter::RETRY_COUNT = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#24
OpenTelemetry::Exporter::OTLP::Exporter::SUCCESS = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/exporter.rb#31
OpenTelemetry::Exporter::OTLP::Exporter::WRITE_TIMEOUT_SUPPORTED = T.let(T.unsafe(nil), TrueClass)

# Current OpenTelemetry OTLP exporter version
#
# source://opentelemetry-exporter-otlp//lib/opentelemetry/exporter/otlp/version.rb#11
OpenTelemetry::Exporter::OTLP::VERSION = T.let(T.unsafe(nil), String)

module Opentelemetry; end
module Opentelemetry::Proto; end
module Opentelemetry::Proto::Collector; end
module Opentelemetry::Proto::Collector::Trace; end
module Opentelemetry::Proto::Collector::Trace::V1; end

class Opentelemetry::Proto::Collector::Trace::V1::ExportTracePartialSuccess
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Opentelemetry::Proto::Collector::Trace::V1::ExportTraceServiceRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Opentelemetry::Proto::Collector::Trace::V1::ExportTraceServiceResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Opentelemetry::Proto::Common; end
module Opentelemetry::Proto::Common::V1; end

class Opentelemetry::Proto::Common::V1::AnyValue
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Opentelemetry::Proto::Common::V1::ArrayValue
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Opentelemetry::Proto::Common::V1::InstrumentationScope
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Opentelemetry::Proto::Common::V1::KeyValue
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Opentelemetry::Proto::Common::V1::KeyValueList
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Opentelemetry::Proto::Resource; end
module Opentelemetry::Proto::Resource::V1; end

class Opentelemetry::Proto::Resource::V1::Resource
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Opentelemetry::Proto::Trace; end
module Opentelemetry::Proto::Trace::V1; end

class Opentelemetry::Proto::Trace::V1::ResourceSpans
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Opentelemetry::Proto::Trace::V1::ScopeSpans
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Opentelemetry::Proto::Trace::V1::Span
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Opentelemetry::Proto::Trace::V1::Span::Event
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Opentelemetry::Proto::Trace::V1::Span::Link
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Opentelemetry::Proto::Trace::V1::Span::SpanKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://opentelemetry-exporter-otlp//lib/opentelemetry/proto/trace/v1/trace_pb.rb#84
Opentelemetry::Proto::Trace::V1::Span::SpanKind::SPAN_KIND_CLIENT = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-exporter-otlp//lib/opentelemetry/proto/trace/v1/trace_pb.rb#84
Opentelemetry::Proto::Trace::V1::Span::SpanKind::SPAN_KIND_CONSUMER = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-exporter-otlp//lib/opentelemetry/proto/trace/v1/trace_pb.rb#84
Opentelemetry::Proto::Trace::V1::Span::SpanKind::SPAN_KIND_INTERNAL = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-exporter-otlp//lib/opentelemetry/proto/trace/v1/trace_pb.rb#84
Opentelemetry::Proto::Trace::V1::Span::SpanKind::SPAN_KIND_PRODUCER = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-exporter-otlp//lib/opentelemetry/proto/trace/v1/trace_pb.rb#84
Opentelemetry::Proto::Trace::V1::Span::SpanKind::SPAN_KIND_SERVER = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-exporter-otlp//lib/opentelemetry/proto/trace/v1/trace_pb.rb#84
Opentelemetry::Proto::Trace::V1::Span::SpanKind::SPAN_KIND_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Opentelemetry::Proto::Trace::V1::Status
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Opentelemetry::Proto::Trace::V1::Status::StatusCode
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://opentelemetry-exporter-otlp//lib/opentelemetry/proto/trace/v1/trace_pb.rb#86
Opentelemetry::Proto::Trace::V1::Status::StatusCode::STATUS_CODE_ERROR = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-exporter-otlp//lib/opentelemetry/proto/trace/v1/trace_pb.rb#86
Opentelemetry::Proto::Trace::V1::Status::StatusCode::STATUS_CODE_OK = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-exporter-otlp//lib/opentelemetry/proto/trace/v1/trace_pb.rb#86
Opentelemetry::Proto::Trace::V1::Status::StatusCode::STATUS_CODE_UNSET = T.let(T.unsafe(nil), Integer)

class Opentelemetry::Proto::Trace::V1::TracesData
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

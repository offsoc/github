# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::RepositoryAddMember`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::RepositoryAddMember`.

class Hydro::Schemas::Github::V1::RepositoryAddMember
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      is_repository_advisory_workspace: T.nilable(T::Boolean),
      member: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      repository_owner_customer_id: T.nilable(Integer)
    ).void
  end
  def initialize(actor: nil, is_repository_advisory_workspace: nil, member: nil, repository: nil, repository_owner: nil, repository_owner_customer_id: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_is_repository_advisory_workspace; end

  sig { void }
  def clear_member; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_repository_owner_customer_id; end

  sig { returns(T::Boolean) }
  def is_repository_advisory_workspace; end

  sig { params(value: T::Boolean).void }
  def is_repository_advisory_workspace=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def member; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def member=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(Integer) }
  def repository_owner_customer_id; end

  sig { params(value: Integer).void }
  def repository_owner_customer_id=(value); end
end

syntax = "proto3";
package github.authentication.v0;

option go_package = "client/proto/authentication/v0";
option ruby_package = "Authnd::Proto";

import "google/protobuf/timestamp.proto";

// RegisterDeviceKeyRequest contains the parameters needed to register an auth device key or a recovery device key.
message RegisterDeviceKeyRequest {
	oneof kind {
		DeviceKeyRequest auth_key_request = 1;
		DeviceKeyRequest recovery_key_request = 2;
	}
}

// RegisterDeviceKeyRequest contains the parameters needed to register an device key.
message DeviceKeyRequest {
  // The user ID of the github account associated with the device.
  int64 user_id = 1;

  // The oauth access ID for the device performing the action.
  int64 oauth_access_id = 2;

  // The device name (e.g. Mona's iPhone).
  string device_name = 3;

  // The device model (e.g. iPhone12).
  string device_model = 4;

  // The device operating system (iOS or Android).
  string device_os = 5;

  // Tracks if the device has secure hardware supported key storage.
  bool is_hardware_backed = 6;

  // A public key (base64 encoded) from the key pair on the device used for authenticating the device.
  string public_key = 7;

  // A signature (base64 encoded) created by the device's private key used to ensure the validity of the provided public key. This is not used for authentication.
  string public_key_verification_signature = 8;

  // The message that was signed by the device's private key used to ensure the validity of the provided public key. This is not used for authentication.
  string public_key_verification_message = 9;
}

message RegisterDeviceKeyResponse {
  enum Result {
    // RESULT_UNKNOWN Should never be used because it is the zero value for this field and will be invisible when encoded into JSON.
    RESULT_UNKNOWN = 0;
    // RESULT_SUCCESS indicates the request was successful.
    RESULT_SUCCESS = 1;
    // RESULT_FAILED_GENERIC indicates the issue request failed. If possible a more descriptive result code should be used.
    RESULT_FAILED_GENERIC = -1;
  }

  // The overall result of processing the RegisterDeviceKeyResponse.
  Result result = 1;

  // The registration ID.
  int64 id = 2;

  // The public key will be considered invalid past this time.
  google.protobuf.Timestamp expires_at_time = 3;
}

// RevokeDeviceKeyRequest contains the parameters needed to revoke a device key so that it can no longer be used.
message RevokeDeviceKeyRequest {
	oneof kind {
		RevokeDeviceAuthKeyRequest revoke_auth_key_request = 1;
	}
}

message RevokeDeviceAuthKeyRequest {
  // The oauth access ID associated with the device key.
  int64 oauth_access_id = 1;
}

message RevokeDeviceKeyResponse {
  enum Result {
    // RESULT_UNKNOWN Should never be used because it is the zero value for this field and will be invisible when encoded into JSON.
    RESULT_UNKNOWN = 0;
    // RESULT_SUCCESS indicates the request was successful.
    RESULT_SUCCESS = 1;
    // RESULT_FAILED_NOT_FOUND indicates that the requested device key was not found.
    RESULT_FAILED_NOT_FOUND = 2;
    // RESULT_KEY_ALREADY_REVOKED indicates that the requested device key has already been revoked.
    RESULT_KEY_ALREADY_REVOKED = 3;
    // RESULT_FAILED_GENERIC indicates the revoke request failed. If possible a more descriptive result code should be used.
    RESULT_FAILED_GENERIC = -1;
  }

  // The overall result of processing the RevokeDeviceKeyResponse.
  Result result = 1;
}

// RevokeDeviceKeysRequest contains the parameters needed to revoke all device keys for a given user so that it can no longer be used.
message RevokeDeviceKeysRequest {
  oneof kind {
    RevokeDeviceAuthKeysRequest revoke_auth_keys_request = 1;
    RevokeAllDeviceKeysByOauthAccessesRequest revoke_all_device_keys_by_oauth_accesses_request = 2;
    RevokeAllDeviceKeysByIdsRequest revoke_all_device_keys_by_ids_request = 3;
  }
}

message RevokeDeviceAuthKeysRequest {
  // The user ID of the github account associated with their device keys.
  int64 user_id = 1;
}

message RevokeAllDeviceKeysByOauthAccessesRequest {
  // The oauth access IDs associated with the user.
  repeated int64 oauth_access_ids = 1;
}

message RevokeAllDeviceKeysByIdsRequest {
  // The device key IDs.
  repeated int64 ids = 1;
}

message RevokeDeviceKeysResponse {
  enum Result {
    // RESULT_UNKNOWN Should never be used because it is the zero value for this field and will be invisible when encoded into JSON.
    RESULT_UNKNOWN = 0;
    // RESULT_SUCCESS indicates the request was successful.
    RESULT_SUCCESS = 1;
    // RESULT_FAILED_GENERIC indicates the revoke request failed. If possible a more descriptive result code should be used.
    RESULT_FAILED_GENERIC = -1;
  }
  // The overall result of processing the request
  Result result = 1;

  // The oauth access IDs of the revoked device keys.
  repeated int64 oauth_access_ids = 2;
}

// RegistrationsRequest contains the parameters needed to find device key registrations for a user.
message RegistrationsRequest {
	int64 user_id = 1;
}

message DeviceKeyRegistration {
  // The device ID.
  int64 id = 1;

  // The device name (e.g. Mona's phone).
  string device_name = 2;

  // The device model (e.g. iPhone12).
  string device_model = 3;

  // The device os (e.g. iOS).
  string device_os = 4;

  // The key was registered at this time.
  google.protobuf.Timestamp created_at_time = 5;

  // The key will be considered invalid past this time.
  google.protobuf.Timestamp expires_at_time = 6;

  // The key was last used at this time.
  google.protobuf.Timestamp last_used_at_time = 7;

  // The device oauth access ID.
  int64 oauth_access_id = 8;
}

// FindDeviceKeyRegistrationsRequest contains the parameters needed to find device key registrations.
message FindDeviceKeyRegistrationsRequest {
	oneof kind {
    RegistrationsRequest auth_registrations_request = 1;
	}
}

message FindDeviceKeyRegistrationsResponse {
  enum Result {
      // RESULT_UNKNOWN Should never be used because it is the zero value for this field and will be invisible when encoded into JSON.
      RESULT_UNKNOWN = 0;
      // RESULT_SUCCESS indicates the request was successful.
      RESULT_SUCCESS = 1;
      // RESULT_FAILED_GENERIC indicates the request failed. If possible a more descriptive result code should be used.
      RESULT_FAILED_GENERIC = -1;
  }

  // The overall result of processing the request.
  Result result = 1;

  // A list of device key registrations associated with the user.
  repeated DeviceKeyRegistration registrations = 2;
}

// RegistrationRequest contains the parameters needed to find a device key registration for a user device.
message RegistrationRequest {
	int64 user_id = 1;
  int64 oauth_access_id = 2;
}

// FindDeviceKeyRegistrationRequest contains the parameters needed resolve if a user device has a registered device key.
message FindDeviceKeyRegistrationRequest {
  oneof kind {
    RegistrationRequest auth_registration_request = 1;
	}
}
message FindDeviceKeyRegistrationResponse {
  enum Result {
      // RESULT_UNKNOWN Should never be used because it is the zero value for this field and will be invisible when encoded into JSON.
      RESULT_UNKNOWN = 0;
      // RESULT_SUCCESS indicates the request was successful.
      RESULT_SUCCESS = 1;
      // RESULT_FAILED_NOT_FOUND indicates that a registered device key couldn't be found for the user device.
      RESULT_FAILED_NOT_FOUND = 2;
      // RESULT_FAILED_GENERIC indicates the request failed. If possible a more descriptive result code should be used.
      RESULT_FAILED_GENERIC = -1;
  }

  // The overall result of processing the request.
  Result result = 1;

  // The device key registration associated with the user device.
  DeviceKeyRegistration registration = 2;
}

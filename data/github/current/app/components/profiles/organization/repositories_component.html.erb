<div class="border-top py-3 mb-3">
  <h4 class="f4 text-normal mb-3">Repositories</h4>

  <% repositories.each do |repository| %>
    <article class="mb-3">
      <h1 class="h5">
        <%= render(Primer::Beta::Link.new(
          href: repository_path(repository),
          display: :inline_block,
          itemprop: "name codeRepository",
          data: hovercard_data_attributes_for_repository(repository),
        )) do %>
          <%= repository.name %>
        <% end %>
        <% if repository.visibility == 'private' %>
          <%= render(Primer::Beta::Label.new(
            title: "Label: Private",
            scheme: :secondary,
            vertical_align: :middle,
            ml: 1,
            mb: 1,
            test_selector: "type",
          )) do %>
            Private
          <% end %>
        <% end %>
      </h1>

      <% if repository.fork? %>
        <%= render(Primer::Beta::Text.new(color: :muted, mb: 1, font_size: 6)) do %>
          Forked from
          <%= render(Primer::Beta::Link.new(
            href: repository_path(repository.parent),
            muted: true,
            classes: "Link--inTextBlock",
          )) do %>
            <%= repository.parent.name_with_display_owner %>
          <% end %>
        <% end %>
      <% end %>

      <% if repository.mirror? %>
        <%= render(Primer::Beta::Text.new(tag: :p, color: :muted, mb: 1, font_size: 6)) do %>
          Mirrored from
          <%= render(Primer::Beta::Link.new(href: repository.mirror.url, muted: true, classes: "Link--inTextBlock")) do %>
            <%= truncate(repository.mirror.url, :length => 100) %>
          <% end %>
        <% end %>
      <% end %>

      <%= render(Primer::Box.new(color: :muted, font_size: 6, mt: 1)) do %>
        <% if repository.primary_language.present? %>
          <%= render(Languages::BadgeComponent.new(name: repository.primary_language.name, mr: 2)) %>
        <% end %>

        <% if repository.stargazer_count > 0 %>
          <%= render(Primer::Beta::Link.new(
            href: gh_stargazers_path(repository),
            muted: true,
            mr: 2,
            classes: "no-wrap",
          )) do %>
            <%= render(Primer::Beta::Octicon.new(icon: "star")) %>
            <%= number_with_delimiter repository.stargazer_count %>
          <% end %>
        <% else %>
          <%= render(Primer::Beta::Text.new(mr: 3, color: :muted)) do %>
            <%= render(Primer::Beta::Octicon.new(icon: "star")) %>0
          <% end %>
        <% end %>

        <%= render(Primer::Beta::Text.new(classes: "no-wrap")) do %>
          <% if repository.pushed_at %>
            Updated <%= time_ago_in_words_js repository.pushed_at %>
          <% else %>
            Created <%= time_ago_in_words_js repository.created_at %>
          <% end %>
        <% end %>
      <% end %>
    </article>
  <% end %>

  <% if show_view_all_repositories? %>
    <div class="d-flex flex-wrap flex-items-center mb-3">
      <%= render(Primer::Beta::Link.new(
            href: org_repositories_path(organization),
            muted: true,
          ).with_content("View all repositories")) %>
    </div>
  <% end %>

  <div class="d-flex flex-wrap flex-items-center">
    <%= render(Primer::Beta::Button.new(
          tag: :a,
          size: :small,
          href: new_org_repository_path(organization),
        ).with_content("Create new repository")) %>

    <% if GitHub.porter_available? %>
      <%= render(Primer::Beta::Link.new(
            href: new_repository_import_path,
            ml: 3,
            font_size: 6,
          ).with_content("Import")) %>
    <% end %>
  </div>
</div>

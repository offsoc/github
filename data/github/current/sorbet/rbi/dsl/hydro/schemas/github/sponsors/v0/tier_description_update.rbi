# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Sponsors::V0::TierDescriptionUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Sponsors::V0::TierDescriptionUpdate`.

class Hydro::Schemas::Github::Sponsors::V0::TierDescriptionUpdate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      current_tier_description: T.nilable(String),
      listing: T.nilable(Hydro::Schemas::Github::Marketplace::V0::Entities::MarketplaceListing),
      previous_tier_description: T.nilable(String),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      sponsored_developer: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      sponsors_count_on_tier: T.nilable(Integer),
      tier: T.nilable(Hydro::Schemas::Github::Marketplace::V0::Entities::MarketplaceListingBillingPlan)
    ).void
  end
  def initialize(actor: nil, current_tier_description: nil, listing: nil, previous_tier_description: nil, request_context: nil, sponsored_developer: nil, sponsors_count_on_tier: nil, tier: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_current_tier_description; end

  sig { void }
  def clear_listing; end

  sig { void }
  def clear_previous_tier_description; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_sponsored_developer; end

  sig { void }
  def clear_sponsors_count_on_tier; end

  sig { void }
  def clear_tier; end

  sig { returns(String) }
  def current_tier_description; end

  sig { params(value: String).void }
  def current_tier_description=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Marketplace::V0::Entities::MarketplaceListing)) }
  def listing; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Marketplace::V0::Entities::MarketplaceListing)).void }
  def listing=(value); end

  sig { returns(String) }
  def previous_tier_description; end

  sig { params(value: String).void }
  def previous_tier_description=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def sponsored_developer; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def sponsored_developer=(value); end

  sig { returns(Integer) }
  def sponsors_count_on_tier; end

  sig { params(value: Integer).void }
  def sponsors_count_on_tier=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Marketplace::V0::Entities::MarketplaceListingBillingPlan)) }
  def tier; end

  sig do
    params(
      value: T.nilable(Hydro::Schemas::Github::Marketplace::V0::Entities::MarketplaceListingBillingPlan)
    ).void
  end
  def tier=(value); end
end

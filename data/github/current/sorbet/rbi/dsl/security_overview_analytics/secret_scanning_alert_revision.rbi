# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `SecurityOverviewAnalytics::SecretScanningAlertRevision`.
# Please instead update this file by running `bin/tapioca dsl SecurityOverviewAnalytics::SecretScanningAlertRevision`.

class SecurityOverviewAnalytics::SecretScanningAlertRevision
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).void)
      ).returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).void)
      ).returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).void)
      ).returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).void)
      ).returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).void)
      ).returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::SecurityOverviewAnalytics::SecretScanningAlertRevision]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::SecretScanningAlertRevision)) }
    def fifth; end

    sig { returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::SecurityOverviewAnalytics::SecretScanningAlertRevision)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).void)
      ).returns(T.nilable(T::Enumerator[::SecurityOverviewAnalytics::SecretScanningAlertRevision]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::SecurityOverviewAnalytics::SecretScanningAlertRevision]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::SecurityOverviewAnalytics::SecretScanningAlertRevision]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).void)
      ).returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).void)
      ).returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).void)
      ).returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision)
    end
    def find_or_initialize_by(attributes, &block); end

    sig do
      params(
        signed_id: T.untyped,
        purpose: T.untyped
      ).returns(T.nilable(::SecurityOverviewAnalytics::SecretScanningAlertRevision))
    end
    def find_signed(signed_id, purpose: nil); end

    sig do
      params(
        signed_id: T.untyped,
        purpose: T.untyped
      ).returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision)
    end
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def first!; end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::SecretScanningAlertRevision)) }
    def forty_two; end

    sig { returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def forty_two!; end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::SecretScanningAlertRevision)) }
    def fourth; end

    sig { returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).void)
      ).returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::SecurityOverviewAnalytics::SecretScanningAlertRevision).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::SecretScanningAlertRevision)) }
    def second; end

    sig { returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def second!; end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::SecretScanningAlertRevision)) }
    def second_to_last; end

    sig { returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def second_to_last!; end

    sig { returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def take!; end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::SecretScanningAlertRevision)) }
    def third; end

    sig { returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def third!; end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::SecretScanningAlertRevision)) }
    def third_to_last; end

    sig { returns(::SecurityOverviewAnalytics::SecretScanningAlertRevision) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::SecurityOverviewAnalytics::Date) }
    def build_date(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SecurityOverviewAnalytics::Date) }
    def build_next_revision_date(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SecurityOverviewAnalytics::Repository) }
    def build_repository_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SecurityOverviewAnalytics::Date) }
    def create_date(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SecurityOverviewAnalytics::Date) }
    def create_date!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SecurityOverviewAnalytics::Date) }
    def create_next_revision_date(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SecurityOverviewAnalytics::Date) }
    def create_next_revision_date!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SecurityOverviewAnalytics::Repository) }
    def create_repository_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SecurityOverviewAnalytics::Repository) }
    def create_repository_metadata!(*args, &blk); end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::Date)) }
    def date; end

    sig { params(value: T.nilable(::SecurityOverviewAnalytics::Date)).void }
    def date=(value); end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::Date)) }
    def next_revision_date; end

    sig { params(value: T.nilable(::SecurityOverviewAnalytics::Date)).void }
    def next_revision_date=(value); end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::Date)) }
    def reload_date; end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::Date)) }
    def reload_next_revision_date; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::Repository)) }
    def reload_repository_metadata; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    sig { returns(T.nilable(::SecurityOverviewAnalytics::Repository)) }
    def repository_metadata; end

    sig { params(value: T.nilable(::SecurityOverviewAnalytics::Repository)).void }
    def repository_metadata=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_date; end

    sig { returns(Promise[T.untyped]) }
    def async_next_revision_date; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_metadata; end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def alert_bypassed; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def alert_bypassed=(value); end

    sig { returns(T::Boolean) }
    def alert_bypassed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def alert_bypassed_before_last_save; end

    sig { returns(T.untyped) }
    def alert_bypassed_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_bypassed_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def alert_bypassed_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def alert_bypassed_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def alert_bypassed_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def alert_bypassed_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def alert_bypassed_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def alert_bypassed_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def alert_bypassed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def alert_bypassed_was; end

    sig { void }
    def alert_bypassed_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def alert_created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def alert_created_at=(value); end

    sig { returns(T::Boolean) }
    def alert_created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_created_at_before_last_save; end

    sig { returns(T.untyped) }
    def alert_created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def alert_created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def alert_created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def alert_created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def alert_created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def alert_created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_created_at_was; end

    sig { void }
    def alert_created_at_will_change!; end

    sig { returns(::Integer) }
    def alert_number; end

    sig { params(value: ::Integer).returns(::Integer) }
    def alert_number=(value); end

    sig { returns(T::Boolean) }
    def alert_number?; end

    sig { returns(T.nilable(::Integer)) }
    def alert_number_before_last_save; end

    sig { returns(T.untyped) }
    def alert_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_number_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def alert_number_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def alert_number_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def alert_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def alert_number_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def alert_number_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def alert_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def alert_number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def alert_number_was; end

    sig { void }
    def alert_number_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_reopened_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_reopened_at=(value); end

    sig { returns(T::Boolean) }
    def alert_reopened_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_reopened_at_before_last_save; end

    sig { returns(T.untyped) }
    def alert_reopened_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_reopened_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def alert_reopened_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def alert_reopened_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def alert_reopened_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_reopened_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def alert_reopened_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def alert_reopened_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_reopened_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_reopened_at_was; end

    sig { void }
    def alert_reopened_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def alert_resolution; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def alert_resolution=(value); end

    sig { returns(T::Boolean) }
    def alert_resolution?; end

    sig { returns(T.nilable(::Integer)) }
    def alert_resolution_before_last_save; end

    sig { returns(T.untyped) }
    def alert_resolution_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_resolution_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def alert_resolution_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def alert_resolution_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def alert_resolution_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def alert_resolution_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def alert_resolution_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def alert_resolution_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def alert_resolution_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def alert_resolution_was; end

    sig { void }
    def alert_resolution_will_change!; end

    sig { returns(T::Boolean) }
    def alert_resolved; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def alert_resolved=(value); end

    sig { returns(T::Boolean) }
    def alert_resolved?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_resolved_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_resolved_at=(value); end

    sig { returns(T::Boolean) }
    def alert_resolved_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_resolved_at_before_last_save; end

    sig { returns(T.untyped) }
    def alert_resolved_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_resolved_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def alert_resolved_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def alert_resolved_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def alert_resolved_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_resolved_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def alert_resolved_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def alert_resolved_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_resolved_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_resolved_at_was; end

    sig { void }
    def alert_resolved_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def alert_resolved_before_last_save; end

    sig { returns(T.untyped) }
    def alert_resolved_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_resolved_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def alert_resolved_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def alert_resolved_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def alert_resolved_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def alert_resolved_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def alert_resolved_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def alert_resolved_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def alert_resolved_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def alert_resolved_was; end

    sig { void }
    def alert_resolved_will_change!; end

    sig { returns(::String) }
    def alert_type; end

    sig { params(value: ::String).returns(::String) }
    def alert_type=(value); end

    sig { returns(T::Boolean) }
    def alert_type?; end

    sig { returns(T.nilable(::String)) }
    def alert_type_before_last_save; end

    sig { returns(T.untyped) }
    def alert_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def alert_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def alert_type_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def alert_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def alert_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def alert_type_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def alert_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def alert_type_previously_was; end

    sig { returns(::String) }
    def alert_type_provider; end

    sig { params(value: ::String).returns(::String) }
    def alert_type_provider=(value); end

    sig { returns(T::Boolean) }
    def alert_type_provider?; end

    sig { returns(T.nilable(::String)) }
    def alert_type_provider_before_last_save; end

    sig { returns(T.untyped) }
    def alert_type_provider_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_type_provider_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def alert_type_provider_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def alert_type_provider_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def alert_type_provider_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def alert_type_provider_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def alert_type_provider_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def alert_type_provider_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def alert_type_provider_previously_was; end

    sig { returns(T.nilable(::String)) }
    def alert_type_provider_was; end

    sig { void }
    def alert_type_provider_will_change!; end

    sig { returns(::String) }
    def alert_type_slug; end

    sig { params(value: ::String).returns(::String) }
    def alert_type_slug=(value); end

    sig { returns(T::Boolean) }
    def alert_type_slug?; end

    sig { returns(T.nilable(::String)) }
    def alert_type_slug_before_last_save; end

    sig { returns(T.untyped) }
    def alert_type_slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_type_slug_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def alert_type_slug_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def alert_type_slug_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def alert_type_slug_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def alert_type_slug_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def alert_type_slug_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def alert_type_slug_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def alert_type_slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def alert_type_slug_was; end

    sig { void }
    def alert_type_slug_will_change!; end

    sig { returns(T.nilable(::String)) }
    def alert_type_was; end

    sig { void }
    def alert_type_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def alert_updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def alert_updated_at=(value); end

    sig { returns(T::Boolean) }
    def alert_updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def alert_updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def alert_updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def alert_updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def alert_updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def alert_updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def alert_updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_updated_at_was; end

    sig { void }
    def alert_updated_at_will_change!; end

    sig { returns(::Integer) }
    def alert_validity; end

    sig { params(value: ::Integer).returns(::Integer) }
    def alert_validity=(value); end

    sig { returns(T::Boolean) }
    def alert_validity?; end

    sig { returns(T.nilable(::Integer)) }
    def alert_validity_before_last_save; end

    sig { returns(T.untyped) }
    def alert_validity_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_validity_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def alert_validity_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def alert_validity_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def alert_validity_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def alert_validity_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def alert_validity_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def alert_validity_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def alert_validity_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_validity_updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_validity_updated_at=(value); end

    sig { returns(T::Boolean) }
    def alert_validity_updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_validity_updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def alert_validity_updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def alert_validity_updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def alert_validity_updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def alert_validity_updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def alert_validity_updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_validity_updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def alert_validity_updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def alert_validity_updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_validity_updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alert_validity_updated_at_was; end

    sig { void }
    def alert_validity_updated_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def alert_validity_was; end

    sig { void }
    def alert_validity_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def date_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def date_id=(value); end

    sig { returns(T::Boolean) }
    def date_id?; end

    sig { returns(T.nilable(::Integer)) }
    def date_id_before_last_save; end

    sig { returns(T.untyped) }
    def date_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def date_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def date_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def date_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def date_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def date_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def date_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def date_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def date_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def date_id_was; end

    sig { void }
    def date_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def next_revision_date_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def next_revision_date_id=(value); end

    sig { returns(T::Boolean) }
    def next_revision_date_id?; end

    sig { returns(T.nilable(::Integer)) }
    def next_revision_date_id_before_last_save; end

    sig { returns(T.untyped) }
    def next_revision_date_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def next_revision_date_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def next_revision_date_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def next_revision_date_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def next_revision_date_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def next_revision_date_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def next_revision_date_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def next_revision_date_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def next_revision_date_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def next_revision_date_id_was; end

    sig { void }
    def next_revision_date_id_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_alert_bypassed!; end

    sig { void }
    def restore_alert_created_at!; end

    sig { void }
    def restore_alert_number!; end

    sig { void }
    def restore_alert_reopened_at!; end

    sig { void }
    def restore_alert_resolution!; end

    sig { void }
    def restore_alert_resolved!; end

    sig { void }
    def restore_alert_resolved_at!; end

    sig { void }
    def restore_alert_type!; end

    sig { void }
    def restore_alert_type_provider!; end

    sig { void }
    def restore_alert_type_slug!; end

    sig { void }
    def restore_alert_updated_at!; end

    sig { void }
    def restore_alert_validity!; end

    sig { void }
    def restore_alert_validity_updated_at!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_date_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_next_revision_date_id!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_slice4!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_alert_bypassed; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_bypassed?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_alert_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_alert_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_number?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_alert_reopened_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_reopened_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_alert_resolution; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_resolution?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_alert_resolved; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_resolved?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_alert_resolved_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_resolved_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_alert_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_type?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_alert_type_provider; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_type_provider?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_alert_type_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_type_slug?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_alert_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_alert_validity; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_validity?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_alert_validity_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_alert_validity_updated_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_date_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_date_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_next_revision_date_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_next_revision_date_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_slice4; end

    sig { returns(T::Boolean) }
    def saved_change_to_slice4?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::Integer)) }
    def slice4; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def slice4=(value); end

    sig { returns(T::Boolean) }
    def slice4?; end

    sig { returns(T.nilable(::Integer)) }
    def slice4_before_last_save; end

    sig { returns(T.untyped) }
    def slice4_before_type_cast; end

    sig { returns(T::Boolean) }
    def slice4_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def slice4_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def slice4_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def slice4_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def slice4_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def slice4_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def slice4_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def slice4_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def slice4_was; end

    sig { void }
    def slice4_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_bypassed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_reopened_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_resolution?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_resolved?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_resolved_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_type_provider?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_type_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_validity?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alert_validity_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_date_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_next_revision_date_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slice4?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::SecurityOverviewAnalytics::SecretScanningAlertRevision } }

    sig { returns(T::Array[::SecurityOverviewAnalytics::SecretScanningAlertRevision]) }
    def to_a; end

    sig { returns(T::Array[::SecurityOverviewAnalytics::SecretScanningAlertRevision]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::SecurityOverviewAnalytics::SecretScanningAlertRevision } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::SecurityOverviewAnalytics::SecretScanningAlertRevision } }

    sig do
      params(
        records: T.any(::SecurityOverviewAnalytics::SecretScanningAlertRevision, T::Enumerable[T.any(::SecurityOverviewAnalytics::SecretScanningAlertRevision, T::Enumerable[::SecurityOverviewAnalytics::SecretScanningAlertRevision])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::SecurityOverviewAnalytics::SecretScanningAlertRevision, T::Enumerable[T.any(::SecurityOverviewAnalytics::SecretScanningAlertRevision, T::Enumerable[::SecurityOverviewAnalytics::SecretScanningAlertRevision])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::SecurityOverviewAnalytics::SecretScanningAlertRevision, T::Enumerable[T.any(::SecurityOverviewAnalytics::SecretScanningAlertRevision, T::Enumerable[::SecurityOverviewAnalytics::SecretScanningAlertRevision])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::SecurityOverviewAnalytics::SecretScanningAlertRevision]) }
    def load_target; end

    sig do
      params(
        records: T.any(::SecurityOverviewAnalytics::SecretScanningAlertRevision, T::Enumerable[T.any(::SecurityOverviewAnalytics::SecretScanningAlertRevision, T::Enumerable[::SecurityOverviewAnalytics::SecretScanningAlertRevision])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::SecurityOverviewAnalytics::SecretScanningAlertRevision, T::Enumerable[T.any(::SecurityOverviewAnalytics::SecretScanningAlertRevision, T::Enumerable[::SecurityOverviewAnalytics::SecretScanningAlertRevision])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::SecurityOverviewAnalytics::SecretScanningAlertRevision, T::Enumerable[T.any(::SecurityOverviewAnalytics::SecretScanningAlertRevision, T::Enumerable[::SecurityOverviewAnalytics::SecretScanningAlertRevision])])
      ).returns(T::Array[::SecurityOverviewAnalytics::SecretScanningAlertRevision])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::SecurityOverviewAnalytics::SecretScanningAlertRevision]) }
    def target; end

    sig { returns(T::Array[::SecurityOverviewAnalytics::SecretScanningAlertRevision]) }
    def to_a; end

    sig { returns(T::Array[::SecurityOverviewAnalytics::SecretScanningAlertRevision]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::SecurityOverviewAnalytics::SecretScanningAlertRevision } }

    sig { returns(T::Array[::SecurityOverviewAnalytics::SecretScanningAlertRevision]) }
    def to_a; end

    sig { returns(T::Array[::SecurityOverviewAnalytics::SecretScanningAlertRevision]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::SecurityOverviewAnalytics::SecretScanningAlertRevision } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

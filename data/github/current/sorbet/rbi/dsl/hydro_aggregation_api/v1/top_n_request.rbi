# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `HydroAggregationApi::V1::TopNRequest`.
# Please instead update this file by running `bin/tapioca dsl HydroAggregationApi::V1::TopNRequest`.

class HydroAggregationApi::V1::TopNRequest
  sig do
    params(
      aggregations: T.nilable(T.any(Google::Protobuf::RepeatedField[HydroAggregationApi::V1::Aggregation], T::Array[HydroAggregationApi::V1::Aggregation])),
      data_source: T.nilable(String),
      dimension: T.nilable(String),
      filter: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      from: T.nilable(Google::Protobuf::Timestamp),
      limit: T.nilable(Integer),
      metric: T.nilable(String),
      noop: T.nilable(T::Boolean),
      query_id: T.nilable(String),
      to: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(aggregations: T.unsafe(nil), data_source: nil, dimension: nil, filter: T.unsafe(nil), from: nil, limit: nil, metric: nil, noop: nil, query_id: nil, to: nil); end

  sig { returns(Google::Protobuf::RepeatedField[HydroAggregationApi::V1::Aggregation]) }
  def aggregations; end

  sig { params(value: Google::Protobuf::RepeatedField[HydroAggregationApi::V1::Aggregation]).void }
  def aggregations=(value); end

  sig { void }
  def clear_aggregations; end

  sig { void }
  def clear_data_source; end

  sig { void }
  def clear_dimension; end

  sig { void }
  def clear_filter; end

  sig { void }
  def clear_from; end

  sig { void }
  def clear_limit; end

  sig { void }
  def clear_metric; end

  sig { void }
  def clear_noop; end

  sig { void }
  def clear_query_id; end

  sig { void }
  def clear_to; end

  sig { returns(String) }
  def data_source; end

  sig { params(value: String).void }
  def data_source=(value); end

  sig { returns(String) }
  def dimension; end

  sig { params(value: String).void }
  def dimension=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def filter; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def filter=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def from; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def from=(value); end

  sig { returns(Integer) }
  def limit; end

  sig { params(value: Integer).void }
  def limit=(value); end

  sig { returns(String) }
  def metric; end

  sig { params(value: String).void }
  def metric=(value); end

  sig { returns(T::Boolean) }
  def noop; end

  sig { params(value: T::Boolean).void }
  def noop=(value); end

  sig { returns(String) }
  def query_id; end

  sig { params(value: String).void }
  def query_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def to; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def to=(value); end
end

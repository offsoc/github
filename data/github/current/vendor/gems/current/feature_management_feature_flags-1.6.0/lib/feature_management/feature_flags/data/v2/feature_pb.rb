# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: feature_management/feature_flags/data/v2/feature.proto

require 'google/protobuf'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("feature_management/feature_flags/data/v2/feature.proto", :syntax => :proto3) do
    add_message "feature_management.feature_flags.data.v2.MonolithOptimizedFeatureFlag" do
      optional :name, :string, 1
      optional :owning_service, :string, 2
      optional :state, :enum, 3, "feature_management.feature_flags.data.v2.FeatureFlagState"
      optional :percentage_of_calls, :double, 4
      optional :percentage_of_actors, :double, 5
      repeated :custom_gates, :string, 6
      repeated :segments, :string, 7
      repeated :default_segment_actors, :string, 8
    end
    add_message "feature_management.feature_flags.data.v2.FeatureFlag" do
      optional :name, :string, 1
      optional :owning_service, :string, 2
      optional :state, :enum, 3, "feature_management.feature_flags.data.v2.FeatureFlagState"
      optional :percentage_of_calls, :double, 4
      optional :percentage_of_actors, :double, 5
      repeated :custom_gates, :string, 6
      repeated :segments, :string, 7
      map :default_segment_actors, :string, :bool, 8
    end
    add_enum "feature_management.feature_flags.data.v2.FeatureFlagState" do
      value :INVALID, 0
      value :DISABLED, 1
      value :PARTIALLY_SHIPPED, 2
      value :SHIPPED, 3
    end
  end
end

module FeatureManagement
  module FeatureFlags
    module Data
      module V2
        MonolithOptimizedFeatureFlag = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("feature_management.feature_flags.data.v2.MonolithOptimizedFeatureFlag").msgclass
        FeatureFlag = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("feature_management.feature_flags.data.v2.FeatureFlag").msgclass
        FeatureFlagState = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("feature_management.feature_flags.data.v2.FeatureFlagState").enummodule
      end
    end
  end
end

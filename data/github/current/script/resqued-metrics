#!vendor/ruby/current/bin/ruby
# frozen_string_literal: true

require_relative "../lib/resqued/worker_metrics"

stats = Resqued::WorkerMetrics.new.generate

def gauge(name, value, tags = {})
  puts({ type: :gauge, name: name, value: value, tags: tags }.to_json)
end

stats.aqueduct_workers_by_state.each do |stat|
  tags = { state: stat.state, listener_state: stat.listener_state, backend: stat.backend }
  gauge "aqueduct.workers.by_state.count", stat.count, tags
end

gauge "aqueduct.workers.idle.count", stats.aqueduct_idle_workers
gauge "aqueduct.workers.active.count", stats.aqueduct_active_workers
gauge "aqueduct.workers.count", stats.aqueduct_total_workers
gauge "aqueduct.workers.stale.count", stats.aqueduct_stale_workers

gauge "aqueduct.listeners.sha.count", stats.aqueduct_listener_shas
gauge "aqueduct.workers.sha.count", stats.aqueduct_worker_shas
gauge "aqueduct.listeners.stalled.count", stats.aqueduct_stalled_listeners

stats.aqueduct_workers_by_shard.each do |stat|
  tags = { backend: stat.backend, shard: stat.shard }
  gauge "aqueduct.workers.by_shard.count", stat.count, tags
end

stats.aqueduct_active_workers_by_shard.each do |stat|
  tags = { backend: stat.backend, shard: stat.shard }
  gauge "aqueduct.workers.active.by_shard.count", stat.count, tags
end

stats.aqueduct_active_workers_by_queue.each do |stat|
  tags = { queue: stat.queue }
  gauge "aqueduct.workers.active_by_queue.count", stat.count, tags
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Feeds::V0::ImplicitRelationshipChanged`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Feeds::V0::ImplicitRelationshipChanged`.

class Hydro::Schemas::Github::Feeds::V0::ImplicitRelationshipChanged
  sig do
    params(
      active_at: T.nilable(Google::Protobuf::Timestamp),
      actor_id: T.nilable(Integer),
      change_type: T.nilable(T.any(Symbol, Integer)),
      relationship: T.nilable(T.any(Symbol, Integer)),
      resource_id: T.nilable(Integer),
      resource_type: T.nilable(T.any(Symbol, Integer)),
      variable_weight: T.nilable(Float)
    ).void
  end
  def initialize(active_at: nil, actor_id: nil, change_type: nil, relationship: nil, resource_id: nil, resource_type: nil, variable_weight: nil); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def active_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def active_at=(value); end

  sig { returns(Integer) }
  def actor_id; end

  sig { params(value: Integer).void }
  def actor_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def change_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def change_type=(value); end

  sig { void }
  def clear_active_at; end

  sig { void }
  def clear_actor_id; end

  sig { void }
  def clear_change_type; end

  sig { void }
  def clear_relationship; end

  sig { void }
  def clear_resource_id; end

  sig { void }
  def clear_resource_type; end

  sig { void }
  def clear_variable_weight; end

  sig { returns(T.any(Symbol, Integer)) }
  def relationship; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def relationship=(value); end

  sig { returns(Integer) }
  def resource_id; end

  sig { params(value: Integer).void }
  def resource_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def resource_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def resource_type=(value); end

  sig { returns(Float) }
  def variable_weight; end

  sig { params(value: Float).void }
  def variable_weight=(value); end
end

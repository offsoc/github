# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `xmlcanonicalizer` gem.
# Please instead update this file by running `bin/tapioca gem xmlcanonicalizer`.

# source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#11
module XML
  include ::REXML
end

# source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#14
module XML::Util; end

# source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#80
class XML::Util::NamespaceNode
  # @return [NamespaceNode] a new instance of NamespaceNode
  #
  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#82
  def initialize(prefix, uri); end

  # Returns the value of attribute prefix.
  #
  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#81
  def prefix; end

  # Returns the value of attribute uri.
  #
  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#81
  def uri; end
end

# source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#88
class XML::Util::XmlCanonicalizer
  # @return [XmlCanonicalizer] a new instance of XmlCanonicalizer
  #
  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#102
  def initialize(with_comments, excl_c14n); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#115
  def add_inclusive_namespaces(prefix_list, element, visible_namespaces); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#129
  def canonicalize(document); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#134
  def canonicalize_element(element, logging = T.unsafe(nil)); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#367
  def is_namespace_decl(attribute); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#294
  def is_namespace_node(namespace_uri); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#298
  def is_namespace_rendered(prefix, uri); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#320
  def is_node_visible(node); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#373
  def is_text_node(type); end

  # Returns the value of attribute logger.
  #
  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#89
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#89
  def logger=(_arg0); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#328
  def normalize_string(input, type); end

  # Returns the value of attribute prefix_list.
  #
  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#89
  def prefix_list; end

  # Sets the attribute prefix_list
  #
  # @param value the value to set the attribute prefix_list to.
  #
  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#89
  def prefix_list=(_arg0); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#378
  def remove_whitespace(string); end

  # @return [Boolean]
  #
  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#362
  def white_text?(text); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#256
  def write_attribute_axis(node); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#150
  def write_document_node(document); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#187
  def write_element_node(node, visible); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#207
  def write_namespace_axis(node, visible); end

  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#162
  def write_node(node); end

  # input.each_byte{|b|
  # if (b ==60 && (type == NODE_TYPE_ATTRIBUTE || is_text_node(type)))
  # 	sb = sb + "&lt;"
  # elsif (b == 62 && is_text_node(type))
  # 	sb = sb + "&gt;"
  # elsif (b == 38 && (is_text_node(type) || is_text_node(type))) #Ampersand
  # 	sb = sb + "&amp;"
  # elsif (b == 34 && is_text_node(type)) #Quote
  # 	sb = sb + "&quot;"
  # elsif (b == 9 && is_text_node(type)) #Tabulator
  # 	sb = sb + "&#x9;"
  # elsif (b == 11 && is_text_node(type)) #CR
  # 	sb = sb + "&#xA;"
  # elsif (b == 13 && (type == NODE_TYPE_ATTRIBUTE || (is_text_node(type) && type != NODE_TYPE_WHITESPACE) || type == NODE_TYPE_COMMENT || type == NODE_TYPE_PI))
  # 	sb = sb + "&#xD;"
  # elsif (b == 13)
  # 	next
  # else
  # 	sb = sb.concat(b)
  # end
  # }
  # sb
  # end
  #
  # source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#356
  def write_text_node(node, visible); end
end

# source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#93
XML::Util::XmlCanonicalizer::AFTER_DOC_ELEMENT = T.let(T.unsafe(nil), Integer)

# source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#91
XML::Util::XmlCanonicalizer::BEFORE_DOC_ELEMENT = T.let(T.unsafe(nil), Integer)

# source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#92
XML::Util::XmlCanonicalizer::INSIDE_DOC_ELEMENT = T.let(T.unsafe(nil), Integer)

# source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#95
XML::Util::XmlCanonicalizer::NODE_TYPE_ATTRIBUTE = T.let(T.unsafe(nil), Integer)

# source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#97
XML::Util::XmlCanonicalizer::NODE_TYPE_COMMENT = T.let(T.unsafe(nil), Integer)

# source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#98
XML::Util::XmlCanonicalizer::NODE_TYPE_PI = T.let(T.unsafe(nil), Integer)

# source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#99
XML::Util::XmlCanonicalizer::NODE_TYPE_TEXT = T.let(T.unsafe(nil), Integer)

# source://xmlcanonicalizer//lib/xml/util/xmlcanonicalizer.rb#96
XML::Util::XmlCanonicalizer::NODE_TYPE_WHITESPACE = T.let(T.unsafe(nil), Integer)

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::References::V1::RefWithCommitTime`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::References::V1::RefWithCommitTime`.

class GitHub::Spokes::Proto::References::V1::RefWithCommitTime
  sig do
    params(
      commit_time: T.nilable(GitHub::Spokes::Proto::Types::V1::Timestamp),
      peeled_id: T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID),
      reference: T.nilable(GitHub::Spokes::Proto::Types::V1::Reference),
      target_id: T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)
    ).void
  end
  def initialize(commit_time: nil, peeled_id: nil, reference: nil, target_id: nil); end

  sig { void }
  def clear_commit_time; end

  sig { void }
  def clear_peeled_id; end

  sig { void }
  def clear_reference; end

  sig { void }
  def clear_target_id; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Timestamp)) }
  def commit_time; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Timestamp)).void }
  def commit_time=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)) }
  def peeled_id; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)).void }
  def peeled_id=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Reference)) }
  def reference; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Reference)).void }
  def reference=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)) }
  def target_id; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)).void }
  def target_id=(value); end
end

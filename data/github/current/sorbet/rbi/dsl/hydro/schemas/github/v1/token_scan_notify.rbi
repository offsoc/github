# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::TokenScanNotify`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::TokenScanNotify`.

class Hydro::Schemas::Github::V1::TokenScanNotify
  sig do
    params(
      open_alert_count: T.nilable(Integer),
      repository_id: T.nilable(Integer),
      scan_source: T.nilable(T.any(Symbol, Integer)),
      scope: T.nilable(String),
      token_groups: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::TokenScanNotify::TokenGroup], T::Array[Hydro::Schemas::Github::V1::TokenScanNotify::TokenGroup])),
      total_scan_alert_count: T.nilable(Integer)
    ).void
  end
  def initialize(open_alert_count: nil, repository_id: nil, scan_source: nil, scope: nil, token_groups: T.unsafe(nil), total_scan_alert_count: nil); end

  sig { void }
  def clear_open_alert_count; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_scan_source; end

  sig { void }
  def clear_scope; end

  sig { void }
  def clear_token_groups; end

  sig { void }
  def clear_total_scan_alert_count; end

  sig { returns(Integer) }
  def open_alert_count; end

  sig { params(value: Integer).void }
  def open_alert_count=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def scan_source; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def scan_source=(value); end

  sig { returns(String) }
  def scope; end

  sig { params(value: String).void }
  def scope=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::TokenScanNotify::TokenGroup]) }
  def token_groups; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::TokenScanNotify::TokenGroup]).void }
  def token_groups=(value); end

  sig { returns(Integer) }
  def total_scan_alert_count; end

  sig { params(value: Integer).void }
  def total_scan_alert_count=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ImportableRelease`.
# Please instead update this file by running `bin/tapioca dsl ImportableRelease`.

class ImportableRelease
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def states; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::ImportableRelease).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableRelease).void)
      ).returns(::ImportableRelease)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableRelease).void)
      ).returns(::ImportableRelease)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableRelease).void)
      ).returns(::ImportableRelease)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableRelease).void)
      ).returns(::ImportableRelease)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableRelease).void)
      ).returns(::ImportableRelease)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::ImportableRelease]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::ImportableRelease)) }
    def fifth; end

    sig { returns(::ImportableRelease) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::ImportableRelease)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::ImportableRelease) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::ImportableRelease).void)
      ).returns(T.nilable(T::Enumerator[::ImportableRelease]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::ImportableRelease]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::ImportableRelease]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableRelease).void)
      ).returns(::ImportableRelease)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableRelease).void)
      ).returns(::ImportableRelease)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableRelease).void)
      ).returns(::ImportableRelease)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::ImportableRelease)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::ImportableRelease) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::ImportableRelease) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::ImportableRelease) }
    def first!; end

    sig { returns(T.nilable(::ImportableRelease)) }
    def forty_two; end

    sig { returns(::ImportableRelease) }
    def forty_two!; end

    sig { returns(T.nilable(::ImportableRelease)) }
    def fourth; end

    sig { returns(::ImportableRelease) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::ImportableRelease) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::ImportableRelease).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ImportableRelease).void)
      ).returns(::ImportableRelease)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::ImportableRelease).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::ImportableRelease).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::ImportableRelease)) }
    def second; end

    sig { returns(::ImportableRelease) }
    def second!; end

    sig { returns(T.nilable(::ImportableRelease)) }
    def second_to_last; end

    sig { returns(::ImportableRelease) }
    def second_to_last!; end

    sig { returns(::ImportableRelease) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::ImportableRelease) }
    def take!; end

    sig { returns(T.nilable(::ImportableRelease)) }
    def third; end

    sig { returns(::ImportableRelease) }
    def third!; end

    sig { returns(T.nilable(::ImportableRelease)) }
    def third_to_last; end

    sig { returns(::ImportableRelease) }
    def third_to_last!; end
  end

  module EnumMethodsModule; end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::User)) }
    def author; end

    sig { params(value: T.nilable(::User)).void }
    def author=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_author(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Discussion) }
    def build_discussion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAction) }
    def build_repository_action(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryActionRelease) }
    def build_repository_action_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryLatestRelease) }
    def build_repository_latest_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryStack) }
    def build_repository_stack(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryStackRelease) }
    def build_repository_stack_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_author(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_author!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Discussion) }
    def create_discussion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Discussion) }
    def create_discussion!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAction) }
    def create_repository_action(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryAction) }
    def create_repository_action!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryActionRelease) }
    def create_repository_action_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryActionRelease) }
    def create_repository_action_release!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryLatestRelease) }
    def create_repository_latest_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryLatestRelease) }
    def create_repository_latest_release!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryStack) }
    def create_repository_stack(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryStack) }
    def create_repository_stack!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryStackRelease) }
    def create_repository_stack_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryStackRelease) }
    def create_repository_stack_release!(*args, &blk); end

    sig { returns(T.nilable(::Discussion)) }
    def discussion; end

    sig { params(value: T.nilable(::Discussion)).void }
    def discussion=(value); end

    sig { returns(T::Array[T.untyped]) }
    def mention_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def mention_ids=(ids); end

    # This method is created by ActiveRecord on the `Release` class because it declared `has_many :mentions, through: :release_mentions`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def mentions; end

    sig { params(value: T::Enumerable[::User]).void }
    def mentions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def package_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def package_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def package_version_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def package_version_ids=(ids); end

    # This method is created by ActiveRecord on the `Release` class because it declared `has_many :package_versions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Registry::PackageVersion::PrivateCollectionProxy) }
    def package_versions; end

    sig { params(value: T::Enumerable[::Registry::PackageVersion]).void }
    def package_versions=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def package_versions_attributes=(attributes); end

    # This method is created by ActiveRecord on the `Release` class because it declared `has_many :packages, through: :package_versions`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Registry::Package::PrivateCollectionProxy) }
    def packages; end

    sig { params(value: T::Enumerable[::Registry::Package]).void }
    def packages=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Release` class because it declared `has_many :reactions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reaction::PrivateCollectionProxy) }
    def reactions; end

    sig { params(value: T::Enumerable[::Reaction]).void }
    def reactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def release_asset_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def release_asset_ids=(ids); end

    # This method is created by ActiveRecord on the `Release` class because it declared `has_many :release_assets`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReleaseAsset::PrivateCollectionProxy) }
    def release_assets; end

    sig { params(value: T::Enumerable[::ReleaseAsset]).void }
    def release_assets=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def release_assets_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def release_mention_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def release_mention_ids=(ids); end

    # This method is created by ActiveRecord on the `Release` class because it declared `has_many :release_mentions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReleaseMention::PrivateCollectionProxy) }
    def release_mentions; end

    sig { params(value: T::Enumerable[::ReleaseMention]).void }
    def release_mentions=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_author; end

    sig { returns(T.nilable(::Discussion)) }
    def reload_discussion; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::RepositoryAction)) }
    def reload_repository_action; end

    sig { returns(T.nilable(::RepositoryActionRelease)) }
    def reload_repository_action_release; end

    sig { returns(T.nilable(::RepositoryLatestRelease)) }
    def reload_repository_latest_release; end

    sig { returns(T.nilable(::RepositoryStack)) }
    def reload_repository_stack; end

    sig { returns(T.nilable(::RepositoryStackRelease)) }
    def reload_repository_stack_release; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    sig { returns(T.nilable(::RepositoryAction)) }
    def repository_action; end

    sig { params(value: T.nilable(::RepositoryAction)).void }
    def repository_action=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def repository_action_attributes=(attributes); end

    sig { returns(T.nilable(::RepositoryActionRelease)) }
    def repository_action_release; end

    sig { params(value: T.nilable(::RepositoryActionRelease)).void }
    def repository_action_release=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def repository_action_release_attributes=(attributes); end

    sig { returns(T.nilable(::RepositoryLatestRelease)) }
    def repository_latest_release; end

    sig { params(value: T.nilable(::RepositoryLatestRelease)).void }
    def repository_latest_release=(value); end

    sig { returns(T.nilable(::RepositoryStack)) }
    def repository_stack; end

    sig { params(value: T.nilable(::RepositoryStack)).void }
    def repository_stack=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def repository_stack_attributes=(attributes); end

    sig { returns(T.nilable(::RepositoryStackRelease)) }
    def repository_stack_release; end

    sig { params(value: T.nilable(::RepositoryStackRelease)).void }
    def repository_stack_release=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def repository_stack_release_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def uploaded_asset_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def uploaded_asset_ids=(ids); end

    # This method is created by ActiveRecord on the `Release` class because it declared `has_many :uploaded_assets`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReleaseAsset::PrivateCollectionProxy) }
    def uploaded_assets; end

    sig { params(value: T::Enumerable[::ReleaseAsset]).void }
    def uploaded_assets=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def drafted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def latest(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_author; end

    sig { returns(Promise[T.untyped]) }
    def async_discussion; end

    sig { returns(Promise[T.untyped]) }
    def async_mentions; end

    sig { returns(Promise[T.untyped]) }
    def async_package_versions; end

    sig { returns(Promise[T.untyped]) }
    def async_packages; end

    sig { returns(Promise[T.untyped]) }
    def async_reactions; end

    sig { returns(Promise[T.untyped]) }
    def async_release_assets; end

    sig { returns(Promise[T.untyped]) }
    def async_release_mentions; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_action; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_action_release; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_latest_release; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_stack; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_stack_release; end

    sig { returns(Promise[T.untyped]) }
    def async_uploaded_assets; end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def author_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def author_id=(value); end

    sig { returns(T::Boolean) }
    def author_id?; end

    sig { returns(T.nilable(::Integer)) }
    def author_id_before_last_save; end

    sig { returns(T.untyped) }
    def author_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def author_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def author_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def author_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def author_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def author_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def author_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def author_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def author_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def author_id_was; end

    sig { void }
    def author_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def body; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def body=(value); end

    sig { returns(T::Boolean) }
    def body?; end

    sig { returns(T.nilable(::String)) }
    def body_before_last_save; end

    sig { returns(T.untyped) }
    def body_before_type_cast; end

    sig { returns(T::Boolean) }
    def body_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def body_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def body_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def body_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def body_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def body_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def body_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def body_previously_was; end

    sig { returns(T.nilable(::String)) }
    def body_was; end

    sig { void }
    def body_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def formatter; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def formatter=(value); end

    sig { returns(T::Boolean) }
    def formatter?; end

    sig { returns(T.nilable(::String)) }
    def formatter_before_last_save; end

    sig { returns(T.untyped) }
    def formatter_before_type_cast; end

    sig { returns(T::Boolean) }
    def formatter_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def formatter_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def formatter_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def formatter_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def formatter_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def formatter_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def formatter_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def formatter_previously_was; end

    sig { returns(T.nilable(::String)) }
    def formatter_was; end

    sig { void }
    def formatter_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.untyped) }
    def name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.untyped) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def name_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def name_previously_was; end

    sig { returns(T.untyped) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.untyped) }
    def pending_tag; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def pending_tag=(value); end

    sig { returns(T::Boolean) }
    def pending_tag?; end

    sig { returns(T.untyped) }
    def pending_tag_before_last_save; end

    sig { returns(T.untyped) }
    def pending_tag_before_type_cast; end

    sig { returns(T::Boolean) }
    def pending_tag_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def pending_tag_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def pending_tag_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def pending_tag_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def pending_tag_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def pending_tag_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def pending_tag_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def pending_tag_previously_was; end

    sig { returns(T.untyped) }
    def pending_tag_was; end

    sig { void }
    def pending_tag_will_change!; end

    sig { returns(T::Boolean) }
    def prerelease; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def prerelease=(value); end

    sig { returns(T::Boolean) }
    def prerelease?; end

    sig { returns(T.nilable(T::Boolean)) }
    def prerelease_before_last_save; end

    sig { returns(T.untyped) }
    def prerelease_before_type_cast; end

    sig { returns(T::Boolean) }
    def prerelease_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def prerelease_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def prerelease_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def prerelease_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def prerelease_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def prerelease_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def prerelease_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def prerelease_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def prerelease_was; end

    sig { void }
    def prerelease_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at=(value); end

    sig { returns(T::Boolean) }
    def published_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_before_last_save; end

    sig { returns(T.untyped) }
    def published_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def published_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def published_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def published_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def published_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def published_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def published_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_was; end

    sig { void }
    def published_at_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_author_id!; end

    sig { void }
    def restore_body!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_formatter!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_pending_tag!; end

    sig { void }
    def restore_prerelease!; end

    sig { void }
    def restore_published_at!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_tag_name!; end

    sig { void }
    def restore_target_commitish!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_id!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_author_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_author_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_body; end

    sig { returns(T::Boolean) }
    def saved_change_to_body?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_formatter; end

    sig { returns(T::Boolean) }
    def saved_change_to_formatter?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_pending_tag; end

    sig { returns(T::Boolean) }
    def saved_change_to_pending_tag?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_prerelease; end

    sig { returns(T::Boolean) }
    def saved_change_to_prerelease?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_published_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_published_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_tag_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_tag_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_target_commitish; end

    sig { returns(T::Boolean) }
    def saved_change_to_target_commitish?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable(::String)) }
    def state; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.untyped) }
    def tag_name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def tag_name=(value); end

    sig { returns(T::Boolean) }
    def tag_name?; end

    sig { returns(T.untyped) }
    def tag_name_before_last_save; end

    sig { returns(T.untyped) }
    def tag_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def tag_name_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tag_name_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tag_name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def tag_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def tag_name_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tag_name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def tag_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def tag_name_previously_was; end

    sig { returns(T.untyped) }
    def tag_name_was; end

    sig { void }
    def tag_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def target_commitish; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def target_commitish=(value); end

    sig { returns(T::Boolean) }
    def target_commitish?; end

    sig { returns(T.nilable(::String)) }
    def target_commitish_before_last_save; end

    sig { returns(T.untyped) }
    def target_commitish_before_type_cast; end

    sig { returns(T::Boolean) }
    def target_commitish_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def target_commitish_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def target_commitish_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def target_commitish_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def target_commitish_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def target_commitish_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def target_commitish_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def target_commitish_previously_was; end

    sig { returns(T.nilable(::String)) }
    def target_commitish_was; end

    sig { void }
    def target_commitish_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_author_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_body?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_formatter?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pending_tag?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_prerelease?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_published_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tag_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_target_commitish?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end
  end

  module GeneratedPreludeBatchMethods
    sig { params(options: T.untyped).returns(T.untyped) }
    def prelude_body_html(options); end

    sig { params(options: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_body_html(options); end

    sig { params(emotion: T.untyped).returns(T.untyped) }
    def prelude_reaction_count_for_reaction(emotion); end

    sig { returns(T.untyped) }
    def prelude_user_logins_by_reaction; end

    sig { params(emotion: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_reaction_count_for_reaction(emotion); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_prelude_user_logins_by_reaction; end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def prelude_viewer_can_react(viewer); end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_viewer_can_react(viewer); end

    sig { params(opts: T.untyped).returns(T.untyped) }
    def short_description_info(opts); end

    sig { params(opts: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_short_description_info(opts); end

    sig { returns(T.untyped) }
    def mentions_count; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_mentions_count; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def drafted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def latest(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ImportableRelease } }

    sig { returns(T::Array[::ImportableRelease]) }
    def to_a; end

    sig { returns(T::Array[::ImportableRelease]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::ImportableRelease } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ImportableRelease } }

    sig do
      params(
        records: T.any(::ImportableRelease, T::Enumerable[T.any(::ImportableRelease, T::Enumerable[::ImportableRelease])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::ImportableRelease, T::Enumerable[T.any(::ImportableRelease, T::Enumerable[::ImportableRelease])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::ImportableRelease, T::Enumerable[T.any(::ImportableRelease, T::Enumerable[::ImportableRelease])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::ImportableRelease]) }
    def load_target; end

    sig do
      params(
        records: T.any(::ImportableRelease, T::Enumerable[T.any(::ImportableRelease, T::Enumerable[::ImportableRelease])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::ImportableRelease, T::Enumerable[T.any(::ImportableRelease, T::Enumerable[::ImportableRelease])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::ImportableRelease, T::Enumerable[T.any(::ImportableRelease, T::Enumerable[::ImportableRelease])])
      ).returns(T::Array[::ImportableRelease])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::ImportableRelease]) }
    def target; end

    sig { returns(T::Array[::ImportableRelease]) }
    def to_a; end

    sig { returns(T::Array[::ImportableRelease]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::ImportableRelease } }

    sig { returns(T::Array[::ImportableRelease]) }
    def to_a; end

    sig { returns(T::Array[::ImportableRelease]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::ImportableRelease } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

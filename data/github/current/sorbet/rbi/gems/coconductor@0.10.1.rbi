# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `coconductor` gem.
# Please instead update this file by running `bin/tapioca gem coconductor`.

# Used in development to vendor codes of conduct
#
# source://coconductor//lib/coconductor/version.rb#3
module Coconductor
  class << self
    # source://coconductor//lib/coconductor.rb#23
    def code_of_conduct(path); end

    # source://coconductor//lib/coconductor.rb#19
    def codes_of_conduct; end

    # source://coconductor//lib/coconductor.rb#37
    def confidence_threshold; end

    # Sets the attribute confidence_threshold
    #
    # @param value the value to set the attribute confidence_threshold to.
    #
    # source://coconductor//lib/coconductor.rb#17
    def confidence_threshold=(_arg0); end

    # source://coconductor//lib/coconductor.rb#27
    def project(path, **args); end
  end
end

# source://coconductor//lib/coconductor.rb#14
Coconductor::CONFIDENCE_THRESHOLD = T.let(T.unsafe(nil), Integer)

# source://coconductor//lib/coconductor/code_of_conduct.rb#8
class Coconductor::CodeOfConduct
  include ::Licensee::ContentHelper

  # @return [CodeOfConduct] a new instance of CodeOfConduct
  #
  # source://coconductor//lib/coconductor/code_of_conduct.rb#90
  def initialize(key); end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#176
  def ==(other); end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#126
  def body; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#87
  def citizen_code_of_conduct?; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#126
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://coconductor//lib/coconductor/code_of_conduct.rb#80
  def content=(_arg0); end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#87
  def contributor_covenant?; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#87
  def django?; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#176
  def eql?(other); end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#140
  def family; end

  # Returns all fields found in the code of conduct
  #
  # Each field will have a unique _raw_text_, uniq-ing _identical_ fields
  #
  # source://coconductor//lib/coconductor/code_of_conduct.rb#162
  def fields; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#87
  def geek_feminism?; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#87
  def go?; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#136
  def inspect; end

  # Returns the value of attribute key.
  #
  # source://coconductor//lib/coconductor/code_of_conduct.rb#79
  def key; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#98
  def language; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#111
  def name; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#120
  def name_without_version; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#87
  def no_code_of_conduct?; end

  # The "none" code of conduct represents the lack of a code of conduct
  #
  # @return [Boolean]
  #
  # source://coconductor//lib/coconductor/code_of_conduct.rb#150
  def none?; end

  # The "other" code of conduct represents an unidentifiable code of conduct
  #
  # @return [Boolean]
  #
  # source://coconductor//lib/coconductor/code_of_conduct.rb#145
  def other?; end

  # Code of conduct is an pseudo code of conduct (e.g., none, other)
  #
  # @return [Boolean]
  #
  # source://coconductor//lib/coconductor/code_of_conduct.rb#155
  def pseudo?; end

  # Returns all fields found in the code of conduct, uniq'd by normalized key
  #
  # Where the same field exists twice, preferance will be given to the first
  # occurance to contain a description
  #
  # source://coconductor//lib/coconductor/code_of_conduct.rb#170
  def unique_fields; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#94
  def version; end

  private

  # @return [Boolean]
  #
  # source://coconductor//lib/coconductor/code_of_conduct.rb#233
  def default_language?; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#183
  def filename; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#198
  def filepath; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#229
  def parts; end

  # Raw content of code of conduct file, including TOML front matter
  #
  # source://coconductor//lib/coconductor/code_of_conduct.rb#209
  def raw_content; end

  # source://coconductor//lib/coconductor/code_of_conduct.rb#219
  def toml; end

  class << self
    # Returns the code of conduct specified by the key with version,
    # or the latest in the family if only the family is specified
    #
    # source://coconductor//lib/coconductor/code_of_conduct.rb#20
    def [](key_or_family); end

    # source://coconductor//lib/coconductor/code_of_conduct.rb#10
    def all; end

    # source://coconductor//lib/coconductor/code_of_conduct.rb#53
    def families; end

    # Returns the code of conduct specified by the key with version,
    # or the latest in the family if only the family is specified
    #
    # source://coconductor//lib/coconductor/code_of_conduct.rb#20
    def find(key_or_family); end

    # Returns the code of conduct specified by the key with version,
    # or the latest in the family if only the family is specified
    #
    # source://coconductor//lib/coconductor/code_of_conduct.rb#20
    def find_by_key(key_or_family); end

    # source://coconductor//lib/coconductor/code_of_conduct.rb#33
    def keys; end

    # source://coconductor//lib/coconductor/code_of_conduct.rb#14
    def latest; end

    # source://coconductor//lib/coconductor/code_of_conduct.rb#46
    def latest_in_family(family, language: T.unsafe(nil)); end

    # source://coconductor//lib/coconductor/code_of_conduct.rb#29
    def vendor_dir; end

    private

    # source://coconductor//lib/coconductor/code_of_conduct.rb#62
    def vendored_codes_of_conduct; end
  end
end

# source://coconductor//lib/coconductor/code_of_conduct.rb#77
Coconductor::CodeOfConduct::DEFAULT_LANGUAGE = T.let(T.unsafe(nil), String)

# source://coconductor//lib/coconductor/code_of_conduct.rb#71
Coconductor::CodeOfConduct::KEY_REGEX = T.let(T.unsafe(nil), Regexp)

# Represents a fillable field in a code of conduct
#
# source://coconductor//lib/coconductor/field.rb#5
class Coconductor::Field
  # @return [Field] a new instance of Field
  #
  # source://coconductor//lib/coconductor/field.rb#42
  def initialize(raw_text, name: T.unsafe(nil), description: T.unsafe(nil)); end

  # source://coconductor//lib/coconductor/field.rb#63
  def description; end

  # source://coconductor//lib/coconductor/field.rb#71
  def inspect; end

  # machine readable key
  #
  # source://coconductor//lib/coconductor/field.rb#59
  def key; end

  # human readable label
  #
  # source://coconductor//lib/coconductor/field.rb#54
  def label; end

  # The unformatted field name as found in the code of conduct text
  #
  # source://coconductor//lib/coconductor/field.rb#49
  def name; end

  # the matchable raw text within the code of conduct including brackets
  #
  # source://coconductor//lib/coconductor/field.rb#9
  def raw_text; end

  private

  # source://coconductor//lib/coconductor/field.rb#84
  def normalized_name; end

  # source://coconductor//lib/coconductor/field.rb#80
  def parts; end

  class << self
    # Returns all fields accross all vendored codes of conduct
    #
    # source://coconductor//lib/coconductor/field.rb#37
    def all; end

    # Returns an array of Fields for the given code of conduct
    #
    # source://coconductor//lib/coconductor/field.rb#21
    def from_code_of_conduct(code_of_conduct); end
  end
end

# Hard coded field descriptions in the form of key => description
#
# source://coconductor//lib/coconductor/field.rb#12
Coconductor::Field::DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://coconductor//lib/coconductor/field.rb#6
Coconductor::Field::REGEX = T.let(T.unsafe(nil), Regexp)

# source://coconductor//lib/coconductor/code_of_conduct.rb#6
class Coconductor::InvalidCodeOfConduct < ::ArgumentError; end

# source://coconductor//lib/coconductor/matchers.rb#4
module Coconductor::Matchers; end

# source://coconductor//lib/coconductor/matchers/dice.rb#5
class Coconductor::Matchers::Dice < ::Licensee::Matchers::Dice
  include ::Coconductor::Matchers::Matcher

  private

  # source://coconductor//lib/coconductor/matchers/dice.rb#13
  def minimum_confidence; end
end

# source://coconductor//lib/coconductor/matchers/exact.rb#5
class Coconductor::Matchers::Exact < ::Licensee::Matchers::Exact
  include ::Coconductor::Matchers::Matcher
end

# source://coconductor//lib/coconductor/matchers/field_aware.rb#5
class Coconductor::Matchers::FieldAware < ::Licensee::Matchers::Exact
  include ::Coconductor::Matchers::Matcher

  # source://coconductor//lib/coconductor/matchers/field_aware.rb#16
  def confidence; end

  # source://coconductor//lib/coconductor/matchers/field_aware.rb#8
  def match; end

  private

  # source://coconductor//lib/coconductor/matchers/field_aware.rb#25
  def regex_for(code_of_conduct); end
end

# source://coconductor//lib/coconductor/matchers/field_aware.rb#22
Coconductor::Matchers::FieldAware::FIELD_PLACEHOLDER = T.let(T.unsafe(nil), String)

# source://coconductor//lib/coconductor/matchers/field_aware.rb#23
Coconductor::Matchers::FieldAware::FIELD_PLACEHOLDER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://coconductor//lib/coconductor/matchers/matcher.rb#5
module Coconductor::Matchers::Matcher
  # source://coconductor//lib/coconductor/matchers/matcher.rb#6
  def potential_matches; end
end

# source://coconductor//lib/coconductor/project_files.rb#4
module Coconductor::ProjectFiles; end

# source://coconductor//lib/coconductor/project_files/code_of_conduct_file.rb#5
class Coconductor::ProjectFiles::CodeOfConductFile < ::Coconductor::ProjectFiles::ProjectFile
  include ::Licensee::ContentHelper

  # source://coconductor//lib/coconductor/project_files/code_of_conduct_file.rb#19
  def possible_matchers; end

  class << self
    # source://coconductor//lib/coconductor/project_files/code_of_conduct_file.rb#15
    def name_score(filename); end
  end
end

# source://coconductor//lib/coconductor/project_files/code_of_conduct_file.rb#10
Coconductor::ProjectFiles::CodeOfConductFile::BASENAME_REGEX = T.let(T.unsafe(nil), Regexp)

# source://coconductor//lib/coconductor/project_files/code_of_conduct_file.rb#8
Coconductor::ProjectFiles::CodeOfConductFile::EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://coconductor//lib/coconductor/project_files/code_of_conduct_file.rb#9
Coconductor::ProjectFiles::CodeOfConductFile::EXT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://coconductor//lib/coconductor/project_files/code_of_conduct_file.rb#13
Coconductor::ProjectFiles::CodeOfConductFile::FILENAME_REGEX = T.let(T.unsafe(nil), Regexp)

# LANG_REGEX must contain extension to avoid matching .md as the lang
#
# source://coconductor//lib/coconductor/project_files/code_of_conduct_file.rb#12
Coconductor::ProjectFiles::CodeOfConductFile::LANG_REGEX = T.let(T.unsafe(nil), Regexp)

# source://coconductor//lib/coconductor/project_files/project_file.rb#5
class Coconductor::ProjectFiles::ProjectFile < ::Licensee::ProjectFiles::ProjectFile
  # source://coconductor//lib/coconductor/project_files/project_file.rb#6
  def code_of_conduct; end
end

# source://coconductor//lib/coconductor/projects.rb#4
module Coconductor::Projects; end

# source://coconductor//lib/coconductor/projects/fs_project.rb#5
class Coconductor::Projects::FSProject < ::Licensee::Projects::FSProject
  include ::Coconductor::Projects::Project

  private

  # Returns the set of unique paths to search for project files
  # in order from @dir -> @root
  #
  # source://coconductor//lib/coconductor/projects/fs_project.rb#12
  def search_directories; end

  # source://coconductor//lib/coconductor/projects/fs_project.rb#19
  def subdirs; end
end

# source://coconductor//lib/coconductor/projects/github_project.rb#7
class Coconductor::Projects::GitHubProject < ::Licensee::Projects::GitHubProject
  include ::Coconductor::Projects::Project

  private

  # source://coconductor//lib/coconductor/projects/github_project.rb#12
  def files; end
end

# source://coconductor//lib/coconductor/projects/git_project.rb#5
class Coconductor::Projects::GitProject < ::Licensee::Projects::GitProject
  include ::Coconductor::Projects::Project

  private

  # Returns an array of hashes representing the project's files.
  # Hashes will have the the following keys:
  #  :name - the file's path relative to the repo root
  #  :oid  - the file's OID
  #
  # source://coconductor//lib/coconductor/projects/git_project.rb#14
  def files; end

  # @return [Boolean]
  #
  # source://coconductor//lib/coconductor/projects/git_project.rb#29
  def subdir?(tree); end
end

# source://coconductor//lib/coconductor/projects/project.rb#5
module Coconductor::Projects::Project
  # source://coconductor//lib/coconductor/projects/project.rb#8
  def code_of_conduct; end

  # source://coconductor//lib/coconductor/projects/project.rb#12
  def code_of_conduct_file; end

  private

  # source://coconductor//lib/coconductor/projects/project.rb#30
  def path_relative_to_root(path); end
end

# source://coconductor//lib/coconductor/projects/project.rb#6
Coconductor::Projects::Project::DIRS = T.let(T.unsafe(nil), Array)

# source://coconductor//lib/coconductor/version.rb#4
Coconductor::VERSION = T.let(T.unsafe(nil), String)

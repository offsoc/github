# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `secret-scanning-proto` gem.
# Please instead update this file by running `bin/tapioca gem secret-scanning-proto`.

# source://secret-scanning-proto//lib/github/proto/secret_scanning/version.rb#3
module GitHub
  extend ::GitHub::Config::FirstPartyApps
  extend ::GitHub::Config::Metadata
  extend ::GitHub::Config::Datacenter
  extend ::GitHub::Config::ProximaSyncedThirdPartyApps
  extend ::GitHub::Config::Fastly
  extend ::GitHub::Config::Importers
  extend ::GitHub::Config::Kredz
  extend ::GitHub::Config::Varz
  extend ::GitHub::Config::Launch
  extend ::GitHub::Config::LegacyTextileFormatting
  extend ::GitHub::Config::Dreamlifter
  extend ::GitHub::Config::Migration
  extend ::GitHub::Config::Render
  extend ::GitHub::Config::Smtp
  extend ::GitHub::Config::Spokes
  extend ::GitHub::Config::Spokesd
  extend ::GitHub::Config::SupportLink
  extend ::GitHub::Config::Pages
  extend ::GitHub::Config::RequestLimits
  extend ::GitHub::Config::RateLimits
  extend ::GitHub::Config::OpenTelemetry
  extend ::GitHub::Config::HydroConfig
  extend ::GitHub::Config::Redis
  extend ::GitHub::Config::GroupSyncer
  extend ::GitHub::Config::Dependabot
  extend ::GitHub::Config::Twirp
  extend ::GitHub::Config::DriftwoodConfig
  extend ::GitHub::Config::PullRequests
  extend ::GitHub::Config::Repositories
  extend ::GitHub::Config::S3
  extend ::GitHub::Config::Registry
  extend ::GitHub::Config::SystemRoles
  extend ::GitHub::Config::FineGrainedPermissions
  extend ::GitHub::Config::Elasticsearch
  extend ::GitHub::Config::OpenApi
  extend ::GitHub::Config::AuditLogCuratorConfig
  extend ::GitHub::Config::AuditLog
  extend ::GitHub::Config::Billing
  extend ::GitHub::Config::AfterResponse
  extend ::GitHub::Config::Features
  extend ::GitHub::Config::ApiVersioning
  extend ::GitHub::Config::InsightsConfig
  extend ::GitHub::Config::HttpFluentbitConfig
  extend ::GitHub::Config::CodeScanning
  extend ::GitHub::Config::CodeQLVariantAnalysis
  extend ::GitHub::Config::OctoshiftStorage
  extend ::GitHub::Config::OIDCProviders
  extend ::GitHub::Config::BingIndexnow
  extend ::GitHub::Config::Chatops
  extend ::GitHub::Config::IssuesGraphApiConfig
  extend ::GitHub::Config::TimelineApiConfig
  extend ::GitHub::Config::Memex
  extend ::GitHub::Config::MergeQueue
  extend ::GitHub::Config::MergeCommitUpdateRef
  extend ::GitHub::Config::Codespaces
  extend ::GitHub::Config::Copilot
  extend ::GitHub::Config::Azure
  extend ::GitHub::Config::MultiTenantEnterprise
  extend ::GitHub::Config::NotebooksConfig
  extend ::GitHub::Config::ViewscreenConfig
  extend ::GitHub::Config::Freno
  extend ::GitHub::Config::ActionsResults
  extend ::GitHub::Config::Conduit
  extend ::GitHub::Config::ActionsBroker
  extend ::GitHub::Config::ActionsBrokerWorker
  extend ::GitHub::Config::ActionsRunnerAdmin
  extend ::GitHub::Config::ActionsRunService
  extend ::GitHub::Config::ActionsScaleUnitDomains
  extend ::GitHub::Config::ProximaLoginExperience
  extend ::GitHub::Config::GitSrcMigrator
  extend ::GitHub::Config::Projects
  extend ::GitHub::Config::EnterpriseAccounts
  extend ::GitHub::Config::Orca
  extend ::GitHub::Config::Orcid
  extend ::GitHub::Config::Neutron
  extend ::GitHub::Config::Context
  extend ::GitHub::Config
  extend ::GitHub::Version
  extend ::GitHub::Config::Stats

  class << self
    def after_response_middleware_enabled; end
    def after_response_middleware_enabled=(_arg0); end
    def after_response_middleware_enabled?; end
    def after_response_raise_on_exception; end
    def after_response_raise_on_exception=(_arg0); end
    def after_response_raise_on_exception?; end
    def robot?(useragent); end
  end
end

module GitHub::CSP; end
module GitHub::DataStructures; end
module GitHub::DomainIsolation; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/version.rb#4
module GitHub::Proto; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/version.rb#5
module GitHub::Proto::SecretScanning; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#73
module GitHub::Proto::SecretScanning::Api; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#74
module GitHub::Proto::SecretScanning::Api::V1; end

class GitHub::Proto::SecretScanning::Api::V1::CancelDryRunsForCustomPatternRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/secret_scanning_proto.rb#110
class GitHub::Proto::SecretScanning::Api::V1::Client
  # @return [Client] a new instance of Client
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#113
  def initialize(conn, opts = T.unsafe(nil)); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#150
  def create_custom_pattern(options); end

  # Returns the value of attribute custom_patterns_client.
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#111
  def custom_patterns_client; end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#154
  def delete_custom_pattern(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#146
  def get_custom_pattern(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#142
  def get_custom_patterns(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#138
  def get_pattern_matches(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#122
  def get_token(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#130
  def get_token_counts(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#134
  def get_token_types_info(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#118
  def get_tokens(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#126
  def resolve_token(options); end

  # Returns the value of attribute token_client.
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#111
  def token_client; end
end

class GitHub::Proto::SecretScanning::Api::V1::DryRunMetadataForPatternRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::DryRunMetadataForPatternResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::DryRunResultsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::DryRunResultsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::DryRunScanResult
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::DryRunScanResultLocation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatus
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/dry_runs_api_pb.rb#100
GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatus::CANCELLED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/dry_runs_api_pb.rb#100
GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatus::CANCELLED_TOO_MANY_RESULTS = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/dry_runs_api_pb.rb#100
GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatus::COMPLETED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/dry_runs_api_pb.rb#100
GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatus::FAILED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/dry_runs_api_pb.rb#100
GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatus::INPROGRESS = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/dry_runs_api_pb.rb#100
GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatus::NOT_DRY_RUN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/dry_runs_api_pb.rb#100
GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatus::QUEUED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/dry_runs_api_pb.rb#100
GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatus::UNKNOWN_SCAN_STATUS = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V1::DryRunScanStatusCount
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::DryRunScope
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/secret_scanning_proto.rb#33
class GitHub::Proto::SecretScanning::Api::V1::DryRunsAPI
  # @return [DryRunsAPI] a new instance of DryRunsAPI
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#36
  def initialize(conn, opts = T.unsafe(nil)); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#40
  def cancel_dry_runs_for_custom_pattern(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#44
  def dry_run_metadata_for_pattern(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#48
  def dry_run_results_for_pattern(options); end

  # Returns the value of attribute dry_runs_client.
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#34
  def dry_runs_client; end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/dry_runs_api_twirp.rb#18
class GitHub::Proto::SecretScanning::Api::V1::DryRunsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def cancel_dry_runs_for_custom_pattern(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def dry_run_metadata_for_pattern(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def dry_run_results_for_pattern(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/dry_runs_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Api::V1::DryRunsAPIService < ::Twirp::Service; end

class GitHub::Proto::SecretScanning::Api::V1::ExemptionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::ExemptionResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V1::ExemptionResponseStatus
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/exemptions_pb.rb#45
GitHub::Proto::SecretScanning::Api::V1::ExemptionResponseStatus::APPROVED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/exemptions_pb.rb#45
GitHub::Proto::SecretScanning::Api::V1::ExemptionResponseStatus::PENDING = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/exemptions_pb.rb#45
GitHub::Proto::SecretScanning::Api::V1::ExemptionResponseStatus::REJECTED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/exemptions_pb.rb#45
GitHub::Proto::SecretScanning::Api::V1::ExemptionResponseStatus::UNKNOWN_EXEMPTION_RESPONSE_STATUS = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/secret_scanning_proto.rb#159
class GitHub::Proto::SecretScanning::Api::V1::ExemptionsAPI
  # @return [ExemptionsAPI] a new instance of ExemptionsAPI
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#162
  def initialize(conn, opts = T.unsafe(nil)); end

  # Returns the value of attribute exemptions_client.
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#160
  def exemptions_client; end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#166
  def get_exemption(options); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/exemptions_twirp.rb#16
class GitHub::Proto::SecretScanning::Api::V1::ExemptionsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_exemption(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/exemptions_twirp.rb#10
class GitHub::Proto::SecretScanning::Api::V1::ExemptionsAPIService < ::Twirp::Service; end

class GitHub::Proto::SecretScanning::Api::V1::GetExemptionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::GetExemptionResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::JobGroupSummaryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::JobGroupSummaryResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/secret_scanning_proto.rb#97
class GitHub::Proto::SecretScanning::Api::V1::JobGroupsAPI
  # @return [JobGroupsAPI] a new instance of JobGroupsAPI
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#100
  def initialize(conn, opts = T.unsafe(nil)); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#104
  def get_job_group_summary(options); end

  # Returns the value of attribute job_groups_client.
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#98
  def job_groups_client; end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/job_groups_twirp.rb#16
class GitHub::Proto::SecretScanning::Api::V1::JobGroupsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_job_group_summary(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/job_groups_twirp.rb#10
class GitHub::Proto::SecretScanning::Api::V1::JobGroupsAPIService < ::Twirp::Service; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/login_password_api_twirp.rb#17
class GitHub::Proto::SecretScanning::Api::V1::LoginPasswordAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def revoke_login_password(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def verify_login_password(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/login_password_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Api::V1::LoginPasswordAPIService < ::Twirp::Service; end

# source://secret-scanning-proto//lib/secret_scanning_proto.rb#53
class GitHub::Proto::SecretScanning::Api::V1::MetricsAPI
  # @return [MetricsAPI] a new instance of MetricsAPI
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#56
  def initialize(conn, opts = T.unsafe(nil)); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#60
  def get_alerts_for_insights_backfill(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#80
  def get_block_counts_by_repo(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#76
  def get_block_counts_by_token_type(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#88
  def get_bypass_counts_by_repo(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#84
  def get_bypass_counts_by_token_type(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#72
  def get_push_protection_metrics(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#92
  def get_push_protection_metrics_for_repos(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#64
  def get_token_alert_metrics(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#68
  def get_token_push_protection_metrics(options); end

  # Returns the value of attribute metrics_client.
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#54
  def metrics_client; end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/oauth_access_api_twirp.rb#17
class GitHub::Proto::SecretScanning::Api::V1::OauthAccessAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def revoke_oauth_access(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def verify_oauth_access(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/oauth_access_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Api::V1::OauthAccessAPIService < ::Twirp::Service; end

module GitHub::Proto::SecretScanning::Api::V1::OwnerScope
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#79
GitHub::Proto::SecretScanning::Api::V1::OwnerScope::BUSINESS_SCOPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#79
GitHub::Proto::SecretScanning::Api::V1::OwnerScope::ORGANIZATION_SCOPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#79
GitHub::Proto::SecretScanning::Api::V1::OwnerScope::REPOSITORY_SCOPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#79
GitHub::Proto::SecretScanning::Api::V1::OwnerScope::UNKNOWN_SCOPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/public_key_api_twirp.rb#17
class GitHub::Proto::SecretScanning::Api::V1::PublicKeyAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def unverify_public_key(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def verify_private_key(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/public_key_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Api::V1::PublicKeyAPIService < ::Twirp::Service; end

module GitHub::Proto::SecretScanning::Api::V1::RepositoryArchivedState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#81
GitHub::Proto::SecretScanning::Api::V1::RepositoryArchivedState::ANY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#81
GitHub::Proto::SecretScanning::Api::V1::RepositoryArchivedState::ARCHIVED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#81
GitHub::Proto::SecretScanning::Api::V1::RepositoryArchivedState::NOT_ARCHIVED = T.let(T.unsafe(nil), Integer)

module GitHub::Proto::SecretScanning::Api::V1::RepositoryOwnerFilterType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#80
GitHub::Proto::SecretScanning::Api::V1::RepositoryOwnerFilterType::ALL = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#80
GitHub::Proto::SecretScanning::Api::V1::RepositoryOwnerFilterType::ORGANIZATION = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#80
GitHub::Proto::SecretScanning::Api::V1::RepositoryOwnerFilterType::USER = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V1::RepositoryOwners
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V1::RepositoryType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#77
GitHub::Proto::SecretScanning::Api::V1::RepositoryType::GIST = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#77
GitHub::Proto::SecretScanning::Api::V1::RepositoryType::REPOSITORY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#77
GitHub::Proto::SecretScanning::Api::V1::RepositoryType::UNKNOWN_TYPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#77
GitHub::Proto::SecretScanning::Api::V1::RepositoryType::WIKI = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V1::RevokeLoginPasswordRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::RevokeLoginPasswordRequest::LoginPasswordCandidate
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::RevokeLoginPasswordResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::RevokeLoginPasswordResponse::LoginPassword
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::RevokeOauthAccessRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::RevokeOauthAccessRequest::OauthAccessCandidate
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::RevokeOauthAccessResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::RevokeOauthAccessResponse::OauthAccess
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V1::RevokeResult
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#76
GitHub::Proto::SecretScanning::Api::V1::RevokeResult::ALREADY_UNVERIFIED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#76
GitHub::Proto::SecretScanning::Api::V1::RevokeResult::FALSE_POSITIVE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#76
GitHub::Proto::SecretScanning::Api::V1::RevokeResult::NO_OAUTH_ACCESS = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#76
GitHub::Proto::SecretScanning::Api::V1::RevokeResult::NO_PUBLIC_KEY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#76
GitHub::Proto::SecretScanning::Api::V1::RevokeResult::NO_URL = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#76
GitHub::Proto::SecretScanning::Api::V1::RevokeResult::REVOKED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#76
GitHub::Proto::SecretScanning::Api::V1::RevokeResult::UNKNOWN_RESULT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#76
GitHub::Proto::SecretScanning::Api::V1::RevokeResult::UNVERIFIED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/secret_scanning_proto.rb#13
class GitHub::Proto::SecretScanning::Api::V1::ScansAPI
  # @return [ScansAPI] a new instance of ScansAPI
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#16
  def initialize(conn, opts = T.unsafe(nil)); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#20
  def add_bypass(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#28
  def get_bypass_placeholder(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#24
  def promote_bypass(options); end

  # Returns the value of attribute scans_client.
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#14
  def scans_client; end
end

module GitHub::Proto::SecretScanning::Api::V1::TokenSource
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::COMMIT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::COMMIT_COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::CONTENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::DISCUSSION_BODY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::DISCUSSION_COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::DISCUSSION_TITLE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::GIST_COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::GIST_CONTENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::ISSUE_COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::ISSUE_DESCRIPTION = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::ISSUE_TITLE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::NPM = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::PULL_REQUEST_COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::PULL_REQUEST_DESCRIPTION = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::PULL_REQUEST_TITLE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::UNKNOWN_SOURCE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::WIKI_COMMIT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/shared_pb.rb#78
GitHub::Proto::SecretScanning::Api::V1::TokenSource::WIKI_CONTENT = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V1::UnverifyPublicKeyRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::UnverifyPublicKeyRequest::PrivateKeyCandidate
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::UnverifyPublicKeyResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::UnverifyPublicKeyResponse::PrivateKey
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::VerifyLoginPasswordRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::VerifyLoginPasswordRequest::LoginPasswordCandidate
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::VerifyLoginPasswordResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::VerifyLoginPasswordResponse::LoginPassword
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::VerifyOauthAccessRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::VerifyOauthAccessRequest::OauthAccessCandidate
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::VerifyOauthAccessResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::VerifyOauthAccessResponse::OauthAccess
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V1::VerifyOauthAccessResponse::VerificationStatus
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/oauth_access_api_pb.rb#67
GitHub::Proto::SecretScanning::Api::V1::VerifyOauthAccessResponse::VerificationStatus::ACTIVE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/oauth_access_api_pb.rb#67
GitHub::Proto::SecretScanning::Api::V1::VerifyOauthAccessResponse::VerificationStatus::REVOKED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/oauth_access_api_pb.rb#67
GitHub::Proto::SecretScanning::Api::V1::VerifyOauthAccessResponse::VerificationStatus::UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/oauth_access_api_pb.rb#67
GitHub::Proto::SecretScanning::Api::V1::VerifyOauthAccessResponse::VerificationStatus::UNVERIFIABLE = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V1::VerifyPrivateKeyRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::VerifyPrivateKeyRequest::PrivateKeyCandidate
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::VerifyPrivateKeyResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V1::VerifyPrivateKeyResponse::PrivateKey
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V1::VerifyPrivateKeyResponse::VerificationStatus
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/public_key_api_pb.rb#64
GitHub::Proto::SecretScanning::Api::V1::VerifyPrivateKeyResponse::VerificationStatus::ACTIVE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/public_key_api_pb.rb#64
GitHub::Proto::SecretScanning::Api::V1::VerifyPrivateKeyResponse::VerificationStatus::REVOKED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/public_key_api_pb.rb#64
GitHub::Proto::SecretScanning::Api::V1::VerifyPrivateKeyResponse::VerificationStatus::UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v1/public_key_api_pb.rb#64
GitHub::Proto::SecretScanning::Api::V1::VerifyPrivateKeyResponse::VerificationStatus::UNVERIFIABLE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#211
module GitHub::Proto::SecretScanning::Api::V2; end

class GitHub::Proto::SecretScanning::Api::V2::AddTokenRemediationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::BusinessSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::BusinessSelector::OwnerType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#538
GitHub::Proto::SecretScanning::Api::V2::BusinessSelector::OwnerType::OWNER_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#538
GitHub::Proto::SecretScanning::Api::V2::BusinessSelector::OwnerType::OWNER_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#538
GitHub::Proto::SecretScanning::Api::V2::BusinessSelector::OwnerType::OWNER_TYPE_USER = T.let(T.unsafe(nil), Integer)

module GitHub::Proto::SecretScanning::Api::V2::BusinessSelector::User_filter_type
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#537
GitHub::Proto::SecretScanning::Api::V2::BusinessSelector::User_filter_type::ALL = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#537
GitHub::Proto::SecretScanning::Api::V2::BusinessSelector::User_filter_type::EXCEPT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#537
GitHub::Proto::SecretScanning::Api::V2::BusinessSelector::User_filter_type::NONE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#537
GitHub::Proto::SecretScanning::Api::V2::BusinessSelector::User_filter_type::ONLY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/secret_scanning_proto.rb#173
module GitHub::Proto::SecretScanning::Api::V2::Clients; end

# source://secret-scanning-proto//lib/secret_scanning_proto.rb#282
class GitHub::Proto::SecretScanning::Api::V2::Clients::CustomPatternAPI
  # @return [CustomPatternAPI] a new instance of CustomPatternAPI
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#285
  def initialize(conn, opts = T.unsafe(nil)); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#297
  def create_custom_pattern(options); end

  # Returns the value of attribute custom_patterns_client.
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#283
  def custom_patterns_client; end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#309
  def delete_custom_pattern(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#293
  def get_custom_pattern(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#289
  def get_pattern_matches(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#301
  def publish_custom_pattern(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#305
  def update_custom_pattern(options); end
end

# source://secret-scanning-proto//lib/secret_scanning_proto.rb#174
class GitHub::Proto::SecretScanning::Api::V2::Clients::ScansAPI
  # @return [ScansAPI] a new instance of ScansAPI
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#177
  def initialize(conn, opts = T.unsafe(nil)); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#189
  def add_bypass_reviewer(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#197
  def get_bypass_reviewers(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#193
  def remove_bypass_reviewer(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#185
  def scan_bytes(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#181
  def scan_push(options); end

  # Returns the value of attribute scans_client.
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#175
  def scans_client; end
end

# source://secret-scanning-proto//lib/secret_scanning_proto.rb#202
class GitHub::Proto::SecretScanning::Api::V2::Clients::TokenAPI
  # @return [TokenAPI] a new instance of TokenAPI
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#205
  def initialize(conn, opts = T.unsafe(nil)); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#253
  def add_token_remediation(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#261
  def get_generated_alert_activity_audit(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#257
  def get_generated_alert_autofix(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#269
  def get_more_timeline_events(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#265
  def get_timeline(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#213
  def get_token(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#229
  def get_token_counts(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#241
  def get_token_group_by_counts(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#249
  def get_token_latest_remediation(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#217
  def get_token_locations(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#237
  def get_token_types_info(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#273
  def get_token_validation_status(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#209
  def get_tokens(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#233
  def get_tokens_mean_time_to_remediation(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#277
  def report_token(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#221
  def resolve_token(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#225
  def resolve_tokens(options); end

  # Returns the value of attribute token_client.
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#203
  def token_client; end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#245
  def validate_enabled_repos(options); end
end

module GitHub::Proto::SecretScanning::Api::V2::ContentType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::COMMIT_COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::COMMIT_METADATA = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::CONTENT_TYPE_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::DISCUSSION_BODY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::DISCUSSION_COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::DISCUSSION_TITLE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::ISSUE_BODY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::ISSUE_COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::ISSUE_TITLE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::PULL_REQUEST_BODY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::PULL_REQUEST_COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::PULL_REQUEST_REVIEW_COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::PULL_REQUEST_TIMELINE_COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::PULL_REQUEST_TITLE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::REPOSITORY_BLOB = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#581
GitHub::Proto::SecretScanning::Api::V2::ContentType::WIKI_BLOB = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V2::CreateCustomPatternRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::CreateCustomPatternResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_twirp.rb#21
class GitHub::Proto::SecretScanning::Api::V2::CustomPatternAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def create_custom_pattern(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def delete_custom_pattern(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_custom_pattern(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_pattern_matches(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def publish_custom_pattern(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def update_custom_pattern(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Api::V2::CustomPatternAPIService < ::Twirp::Service; end

class GitHub::Proto::SecretScanning::Api::V2::CustomPatternBusinessScope
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::CustomPatternBusinessSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::CustomPatternError
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::CustomPatternErrorType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#242
GitHub::Proto::SecretScanning::Api::V2::CustomPatternErrorType::COMPILE_DB = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#242
GitHub::Proto::SecretScanning::Api::V2::CustomPatternErrorType::CONFIG_LOAD = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#242
GitHub::Proto::SecretScanning::Api::V2::CustomPatternErrorType::DB_SIZE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#242
GitHub::Proto::SecretScanning::Api::V2::CustomPatternErrorType::DB_SIZE_CALCULATION = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#242
GitHub::Proto::SecretScanning::Api::V2::CustomPatternErrorType::DISPLAY_NAME = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#242
GitHub::Proto::SecretScanning::Api::V2::CustomPatternErrorType::END_DELIMITER = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#242
GitHub::Proto::SecretScanning::Api::V2::CustomPatternErrorType::MUST_MATCH = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#242
GitHub::Proto::SecretScanning::Api::V2::CustomPatternErrorType::MUST_NOT_MATCH = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#242
GitHub::Proto::SecretScanning::Api::V2::CustomPatternErrorType::NONE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#242
GitHub::Proto::SecretScanning::Api::V2::CustomPatternErrorType::ROW_VERSION_MISMATCH = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#242
GitHub::Proto::SecretScanning::Api::V2::CustomPatternErrorType::START_DELIMITER = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V2::CustomPatternIdsSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::CustomPatternOrgScope
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::CustomPatternOrgSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::CustomPatternRepoScope
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::CustomPatternRepoSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::CustomPatternReposSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::CustomPatternScanSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::CustomPatternState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#241
GitHub::Proto::SecretScanning::Api::V2::CustomPatternState::DELETED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#241
GitHub::Proto::SecretScanning::Api::V2::CustomPatternState::DISABLED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#241
GitHub::Proto::SecretScanning::Api::V2::CustomPatternState::PUBLISHED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#241
GitHub::Proto::SecretScanning::Api::V2::CustomPatternState::UNPUBLISHED = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V2::CustomPatternWarning
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::CustomPatternWarning::Type
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#216
GitHub::Proto::SecretScanning::Api::V2::CustomPatternWarning::Type::UNBOUNDED_WILDCARD = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#216
GitHub::Proto::SecretScanning::Api::V2::CustomPatternWarning::Type::UNKNOWN = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V2::DeleteCustomPatternRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetCustomPatternRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetCustomPatternResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetGeneratedAlertActivityAuditRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetGeneratedAlertActivityAuditRequest::Activity
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetGeneratedAlertActivityAuditRequest::Permission
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetGeneratedAlertActivityAuditRequest::PermissionSet
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetGeneratedAlertActivityAuditResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetGeneratedAlertAutofixRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetGeneratedAlertAutofixResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetMoreTimelineEventsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetMoreTimelineEventsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetPatternMatchesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetPatternMatchesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTimelineRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTimelineResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenCountsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenCountsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByAggregation
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#585
GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByAggregation::REPOSITORY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#585
GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByAggregation::SECRET_PROVIDER = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#585
GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByAggregation::SECRET_TYPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#585
GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByAggregation::UNKNOWN_AGGREGATION = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByCountsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByCountsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByCountsResponse::AggregationCount
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByCountsResponse::AggregationCount::ProviderTokenCountAggregation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByCountsResponse::AggregationCount::ProviderTokenCountAggregation::ProviderCount
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByCountsResponse::AggregationCount::RepoTokenCountAggregation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByCountsResponse::AggregationCount::RepoTokenCountAggregation::RepoCount
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByCountsResponse::AggregationCount::SecretTypeTokenCountAggregation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenGroupByCountsResponse::AggregationCount::SecretTypeTokenCountAggregation::TypeCount
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenLatestRemediationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenLatestRemediationResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenLocationsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenLocationsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenResponse::CustomPatternData
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenTypesInfoRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenTypesInfoResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenValidationStatusRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokenValidationStatusResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokensMeanTimeToRemediationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokensMeanTimeToRemediationResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokensRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::GetTokensResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::LastScan
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::LastScan::Type
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#238
GitHub::Proto::SecretScanning::Api::V2::LastScan::Type::BACKFILL = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#238
GitHub::Proto::SecretScanning::Api::V2::LastScan::Type::DRY_RUN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#238
GitHub::Proto::SecretScanning::Api::V2::LastScan::Type::UNKNOWN = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V2::OrgSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::PanicRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::PanicResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::PatternMatch
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::PostProcessing
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::PostUpdateCustomPatternAction
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#239
GitHub::Proto::SecretScanning::Api::V2::PostUpdateCustomPatternAction::DELETE_ALERTS = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#239
GitHub::Proto::SecretScanning::Api::V2::PostUpdateCustomPatternAction::RESOLVE_ALERTS = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V2::PublishCustomPatternRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::RepoSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::ReportTokenRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::ReportTokenResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::RepositoryVisibility
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#586
GitHub::Proto::SecretScanning::Api::V2::RepositoryVisibility::REPOSITORY_VISIBILITY_INTERNAL = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#586
GitHub::Proto::SecretScanning::Api::V2::RepositoryVisibility::REPOSITORY_VISIBILITY_PRIVATE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#586
GitHub::Proto::SecretScanning::Api::V2::RepositoryVisibility::REPOSITORY_VISIBILITY_PUBLIC = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#586
GitHub::Proto::SecretScanning::Api::V2::RepositoryVisibility::REPOSITORY_VISIBILITY_UNKNOWN = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V2::ResolutionEvent
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::ResolveTokenRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::ResolveTokenResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::ResolveTokensRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::ResolveTokensResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::SecretScanCustomPattern
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::SortOrder
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#582
GitHub::Proto::SecretScanning::Api::V2::SortOrder::CREATED_ASCENDING = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#582
GitHub::Proto::SecretScanning::Api::V2::SortOrder::CREATED_DESCENDING = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#582
GitHub::Proto::SecretScanning::Api::V2::SortOrder::NO_SORT_ORDER = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#582
GitHub::Proto::SecretScanning::Api::V2::SortOrder::UPDATED_ASCENDING = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#582
GitHub::Proto::SecretScanning::Api::V2::SortOrder::UPDATED_DESCENDING = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V2::TimelineEvent
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::TimelineEvent::TimelineEventType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#517
GitHub::Proto::SecretScanning::Api::V2::TimelineEvent::TimelineEventType::ALERT_CREATION = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#517
GitHub::Proto::SecretScanning::Api::V2::TimelineEvent::TimelineEventType::BYPASS = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#517
GitHub::Proto::SecretScanning::Api::V2::TimelineEvent::TimelineEventType::DELEGATED_BYPASS_REQUEST_APPROVED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#517
GitHub::Proto::SecretScanning::Api::V2::TimelineEvent::TimelineEventType::DELEGATED_BYPASS_REQUEST_OPENED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#517
GitHub::Proto::SecretScanning::Api::V2::TimelineEvent::TimelineEventType::RESOLUTION = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#517
GitHub::Proto::SecretScanning::Api::V2::TimelineEvent::TimelineEventType::REVOCATION = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#517
GitHub::Proto::SecretScanning::Api::V2::TimelineEvent::TimelineEventType::UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#517
GitHub::Proto::SecretScanning::Api::V2::TimelineEvent::TimelineEventType::VALIDITY_CHANGE = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V2::TimelineSegment
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::Token
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::Token::Of_type
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#574
GitHub::Proto::SecretScanning::Api::V2::Token::Of_type::BUILT_IN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#574
GitHub::Proto::SecretScanning::Api::V2::Token::Of_type::CUSTOM = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#574
GitHub::Proto::SecretScanning::Api::V2::Token::Of_type::UNKNOWN = T.let(T.unsafe(nil), Integer)

module GitHub::Proto::SecretScanning::Api::V2::Token::Resolution
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#575
GitHub::Proto::SecretScanning::Api::V2::Token::Resolution::FALSE_POSITIVE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#575
GitHub::Proto::SecretScanning::Api::V2::Token::Resolution::HIDDEN_BY_CONFIG = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#575
GitHub::Proto::SecretScanning::Api::V2::Token::Resolution::NO_RESOLUTION = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#575
GitHub::Proto::SecretScanning::Api::V2::Token::Resolution::PATTERN_DELETED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#575
GitHub::Proto::SecretScanning::Api::V2::Token::Resolution::PATTERN_EDITED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#575
GitHub::Proto::SecretScanning::Api::V2::Token::Resolution::REOPENED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#575
GitHub::Proto::SecretScanning::Api::V2::Token::Resolution::REVOKED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#575
GitHub::Proto::SecretScanning::Api::V2::Token::Resolution::USED_IN_TESTS = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#575
GitHub::Proto::SecretScanning::Api::V2::Token::Resolution::WONT_FIX = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_twirp.rb#33
class GitHub::Proto::SecretScanning::Api::V2::TokenAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def add_token_remediation(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_generated_alert_activity_audit(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_generated_alert_autofix(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_more_timeline_events(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_timeline(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_token(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_token_counts(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_token_group_by_counts(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_token_latest_remediation(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_token_locations(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_token_types_info(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_token_validation_status(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_tokens(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_tokens_mean_time_to_remediation(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def report_token(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def resolve_token(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def resolve_tokens(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def validate_enabled_repos(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Api::V2::TokenAPIService < ::Twirp::Service; end

class GitHub::Proto::SecretScanning::Api::V2::TokenGroup
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::TokenGroup::TokenMember
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::TokenLocation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::TokenLocationIdsSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::TokenRemediation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::TokenRemediation::EventType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#521
GitHub::Proto::SecretScanning::Api::V2::TokenRemediation::EventType::ACTIVE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#521
GitHub::Proto::SecretScanning::Api::V2::TokenRemediation::EventType::REQUEST_REVOKED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#521
GitHub::Proto::SecretScanning::Api::V2::TokenRemediation::EventType::REVOKED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#521
GitHub::Proto::SecretScanning::Api::V2::TokenRemediation::EventType::UNKNOWN = T.let(T.unsafe(nil), Integer)

module GitHub::Proto::SecretScanning::Api::V2::TokenScanScope
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#584
GitHub::Proto::SecretScanning::Api::V2::TokenScanScope::COMMIT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#584
GitHub::Proto::SecretScanning::Api::V2::TokenScanScope::REPO = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#584
GitHub::Proto::SecretScanning::Api::V2::TokenScanScope::UNKNOWN = T.let(T.unsafe(nil), Integer)

module GitHub::Proto::SecretScanning::Api::V2::TokenState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#583
GitHub::Proto::SecretScanning::Api::V2::TokenState::NO_STATE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#583
GitHub::Proto::SecretScanning::Api::V2::TokenState::OPEN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#583
GitHub::Proto::SecretScanning::Api::V2::TokenState::RESOLVED = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V2::TokenType
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::TokenValidationDetails
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::TokenValidationSupport
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V2::TokenValidity
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#587
GitHub::Proto::SecretScanning::Api::V2::TokenValidity::TOKEN_VALIDITY_ACTIVE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#587
GitHub::Proto::SecretScanning::Api::V2::TokenValidity::TOKEN_VALIDITY_INACTIVE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#587
GitHub::Proto::SecretScanning::Api::V2::TokenValidity::TOKEN_VALIDITY_REVOKED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#587
GitHub::Proto::SecretScanning::Api::V2::TokenValidity::TOKEN_VALIDITY_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/token_scanning_service_api_pb.rb#587
GitHub::Proto::SecretScanning::Api::V2::TokenValidity::TOKEN_VALIDITY_UNVERIFIABLE = T.let(T.unsafe(nil), Integer)

module GitHub::Proto::SecretScanning::Api::V2::UpdateCustomPatternChangeType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#240
GitHub::Proto::SecretScanning::Api::V2::UpdateCustomPatternChangeType::DRY_RUN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v2/custom_pattern_api_pb.rb#240
GitHub::Proto::SecretScanning::Api::V2::UpdateCustomPatternChangeType::PUBLISH = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V2::UpdateCustomPatternRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::UpdateCustomPatternResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::ValidateEnabledReposRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::ValidateEnabledReposResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V2::ValidityEvent
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#168
module GitHub::Proto::SecretScanning::Api::V3; end

# source://secret-scanning-proto//lib/secret_scanning_proto.rb#317
module GitHub::Proto::SecretScanning::Api::V3::Clients; end

# source://secret-scanning-proto//lib/secret_scanning_proto.rb#318
class GitHub::Proto::SecretScanning::Api::V3::Clients::CustomPatternAPI
  # @return [CustomPatternAPI] a new instance of CustomPatternAPI
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#321
  def initialize(conn, opts = T.unsafe(nil)); end

  # Returns the value of attribute custom_patterns_client.
  #
  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#319
  def custom_patterns_client; end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#337
  def delete_custom_patterns(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#325
  def get_custom_patterns(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#329
  def get_custom_patterns_count(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#341
  def get_generated_expressions(options); end

  # source://secret-scanning-proto//lib/secret_scanning_proto.rb#333
  def update_custom_pattern_settings(options); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_twirp.rb#20
class GitHub::Proto::SecretScanning::Api::V3::CustomPatternAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def delete_custom_patterns(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_custom_patterns(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_custom_patterns_count(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_generated_expressions(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def update_custom_pattern_settings(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Api::V3::CustomPatternAPIService < ::Twirp::Service; end

class GitHub::Proto::SecretScanning::Api::V3::CustomPatternBusinessScope
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::CustomPatternBusinessSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::CustomPatternIdsSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::CustomPatternOrgScope
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::CustomPatternOrgSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::CustomPatternRepoScope
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::CustomPatternRepoSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::CustomPatternScanSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::CustomPatternSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V3::CustomPatternState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#193
GitHub::Proto::SecretScanning::Api::V3::CustomPatternState::DELETED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#193
GitHub::Proto::SecretScanning::Api::V3::CustomPatternState::DISABLED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#193
GitHub::Proto::SecretScanning::Api::V3::CustomPatternState::PUBLISHED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#193
GitHub::Proto::SecretScanning::Api::V3::CustomPatternState::UNPUBLISHED = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V3::CustomPatternsFilter
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::DeleteCustomPatternsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::DeleteCustomPatternsRequest::CustomPatternIDWithVersion
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::DeleteCustomPatternsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::GeneratedExpression
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::GetCustomPatternsCountRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::GetCustomPatternsCountResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::GetCustomPatternsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::GetCustomPatternsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::GetGeneratedExpressionsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::GetGeneratedExpressionsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V3::OwnerScope
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#197
GitHub::Proto::SecretScanning::Api::V3::OwnerScope::BUSINESS_SCOPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#197
GitHub::Proto::SecretScanning::Api::V3::OwnerScope::ORGANIZATION_SCOPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#197
GitHub::Proto::SecretScanning::Api::V3::OwnerScope::REPOSITORY_SCOPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#197
GitHub::Proto::SecretScanning::Api::V3::OwnerScope::UNKNOWN_SCOPE = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V3::PostProcessing
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V3::PostUpdateCustomPatternAction
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#196
GitHub::Proto::SecretScanning::Api::V3::PostUpdateCustomPatternAction::DELETE_ALERTS = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#196
GitHub::Proto::SecretScanning::Api::V3::PostUpdateCustomPatternAction::RESOLVE_ALERTS = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#196
GitHub::Proto::SecretScanning::Api::V3::PostUpdateCustomPatternAction::UNKNOWN = T.let(T.unsafe(nil), Integer)

module GitHub::Proto::SecretScanning::Api::V3::PushProtectedFilter
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#195
GitHub::Proto::SecretScanning::Api::V3::PushProtectedFilter::INCLUDE_ALL = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#195
GitHub::Proto::SecretScanning::Api::V3::PushProtectedFilter::NOT_PUSH_PROTECTED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#195
GitHub::Proto::SecretScanning::Api::V3::PushProtectedFilter::PUSH_PROTECTED = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V3::SecretScanCustomPattern
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Api::V3::SortOrder
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#194
GitHub::Proto::SecretScanning::Api::V3::SortOrder::CREATED_ASCENDING = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#194
GitHub::Proto::SecretScanning::Api::V3::SortOrder::CREATED_DESCENDING = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#194
GitHub::Proto::SecretScanning::Api::V3::SortOrder::NAME_ASCENDING = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#194
GitHub::Proto::SecretScanning::Api::V3::SortOrder::NAME_DESCENDING = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#194
GitHub::Proto::SecretScanning::Api::V3::SortOrder::NO_SORT_ORDER = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#194
GitHub::Proto::SecretScanning::Api::V3::SortOrder::UPDATED_ASCENDING = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/api/v3/custom_pattern_api_pb.rb#194
GitHub::Proto::SecretScanning::Api::V3::SortOrder::UPDATED_DESCENDING = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Api::V3::UpdateCustomPatternSettingsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Api::V3::UpdateCustomPatternSettingsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/blobs/v1/api_pb.rb#26
module GitHub::Proto::SecretScanning::Blobs; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/blobs/v1/api_pb.rb#27
module GitHub::Proto::SecretScanning::Blobs::V1; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/blobs/v1/api_twirp.rb#16
class GitHub::Proto::SecretScanning::Blobs::V1::BlobsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_locations(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/blobs/v1/api_twirp.rb#10
class GitHub::Proto::SecretScanning::Blobs::V1::BlobsAPIService < ::Twirp::Service; end

class GitHub::Proto::SecretScanning::Blobs::V1::GetLocationsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Blobs::V1::GetLocationsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Blobs::V1::GetLocationsResponse::BlobRevision
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/discussions/v1/discussion_pb.rb#18
module GitHub::Proto::SecretScanning::Discussions; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/discussions/v1/discussion_pb.rb#19
module GitHub::Proto::SecretScanning::Discussions::V1; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/discussions/v1/discussions_api_twirp.rb#17
class GitHub::Proto::SecretScanning::Discussions::V1::DiscussionAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_discussions(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def stream_discussion_content(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/discussions/v1/discussions_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Discussions::V1::DiscussionAPIService < ::Twirp::Service; end

class GitHub::Proto::SecretScanning::Discussions::V1::DiscussionContent
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Discussions::V1::DiscussionContentType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/discussions/v1/discussions_api_pb.rb#61
GitHub::Proto::SecretScanning::Discussions::V1::DiscussionContentType::BODY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/discussions/v1/discussions_api_pb.rb#61
GitHub::Proto::SecretScanning::Discussions::V1::DiscussionContentType::COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/discussions/v1/discussions_api_pb.rb#61
GitHub::Proto::SecretScanning::Discussions::V1::DiscussionContentType::TITLE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/discussions/v1/discussions_api_pb.rb#61
GitHub::Proto::SecretScanning::Discussions::V1::DiscussionContentType::UNKNOWN = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Discussions::V1::DiscussionIdentifier
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Discussions::V1::ListDiscussionsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Discussions::V1::ListDiscussionsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Discussions::V1::StreamDiscussionContentRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Discussions::V1::StreamDiscussionContentResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Discussions::V1::StreamDiscussionContentResponseCursor
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Discussions::V1::StreamDiscussionCursorValue
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/issues/v1/issue_pb.rb#31
module GitHub::Proto::SecretScanning::Issues; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/issues/v1/issue_pb.rb#32
module GitHub::Proto::SecretScanning::Issues::V1; end

class GitHub::Proto::SecretScanning::Issues::V1::GetIssueBodyHistoryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::GetIssueBodyHistoryResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::GetIssueCommentHistoryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::GetIssueCommentHistoryResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::GetIssueCommentRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::GetIssueCommentResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::GetIssueRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::GetIssueResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::GetIssueTitleHistoryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::GetIssueTitleHistoryResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::Issue
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/issues/v1/issues_api_twirp.rb#22
class GitHub::Proto::SecretScanning::Issues::V1::IssueAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_issue(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_issue_body_history(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_issue_comment(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_issue_comment_history(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_issue_title_history(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_issue_comments(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_issues(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/issues/v1/issues_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Issues::V1::IssueAPIService < ::Twirp::Service; end

class GitHub::Proto::SecretScanning::Issues::V1::IssueBody
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::IssueComment
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::IssueIdentifier
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::IssueTitle
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::ListIssueCommentsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::ListIssueCommentsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::ListIssuesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Issues::V1::ListIssuesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/metrics/v1/metrics_api_pb.rb#215
module GitHub::Proto::SecretScanning::Metrics; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/metrics/v1/metrics_api_pb.rb#216
module GitHub::Proto::SecretScanning::Metrics::V1; end

class GitHub::Proto::SecretScanning::Metrics::V1::Alert
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::BypassReasonCount
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetAlertsForInsightsBackfillRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetAlertsForInsightsBackfillRequestResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetBlockCountsByRepoRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetBlockCountsByRepoResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetBlockCountsByTokenTypeRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetBlockCountsByTokenTypeResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetBypassCountsByRepoRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetBypassCountsByRepoResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetBypassCountsByTokenTypeRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetBypassCountsByTokenTypeResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetPushProtectionMetricsForReposRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetPushProtectionMetricsForReposResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetPushProtectionMetricsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetPushProtectionMetricsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetTokenAlertMetricsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetTokenAlertMetricsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetTokenPushProtectionMetricsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::GetTokenPushProtectionMetricsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/metrics/v1/metrics_api_twirp.rb#24
class GitHub::Proto::SecretScanning::Metrics::V1::MetricsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_alerts_for_insights_backfill(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_block_counts_by_repo(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_block_counts_by_token_type(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_bypass_counts_by_repo(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_bypass_counts_by_token_type(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_push_protection_metrics(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_push_protection_metrics_for_repos(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_token_alert_metrics(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_token_push_protection_metrics(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/metrics/v1/metrics_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Metrics::V1::MetricsAPIService < ::Twirp::Service; end

class GitHub::Proto::SecretScanning::Metrics::V1::RepoCount
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::RepoSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Metrics::V1::TokenTypeCount
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/organizations/v1/organization_pb.rb#32
module GitHub::Proto::SecretScanning::Organizations; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/organizations/v1/organization_pb.rb#33
module GitHub::Proto::SecretScanning::Organizations::V1; end

class GitHub::Proto::SecretScanning::Organizations::V1::GetOrganizationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Organizations::V1::GetOrganizationResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Organizations::V1::ListOrganizationsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Organizations::V1::ListOrganizationsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Organizations::V1::Organization
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Organizations::V1::Organization::SpamuraiClassification
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/organizations/v1/organization_pb.rb#35
GitHub::Proto::SecretScanning::Organizations::V1::Organization::SpamuraiClassification::HAMMY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/organizations/v1/organization_pb.rb#35
GitHub::Proto::SecretScanning::Organizations::V1::Organization::SpamuraiClassification::SPAMMY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/organizations/v1/organization_pb.rb#35
GitHub::Proto::SecretScanning::Organizations::V1::Organization::SpamuraiClassification::SPAMURAI_CLASSIFICATION_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/organizations/v1/organizations_api_twirp.rb#17
class GitHub::Proto::SecretScanning::Organizations::V1::OrganizationAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_organization(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_organizations(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/organizations/v1/organizations_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Organizations::V1::OrganizationAPIService < ::Twirp::Service; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/pull_requests/v1/pull_request_pb.rb#18
module GitHub::Proto::SecretScanning::PullRequests; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/pull_requests/v1/pull_request_pb.rb#19
module GitHub::Proto::SecretScanning::PullRequests::V1; end

class GitHub::Proto::SecretScanning::PullRequests::V1::ListPullRequestsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::PullRequests::V1::ListPullRequestsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::PullRequests::V1::PullRequestContent
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::PullRequests::V1::PullRequestContentType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/pull_requests/v1/pull_requests_api_pb.rb#63
GitHub::Proto::SecretScanning::PullRequests::V1::PullRequestContentType::BODY = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/pull_requests/v1/pull_requests_api_pb.rb#63
GitHub::Proto::SecretScanning::PullRequests::V1::PullRequestContentType::COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/pull_requests/v1/pull_requests_api_pb.rb#63
GitHub::Proto::SecretScanning::PullRequests::V1::PullRequestContentType::REVIEW = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/pull_requests/v1/pull_requests_api_pb.rb#63
GitHub::Proto::SecretScanning::PullRequests::V1::PullRequestContentType::REVIEW_COMMENT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/pull_requests/v1/pull_requests_api_pb.rb#63
GitHub::Proto::SecretScanning::PullRequests::V1::PullRequestContentType::TITLE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/pull_requests/v1/pull_requests_api_pb.rb#63
GitHub::Proto::SecretScanning::PullRequests::V1::PullRequestContentType::UNKNOWN = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::PullRequests::V1::PullRequestIdentifier
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/pull_requests/v1/pull_requests_api_twirp.rb#17
class GitHub::Proto::SecretScanning::PullRequests::V1::PullRequestsAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_pull_requests(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def stream_pull_request_content(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/pull_requests/v1/pull_requests_api_twirp.rb#10
class GitHub::Proto::SecretScanning::PullRequests::V1::PullRequestsAPIService < ::Twirp::Service; end

class GitHub::Proto::SecretScanning::PullRequests::V1::StreamPullRequestContentRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::PullRequests::V1::StreamPullRequestContentResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::PullRequests::V1::StreamPullRequestContentResponseCursor
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::PullRequests::V1::StreamPullRequestCursorValue
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/repositories/v1/repository_pb.rb#66
module GitHub::Proto::SecretScanning::Repositories; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/repositories/v1/repository_pb.rb#67
module GitHub::Proto::SecretScanning::Repositories::V1; end

class GitHub::Proto::SecretScanning::Repositories::V1::Business
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Repositories::V1::Capabilities
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Repositories::V1::GetRepositoryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Repositories::V1::GetRepositoryResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Repositories::V1::ListRepositoriesIdsSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Repositories::V1::ListRepositoriesOrgSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Repositories::V1::ListRepositoriesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Repositories::V1::ListRepositoriesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Repositories::V1::ListRepositoriesUserSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Repositories::V1::Repository
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Repositories::V1::Repository::Visibility
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/repositories/v1/repository_pb.rb#69
GitHub::Proto::SecretScanning::Repositories::V1::Repository::Visibility::INTERNAL = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/repositories/v1/repository_pb.rb#69
GitHub::Proto::SecretScanning::Repositories::V1::Repository::Visibility::PRIVATE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/repositories/v1/repository_pb.rb#69
GitHub::Proto::SecretScanning::Repositories::V1::Repository::Visibility::PUBLIC = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/repositories/v1/repository_pb.rb#69
GitHub::Proto::SecretScanning::Repositories::V1::Repository::Visibility::VISIBILITY_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/repositories/v1/repositories_api_twirp.rb#17
class GitHub::Proto::SecretScanning::Repositories::V1::RepositoryAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_repository(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def list_repositories(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/repositories/v1/repositories_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Repositories::V1::RepositoryAPIService < ::Twirp::Service; end

class GitHub::Proto::SecretScanning::Repositories::V1::User
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Repositories::V1::User::Type
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/repositories/v1/repository_pb.rb#71
GitHub::Proto::SecretScanning::Repositories::V1::User::Type::BOT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/repositories/v1/repository_pb.rb#71
GitHub::Proto::SecretScanning::Repositories::V1::User::Type::ORGANIZATION = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/repositories/v1/repository_pb.rb#71
GitHub::Proto::SecretScanning::Repositories::V1::User::Type::UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/repositories/v1/repository_pb.rb#71
GitHub::Proto::SecretScanning::Repositories::V1::User::Type::USER = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v1/api_pb.rb#81
module GitHub::Proto::SecretScanning::Scans; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v1/api_pb.rb#82
module GitHub::Proto::SecretScanning::Scans::V1; end

class GitHub::Proto::SecretScanning::Scans::V1::AddBypassRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V1::AddBypassResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V1::Bypass
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V1::BypassPlaceholder
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Scans::V1::BypassReason
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v1/api_pb.rb#91
GitHub::Proto::SecretScanning::Scans::V1::BypassReason::FALSE_POSITIVE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v1/api_pb.rb#91
GitHub::Proto::SecretScanning::Scans::V1::BypassReason::UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v1/api_pb.rb#91
GitHub::Proto::SecretScanning::Scans::V1::BypassReason::USED_IN_TESTS = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v1/api_pb.rb#91
GitHub::Proto::SecretScanning::Scans::V1::BypassReason::WILL_FIX_LATER = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Scans::V1::GetBypassPlaceholderRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V1::GetBypassPlaceholderResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V1::PromoteBypassRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V1::PromoteBypassResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v1/api_twirp.rb#18
class GitHub::Proto::SecretScanning::Scans::V1::ScansAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def add_bypass(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_bypass_placeholder(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def promote_bypass(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v1/api_twirp.rb#10
class GitHub::Proto::SecretScanning::Scans::V1::ScansAPIService < ::Twirp::Service; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v2/api_pb.rb#106
module GitHub::Proto::SecretScanning::Scans::V2; end

class GitHub::Proto::SecretScanning::Scans::V2::AddBypassReviewerRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V2::AddBypassReviewerResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V2::BypassReviewer
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Scans::V2::BypassReviewer::BypassReviewerType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v2/api_pb.rb#114
GitHub::Proto::SecretScanning::Scans::V2::BypassReviewer::BypassReviewerType::ORG_ADMIN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v2/api_pb.rb#114
GitHub::Proto::SecretScanning::Scans::V2::BypassReviewer::BypassReviewerType::ROLE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v2/api_pb.rb#114
GitHub::Proto::SecretScanning::Scans::V2::BypassReviewer::BypassReviewerType::TEAM = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v2/api_pb.rb#114
GitHub::Proto::SecretScanning::Scans::V2::BypassReviewer::BypassReviewerType::UNKNOWN = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Scans::V2::GetBypassReviewersRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V2::GetBypassReviewersResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V2::Location
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V2::RemoveBypassReviewerRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V2::ScanBytesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V2::ScanBytesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V2::ScanPushRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Scans::V2::ScanPushResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v2/api_twirp.rb#20
class GitHub::Proto::SecretScanning::Scans::V2::ScansAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def add_bypass_reviewer(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_bypass_reviewers(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def remove_bypass_reviewer(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def scan_bytes(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def scan_push(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/scans/v2/api_twirp.rb#10
class GitHub::Proto::SecretScanning::Scans::V2::ScansAPIService < ::Twirp::Service; end

class GitHub::Proto::SecretScanning::Scans::V2::Secret
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/tenant/v1/tenant_api_pb.rb#20
module GitHub::Proto::SecretScanning::Tenant; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/tenant/v1/tenant_api_pb.rb#21
module GitHub::Proto::SecretScanning::Tenant::V1; end

class GitHub::Proto::SecretScanning::Tenant::V1::GetTenantRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Tenant::V1::GetTenantResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/tenant/v1/tenant_api_twirp.rb#16
class GitHub::Proto::SecretScanning::Tenant::V1::TenantAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_tenant(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/tenant/v1/tenant_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Tenant::V1::TenantAPIService < ::Twirp::Service; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/owners_pb.rb#21
module GitHub::Proto::SecretScanning::Types; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/owners_pb.rb#22
module GitHub::Proto::SecretScanning::Types::V1; end

module GitHub::Proto::SecretScanning::Types::V1::BypassReason
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/bypass_pb.rb#30
GitHub::Proto::SecretScanning::Types::V1::BypassReason::BYPASS_REASON_FALSE_POSITIVE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/bypass_pb.rb#30
GitHub::Proto::SecretScanning::Types::V1::BypassReason::BYPASS_REASON_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/bypass_pb.rb#30
GitHub::Proto::SecretScanning::Types::V1::BypassReason::BYPASS_REASON_USED_IN_TESTS = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/bypass_pb.rb#30
GitHub::Proto::SecretScanning::Types::V1::BypassReason::BYPASS_REASON_WILL_FIX_LATER = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Types::V1::DelegatedBypassRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Types::V1::JobGroup
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Types::V1::JobGroupStatus
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/job_groups_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::JobGroupStatus::JOB_GROUP_COMPLETED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/job_groups_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::JobGroupStatus::JOB_GROUP_PENDING = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/job_groups_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::JobGroupStatus::JOB_GROUP_RUNNING = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/job_groups_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::JobGroupStatus::JOB_GROUP_SKIPPED_OR_FAILED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/job_groups_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::JobGroupStatus::JOB_GROUP_UNKNOWN = T.let(T.unsafe(nil), Integer)

module GitHub::Proto::SecretScanning::Types::V1::OwnerScope
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/owners_pb.rb#23
GitHub::Proto::SecretScanning::Types::V1::OwnerScope::BUSINESS_SCOPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/owners_pb.rb#23
GitHub::Proto::SecretScanning::Types::V1::OwnerScope::ORGANIZATION_SCOPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/owners_pb.rb#23
GitHub::Proto::SecretScanning::Types::V1::OwnerScope::REPOSITORY_SCOPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/owners_pb.rb#23
GitHub::Proto::SecretScanning::Types::V1::OwnerScope::UNKNOWN_SCOPE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/owners_pb.rb#23
GitHub::Proto::SecretScanning::Types::V1::OwnerScope::USER_SCOPE = T.let(T.unsafe(nil), Integer)

class GitHub::Proto::SecretScanning::Types::V1::ReferenceUpdate
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Types::V1::TokenMetadata
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Types::V1::TokenResolution
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::TokenResolution::FALSE_POSITIVE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::TokenResolution::HIDDEN_BY_CONFIG = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::TokenResolution::NO_RESOLUTION = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::TokenResolution::PATTERN_DELETED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::TokenResolution::PATTERN_EDITED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::TokenResolution::REOPENED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::TokenResolution::REVOKED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::TokenResolution::USED_IN_TESTS = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#34
GitHub::Proto::SecretScanning::Types::V1::TokenResolution::WONT_FIX = T.let(T.unsafe(nil), Integer)

module GitHub::Proto::SecretScanning::Types::V1::TokenValidity
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#35
GitHub::Proto::SecretScanning::Types::V1::TokenValidity::TOKEN_VALIDITY_ACTIVE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#35
GitHub::Proto::SecretScanning::Types::V1::TokenValidity::TOKEN_VALIDITY_INACTIVE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#35
GitHub::Proto::SecretScanning::Types::V1::TokenValidity::TOKEN_VALIDITY_REVOKED = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#35
GitHub::Proto::SecretScanning::Types::V1::TokenValidity::TOKEN_VALIDITY_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/types/v1/token_pb.rb#35
GitHub::Proto::SecretScanning::Types::V1::TokenValidity::TOKEN_VALIDITY_UNVERIFIABLE = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/users/v1/users_api_pb.rb#49
module GitHub::Proto::SecretScanning::Users; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/users/v1/users_api_pb.rb#50
module GitHub::Proto::SecretScanning::Users::V1; end

class GitHub::Proto::SecretScanning::Users::V1::BusinessSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Users::V1::FindUsersRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Users::V1::FindUsersResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Users::V1::IdsSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Users::V1::LoginsSelector
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class GitHub::Proto::SecretScanning::Users::V1::UserListItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module GitHub::Proto::SecretScanning::Users::V1::UserType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/users/v1/users_api_pb.rb#57
GitHub::Proto::SecretScanning::Users::V1::UserType::USER_TYPE_BOT = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/users/v1/users_api_pb.rb#57
GitHub::Proto::SecretScanning::Users::V1::UserType::USER_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/users/v1/users_api_pb.rb#57
GitHub::Proto::SecretScanning::Users::V1::UserType::USER_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/users/v1/users_api_pb.rb#57
GitHub::Proto::SecretScanning::Users::V1::UserType::USER_TYPE_USER = T.let(T.unsafe(nil), Integer)

# source://secret-scanning-proto//lib/github/proto/secret_scanning/users/v1/users_api_twirp.rb#16
class GitHub::Proto::SecretScanning::Users::V1::UsersAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def find_users(input, req_opts = T.unsafe(nil)); end
end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/users/v1/users_api_twirp.rb#10
class GitHub::Proto::SecretScanning::Users::V1::UsersAPIService < ::Twirp::Service; end

# source://secret-scanning-proto//lib/github/proto/secret_scanning/version.rb#6
GitHub::Proto::SecretScanning::VERSION = T.let(T.unsafe(nil), String)

module GitHub::SCIM; end
module Google::Protobuf::MessageExts::ClassMethods; end

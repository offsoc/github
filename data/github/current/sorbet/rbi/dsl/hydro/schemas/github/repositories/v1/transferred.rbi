# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Repositories::V1::Transferred`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Repositories::V1::Transferred`.

class Hydro::Schemas::Github::Repositories::V1::Transferred
  sig do
    params(
      new_name: T.nilable(String),
      new_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      new_visibility: T.nilable(T.any(Symbol, Integer)),
      previous_name: T.nilable(String),
      previous_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      repository_id: T.nilable(Integer)
    ).void
  end
  def initialize(new_name: nil, new_owner: nil, new_visibility: nil, previous_name: nil, previous_owner: nil, repository_id: nil); end

  sig { void }
  def clear_new_name; end

  sig { void }
  def clear_new_owner; end

  sig { void }
  def clear_new_visibility; end

  sig { void }
  def clear_previous_name; end

  sig { void }
  def clear_previous_owner; end

  sig { void }
  def clear_repository_id; end

  sig { returns(String) }
  def new_name; end

  sig { params(value: String).void }
  def new_name=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def new_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def new_owner=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def new_visibility; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def new_visibility=(value); end

  sig { returns(String) }
  def previous_name; end

  sig { params(value: String).void }
  def previous_name=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def previous_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def previous_owner=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end
end

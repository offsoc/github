syntax = "proto3";
package github.authentication.v0;

option go_package = "client/proto/authentication/v0";
option ruby_package = "Authnd::Proto";

import "google/protobuf/timestamp.proto";

// RequestDeviceAuthRequest contains the parameters needed to begin the process of using a mobile device for authentication based processes.
message RequestDeviceAuthRequest {
  // The user ID of the github account associated with the device auth request.
  int64 user_id = 1;

  // If set to true, the device auth request will not require (or expect) a challenge to be completed for approval.
  bool skip_challenge = 2;

  // Type differeniates the mobile auth request types, the default of type is `2fa_login`
  string type = 3;

  // The ip address of the requestor.
  string ip_address = 4;

  // The display name of the requesting device.
  string device_display_name = 5;
}

message RequestDeviceAuthResponse {
  enum Result {
    // RESULT_UNKNOWN Should never be used because it is the zero value for this field and will be invisible when encoded into JSON.
    RESULT_UNKNOWN = 0;
    // RESULT_SUCCESS indicates the request was successful.
    RESULT_SUCCESS = 1;
    // RESULT_FAILED_NO_VALID_DEVICE_KEYS indicates that the request could not be created because the user does not have any valid device keys that can be used for authentication based processes.
    RESULT_FAILED_NO_VALID_DEVICE_KEYS = 2;
    // Reserved. Was previously 'RESULT_ACTIVE_REQUEST_ALREADY_EXISTS'.
    reserved 3;
    // RESULT_FAILED_GENERIC indicates the request failed. If possible a more descriptive result code should be used.
    RESULT_FAILED_GENERIC = -1;
  }

  // The overall result of processing the RequestDeviceAuthResponse.
  Result result = 1;

  // The device auth request ID.
  int64 id = 2;

  // The challenge that is presented to and verified by the user.
  string challenge = 3;

  // The time at which the device auth request expires.
  google.protobuf.Timestamp expires_at_time = 4;
}

// GetDeviceAuthStatusRequest contains the parameters needed to check the status of a device auth request.
message GetDeviceAuthStatusRequest {
  // The ID of the device auth request to check the status of.
  int64 id = 1;

  // The ID of the user associated with the device auth request.
  int64 user_id = 2;
}

message GetDeviceAuthStatusResponse {
  enum Result {
      // RESULT_UNKNOWN Should never be used because it is the zero value for this field and will be invisible when encoded into JSON.
      RESULT_UNKNOWN = 0;
      // RESULT_SUCCESS indicates the request was successful.
      RESULT_SUCCESS = 1;
      // RESULT_FAILED_NOT_FOUND indicates that device auth request was not found.
      RESULT_FAILED_NOT_FOUND = 2;
      // RESULT_FAILED_GENERIC indicates the request failed. If possible a more descriptive result code should be used.
      RESULT_FAILED_GENERIC = -1;
  }
  enum Status {
      // STATUS_UNKNOWN only used when the result is RESULT_FAILED_NOT_FOUND.
      STATUS_UNKNOWN = 0;
      // STATUS_ACTIVE indicates that the request is still active and has yet to be approved or rejected.
      STATUS_ACTIVE = 1;
      // STATUS_APPROVED indicates that the request has been approved.
      STATUS_APPROVED = 2;
      // STATUS_REJECTED indicates that the request has been rejected.
      STATUS_REJECTED = 3;
      // STATUS_EXPIRED indicates that the request has expired.
      STATUS_EXPIRED = 4;
  }

  // The overall result of processing the GetDeviceAuthStatusResponse.
  Result result = 1;

  // The status of the device device auth request.
  Status status = 2;
}

// FindActiveDeviceAuthRequest contains the parameters needed to find an active device auth request.
message FindActiveDeviceAuthRequest {
  // The ID of the user associated with the device auth request.
  int64 user_id = 1;

  // The oauth access ID associated with the device asking for the device auth request.
  int64 oauth_access_id = 2;
}

message FindActiveDeviceAuthResponse {
  enum Result {
      // RESULT_UNKNOWN Should never be used because it is the zero value for this field and will be invisible when encoded into JSON.
      RESULT_UNKNOWN = 0;
      // RESULT_SUCCESS indicates the request was successful.
      RESULT_SUCCESS = 1;
      // RESULT_NOT_FOUND indicates that there are no active device auth requests for the user.
      RESULT_NOT_FOUND = 2;
      // RESULT_FAILED_GENERIC indicates the request failed. If possible a more descriptive result code should be used.
      RESULT_FAILED_GENERIC = -1;
  }

  // The overall result of processing the FindActiveDeviceAuthResponse.
  Result result = 1;

  // The ID of the active device auth request.
  int64 id = 2;

  // The random payload to be used when creating the signature required for approving or rejecting the device auth request.
  string payload = 3;

  // Whether the requestor has a valid device key. The requestor can use this to determine ahead of time that approving or rejecting the auth request will fail.
  bool has_valid_device_key = 4;

  // Whether the auth request requires a user input challenge in order to approve.
  bool challenge_required = 5;

  // Type differeniates the auth request types.
  string type = 6;

  // The IP address of the requestor.
  string ip_address = 7;

  // The display name of the requesting device.
  string device_display_name = 8;

  // The time the auth request was created
  google.protobuf.Timestamp created_at_utc = 9;
}

// CompleteDeviceAuthRequest contains the parameters needed to approve or reject a mobile auth request.
message CompleteDeviceAuthRequest {
	oneof kind {
    CompleteDeviceAuthMessage approve = 1;
		CompleteDeviceAuthMessage reject = 2;
	}
}

// CompleteDeviceAuthMessage contains the parameters needed to mark a mobile auth request as completed.
message CompleteDeviceAuthMessage {
  // the device auth request ID.
  int64 auth_request_id = 1;

  // the user ID performing the action.
  int64 user_id = 2;

  // the oauth access ID for the device performing the action.
  int64 oauth_access_id = 3;

  // the base64 encoded signature.
  string signature = 4;

  // the version of the signature.
  int64 signature_version = 5;
}

message CompleteDeviceAuthResponse {
  enum Result {
      // RESULT_UNKNOWN Should never be used because it is the zero value for this field and will be invisible when encoded into JSON.
      RESULT_UNKNOWN = 0;
      // RESULT_SUCCESS indicates the request was successful.
      RESULT_SUCCESS = 1;
      // RESULT_FAILED_VALID_DEVICE_KEY_NOT_FOUND indicates the request failed because the device key associated with requestor could not be found or the device key can no longer be used for auth.
      RESULT_FAILED_VALID_DEVICE_KEY_NOT_FOUND = 2;
      // RESULT_FAILED_AUTH_REQUEST_NOT_FOUND indicates the request failed because the auth request could not be found.
      RESULT_FAILED_AUTH_REQUEST_NOT_FOUND = 3;
      // RESULT_FAILED_AUTH_REQUEST_NOT_ACTIVE indicates the request failed because the auth request is no longer active.
      RESULT_FAILED_AUTH_REQUEST_NOT_ACTIVE = 4;
      // RESULT_FAILED_NOT_VERIFIED indicates the request failed because the request could not be verified.
      RESULT_FAILED_NOT_VERIFIED = 5;
      // RESULT_ALREADY_APPROVED indicates the request was a noop because the auth request is already marked as approved.
      RESULT_ALREADY_APPROVED = 6;
      // RESULT_ALREADY_REJECTED indicates the request was a noop because the auth request is already marked as rejected.
      RESULT_ALREADY_REJECTED = 7;
      // RESULT_FAILED_GENERIC indicates the request failed. If possible a more descriptive result code should be used.
      RESULT_FAILED_GENERIC = -1;
  }

  // The overall result of processing the request.
  Result result = 1;
}

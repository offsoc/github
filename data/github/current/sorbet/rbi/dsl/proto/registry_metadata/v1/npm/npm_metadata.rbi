# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Proto::RegistryMetadata::V1::NPM::NPMMetadata`.
# Please instead update this file by running `bin/tapioca dsl Proto::RegistryMetadata::V1::NPM::NPMMetadata`.

class Proto::RegistryMetadata::V1::NPM::NPMMetadata
  sig do
    params(
      author: T.nilable(Proto::RegistryMetadata::V1::NPM::Person),
      bin: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      bugs: T.nilable(Proto::RegistryMetadata::V1::NPM::Bugs),
      bundle_dependencies: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      commit_oid: T.nilable(String),
      contributors: T.nilable(T.any(Google::Protobuf::RepeatedField[Proto::RegistryMetadata::V1::NPM::Person], T::Array[Proto::RegistryMetadata::V1::NPM::Person])),
      cpu: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      deleted_by_id: T.nilable(Integer),
      dependencies: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      description: T.nilable(String),
      dev_dependencies: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      directories: T.nilable(Proto::RegistryMetadata::V1::NPM::Directories),
      dist: T.nilable(Proto::RegistryMetadata::V1::NPM::Dist),
      engines: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      files: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      git_head: T.nilable(String),
      has_shrinkwrap: T.nilable(T::Boolean),
      homepage: T.nilable(String),
      id: T.nilable(String),
      installation_command: T.nilable(String),
      keywords: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      license: T.nilable(String),
      main: T.nilable(String),
      maintainers: T.nilable(T.any(Google::Protobuf::RepeatedField[Proto::RegistryMetadata::V1::NPM::Person], T::Array[Proto::RegistryMetadata::V1::NPM::Person])),
      man: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      name: T.nilable(String),
      node_version: T.nilable(String),
      npm_user: T.nilable(String),
      npm_version: T.nilable(String),
      optional_dependencies: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      os: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      peer_dependencies: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      published_via_actions: T.nilable(T::Boolean),
      readme: T.nilable(String),
      release_id: T.nilable(Integer),
      repository: T.nilable(Proto::RegistryMetadata::V1::NPM::Repository),
      scripts: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      version: T.nilable(String)
    ).void
  end
  def initialize(author: nil, bin: T.unsafe(nil), bugs: nil, bundle_dependencies: T.unsafe(nil), commit_oid: nil, contributors: T.unsafe(nil), cpu: T.unsafe(nil), deleted_by_id: nil, dependencies: T.unsafe(nil), description: nil, dev_dependencies: T.unsafe(nil), directories: nil, dist: nil, engines: T.unsafe(nil), files: T.unsafe(nil), git_head: nil, has_shrinkwrap: nil, homepage: nil, id: nil, installation_command: nil, keywords: T.unsafe(nil), license: nil, main: nil, maintainers: T.unsafe(nil), man: T.unsafe(nil), name: nil, node_version: nil, npm_user: nil, npm_version: nil, optional_dependencies: T.unsafe(nil), os: T.unsafe(nil), peer_dependencies: T.unsafe(nil), published_via_actions: nil, readme: nil, release_id: nil, repository: nil, scripts: T.unsafe(nil), version: nil); end

  sig { returns(T.nilable(Proto::RegistryMetadata::V1::NPM::Person)) }
  def author; end

  sig { params(value: T.nilable(Proto::RegistryMetadata::V1::NPM::Person)).void }
  def author=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def bin; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def bin=(value); end

  sig { returns(T.nilable(Proto::RegistryMetadata::V1::NPM::Bugs)) }
  def bugs; end

  sig { params(value: T.nilable(Proto::RegistryMetadata::V1::NPM::Bugs)).void }
  def bugs=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def bundle_dependencies; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def bundle_dependencies=(value); end

  sig { void }
  def clear_author; end

  sig { void }
  def clear_bin; end

  sig { void }
  def clear_bugs; end

  sig { void }
  def clear_bundle_dependencies; end

  sig { void }
  def clear_commit_oid; end

  sig { void }
  def clear_contributors; end

  sig { void }
  def clear_cpu; end

  sig { void }
  def clear_deleted_by_id; end

  sig { void }
  def clear_dependencies; end

  sig { void }
  def clear_description; end

  sig { void }
  def clear_dev_dependencies; end

  sig { void }
  def clear_directories; end

  sig { void }
  def clear_dist; end

  sig { void }
  def clear_engines; end

  sig { void }
  def clear_files; end

  sig { void }
  def clear_git_head; end

  sig { void }
  def clear_has_shrinkwrap; end

  sig { void }
  def clear_homepage; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_installation_command; end

  sig { void }
  def clear_keywords; end

  sig { void }
  def clear_license; end

  sig { void }
  def clear_main; end

  sig { void }
  def clear_maintainers; end

  sig { void }
  def clear_man; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_node_version; end

  sig { void }
  def clear_npm_user; end

  sig { void }
  def clear_npm_version; end

  sig { void }
  def clear_optional_dependencies; end

  sig { void }
  def clear_os; end

  sig { void }
  def clear_peer_dependencies; end

  sig { void }
  def clear_published_via_actions; end

  sig { void }
  def clear_readme; end

  sig { void }
  def clear_release_id; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_scripts; end

  sig { void }
  def clear_version; end

  sig { returns(String) }
  def commit_oid; end

  sig { params(value: String).void }
  def commit_oid=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Proto::RegistryMetadata::V1::NPM::Person]) }
  def contributors; end

  sig { params(value: Google::Protobuf::RepeatedField[Proto::RegistryMetadata::V1::NPM::Person]).void }
  def contributors=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def cpu; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def cpu=(value); end

  sig { returns(Integer) }
  def deleted_by_id; end

  sig { params(value: Integer).void }
  def deleted_by_id=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def dependencies; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def dependencies=(value); end

  sig { returns(String) }
  def description; end

  sig { params(value: String).void }
  def description=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def dev_dependencies; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def dev_dependencies=(value); end

  sig { returns(T.nilable(Proto::RegistryMetadata::V1::NPM::Directories)) }
  def directories; end

  sig { params(value: T.nilable(Proto::RegistryMetadata::V1::NPM::Directories)).void }
  def directories=(value); end

  sig { returns(T.nilable(Proto::RegistryMetadata::V1::NPM::Dist)) }
  def dist; end

  sig { params(value: T.nilable(Proto::RegistryMetadata::V1::NPM::Dist)).void }
  def dist=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def engines; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def engines=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def files; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def files=(value); end

  sig { returns(String) }
  def git_head; end

  sig { params(value: String).void }
  def git_head=(value); end

  sig { returns(T::Boolean) }
  def has_shrinkwrap; end

  sig { params(value: T::Boolean).void }
  def has_shrinkwrap=(value); end

  sig { returns(String) }
  def homepage; end

  sig { params(value: String).void }
  def homepage=(value); end

  sig { returns(String) }
  def id; end

  sig { params(value: String).void }
  def id=(value); end

  sig { returns(String) }
  def installation_command; end

  sig { params(value: String).void }
  def installation_command=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def keywords; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def keywords=(value); end

  sig { returns(String) }
  def license; end

  sig { params(value: String).void }
  def license=(value); end

  sig { returns(String) }
  def main; end

  sig { params(value: String).void }
  def main=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Proto::RegistryMetadata::V1::NPM::Person]) }
  def maintainers; end

  sig { params(value: Google::Protobuf::RepeatedField[Proto::RegistryMetadata::V1::NPM::Person]).void }
  def maintainers=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def man; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def man=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(String) }
  def node_version; end

  sig { params(value: String).void }
  def node_version=(value); end

  sig { returns(String) }
  def npm_user; end

  sig { params(value: String).void }
  def npm_user=(value); end

  sig { returns(String) }
  def npm_version; end

  sig { params(value: String).void }
  def npm_version=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def optional_dependencies; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def optional_dependencies=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def os; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def os=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def peer_dependencies; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def peer_dependencies=(value); end

  sig { returns(T::Boolean) }
  def published_via_actions; end

  sig { params(value: T::Boolean).void }
  def published_via_actions=(value); end

  sig { returns(String) }
  def readme; end

  sig { params(value: String).void }
  def readme=(value); end

  sig { returns(Integer) }
  def release_id; end

  sig { params(value: Integer).void }
  def release_id=(value); end

  sig { returns(T.nilable(Proto::RegistryMetadata::V1::NPM::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Proto::RegistryMetadata::V1::NPM::Repository)).void }
  def repository=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def scripts; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def scripts=(value); end

  sig { returns(String) }
  def version; end

  sig { params(value: String).void }
  def version=(value); end
end

# typed: true
# frozen_string_literal: true

require "test_helper"
require "<%= file_without_lib_or_extension %>"

class <%= class_name %>Test < GitHub::TestCase
  include GitHub::DatabaseHelpers

  fixtures do
    # create your test data, e.g. use factories
  end

  setup do
    # assert the state of the tables you're querying
    # use `assert_column_exists` to check for columns.
    # Example:
    #
    #     assert_column_exists MyModel, :my_column, type: :string
    #
  end

  sig do
    params(args: T::Hash[Symbol, T.untyped]).
    returns(GitHub::Transitions::<%= class_name %>)
  end
  def new_transition(args = {})
    arguments = GitHub::Transitions::Arguments.new(args)

    transition = GitHub::Transitions::<%= class_name %>.new(arguments)
    transition.stubs(:parallel?).returns(false)
    transition
  end

  test "transition" do
    transition = new_transition(dry_run: false)

    assert_no_query_warnings { transition.run }

    # add assertions here or wrap `transition.run` with them
    # (e.g. `assert_difference` or `assert_queries_matching`)
    # assert_equal 1, MyModel.where(my_column: "bar").count
  end

  test "does nothing on a dry run" do
    transition = new_transition(dry_run: true)

    assert_no_query_warnings { transition.run }

    # add assertions here or wrap `transition.run` with them
    # (e.g. `assert_difference` or `assert_queries_matching`)
    # assert_equal 0, MyModel.where(my_column: "bar").count
  end
end

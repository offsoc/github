# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Copilotapi::Chat::V1::Commit`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Copilotapi::Chat::V1::Commit`.

class MonolithTwirp::Copilotapi::Chat::V1::Commit
  sig do
    params(
      author_email: T.nilable(String),
      author_login: T.nilable(String),
      author_name: T.nilable(String),
      co_authors: T.nilable(T.any(Google::Protobuf::RepeatedField[MonolithTwirp::Copilotapi::Chat::V1::CommitAuthor], T::Array[MonolithTwirp::Copilotapi::Chat::V1::CommitAuthor])),
      commit_msg: T.nilable(String),
      commit_oid: T.nilable(String),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      diff_hunks: T.nilable(T.any(Google::Protobuf::RepeatedField[MonolithTwirp::Copilotapi::Chat::V1::DiffHunk], T::Array[MonolithTwirp::Copilotapi::Chat::V1::DiffHunk])),
      permalink: T.nilable(String),
      repo_id: T.nilable(Integer),
      repo_name: T.nilable(String),
      repo_owner: T.nilable(String)
    ).void
  end
  def initialize(author_email: nil, author_login: nil, author_name: nil, co_authors: T.unsafe(nil), commit_msg: nil, commit_oid: nil, created_at: nil, diff_hunks: T.unsafe(nil), permalink: nil, repo_id: nil, repo_name: nil, repo_owner: nil); end

  sig { returns(String) }
  def author_email; end

  sig { params(value: String).void }
  def author_email=(value); end

  sig { returns(String) }
  def author_login; end

  sig { params(value: String).void }
  def author_login=(value); end

  sig { returns(String) }
  def author_name; end

  sig { params(value: String).void }
  def author_name=(value); end

  sig { void }
  def clear_author_email; end

  sig { void }
  def clear_author_login; end

  sig { void }
  def clear_author_name; end

  sig { void }
  def clear_co_authors; end

  sig { void }
  def clear_commit_msg; end

  sig { void }
  def clear_commit_oid; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_diff_hunks; end

  sig { void }
  def clear_permalink; end

  sig { void }
  def clear_repo_id; end

  sig { void }
  def clear_repo_name; end

  sig { void }
  def clear_repo_owner; end

  sig { returns(Google::Protobuf::RepeatedField[MonolithTwirp::Copilotapi::Chat::V1::CommitAuthor]) }
  def co_authors; end

  sig { params(value: Google::Protobuf::RepeatedField[MonolithTwirp::Copilotapi::Chat::V1::CommitAuthor]).void }
  def co_authors=(value); end

  sig { returns(String) }
  def commit_msg; end

  sig { params(value: String).void }
  def commit_msg=(value); end

  sig { returns(String) }
  def commit_oid; end

  sig { params(value: String).void }
  def commit_oid=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(Google::Protobuf::RepeatedField[MonolithTwirp::Copilotapi::Chat::V1::DiffHunk]) }
  def diff_hunks; end

  sig { params(value: Google::Protobuf::RepeatedField[MonolithTwirp::Copilotapi::Chat::V1::DiffHunk]).void }
  def diff_hunks=(value); end

  sig { returns(String) }
  def permalink; end

  sig { params(value: String).void }
  def permalink=(value); end

  sig { returns(Integer) }
  def repo_id; end

  sig { params(value: Integer).void }
  def repo_id=(value); end

  sig { returns(String) }
  def repo_name; end

  sig { params(value: String).void }
  def repo_name=(value); end

  sig { returns(String) }
  def repo_owner; end

  sig { params(value: String).void }
  def repo_owner=(value); end
end

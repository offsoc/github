# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bert` gem.
# Please instead update this file by running `bin/tapioca gem bert`.

# source://bert//lib/bert/bert.rb#3
module BERT
  class << self
    def decode(bert); end

    # source://bert//lib/bert/bert.rb#29
    def ebin(str); end

    def encode(ruby); end

    # source://bert//lib/bert/bert.rb#21
    def encode_to_buffer(ruby); end

    # @return [Boolean]
    #
    # source://bert//lib/bert/bert.rb#4
    def supports?(v); end
  end
end

# source://bert//lib/bert/decode.rb#4
class BERT::Decode
  include ::BERT::Types

  # @return [Decode] a new instance of Decode
  #
  # source://bert//lib/bert/decode.rb#32
  def initialize(ins); end

  # source://bert//lib/bert/decode.rb#271
  def fail(str); end

  # Returns the value of attribute in.
  #
  # source://bert//lib/bert/decode.rb#5
  def in; end

  # Sets the attribute in
  #
  # @param value the value to set the attribute in to.
  #
  # source://bert//lib/bert/decode.rb#5
  def in=(_arg0); end

  # source://bert//lib/bert/decode.rb#79
  def peek(length); end

  # source://bert//lib/bert/decode.rb#89
  def peek_1; end

  # source://bert//lib/bert/decode.rb#93
  def peek_2; end

  # source://bert//lib/bert/decode.rb#62
  def read(length); end

  # source://bert//lib/bert/decode.rb#97
  def read_1; end

  # source://bert//lib/bert/decode.rb#101
  def read_2; end

  # source://bert//lib/bert/decode.rb#105
  def read_4; end

  # source://bert//lib/bert/decode.rb#37
  def read_any; end

  # source://bert//lib/bert/decode.rb#41
  def read_any_raw; end

  # source://bert//lib/bert/decode.rb#113
  def read_atom; end

  # source://bert//lib/bert/decode.rb#265
  def read_bin; end

  # source://bert//lib/bert/decode.rb#196
  def read_complex_type(arity); end

  # source://bert//lib/bert/decode.rb#221
  def read_dict; end

  # source://bert//lib/bert/decode.rb#251
  def read_erl_string; end

  # source://bert//lib/bert/decode.rb#164
  def read_float; end

  # source://bert//lib/bert/decode.rb#130
  def read_int; end

  # source://bert//lib/bert/decode.rb#151
  def read_large_bignum; end

  # source://bert//lib/bert/decode.rb#175
  def read_large_tuple; end

  # source://bert//lib/bert/decode.rb#257
  def read_list; end

  # source://bert//lib/bert/decode.rb#238
  def read_nil; end

  # source://bert//lib/bert/decode.rb#138
  def read_small_bignum; end

  # source://bert//lib/bert/decode.rb#125
  def read_small_int; end

  # source://bert//lib/bert/decode.rb#170
  def read_small_tuple; end

  # source://bert//lib/bert/decode.rb#109
  def read_string(length); end

  # source://bert//lib/bert/decode.rb#180
  def read_tuple(arity); end

  # source://bert//lib/bert/decode.rb#243
  def read_unicode_string; end

  private

  # source://bert//lib/bert/decode.rb#277
  def read_enc_string; end

  class << self
    # source://bert//lib/bert/decode.rb#12
    def decode(string); end

    # source://bert//lib/bert/decode.rb#8
    def impl; end
  end
end

# source://bert//lib/bert/decoder.rb#2
class BERT::Decoder
  class << self
    # Decode a BERT into a Ruby object.
    #   +bert+ is the BERT String
    #
    # Returns a Ruby object
    #
    # source://bert//lib/bert/decoder.rb#7
    def decode(bert); end
  end
end

# source://bert//lib/bert/encode.rb#4
class BERT::Encode
  include ::BERT::Types

  # @return [Encode] a new instance of Encode
  #
  # source://bert//lib/bert/encode.rb#88
  def initialize(out); end

  # Returns the value of attribute out.
  #
  # source://bert//lib/bert/encode.rb#86
  def out; end

  # Sets the attribute out
  #
  # @param value the value to set the attribute out to.
  #
  # source://bert//lib/bert/encode.rb#86
  def out=(_arg0); end

  # source://bert//lib/bert/encode.rb#158
  def write_1(byte); end

  # source://bert//lib/bert/encode.rb#162
  def write_2(short); end

  # source://bert//lib/bert/encode.rb#166
  def write_4(long); end

  # source://bert//lib/bert/encode.rb#140
  def write_any(obj); end

  # source://bert//lib/bert/encode.rb#145
  def write_any_raw(obj); end

  # source://bert//lib/bert/encode.rb#203
  def write_bignum(num); end

  # source://bert//lib/bert/encode.rb#216
  def write_bignum_guts(num); end

  # source://bert//lib/bert/encode.rb#249
  def write_binary(data); end

  # source://bert//lib/bert/encode.rb#174
  def write_boolean(bool); end

  # source://bert//lib/bert/encode.rb#198
  def write_float(float); end

  # source://bert//lib/bert/encode.rb#186
  def write_integer(num); end

  # source://bert//lib/bert/encode.rb#240
  def write_list(data); end

  # source://bert//lib/bert/encode.rb#170
  def write_string(string); end

  # source://bert//lib/bert/encode.rb#178
  def write_symbol(sym); end

  # source://bert//lib/bert/encode.rb#226
  def write_tuple(data); end

  private

  # source://bert//lib/bert/encode.rb#261
  def fail(obj); end

  # source://bert//lib/bert/encode.rb#257
  def version_header; end

  class << self
    # source://bert//lib/bert/encode.rb#120
    def encode(data); end

    # source://bert//lib/bert/encode.rb#124
    def encode_data(data, io); end

    # source://bert//lib/bert/encode.rb#114
    def encode_to_buffer(data); end

    # Returns the value of attribute version.
    #
    # source://bert//lib/bert/encode.rb#82
    def version; end

    # Sets the attribute version
    #
    # @param value the value to set the attribute version to.
    #
    # source://bert//lib/bert/encode.rb#82
    def version=(_arg0); end
  end
end

# source://bert//lib/bert/encode.rb#92
class BERT::Encode::Buffer
  # @return [Buffer] a new instance of Buffer
  #
  # source://bert//lib/bert/encode.rb#93
  def initialize; end

  # source://bert//lib/bert/encode.rb#109
  def bytesize; end

  # source://bert//lib/bert/encode.rb#105
  def to_s; end

  # source://bert//lib/bert/encode.rb#97
  def write(str); end

  # source://bert//lib/bert/encode.rb#101
  def write_to(io); end
end

# source://bert//lib/bert/encode.rb#7
class BERT::Encode::V2 < ::BERT::Encode
  # source://bert//lib/bert/encode.rb#8
  def write_binary(data); end

  private

  # source://bert//lib/bert/encode.rb#38
  def version_header; end

  # source://bert//lib/bert/encode.rb#28
  def write_enc_string(data); end

  # source://bert//lib/bert/encode.rb#22
  def write_unicode_string(data); end
end

# source://bert//lib/bert/encode.rb#43
class BERT::Encode::V3
  # @return [V3] a new instance of V3
  #
  # source://bert//lib/bert/encode.rb#44
  def initialize(out); end

  # Returns the value of attribute out.
  #
  # source://bert//lib/bert/encode.rb#48
  def out; end

  # source://bert//lib/bert/encode.rb#50
  def write_any(obj); end

  private

  # source://bert//lib/bert/encode.rb#57
  def version_header; end
end

# source://bert//lib/bert/encode.rb#62
class BERT::Encode::V4
  # @return [V4] a new instance of V4
  #
  # source://bert//lib/bert/encode.rb#63
  def initialize(out); end

  # Returns the value of attribute out.
  #
  # source://bert//lib/bert/encode.rb#67
  def out; end

  # source://bert//lib/bert/encode.rb#69
  def write_any(obj); end

  private

  # source://bert//lib/bert/encode.rb#76
  def version_header; end
end

# source://bert//lib/bert/encoder.rb#2
class BERT::Encoder
  class << self
    # Convert complex Ruby form in simple Ruby form.
    #   +item+ is the Ruby object to convert
    #
    # Returns the converted Ruby object
    #
    # source://bert//lib/bert/encoder.rb#21
    def convert(item); end

    # Encode a Ruby object into a BERT.
    #   +ruby+ is the Ruby object
    #
    # Returns a BERT
    #
    # source://bert//lib/bert/encoder.rb#7
    def encode(ruby); end

    # source://bert//lib/bert/encoder.rb#12
    def encode_to_buffer(ruby); end
  end
end

# source://bert//lib/bert/bert.rb#35
class BERT::Tuple < ::Array
  # source://bert//lib/bert/bert.rb#36
  def inspect; end
end

# source://bert//lib/bert/types.rb#2
module BERT::Types; end

# source://bert//lib/bert/types.rb#8
BERT::Types::ATOM = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#14
BERT::Types::BIN = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#15
BERT::Types::ENC_STRING = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#7
BERT::Types::FLOAT = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#17
BERT::Types::FUN = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#4
BERT::Types::INT = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#6
BERT::Types::LARGE_BIGNUM = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#10
BERT::Types::LARGE_TUPLE = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#13
BERT::Types::LIST = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#18
BERT::Types::MAGIC = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#22
BERT::Types::MAX_INT = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#23
BERT::Types::MIN_INT = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#11
BERT::Types::NIL = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#5
BERT::Types::SMALL_BIGNUM = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#3
BERT::Types::SMALL_INT = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#9
BERT::Types::SMALL_TUPLE = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#12
BERT::Types::STRING = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#16
BERT::Types::UNICODE_STRING = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#19
BERT::Types::VERSION_2 = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#20
BERT::Types::VERSION_3 = T.let(T.unsafe(nil), Integer)

# source://bert//lib/bert/types.rb#21
BERT::Types::VERSION_4 = T.let(T.unsafe(nil), Integer)

module ERB::Escape
  private

  def html_escape(_arg0); end

  class << self
    def html_escape(_arg0); end
  end
end

class Object < ::BasicObject
  include ::Kernel
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  include ::PP::ObjectMixin
  include ::ActiveSupport::Tryable
  include ::ERB::Escape
  include ::ActiveSupport::CoreExt::ERBUtil
  include ::ActiveSupport::CoreExt::ERBUtilPrivate

  private

  # source://bert//lib/bert.rb#30
  def t; end
end

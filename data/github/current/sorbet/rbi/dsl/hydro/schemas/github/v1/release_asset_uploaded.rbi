# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::ReleaseAssetUploaded`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::ReleaseAssetUploaded`.

class Hydro::Schemas::Github::V1::ReleaseAssetUploaded
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      asset_id: T.nilable(Integer),
      content_type: T.nilable(String),
      label: T.nilable(String),
      name: T.nilable(String),
      release: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release),
      repository: T.nilable(Hydro::Schemas::Github::V2::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      size: T.nilable(Integer),
      spamurai_form_signals: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals),
      storage_blob_id: T.nilable(Integer),
      storage_provider: T.nilable(String)
    ).void
  end
  def initialize(actor: nil, asset_id: nil, content_type: nil, label: nil, name: nil, release: nil, repository: nil, repository_owner: nil, request_context: nil, size: nil, spamurai_form_signals: nil, storage_blob_id: nil, storage_provider: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(Integer) }
  def asset_id; end

  sig { params(value: Integer).void }
  def asset_id=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_asset_id; end

  sig { void }
  def clear_content_type; end

  sig { void }
  def clear_label; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_release; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_size; end

  sig { void }
  def clear_spamurai_form_signals; end

  sig { void }
  def clear_storage_blob_id; end

  sig { void }
  def clear_storage_provider; end

  sig { returns(String) }
  def content_type; end

  sig { params(value: String).void }
  def content_type=(value); end

  sig { returns(String) }
  def label; end

  sig { params(value: String).void }
  def label=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)) }
  def release; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)).void }
  def release=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V2::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V2::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(Integer) }
  def size; end

  sig { params(value: Integer).void }
  def size=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)) }
  def spamurai_form_signals; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)).void }
  def spamurai_form_signals=(value); end

  sig { returns(Integer) }
  def storage_blob_id; end

  sig { params(value: Integer).void }
  def storage_blob_id=(value); end

  sig { returns(String) }
  def storage_provider; end

  sig { params(value: String).void }
  def storage_provider=(value); end
end

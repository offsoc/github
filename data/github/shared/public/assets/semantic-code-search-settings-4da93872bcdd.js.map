{"version":3,"file":"semantic-code-search-settings-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/issue-viewer/utils/queries.ts","ui/packages/semantic-code-search-settings/App.tsx","ui/packages/semantic-code-search-settings/components/RepoSelectionDialog.tsx","ui/packages/semantic-code-search-settings/components/RemoveIndexedReposDialog.tsx","ui/packages/semantic-code-search-settings/routes/SemanticCodeSearchSettings.tsx","ui/packages/semantic-code-search-settings/semantic-code-search-settings.ts","ui/packages/use-repository-items/use-repository-items.ts","ui/packages/list-view/src/ListItem/Description.module.css","ui/packages/list-view/src/ListItem/Description.tsx","ui/packages/list-view/src/ListItem/LeadingContent.module.css","ui/packages/list-view/src/ListItem/LeadingContent.tsx","ui/packages/list-view/src/ListItem/LeadingVisual.module.css","ui/packages/list-view/src/ListItem/UnreadIndicator.module.css","ui/packages/list-view/src/ListItem/UnreadIndicator.tsx","ui/packages/list-view/src/ListItem/LeadingVisual.tsx","ui/packages/list-view/src/ListItem/MainContent.module.css","ui/packages/list-view/src/ListItem/MainContent.tsx","ui/packages/list-view/src/ListView/Metadata.tsx","ui/packages/list-view/src/density-gap.module.css","ui/packages/list-view/src/ListView/ActionBar.module.css","ui/packages/list-view/src/ListView/ActionBar.tsx","ui/packages/list-view/src/ListView/Metadata.module.css","ui/packages/list-view/src/ListView/SectionFilters.module.css","ui/packages/list-view/src/ListView/SectionFilters.tsx","ui/packages/list-view/src/ListView/SelectAllCheckbox.module.css","ui/packages/list-view/src/ListView/SelectAllCheckbox.tsx","ui/packages/react-core/JsonRoute.tsx"],"sourcesContent":["// Attempt to use the `org` parameter to filter the results if we have a `/` present in the query\n// This is to be used with the `search` graphQL endpoint for type `Repository` only.\nexport function getRepositorySearchQuery(queryString: string): string {\n  const orgIndexSplit = queryString.indexOf('/')\n\n  // If there is no / in the query, or the org name is empty, just search for the repo name\n  if (orgIndexSplit === -1 || orgIndexSplit === 0) {\n    return `${queryString} in:name archived:false`\n  }\n\n  // Naively extract the org name and repo name from the query by assuming anything before the / is the org name\n  const orgSearchName = queryString.slice(0, orgIndexSplit)\n  const repoSearchName = queryString.slice(orgIndexSplit + 1)\n\n  if (repoSearchName.length === 0) {\n    return `org:${orgSearchName} in:name archived:false`\n  }\n\n  return `org:${orgSearchName} ${repoSearchName} in:name archived:false`\n}\n","import type React from 'react'\n\n/**\n * The App component is used to render content which should be present on _all_ routes within this app\n */\nexport function App(props: {children?: React.ReactNode}) {\n  return <>{props.children}</>\n}\n\ntry{ App.displayName ||= 'App' } catch {}","import {ListView} from '@github-ui/list-view'\nimport {ListItemLeadingContent} from '@github-ui/list-view/ListItemLeadingContent'\nimport {ListItemTitle} from '@github-ui/list-view/ListItemTitle'\nimport {ListItem} from '@github-ui/list-view/ListItem'\nimport {RepoLockedIcon, SearchIcon} from '@primer/octicons-react'\nimport {Box, Button, Octicon, Spinner, TextInput} from '@primer/react'\nimport {Dialog} from '@primer/react/drafts'\nimport {useCallback, useMemo, useState} from 'react'\nimport type {IndexedRepo} from '../types/indexed-repo'\nimport {type RepoItem, useRepositoryItems} from '@github-ui/use-repository-items'\nimport {debounce} from '@github/mini-throttle'\n\nexport interface RepoSelectionDialogProps {\n  currentOrg: string\n  onClose: () => void\n  onSubmit: (selectedRepos: IndexedRepo[]) => void\n  indexedRepos: IndexedRepo[]\n  processing: boolean\n  quotaRemaining: number\n}\n\n/**\n * This is the dialog used to select repositories to be indexed.\n */\nexport function RepoSelectionDialog({\n  currentOrg,\n  onClose,\n  onSubmit,\n  indexedRepos,\n  processing,\n  quotaRemaining,\n}: RepoSelectionDialogProps) {\n  const [filterText, setFilterText] = useState('')\n  const [filterQuery, setFilterQuery] = useState(`org:${currentOrg} `)\n  // Don't send off new filter queries if the user is typing\n  const debouncedSetFilter = debounce(\n    // Replace all colons with spaces to force an org search.\n    (newFilter: string) => setFilterQuery(`org:${currentOrg} ${newFilter.replaceAll(':', ' ')}`),\n    400,\n    {start: false},\n  )\n  const {repositories, loading} = useRepositoryItems(filterQuery)\n  const [selectedItems, setSelectedItems] = useState<RepoItem[]>([])\n  const onSelected = useCallback((item: RepoItem, isSelected: boolean) => {\n    if (isSelected) {\n      setSelectedItems(items => [...items, item])\n    } else {\n      setSelectedItems(items => items.filter(i => i.id !== item.id))\n    }\n  }, [])\n\n  const filteredRepos = useMemo(\n    () => repositories.filter(repo => !indexedRepos.find(r => r.name === repo.name)),\n    [indexedRepos, repositories],\n  )\n\n  const setFilterTextAndQuery = useCallback(\n    (newFilter: string) => {\n      setFilterText(newFilter)\n      debouncedSetFilter(newFilter)\n    },\n    [debouncedSetFilter],\n  )\n\n  return (\n    <Dialog\n      onClose={onClose}\n      title=\"Pick repositories\"\n      renderBody={() => (\n        <Dialog.Body sx={{padding: 0, display: 'flex', flexDirection: 'column'}}>\n          <TextInput\n            leadingVisual={SearchIcon}\n            sx={{flex: 1, m: 2}}\n            placeholder=\"Search repositories\"\n            onChange={e => setFilterTextAndQuery(e.target.value)}\n            value={filterText}\n            loading={loading}\n            loaderPosition=\"trailing\"\n          />\n          <div>\n            {filteredRepos.length === 0 && !loading ? (\n              <Box sx={{ml: 2, mb: 2}}>No repositories found.</Box>\n            ) : (\n              <ListView isSelectable={true} title=\"Repositories\" variant=\"compact\">\n                {filteredRepos.map(repo => (\n                  <ListItem\n                    key={repo.id}\n                    isSelected={selectedItems.includes(repo)}\n                    onSelect={isSelected => onSelected(repo, isSelected)}\n                    sx={{border: 'none !important'}}\n                    title={<ListItemTitle value={repo.nameWithOwner} />}\n                  >\n                    <ListItemLeadingContent sx={{alignItems: 'center', display: 'flex'}}>\n                      <Octicon icon={RepoLockedIcon} />\n                    </ListItemLeadingContent>\n                  </ListItem>\n                ))}\n              </ListView>\n            )}\n          </div>\n        </Dialog.Body>\n      )}\n      renderFooter={() => (\n        <Dialog.Footer>\n          {processing && <Spinner />}\n          {selectedItems.length > quotaRemaining && (\n            <Box sx={{color: 'danger.fg', mr: 2}}>\n              {`You have selected ${selectedItems.length} repositories, but only ${quotaRemaining} are available.`}\n            </Box>\n          )}\n          <Button onClick={onClose}>Cancel</Button>\n          <Button\n            disabled={selectedItems.length > quotaRemaining}\n            variant=\"primary\"\n            onClick={() =>\n              onSubmit(\n                selectedItems.map(i => ({\n                  name: i.name,\n                  owner: i.owner.login,\n                  id: i.id,\n                  description: i.shortDescriptionHTML,\n                })),\n              )\n            }\n          >\n            Apply\n          </Button>\n        </Dialog.Footer>\n      )}\n    />\n  )\n}\n\ntry{ RepoSelectionDialog.displayName ||= 'RepoSelectionDialog' } catch {}","import {Dialog} from '@primer/react/drafts'\nimport {Box, Button, Spinner, Text} from '@primer/react'\n\ninterface RemoveIndexedReposDialogProps {\n  repos: string[]\n  onSubmit: () => void\n  onClose: () => void\n  processing: boolean\n}\n\nexport function RemoveIndexedReposDialog({repos, onSubmit, onClose, processing}: RemoveIndexedReposDialogProps) {\n  return (\n    <Dialog\n      width=\"medium\"\n      title={repos.length > 1 ? 'Remove code search indexes' : 'Remove code search index'}\n      onClose={onClose}\n      renderBody={() => (\n        <Dialog.Body>\n          {repos.length > 1 ? (\n            <Box sx={{display: 'flex', flexDirection: 'column', gap: 3, mb: 3}}>\n              <span>You are about to remove the code search indexes for the following repositories:</span>\n              <ul style={{marginLeft: '16px'}}>\n                {repos.map(id => (\n                  <li key={id}>\n                    <span>{id}</span>\n                  </li>\n                ))}\n              </ul>\n            </Box>\n          ) : (\n            <Box sx={{mb: 3}}>\n              <span>You are about to remove the code search index for the </span>\n              <Text sx={{fontWeight: 'bold'}}>{repos[0]}</Text>\n              <span> repository.</span>\n            </Box>\n          )}\n          <span>\n            {`This will reduce Copilot's response quality when chatting about ${\n              repos.length > 1 ? 'these repositories.' : 'this repository.'\n            }`}\n          </span>\n        </Dialog.Body>\n      )}\n      renderFooter={() => (\n        <Dialog.Footer sx={{justifyContent: 'flex-end'}}>\n          {processing && <Spinner />}\n          <Button onClick={onClose}>Cancel</Button>\n          <Button onClick={onSubmit} variant=\"danger\">\n            {`Remove ${repos.length > 1 ? 'indexes' : 'index'}`}\n          </Button>\n        </Dialog.Footer>\n      )}\n    />\n  )\n}\n\ntry{ RemoveIndexedReposDialog.displayName ||= 'RemoveIndexedReposDialog' } catch {}","import {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {ActionList, Box, Button, Heading, Text} from '@primer/react'\nimport {ListView} from '@github-ui/list-view'\nimport {ListViewMetadata} from '@github-ui/list-view/ListViewMetadata'\nimport {ListItemActionBar} from '@github-ui/list-view/ListItemActionBar'\nimport {ListItemDescription} from '@github-ui/list-view/ListItemDescription'\nimport {ListItemLeadingContent} from '@github-ui/list-view/ListItemLeadingContent'\nimport {ListItemLeadingVisual} from '@github-ui/list-view/ListItemLeadingVisual'\nimport {ListItemMainContent} from '@github-ui/list-view/ListItemMainContent'\nimport {ListItemTitle} from '@github-ui/list-view/ListItemTitle'\nimport {ListItem} from '@github-ui/list-view/ListItem'\nimport {verifiedFetch} from '@github-ui/verified-fetch'\nimport {PlusIcon, RepoLockedIcon, TrashIcon} from '@primer/octicons-react'\nimport {useCallback, useState} from 'react'\nimport {RepoSelectionDialog} from '../components/RepoSelectionDialog'\nimport {RemoveIndexedReposDialog} from '../components/RemoveIndexedReposDialog'\nimport type {IndexedRepo} from '../types/indexed-repo'\nimport {relayEnvironmentWithMissingFieldHandlerForNode} from '@github-ui/relay-environment'\nimport {RelayEnvironmentProvider} from 'react-relay'\n\nexport interface SemanticCodeSearchSettingsPayload {\n  canIndexRepos: boolean\n  initialIndexedRepos: IndexedRepo[]\n  quota: number\n  orgName: string\n}\n\nexport function SemanticCodeSearchSettings() {\n  const payload = useRoutePayload<SemanticCodeSearchSettingsPayload>()\n  const {canIndexRepos, initialIndexedRepos, quota, orgName} = payload\n  const [selectedRepos, setSelectedRepos] = useState<Set<string>>(new Set<string>())\n  const [removeDialogRepos, setRemoveDialogRepos] = useState<string[]>([])\n  const [showRepoSelectionDialog, setShowRepoSelectionDialog] = useState<boolean>(false)\n  const [indexedRepos, setIndexedRepos] = useState<IndexedRepo[]>([...initialIndexedRepos])\n  const [error, setError] = useState<string | null>(null)\n  const [addingRepos, setAddingRepos] = useState(false)\n  const [removingRepos, setRemovingRepos] = useState(false)\n  const environment = relayEnvironmentWithMissingFieldHandlerForNode()\n\n  const onSelect = useCallback(\n    (repoNameWithOwner: string, selected: boolean) => {\n      if (selected) {\n        if (!selectedRepos.has(repoNameWithOwner)) {\n          setSelectedRepos(new Set<string>(selectedRepos.add(repoNameWithOwner)))\n        }\n      } else {\n        selectedRepos.delete(repoNameWithOwner)\n        setSelectedRepos(new Set<string>(selectedRepos))\n      }\n    },\n    [selectedRepos, setSelectedRepos],\n  )\n\n  const onRemoveSelectedIndexes = useCallback(() => {\n    setRemoveDialogRepos(Array.from(selectedRepos.keys()))\n  }, [selectedRepos])\n\n  const onRemoveSubmit = useCallback(async () => {\n    setRemovingRepos(true)\n    setError(null)\n    const nwos = removeDialogRepos.map(repo => encodeURIComponent(repo))\n    const resp = await verifiedFetch(`/search/index_embeddings?nwos=${JSON.stringify(nwos)}`, {method: 'DELETE'})\n    if (resp.ok) {\n      const newIndexedRepos = indexedRepos.filter(repo => !removeDialogRepos.includes(nameWithOwner(repo)))\n      setIndexedRepos(newIndexedRepos)\n      setSelectedRepos(new Set<string>())\n    } else {\n      setError('Failed to delete repositories')\n    }\n    setRemovingRepos(false)\n    setRemoveDialogRepos([])\n  }, [indexedRepos, removeDialogRepos])\n\n  const onCloseRemoveDialog = useCallback(() => {\n    setRemoveDialogRepos([])\n  }, [])\n\n  const onSubmitAddRepos = useCallback(\n    async (reposToAdd: IndexedRepo[]) => {\n      setAddingRepos(true)\n      setError(null)\n      const nwos = reposToAdd.map(repo => encodeURIComponent(nameWithOwner(repo)))\n      const resp = await verifiedFetch(`/search/index_embeddings?nwos=${JSON.stringify(nwos)}`, {method: 'POST'})\n      if (resp.ok) {\n        setIndexedRepos([...indexedRepos, ...reposToAdd])\n      } else {\n        setError('Failed to add repositories')\n      }\n      setShowRepoSelectionDialog(false)\n      setAddingRepos(false)\n    },\n    [indexedRepos],\n  )\n\n  const onShowRepoSelectionDialog = useCallback(() => {\n    setShowRepoSelectionDialog(true)\n  }, [])\n\n  const onCloseRepoSelectionDialog = useCallback(() => {\n    setShowRepoSelectionDialog(false)\n  }, [])\n\n  return (\n    <RelayEnvironmentProvider environment={environment}>\n      <main>\n        <div data-view-component=\"true\" className=\"Subhead\">\n          <h2 data-view-component=\"true\" className=\"Subhead-heading\">\n            Semantic code search\n          </h2>\n        </div>\n\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            border: '1px solid',\n            borderColor: 'border.muted',\n            padding: 3,\n            mb: 3,\n          }}\n        >\n          <Text sx={{fontWeight: 'bold'}}>Search index quota remaining</Text>\n          <Text sx={{fontSize: '24px'}}>\n            {Math.max(quota - indexedRepos.length, 0)} of {quota}\n          </Text>\n          <Text sx={{color: 'fg.muted'}}>\n            Number of remaining repositories that can be indexed for semantic code search in this organization.\n          </Text>\n        </Box>\n        <div>\n          <Box sx={{display: 'flex'}}>\n            <Heading as=\"h3\" sx={{flexGrow: 1, fontSize: '20px', mb: 3}} id=\"indexed-repositories-table-header\">\n              Indexed Repositories\n            </Heading>\n            {indexedRepos.length < quota && canIndexRepos ? (\n              <Button leadingVisual={PlusIcon} variant=\"primary\" onClick={onShowRepoSelectionDialog}>\n                Add repositories\n              </Button>\n            ) : (\n              <Box sx={{display: 'flex', pb: 3, alignItems: 'flex-end'}}>\n                {canIndexRepos\n                  ? '0 code search index quota remaining.'\n                  : 'Only users with copilot chat access can index repositories.'}\n              </Box>\n            )}\n          </Box>\n          {error && <Box sx={{color: 'danger.fg', mb: 2}}>{error}</Box>}\n          <Box sx={{border: '1px solid', borderColor: 'border.muted'}}>\n            <ListView\n              data-hpc\n              title=\"Indexed Repositiories\"\n              variant=\"compact\"\n              isSelectable={indexedRepos.length > 0 && canIndexRepos}\n              metadata={\n                <ListViewMetadata\n                  actionsLabel=\"Actions\"\n                  onToggleSelectAll={isSelectAllChecked => {\n                    if (isSelectAllChecked) {\n                      setSelectedRepos(new Set(indexedRepos.map(repo => nameWithOwner(repo))))\n                    } else {\n                      setSelectedRepos(new Set())\n                    }\n                  }}\n                  actions={\n                    selectedRepos.size > 0 && canIndexRepos\n                      ? [\n                          {\n                            key: 'remove-indexes',\n                            render: (isOverflowMenu: boolean) => {\n                              return isOverflowMenu ? (\n                                <ActionList.Item onSelect={onRemoveSelectedIndexes}>\n                                  <ActionList.LeadingVisual>\n                                    <TrashIcon />\n                                  </ActionList.LeadingVisual>\n                                  Remove indexes\n                                </ActionList.Item>\n                              ) : (\n                                <Button leadingVisual={TrashIcon} onClick={onRemoveSelectedIndexes}>\n                                  Remove indexes\n                                </Button>\n                              )\n                            },\n                          },\n                        ]\n                      : []\n                  }\n                />\n              }\n            >\n              {indexedRepos.length === 0 ? (\n                <ListItem\n                  sx={{justifyContent: 'center'}}\n                  title={<ListItemTitle value=\"No indexed repositories found.\" />}\n                />\n              ) : (\n                indexedRepos.map(repo => (\n                  <ListItem\n                    key={repo.name}\n                    isSelected={selectedRepos.has(nameWithOwner(repo))}\n                    onSelect={selected => onSelect(nameWithOwner(repo), selected)}\n                    title={<ListItemTitle value={repo.name} />}\n                    secondaryActions={\n                      <ListItemActionBar\n                        staticMenuActions={\n                          canIndexRepos\n                            ? [\n                                {\n                                  key: 'remove-index',\n                                  render: () => (\n                                    <ActionList.Item onSelect={() => setRemoveDialogRepos([nameWithOwner(repo)])}>\n                                      Remove index\n                                    </ActionList.Item>\n                                  ),\n                                },\n                              ]\n                            : []\n                        }\n                      />\n                    }\n                  >\n                    <ListItemLeadingContent>\n                      <ListItemLeadingVisual icon={RepoLockedIcon} color={'fg.muted'} />\n                    </ListItemLeadingContent>\n                    <ListItemMainContent>\n                      <ListItemDescription>{repo.description}</ListItemDescription>\n                    </ListItemMainContent>\n                  </ListItem>\n                ))\n              )}\n            </ListView>\n          </Box>\n        </div>\n        {removeDialogRepos.length > 0 && (\n          <RemoveIndexedReposDialog\n            onClose={onCloseRemoveDialog}\n            onSubmit={onRemoveSubmit}\n            repos={removeDialogRepos}\n            processing={removingRepos}\n          />\n        )}\n        {showRepoSelectionDialog && (\n          <RepoSelectionDialog\n            onClose={onCloseRepoSelectionDialog}\n            onSubmit={onSubmitAddRepos}\n            indexedRepos={indexedRepos}\n            processing={addingRepos}\n            quotaRemaining={quota - indexedRepos.length}\n            currentOrg={orgName}\n          />\n        )}\n      </main>\n    </RelayEnvironmentProvider>\n  )\n}\n\nconst nameWithOwner = (repo: IndexedRepo) => {\n  return `${repo.owner}/${repo.name}`\n}\n\ntry{ SemanticCodeSearchSettings.displayName ||= 'SemanticCodeSearchSettings' } catch {}","import {App} from './App'\nimport {SemanticCodeSearchSettings} from './routes/SemanticCodeSearchSettings'\nimport {registerReactAppFactory} from '@github-ui/react-core/register-app'\nimport {jsonRoute} from '@github-ui/react-core/json-route'\n\nregisterReactAppFactory('semantic-code-search-settings', () => ({\n  App,\n  routes: [\n    jsonRoute({\n      path: '/organizations/:org/settings/copilot/semantic_code_search',\n      Component: SemanticCodeSearchSettings,\n    }),\n  ],\n}))\n","import {getRepositorySearchQuery} from '@github-ui/issue-viewer/Queries'\n\nimport {useCallback, useEffect, useRef, useState} from 'react'\nimport {fetchQuery, readInlineData, useFragment, useRelayEnvironment} from 'react-relay'\nimport type {Subscription} from 'relay-runtime'\nimport type {RepoData} from '@github-ui/copilot-chat/utils/copilot-chat-types'\nimport {\n  TopRepositoriesFragment,\n  RepositoryFragment,\n  TopRepositories,\n  SearchRepositories,\n} from '@github-ui/item-picker/RepositoryPicker'\nimport type {RepositoryPickerRepository$key} from '@github-ui/item-picker/RepositoryPickerRepository.graphql'\nimport type {\n  RepositoryPickerSearchRepositoriesQuery$data,\n  RepositoryPickerSearchRepositoriesQuery,\n} from '@github-ui/item-picker/RepositoryPickerSearchRepositoriesQuery.graphql'\nimport type {RepositoryPickerTopRepositories$key} from '@github-ui/item-picker/RepositoryPickerTopRepositories.graphql'\nimport type {RepositoryPickerTopRepositoriesQuery} from '@github-ui/item-picker/RepositoryPickerTopRepositoriesQuery.graphql'\n\nexport interface RepoItem extends RepoData {\n  shortDescriptionHTML: string\n  id: string\n}\n\nconst INITIAL_REPOSITORY_COUNT = 10\n\nexport function useRepositoryItems(filterText: string): {\n  repositories: RepoItem[]\n  loading: boolean\n  totalCount: number\n  loadMore: (after: string, afterFetch: () => void) => void\n  endCursor: string | null\n} {\n  const [repositories, setRepositories] = useState<RepoItem[]>([])\n  const [totalCount, setTotalCount] = useState<number>(0)\n  const [endCursor, setEndCursor] = useState<string | null>(null)\n  const [loading, setIsLoading] = useState<boolean>(true)\n\n  const [topRepositoriesLoadedCache, setTopRepositoriesLoadedCache] = useState<RepoItem[] | undefined>(undefined)\n  const [topRepositoryResults, setTopRepositoryResults] = useState<RepositoryPickerTopRepositories$key | undefined>()\n\n  const searchedReposSubscription = useRef<Subscription | undefined>(undefined)\n  const relayEnvironment = useRelayEnvironment()\n\n  const topRepositoryFragment = useFragment<RepositoryPickerTopRepositories$key>(\n    TopRepositoriesFragment,\n    topRepositoryResults ?? null,\n  )\n\n  if (topRepositoryFragment && !topRepositoriesLoadedCache && !filterText) {\n    const {topRepositories} = topRepositoryFragment\n\n    const fetchedRepos = (topRepositories.edges || []).flatMap(a =>\n      a?.node ? [readInlineData<RepositoryPickerRepository$key>(RepositoryFragment, a.node)] : [],\n    )\n    setTopRepositoriesLoadedCache(fetchedRepos)\n    setIsLoading(false)\n    // We already set the cache so reset the top repos so we stop calling Relay\n    setTopRepositoryResults(undefined)\n  }\n\n  const fetchTopRepos = useCallback(async () => {\n    try {\n      const topRepos = await fetchQuery<RepositoryPickerTopRepositoriesQuery>(relayEnvironment, TopRepositories, {\n        topRepositoriesFirst: INITIAL_REPOSITORY_COUNT,\n      }).toPromise()\n      setTopRepositoryResults(topRepos?.viewer)\n    } catch (_) {\n      // If we have an error, just silently catch\n      // We can't return because we want to use the useFragment hook\n      // But we can check for null later\n    }\n  }, [relayEnvironment, setTopRepositoryResults])\n\n  useEffect(() => {\n    void fetchTopRepos()\n  }, [fetchTopRepos])\n\n  useEffect(() => {\n    const fetchSearchedRepos = async (query: string) => {\n      setIsLoading(true)\n      const searchedRepos: RepositoryPickerSearchRepositoriesQuery$data = await new Promise((resolve, reject) => {\n        fetchQuery<RepositoryPickerSearchRepositoriesQuery>(relayEnvironment, SearchRepositories, {\n          searchQuery: getRepositorySearchQuery(query),\n        }).subscribe({\n          start: subscription => {\n            searchedReposSubscription.current?.unsubscribe()\n            searchedReposSubscription.current = subscription\n          },\n          next: data => {\n            resolve(data)\n          },\n          error: (e: Error) => {\n            reject(e)\n          },\n        })\n      })\n\n      const fetchedRepos = (searchedRepos.search.nodes || []).flatMap(node =>\n        node ? [readInlineData<RepositoryPickerRepository$key>(RepositoryFragment, node)] : [],\n      )\n\n      setRepositories(fetchedRepos)\n      setEndCursor(searchedRepos.search.pageInfo.endCursor || null)\n      setTotalCount(searchedRepos.search.repositoryCount)\n      setIsLoading(false)\n    }\n\n    if (filterText) {\n      void fetchSearchedRepos(filterText)\n    } else if (topRepositoriesLoadedCache) {\n      setRepositories(topRepositoriesLoadedCache)\n    }\n  }, [filterText, relayEnvironment, topRepositoriesLoadedCache])\n\n  const loadMore = useCallback(\n    async (after: string, afterFetch: () => void) => {\n      const searchedRepos: RepositoryPickerSearchRepositoriesQuery$data = await new Promise((resolve, reject) => {\n        fetchQuery<RepositoryPickerSearchRepositoriesQuery>(relayEnvironment, SearchRepositories, {\n          searchQuery: getRepositorySearchQuery(filterText),\n          after,\n        }).subscribe({\n          start: subscription => {\n            searchedReposSubscription.current?.unsubscribe()\n            searchedReposSubscription.current = subscription\n          },\n          next: data => {\n            resolve(data)\n          },\n          error: (e: Error) => {\n            reject(e)\n          },\n        })\n      })\n\n      const fetchedRepos = (searchedRepos.search.nodes || []).flatMap(node =>\n        node ? [readInlineData<RepositoryPickerRepository$key>(RepositoryFragment, node)] : [],\n      )\n\n      setRepositories(prevRepos => [...prevRepos, ...fetchedRepos])\n      setEndCursor(searchedRepos.search.pageInfo.endCursor || null)\n\n      afterFetch()\n    },\n    [filterText, relayEnvironment],\n  )\n\n  return {repositories, loading, totalCount, loadMore, endCursor}\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Description-module__container--b3n6F\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {Box} from '@primer/react'\nimport {clsx} from 'clsx'\n\nimport type {StylableProps} from '../types'\nimport styles from './Description.module.css'\n\ninterface ListItemDescriptionProps extends StylableProps {\n  children?: React.ReactNode\n}\n\nexport function ListItemDescription({children, style, className, sx}: ListItemDescriptionProps) {\n  return (\n    <Box\n      {...testIdProps('list-view-item-description')}\n      className={clsx(styles.container, className)}\n      style={style}\n      sx={sx}\n    >\n      {children}\n    </Box>\n  )\n}\n\ntry{ ListItemDescription.displayName ||= 'ListItemDescription' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"LeadingContent-module__container--NoK8W\",\"isSelectable\":\"LeadingContent-module__isSelectable--J9kYS\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {Box} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {PropsWithChildren} from 'react'\n\nimport {useListViewSelection} from '../ListView/SelectionContext'\nimport type {StylableProps} from '../types'\nimport styles from './LeadingContent.module.css'\n\nexport const ListItemLeadingContent = ({style, className, sx, children}: PropsWithChildren<StylableProps>) => {\n  const {isSelectable} = useListViewSelection()\n\n  return (\n    <Box\n      className={clsx(styles.container, isSelectable && styles.isSelectable, className)}\n      {...testIdProps('list-view-item-leading-content')}\n      style={style}\n      sx={sx}\n    >\n      {children}\n    </Box>\n  )\n}\n\ntry{ ListItemLeadingContent.displayName ||= 'ListItemLeadingContent' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"outer\":\"LeadingVisual-module__outer--SJchr\",\"hasNewActivity\":\"LeadingVisual-module__hasNewActivity--soQyL\",\"defaultVariant\":\"LeadingVisual-module__defaultVariant--ITyiW\",\"inner\":\"LeadingVisual-module__inner--O92jr\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"UnreadIndicator-module__container--RzNLy\"};","import {testIdProps} from '@github-ui/test-id-props'\n\nimport styles from './UnreadIndicator.module.css'\n\nexport const ListItemUnreadIndicator = () => {\n  return (\n    <div className={styles.container}>\n      <span className=\"sr-only\" {...testIdProps('list-view-item-unread-indicator')}>\n        New activity.\n      </span>\n    </div>\n  )\n}\n\ntry{ ListItemUnreadIndicator.displayName ||= 'ListItemUnreadIndicator' } catch {}","import {testIdProps} from '@github-ui/test-id-props'\nimport {Octicon, type OcticonProps} from '@primer/react'\nimport {clsx} from 'clsx'\nimport {type PropsWithChildren, type ReactNode, useEffect} from 'react'\n\nimport {useListViewVariant} from '../ListView/VariantContext'\nimport styles from './LeadingVisual.module.css'\nimport {useListItemNewActivity} from './NewActivityContext'\nimport {useListItemStatus} from './StatusContext'\nimport {ListItemUnreadIndicator} from './UnreadIndicator'\n\nexport type ListItemLeadingVisualProps = {\n  /**\n   * The Octicon component representing the desired icon\n   */\n  icon?: OcticonProps['icon']\n  /**\n   * Render any child content as the leading visual\n   * NOTE: if both icon and children are passed, the icon will be rendered first, with the children appended after\n   */\n  children?: ReactNode\n  /**\n   * The name of the Primer variable that will be used for the icon's fill\n   * eg.: done.fg\n   */\n  color?: string\n  /**\n   * A text description of the item\n   * Used for visually hidden text to describe the item on focus for the screen readers\n   */\n  description?: string\n  /**\n   * Indicates whether the rendered item has new content since lastViewed\n   */\n  newActivity?: boolean\n}\n\nexport function ListItemLeadingVisual({\n  icon,\n  color,\n  description,\n  newActivity = false,\n  children,\n  ...props\n}: ListItemLeadingVisualProps & PropsWithChildren) {\n  const {variant} = useListViewVariant()\n  const {setStatus} = useListItemStatus()\n  const {setHasNewActivity} = useListItemNewActivity()\n  const trimmedDescription = description?.trim()\n\n  useEffect(() => {\n    setHasNewActivity(newActivity)\n  }, [newActivity, setHasNewActivity])\n\n  useEffect(() => {\n    if (trimmedDescription) setStatus(trimmedDescription)\n  }, [setStatus, trimmedDescription])\n\n  return (\n    <div\n      className={clsx(\n        styles.outer,\n        variant === 'default' && styles.defaultVariant,\n        newActivity && styles.hasNewActivity,\n      )}\n      {...props}\n    >\n      <div>\n        <div {...testIdProps('list-view-leading-visual')} className={styles.inner}>\n          {icon && <Octicon aria-label=\"\" icon={icon} color={color} />}\n          {children}\n          {trimmedDescription && (\n            <span className=\"sr-only\" {...testIdProps('leading-visual-text-description')}>\n              {trimmedDescription}\n            </span>\n          )}\n        </div>\n      </div>\n      {newActivity && <ListItemUnreadIndicator />}\n    </div>\n  )\n}\n\ntry{ ListItemLeadingVisual.displayName ||= 'ListItemLeadingVisual' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MainContent-module__container--ry4iL\",\"inner\":\"MainContent-module__inner--bU_tk\",\"compact\":\"MainContent-module__compact--mM626\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {clsx} from 'clsx'\nimport {Children, isValidElement, type ReactNode} from 'react'\n\nimport {useListViewVariant} from '../ListView/VariantContext'\nimport styles from './MainContent.module.css'\nimport {ListItemTitle} from './Title'\n\nexport function ListItemMainContent({children}: {children?: ReactNode}) {\n  const {variant} = useListViewVariant()\n  const childrenArray = Children.toArray(children)\n  const titleIndex = childrenArray.findIndex(\n    child => isValidElement(child) && typeof child !== 'string' && child.type === ListItemTitle,\n  )\n  const title = childrenArray[titleIndex]\n  const nonTitleChildren =\n    titleIndex < 0 ? childrenArray : childrenArray.slice(0, titleIndex).concat(childrenArray.slice(titleIndex + 1))\n  return (\n    <>\n      {title}\n      <div {...testIdProps('list-view-item-main-content')} className={styles.container}>\n        <div className={clsx(styles.inner, variant === 'compact' && styles.compact)}>{nonTitleChildren}</div>\n      </div>\n    </>\n  )\n}\n\ntry{ ListItemMainContent.displayName ||= 'ListItemMainContent' } catch {}","import {announceFromElement} from '@github-ui/aria-live'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {Box} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {ReactElement, ReactNode, Suspense} from 'react'\nimport {isValidElement, useCallback, useEffect, useRef} from 'react'\n\nimport densityStyles from '../density-gap.module.css'\nimport {useNextHeaderTag} from '../hooks/use-next-header-tag'\nimport type {PrefixedStylableProps, StylableProps} from '../types'\nimport {ListViewActionBar, type ListViewActionBarProps} from './ActionBar'\nimport {useListViewId} from './IdContext'\nimport styles from './Metadata.module.css'\nimport type {ListViewSectionFilterLinks} from './SectionFilterLink'\nimport {ListViewSectionFilters} from './SectionFilters'\nimport {ListViewSelectAllCheckbox} from './SelectAllCheckbox'\nimport {useListViewSelection} from './SelectionContext'\nimport {useListViewTitle} from './TitleContext'\n\nexport type ListViewMetadataProps = {\n  /**\n   * The rendered title of the list or information regarding its contents.\n   */\n  title?: string | ReactNode\n  /**\n   * Links for applying any categorical, mutually exclusive section filters for the content of the ListView.\n   */\n  sectionFilters?: ListViewSectionFilterLinks | ReactElement<typeof Suspense>\n  /**\n   * Used for assistive announcements that are reflective of the visual updates to the list container a sighted user\n   * will experience when using the list. Defaults to no announcement. Visually hidden, for screenreaders only.\n   */\n  assistiveAnnouncement?: string\n  /**\n   * Callback for when the checkbox for selecting and deselecting all list items is toggled.\n   */\n  onToggleSelectAll?: (isSelectAllChecked: boolean) => void\n  /**\n   * Optional additional actions to show. Will not fall into an overflow dropdown menu to accommodate small screen\n   * widths.\n   */\n  children?: ReactNode\n} & StylableProps &\n  PrefixedStylableProps<'actions'> &\n  ListViewActionBarProps\n\nexport const ListViewMetadata = ({\n  title,\n  assistiveAnnouncement,\n  sectionFilters,\n  children,\n  style,\n  sx,\n  className,\n  actionsStyle,\n  actionsSx,\n  actionsClassName,\n  onToggleSelectAll,\n  ...actionBarProps\n}: ListViewMetadataProps) => {\n  const {idPrefix} = useListViewId()\n  const {anyItemsSelected} = useListViewSelection()\n  const {setHasMetadataTitle} = useListViewTitle()\n  const TitleTag = useNextHeaderTag('list-view-metadata')\n  const announceRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    setHasMetadataTitle(!!title)\n  })\n\n  useEffect(() => {\n    if (announceRef.current) announceFromElement(announceRef.current)\n  }, [assistiveAnnouncement])\n\n  const ListViewAnnouncements = () => {\n    return (\n      <div\n        id={`${idPrefix}-list-view-announcements`}\n        role=\"status\"\n        aria-live=\"polite\"\n        aria-atomic=\"true\"\n        className=\"sr-only\"\n        ref={announceRef}\n        {...testIdProps('list-view-announcement-container')}\n      >\n        {assistiveAnnouncement}\n      </div>\n    )\n  }\n\n  const ListFilters = useCallback(() => {\n    if (!sectionFilters) return null\n\n    if (Array.isArray(sectionFilters)) {\n      return <ListViewSectionFilters links={sectionFilters} />\n    } else if (isValidElement(sectionFilters)) {\n      return <>{sectionFilters}</>\n    }\n    return null\n  }, [sectionFilters])\n\n  return (\n    <Box\n      id={`${idPrefix}-list-view-metadata`}\n      className={clsx(styles.container, className, anyItemsSelected && densityStyles.spacious)}\n      style={style}\n      sx={sx}\n      {...testIdProps('list-view-metadata')}\n    >\n      <ListViewSelectAllCheckbox\n        onToggle={(isSelectAllChecked: boolean) => {\n          if (onToggleSelectAll) onToggleSelectAll(isSelectAllChecked)\n        }}\n      />\n\n      <ListFilters />\n\n      {title && !anyItemsSelected && (\n        <TitleTag className={styles.heading} {...testIdProps('list-view-header-title')}>\n          {title}\n        </TitleTag>\n      )}\n\n      <ListViewActionBar style={actionsStyle} sx={actionsSx} className={actionsClassName} {...actionBarProps}>\n        {children}\n      </ListViewActionBar>\n\n      {assistiveAnnouncement && <ListViewAnnouncements />}\n    </Box>\n  )\n}\n\ntry{ ListViewMetadata.displayName ||= 'ListViewMetadata' } catch {}\ntry{ TitleTag.displayName ||= 'TitleTag' } catch {}\ntry{ ListViewAnnouncements.displayName ||= 'ListViewAnnouncements' } catch {}\ntry{ ListFilters.displayName ||= 'ListFilters' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"normal\":\"density-gap-module__normal--WYrBD\",\"none\":\"density-gap-module__none--WMH6V\",\"condensed\":\"density-gap-module__condensed--seZl0\",\"spacious\":\"density-gap-module__spacious--Nnm9Z\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ActionBar-module__container--SjALR\"};","import {ActionBar as GitHubUiActionBar, type ActionBarProps as GitHubUiActionBarProps} from '@github-ui/action-bar'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {Box} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {ReactElement} from 'react'\n\nimport densityStyles from '../density-gap.module.css'\nimport type {StylableProps} from '../types'\nimport styles from './ActionBar.module.css'\nimport type {ListViewDensityToggle} from './DensityToggle'\n\n// Require actionsLabel if actions are provided, and vice versa.\ntype ListViewActionBar =\n  | {\n      /**\n       * Description of the controls found in the action bar, e.g., \"Issue actions\", \"Markdown formatting tools\".\n       * Will be used in a hidden label for accessibility purposes. Defaults to the title for the ListView.\n       */\n      actionsLabel: GitHubUiActionBarProps['label']\n      /**\n       * The controls to show in the action bar. These will move into a dropdown menu when the screen isn't big enough to\n       * fit them side by side.\n       */\n      actions: GitHubUiActionBarProps['actions']\n    }\n  | {actionsLabel?: undefined; actions?: undefined}\n\nexport type ListViewActionBarProps = ListViewActionBar & {\n  /**\n   * Include a toggle to switch between Comfortable and Condensed view modes.\n   */\n  densityToggle?: ReactElement<typeof ListViewDensityToggle>\n} & StylableProps &\n  Omit<GitHubUiActionBarProps, 'actions' | 'label'>\n\nexport const ListViewActionBar = ({\n  actions,\n  style,\n  sx,\n  className,\n  children,\n  density,\n  actionsLabel,\n  densityToggle,\n}: ListViewActionBarProps) => {\n  const nonCollapsibleActions = (\n    <>\n      {children}\n      {densityToggle}\n    </>\n  )\n\n  if (actions && actions.length > 0) {\n    return (\n      <GitHubUiActionBar\n        label={actionsLabel?.trim()}\n        actions={actions}\n        density={density}\n        {...testIdProps('list-view-actions')}\n        style={style}\n        sx={sx}\n        className={className}\n      >\n        {nonCollapsibleActions}\n      </GitHubUiActionBar>\n    )\n  }\n\n  return (\n    <Box\n      {...testIdProps('list-view-actions')}\n      style={style}\n      sx={sx}\n      className={clsx(styles.container, density && densityStyles[density], className)}\n    >\n      {nonCollapsibleActions}\n    </Box>\n  )\n}\n\ntry{ ListViewActionBar.displayName ||= 'ListViewActionBar' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Metadata-module__container--tL6Q3\",\"heading\":\"Metadata-module__heading--HAxII\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"SectionFilters-module__container--MmIUF\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {clsx} from 'clsx'\n\nimport type {ListViewSectionFilterLinks} from './SectionFilterLink'\nimport styles from './SectionFilters.module.css'\n\ntype ListViewSectionFiltersProps = {\n  links: ListViewSectionFilterLinks\n}\n\nexport const ListViewSectionFilters = ({links}: ListViewSectionFiltersProps) => {\n  if (links.length < 1) return null\n\n  return (\n    <div {...testIdProps('list-view-section-filters')}>\n      <ul className={clsx('list-style-none', styles.container)}>\n        {links.map((sectionFilterLink, index) => (\n          <li key={`section-filter-${index}`} {...testIdProps(`list-view-section-filter-${index}`)}>\n            {sectionFilterLink}\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\ntry{ ListViewSectionFilters.displayName ||= 'ListViewSectionFilters' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"SelectAllCheckbox-module__container--FJDtV\",\"formControlContainer\":\"SelectAllCheckbox-module__formControlContainer--JTzPI\",\"count\":\"SelectAllCheckbox-module__count--xEF8c\"};","import {announceFromElement} from '@github-ui/aria-live'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {Box, Checkbox, FormControl} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {KeyboardEvent} from 'react'\nimport {useCallback, useEffect, useId, useMemo, useRef} from 'react'\n\nimport type {StylableProps} from '../types'\nimport {useListViewMultiPageSelection} from './MultiPageSelectionContext'\nimport styles from './SelectAllCheckbox.module.css'\nimport {useListViewSelection} from './SelectionContext'\nimport {useListViewTitle} from './TitleContext'\n\ntype ListViewSelectAllCheckboxProps = {onToggle?: (value: boolean) => void; className?: string} & StylableProps\n\nexport const ListViewSelectAllCheckbox = ({onToggle, style, className, sx}: ListViewSelectAllCheckboxProps) => {\n  const {title} = useListViewTitle()\n  const {\n    isSelectable,\n    selectedCount,\n    totalCount,\n    countOnPage,\n    isSelectAllChecked,\n    anyItemsSelected,\n    singularUnits,\n    pluralUnits,\n  } = useListViewSelection()\n  const {multiPageSelectionAllowed} = useListViewMultiPageSelection()\n  const idPrefix = useId()\n  const checkboxRef = useRef<HTMLInputElement>(null)\n  const srRef = useRef<HTMLSpanElement>(null)\n  const notAllItemsSelected = useMemo(() => {\n    if (multiPageSelectionAllowed && typeof totalCount === 'number') {\n      return selectedCount < Math.max(totalCount, countOnPage)\n    }\n    return selectedCount < countOnPage\n  }, [countOnPage, multiPageSelectionAllowed, selectedCount, totalCount])\n  const isIndeterminate = anyItemsSelected && notAllItemsSelected\n  const units = selectedCount === 1 ? singularUnits : pluralUnits\n  const suffix = typeof totalCount === 'number' ? `of ${totalCount} selected` : 'selected'\n  const srString = `${selectedCount} ${units} ${suffix}`\n\n  const handleBulkSelectToggle = useCallback(() => {\n    if (!onToggle) return\n\n    if (isIndeterminate) {\n      onToggle(false)\n    } else {\n      onToggle(!isSelectAllChecked)\n    }\n  }, [isIndeterminate, isSelectAllChecked, onToggle])\n\n  useEffect(() => {\n    srRef.current && announceFromElement(srRef.current)\n  }, [srRef, srString])\n\n  if (!isSelectable) return null\n\n  const checkboxId = `${idPrefix}-list-view-select-all`\n\n  const onKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault()\n      handleBulkSelectToggle()\n    }\n  }\n\n  return (\n    <Box\n      style={style}\n      sx={sx}\n      className={clsx(styles.container, className)}\n      {...testIdProps('list-view-select-all-container')}\n      id={`${idPrefix}-list-view-select-all-container`}\n    >\n      <div className={styles.formControlContainer}>\n        <FormControl id={checkboxId}>\n          <Checkbox\n            onChange={handleBulkSelectToggle}\n            value=\"default\"\n            checked={isSelectAllChecked}\n            indeterminate={isIndeterminate}\n            onKeyDown={onKeyDown}\n            tabIndex={0}\n            ref={checkboxRef}\n            {...testIdProps('select-all-checkbox')}\n          />\n          <FormControl.Label visuallyHidden {...testIdProps('select-all-label')}>\n            Select all {pluralUnits}: {title}\n          </FormControl.Label>\n        </FormControl>\n      </div>\n      <p\n        className={clsx(styles.count, anyItemsSelected ? undefined : 'sr-only')}\n        {...testIdProps('select-all-selected-count')}\n      >\n        <span\n          aria-hidden=\"true\"\n          className={anyItemsSelected ? undefined : 'sr-only'}\n          {...testIdProps('select-all-selected-count-without-units')}\n        >\n          {selectedCount} {suffix}{' '}\n        </span>\n        <span className=\"sr-only\" ref={srRef} {...testIdProps('sr-content')}>\n          {srString}\n        </span>\n      </p>\n    </Box>\n  )\n}\n\ntry{ ListViewSelectAllCheckbox.displayName ||= 'ListViewSelectAllCheckbox' } catch {}","import type {ChildRoute, LoaderResult, RouteRegistration, TransitionType} from './app-routing-types'\nimport type React from 'react'\nimport type {Location} from '@remix-run/router'\n\nexport interface JsonRouteProps {\n  path: string\n  Component: React.ComponentType\n  transitionType?: TransitionType\n  shouldNavigateOnError?: boolean\n  children?: ChildRoute[]\n}\n/**\n * A utility for building a route registration for a route that consumes a JSON object (either via embedding in a\n * script tag or via a JSON fetch on React soft navigations).\n */\nexport function jsonRoute<TRouteData, TEmbeddedData>({\n  path,\n  Component,\n  /**\n   * Some routes want to handle their own errors and not just show a generic error page. In this case,\n   * the error is just handled like any other payload for the route.\n   * NOTE: We might consider replacing the shouldNavigateOnError flag with a parallel implementation to jsonRoute.\n   */\n  shouldNavigateOnError,\n  transitionType,\n  children,\n}: JsonRouteProps): RouteRegistration<TRouteData, TEmbeddedData> {\n  async function coreLoader({location}: {location: Location}): Promise<LoaderResult<TRouteData>> {\n    let response: Response\n    try {\n      const fetchPath = `${location.pathname}${location.search}`\n      response = await window.fetch(fetchPath, {\n        headers: {\n          Accept: 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-GitHub-Target': 'dotcom',\n          'X-React-Router': 'json',\n        },\n      })\n    } catch (error) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'fetchError'},\n      }\n    }\n    if (response.redirected) {\n      return {\n        type: 'redirect',\n        url: response.url,\n      }\n    } else if (!response.ok) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'httpError', httpStatus: response.status},\n      }\n    } else {\n      try {\n        const responseJson = await response.json()\n        return {\n          type: 'loaded',\n          data: responseJson,\n          title: responseJson.title,\n        }\n      } catch (error) {\n        return {\n          type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n          error: {type: 'badResponseError'},\n        }\n      }\n    }\n  }\n\n  function loadFromEmbeddedData({embeddedData}: {embeddedData: TEmbeddedData}): {data: TRouteData; title: string} {\n    const data = embeddedData as unknown as TRouteData & {title: string}\n    return {data, title: data.title}\n  }\n\n  return {\n    path,\n    // TODO: consider wrapping Component with a component that passes payload as a prop — ideally as part of migrating\n    // away from useRoutePayload.\n    Component,\n    coreLoader,\n    loadFromEmbeddedData,\n    transitionType,\n    children,\n  }\n}\n"],"names":["getRepositorySearchQuery","queryString","orgIndexSplit","indexOf","orgSearchName","slice","repoSearchName","length","App","props","children","displayName","RepoSelectionDialog","currentOrg","onClose","onSubmit","indexedRepos","processing","quotaRemaining","filterText","setFilterText","useState","filterQuery","setFilterQuery","debouncedSetFilter","debounce","newFilter","replaceAll","start","repositories","loading","useRepositoryItems","selectedItems","setSelectedItems","onSelected","useCallback","item","isSelected","items","filter","i","id","filteredRepos","useMemo","repo","find","r","name","setFilterTextAndQuery","Dialog","title","renderBody","Body","sx","padding","display","flexDirection","TextInput","leadingVisual","SearchIcon","flex","m","placeholder","onChange","e","target","value","loaderPosition","div","ListView","isSelectable","variant","map","ListItem","includes","onSelect","border","ListItemTitle","nameWithOwner","ListItemLeadingContent","alignItems","Octicon","icon","RepoLockedIcon","Box","ml","mb","renderFooter","Footer","Spinner","color","mr","Button","onClick","disabled","owner","login","description","shortDescriptionHTML","RemoveIndexedReposDialog","repos","width","gap","span","ul","style","marginLeft","li","Text","fontWeight","justifyContent","SemanticCodeSearchSettings","canIndexRepos","initialIndexedRepos","quota","orgName","useRoutePayload","selectedRepos","setSelectedRepos","Set","removeDialogRepos","setRemoveDialogRepos","showRepoSelectionDialog","setShowRepoSelectionDialog","setIndexedRepos","error","setError","addingRepos","setAddingRepos","removingRepos","setRemovingRepos","environment","relayEnvironmentWithMissingFieldHandlerForNode","repoNameWithOwner","selected","has","add","delete","onRemoveSelectedIndexes","Array","from","keys","onRemoveSubmit","nwos","encodeURIComponent","resp","verifiedFetch","JSON","stringify","method","ok","onCloseRemoveDialog","onSubmitAddRepos","reposToAdd","onShowRepoSelectionDialog","onCloseRepoSelectionDialog","RelayEnvironmentProvider","main","data-view-component","className","h2","borderColor","fontSize","Math","max","Heading","as","flexGrow","PlusIcon","pb","data-hpc","metadata","ListViewMetadata","actionsLabel","onToggleSelectAll","isSelectAllChecked","actions","size","key","render","isOverflowMenu","ActionList","Item","LeadingVisual","TrashIcon","secondaryActions","ListItemActionBar","staticMenuActions","ListItemLeadingVisual","ListItemMainContent","ListItemDescription","registerReactAppFactory","routes","jsonRoute","path","Component","setRepositories","totalCount","setTotalCount","endCursor","setEndCursor","setIsLoading","topRepositoriesLoadedCache","setTopRepositoriesLoadedCache","undefined","topRepositoryResults","setTopRepositoryResults","searchedReposSubscription","useRef","relayEnvironment","useRelayEnvironment","topRepositoryFragment","useFragment","TopRepositoriesFragment","topRepositories","edges","flatMap","a","node","readInlineData","RepositoryFragment","fetchTopRepos","topRepos","fetchQuery","TopRepositories","topRepositoriesFirst","toPromise","viewer","_","useEffect","fetchSearchedRepos","query","searchedRepos","Promise","resolve","reject","SearchRepositories","searchQuery","subscribe","subscription","current","unsubscribe","next","data","search","nodes","pageInfo","repositoryCount","loadMore","after","afterFetch","fetchedRepos","prevRepos","testIdProps","clsx","styles","container","useListViewSelection","ListItemUnreadIndicator","newActivity","useListViewVariant","setStatus","useListItemStatus","setHasNewActivity","useListItemNewActivity","trimmedDescription","trim","outer","defaultVariant","hasNewActivity","inner","aria-label","childrenArray","Children","toArray","titleIndex","findIndex","child","isValidElement","type","nonTitleChildren","concat","compact","TitleTag","ListViewAnnouncements","ListFilters","ListViewActionBar","density","densityToggle","nonCollapsibleActions","GitHubUiActionBar","label","densityStyles","ListViewSectionFilters","links","sectionFilterLink","index","ListViewSelectAllCheckbox","onToggle","useListViewTitle","selectedCount","countOnPage","anyItemsSelected","singularUnits","pluralUnits","multiPageSelectionAllowed","useListViewMultiPageSelection","idPrefix","useId","checkboxRef","srRef","notAllItemsSelected","isIndeterminate","units","suffix","srString","handleBulkSelectToggle","announceFromElement","checkboxId","formControlContainer","FormControl","Checkbox","checked","indeterminate","onKeyDown","event","preventDefault","tabIndex","ref","Label","visuallyHidden","p","count","aria-hidden","assistiveAnnouncement","sectionFilters","actionsStyle","actionsSx","actionsClassName","actionBarProps","useListViewId","setHasMetadataTitle","useNextHeaderTag","announceRef","isArray","spacious","heading","role","aria-live","aria-atomic","shouldNavigateOnError","transitionType","coreLoader","location","response","fetchPath","pathname","window","fetch","headers","Accept","redirected","url","httpStatus","status","responseJson","json","loadFromEmbeddedData","embeddedData"],"sourceRoot":""}
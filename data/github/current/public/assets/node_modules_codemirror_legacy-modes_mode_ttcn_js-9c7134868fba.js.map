{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_ttcn_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/ttcn.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nconst parserConfig = {\n  name: \"ttcn\",\n  keywords: words(\"activate address alive all alt altstep and and4b any\" +\n                  \" break case component const continue control deactivate\" +\n                  \" display do else encode enumerated except exception\" +\n                  \" execute extends extension external for from function\" +\n                  \" goto group if import in infinity inout interleave\" +\n                  \" label language length log match message mixed mod\" +\n                  \" modifies module modulepar mtc noblock not not4b nowait\" +\n                  \" of on optional or or4b out override param pattern port\" +\n                  \" procedure record recursive rem repeat return runs select\" +\n                  \" self sender set signature system template testcase to\" +\n                  \" type union value valueof var variant while with xor xor4b\"),\n  builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" +\n                 \" decomp decvalue float2int float2str hex2bit hex2int\" +\n                 \" hex2oct hex2str int2bit int2char int2float int2hex\" +\n                 \" int2oct int2str int2unichar isbound ischosen ispresent\" +\n                 \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" +\n                 \" oct2str regexp replace rnd sizeof str2bit str2float\" +\n                 \" str2hex str2int str2oct substr unichar2int unichar2char\" +\n                 \" enum2int\"),\n  types: words(\"anytype bitstring boolean char charstring default float\" +\n               \" hexstring integer objid octetstring universal verdicttype timer\"),\n  timerOps: words(\"read running start stop timeout\"),\n  portOps: words(\"call catch check clear getcall getreply halt raise receive\" +\n                 \" reply send trigger\"),\n  configOps: words(\"create connect disconnect done kill killed map unmap\"),\n  verdictOps: words(\"getverdict setverdict\"),\n  sutOps: words(\"action\"),\n  functionOps: words(\"apply derefers refers\"),\n\n  verdictConsts: words(\"error fail inconc none pass\"),\n  booleanConsts: words(\"true false\"),\n  otherConsts: words(\"null NULL omit\"),\n\n  visibilityModifiers: words(\"private public friend\"),\n  templateMatch: words(\"complement ifpresent subset superset permutation\"),\n  multiLineStrings: true\n}\n\nvar wordList = []\nfunction add(obj) {\n  if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n    wordList.push(prop);\n}\nadd(parserConfig.keywords);\nadd(parserConfig.builtin);\nadd(parserConfig.timerOps);\nadd(parserConfig.portOps);\n\nvar keywords = parserConfig.keywords || {},\n    builtin = parserConfig.builtin || {},\n    timerOps = parserConfig.timerOps || {},\n    portOps  = parserConfig.portOps || {},\n    configOps = parserConfig.configOps || {},\n    verdictOps = parserConfig.verdictOps || {},\n    sutOps = parserConfig.sutOps || {},\n    functionOps = parserConfig.functionOps || {},\n\n    verdictConsts = parserConfig.verdictConsts || {},\n    booleanConsts = parserConfig.booleanConsts || {},\n    otherConsts   = parserConfig.otherConsts || {},\n\n    types = parserConfig.types || {},\n    visibilityModifiers = parserConfig.visibilityModifiers || {},\n    templateMatch = parserConfig.templateMatch || {},\n    multiLineStrings = parserConfig.multiLineStrings,\n    indentStatements = parserConfig.indentStatements !== false;\nvar isOperatorChar = /[+\\-*&@=<>!\\/]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  }\n  if (ch == \"#\"){\n    stream.skipToEnd();\n    return \"atom\";\n  }\n  if (ch == \"%\"){\n    stream.eatWhile(/\\b/);\n    return \"atom\";\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    if(ch == \"@\"){\n      if(stream.match(\"try\") || stream.match(\"catch\")\n         || stream.match(\"lazy\")){\n        return \"keyword\";\n      }\n    }\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n\n  if (timerOps.propertyIsEnumerable(cur)) return \"def\";\n  if (configOps.propertyIsEnumerable(cur)) return \"def\";\n  if (verdictOps.propertyIsEnumerable(cur)) return \"def\";\n  if (portOps.propertyIsEnumerable(cur)) return \"def\";\n  if (sutOps.propertyIsEnumerable(cur)) return \"def\";\n  if (functionOps.propertyIsEnumerable(cur)) return \"def\";\n\n  if (verdictConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (booleanConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (otherConsts.propertyIsEnumerable(cur)) return \"string\";\n\n  if (types.propertyIsEnumerable(cur)) return \"typeName.standard\";\n  if (visibilityModifiers.propertyIsEnumerable(cur))\n    return \"modifier\";\n  if (templateMatch.propertyIsEnumerable(cur)) return \"atom\";\n\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped){\n        var afterQuote = stream.peek();\n        //look if the character after the quote is like the B in '10100010'B\n        if (afterQuote){\n          afterQuote = afterQuote.toLowerCase();\n          if(afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\")\n            stream.next();\n        }\n        end = true; break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !(escaped || multiLineStrings))\n      state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\n\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\n\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n//Interface\nexport const ttcn = {\n  name: \"ttcn\",\n  startState: function() {\n    return {\n      tokenize: null,\n      context: new Context(0, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n        && ctx.type == \"statement\"){\n      popContext(state);\n    }\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (indentStatements &&\n             (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') ||\n              (ctx.type == \"statement\" && curPunc == \"newstatement\")))\n      pushContext(state, stream.column(), \"statement\");\n\n    state.startOfLine = false;\n\n    return style;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n    autocomplete: wordList\n  }\n};\n"],"names":["words","str","obj","split","i","length","parserConfig","name","keywords","builtin","types","timerOps","portOps","configOps","verdictOps","sutOps","functionOps","verdictConsts","booleanConsts","otherConsts","visibilityModifiers","templateMatch","multiLineStrings","curPunc","wordList","add","prop","hasOwnProperty","push","indentStatements","isOperatorChar","tokenComment","stream","state","ch","maybeEnd","next","tokenize","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","ttcn","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","escaped","end","afterQuote","peek","toLowerCase","test","skipToEnd","eatWhile","eat","match","cur","current","propertyIsEnumerable","languageData","indentOnInput","commentTokens","line","block","open","close","autocomplete"],"sourceRoot":""}
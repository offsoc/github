# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `advisory_db_toolkit` gem.
# Please instead update this file by running `bin/tapioca gem advisory_db_toolkit`.

# source://advisory_db_toolkit//lib/utility.rb#3
module AdvisoryDBToolkit
  class << self
    # source://advisory_db_toolkit//lib/advisory_db_toolkit.rb#30
    def cache; end

    # source://advisory_db_toolkit//lib/advisory_db_toolkit.rb#24
    def cache=(cache); end

    # source://advisory_db_toolkit//lib/advisory_db_toolkit.rb#39
    def cache_prefix_key; end

    # source://advisory_db_toolkit//lib/advisory_db_toolkit.rb#35
    def cache_prefix_key=(cache_prefix_key); end

    # source://advisory_db_toolkit//lib/advisory_db_toolkit.rb#49
    def logger; end

    # source://advisory_db_toolkit//lib/advisory_db_toolkit.rb#43
    def logger=(logger); end

    # source://advisory_db_toolkit//lib/advisory_db_toolkit.rb#15
    def normalize_description_line_endings(description); end
  end
end

# source://advisory_db_toolkit//lib/cve_id_validator.rb#4
module AdvisoryDBToolkit::CVEIDValidator
  class << self
    # @return [Boolean]
    #
    # source://advisory_db_toolkit//lib/cve_id_validator.rb#9
    def contains_valid?(string); end

    # @return [Boolean]
    #
    # source://advisory_db_toolkit//lib/cve_id_validator.rb#13
    def valid?(value); end
  end
end

# This pattern is limited to 40 characters because our database columns are.
#
# source://advisory_db_toolkit//lib/cve_id_validator.rb#6
AdvisoryDBToolkit::CVEIDValidator::CONTAINING_STRING_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://advisory_db_toolkit//lib/cve_id_validator.rb#7
AdvisoryDBToolkit::CVEIDValidator::PATTERN = T.let(T.unsafe(nil), Regexp)

# NOTE: This is a default cache that does nothing. It is used when no cache is set.
#
# source://advisory_db_toolkit//lib/advisory_db_toolkit.rb#55
class AdvisoryDBToolkit::DefaultCache
  # source://advisory_db_toolkit//lib/advisory_db_toolkit.rb#56
  def get(key); end

  # source://advisory_db_toolkit//lib/advisory_db_toolkit.rb#57
  def set(key, value, options = T.unsafe(nil)); end
end

# source://advisory_db_toolkit//lib/ecosystems.rb#4
module AdvisoryDBToolkit::Ecosystems
  class << self
    # source://advisory_db_toolkit//lib/ecosystems.rb#46
    def ghsa_to_osv_ecosystem(ecosystem); end

    # source://advisory_db_toolkit//lib/ecosystems.rb#50
    def osv_to_ghsa_ecosystem(ecosystem); end
  end
end

# source://advisory_db_toolkit//lib/ecosystems/actions.rb#4
module AdvisoryDBToolkit::Ecosystems::Actions
  extend ::AdvisoryDBToolkit::Ecosystems::Actions

  # source://advisory_db_toolkit//lib/ecosystems/actions.rb#24
  def get_package_url(package_name); end

  # https://docs.github.com/en/rest/repos/repos#get-a-repository
  #
  # source://advisory_db_toolkit//lib/ecosystems/actions.rb#9
  def get_repo(package_name); end
end

# source://advisory_db_toolkit//lib/ecosystems/actions.rb#6
AdvisoryDBToolkit::Ecosystems::Actions::API_ENDPOINT = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/ecosystems/crates.rb#4
module AdvisoryDBToolkit::Ecosystems::Crates
  extend ::AdvisoryDBToolkit::Ecosystems::Crates

  # source://advisory_db_toolkit//lib/ecosystems/crates.rb#9
  def get_crate(package_name); end

  # source://advisory_db_toolkit//lib/ecosystems/crates.rb#40
  def get_package_url(package_name); end
end

# https://doc.rust-lang.org/nightly/cargo/reference/registries.html#web-api
#
# source://advisory_db_toolkit//lib/ecosystems/crates.rb#7
AdvisoryDBToolkit::Ecosystems::Crates::REGISTRY_URL = T.let(T.unsafe(nil), String)

# As of OSV Schema Version 1.1.0
# https://ossf.github.io/osv-schema/#affectedpackage-field
#
# source://advisory_db_toolkit//lib/ecosystems.rb#7
AdvisoryDBToolkit::Ecosystems::ECOSYSTEM_OSV_MAP = T.let(T.unsafe(nil), Hash)

# source://advisory_db_toolkit//lib/ecosystems/exceptions.rb#4
class AdvisoryDBToolkit::Ecosystems::Exceptions; end

# source://advisory_db_toolkit//lib/ecosystems/exceptions.rb#5
class AdvisoryDBToolkit::Ecosystems::Exceptions::ApiError < ::StandardError
  # @return [ApiError] a new instance of ApiError
  #
  # source://advisory_db_toolkit//lib/ecosystems/exceptions.rb#8
  def initialize(message = T.unsafe(nil), response: T.unsafe(nil)); end

  # Returns the value of attribute response.
  #
  # source://advisory_db_toolkit//lib/ecosystems/exceptions.rb#6
  def response; end

  # Sets the attribute response
  #
  # @param value the value to set the attribute response to.
  #
  # source://advisory_db_toolkit//lib/ecosystems/exceptions.rb#6
  def response=(_arg0); end

  # source://advisory_db_toolkit//lib/ecosystems/exceptions.rb#13
  def status; end
end

# source://advisory_db_toolkit//lib/ecosystems/go.rb#4
module AdvisoryDBToolkit::Ecosystems::Go
  extend ::AdvisoryDBToolkit::Ecosystems::Go

  # source://advisory_db_toolkit//lib/ecosystems/go.rb#8
  def get_package_page(package_name); end

  # source://advisory_db_toolkit//lib/ecosystems/go.rb#24
  def get_package_url(package_name); end
end

# source://advisory_db_toolkit//lib/ecosystems/go.rb#6
AdvisoryDBToolkit::Ecosystems::Go::REGISTRY_URL = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/ecosystems/hex.rb#4
module AdvisoryDBToolkit::Ecosystems::Hex
  extend ::AdvisoryDBToolkit::Ecosystems::Hex

  # https://hexpm.docs.apiary.io/#reference/packages/package/fetch-a-package
  #
  # source://advisory_db_toolkit//lib/ecosystems/hex.rb#10
  def get_package(package_name); end

  # source://advisory_db_toolkit//lib/ecosystems/hex.rb#25
  def get_package_url(package_name); end
end

# https://hexpm.docs.apiary.io/#
#
# source://advisory_db_toolkit//lib/ecosystems/hex.rb#7
AdvisoryDBToolkit::Ecosystems::Hex::API_ENDPOINT = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/ecosystems/maven.rb#4
module AdvisoryDBToolkit::Ecosystems::Maven
  extend ::AdvisoryDBToolkit::Ecosystems::Maven

  # source://advisory_db_toolkit//lib/ecosystems/maven.rb#9
  def api(params); end

  # source://advisory_db_toolkit//lib/ecosystems/maven.rb#13
  def get_artifact_by_group_id(artifact_name, group_id); end

  # package_name should be formatted like group_id:artifact_name
  #
  # source://advisory_db_toolkit//lib/ecosystems/maven.rb#30
  def get_package_url(package_name); end

  private

  # Formats a hash of search options for Maven Central Repository Search into a string
  # Hash keys for common search option include:
  #  - Group -> g
  #  - Artifact -> a
  #  - Version -> v
  # See "Advanced Options" on https://search.maven.org/ For more options
  #
  # source://advisory_db_toolkit//lib/ecosystems/maven.rb#52
  def format_search_options(options); end
end

# https://central.sonatype.org/search/rest-api-guide/
#
# source://advisory_db_toolkit//lib/ecosystems/maven.rb#7
AdvisoryDBToolkit::Ecosystems::Maven::API_ENDPOINT = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/ecosystems/npm.rb#4
module AdvisoryDBToolkit::Ecosystems::NPM
  extend ::AdvisoryDBToolkit::Ecosystems::NPM

  # source://advisory_db_toolkit//lib/ecosystems/npm.rb#9
  def api(route, params: T.unsafe(nil)); end

  # source://advisory_db_toolkit//lib/ecosystems/npm.rb#14
  def get_package_info(package_name); end

  # source://advisory_db_toolkit//lib/ecosystems/npm.rb#28
  def get_package_url(package_name); end
end

# source://advisory_db_toolkit//lib/ecosystems/npm.rb#7
AdvisoryDBToolkit::Ecosystems::NPM::API_ENDPOINT = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/ecosystems/nuget.rb#4
module AdvisoryDBToolkit::Ecosystems::Nuget
  extend ::AdvisoryDBToolkit::Ecosystems::Nuget

  # source://advisory_db_toolkit//lib/ecosystems/nuget.rb#11
  def api(route, params: T.unsafe(nil)); end

  # https://learn.microsoft.com/en-us/nuget/api/registration-base-url-resource
  #
  # source://advisory_db_toolkit//lib/ecosystems/nuget.rb#17
  def get_package_metadata(package_name); end

  # source://advisory_db_toolkit//lib/ecosystems/nuget.rb#32
  def get_package_url(package_name); end

  private

  # source://advisory_db_toolkit//lib/ecosystems/nuget.rb#65
  def cache_key(endpoint_specific); end

  # source://advisory_db_toolkit//lib/ecosystems/nuget.rb#43
  def registration_index; end

  # https://learn.microsoft.com/en-us/nuget/api/service-index
  #
  # source://advisory_db_toolkit//lib/ecosystems/nuget.rb#55
  def service_index; end

  # source://advisory_db_toolkit//lib/ecosystems/nuget.rb#69
  def with_cache(key); end
end

# source://advisory_db_toolkit//lib/ecosystems/nuget.rb#9
AdvisoryDBToolkit::Ecosystems::Nuget::API_ENDPOINT = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/ecosystems/nuget.rb#6
AdvisoryDBToolkit::Ecosystems::Nuget::CACHE_KEY_ROOT = T.let(T.unsafe(nil), String)

# 1.hour
#
# source://advisory_db_toolkit//lib/ecosystems/nuget.rb#7
AdvisoryDBToolkit::Ecosystems::Nuget::CACHE_TTL = T.let(T.unsafe(nil), Integer)

# source://advisory_db_toolkit//lib/ecosystems/packagist.rb#4
module AdvisoryDBToolkit::Ecosystems::Packagist
  extend ::AdvisoryDBToolkit::Ecosystems::Packagist

  # https://packagist.org/apidoc#get-package-data
  #
  # source://advisory_db_toolkit//lib/ecosystems/packagist.rb#10
  def get_package_metadata(package_name); end

  # source://advisory_db_toolkit//lib/ecosystems/packagist.rb#25
  def get_package_url(package_name); end
end

# https://packagist.org/apidoc
#
# source://advisory_db_toolkit//lib/ecosystems/packagist.rb#7
AdvisoryDBToolkit::Ecosystems::Packagist::METADATA_ENDPOINT = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/ecosystems/pub.rb#4
module AdvisoryDBToolkit::Ecosystems::Pub
  extend ::AdvisoryDBToolkit::Ecosystems::Pub

  # https://github.com/dart-lang/pub/blob/master/doc/repository-spec-v2.md#list-all-versions-of-a-package
  #
  # source://advisory_db_toolkit//lib/ecosystems/pub.rb#10
  def get_package(package_name); end

  # source://advisory_db_toolkit//lib/ecosystems/pub.rb#25
  def get_package_url(package_name); end
end

# https://pub.dev/help/api
#
# source://advisory_db_toolkit//lib/ecosystems/pub.rb#7
AdvisoryDBToolkit::Ecosystems::Pub::API_ENDPOINT = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/ecosystems/pypi.rb#4
module AdvisoryDBToolkit::Ecosystems::Pypi
  extend ::AdvisoryDBToolkit::Ecosystems::Pypi

  # source://advisory_db_toolkit//lib/ecosystems/pypi.rb#25
  def get_package_url(package_name); end

  # https://warehouse.pypa.io/api-reference/json.html#project
  #
  # source://advisory_db_toolkit//lib/ecosystems/pypi.rb#10
  def get_project(project_name); end
end

# https://warehouse.pypa.io/api-reference/json.html
#
# source://advisory_db_toolkit//lib/ecosystems/pypi.rb#7
AdvisoryDBToolkit::Ecosystems::Pypi::JSON_API_ENDPOINT = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/ecosystems/ruby_gems.rb#4
module AdvisoryDBToolkit::Ecosystems::RubyGems
  extend ::AdvisoryDBToolkit::Ecosystems::RubyGems

  # source://advisory_db_toolkit//lib/ecosystems/ruby_gems.rb#9
  def api(route, params: T.unsafe(nil)); end

  # https://guides.rubygems.org/rubygems-org-api/#gem-methods
  #
  # source://advisory_db_toolkit//lib/ecosystems/ruby_gems.rb#15
  def get_gem(gem_name); end

  # source://advisory_db_toolkit//lib/ecosystems/ruby_gems.rb#29
  def get_package_url(package_name); end
end

# https://guides.rubygems.org/rubygems-org-api/
#
# source://advisory_db_toolkit//lib/ecosystems/ruby_gems.rb#7
AdvisoryDBToolkit::Ecosystems::RubyGems::API_ENDPOINT = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/fqn_search_keys_adapter.rb#2
class AdvisoryDBToolkit::FQNSearchKeysAdapter
  # @raise [StandardError]
  # @return [FQNSearchKeysAdapter] a new instance of FQNSearchKeysAdapter
  #
  # source://advisory_db_toolkit//lib/fqn_search_keys_adapter.rb#5
  def initialize(log_verbose: T.unsafe(nil), log_errors_only: T.unsafe(nil), client: T.unsafe(nil), **aleph_options); end

  # Returns the value of attribute log_errors_only.
  #
  # source://advisory_db_toolkit//lib/fqn_search_keys_adapter.rb#3
  def log_errors_only; end

  # Returns the value of attribute log_verbose.
  #
  # source://advisory_db_toolkit//lib/fqn_search_keys_adapter.rb#3
  def log_verbose; end

  # source://advisory_db_toolkit//lib/fqn_search_keys_adapter.rb#12
  def replicate_v1_to_v0(ghsa_id, advisory_payload); end

  # source://advisory_db_toolkit//lib/fqn_search_keys_adapter.rb#37
  def to_fqn_v1(ghsa_id, advisory_payload); end

  private

  # source://advisory_db_toolkit//lib/fqn_search_keys_adapter.rb#192
  def for_javascript(client, vulnerability_payload, fix_commit_urls); end

  # source://advisory_db_toolkit//lib/fqn_search_keys_adapter.rb#115
  def for_python(client, ghsa_id, affected_functions_v1, fix_commit_urls); end

  # source://advisory_db_toolkit//lib/fqn_search_keys_adapter.rb#67
  def get_nwo_and_sha(commit_url); end

  # source://advisory_db_toolkit//lib/fqn_search_keys_adapter.rb#80
  def replicate_v1_to_v0_for_python(ghsa_id, affected_functions_v1); end

  # source://advisory_db_toolkit//lib/fqn_search_keys_adapter.rb#197
  def wait_for_repo_to_index(client, nwo, commit_oid); end
end

# source://advisory_db_toolkit//lib/ghsa_id_validator.rb#4
module AdvisoryDBToolkit::GHSAIDValidator
  class << self
    # @return [Boolean]
    #
    # source://advisory_db_toolkit//lib/ghsa_id_validator.rb#7
    def valid?(value); end
  end
end

# source://advisory_db_toolkit//lib/ghsa_id_validator.rb#5
AdvisoryDBToolkit::GHSAIDValidator::PATTERN = T.let(T.unsafe(nil), Regexp)

# source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#4
module AdvisoryDBToolkit::OSV; end

# source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#5
module AdvisoryDBToolkit::OSV::Interfaces; end

# A plain old ruby object representing an Advisory that will be
# transformed to OSV JOSN or was rehydrated from OSV JSON.
#
# source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#8
class AdvisoryDBToolkit::OSV::Interfaces::Advisory
  # @return [Advisory] a new instance of Advisory
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#21
  def initialize; end

  # Relationships
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#16
  def credits; end

  # Relationships
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#16
  def credits=(_arg0); end

  # General info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#10
  def cve_id; end

  # General info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#10
  def cve_id=(_arg0); end

  # Metadata
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#13
  def cvss_v3; end

  # Metadata
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#13
  def cvss_v3=(_arg0); end

  # Metadata
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#13
  def cvss_v4; end

  # Metadata
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#13
  def cvss_v4=(_arg0); end

  # Relationships
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#16
  def cwe_ids; end

  # Relationships
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#16
  def cwe_ids=(_arg0); end

  # General info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#10
  def description; end

  # General info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#10
  def description=(_arg0); end

  # General info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#10
  def ghsa_id; end

  # General info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#10
  def ghsa_id=(_arg0); end

  # Metadata
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#13
  def identifier; end

  # Metadata
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#13
  def identifier=(_arg0); end

  # Date fields
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#19
  def nvd_published_at; end

  # Date fields
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#19
  def nvd_published_at=(_arg0); end

  # Date fields
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#19
  def published_at; end

  # Date fields
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#19
  def published_at=(_arg0); end

  # Relationships
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#16
  def references; end

  # Relationships
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#16
  def references=(_arg0); end

  # Metadata
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#13
  def reviewed; end

  # Metadata
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#13
  def reviewed=(_arg0); end

  # Date fields
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#19
  def reviewed_at; end

  # Date fields
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#19
  def reviewed_at=(_arg0); end

  # General info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#10
  def severity; end

  # General info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#10
  def severity=(_arg0); end

  # Metadata
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#13
  def source_code_location; end

  # Metadata
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#13
  def source_code_location=(_arg0); end

  # General info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#10
  def summary; end

  # General info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#10
  def summary=(_arg0); end

  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#36
  def to_h; end

  # Date fields
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#19
  def updated_at; end

  # Date fields
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#19
  def updated_at=(_arg0); end

  # Relationships
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#16
  def vulnerabilities; end

  # Relationships
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#16
  def vulnerabilities=(_arg0); end

  # Date fields
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#19
  def withdrawn_at; end

  # Date fields
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/advisory.rb#19
  def withdrawn_at=(_arg0); end
end

# A plain old ruby object representing a vulnerability. Vulnerabilities
# describe vulnerable versions including ecosystem, package, version
# ranges, etc. A Vulnerability is typically assigned to an Advisory.
#
# source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#9
class AdvisoryDBToolkit::OSV::Interfaces::Vulnerability
  # @return [Vulnerability] a new instance of Vulnerability
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#19
  def initialize; end

  # Metadata
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#17
  def affected_functions; end

  # Metadata
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#17
  def affected_functions=(_arg0); end

  # Version range info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#14
  def first_patched_version; end

  # Version range info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#14
  def first_patched_version=(_arg0); end

  # Package info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#11
  def package_ecosystem; end

  # Package info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#11
  def package_ecosystem=(_arg0); end

  # Package info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#11
  def package_name; end

  # Package info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#11
  def package_name=(_arg0); end

  # source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#24
  def to_h; end

  # Version range info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#14
  def vulnerable_version_range; end

  # Version range info
  #
  # source://advisory_db_toolkit//lib/osv/interfaces/vulnerability.rb#14
  def vulnerable_version_range=(_arg0); end
end

# source://advisory_db_toolkit//lib/osv/transform.rb#5
module AdvisoryDBToolkit::OSV::Transform
  extend ::AdvisoryDBToolkit::OSV::Transform

  # Transform a hash of OSV data to an Advisory interface object
  #
  # TODO: Can we remove `affected_function_extractor` since it isn't
  # actively used anywhere right now? Is it more appropriate for the
  # interface to impliment?
  #
  # source://advisory_db_toolkit//lib/osv/transform.rb#25
  def from_osv(osv_data, affected_function_extractor: T.unsafe(nil)); end

  # Transform an Advisory interface object to a hash of OSV data
  #
  # source://advisory_db_toolkit//lib/osv/transform.rb#15
  def to_osv(advisory); end

  # The schema_version field is used to indicate which version of the OSV
  # schema a particular vulnerability was exported with. This can help
  # consumer applications decide how to import the data for their own systems
  # and offer some protection against future breaking changes. The value
  # should be a string matching the OSV Schema version, which follows the
  # SemVer 2.0.0 format, with no leading "v" prefix. If no value is
  # specified, it should be assumed to be 1.0.0, matching version 1.0 of the
  # OSV Schema. Clients can assume that new minor and patch versions of the
  # schema only add new fields, without changing the meaning of old fields,
  # so that a client that knows how to read version 1.2.0 can process data
  # identifying as schema version 1.3.0 by ignoring any unexpected fields.
  #
  # source://advisory_db_toolkit//lib/osv/transform.rb#42
  def transformer_for(schema_version); end
end

# source://advisory_db_toolkit//lib/osv/transform.rb#8
AdvisoryDBToolkit::OSV::Transform::CURRENT_SCHEMA_VERSION = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/osv/transform.rb#9
AdvisoryDBToolkit::OSV::Transform::DEFAULT_SCHEMA_VERSION = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/osv/transform.rb#11
class AdvisoryDBToolkit::OSV::Transform::Error < ::StandardError; end

# source://advisory_db_toolkit//lib/osv/transform.rb#12
class AdvisoryDBToolkit::OSV::Transform::UnknownSchemaVersionError < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#5
module AdvisoryDBToolkit::OSV::Transformers; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#6
module AdvisoryDBToolkit::OSV::Transformers::SchemaV1
  extend ::AdvisoryDBToolkit::OSV::Transformers::SchemaV1

  # Convert a parsed OSV JSON vulnerability to an Advisory interface
  # object. `osv_data` is expected to be a Ruby Hash, not raw JSON.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#57
  def from_osv(osv_data, affected_function_extractor: T.unsafe(nil)); end

  # Convert an Advisory interface object to a hash suitable for
  # serializing as OSV JSON
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#27
  def to_osv(advisory); end

  # Data is expected to be a Ruby Hash, not raw JSON
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#90
  def validate_schema!(osv_data); end

  private

  # Extract advisory CWE IDs from OSV database specific hash
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#325
  def extract_cwe_ids(database_specific); end

  # Separate out advisory cve_id from aliases
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#306
  def extract_osv_aliases(aliases, advisory: T.unsafe(nil)); end

  # Separate OSV references into advisory references and source code location
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#275
  def extract_osv_references(references, advisory: T.unsafe(nil)); end

  # Extract advisory CVSS scores from OSV severities
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#259
  def extract_osv_severities(severities, advisory: T.unsafe(nil)); end

  # Extract advisory severity from OSV database specific hash
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#332
  def extract_severity(database_specific); end

  # Convert advisory timestamps to OSV datetime strings
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#107
  def format_ghsa_datetime(datetime); end

  # Converts advisory references to OSV references.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#132
  def format_ghsa_references(references, source_code_location); end

  # Converts advisory CVSS score to OSV severity
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#112
  def format_ghsa_severity_scores(cvss_v3_score, cvss_v4_score); end

  # Map vulnerability interface objects to OSV affected package syntax
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#155
  def format_ghsa_vulnerabilities(vulnerabilities); end

  # Map OSV affected package syntax to vulnerability interface objects
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#213
  def format_osv_affected(affected_products, affected_function_extractor = T.unsafe(nil)); end

  # OSV -> Advisory helper methods
  #
  # @return [Boolean]
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#208
  def is_ghsa_id?(maybe_ghsa_id); end
end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#7
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::AffectedPackageVersions
  # @return [AffectedPackageVersions] a new instance of AffectedPackageVersions
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#21
  def initialize; end

  # Returns the value of attribute affects_all_prior.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#12
  def affects_all_prior; end

  # Returns the value of attribute events.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#12
  def events; end

  # Returns the value of attribute extra.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#12
  def extra; end

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#46
  def finalize; end

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#28
  def process_vulnerability(parsed_range, first_patched); end

  # Returns the value of attribute versions.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#12
  def versions; end

  private

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#52
  def parse_exact_range(exact_range, first_patched); end

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#60
  def parse_lower_range(lower_range); end

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#72
  def parse_upper_range(upper_range, first_patched); end

  class << self
    # @yield [versions]
    #
    # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#14
    def process; end
  end
end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#8
AdvisoryDBToolkit::OSV::Transformers::SchemaV1::AffectedPackageVersions::LAST_KNOWN_AFFECTED_KEY = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/affected_package_versions.rb#10
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::AffectedPackageVersions::RangeOperatorError < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# https://ossf.github.io/osv-schema/
#
# source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#23
AdvisoryDBToolkit::OSV::Transformers::SchemaV1::CURRENT_SCHEMA_VERSION = T.let(T.unsafe(nil), String)

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/ecosystem.rb#7
module AdvisoryDBToolkit::OSV::Transformers::SchemaV1::FromOSVRangeParsers; end

# The ecosystem OSVRangeParser is currently doing double duty:
# Ecosystem type is much harder to understand without having
# ecosystem-specific awareness, so much of the validation in this class
# is dedicated to protecting against things we can't reliably parse.
# ADDITIONALLY, this class has support for GHSA ingest specific needs,
# specifically the use of a "last_known_affected_hint".
#
# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/ecosystem.rb#14
module AdvisoryDBToolkit::OSV::Transformers::SchemaV1::FromOSVRangeParsers::Ecosystem
  class << self
    # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/ecosystem.rb#53
    def ecosystem_vvr(grouped_events, last_known_affected_hint); end

    # Parses an OSV range into a well formed range that we can format.
    # Example of an ecosystem range:
    # {
    #   "events"=>[{"introduced"=>"0"}, {"fixed"=>"1.2.4"}]}
    # }
    # Note that: Type is OPTIONAL due to precedent, and only one vulnerability
    # range segment can be supported.
    #
    # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/ecosystem.rb#22
    def parse(range, last_known_affected_hint); end

    # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/ecosystem.rb#36
    def validate_single_lower_upper_terms(grouped_events); end
  end
end

# Special case of a range parser that just parses a single version.
# Example of a single_version: "1.2.3"
# The way we keep track of the fixed version is using hidden segments, so this
# accepts the range and last_known_affected in order to
# generate the osv parsed segments.
# This parser just ignores everything but the hidden fixed element.
#
# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/exact_version.rb#14
module AdvisoryDBToolkit::OSV::Transformers::SchemaV1::FromOSVRangeParsers::ExactVersion
  class << self
    # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/exact_version.rb#15
    def parse(single_version, range, last_known_affected); end
  end
end

# Result class for the OSV parsers.
#
# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parsed_term.rb#9
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::FromOSVRangeParsers::ParsedTerm
  # @return [ParsedTerm] a new instance of ParsedTerm
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parsed_term.rb#13
  def initialize(type:, version:, comparator:, hidden: T.unsafe(nil), custom_version_object: T.unsafe(nil)); end

  # Returns the value of attribute comparator.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parsed_term.rb#10
  def comparator; end

  # Returns the value of attribute custom_version_object.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parsed_term.rb#10
  def custom_version_object; end

  # Returns the value of attribute hidden.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parsed_term.rb#11
  def hidden; end

  # Sets the attribute hidden
  #
  # @param value the value to set the attribute hidden to.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parsed_term.rb#11
  def hidden=(_arg0); end

  # Returns the value of attribute type.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parsed_term.rb#10
  def type; end

  # Returns the value of attribute version.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parsed_term.rb#10
  def version; end
end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parser.rb#13
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::FromOSVRangeParsers::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parser.rb#50
  def initialize(range, last_known_affected_hint); end

  # @return [Boolean]
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parser.rb#77
  def is_ecosystem_range?; end

  # @return [Boolean]
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parser.rb#73
  def is_semver_range?; end

  # @raise [OSVRangeParsingError]
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parser.rb#57
  def parse!; end

  # Returns the value of attribute parsed_segments.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parser.rb#16
  def parsed_segments; end

  # Returns the value of attribute type.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parser.rb#16
  def type; end

  # @return [Boolean]
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parser.rb#69
  def valid_type?; end

  class << self
    # Finds the first matching term inside a set of parsed segments
    #
    # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parser.rb#38
    def first_term(parsed_segments); end

    # Parses an OSV range into a well formed range that we can format.
    # Currently supports Semver and Ecosystem types. Makes the decision to parse as either.
    # Parses ranges as an array of segments available on parsed_segments:
    #   [Segment1, Segment2, Segment3]
    # Segments are arrays of terms:
    #   [Term1, Term2]
    # Terms are a local hash format for each "piece" of a segment:
    # {
    #   type: :fixed | :introduced | :last_affected
    #   version: string,
    #   comparator: nil | "<" | "<=" | ">" | ">=" | "=",
    #   hidden: true | false,
    # }
    #
    # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parser.rb#31
    def parse(range, last_known_affected_hint); end
  end
end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/parser.rb#14
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::FromOSVRangeParsers::Parser::OSVRangeParsingError < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# Parses an OSV range into a well formed range that we can format.
#
# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/semver.rb#9
module AdvisoryDBToolkit::OSV::Transformers::SchemaV1::FromOSVRangeParsers::Semver
  class << self
    # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/semver.rb#57
    def create_semantic_version_range_event(event); end

    # Example of a semver range:
    # {
    #   "type" => "SEMVER",
    #   "events" => [
    #     { "introduced" => "0" }, { "fixed" => "1.11.13" },
    #     { "introduced" => "1.12.0" }, { "fixed" => "1.12.8" }
    #   ],
    # }
    #
    # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/semver.rb#20
    def parse(range, _last_known_affected_hint); end
  end
end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/from_osv_range_parsers/semver.rb#10
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::FromOSVRangeParsers::Semver::SemverVersionRangeInvalidEventType < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/parsed_range.rb#7
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::ParsedRange
  # @return [ParsedRange] a new instance of ParsedRange
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/parsed_range.rb#20
  def initialize(range); end

  # Returns the value of attribute exact.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/parsed_range.rb#12
  def exact; end

  # Returns the value of attribute lower.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/parsed_range.rb#12
  def lower; end

  # Parses a GHSA version range.
  # Current known ranges include "<", ">=", "<=", "=", and ">"
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/parsed_range.rb#26
  def parse!; end

  # Returns the value of attribute upper.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/parsed_range.rb#12
  def upper; end

  private

  # A parsed range cannot have both an exact version and an upper or
  # lower bound version
  #
  # @return [Boolean]
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/parsed_range.rb#60
  def valid?; end

  class << self
    # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/parsed_range.rb#14
    def parse(range); end
  end
end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/parsed_range.rb#10
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::ParsedRange::RangeParsingError < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/parsed_range.rb#8
AdvisoryDBToolkit::OSV::Transformers::SchemaV1::ParsedRange::VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#15
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::SchemaValidationError < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#16
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::UnsupportedOSVAlias < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#17
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::UnsupportedOSVEcosystem < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#20
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::UnsupportedOSVNoVulnerableVersionRanges < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#18
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::UnsupportedOSVReferenceType < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1.rb#19
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::UnsupportedOSVSeverityType < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/version_spec.rb#7
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::VersionSpec
  # @return [VersionSpec] a new instance of VersionSpec
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/version_spec.rb#10
  def initialize(operator:, version:); end

  # Returns the value of attribute operator.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/version_spec.rb#8
  def operator; end

  # Sets the attribute operator
  #
  # @param value the value to set the attribute operator to.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/version_spec.rb#8
  def operator=(_arg0); end

  # Returns the value of attribute version.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/version_spec.rb#8
  def version; end

  # Sets the attribute version
  #
  # @param value the value to set the attribute version to.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/version_spec.rb#8
  def version=(_arg0); end
end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#10
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::VulnerableVersionRanges
  # @return [VulnerableVersionRanges] a new instance of VulnerableVersionRanges
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#21
  def initialize(affected); end

  # Returns the value of attribute first_patched_version.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#19
  def first_patched_version; end

  # Sets the attribute first_patched_version
  #
  # @param value the value to set the attribute first_patched_version to.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#19
  def first_patched_version=(_arg0); end

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#29
  def process_affected; end

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#56
  def validate!; end

  # Returns the value of attribute vulnerable_version_ranges.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#19
  def vulnerable_version_ranges; end

  # Sets the attribute vulnerable_version_ranges
  #
  # @param value the value to set the attribute vulnerable_version_ranges to.
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#19
  def vulnerable_version_ranges=(_arg0); end

  private

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#88
  def grouped_events; end

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#64
  def last_known_affected; end

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#96
  def parsed_ranges; end

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#79
  def range_events; end

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#71
  def ranges; end

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#106
  def validate_events!; end

  # @raise [TooManyOSVAffectedRanges]
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#144
  def validate_ranges!; end

  # @raise [TooManyOSVAffectedVersions]
  #
  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#133
  def validate_versions!; end

  # source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#75
  def versions; end
end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#17
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::VulnerableVersionRanges::ExclusiveOSVAffectedRangeEventType < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#11
AdvisoryDBToolkit::OSV::Transformers::SchemaV1::VulnerableVersionRanges::SUPPORTED_EVENT_TYPES = T.let(T.unsafe(nil), Array)

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#14
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::VulnerableVersionRanges::TooManyOSVAffectedRangeEvents < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#13
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::VulnerableVersionRanges::TooManyOSVAffectedRanges < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#15
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::VulnerableVersionRanges::TooManyOSVAffectedVersions < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/osv/transformers/schema_v1/vulnerable_version_ranges.rb#16
class AdvisoryDBToolkit::OSV::Transformers::SchemaV1::VulnerableVersionRanges::UnsupportedOSVAffectedRangeEventType < ::AdvisoryDBToolkit::OSV::Transform::Error; end

# source://advisory_db_toolkit//lib/package_url_obtainer.rb#2
class AdvisoryDBToolkit::PackageUrlObtainer
  class << self
    # source://advisory_db_toolkit//lib/package_url_obtainer.rb#23
    def get_url(ecosystem, package_name, http_client); end

    # source://advisory_db_toolkit//lib/package_url_obtainer.rb#33
    def http_client; end

    # source://advisory_db_toolkit//lib/package_url_obtainer.rb#28
    def http_client=(http_client); end

    # @return [Boolean]
    #
    # source://advisory_db_toolkit//lib/package_url_obtainer.rb#19
    def supported_ecosystem?(ecosystem); end
  end
end

# source://advisory_db_toolkit//lib/package_url_obtainer.rb#4
AdvisoryDBToolkit::PackageUrlObtainer::SUPPORTED_ECOSYSTEMS = T.let(T.unsafe(nil), Hash)

# helper module for sorting a list of references
#
# source://advisory_db_toolkit//lib/reference_sorter.rb#6
module AdvisoryDBToolkit::ReferenceSorter
  class << self
    # source://advisory_db_toolkit//lib/reference_sorter.rb#28
    def normalize_url(url); end

    # return the index of the preferred url, or nil if it is not a preferred url
    #
    # source://advisory_db_toolkit//lib/reference_sorter.rb#38
    def preferred_url_index(url); end

    # return a unique list of URLs, sorted to our particular scheme
    #
    # source://advisory_db_toolkit//lib/reference_sorter.rb#43
    def sorted_reference_list(url_list); end

    # this method returns a list of references intended for submission the MITRE in a CVE
    # the only difference from above method is it excludes the NVD and MITRE links,
    # which would be circular in the case of a MITRE submission
    #
    # source://advisory_db_toolkit//lib/reference_sorter.rb#60
    def sorted_reference_list_for_cve(url_list); end
  end
end

# source://advisory_db_toolkit//lib/reference_sorter.rb#9
AdvisoryDBToolkit::ReferenceSorter::MITRE_CVE_PATTERN = T.let(T.unsafe(nil), Regexp)

# these match urls to the official CVE pages for NVD and MITRE respectively
#
# source://advisory_db_toolkit//lib/reference_sorter.rb#8
AdvisoryDBToolkit::ReferenceSorter::NVD_CVE_PATTERN = T.let(T.unsafe(nil), Regexp)

# We want the best external reference on top, everytime,
# Only the top URL in advisory reference list is actually publicly published (the external_reference)
# The URLs we want on top follow a hierarchy of preference:
# - If there is a GitHub security advisory, we prefer this the most
# - otherwise, if there is a CVE, the nvd page is best
# - otherwise, use a github issue, PR, or commit, in that order.  This happens in whitesource advisories generally
# - otherwise use a hacker one report
# - all other URLs are below these "preferred urls", and sorted alphabetically, and should generally not suitable as the top reference
#
# source://advisory_db_toolkit//lib/reference_sorter.rb#19
AdvisoryDBToolkit::ReferenceSorter::PREFERRED_URL_PATTERNS = T.let(T.unsafe(nil), Array)

# Why do we have a module that does what Rails does? Why aren't we just using .present? and .blank? ???
# BECAUSE this gem avoids a dependency on ActiveSupport, and the designers of Rails haven't been pushing
# their utility functions back up into Ruby. So, sans ActiveSupport we are left with some uglier code
# or some replicated utility methods.
#
# source://advisory_db_toolkit//lib/utility.rb#8
module AdvisoryDBToolkit::Utility
  class << self
    # @return [Boolean]
    #
    # source://advisory_db_toolkit//lib/utility.rb#13
    def blank?(s); end

    # source://advisory_db_toolkit//lib/utility.rb#17
    def compact_blank(a); end

    # source://advisory_db_toolkit//lib/utility.rb#21
    def group_by(enumerable); end

    # @return [Boolean]
    #
    # source://advisory_db_toolkit//lib/utility.rb#9
    def present?(s); end
  end
end

# This module is meant to centralize how we deal with different versions of the affected functions JSON blob.
# As of the time of this writing, we anticipate needing to load two different "shapes", affected functions as
# an array of friendly names and the more structured object with an object hash.
# This currently supports both JSON and raw objects.
#
# source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#8
module AdvisoryDBToolkit::VulnerableFunctionAdapter
  class << self
    # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#31
    def ensure_latest_format(affected_functions); end

    # Parse currently accepts the old version string, new version string, and literal arrays.
    # Parse largely will just try to duck type what is passed to see if it understands it, if it does, it returns a FunctionList.
    #
    # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#11
    def parse(affected_functions); end
  end
end

# source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#60
class AdvisoryDBToolkit::VulnerableFunctionAdapter::FunctionList
  # Not meant to be called publicly
  # FQN is fully qualified name, an aleph concept
  # version is the version of the overall functions format:
  # v0: An array of fqnV0 strings
  # v1: An array of hashes, { fqn: string, search_keys: [string] }
  #
  # @return [FunctionList] a new instance of FunctionList
  #
  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#66
  def initialize(version, original_content, functions); end

  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#120
  def ==(other); end

  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#139
  def ===(other); end

  # @return [Boolean]
  #
  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#131
  def eql?(other); end

  # @return [Boolean]
  #
  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#135
  def equal?(other); end

  # Returns the value of attribute functions.
  #
  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#143
  def functions; end

  # Get things in the V0 array format, which is:
  # ["fqn", "fqn1"]
  # Make sure that empty v1 format entries are dropped, in v0 expectation.
  #
  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#93
  def v0_a; end

  # Get things in the V0 string format, which is:
  # "[\"fqn\", \"fqn\"]"
  #
  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#86
  def v0_s; end

  # Get things in the V1 format, which is:
  # fqn is the fully qualified name of the path
  # fqn_version is the version of the fqn string:
  #  0: The display name implementation that was originally in use.
  #  1: A yet to be implemented string representation that will be converted to eventually.
  # [{fqn: string, fqn_version: int, searchKeys: [string]},
  #  {fqn: string, fqn_version: int, searchKeys: [string]}]
  #
  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#116
  def v1; end

  # Get things in the V1 array format (used for transport outside of ADB), which is:
  # "[{\"fqn\": \"string\", \"fqn_version\": int, \"search_keys\": [\"string\"]}]"
  #
  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#99
  def v1_a; end

  # Get things in the V1 hash format (used for storage in advisory payload), which is:
  # "{0 => {\"fqn\": \"string\", \"fqn_version\": int, \"search_keys\": [\"string\"]}}"
  #
  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#105
  def v1_adb_hash; end

  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#80
  def version; end

  class << self
    # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#72
    def from_v0(fqn_array); end

    # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#76
    def from_v1(complex_array); end
  end
end

# fqn - string. fully qualified name, aleph concept
# fqn_version - FQNs have an "old" style that we originally got, 0, and a new style that is preferred, 1
# search_keys - Array of string search keys, provided by aleph and used for identification purposes
#
# source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#39
class AdvisoryDBToolkit::VulnerableFunctionAdapter::FunctionSegment < ::Struct
  # Returns the value of attribute fqn
  #
  # @return [Object] the current value of fqn
  def fqn; end

  # Sets the attribute fqn
  #
  # @param value [Object] the value to set the attribute fqn to.
  # @return [Object] the newly set value
  def fqn=(_); end

  # Returns the value of attribute fqn_version
  #
  # @return [Object] the current value of fqn_version
  def fqn_version; end

  # Sets the attribute fqn_version
  #
  # @param value [Object] the value to set the attribute fqn_version to.
  # @return [Object] the newly set value
  def fqn_version=(_); end

  # Returns the value of attribute search_keys
  #
  # @return [Object] the current value of search_keys
  def search_keys; end

  # Sets the attribute search_keys
  #
  # @param value [Object] the value to set the attribute search_keys to.
  # @return [Object] the newly set value
  def search_keys=(_); end

  # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#40
  def to_json(options = T.unsafe(nil)); end

  class << self
    def [](*_arg0); end

    # Produce a function segment from an unknown object source. Should be either a FS, a json hash or a ruby symbol hash.
    #
    # source://advisory_db_toolkit//lib/vulnerable_function_adapter.rb#45
    def from_unknown(f); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

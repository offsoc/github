# frozen_string_literal: true

module GitHub
  module Telemetry
    module Rack
      # Rack middleware that extracts GitHub specific HTTP headers used to correlate requests.
      #
      # X-GitHub-Request-Id: Generated by [GLB](https://github.com/github/glb/blob/63d86e8f1d00c75b1b8bcd7c8daa99fd6d257638/docs/prr.md#does-your-service-receive-http-requests-if-so-does-it-log-and-add-the-x-github-request-id-http-header-to-needles-if-you-application-performs-http-requests-does-it-also-relay-the-x-github-request-id-http-header-in-those-requests-docs) if not found.
      # If the request bypasses GLB this middleware will generate a new `SecureRandom.uuid` as the request header.
      #
      # Inspired by https://github.com/github/github/blob/master/lib/rack/request_id.rb
      class RequestId
        def initialize(app, request_id_provider: RequestIdProvider.new)
          @app = app
          @request_id_provider = request_id_provider
        end

        def call(env)
          @request_id_provider.using_request_id_from_baggage_or(env: env) do
            # We're defensive here - there should always be a request ID in the baggage
            # once we have entered this block, but there's little harm in ensuring that
            # our request-id middleware doesn't mess up somehow. Notably we're not reaching
            # for the action_dispatch.request_id; a user may have disabled that functionality.
            # But we always set it in the baggage, so we look there instead.
            if (request_id = @request_id_provider.request_id_from_baggage)
              OpenTelemetry::Trace.current_span.set_attribute("gh.request_id", request_id)
              env["action_dispatch.request_id"] = request_id if defined?(Rails)
            end

            @app.call(env).tap { |_status, headers, _body| headers[HTTP_REQUEST_ID_HEADER] = request_id }
          end
        end
      end
    end
  end
end

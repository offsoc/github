# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Actions::V0::OnboardingSetupWorkflowClick`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Actions::V0::OnboardingSetupWorkflowClick`.

class Hydro::Schemas::Github::Actions::V0::OnboardingSetupWorkflowClick
  sig do
    params(
      category: T.nilable(String),
      correlation_id: T.nilable(String),
      new_with_filter_view: T.nilable(T::Boolean),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      search_query: T.nilable(String),
      template_creator: T.nilable(String),
      templates_count: T.nilable(Integer),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      view_rank: T.nilable(Integer),
      view_section: T.nilable(String),
      workflow_template: T.nilable(String)
    ).void
  end
  def initialize(category: nil, correlation_id: nil, new_with_filter_view: nil, repository: nil, request_context: nil, search_query: nil, template_creator: nil, templates_count: nil, user: nil, view_rank: nil, view_section: nil, workflow_template: nil); end

  sig { returns(String) }
  def category; end

  sig { params(value: String).void }
  def category=(value); end

  sig { void }
  def clear_category; end

  sig { void }
  def clear_correlation_id; end

  sig { void }
  def clear_new_with_filter_view; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_search_query; end

  sig { void }
  def clear_template_creator; end

  sig { void }
  def clear_templates_count; end

  sig { void }
  def clear_user; end

  sig { void }
  def clear_view_rank; end

  sig { void }
  def clear_view_section; end

  sig { void }
  def clear_workflow_template; end

  sig { returns(String) }
  def correlation_id; end

  sig { params(value: String).void }
  def correlation_id=(value); end

  sig { returns(T::Boolean) }
  def new_with_filter_view; end

  sig { params(value: T::Boolean).void }
  def new_with_filter_view=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(String) }
  def search_query; end

  sig { params(value: String).void }
  def search_query=(value); end

  sig { returns(String) }
  def template_creator; end

  sig { params(value: String).void }
  def template_creator=(value); end

  sig { returns(Integer) }
  def templates_count; end

  sig { params(value: Integer).void }
  def templates_count=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end

  sig { returns(Integer) }
  def view_rank; end

  sig { params(value: Integer).void }
  def view_rank=(value); end

  sig { returns(String) }
  def view_section; end

  sig { params(value: String).void }
  def view_section=(value); end

  sig { returns(String) }
  def workflow_template; end

  sig { params(value: String).void }
  def workflow_template=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Site::EnterpriseContactRequest`.
# Please instead update this file by running `bin/tapioca dsl Site::EnterpriseContactRequest`.

class Site::EnterpriseContactRequest
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def statuses; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def variants; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Site::EnterpriseContactRequest).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Site::EnterpriseContactRequest).void)
      ).returns(::Site::EnterpriseContactRequest)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Site::EnterpriseContactRequest).void)
      ).returns(::Site::EnterpriseContactRequest)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Site::EnterpriseContactRequest).void)
      ).returns(::Site::EnterpriseContactRequest)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Site::EnterpriseContactRequest).void)
      ).returns(::Site::EnterpriseContactRequest)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Site::EnterpriseContactRequest).void)
      ).returns(::Site::EnterpriseContactRequest)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Site::EnterpriseContactRequest]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Site::EnterpriseContactRequest)) }
    def fifth; end

    sig { returns(::Site::EnterpriseContactRequest) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Site::EnterpriseContactRequest)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Site::EnterpriseContactRequest) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Site::EnterpriseContactRequest).void)
      ).returns(T.nilable(T::Enumerator[::Site::EnterpriseContactRequest]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Site::EnterpriseContactRequest]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Site::EnterpriseContactRequest]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Site::EnterpriseContactRequest).void)
      ).returns(::Site::EnterpriseContactRequest)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Site::EnterpriseContactRequest).void)
      ).returns(::Site::EnterpriseContactRequest)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Site::EnterpriseContactRequest).void)
      ).returns(::Site::EnterpriseContactRequest)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Site::EnterpriseContactRequest)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Site::EnterpriseContactRequest) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Site::EnterpriseContactRequest) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Site::EnterpriseContactRequest) }
    def first!; end

    sig { returns(T.nilable(::Site::EnterpriseContactRequest)) }
    def forty_two; end

    sig { returns(::Site::EnterpriseContactRequest) }
    def forty_two!; end

    sig { returns(T.nilable(::Site::EnterpriseContactRequest)) }
    def fourth; end

    sig { returns(::Site::EnterpriseContactRequest) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Site::EnterpriseContactRequest) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Site::EnterpriseContactRequest).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Site::EnterpriseContactRequest).void)
      ).returns(::Site::EnterpriseContactRequest)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Site::EnterpriseContactRequest).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Site::EnterpriseContactRequest).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Site::EnterpriseContactRequest)) }
    def second; end

    sig { returns(::Site::EnterpriseContactRequest) }
    def second!; end

    sig { returns(T.nilable(::Site::EnterpriseContactRequest)) }
    def second_to_last; end

    sig { returns(::Site::EnterpriseContactRequest) }
    def second_to_last!; end

    sig { returns(::Site::EnterpriseContactRequest) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Site::EnterpriseContactRequest) }
    def take!; end

    sig { returns(T.nilable(::Site::EnterpriseContactRequest)) }
    def third; end

    sig { returns(::Site::EnterpriseContactRequest) }
    def third!; end

    sig { returns(T.nilable(::Site::EnterpriseContactRequest)) }
    def third_to_last; end

    sig { returns(::Site::EnterpriseContactRequest) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def control!; end

    sig { returns(T::Boolean) }
    def control?; end

    sig { void }
    def submission_pending!; end

    sig { returns(T::Boolean) }
    def submission_pending?; end

    sig { void }
    def submitted!; end

    sig { returns(T::Boolean) }
    def submitted?; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def control(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_control(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_submission_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def submission_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def company; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def company=(value); end

    sig { returns(T::Boolean) }
    def company?; end

    sig { returns(T.nilable(::String)) }
    def company_before_last_save; end

    sig { returns(T.untyped) }
    def company_before_type_cast; end

    sig { returns(T::Boolean) }
    def company_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def company_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def company_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def company_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def company_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def company_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def company_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def company_previously_was; end

    sig { returns(T.nilable(::String)) }
    def company_was; end

    sig { void }
    def company_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country=(value); end

    sig { returns(T::Boolean) }
    def country?; end

    sig { returns(T.nilable(::String)) }
    def country_before_last_save; end

    sig { returns(T.untyped) }
    def country_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_was; end

    sig { void }
    def country_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(T.nilable(::String)) }
    def first_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def first_name=(value); end

    sig { returns(T::Boolean) }
    def first_name?; end

    sig { returns(T.nilable(::String)) }
    def first_name_before_last_save; end

    sig { returns(T.untyped) }
    def first_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def first_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def first_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def first_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def first_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def first_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def first_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def first_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def first_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def first_name_was; end

    sig { void }
    def first_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def full_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def full_name=(value); end

    sig { returns(T::Boolean) }
    def full_name?; end

    sig { returns(T.nilable(::String)) }
    def full_name_before_last_save; end

    sig { returns(T.untyped) }
    def full_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def full_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def full_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def full_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def full_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def full_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def full_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def full_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def full_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def full_name_was; end

    sig { void }
    def full_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def job_title; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def job_title=(value); end

    sig { returns(T::Boolean) }
    def job_title?; end

    sig { returns(T.nilable(::String)) }
    def job_title_before_last_save; end

    sig { returns(T.untyped) }
    def job_title_before_type_cast; end

    sig { returns(T::Boolean) }
    def job_title_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_title_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_title_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def job_title_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def job_title_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def job_title_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def job_title_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def job_title_previously_was; end

    sig { returns(T.nilable(::String)) }
    def job_title_was; end

    sig { void }
    def job_title_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_name=(value); end

    sig { returns(T::Boolean) }
    def last_name?; end

    sig { returns(T.nilable(::String)) }
    def last_name_before_last_save; end

    sig { returns(T.untyped) }
    def last_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_name_was; end

    sig { void }
    def last_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def locale; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def locale=(value); end

    sig { returns(T::Boolean) }
    def locale?; end

    sig { returns(T.nilable(::String)) }
    def locale_before_last_save; end

    sig { returns(T.untyped) }
    def locale_before_type_cast; end

    sig { returns(T::Boolean) }
    def locale_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def locale_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def locale_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def locale_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def locale_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def locale_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def locale_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def locale_previously_was; end

    sig { returns(T.nilable(::String)) }
    def locale_was; end

    sig { void }
    def locale_will_change!; end

    sig { returns(T::Boolean) }
    def marketing_email_opt_in; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def marketing_email_opt_in=(value); end

    sig { returns(T::Boolean) }
    def marketing_email_opt_in?; end

    sig { returns(T.nilable(T::Boolean)) }
    def marketing_email_opt_in_before_last_save; end

    sig { returns(T.untyped) }
    def marketing_email_opt_in_before_type_cast; end

    sig { returns(T::Boolean) }
    def marketing_email_opt_in_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def marketing_email_opt_in_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def marketing_email_opt_in_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def marketing_email_opt_in_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def marketing_email_opt_in_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def marketing_email_opt_in_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def marketing_email_opt_in_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def marketing_email_opt_in_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def marketing_email_opt_in_was; end

    sig { void }
    def marketing_email_opt_in_will_change!; end

    sig { returns(T.nilable(::String)) }
    def phone; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def phone=(value); end

    sig { returns(T::Boolean) }
    def phone?; end

    sig { returns(T.nilable(::String)) }
    def phone_before_last_save; end

    sig { returns(T.untyped) }
    def phone_before_type_cast; end

    sig { returns(T::Boolean) }
    def phone_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def phone_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def phone_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def phone_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def phone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def phone_was; end

    sig { void }
    def phone_will_change!; end

    sig { returns(T.nilable(::String)) }
    def ref_cta; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def ref_cta=(value); end

    sig { returns(T::Boolean) }
    def ref_cta?; end

    sig { returns(T.nilable(::String)) }
    def ref_cta_before_last_save; end

    sig { returns(T.untyped) }
    def ref_cta_before_type_cast; end

    sig { returns(T::Boolean) }
    def ref_cta_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ref_cta_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ref_cta_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def ref_cta_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ref_cta_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ref_cta_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def ref_cta_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ref_cta_previously_was; end

    sig { returns(T.nilable(::String)) }
    def ref_cta_was; end

    sig { void }
    def ref_cta_will_change!; end

    sig { returns(T.nilable(::String)) }
    def ref_loc; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def ref_loc=(value); end

    sig { returns(T::Boolean) }
    def ref_loc?; end

    sig { returns(T.nilable(::String)) }
    def ref_loc_before_last_save; end

    sig { returns(T.untyped) }
    def ref_loc_before_type_cast; end

    sig { returns(T::Boolean) }
    def ref_loc_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ref_loc_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ref_loc_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def ref_loc_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ref_loc_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ref_loc_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def ref_loc_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ref_loc_previously_was; end

    sig { returns(T.nilable(::String)) }
    def ref_loc_was; end

    sig { void }
    def ref_loc_will_change!; end

    sig { returns(T.untyped) }
    def ref_page; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def ref_page=(value); end

    sig { returns(T::Boolean) }
    def ref_page?; end

    sig { returns(T.untyped) }
    def ref_page_before_last_save; end

    sig { returns(T.untyped) }
    def ref_page_before_type_cast; end

    sig { returns(T::Boolean) }
    def ref_page_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def ref_page_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def ref_page_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def ref_page_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def ref_page_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def ref_page_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def ref_page_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def ref_page_previously_was; end

    sig { returns(T.untyped) }
    def ref_page_was; end

    sig { void }
    def ref_page_will_change!; end

    sig { returns(T.nilable(::String)) }
    def referrer_details; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def referrer_details=(value); end

    sig { returns(T::Boolean) }
    def referrer_details?; end

    sig { returns(T.nilable(::String)) }
    def referrer_details_before_last_save; end

    sig { returns(T.untyped) }
    def referrer_details_before_type_cast; end

    sig { returns(T::Boolean) }
    def referrer_details_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referrer_details_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referrer_details_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def referrer_details_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def referrer_details_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referrer_details_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def referrer_details_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def referrer_details_previously_was; end

    sig { returns(T.nilable(::String)) }
    def referrer_details_was; end

    sig { void }
    def referrer_details_will_change!; end

    sig { returns(T.nilable(::String)) }
    def region; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def region=(value); end

    sig { returns(T::Boolean) }
    def region?; end

    sig { returns(T.nilable(::String)) }
    def region_before_last_save; end

    sig { returns(T.untyped) }
    def region_before_type_cast; end

    sig { returns(T::Boolean) }
    def region_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region_previously_was; end

    sig { returns(T.nilable(::String)) }
    def region_was; end

    sig { void }
    def region_will_change!; end

    sig { returns(T.nilable(::String)) }
    def remote_ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def remote_ip=(value); end

    sig { returns(T::Boolean) }
    def remote_ip?; end

    sig { returns(T.nilable(::String)) }
    def remote_ip_before_last_save; end

    sig { returns(T.untyped) }
    def remote_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def remote_ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remote_ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remote_ip_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def remote_ip_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def remote_ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remote_ip_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def remote_ip_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def remote_ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def remote_ip_was; end

    sig { void }
    def remote_ip_will_change!; end

    sig { returns(T.nilable(::String)) }
    def request_details; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def request_details=(value); end

    sig { returns(T::Boolean) }
    def request_details?; end

    sig { returns(T.nilable(::String)) }
    def request_details_before_last_save; end

    sig { returns(T.untyped) }
    def request_details_before_type_cast; end

    sig { returns(T::Boolean) }
    def request_details_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def request_details_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def request_details_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def request_details_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def request_details_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def request_details_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def request_details_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def request_details_previously_was; end

    sig { returns(T.nilable(::String)) }
    def request_details_was; end

    sig { void }
    def request_details_will_change!; end

    sig { void }
    def restore_company!; end

    sig { void }
    def restore_country!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_first_name!; end

    sig { void }
    def restore_full_name!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_job_title!; end

    sig { void }
    def restore_last_name!; end

    sig { void }
    def restore_locale!; end

    sig { void }
    def restore_marketing_email_opt_in!; end

    sig { void }
    def restore_phone!; end

    sig { void }
    def restore_ref_cta!; end

    sig { void }
    def restore_ref_loc!; end

    sig { void }
    def restore_ref_page!; end

    sig { void }
    def restore_referrer_details!; end

    sig { void }
    def restore_region!; end

    sig { void }
    def restore_remote_ip!; end

    sig { void }
    def restore_request_details!; end

    sig { void }
    def restore_status!; end

    sig { void }
    def restore_submission_id!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_agent!; end

    sig { void }
    def restore_utm_campaign!; end

    sig { void }
    def restore_utm_content!; end

    sig { void }
    def restore_utm_medium!; end

    sig { void }
    def restore_utm_source!; end

    sig { void }
    def restore_utm_term!; end

    sig { void }
    def restore_variant!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_company; end

    sig { returns(T::Boolean) }
    def saved_change_to_company?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country; end

    sig { returns(T::Boolean) }
    def saved_change_to_country?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_first_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_first_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_full_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_full_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_job_title; end

    sig { returns(T::Boolean) }
    def saved_change_to_job_title?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_locale; end

    sig { returns(T::Boolean) }
    def saved_change_to_locale?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_marketing_email_opt_in; end

    sig { returns(T::Boolean) }
    def saved_change_to_marketing_email_opt_in?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_phone; end

    sig { returns(T::Boolean) }
    def saved_change_to_phone?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_ref_cta; end

    sig { returns(T::Boolean) }
    def saved_change_to_ref_cta?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_ref_loc; end

    sig { returns(T::Boolean) }
    def saved_change_to_ref_loc?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_ref_page; end

    sig { returns(T::Boolean) }
    def saved_change_to_ref_page?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_referrer_details; end

    sig { returns(T::Boolean) }
    def saved_change_to_referrer_details?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_region; end

    sig { returns(T::Boolean) }
    def saved_change_to_region?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_remote_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_remote_ip?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_request_details; end

    sig { returns(T::Boolean) }
    def saved_change_to_request_details?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_status?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_submission_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_submission_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_user_agent; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_agent?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_campaign; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_campaign?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_content; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_content?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_medium; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_medium?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_source; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_source?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_term; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_term?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_variant; end

    sig { returns(T::Boolean) }
    def saved_change_to_variant?; end

    sig { returns(T.nilable(::String)) }
    def status; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def status=(value); end

    sig { returns(T::Boolean) }
    def status?; end

    sig { returns(T.nilable(::String)) }
    def status_before_last_save; end

    sig { returns(T.untyped) }
    def status_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def status_was; end

    sig { void }
    def status_will_change!; end

    sig { returns(::String) }
    def submission_id; end

    sig { params(value: ::String).returns(::String) }
    def submission_id=(value); end

    sig { returns(T::Boolean) }
    def submission_id?; end

    sig { returns(T.nilable(::String)) }
    def submission_id_before_last_save; end

    sig { returns(T.untyped) }
    def submission_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def submission_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def submission_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def submission_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def submission_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def submission_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def submission_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def submission_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def submission_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def submission_id_was; end

    sig { void }
    def submission_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def user_agent; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def user_agent=(value); end

    sig { returns(T::Boolean) }
    def user_agent?; end

    sig { returns(T.nilable(::String)) }
    def user_agent_before_last_save; end

    sig { returns(T.untyped) }
    def user_agent_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_agent_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def user_agent_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def user_agent_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def user_agent_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def user_agent_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def user_agent_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def user_agent_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def user_agent_previously_was; end

    sig { returns(T.nilable(::String)) }
    def user_agent_was; end

    sig { void }
    def user_agent_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_campaign=(value); end

    sig { returns(T::Boolean) }
    def utm_campaign?; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign_before_last_save; end

    sig { returns(T.untyped) }
    def utm_campaign_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_campaign_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_campaign_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_campaign_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def utm_campaign_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def utm_campaign_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_campaign_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def utm_campaign_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def utm_campaign_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign_was; end

    sig { void }
    def utm_campaign_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_content; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_content=(value); end

    sig { returns(T::Boolean) }
    def utm_content?; end

    sig { returns(T.nilable(::String)) }
    def utm_content_before_last_save; end

    sig { returns(T.untyped) }
    def utm_content_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_content_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_content_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_content_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def utm_content_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def utm_content_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_content_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def utm_content_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def utm_content_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_content_was; end

    sig { void }
    def utm_content_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_medium; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_medium=(value); end

    sig { returns(T::Boolean) }
    def utm_medium?; end

    sig { returns(T.nilable(::String)) }
    def utm_medium_before_last_save; end

    sig { returns(T.untyped) }
    def utm_medium_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_medium_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_medium_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_medium_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def utm_medium_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def utm_medium_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_medium_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def utm_medium_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def utm_medium_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_medium_was; end

    sig { void }
    def utm_medium_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_source; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_source=(value); end

    sig { returns(T::Boolean) }
    def utm_source?; end

    sig { returns(T.nilable(::String)) }
    def utm_source_before_last_save; end

    sig { returns(T.untyped) }
    def utm_source_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_source_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_source_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_source_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def utm_source_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def utm_source_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_source_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def utm_source_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def utm_source_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_source_was; end

    sig { void }
    def utm_source_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_term; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_term=(value); end

    sig { returns(T::Boolean) }
    def utm_term?; end

    sig { returns(T.nilable(::String)) }
    def utm_term_before_last_save; end

    sig { returns(T.untyped) }
    def utm_term_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_term_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_term_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_term_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def utm_term_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def utm_term_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_term_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def utm_term_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def utm_term_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_term_was; end

    sig { void }
    def utm_term_will_change!; end

    sig { returns(T.nilable(::String)) }
    def variant; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def variant=(value); end

    sig { returns(T::Boolean) }
    def variant?; end

    sig { returns(T.nilable(::String)) }
    def variant_before_last_save; end

    sig { returns(T.untyped) }
    def variant_before_type_cast; end

    sig { returns(T::Boolean) }
    def variant_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def variant_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def variant_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def variant_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def variant_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def variant_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def variant_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def variant_previously_was; end

    sig { returns(T.nilable(::String)) }
    def variant_was; end

    sig { void }
    def variant_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_company?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_first_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_full_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_job_title?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_locale?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_marketing_email_opt_in?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_phone?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ref_cta?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ref_loc?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ref_page?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_referrer_details?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_region?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remote_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_request_details?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_submission_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_agent?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_campaign?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_content?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_medium?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_source?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_term?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_variant?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def control(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_control(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_submission_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def submission_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Site::EnterpriseContactRequest } }

    sig { returns(T::Array[::Site::EnterpriseContactRequest]) }
    def to_a; end

    sig { returns(T::Array[::Site::EnterpriseContactRequest]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Site::EnterpriseContactRequest } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Site::EnterpriseContactRequest } }

    sig do
      params(
        records: T.any(::Site::EnterpriseContactRequest, T::Enumerable[T.any(::Site::EnterpriseContactRequest, T::Enumerable[::Site::EnterpriseContactRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Site::EnterpriseContactRequest, T::Enumerable[T.any(::Site::EnterpriseContactRequest, T::Enumerable[::Site::EnterpriseContactRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Site::EnterpriseContactRequest, T::Enumerable[T.any(::Site::EnterpriseContactRequest, T::Enumerable[::Site::EnterpriseContactRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Site::EnterpriseContactRequest]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Site::EnterpriseContactRequest, T::Enumerable[T.any(::Site::EnterpriseContactRequest, T::Enumerable[::Site::EnterpriseContactRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Site::EnterpriseContactRequest, T::Enumerable[T.any(::Site::EnterpriseContactRequest, T::Enumerable[::Site::EnterpriseContactRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Site::EnterpriseContactRequest, T::Enumerable[T.any(::Site::EnterpriseContactRequest, T::Enumerable[::Site::EnterpriseContactRequest])])
      ).returns(T::Array[::Site::EnterpriseContactRequest])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Site::EnterpriseContactRequest]) }
    def target; end

    sig { returns(T::Array[::Site::EnterpriseContactRequest]) }
    def to_a; end

    sig { returns(T::Array[::Site::EnterpriseContactRequest]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Site::EnterpriseContactRequest } }

    sig { returns(T::Array[::Site::EnterpriseContactRequest]) }
    def to_a; end

    sig { returns(T::Array[::Site::EnterpriseContactRequest]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Site::EnterpriseContactRequest } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

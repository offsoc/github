# typed: true
# frozen_string_literal: true

# Usage:
# 1. Generate a classic PAT with write permissions to https://github.com/ai-platform-ml-platform/project-neutron repo.
# 2. Run the script with the following command (this will fail):
#    `GITHUB_TOKEN=<paste-your-pat-here> ./bin/safe-ruby ./script/neutron_sync_samples_repo.rb`
# 3. Click the link in the error message to provide your PAT with access to the MSFT EMU-owned repo.
# 4. Re-run `GITHUB_TOKEN=<paste-your-pat-here> ./bin/safe-ruby ./script/neutron_sync_samples_repo.rb`

# Function:
# This script is used clone the contents of repository that houses
# "Getting started" material for individual models. It dumps the contents of the files
# into a hash constant that is used to display the sample code.

require "open3"

WORKSPACE = "/workspaces/github"
SAMPLES_REPO = "ai-platform-ml-platform/project-neutron"
CLONE_PATH = "/tmp/azureai-samples"
SAMPLES_PATH = "#{CLONE_PATH}/catalog/github"
CONTENT_PATH = "packages/marketplace/app/public/marketplace/payloads/models/getting_started_content.rb"
CODE_SAMPLES_PATH = "#{CLONE_PATH}/spec/api/details"
EXTENSIONS = [{ "js" => "js" }, { "python" => "py" }, { "rest" => "sh" }]

def main
  clone_repo
  out = {}
  puts "Reading #{SAMPLES_PATH}/toc.json"
  json = JSON.parse(File.read("#{SAMPLES_PATH}/toc.json"))
  default_code_samples = get_default_code_samples
  json.each do |model_id, model|
    puts "Processing #{model_id}"
    out[model_id] = {}
    model["samples"].each do |language, language_data|
      out[model_id][language] = {
        name: language_data["friendly_name"],
        sdks: {}
      }
      language_data["sdks"].each do |sdk, sdk_data|
        puts "  - #{language}/#{sdk}"
        path = "#{SAMPLES_PATH}/#{language_data["subdir"]}#{sdk_data["path"]}"
        special_code_sample = get_code_sample(model["subdir"], language, sdk)
        code_sample = special_code_sample ? special_code_sample : default_code_samples.dig(language, sdk) || ""
        out[model_id][language][:sdks][sdk] = {
          name: sdk_data["friendly_name"],
          content: File.read(path),
          code_sample: code_sample
        }
      end
    end
  end

  template = <<-EOF
# typed: strict
# frozen_string_literal: true

# This file is generated by running `bin/safe-ruby script/neutron_sync_samples_repo.rb`

module Marketplace::Payloads::Models::GettingStartedContent
  extend T::Sig

  CONTENT = T.let(#{JSON.pretty_generate(out)}.freeze, T::Hash[Symbol, T.untyped])

  sig { params(model_id: Symbol).returns(T.nilable(T::Hash[Symbol, T.untyped])) }
  def self.fetch(model_id)
    CONTENT.transform_keys(&:downcase)[model_id.downcase]
  end
end
  EOF
  File.write(Rails.root.join(CONTENT_PATH), template)

  puts "Wrote to #{CONTENT_PATH}"
end

def clone_repo
  cmd = "if cd #{CLONE_PATH}; then git pull; else git clone --depth 1 https://username:#{ENV["GITHUB_TOKEN"]}@github.com/#{SAMPLES_REPO} #{CLONE_PATH}; fi"
  stdout, stderr, status = Open3.capture3(cmd)
  puts stdout
  if status != 0
    puts "CLONING FAILED"
    puts cmd
    puts stderr
  end
end

def get_code_sample(subdir, language, sdk)
  return nil if language == "csharp"

  extension = EXTENSIONS.find { |extension| extension.key?(language) }&.dig(language)
  return nil if extension.nil?

  registry, model = subdir.split("/")[0, 2]
  base_path = "#{CODE_SAMPLES_PATH}/#{registry}"
  file_path = "/samples/#{language}/#{sdk}/sample.#{extension}"
  matched_folder = Dir.glob("#{base_path}/*").find { |path| File.directory?(path) && File.basename(path).casecmp?(model) }
  return nil if matched_folder.nil?

  case_insensitive_path = File.join(matched_folder, file_path)
  return nil unless File.exist?(case_insensitive_path)

  puts "  - Getting the code sample #{file_path}"
  File.read(case_insensitive_path)
end

def get_default_code_samples
  default_code_samples = {}
  default_sdks = ["js/azure-ai-inference", "python/azure-ai-inference", "rest/curl"]

  default_sdks.each do |path|
    puts "Getting the default code sample for #{path}"
    language, sdk = path.to_s.split("/")
    extension = EXTENSIONS.find { |extension| extension.key?(language) }&.dig(language)
    next if extension.nil?

    content = File.read("#{CODE_SAMPLES_PATH}/defaults/samples/#{path}/sample.#{extension}")
    default_code_samples[language] = {}
    default_code_samples[language][sdk] = content
  end

  default_code_samples
end

main

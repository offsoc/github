# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: feature_management/feature_flags/data/v2/checks.proto
# typed: strict

class FeatureManagement::FeatureFlags::Data::V2::GetFeatureFlagsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V2::GetFeatureFlagsRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::GetFeatureFlagsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V2::GetFeatureFlagsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::GetFeatureFlagsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      names: T.nilable(T::Array[String]),
      owning_service: T.nilable(String)
    ).void
  end
  def initialize(
    names: [],
    owning_service: ""
  )
  end

  # names is a list of feature flag names.
  sig { returns(T::Array[String]) }
  def names
  end

  # names is a list of feature flag names.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def names=(value)
  end

  # names is a list of feature flag names.
  sig { void }
  def clear_names
  end

  # owning_service is the service name from the Service Catalog. This will be used to filter feature flags that are owned by provided service.
  sig { returns(String) }
  def owning_service
  end

  # owning_service is the service name from the Service Catalog. This will be used to filter feature flags that are owned by provided service.
  sig { params(value: String).void }
  def owning_service=(value)
  end

  # owning_service is the service name from the Service Catalog. This will be used to filter feature flags that are owned by provided service.
  sig { void }
  def clear_owning_service
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetFeatureFlagsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetFeatureFlagsRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetFeatureFlagsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetFeatureFlagsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetFeatureFlagsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      names: T.nilable(T::Array[String])
    ).void
  end
  def initialize(
    names: []
  )
  end

  # names is a list of feature flag names.
  sig { returns(T::Array[String]) }
  def names
  end

  # names is a list of feature flag names.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def names=(value)
  end

  # names is a list of feature flag names.
  sig { void }
  def clear_names
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Data::V2::GetFeatureFlagsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V2::GetFeatureFlagsResponse) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::GetFeatureFlagsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V2::GetFeatureFlagsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::GetFeatureFlagsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      feature_flags: T.nilable(T::Array[T.nilable(FeatureManagement::FeatureFlags::Data::V2::FeatureFlag)])
    ).void
  end
  def initialize(
    feature_flags: []
  )
  end

  # feature_flags is a list of read optimized feature flag definitions.
  sig { returns(T::Array[T.nilable(FeatureManagement::FeatureFlags::Data::V2::FeatureFlag)]) }
  def feature_flags
  end

  # feature_flags is a list of read optimized feature flag definitions.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def feature_flags=(value)
  end

  # feature_flags is a list of read optimized feature flag definitions.
  sig { void }
  def clear_feature_flags
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetFeatureFlagsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetFeatureFlagsResponse) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetFeatureFlagsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetFeatureFlagsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetFeatureFlagsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      feature_flags: T.nilable(T::Array[T.nilable(FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedFeatureFlag)])
    ).void
  end
  def initialize(
    feature_flags: []
  )
  end

  # feature_flags is a list of monolith read optimized feature flag definitions.
  sig { returns(T::Array[T.nilable(FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedFeatureFlag)]) }
  def feature_flags
  end

  # feature_flags is a list of monolith read optimized feature flag definitions.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def feature_flags=(value)
  end

  # feature_flags is a list of monolith read optimized feature flag definitions.
  sig { void }
  def clear_feature_flags
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Data::V2::GetSegmentsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V2::GetSegmentsRequest) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::GetSegmentsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V2::GetSegmentsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::GetSegmentsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      names: T.nilable(T::Array[String])
    ).void
  end
  def initialize(
    names: []
  )
  end

  # names is a list of segment names.
  sig { returns(T::Array[String]) }
  def names
  end

  # names is a list of segment names.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def names=(value)
  end

  # names is a list of segment names.
  sig { void }
  def clear_names
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Data::V2::GetSegmentsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V2::GetSegmentsResponse) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::GetSegmentsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V2::GetSegmentsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::GetSegmentsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      segments: T.nilable(T::Array[T.nilable(FeatureManagement::FeatureFlags::Data::V2::Segment)])
    ).void
  end
  def initialize(
    segments: []
  )
  end

  # segments is a list of read optimized segments.
  sig { returns(T::Array[T.nilable(FeatureManagement::FeatureFlags::Data::V2::Segment)]) }
  def segments
  end

  # segments is a list of read optimized segments.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def segments=(value)
  end

  # segments is a list of read optimized segments.
  sig { void }
  def clear_segments
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetSegmentsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetSegmentsResponse) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetSegmentsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetSegmentsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedGetSegmentsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      segments: T.nilable(T::Array[T.nilable(FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedSegment)])
    ).void
  end
  def initialize(
    segments: []
  )
  end

  # segments is a list of monolith optimized read optimized segments.
  sig { returns(T::Array[T.nilable(FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedSegment)]) }
  def segments
  end

  # segments is a list of monolith optimized read optimized segments.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def segments=(value)
  end

  # segments is a list of monolith optimized read optimized segments.
  sig { void }
  def clear_segments
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

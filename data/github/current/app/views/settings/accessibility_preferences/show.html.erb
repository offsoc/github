<% page_info title: [flash[:page_title_prefix], "Accessibility"].join(" ") %>
<%= render layout: "settings/settings" do %>
  <%= render Primer::Beta::Subhead.new do |component| %>
    <% component.with_heading(tag: :h2) do %>
      Accessibility
    <% end %>
  <% end %>
  <%= render(Primer::Beta::Heading.new(tag: :h3, font_weight: :normal, mb: 3)) { "Keyboard shortcuts" } %>
  <% all_shortcuts_enabled = current_user.settings.get(:keyboard_shortcuts_preference) == "all" %>
  <% hovercards_enabled = current_user.settings.get(:hovercards_enabled) %>
  <% is_mac = request.user_agent.match?(/Macintosh/) %>
  <%= form_with(
    scope: :user,
    url: keyboard_settings_accessibility_preferences_path,
    method: :put,
    "aria-labelledby": "keyboard-heading"
  ) do |form| %>
    <%= render(Primer::Beta::Heading.new(tag: :h4, font_weight: :normal)) { "General" } %>
    <div class="form-checkbox">
      <%= hidden_field_tag "user[keyboard_shortcuts_preference]", "no_character_key", id: "keyboard_shortcuts_preference" %>
      <label for="keyboard_shortcuts_checkbox" id="keyboard-heading">
        Character keys
      </label>
      <input type="checkbox" name="user[keyboard_shortcuts_preference]" value="all" <%= all_shortcuts_enabled && "checked" %> aria-describedby="keyboard_shortcuts_preference_description" id="keyboard_shortcuts_checkbox">
      <p id="keyboard_shortcuts_preference_description" class="note">
        Enable <a class="Link--inTextBlock" href="https://docs.github.com/get-started/using-github/keyboard-shortcuts">GitHub shortcuts</a> that don't use modifier keys in their activation.
        For example, the <kbd>g</kbd><kbd>n</kbd> shortcut to navigate notifications, or <span class="sr-only">question mark</span><kbd aria-hidden="true">?</kbd> to view context relevant shortcuts. <a class="Link--inTextBlock" href="https://docs.github.com/get-started/using-github/keyboard-shortcuts">Learn more about character key shortcuts</a>.
      </p>
    </div>

    <% if current_user.command_palette_enabled? %>
      <%= render(Primer::Beta::Heading.new(tag: :h4, font_weight: :normal, mt: 4)) { "Command palette" } %>

      <div class="f6 mt-2 color-fg-muted">
        Modify the shortcuts to trigger the Command Palette for the default search mode and the command mode <kbd>></kbd>.
      </div>

      <div class="d-flex flex-wrap">
        <div class="form-group mr-2 mb-2">
          <div class="form-group-header">
            <label for="search-mode-select">Search mode</label>
          </div>
          <div class="form-group-body">
            <%= form.select(:search_mode_shortcut, search_mode_options, {selected: current_user.settings.get(:command_palette_open_hotkey)}, {class: "form-select", id: "search-mode-select"}) %>
          </div>
        </div>
        <div class="form-group">
          <div class="form-group-header">
            <label for="command-mode-select">Command mode</label>
          </div>
          <div class="form-group-body">
            <%= form.select(:command_mode_shortcut, commands_mode_options, {selected: current_user.settings.get(:command_palette_open_command_mode_hotkey)}, {class: "form-select", id: "command-mode-select"}) %>
          </div>
        </div>
      </div>
    <% end %>

    <%= render Primer::Beta::Button.new(type: :submit, mt: 2) do %>Save keyboard shortcut preferences<% end %>
  <% end %>

  <%= render(Primer::Beta::Heading.new(tag: :h3, font_weight: :normal, mb: 3, mt: 5)) { "Motion" } %>
  <%= form_tag motion_settings_accessibility_preferences_path, method: :put, :"aria-labelledby" => "animated_images_label" do %>
    <%= render(Primer::Beta::Heading.new(tag: :h4, font_weight: :normal, id: "animated_images_label")) { "Autoplay animated images" } %>
    <fieldset>
      <legend>
        <p class="note">Select whether animated images should play automatically.</p>
      </legend>
      <div class="form-checkbox">
        <label for="animated_images_system_radio">
          Sync with system
        </label>
        <input type="radio" value="system" <%= "checked" if current_user.settings.get(:animated_images) == "system" %> id="animated_images_system_radio" name="user[animated_images]" aria-describedby="animated_images_system_preference_description">
        <p class="note" id="animated_images_system_preference_description">Adopts your system preference for reduced motion</p>
      </div>
      <div class="form-checkbox">
        <label for="animated_images_enabled_radio">
          Enabled
        </label>
        <input type="radio" value="enabled" <%= "checked" if current_user.settings.get(:animated_images) == "enabled" %> id="animated_images_enabled_radio" name="user[animated_images]" aria-describedby="animated_images_enabled_preference_description">
        <p class="note" id="animated_images_enabled_preference_description">Automatically plays animated images</p>
      </div>
      <div class="form-checkbox">
        <label for="animated_images_disabled_radio">
          Disabled
        </label>
        <input type="radio" value="disabled" <%= "checked" if current_user.settings.get(:animated_images) == "disabled" %> id="animated_images_disabled_radio" name="user[animated_images]" aria-describedby="animated_images_disabled_preference_description">
        <p class="note" id="animated_images_disabled_preference_description">Prevents animated images from playing automatically</p>
      </div>
    </fieldset>
    <%= render Primer::Beta::Button.new(type: :submit, mt: 2) do %>Save motion preferences<% end %>
  <% end %>

  <%= render(Primer::Beta::Heading.new(tag: :h3, font_weight: :normal, mb: 3, mt: 5)) { "Content" } %>

  <div class="d-flex flex-items-center">
    <%= render(Primer::Beta::Heading.new(tag: :h4, font_weight: :normal, display: :inline_flex, mr: 2, id: "link_underline_label")) { "Link underlines" } %>
  </div>
  <%= form_tag link_underlines_settings_accessibility_preferences_path, method: :put, :"aria-labelledby" => "link_underline_label" do %>
    <fieldset>
      <legend>
        <p class="note">Toggle the visibility of underlines on links that are adjacent to text.
        </p>
      </legend>
      <div class="form-checkbox">
        <label for="link_underlines_hide_radio">
          Hide link underlines
        </label>
        <input type="radio" value="false" <%= "checked" if current_user.settings.get(:link_underlines) == false %> id="link_underlines_hide_radio" name="user[link_underlines]">
      </div>
      <div class="form-checkbox">
        <label for="link_underlines_show_radio">
          Show link underlines
        </label>
        <input type="radio" value="true" <%= "checked" if current_user.settings.get(:link_underlines) == true %> id="link_underlines_show_radio" name="user[link_underlines]">
      </div>
    </fieldset>
    <%= render Primer::Beta::Button.new(type: :submit, "aria-label": "Save link underline preferences", mt: 2) do %>Save content preferences<% end %>
  <% end %>

  <% if GitHub.flipper[:hovercard_accessibility].enabled?(current_user) %>
    <%= form_with(
      scope: :user,
      url: hovercards_enabled_settings_accessibility_preferences_path,
      method: :put,
    ) do |form| %>
      <%
          operator_key = is_mac ? "⌥" : "Alt"
          sr_text = (is_mac ? "option" : "alt") + " up"
      %>
      <div class="form-checkbox">
        <%= hidden_field_tag "user[hovercards_enabled]", "", id: "hovercards_enabled" %>
        <label for="hovercards_checkbox" id="hovercards-heading">
          Hovercards
        </label>
        <input type="checkbox" name="user[hovercards_enabled]" value="all" <%= hovercards_enabled && "checked" %> aria-describedby="hovercards_preference_description" id="hovercards_checkbox">
        <p id="hovercards_preference_description" class="note">
          Enable previewing link content via mouse hover or keyboard focus before navigation.
          Move focus to hovercard content using <span class='sr-only'><%=sr_text%></span><kbd aria-hidden="true"><%=operator_key%></kbd><kbd aria-hidden="true">↑</kbd>.
        </p>
      </div>
      <%= render Primer::Beta::Button.new(type: :submit, "aria-label": "Save hovercard preferences", mt: 2) do %>
        Save hovercard preferences
      <% end %>
    <% end %>
  <% end %>

  <%= render(Primer::Beta::Heading.new(tag: :h3, font_weight: :normal, mb: 3, mt: 5)) { "Editor settings" } %>
  <%= render(Primer::Beta::Heading.new(tag: :h4, font_weight: :normal)) { "URL paste behavior" } %>
  <%= form_tag paste_url_markdown_settings_accessibility_preferences_path, method: :put, :"aria-labelledby" => "pasting_url_behavior_label" do %>
    <fieldset>
      <legend>
        <%
          operator_key = is_mac ? "⌘" : "Ctrl"
          sr_text = (is_mac ? "command" : "control") + " shift and V"
        %>
        <p class="note">Select if URLs should be formatted on paste. You can use <span class='sr-only'><%=sr_text%></span><kbd aria-hidden="true"><%=operator_key%></kbd> <kbd aria-hidden="true">⇧</kbd> <kbd aria-hidden="true">V</kbd> to paste a link in the opposite way.</p>
      </legend>
      <div class="form-checkbox">
        <label for="pasting_url_behavior_formatted_radio">
          Formatted link
        </label>
        <input type="radio" value="true" <%= "checked" if current_user.settings.get(:paste_url_markdown) %> id="pasting_url_behavior_formatted_radio" name="user[paste_url_markdown]" aria-describedby="pasting_url_behavior_formatted_preference_description">
        <p class="note" id="pasting_url_behavior_formatted_preference_description">Pasting a URL while having text selected will format to a Markdown link</p>
      </div>
      <div class="form-checkbox">
        <label for="pasting_url_behavior_plain_radio">
          Plain text
        </label>
        <input type="radio" value="false" <%= "checked" unless current_user.settings.get(:paste_url_markdown) %> id="pasting_url_behavior_plain_radio" name="user[paste_url_markdown]" aria-describedby="pasting_url_behavior_plain_preference_description">
        <p class="note" id="pasting_url_behavior_plain_preference_description">Pasting a URL while having text selected will replace the text</p>
      </div>
    </fieldset>
    <%= render Primer::Beta::Button.new(type: :submit, mt: 2) do %>Save editor settings<% end %>
  <% end %>
<% end %>

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `azure-core` gem.
# Please instead update this file by running `bin/tapioca gem azure-core`.

# source://azure-core//lib/azure/core.rb#21
module Azure; end

# source://azure-core//lib/azure/core.rb#22
module Azure::Core; end

# source://azure-core//lib/azure/core.rb#30
module Azure::Core::Auth; end

# source://azure-core//lib/azure/core/auth/shared_key.rb#21
class Azure::Core::Auth::SharedKey < ::Azure::Core::Auth::Signer
  # Initialize the Signer.
  #
  # @param account_name [String] The account name. Defaults to the one in the
  #   global configuration.
  # @param access_key [String] The access_key encoded in Base64. Defaults to the
  #   one in the global configuration.
  # @return [SharedKey] a new instance of SharedKey
  #
  # source://azure-core//lib/azure/core/auth/shared_key.rb#31
  def initialize(account_name = T.unsafe(nil), access_key = T.unsafe(nil)); end

  # The Azure account's name.
  #
  # source://azure-core//lib/azure/core/auth/shared_key.rb#23
  def account_name; end

  # Calculate the Canonicalized Headers string for a request.
  #
  # @param headers [Hash] HTTP request headers.
  # @return [String] a string with the canonicalized headers.
  #
  # source://azure-core//lib/azure/core/auth/shared_key.rb#95
  def canonicalized_headers(headers); end

  # Calculate the Canonicalized Resource string for a request.
  #
  # @param uri [URI] URI of the request we're signing.
  # @return [String] a string with the canonicalized resource.
  #
  # source://azure-core//lib/azure/core/auth/shared_key.rb#107
  def canonicalized_resource(uri); end

  # The name of the strategy.
  #
  # @return [String]
  #
  # source://azure-core//lib/azure/core/auth/shared_key.rb#39
  def name; end

  # Create the signature for the request parameters
  #
  # @param method [Symbol] HTTP request method.
  # @param uri [URI] URI of the request we're signing.
  # @param headers [Hash] HTTP request headers.
  # @return [String] base64 encoded signature
  #
  # source://azure-core//lib/azure/core/auth/shared_key.rb#50
  def sign(method, uri, headers); end

  # Sign the request
  #
  # @param req [Azure::Core::Http::HttpRequest] HTTP request to sign
  # @return [Azure::Core::Http::HttpRequest]
  #
  # source://azure-core//lib/azure/core/auth/shared_key.rb#59
  def sign_request(req); end

  # Generate the string to sign.
  #
  # @param method [Symbol] HTTP request method.
  # @param uri [URI] URI of the request we're signing.
  # @param headers [Hash] HTTP request headers.
  # @return [String]
  #
  # source://azure-core//lib/azure/core/auth/shared_key.rb#71
  def signable_string(method, uri, headers); end
end

# source://azure-core//lib/azure/core/auth/shared_key_lite.rb#20
class Azure::Core::Auth::SharedKeyLite < ::Azure::Core::Auth::SharedKey
  # The name of the strategy.
  #
  # @return [String]
  #
  # source://azure-core//lib/azure/core/auth/shared_key_lite.rb#24
  def name; end

  # Generate the string to sign.
  #
  # Returns a plain text string.
  #
  # @param method [Symbol] The HTTP request method.
  # @param uri [URI] The URI of the request we're signing.
  # @param headers [Hash] A Hash of HTTP request headers.
  #
  # source://azure-core//lib/azure/core/auth/shared_key_lite.rb#35
  def signable_string(method, uri, headers); end
end

# Utility class to sign strings with HMAC-256 and then encode the
# signed string using Base64.
#
# source://azure-core//lib/azure/core/auth/signer.rb#23
class Azure::Core::Auth::Signer
  # Initialize the Signer.
  #
  # @param access_key [String] The access_key encoded in Base64.
  # @return [Signer] a new instance of Signer
  #
  # source://azure-core//lib/azure/core/auth/signer.rb#30
  def initialize(access_key); end

  # The access key for the account
  #
  # source://azure-core//lib/azure/core/auth/signer.rb#25
  def access_key; end

  # Generate an HMAC signature.
  #
  # @param body [String] The string to sign.
  # @return [String] a Base64 String signed with HMAC.
  #
  # source://azure-core//lib/azure/core/auth/signer.rb#43
  def sign(body); end
end

# source://azure-core//lib/azure/core/default.rb#18
module Azure::Core::Default; end

# Default User Agent header string
#
# source://azure-core//lib/azure/core/default.rb#20
Azure::Core::Default::USER_AGENT = T.let(T.unsafe(nil), String)

# Superclass for errors generated from this library, so people can
# just rescue this for generic error handling
#
# source://azure-core//lib/azure/core/error.rb#19
class Azure::Core::Error < ::StandardError; end

# A base class for Service implementations
#
# source://azure-core//lib/azure/core/filtered_service.rb#20
class Azure::Core::FilteredService < ::Azure::Core::Service
  # Create a new instance of the FilteredService
  #
  # @param host [String] The hostname. (optional, Default empty)
  # @param options [Hash] options including {:client} (optional, Default {})
  # @return [FilteredService] a new instance of FilteredService
  #
  # source://azure-core//lib/azure/core/filtered_service.rb#26
  def initialize(host = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://azure-core//lib/azure/core/filtered_service.rb#33
  def call(method, uri, body = T.unsafe(nil), headers = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute filters.
  #
  # source://azure-core//lib/azure/core/filtered_service.rb#31
  def filters; end

  # Sets the attribute filters
  #
  # @param value the value to set the attribute filters to.
  #
  # source://azure-core//lib/azure/core/filtered_service.rb#31
  def filters=(_arg0); end

  # source://azure-core//lib/azure/core/filtered_service.rb#39
  def with_filter(filter = T.unsafe(nil), &block); end
end

# source://azure-core//lib/azure/core/http/http_filter.rb#17
module Azure::Core::Http; end

# Public: Class for handling all HTTP response errors
#
# source://azure-core//lib/azure/core/http/http_error.rb#23
class Azure::Core::Http::HTTPError < ::Azure::Core::Error
  # Public: Initialize an error
  #
  # http_response - An Azure::Core::HttpResponse
  #
  # @return [HTTPError] a new instance of HTTPError
  #
  # source://azure-core//lib/azure/core/http/http_error.rb#70
  def initialize(http_response); end

  # Public: Description of the error
  #
  # Returns a String
  #
  # source://azure-core//lib/azure/core/http/http_error.rb#50
  def description; end

  # Public: Detail of the error
  #
  # Returns a String
  #
  # source://azure-core//lib/azure/core/http/http_error.rb#55
  def detail; end

  # Public: The header name whose value is invalid
  #
  # Returns a String
  #
  # source://azure-core//lib/azure/core/http/http_error.rb#60
  def header; end

  # Public: The invalid header value
  #
  # Returns a String
  #
  # source://azure-core//lib/azure/core/http/http_error.rb#65
  def header_value; end

  # Public: Detail of the response
  #
  # Returns an Azure::Core::Http::HttpResponse object
  #
  # source://azure-core//lib/azure/core/http/http_error.rb#28
  def http_response; end

  # source://azure-core//lib/azure/core/http/http_error.rb#127
  def inspect; end

  # source://azure-core//lib/azure/core/http/http_error.rb#114
  def parse_json_response; end

  # Extract the relevant information from the response's body. If the response
  # body is not an XML, we return an 'Unknown' error with the entire body as
  # the description
  #
  # Returns nothing
  #
  # source://azure-core//lib/azure/core/http/http_error.rb#85
  def parse_response; end

  # source://azure-core//lib/azure/core/http/http_error.rb#120
  def parse_unknown_response; end

  # source://azure-core//lib/azure/core/http/http_error.rb#97
  def parse_xml_response; end

  # Public: The HTTP status code of this error
  #
  # Returns a Fixnum
  #
  # source://azure-core//lib/azure/core/http/http_error.rb#38
  def status_code; end

  # Public: The type of error
  #
  # http://msdn.microsoft.com/en-us/library/azure/dd179357
  #
  # Returns a String
  #
  # source://azure-core//lib/azure/core/http/http_error.rb#45
  def type; end

  # Public: The request URI
  #
  # Returns a String
  #
  # source://azure-core//lib/azure/core/http/http_error.rb#33
  def uri; end
end

# A filter which can modify the HTTP pipeline both before and
# after requests/responses. Multiple filters can be nested in a
# "Russian Doll" model to create a compound HTTP pipeline
#
# source://azure-core//lib/azure/core/http/http_filter.rb#21
class Azure::Core::Http::HttpFilter
  # Initialize a HttpFilter
  #
  # &block - An inline block which implements the filter.
  #
  # The inline block should take parameters |request, _next| where
  # request is a HttpRequest and _next is an object that implements
  # a method .call which returns an HttpResponse. The block passed
  # to the constructor should also return HttpResponse, either as
  # the result of calling _next.call or by customized logic.
  #
  # @return [HttpFilter] a new instance of HttpFilter
  #
  # source://azure-core//lib/azure/core/http/http_filter.rb#33
  def initialize(&block); end

  # Executes the filter
  #
  # request - HttpRequest. The request
  # _next   - An object that implements .call (no params)
  #
  # NOTE: _next is a either a subsequent HttpFilter wrapped in a
  # closure, or the HttpRequest object's call method. Either way,
  # it must have it's .call method executed within each filter to
  #  complete the pipeline. _next.call should return an HttpResponse
  # and so should this Filter.
  #
  # source://azure-core//lib/azure/core/http/http_filter.rb#47
  def call(request, _next); end
end

# Represents a HTTP request can perform synchronous queries to a
# HTTP server, returning a HttpResponse
#
# source://azure-core//lib/azure/core/http/http_request.rb#31
class Azure::Core::Http::HttpRequest
  include ::Azure::HttpResponseHelper

  # Public: Create the HttpRequest
  #
  # @param method [Symbol] The HTTP method to use (:get, :post, :put, :del, etc...)
  # @param uri [URI] The URI of the HTTP endpoint to query
  # @param options_or_body [Hash|IO|String] The request options including {:client, :body} or raw body only
  # @return [HttpRequest] a new instance of HttpRequest
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#59
  def initialize(method, uri, options_or_body = T.unsafe(nil)); end

  def _method(_arg0); end

  # The body of the request (IO or String)
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#45
  def body; end

  # The body of the request (IO or String)
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#139
  def body=(body); end

  # Sends request to HTTP server and returns a HttpResponse
  #
  # @return [HttpResponse]
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#147
  def call; end

  # Azure client which contains configuration context and http agents
  #
  # @return [Azure::Client]
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#49
  def client; end

  # Azure client which contains configuration context and http agents
  #
  # @return [Azure::Client]
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#49
  def client=(_arg0); end

  # Build a default headers Hash
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#124
  def default_headers(current_time); end

  # The http filter
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#52
  def has_retry_filter; end

  # The http filter
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#52
  def has_retry_filter=(_arg0); end

  # The header values as a Hash
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#42
  def headers; end

  # The header values as a Hash
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#42
  def headers=(_arg0); end

  # source://azure-core//lib/azure/core/http/http_request.rb#135
  def http_setup; end

  # The HTTP method to use (:get, :post, :put, :delete, etc...)
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#36
  def method; end

  # The HTTP method to use (:get, :post, :put, :delete, etc...)
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#36
  def method=(_arg0); end

  # The URI of the HTTP endpoint to query
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#39
  def uri; end

  # The URI of the HTTP endpoint to query
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#39
  def uri=(_arg0); end

  # Public: Applies a HttpFilter to the HTTP Pipeline
  #
  # filter - Any object that responds to .call(req, _next) and
  #          returns a HttpResponse eg. HttpFilter, Proc,
  #          lambda, etc. (optional)
  #
  # options - The options that are used when call Azure::Core::FilteredService.call.
  #           It can be used by retry policies to determine changes in the retry.
  #
  # &block - An inline block may be used instead of a filter
  #
  #          example:
  #
  #             request.with_filter do |req, _next|
  #               _next.call
  #             end
  #
  # NOTE:
  #
  # The code block provided must call _next or the filter pipeline
  # will not complete and the HTTP request will never execute
  #
  # source://azure-core//lib/azure/core/http/http_request.rb#99
  def with_filter(filter = T.unsafe(nil), options = T.unsafe(nil), &block); end

  private

  # source://azure-core//lib/azure/core/http/http_request.rb#159
  def apply_body_headers; end

  # source://azure-core//lib/azure/core/http/http_request.rb#167
  def apply_io_headers; end

  # source://azure-core//lib/azure/core/http/http_request.rb#187
  def apply_miscellaneous_headers; end

  # source://azure-core//lib/azure/core/http/http_request.rb#175
  def apply_string_io_headers; end
end

# A small proxy to clean up the API of Net::HTTPResponse.
#
# source://azure-core//lib/azure/core/http/http_response.rb#21
class Azure::Core::Http::HttpResponse
  # Public: Initialize a new response.
  #
  # http_response - A Net::HTTPResponse.
  #
  # @return [HttpResponse] a new instance of HttpResponse
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#25
  def initialize(http_response, uri = T.unsafe(nil)); end

  # Public: Get the response body.
  #
  # Returns a String.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#35
  def body; end

  # Public: Get an error that wraps this HTTP response, as long as this
  # response was unsuccessful. This method will return nil if the
  # response was successful.
  #
  # Returns an Azure::Core::Http::HTTPError.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#73
  def error; end

  # Public: Get an error that wraps this HTTP response, as long as this
  # response was unsuccessful. This method will return nil if the
  # response was successful.
  #
  # Returns an Azure::Core::Http::HTTPError.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#73
  def exception; end

  # Public: Get all the response headers as a Hash.
  #
  # Returns a Hash.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#64
  def headers; end

  # Public: Get the response reason phrase.
  #
  # Returns a String.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#49
  def reason_phrase; end

  # Public: Get the response status code.
  #
  # Returns a Fixnum.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#42
  def status_code; end

  # Public: Check if this response was successful. A request is considered
  # successful if the response is in the 200 - 399 range.
  #
  # Returns nil|false.
  #
  # @return [Boolean]
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#57
  def success?; end

  # Returns the value of attribute uri.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#30
  def uri; end

  # Sets the attribute uri
  #
  # @param value the value to set the attribute uri to.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#30
  def uri=(_arg0); end
end

# TODO: This needs to be deleted and HttpError needs to be refactored to not rely on HttpResponse.
# The dependency on knowing the internal structure of HttpResponse breaks good design principles.
# The only reason this class exists is because the HttpError parses the HttpResponse to produce an error msg.
#
# source://azure-core//lib/azure/core/http/http_response.rb#82
class Azure::Core::Http::HttpResponse::MockResponse
  # @return [MockResponse] a new instance of MockResponse
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#83
  def initialize(code, body, headers); end

  # Returns the value of attribute body.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#92
  def body; end

  # Sets the attribute body
  #
  # @param value the value to set the attribute body to.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#92
  def body=(_arg0); end

  # Returns the value of attribute headers.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#93
  def headers; end

  # Sets the attribute headers
  #
  # @param value the value to set the attribute headers to.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#93
  def headers=(_arg0); end

  # Returns the value of attribute status.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#91
  def status; end

  # Sets the attribute status
  #
  # @param value the value to set the attribute status to.
  #
  # source://azure-core//lib/azure/core/http/http_response.rb#91
  def status=(_arg0); end

  # source://azure-core//lib/azure/core/http/http_response.rb#95
  def to_hash; end
end

# A HttpFilter implementation that handles retrying based on a
# specific policy when HTTP layer errors occur
#
# source://azure-core//lib/azure/core/http/retry_policy.rb#23
class Azure::Core::Http::RetryPolicy < ::Azure::Core::Http::HttpFilter
  # @return [RetryPolicy] a new instance of RetryPolicy
  #
  # source://azure-core//lib/azure/core/http/retry_policy.rb#25
  def initialize(&block); end

  # Overrides the base class implementation of call to implement
  # a retry loop that uses should_retry? to determine when to
  # break the loop
  #
  # req   - HttpRequest. The HTTP request
  # _next - HttpFilter. The next filter in the pipeline
  #
  # source://azure-core//lib/azure/core/http/retry_policy.rb#38
  def call(req, _next); end

  # Returns the value of attribute retry_data.
  #
  # source://azure-core//lib/azure/core/http/retry_policy.rb#30
  def retry_data; end

  # Sets the attribute retry_data
  #
  # @param value the value to set the attribute retry_data to.
  #
  # source://azure-core//lib/azure/core/http/retry_policy.rb#30
  def retry_data=(_arg0); end

  # Determines if the HTTP request should continue retrying
  #
  # response - HttpResponse. The response from the active request
  # retry_data - Hash. Stores stateful retry data
  #
  # The retry_data is a Hash which can be used to store
  # stateful data about the request execution context (such as an
  # incrementing counter, timestamp, etc). The retry_data object
  # will be the same instance throughout the lifetime of the request.
  #
  # If an inline block was passed to the constructor, that block
  # will be used here and should return true to retry the job, or
  # false to stop exit. If an inline block was not passed to the
  # constructor the method returns false.
  #
  # Alternatively, a subclass could override this method.
  #
  # @return [Boolean]
  #
  # source://azure-core//lib/azure/core/http/retry_policy.rb#78
  def should_retry?(response, retry_data); end
end

# A HttpFilter implementation that creates a authorization signature which is added to the request headers
#
# source://azure-core//lib/azure/core/http/signer_filter.rb#21
class Azure::Core::Http::SignerFilter < ::Azure::Core::Http::HttpFilter
  # @return [SignerFilter] a new instance of SignerFilter
  #
  # source://azure-core//lib/azure/core/http/signer_filter.rb#22
  def initialize(signer); end

  # source://azure-core//lib/azure/core/http/signer_filter.rb#26
  def call(req, _next); end
end

# Logger
#
# source://azure-core//lib/azure/core/utility.rb#103
module Azure::Core::Logger
  class << self
    # source://azure-core//lib/azure/core/utility.rb#135
    def error(msg); end

    # source://azure-core//lib/azure/core/utility.rb#115
    def error_with_exit(msg); end

    # source://azure-core//lib/azure/core/utility.rb#145
    def exception_message(msg); end

    # source://azure-core//lib/azure/core/utility.rb#107
    def info(msg); end

    # source://azure-core//lib/azure/core/utility.rb#164
    def initialize_external_logger(logger); end

    # Returns the value of attribute logger.
    #
    # source://azure-core//lib/azure/core/utility.rb#105
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://azure-core//lib/azure/core/utility.rb#105
    def logger=(_arg0); end

    # source://azure-core//lib/azure/core/utility.rb#155
    def success(msg); end

    # source://azure-core//lib/azure/core/utility.rb#125
    def warn(msg); end
  end
end

# A base class for Service implementations
#
# source://azure-core//lib/azure/core/service.rb#20
class Azure::Core::Service
  # Create a new instance of the Service
  #
  # @param host [String] The hostname. (optional, Default empty)
  # @param options [Hash] options including {:client} (optional, Default {})
  # @return [Service] a new instance of Service
  #
  # source://azure-core//lib/azure/core/service.rb#26
  def initialize(host = T.unsafe(nil), options = T.unsafe(nil)); end

  # @yield [request]
  #
  # source://azure-core//lib/azure/core/service.rb#33
  def call(method, uri, body = T.unsafe(nil), headers = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://azure-core//lib/azure/core/service.rb#31
  def client; end

  # Sets the attribute client
  #
  # @param value the value to set the attribute client to.
  #
  # source://azure-core//lib/azure/core/service.rb#31
  def client=(_arg0); end

  # source://azure-core//lib/azure/core/service.rb#39
  def generate_uri(path = T.unsafe(nil), query = T.unsafe(nil)); end

  # Returns the value of attribute host.
  #
  # source://azure-core//lib/azure/core/service.rb#31
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://azure-core//lib/azure/core/service.rb#31
  def host=(_arg0); end
end

# A base class for Service implementations
#
# source://azure-core//lib/azure/core/signed_service.rb#22
class Azure::Core::SignedService < ::Azure::Core::FilteredService
  # Create a new instance of the SignedService
  #
  # @param signer [Azure::Core::Auth::Signer] . An implementation of Signer used for signing requests. (optional, Default=Azure::Core::Auth::SharedKey.new)
  # @param account_name [String] The account name (optional, Default=Azure.config.storage_account_name)
  # @param options [Hash] options
  # @return [SignedService] a new instance of SignedService
  #
  # source://azure-core//lib/azure/core/signed_service.rb#29
  def initialize(signer = T.unsafe(nil), account_name = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute account_name.
  #
  # source://azure-core//lib/azure/core/signed_service.rb#37
  def account_name; end

  # Sets the attribute account_name
  #
  # @param value the value to set the attribute account_name to.
  #
  # source://azure-core//lib/azure/core/signed_service.rb#37
  def account_name=(_arg0); end

  # source://azure-core//lib/azure/core/signed_service.rb#40
  def call(method, uri, body = T.unsafe(nil), headers = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute signer.
  #
  # source://azure-core//lib/azure/core/signed_service.rb#38
  def signer; end

  # Sets the attribute signer
  #
  # @param value the value to set the attribute signer to.
  #
  # source://azure-core//lib/azure/core/signed_service.rb#38
  def signer=(_arg0); end
end

# source://azure-core//lib/azure/core/utility.rb#45
module Azure::Core::Utility
  # @return [Boolean]
  #
  # source://azure-core//lib/azure/core/utility.rb#79
  def enable_winrm?(winrm_transport); end

  # source://azure-core//lib/azure/core/utility.rb#67
  def export_der(cert, key, pass = T.unsafe(nil), name = T.unsafe(nil)); end

  # source://azure-core//lib/azure/core/utility.rb#75
  def export_fingerprint(certificate); end

  # source://azure-core//lib/azure/core/utility.rb#83
  def get_certificate(private_key_file); end

  # source://azure-core//lib/azure/core/utility.rb#97
  def initialize_external_logger(logger); end

  # source://azure-core//lib/azure/core/utility.rb#57
  def locate_file(name); end

  # source://azure-core//lib/azure/core/utility.rb#46
  def random_string(str = T.unsafe(nil), no_of_char = T.unsafe(nil)); end

  # source://azure-core//lib/azure/core/utility.rb#50
  def xml_content(xml, key, default = T.unsafe(nil)); end
end

# source://azure-core//lib/azure/core/version.rb#18
class Azure::Core::Version
  class << self
    # @return [String]
    #
    # source://azure-core//lib/azure/core/version.rb#27
    def to_s; end
  end
end

# source://azure-core//lib/azure/core/version.rb#19
Azure::Core::Version::MAJOR = T.let(T.unsafe(nil), Integer)

# source://azure-core//lib/azure/core/version.rb#20
Azure::Core::Version::MINOR = T.let(T.unsafe(nil), Integer)

# source://azure-core//lib/azure/core/version.rb#22
Azure::Core::Version::PRE = T.let(T.unsafe(nil), T.untyped)

# source://azure-core//lib/azure/core/version.rb#21
Azure::Core::Version::UPDATE = T.let(T.unsafe(nil), Integer)

# source://azure-core//lib/azure/core/utility.rb#28
module Azure::Error; end

# Azure Error
#
# source://azure-core//lib/azure/core/utility.rb#30
class Azure::Error::Error < ::Azure::Core::Error
  # @return [Error] a new instance of Error
  #
  # source://azure-core//lib/azure/core/utility.rb#35
  def initialize(type, status, description); end

  # Returns the value of attribute description.
  #
  # source://azure-core//lib/azure/core/utility.rb#31
  def description; end

  # Returns the value of attribute status_code.
  #
  # source://azure-core//lib/azure/core/utility.rb#32
  def status_code; end

  # Returns the value of attribute type.
  #
  # source://azure-core//lib/azure/core/utility.rb#33
  def type; end
end

# source://azure-core//lib/azure/http_response_helper.rb#17
module Azure::HttpResponseHelper
  # Sends request to HTTP server and returns a Faraday::Response
  # returns Faraday::Response
  #
  # @param method [Symbol] The HTTP method to use (:get, :post, :put, :del, etc...)
  # @param url [URI] The URI of the HTTP endpoint to query
  # @param conn [Net::HTTP] http agent for a given uri
  # @param headers [String] The request headers
  # @param body [String] The request body
  #
  # source://azure-core//lib/azure/http_response_helper.rb#26
  def set_up_response(method, url, conn, headers, body); end
end

# source://azure-core//lib/azure/core/utility.rb#244
Azure::Loggerx = Azure::Core::Logger

# Code validate private/public IP acceptable ranges.
#
# source://azure-core//lib/azure/core/utility.rb#196
class IPAddr
  include ::Comparable

  # @return [Boolean]
  #
  # source://azure-core//lib/azure/core/utility.rb#203
  def private?; end

  # @return [Boolean]
  #
  # source://azure-core//lib/azure/core/utility.rb#211
  def public?; end

  class << self
    # source://azure-core//lib/azure/core/utility.rb#234
    def address_prefix(ip, cidr); end

    # @return [Boolean]
    #
    # source://azure-core//lib/azure/core/utility.rb#238
    def valid?(ip); end

    # source://azure-core//lib/azure/core/utility.rb#226
    def validate_address_space(ip); end

    # source://azure-core//lib/azure/core/utility.rb#216
    def validate_ip_and_prefix(ip, cidr); end
  end
end

# source://azure-core//lib/azure/core/utility.rb#197
IPAddr::PRIVATE_RANGES = T.let(T.unsafe(nil), Array)

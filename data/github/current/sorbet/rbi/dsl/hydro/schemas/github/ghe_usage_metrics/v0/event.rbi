# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::GheUsageMetrics::V0::Event`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::GheUsageMetrics::V0::Event`.

class Hydro::Schemas::Github::GheUsageMetrics::V0::Event
  sig do
    params(
      actions_stats: T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::ActionsStats),
      admin_stats: T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::AdminStats),
      advisory_db_stats: T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::AdvisoryDBStats),
      collected_at: T.nilable(Google::Protobuf::Timestamp),
      dormant_users: T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::DormantUsers),
      features: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      host_name: T.nilable(String),
      mec: T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::Mec),
      owner_id: T.nilable(String),
      packages_stats: T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::PackagesStats),
      schema_version: T.nilable(String),
      server_id: T.nilable(String),
      version: T.nilable(String)
    ).void
  end
  def initialize(actions_stats: nil, admin_stats: nil, advisory_db_stats: nil, collected_at: nil, dormant_users: nil, features: T.unsafe(nil), host_name: nil, mec: nil, owner_id: nil, packages_stats: nil, schema_version: nil, server_id: nil, version: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::ActionsStats)) }
  def actions_stats; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::ActionsStats)).void }
  def actions_stats=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::AdminStats)) }
  def admin_stats; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::AdminStats)).void }
  def admin_stats=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::AdvisoryDBStats)) }
  def advisory_db_stats; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::AdvisoryDBStats)).void }
  def advisory_db_stats=(value); end

  sig { void }
  def clear_actions_stats; end

  sig { void }
  def clear_admin_stats; end

  sig { void }
  def clear_advisory_db_stats; end

  sig { void }
  def clear_collected_at; end

  sig { void }
  def clear_dormant_users; end

  sig { void }
  def clear_features; end

  sig { void }
  def clear_host_name; end

  sig { void }
  def clear_mec; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_packages_stats; end

  sig { void }
  def clear_schema_version; end

  sig { void }
  def clear_server_id; end

  sig { void }
  def clear_version; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def collected_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def collected_at=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::DormantUsers)) }
  def dormant_users; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::DormantUsers)).void }
  def dormant_users=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def features; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def features=(value); end

  sig { returns(String) }
  def host_name; end

  sig { params(value: String).void }
  def host_name=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::Mec)) }
  def mec; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::Mec)).void }
  def mec=(value); end

  sig { returns(String) }
  def owner_id; end

  sig { params(value: String).void }
  def owner_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::PackagesStats)) }
  def packages_stats; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::PackagesStats)).void }
  def packages_stats=(value); end

  sig { returns(String) }
  def schema_version; end

  sig { params(value: String).void }
  def schema_version=(value); end

  sig { returns(String) }
  def server_id; end

  sig { params(value: String).void }
  def server_id=(value); end

  sig { returns(String) }
  def version; end

  sig { params(value: String).void }
  def version=(value); end
end

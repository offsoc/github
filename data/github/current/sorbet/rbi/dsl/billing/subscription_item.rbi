# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Billing::SubscriptionItem`.
# Please instead update this file by running `bin/tapioca dsl Billing::SubscriptionItem`.

class Billing::SubscriptionItem
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def subscribable_types; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::SubscriptionItem).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::SubscriptionItem).void)
      ).returns(::Billing::SubscriptionItem)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::SubscriptionItem).void)
      ).returns(::Billing::SubscriptionItem)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::SubscriptionItem).void)
      ).returns(::Billing::SubscriptionItem)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::SubscriptionItem).void)
      ).returns(::Billing::SubscriptionItem)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::SubscriptionItem).void)
      ).returns(::Billing::SubscriptionItem)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Billing::SubscriptionItem]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Billing::SubscriptionItem)) }
    def fifth; end

    sig { returns(::Billing::SubscriptionItem) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Billing::SubscriptionItem)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Billing::SubscriptionItem) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Billing::SubscriptionItem).void)
      ).returns(T.nilable(T::Enumerator[::Billing::SubscriptionItem]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Billing::SubscriptionItem]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Billing::SubscriptionItem]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::SubscriptionItem).void)
      ).returns(::Billing::SubscriptionItem)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::SubscriptionItem).void)
      ).returns(::Billing::SubscriptionItem)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::SubscriptionItem).void)
      ).returns(::Billing::SubscriptionItem)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Billing::SubscriptionItem)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Billing::SubscriptionItem) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Billing::SubscriptionItem) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Billing::SubscriptionItem) }
    def first!; end

    sig { returns(T.nilable(::Billing::SubscriptionItem)) }
    def forty_two; end

    sig { returns(::Billing::SubscriptionItem) }
    def forty_two!; end

    sig { returns(T.nilable(::Billing::SubscriptionItem)) }
    def fourth; end

    sig { returns(::Billing::SubscriptionItem) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Billing::SubscriptionItem) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::SubscriptionItem).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::SubscriptionItem).void)
      ).returns(::Billing::SubscriptionItem)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::SubscriptionItem).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::SubscriptionItem).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Billing::SubscriptionItem)) }
    def second; end

    sig { returns(::Billing::SubscriptionItem) }
    def second!; end

    sig { returns(T.nilable(::Billing::SubscriptionItem)) }
    def second_to_last; end

    sig { returns(::Billing::SubscriptionItem) }
    def second_to_last!; end

    sig { returns(::Billing::SubscriptionItem) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Billing::SubscriptionItem) }
    def take!; end

    sig { returns(T.nilable(::Billing::SubscriptionItem)) }
    def third; end

    sig { returns(::Billing::SubscriptionItem) }
    def third!; end

    sig { returns(T.nilable(::Billing::SubscriptionItem)) }
    def third_to_last; end

    sig { returns(::Billing::SubscriptionItem) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def subscribable_Billing_ProductUUID!; end

    sig { returns(T::Boolean) }
    def subscribable_Billing_ProductUUID?; end

    sig { void }
    def subscribable_Marketplace_ListingPlan!; end

    sig { returns(T::Boolean) }
    def subscribable_Marketplace_ListingPlan?; end

    sig { void }
    def subscribable_SponsorsTier!; end

    sig { returns(T::Boolean) }
    def subscribable_SponsorsTier?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Billing::AppleSubscription)) }
    def apple_subscription; end

    sig { params(value: T.nilable(::Billing::AppleSubscription)).void }
    def apple_subscription=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::AppleSubscription) }
    def build_apple_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def build_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::GoogleSubscription) }
    def build_google_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationInstallation) }
    def build_integration_installation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::ListingPlan) }
    def build_marketplace_listing_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def build_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def build_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::ProductUUID) }
    def build_product_uuid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsTier) }
    def build_sponsors_tier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Sponsorship) }
    def build_sponsorship(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::AppleSubscription) }
    def create_apple_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::AppleSubscription) }
    def create_apple_subscription!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::GoogleSubscription) }
    def create_google_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::GoogleSubscription) }
    def create_google_subscription!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationInstallation) }
    def create_integration_installation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationInstallation) }
    def create_integration_installation!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::ListingPlan) }
    def create_marketplace_listing_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::ListingPlan) }
    def create_marketplace_listing_plan!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_plan_subscription!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::ProductUUID) }
    def create_product_uuid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::ProductUUID) }
    def create_product_uuid!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsTier) }
    def create_sponsors_tier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsTier) }
    def create_sponsors_tier!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Sponsorship) }
    def create_sponsorship(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Sponsorship) }
    def create_sponsorship!(*args, &blk); end

    sig { returns(T.nilable(::Customer)) }
    def customer; end

    sig { params(value: T.nilable(::Customer)).void }
    def customer=(value); end

    sig { returns(T.nilable(::Billing::GoogleSubscription)) }
    def google_subscription; end

    sig { params(value: T.nilable(::Billing::GoogleSubscription)).void }
    def google_subscription=(value); end

    sig { returns(T.nilable(::IntegrationInstallation)) }
    def integration_installation; end

    sig { params(value: T.nilable(::IntegrationInstallation)).void }
    def integration_installation=(value); end

    sig { returns(T.nilable(::Marketplace::ListingPlan)) }
    def marketplace_listing_plan; end

    sig { params(value: T.nilable(::Marketplace::ListingPlan)).void }
    def marketplace_listing_plan=(value); end

    sig { returns(T.nilable(::Organization)) }
    def organization; end

    sig { params(value: T.nilable(::Organization)).void }
    def organization=(value); end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def plan_subscription; end

    sig { params(value: T.nilable(::Billing::PlanSubscription)).void }
    def plan_subscription=(value); end

    sig { returns(T.nilable(::Billing::ProductUUID)) }
    def product_uuid; end

    sig { params(value: T.nilable(::Billing::ProductUUID)).void }
    def product_uuid=(value); end

    sig { returns(T.nilable(::Billing::AppleSubscription)) }
    def reload_apple_subscription; end

    sig { returns(T.nilable(::Customer)) }
    def reload_customer; end

    sig { returns(T.nilable(::Billing::GoogleSubscription)) }
    def reload_google_subscription; end

    sig { returns(T.nilable(::IntegrationInstallation)) }
    def reload_integration_installation; end

    sig { returns(T.nilable(::Marketplace::ListingPlan)) }
    def reload_marketplace_listing_plan; end

    sig { returns(T.nilable(::Organization)) }
    def reload_organization; end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def reload_plan_subscription; end

    sig { returns(T.nilable(::Billing::ProductUUID)) }
    def reload_product_uuid; end

    sig { returns(T.nilable(::SponsorsTier)) }
    def reload_sponsors_tier; end

    sig { returns(T.nilable(::Sponsorship)) }
    def reload_sponsorship; end

    sig { returns(T.untyped) }
    def reload_subscribable; end

    sig { returns(T.nilable(::SponsorsTier)) }
    def sponsors_tier; end

    sig { params(value: T.nilable(::SponsorsTier)).void }
    def sponsors_tier=(value); end

    sig { returns(T.nilable(::Sponsorship)) }
    def sponsorship; end

    sig { params(value: T.nilable(::Sponsorship)).void }
    def sponsorship=(value); end

    sig { returns(T.untyped) }
    def subscribable; end

    sig { params(value: T.untyped).void }
    def subscribable=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def at_sponsors_tier_price(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def cancelled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_enterprise(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_marketplace_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_marketplace_listing_plans(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_sponsors_tiers(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def free_trials(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins_marketplace_listing_plans(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins_marketplace_listings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def latest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_installed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_subscribable_Billing_ProductUUID(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_subscribable_Marketplace_ListingPlan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_subscribable_SponsorsTier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def purchased_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def purchased_between(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def purchased_since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def subscribable_Billing_ProductUUID(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def subscribable_Marketplace_ListingPlan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def subscribable_SponsorsTier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_any_active_marketplace_listing_plans(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_marketplace_listing_plans_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_product_uuid_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_product_uuid_type(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_apple_subscription; end

    sig { returns(Promise[T.untyped]) }
    def async_customer; end

    sig { returns(Promise[T.untyped]) }
    def async_google_subscription; end

    sig { returns(Promise[T.untyped]) }
    def async_integration_installation; end

    sig { returns(Promise[T.untyped]) }
    def async_marketplace_listing_plan; end

    sig { returns(Promise[T.untyped]) }
    def async_organization; end

    sig { returns(Promise[T.untyped]) }
    def async_plan_subscription; end

    sig { returns(Promise[T.untyped]) }
    def async_product_uuid; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_tier; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorship; end

    sig { returns(Promise[T.untyped]) }
    def async_subscribable; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def free_trial_ends_on; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def free_trial_ends_on=(value); end

    sig { returns(T::Boolean) }
    def free_trial_ends_on?; end

    sig { returns(T.nilable(::Date)) }
    def free_trial_ends_on_before_last_save; end

    sig { returns(T.untyped) }
    def free_trial_ends_on_before_type_cast; end

    sig { returns(T::Boolean) }
    def free_trial_ends_on_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def free_trial_ends_on_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def free_trial_ends_on_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def free_trial_ends_on_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def free_trial_ends_on_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def free_trial_ends_on_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def free_trial_ends_on_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def free_trial_ends_on_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def free_trial_ends_on_was; end

    sig { void }
    def free_trial_ends_on_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def installed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def installed_at=(value); end

    sig { returns(T::Boolean) }
    def installed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def installed_at_before_last_save; end

    sig { returns(T.untyped) }
    def installed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def installed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def installed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def installed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def installed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def installed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def installed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def installed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def installed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def installed_at_was; end

    sig { void }
    def installed_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def organization_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def organization_id=(value); end

    sig { returns(T::Boolean) }
    def organization_id?; end

    sig { returns(T.nilable(::Integer)) }
    def organization_id_before_last_save; end

    sig { returns(T.untyped) }
    def organization_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def organization_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def organization_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def organization_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def organization_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def organization_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def organization_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def organization_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def organization_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def organization_id_was; end

    sig { void }
    def organization_id_will_change!; end

    sig { returns(::Integer) }
    def plan_subscription_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def plan_subscription_id=(value); end

    sig { returns(T::Boolean) }
    def plan_subscription_id?; end

    sig { returns(T.nilable(::Integer)) }
    def plan_subscription_id_before_last_save; end

    sig { returns(T.untyped) }
    def plan_subscription_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def plan_subscription_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def plan_subscription_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def plan_subscription_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def plan_subscription_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def plan_subscription_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def plan_subscription_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def plan_subscription_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def plan_subscription_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def plan_subscription_id_was; end

    sig { void }
    def plan_subscription_id_will_change!; end

    sig { returns(::Integer) }
    def quantity; end

    sig { params(value: ::Integer).returns(::Integer) }
    def quantity=(value); end

    sig { returns(T::Boolean) }
    def quantity?; end

    sig { returns(T.nilable(::Integer)) }
    def quantity_before_last_save; end

    sig { returns(T.untyped) }
    def quantity_before_type_cast; end

    sig { returns(T::Boolean) }
    def quantity_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def quantity_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def quantity_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def quantity_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def quantity_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def quantity_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def quantity_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def quantity_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def quantity_was; end

    sig { void }
    def quantity_will_change!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_free_trial_ends_on!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_installed_at!; end

    sig { void }
    def restore_organization_id!; end

    sig { void }
    def restore_plan_subscription_id!; end

    sig { void }
    def restore_quantity!; end

    sig { void }
    def restore_skip_sync!; end

    sig { void }
    def restore_subscribable_id!; end

    sig { void }
    def restore_subscribable_type!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_free_trial_ends_on; end

    sig { returns(T::Boolean) }
    def saved_change_to_free_trial_ends_on?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_installed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_installed_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_organization_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_organization_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_plan_subscription_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_plan_subscription_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_quantity; end

    sig { returns(T::Boolean) }
    def saved_change_to_quantity?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_skip_sync; end

    sig { returns(T::Boolean) }
    def saved_change_to_skip_sync?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_subscribable_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_subscribable_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_subscribable_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_subscribable_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def skip_sync; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def skip_sync=(value); end

    sig { returns(T::Boolean) }
    def skip_sync?; end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_sync_before_last_save; end

    sig { returns(T.untyped) }
    def skip_sync_before_type_cast; end

    sig { returns(T::Boolean) }
    def skip_sync_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def skip_sync_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def skip_sync_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def skip_sync_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_sync_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def skip_sync_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def skip_sync_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_sync_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_sync_was; end

    sig { void }
    def skip_sync_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def subscribable_id=(value); end

    sig { returns(T::Boolean) }
    def subscribable_id?; end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id_before_last_save; end

    sig { returns(T.untyped) }
    def subscribable_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def subscribable_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subscribable_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subscribable_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def subscribable_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subscribable_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def subscribable_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id_was; end

    sig { void }
    def subscribable_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def subscribable_type; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def subscribable_type=(value); end

    sig { returns(T::Boolean) }
    def subscribable_type?; end

    sig { returns(T.nilable(::String)) }
    def subscribable_type_before_last_save; end

    sig { returns(T.untyped) }
    def subscribable_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def subscribable_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subscribable_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subscribable_type_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def subscribable_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def subscribable_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subscribable_type_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def subscribable_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def subscribable_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def subscribable_type_was; end

    sig { void }
    def subscribable_type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_free_trial_ends_on?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_installed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_organization_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_plan_subscription_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_quantity?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_skip_sync?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subscribable_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subscribable_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedPreludeBatchMethods
    sig { returns(T.untyped) }
    def billing_interval; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_billing_interval; end

    sig { returns(T.untyped) }
    def pending_subscription_item_change; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_pending_subscription_item_change; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def at_sponsors_tier_price(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def cancelled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_enterprise(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_marketplace_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_marketplace_listing_plans(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_sponsors_tiers(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def free_trials(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins_marketplace_listing_plans(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins_marketplace_listings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def latest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_installed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_subscribable_Billing_ProductUUID(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_subscribable_Marketplace_ListingPlan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_subscribable_SponsorsTier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def purchased_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def purchased_between(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def purchased_since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def subscribable_Billing_ProductUUID(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def subscribable_Marketplace_ListingPlan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def subscribable_SponsorsTier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_any_active_marketplace_listing_plans(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_marketplace_listing_plans_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_product_uuid_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_product_uuid_type(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Billing::SubscriptionItem } }

    sig { returns(T::Array[::Billing::SubscriptionItem]) }
    def to_a; end

    sig { returns(T::Array[::Billing::SubscriptionItem]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Billing::SubscriptionItem } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Billing::SubscriptionItem } }

    sig do
      params(
        records: T.any(::Billing::SubscriptionItem, T::Enumerable[T.any(::Billing::SubscriptionItem, T::Enumerable[::Billing::SubscriptionItem])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Billing::SubscriptionItem, T::Enumerable[T.any(::Billing::SubscriptionItem, T::Enumerable[::Billing::SubscriptionItem])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Billing::SubscriptionItem, T::Enumerable[T.any(::Billing::SubscriptionItem, T::Enumerable[::Billing::SubscriptionItem])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Billing::SubscriptionItem]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Billing::SubscriptionItem, T::Enumerable[T.any(::Billing::SubscriptionItem, T::Enumerable[::Billing::SubscriptionItem])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Billing::SubscriptionItem, T::Enumerable[T.any(::Billing::SubscriptionItem, T::Enumerable[::Billing::SubscriptionItem])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Billing::SubscriptionItem, T::Enumerable[T.any(::Billing::SubscriptionItem, T::Enumerable[::Billing::SubscriptionItem])])
      ).returns(T::Array[::Billing::SubscriptionItem])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Billing::SubscriptionItem]) }
    def target; end

    sig { returns(T::Array[::Billing::SubscriptionItem]) }
    def to_a; end

    sig { returns(T::Array[::Billing::SubscriptionItem]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Billing::SubscriptionItem } }

    sig { returns(T::Array[::Billing::SubscriptionItem]) }
    def to_a; end

    sig { returns(T::Array[::Billing::SubscriptionItem]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Billing::SubscriptionItem } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

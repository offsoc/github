# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::IssueUpdateLabel`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::IssueUpdateLabel`.

class Hydro::Schemas::Github::V1::IssueUpdateLabel
  sig do
    params(
      action: T.nilable(String),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue),
      labels: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::Label], T::Array[Hydro::Schemas::Github::V1::Entities::Label])),
      pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(action: nil, actor: nil, issue: nil, labels: T.unsafe(nil), pull_request: nil, repository: nil, repository_owner: nil); end

  sig { returns(String) }
  def action; end

  sig { params(value: String).void }
  def action=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_issue; end

  sig { void }
  def clear_labels; end

  sig { void }
  def clear_pull_request; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def issue=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::Label]) }
  def labels; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::Label]).void }
  def labels=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def pull_request=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end
end

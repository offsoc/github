# generated by turbocassette ts/cassettes/sessions/show_test.go
---
http_interactions:
  - request:
      method: post
      uri: http://localhost:8888/twirp/github.turboscan.Results/GetAlert
      body:
        encoding: UTF-8
        string: |-
          {
            "number": 1,
            "repositoryId": "23"
          }
      headers:
        Content-Type:
          - application/json
    response:
      status:
        code: 200
        message: null
      headers:
        Content-Length:
          - "10113"
        Content-Type:
          - application/json
      body:
        encoding: UTF-8
        string: |-
          {
            "hasCodePaths": false,
            "queryUri": "https://github.com/github/codeql/blob/0000000000000000000000000000000000000000/ruby/ql/src/queries/security/cwe-502/UnsafeDeserialization.ql",
            "refNameBytes": "cmVmcy9oZWFkcy9wcm90ZWN0ZWRfYQ==",
            "relatedLocations": [],
            "result": {
              "createdAt": "0001-01-01T00:00:00Z",
              "fixedAt": null,
              "guid": "11111111-2222-3333-4444-000000000000",
              "isFixed": false,
              "messageMarkdown": "",
              "messageText": "Import of ''re'' is not used.",
              "mostRecentInstance": {
                "analysisKey": {
                  "analysisKey": ".github/workflows/codeql.yml:ruby",
                  "category": ".github/workflows/codeql.yml:ruby",
                  "commitOid": "5ad5bac14c233cc80733ba528ce097dc2eca6aeb",
                  "environment": "{}",
                  "id": "2",
                  "tool": "CodeQL"
                },
                "classification": [],
                "commitOid": "5ad5bac14c233cc80733ba528ce097dc2eca6aeb",
                "createdAt": "0001-01-01T00:00:00Z",
                "hasFileClassification": false,
                "isFixed": false,
                "isOutdated": false,
                "location": {
                  "endColumn": 10,
                  "endLine": 4,
                  "filePath": "example.rb",
                  "startColumn": 1,
                  "startLine": 4
                },
                "messageText": "Import of ''re'' is not used.",
                "refNameBytes": "cmVmcy9oZWFkcy9wcm90ZWN0ZWRfYQ=="
              },
              "number": 1,
              "resolution": "NO_RESOLUTION",
              "resolutionNote": "",
              "resolvedAt": null,
              "resolverId": 0,
              "rule": {
                "fullDescription": "Deserializing user-controlled data may allow attackers to execute arbitrary code.",
                "help": "# Deserialization of user-controlled data\nDeserializing untrusted data using any method that allows the construction of arbitrary objects is easily exploitable and, in many cases, allows an attacker to execute arbitrary code.\n\n\n## Recommendation\nAvoid deserialization of untrusted data if possible. If the architecture permits it, use serialization formats that cannot represent arbitrary objects. For libraries that support it, such as the Ruby standard library's `JSON` module, ensure that the parser is configured to disable deserialization of arbitrary objects.\n\nIf deserializing an untrusted YAML document using the `psych` gem, prefer the `safe_load` and `safe_load_file` methods over `load` and `load_file`, as the former will safely handle untrusted data. Avoid passing untrusted data to the `load_stream` method. In `psych` version 4.0.0 and above, the `load` method can safely be used.\n\nIf deserializing an untrusted XML document using the `ox` gem, do not use `parse_obj` and `load` using the non-default :object mode. Instead use the `load` method in the default mode or better explicitly set a safe mode such as :hash.\n\nTo safely deserialize [Property List](https://en.wikipedia.org/wiki/Property_list) files using the `plist` gem, ensure that you pass `marshal: false` when calling `Plist.parse_xml`.\n\n\n## Example\nThe following example calls the `Marshal.load`, `JSON.load`, `YAML.load`, `Oj.load` and `Ox.parse_obj` methods on data from an HTTP request. Since these methods are capable of deserializing to arbitrary objects, this is inherently unsafe.\n\n\n```ruby\nrequire 'json'\nrequire 'yaml'\nrequire 'oj'\n\nclass UserController \u003c ActionController::Base\n  def marshal_example\n    data = Base64.decode64 params[:data]\n    object = Marshal.load data\n    # ...\n  end\n\n  def json_example\n    object = JSON.load params[:json]\n    # ...\n  end\n\n  def yaml_example\n    object = YAML.load params[:yaml]\n    # ...\n  end\n\n  def oj_example\n    object = Oj.load params[:json]\n    # ...\n  end\n\n  def ox_example\n    object = Ox.parse_obj params[:xml]\n    # ...\n  end\nend\n```\nUsing `JSON.parse` and `YAML.safe_load` instead, as in the following example, removes the vulnerability. Similarly, calling `Oj.load` with any mode other than `:object` is safe, as is calling `Oj.safe_load`. Note that there is no safe way to deserialize untrusted data using `Marshal`.\n\n\n```ruby\nrequire 'json'\n\nclass UserController \u003c ActionController::Base\n  def safe_json_example\n    object = JSON.parse params[:json]\n    # ...\n  end\n\n  def safe_yaml_example\n    object = YAML.safe_load params[:yaml]\n    # ...\n  end\n\n  def safe_oj_example\n    object = Oj.load params[:yaml], { mode: :strict }\n    # or\n    object = Oj.safe_load params[:yaml]\n    # ...\n  end\nend\n```\n\n## References\n* OWASP vulnerability description: [deserialization of untrusted data](https://www.owasp.org/index.php/Deserialization_of_untrusted_data).\n* Ruby documentation: [guidance on deserializing objects safely](https://docs.ruby-lang.org/en/3.0.0/doc/security_rdoc.html).\n* Ruby documentation: [security guidance on the Marshal library](https://ruby-doc.org/core-3.0.2/Marshal.html#module-Marshal-label-Security+considerations).\n* Ruby documentation: [security guidance on JSON.load](https://ruby-doc.org/stdlib-3.0.2/libdoc/json/rdoc/JSON.html#method-i-load).\n* Ruby documentation: [security guidance on the YAML library](https://ruby-doc.org/stdlib-3.0.2/libdoc/yaml/rdoc/YAML.html#module-YAML-label-Security).\n* You can read that how unsafe yaml load methods can lead to code executions: [Universal Deserialisation Gadget for Ruby 2.x-3.x ](https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html).\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html).\n",
                "helpUri": "",
                "name": "rb/unsafe-deserialization",
                "queryUri": "https://github.com/github/codeql/blob/0000000000000000000000000000000000000000/ruby/ql/src/queries/security/cwe-502/UnsafeDeserialization.ql",
                "sarifIdentifier": "rb/unsafe-deserialization",
                "severity": "WARNING",
                "shortDescription": "Deserialization of user-controlled data",
                "tags": [
                  "external/cwe/cwe-502",
                  "security"
                ]
              },
              "ruleSeverity": "WARNING",
              "securitySeverity": "CRITICAL",
              "tool": {
                "alertCount": "0",
                "guid": "7c61abe3-312b-1652-9c03-78f678a96a5f",
                "name": "CodeQL",
                "version": "1.0.0"
              },
              "updatedAt": "0001-01-01T00:00:00Z"
            },
            "ruleHelp": "# Deserialization of user-controlled data\nDeserializing untrusted data using any method that allows the construction of arbitrary objects is easily exploitable and, in many cases, allows an attacker to execute arbitrary code.\n\n\n## Recommendation\nAvoid deserialization of untrusted data if possible. If the architecture permits it, use serialization formats that cannot represent arbitrary objects. For libraries that support it, such as the Ruby standard library's `JSON` module, ensure that the parser is configured to disable deserialization of arbitrary objects.\n\nIf deserializing an untrusted YAML document using the `psych` gem, prefer the `safe_load` and `safe_load_file` methods over `load` and `load_file`, as the former will safely handle untrusted data. Avoid passing untrusted data to the `load_stream` method. In `psych` version 4.0.0 and above, the `load` method can safely be used.\n\nIf deserializing an untrusted XML document using the `ox` gem, do not use `parse_obj` and `load` using the non-default :object mode. Instead use the `load` method in the default mode or better explicitly set a safe mode such as :hash.\n\nTo safely deserialize [Property List](https://en.wikipedia.org/wiki/Property_list) files using the `plist` gem, ensure that you pass `marshal: false` when calling `Plist.parse_xml`.\n\n\n## Example\nThe following example calls the `Marshal.load`, `JSON.load`, `YAML.load`, `Oj.load` and `Ox.parse_obj` methods on data from an HTTP request. Since these methods are capable of deserializing to arbitrary objects, this is inherently unsafe.\n\n\n```ruby\nrequire 'json'\nrequire 'yaml'\nrequire 'oj'\n\nclass UserController \u003c ActionController::Base\n  def marshal_example\n    data = Base64.decode64 params[:data]\n    object = Marshal.load data\n    # ...\n  end\n\n  def json_example\n    object = JSON.load params[:json]\n    # ...\n  end\n\n  def yaml_example\n    object = YAML.load params[:yaml]\n    # ...\n  end\n\n  def oj_example\n    object = Oj.load params[:json]\n    # ...\n  end\n\n  def ox_example\n    object = Ox.parse_obj params[:xml]\n    # ...\n  end\nend\n```\nUsing `JSON.parse` and `YAML.safe_load` instead, as in the following example, removes the vulnerability. Similarly, calling `Oj.load` with any mode other than `:object` is safe, as is calling `Oj.safe_load`. Note that there is no safe way to deserialize untrusted data using `Marshal`.\n\n\n```ruby\nrequire 'json'\n\nclass UserController \u003c ActionController::Base\n  def safe_json_example\n    object = JSON.parse params[:json]\n    # ...\n  end\n\n  def safe_yaml_example\n    object = YAML.safe_load params[:yaml]\n    # ...\n  end\n\n  def safe_oj_example\n    object = Oj.load params[:yaml], { mode: :strict }\n    # or\n    object = Oj.safe_load params[:yaml]\n    # ...\n  end\nend\n```\n\n## References\n* OWASP vulnerability description: [deserialization of untrusted data](https://www.owasp.org/index.php/Deserialization_of_untrusted_data).\n* Ruby documentation: [guidance on deserializing objects safely](https://docs.ruby-lang.org/en/3.0.0/doc/security_rdoc.html).\n* Ruby documentation: [security guidance on the Marshal library](https://ruby-doc.org/core-3.0.2/Marshal.html#module-Marshal-label-Security+considerations).\n* Ruby documentation: [security guidance on JSON.load](https://ruby-doc.org/stdlib-3.0.2/libdoc/json/rdoc/JSON.html#method-i-load).\n* Ruby documentation: [security guidance on the YAML library](https://ruby-doc.org/stdlib-3.0.2/libdoc/yaml/rdoc/YAML.html#module-YAML-label-Security).\n* You can read that how unsafe yaml load methods can lead to code executions: [Universal Deserialisation Gadget for Ruby 2.x-3.x ](https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html).\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html).\n",
            "ruleTags": [
              "external/cwe/cwe-502",
              "security"
            ]
          }
      http_version: null
    recorded_at: Mon, 12 Feb 2024 19:30:02 GMT
  - request:
      method: post
      uri: http://localhost:8888/twirp/github.turboscan.Results/GetAlertInstances
      body:
        encoding: UTF-8
        string: |-
          {
            "alertNumber": 1,
            "branchesOnly": true,
            "limit": 100,
            "repositoryId": "23"
          }
      headers:
        Content-Type:
          - application/json
    response:
      status:
        code: 200
        message: null
      headers:
        Content-Length:
          - "1622"
        Content-Type:
          - application/json
      body:
        encoding: UTF-8
        string: |-
          {
            "instances": [
              {
                "analysisKey": {
                  "analysisKey": ".github/workflows/codeql.yml:ruby",
                  "category": ".github/workflows/codeql.yml:ruby",
                  "commitOid": "5ad5bac14c233cc80733ba528ce097dc2eca6aeb",
                  "environment": "{}",
                  "id": "2",
                  "tool": "CodeQL"
                },
                "classification": [],
                "commitOid": "5ad5bac14c233cc80733ba528ce097dc2eca6aeb",
                "createdAt": "0001-01-01T00:00:00Z",
                "hasFileClassification": false,
                "isFixed": false,
                "isOutdated": false,
                "location": {
                  "endColumn": 10,
                  "endLine": 4,
                  "filePath": "example.rb",
                  "startColumn": 1,
                  "startLine": 4
                },
                "messageText": "Import of ''re'' is not used.",
                "refNameBytes": "cmVmcy9oZWFkcy9wcm90ZWN0ZWRfYQ=="
              },
              {
                "analysisKey": {
                  "analysisKey": ".github/workflows/codeql.yml:ruby",
                  "category": ".github/workflows/codeql.yml:ruby",
                  "commitOid": "ca28b007b099ad3fd9688f9ff250c0e4464728bd",
                  "environment": "{}",
                  "id": "1",
                  "tool": "CodeQL"
                },
                "classification": [],
                "commitOid": "ca28b007b099ad3fd9688f9ff250c0e4464728bd",
                "createdAt": "0001-01-01T00:00:00Z",
                "hasFileClassification": false,
                "isFixed": false,
                "isOutdated": false,
                "location": {
                  "endColumn": 10,
                  "endLine": 4,
                  "filePath": "example.rb",
                  "startColumn": 1,
                  "startLine": 4
                },
                "messageText": "Import of ''re'' is not used.",
                "refNameBytes": "cmVmcy9oZWFkcy9tYXN0ZXI="
              }
            ],
            "totalCount": "2"
          }
      http_version: null
    recorded_at: Wed, 18 Jan 2023 14:11:06 GMT
recorded_with: VCR 5.1.0

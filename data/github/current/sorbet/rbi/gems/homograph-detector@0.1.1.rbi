# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `homograph-detector` gem.
# Please instead update this file by running `bin/tapioca gem homograph-detector`.

# source://homograph-detector//lib/homograph_detector.rb#8
class HomographDetector
  # @return [HomographDetector] a new instance of HomographDetector
  #
  # source://homograph-detector//lib/homograph_detector.rb#36
  def initialize(address); end

  # Returns the value of attribute address.
  #
  # source://homograph-detector//lib/homograph_detector.rb#34
  def address; end

  # @return [Boolean]
  #
  # source://homograph-detector//lib/homograph_detector.rb#44
  def homograph_attack?; end

  private

  # source://homograph-detector//lib/homograph_detector.rb#119
  def addressable_uri; end

  # @return [Boolean]
  #
  # source://homograph-detector//lib/homograph_detector.rb#88
  def domain_has_approved_combination_of_scripts?; end

  # @return [Boolean]
  #
  # source://homograph-detector//lib/homograph_detector.rb#81
  def domain_has_confusable_cyrillic_chars?; end

  # Returns true if one of the following is satisfied:
  #
  # - Two Unicode Scripts are used in the domain, neither are 'Latin'
  # - More than two Unicode Scripts are used in the domain
  # - Two Unicode Scripts are used in the domain, one is 'Latin' and the other
  #   is either 'Cyrillic' or 'Greek'
  #
  # @return [Boolean]
  #
  # source://homograph-detector//lib/homograph_detector.rb#69
  def domain_has_sketchy_combination_of_scripts?; end

  # Retrieve the set of Unicode Scripts used in the domain name. If the domain
  # name can't be parsed, return nil
  #
  # source://homograph-detector//lib/homograph_detector.rb#96
  def domain_scripts; end

  # Retrieve the domain without the TLD. If there's a parsing error, return nil
  #
  # source://homograph-detector//lib/homograph_detector.rb#106
  def domain_without_tld; end

  class << self
    # @return [Boolean]
    #
    # source://homograph-detector//lib/homograph_detector.rb#40
    def homograph_attack?(address); end
  end
end

# Certain combinations of Unicode Scripts are okay
#
# source://homograph-detector//lib/homograph_detector.rb#28
HomographDetector::APPROVED_SCRIPT_COMBINATIONS = T.let(T.unsafe(nil), Array)

# source://homograph-detector//lib/homograph_detector.rb#24
HomographDetector::CHINESE_SCRIPTS = T.let(T.unsafe(nil), Set)

# source://homograph-detector//lib/homograph_detector.rb#23
HomographDetector::JAPANESE_SCRIPTS = T.let(T.unsafe(nil), Set)

# source://homograph-detector//lib/homograph_detector.rb#25
HomographDetector::KOREAN_SCRIPTS = T.let(T.unsafe(nil), Set)

# Unicode Script names returned by the 'unicode-scripts' gem
#
# source://homograph-detector//lib/homograph_detector.rb#10
HomographDetector::SCRIPT_BOPOMOFO = T.let(T.unsafe(nil), String)

# source://homograph-detector//lib/homograph_detector.rb#11
HomographDetector::SCRIPT_COMMON = T.let(T.unsafe(nil), String)

# source://homograph-detector//lib/homograph_detector.rb#12
HomographDetector::SCRIPT_CYRILLIC = T.let(T.unsafe(nil), String)

# source://homograph-detector//lib/homograph_detector.rb#13
HomographDetector::SCRIPT_GREEK = T.let(T.unsafe(nil), String)

# source://homograph-detector//lib/homograph_detector.rb#14
HomographDetector::SCRIPT_HAN = T.let(T.unsafe(nil), String)

# source://homograph-detector//lib/homograph_detector.rb#15
HomographDetector::SCRIPT_HANGUL = T.let(T.unsafe(nil), String)

# source://homograph-detector//lib/homograph_detector.rb#16
HomographDetector::SCRIPT_HIRAGANA = T.let(T.unsafe(nil), String)

# source://homograph-detector//lib/homograph_detector.rb#17
HomographDetector::SCRIPT_INHERITED = T.let(T.unsafe(nil), String)

# source://homograph-detector//lib/homograph_detector.rb#18
HomographDetector::SCRIPT_KATAKANA = T.let(T.unsafe(nil), String)

# source://homograph-detector//lib/homograph_detector.rb#19
HomographDetector::SCRIPT_LATIN = T.let(T.unsafe(nil), String)

# Groups of Unicode Scripts
#
# source://homograph-detector//lib/homograph_detector.rb#22
HomographDetector::SPECIAL_SCRIPTS = T.let(T.unsafe(nil), Set)

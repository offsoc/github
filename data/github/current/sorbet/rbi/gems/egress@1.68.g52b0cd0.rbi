# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `egress` gem.
# Please instead update this file by running `bin/tapioca gem egress`.

# source://egress//lib/egress/context_wrapper.rb#3
module Egress
  class << self
    # Public: Helper method to cleanly check access so that you can make a call
    # like this:
    #
    #    Egress.access.allowed?(BlogPost, context)
    #
    # Feel free to make a similar definition in your own module for clarity.
    #
    # Returns true if access is allowed, otherwise false.
    #
    # source://egress//lib/egress.rb#12
    def access; end
  end
end

# Public: Provide role based authorization for resources
#
# This class is used to define access control for resources which is
# done by specifying roles and access control permissions for those
# roles.
#
# source://egress//lib/egress/access_control.rb#54
class Egress::AccessControl
  extend ::Egress::DSL
end

# Public: Defines the actual roles, scopes and permissions that were
# granted (if any).
#
# source://egress//lib/egress/access_grant.rb#6
class Egress::AccessGrant
  # @return [AccessGrant] a new instance of AccessGrant
  #
  # source://egress//lib/egress/access_grant.rb#9
  def initialize(access_granted, options = T.unsafe(nil)); end

  # source://egress//lib/egress/access_grant.rb#26
  def accepted_scopes; end

  # @return [Boolean]
  #
  # source://egress//lib/egress/access_grant.rb#18
  def access_allowed?; end

  # source://egress//lib/egress/access_grant.rb#22
  def matched_role_names; end

  # Returns the value of attribute matched_roles.
  #
  # source://egress//lib/egress/access_grant.rb#7
  def matched_roles; end

  # Returns the value of attribute registered_roles.
  #
  # source://egress//lib/egress/access_grant.rb#7
  def registered_roles; end

  # Returns the value of attribute verb.
  #
  # source://egress//lib/egress/access_grant.rb#7
  def verb; end
end

# Private: Collect Role results to find matched roles and build an AccessGrant object.
#
# source://egress//lib/egress/access_grant.rb#56
class Egress::AccessGrantBuilder
  include ::Egress::LegacyAccessors

  # @return [AccessGrantBuilder] a new instance of AccessGrantBuilder
  #
  # source://egress//lib/egress/access_grant.rb#62
  def initialize(context); end

  # source://egress//lib/egress/access_grant.rb#73
  def [](key); end

  # source://egress//lib/egress/access_grant.rb#85
  def access_granted; end

  # source://egress//lib/egress/access_grant.rb#67
  def actors(*_types); end

  # Build up an AccessGrant object.
  #
  # Returns a new AccessGrant.
  #
  # source://egress//lib/egress/access_grant.rb#92
  def build(options = T.unsafe(nil)); end

  # source://egress//lib/egress/access_grant.rb#77
  def matched_roles; end

  # source://egress//lib/egress/access_grant.rb#81
  def registered_roles; end

  private

  # Returns the value of attribute context.
  #
  # source://egress//lib/egress/access_grant.rb#57
  def context; end
end

# Public: Error raised if access permissions are checked for an undefined
# verb.
#
# Example:
#   Egress.access.allowed?(BlogPost, :list_something_not_defined)
#
# This error will be raised unless there is an access definition like this
# on the BlogPost::AccessControl object:
#
#   define_access :list_something_not_defined |access|
#   end
#
# source://egress//lib/egress/access_control.rb#47
class Egress::AccessVerbError < ::StandardError; end

# Public: Transforms the context hash into an OpenStruct-like object
#
# source://egress//lib/egress/context_wrapper.rb#5
class Egress::ContextWrapper
  # @return [ContextWrapper] a new instance of ContextWrapper
  #
  # source://egress//lib/egress/context_wrapper.rb#6
  def initialize(data = T.unsafe(nil)); end

  # source://egress//lib/egress/context_wrapper.rb#10
  def [](key); end

  # TODO: This method is not used within Egress, but it is used in a
  # handful of roles in the monolith. We should remove those and then
  # remove this entire class.
  #
  # source://egress//lib/egress/context_wrapper.rb#17
  def method_missing(symbol, *_args); end

  private

  # @return [Boolean]
  #
  # source://egress//lib/egress/context_wrapper.rb#21
  def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end
end

# source://egress//lib/egress/dsl.rb#8
module Egress::DSL
  # Public: A String array of acceptable, registered scopes.
  #
  # source://egress//lib/egress/dsl.rb#105
  def acceptable_scope_names; end

  # Public A Hash of acceptable Scopes.
  #
  # source://egress//lib/egress/dsl.rb#17
  def acceptable_scopes; end

  # Public: Determines if access is allowed to the specified resource based
  # on defined access permissions and roles. You can setup permissions for a
  # resource like this:
  #
  # role :everyone
  #
  # role :user do |context|
  #   user = extract(context, :user)
  #   user && scope?(user, 'repo')
  # end
  #
  # define_access :create do |access|
  #   access.allow :user
  # end
  #
  # context - A Hash with the following keys:
  #           verb     - Symbol. The action being performed on the...
  #           resource - Object that access to is being controled.
  #           ...      - Any other object that is required in role
  #                      definitions to determine access rights.
  #
  # Returns true if access is allowed, otherwise false.
  #
  # @return [Boolean]
  #
  # source://egress//lib/egress/dsl.rb#217
  def access_allowed?(context); end

  # Public: Determines if access is allowed to the specified resource based
  # on defined access permissions and roles. You can setup permissions for a
  # resource like this:
  #
  # role :everyone
  #
  # role :user do |context|
  #   user = extract(context, :user)
  #   user && scope?(user, 'repo')
  # end
  #
  # define_access :create do |access|
  #   access.allow :user
  # end
  #
  # context - A Hash with the following keys:
  #           verb     - Symbol. The action being performed on the...
  #           resource - Object that access to is being controled.
  #           ...      - Any other object that is required in role
  #                      definitions to determine access rights.
  #
  # Returns an AccessGrant object.
  #
  # source://egress//lib/egress/dsl.rb#243
  def access_grant(context); end

  # Public: Define access policy for a resource that was specified in
  # control_access(Resource)
  #
  # verbs - A symbol (or Array of symbols) specifying the verbs that
  #         access is to be defined for.
  #
  # Returns nothing
  #
  # source://egress//lib/egress/dsl.rb#165
  def define_access(*verbs); end

  # Public: Extract objects from the access control context.
  #
  # context - A Hash that is the access control context.
  # keys    - One or more keys to extract from the context.
  #
  # Returns an Array of objects for the specified keys or a single object if
  # only one key is specified. Returns nil if context is nil.
  #
  # source://egress//lib/egress/dsl.rb#263
  def extract(context, *keys); end

  # Public: A String array of acceptable, registered scopes that are
  # appropriate for a user to grant.
  #
  # source://egress//lib/egress/dsl.rb#116
  def grantable_scope_names; end

  # Public A Hash of grantable Scopes.
  #
  # source://egress//lib/egress/dsl.rb#110
  def grantable_scopes; end

  # Public: Normalizes a given set of scopes. By default, normalizes to a set
  # of scopes that are grantable.
  #
  # names   - A String of comma-separated scopes. Optionally an Array of
  #           String scopes.
  # options - A Hash of additional options (optional).
  #           :visibility - Normalize to the specified visibility:
  #                         :grantable - Filter by scopes that are grantable (default).
  #                         :public    - Filter by scopes that are public.
  #                         :all       - All scopes.
  #
  # Returns an Array of scope names.
  #
  # source://egress//lib/egress/dsl.rb#68
  def normalize_scopes(names, options = T.unsafe(nil)); end

  # source://egress//lib/egress/dsl.rb#9
  def permissions; end

  # Public: A String array of acceptable, registered scopes that are
  # appropriate to display publically (Usually a superset of #public_scopes).
  #
  # source://egress//lib/egress/dsl.rb#127
  def public_scope_names; end

  # Public A Hash of public Scopes.
  #
  # source://egress//lib/egress/dsl.rb#121
  def public_scopes; end

  # Public: Define a role to be used for access control.
  #
  # name    - A String that is the name of this role (must be unique).
  # options - An options Hash.
  #           :depends_on - An Array of other roles this role depends on
  # block   - A block to be evaluated that defines this role. This block
  #           should return true if the current request meets the role criteria,
  #           otherwise false.
  #
  # Returns nothing.
  #
  # @raise [RoleError]
  #
  # source://egress//lib/egress/dsl.rb#151
  def role(name, options = T.unsafe(nil), &block); end

  # source://egress//lib/egress/dsl.rb#13
  def roles; end

  # Public: Define a named scope. Scopes are used to limit access for a user
  # in a role. Generally this is done because someone is impersonating a
  # user in order to access a resource (OAuth).
  #
  # name    - The String name of the scope.
  # options - A Hash of additional options (optional).
  #           :parent         - The String parent scope, that includes this
  #                             scope's access rights (optional).
  #           :description    - String human description of this scope.
  #           :visibility     - A Symbol denoting the visibility of this scope
  #                            (optional). By default, scopes are accessible,
  #                            but private. Valid values are:
  #                            :public    - Boolean flag if this scope is
  #                                         suitable to be revealed publically.
  #                            :grantable - Boolean flag if users can grant
  #                                         this scope. Grantable scopes are
  #                                         always public too.
  #           :no_sudo        - A Boolean flag if this scope should not be
  #                             protected by sudo mode to grant (optional,
  #                             default: false).
  #
  # Returns nothing.
  #
  # source://egress//lib/egress/dsl.rb#43
  def scope(name, options = T.unsafe(nil)); end

  # Public: Check if a Userish object has the proper scope.
  #
  # userish - An object that responds to #scopes.
  # scope   - The String scope to check against the scopes on userish.
  # options - The Hash of addition options for scope checking (optional).
  #           :target    - An object that responds to :method. Implies that your
  #                        userish object responds to the methods you've
  #                        defined on your whitelist.
  #           :method    - The method that returns the FixNum to be checked
  #                        against the whitelist. Defaults to :id.
  #           :whitelist - The Symbol name of a whitelist you've defined for
  #                        this scope.
  #
  # Returns truthy if this user has the specified scope.
  #
  # @return [Boolean]
  #
  # source://egress//lib/egress/dsl.rb#186
  def scope?(userish, scope, options = T.unsafe(nil)); end

  # source://egress//lib/egress/dsl.rb#17
  def scopes; end

  # Public: A String array of scopes that should be protected by sudo_mode
  #
  # source://egress//lib/egress/dsl.rb#137
  def sudo_protected_scope_names; end

  # Public A Hash of sudo protected Scopes.
  #
  # source://egress//lib/egress/dsl.rb#132
  def sudo_protected_scopes; end
end

# TODO: remove all of these
# Private: Legacy accessors for the context hash.
#
# source://egress//lib/egress/access_grant.rb#33
module Egress::LegacyAccessors
  # source://egress//lib/egress/access_grant.rb#46
  def asset; end

  # source://egress//lib/egress/access_grant.rb#34
  def integration; end

  # source://egress//lib/egress/access_grant.rb#42
  def member; end

  # source://egress//lib/egress/access_grant.rb#50
  def target; end

  # source://egress//lib/egress/access_grant.rb#38
  def user; end
end

# Private: Represents access permissions defined for a resource.
#
# source://egress//lib/egress/permission.rb#5
class Egress::Permission
  # @return [Permission] a new instance of Permission
  #
  # source://egress//lib/egress/permission.rb#6
  def initialize(auth); end

  # source://egress//lib/egress/permission.rb#13
  def allow(role, &block); end

  # source://egress//lib/egress/permission.rb#17
  def ensure_context(*keys, &block); end

  # @return [Boolean]
  #
  # source://egress//lib/egress/permission.rb#25
  def grant_for?(context); end

  private

  # Returns the value of attribute checks.
  #
  # source://egress//lib/egress/permission.rb#45
  def checks; end

  # @return [Boolean]
  #
  # source://egress//lib/egress/permission.rb#47
  def pre_conditions_met?(context); end

  # Returns the value of attribute required_blocks.
  #
  # source://egress//lib/egress/permission.rb#45
  def required_blocks; end

  # Returns the value of attribute required_keys.
  #
  # source://egress//lib/egress/permission.rb#45
  def required_keys; end
end

# Private: Represents a role that can be used to limit access to a resource.
#
# source://egress//lib/egress/role.rb#4
class Egress::Role
  # @return [Role] a new instance of Role
  #
  # source://egress//lib/egress/role.rb#7
  def initialize(options = T.unsafe(nil), &block); end

  # Public: Array of string scopes acceptable for this role.
  #
  # Returns an array of strings.
  #
  # source://egress//lib/egress/role.rb#20
  def accepted_scopes; end

  # Returns the value of attribute access_control.
  #
  # source://egress//lib/egress/role.rb#5
  def access_control; end

  # Returns the value of attribute dependents.
  #
  # source://egress//lib/egress/role.rb#5
  def dependents; end

  # Private: Check if this role has access to the context.
  #
  # context - The Hash context.
  #
  # Returns truthy if the role has access.
  #
  # @return [Boolean]
  #
  # source://egress//lib/egress/role.rb#29
  def has_access?(context); end

  # Private: Check if the context has an appropriate scope.
  #
  # Returns truthy if the context has the appropriate scope.
  #
  # @return [Boolean]
  #
  # source://egress//lib/egress/role.rb#47
  def has_scope?(context); end

  # Returns the value of attribute name.
  #
  # source://egress//lib/egress/role.rb#5
  def name; end

  # Returns the value of attribute role.
  #
  # source://egress//lib/egress/role.rb#5
  def role; end

  # Returns the value of attribute scope.
  #
  # source://egress//lib/egress/role.rb#5
  def scope; end
end

# Public: Error raised if a role is used that has not been defined or has
# been previously defined.
#
# Example:
#   define_access :delete do |access|
#     access.allow :blog_deleter
#   end
#
# This error will be raised unless there is a explict defintion of the
# allowed role like this:
#
#   role :blog_deleter
#
# source://egress//lib/egress/access_control.rb#33
class Egress::RoleError < ::StandardError; end

# Private: Represents a named scope to limit access in a role.
#
# source://egress//lib/egress/scope.rb#4
class Egress::Scope
  # @return [Scope] a new instance of Scope
  #
  # source://egress//lib/egress/scope.rb#7
  def initialize(attrs = T.unsafe(nil)); end

  # Public: Array of String scopes that are acceptable for this scope and its
  # parents.
  #
  # Returns an array of Strings.
  #
  # source://egress//lib/egress/scope.rb#77
  def accepted_scopes; end

  # @return [Boolean]
  #
  # source://egress//lib/egress/scope.rb#45
  def allowed_by?(userish, options = T.unsafe(nil)); end

  # Public: Define a child scope. Child scopes provide granularity to their
  # parent scope. A request with the parent scope will also match any defined
  # child scopes (and any of their children and so on).
  #
  # name - The String name of the child scope to define.
  #
  # Returns nothing.
  #
  # source://egress//lib/egress/scope.rb#41
  def child_scope(name); end

  # Returns the value of attribute description.
  #
  # source://egress//lib/egress/scope.rb#5
  def description; end

  # Public: Boolean flag if this scope is appropriate for a
  # user to grant.
  #
  # @return [Boolean]
  #
  # source://egress//lib/egress/scope.rb#85
  def grantable?; end

  # Public: Boolean if this scope or it's parent scopes contains the
  # requested scopes.
  #
  # scopes - Array of strings scopes.
  #
  # Returns truthy if requested scopes are contained in this scope or its
  # parents.
  #
  # @return [Boolean]
  #
  # source://egress//lib/egress/scope.rb#64
  def has_scopes?(*scopes); end

  # Public: Define a new whitelist on a scope.
  #
  # method  - The Symbol of a method on a Userish object that will return an
  #           Array of ids that defines this whitelist.
  # options - The Hash of additional options (optional, default: {}).
  #           :method - The method on the target object to be called to
  #                     check against this whitelist. (optional, default: :id).
  # Returns nothing.
  #
  # source://egress//lib/egress/scope.rb#29
  def has_whitelist(method, options = T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://egress//lib/egress/scope.rb#5
  def name; end

  # Returns the value of attribute no_sudo.
  #
  # source://egress//lib/egress/scope.rb#5
  def no_sudo; end

  # Returns the value of attribute parent.
  #
  # source://egress//lib/egress/scope.rb#5
  def parent; end

  # Public: Boolean flag if this scope is appropriate for
  # public display.
  #
  # @return [Boolean]
  #
  # source://egress//lib/egress/scope.rb#91
  def public?; end

  # Public: Boolean flag if this scope should be protected
  # by sudo mode.
  #
  # @return [Boolean]
  #
  # source://egress//lib/egress/scope.rb#97
  def sudo_protected?; end

  # Returns the value of attribute visibility.
  #
  # source://egress//lib/egress/scope.rb#5
  def visibility; end

  # source://egress//lib/egress/scope.rb#17
  def whitelists; end

  private

  # Private: Array of scopes that are children to this scope.
  #
  # source://egress//lib/egress/scope.rb#104
  def children; end

  # @return [Boolean]
  #
  # source://egress//lib/egress/scope.rb#108
  def whitelisted?(userish, options = T.unsafe(nil)); end
end

# Public: Error raised if a scope check is requested for an undefined scope.
#
# Example:
#   role :blog_writer do |context|
#     user = extract(context, :user)
#     user && scope?(user, 'undefined:scope')
#   end
#
# This error will be raised unless there is a explict defintion of the
# requested scope like this:
#
#   scope 'undefined:scope'
#
# source://egress//lib/egress/access_control.rb#18
class Egress::ScopeError < ::StandardError; end

{"version":3,"file":"chunk-ui_packages_chart-card_ChartCard_tsx-xxxxxxxxxxxx.js","mappings":"0RAaA,MAAeA,CAAAA,EAAAA,EAAAA,aAAAA,EAA4B,CAAC,GCNrC,SAASC,EAAc,CAACC,SAAAA,CAAQ,CAAqB,EAC1D,GAAM,CAACC,KAAAA,CAAI,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,GAC1B,MAAOF,cAAAA,EAAuB,sB,SAAGD,C,GAAe,IAClD,CACAD,EAAcK,WAAW,CAAG,0B,0BCTrB,SAASC,EAAYC,CAAqB,EAC/C,OAAQ,OAAOA,GACb,IAAK,SACL,IAAK,SACH,OAAOA,EAAKC,QAAQ,EACtB,KAAK,SACH,GAAIC,MAAMC,OAAO,CAACH,GAChB,OAAOA,EAAKI,GAAG,CAACL,GAAaM,IAAI,CAAC,IAC7B,GAAIL,OAAAA,GAAiB,UAAWA,EACrC,OAAOD,EAAYC,EAAKM,KAAK,CAACZ,QAAQ,EAEtC,MAAO,EAEX,SACE,MAAO,EACX,CACF,CCRO,SAASa,EAAM,CAACC,GAAAA,EAAK,IAAI,CAAEC,GAAAA,EAAK,CAAC,CAAC,CAAEf,SAAAA,CAAQ,CAAa,EAC9D,GAAM,CAACgB,SAAAA,CAAQ,CAAEf,KAAAA,CAAI,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,GAIpC,MAHAc,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACRD,EAASX,EAAYL,GACvB,EAAG,CAACgB,EAAUhB,EAAS,EAChBC,cAAAA,EACL,UAACiB,EAAAA,CAAOA,CAAAA,CAACH,GAAI,CAACI,SAAU,EAAGC,WAAY,IAAK,GAAGL,CAAE,EAAGD,GAAIA,E,SACrDd,C,GAED,IACN,CACAa,EAAMT,WAAW,CAAG,kB,eCZb,SAASiB,EAAY,CAACN,GAAAA,EAAK,CAAC,CAAC,CAAEf,SAAAA,CAAQ,CAAmB,EAC/D,GAAM,CAACsB,eAAAA,CAAc,CAAErB,KAAAA,CAAI,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,GAI1C,MAHAc,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACRK,EAAejB,EAAYL,GAC7B,EAAG,CAACsB,EAAgBtB,EAAS,EACtBC,cAAAA,EAAuB,UAACsB,EAAAA,CAAIA,CAAAA,CAACR,GAAI,CAACS,MAAO,WAAYL,SAAU,EAAG,GAAGJ,CAAE,E,SAAIf,C,GAAmB,IACvG,CCRO,SAASyB,EAAe,CAACzB,SAAAA,CAAQ,CAAsB,EAC5D,GAAM,CAACC,KAAAA,CAAI,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,GAC1B,MAAOF,cAAAA,EAAuB,sB,SAAGD,C,GAAe,IAClD,CDMAqB,EAAYjB,WAAW,CAAG,wBCL1BqB,EAAerB,WAAW,CAAG,2B,2HCEtB,IAAMsB,EAAuC,CAClDC,UAAW,EACXC,UAAW,EACXC,cAAe,2BACfC,kBAAmB,OACnBC,UAAW,6BACXC,OAAQ,CACNC,MAAO,CACLT,MAAO,wBACT,CACF,EACAU,MAAO,CACLD,MAAO,CACLT,MAAO,wBACT,CACF,CACF,EAuIA,EArIuC,CACrCW,cAAe,CACbC,mBAAoB,CAClBC,MAAO,CAAC,SAAU,SAAS,CAE/B,EACAC,OAAQ,CACN,0DACA,4DACA,8DACA,0DACA,8DACA,wDACA,8DACA,8DACA,0DACA,0DACD,CACDC,QAAS,CACPC,MAAO,OACPP,MAAO,CACLT,MAAO,sBACT,EACAiB,cAAe,KACjB,EACAP,MAAO,CACLM,MAAO,OACPP,MAAO,CACLT,MAAO,wBACT,EACAkB,KAAMC,KAAAA,CACR,EACAC,QAAS,CACPC,gBAAiB,yBACjBC,aAAc,EACdC,YAAa,2BACbC,YAAa,EACbC,MAAO,OACPC,QAAS,GACTC,OAAQ,CACNC,QAAS,EACTC,QAAS,EACTC,QAAS,IACTC,MAAO,EACP/B,MAAO,4BACT,EACAS,MAAO,CACLT,MAAO,yBACPgC,WAAY,6BACZrC,SAAU,6BACZ,EACAsC,QAAS,GACTC,aA7EF,0MA8EEC,YA3EF,uNA4EEC,aA1EwB,UA2E1B,EACAC,QAAS,CACPC,QAAS,EACX,EACAC,MAAO,CACLC,UAAW,GACXC,QAAS,CAAC,EAAG,EAAG,EAAG,EAAE,CACrBpB,gBAAiB,sDACjBZ,MAAO,CACLuB,WAAY,6BACZrC,SAAU,OACVK,MAAO,wBACT,CACF,EACA0C,OAAQ,CACNC,UAAW,CACThD,SAAU,sBACViD,KAAM,6BACN5C,MAAO,wBACT,EACAgB,MAAO,OACPC,cAAe,MACf4B,EAAG,GACHC,EAAG,IACHC,eAAgB,CACd/C,MAAO,wBACT,EACAU,MAAO,CACLD,MAAO,CACLT,MAAO,wBACT,CACF,CACF,EACAgD,WAAY,CACVC,cAAe,CACbX,QAAS,EACX,CACF,EACAY,UAAW,CACTC,uBAAwB,EAC1B,EACAC,YAAa,CACXC,OAAQ,CACNb,UAAW,EACb,EACAc,OAAQ,CACNd,UAAW,GACXe,OAAQ,CACNjB,QAAS,EACX,CACF,EACAkB,IAAK,CACHjC,YAAa,wBACf,EACAkC,OAAQ,CACNlC,YAAa,wBACf,CACF,EACAmC,MAAO,CACLvD,UAAW,EACXC,UAAW,EACXC,cAAe,2BACfC,kBAAmB,OACnBC,UAAW,6BACXC,OAAQ,CACNC,MAAO,CACLT,MAAO,wBACT,CACF,EACAU,MAAO,CACLD,MAAO,CACLT,MAAO,wBACT,CACF,CACF,EACA2D,MAAO,CAACzD,EAAY,ECpJtB0D,IAAwBC,KACxBC,IAAqBD,KACrBE,IAAoBF,KACpBG,IAA2BH,KAE3BA,IAAAA,UAAqB,CAAC,CACpBI,KAAM,CACJC,aAAc,IACdC,aAAc,GAChB,CACF,GAEO,IAAMC,EAAyC,CACpDC,GAAI,QACJC,MAAO,QACPC,OAAQ,QACRC,MAAO,QACPC,UAAW,OACb,EAiCO,SAASC,EAAM,CACpB5D,OAAAA,CAAM,CACN6D,8BAAAA,CAA6B,CAC7BvB,YAAAA,CAAW,CACXC,OAAAA,CAAM,CACNuB,KAAAA,EAAO,MAAM,CACbC,WAAAA,CAAU,CACVC,aAAAA,CAAY,CACZC,WAAAA,CAAU,CACVC,aAAAA,EAAe,CAAC,CAAC,CACjBC,eAAAA,EAAiB,CAAC,CAAC,CACnBC,OAAAA,EAAS,EAAI,CACF,EACX,GAAM,CAACxE,MAAAA,CAAK,CAAEyE,YAAAA,CAAW,CAAE1G,KAAAA,CAAI,CAAE2G,SAAAA,CAAQ,CAAC,CAAG1G,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,GAClD0G,EAAgBhC,EAAOiC,MAAM,CAAG,GAAK7G,cAAAA,EACrC8G,EAAmBlC,EAAOiC,MAAM,CAAG,EAEnCE,EAAoBxG,MAAMC,OAAO,CAAC+F,GAAgBA,EAAe,CAACA,EAAa,CAE/ES,EAAcrC,GAAesC,SAnC5BA,EAAqBC,CAAwB,CAAEC,CAAW,CAAEC,CAAa,EAChF,GAAI,iBAAOF,GAAoBA,OAAAA,EAC7B,MAAO,GAET,GAAIA,CAAG,CAACC,EAAI,GAAKC,EACf,MAAO,GAEP,IAAK,IAAMC,KAAQH,EACjB,GAAIA,KAAcxE,IAAdwE,CAAG,CAACG,EAAK,CACX,OAAOJ,EAAqBC,CAAG,CAACG,EAAK,CAAEF,EAAKC,GAIlD,MAAO,EACT,EAqB0DzC,EAAa,WAAY,UAC3E2C,EAAmBC,CAAAA,EAAAA,EAAAA,CAAAA,EACvB,CAAC,EACDC,EACA,CACE,GAAIV,EACA,CACE5E,cAAe,CACbC,mBAAoB,CAClBC,MAAO,CAAC,SAAU,SAAS,CAE/B,CACF,EACA,CAAC,CAAC,CACN0B,MAAO,CACLqC,KAAAA,EACAsB,OAAQ,iBAAOzH,EAAoBA,EAAO2F,CAAY,CAAC3F,EAAK,EAE9D0H,KAAM,CACJjB,OAAAA,CACF,EACApE,OAAAA,EACAoC,UAAW,CACTkD,aAAc,CACZ1F,MAAO,CACLQ,KAAMR,CACR,EACAK,QAAS,CACPG,KAAMiE,CACR,CACF,EACAkB,SAAU3F,CACZ,EACAuD,KAAM,CACJtD,cAAe,CACb2F,oBAAqB,CAAC,EAAE5F,EAAM,oBAAoB,CAAC,CACnD6F,UAAW,CACTC,WAAY,CAAC,EAAE9F,EAAM,UAAU,CAAC,CAEpC,CACF,EACAgC,OAAQ,CACNJ,QAAS+C,EACT,GAAIE,EAAmB,CAACvE,MAAO,QAASyF,OAAQ,WAAYxF,cAAe,QAAQ,EAAI,CAAC,CAAC,EAE3FmC,YAAa4C,CAAAA,EAAAA,EAAAA,CAAAA,EACX,CAAC,EACDC,EAAe7C,WAAW,CAC1B,CACEC,OAAQ,CACNE,OAAQ,CACNjB,QAAS7D,cAAAA,CACX,EACAiI,oBAAqBjI,cAAAA,CACvB,CACF,EACA2E,GAEFC,OAAAA,EACAjC,QAAS4E,CAAAA,EAAAA,EAAAA,CAAAA,EACP,CAAC,EACD,CACE1D,QAAS7D,cAAAA,EACTkI,OAAQlB,CACV,EACAR,GAEFvB,MAAOsC,CAAAA,EAAAA,EAAAA,CAAAA,EACL,CAAC,EACD,CACEY,QAASnI,cAAAA,EACToI,cAAepI,cAAAA,EAAuB,EAAI,EAC1CiC,MAAO,CACLQ,KAAMzC,cAAAA,EAAuBoG,EAAa1D,KAAAA,CAC5C,CACF,EACA2D,GAEFnB,MAAO6B,EAAkBtG,GAAG,CAAC4H,IAC3B,GAAKA,EACL,MAAOd,CAAAA,EAAAA,EAAAA,CAAAA,EACL,CAAC,EACD9F,EACA,CACE0G,QAASnI,cAAAA,EACToI,cAAepI,cAAAA,EAAuB,EAAI,EAC1CiC,MAAO,CACLQ,KAAMzC,cAAAA,EAAuBsG,EAAa5D,KAAAA,CAC5C,CACF,EACA2F,EAEJ,EACF,EACAnC,GAIF,GAAIoB,EAAQ1C,MAAM,EAAI0C,EAAQjF,MAAM,CAAE,CACpC,IAAIiG,EAAa,EACXC,EAAwC,EAAE,CAChD,IAAK,IAAMC,KAAgBlB,EAAQ1C,MAAM,CACvC,GAAI4D,eAAAA,EAAarC,IAAI,CAAmB,CACtC,IAAI5E,CACAiH,CAAAA,EAAajH,KAAK,CACpBA,EAAQiH,EAAajH,KAAK,EAE1BA,EAAQ+F,EAAQjF,MAAM,CAACiG,EAAW,CAClCA,KAGFE,EAAaC,SAAS,CAAG,CACvBC,eAAgB,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,CAAC,EAC3CC,MAAO,CACL,CAAC,EAAG,CAAC,mBAAmB,EAAExH,EAAM,kBAAkB,CAAC,CAAC,CACpD,CAAC,EAAG,CAAC,mBAAmB,EAAEA,EAAM,iBAAiB,CAAC,CAAC,CACpD,EAEHgH,EAAeS,IAAI,CAACR,GAGhBF,EAAahB,EAAQjF,MAAM,CAACwE,MAAM,CAAG,GACvCyB,CAAAA,EAAa,EAEjB,MACEC,EAAeS,IAAI,CAACR,EAGxBlB,CAAAA,EAAQ1C,MAAM,CAAG2D,CACnB,CAeA,MATAvH,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACRiI,WAAW,IAAMtC,EAASuC,OAAO,EAAEC,UAAUD,SAASE,aAAa,OAAQ,eAAgB,EAC7F,EAAG,CAACzC,EAAS,EAON,UAAC0C,IAAeA,CAACC,IAAK3C,EAAU4C,WAAYnE,IAAYkC,QAASA,C,EAC1E,CCrNA,SAASkC,EAAyB,CAACzJ,SAAAA,CAAQ,CAAuC,EAChF,MAAO,UAAC0J,EAAAA,CAAMA,CAACC,IAAI,EAAC5I,GAAI,CAACmC,QAAS,CAAC,E,SAAIlD,C,EACzC,CA2CA,SAAS4J,EAAK,CACZ3J,KAAAA,EAAO,QAAQ,CACf4J,OAAQC,CAAO,CACf5G,QAAAA,EAAU,QAAQ,CAClB6G,gBAAiBC,CAAgB,CACjCC,UAAAA,CAAS,CACTjK,SAAAA,CAAQ,CACqC,EAC7C,IAAM+J,EAAkBC,GAAoB/J,cAAAA,EACtC4J,EAASC,GAAW7J,cAAAA,EAEpB,CAACiK,EAAM,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,EAASnK,EAAU,CACjCoK,cAAerK,EACfmC,MAAOrB,EACP8F,YAAatF,EACbgJ,eAAgB5I,EAChBsC,MAAOmC,CACT,GACM,CAAChE,EAAOlB,EAAS,CAAGsJ,CAAAA,EAAAA,EAAAA,QAAAA,EAAgC,IACpD,CAAC3D,EAAarF,EAAe,CAAGgJ,CAAAA,EAAAA,EAAAA,QAAAA,EAAsC,IACtE1D,EAAW2D,CAAAA,EAAAA,EAAAA,MAAAA,EAAiC,MAC5CC,EAAuBC,CAAAA,EAAAA,EAAAA,OAAAA,EAC3B,IAAO,EAACvI,MAAAA,EAAOlB,SAAAA,EAAU2F,YAAAA,EAAarF,eAAAA,EAAgBrB,KAAAA,EAAM2G,SAAAA,CAAQ,GACpE,CAAC1E,EAAOlB,EAAU2F,EAAarF,EAAgBrB,EAAM2G,EAAS,EAG1D8D,EAAgBH,CAAAA,EAAAA,EAAAA,MAAAA,EAA0B,MAE1C,CAACI,EAAYC,EAAc,CAAGN,CAAAA,EAAAA,EAAAA,QAAAA,IAG9BO,EAAaC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,IAAMF,EAAc,IAAO,EAAE,EAGtDG,EAAcD,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,IAAMF,EAAc,IAAQ,EAAE,EAG9D3J,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACW,KAAf0J,GACFD,EAAcvB,OAAO,EAAE6B,OAE3B,EAAG,CAACL,EAAW,EAGf,IAAMM,EAAgBH,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KAChC,GAAI,CAAClE,EAASuC,OAAO,EAAEpF,MAAO,MAAO,EAAE,CAEvC,GAAM,CAACmH,EAAW,GAAGC,EAAS,CADjBvE,EAASuC,OAAO,CAACpF,KAAK,CAACqH,WAAW,GAE/C,OAAOD,EAASzK,GAAG,CAAC,CAAC2K,EAASC,IAC5BD,EAAQE,MAAM,CACZ,CAACC,EAAuCnE,EAAwBoE,IAAmB,EACjF,GAAGD,CAAG,CACNF,GAAAA,EACA,CAACJ,CAAS,CAACO,EAAM,CAAW,CAAEpE,CAChC,GACA,CAAC,GAGP,EAAG,CAACT,EAAS,EAGP8E,EAAmBZ,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,IACnC,EAAc3B,OAAO,EAAEpF,MAGhBmH,CAFMtE,EAASuC,OAAO,EAAEpF,OAAOqH,aAAY,CAC5B,CAAC,EAAE,CACR1K,GAAG,CAAC,CAACiL,EAAOL,IAAgB,EAC3CM,OAAQD,EACRE,MAAOF,EACPG,UAAWR,IAAAA,CACb,IAPqC,EAAE,CAQtC,CAAC1E,EAAS,EAGPmF,EAAcjB,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,IAAMlE,EAASuC,OAAO,EAAEpF,OAAOgI,cAAe,CAACnF,EAAS,EAGlFoF,EAAclB,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KAC9B,IAAMmB,EAAqBC,KAAKC,SAAS,CAACvF,EAASuC,OAAO,EAAEpF,OAAOqI,YAAa,CAACC,EAAchF,IAC7F,UAAI,OAAOA,EAEFA,EAAMiF,OAAO,CAAC,wBAAyB,CAACC,EAAQC,IAE9CC,iBAAiB7F,EAASuC,OAAO,EAAEC,UAAUD,SAAWuD,SAASC,IAAI,EACzEC,gBAAgB,CAAC,CAAC,EAAE,EAAEJ,EAAG,CAAC,EAC1BK,IAAI,IAIJxF,EAETT,CAAAA,EAASuC,OAAO,EAAEpF,OAAO+I,iBAAiB,CAAC1G,KAAM,WAAW,EAAG8F,KAAKa,KAAK,CAACd,GAC5E,EAAG,CAACrF,EAAS,EAET7C,EAAQ,KACZ,GAAImG,EAAMnG,KAAK,CAAE,CACf,IAAMoC,EAAgCqB,CAAAA,EAAAA,EAAAA,CAAAA,EAAM,CAAC,EAAG0C,EAAMnG,KAAK,CAACnD,KAAK,CAACuF,6BAA6B,EAAI,CAAC,EAAG,CACrGhE,cAAe,CACb6K,oBAAqB,CACnBC,qBAAsBpC,CACxB,CACF,CACF,GACA9G,EAAQmJ,CAAAA,EAAAA,EAAAA,YAAAA,EAAahD,EAAMnG,KAAK,CAAE,CAACoC,8BAAAA,CAA6B,EAClE,CAEA,MACE,WAAChG,EAAiBgN,QAAQ,EAAC9F,MAAOmD,E,UAChC,WAAC4C,EAAAA,CAAGA,CAAAA,CACFnD,UAAWA,EACXlJ,GAAI,CACF,GAAI8I,EAAS,CAAC7G,YAAa,MAAOqK,YAAa,QAAStK,YAAa,iBAAkBD,aAAc,CAAC,EAAI,CAAC,CAAC,CAC5GwK,EAAGpK,SAAAA,EAAqB,EAAI,CAAC,oBAAoB,EAAEA,EAAQ,CAAC,CAAC,EAE9D,GAAGqK,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,aAAa,C,UAE7B,WAACH,EAAAA,CAAGA,CAAAA,CACFrM,GAAI,CACFyM,QAAS,OACTC,eAAgB,gBAChBC,aAAc,aACdC,GAAI1N,cAAAA,EAAuB,EAAI,CACjC,E,UAEA,WAACmN,EAAAA,CAAGA,CAAAA,CAACrM,GAAI,CAACyM,QAAS,MAAM,E,UACvB,UAACJ,EAAAA,CAAGA,CAAAA,CAACrM,GAAI,CAAC6M,GAAI1D,EAAME,aAAa,CAAG,EAAI,EAAGsD,aAAc,QAAQ,E,SAAIxD,EAAME,aAAa,GACxF,WAACyD,MAAAA,C,UACE3D,EAAMhI,KAAK,CACXgI,EAAMvD,WAAW,C,MAGtB,WAACyG,EAAAA,CAAGA,CAAAA,CAACrM,GAAI,CAACyM,QAAS,OAAQM,WAAY,SAAUC,UAAW,YAAY,E,UACtE,UAACX,EAAAA,CAAGA,CAAAA,CAACrM,GAAI,CAAC6M,GAAI1D,EAAME,aAAa,CAAG,EAAI,CAAC,E,SAAIF,EAAMG,cAAc,GAChEN,GACC,WAACiE,EAAAA,CAAUA,CAAAA,CAACC,UAAWvD,E,UACrB,UAACsD,EAAAA,CAAUA,CAACE,MAAM,E,SAChB,UAACC,EAAAA,CAAUA,CAAAA,CAACC,aAAW,gBAAgBC,KAAMC,EAAAA,mBAAmBA,CAAEC,QAAQ,YAAYtO,KAAK,O,KAE7F,UAAC+N,EAAAA,CAAUA,CAACQ,OAAO,EAACjL,MAAM,O,SACxB,WAACkL,EAAAA,CAAUA,CAAAA,C,UACT,UAACA,EAAAA,CAAUA,CAACC,IAAI,EAACC,SAAU9D,E,SAAY,e,GACvC,UAAC4D,EAAAA,CAAUA,CAACC,IAAI,EAACC,SAAU5C,E,SAAa,c,GACxC,UAAC0C,EAAAA,CAAUA,CAACC,IAAI,EAACC,SAAU3C,E,SAAa,c,iBAOnDjI,E,GAEF4G,GACC,UAACjB,EAAAA,CAAMA,CAAAA,CACLxH,MAAOA,EACP0M,QAAS7D,EACT8D,cAAe,CAAC,CAACC,WAAY,UAAWC,QAAS,eAAgBC,QAASjD,CAAW,EAAE,CACvFkD,WAAYxF,E,SAEZ,UAACyF,EAAAA,CAAKA,CAACC,SAAS,EACdpO,GAAI,CACF,SAAU,CAAC,wBAAyB,CAAC,EACrC,kDAAmD,CAACqO,WAAY,CAAC,EACjE,gDAAiD,CAACC,YAAa,CAAC,CAClE,E,SAEA,UAACC,EAAAA,CAASA,CAAAA,CAACC,KAAMtE,IAAiBuE,QAAS9D,G,SAMvD,CDDAxF,EAAM9F,WAAW,CAAG,kBCEpBwJ,EAAKxJ,WAAW,CAAG,YAKZ,IAAMqP,EAAYC,OAAOC,MAAM,CAAC/F,EAAM,CAC3C7J,cAAaA,EACbc,MAAKA,EACLQ,YAAWA,EACXI,eAAcA,EACdyE,MAAKA,EACL0J,QAASzP,CACX,GAEA,GAAG,CAAEsJ,EAAyBrJ,WAAW,EAApCqJ,CAAAA,EAAyBrJ,WAAW,CAAK,0BAAyB,CAAE,CAAE,KAAM,CAAC,CAClF,GAAG,CAAEqP,EAAUrP,WAAW,EAArBqP,CAAAA,EAAUrP,WAAW,CAAK,WAAU,CAAE,CAAE,KAAM,CAAC,C","sources":["ui/packages/chart-card/ChartCard/context.ts","ui/packages/chart-card/ChartCard/LeadingVisual.tsx","ui/packages/chart-card/shared.ts","ui/packages/chart-card/ChartCard/Title.tsx","ui/packages/chart-card/ChartCard/Description.tsx","ui/packages/chart-card/ChartCard/TrailingVisual.tsx","ui/packages/chart-card/ChartCard/chart-theme.ts","ui/packages/chart-card/ChartCard/Chart.tsx","ui/packages/chart-card/ChartCard.tsx"],"sourcesContent":["import {createContext, type RefObject} from 'react'\nimport type {HighchartsReactRefObject} from 'highcharts-react-official'\nimport type {Size} from '../shared'\n\nexport interface ContextProps {\n  title: string\n  setTitle: (title: string) => void\n  description: string\n  setDescription: (description: string) => void\n  size: Size\n  chartRef: RefObject<HighchartsReactRefObject>\n}\n\nexport default createContext<ContextProps>({} as ContextProps)\n","import {useContext} from 'react'\nimport ChartCardContext from './context'\n\nexport interface LeadingVisualProps {\n  children: React.ReactNode\n}\n\nexport function LeadingVisual({children}: LeadingVisualProps) {\n  const {size} = useContext(ChartCardContext)\n  return size !== 'sparkline' ? <>{children}</> : null\n}\nLeadingVisual.displayName = 'ChartCard.LeadingVisual'\n","import type React from 'react'\n\nexport function getNodeText(node: React.ReactNode): string {\n  switch (typeof node) {\n    case 'string':\n    case 'number':\n      return node.toString()\n    case 'object':\n      if (Array.isArray(node)) {\n        return node.map(getNodeText).join('')\n      } else if (node !== null && 'props' in node) {\n        return getNodeText(node.props.children)\n      } else {\n        return ''\n      }\n    default:\n      return ''\n  }\n}\n\nexport type Size = 'xl' | 'large' | 'medium' | 'small' | 'sparkline' | number\n","import {Heading, type SxProp} from '@primer/react'\nimport {useContext, useEffect} from 'react'\nimport {getNodeText} from '../shared'\nimport ChartCardContext from './context'\n\nexport type TitleProps = {\n  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\n  children: React.ReactNode\n} & SxProp\n\nexport function Title({as = 'h3', sx = {}, children}: TitleProps) {\n  const {setTitle, size} = useContext(ChartCardContext)\n  useEffect(() => {\n    setTitle(getNodeText(children))\n  }, [setTitle, children])\n  return size !== 'sparkline' ? (\n    <Heading sx={{fontSize: 2, fontWeight: 600, ...sx}} as={as}>\n      {children}\n    </Heading>\n  ) : null\n}\nTitle.displayName = 'ChartCard.Title'\n","import {Text, type SxProp} from '@primer/react'\nimport {useContext, useEffect} from 'react'\nimport {getNodeText} from '../shared'\nimport ChartCardContext from './context'\n\nexport type DescriptionProps = {\n  children: React.ReactNode\n} & SxProp\n\nexport function Description({sx = {}, children}: DescriptionProps) {\n  const {setDescription, size} = useContext(ChartCardContext)\n  useEffect(() => {\n    setDescription(getNodeText(children))\n  }, [setDescription, children])\n  return size !== 'sparkline' ? <Text sx={{color: 'fg.muted', fontSize: 1, ...sx}}>{children}</Text> : null\n}\nDescription.displayName = 'ChartCard.Description'\n","import {useContext} from 'react'\nimport ChartCardContext from './context'\n\nexport interface TrailingVisualProps {\n  children: React.ReactNode\n}\n\nexport function TrailingVisual({children}: TrailingVisualProps) {\n  const {size} = useContext(ChartCardContext)\n  return size !== 'sparkline' ? <>{children}</> : null\n}\nTrailingVisual.displayName = 'ChartCard.TrailingVisual'\n","import type Highcharts from 'highcharts'\n\n// This is HTML that gets injected into the tooltip for each series.\n// Highcharts expects this to be a string and parses out the vars.\nconst tooltipHeaderFormat =\n  // eslint-disable-next-line github/unescaped-html-literal\n  '<table style=\"min-width: 120px;\"><tr><th colspan=\"3\" style=\"color:var(--fgColor-muted, var(--color-fg-muted)); font-weight:var(--base-text-weight-semibold); padding-bottom:2px;\">{point.key}</th></tr>'\nconst tooltipPointFormat =\n  // eslint-disable-next-line github/unescaped-html-literal\n  '<tr><td style=\"padding-top:var(--base-size-4)\"><span style=\"color:{point.color}\">●</span> {series.name}</td><td style=\"text-align: right; padding-top:var(--base-size-4);\"><strong>{point.y}</strong></td></tr>'\n\nconst tooltipFooterFormat = '</table>'\n\nexport const yAxisConfig: Highcharts.YAxisOptions = {\n  tickWidth: 0,\n  lineWidth: 1,\n  gridLineColor: 'var(--borderColor-muted)',\n  gridLineDashStyle: 'Dash',\n  lineColor: 'var(--borderColor-default)',\n  labels: {\n    style: {\n      color: 'var(--fgColor-default)',\n    },\n  },\n  title: {\n    style: {\n      color: 'var(--fgColor-default)',\n    },\n  },\n}\n\nconst ChartTheme: Highcharts.Options = {\n  accessibility: {\n    keyboardNavigation: {\n      order: ['legend', 'series'],\n    },\n  },\n  colors: [\n    'var(--data-blue-color-emphasis, var(--data-blue-color))',\n    'var(--data-green-color-emphasis, var(--data-green-color))',\n    'var(--data-orange-color-emphasis, var(--data-orange-color))',\n    'var(--data-pink-color-emphasis, var(--data-pink-color))',\n    'var(--data-yellow-color-emphasis, var(--data-yellow-color))',\n    'var(--data-red-color-emphasis, var(--data-red-color))',\n    'var(--data-purple-color-emphasis, var(--data-purple-color))',\n    'var(--data-auburn-color-emphasis, var(--data-auburn-color))',\n    'var(--data-teal-color-emphasis, var(--data-teal-color))',\n    'var(--data-gray-color-emphasis, var(--data-gray-color))',\n  ],\n  caption: {\n    align: 'left',\n    style: {\n      color: 'var(--fgColor-muted)',\n    },\n    verticalAlign: 'top',\n  },\n  title: {\n    align: 'left',\n    style: {\n      color: 'var(--fgColor-default)',\n    },\n    text: undefined,\n  },\n  tooltip: {\n    backgroundColor: 'var(--bgColor-default)',\n    borderRadius: 6,\n    borderColor: 'var(--borderColor-muted)',\n    borderWidth: 1,\n    shape: 'rect',\n    padding: 10,\n    shadow: {\n      offsetX: 2,\n      offsetY: 2,\n      opacity: 0.02,\n      width: 4,\n      color: 'var(--shadowColor-default)',\n    },\n    style: {\n      color: 'var(--fgColor-default)',\n      fontFamily: 'var(--fontStack-sansSerif)',\n      fontSize: 'var(--text-body-size-small)',\n    },\n    useHTML: true,\n    headerFormat: tooltipHeaderFormat,\n    pointFormat: tooltipPointFormat,\n    footerFormat: tooltipFooterFormat,\n  },\n  credits: {\n    enabled: false,\n  },\n  chart: {\n    animation: false,\n    spacing: [4, 0, 4, 0],\n    backgroundColor: 'var(--bgColor-default, var(--color-canvas-default))',\n    style: {\n      fontFamily: 'var(--fontStack-sansSerif)',\n      fontSize: '12px',\n      color: 'var(--fgColor-default)',\n    },\n  },\n  legend: {\n    itemStyle: {\n      fontSize: 'var(--base-size-12)',\n      font: 'var(--fontStack-sansSerif)',\n      color: 'var(--fgColor-default)',\n    },\n    align: 'left',\n    verticalAlign: 'top',\n    x: -8,\n    y: -12,\n    itemHoverStyle: {\n      color: 'var(--fgColor-default)',\n    },\n    title: {\n      style: {\n        color: 'var(--fgColor-default)',\n      },\n    },\n  },\n  navigation: {\n    buttonOptions: {\n      enabled: false,\n    },\n  },\n  exporting: {\n    fallbackToExportServer: false,\n  },\n  plotOptions: {\n    series: {\n      animation: false,\n    },\n    spline: {\n      animation: false,\n      marker: {\n        enabled: false,\n      },\n    },\n    bar: {\n      borderColor: 'var(--bgColor-default)',\n    },\n    column: {\n      borderColor: 'var(--bgColor-default)',\n    },\n  },\n  xAxis: {\n    tickWidth: 0,\n    lineWidth: 1,\n    gridLineColor: 'var(--borderColor-muted)',\n    gridLineDashStyle: 'Dash',\n    lineColor: 'var(--borderColor-default)',\n    labels: {\n      style: {\n        color: 'var(--fgColor-default)',\n      },\n    },\n    title: {\n      style: {\n        color: 'var(--fgColor-default)',\n      },\n    },\n  },\n  yAxis: [yAxisConfig],\n}\n\nexport default ChartTheme\n","import Highcharts, {type Options} from 'highcharts'\nimport highchartsAccessibility from 'highcharts/modules/accessibility'\nimport highchartsExportData from 'highcharts/modules/export-data'\nimport highchartsExporting from 'highcharts/modules/exporting'\nimport highchartsOfflineExporting from 'highcharts/modules/offline-exporting'\nimport HighchartsReact from 'highcharts-react-official'\nimport merge from 'lodash-es/merge'\nimport defaultOptions, {yAxisConfig} from './chart-theme'\nimport ChartCardContext from './context'\nimport {useContext, useEffect} from 'react'\nimport type {Size} from '../shared'\n\n// Init Highcharts modules\nhighchartsAccessibility(Highcharts)\nhighchartsExportData(Highcharts)\nhighchartsExporting(Highcharts)\nhighchartsOfflineExporting(Highcharts)\n\nHighcharts.setOptions({\n  lang: {\n    decimalPoint: '.',\n    thousandsSep: ',',\n  },\n})\n\nexport const chartHeights: {[size in Size]: string} = {\n  xl: '432px',\n  large: '320px',\n  medium: '256px',\n  small: '128px',\n  sparkline: '128px',\n}\n\nexport interface ChartProps {\n  colors?: string[]\n  overrideOptionsNotRecommended?: Highcharts.Options\n  plotOptions?: Highcharts.PlotOptions\n  series: Highcharts.SeriesOptionsType[]\n  type: string\n  xAxisTitle: string\n  xAxisOptions?: Highcharts.XAxisOptions\n  yAxisTitle?: string\n  yAxisOptions?: Highcharts.YAxisOptions | Highcharts.YAxisOptions[]\n  tooltipOptions?: Highcharts.TooltipOptions\n  useUTC?: boolean\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction hasPropertyWithValue(obj: Record<string, any>, key: string, value: string) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false\n  }\n  if (obj[key] === value) {\n    return true\n  } else {\n    for (const prop in obj) {\n      if (obj[prop] !== undefined) {\n        return hasPropertyWithValue(obj[prop], key, value)\n      }\n    }\n  }\n  return false\n}\n\nexport function Chart({\n  colors,\n  overrideOptionsNotRecommended,\n  plotOptions,\n  series,\n  type = 'line',\n  xAxisTitle,\n  xAxisOptions,\n  yAxisTitle,\n  yAxisOptions = {},\n  tooltipOptions = {},\n  useUTC = true,\n}: ChartProps) {\n  const {title, description, size, chartRef} = useContext(ChartCardContext)\n  const legendVisible = series.length > 1 && size !== 'sparkline'\n  const legendIsVertical = series.length > 3\n\n  const yAxisOptionsArray = Array.isArray(yAxisOptions) ? yAxisOptions : [yAxisOptions]\n\n  const hasStacking = plotOptions && hasPropertyWithValue(plotOptions, 'stacking', 'normal')\n  const options: Options = merge(\n    {},\n    defaultOptions,\n    {\n      ...(legendIsVertical\n        ? {\n            accessibility: {\n              keyboardNavigation: {\n                order: ['series', 'legend'],\n              },\n            },\n          }\n        : {}),\n      chart: {\n        type,\n        height: typeof size === 'number' ? size : chartHeights[size],\n      },\n      time: {\n        useUTC,\n      },\n      colors,\n      exporting: {\n        chartOptions: {\n          title: {\n            text: title,\n          },\n          caption: {\n            text: description,\n          },\n        },\n        filename: title,\n      },\n      lang: {\n        accessibility: {\n          chartContainerLabel: `${title}. Interactive chart.`,\n          navigator: {\n            groupLabel: `${title} Axis zoom`,\n          },\n        },\n      },\n      legend: {\n        enabled: legendVisible,\n        ...(legendIsVertical ? {align: 'right', layout: 'vertical', verticalAlign: 'middle'} : {}),\n      },\n      plotOptions: merge(\n        {},\n        defaultOptions.plotOptions,\n        {\n          series: {\n            marker: {\n              enabled: size !== 'sparkline',\n            },\n            enableMouseTracking: size !== 'sparkline',\n          },\n        },\n        plotOptions,\n      ),\n      series,\n      tooltip: merge(\n        {},\n        {\n          enabled: size !== 'sparkline',\n          shared: hasStacking,\n        },\n        tooltipOptions,\n      ),\n      xAxis: merge(\n        {},\n        {\n          visible: size !== 'sparkline',\n          gridLineWidth: size !== 'sparkline' ? 1 : 0,\n          title: {\n            text: size !== 'sparkline' ? xAxisTitle : undefined,\n          },\n        },\n        xAxisOptions,\n      ),\n      yAxis: yAxisOptionsArray.map(yAxisConsumerOption => {\n        if (!yAxisConsumerOption) return\n        return merge(\n          {},\n          yAxisConfig,\n          {\n            visible: size !== 'sparkline',\n            gridLineWidth: size !== 'sparkline' ? 1 : 0,\n            title: {\n              text: size !== 'sparkline' ? yAxisTitle : undefined,\n            },\n          },\n          yAxisConsumerOption,\n        )\n      }),\n    },\n    overrideOptionsNotRecommended,\n  )\n\n  // Apply a linear gradient fill to areaspline series\n  if (options.series && options.colors) {\n    let colorIndex = 0\n    const colorfulSeries: typeof options.series = []\n    for (const singleSeries of options.series) {\n      if (singleSeries.type === 'areaspline') {\n        let color\n        if (singleSeries.color) {\n          color = singleSeries.color\n        } else {\n          color = options.colors[colorIndex] as string\n          colorIndex++\n        }\n\n        singleSeries.fillColor = {\n          linearGradient: {x1: 0, x2: 0, y1: 0, y2: 1},\n          stops: [\n            [0, `color-mix(in srgb, ${color} 25%, transparent)`],\n            [1, `color-mix(in srgb, ${color} 1%, transparent)`],\n          ],\n        }\n        colorfulSeries.push(singleSeries)\n\n        // After available colors run out, cycle through again\n        if (colorIndex > options.colors.length - 1) {\n          colorIndex = 0\n        }\n      } else {\n        colorfulSeries.push(singleSeries)\n      }\n    }\n    options.series = colorfulSeries\n  }\n\n  // Regardless of https://api.highcharts.com/highcharts/accessibility.landmarkVerbosity setting,\n  // highcharts/highcharts’ ts/Accessibility/Components/ContainerComponent.ts _really_ wants to set `role`:\n  // https://github.com/highcharts/highcharts/blob/178b6375cec3824cb12db124de8d3e760a802bb0/ts/Accessibility/Components/ContainerComponent.ts#L153-L155\n  // But neither of its values—`region` or `group`—are what _we_ want. This effect lets us use `application` instead:\n  useEffect(() => {\n    setTimeout(() => chartRef.current?.container.current?.setAttribute('role', 'application'), 0)\n  }, [chartRef])\n  // Notes:\n  //\n  // - `chartRef.current.container.current` is _not_ the element with class `highcharts-container`. It’s the _parent_ of that element, aka https://api.highcharts.com/highcharts/chart.renderTo. This is because of how `highcharts-react` names its refs.\n  //\n  // - I tried many alternatives, e.g. setting `this.renderTo`’s role, or setting `this.container.parentNode`’s role, in https://api.highcharts.com/highcharts/chart.events.load or https://api.highcharts.com/highcharts/chart.events.redraw, and using highcharts-react’s `containerProps` or `callback`: https://github.com/highcharts/highcharts-react?tab=readme-ov-file#options-details. I also tried variations of _this_ approach, e.g. using `react-dom`’s `flushSync` (instead of `setTimeout`). None of that works.\n\n  return <HighchartsReact ref={chartRef} highcharts={Highcharts} options={options} />\n}\nChart.displayName = 'ChartCard.Chart'\n","import type {HighchartsReactRefObject} from 'highcharts-react-official'\nimport {ActionMenu, ActionList, Box, IconButton} from '@primer/react'\nimport {Dialog, DataTable, Table, type DialogProps, useSlots} from '@primer/react/drafts'\nimport {KebabHorizontalIcon} from '@primer/octicons-react'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {useCallback, useEffect, useMemo, useRef, useState, cloneElement} from 'react'\nimport {LeadingVisual} from './ChartCard/LeadingVisual'\nimport merge from 'lodash-es/merge'\nimport {Title} from './ChartCard/Title'\nimport {Description} from './ChartCard/Description'\nimport {TrailingVisual} from './ChartCard/TrailingVisual'\nimport {Chart} from './ChartCard/Chart'\nimport type {Size} from './shared'\nimport ChartCardContext, {type ContextProps} from './ChartCard/context'\n\nfunction DialogBodyWithoutPadding({children}: React.PropsWithChildren<DialogProps>) {\n  return <Dialog.Body sx={{padding: 0}}>{children}</Dialog.Body>\n}\n\nexport interface ChartCardProps {\n  /**\n   * The chart’s height (which affects its width and the card’s size). The following presets are supported: `\"xl\"`, `\"large\"`, `\"medium\"`, `\"small\"`, or `\"sparkline\"`. Arbitrary numbers are also supported (for custom chart heights, in pixels). When set to `\"sparkline\"`, the chart’s title, description, menu, padding, and border are hidden.\n   * @default \"medium\"\n   */\n  size?: Size\n\n  /**\n   * Whether the card has a border. When set to `false`, the card has no border.\n   * @default true\n   */\n  border?: boolean\n\n  /**\n   * Whether the card has padding. When set to `\"none\"`, the card has no padding.\n   * @default \"normal\"\n   */\n  padding?: 'normal' | 'none' | 'spacious'\n\n  /**\n   * Whether the chart menu is visible. When set to `false`, the chart menu is hidden.\n   * @default true\n   */\n  visibleControls?: boolean\n\n  /**\n   * Additional classes to apply to the card.\n   */\n  className?: string\n\n  /**\n   * The card’s content. Supported subcomponents:\n   * - `ChartCard.LeadingVisual`,\n   * - `ChartCard.Title`,\n   * - `ChartCard.Description`,\n   * - `ChartCard.TrailingVisual`, and\n   * - `ChartCard.Chart`.\n   */\n  children: React.ReactNode\n}\n\nfunction Card({\n  size = 'medium',\n  border: _border,\n  padding = 'normal',\n  visibleControls: _visibleControls,\n  className,\n  children,\n}: ChartCardProps & {children: React.ReactNode}) {\n  const visibleControls = _visibleControls ?? size !== 'sparkline'\n  const border = _border ?? size !== 'sparkline'\n\n  const [slots] = useSlots(children, {\n    leadingVisual: LeadingVisual,\n    title: Title,\n    description: Description,\n    trailingVisual: TrailingVisual,\n    chart: Chart,\n  })\n  const [title, setTitle] = useState<ContextProps['title']>('')\n  const [description, setDescription] = useState<ContextProps['description']>('')\n  const chartRef = useRef<HighchartsReactRefObject>(null)\n  const contextProviderValue = useMemo(\n    () => ({title, setTitle, description, setDescription, size, chartRef}),\n    [title, setTitle, description, setDescription, size, chartRef],\n  )\n\n  const menuButtonRef = useRef<HTMLButtonElement>(null)\n\n  const [dialogOpen, setDialogOpen] = useState<boolean | undefined>()\n\n  /** Show the dialog containing the data table */\n  const openDialog = useCallback(() => setDialogOpen(true), [])\n\n  /** Hide the dialog containing the data table. */\n  const closeDialog = useCallback(() => setDialogOpen(false), [])\n\n  /** After dialog is hidden, return focus to the menu button. */\n  useEffect(() => {\n    if (dialogOpen === false) {\n      menuButtonRef.current?.focus()\n    }\n  }, [dialogOpen])\n\n  /** Convert a Highcharts-provided multi-dimensional array of chart labels and data into a UniqueData structure used by DataTable. */\n  const getDialogData = useCallback(() => {\n    if (!chartRef.current?.chart) return []\n    const rows = chartRef.current.chart.getDataRows()\n    const [labelsRow, ...dataRows] = rows as [string[], ...Array<Array<string | number>>]\n    return dataRows.map((dataRow, id: number) =>\n      dataRow.reduce(\n        (acc: {[key: string]: string | number}, value: string | number, index: number) => ({\n          ...acc,\n          id,\n          [labelsRow[index] as string]: value,\n        }),\n        {},\n      ),\n    ) as Array<{[key: string]: string | number; id: number}>\n  }, [chartRef])\n\n  /** Convert a Highcharts-provided multi-dimensional array of chart labels and data into a Column structure used by DataTable. */\n  const getDialogColumns = useCallback(() => {\n    if (!chartRef.current?.chart) return []\n    const rows = chartRef.current?.chart?.getDataRows()\n    const labelsRow = rows[0] as string[]\n    return labelsRow.map((label, id: number) => ({\n      header: label,\n      field: label,\n      rowHeader: id === 0,\n    }))\n  }, [chartRef])\n\n  /** Generates a data URL of CSV for local download in the browser. This is the default action for a click on the 'Download CSV' button. */\n  const downloadCSV = useCallback(() => chartRef.current?.chart?.downloadCSV(), [chartRef])\n\n  /** Downloads chart as PNG. This is the default action for a click on the 'Download PNG' button. */\n  const downloadPNG = useCallback(() => {\n    const stringifiedOptions = JSON.stringify(chartRef.current?.chart?.userOptions, (_key: string, value) => {\n      if (typeof value === 'string') {\n        // Replace CSS variables with their computed values\n        return value.replace(/var\\(--([^,)]+)[,)]+/g, (_match, p1) => {\n          // Get the computed value of the CSS variable\n          return getComputedStyle(chartRef.current?.container.current ?? document.body)\n            .getPropertyValue(`--${p1}`)\n            .trim()\n        })\n      }\n      // Pass other values through unchanged. Nested object values are handled recursively.\n      return value\n    })\n    chartRef.current?.chart?.exportChartLocal({type: 'image/png'}, JSON.parse(stringifiedOptions))\n  }, [chartRef])\n\n  let chart = null\n  if (slots.chart) {\n    const overrideOptionsNotRecommended = merge({}, slots.chart.props.overrideOptionsNotRecommended || {}, {\n      accessibility: {\n        screenReaderSection: {\n          onViewDataTableClick: openDialog,\n        },\n      },\n    })\n    chart = cloneElement(slots.chart, {overrideOptionsNotRecommended})\n  }\n\n  return (\n    <ChartCardContext.Provider value={contextProviderValue}>\n      <Box\n        className={className}\n        sx={{\n          ...(border ? {borderWidth: '1px', borderStyle: 'solid', borderColor: 'border.default', borderRadius: 2} : {}),\n          p: padding === 'none' ? 0 : `var(--stack-padding-${padding})`,\n        }}\n        {...testIdProps('chart-card')}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignContent: 'flex-start',\n            mb: size !== 'sparkline' ? 3 : 0,\n          }}\n        >\n          <Box sx={{display: 'flex'}}>\n            <Box sx={{mr: slots.leadingVisual ? 2 : 0, alignContent: 'center'}}>{slots.leadingVisual}</Box>\n            <div>\n              {slots.title}\n              {slots.description}\n            </div>\n          </Box>\n          <Box sx={{display: 'flex', alignItems: 'center', alignSelf: 'flex-start'}}>\n            <Box sx={{mr: slots.leadingVisual ? 2 : 0}}>{slots.trailingVisual}</Box>\n            {visibleControls && (\n              <ActionMenu anchorRef={menuButtonRef}>\n                <ActionMenu.Anchor>\n                  <IconButton aria-label=\"Chart options\" icon={KebabHorizontalIcon} variant=\"invisible\" size=\"small\" />\n                </ActionMenu.Anchor>\n                <ActionMenu.Overlay width=\"auto\">\n                  <ActionList>\n                    <ActionList.Item onSelect={openDialog}>View as table</ActionList.Item>\n                    <ActionList.Item onSelect={downloadCSV}>Download CSV</ActionList.Item>\n                    <ActionList.Item onSelect={downloadPNG}>Download PNG</ActionList.Item>\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>\n            )}\n          </Box>\n        </Box>\n        {chart}\n      </Box>\n      {dialogOpen && (\n        <Dialog\n          title={title}\n          onClose={closeDialog}\n          footerButtons={[{buttonType: 'default', content: 'Download CSV', onClick: downloadCSV}]}\n          renderBody={DialogBodyWithoutPadding}\n        >\n          <Table.Container\n            sx={{\n              '.Table': {'--table-border-radius': 0},\n              '.TableHeader:first-child,.TableCell:first-child': {borderLeft: 0},\n              '.TableHeader:last-child,.TableCell:last-child': {borderRight: 0},\n            }}\n          >\n            <DataTable data={getDialogData()} columns={getDialogColumns()} />\n          </Table.Container>\n        </Dialog>\n      )}\n    </ChartCardContext.Provider>\n  )\n}\nCard.displayName = 'ChartCard'\n\n/**\n * ChartCard is a layout component that positions a chart and its title, description, and menu, plus an optional leading and/or trailing visual.\n */\nexport const ChartCard = Object.assign(Card, {\n  LeadingVisual,\n  Title,\n  Description,\n  TrailingVisual,\n  Chart,\n  Context: ChartCardContext,\n})\n\ntry{ DialogBodyWithoutPadding.displayName ||= 'DialogBodyWithoutPadding' } catch {}\ntry{ ChartCard.displayName ||= 'ChartCard' } catch {}"],"names":["createContext","LeadingVisual","children","size","useContext","ChartCardContext","displayName","getNodeText","node","toString","Array","isArray","map","join","props","Title","as","sx","setTitle","useEffect","Heading","fontSize","fontWeight","Description","setDescription","Text","color","TrailingVisual","yAxisConfig","tickWidth","lineWidth","gridLineColor","gridLineDashStyle","lineColor","labels","style","title","accessibility","keyboardNavigation","order","colors","caption","align","verticalAlign","text","undefined","tooltip","backgroundColor","borderRadius","borderColor","borderWidth","shape","padding","shadow","offsetX","offsetY","opacity","width","fontFamily","useHTML","headerFormat","pointFormat","footerFormat","credits","enabled","chart","animation","spacing","legend","itemStyle","font","x","y","itemHoverStyle","navigation","buttonOptions","exporting","fallbackToExportServer","plotOptions","series","spline","marker","bar","column","xAxis","yAxis","highchartsAccessibility","Highcharts","highchartsExportData","highchartsExporting","highchartsOfflineExporting","lang","decimalPoint","thousandsSep","chartHeights","xl","large","medium","small","sparkline","Chart","overrideOptionsNotRecommended","type","xAxisTitle","xAxisOptions","yAxisTitle","yAxisOptions","tooltipOptions","useUTC","description","chartRef","legendVisible","length","legendIsVertical","yAxisOptionsArray","hasStacking","hasPropertyWithValue","obj","key","value","prop","options","merge","defaultOptions","height","time","chartOptions","filename","chartContainerLabel","navigator","groupLabel","layout","enableMouseTracking","shared","visible","gridLineWidth","yAxisConsumerOption","colorIndex","colorfulSeries","singleSeries","fillColor","linearGradient","x1","x2","y1","y2","stops","push","setTimeout","current","container","setAttribute","HighchartsReact","ref","highcharts","DialogBodyWithoutPadding","Dialog","Body","Card","border","_border","visibleControls","_visibleControls","className","slots","useSlots","leadingVisual","trailingVisual","useState","useRef","contextProviderValue","useMemo","menuButtonRef","dialogOpen","setDialogOpen","openDialog","useCallback","closeDialog","focus","getDialogData","labelsRow","dataRows","getDataRows","dataRow","id","reduce","acc","index","getDialogColumns","label","header","field","rowHeader","downloadCSV","downloadPNG","stringifiedOptions","JSON","stringify","userOptions","_key","replace","_match","p1","getComputedStyle","document","body","getPropertyValue","trim","exportChartLocal","parse","screenReaderSection","onViewDataTableClick","cloneElement","Provider","Box","borderStyle","p","testIdProps","display","justifyContent","alignContent","mb","mr","div","alignItems","alignSelf","ActionMenu","anchorRef","Anchor","IconButton","aria-label","icon","KebabHorizontalIcon","variant","Overlay","ActionList","Item","onSelect","onClose","footerButtons","buttonType","content","onClick","renderBody","Table","Container","borderLeft","borderRight","DataTable","data","columns","ChartCard","Object","assign","Context"],"sourceRoot":""}
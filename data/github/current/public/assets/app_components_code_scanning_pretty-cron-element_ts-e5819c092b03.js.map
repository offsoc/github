{"version":3,"file":"chunk-app_components_code_scanning_pretty-cron-element_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/github/editor/pretty-cron.ts","app/assets/modules/github/editor/cron-parser.ts","app/components/code_scanning/pretty-cron-element.ts"],"sourcesContent":["import cronstrue from 'cronstrue'\nimport parse from './cron-parser'\n\ntype Options = {\n  capitalize?: boolean\n}\n\n/*\n * Given a cronspec, return the human-readable string.\n */\nexport default function prettyCron(cronspec: string, {capitalize = false}: Options = {}): string | null {\n  const schedule = parse(cronspec)\n  if (!schedule) {\n    return null\n  }\n\n  let desc = ''\n  try {\n    desc = cronstrue.toString(cronspec, {\n      dayOfWeekStartIndexZero: true,\n      monthStartIndexZero: false,\n      use24HourTimeFormat: true,\n      // cronstrue sets the description as the error if throwExceptionOnParseError is false\n      // so we need to distinguish between an error and a valid description\n      throwExceptionOnParseError: true,\n    })\n  } catch (err) {\n    return null\n  }\n\n  if (!desc) {\n    return null\n  }\n\n  // By default, cronstrue capitalizes the first letter of the description.\n  if (capitalize) {\n    return desc\n  }\n\n  return desc.charAt(0).toLowerCase() + desc.slice(1)\n}\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\n// Taken and adapted from https://raw.githubusercontent.com/bunkat/later/master/src/parse/cron.js\n// Because the library is no longer maintained\n\n/*\n * Cron\n * (c) 2013 Bill, BunKat LLC.\n *\n * Creates a valid Later schedule from a valid cron expression.\n *\n * Later is freely distributable under the MIT license.\n * For all details and documentation:\n *     https://github.com/bunkat/later\n */\n\n/*\n * Parses a valid cron expression and produces a valid schedule that\n * can then be used with Later.\n *\n * CronParser().parse('5 * * * *', true);\n *\n * @param {String} expr: The cron expression to parse\n * @api public\n */\n\ntype Schedule = {\n  [ket: string]: number[]\n}\n\ninterface Schedules {\n  schedules: Schedule[]\n  exceptions: unknown[]\n}\n\nexport default function parseCron(expr: string) {\n  // Constant array to convert valid names to values\n  const NAMES = {\n    JAN: 1,\n    FEB: 2,\n    MAR: 3,\n    APR: 4,\n    MAY: 5,\n    JUN: 6,\n    JUL: 7,\n    AUG: 8,\n    SEP: 9,\n    OCT: 10,\n    NOV: 11,\n    DEC: 12,\n    SUN: 1,\n    MON: 2,\n    TUE: 3,\n    WED: 4,\n    THU: 5,\n    FRI: 6,\n    SAT: 7,\n  }\n\n  interface Field {\n    // Contains the index, min, max, and offset for each of the constraints\n    constraints: [number, number, number, number]\n    // launch uses the robfig/cron Go package for parsing. It allows a subset of characters,\n    // see https://pkg.go.dev/github.com/robfig/cron?utm_source=godoc\n    // It allows ? to be used identically to *\n    allowedSyntax: RegExp\n  }\n\n  interface Fields {\n    m: Field // minutes\n    h: Field // hours\n    D: Field // day of month\n    M: Field // month\n    d: Field // day of week\n  }\n\n  // Contains the index, min, and max for each of the constraints\n  const FIELDS: Fields = {\n    m: {constraints: [0, 0, 59, 0], allowedSyntax: /^[0-9,*/?-]+$/},\n    h: {constraints: [1, 0, 23, 0], allowedSyntax: /^[0-9,*/?-]+$/},\n    D: {constraints: [2, 1, 31, 0], allowedSyntax: /^[0-9,*/?-]+$/}, // No L or W support\n    M: {constraints: [3, 1, 12, 0], allowedSyntax: /^([0-9,*/?-]|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)+$/},\n    d: {constraints: [4, 1, 7, 1], allowedSyntax: /^([0-6,*/?-]|SUN|MON|TUE|WED|THU|FRI|SAT)+$/}, // No # or L support\n  }\n\n  /*\n   * Returns the value + offset if value is a number, otherwise it\n   * attempts to look up the value in the NAMES table and returns\n   * that result instead.\n   *\n   * @param {Int,String} value: The value that should be parsed\n   * @param {Int} offset: Any offset that must be added to the value\n   */\n  function getValue(value: number | string, offset = 0, max = 9999) {\n    if (isNaN(value)) {\n      return NAMES[value] || null\n    }\n    const num = +value + offset\n    if (num < 0 || num > max) {\n      throw new Error(`Number ${num} out of range [0, ${max}].`)\n    }\n    return num\n  }\n\n  /*\n   * Adds values to the specified constraint in the current schedule.\n   *\n   * @param {Sched} sched: The schedule to add the constraint to\n   * @param {String} name: Name of constraint to add\n   * @param {Int} min: Minimum value for this constraint\n   * @param {Int} max: Maximum value for this constraint\n   * @param {Int} inc: The increment to use between min and max\n   */\n  function add(sched: Schedule, name: string, min: number, max: number, inc = 1) {\n    if (!sched[name]) {\n      sched[name] = []\n    }\n\n    for (let i = min; i <= max; i += inc) {\n      if (sched[name].indexOf(i) < 0) {\n        sched[name].push(i)\n      }\n    }\n\n    sched[name].sort((a, b) => a - b)\n  }\n\n  /*\n   * Adds a range item (of the form x-y/z) to the schedule.\n   *\n   * @param {String} item: The cron expression item to add\n   * @param {Schedule} curSched: The current schedule to add to\n   * @param {String} name: The name to use for this constraint\n   * @param {Int} min: The min value for the constraint\n   * @param {Int} max: The max value for the constraint\n   * @param {Int} offset: The offset to apply to the cron value\n   */\n  function addRange(item: string, curSched: Schedule, name: string, min: number, max: number, offset: number) {\n    // parse range/x\n    const incSplit = item.split('/')\n\n    const inc = +incSplit[1] || undefined\n\n    const range = incSplit[0]\n\n    // parse x-y or * or 0\n    if (range !== '*' && range !== '0') {\n      const rangeSplit = range.split('-')\n      min = getValue(rangeSplit[0], offset, max)\n\n      // fix for issue #13, range may be single digit\n      max = getValue(rangeSplit[1], offset, max) || max\n    }\n\n    add(curSched, name, min, max, inc)\n  }\n\n  /*\n   * Parses a particular item within a cron expression.\n   *\n   * @param {String} item: The cron expression item to parse\n   * @param {Schedule} s: The existing set of schedules\n   * @param {String} name: The name to use for this constraint\n   * @param {Int} min: The min value for the constraint\n   * @param {Int} max: The max value for the constraint\n   * @param {Int} offset: The offset to apply to the cron value\n   */\n  function parse(item: string, s: Schedules, name: string, min: number, max: number, offset: number) {\n    let value\n\n    const schedules = s.schedules\n\n    const curSched = schedules[schedules.length - 1]\n\n    // parse x\n    if ((value = getValue(item, offset, max)) !== null) {\n      add(curSched, name, value, value)\n    }\n    // parse x-y or x-y/z or */z or 0/z\n    else {\n      addRange(item, curSched, name, min, max, offset)\n    }\n  }\n\n  /*\n   * Returns true if the expression components are valid\n   *\n   * @param {String[]} components: The expression components\n   */\n  function isValidComponents(components: string[]): boolean {\n    if (components.length > Object.keys(FIELDS).length) {\n      return false\n    }\n\n    for (let i = 0; i < components.length; i++) {\n      const component = components[i]\n      const validSyntax = Object.values<Field>(FIELDS).find(v => v.constraints[0] === i).allowedSyntax\n      if (!component.match(validSyntax) || component.startsWith('/')) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /*\n   * Parses each of the fields in a cron expression.  The expression must\n   * include the seconds field, the year field is optional.\n   *\n   * @param {String} expr: The cron expression to parse\n   */\n  function parseExpr(expression: string) {\n    const components = expression.replace(/(\\s)+/g, ' ').split(' ')\n    if (!isValidComponents(components)) {\n      return null\n    }\n\n    const schedule: Schedules = {schedules: [{}], exceptions: []}\n\n    for (const field in FIELDS) {\n      const f = FIELDS[field]\n      const component = components[f.constraints[0]]\n      if (component && component !== '*' && component !== '?') {\n        const items = component.split(',')\n        for (let i = 0; i < items.length; i++) {\n          parse(items[i], schedule, field, f.constraints[1], f.constraints[2], f.constraints[3])\n        }\n      }\n    }\n\n    return schedule\n  }\n\n  try {\n    return parseExpr(expr.toUpperCase())\n  } catch {\n    return null\n  }\n}\n","import {controller, target} from '@github/catalyst'\n\nimport prettyCron from '../../assets/modules/github/editor/pretty-cron'\n\n@controller\nexport class PrettyCronElement extends HTMLElement {\n  cron: string\n  @target placeholder: HTMLElement\n  @target richContent: HTMLElement\n  @target human: HTMLElement\n\n  connectedCallback() {\n    this.cron = this.getAttribute('data-cron')!\n    this.human.textContent = prettyCron(this.cron, {capitalize: true})\n    this.placeholder.hidden = true\n    this.richContent.hidden = false\n  }\n}\n"],"names":["prettyCron","cronspec","capitalize","parse","expr","NAMES","JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC","SUN","MON","TUE","WED","THU","FRI","SAT","FIELDS","m","constraints","allowedSyntax","h","D","M","d","getValue","value","offset","max","isNaN","num","add","sched","name","min","inc","i","indexOf","push","sort","a","b","parseExpr","expression","components","replace","split","isValidComponents","length","Object","keys","component","validSyntax","values","find","v","match","startsWith","schedule","schedules","exceptions","field","f","items","item","s","curSched","addRange","incSplit","undefined","range","rangeSplit","toUpperCase","desc","cronstrue","dayOfWeekStartIndexZero","monthStartIndexZero","use24HourTimeFormat","throwExceptionOnParseError","err","charAt","toLowerCase","slice","PrettyCronElement","HTMLElement","connectedCallback","cron","getAttribute","human","textContent","placeholder","hidden","richContent","target","controller"],"sourceRoot":""}
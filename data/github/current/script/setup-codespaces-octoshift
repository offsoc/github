#!/bin/bash
set -e

# This script sets up the github/octoshift repository for a github/github codespace.

RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print help message
help() {
   echo "Sets up the github/octoshift repository for a github/github codespace."
   echo
   echo "Usage: setup-codespaces-octoshift [-b branch] [-d|h] "
   echo "Options:"
   echo "-b     Specify the octoshift branch to clone. Defaults to main if not provided."
   echo "-d     Before starting, delete the existing octoshift directory in the codespace."
   echo "-h     Print this help message."
   echo
}

# check for the presence of the dev-vpn; if it's not connected,
# suggest it if the build fails. Only perform this check on codespaces.
dev_vpn_connected() {
    if dev-vpn status 2>/dev/null | grep -q "vpn request succeeded"; then
        return 0
    else
        return 1
    fi
}

if [ -z "$PROXIMA_PAT" ]; then
  echo "You need to set a PAT in PROXIMA_PAT! Check out https://thehub.github.com/engineering/development-and-ops/codespaces/dotcom-dependants-development/#setup-a-token-once-done-once-skip-this-for-future-services for more instructions."
  exit;
fi

# Set the branch as main. If a branch is provided as an argument, it will be set to that when we parse the provided options.
BRANCH=main

# Get the options
while getopts ":b:hd" opt; do
   case $opt in
      h) # display help message
         help
         exit;;
      b) # If a branch was provided, re-set the variable
         BRANCH=$OPTARG;;
      d) # Delete the repository if it exists
         DELETE_REPO=true;;
     :)
      echo "Error: Option -$OPTARG requires an argument."
      exit 1;;
     \?) # Invalid option
         echo "Error: Invalid option -$OPTARG"
         exit 1;;
   esac
done

if [ "$DELETE_REPO" = true ]; then
  echo -e "\n${GREEN}‚û°Ô∏è Deleting the existing octoshift repo...\n${NC}"
  sudo rm -rf /workspaces/octoshift
fi

# Do a clone of octoshift to the same dir as the github/github repo.
# If a branch was supplied, use that branch for the clone.
echo -e "\n${GREEN}‚û°Ô∏è Cloning octoshift repo at branch $BRANCH...\n${NC}"
git clone https://$PROXIMA_PAT@github.ghe.com/github/octoshift /workspaces/octoshift --branch $BRANCH

# Install dependencies in the octoshift repo
echo -e "\n${GREEN}‚û°Ô∏è Installing octoshift package dependencies...\n${NC}"
(
   cd /workspaces/octoshift

   # Change git user.email if it's a github noreply address
   email_match='@users.noreply.github.com'
   user_email=$(git config user.email)
   if [[ $user_email =~ $email_match ]]; then
      # Get username from email address
      if [[ $user_email =~ [0-9]*\+(.*)@ ]]; then
         # Email format: <DIGITS>+username@users.noreply.github.com
         eval $(git config user.email "${BASH_REMATCH[1]}@github.com")
      else
         # Email format: username@users.noreply.github.com
         eval $(git config user.email $user_email)
      fi
   fi

   # Update Ruby based on Octoshift .ruby-version
   version=$(<.ruby-version)
   version_number=${version#"ruby-"}
   current_version_number=$(rbenv -v | awk '{print $1}')
   if [[ $version_number != $current_version_number ]]; then
      echo -e "\n${GREEN}‚û°Ô∏è Installing Ruby version $version_number...\n${NC}"
      rbenv install $version_number
   fi

   # if the dev-vpn is not connected, attempt to connect.
   if ! dev_vpn_connected; then
      echo -e "\n${RED}üö® The dev-vpn is not connected. Attempting to connect...\n${NC}"
      dev-vpn connect

      if ! dev_vpn_connected; then
         echo -e "\n${RED}üö® The dev-vpn is still not connected. Please connect to the dev-vpn and re-run the script.\n${NC}"
         exit 1
      fi
   fi

   script/bootstrap
)

echo -e ""
echo -e "${GREEN}üéâüéâ FINISHED! The github/octoshift repo has been set up! üéâüéâ"
echo -e "To start the Octoshift containers, run the following commands:${NC}"
echo -e ""
echo -e "${ORANGE}code /workspaces/octoshift"
echo -e "${ORANGE}script/server"

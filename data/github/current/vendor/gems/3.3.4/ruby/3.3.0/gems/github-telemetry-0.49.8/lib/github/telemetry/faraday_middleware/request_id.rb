# frozen_string_literal: true

# Source copied from https://github.com/github/github/blob/master/lib/github/faraday_middleware/request_id.rb

require "securerandom"

module GitHub
  module Telemetry
    module FaradayMiddleware
      # Faraday middleware that inserts the two GitHub specific HTTP headers used to correlate requests.
      #
      # There are constraints in GLB that require these headers to allow for context propagation, which will be removed
      # in https://github.com/github/glb/pull/2651
      #
      # X-GitHub-Request-Id: Generated by [GLB](https://github.com/github/glb/blob/63d86e8f1d00c75b1b8bcd7c8daa99fd6d257638/docs/prr.md#does-your-service-receive-http-requests-if-so-does-it-log-and-add-the-x-github-request-id-http-header-to-needles-if-you-application-performs-http-requests-does-it-also-relay-the-x-github-request-id-http-header-in-those-requests-docs) if not found.
      # If the request originates from the application this middleware will use the current Trace ID as the request header.
      # X-GLB-Via: Helps identify the origin of this request as a ["Trusted Host"](https://github.com/github/glb/blob/master/services/common/configs/acls.cfg.erb#L17)
      class RequestId < ::Faraday::Middleware
        GLB_VIA_HEADER = "X-GLB-Via"

        # Creates a new instance
        #
        # @param app [Faraday] the app that executes the request
        # @param [Hash] options to create this middleware
        # @option options [String] :hostname of the caller e.g. `Socket.gethostname`
        # @option options [GitHub::Telemetry::RequestIdProvider] :request_id_provider encapsulates access to the current request id
        def initialize(app, options = {})
          super(app)
          @request_id_provider = options.fetch(:request_id_provider) { RequestIdProvider.new }
          @hostname = options[:hostname]&.strip
          raise ArgumentError, "Hostname is invalid #{@hostname}" if @hostname.to_s.empty?
        end

        def call(env)
          env.request_headers[HTTP_REQUEST_ID_HEADER] ||= current_request_id
          env.request_headers[GLB_VIA_HEADER] = via_header

          app.call(env)
        end

        private

        attr_reader :app, :hostname, :request_id_provider

        # The X-GLB-Via header is composed of the caller's hostname and the Unix timestamp as a float
        def via_header
          "hostname=#{hostname} t=#{Time.now.utc.to_f}"
        end

        def current_request_id
          request_id_provider.find_or_generate_request_id
        end
      end
    end
  end
end

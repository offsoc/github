# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Orca::V0::PipelineStageEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Orca::V0::PipelineStageEvent`.

class Hydro::Schemas::Orca::V0::PipelineStageEvent
  sig do
    params(
      environment: T.nilable(String),
      error: T.nilable(String),
      pipeline: T.nilable(Hydro::Schemas::Orca::V0::PipelineEvent),
      pipeline_stage_id: T.nilable(String),
      repository_name: T.nilable(String),
      restart_count: T.nilable(Integer),
      stage_name: T.nilable(String),
      status: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(environment: nil, error: nil, pipeline: nil, pipeline_stage_id: nil, repository_name: nil, restart_count: nil, stage_name: nil, status: nil); end

  sig { void }
  def clear_environment; end

  sig { void }
  def clear_error; end

  sig { void }
  def clear_pipeline; end

  sig { void }
  def clear_pipeline_stage_id; end

  sig { void }
  def clear_repository_name; end

  sig { void }
  def clear_restart_count; end

  sig { void }
  def clear_stage_name; end

  sig { void }
  def clear_status; end

  sig { returns(String) }
  def environment; end

  sig { params(value: String).void }
  def environment=(value); end

  sig { returns(String) }
  def error; end

  sig { params(value: String).void }
  def error=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Orca::V0::PipelineEvent)) }
  def pipeline; end

  sig { params(value: T.nilable(Hydro::Schemas::Orca::V0::PipelineEvent)).void }
  def pipeline=(value); end

  sig { returns(String) }
  def pipeline_stage_id; end

  sig { params(value: String).void }
  def pipeline_stage_id=(value); end

  sig { returns(String) }
  def repository_name; end

  sig { params(value: String).void }
  def repository_name=(value); end

  sig { returns(Integer) }
  def restart_count; end

  sig { params(value: Integer).void }
  def restart_count=(value); end

  sig { returns(String) }
  def stage_name; end

  sig { params(value: String).void }
  def stage_name=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end
end

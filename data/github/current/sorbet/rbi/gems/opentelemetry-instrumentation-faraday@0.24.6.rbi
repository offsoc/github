# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opentelemetry-instrumentation-faraday` gem.
# Please instead update this file by running `bin/tapioca gem opentelemetry-instrumentation-faraday`.

# OpenTelemetry is an open source observability framework, providing a
# general-purpose API, SDK, and related tools required for the instrumentation
# of cloud-native software, frameworks, and libraries.
#
# The OpenTelemetry module provides global accessors for telemetry objects.
# See the documentation for the `opentelemetry-api` gem for details.
#
# source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/middlewares/tracer_middleware.rb#7
module OpenTelemetry
  extend ::OpenTelemetry

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#36
  def error_handler; end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#27
  def error_handler=(_arg0); end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#44
  def handle_error(exception: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#30
  def logger; end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#27
  def logger=(_arg0); end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#69
  def propagation; end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#27
  def propagation=(_arg0); end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#64
  def tracer_provider; end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#52
  def tracer_provider=(provider); end
end

class OpenTelemetry::Error < ::StandardError; end

# "Instrumentation" are specified by
# https://github.com/open-telemetry/opentelemetry-specification/blob/784635d01d8690c8f5fcd1f55bdbc8a13cf2f4f2/specification/glossary.md#instrumentation-library
#
# Instrumentation should be able to handle the case when the library is not installed on a user's system.
#
# source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/middlewares/tracer_middleware.rb#8
module OpenTelemetry::Instrumentation
  extend ::OpenTelemetry::Instrumentation

  # source://opentelemetry-registry/0.3.1/lib/opentelemetry/instrumentation.rb#21
  def registry; end
end

# Contains the OpenTelemetry instrumentation for the Faraday gem
#
# source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/middlewares/tracer_middleware.rb#9
module OpenTelemetry::Instrumentation::Faraday; end

# The Instrumentation class contains logic to detect and install the Faraday
# instrumentation
class OpenTelemetry::Instrumentation::Faraday::Instrumentation < ::OpenTelemetry::Instrumentation::Base
  private

  # source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/instrumentation.rb#34
  def register_tracer_middleware; end

  # source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/instrumentation.rb#28
  def require_dependencies; end

  # source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/instrumentation.rb#40
  def use_middleware_by_default; end
end

# source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/middlewares/tracer_middleware.rb#10
module OpenTelemetry::Instrumentation::Faraday::Middlewares; end

# TracerMiddleware propagates context and instruments Faraday requests
# by way of its middlware system
#
# source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/middlewares/tracer_middleware.rb#13
class OpenTelemetry::Instrumentation::Faraday::Middlewares::TracerMiddleware < ::Faraday::Middleware
  # source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/middlewares/tracer_middleware.rb#26
  def call(env); end

  private

  # Versions prior to 1.0 do not define an accessor for app
  #
  # source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/middlewares/tracer_middleware.rb#63
  def app; end

  # source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/middlewares/tracer_middleware.rb#48
  def span_creation_attributes(http_method:, url:, config:); end

  # source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/middlewares/tracer_middleware.rb#69
  def trace_response(span, status); end

  # source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/middlewares/tracer_middleware.rb#65
  def tracer; end
end

# source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/middlewares/tracer_middleware.rb#14
OpenTelemetry::Instrumentation::Faraday::Middlewares::TracerMiddleware::HTTP_METHODS_SYMBOL_TO_STRING = T.let(T.unsafe(nil), Hash)

# source://opentelemetry-instrumentation-faraday//lib/opentelemetry/instrumentation/faraday/version.rb#10
OpenTelemetry::Instrumentation::Faraday::VERSION = T.let(T.unsafe(nil), String)

module OpenTelemetry::SemanticConventions; end
module OpenTelemetry::SemanticConventions::Resource; end
module OpenTelemetry::SemanticConventions::Trace; end

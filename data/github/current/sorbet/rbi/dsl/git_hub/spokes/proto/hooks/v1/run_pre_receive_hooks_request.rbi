# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::Hooks::V1::RunPreReceiveHooksRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::Hooks::V1::RunPreReceiveHooksRequest`.

class GitHub::Spokes::Proto::Hooks::V1::RunPreReceiveHooksRequest
  sig do
    params(
      hook_mode: T.nilable(T.any(Symbol, Integer)),
      reference_updates: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Spokes::Proto::Types::V1::ReferenceUpdate], T::Array[GitHub::Spokes::Proto::Types::V1::ReferenceUpdate])),
      repository: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository),
      request_context: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext),
      sockstat: T.nilable(GitHub::Spokes::Proto::Types::V1::Sockstat)
    ).void
  end
  def initialize(hook_mode: nil, reference_updates: T.unsafe(nil), repository: nil, request_context: nil, sockstat: nil); end

  sig { void }
  def clear_hook_mode; end

  sig { void }
  def clear_reference_updates; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_sockstat; end

  sig { returns(T.any(Symbol, Integer)) }
  def hook_mode; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def hook_mode=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Spokes::Proto::Types::V1::ReferenceUpdate]) }
  def reference_updates; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Spokes::Proto::Types::V1::ReferenceUpdate]).void }
  def reference_updates=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)) }
  def repository; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Sockstat)) }
  def sockstat; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Sockstat)).void }
  def sockstat=(value); end
end

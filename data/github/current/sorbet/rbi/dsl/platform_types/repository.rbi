# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PlatformTypes::Repository`.
# Please instead update this file by running `bin/tapioca dsl PlatformTypes::Repository`.

class PlatformTypes::Repository < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(PlatformTypes::AbuseReportConnection) }
  def abuse_reported_to_maintainer; end

  sig { returns(T::Boolean) }
  def abuse_reported_to_maintainer?; end

  sig { returns(T::Boolean) }
  def action_invocation_blocked; end

  sig { returns(T::Boolean) }
  def action_invocation_blocked?; end

  sig { returns(Integer) }
  def actions_cache_size_limit; end

  sig { returns(T::Boolean) }
  def actions_cache_size_limit?; end

  sig { returns(T.nilable(PlatformTypes::ActionsFilterDiff)) }
  def actions_filter_diff; end

  sig { returns(T::Boolean) }
  def actions_filter_diff?; end

  sig { returns(T.nilable(PlatformTypes::ActionsPlanOwner)) }
  def actions_plan_owner; end

  sig { returns(T::Boolean) }
  def actions_plan_owner?; end

  sig { returns(Integer) }
  def actions_retention_limit; end

  sig { returns(T::Boolean) }
  def actions_retention_limit?; end

  sig { returns(PlatformTypes::ActivityConnection) }
  def activity; end

  sig { returns(T::Boolean) }
  def activity?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryAdminInfo)) }
  def admin_info; end

  sig { returns(T::Boolean) }
  def admin_info?; end

  sig { returns(T::Boolean) }
  def allow_update_branch; end

  sig { returns(T::Boolean) }
  def allow_update_branch?; end

  sig { returns(T::Boolean) }
  def allows_all_actions; end

  sig { returns(T::Boolean) }
  def allows_all_actions?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def archived_at; end

  sig { returns(T::Boolean) }
  def archived_at?; end

  sig { returns(PlatformTypes::UserConnection) }
  def assignable_users; end

  sig { returns(T::Boolean) }
  def assignable_users?; end

  sig { returns(T::Boolean) }
  def auto_merge_allowed; end

  sig { returns(T::Boolean) }
  def auto_merge_allowed?; end

  sig { returns(PlatformTypes::BranchProtectionRuleConnection) }
  def branch_protection_rules; end

  sig { returns(T::Boolean) }
  def branch_protection_rules?; end

  sig { returns(T::Array[String]) }
  def branches_including_default_first; end

  sig { returns(T::Boolean) }
  def branches_including_default_first?; end

  sig { returns(T::Boolean) }
  def can_enable_projects; end

  sig { returns(T::Boolean) }
  def can_enable_projects?; end

  sig { returns(T::Boolean) }
  def can_use_environments; end

  sig { returns(T::Boolean) }
  def can_use_environments?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def clone_resource_path; end

  sig { returns(T::Boolean) }
  def clone_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def clone_url; end

  sig { returns(T::Boolean) }
  def clone_url?; end

  sig { returns(T.nilable(String)) }
  def cname_error; end

  sig { returns(T::Boolean) }
  def cname_error?; end

  sig { returns(T.nilable(PlatformTypes::CodeOfConduct)) }
  def code_of_conduct; end

  sig { returns(T::Boolean) }
  def code_of_conduct?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def code_of_conduct_file_url; end

  sig { returns(T::Boolean) }
  def code_of_conduct_file_url?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryCodeowners)) }
  def codeowners; end

  sig { returns(T::Boolean) }
  def codeowners?; end

  sig { returns(T.nilable(PlatformTypes::CodeqlDatabaseConnection)) }
  def codeql_databases; end

  sig { returns(T::Boolean) }
  def codeql_databases?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryCollaboratorConnection)) }
  def collaborators; end

  sig { returns(T::Boolean) }
  def collaborators?; end

  sig { returns(T::Boolean) }
  def collaborators_only; end

  sig { returns(T::Boolean) }
  def collaborators_only?; end

  sig { returns(PlatformTypes::CommitCommentConnection) }
  def commit_comments; end

  sig { returns(T::Boolean) }
  def commit_comments?; end

  sig { returns(T.nilable(T::Boolean)) }
  def commit_is_from_merge_queue; end

  sig { returns(T::Boolean) }
  def commit_is_from_merge_queue?; end

  sig { returns(T.nilable(T::Boolean)) }
  def commit_is_in_branch_or_tag; end

  sig { returns(T::Boolean) }
  def commit_is_in_branch_or_tag?; end

  sig { returns(T.nilable(PlatformTypes::CommitRevision)) }
  def commit_revision; end

  sig { returns(T::Boolean) }
  def commit_revision?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def commits_resource_path; end

  sig { returns(T::Boolean) }
  def commits_resource_path?; end

  sig { returns(T.nilable(PlatformTypes::CommunityProfile)) }
  def community_profile; end

  sig { returns(T::Boolean) }
  def community_profile?; end

  sig { returns(T.nilable(T::Array[PlatformTypes::RepositoryContactLink])) }
  def contact_links; end

  sig { returns(T::Boolean) }
  def contact_links?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def contributing_file_url; end

  sig { returns(T::Boolean) }
  def contributing_file_url?; end

  sig { returns(T.nilable(PlatformTypes::ContributingGuidelines)) }
  def contributing_guidelines; end

  sig { returns(T::Boolean) }
  def contributing_guidelines?; end

  sig { returns(PlatformTypes::RepositoryContributorConnection) }
  def contributors; end

  sig { returns(T::Boolean) }
  def contributors?; end

  sig { returns(Integer) }
  def contributors_count; end

  sig { returns(T::Boolean) }
  def contributors_count?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def created_at; end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T::Boolean) }
  def customize_enterprise_oidc_issuer; end

  sig { returns(T::Boolean) }
  def customize_enterprise_oidc_issuer?; end

  sig { returns(T.nilable(Integer)) }
  def database_id; end

  sig { returns(T::Boolean) }
  def database_id?; end

  sig { returns(String) }
  def default_branch; end

  sig { returns(T::Boolean) }
  def default_branch?; end

  sig { returns(T.nilable(PlatformTypes::Ref)) }
  def default_branch_ref; end

  sig { returns(T::Boolean) }
  def default_branch_ref?; end

  sig { returns(T.nilable(String)) }
  def default_workflow_permissions; end

  sig { returns(T::Boolean) }
  def default_workflow_permissions?; end

  sig { returns(T::Boolean) }
  def delete_branch_on_merge; end

  sig { returns(T::Boolean) }
  def delete_branch_on_merge?; end

  sig { returns(T.nilable(PlatformTypes::DeletedIssue)) }
  def deleted_issue; end

  sig { returns(T::Boolean) }
  def deleted_issue?; end

  sig { returns(T.nilable(PlatformTypes::DependencyGraphManifestConnection)) }
  def dependency_graph_manifests; end

  sig { returns(T::Boolean) }
  def dependency_graph_manifests?; end

  sig { returns(T.nilable(PlatformTypes::DependencyGraphPackageConnection)) }
  def dependency_graph_packages; end

  sig { returns(T::Boolean) }
  def dependency_graph_packages?; end

  sig { returns(PlatformTypes::DeployKeyConnection) }
  def deploy_keys; end

  sig { returns(T::Boolean) }
  def deploy_keys?; end

  sig { returns(PlatformTypes::DeploymentConnection) }
  def deployments; end

  sig { returns(T::Boolean) }
  def deployments?; end

  sig { returns(T.nilable(String)) }
  def description; end

  sig { returns(T::Boolean) }
  def description?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def description_html; end

  sig { returns(T::Boolean) }
  def description_html?; end

  sig { returns(T.nilable(PlatformTypes::Discussion)) }
  def discussion; end

  sig { returns(T::Boolean) }
  def discussion?; end

  sig { returns(PlatformTypes::DiscussionCategoryConnection) }
  def discussion_categories; end

  sig { returns(T::Boolean) }
  def discussion_categories?; end

  sig { returns(T.nilable(PlatformTypes::DiscussionCategory)) }
  def discussion_category; end

  sig { returns(T::Boolean) }
  def discussion_category?; end

  sig { returns(PlatformTypes::DiscussionConnection) }
  def discussions; end

  sig { returns(T::Boolean) }
  def discussions?; end

  sig { returns(Integer) }
  def discussions_count; end

  sig { returns(T::Boolean) }
  def discussions_count?; end

  sig { returns(T.nilable(Integer)) }
  def disk_usage; end

  sig { returns(T::Boolean) }
  def disk_usage?; end

  sig { returns(T.nilable(PlatformTypes::Environment)) }
  def environment; end

  sig { returns(T::Boolean) }
  def environment?; end

  sig { returns(PlatformTypes::EnvironmentConnection) }
  def environments; end

  sig { returns(T::Boolean) }
  def environments?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def exported_to_url; end

  sig { returns(T::Boolean) }
  def exported_to_url?; end

  sig { returns(Integer) }
  def fork_count; end

  sig { returns(T::Boolean) }
  def fork_count?; end

  sig { returns(String) }
  def fork_pr_workflows_policy; end

  sig { returns(T::Boolean) }
  def fork_pr_workflows_policy?; end

  sig { returns(T::Boolean) }
  def forking_allowed; end

  sig { returns(T::Boolean) }
  def forking_allowed?; end

  sig { returns(PlatformTypes::RepositoryConnection) }
  def forks; end

  sig { returns(T::Boolean) }
  def forks?; end

  sig { returns(T::Array[PlatformTypes::FundingLink]) }
  def funding_links; end

  sig { returns(T::Boolean) }
  def funding_links?; end

  sig { returns(T.nilable(T::Boolean)) }
  def gh_pages_error; end

  sig { returns(T::Boolean) }
  def gh_pages_error?; end

  sig { returns(T.nilable(String)) }
  def gh_pages_error_message; end

  sig { returns(T::Boolean) }
  def gh_pages_error_message?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def gh_pages_url; end

  sig { returns(T::Boolean) }
  def gh_pages_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def git_url; end

  sig { returns(T::Boolean) }
  def git_url?; end

  sig { returns(T.nilable(PlatformTypes::Label)) }
  def good_first_issue_label; end

  sig { returns(T::Boolean) }
  def good_first_issue_label?; end

  sig { returns(T::Boolean) }
  def has_action_at_root; end

  sig { returns(T::Boolean) }
  def has_action_at_root?; end

  sig { returns(T::Boolean) }
  def has_anonymous_access_enabled; end

  sig { returns(T::Boolean) }
  def has_anonymous_access_enabled?; end

  sig { returns(T::Boolean) }
  def has_closable_discussions_enabled; end

  sig { returns(T::Boolean) }
  def has_closable_discussions_enabled?; end

  sig { returns(T::Boolean) }
  def has_discussions_enabled; end

  sig { returns(T::Boolean) }
  def has_discussions_enabled?; end

  sig { returns(T::Boolean) }
  def has_downloads; end

  sig { returns(T::Boolean) }
  def has_downloads?; end

  sig { returns(T::Boolean) }
  def has_heads; end

  sig { returns(T::Boolean) }
  def has_heads?; end

  sig { returns(T::Boolean) }
  def has_issues_enabled; end

  sig { returns(T::Boolean) }
  def has_issues_enabled?; end

  sig { returns(T::Boolean) }
  def has_listable_action; end

  sig { returns(T::Boolean) }
  def has_listable_action?; end

  sig { returns(T::Boolean) }
  def has_nested_discussion_answers_enabled; end

  sig { returns(T::Boolean) }
  def has_nested_discussion_answers_enabled?; end

  sig { returns(T::Boolean) }
  def has_page; end

  sig { returns(T::Boolean) }
  def has_page?; end

  sig { returns(T::Boolean) }
  def has_pages; end

  sig { returns(T::Boolean) }
  def has_pages?; end

  sig { returns(T::Boolean) }
  def has_projects_enabled; end

  sig { returns(T::Boolean) }
  def has_projects_enabled?; end

  sig { returns(T::Boolean) }
  def has_report_to_maintainer_enabled; end

  sig { returns(T::Boolean) }
  def has_report_to_maintainer_enabled?; end

  sig { returns(T::Boolean) }
  def has_restricted_wiki_editing; end

  sig { returns(T::Boolean) }
  def has_restricted_wiki_editing?; end

  sig { returns(T::Boolean) }
  def has_sponsorships_enabled; end

  sig { returns(T::Boolean) }
  def has_sponsorships_enabled?; end

  sig { returns(T::Boolean) }
  def has_vulnerability_alerts_enabled; end

  sig { returns(T::Boolean) }
  def has_vulnerability_alerts_enabled?; end

  sig { returns(T::Boolean) }
  def has_wiki_enabled; end

  sig { returns(T::Boolean) }
  def has_wiki_enabled?; end

  sig { returns(T.nilable(PlatformTypes::Label)) }
  def help_wanted_label; end

  sig { returns(T::Boolean) }
  def help_wanted_label?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def homepage_url; end

  sig { returns(T::Boolean) }
  def homepage_url?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(PlatformTypes::InstalledAppInstallationsConnection) }
  def installed_app_installations; end

  sig { returns(T::Boolean) }
  def installed_app_installations?; end

  sig { returns(PlatformTypes::InstalledAppConnection) }
  def installed_apps; end

  sig { returns(T::Boolean) }
  def installed_apps?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryInteractionAbility)) }
  def interaction_ability; end

  sig { returns(T::Boolean) }
  def interaction_ability?; end

  sig { returns(T::Boolean) }
  def is_actions_disabled_at_any_level; end

  sig { returns(T::Boolean) }
  def is_actions_disabled_at_any_level?; end

  sig { returns(T::Boolean) }
  def is_actions_disabled_by_owner; end

  sig { returns(T::Boolean) }
  def is_actions_disabled_by_owner?; end

  sig { returns(T::Boolean) }
  def is_actions_eligible; end

  sig { returns(T::Boolean) }
  def is_actions_eligible?; end

  sig { returns(T::Boolean) }
  def is_advisory_workspace; end

  sig { returns(T::Boolean) }
  def is_advisory_workspace?; end

  sig { returns(T::Boolean) }
  def is_anonymous_access_available; end

  sig { returns(T::Boolean) }
  def is_anonymous_access_available?; end

  sig { returns(T::Boolean) }
  def is_archived; end

  sig { returns(T::Boolean) }
  def is_archived?; end

  sig { returns(T::Boolean) }
  def is_beta_feature_enabled; end

  sig { returns(T::Boolean) }
  def is_beta_feature_enabled?; end

  sig { returns(T::Boolean) }
  def is_blank_issues_enabled; end

  sig { returns(T::Boolean) }
  def is_blank_issues_enabled?; end

  sig { returns(T::Boolean) }
  def is_disabled; end

  sig { returns(T::Boolean) }
  def is_disabled?; end

  sig { returns(T::Boolean) }
  def is_discussions_enabled; end

  sig { returns(T::Boolean) }
  def is_discussions_enabled?; end

  sig { returns(T::Boolean) }
  def is_empty; end

  sig { returns(T::Boolean) }
  def is_empty?; end

  sig { returns(T::Boolean) }
  def is_enterprise_managed; end

  sig { returns(T::Boolean) }
  def is_enterprise_managed?; end

  sig { returns(T.nilable(T::Boolean)) }
  def is_excluded_from_issue_types; end

  sig { returns(T::Boolean) }
  def is_excluded_from_issue_types?; end

  sig { returns(T::Boolean) }
  def is_feature_enabled; end

  sig { returns(T::Boolean) }
  def is_feature_enabled?; end

  sig { returns(T::Boolean) }
  def is_fork; end

  sig { returns(T::Boolean) }
  def is_fork?; end

  sig { returns(T::Boolean) }
  def is_hidden_from_discovery; end

  sig { returns(T::Boolean) }
  def is_hidden_from_discovery?; end

  sig { returns(T::Boolean) }
  def is_in_organization; end

  sig { returns(T::Boolean) }
  def is_in_organization?; end

  sig { returns(T::Boolean) }
  def is_locked; end

  sig { returns(T::Boolean) }
  def is_locked?; end

  sig { returns(T::Boolean) }
  def is_mirror; end

  sig { returns(T::Boolean) }
  def is_mirror?; end

  sig { returns(T::Boolean) }
  def is_organization_discussion_repository; end

  sig { returns(T::Boolean) }
  def is_organization_discussion_repository?; end

  sig { returns(T.nilable(T::Boolean)) }
  def is_owner_enterprise_managed; end

  sig { returns(T::Boolean) }
  def is_owner_enterprise_managed?; end

  sig { returns(T::Boolean) }
  def is_pinned; end

  sig { returns(T::Boolean) }
  def is_pinned?; end

  sig { returns(T::Boolean) }
  def is_private; end

  sig { returns(T::Boolean) }
  def is_private?; end

  sig { returns(T.nilable(T::Boolean)) }
  def is_security_policy_enabled; end

  sig { returns(T::Boolean) }
  def is_security_policy_enabled?; end

  sig { returns(T::Boolean) }
  def is_stack_template; end

  sig { returns(T::Boolean) }
  def is_stack_template?; end

  sig { returns(T::Boolean) }
  def is_template; end

  sig { returns(T::Boolean) }
  def is_template?; end

  sig { returns(T::Boolean) }
  def is_trade_controls_read_only; end

  sig { returns(T::Boolean) }
  def is_trade_controls_read_only?; end

  sig { returns(T::Boolean) }
  def is_user_configuration_repository; end

  sig { returns(T::Boolean) }
  def is_user_configuration_repository?; end

  sig { returns(T::Boolean) }
  def is_user_pages_repo; end

  sig { returns(T::Boolean) }
  def is_user_pages_repo?; end

  sig { returns(T::Boolean) }
  def is_viewers_favorite; end

  sig { returns(T::Boolean) }
  def is_viewers_favorite?; end

  sig { returns(T::Boolean) }
  def is_writable; end

  sig { returns(T::Boolean) }
  def is_writable?; end

  sig { returns(T.nilable(PlatformTypes::Issue)) }
  def issue; end

  sig { returns(T::Boolean) }
  def issue?; end

  sig { returns(T.nilable(T::Array[PlatformTypes::RepositoryContactLink])) }
  def issue_form_links; end

  sig { returns(T::Boolean) }
  def issue_form_links?; end

  sig { returns(T.nilable(T::Array[PlatformTypes::IssueForm])) }
  def issue_forms; end

  sig { returns(T::Boolean) }
  def issue_forms?; end

  sig { returns(T.nilable(T.any(PlatformTypes::Issue, PlatformTypes::PullRequest))) }
  def issue_or_pull_request; end

  sig { returns(T::Boolean) }
  def issue_or_pull_request?; end

  sig { returns(T.nilable(T::Array[PlatformTypes::IssueTemplate])) }
  def issue_templates; end

  sig { returns(T::Boolean) }
  def issue_templates?; end

  sig { returns(T.nilable(PlatformTypes::IssueType)) }
  def issue_type; end

  sig { returns(T::Boolean) }
  def issue_type?; end

  sig { returns(T.nilable(PlatformTypes::IssueTypeConnection)) }
  def issue_types; end

  sig { returns(T::Boolean) }
  def issue_types?; end

  sig { returns(PlatformTypes::IssueConnection) }
  def issues; end

  sig { returns(T::Boolean) }
  def issues?; end

  sig { returns(T.nilable(PlatformTypes::Label)) }
  def label; end

  sig { returns(T::Boolean) }
  def label?; end

  sig { returns(T.nilable(PlatformTypes::LabelConnection)) }
  def labels; end

  sig { returns(T::Boolean) }
  def labels?; end

  sig { returns(T.nilable(PlatformTypes::LanguageConnection)) }
  def languages; end

  sig { returns(T::Boolean) }
  def languages?; end

  sig { returns(T.nilable(PlatformTypes::Commit)) }
  def latest_commit; end

  sig { returns(T::Boolean) }
  def latest_commit?; end

  sig { returns(T.nilable(PlatformTypes::Release)) }
  def latest_release; end

  sig { returns(T::Boolean) }
  def latest_release?; end

  sig { returns(T.nilable(String)) }
  def license_contents; end

  sig { returns(T::Boolean) }
  def license_contents?; end

  sig { returns(T.nilable(PlatformTypes::License)) }
  def license_info; end

  sig { returns(T::Boolean) }
  def license_info?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryAction)) }
  def listed_action; end

  sig { returns(T::Boolean) }
  def listed_action?; end

  sig { returns(PlatformTypes::UserListConnection) }
  def lists; end

  sig { returns(T::Boolean) }
  def lists?; end

  sig { returns(T.nilable(String)) }
  def lock_reason; end

  sig { returns(T::Boolean) }
  def lock_reason?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def markdown_preview; end

  sig { returns(T::Boolean) }
  def markdown_preview?; end

  sig { returns(PlatformTypes::UserConnection) }
  def mentionable_users; end

  sig { returns(T::Boolean) }
  def mentionable_users?; end

  sig { returns(T::Boolean) }
  def merge_commit_allowed; end

  sig { returns(T::Boolean) }
  def merge_commit_allowed?; end

  sig { returns(String) }
  def merge_commit_message; end

  sig { returns(T::Boolean) }
  def merge_commit_message?; end

  sig { returns(String) }
  def merge_commit_title; end

  sig { returns(T::Boolean) }
  def merge_commit_title?; end

  sig { returns(T.nilable(PlatformTypes::MergeQueue)) }
  def merge_queue; end

  sig { returns(T::Boolean) }
  def merge_queue?; end

  sig { returns(T.nilable(PlatformTypes::Milestone)) }
  def milestone; end

  sig { returns(T::Boolean) }
  def milestone?; end

  sig { returns(T.nilable(PlatformTypes::Milestone)) }
  def milestone_by_title; end

  sig { returns(T::Boolean) }
  def milestone_by_title?; end

  sig { returns(T.nilable(PlatformTypes::MilestoneConnection)) }
  def milestones; end

  sig { returns(T::Boolean) }
  def milestones?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def mirror_url; end

  sig { returns(T::Boolean) }
  def mirror_url?; end

  sig { returns(String) }
  def name; end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(String) }
  def name_with_owner; end

  sig { returns(T::Boolean) }
  def name_with_owner?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryNetwork)) }
  def network; end

  sig { returns(T::Boolean) }
  def network?; end

  sig { returns(Integer) }
  def network_count; end

  sig { returns(T::Boolean) }
  def network_count?; end

  sig { returns(T::Boolean) }
  def network_present; end

  sig { returns(T::Boolean) }
  def network_present?; end

  sig { returns(T::Boolean) }
  def no_index; end

  sig { returns(T::Boolean) }
  def no_index?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def object; end

  sig { returns(T::Boolean) }
  def object?; end

  sig { returns(T.nilable(String)) }
  def oidc_sub_claim_customization_template; end

  sig { returns(T::Boolean) }
  def oidc_sub_claim_customization_template?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryImage)) }
  def open_graph_image; end

  sig { returns(T::Boolean) }
  def open_graph_image?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def open_graph_image_url; end

  sig { returns(T::Boolean) }
  def open_graph_image_url?; end

  sig { returns(T::Boolean) }
  def org_members_can_create_pages; end

  sig { returns(T::Boolean) }
  def org_members_can_create_pages?; end

  sig { returns(T.nilable(PlatformTypes::Organization)) }
  def organization; end

  sig { returns(T::Boolean) }
  def organization?; end

  sig { returns(T.nilable(Integer)) }
  def organization_database_id; end

  sig { returns(T::Boolean) }
  def organization_database_id?; end

  sig { returns(T.nilable(T::Boolean)) }
  def organization_discussion; end

  sig { returns(T::Boolean) }
  def organization_discussion?; end

  sig { returns(GraphQL::Client::Schema::InterfaceType) }
  def owner; end

  sig { returns(T::Boolean) }
  def owner?; end

  sig { returns(T.nilable(PlatformTypes::Package)) }
  def package; end

  sig { returns(T::Boolean) }
  def package?; end

  sig { returns(T.nilable(PlatformTypes::PackageVersion)) }
  def package_version; end

  sig { returns(T::Boolean) }
  def package_version?; end

  sig { returns(PlatformTypes::PackageConnection) }
  def packages; end

  sig { returns(T::Boolean) }
  def packages?; end

  sig { returns(PlatformTypes::PackageConnection) }
  def packages_for_query; end

  sig { returns(T::Boolean) }
  def packages_for_query?; end

  sig { returns(PlatformTypes::PageDeploymentConnection) }
  def page_deployments; end

  sig { returns(T::Boolean) }
  def page_deployments?; end

  sig { returns(T.nilable(String)) }
  def page_source; end

  sig { returns(T::Boolean) }
  def page_source?; end

  sig { returns(T.nilable(String)) }
  def page_source_directory; end

  sig { returns(T::Boolean) }
  def page_source_directory?; end

  sig { returns(T.nilable(PlatformTypes::Repository)) }
  def parent; end

  sig { returns(T::Boolean) }
  def parent?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def permalink; end

  sig { returns(T::Boolean) }
  def permalink?; end

  sig { returns(PlatformTypes::PinnedDiscussionConnection) }
  def pinned_discussions; end

  sig { returns(T::Boolean) }
  def pinned_discussions?; end

  sig { returns(T.nilable(PlatformTypes::PinnedEnvironmentConnection)) }
  def pinned_environments; end

  sig { returns(T::Boolean) }
  def pinned_environments?; end

  sig { returns(T.nilable(PlatformTypes::PinnedIssueConnection)) }
  def pinned_issues; end

  sig { returns(T::Boolean) }
  def pinned_issues?; end

  sig { returns(PlatformTypes::RepositoryPlanFeatures) }
  def plan_features; end

  sig { returns(T::Boolean) }
  def plan_features?; end

  sig { returns(Integer) }
  def plan_limit; end

  sig { returns(T::Boolean) }
  def plan_limit?; end

  sig { returns(T::Boolean) }
  def plan_supports; end

  sig { returns(T::Boolean) }
  def plan_supports?; end

  sig { returns(T.nilable(PlatformTypes::Language)) }
  def primary_language; end

  sig { returns(T::Boolean) }
  def primary_language?; end

  sig { returns(T.nilable(PlatformTypes::PageDeployment)) }
  def primary_page_deployment; end

  sig { returns(T::Boolean) }
  def primary_page_deployment?; end

  sig { returns(T.nilable(PlatformTypes::Project)) }
  def project; end

  sig { returns(T::Boolean) }
  def project?; end

  sig { returns(T.nilable(PlatformTypes::ProjectNext)) }
  def project_next; end

  sig { returns(T::Boolean) }
  def project_next?; end

  sig { returns(T.nilable(PlatformTypes::ProjectV2)) }
  def project_v2; end

  sig { returns(T::Boolean) }
  def project_v2?; end

  sig { returns(PlatformTypes::ProjectConnection) }
  def projects; end

  sig { returns(T::Boolean) }
  def projects?; end

  sig { returns(PlatformTypes::ProjectNextConnection) }
  def projects_next; end

  sig { returns(T::Boolean) }
  def projects_next?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def projects_resource_path; end

  sig { returns(T::Boolean) }
  def projects_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def projects_url; end

  sig { returns(T::Boolean) }
  def projects_url?; end

  sig { returns(PlatformTypes::ProjectV2Connection) }
  def projects_v2; end

  sig { returns(T::Boolean) }
  def projects_v2?; end

  sig { returns(String) }
  def public_fork_pr_workflows_policy; end

  sig { returns(T::Boolean) }
  def public_fork_pr_workflows_policy?; end

  sig { returns(T.nilable(PlatformTypes::PullRequest)) }
  def pull_request; end

  sig { returns(T::Boolean) }
  def pull_request?; end

  sig { returns(T.nilable(T::Array[PlatformTypes::PullRequestTemplate])) }
  def pull_request_templates; end

  sig { returns(T::Boolean) }
  def pull_request_templates?; end

  sig { returns(PlatformTypes::PullRequestConnection) }
  def pull_requests; end

  sig { returns(T::Boolean) }
  def pull_requests?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def pushed_at; end

  sig { returns(T::Boolean) }
  def pushed_at?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryReadme)) }
  def readme; end

  sig { returns(T::Boolean) }
  def readme?; end

  sig { returns(T::Boolean) }
  def rebase_merge_allowed; end

  sig { returns(T::Boolean) }
  def rebase_merge_allowed?; end

  sig { returns(PlatformTypes::ProjectV2Connection) }
  def recent_projects; end

  sig { returns(T::Boolean) }
  def recent_projects?; end

  sig { returns(PlatformTypes::ProjectNextConnection) }
  def recent_projects_next; end

  sig { returns(T::Boolean) }
  def recent_projects_next?; end

  sig { returns(T.nilable(PlatformTypes::Ref)) }
  def ref; end

  sig { returns(T::Boolean) }
  def ref?; end

  sig { returns(T.nilable(PlatformTypes::RefConnection)) }
  def refs; end

  sig { returns(T::Boolean) }
  def refs?; end

  sig { returns(T.nilable(PlatformTypes::Release)) }
  def release; end

  sig { returns(T::Boolean) }
  def release?; end

  sig { returns(PlatformTypes::ReleaseConnection) }
  def releases; end

  sig { returns(T::Boolean) }
  def releases?; end

  sig { returns(T::Boolean) }
  def repo_self_hosted_runners_disabled; end

  sig { returns(T::Boolean) }
  def repo_self_hosted_runners_disabled?; end

  sig { returns(String) }
  def repo_type_icon; end

  sig { returns(T::Boolean) }
  def repo_type_icon?; end

  sig { returns(PlatformTypes::RepositoryTopicConnection) }
  def repository_topics; end

  sig { returns(T::Boolean) }
  def repository_topics?; end

  sig { returns(T::Boolean) }
  def require_login; end

  sig { returns(T::Boolean) }
  def require_login?; end

  sig { returns(T::Boolean) }
  def require_opt_in; end

  sig { returns(T::Boolean) }
  def require_opt_in?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def resource_path; end

  sig { returns(T::Boolean) }
  def resource_path?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryRuleset)) }
  def ruleset; end

  sig { returns(T::Boolean) }
  def ruleset?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryRulesetConnection)) }
  def rulesets; end

  sig { returns(T::Boolean) }
  def rulesets?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def security_policy_url; end

  sig { returns(T::Boolean) }
  def security_policy_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def short_description_html; end

  sig { returns(T::Boolean) }
  def short_description_html?; end

  sig { returns(T::Boolean) }
  def should_upsell_ci; end

  sig { returns(T::Boolean) }
  def should_upsell_ci?; end

  sig { returns(T::Boolean) }
  def show_actions; end

  sig { returns(T::Boolean) }
  def show_actions?; end

  sig { returns(T::Boolean) }
  def show_enhanced_og_image; end

  sig { returns(T::Boolean) }
  def show_enhanced_og_image?; end

  sig { returns(T.nilable(T::Boolean)) }
  def show_first_time_contributor_banner; end

  sig { returns(T::Boolean) }
  def show_first_time_contributor_banner?; end

  sig { returns(PlatformTypes::IssueConnection) }
  def similar_issues; end

  sig { returns(T::Boolean) }
  def similar_issues?; end

  sig { returns(T::Boolean) }
  def slash_commands_enabled; end

  sig { returns(T::Boolean) }
  def slash_commands_enabled?; end

  sig { returns(String) }
  def sparkle_keyword; end

  sig { returns(T::Boolean) }
  def sparkle_keyword?; end

  sig { returns(T::Boolean) }
  def squash_merge_allowed; end

  sig { returns(T::Boolean) }
  def squash_merge_allowed?; end

  sig { returns(String) }
  def squash_merge_commit_message; end

  sig { returns(T::Boolean) }
  def squash_merge_commit_message?; end

  sig { returns(String) }
  def squash_merge_commit_title; end

  sig { returns(T::Boolean) }
  def squash_merge_commit_title?; end

  sig { returns(T::Boolean) }
  def squash_pr_title_used_as_default; end

  sig { returns(T::Boolean) }
  def squash_pr_title_used_as_default?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def ssh_url; end

  sig { returns(T::Boolean) }
  def ssh_url?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryStafftoolsInfo)) }
  def stafftools_info; end

  sig { returns(T::Boolean) }
  def stafftools_info?; end

  sig { returns(Integer) }
  def stargazer_count; end

  sig { returns(T::Boolean) }
  def stargazer_count?; end

  sig { returns(PlatformTypes::StargazerConnection) }
  def stargazers; end

  sig { returns(T::Boolean) }
  def stargazers?; end

  sig { returns(Integer) }
  def stars_since; end

  sig { returns(T::Boolean) }
  def stars_since?; end

  sig { returns(PlatformTypes::SubmoduleConnection) }
  def submodules; end

  sig { returns(T::Boolean) }
  def submodules?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def svn_resource_path; end

  sig { returns(T::Boolean) }
  def svn_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def svn_url; end

  sig { returns(T::Boolean) }
  def svn_url?; end

  sig { returns(T.nilable(String)) }
  def temp_clone_token; end

  sig { returns(T::Boolean) }
  def temp_clone_token?; end

  sig { returns(T.nilable(PlatformTypes::Repository)) }
  def template_repository; end

  sig { returns(T::Boolean) }
  def template_repository?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def template_tree_url; end

  sig { returns(T::Boolean) }
  def template_tree_url?; end

  sig { returns(T::Array[PlatformTypes::User]) }
  def top_contributors; end

  sig { returns(T::Boolean) }
  def top_contributors?; end

  sig { returns(T::Boolean) }
  def two_factor_requirement_met_by; end

  sig { returns(T::Boolean) }
  def two_factor_requirement_met_by?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def updated_at; end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def url; end

  sig { returns(T::Boolean) }
  def url?; end

  sig { returns(T.nilable(T::Boolean)) }
  def used_by_enabled; end

  sig { returns(T::Boolean) }
  def used_by_enabled?; end

  sig { returns(T.nilable(String)) }
  def used_by_package_id; end

  sig { returns(T::Boolean) }
  def used_by_package_id?; end

  sig { returns(T::Boolean) }
  def uses_custom_open_graph_image; end

  sig { returns(T::Boolean) }
  def uses_custom_open_graph_image?; end

  sig { returns(T::Boolean) }
  def viewer_blocked_by_owner; end

  sig { returns(T::Boolean) }
  def viewer_blocked_by_owner?; end

  sig { returns(T::Boolean) }
  def viewer_can_administer; end

  sig { returns(T::Boolean) }
  def viewer_can_administer?; end

  sig { returns(T::Boolean) }
  def viewer_can_create_projects; end

  sig { returns(T::Boolean) }
  def viewer_can_create_projects?; end

  sig { returns(T::Boolean) }
  def viewer_can_interact; end

  sig { returns(T::Boolean) }
  def viewer_can_interact?; end

  sig { returns(T::Boolean) }
  def viewer_can_manage_deploy_keys; end

  sig { returns(T::Boolean) }
  def viewer_can_manage_deploy_keys?; end

  sig { returns(T::Boolean) }
  def viewer_can_manage_webhooks; end

  sig { returns(T::Boolean) }
  def viewer_can_manage_webhooks?; end

  sig { returns(T::Boolean) }
  def viewer_can_pin_issues; end

  sig { returns(T::Boolean) }
  def viewer_can_pin_issues?; end

  sig { returns(T::Boolean) }
  def viewer_can_push; end

  sig { returns(T::Boolean) }
  def viewer_can_push?; end

  sig { returns(T::Boolean) }
  def viewer_can_see_commenter_full_name; end

  sig { returns(T::Boolean) }
  def viewer_can_see_commenter_full_name?; end

  sig { returns(T::Boolean) }
  def viewer_can_set_interaction_limits; end

  sig { returns(T::Boolean) }
  def viewer_can_set_interaction_limits?; end

  sig { returns(T::Boolean) }
  def viewer_can_set_social_preview; end

  sig { returns(T::Boolean) }
  def viewer_can_set_social_preview?; end

  sig { returns(T::Boolean) }
  def viewer_can_star; end

  sig { returns(T::Boolean) }
  def viewer_can_star?; end

  sig { returns(T::Boolean) }
  def viewer_can_subscribe; end

  sig { returns(T::Boolean) }
  def viewer_can_subscribe?; end

  sig { returns(T::Boolean) }
  def viewer_can_toggle_merge_types; end

  sig { returns(T::Boolean) }
  def viewer_can_toggle_merge_types?; end

  sig { returns(T::Boolean) }
  def viewer_can_toggle_page_settings; end

  sig { returns(T::Boolean) }
  def viewer_can_toggle_page_settings?; end

  sig { returns(T::Boolean) }
  def viewer_can_toggle_projects; end

  sig { returns(T::Boolean) }
  def viewer_can_toggle_projects?; end

  sig { returns(T::Boolean) }
  def viewer_can_toggle_wiki; end

  sig { returns(T::Boolean) }
  def viewer_can_toggle_wiki?; end

  sig { returns(T::Boolean) }
  def viewer_can_unsubscribe; end

  sig { returns(T::Boolean) }
  def viewer_can_unsubscribe?; end

  sig { returns(T::Boolean) }
  def viewer_can_update_topics; end

  sig { returns(T::Boolean) }
  def viewer_can_update_topics?; end

  sig { returns(T.nilable(String)) }
  def viewer_default_commit_email; end

  sig { returns(T::Boolean) }
  def viewer_default_commit_email?; end

  sig { returns(String) }
  def viewer_default_merge_method; end

  sig { returns(T::Boolean) }
  def viewer_default_merge_method?; end

  sig { returns(T::Boolean) }
  def viewer_has_blocked_contributors; end

  sig { returns(T::Boolean) }
  def viewer_has_blocked_contributors?; end

  sig { returns(T::Boolean) }
  def viewer_has_starred; end

  sig { returns(T::Boolean) }
  def viewer_has_starred?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def viewer_interaction_limit_reason_html; end

  sig { returns(T::Boolean) }
  def viewer_interaction_limit_reason_html?; end

  sig { returns(T::Boolean) }
  def viewer_is_plan_owner; end

  sig { returns(T::Boolean) }
  def viewer_is_plan_owner?; end

  sig { returns(PlatformTypes::IssueCreationPermissions) }
  def viewer_issue_creation_permissions; end

  sig { returns(T::Boolean) }
  def viewer_issue_creation_permissions?; end

  sig { returns(T.nilable(String)) }
  def viewer_permission; end

  sig { returns(T::Boolean) }
  def viewer_permission?; end

  sig { returns(T.nilable(T::Array[String])) }
  def viewer_possible_commit_emails; end

  sig { returns(T::Boolean) }
  def viewer_possible_commit_emails?; end

  sig { returns(T.nilable(String)) }
  def viewer_subscription; end

  sig { returns(T::Boolean) }
  def viewer_subscription?; end

  sig { returns(T.nilable(T::Array[String])) }
  def viewer_subscription_types; end

  sig { returns(T::Boolean) }
  def viewer_subscription_types?; end

  sig { returns(String) }
  def visibility; end

  sig { returns(T::Boolean) }
  def visibility?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryVulnerabilityAlert)) }
  def vulnerability_alert; end

  sig { returns(T::Boolean) }
  def vulnerability_alert?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryVulnerabilityAlertConnection)) }
  def vulnerability_alerts; end

  sig { returns(T::Boolean) }
  def vulnerability_alerts?; end

  sig { returns(PlatformTypes::UserConnection) }
  def watchers; end

  sig { returns(T::Boolean) }
  def watchers?; end

  sig { returns(T::Boolean) }
  def web_commit_signoff_required; end

  sig { returns(T::Boolean) }
  def web_commit_signoff_required?; end

  sig { returns(PlatformTypes::WorkflowConnection) }
  def workflows; end

  sig { returns(T::Boolean) }
  def workflows?; end
end

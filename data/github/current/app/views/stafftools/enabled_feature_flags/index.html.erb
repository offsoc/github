<%# erblint:counter DeprecatedComponentsCounter 1 %>
<%# view is a Stafftools::User::ShowView or Stafftools::RepositoryViews::ShowView %>
<%# actor is either a User or Repository %>

<% if GitHub.flipper_ui_enabled? %>
  <%
    features_by_gate_type = view.enabled_feature_flags_by_gate_type(actor)
    actor_enabled_features = features_by_gate_type[:actor_gates]
    possibly_enabled_features = features_by_gate_type[:possibly_gates]
    inherited_enabled_features = features_by_gate_type[:inherited_gates]
    all_possibly_enabled_features = (possibly_enabled_features + inherited_enabled_features + actor_enabled_features).map { |f| f[0].name }.uniq

    user_features_cmd = if all_possibly_enabled_features.any?
      "bin/toggle-feature-flag enable #{all_possibly_enabled_features[0]} monalisa #{all_possibly_enabled_features.drop(1).map { |f| "-F #{f}" }.join(" ")}"
    else
      ""
    end
  %>

  <%= render Primer::Beta::BorderBox.new(padding: :condensed) do |component| %>
    <% component.with_header do %>
      <div class="h5">
        Actor Enabled Feature Flags
      </div>

      <div class="mt-1 text-small color-fg-muted">
        These flags are enabled directly on the actor and can be removed for the individual actor
        which will have an effect.
      </div>
    <% end %>

    <% if actor_enabled_features.any? %>
      <% actor_enabled_features.each do |feature, link| %>
        <% component.with_row(display: :flex, justify_content: :space_between) do %>
          <%= link %>
          <%= form_tag(
            devtools_feature_flag_delete_actor_path(feature, return_to: request.path),
            method: :delete,
            class: "inline-form",
          ) do %>
            <input type="hidden" name="flipper_id" value="<%= actor.flipper_id %>">
            <%= render Primer::ButtonComponent.new(
              type: :submit,
              variant: :small,
              scheme: :link,
              title: "Remove actor from #{feature.name}",
            ) do %>
              <%= render Primer::Beta::Octicon.new(:trash, size: :small, color: :danger) %>
            <% end %>
          <% end %>
        <% end %>
      <% end %>
    <% else %>
      <% component.with_body do %>
        None
      <% end %>
    <% end %>
  <% end %>

  <%= render Primer::Beta::BorderBox.new(mt: 3, padding: :condensed) do |component| %>
    <% component.with_header do %>
      <div class="h5">
        Inherited Enabled Feature Flags
      </div>

      <div class="mt-1 text-small color-fg-muted">
        These flags are enabled via inheritance. Adding or removing individual actors from the flag
        will have no effect.
      </div>
    <% end %>

    <% component.with_body do %>
      <% always_enabled_links = inherited_enabled_features.map(&:last) %>
      <% if inherited_enabled_features.any? %>
        <%= safe_join(always_enabled_links, ", ") %>
      <% else %>
        None
      <% end %>
    <% end %>
  <% end %>

  <%= render Primer::Beta::BorderBox.new(mt: 3, padding: :condensed) do |component| %>
    <% component.with_header do %>
      <div class="h5">
        Possibly Enabled Feature Flags
      </div>

      <div class="mt-1 text-small color-fg-muted">
        These flags are enabled via dark shipping which may enable the flag for this actor.
      </div>
    <% end %>

    <% component.with_body do %>
      <% possibly_enabled_links = possibly_enabled_features.map(&:last) %>
      <% if possibly_enabled_links.any? %>
        <%= safe_join(possibly_enabled_links, ", ") %>
      <% else %>
        None
      <% end %>
    <% end %>
  <% end %>

  <%= render Primer::Beta::BorderBox.new(mt: 3, padding: :condensed) do |component| %>
    <% component.with_header do %>
      <div class="h5">
        Copy Feature Flags
      </div>

      <div class="mt-1 text-small color-fg-muted">
        Command line to mimic the feature flag assignment for an actor
      </div>
    <% end %>
    <% component.with_body do %>
      <div class="input-group">
        <input id="ff-command" type="text" value="<%= user_features_cmd %>" class="form-control input-sm" data-autoselect readonly aria-label="FF command">
        <span class="input-group-button">
          <%= render Primer::Beta::ClipboardCopy.new(for: "ff-command", "aria-label": "Copy to clipboard", classes: "btn btn-sm zeroclipboard-button") %>
        </span>
      </div>
    <% end %>
  <% end %>
<% end %>

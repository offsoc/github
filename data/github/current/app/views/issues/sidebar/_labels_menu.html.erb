<%
  deferred_content = local_assigns.fetch(:deferred_content, true)
  inline ||= nil
  labels_readonly = with_database_error_fallback(fallback: true) do
    issue.repository.locked? || issue.repository.archived? || !issue_permissions(issue, current_user, :labelable)
  end
%>

<% menu_filter_content = capture do %>
  <div class="select-menu-filters">
    <div class="select-menu-text-filter hx_form-control-spinner-wrapper">
      <input type="text" id="label-filter-field" class="form-control js-label-filter-field js-filterable-field"
             placeholder="Filter labels" aria-label="Filter labels" autocomplete="off" autofocus>
      <%= render(Primer::Beta::Spinner.new(size: :small, classes: "hx_form-control-spinner")) %>
    </div>
  </div>
<% end %>

<% if deferred_content && issue.new_record? %>
  <% deferred_menu_initial_content = capture do %>
    <%# Support labels query param since selected inputs won't be present when content is deferred %>
    <% issue.sorted_labels.each do |label| %>
      <input class="d-none" type="checkbox" value="<%= label.id %>" name="issue[labels][]" checked>
    <% end %>
  <% end %>
<% end %>

<%= render layout: "issues/sidebar/menu", locals: {
    issue: issue,
    title: "Labels",
    menu_title: "Apply labels to this #{issue.pull_request? ? "pull request" : "issue"}",
    menu_class: "label-select-menu",
    menu_id: "labels-select-menu",
    menu_attributes: "data-multiple",
    hotkey: "l",
    inline: inline,
    menu_filter_content: menu_filter_content,
    deferred_menu_initial_content: deferred_menu_initial_content,
    deferred_content: deferred_content,
    deferred_content_path: issue_show_partial_path(issue: issue, partial: "issues/sidebar/labels_menu_content", inline: inline ),
    readonly: labels_readonly
  } do %>
  <%= render "issues/sidebar/labels_menu_content", issue: issue, inline: inline %>
<% end %>

{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_velocity_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/velocity.js"],"sourcesContent":["function parseWords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\n                          \"#{end} #{else} #{break} #{stop}\");\nvar functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\n                           \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\nvar specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\nvar isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  var beforeParams = state.beforeParams;\n  state.beforeParams = false;\n  var ch = stream.next();\n  // start of unparsed string?\n  if ((ch == \"'\") && !state.inString && state.inParams) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenString(ch));\n  }\n  // start of parsed string?\n  else if ((ch == '\"')) {\n    state.lastTokenWasBuiltin = false;\n    if (state.inString) {\n      state.inString = false;\n      return \"string\";\n    }\n    else if (state.inParams)\n      return chain(stream, state, tokenString(ch));\n  }\n  // is it one of the special signs []{}().,;? Separator?\n  else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n    if (ch == \"(\" && beforeParams)\n      state.inParams = true;\n    else if (ch == \")\") {\n      state.inParams = false;\n      state.lastTokenWasBuiltin = true;\n    }\n    return null;\n  }\n  // start of a number value?\n  else if (/\\d/.test(ch)) {\n    state.lastTokenWasBuiltin = false;\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  // multi line comment?\n  else if (ch == \"#\" && stream.eat(\"*\")) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenComment);\n  }\n  // unparsed content?\n  else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenUnparsed);\n  }\n  // single line comment?\n  else if (ch == \"#\" && stream.eat(\"#\")) {\n    state.lastTokenWasBuiltin = false;\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // variable?\n  else if (ch == \"$\") {\n    stream.eat(\"!\");\n    stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n    // is it one of the specials?\n    if (specials && specials.propertyIsEnumerable(stream.current())) {\n      return \"keyword\";\n    }\n    else {\n      state.lastTokenWasBuiltin = true;\n      state.beforeParams = true;\n      return \"builtin\";\n    }\n  }\n  // is it a operator?\n  else if (isOperatorChar.test(ch)) {\n    state.lastTokenWasBuiltin = false;\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  else {\n    // get the whole word\n    stream.eatWhile(/[\\w\\$_{}@]/);\n    var word = stream.current();\n    // is it one of the listed keywords?\n    if (keywords && keywords.propertyIsEnumerable(word))\n      return \"keyword\";\n    // is it one of the listed functions?\n    if (functions && functions.propertyIsEnumerable(word) ||\n        (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\n        !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n      state.beforeParams = true;\n      state.lastTokenWasBuiltin = false;\n      return \"keyword\";\n    }\n    if (state.inString) {\n      state.lastTokenWasBuiltin = false;\n      return \"string\";\n    }\n    if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\n      return \"builtin\";\n    // default: just a \"word\"\n    state.lastTokenWasBuiltin = false;\n    return null;\n  }\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if ((next == quote) && !escaped) {\n        end = true;\n        break;\n      }\n      if (quote=='\"' && stream.peek() == '$' && !escaped) {\n        state.inString = true;\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenUnparsed(stream, state) {\n  var maybeEnd = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd == 2) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    if (ch == \"]\")\n      maybeEnd++;\n    else if (ch != \" \")\n      maybeEnd = 0;\n  }\n  return \"meta\";\n}\n// Interface\n\nexport const velocity = {\n  name: \"velocity\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      beforeParams: false,\n      inParams: false,\n      inString: false,\n      lastTokenWasBuiltin: false\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"##\", block: {open: \"#*\", close: \"*#\"}}\n  }\n};\n"],"names":["parseWords","str","obj","words","split","i","length","keywords","functions","specials","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inString","inParams","lastTokenWasBuiltin","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","propertyIsEnumerable","current","word","peek","toLowerCase","pos","string","charAt","quote","escaped","end","maybeEnd","velocity","name","startState","token","eatSpace","languageData","commentTokens","line","block","open","close"],"sourceRoot":""}
{"version":3,"file":"vendors-node_modules_ml-regression-simple-linear_src_index_js-node_modules_kurkle_color_dist_-e1ea4c-xxxxxxxxxxxx.js","mappings":"wOAAA,IAAM,EAAWA,OAAOC,SAAS,CAACC,QAAQ,CAOnC,SAASC,EAAWC,CAAK,EAC5B,OAAO,EAASC,IAAI,CAACD,GAAOE,QAAQ,CAAC,SACzC,CCJe,yBAAMC,eACnBC,aAAc,CACZ,GAAI,aAAeD,eACjB,MAAM,MAAU,oCAEpB,CAEAE,QAAQC,CAAC,CAAE,CACT,GAAI,iBAAOA,EACT,OAAO,IAAI,CAACC,QAAQ,CAACD,GAChB,GAAIP,EAAWO,GAAI,CACxB,IAAME,EAAI,EAAE,CACZ,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAEI,MAAM,CAAED,IAC5BD,EAAEG,IAAI,CAAC,IAAI,CAACJ,QAAQ,CAACD,CAAC,CAACG,EAAE,GAE3B,OAAOD,CACT,CACE,MAAM,UAAc,8BAExB,CAEAD,UAAW,CACT,MAAM,MAAU,+BAClB,CAEAK,OAAQ,CAER,CAEAd,UAAW,CACT,MAAO,EACT,CAEAe,SAAU,CACR,MAAO,EACT,CAQAC,MAAMR,CAAC,CAAEE,CAAC,CAAE,CACV,GAAI,CAACT,EAAWO,IAAM,CAACP,EAAWS,IAAMF,EAAEI,MAAM,GAAKF,EAAEE,MAAM,CAC3D,MAAM,MAAU,6CAGlB,IAAMK,EAAIT,EAAEI,MAAM,CACZM,EAAK,MAAUD,GACrB,IAAK,IAAIN,EAAI,EAAGA,EAAIM,EAAGN,IACrBO,CAAE,CAACP,EAAE,CAAG,IAAI,CAACF,QAAQ,CAACD,CAAC,CAACG,EAAE,EAG5B,IAAIQ,EAAO,EACPC,EAAO,EACPC,EAAO,EACPC,EAAO,EACPC,EAAW,EACXC,EAAW,EACXC,EAAK,EACT,IAAK,IAAId,EAAI,EAAGA,EAAIM,EAAGN,IACrBQ,GAAQD,CAAE,CAACP,EAAE,CACbS,GAAQV,CAAC,CAACC,EAAE,CACZY,GAAYL,CAAE,CAACP,EAAE,CAAGO,CAAE,CAACP,EAAE,CACzBa,GAAYd,CAAC,CAACC,EAAE,CAAGD,CAAC,CAACC,EAAE,CACvBc,GAAMP,CAAE,CAACP,EAAE,CAAGD,CAAC,CAACC,EAAE,CACL,IAATD,CAAC,CAACC,EAAE,EACNU,CAAAA,GAAQ,CAAEX,CAAC,CAACC,EAAE,CAAGO,CAAE,CAACP,EAAE,EAAKD,CAAAA,CAAC,CAACC,EAAE,CAAGO,CAAE,CAACP,EAAE,EAAKD,CAAC,CAACC,EAAE,EAElDW,GAAQ,CAACZ,CAAC,CAACC,EAAE,CAAGO,CAAE,CAACP,EAAE,EAAKD,CAAAA,CAAC,CAACC,EAAE,CAAGO,CAAE,CAACP,EAAE,EAGxC,IAAMe,EACJ,CAACT,EAAIQ,EAAKN,EAAOC,CAAG,EACpBO,KAAKC,IAAI,CAAC,CAACX,EAAIM,EAAWJ,EAAOA,CAAG,EAAMF,CAAAA,EAAIO,EAAWJ,EAAOA,CAAG,GAErE,MAAO,CACLM,EAAGA,EACHG,GAAIH,EAAIA,EACRL,KAAMA,EACNC,KAAMK,KAAKC,IAAI,CAACN,EAAOL,EACzB,CACF,CACF,ECzFe,SAASa,EAAiB5B,CAAK,CAAE6B,CAAM,SACpD,EAAY,EAEV,CADA7B,EAAQ,EAAIA,EACR,iBAAO6B,GACF,CAAC,EAAE,EAAE7B,EAAM8B,WAAW,CAACD,GAAQ,CAAC,CAEhC,CAAC,EAAE,EAAE7B,EAAMF,QAAQ,GAAG,CAAC,CAGhC,UAAI,OAAO+B,EACF7B,EAAM8B,WAAW,CAACD,GAElB7B,EAAMF,QAAQ,EAG3B,CCVe,iCAAMiC,+BAA+B5B,eAClDC,YAAYE,CAAC,CAAEE,CAAC,CAAE,CAChB,KAAK,GACDF,CAAM,IAANA,GACF,IAAI,CAAC0B,KAAK,CAAGxB,EAAEwB,KAAK,CACpB,IAAI,CAACC,SAAS,CAAGzB,EAAEyB,SAAS,CAC5B,IAAI,CAACC,YAAY,CAAG,CAAC1B,EAAEyB,SAAS,CAAEzB,EAAEwB,KAAK,CAAC,GAE1C,SCXiC1B,CAAC,CAAEE,CAAC,EACzC,GAAI,CAACT,EAAWO,IAAM,CAACP,EAAWS,GAChC,MAAM,UAAc,0BAEtB,GAAIF,EAAEI,MAAM,GAAKF,EAAEE,MAAM,CACvB,MAAM,WAAe,2CAEzB,EDIuBJ,EAAGE,GACpB2B,SAgDWC,CAAG,CAAE9B,CAAC,CAAEE,CAAC,EACxB,IAAMO,EAAIT,EAAEI,MAAM,CACdO,EAAO,EACPC,EAAO,EAEPG,EAAW,EACXE,EAAK,EAET,IAAK,IAAId,EAAI,EAAGA,EAAIM,EAAGN,IACrBQ,GAAQX,CAAC,CAACG,EAAE,CACZS,GAAQV,CAAC,CAACC,EAAE,CACZY,GAAYf,CAAC,CAACG,EAAE,CAAGH,CAAC,CAACG,EAAE,CACvBc,GAAMjB,CAAC,CAACG,EAAE,CAAGD,CAAC,CAACC,EAAE,CAGnB,IAAM4B,EAAYtB,EAAIQ,EAAKN,EAAOC,CAClCkB,CAAAA,EAAIJ,KAAK,CAAGK,EAAatB,CAAAA,EAAIM,EAAWJ,EAAOA,CAAG,EAClDmB,EAAIH,SAAS,CAAG,EAAKlB,EAAKG,EAAOkB,EAAIJ,KAAK,CAAI,GAAIjB,CAAAA,EAAKE,EACvDmB,EAAIF,YAAY,CAAG,CAACE,EAAIH,SAAS,CAAEG,EAAIJ,KAAK,CAAC,EAlEjC,IAAI,CAAE1B,EAAGE,GAErB,CAEA8B,QAAS,CACP,MAAO,CACLC,KAAM,yBACNP,MAAO,IAAI,CAACA,KAAK,CACjBC,UAAW,IAAI,CAACA,SAAS,CAE7B,CAEA1B,SAASD,CAAC,CAAE,CACV,OAAO,IAAI,CAAC0B,KAAK,CAAG1B,EAAI,IAAI,CAAC2B,SAAS,CAGxCO,SAAShC,CAAC,CAAE,CACV,MAAO,CAACA,EAAI,IAAI,CAACyB,SAAS,EAAI,IAAI,CAACD,KAAK,CAG1ClC,SAAS2C,CAAS,CAAE,CAClB,IAAIC,EAAS,UACb,GAAI,QAAI,CAACV,KAAK,CAAQ,CACpB,IAAMW,EAAUf,EAAiB,IAAI,CAACI,KAAK,CAAES,GAE7C,GADAC,GAAU,CAAC,EAAEC,MAAAA,EAAkB,GAAK,CAAC,EAAEA,EAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAClD,QAAI,CAACV,SAAS,CAAQ,CACxB,IAAMW,EAAenB,KAAKoB,GAAG,CAAC,IAAI,CAACZ,SAAS,EACtCa,EAAWF,IAAiB,IAAI,CAACX,SAAS,CAAG,IAAM,IACzDS,GAAU,CAAC,CAAC,EAAEI,EAAS,CAAC,EAAElB,EAAiBgB,EAAcH,GAAW,CAAC,CAEzE,MACEC,GAAUd,EAAiB,IAAI,CAACK,SAAS,CAAEQ,GAE7C,OAAOC,CACT,CAEA7B,QAAQ4B,CAAS,CAAE,CACjB,OAAO,IAAI,CAAC3C,QAAQ,CAAC2C,EACvB,CAEA,OAAOM,KAAKC,CAAI,CAAE,CAChB,GAAIA,2BAAAA,EAAKT,IAAI,CACX,MAAM,UAAc,mBAEtB,OAAO,IAAIR,uBAAuB,GAAMiB,EAC1C,CACF,C,sBE2TIC,CAvXJ;;;;;CAKC,EACD,SAASC,EAAMC,CAAC,EACd,OAAOA,EAAI,GAAM,CACnB,C,kBACA,IAAMC,EAAM,CAACD,EAAGE,EAAGC,IAAM7B,KAAK8B,GAAG,CAAC9B,KAAK+B,GAAG,CAACL,EAAGG,GAAID,GAClD,SAASI,EAAIN,CAAC,EACZ,OAAOC,EAAIF,EAAMC,KAAAA,GAAW,EAAG,IACjC,CAIA,SAASO,EAAIP,CAAC,EACZ,OAAOC,EAAIF,EAAMC,IAAAA,GAAU,EAAG,IAChC,CACA,SAASQ,EAAIR,CAAC,EACZ,OAAOC,EAAIF,EAAMC,EAAI,MAAQ,IAAK,EAAG,EACvC,CACA,SAASS,EAAIT,CAAC,EACZ,OAAOC,EAAIF,EAAMC,IAAAA,GAAU,EAAG,IAChC,CAEA,IAAMU,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,EAAE,EACvJC,EAAM,IAAI,mBAAmB,CAC7BC,EAAKN,GAAKK,CAAG,CAACL,GAAAA,EAAQ,CACtBO,EAAKP,GAAKK,CAAG,CAAC,CAACL,IAAAA,CAAO,GAAM,EAAE,CAAGK,CAAG,CAACL,GAAAA,EAAQ,CAC7CQ,EAAKR,GAAK,CAAEA,IAAAA,CAAO,GAAM,GAAQA,CAAAA,GAAAA,CAAM,EACvCS,EAAU3B,GAAK0B,EAAG1B,EAAE3B,CAAC,GAAKqD,EAAG1B,EAAE4B,CAAC,GAAKF,EAAG1B,EAAEkB,CAAC,GAAKQ,EAAG1B,EAAEiB,CAAC,EAuBtDY,EAAQ,CAACZ,EAAGK,IAAML,EAAI,IAAMK,EAAEL,GAAK,GAQnCa,EAAS,+GACf,SAASC,EAAS5B,CAAC,CAAE6B,CAAC,CAAE9B,CAAC,EACvB,IAAMe,EAAIe,EAAI1D,KAAK+B,GAAG,CAACH,EAAG,EAAIA,GACxBoB,EAAI,CAAC1D,EAAGqE,EAAI,CAACrE,EAAIuC,EAAI,EAAC,EAAK,EAAE,GAAKD,EAAIe,EAAI3C,KAAK8B,GAAG,CAAC9B,KAAK+B,GAAG,CAAC4B,EAAI,EAAG,EAAIA,EAAG,GAAI,IACpF,MAAO,CAACX,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAG,CAE3B,SAASY,EAAS/B,CAAC,CAAE6B,CAAC,CAAEhC,CAAC,EACvB,IAAMsB,EAAI,CAAC1D,EAAGqE,EAAI,CAACrE,EAAIuC,EAAI,EAAC,EAAK,CAAC,GAAKH,EAAIA,EAAIgC,EAAI1D,KAAK8B,GAAG,CAAC9B,KAAK+B,GAAG,CAAC4B,EAAG,EAAIA,EAAG,GAAI,GACnF,MAAO,CAACX,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAG,CAE3B,SAASa,EAAShC,CAAC,CAAEiC,CAAC,CAAElB,CAAC,MAEnB5D,EADJ,IAAM+E,EAAMN,EAAS5B,EAAG,EAAG,IAO3B,IALIiC,EAAIlB,EAAI,IACV5D,EAAI,EAAK8E,CAAAA,EAAIlB,CAAAA,EACbkB,GAAK9E,EACL4D,GAAK5D,GAEFA,EAAI,EAAGA,EAAI,EAAGA,IACjB+E,CAAG,CAAC/E,EAAE,EAAI,EAAI8E,EAAIlB,EAClBmB,CAAG,CAAC/E,EAAE,EAAI8E,EAEZ,OAAOC,CACT,CAUA,SAASC,EAAQtC,CAAC,MAQZG,EAAG6B,EAAGZ,EANV,IAAM/C,EAAI2B,EAAE3B,CAAC,CADC,IAERuD,EAAI5B,EAAE4B,CAAC,CAFC,IAGRV,EAAIlB,EAAEkB,CAAC,CAHC,IAIRd,EAAM9B,KAAK8B,GAAG,CAAC/B,EAAGuD,EAAGV,GACrBb,EAAM/B,KAAK+B,GAAG,CAAChC,EAAGuD,EAAGV,GACrBhB,EAAI,CAACE,EAAMC,CAAE,EAAK,EAQxB,OANID,IAAQC,IACVe,EAAIhB,EAAMC,EACV2B,EAAI9B,EAAI,GAAMkB,EAAK,GAAIhB,EAAMC,CAAE,EAAKe,EAAKhB,CAAAA,EAAMC,CAAE,EAEjDF,EAAIA,GADJA,CAAAA,EApBF,IAoB2BC,EAnBlB,CAAEwB,EAmBUV,CAnBNA,EAmBSE,EAnBEQ,CAAAA,EAmBLV,EAnBa,EAAI,GAElCU,IAiBuBxB,EAhBlB,CAACc,EAgBK7C,CAhBDA,EAgBU+C,EAhBD,EAEhB,CAAC/C,EAcUuD,CAdNA,EAcYR,EAdH,CAcS,EACf,IAER,CAACjB,EAAAA,EAAO6B,GAAK,EAAG9B,EAAE,CAE3B,SAASqC,EAAMjB,CAAC,CAAEL,CAAC,CAAEC,CAAC,CAAEC,CAAC,EACvB,MAAO,CACLqB,MAAMC,OAAO,CAACxB,GACVK,EAAEL,CAAC,CAAC,EAAE,CAAEA,CAAC,CAAC,EAAE,CAAEA,CAAC,CAAC,EAAE,EAClBK,EAAEL,EAAGC,EAAGC,EAAC,EACbuB,GAAG,CAACnC,EACR,CAUA,SAASoC,EAAIxC,CAAC,EACZ,MAAO,CAACA,EAAI,IAAM,GAAE,EAAK,GAC3B,CAiDA,IAAMuC,EAAM,CACVvF,EAAG,OACHyF,EAAG,QACHC,EAAG,KACHC,EAAG,MACHC,EAAG,KACHC,EAAG,SACHC,EAAG,QACHtC,EAAG,KACHuC,EAAG,KACHC,EAAG,KACHvC,EAAG,KACHC,EAAG,QACHC,EAAG,QACHsC,EAAG,KACHC,EAAG,WACHtC,EAAG,KACHuC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,QACH1C,EAAG,KACH2C,EAAG,KACHC,EAAG,OACHC,EAAG,KACHC,EAAG,QACHC,EAAG,IACL,EACMC,EAAU,CACdC,OAAQ,SACRC,YAAa,SACbC,KAAM,OACNC,UAAW,SACXC,KAAM,SACNC,MAAO,SACPC,OAAQ,SACRC,MAAO,IACPC,aAAc,SACdC,GAAI,KACJC,QAAS,SACTC,KAAM,SACNC,UAAW,SACXC,OAAQ,SACRC,SAAU,SACVC,QAAS,SACTC,IAAK,SACLC,YAAa,SACbC,QAAS,SACTC,QAAS,SACTC,KAAM,OACNC,IAAK,KACLC,MAAO,OACPC,QAAS,SACTC,KAAM,SACNC,KAAM,OACNC,KAAM,SACNC,OAAQ,SACRC,QAAS,SACTC,SAAU,SACVC,OAAQ,SACRC,MAAO,SACPC,IAAK,SACLC,OAAQ,SACRC,OAAQ,SACRC,KAAM,SACNC,MAAO,SACPC,MAAO,SACPC,IAAK,OACLC,OAAQ,SACRC,OAAQ,SACRC,SAAU,OACVC,OAAQ,SACRC,OAAQ,SACRC,SAAU,SACVC,SAAU,SACVC,SAAU,SACVC,SAAU,SACVC,OAAQ,SACRC,QAAS,SACTC,UAAW,SACXC,IAAK,SACLC,OAAQ,SACRC,IAAK,SACLC,IAAK,OACLC,MAAO,SACPC,IAAK,SACLC,QAAS,SACTC,OAAQ,SACRC,QAAS,SACTC,MAAO,SACPC,KAAM,SACNC,MAAO,SACPC,OAAQ,SACRC,UAAW,SACXC,QAAS,SACTC,WAAY,SACZC,IAAK,SACLC,KAAM,SACNC,MAAO,SACPC,UAAW,SACXC,KAAM,SACNC,KAAM,SACNC,KAAM,SACNC,KAAM,SACNC,OAAQ,SACRC,OAAQ,SACRC,OAAQ,SACRC,MAAO,SACPC,MAAO,SACPC,QAAS,SACTC,IAAK,SACLC,KAAM,OACNC,QAAS,SACTC,IAAK,SACLC,OAAQ,SACRC,MAAO,SACPC,WAAY,SACZC,IAAK,KACLC,MAAO,SACPC,OAAQ,SACRC,OAAQ,SACRC,KAAM,SACNC,UAAW,OACXC,IAAK,SACLC,SAAU,SACVC,WAAY,SACZC,QAAS,SACTC,SAAU,SACVC,QAAS,SACTC,WAAY,SACZC,KAAM,KACNC,OAAQ,SACRC,KAAM,SACNC,QAAS,SACTC,MAAO,SACPC,QAAS,SACTC,KAAM,SACNC,UAAW,SACXC,OAAQ,SACRC,MAAO,SACPC,WAAY,SACZC,UAAW,SACXC,QAAS,SACTC,KAAM,SACNC,IAAK,SACLC,KAAM,SACNC,QAAS,SACTC,MAAO,SACPC,YAAa,SACbC,GAAI,SACJC,SAAU,SACVC,MAAO,SACPC,UAAW,SACXC,MAAO,SACPC,UAAW,SACXC,MAAO,SACPC,QAAS,SACTC,MAAO,SACPC,OAAQ,SACRC,MAAO,SACPC,IAAK,SACLC,KAAM,SACNC,KAAM,SACNC,KAAM,SACNC,SAAU,OACVC,OAAQ,SACRC,IAAK,SACLC,IAAK,OACLC,MAAO,SACPC,OAAQ,SACRC,GAAI,SACJC,MAAO,SACPC,IAAK,SACLC,KAAM,SACNC,UAAW,SACXC,GAAI,SACJC,MAAO,QACT,EAiCMC,EAAS,uGAiCTC,EAAKtN,GAAKA,GAAK,SAAYA,MAAAA,EAAY1B,MAAAA,KAAKiP,GAAG,CAACvN,EAAG,EAAM,KAAe,KACxEwN,EAAOxN,GAAKA,GAAK,OAAUA,EAAI,MAAQ1B,KAAKiP,GAAG,CAAC,CAACvN,EAAI,IAAI,EAAK,MAAO,KAa3E,SAASyN,EAAOzN,CAAC,CAAE1C,CAAC,CAAEoQ,CAAK,EACzB,GAAI1N,EAAG,CACL,IAAI2N,EAAMrL,EAAQtC,EAClB2N,CAAAA,CAAG,CAACrQ,EAAE,CAAGgB,KAAK8B,GAAG,CAAC,EAAG9B,KAAK+B,GAAG,CAACsN,CAAG,CAACrQ,EAAE,CAAGqQ,CAAG,CAACrQ,EAAE,CAAGoQ,EAAOpQ,IAAAA,EAAU,IAAM,IACvEqQ,EAjUKpL,EAAMR,EAiUG4L,EAlUE3L,KAAAA,EAAG9B,KAAAA,GAmUnBF,EAAE3B,CAAC,CAAGsP,CAAG,CAAC,EAAE,CACZ3N,EAAE4B,CAAC,CAAG+L,CAAG,CAAC,EAAE,CACZ3N,EAAEkB,CAAC,CAAGyM,CAAG,CAAC,EAAE,CAEhB,CACA,SAASC,EAAM5N,CAAC,CAAE6N,CAAK,EACrB,OAAO7N,EAAIvD,OAAOqR,MAAM,CAACD,GAAS,CAAC,EAAG7N,GAAKA,CAC7C,CACA,SAAS+N,EAAWC,CAAK,EACvB,IAAIhO,EAAI,CAAC3B,EAAG,EAAGuD,EAAG,EAAGV,EAAG,EAAGD,EAAG,GAAG,EAYjC,OAXIuB,MAAMC,OAAO,CAACuL,GACZA,EAAMzQ,MAAM,EAAI,IAClByC,EAAI,CAAC3B,EAAG2P,CAAK,CAAC,EAAE,CAAEpM,EAAGoM,CAAK,CAAC,EAAE,CAAE9M,EAAG8M,CAAK,CAAC,EAAE,CAAE/M,EAAG,GAAG,EAC9C+M,EAAMzQ,MAAM,CAAG,GACjByC,CAAAA,EAAEiB,CAAC,CAAGV,EAAIyN,CAAK,CAAC,EAAE,IAKtBhO,CADAA,EAAI4N,EAAMI,EAAO,CAAC3P,EAAG,EAAGuD,EAAG,EAAGV,EAAG,EAAGD,EAAG,CAAC,EAAC,EACvCA,CAAC,CAAGV,EAAIP,EAAEiB,CAAC,EAERjB,CACT,CAOA,gBAAMiO,MACJhR,YAAY+Q,CAAK,CAAE,KAKbhO,EAJJ,GAAIgO,aAAiBC,MACnB,OAAOD,EAET,IAAME,EAAO,OAAOF,CAEhBE,CAAS,WAATA,EACFlO,EAAI+N,EAAWC,GACG,WAATE,GACTlO,CAAAA,EAAImO,SAjcQC,CAAG,EACnB,IACIC,EADAC,EAAMF,EAAI7Q,MAAM,CAmBpB,MAjBe,MAAX6Q,CAAG,CAAC,EAAE,GACJE,IAAAA,GAAaA,IAAAA,EACfD,EAAM,CACJhQ,EAAG,IAAMqC,GAAAA,CAAK,CAAC0N,CAAG,CAAC,EAAE,CAAC,CACtBxM,EAAG,IAAMlB,GAAAA,CAAK,CAAC0N,CAAG,CAAC,EAAE,CAAC,CACtBlN,EAAG,IAAMR,GAAAA,CAAK,CAAC0N,CAAG,CAAC,EAAE,CAAC,CACtBnN,EAAGqN,IAAAA,EAAY5N,GAAAA,CAAK,CAAC0N,CAAG,CAAC,EAAE,CAAC,CAAQ,GACtC,EACSE,CAAAA,IAAAA,GAAaA,IAAAA,CAAQ,GAC9BD,CAAAA,EAAM,CACJhQ,EAAGqC,CAAK,CAAC0N,CAAG,CAAC,EAAE,CAAC,EAAI,EAAI1N,CAAK,CAAC0N,CAAG,CAAC,EAAE,CAAC,CACrCxM,EAAGlB,CAAK,CAAC0N,CAAG,CAAC,EAAE,CAAC,EAAI,EAAI1N,CAAK,CAAC0N,CAAG,CAAC,EAAE,CAAC,CACrClN,EAAGR,CAAK,CAAC0N,CAAG,CAAC,EAAE,CAAC,EAAI,EAAI1N,CAAK,CAAC0N,CAAG,CAAC,EAAE,CAAC,CACrCnN,EAAGqN,IAAAA,EAAa5N,CAAK,CAAC0N,CAAG,CAAC,EAAE,CAAC,EAAI,EAAI1N,CAAK,CAAC0N,CAAG,CAAC,EAAE,CAAC,CAAI,GACxD,IAGGC,CACT,EA4amBL,IAAUO,SAzGVH,CAAG,EACftO,GAEHA,CAAAA,CADAA,EAAQ0O,eAhBNlR,EAAGmR,EAAGxM,EAAGyM,EAAIC,EAHjB,IAAMC,EAAW,CAAC,EACZC,EAAOpS,OAAOoS,IAAI,CAAC7K,GACnB8K,EAAQrS,OAAOoS,IAAI,CAACnM,GAE1B,IAAKpF,EAAI,EAAGA,EAAIuR,EAAKtR,MAAM,CAAED,IAAK,CAEhC,IAAKmR,EAAI,EADTC,EAAKC,EAAKE,CAAI,CAACvR,EAAE,CACLmR,EAAIK,EAAMvR,MAAM,CAAEkR,IAC5BxM,EAAI6M,CAAK,CAACL,EAAE,CACZE,EAAKA,EAAGI,OAAO,CAAC9M,EAAGS,CAAG,CAACT,EAAE,EAE3BA,EAAI+M,SAAShL,CAAO,CAAC0K,EAAG,CAAE,IAC1BE,CAAQ,CAACD,EAAG,CAAG,CAAC1M,GAAK,GAAK,IAAMA,GAAK,EAAI,IAAMA,IAAAA,EAAS,CAE1D,OAAO2M,CACT,GAKmB,EACTK,WAAW,CAAG,CAAC,EAAG,EAAG,EAAG,EAAE,EAElC,IAAMhO,EAAInB,CAAK,CAACsO,EAAIc,WAAW,GAAG,CAClC,OAAOjO,GAAK,CACV5C,EAAG4C,CAAC,CAAC,EAAE,CACPW,EAAGX,CAAC,CAAC,EAAE,CACPC,EAAGD,CAAC,CAAC,EAAE,CACPA,EAAGA,IAAAA,EAAE1D,MAAM,CAAS0D,CAAC,CAAC,EAAE,CAAG,GAC7B,CACF,EA6FuC+M,IAAUmB,SAhB1Bf,CAAG,QACxB,MAAIA,EAAIgB,MAAM,CAAC,GACNC,SA5EOjB,CAAG,MAGf/P,EAAGuD,EAAGV,EAFV,IAAMoO,EAAIjC,EAAOkC,IAAI,CAACnB,GAClBnN,EAAI,IAER,GAAKqO,GAGL,GAAIA,CAAC,CAAC,EAAE,GAAKjR,EAAG,CACd,IAAM2B,EAAI,CAACsP,CAAC,CAAC,EAAE,CACfrO,EAAIqO,CAAC,CAAC,EAAE,CAAGhP,EAAIN,GAAKC,EAAID,IAAAA,EAAS,EAAG,IACtC,CAOA,OANA3B,EAAI,CAACiR,CAAC,CAAC,EAAE,CACT1N,EAAI,CAAC0N,CAAC,CAAC,EAAE,CACTpO,EAAI,CAACoO,CAAC,CAAC,EAAE,CAIF,CACLjR,EAJFA,EAAI,IAAOiR,CAAAA,CAAC,CAAC,EAAE,CAAGhP,EAAIjC,GAAK4B,EAAI5B,EAAG,EAAG,IAAG,EAKtCuD,EAJFA,EAAI,IAAO0N,CAAAA,CAAC,CAAC,EAAE,CAAGhP,EAAIsB,GAAK3B,EAAI2B,EAAG,EAAG,IAAG,EAKtCV,EAJFA,EAAI,IAAOoO,CAAAA,CAAC,CAAC,EAAE,CAAGhP,EAAIY,GAAKjB,EAAIiB,EAAG,EAAG,IAAG,EAKtCD,EAAGA,CACL,EACF,EAqDoBmN,GAEXoB,SAlVSpB,CAAG,MAGfpO,EAFJ,IAAMsP,EAAIxN,EAAOyN,IAAI,CAACnB,GAClBnN,EAAI,IAER,GAAI,CAACqO,EACH,MAEEA,CAAAA,CAAC,CAAC,EAAE,GAAKtP,GACXiB,CAAAA,EAAIqO,CAAC,CAAC,EAAE,CAAGhP,EAAI,CAACgP,CAAC,CAAC,EAAE,EAAI/O,EAAI,CAAC+O,CAAC,CAAC,EAAE,GAEnC,IAAMnP,EAAIwC,EAAI,CAAC2M,CAAC,CAAC,EAAE,EACbG,EAAK,CAACH,CAAC,CAAC,EAAE,CAAG,IACbI,EAAK,CAACJ,CAAC,CAAC,EAAE,CAAG,IAQnB,MAAO,CACLjR,EAAG2B,CAPHA,EADEsP,QAAAA,CAAC,CAAC,EAAE,CArBD/M,EAAMJ,EAsBChC,EAAGsP,EAAIC,GACVJ,QAAAA,CAAC,CAAC,EAAE,CApBR/M,EAAML,EAqBC/B,EAAGsP,EAAIC,GA3BdnN,EAAMR,EA6BC5B,EAAGsP,EAAIC,GAGf,CAAC,EAAE,CACP9N,EAAG5B,CAAC,CAAC,EAAE,CACPkB,EAAGlB,CAAC,CAAC,EAAE,CACPiB,EAAGA,CACL,CACF,EAwTkBmN,EAClB,EAW+DJ,EAAK,EAEhE,IAAI,CAAC2B,IAAI,CAAG3P,EACZ,IAAI,CAAC4P,MAAM,CAAG,CAAC,CAAC5P,CAClB,CACA,IAAI6P,OAAQ,CACV,OAAO,IAAI,CAACD,MAAM,CAEpB,IAAIvN,KAAM,CACR,IAAIrC,EAAI4N,EAAM,IAAI,CAAC+B,IAAI,EAIvB,OAHI3P,GACFA,CAAAA,EAAEiB,CAAC,CAAGT,EAAIR,EAAEiB,CAAC,GAERjB,CACT,CACA,IAAIqC,IAAIyN,CAAG,CAAE,CACX,IAAI,CAACH,IAAI,CAAG5B,EAAW+B,EACzB,CACAC,WAAY,KApFK/P,EAqFf,OAAO,IAAI,CAAC4P,MAAM,CApFb5P,CADUA,EAqFgB,IAAI,CAAC2P,IAAI,GAnFxC3P,CAAAA,EAAEiB,CAAC,CAAG,IACF,CAAC,KAAK,EAAEjB,EAAE3B,CAAC,CAAC,EAAE,EAAE2B,EAAE4B,CAAC,CAAC,EAAE,EAAE5B,EAAEkB,CAAC,CAAC,EAAE,EAAEV,EAAIR,EAAEiB,CAAC,EAAE,CAAC,CAAC,CAC3C,CAAC,IAAI,EAAEjB,EAAE3B,CAAC,CAAC,EAAE,EAAE2B,EAAE4B,CAAC,CAAC,EAAE,EAAE5B,EAAEkB,CAAC,CAAC,CAAC,CAAC,EAiFW8O,KAAAA,CAC9C,CACAC,WAAY,KA/bKjQ,EACbsB,EA+bF,OAAO,IAAI,CAACsO,MAAM,EA/bhBtO,EAAIK,EADS3B,EAgcgB,IAAI,CAAC2P,IAAI,EA/brBnO,EAAKC,EACnBzB,EACH,IAAMsB,EAAEtB,EAAE3B,CAAC,EAAIiD,EAAEtB,EAAE4B,CAAC,EAAIN,EAAEtB,EAAEkB,CAAC,EAAIW,EAAM7B,EAAEiB,CAAC,CAAEK,GAC5C0O,KAAAA,GA4b0CA,KAAAA,CAC9C,CACAE,WAAY,CACV,OAAO,IAAI,CAACN,MAAM,CAAGM,SApVNlQ,CAAC,EAClB,GAAI,CAACA,EACH,OAEF,IAAMiB,EAAIqB,EAAQtC,GACZG,EAAIc,CAAC,CAAC,EAAE,CACRe,EAAIvB,EAAIQ,CAAC,CAAC,EAAE,EACZf,EAAIO,EAAIQ,CAAC,CAAC,EAAE,EAClB,OAAOjB,EAAEiB,CAAC,CAAG,IACT,CAAC,KAAK,EAAEd,EAAE,EAAE,EAAE6B,EAAE,GAAG,EAAE9B,EAAE,GAAG,EAAEM,EAAIR,EAAEiB,CAAC,EAAE,CAAC,CAAC,CACvC,CAAC,IAAI,EAAEd,EAAE,EAAE,EAAE6B,EAAE,GAAG,EAAE9B,EAAE,EAAE,CAAC,EA0UI,IAAI,CAACyP,IAAI,EAAIK,KAAAA,CAC9C,CACAG,IAAIC,CAAK,CAAEC,CAAM,CAAE,CACjB,GAAID,EAAO,KAGLE,EAFJ,IAAMC,EAAK,IAAI,CAAClO,GAAG,CACbmO,EAAKJ,EAAM/N,GAAG,CAEdoO,EAAIJ,IAAWC,EAAK,GAAMD,EAC1BjO,EAAI,EAAIqO,EAAI,EACZxP,EAAIsP,EAAGtP,CAAC,CAAGuP,EAAGvP,CAAC,CACfyP,EAAK,CAAC,CAACtO,EAAInB,GAAM,GAAKmB,EAAI,CAACA,EAAInB,CAAAA,EAAM,GAAImB,EAAInB,CAAAA,CAAC,EAAK,GAAK,EAC9DqP,EAAK,EAAII,EACTH,EAAGlS,CAAC,CAAG,IAAOqS,EAAKH,EAAGlS,CAAC,CAAGiS,EAAKE,EAAGnS,CAAC,CAAG,GACtCkS,EAAG3O,CAAC,CAAG,IAAO8O,EAAKH,EAAG3O,CAAC,CAAG0O,EAAKE,EAAG5O,CAAC,CAAG,GACtC2O,EAAGrP,CAAC,CAAG,IAAOwP,EAAKH,EAAGrP,CAAC,CAAGoP,EAAKE,EAAGtP,CAAC,CAAG,GACtCqP,EAAGtP,CAAC,CAAGwP,EAAIF,EAAGtP,CAAC,CAAG,CAAC,EAAIwP,CAAAA,EAAKD,EAAGvP,CAAC,CAChC,IAAI,CAACoB,GAAG,CAAGkO,CACb,CACA,OAAO,IAAI,CAEbI,YAAYP,CAAK,CAAEQ,CAAC,CAAE,CAIpB,OAHIR,GACF,KAAI,CAACT,IAAI,CAAGgB,SAvGGE,CAAI,CAAEC,CAAI,CAAEF,CAAC,EAChC,IAAMvS,EAAImP,EAAKhN,EAAIqQ,EAAKxS,CAAC,GACnBuD,EAAI4L,EAAKhN,EAAIqQ,EAAKjP,CAAC,GACnBV,EAAIsM,EAAKhN,EAAIqQ,EAAK3P,CAAC,GACzB,MAAO,CACL7C,EAAGkC,EAAI+M,EAAGjP,EAAIuS,EAAKpD,CAAAA,EAAKhN,EAAIsQ,EAAKzS,CAAC,GAAKA,CAAAA,IACvCuD,EAAGrB,EAAI+M,EAAG1L,EAAIgP,EAAKpD,CAAAA,EAAKhN,EAAIsQ,EAAKlP,CAAC,GAAKA,CAAAA,IACvCV,EAAGX,EAAI+M,EAAGpM,EAAI0P,EAAKpD,CAAAA,EAAKhN,EAAIsQ,EAAK5P,CAAC,GAAKA,CAAAA,IACvCD,EAAG4P,EAAK5P,CAAC,CAAG2P,EAAKE,CAAAA,EAAK7P,CAAC,CAAG4P,EAAK5P,CAAC,CAClC,CACF,EA6F8B,IAAI,CAAC0O,IAAI,CAAES,EAAMT,IAAI,CAAEiB,EAAC,EAE3C,IAAI,CAEbhD,OAAQ,CACN,OAAO,IAAIK,MAAM,IAAI,CAAC5L,GAAG,CAC3B,CACAR,MAAMZ,CAAC,CAAE,CAEP,OADA,IAAI,CAAC0O,IAAI,CAAC1O,CAAC,CAAGV,EAAIU,GACX,IAAI,CAEb8P,QAAQrD,CAAK,CAAE,CACb,IAAMrL,EAAM,IAAI,CAACsN,IAAI,CAErB,OADAtN,EAAIpB,CAAC,EAAI,EAAIyM,EACN,IAAI,CAEbsD,WAAY,CACV,IAAM3O,EAAM,IAAI,CAACsN,IAAI,CACfsB,EAAMlR,EAAMsC,GAAAA,EAAIhE,CAAC,CAASgE,IAAAA,EAAIT,CAAC,CAAUS,IAAAA,EAAInB,CAAC,EAEpD,OADAmB,EAAIhE,CAAC,CAAGgE,EAAIT,CAAC,CAAGS,EAAInB,CAAC,CAAG+P,EACjB,IAAI,CAEbC,QAAQxD,CAAK,CAAE,CACb,IAAMrL,EAAM,IAAI,CAACsN,IAAI,CAErB,OADAtN,EAAIpB,CAAC,EAAI,EAAIyM,EACN,IAAI,CAEbyD,QAAS,CACP,IAAMnR,EAAI,IAAI,CAAC2P,IAAI,CAInB,OAHA3P,EAAE3B,CAAC,CAAG,IAAM2B,EAAE3B,CAAC,CACf2B,EAAE4B,CAAC,CAAG,IAAM5B,EAAE4B,CAAC,CACf5B,EAAEkB,CAAC,CAAG,IAAMlB,EAAEkB,CAAC,CACR,IAAI,CAEbkQ,QAAQ1D,CAAK,CAAE,CAEb,OADAD,EAAO,IAAI,CAACkC,IAAI,CAAE,EAAGjC,GACd,IAAI,CAEb2D,OAAO3D,CAAK,CAAE,CAEZ,OADAD,EAAO,IAAI,CAACkC,IAAI,CAAE,EAAG,CAACjC,GACf,IAAI,CAEb4D,SAAS5D,CAAK,CAAE,CAEd,OADAD,EAAO,IAAI,CAACkC,IAAI,CAAE,EAAGjC,GACd,IAAI,CAEb6D,WAAW7D,CAAK,CAAE,CAEhB,OADAD,EAAO,IAAI,CAACkC,IAAI,CAAE,EAAG,CAACjC,GACf,IAAI,CAEb8D,OAAOC,CAAG,CAAE,KApaEzR,EACVG,EAqaF,MApaFA,CADIA,EAAImC,EADMtC,EAqaL,IAAI,CAAC2P,IAAI,EAnajB,CAAC,EAAE,CAAGhN,EAAIxC,CAAC,CAAC,EAAE,CAmaKsR,GAlapBtR,EAzCOoC,EAAMR,EAyCD5B,EA1CM6B,KAAAA,EAAG9B,KAAAA,GA2CrBF,EAAE3B,CAAC,CAAG8B,CAAC,CAAC,EAAE,CACVH,EAAE4B,CAAC,CAAGzB,CAAC,CAAC,EAAE,CACVH,EAAEkB,CAAC,CAAGf,CAAC,CAAC,EAAE,CAgaD,IAAI,CAEf,EAEA,SAASuR,EAAU1D,CAAK,EACtB,OAAO,IAAIC,MAAMD,EACnB,C,2TC1kBA;;;;;CAKC,EAID,IAAM2D,EAAU,CACdC,SAAU,4BACVC,YAAa,mBACbC,OAAQ,eACRC,OAAQ,YACRC,KAAM,KACNC,IAAK,QACLC,KAAM,KACNC,MAAO,WACPC,QAAS,aACTC,KAAM,MACR,EAEA,IAAS,CAACC,KAAK,CAACC,QAAQ,CAAC,CACvBC,IAAK,WAELC,QAAS,WACP,OAAOd,CACT,EAEAe,MAAO,SAAS7V,CAAK,CAAE8V,CAAG,EACxB,GAAI9V,MAAAA,EACF,OAAO,KAET,IAAMqR,EAAO,OAAOrR,EAUpB,MATIqR,WAAAA,GAAqBrR,aAAiB+V,KACxC/V,EAAQ,GAAAgW,EAAA,GAAOhW,GACG,WAATqR,IAEPrR,EADE,iBAAO8V,EACD,GAAAD,EAAA,IAAM7V,EAAO8V,EAAK,IAAIC,KAAQ,IAAI,CAACE,OAAO,EAE1C,GAAAC,EAAA,GAASlW,EAAO,IAAI,CAACiW,OAAO,GAGjC,GAAAE,EAAA,GAAQnW,GAASA,EAAMoW,OAAO,GAAK,IAC5C,EAEAC,OAAQ,SAASC,CAAI,CAAER,CAAG,EACxB,MAAO,GAAAO,EAAA,IAAOC,EAAMR,EAAK,IAAI,CAACG,OAAO,CACvC,EAEAM,IAAK,SAASD,CAAI,CAAEE,CAAM,CAAEC,CAAI,EAC9B,OAAQA,GACR,IAAK,cAAe,MAAO,GAAAC,EAAA,GAAgBJ,EAAME,EACjD,KAAK,SAAU,MC9BV,GAAAE,EAAA,GD8B4BJ,EC9BNE,ID8BYA,EACvC,KAAK,SAAU,ME9BV,GAAAE,EAAA,GF8B4BJ,EE9BNE,EAAS,IAAoB,CF+BxD,KAAK,OAAQ,MAAO,GAAAG,EAAA,GAASL,EAAME,EACnC,KAAK,MAAO,MAAO,GAAAI,EAAA,GAAQN,EAAME,EACjC,KAAK,OAAQ,MAAO,GAAAK,EAAA,GAASP,EAAME,EACnC,KAAK,QAAS,MAAO,GAAAM,EAAA,GAAUR,EAAME,EACrC,KAAK,UAAW,MGnCX,GAAAM,EAAA,GHmC8BR,EGpCtBE,EHoC4BA,EACzC,KAAK,OAAQ,MAAO,GAAAO,EAAA,GAAST,EAAME,EACnC,SAAS,OAAOF,CAChB,CACF,EAEAU,KAAM,SAASzT,CAAG,CAAEC,CAAG,CAAEiT,CAAI,EAC3B,OAAQA,GACR,IAAK,cAAe,MAAO,GAAAQ,EAAA,GAAyB1T,EAAKC,EACzD,KAAK,SAAU,MAAO,GAAA0T,EAAA,GAAoB3T,EAAKC,EAC/C,KAAK,SAAU,OAAO2T,SI7BUC,CAAQ,CAAEC,CAAS,CAAEpB,CAAO,EAC9D,IAAMe,EACJ,GAAAC,EAAA,GAAyBG,EAAUC,GAAa,IAAoB,CACtE,MAAO,GAAAC,EAAA,GAAkBrB,KAAAA,GAAyBe,EACpD,EJyB8CzT,EAAKC,EAC/C,KAAK,OAAQ,OAAO+T,SKtCUH,CAAQ,CAAEC,CAAS,CAAEpB,CAAO,EAC5D,IAAMe,EACJ,GAAAC,EAAA,GAAyBG,EAAUC,GAAa,IAAkB,CACpE,MAAO,GAAAC,EAAA,GAAkBrB,KAAAA,GAAyBe,EACpD,ELkC0CzT,EAAKC,EAC3C,KAAK,MAAO,MAAO,GAAAgU,EAAA,GAAiBjU,EAAKC,EACzC,KAAK,OAAQ,MAAO,GAAAiU,EAAA,GAAkBlU,EAAKC,EAC3C,KAAK,QAAS,MAAO,GAAAkU,EAAA,GAAmBnU,EAAKC,EAC7C,KAAK,UAAW,OAAOmU,SM9CUP,CAAQ,CAAEC,CAAS,CAAEpB,CAAO,EAC/D,IAAMe,EAAO,GAAAU,EAAA,GAAmBN,EAAUC,GAAa,EACvD,MAAO,GAAAC,EAAA,GAAkBrB,KAAAA,GAAyBe,EACpD,EN2CgDzT,EAAKC,EACjD,KAAK,OAAQ,OAAOoU,SOnDUR,CAAQ,CAAEC,CAAS,EACnD,IAAMQ,EAAY,GAAA7B,EAAA,GAAOoB,GACnBU,EAAa,GAAA9B,EAAA,GAAOqB,GAEpBU,EAAO,GAAAC,EAAA,GAAWH,EAAWC,GAC7BG,EAAaxW,KAAKoB,GAAG,CAACqV,SCJYd,CAAQ,CAAEC,CAAS,EAC3D,IAAMQ,EAAY,GAAA7B,EAAA,GAAOoB,GACnBU,EAAa,GAAA9B,EAAA,GAAOqB,GAE1B,OAAOQ,EAAUM,WAAW,GAAKL,EAAWK,WAAW,EACzD,EDDwDN,EAAWC,IAIjED,EAAUO,WAAW,CAAC,MACtBN,EAAWM,WAAW,CAAC,MAIvB,IAAMC,EAAoB,GAAAL,EAAA,GAAWH,EAAWC,KAAgB,CAACC,EAC3DrV,EAASqV,EAAQE,CAAAA,EAAa,CAACI,CAAgB,EAGrD,OAAO3V,IAAAA,EAAe,EAAIA,CAC5B,EPgC0Ca,EAAKC,EAC3C,SAAS,OAAO,CAChB,CACF,EAEA8U,QAAS,SAAShC,CAAI,CAAEG,CAAI,CAAE8B,CAAO,EACnC,OAAQ9B,GACR,IAAK,SAAU,OAAO+B,SS5DIC,CAAI,EAChC,IAAMhD,EAAQ,GAAAO,EAAA,GAAOyC,GAErB,OADAhD,EAAMiD,eAAe,CAAC,GACfjD,CACT,ETwDwCa,EACpC,KAAK,SAAU,OAAOqC,SU7DIF,CAAI,EAChC,IAAMhD,EAAQ,GAAAO,EAAA,GAAOyC,GAErB,OADAhD,EAAMmD,UAAU,CAAC,EAAG,GACbnD,CACT,EVyDwCa,EACpC,KAAK,OAAQ,OAAOuC,SW9DIJ,CAAI,EAC9B,IAAMhD,EAAQ,GAAAO,EAAA,GAAOyC,GAErB,OADAhD,EAAMqD,UAAU,CAAC,EAAG,EAAG,GAChBrD,CACT,EX0DoCa,EAChC,KAAK,MAAO,MAAO,GAAAyC,EAAA,GAAWzC,EAC9B,KAAK,OAAQ,MAAO,GAAA0C,EAAA,GAAY1C,EAChC,KAAK,UAAW,MAAO,GAAA0C,EAAA,GAAY1C,EAAM,CAAC2C,aAAc,CAACV,CAAO,EAChE,KAAK,QAAS,MAAO,GAAAW,EAAA,GAAa5C,EAClC,KAAK,UAAW,OAAO6C,SYnEIV,CAAI,EACjC,IAAMhD,EAAQ,GAAAO,EAAA,GAAOyC,GACfW,EAAe3D,EAAM4D,QAAQ,GAInC,OAFA5D,EAAM6D,QAAQ,CADAF,EAAgBA,EAAe,EACvB,GACtB3D,EAAM8D,QAAQ,CAAC,EAAG,EAAG,EAAG,GACjB9D,CACT,EZ4D0Ca,EACtC,KAAK,OAAQ,MAAO,GAAAkD,EAAA,GAAYlD,EAChC,SAAS,OAAOA,CAChB,CACF,EAEAmD,MAAO,SAASnD,CAAI,CAAEG,CAAI,EACxB,OAAQA,GACR,IAAK,SAAU,OAAOiD,Sa3EEjB,CAAI,EAC9B,IAAMhD,EAAQ,GAAAO,EAAA,GAAOyC,GAErB,OADAhD,EAAMiD,eAAe,CAAC,KACfjD,CACT,EbuEsCa,EAClC,KAAK,SAAU,OAAOqD,Sc5EElB,CAAI,EAC9B,IAAMhD,EAAQ,GAAAO,EAAA,GAAOyC,GAErB,OADAhD,EAAMmD,UAAU,CAAC,GAAI,KACdnD,CACT,EdwEsCa,EAClC,KAAK,OAAQ,OAAOsD,Se7EEnB,CAAI,EAC5B,IAAMhD,EAAQ,GAAAO,EAAA,GAAOyC,GAErB,OADAhD,EAAMqD,UAAU,CAAC,GAAI,GAAI,KAClBrD,CACT,EfyEkCa,EAC9B,KAAK,MAAO,MAAO,GAAAuD,EAAA,GAASvD,EAC5B,KAAK,OAAQ,MAAO,GAAAwD,EAAA,GAAUxD,EAC9B,KAAK,QAAS,MAAO,GAAAyD,EAAA,GAAWzD,EAChC,KAAK,UAAW,OAAO0D,SgBjFEvB,CAAI,EAC/B,IAAMhD,EAAQ,GAAAO,EAAA,GAAOyC,GACfW,EAAe3D,EAAM4D,QAAQ,GAInC,OAFA5D,EAAM6D,QAAQ,CADAF,EAAgBA,EAAe,EAAK,EAC5B,GACtB3D,EAAM8D,QAAQ,CAAC,GAAI,GAAI,GAAI,KACpB9D,CACT,EhB0EwCa,EACpC,KAAK,OAAQ,OAAO2D,SiBlFExB,CAAI,EAC5B,IAAMhD,EAAQ,GAAAO,EAAA,GAAOyC,GACfjD,EAAOC,EAAM0C,WAAW,GAG9B,OAFA1C,EAAM2C,WAAW,CAAC5C,EAAO,EAAG,EAAG,GAC/BC,EAAM8D,QAAQ,CAAC,GAAI,GAAI,GAAI,KACpB9D,CACT,EjB4EkCa,EAC9B,SAAS,OAAOA,CAChB,CACF,CACF,E,mCkB5GO,SAASgB,EAAkB4C,CAAM,EACtC,OAAO,IAEL,IAAMxX,EAASQ,CADDgX,EAASzY,IAAI,CAACyY,EAAO,CAAGzY,KAAK0Y,KAAK,EAC3BC,GAErB,OAAO1X,IAAAA,EAAe,EAAIA,CAC5B,CACF,C,4DCgBO,SAASiU,EAAS8B,CAAI,CAAEjC,CAAM,EACnC,MAAO,QAAgBiC,EAAMjC,EAAS,IAAkB,CAC1D,C,4DCFO,SAASE,EAAgB+B,CAAI,CAAEjC,CAAM,EAC1C,IAAM6D,EAAY,CAAC,QAAO5B,GAC1B,MAAO,QAAcA,EAAM4B,EAAY7D,EACzC,C,iDCUO,SAASwB,EAAWZ,CAAQ,CAAEC,CAAS,EAC5C,IAAMQ,EAAY,QAAOT,GACnBU,EAAa,QAAOT,GAEpBL,EAAOa,EAAUzB,OAAO,GAAK0B,EAAW1B,OAAO,UAErD,EAAW,EACF,GACEY,EAAO,EACT,EAGAA,CAEX,C,iDCxBO,SAASC,EAAyBG,CAAQ,CAAEC,CAAS,EAC1D,MAAO,CAAC,QAAOD,GAAY,CAAC,QAAOC,EACrC,C,kFCHO,SAASK,EAAmBN,CAAQ,CAAEC,CAAS,MAQhD3U,EAPJ,IAAMmV,EAAY,GAAA7B,EAAA,GAAOoB,GACnBU,EAAa,GAAA9B,EAAA,GAAOqB,GAEpBU,EAAO,GAAAC,EAAA,GAAWH,EAAWC,GAC7BG,EAAaxW,KAAKoB,GAAG,CACzByX,SCNuClD,CAAQ,CAAEC,CAAS,EAC5D,IAAMQ,EAAY,GAAA7B,EAAA,GAAOoB,GACnBU,EAAa,GAAA9B,EAAA,GAAOqB,GAK1B,OAAOkD,GAHU1C,CAAAA,EAAUM,WAAW,GAAKL,EAAWK,WAAW,EAAC,EAChDN,CAAAA,EAAUwB,QAAQ,GAAKvB,EAAWuB,QAAQ,EAAC,CAG/D,EDF+BxB,EAAWC,IAKxC,GAAIG,EAAa,EACfvV,EAAS,MACJ,CACwB,IAAzBmV,EAAUwB,QAAQ,IAAYxB,EAAU2C,OAAO,GAAK,IAGtD3C,EAAU4C,OAAO,CAAC,IAGpB5C,EAAUyB,QAAQ,CAACzB,EAAUwB,QAAQ,GAAKtB,EAAOE,GAIjD,IAAIyC,EAAqB,GAAA1C,EAAA,GAAWH,EAAWC,KAAgB,CAACC,EAI9D4C,CE9BC,SAA0BlC,CAAI,EACnC,IAAMhD,EAAQ,GAAAO,EAAA,GAAOyC,GACrB,MAAO,CAAC,GAAAoB,EAAA,GAASpE,IAAW,CAAC,GAAAsE,EAAA,GAAWtE,EAC1C,GF2BuB,GAAAO,EAAA,GAAOoB,KACxBa,IAAAA,GACA,OAAAD,EAAA,GAAWZ,EAAUU,IAErB4C,CAAAA,EAAqB,EAAI,EAG3BhY,EAASqV,EAAQE,CAAAA,EAAa2C,OAAOF,EAAkB,CACzD,CAGA,OAAOhY,IAAAA,EAAe,EAAIA,CAC5B,C,6DGjCO,SAASwU,EAAoBE,CAAQ,CAAEC,CAAS,CAAEpB,CAAO,EAC9D,IAAMe,EAAO,QAAyBI,EAAUC,GAAa,IAC7D,MAAO,QAAkBpB,GAAS4E,gBAAgB7D,EACpD,C,6DCcO,SAASS,EAAkBL,CAAQ,CAAEC,CAAS,CAAEpB,CAAO,EAC5D,IAAMe,EAAO,QAAiBI,EAAUC,GAAa,EACrD,MAAO,QAAkBpB,GAAS4E,gBAAgB7D,EACpD,C,iDC9BO,SAAS6C,EAASpB,CAAI,EAC3B,IAAMhD,EAAQ,QAAOgD,GAErB,OADAhD,EAAM8D,QAAQ,CAAC,GAAI,GAAI,GAAI,KACpB9D,CACT,C,iDCJO,SAASsE,EAAWtB,CAAI,EAC7B,IAAMhD,EAAQ,QAAOgD,GACfnD,EAAQG,EAAM4D,QAAQ,GAG5B,OAFA5D,EAAM2C,WAAW,CAAC3C,EAAM0C,WAAW,GAAI7C,EAAQ,EAAG,GAClDG,EAAM8D,QAAQ,CAAC,GAAI,GAAI,GAAI,KACpB9D,CACT,C,iDCNO,SAASyD,EAAaT,CAAI,EAC/B,IAAMhD,EAAQ,QAAOgD,GAGrB,OAFAhD,EAAMgF,OAAO,CAAC,GACdhF,EAAM8D,QAAQ,CAAC,EAAG,EAAG,EAAG,GACjB9D,CACT,C","sources":["node_modules/is-any-array/lib-esm/index.js","node_modules/ml-regression-base/src/index.js","node_modules/ml-regression-base/src/maybeToPrecision.js","node_modules/ml-regression-simple-linear/src/index.js","node_modules/ml-regression-base/src/checkArrayLength.js","node_modules/@kurkle/color/dist/color.esm.js","node_modules/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.esm.js","node_modules/date-fns/addSeconds.mjs","node_modules/date-fns/addMinutes.mjs","node_modules/date-fns/addQuarters.mjs","node_modules/date-fns/differenceInMinutes.mjs","node_modules/date-fns/differenceInHours.mjs","node_modules/date-fns/differenceInQuarters.mjs","node_modules/date-fns/differenceInYears.mjs","node_modules/date-fns/differenceInCalendarYears.mjs","node_modules/date-fns/startOfSecond.mjs","node_modules/date-fns/startOfMinute.mjs","node_modules/date-fns/startOfHour.mjs","node_modules/date-fns/startOfQuarter.mjs","node_modules/date-fns/endOfSecond.mjs","node_modules/date-fns/endOfMinute.mjs","node_modules/date-fns/endOfHour.mjs","node_modules/date-fns/endOfQuarter.mjs","node_modules/date-fns/endOfYear.mjs","node_modules/date-fns/_lib/getRoundingMethod.mjs","node_modules/date-fns/addHours.mjs","node_modules/date-fns/addMilliseconds.mjs","node_modules/date-fns/compareAsc.mjs","node_modules/date-fns/differenceInMilliseconds.mjs","node_modules/date-fns/differenceInMonths.mjs","node_modules/date-fns/differenceInCalendarMonths.mjs","node_modules/date-fns/isLastDayOfMonth.mjs","node_modules/date-fns/differenceInSeconds.mjs","node_modules/date-fns/differenceInWeeks.mjs","node_modules/date-fns/endOfDay.mjs","node_modules/date-fns/endOfMonth.mjs","node_modules/date-fns/startOfMonth.mjs"],"sourcesContent":["const toString = Object.prototype.toString;\n/**\n * Checks if an object is an instance of an Array (array or typed array).\n *\n * @param {any} value - Object to check.\n * @returns {boolean} True if the object is an array.\n */\nexport function isAnyArray(value) {\n    return toString.call(value).endsWith('Array]');\n}\n//# sourceMappingURL=index.js.map","import { isAnyArray } from 'is-any-array';\n\nexport { default as maybeToPrecision } from './maybeToPrecision';\nexport { default as checkArrayLength } from './checkArrayLength';\n\nexport default class BaseRegression {\n  constructor() {\n    if (new.target === BaseRegression) {\n      throw new Error('BaseRegression must be subclassed');\n    }\n  }\n\n  predict(x) {\n    if (typeof x === 'number') {\n      return this._predict(x);\n    } else if (isAnyArray(x)) {\n      const y = [];\n      for (let i = 0; i < x.length; i++) {\n        y.push(this._predict(x[i]));\n      }\n      return y;\n    } else {\n      throw new TypeError('x must be a number or array');\n    }\n  }\n\n  _predict() {\n    throw new Error('_predict must be implemented');\n  }\n\n  train() {\n    // Do nothing for this package\n  }\n\n  toString() {\n    return '';\n  }\n\n  toLaTeX() {\n    return '';\n  }\n\n  /**\n   * Return the correlation coefficient of determination (r) and chi-square.\n   * @param {Array<number>} x\n   * @param {Array<number>} y\n   * @return {object}\n   */\n  score(x, y) {\n    if (!isAnyArray(x) || !isAnyArray(y) || x.length !== y.length) {\n      throw new Error('x and y must be arrays of the same length');\n    }\n\n    const n = x.length;\n    const y2 = new Array(n);\n    for (let i = 0; i < n; i++) {\n      y2[i] = this._predict(x[i]);\n    }\n\n    let xSum = 0;\n    let ySum = 0;\n    let chi2 = 0;\n    let rmsd = 0;\n    let xSquared = 0;\n    let ySquared = 0;\n    let xY = 0;\n    for (let i = 0; i < n; i++) {\n      xSum += y2[i];\n      ySum += y[i];\n      xSquared += y2[i] * y2[i];\n      ySquared += y[i] * y[i];\n      xY += y2[i] * y[i];\n      if (y[i] !== 0) {\n        chi2 += ((y[i] - y2[i]) * (y[i] - y2[i])) / y[i];\n      }\n      rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);\n    }\n\n    const r =\n      (n * xY - xSum * ySum) /\n      Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n\n    return {\n      r: r,\n      r2: r * r,\n      chi2: chi2,\n      rmsd: Math.sqrt(rmsd / n),\n    };\n  }\n}\n","export default function maybeToPrecision(value, digits) {\n  if (value < 0) {\n    value = 0 - value;\n    if (typeof digits === 'number') {\n      return `- ${value.toPrecision(digits)}`;\n    } else {\n      return `- ${value.toString()}`;\n    }\n  } else {\n    if (typeof digits === 'number') {\n      return value.toPrecision(digits);\n    } else {\n      return value.toString();\n    }\n  }\n}\n","import BaseRegression, {\r\n  checkArrayLength,\r\n  maybeToPrecision,\r\n} from 'ml-regression-base';\r\n\r\nexport default class SimpleLinearRegression extends BaseRegression {\r\n  constructor(x, y) {\r\n    super();\r\n    if (x === true) {\r\n      this.slope = y.slope;\r\n      this.intercept = y.intercept;\r\n      this.coefficients = [y.intercept, y.slope];\r\n    } else {\r\n      checkArrayLength(x, y);\r\n      regress(this, x, y);\r\n    }\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      name: 'simpleLinearRegression',\r\n      slope: this.slope,\r\n      intercept: this.intercept,\r\n    };\r\n  }\r\n\r\n  _predict(x) {\r\n    return this.slope * x + this.intercept;\r\n  }\r\n\r\n  computeX(y) {\r\n    return (y - this.intercept) / this.slope;\r\n  }\r\n\r\n  toString(precision) {\r\n    let result = 'f(x) = ';\r\n    if (this.slope !== 0) {\r\n      const xFactor = maybeToPrecision(this.slope, precision);\r\n      result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\r\n      if (this.intercept !== 0) {\r\n        const absIntercept = Math.abs(this.intercept);\r\n        const operator = absIntercept === this.intercept ? '+' : '-';\r\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\r\n      }\r\n    } else {\r\n      result += maybeToPrecision(this.intercept, precision);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  toLaTeX(precision) {\r\n    return this.toString(precision);\r\n  }\r\n\r\n  static load(json) {\r\n    if (json.name !== 'simpleLinearRegression') {\r\n      throw new TypeError('not a SLR model');\r\n    }\r\n    return new SimpleLinearRegression(true, json);\r\n  }\r\n}\r\n\r\nfunction regress(slr, x, y) {\r\n  const n = x.length;\r\n  let xSum = 0;\r\n  let ySum = 0;\r\n\r\n  let xSquared = 0;\r\n  let xY = 0;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    xSum += x[i];\r\n    ySum += y[i];\r\n    xSquared += x[i] * x[i];\r\n    xY += x[i] * y[i];\r\n  }\r\n\r\n  const numerator = n * xY - xSum * ySum;\r\n  slr.slope = numerator / (n * xSquared - xSum * xSum);\r\n  slr.intercept = (1 / n) * ySum - slr.slope * (1 / n) * xSum;\r\n  slr.coefficients = [slr.intercept, slr.slope];\r\n}\r\n","import { isAnyArray } from 'is-any-array';\n\nexport default function checkArraySize(x, y) {\n  if (!isAnyArray(x) || !isAnyArray(y)) {\n    throw new TypeError('x and y must be arrays');\n  }\n  if (x.length !== y.length) {\n    throw new RangeError('x and y arrays must have the same length');\n  }\n}\n","/*!\n * @kurkle/color v0.3.2\n * https://github.com/kurkle/color#readme\n * (c) 2023 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","/*!\n * chartjs-adapter-date-fns v3.0.0\n * https://www.chartjs.org\n * (c) 2022 chartjs-adapter-date-fns Contributors\n * Released under the MIT license\n */\nimport { _adapters } from 'chart.js';\nimport { toDate, parse, parseISO, isValid, format, addYears, addQuarters, addMonths, addWeeks, addDays, addHours, addMinutes, addSeconds, addMilliseconds, differenceInYears, differenceInQuarters, differenceInMonths, differenceInWeeks, differenceInDays, differenceInHours, differenceInMinutes, differenceInSeconds, differenceInMilliseconds, startOfYear, startOfQuarter, startOfMonth, startOfWeek, startOfDay, startOfHour, startOfMinute, startOfSecond, endOfYear, endOfQuarter, endOfMonth, endOfWeek, endOfDay, endOfHour, endOfMinute, endOfSecond } from 'date-fns';\n\nconst FORMATS = {\n  datetime: 'MMM d, yyyy, h:mm:ss aaaa',\n  millisecond: 'h:mm:ss.SSS aaaa',\n  second: 'h:mm:ss aaaa',\n  minute: 'h:mm aaaa',\n  hour: 'ha',\n  day: 'MMM d',\n  week: 'PP',\n  month: 'MMM yyyy',\n  quarter: 'qqq - yyyy',\n  year: 'yyyy'\n};\n\n_adapters._date.override({\n  _id: 'date-fns', // DEBUG\n\n  formats: function() {\n    return FORMATS;\n  },\n\n  parse: function(value, fmt) {\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n    const type = typeof value;\n    if (type === 'number' || value instanceof Date) {\n      value = toDate(value);\n    } else if (type === 'string') {\n      if (typeof fmt === 'string') {\n        value = parse(value, fmt, new Date(), this.options);\n      } else {\n        value = parseISO(value, this.options);\n      }\n    }\n    return isValid(value) ? value.getTime() : null;\n  },\n\n  format: function(time, fmt) {\n    return format(time, fmt, this.options);\n  },\n\n  add: function(time, amount, unit) {\n    switch (unit) {\n    case 'millisecond': return addMilliseconds(time, amount);\n    case 'second': return addSeconds(time, amount);\n    case 'minute': return addMinutes(time, amount);\n    case 'hour': return addHours(time, amount);\n    case 'day': return addDays(time, amount);\n    case 'week': return addWeeks(time, amount);\n    case 'month': return addMonths(time, amount);\n    case 'quarter': return addQuarters(time, amount);\n    case 'year': return addYears(time, amount);\n    default: return time;\n    }\n  },\n\n  diff: function(max, min, unit) {\n    switch (unit) {\n    case 'millisecond': return differenceInMilliseconds(max, min);\n    case 'second': return differenceInSeconds(max, min);\n    case 'minute': return differenceInMinutes(max, min);\n    case 'hour': return differenceInHours(max, min);\n    case 'day': return differenceInDays(max, min);\n    case 'week': return differenceInWeeks(max, min);\n    case 'month': return differenceInMonths(max, min);\n    case 'quarter': return differenceInQuarters(max, min);\n    case 'year': return differenceInYears(max, min);\n    default: return 0;\n    }\n  },\n\n  startOf: function(time, unit, weekday) {\n    switch (unit) {\n    case 'second': return startOfSecond(time);\n    case 'minute': return startOfMinute(time);\n    case 'hour': return startOfHour(time);\n    case 'day': return startOfDay(time);\n    case 'week': return startOfWeek(time);\n    case 'isoWeek': return startOfWeek(time, {weekStartsOn: +weekday});\n    case 'month': return startOfMonth(time);\n    case 'quarter': return startOfQuarter(time);\n    case 'year': return startOfYear(time);\n    default: return time;\n    }\n  },\n\n  endOf: function(time, unit) {\n    switch (unit) {\n    case 'second': return endOfSecond(time);\n    case 'minute': return endOfMinute(time);\n    case 'hour': return endOfHour(time);\n    case 'day': return endOfDay(time);\n    case 'week': return endOfWeek(time);\n    case 'month': return endOfMonth(time);\n    case 'quarter': return endOfQuarter(time);\n    case 'year': return endOfYear(time);\n    default: return time;\n    }\n  }\n});\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\n\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of seconds to be added.\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\nexport function addSeconds(date, amount) {\n  return addMilliseconds(date, amount * 1000);\n}\n\n// Fallback for modularized imports:\nexport default addSeconds;\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\nimport { millisecondsInMinute } from \"./constants.mjs\";\n\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be added.\n *\n * @returns The new date with the minutes added\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\nexport function addMinutes(date, amount) {\n  return addMilliseconds(date, amount * millisecondsInMinute);\n}\n\n// Fallback for modularized imports:\nexport default addMinutes;\n","import { addMonths } from \"./addMonths.mjs\";\n\n/**\n * @name addQuarters\n * @category Quarter Helpers\n * @summary Add the specified number of year quarters to the given date.\n *\n * @description\n * Add the specified number of year quarters to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of quarters to be added.\n *\n * @returns The new date with the quarters added\n *\n * @example\n * // Add 1 quarter to 1 September 2014:\n * const result = addQuarters(new Date(2014, 8, 1), 1)\n * //=> Mon Dec 01 2014 00:00:00\n */\nexport function addQuarters(date, amount) {\n  const months = amount * 3;\n  return addMonths(date, months);\n}\n\n// Fallback for modularized imports:\nexport default addQuarters;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { millisecondsInMinute } from \"./constants.mjs\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.mjs\";\n\n/**\n * The {@link differenceInMinutes} function options.\n */\n\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of minutes\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\nexport function differenceInMinutes(dateLeft, dateRight, options) {\n  const diff =\n    differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMinutes;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { millisecondsInHour } from \"./constants.mjs\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.mjs\";\n\n/**\n * The {@link differenceInHours} function options.\n */\n\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of hours\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\nexport function differenceInHours(dateLeft, dateRight, options) {\n  const diff =\n    differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInHours;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { differenceInMonths } from \"./differenceInMonths.mjs\";\n\n/**\n * The {@link differenceInQuarters} function options.\n */\n\n/**\n * @name differenceInQuarters\n * @category Quarter Helpers\n * @summary Get the number of quarters between the given dates.\n *\n * @description\n * Get the number of quarters between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of full quarters\n *\n * @example\n * // How many full quarters are between 31 December 2013 and 2 July 2014?\n * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))\n * //=> 2\n */\nexport function differenceInQuarters(dateLeft, dateRight, options) {\n  const diff = differenceInMonths(dateLeft, dateRight) / 3;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInQuarters;\n","import { compareAsc } from \"./compareAsc.mjs\";\nimport { differenceInCalendarYears } from \"./differenceInCalendarYears.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full years\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\nexport function differenceInYears(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const sign = compareAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(differenceInCalendarYears(_dateLeft, _dateRight));\n\n  // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n  _dateLeft.setFullYear(1584);\n  _dateRight.setFullYear(1584);\n\n  // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastYearNotFull = compareAsc(_dateLeft, _dateRight) === -sign;\n  const result = sign * (difference - +isLastYearNotFull);\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInYears;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n\n * @returns The number of calendar years\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\nexport function differenceInCalendarYears(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  return _dateLeft.getFullYear() - _dateRight.getFullYear();\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarYears;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfSecond\n * @category Second Helpers\n * @summary Return the start of a second for the given date.\n *\n * @description\n * Return the start of a second for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a second\n *\n * @example\n * // The start of a second for 1 December 2014 22:15:45.400:\n * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.000\n */\nexport function startOfSecond(date) {\n  const _date = toDate(date);\n  _date.setMilliseconds(0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfSecond;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfMinute\n * @category Minute Helpers\n * @summary Return the start of a minute for the given date.\n *\n * @description\n * Return the start of a minute for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a minute\n *\n * @example\n * // The start of a minute for 1 December 2014 22:15:45.400:\n * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:00\n */\nexport function startOfMinute(date) {\n  const _date = toDate(date);\n  _date.setSeconds(0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfMinute;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an hour\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\nexport function startOfHour(date) {\n  const _date = toDate(date);\n  _date.setMinutes(0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfHour;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a quarter\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */\nexport function startOfQuarter(date) {\n  const _date = toDate(date);\n  const currentMonth = _date.getMonth();\n  const month = currentMonth - (currentMonth % 3);\n  _date.setMonth(month, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfQuarter;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfSecond\n * @category Second Helpers\n * @summary Return the end of a second for the given date.\n *\n * @description\n * Return the end of a second for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a second\n *\n * @example\n * // The end of a second for 1 December 2014 22:15:45.400:\n * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.999\n */\nexport function endOfSecond(date) {\n  const _date = toDate(date);\n  _date.setMilliseconds(999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfSecond;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfMinute\n * @category Minute Helpers\n * @summary Return the end of a minute for the given date.\n *\n * @description\n * Return the end of a minute for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a minute\n *\n * @example\n * // The end of a minute for 1 December 2014 22:15:45.400:\n * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:59.999\n */\nexport function endOfMinute(date) {\n  const _date = toDate(date);\n  _date.setSeconds(59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMinute;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfHour\n * @category Hour Helpers\n * @summary Return the end of an hour for the given date.\n *\n * @description\n * Return the end of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of an hour\n *\n * @example\n * // The end of an hour for 2 September 2014 11:55:00:\n * const result = endOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:59:59.999\n */\nexport function endOfHour(date) {\n  const _date = toDate(date);\n  _date.setMinutes(59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfHour;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfQuarter\n * @category Quarter Helpers\n * @summary Return the end of a year quarter for the given date.\n *\n * @description\n * Return the end of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a quarter\n *\n * @example\n * // The end of a quarter for 2 September 2014 11:55:00:\n * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfQuarter(date) {\n  const _date = toDate(date);\n  const currentMonth = _date.getMonth();\n  const month = currentMonth - (currentMonth % 3) + 3;\n  _date.setMonth(month, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfQuarter;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a year\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 23:59:59.999\n */\nexport function endOfYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n  _date.setFullYear(year + 1, 0, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfYear;\n","export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\nimport { millisecondsInHour } from \"./constants.mjs\";\n\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be added.\n *\n * @returns The new date with the hours added\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\nexport function addHours(date, amount) {\n  return addMilliseconds(date, amount * millisecondsInHour);\n}\n\n// Fallback for modularized imports:\nexport default addHours;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of milliseconds to be added.\n *\n * @returns The new date with the milliseconds added\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport function addMilliseconds(date, amount) {\n  const timestamp = +toDate(date);\n  return constructFrom(date, timestamp + amount);\n}\n\n// Fallback for modularized imports:\nexport default addMilliseconds;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport function compareAsc(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const diff = _dateLeft.getTime() - _dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n\n// Fallback for modularized imports:\nexport default compareAsc;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(dateLeft, dateRight) {\n  return +toDate(dateLeft) - +toDate(dateRight);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n","import { compareAsc } from \"./compareAsc.mjs\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.mjs\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const sign = compareAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(\n    differenceInCalendarMonths(_dateLeft, _dateRight),\n  );\n  let result;\n\n  // Check for the difference of less than month\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      _dateLeft.setDate(30);\n    }\n\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);\n\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n    let isLastMonthNotFull = compareAsc(_dateLeft, _dateRight) === -sign;\n\n    // Check for cases of one full calendar month\n    if (\n      isLastDayOfMonth(toDate(dateLeft)) &&\n      difference === 1 &&\n      compareAsc(dateLeft, _dateRight) === 1\n    ) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const yearDiff = _dateLeft.getFullYear() - _dateRight.getFullYear();\n  const monthDiff = _dateLeft.getMonth() - _dateRight.getMonth();\n\n  return yearDiff * 12 + monthDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n","import { endOfDay } from \"./endOfDay.mjs\";\nimport { endOfMonth } from \"./endOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n\n * @returns The date is the last day of a month\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport function isLastDayOfMonth(date) {\n  const _date = toDate(date);\n  return +endOfDay(_date) === +endOfMonth(_date);\n}\n\n// Fallback for modularized imports:\nexport default isLastDayOfMonth;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.mjs\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(dateLeft, dateRight, options) {\n  const diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { differenceInDays } from \"./differenceInDays.mjs\";\n\n/**\n * The {@link differenceInWeeks} function options.\n */\n\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between two dates. Fractional weeks are\n * truncated towards zero by default.\n *\n * One \"full week\" is the distance between a local time in one day to the same\n * local time 7 days earlier or later. A full week can sometimes be less than\n * or more than 7*24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full weeks\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n *\n * @example\n * // How many full weeks are between\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 8 weeks (54 days),\n * // even if DST starts and the period has\n * // only 54*24-1 hours.\n * const result = differenceInWeeks(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 6)\n * )\n * //=> 8\n */\nexport function differenceInWeeks(dateLeft, dateRight, options) {\n  const diff = differenceInDays(dateLeft, dateRight) / 7;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInWeeks;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a month\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfMonth(date) {\n  const _date = toDate(date);\n  const month = _date.getMonth();\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMonth;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a month\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfMonth(date) {\n  const _date = toDate(date);\n  _date.setDate(1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfMonth;\n"],"names":["Object","prototype","toString","isAnyArray","value","call","endsWith","BaseRegression","constructor","predict","x","_predict","y","i","length","push","train","toLaTeX","score","n","y2","xSum","ySum","chi2","rmsd","xSquared","ySquared","xY","r","Math","sqrt","r2","maybeToPrecision","digits","toPrecision","SimpleLinearRegression","slope","intercept","coefficients","regress","slr","numerator","toJSON","name","computeX","precision","result","xFactor","absIntercept","abs","operator","load","json","names","round","v","lim","l","h","max","min","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","a","b","c","d","e","f","hex","h1","h2","eq","isShort","g","alpha","HUE_RE","hsl2rgbn","s","k","hsv2rgbn","hwb2rgbn","w","rgb","rgb2hsl","calln","Array","isArray","map","hue","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","RGB_RE","to","pow","from","modHSL","ratio","tmp","clone","proto","assign","fromObject","input","Color","type","hexParse","str","ret","len","nameParse","unpack","j","ok","nk","unpacked","keys","tkeys","replace","parseInt","transparent","toLowerCase","functionParse","charAt","rgbParse","m","exec","hueParse","p1","p2","_rgb","_valid","valid","obj","rgbString","undefined","hexString","hslString","mix","color","weight","w2","c1","c2","p","w1","interpolate","t","rgb1","rgb2","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","rotate","deg","index_esm","FORMATS","datetime","millisecond","second","minute","hour","day","week","month","quarter","year","_date","override","_id","formats","parse","fmt","Date","toDate","options","parseISO","isValid","getTime","format","time","add","amount","unit","addMilliseconds","addHours","addDays","addWeeks","addMonths","addYears","diff","differenceInMilliseconds","differenceInSeconds","differenceInMinutes","dateLeft","dateRight","getRoundingMethod","differenceInHours","differenceInDays","differenceInWeeks","differenceInMonths","differenceInQuarters","differenceInYears","_dateLeft","_dateRight","sign","compareAsc","difference","differenceInCalendarYears","getFullYear","setFullYear","isLastYearNotFull","startOf","weekday","startOfSecond","date","setMilliseconds","startOfMinute","setSeconds","startOfHour","setMinutes","startOfDay","startOfWeek","weekStartsOn","startOfMonth","startOfQuarter","currentMonth","getMonth","setMonth","setHours","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","method","trunc","number","timestamp","differenceInCalendarMonths","yearDiff","getDate","setDate","isLastMonthNotFull","isLastDayOfMonth","Number","roundingMethod"],"sourceRoot":""}
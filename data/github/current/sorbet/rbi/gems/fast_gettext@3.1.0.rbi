# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `fast_gettext` gem.
# Please instead update this file by running `bin/tapioca gem fast_gettext`.

# Modifications
# wrapped inside FastGettext namespace to reduce conflic
#
# source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#25
module FastGettext
  extend ::FastGettext::Storage

  class << self
    # source://fast_gettext//lib/fast_gettext.rb#27
    def add_text_domain(name, options); end

    # some repositories know where to store their locales
    #
    # source://fast_gettext//lib/fast_gettext.rb#32
    def locale_path; end

    # helper block for changing domains
    #
    # source://fast_gettext//lib/fast_gettext.rb#19
    def with_domain(domain); end
  end
end

# source://fast_gettext//lib/fast_gettext.rb#16
FastGettext::CONTEXT_SEPARATOR = T.let(T.unsafe(nil), String)

# source://fast_gettext//lib/fast_gettext/cache.rb#4
class FastGettext::Cache
  # @return [Cache] a new instance of Cache
  #
  # source://fast_gettext//lib/fast_gettext/cache.rb#5
  def initialize; end

  # TODO: only used for tests, maybe if-else around it ...
  #
  # source://fast_gettext//lib/fast_gettext/cache.rb#20
  def []=(key, value); end

  # source://fast_gettext//lib/fast_gettext/cache.rb#35
  def delete(key); end

  # source://fast_gettext//lib/fast_gettext/cache.rb#10
  def fetch(key); end

  # source://fast_gettext//lib/fast_gettext/cache.rb#39
  def reload!; end

  # key performance gain:
  # - no need to lookup locale on each translation
  # - no need to lookup text_domain on each translation
  # - super-simple hash lookup
  #
  # source://fast_gettext//lib/fast_gettext/cache.rb#28
  def switch_to(text_domain, locale); end
end

# source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#26
module FastGettext::GetText; end

# source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#27
class FastGettext::GetText::MOFile < ::Hash
  # @return [MOFile] a new instance of MOFile
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#62
  def initialize(output_charset = T.unsafe(nil)); end

  # Returns the value of attribute charset.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#294
  def charset; end

  # Returns the value of attribute filename.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#30
  def filename; end

  # From gettext-0.12.1/gettext-runtime/intl/hash-string.h
  # Defines the so called `hashpjw' function by P.J. Weinberger
  # [see Aho/Sethi/Ullman, COMPILERS: Principles, Techniques and Tools,
  # 1986, 1987 Bell Telephone Laboratories, Inc.]
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#180
  def hash_string(str); end

  # Returns the value of attribute last_modified.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#293
  def last_modified; end

  # Sets the attribute last_modified
  #
  # @param value the value to set the attribute last_modified to.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#293
  def last_modified=(_arg0); end

  # Returns the value of attribute little_endian.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#293
  def little_endian; end

  # Sets the attribute little_endian
  #
  # @param value the value to set the attribute little_endian to.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#293
  def little_endian=(_arg0); end

  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#82
  def load(arg); end

  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#263
  def load_from_file(filename); end

  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#97
  def load_from_stream(io); end

  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#171
  def next_prime(seed); end

  # Returns the value of attribute nplurals.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#294
  def nplurals; end

  # Returns the value of attribute path.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#293
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#293
  def path=(_arg0); end

  # Returns the value of attribute plural.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#294
  def plural; end

  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#281
  def plural_as_proc; end

  # @return [Boolean]
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#167
  def prime?(number); end

  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#273
  def save_to_file(filename); end

  # Save data as little endian format.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#197
  def save_to_stream(io); end

  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#277
  def set_comment(msgid_or_sym, comment); end

  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#71
  def update!; end

  private

  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#298
  def convert_encoding(string, original_string); end

  class << self
    # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#57
    def open(arg = T.unsafe(nil), output_charset = T.unsafe(nil)); end
  end
end

# source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#175
FastGettext::GetText::MOFile::HASHWORDBITS = T.let(T.unsafe(nil), Integer)

# source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#32
class FastGettext::GetText::MOFile::Header < ::Struct
  # Returns the value of attribute hash_table_offset
  #
  # @return [Object] the current value of hash_table_offset
  def hash_table_offset; end

  # Sets the attribute hash_table_offset
  #
  # @param value [Object] the value to set the attribute hash_table_offset to.
  # @return [Object] the newly set value
  def hash_table_offset=(_); end

  # Returns the value of attribute hash_table_size
  #
  # @return [Object] the current value of hash_table_size
  def hash_table_size; end

  # Sets the attribute hash_table_size
  #
  # @param value [Object] the value to set the attribute hash_table_size to.
  # @return [Object] the newly set value
  def hash_table_size=(_); end

  # Returns the value of attribute magic
  #
  # @return [Object] the current value of magic
  def magic; end

  # Sets the attribute magic
  #
  # @param value [Object] the value to set the attribute magic to.
  # @return [Object] the newly set value
  def magic=(_); end

  # Returns the value of attribute nstrings
  #
  # @return [Object] the current value of nstrings
  def nstrings; end

  # Sets the attribute nstrings
  #
  # @param value [Object] the value to set the attribute nstrings to.
  # @return [Object] the newly set value
  def nstrings=(_); end

  # Returns the value of attribute orig_table_offset
  #
  # @return [Object] the current value of orig_table_offset
  def orig_table_offset; end

  # Sets the attribute orig_table_offset
  #
  # @param value [Object] the value to set the attribute orig_table_offset to.
  # @return [Object] the newly set value
  def orig_table_offset=(_); end

  # Returns the value of attribute revision
  #
  # @return [Object] the current value of revision
  def revision; end

  # Sets the attribute revision
  #
  # @param value [Object] the value to set the attribute revision to.
  # @return [Object] the newly set value
  def revision=(_); end

  # Returns the value of attribute translated_table_offset
  #
  # @return [Object] the current value of translated_table_offset
  def translated_table_offset; end

  # Sets the attribute translated_table_offset
  #
  # @param value [Object] the value to set the attribute translated_table_offset to.
  # @return [Object] the newly set value
  def translated_table_offset=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# The following are only used in .mo files
# with minor revision >= 1.
#
# source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#42
class FastGettext::GetText::MOFile::HeaderRev1 < ::FastGettext::GetText::MOFile::Header
  # Returns the value of attribute n_sysdep_segments.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#43
  def n_sysdep_segments; end

  # Sets the attribute n_sysdep_segments
  #
  # @param value the value to set the attribute n_sysdep_segments to.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#43
  def n_sysdep_segments=(_arg0); end

  # Returns the value of attribute n_sysdep_strings.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#43
  def n_sysdep_strings; end

  # Sets the attribute n_sysdep_strings
  #
  # @param value the value to set the attribute n_sysdep_strings to.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#43
  def n_sysdep_strings=(_arg0); end

  # Returns the value of attribute orig_sysdep_tab_offset.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#43
  def orig_sysdep_tab_offset; end

  # Sets the attribute orig_sysdep_tab_offset
  #
  # @param value the value to set the attribute orig_sysdep_tab_offset to.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#43
  def orig_sysdep_tab_offset=(_arg0); end

  # Returns the value of attribute sysdep_segments_offset.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#43
  def sysdep_segments_offset; end

  # Sets the attribute sysdep_segments_offset
  #
  # @param value the value to set the attribute sysdep_segments_offset to.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#43
  def sysdep_segments_offset=(_arg0); end

  # Returns the value of attribute trans_sysdep_tab_offset.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#43
  def trans_sysdep_tab_offset; end

  # Sets the attribute trans_sysdep_tab_offset
  #
  # @param value the value to set the attribute trans_sysdep_tab_offset to.
  #
  # source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#43
  def trans_sysdep_tab_offset=(_arg0); end
end

# source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#28
class FastGettext::GetText::MOFile::InvalidFormat < ::RuntimeError; end

# source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#50
FastGettext::GetText::MOFile::MAGIC_BIG_ENDIAN = T.let(T.unsafe(nil), String)

# source://fast_gettext//lib/fast_gettext/vendor/mofile.rb#51
FastGettext::GetText::MOFile::MAGIC_LITTLE_ENDIAN = T.let(T.unsafe(nil), String)

# source://fast_gettext//lib/fast_gettext/vendor/poparser.rb#18
class FastGettext::GetText::PoParser < ::Racc::Parser
  def initialize; end

  def _reduce_10(val, _values, result); end
  def _reduce_12(val, _values, result); end
  def _reduce_13(val, _values, result); end
  def _reduce_14(val, _values, result); end
  def _reduce_15(val, _values, result); end
  def _reduce_5(val, _values, result); end
  def _reduce_8(val, _values, result); end
  def _reduce_9(val, _values, result); end

  # source://fast_gettext//lib/fast_gettext/vendor/poparser.rb#375
  def _reduce_none(val, _values, result); end

  def ignore_fuzzy=(_arg0); end
  def ignore_fuzzy?; end
  def next_token; end
  def on_comment(comment); end
  def on_message(msgid, msgstr); end
  def parse(str, data); end
  def parse_file(po_file, data); end
  def report_warning=(_arg0); end
  def report_warning?; end

  private

  def _(message_id); end
  def detect_file_encoding(po_file); end
  def unescape(orig); end
  def unescape_string(string); end
end

# source://fast_gettext//lib/fast_gettext/vendor/poparser.rb#221
FastGettext::GetText::PoParser::Racc_arg = T.let(T.unsafe(nil), Array)

# source://fast_gettext//lib/fast_gettext/vendor/poparser.rb#258
FastGettext::GetText::PoParser::Racc_debug_parser = T.let(T.unsafe(nil), TrueClass)

# source://fast_gettext//lib/fast_gettext/vendor/poparser.rb#237
FastGettext::GetText::PoParser::Racc_token_to_s_table = T.let(T.unsafe(nil), Array)

# source://fast_gettext//lib/fast_gettext.rb#14
FastGettext::LOCALE_REX = T.let(T.unsafe(nil), Regexp)

# Responsibility:
#  - abstract mo files for Mo Repository
#
# source://fast_gettext//lib/fast_gettext/mo_file.rb#7
class FastGettext::MoFile
  # file => path or FastGettext::GetText::MOFile
  #
  # @return [MoFile] a new instance of MoFile
  #
  # source://fast_gettext//lib/fast_gettext/mo_file.rb#12
  def initialize(file, options = T.unsafe(nil)); end

  # source://fast_gettext//lib/fast_gettext/mo_file.rb#18
  def [](key); end

  # source://fast_gettext//lib/fast_gettext/mo_file.rb#41
  def data; end

  # returns the plural forms or all singular translations that where found
  # Car, Cars => [Auto,Autos] or []
  #
  # source://fast_gettext//lib/fast_gettext/mo_file.rb#24
  def plural(*msgids); end

  # source://fast_gettext//lib/fast_gettext/mo_file.rb#28
  def pluralisation_rule; end

  private

  # source://fast_gettext//lib/fast_gettext/mo_file.rb#52
  def load_data; end

  # (if plural==singular, prefer singular)
  #
  # source://fast_gettext//lib/fast_gettext/mo_file.rb#63
  def make_singular_and_plural_available; end

  # source://fast_gettext//lib/fast_gettext/mo_file.rb#76
  def split_plurals(singular_plural); end

  class << self
    # source://fast_gettext//lib/fast_gettext/mo_file.rb#46
    def empty; end
  end
end

# source://fast_gettext//lib/fast_gettext/mo_file.rb#9
FastGettext::MoFile::CONTEXT_SEPARATOR = T.let(T.unsafe(nil), String)

# source://fast_gettext//lib/fast_gettext/mo_file.rb#8
FastGettext::MoFile::PLURAL_SEPARATOR = T.let(T.unsafe(nil), String)

# source://fast_gettext//lib/fast_gettext.rb#15
FastGettext::NAMESPACE_SEPARATOR = T.let(T.unsafe(nil), String)

# source://fast_gettext//lib/fast_gettext/translation.rb#5
FastGettext::NIL_BLOCK = T.let(T.unsafe(nil), Proc)

# Responsibility:
#  - abstract po files for Po Repository
#
# source://fast_gettext//lib/fast_gettext/po_file.rb#7
class FastGettext::PoFile < ::FastGettext::MoFile
  # @return [PoFile] a new instance of PoFile
  #
  # source://fast_gettext//lib/fast_gettext/po_file.rb#8
  def initialize(file, options = T.unsafe(nil)); end

  protected

  # source://fast_gettext//lib/fast_gettext/po_file.rb#32
  def load_data; end

  class << self
    # source://fast_gettext//lib/fast_gettext/po_file.rb#17
    def parse_po_file(file, options = T.unsafe(nil)); end

    # source://fast_gettext//lib/fast_gettext/po_file.rb#13
    def to_mo_file(file, options = T.unsafe(nil)); end
  end
end

# Responsibility:
#  - store data threadsafe
#  - provide error messages when repositories are unconfigured
#  - accept/reject locales that are set by the user
#
# source://fast_gettext//lib/fast_gettext/storage.rb#10
module FastGettext::Storage
  # source://fast_gettext//lib/fast_gettext/storage.rb#33
  def available_locales; end

  # source://fast_gettext//lib/fast_gettext/storage.rb#22
  def available_locales=(value); end

  # Opera: de-DE,de;q=0.9,en;q=0.8
  # Firefox de-de,de;q=0.8,en-us;q=0.5,en;q=0.3
  # IE6/7 de
  # nil if nothing matches
  #
  # source://fast_gettext//lib/fast_gettext/storage.rb#136
  def best_locale_in(locales); end

  # source://fast_gettext//lib/fast_gettext/storage.rb#69
  def cache; end

  # source://fast_gettext//lib/fast_gettext/storage.rb#53
  def cache_class; end

  # source://fast_gettext//lib/fast_gettext/storage.rb#48
  def cache_class=(value); end

  # source://fast_gettext//lib/fast_gettext/storage.rb#92
  def cached_find(key); end

  # source://fast_gettext//lib/fast_gettext/storage.rb#96
  def cached_plural_find(*keys); end

  # source://fast_gettext//lib/fast_gettext/storage.rb#84
  def current_repository; end

  # source://fast_gettext//lib/fast_gettext/storage.rb#53
  def default_available_locales; end

  # source://fast_gettext//lib/fast_gettext/storage.rb#48
  def default_available_locales=(value); end

  # source://fast_gettext//lib/fast_gettext/storage.rb#128
  def default_locale; end

  # source://fast_gettext//lib/fast_gettext/storage.rb#123
  def default_locale=(new_locale); end

  # source://fast_gettext//lib/fast_gettext/storage.rb#53
  def default_text_domain; end

  # source://fast_gettext//lib/fast_gettext/storage.rb#48
  def default_text_domain=(value); end

  # source://fast_gettext//lib/fast_gettext/storage.rb#101
  def expire_cache_for(key); end

  # @return [Boolean]
  #
  # source://fast_gettext//lib/fast_gettext/storage.rb#88
  def key_exist?(key); end

  # source://fast_gettext//lib/fast_gettext/storage.rb#105
  def locale; end

  # source://fast_gettext//lib/fast_gettext/storage.rb#109
  def locale=(new_locale); end

  # if overwritten by user( FastGettext.pluralisation_rule = xxx) use it,
  # otherwise fall back to repo or to default lambda
  #
  # source://fast_gettext//lib/fast_gettext/storage.rb#65
  def pluralisation_rule; end

  # source://fast_gettext//lib/fast_gettext/storage.rb#22
  def pluralisation_rule=(value); end

  # source://fast_gettext//lib/fast_gettext/storage.rb#73
  def reload!; end

  # for chaining: puts set_locale('xx') == 'xx' ? 'applied' : 'rejected'
  # returns the current locale, not the one that was supplied
  # like locale=(), whoes behavior cannot be changed
  #
  # source://fast_gettext//lib/fast_gettext/storage.rb#116
  def set_locale(new_locale); end

  # turn off translation if none was defined to disable all resulting errors
  #
  # source://fast_gettext//lib/fast_gettext/storage.rb#156
  def silence_errors; end

  # source://fast_gettext//lib/fast_gettext/storage.rb#59
  def text_domain; end

  # source://fast_gettext//lib/fast_gettext/storage.rb#22
  def text_domain=(value); end

  # source://fast_gettext//lib/fast_gettext/storage.rb#80
  def translation_repositories; end

  # temporarily switch locale for a block
  # FastGettext.with_locale 'xx' { _('cars') }
  #
  # source://fast_gettext//lib/fast_gettext/storage.rb#147
  def with_locale(temp_locale); end

  private

  # source://fast_gettext//lib/fast_gettext/storage.rb#28
  def _locale; end

  # source://fast_gettext//lib/fast_gettext/storage.rb#22
  def _locale=(value); end

  # de-de -> de_DE
  #
  # source://fast_gettext//lib/fast_gettext/storage.rb#187
  def format_locale(locale); end

  # de-de,DE-CH;q=0.9 -> ['de_DE','de_CH']
  #
  # source://fast_gettext//lib/fast_gettext/storage.rb#164
  def formatted_sorted_locales(locales); end

  # source://fast_gettext//lib/fast_gettext/storage.rb#191
  def switch_cache; end

  # split the locale and seperate it into different languages
  # de-de,de;q=0.9,en;q=0.8 => [['de-de','de','0.5'], ['en','0.8']]
  #
  # source://fast_gettext//lib/fast_gettext/storage.rb#171
  def weighted_locales(locales); end
end

# source://fast_gettext//lib/fast_gettext/storage.rb#17
FastGettext::Storage::DEFAULT_PLURALIZATION_RULE = T.let(T.unsafe(nil), Proc)

# source://fast_gettext//lib/fast_gettext/storage.rb#11
class FastGettext::Storage::NoTextDomainConfigured < ::RuntimeError
  # source://fast_gettext//lib/fast_gettext/storage.rb#12
  def to_s; end
end

# source://fast_gettext//lib/fast_gettext/translation.rb#4
FastGettext::TRANSLATION_METHODS = T.let(T.unsafe(nil), Array)

# this module should be included
# Responsibility:
#  - direct translation queries to the current repository
#  - handle untranslated values
#  - understand / enforce namespaces
#  - decide which plural form is used
#
# source://fast_gettext//lib/fast_gettext/translation.rb#13
module FastGettext::Translation
  # tell gettext: this string need translation (will be found during parsing)
  #
  # source://fast_gettext//lib/fast_gettext/translation.rb#60
  def N_(translate); end

  # tell gettext: this string need translation (will be found during parsing)
  #
  # source://fast_gettext//lib/fast_gettext/translation.rb#65
  def Nn_(*keys); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#14
  def _(key); end

  # translate pluralized
  # some languages have up to 4 plural forms...
  # n_(singular, plural, plural form 2, ..., count)
  # n_('apple','apples',3)
  #
  # source://fast_gettext//lib/fast_gettext/translation.rb#22
  def n_(*keys, count); end

  # translate pluralized with context
  #
  # source://fast_gettext//lib/fast_gettext/translation.rb#80
  def np_(context, plural_one, *args, separator: T.unsafe(nil)); end

  # translate pluralized with separator
  #
  # source://fast_gettext//lib/fast_gettext/translation.rb#70
  def ns_(*args); end

  # translate with namespace
  # 'Car', 'Tire' -> Tire if no translation could be found
  # p_('Car', 'Tire') == s_('Car|Tire')
  #
  # source://fast_gettext//lib/fast_gettext/translation.rb#41
  def p_(namespace, key, separator = T.unsafe(nil)); end

  # translate, but discard namespace if nothing was found
  # Car|Tire -> Tire if no translation could be found
  #
  # source://fast_gettext//lib/fast_gettext/translation.rb#52
  def s_(key, separator = T.unsafe(nil)); end
end

# source://fast_gettext//lib/fast_gettext/translation.rb#91
module FastGettext::TranslationAliased
  include ::FastGettext::Translation

  # source://fast_gettext//lib/fast_gettext/translation.rb#14
  def gettext(key); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#22
  def ngettext(*keys, count); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#80
  def npgettext(context, plural_one, *args, separator: T.unsafe(nil)); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#70
  def nsgettext(*args); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#41
  def pgettext(namespace, key, separator = T.unsafe(nil)); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#52
  def sgettext(key, separator = T.unsafe(nil)); end
end

# this module should be included for multi-domain support
#
# source://fast_gettext//lib/fast_gettext/translation.rb#97
module FastGettext::TranslationMultidomain
  include ::FastGettext::Translation

  # source://fast_gettext//lib/fast_gettext/translation.rb#109
  def D_(*args, &block); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#109
  def Dn_(*args, &block); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#109
  def Dnp_(*args, &block); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#109
  def Dns_(*args, &block); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#109
  def Dp_(*args, &block); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#109
  def Ds_(*args, &block); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#104
  def d_(domain, *args, &block); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#104
  def dn_(domain, *args, &block); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#104
  def dnp_(domain, *args, &block); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#104
  def dns_(domain, *args, &block); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#104
  def dp_(domain, *args, &block); end

  # source://fast_gettext//lib/fast_gettext/translation.rb#104
  def ds_(domain, *args, &block); end
end

# Responsibility:
#  - decide which repository to choose from given input
#
# source://fast_gettext//lib/fast_gettext/translation_repository.rb#6
module FastGettext::TranslationRepository
  class << self
    # source://fast_gettext//lib/fast_gettext/translation_repository.rb#7
    def build(name, options); end
  end
end

# Responsibility:
#  - base for all repositories
#  - fallback as empty repository, that cannot translate anything but does not crash
#
# source://fast_gettext//lib/fast_gettext/translation_repository/base.rb#8
class FastGettext::TranslationRepository::Base
  # @return [Base] a new instance of Base
  #
  # source://fast_gettext//lib/fast_gettext/translation_repository/base.rb#11
  def initialize(name, options = T.unsafe(nil)); end

  # source://fast_gettext//lib/fast_gettext/translation_repository/base.rb#24
  def [](key); end

  # source://fast_gettext//lib/fast_gettext/translation_repository/base.rb#20
  def available_locales; end

  # Returns the value of attribute name.
  #
  # source://fast_gettext//lib/fast_gettext/translation_repository/base.rb#9
  def name; end

  # Returns the value of attribute options.
  #
  # source://fast_gettext//lib/fast_gettext/translation_repository/base.rb#9
  def options; end

  # source://fast_gettext//lib/fast_gettext/translation_repository/base.rb#28
  def plural(*keys); end

  # source://fast_gettext//lib/fast_gettext/translation_repository/base.rb#16
  def pluralisation_rule; end

  # source://fast_gettext//lib/fast_gettext/translation_repository/base.rb#32
  def reload; end

  protected

  # source://fast_gettext//lib/fast_gettext/translation_repository/base.rb#38
  def current_translations; end

  # source://fast_gettext//lib/fast_gettext/translation_repository/base.rb#42
  def find_files_in_locale_folders(relative_file_path, path); end
end

# Responsibility:
#  - find and store mo files
#  - provide access to translations in mo files
#
# source://fast_gettext//lib/fast_gettext/translation_repository/mo.rb#9
class FastGettext::TranslationRepository::Mo < ::FastGettext::TranslationRepository::Base
  # @return [Mo] a new instance of Mo
  #
  # source://fast_gettext//lib/fast_gettext/translation_repository/mo.rb#12
  def initialize(name, options = T.unsafe(nil)); end

  # source://fast_gettext//lib/fast_gettext/translation_repository/mo.rb#31
  def all_translations; end

  # source://fast_gettext//lib/fast_gettext/translation_repository/mo.rb#18
  def available_locales; end

  # source://fast_gettext//lib/fast_gettext/translation_repository/mo.rb#22
  def pluralisation_rule; end

  # source://fast_gettext//lib/fast_gettext/translation_repository/mo.rb#26
  def reload; end

  protected

  # source://fast_gettext//lib/fast_gettext/translation_repository/mo.rb#44
  def current_translations; end

  # source://fast_gettext//lib/fast_gettext/translation_repository/mo.rb#37
  def find_and_store_files(name, options); end
end

# source://fast_gettext//lib/fast_gettext/translation_repository/mo.rb#10
FastGettext::TranslationRepository::Mo::CONTEXT_SEPARATOR = T.let(T.unsafe(nil), String)

# Responsibility:
#  - find and store po files
#  - provide access to translations in po files
#
# source://fast_gettext//lib/fast_gettext/translation_repository/po.rb#10
class FastGettext::TranslationRepository::Po < ::FastGettext::TranslationRepository::Mo
  protected

  # source://fast_gettext//lib/fast_gettext/translation_repository/po.rb#13
  def find_and_store_files(name, options); end
end

# source://fast_gettext//lib/fast_gettext/version.rb#4
FastGettext::VERSION = T.let(T.unsafe(nil), String)

# source://fast_gettext//lib/fast_gettext/version.rb#4
FastGettext::Version = T.let(T.unsafe(nil), String)

# source://fast_gettext//lib/fast_gettext/vendor/string.rb#66
class String
  include ::Comparable
  include ::MessagePack::CoreExt
  include ::JSON::Ext::Generator::GeneratorMethods::String
  extend ::JSON::Ext::Generator::GeneratorMethods::String::Extend

  # source://fast_gettext//lib/fast_gettext/vendor/string.rb#68
  def %(*args); end
end

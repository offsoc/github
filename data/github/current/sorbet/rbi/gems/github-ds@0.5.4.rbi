# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `github-ds` gem.
# Please instead update this file by running `bin/tapioca gem github-ds`.

# GitHub::KV is a key/value data store backed by MySQL (however, the backing
# store used should be regarded as an implementation detail).
#
# Usage tips:
#
#   * Components in key names should be ordered by cardinality, from lowest to
#     highest. That is, static key components should be at the front of the key
#     and key components that vary should be at the end of the key in order of
#     how many potential values they might have.
#
#     For example, if using GitHub::KV to store a user preferences, the key
#     should be named "user.#{preference_name}.#{user_id}". Notice that the
#     part of the key that never changes ("user") comes first, followed by
#     the name of the preference (of which there might be a handful), followed
#     finally by the user id (of which there are millions).
#
#     This will make it easier to scan for keys later on, which is a necessity
#     if we ever need to move this data out of GitHub::KV or if we need to
#     search the keyspace for some reason (for example, if it's a preference
#     that we're planning to deprecate, putting the preference name near the
#     beginning of the key name makes it easier to search for all users with
#     that preference set).
#
#   * All reader methods in GitHub::KV return values wrapped inside a Result
#     object.
#
#     If any of these methods raise an exception for some reason (for example,
#     the database is down), they will return a Result value representing this
#     error rather than raising the exception directly. See lib/github/result.rb
#     for more documentation on GitHub::Result including usage examples.
#
#     When using GitHub::KV, it's important to handle error conditions and not
#     assume that GitHub::Result objects will always represent success.
#     Code using GitHub::KV should be able to fail partially if
#     GitHub::KV is down. How exactly to do this will depend on a
#     case-by-case basis - it may involve falling back to a default value, or it
#     might involve showing an error message to the user while still letting the
#     rest of the page load.
#
# source://github-ds//lib/github/ds/version.rb#1
module GitHub
  extend ::GitHub::Config::FirstPartyApps
  extend ::GitHub::Config::Metadata
  extend ::GitHub::Config::Datacenter
  extend ::GitHub::Config::ProximaSyncedThirdPartyApps
  extend ::GitHub::Config::Fastly
  extend ::GitHub::Config::Importers
  extend ::GitHub::Config::Kredz
  extend ::GitHub::Config::Varz
  extend ::GitHub::Config::Launch
  extend ::GitHub::Config::LegacyTextileFormatting
  extend ::GitHub::Config::Dreamlifter
  extend ::GitHub::Config::Migration
  extend ::GitHub::Config::Render
  extend ::GitHub::Config::Smtp
  extend ::GitHub::Config::Spokes
  extend ::GitHub::Config::Spokesd
  extend ::GitHub::Config::SupportLink
  extend ::GitHub::Config::Pages
  extend ::GitHub::Config::RequestLimits
  extend ::GitHub::Config::RateLimits
  extend ::GitHub::Config::OpenTelemetry
  extend ::GitHub::Config::HydroConfig
  extend ::GitHub::Config::Redis
  extend ::GitHub::Config::GroupSyncer
  extend ::GitHub::Config::Dependabot
  extend ::GitHub::Config::Twirp
  extend ::GitHub::Config::DriftwoodConfig
  extend ::GitHub::Config::PullRequests
  extend ::GitHub::Config::Repositories
  extend ::GitHub::Config::S3
  extend ::GitHub::Config::Registry
  extend ::GitHub::Config::SystemRoles
  extend ::GitHub::Config::Elasticsearch
  extend ::GitHub::Config::OpenApi
  extend ::GitHub::Config::AuditLogCuratorConfig
  extend ::GitHub::Config::AuditLog
  extend ::GitHub::Config::Billing
  extend ::GitHub::Config::AfterResponse
  extend ::GitHub::Config::Features
  extend ::GitHub::Config::ApiVersioning
  extend ::GitHub::Config::InsightsConfig
  extend ::GitHub::Config::HttpFluentbitConfig
  extend ::GitHub::Config::CodeScanning
  extend ::GitHub::Config::CodeQLVariantAnalysis
  extend ::GitHub::Config::OctoshiftStorage
  extend ::GitHub::Config::OIDCProviders
  extend ::GitHub::Config::BingIndexnow
  extend ::GitHub::Config::Chatops
  extend ::GitHub::Config::IssuesGraphApiConfig
  extend ::GitHub::Config::TimelineApiConfig
  extend ::GitHub::Config::Memex
  extend ::GitHub::Config::MergeQueue
  extend ::GitHub::Config::Codespaces
  extend ::GitHub::Config::Copilot
  extend ::GitHub::Config::Azure
  extend ::GitHub::Config::MultiTenantEnterprise
  extend ::GitHub::Config::NotebooksConfig
  extend ::GitHub::Config::ViewscreenConfig
  extend ::GitHub::Config::Freno
  extend ::GitHub::Config::ActionsResults
  extend ::GitHub::Config::Conduit
  extend ::GitHub::Config::ActionsBroker
  extend ::GitHub::Config::ActionsBrokerWorker
  extend ::GitHub::Config::ActionsRunnerAdmin
  extend ::GitHub::Config::ActionsRunService
  extend ::GitHub::Config::ActionsScaleUnitDomains
  extend ::GitHub::Config::Proxima
  extend ::GitHub::Config::ProximaLoginExperience
  extend ::GitHub::Config::GitSrcMigrator
  extend ::GitHub::Config::Projects
  extend ::GitHub::Config::EnterpriseAccounts
  extend ::GitHub::Config::Orca
  extend ::GitHub::Config::Orcid
  extend ::GitHub::Config::Context
  extend ::GitHub::Config
  extend ::GitHub::Version
  extend ::GitHub::Config::Stats

  class << self
    def after_response_middleware_enabled; end
    def after_response_middleware_enabled=(_arg0); end
    def after_response_middleware_enabled?; end
    def after_response_raise_on_exception; end
    def after_response_raise_on_exception=(_arg0); end
    def after_response_raise_on_exception?; end
    def robot?(useragent); end
  end
end

module GitHub::AppPartitioning; end
module GitHub::CSP; end

# source://github-ds//lib/github/ds/version.rb#2
module GitHub::DS; end

# source://github-ds//lib/github/ds/version.rb#3
GitHub::DS::VERSION = T.let(T.unsafe(nil), String)

module GitHub::DataStructures; end
module GitHub::SCIM; end

# Public: Build and execute a SQL query, returning results as Arrays. This
# class uses ActiveRecord's connection classes, but provides a better API for
# bind values and raw data access.
#
# Example:
#
#   sql = GitHub::SQL.new(<<-SQL, :parent_ids => parent_ids, :network_id => network_id)
#     SELECT * FROM repositories
#     WHERE source_id = :network_id AND parent_id IN :parent_ids
#   SQL
#   sql.results
#   => returns an Array of Arrays, one for each row
#   sql.hash_results
#   => returns an Array of Hashes instead
#
# Things to be aware of:
#
# * `nil` is always considered an error and not a usable value. If you need a
#    SQL NULL, use the NULL constant instead.
#
# * Identical column names in SELECTs will be overridden for hash_results:
#   `SELECT t1.id, t2.id FROM...` will only return one value for `id`. The
#   second ID colum won't be included in the hash:
#
#   [{ "id" => "1" }]
#
#   To get more than one column of the same name, use aliases:
#   `SELECT t1.id t1_id, t2.id t2_id FROM ...`
#
#   Calling `results` however will return an array with all the values:
#   [[1, 1]]
#
# * Arrays are escaped as `(item, item, item)`. If you need to insert multiple
#   rows (Arrays of Arrays), you must specify the bind value using
#   GitHub::SQL::ROWS(array_of_arrays).
#
# source://github-ds//lib/github/sql.rb#40
class GitHub::SQL
  # Public: Initialize a new instance.
  #
  # query - An initial SQL string (default: "").
  # binds - A Hash of bind values keyed by Symbol (default: {}).  There are
  #         a couple exceptions.  If they clash with a bind value, add them
  #         in a later #bind or #add call.
  #
  #         :connection     - An ActiveRecord Connection adapter.
  #         :force_timezone - A Symbol describing the ActiveRecord default
  #                           timezone.  Either :utc or :local.
  #
  # @return [SQL] a new instance of SQL
  #
  # source://github-ds//lib/github/sql.rb#146
  def initialize(query = T.unsafe(nil), binds = T.unsafe(nil)); end

  # Public: Add a chunk of SQL to the query. Any ":keyword" tokens in the SQL
  # will be replaced with database-safe values from the current binds.
  #
  # sql    - A String containing a fragment of SQL.
  # extras - A Hash of bind values keyed by Symbol (default: {}). These bind
  #          values are only be used to interpolate this SQL fragment,and
  #          aren't available to subsequent adds.
  #
  # Returns self.
  # Raises GitHub::SQL::BadBind for unknown keyword tokens.
  #
  # source://github-ds//lib/github/sql.rb#172
  def add(sql, extras = T.unsafe(nil)); end

  # Public: Add a chunk of SQL to the query, unless query generated so far is empty.
  #
  # Example: use this for conditionally adding UNION when generating sets of SELECTs.
  #
  # sql    - A String containing a fragment of SQL.
  # extras - A Hash of bind values keyed by Symbol (default: {}). These bind
  #          values are only be used to interpolate this SQL fragment,and
  #          aren't available to subsequent adds.
  #
  # Returns self.
  # Raises GitHub::SQL::BadBind for unknown keyword tokens.
  #
  # source://github-ds//lib/github/sql.rb#192
  def add_unless_empty(sql, extras = T.unsafe(nil)); end

  # Public: The number of affected rows for this connection.
  #
  # source://github-ds//lib/github/sql.rb#313
  def affected_rows; end

  # Public: Add additional bind values to be interpolated each time SQL
  # is added to the query.
  #
  # hash - A Symbol-keyed Hash of new values.
  #
  # Returns self.
  #
  # source://github-ds//lib/github/sql.rb#203
  def bind(binds); end

  # Internal: A Symbol-Keyed Hash of bind values.
  #
  # source://github-ds//lib/github/sql.rb#130
  def binds; end

  # Internal: The object we use to execute SQL and retrieve results. Defaults
  # to AR::B.connection, but can be overridden with a ":connection" key when
  # initializing a new instance.
  #
  # source://github-ds//lib/github/sql.rb#308
  def connection; end

  # Public: the number of rows found by the query.
  #
  # Returns FOUND_ROWS() if a SELECT query included SQL_CALC_FOUND_ROWS.
  # Raises if SQL_CALC_FOUND_ROWS was not present in the query.
  #
  # source://github-ds//lib/github/sql.rb#321
  def found_rows; end

  # Public: If the query is a SELECT, return an array of hashes instead of an array of arrays.
  #
  # source://github-ds//lib/github/sql.rb#273
  def hash_results; end

  # Internal: Replace ":keywords" with sanitized values from binds or extras.
  #
  # source://github-ds//lib/github/sql.rb#341
  def interpolate(sql, extras = T.unsafe(nil)); end

  # Public: The last inserted ID for this connection.
  #
  # source://github-ds//lib/github/sql.rb#336
  def last_insert_id; end

  # Public: Map each row to an instance of an ActiveRecord::Base subclass.
  #
  # source://github-ds//lib/github/sql.rb#209
  def models(klass); end

  # Public: The SQL String to be executed. Modified in place.
  #
  # source://github-ds//lib/github/sql.rb#133
  def query; end

  # Public: Execute, memoize, and return the results of this query.
  #
  # source://github-ds//lib/github/sql.rb#225
  def results; end

  # Internal: when a SQL_CALC_FOUND_ROWS clause is present in a SELECT query,
  # retrieve the FOUND_ROWS() value to get a count of the rows sans any
  # LIMIT/OFFSET clause.
  #
  # source://github-ds//lib/github/sql.rb#329
  def retrieve_found_row_count; end

  # Public: Get first row of results.
  #
  # source://github-ds//lib/github/sql.rb#279
  def row; end

  # Public: Execute, ignoring results. This is useful when the results of a
  # query aren't important, often INSERTs, UPDATEs, or DELETEs.
  #
  # sql    - An optional SQL string. See GitHub::SQL#add for details.
  # extras - Optional bind values. See GitHub::SQL#add for details.
  #
  # Returns self.
  #
  # source://github-ds//lib/github/sql.rb#265
  def run(sql = T.unsafe(nil), extras = T.unsafe(nil)); end

  # Internal: Make `value` database-safe. Ish.
  #
  # source://github-ds//lib/github/sql.rb#358
  def sanitize(value); end

  # Public: Run inside a transaction for the connection.
  #
  # source://github-ds//lib/github/sql.rb#301
  def transaction(options = T.unsafe(nil), &block); end

  # Public: Get the first column of the first row of results.
  #
  # source://github-ds//lib/github/sql.rb#284
  def value; end

  # Public: Is there a value?
  #
  # @return [Boolean]
  #
  # source://github-ds//lib/github/sql.rb#289
  def value?; end

  # Public: Get first column of every row of results.
  #
  # Returns an Array or nil.
  #
  # source://github-ds//lib/github/sql.rb#296
  def values; end

  private

  # Private: Forces ActiveRecord's default timezone for duration of block.
  #
  # source://github-ds//lib/github/sql.rb#404
  def enforce_timezone(&block); end

  class << self
    # Public: Escape a binary SQL value
    #
    # Used when a column contains binary data which needs to be escaped
    # to prevent warnings from MySQL
    #
    # source://github-ds//lib/github/sql.rb#61
    def BINARY(string); end

    # Public: Escape a binary SQL value, yielding a string which can be used as
    # a literal in SQL
    #
    # Performs the core escaping logic for binary strings in MySQL
    #
    # source://github-ds//lib/github/sql.rb#69
    def BINARY_LITERAL(string); end

    # Public: Instantiate a literal SQL value.
    #
    # WARNING: The given value is LITERALLY inserted into your SQL without being
    # escaped, so use this with extreme caution.
    #
    # source://github-ds//lib/github/sql.rb#53
    def LITERAL(string); end

    # Public: Instantiate a list of Arrays of SQL values for insertion.
    #
    # source://github-ds//lib/github/sql.rb#74
    def ROWS(rows); end

    # Public: Create and execute a new SQL query, returning its hash_result rows.
    #
    # sql      - A SQL string. See GitHub::SQL#add for details.
    # bindings - Optional bind values. See GitHub::SQL#add for details.
    #
    # Returns an Array of result hashes.
    #
    # source://github-ds//lib/github/sql.rb#94
    def hash_results(sql, bindings = T.unsafe(nil)); end

    # Public: Create and execute a new SQL query, returning its result rows.
    #
    # sql      - A SQL string. See GitHub::SQL#add for details.
    # bindings - Optional bind values. See GitHub::SQL#add for details.
    #
    # Returns an Array of result arrays.
    #
    # source://github-ds//lib/github/sql.rb#104
    def results(sql, bindings = T.unsafe(nil)); end

    # Public: Create and execute a new SQL query, ignoring results.
    #
    # sql      - A SQL string. See GitHub::SQL#add for details.
    # bindings - Optional bind values. See GitHub::SQL#add for details.
    #
    # Returns self.
    #
    # source://github-ds//lib/github/sql.rb#84
    def run(sql, bindings = T.unsafe(nil)); end

    # Public: Run inside a transaction. Class version of this method only works
    # if only one connection is in use. If passing connections to
    # GitHub::SQL#initialize or overriding connection then you'll need to use
    # the instance version.
    #
    # source://github-ds//lib/github/sql.rb#45
    def transaction(options = T.unsafe(nil), &block); end

    # Public: Create and execute a new SQL query, returning the value of the
    # first column of the first result row.
    #
    # sql      - A SQL string. See GitHub::SQL#add for details.
    # bindings - Optional bind values. See GitHub::SQL#add for details.
    #
    # Returns a value or nil.
    #
    # source://github-ds//lib/github/sql.rb#115
    def value(sql, bindings = T.unsafe(nil)); end

    # Public: Create and execute a new SQL query, returning its values.
    #
    # sql      - A SQL string. See GitHub::SQL#add for details.
    # bindings - Optional bind values. See GitHub::SQL#add for details.
    #
    # Returns an Array of values.
    #
    # source://github-ds//lib/github/sql.rb#125
    def values(sql, bindings = T.unsafe(nil)); end
  end
end

# Public: Raised when a bound ":keyword" value isn't available.
#
# source://github-ds//lib/github/sql/errors.rb#8
class GitHub::SQL::BadBind < ::GitHub::SQL::Error
  # @return [BadBind] a new instance of BadBind
  #
  # source://github-ds//lib/github/sql/errors.rb#9
  def initialize(keyword); end
end

# Public: Raised when a bound value can't be sanitized.
#
# source://github-ds//lib/github/sql/errors.rb#15
class GitHub::SQL::BadValue < ::GitHub::SQL::Error
  # @return [BadValue] a new instance of BadValue
  #
  # source://github-ds//lib/github/sql/errors.rb#16
  def initialize(value, description = T.unsafe(nil)); end
end

# Public: A superclass for errors.
#
# source://github-ds//lib/github/sql/errors.rb#4
class GitHub::SQL::Error < ::RuntimeError; end

# Internal: a SQL literal value.
#
# source://github-ds//lib/github/sql/literal.rb#4
class GitHub::SQL::Literal
  # @return [Literal] a new instance of Literal
  #
  # source://github-ds//lib/github/sql/literal.rb#8
  def initialize(value); end

  # source://github-ds//lib/github/sql/literal.rb#16
  def bytesize; end

  # source://github-ds//lib/github/sql/literal.rb#12
  def inspect; end

  # Public: the string value of this literal
  #
  # source://github-ds//lib/github/sql/literal.rb#6
  def value; end
end

# source://github-ds//lib/github/sql/literal.rb#23
GitHub::SQL::NOW = T.let(T.unsafe(nil), GitHub::SQL::Literal)

# Public: prepackaged literal values.
#
# source://github-ds//lib/github/sql/literal.rb#22
GitHub::SQL::NULL = T.let(T.unsafe(nil), GitHub::SQL::Literal)

# Internal: a list of arrays of values for insertion into SQL.
#
# source://github-ds//lib/github/sql/rows.rb#4
class GitHub::SQL::Rows
  # @return [Rows] a new instance of Rows
  #
  # source://github-ds//lib/github/sql/rows.rb#8
  def initialize(values); end

  # source://github-ds//lib/github/sql/rows.rb#15
  def inspect; end

  # Public: the Array of row values
  #
  # source://github-ds//lib/github/sql/rows.rb#6
  def values; end
end

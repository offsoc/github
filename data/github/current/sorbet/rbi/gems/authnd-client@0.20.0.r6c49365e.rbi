# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `authnd-client` gem.
# Please instead update this file by running `bin/tapioca gem authnd-client`.

# Some utility factories to simplify creating the deep chain of protobuf objects
#
# source://authnd-client//ruby/lib/authnd-client/client/token.rb#3
module Authnd; end

# source://authnd-client//ruby/lib/authnd-client/client/token.rb#4
module Authnd::Client
  class << self
    # 'x' enables free spacing mode which ignores whitespace and comments.
    #
    # @return [Boolean]
    #
    # source://authnd-client//ruby/lib/authnd-client/client/token.rb#13
    def authnd_token?(token); end

    # format_enabled_features_header formats the provided list of features for usage in a request header. Any features
    # encoded in the header will be interpretted by the authnd server to drive optional behavior.
    #
    # @raise [ArgumentError]
    #
    # source://authnd-client//ruby/lib/authnd-client/client/headers.rb#11
    def format_enabled_features_for_header(features); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/client/constants.rb#12
Authnd::Client::ACTOR_TYPE_REPO = T.let(T.unsafe(nil), String)

# actor.type values
#
# source://authnd-client//ruby/lib/authnd-client/client/constants.rb#11
Authnd::Client::ACTOR_TYPE_USER = T.let(T.unsafe(nil), String)

# source://authnd-client//ruby/lib/authnd-client/client/constants.rb#16
Authnd::Client::APPLICATION_TYPE_GITHUBAPPLICATION = T.let(T.unsafe(nil), String)

# application.type values
#
# source://authnd-client//ruby/lib/authnd-client/client/constants.rb#15
Authnd::Client::APPLICATION_TYPE_OAUTHAPPLICATION = T.let(T.unsafe(nil), String)

# source://authnd-client//ruby/lib/authnd-client/client/token.rb#5
Authnd::Client::AUTHND_TOKEN_REGEX = T.let(T.unsafe(nil), Regexp)

# source://authnd-client//ruby/lib/authnd-client/client/authenticator.rb#9
class Authnd::Client::Authenticator < ::Authnd::Client::ServiceClientBase
  # source://authnd-client//ruby/lib/authnd-client/client/authenticator.rb#10
  def authenticate(request, headers: T.unsafe(nil)); end

  protected

  # source://authnd-client//ruby/lib/authnd-client/client/authenticator.rb#23
  def create_twirp_client(connection); end

  private

  # changes Faraday timeout using a factor passed through headers
  # unfortunately Ruby Twirp implementation does not allow
  # passing request specific parameters
  #
  # this is not thread safe
  #
  # source://authnd-client//ruby/lib/authnd-client/client/authenticator.rb#34
  def with_timeout_factor(headers); end
end

# credential.type values
#
# source://authnd-client//ruby/lib/authnd-client/client/constants.rb#19
Authnd::Client::CREDENTIAL_TYPE_LOGINPASSWORD = T.let(T.unsafe(nil), String)

# source://authnd-client//ruby/lib/authnd-client/client/constants.rb#21
Authnd::Client::CREDENTIAL_TYPE_PERSONALACCESSTOKEN = T.let(T.unsafe(nil), String)

# source://authnd-client//ruby/lib/authnd-client/client/constants.rb#22
Authnd::Client::CREDENTIAL_TYPE_SIGNEDAUTHTOKEN = T.let(T.unsafe(nil), String)

# source://authnd-client//ruby/lib/authnd-client/client/constants.rb#20
Authnd::Client::CREDENTIAL_TYPE_SSHPUBLICKEY = T.let(T.unsafe(nil), String)

# source://authnd-client//ruby/lib/authnd-client/client/credential_manager.rb#9
class Authnd::Client::CredentialManager < ::Authnd::Client::ServiceClientBase
  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/credential_manager.rb#51
  def find_credentials(type, attributes, headers: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/credential_manager.rb#27
  def issue_signed_auth_token(user_id, scope, expires_at, session_id: T.unsafe(nil), data: T.unsafe(nil), headers: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/credential_manager.rb#10
  def issue_token(type, attributes, expires_at: T.unsafe(nil), headers: T.unsafe(nil)); end

  # Revokes a list of credentials. The credentials themselves (token, public key, etc.) are used to look up the entry to be revoked.
  # Expects a String reason, and an Array of Authnd::Proto::Credentials objects.
  #
  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/credential_manager.rb#85
  def revoke_credentials(reason, credentials, headers: T.unsafe(nil)); end

  # Revokes a list of credentials. The credentials are identified by their type and IDs.
  # Expects a String reason, a String credential_type and an Array of Integer credential IDs.
  #
  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/credential_manager.rb#67
  def revoke_credentials_by_id(reason, credential_type, ids, headers: T.unsafe(nil)); end

  # Verifies a list of credentials are valid, working credentials. The credentials themselves (token, public key, etc.) are used to look up the entry.
  # Expects an Array of Authnd::Proto::Credentials objects.
  #
  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/credential_manager.rb#103
  def verify_credentials(candidates, headers: T.unsafe(nil)); end

  protected

  # source://authnd-client//ruby/lib/authnd-client/client/credential_manager.rb#119
  def create_twirp_client(connection); end
end

# source://authnd-client//ruby/lib/authnd-client/client/credential_validator.rb#5
class Authnd::Client::CredentialValidator
  # source://authnd-client//ruby/lib/authnd-client/client/credential_validator.rb#6
  def validate(credentials); end

  # source://authnd-client//ruby/lib/authnd-client/client/credential_validator.rb#15
  def validate_credential_array(credentials); end
end

# source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#8
module Authnd::Client::Decoratable
  # Decorators can be used to augment the client methods with custom features.
  # A middleware is object that has a `:request` accessor and can forward the
  # execution of `perform` to it. The following is an example of a middleware
  # implementing a read-through cache:
  #
  # ```ruby
  # class Cache
  #   attr_accessor :request
  #
  #   def initialize(cache, ttl)
  #     @cache = cache
  #     @ttl = ttl
  #   end
  #
  #   def perform(*args, **kwargs)
  #     @cache.fetch("authnd:client:v1:#{args.hash}", ttl: @ttl) do
  #       self.request.perform(*args, **kwargs)
  #     end
  #   end
  # end
  # ```
  #
  # You can use it to decorate a method in the Client, with a single middleware:
  #
  # ```ruby
  # authenticator = Authnd::Client::Authenticator.new(faraday_conn) do |client|
  #   client.use :authenticate, with: Cache.new(App.cache, App.config.ttl)
  # end
  # ```
  #
  # Or with a stack of method_middleware that are applied from the left (outermost middleware)
  # to the right (innermost middleware)
  #
  # ```ruby
  # authenticator = Authnd::Client::Authenticator.new(faraday_conn) do |client|
  #   client.use :authenticate, with: [logging, instrumentation, caching]
  # end
  # ```
  # Internally this method, will transform the singleton class (aka eigenclass)
  # of the receiver object converting every decorated method
  # Imagine the following class:
  #
  # class MyClass
  #   def hello(name)
  #     puts "hello #{name}"
  #   end
  #
  #   def self.decoratable_methods
  #     [:foo]
  #   end
  # end
  #
  # When the Decoratable module is included, the class will in memory be transformed
  # into something like this:
  #
  # class MyClass
  #
  #   def original_hello(name)
  #     puts "hello #{name}"
  #   end
  #
  #   def hello(*args, **kwargs)
  #     decorated(:hello).perform(*args, **kwargs)
  #   end
  #
  #   ... Rest of the methods of Decoratable
  # end
  #
  # And `decorated(:hello)`, whill generate an object responding to `:perform`
  # that has all the method_middleware properly composed, and terminated by a wrapper
  # of the original method.
  #
  # In the previous example:
  #
  # ```ruby
  # authenticator = Authnd::Client::Authenticator.new(faraday_conn) do |client|
  #   client.use :authenticate, with: [logging, instrumentation, caching]
  # end
  # ```
  #
  # when we call `authenticator.authenticate Request.new` the following set of calls
  # will happen
  #
  # authenticator.authenticate(kwargs)
  #  logging logic before decoration
  #  logging.request.perform(kwargs)
  #    instrumentation logic before decoration
  #    instrumentation.request.perform(kwargs)
  #      caching logic before decoration
  #      caching.request.perform(kwargs)
  #        anonymous_object.perform(kwargs)
  #           authenticator.send :original_authenticate, kwargs
  #      caching logic after decoration
  #     instrumentation logic after decoration
  #   logging loggic after decoration
  # return result value
  #
  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#123
  def use(methods, with:); end

  private

  # Composes the decorated version of the original method. And chaches it in memory
  # for future uses.
  #
  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#197
  def decorated(method); end

  # Hash where keys are method names and values the objects resulting
  # of applying the middleware to the methods. A decorated method is a callable
  # that composes the middleware around the original method.
  #
  # This information can be re-created from @method_middleware, but it's cached in
  #
  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#223
  def decorated_methods; end

  # Gets the singleton class of the decoratable instance so methods are
  # overriden only for the particular instance being decorated, and not
  # for all the instance of the class that includes this module
  #
  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#190
  def eigenclass; end

  # Hash where keys are the method names and values the list of middleware
  # to apply to the methods being decorated.
  #
  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#230
  def method_middleware; end

  # Parses a middleware from a class and a set of args
  #
  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#178
  def middleware_from_class_and_args(middleware_spec); end

  # Parses a middleware from a middleware instance
  #
  # @raise [Authnd::DecorationError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#170
  def middleware_from_instance(middleware_spec); end

  # Determines whether a certain middleware instance has already been used
  #
  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#244
  def middleware_used?(middleware); end

  # A middleware can be a list of one or more of:
  # - a list containing a middleware class and its initialize args to build
  # a new middleware instance
  # - an instance of a middleware class.
  #
  # This method caches the list of middleware applied to each method in the
  # method_middleware member.
  #
  # @raise [Authnd::DecorationError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#151
  def register_middleware_for_method(method, middleware_spec); end

  # Caches a middleware instance. This is used to prevent a given instance
  # from decorating more than one decoratable.
  # This is necessary because middleware are stateful: they keep a reference
  # to the next middleware in the chain
  #
  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#238
  def use_middleware!(middleware); end
end

# Wraps the original method into an object that has the middleware spec
# of responding to .perform.
#
# source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#12
class Authnd::Client::Decoratable::Adapter
  # @return [Adapter] a new instance of Adapter
  #
  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#15
  def initialize(receiver, method, method_name); end

  # Returns the value of attribute method_name.
  #
  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#13
  def method_name; end

  # source://authnd-client//ruby/lib/authnd-client/client/decoratable.rb#21
  def perform(*args, **kwargs); end
end

# source://authnd-client//ruby/lib/authnd-client/client/headers.rb#7
Authnd::Client::ENABLED_FEATURES_HEADER = T.let(T.unsafe(nil), String)

# source://authnd-client//ruby/lib/authnd-client/client/faraday_middleware/hmac_auth.rb#5
module Authnd::Client::FaradayMiddleware; end

# Faraday middleware that inserts an HMAC Authentication header into requests.
#
# source://authnd-client//ruby/lib/authnd-client/client/faraday_middleware/hmac_auth.rb#7
class Authnd::Client::FaradayMiddleware::HMACAuth < ::Faraday::Middleware
  # Public: Initialize the middleware with an HMAC key
  #
  # app      - The faraday application/middlewares stack.
  # hmac_key - String HMAC secret key.
  # header   - (Optional) String HTTP header to send the HMAC token in.
  #
  # @return [HMACAuth] a new instance of HMACAuth
  #
  # source://authnd-client//ruby/lib/authnd-client/client/faraday_middleware/hmac_auth.rb#15
  def initialize(app, options = T.unsafe(nil)); end

  # source://authnd-client//ruby/lib/authnd-client/client/faraday_middleware/hmac_auth.rb#21
  def call(env); end

  private

  # source://authnd-client//ruby/lib/authnd-client/client/faraday_middleware/hmac_auth.rb#28
  def hmac_token; end
end

# source://authnd-client//ruby/lib/authnd-client/client/faraday_middleware/hmac_auth.rb#8
Authnd::Client::FaradayMiddleware::HMACAuth::HMAC_AUTH_HEADER = T.let(T.unsafe(nil), String)

# Faraday middleware that inserts tenant id and shortcode headers into requests.
#
# source://authnd-client//ruby/lib/authnd-client/client/faraday_middleware/tenant_context.rb#7
class Authnd::Client::FaradayMiddleware::TenantContext < ::Faraday::Middleware
  # Public: Initialize the middleware with tenant headers
  #
  # app              - The faraday application/middlewares stack.
  # tenant_id        - Integer tenant id.
  # tenant_shortcode - String tenant shortcode.
  # tenant_slug      - String tenant slug.
  #
  # @return [TenantContext] a new instance of TenantContext
  #
  # source://authnd-client//ruby/lib/authnd-client/client/faraday_middleware/tenant_context.rb#18
  def initialize(app, options = T.unsafe(nil)); end

  # source://authnd-client//ruby/lib/authnd-client/client/faraday_middleware/tenant_context.rb#25
  def call(env); end
end

# source://authnd-client//ruby/lib/authnd-client/client/faraday_middleware/tenant_context.rb#8
Authnd::Client::FaradayMiddleware::TenantContext::TENANT_ID_HEADER = T.let(T.unsafe(nil), String)

# source://authnd-client//ruby/lib/authnd-client/client/faraday_middleware/tenant_context.rb#9
Authnd::Client::FaradayMiddleware::TenantContext::TENANT_SHORTCODE_HEADER = T.let(T.unsafe(nil), String)

# source://authnd-client//ruby/lib/authnd-client/client/faraday_middleware/tenant_context.rb#10
Authnd::Client::FaradayMiddleware::TenantContext::TENANT_SLUG_HEADER = T.let(T.unsafe(nil), String)

# source://authnd-client//ruby/lib/authnd-client/client/middleware/instrumenters/noop.rb#5
module Authnd::Client::Middleware; end

# source://authnd-client//ruby/lib/authnd-client/client/middleware/base.rb#8
class Authnd::Client::Middleware::Base
  # source://authnd-client//ruby/lib/authnd-client/client/middleware/base.rb#11
  def instrument(operation, payload = T.unsafe(nil), &block); end

  # Returns the value of attribute original_method_name.
  #
  # source://authnd-client//ruby/lib/authnd-client/client/middleware/base.rb#9
  def original_method_name; end

  # Sets the attribute original_method_name
  #
  # @param value the value to set the attribute original_method_name to.
  #
  # source://authnd-client//ruby/lib/authnd-client/client/middleware/base.rb#9
  def original_method_name=(_arg0); end

  # Returns the value of attribute request.
  #
  # source://authnd-client//ruby/lib/authnd-client/client/middleware/base.rb#9
  def request; end

  # Sets the attribute request
  #
  # @param value the value to set the attribute request to.
  #
  # source://authnd-client//ruby/lib/authnd-client/client/middleware/base.rb#9
  def request=(_arg0); end

  protected

  # @raise [NotImplementedError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/middleware/base.rb#18
  def middleware_name; end

  private

  # source://authnd-client//ruby/lib/authnd-client/client/middleware/base.rb#24
  def expand_instrument_name(operation); end
end

# source://authnd-client//ruby/lib/authnd-client/client/middleware/instrumenters/noop.rb#6
module Authnd::Client::Middleware::Instrumenters; end

# source://authnd-client//ruby/lib/authnd-client/client/middleware/instrumenters/noop.rb#7
class Authnd::Client::Middleware::Instrumenters::Noop
  class << self
    # @yield [payload]
    #
    # source://authnd-client//ruby/lib/authnd-client/client/middleware/instrumenters/noop.rb#8
    def instrument(_, payload = T.unsafe(nil)); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/client/middleware/retry.rb#14
class Authnd::Client::Middleware::Retry < ::Authnd::Client::Middleware::Base
  # Intializes a new instance of the middleware
  # - max_attempts an integer representing how many times the middleware
  # will retry the request, in case it keeps failing.
  # - retryable_errors, an array of exception classes to rescue and retry
  # - options, a Hash of options to pass when building the Retry middleware
  # - options[:instrumenter] an object responding to `instrument` for the purpose of
  #  having observability about the events happening in the middelware.
  # - options[:wait_seconds] a float representing the time to wait (by calling
  # `sleep`) between tries
  #
  # @return [Retry] a new instance of Retry
  #
  # source://authnd-client//ruby/lib/authnd-client/client/middleware/retry.rb#32
  def initialize(instrumenter: T.unsafe(nil), max_attempts: T.unsafe(nil), retryable_errors: T.unsafe(nil), **options); end

  # Applies retry logic to request execution
  #
  # source://authnd-client//ruby/lib/authnd-client/client/middleware/retry.rb#43
  def perform(*args, headers: T.unsafe(nil), **kwargs); end

  protected

  # source://authnd-client//ruby/lib/authnd-client/client/middleware/retry.rb#72
  def middleware_name; end
end

# source://authnd-client//ruby/lib/authnd-client/client/middleware/retry.rb#15
Authnd::Client::Middleware::Retry::DEFAULT_MAX_ATTEMPTS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/client/middleware/retry.rb#16
Authnd::Client::Middleware::Retry::DEFAULT_RETRYABLE_ERRORS = T.let(T.unsafe(nil), Array)

# used to change Faraday timeout by this factor for the provided request
# it won't be forwarded as a header
#
# source://authnd-client//ruby/lib/authnd-client/client/middleware/retry.rb#20
Authnd::Client::Middleware::Retry::METADATA_TIMEOUT_FACTOR = T.let(T.unsafe(nil), String)

# source://authnd-client//ruby/lib/authnd-client/client/middleware/timing.rb#11
class Authnd::Client::Middleware::Timing < ::Authnd::Client::Middleware::Base
  # @return [Timing] a new instance of Timing
  #
  # source://authnd-client//ruby/lib/authnd-client/client/middleware/timing.rb#12
  def initialize(instrumenter: T.unsafe(nil)); end

  # source://authnd-client//ruby/lib/authnd-client/client/middleware/timing.rb#17
  def perform(*args, headers: T.unsafe(nil), **kwargs); end

  protected

  # source://authnd-client//ruby/lib/authnd-client/client/middleware/timing.rb#32
  def middleware_name; end
end

# source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#9
class Authnd::Client::MobileDeviceManager < ::Authnd::Client::ServiceClientBase
  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#188
  def approve_device_auth(auth_request_id, user_id, oauth_access_id, signature, signature_version, headers: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#177
  def find_active_device_auth(user_id, oauth_access_id, headers: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#137
  def find_device_auth_key_registration(user_id, oauth_access_id, headers: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#126
  def find_device_auth_key_registrations(user_id, headers: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#166
  def get_device_auth_status(id, user_id, headers: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#10
  def register_device_key(type, user_id, oauth_access_id, device_name, device_model, device_os, is_hardware_backed, public_key, public_key_verification_signature: T.unsafe(nil), public_key_verification_message: T.unsafe(nil), headers: T.unsafe(nil)); end

  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#192
  def reject_device_auth(auth_request_id, user_id, oauth_access_id, headers: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#149
  def request_device_auth(user_id, skip_challenge: T.unsafe(nil), type: T.unsafe(nil), device_ip: T.unsafe(nil), device_name: T.unsafe(nil), headers: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#65
  def revoke_device_auth_key_by_oauth_access_id(oauth_access_id, headers: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#110
  def revoke_device_keys_by_ids(ids, headers: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#94
  def revoke_device_keys_by_oauth_access_ids(oauth_access_ids, headers: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#79
  def revoke_device_keys_by_user_id(user_id, headers: T.unsafe(nil)); end

  protected

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#198
  def complete_device_auth(auth_request_id, user_id, oauth_access_id, signature, signature_version, completion_type:, headers: T.unsafe(nil)); end

  # source://authnd-client//ruby/lib/authnd-client/client/mobile_device_manager.rb#232
  def create_twirp_client(connection); end
end

# source://authnd-client//ruby/lib/authnd-client/client/service_client_base.rb#21
class Authnd::Client::ServiceClientBase
  include ::Authnd::Client::Decoratable

  # Intializes a new Authenticator Client
  # - connection: the Faraday::Connection
  # - block: (optional) a block receiving this same instance that is used to initialize
  #   the middleware stack for this class services
  #
  # @raise [ArgumentError]
  # @return [ServiceClientBase] a new instance of ServiceClientBase
  # @yield [_self]
  # @yieldparam _self [Authnd::Client::ServiceClientBase] the object that the method was called on
  #
  # source://authnd-client//ruby/lib/authnd-client/client/service_client_base.rb#29
  def initialize(connection, catalog_service:); end

  protected

  # source://authnd-client//ruby/lib/authnd-client/client/service_client_base.rb#42
  def create_twirp_client(_connection); end
end

# source://authnd-client//ruby/lib/authnd-client/errors.rb#5
class Authnd::DecorationError < ::Authnd::Error; end

# source://authnd-client//ruby/lib/authnd-client/errors.rb#4
class Authnd::Error < ::StandardError; end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/attributes_pb.rb#40
module Authnd::Proto; end

class Authnd::Proto::AccessToken
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/attribute_extensions.rb#70
class Authnd::Proto::Attribute
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end

    # source://authnd-client//ruby/lib/authnd-client/attribute_extensions.rb#71
    def list_from_hash(hash); end
  end
end

class Authnd::Proto::AttributeList
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::AuthenticateRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::AuthenticateResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::AuthenticateResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_ACCESS_TOKEN_LAST_EIGHT_MISMATCH = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_ACCESS_TOKEN_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_CREDENTIAL_EXPIRED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_CREDENTIAL_INVALID = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_CREDENTIAL_REVOKED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_MAINTENANCE = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_NOT_SUPPORTED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_PASSWORD_MISMATCH = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_PUBLIC_KEY_ALGO_NOT_SUPPORTED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_PUBLIC_KEY_MALFORMED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_PUBLIC_KEY_MISMATCH = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_PUBLIC_KEY_MISSING = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_PUBLIC_KEY_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_PUBLIC_KEY_NOT_VERIFIED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_SESSION_EXPIRED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_SESSION_REVOKED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_SESSION_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_SUSPENDED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_USER_DISABLED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_USER_SPAMMY = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_USER_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_FAILED_WEAK_PASSWORD = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authenticate_pb.rb#53
Authnd::Proto::AuthenticateResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authentication_api_twirp.rb#13
class Authnd::Proto::AuthenticatorClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def authenticate(input, req_opts = T.unsafe(nil)); end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authentication_api_twirp.rb#7
class Authnd::Proto::AuthenticatorService < ::Twirp::Service; end

class Authnd::Proto::BatchRevokeResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::BatchVerifyResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::CompleteDeviceAuthMessage
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::CompleteDeviceAuthRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#65
class Authnd::Proto::CompleteDeviceAuthResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end

  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#66
  def success?; end

  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::CompleteDeviceAuthResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#116
Authnd::Proto::CompleteDeviceAuthResponse::Result::RESULT_ALREADY_APPROVED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#116
Authnd::Proto::CompleteDeviceAuthResponse::Result::RESULT_ALREADY_REJECTED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#116
Authnd::Proto::CompleteDeviceAuthResponse::Result::RESULT_FAILED_AUTH_REQUEST_NOT_ACTIVE = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#116
Authnd::Proto::CompleteDeviceAuthResponse::Result::RESULT_FAILED_AUTH_REQUEST_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#116
Authnd::Proto::CompleteDeviceAuthResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#116
Authnd::Proto::CompleteDeviceAuthResponse::Result::RESULT_FAILED_NOT_VERIFIED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#116
Authnd::Proto::CompleteDeviceAuthResponse::Result::RESULT_FAILED_VALID_DEVICE_KEY_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#116
Authnd::Proto::CompleteDeviceAuthResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#116
Authnd::Proto::CompleteDeviceAuthResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authentication_api_twirp.rb#27
class Authnd::Proto::CredentialManagerClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def find_credentials(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def issue_signed_auth_token(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def issue_token(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def revoke_credentials(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def verify_credentials(input, req_opts = T.unsafe(nil)); end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authentication_api_twirp.rb#17
class Authnd::Proto::CredentialManagerService < ::Twirp::Service; end

# source://authnd-client//ruby/lib/authnd-client/credentials_extensions.rb#7
class Authnd::Proto::Credentials
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    # source://authnd-client//ruby/lib/authnd-client/credentials_extensions.rb#16
    def access_token(token); end

    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end

    # source://authnd-client//ruby/lib/authnd-client/credentials_extensions.rb#12
    def login_password(login, password); end

    # source://authnd-client//ruby/lib/authnd-client/credentials_extensions.rb#20
    def signed_auth_token(token, scope); end

    # source://authnd-client//ruby/lib/authnd-client/credentials_extensions.rb#8
    def ssh_key(key); end

    private

    # forcibly UTF-8 encodes the provided string. protobuf strings are expected to be UTF-8 encoded, and
    # the call to construct credentials will raise if provided a different encoding (e.g. ASCII-8BIT).
    #
    # source://authnd-client//ruby/lib/authnd-client/credentials_extensions.rb#27
    def force_proto_string_encoding(param); end
  end
end

class Authnd::Proto::DeviceKeyRegistration
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::DeviceKeyRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/errors.rb#8
class Authnd::Proto::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://authnd-client//ruby/lib/authnd-client/errors.rb#11
  def initialize(message: T.unsafe(nil), twirp_error: T.unsafe(nil)); end

  # Returns the value of attribute twirp_error.
  #
  # source://authnd-client//ruby/lib/authnd-client/errors.rb#9
  def twirp_error; end
end

class Authnd::Proto::FindActiveDeviceAuthRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#59
class Authnd::Proto::FindActiveDeviceAuthResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end

  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#60
  def success?; end

  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::FindActiveDeviceAuthResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#112
Authnd::Proto::FindActiveDeviceAuthResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#112
Authnd::Proto::FindActiveDeviceAuthResponse::Result::RESULT_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#112
Authnd::Proto::FindActiveDeviceAuthResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#112
Authnd::Proto::FindActiveDeviceAuthResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Authnd::Proto::FindCredentialsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::FindCredentialsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::FindCredentialsResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/find_pb.rb#34
Authnd::Proto::FindCredentialsResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/find_pb.rb#34
Authnd::Proto::FindCredentialsResponse::Result::RESULT_FAILED_INVALID_ATTRIBUTES = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/find_pb.rb#34
Authnd::Proto::FindCredentialsResponse::Result::RESULT_FAILED_NOT_SUPPORTED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/find_pb.rb#34
Authnd::Proto::FindCredentialsResponse::Result::RESULT_FAILED_USER_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/find_pb.rb#34
Authnd::Proto::FindCredentialsResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/find_pb.rb#34
Authnd::Proto::FindCredentialsResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Authnd::Proto::FindDeviceKeyRegistrationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#77
class Authnd::Proto::FindDeviceKeyRegistrationResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end

  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#78
  def success?; end

  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::FindDeviceKeyRegistrationResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#153
Authnd::Proto::FindDeviceKeyRegistrationResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#153
Authnd::Proto::FindDeviceKeyRegistrationResponse::Result::RESULT_FAILED_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#153
Authnd::Proto::FindDeviceKeyRegistrationResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#153
Authnd::Proto::FindDeviceKeyRegistrationResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Authnd::Proto::FindDeviceKeyRegistrationsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#71
class Authnd::Proto::FindDeviceKeyRegistrationsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end

  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#72
  def success?; end

  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::FindDeviceKeyRegistrationsResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#149
Authnd::Proto::FindDeviceKeyRegistrationsResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#149
Authnd::Proto::FindDeviceKeyRegistrationsResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#149
Authnd::Proto::FindDeviceKeyRegistrationsResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Authnd::Proto::GetDeviceAuthStatusRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#53
class Authnd::Proto::GetDeviceAuthStatusResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end

  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#54
  def success?; end

  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::GetDeviceAuthStatusResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#108
Authnd::Proto::GetDeviceAuthStatusResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#108
Authnd::Proto::GetDeviceAuthStatusResponse::Result::RESULT_FAILED_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#108
Authnd::Proto::GetDeviceAuthStatusResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#108
Authnd::Proto::GetDeviceAuthStatusResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

module Authnd::Proto::GetDeviceAuthStatusResponse::Status
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#109
Authnd::Proto::GetDeviceAuthStatusResponse::Status::STATUS_ACTIVE = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#109
Authnd::Proto::GetDeviceAuthStatusResponse::Status::STATUS_APPROVED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#109
Authnd::Proto::GetDeviceAuthStatusResponse::Status::STATUS_EXPIRED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#109
Authnd::Proto::GetDeviceAuthStatusResponse::Status::STATUS_REJECTED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#109
Authnd::Proto::GetDeviceAuthStatusResponse::Status::STATUS_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Authnd::Proto::IntegerList
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::IssueSignedAuthTokenRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::IssueSignedAuthTokenResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::IssueTokenRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#5
class Authnd::Proto::IssueTokenResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end

  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#6
  def success?; end

  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::IssueTokenResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/issue_pb.rb#51
Authnd::Proto::IssueTokenResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/issue_pb.rb#51
Authnd::Proto::IssueTokenResponse::Result::RESULT_FAILED_USER_SUSPENDED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/issue_pb.rb#51
Authnd::Proto::IssueTokenResponse::Result::RESULT_FAILED_USER_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/issue_pb.rb#51
Authnd::Proto::IssueTokenResponse::Result::RESULT_INVALID_ATTRIBUTES = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/issue_pb.rb#51
Authnd::Proto::IssueTokenResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/issue_pb.rb#51
Authnd::Proto::IssueTokenResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/issue_pb.rb#51
Authnd::Proto::IssueTokenResponse::Result::RESULT_UNSUPPORTED_TOKEN_TYPE = T.let(T.unsafe(nil), Integer)

class Authnd::Proto::LoginPassword
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authentication_api_twirp.rb#45
class Authnd::Proto::MobileDeviceManagerClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def complete_device_auth(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def find_active_device_auth(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def find_device_key_registration(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def find_device_key_registrations(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_device_auth_status(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def register_device_key(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def request_device_auth(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def revoke_device_key(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def revoke_device_keys(input, req_opts = T.unsafe(nil)); end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/authentication_api_twirp.rb#31
class Authnd::Proto::MobileDeviceManagerService < ::Twirp::Service; end

class Authnd::Proto::RegisterDeviceKeyRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#17
class Authnd::Proto::RegisterDeviceKeyResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end

  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#18
  def success?; end

  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::RegisterDeviceKeyResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#134
Authnd::Proto::RegisterDeviceKeyResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#134
Authnd::Proto::RegisterDeviceKeyResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#134
Authnd::Proto::RegisterDeviceKeyResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#11
class Authnd::Proto::RegisterDeviceResponse
  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#12
  def success?; end
end

class Authnd::Proto::RegistrationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::RegistrationsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::RequestDeviceAuthRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#47
class Authnd::Proto::RequestDeviceAuthResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end

  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#48
  def success?; end

  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::RequestDeviceAuthResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#105
Authnd::Proto::RequestDeviceAuthResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#105
Authnd::Proto::RequestDeviceAuthResponse::Result::RESULT_FAILED_NO_VALID_DEVICE_KEYS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#105
Authnd::Proto::RequestDeviceAuthResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_auth_pb.rb#105
Authnd::Proto::RequestDeviceAuthResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Authnd::Proto::RevokeAllDeviceKeysByIdsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::RevokeAllDeviceKeysByOauthAccessesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::RevokeByCredential
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::RevokeById
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::RevokeDeviceAuthKeyRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::RevokeDeviceAuthKeysRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#41
class Authnd::Proto::RevokeDeviceAuthResponse
  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#42
  def success?; end
end

class Authnd::Proto::RevokeDeviceKeyRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#23
class Authnd::Proto::RevokeDeviceKeyResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end

  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#24
  def success?; end

  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::RevokeDeviceKeyResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#138
Authnd::Proto::RevokeDeviceKeyResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#138
Authnd::Proto::RevokeDeviceKeyResponse::Result::RESULT_FAILED_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#138
Authnd::Proto::RevokeDeviceKeyResponse::Result::RESULT_KEY_ALREADY_REVOKED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#138
Authnd::Proto::RevokeDeviceKeyResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#138
Authnd::Proto::RevokeDeviceKeyResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Authnd::Proto::RevokeDeviceKeysRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#29
class Authnd::Proto::RevokeDeviceKeysResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end

  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#30
  def success?; end

  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::RevokeDeviceKeysResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#144
Authnd::Proto::RevokeDeviceKeysResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#144
Authnd::Proto::RevokeDeviceKeysResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/mobile_device_keys_pb.rb#144
Authnd::Proto::RevokeDeviceKeysResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Authnd::Proto::RevokeRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::RevokeResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::RevokeResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/revoke_pb.rb#52
Authnd::Proto::RevokeResponse::Result::RESULT_ALREADY_REVOKED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/revoke_pb.rb#52
Authnd::Proto::RevokeResponse::Result::RESULT_FAILED_CREDENTIAL_INVALID = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/revoke_pb.rb#52
Authnd::Proto::RevokeResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/revoke_pb.rb#52
Authnd::Proto::RevokeResponse::Result::RESULT_FAILED_MAX_BATCH_SIZE_EXCEEDED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/revoke_pb.rb#52
Authnd::Proto::RevokeResponse::Result::RESULT_FAILED_MISSING_REASON = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/revoke_pb.rb#52
Authnd::Proto::RevokeResponse::Result::RESULT_FAILED_NOT_SUPPORTED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/revoke_pb.rb#52
Authnd::Proto::RevokeResponse::Result::RESULT_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/revoke_pb.rb#52
Authnd::Proto::RevokeResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/revoke_pb.rb#52
Authnd::Proto::RevokeResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

class Authnd::Proto::SSHPublicKey
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::SignedAuthToken
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::StringList
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#35
class Authnd::Proto::UpdateDeviceResponse
  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response_extensions.rb#36
  def success?; end
end

# source://authnd-client//ruby/lib/authnd-client/attribute_extensions.rb#5
class Authnd::Proto::Value
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  # @raise [ArgumentError]
  #
  # source://authnd-client//ruby/lib/authnd-client/attribute_extensions.rb#55
  def unwrap; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end

    # Wraps the specified value in a Authnd::Proto::Value object
    # The following types are supported:
    # * Integers map to values of kind integer_value
    # * Floats map to values of kind double_value
    # * Strings map to values of kind string_value
    # * true and false map to values of kind bool_value
    # * Arrays of Integers map to values of kind integer_list
    # * Arrays of Strings map to values of kind string_list
    #
    # In addition, Symbols will be wrapped as string values.
    # Be aware that when _unwrapping_ a string attribute, it will always be returned as a String.
    #
    # Arrays containing types other than Integer and Float, or arrays containing multiple types, will fail to wrap.
    # Arbitrary Enumerables are not supported, use #to_a to convert them to arrays first.
    #
    # source://authnd-client//ruby/lib/authnd-client/attribute_extensions.rb#20
    def wrap(value); end
  end
end

class Authnd::Proto::VerifyRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Authnd::Proto::VerifyResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Authnd::Proto::VerifyResponse::Result
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/verify_pb.rb#43
Authnd::Proto::VerifyResponse::Result::RESULT_EXPIRED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/verify_pb.rb#43
Authnd::Proto::VerifyResponse::Result::RESULT_FAILED_CREDENTIAL_INVALID = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/verify_pb.rb#43
Authnd::Proto::VerifyResponse::Result::RESULT_FAILED_GENERIC = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/verify_pb.rb#43
Authnd::Proto::VerifyResponse::Result::RESULT_FAILED_NOT_SUPPORTED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/verify_pb.rb#43
Authnd::Proto::VerifyResponse::Result::RESULT_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/verify_pb.rb#43
Authnd::Proto::VerifyResponse::Result::RESULT_REVOKED = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/verify_pb.rb#43
Authnd::Proto::VerifyResponse::Result::RESULT_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/proto/authentication/v0/verify_pb.rb#43
Authnd::Proto::VerifyResponse::Result::RESULT_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://authnd-client//ruby/lib/authnd-client/response.rb#4
class Authnd::Response
  # @return [Response] a new instance of Response
  #
  # source://authnd-client//ruby/lib/authnd-client/response.rb#7
  def initialize(result, attributes); end

  # Returns the value of attribute attributes.
  #
  # source://authnd-client//ruby/lib/authnd-client/response.rb#5
  def attributes; end

  # Sets the attribute attributes
  #
  # @param value the value to set the attribute attributes to.
  #
  # source://authnd-client//ruby/lib/authnd-client/response.rb#5
  def attributes=(_arg0); end

  # Returns the value of attribute result.
  #
  # source://authnd-client//ruby/lib/authnd-client/response.rb#5
  def result; end

  # Sets the attribute result
  #
  # @param value the value to set the attribute result to.
  #
  # source://authnd-client//ruby/lib/authnd-client/response.rb#5
  def result=(_arg0); end

  # @return [Boolean]
  #
  # source://authnd-client//ruby/lib/authnd-client/response.rb#17
  def success?; end

  class << self
    # source://authnd-client//ruby/lib/authnd-client/response.rb#12
    def from_twirp(twirp_response); end

    # source://authnd-client//ruby/lib/authnd-client/response.rb#21
    def unwrap_attributes(proto_attrs); end
  end
end

# source://authnd-client//ruby/lib/authnd-client/version.rb#4
Authnd::VERSION = T.let(T.unsafe(nil), String)

module Google::Protobuf::MessageExts::ClassMethods; end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Codespaces::V0::CodespaceCreated`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Codespaces::V0::CodespaceCreated`.

class Hydro::Schemas::Github::Codespaces::V0::CodespaceCreated
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      billable_owner_in_dunning_cycle: T.nilable(T::Boolean),
      billing_plan_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::BillingPlanOwner),
      codespace: T.nilable(Hydro::Schemas::Github::Codespaces::V0::Entities::Codespace),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, billable_owner_in_dunning_cycle: nil, billing_plan_owner: nil, codespace: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T::Boolean) }
  def billable_owner_in_dunning_cycle; end

  sig { params(value: T::Boolean).void }
  def billable_owner_in_dunning_cycle=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::BillingPlanOwner)) }
  def billing_plan_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::BillingPlanOwner)).void }
  def billing_plan_owner=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_billable_owner_in_dunning_cycle; end

  sig { void }
  def clear_billing_plan_owner; end

  sig { void }
  def clear_codespace; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Codespaces::V0::Entities::Codespace)) }
  def codespace; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Codespaces::V0::Entities::Codespace)).void }
  def codespace=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::MergeQueue::V1::MergeGroupEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::MergeQueue::V1::MergeGroupEvent`.

class Hydro::Schemas::Github::MergeQueue::V1::MergeGroupEvent
  sig do
    params(
      event: T.nilable(T.any(Symbol, Integer)),
      group_entries: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry], T::Array[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry])),
      merge_group: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup),
      protected_branch: T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch),
      pull_requests: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::PullRequest], T::Array[Hydro::Schemas::Github::V1::Entities::PullRequest])),
      queue: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueue),
      queue_entries: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry], T::Array[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry])),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)
    ).void
  end
  def initialize(event: nil, group_entries: T.unsafe(nil), merge_group: nil, protected_branch: nil, pull_requests: T.unsafe(nil), queue: nil, queue_entries: T.unsafe(nil), repository: nil); end

  sig { void }
  def clear_event; end

  sig { void }
  def clear_group_entries; end

  sig { void }
  def clear_merge_group; end

  sig { void }
  def clear_protected_branch; end

  sig { void }
  def clear_pull_requests; end

  sig { void }
  def clear_queue; end

  sig { void }
  def clear_queue_entries; end

  sig { void }
  def clear_repository; end

  sig { returns(T.any(Symbol, Integer)) }
  def event; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def event=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry]) }
  def group_entries; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry]
    ).void
  end
  def group_entries=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup)) }
  def merge_group; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup)).void }
  def merge_group=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch)) }
  def protected_branch; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch)).void }
  def protected_branch=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::PullRequest]) }
  def pull_requests; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::PullRequest]).void }
  def pull_requests=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueue)) }
  def queue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueue)).void }
  def queue=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry]) }
  def queue_entries; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry]
    ).void
  end
  def queue_entries=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end
end

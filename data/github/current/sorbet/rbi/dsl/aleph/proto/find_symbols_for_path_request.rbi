# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Aleph::Proto::FindSymbolsForPathRequest`.
# Please instead update this file by running `bin/tapioca dsl Aleph::Proto::FindSymbolsForPathRequest`.

class Aleph::Proto::FindSymbolsForPathRequest
  sig do
    params(
      network_id: T.nilable(Integer),
      path: T.nilable(String),
      ref: T.nilable(String),
      repository_id: T.nilable(Integer),
      repository_name: T.nilable(String),
      repository_owner: T.nilable(String),
      root_id: T.nilable(Integer),
      sha: T.nilable(String)
    ).void
  end
  def initialize(network_id: nil, path: nil, ref: nil, repository_id: nil, repository_name: nil, repository_owner: nil, root_id: nil, sha: nil); end

  sig { void }
  def clear_network_id; end

  sig { void }
  def clear_path; end

  sig { void }
  def clear_ref; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_repository_name; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_root_id; end

  sig { void }
  def clear_sha; end

  sig { returns(Integer) }
  def network_id; end

  sig { params(value: Integer).void }
  def network_id=(value); end

  sig { returns(String) }
  def path; end

  sig { params(value: String).void }
  def path=(value); end

  sig { returns(String) }
  def ref; end

  sig { params(value: String).void }
  def ref=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(String) }
  def repository_name; end

  sig { params(value: String).void }
  def repository_name=(value); end

  sig { returns(String) }
  def repository_owner; end

  sig { params(value: String).void }
  def repository_owner=(value); end

  sig { returns(Integer) }
  def root_id; end

  sig { params(value: Integer).void }
  def root_id=(value); end

  sig { returns(String) }
  def sha; end

  sig { params(value: String).void }
  def sha=(value); end
end

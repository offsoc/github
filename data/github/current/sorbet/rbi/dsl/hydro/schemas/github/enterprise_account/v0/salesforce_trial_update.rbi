# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::EnterpriseAccount::V0::SalesforceTrialUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::EnterpriseAccount::V0::SalesforceTrialUpdate`.

class Hydro::Schemas::Github::EnterpriseAccount::V0::SalesforceTrialUpdate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      billing_email: T.nilable(String),
      billing_full_name: T.nilable(String),
      billing_information: T.nilable(Hydro::Schemas::Github::EnterpriseAccount::V0::Entities::BillingInformation),
      emu: T.nilable(T::Boolean),
      enterprise: T.nilable(Hydro::Schemas::Github::V1::Entities::Business),
      enterprise_name: T.nilable(String),
      expiration_timestamp: T.nilable(Google::Protobuf::Timestamp),
      marketing_consent: T.nilable(String),
      metered: T.nilable(T::Boolean),
      payment_method: T.nilable(T.any(Symbol, Integer)),
      shipping_information: T.nilable(Hydro::Schemas::Github::EnterpriseAccount::V0::Entities::ShippingInformation),
      status: T.nilable(T.any(Symbol, Integer)),
      talk_to_sales: T.nilable(T.any(Symbol, Integer)),
      upgraded_organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      user_initiated: T.nilable(T.any(Symbol, Integer)),
      zuora_account_id: T.nilable(String),
      zuora_account_number: T.nilable(String)
    ).void
  end
  def initialize(actor: nil, billing_email: nil, billing_full_name: nil, billing_information: nil, emu: nil, enterprise: nil, enterprise_name: nil, expiration_timestamp: nil, marketing_consent: nil, metered: nil, payment_method: nil, shipping_information: nil, status: nil, talk_to_sales: nil, upgraded_organization: nil, user_initiated: nil, zuora_account_id: nil, zuora_account_number: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def billing_email; end

  sig { params(value: String).void }
  def billing_email=(value); end

  sig { returns(String) }
  def billing_full_name; end

  sig { params(value: String).void }
  def billing_full_name=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::EnterpriseAccount::V0::Entities::BillingInformation)) }
  def billing_information; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::EnterpriseAccount::V0::Entities::BillingInformation)).void }
  def billing_information=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_billing_email; end

  sig { void }
  def clear_billing_full_name; end

  sig { void }
  def clear_billing_information; end

  sig { void }
  def clear_emu; end

  sig { void }
  def clear_enterprise; end

  sig { void }
  def clear_enterprise_name; end

  sig { void }
  def clear_expiration_timestamp; end

  sig { void }
  def clear_marketing_consent; end

  sig { void }
  def clear_metered; end

  sig { void }
  def clear_payment_method; end

  sig { void }
  def clear_shipping_information; end

  sig { void }
  def clear_status; end

  sig { void }
  def clear_talk_to_sales; end

  sig { void }
  def clear_upgraded_organization; end

  sig { void }
  def clear_user_initiated; end

  sig { void }
  def clear_zuora_account_id; end

  sig { void }
  def clear_zuora_account_number; end

  sig { returns(T::Boolean) }
  def emu; end

  sig { params(value: T::Boolean).void }
  def emu=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Business)) }
  def enterprise; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Business)).void }
  def enterprise=(value); end

  sig { returns(String) }
  def enterprise_name; end

  sig { params(value: String).void }
  def enterprise_name=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def expiration_timestamp; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def expiration_timestamp=(value); end

  sig { returns(String) }
  def marketing_consent; end

  sig { params(value: String).void }
  def marketing_consent=(value); end

  sig { returns(T::Boolean) }
  def metered; end

  sig { params(value: T::Boolean).void }
  def metered=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def payment_method; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def payment_method=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::EnterpriseAccount::V0::Entities::ShippingInformation)) }
  def shipping_information; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::EnterpriseAccount::V0::Entities::ShippingInformation)).void }
  def shipping_information=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def talk_to_sales; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def talk_to_sales=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def upgraded_organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def upgraded_organization=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def user_initiated; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def user_initiated=(value); end

  sig { returns(String) }
  def zuora_account_id; end

  sig { params(value: String).void }
  def zuora_account_id=(value); end

  sig { returns(String) }
  def zuora_account_number; end

  sig { params(value: String).void }
  def zuora_account_number=(value); end
end

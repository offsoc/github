#!/bin/bash

if [ "$DX_EDGE" = true ] && [ "$DX_FEATURE_SUBPROJECT_CONTAINERS" = true ]; then
   echo "Running codeload in container"

  SCRIPT_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
  echo "SCRIPT_DIR: $SCRIPT_DIR"
  source $SCRIPT_DIR/dx/lib/subproject-containers

  if [ -n "$SKIP_CODELOAD" ] ; then
    echo "skipping codeload"
  else
    SUBPROJECT_VERSION=$(subproject_version "codeload")
    echo "codeload version $SUBPROJECT_VERSION"

    # Ensure we clean up any existing containers, and remove after shutdown.
    cleanup_docker() {
      echo "Stopping codeload..."
      docker stop codeload || true
      exit 0
    }

    trap cleanup_docker EXIT INT QUIT TERM HUP

    docker stop codeload || true
    docker rm codeload || true

    # create dev codeload config
    bin/bundle exec ruby config/dev/create-codeload-config.rb

    # Run the codeload service.
    docker run -d --name codeload --env-file $SCRIPT_DIR/../tmp/.server.env \
      --network host \
      -v $SCRIPT_DIR/../config/dev/codeload-dev-config.json:/.app-config/default.json \
      --env CODELOAD_BROKERS_SSL=kafka:9092 \
      "ghcr.io/github/codeload/codeload-focal:$SUBPROJECT_VERSION" \
      ./codeload --config .app-config/default.json


    docker logs --follow codeload &
    wait
  fi
else
  CODELOAD_BIN="vendor/codeload/ng/codeload-ng"

  until [ -x $CODELOAD_BIN ]; do
    if [ "$CODELOAD_NOTICE" != "1" ]; then
      echo "Run 'script/build-codeload' to setup codeload."
      CODELOAD_NOTICE=1
    fi
    sleep 60
  done

  bin/bundle exec ruby config/dev/create-codeload-config.rb
  ln -rnsf log vendor/codeload
  cd vendor/codeload
  if [ -n "$MULTI_TENANT_ENTERPRISE" ]; then
    # hack: codeload enables multi-tenant mode depending on environment.
    # We should use a dev-specific multi-tenant environment here, not a real env.
    # Or ideally, not need to do this at all.
    export GH_ENV=mtwesteu01
  fi
  exec ng/codeload-ng --config codeload-dev-config.json
fi

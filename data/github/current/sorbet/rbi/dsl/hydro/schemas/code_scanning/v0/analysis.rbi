# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::CodeScanning::V0::Analysis`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::CodeScanning::V0::Analysis`.

class Hydro::Schemas::CodeScanning::V0::Analysis
  sig do
    params(
      advanced_setup_enabled: T.nilable(T::Boolean),
      analysis_key: T.nilable(String),
      analysis_name: T.nilable(String),
      build_start_at: T.nilable(Google::Protobuf::Timestamp),
      check_run_ids: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      checkout_uri: T.nilable(String),
      commit_oid: T.nilable(String),
      environment: T.nilable(String),
      explicit_enablement_enforced: T.nilable(T::Boolean),
      hydro_enqueued_at: T.nilable(Google::Protobuf::Timestamp),
      outdated_configuration: T.nilable(Hydro::Schemas::CodeScanning::V0::Analysis::OutdatedConfiguration),
      ref: T.nilable(String),
      repo_nwo: T.nilable(String),
      repository_id: T.nilable(Integer),
      request_id: T.nilable(String),
      sarif_id: T.nilable(String),
      sarif_uri: T.nilable(String),
      source_repository_id: T.nilable(Integer),
      third_party_tools_enabled: T.nilable(T::Boolean),
      tools: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::CodeScanning::V0::Analysis::Tool], T::Array[Hydro::Schemas::CodeScanning::V0::Analysis::Tool])),
      track_status: T.nilable(T::Boolean),
      upload_finished_at: T.nilable(Google::Protobuf::Timestamp),
      upload_started_at: T.nilable(Google::Protobuf::Timestamp),
      workflow_run_attempt: T.nilable(Integer),
      workflow_run_id: T.nilable(Integer)
    ).void
  end
  def initialize(advanced_setup_enabled: nil, analysis_key: nil, analysis_name: nil, build_start_at: nil, check_run_ids: T.unsafe(nil), checkout_uri: nil, commit_oid: nil, environment: nil, explicit_enablement_enforced: nil, hydro_enqueued_at: nil, outdated_configuration: nil, ref: nil, repo_nwo: nil, repository_id: nil, request_id: nil, sarif_id: nil, sarif_uri: nil, source_repository_id: nil, third_party_tools_enabled: nil, tools: T.unsafe(nil), track_status: nil, upload_finished_at: nil, upload_started_at: nil, workflow_run_attempt: nil, workflow_run_id: nil); end

  sig { returns(T::Boolean) }
  def advanced_setup_enabled; end

  sig { params(value: T::Boolean).void }
  def advanced_setup_enabled=(value); end

  sig { returns(String) }
  def analysis_key; end

  sig { params(value: String).void }
  def analysis_key=(value); end

  sig { returns(String) }
  def analysis_name; end

  sig { params(value: String).void }
  def analysis_name=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def build_start_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def build_start_at=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def check_run_ids; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def check_run_ids=(value); end

  sig { returns(String) }
  def checkout_uri; end

  sig { params(value: String).void }
  def checkout_uri=(value); end

  sig { void }
  def clear_advanced_setup_enabled; end

  sig { void }
  def clear_analysis_key; end

  sig { void }
  def clear_analysis_name; end

  sig { void }
  def clear_build_start_at; end

  sig { void }
  def clear_check_run_ids; end

  sig { void }
  def clear_checkout_uri; end

  sig { void }
  def clear_commit_oid; end

  sig { void }
  def clear_environment; end

  sig { void }
  def clear_explicit_enablement_enforced; end

  sig { void }
  def clear_hydro_enqueued_at; end

  sig { void }
  def clear_outdated_configuration; end

  sig { void }
  def clear_ref; end

  sig { void }
  def clear_repo_nwo; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_request_id; end

  sig { void }
  def clear_sarif_id; end

  sig { void }
  def clear_sarif_uri; end

  sig { void }
  def clear_source_repository_id; end

  sig { void }
  def clear_third_party_tools_enabled; end

  sig { void }
  def clear_tools; end

  sig { void }
  def clear_track_status; end

  sig { void }
  def clear_upload_finished_at; end

  sig { void }
  def clear_upload_started_at; end

  sig { void }
  def clear_workflow_run_attempt; end

  sig { void }
  def clear_workflow_run_id; end

  sig { returns(String) }
  def commit_oid; end

  sig { params(value: String).void }
  def commit_oid=(value); end

  sig { returns(String) }
  def environment; end

  sig { params(value: String).void }
  def environment=(value); end

  sig { returns(T::Boolean) }
  def explicit_enablement_enforced; end

  sig { params(value: T::Boolean).void }
  def explicit_enablement_enforced=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def hydro_enqueued_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def hydro_enqueued_at=(value); end

  sig { returns(T.nilable(Hydro::Schemas::CodeScanning::V0::Analysis::OutdatedConfiguration)) }
  def outdated_configuration; end

  sig { params(value: T.nilable(Hydro::Schemas::CodeScanning::V0::Analysis::OutdatedConfiguration)).void }
  def outdated_configuration=(value); end

  sig { returns(String) }
  def ref; end

  sig { params(value: String).void }
  def ref=(value); end

  sig { returns(String) }
  def repo_nwo; end

  sig { params(value: String).void }
  def repo_nwo=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(String) }
  def request_id; end

  sig { params(value: String).void }
  def request_id=(value); end

  sig { returns(String) }
  def sarif_id; end

  sig { params(value: String).void }
  def sarif_id=(value); end

  sig { returns(String) }
  def sarif_uri; end

  sig { params(value: String).void }
  def sarif_uri=(value); end

  sig { returns(Integer) }
  def source_repository_id; end

  sig { params(value: Integer).void }
  def source_repository_id=(value); end

  sig { returns(T::Boolean) }
  def third_party_tools_enabled; end

  sig { params(value: T::Boolean).void }
  def third_party_tools_enabled=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::CodeScanning::V0::Analysis::Tool]) }
  def tools; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::CodeScanning::V0::Analysis::Tool]).void }
  def tools=(value); end

  sig { returns(T::Boolean) }
  def track_status; end

  sig { params(value: T::Boolean).void }
  def track_status=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def upload_finished_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def upload_finished_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def upload_started_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def upload_started_at=(value); end

  sig { returns(Integer) }
  def workflow_run_attempt; end

  sig { params(value: Integer).void }
  def workflow_run_attempt=(value); end

  sig { returns(Integer) }
  def workflow_run_id; end

  sig { params(value: Integer).void }
  def workflow_run_id=(value); end
end

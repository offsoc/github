# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Repositories::V1::Pushed`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Repositories::V1::Pushed`.

class Hydro::Schemas::Github::Repositories::V1::Pushed
  sig do
    params(
      enabled_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      excluded_pull_ids: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      installation_id: T.nilable(Integer),
      installation_type: T.nilable(String),
      merge_action: T.nilable(String),
      merge_method: T.nilable(String),
      oauth_access_id: T.nilable(Integer),
      path: T.nilable(String),
      push_options: T.nilable(T.any(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)], T::Array[T.any(Symbol, Integer)])),
      pushed_at: T.nilable(Google::Protobuf::Timestamp),
      pusher: T.nilable(String),
      quarantine_push_state: T.nilable(String),
      ref_batch_number: T.nilable(Integer),
      ref_updates: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::RefUpdate], T::Array[Hydro::Schemas::Github::V1::Entities::RefUpdate])),
      repository_id: T.nilable(Integer),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      run_hydro_job: T.nilable(T::Boolean),
      total_branch_count: T.nilable(Integer),
      total_ref_count: T.nilable(Integer),
      user_programmatic_access_id: T.nilable(Integer)
    ).void
  end
  def initialize(enabled_flags: T.unsafe(nil), excluded_pull_ids: T.unsafe(nil), installation_id: nil, installation_type: nil, merge_action: nil, merge_method: nil, oauth_access_id: nil, path: nil, push_options: T.unsafe(nil), pushed_at: nil, pusher: nil, quarantine_push_state: nil, ref_batch_number: nil, ref_updates: T.unsafe(nil), repository_id: nil, request_context: nil, run_hydro_job: nil, total_branch_count: nil, total_ref_count: nil, user_programmatic_access_id: nil); end

  sig { void }
  def clear_enabled_flags; end

  sig { void }
  def clear_excluded_pull_ids; end

  sig { void }
  def clear_installation_id; end

  sig { void }
  def clear_installation_type; end

  sig { void }
  def clear_merge_action; end

  sig { void }
  def clear_merge_method; end

  sig { void }
  def clear_oauth_access_id; end

  sig { void }
  def clear_path; end

  sig { void }
  def clear_push_options; end

  sig { void }
  def clear_pushed_at; end

  sig { void }
  def clear_pusher; end

  sig { void }
  def clear_quarantine_push_state; end

  sig { void }
  def clear_ref_batch_number; end

  sig { void }
  def clear_ref_updates; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_run_hydro_job; end

  sig { void }
  def clear_total_branch_count; end

  sig { void }
  def clear_total_ref_count; end

  sig { void }
  def clear_user_programmatic_access_id; end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def enabled_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def enabled_flags=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def excluded_pull_ids; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def excluded_pull_ids=(value); end

  sig { returns(Integer) }
  def installation_id; end

  sig { params(value: Integer).void }
  def installation_id=(value); end

  sig { returns(String) }
  def installation_type; end

  sig { params(value: String).void }
  def installation_type=(value); end

  sig { returns(String) }
  def merge_action; end

  sig { params(value: String).void }
  def merge_action=(value); end

  sig { returns(String) }
  def merge_method; end

  sig { params(value: String).void }
  def merge_method=(value); end

  sig { returns(Integer) }
  def oauth_access_id; end

  sig { params(value: Integer).void }
  def oauth_access_id=(value); end

  sig { returns(String) }
  def path; end

  sig { params(value: String).void }
  def path=(value); end

  sig { returns(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]) }
  def push_options; end

  sig { params(value: Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]).void }
  def push_options=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def pushed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def pushed_at=(value); end

  sig { returns(String) }
  def pusher; end

  sig { params(value: String).void }
  def pusher=(value); end

  sig { returns(String) }
  def quarantine_push_state; end

  sig { params(value: String).void }
  def quarantine_push_state=(value); end

  sig { returns(Integer) }
  def ref_batch_number; end

  sig { params(value: Integer).void }
  def ref_batch_number=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::RefUpdate]) }
  def ref_updates; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::RefUpdate]).void }
  def ref_updates=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T::Boolean) }
  def run_hydro_job; end

  sig { params(value: T::Boolean).void }
  def run_hydro_job=(value); end

  sig { returns(Integer) }
  def total_branch_count; end

  sig { params(value: Integer).void }
  def total_branch_count=(value); end

  sig { returns(Integer) }
  def total_ref_count; end

  sig { params(value: Integer).void }
  def total_ref_count=(value); end

  sig { returns(Integer) }
  def user_programmatic_access_id; end

  sig { params(value: Integer).void }
  def user_programmatic_access_id=(value); end
end

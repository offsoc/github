# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Releases::V1::FanoutTargetsCollected`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Releases::V1::FanoutTargetsCollected`.

class Hydro::Schemas::Github::Releases::V1::FanoutTargetsCollected
  sig do
    params(
      author: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      release: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      time_elapsed: T.nilable(Float),
      total_commit_author_followers: T.nilable(Integer),
      total_release_author_followers: T.nilable(Integer),
      total_stargazers: T.nilable(Integer),
      total_targets: T.nilable(Integer)
    ).void
  end
  def initialize(author: nil, release: nil, repository: nil, time_elapsed: nil, total_commit_author_followers: nil, total_release_author_followers: nil, total_stargazers: nil, total_targets: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def author; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def author=(value); end

  sig { void }
  def clear_author; end

  sig { void }
  def clear_release; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_time_elapsed; end

  sig { void }
  def clear_total_commit_author_followers; end

  sig { void }
  def clear_total_release_author_followers; end

  sig { void }
  def clear_total_stargazers; end

  sig { void }
  def clear_total_targets; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)) }
  def release; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)).void }
  def release=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(Float) }
  def time_elapsed; end

  sig { params(value: Float).void }
  def time_elapsed=(value); end

  sig { returns(Integer) }
  def total_commit_author_followers; end

  sig { params(value: Integer).void }
  def total_commit_author_followers=(value); end

  sig { returns(Integer) }
  def total_release_author_followers; end

  sig { params(value: Integer).void }
  def total_release_author_followers=(value); end

  sig { returns(Integer) }
  def total_stargazers; end

  sig { params(value: Integer).void }
  def total_stargazers=(value); end

  sig { returns(Integer) }
  def total_targets; end

  sig { params(value: Integer).void }
  def total_targets=(value); end
end

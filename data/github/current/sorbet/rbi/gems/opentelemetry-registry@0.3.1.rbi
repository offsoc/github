# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opentelemetry-registry` gem.
# Please instead update this file by running `bin/tapioca gem opentelemetry-registry`.

# Instrumentation should be able to handle the case when the library is not installed on a user's system.
module OpenTelemetry::Instrumentation
  extend ::OpenTelemetry::Instrumentation

  # @return [Registry] registry containing all known
  #   instrumentation
  #
  # source://opentelemetry-registry//lib/opentelemetry/instrumentation.rb#21
  def registry; end
end

# The instrumentation Registry contains information about instrumentation
# available and facilitates discovery, installation and
# configuration. This functionality is primarily useful for SDK
# implementors.
class OpenTelemetry::Instrumentation::Registry
  # @return [Registry] a new instance of Registry
  #
  # source://opentelemetry-registry//lib/opentelemetry/instrumentation/registry.rb#14
  def initialize; end

  # Install the specified instrumentation with optionally specified configuration.
  #
  # @param instrumentation_names [Array<String>] An array of instrumentation names to
  #   install
  # @param instrumentation_config_map [optional Hash<String, Hash>] A map of
  #   instrumentation_name to config. This argument is optional and config can be
  #   passed for as many or as few instrumentations as desired.
  #
  # source://opentelemetry-registry//lib/opentelemetry/instrumentation/registry.rb#44
  def install(instrumentation_names, instrumentation_config_map = T.unsafe(nil)); end

  # Install all instrumentation available and installable in this process.
  #
  # @param instrumentation_config_map [optional Hash<String, Hash>] A map of
  #   instrumentation_name to config. This argument is optional and config can be
  #   passed for as many or as few instrumentations as desired.
  #
  # source://opentelemetry-registry//lib/opentelemetry/instrumentation/registry.rb#62
  def install_all(instrumentation_config_map = T.unsafe(nil)); end

  # Lookup an instrumentation definition by name. Returns nil if +instrumentation_name+
  # is not found.
  #
  # @param instrumentation_name [String] A stringified class name for an instrumentation
  # @return [Instrumentation]
  #
  # source://opentelemetry-registry//lib/opentelemetry/instrumentation/registry.rb#31
  def lookup(instrumentation_name); end

  # @api private
  #
  # source://opentelemetry-registry//lib/opentelemetry/instrumentation/registry.rb#20
  def register(instrumentation); end

  private

  # source://opentelemetry-registry//lib/opentelemetry/instrumentation/registry.rb#72
  def find_instrumentation(instrumentation_name); end

  # source://opentelemetry-registry//lib/opentelemetry/instrumentation/registry.rb#77
  def install_instrumentation(instrumentation, config); end
end

# source://opentelemetry-registry//lib/opentelemetry/instrumentation/registry/version.rb#10
OpenTelemetry::Instrumentation::Registry::VERSION = T.let(T.unsafe(nil), String)

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::RepositoryTransfer`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::RepositoryTransfer`.

class Hydro::Schemas::Github::V1::RepositoryTransfer
  sig do
    params(
      criteria: T.nilable(T.any(Symbol, Integer)),
      previous_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_transfer_id: T.nilable(Integer),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      requester: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      responder: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      state: T.nilable(T.any(Symbol, Integer)),
      target: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(criteria: nil, previous_owner: nil, repository: nil, repository_transfer_id: nil, request_context: nil, requester: nil, responder: nil, state: nil, target: nil); end

  sig { void }
  def clear_criteria; end

  sig { void }
  def clear_previous_owner; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_transfer_id; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_requester; end

  sig { void }
  def clear_responder; end

  sig { void }
  def clear_state; end

  sig { void }
  def clear_target; end

  sig { returns(T.any(Symbol, Integer)) }
  def criteria; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def criteria=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def previous_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def previous_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(Integer) }
  def repository_transfer_id; end

  sig { params(value: Integer).void }
  def repository_transfer_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def requester; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def requester=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def responder; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def responder=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def state=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def target; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def target=(value); end
end

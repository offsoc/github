# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Releases::V1::CommitsFetched`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Releases::V1::CommitsFetched`.

class Hydro::Schemas::Github::Releases::V1::CommitsFetched
  sig do
    params(
      commits_fetched: T.nilable(Integer),
      previous_release: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release),
      release: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      since: T.nilable(T.any(Symbol, Integer)),
      total_commits: T.nilable(Integer)
    ).void
  end
  def initialize(commits_fetched: nil, previous_release: nil, release: nil, repository: nil, since: nil, total_commits: nil); end

  sig { void }
  def clear_commits_fetched; end

  sig { void }
  def clear_previous_release; end

  sig { void }
  def clear_release; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_since; end

  sig { void }
  def clear_total_commits; end

  sig { returns(Integer) }
  def commits_fetched; end

  sig { params(value: Integer).void }
  def commits_fetched=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)) }
  def previous_release; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)).void }
  def previous_release=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)) }
  def release; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Releases::V1::Entities::Release)).void }
  def release=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def since; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def since=(value); end

  sig { returns(Integer) }
  def total_commits; end

  sig { params(value: Integer).void }
  def total_commits=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::CodeScanning::V0::RepositoryMetrics`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::CodeScanning::V0::RepositoryMetrics`.

class Hydro::Schemas::CodeScanning::V0::RepositoryMetrics
  sig do
    params(
      code_scanning_enabled: T.nilable(T::Boolean),
      ghas_enabled: T.nilable(T::Boolean),
      metric_created_at: T.nilable(Google::Protobuf::Timestamp),
      organization_id: T.nilable(Integer),
      private_repository: T.nilable(T::Boolean),
      repository_id: T.nilable(Integer),
      was_code_scanning_disabled: T.nilable(T::Boolean),
      was_code_scanning_enabled: T.nilable(T::Boolean)
    ).void
  end
  def initialize(code_scanning_enabled: nil, ghas_enabled: nil, metric_created_at: nil, organization_id: nil, private_repository: nil, repository_id: nil, was_code_scanning_disabled: nil, was_code_scanning_enabled: nil); end

  sig { void }
  def clear_code_scanning_enabled; end

  sig { void }
  def clear_ghas_enabled; end

  sig { void }
  def clear_metric_created_at; end

  sig { void }
  def clear_organization_id; end

  sig { void }
  def clear_private_repository; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_was_code_scanning_disabled; end

  sig { void }
  def clear_was_code_scanning_enabled; end

  sig { returns(T::Boolean) }
  def code_scanning_enabled; end

  sig { params(value: T::Boolean).void }
  def code_scanning_enabled=(value); end

  sig { returns(T::Boolean) }
  def ghas_enabled; end

  sig { params(value: T::Boolean).void }
  def ghas_enabled=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def metric_created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def metric_created_at=(value); end

  sig { returns(Integer) }
  def organization_id; end

  sig { params(value: Integer).void }
  def organization_id=(value); end

  sig { returns(T::Boolean) }
  def private_repository; end

  sig { params(value: T::Boolean).void }
  def private_repository=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T::Boolean) }
  def was_code_scanning_disabled; end

  sig { params(value: T::Boolean).void }
  def was_code_scanning_disabled=(value); end

  sig { returns(T::Boolean) }
  def was_code_scanning_enabled; end

  sig { params(value: T::Boolean).void }
  def was_code_scanning_enabled=(value); end
end

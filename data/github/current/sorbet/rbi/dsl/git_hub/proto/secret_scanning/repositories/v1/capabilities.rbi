# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Proto::SecretScanning::Repositories::V1::Capabilities`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Proto::SecretScanning::Repositories::V1::Capabilities`.

class GitHub::Proto::SecretScanning::Repositories::V1::Capabilities
  sig do
    params(
      generic_secrets: T.nilable(T::Boolean),
      ghas_secret_scanning: T.nilable(T::Boolean),
      lower_confidence_patterns: T.nilable(T::Boolean),
      results_visible: T.nilable(T::Boolean),
      scannable: T.nilable(T::Boolean),
      validity_checks: T.nilable(T::Boolean),
      wiki_scanning: T.nilable(T::Boolean)
    ).void
  end
  def initialize(generic_secrets: nil, ghas_secret_scanning: nil, lower_confidence_patterns: nil, results_visible: nil, scannable: nil, validity_checks: nil, wiki_scanning: nil); end

  sig { void }
  def clear_generic_secrets; end

  sig { void }
  def clear_ghas_secret_scanning; end

  sig { void }
  def clear_lower_confidence_patterns; end

  sig { void }
  def clear_results_visible; end

  sig { void }
  def clear_scannable; end

  sig { void }
  def clear_validity_checks; end

  sig { void }
  def clear_wiki_scanning; end

  sig { returns(T::Boolean) }
  def generic_secrets; end

  sig { params(value: T::Boolean).void }
  def generic_secrets=(value); end

  sig { returns(T::Boolean) }
  def ghas_secret_scanning; end

  sig { params(value: T::Boolean).void }
  def ghas_secret_scanning=(value); end

  sig { returns(T::Boolean) }
  def lower_confidence_patterns; end

  sig { params(value: T::Boolean).void }
  def lower_confidence_patterns=(value); end

  sig { returns(T::Boolean) }
  def results_visible; end

  sig { params(value: T::Boolean).void }
  def results_visible=(value); end

  sig { returns(T::Boolean) }
  def scannable; end

  sig { params(value: T::Boolean).void }
  def scannable=(value); end

  sig { returns(T::Boolean) }
  def validity_checks; end

  sig { params(value: T::Boolean).void }
  def validity_checks=(value); end

  sig { returns(T::Boolean) }
  def wiki_scanning; end

  sig { params(value: T::Boolean).void }
  def wiki_scanning=(value); end
end

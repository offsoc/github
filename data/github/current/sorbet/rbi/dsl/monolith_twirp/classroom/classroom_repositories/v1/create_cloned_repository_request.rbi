# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Classroom::ClassroomRepositories::V1::CreateClonedRepositoryRequest`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Classroom::ClassroomRepositories::V1::CreateClonedRepositoryRequest`.

class MonolithTwirp::Classroom::ClassroomRepositories::V1::CreateClonedRepositoryRequest
  sig do
    params(
      assignment_id: T.nilable(Integer),
      classroom_id: T.nilable(Integer),
      installation_id: T.nilable(Integer),
      is_private: T.nilable(T::Boolean),
      org_id: T.nilable(Integer),
      repo_name: T.nilable(String),
      starter_code_repository_id: T.nilable(Integer),
      team_id: T.nilable(Integer),
      user_id: T.nilable(Integer)
    ).void
  end
  def initialize(assignment_id: nil, classroom_id: nil, installation_id: nil, is_private: nil, org_id: nil, repo_name: nil, starter_code_repository_id: nil, team_id: nil, user_id: nil); end

  sig { returns(Integer) }
  def assignment_id; end

  sig { params(value: Integer).void }
  def assignment_id=(value); end

  sig { returns(Integer) }
  def classroom_id; end

  sig { params(value: Integer).void }
  def classroom_id=(value); end

  sig { void }
  def clear_assignment_id; end

  sig { void }
  def clear_classroom_id; end

  sig { void }
  def clear_installation_id; end

  sig { void }
  def clear_is_private; end

  sig { void }
  def clear_org_id; end

  sig { void }
  def clear_repo_name; end

  sig { void }
  def clear_starter_code_repository_id; end

  sig { void }
  def clear_team_id; end

  sig { void }
  def clear_user_id; end

  sig { returns(Integer) }
  def installation_id; end

  sig { params(value: Integer).void }
  def installation_id=(value); end

  sig { returns(T::Boolean) }
  def is_private; end

  sig { params(value: T::Boolean).void }
  def is_private=(value); end

  sig { returns(Integer) }
  def org_id; end

  sig { params(value: Integer).void }
  def org_id=(value); end

  sig { returns(String) }
  def repo_name; end

  sig { params(value: String).void }
  def repo_name=(value); end

  sig { returns(Integer) }
  def starter_code_repository_id; end

  sig { params(value: Integer).void }
  def starter_code_repository_id=(value); end

  sig { returns(Integer) }
  def team_id; end

  sig { params(value: Integer).void }
  def team_id=(value); end

  sig { returns(Integer) }
  def user_id; end

  sig { params(value: Integer).void }
  def user_id=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `chatops-controller` gem.
# Please instead update this file by running `bin/tapioca gem chatops-controller`.

# source://chatops-controller//lib/chatops.rb#1
module Chatops
  class << self
    # source://chatops-controller//lib/chatops.rb#22
    def alt_public_key; end

    # source://chatops-controller//lib/chatops.rb#30
    def auth_base_url_env_var_name; end

    # source://chatops-controller//lib/chatops.rb#26
    def auth_base_urls; end

    # source://chatops-controller//lib/chatops.rb#14
    def public_key; end

    # source://chatops-controller//lib/chatops.rb#18
    def public_key_env_var_name; end
  end
end

# source://chatops-controller//lib/chatops/controller.rb#4
module Chatops::Controller
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Chatops::Controller::ClassMethods

  # source://chatops-controller//lib/chatops/controller.rb#45
  def execute_chatop; end

  # source://chatops-controller//lib/chatops/controller.rb#18
  def list; end

  # source://chatops-controller//lib/chatops/controller.rb#29
  def process(*args); end

  protected

  # source://chatops-controller//lib/chatops/controller.rb#203
  def chatop_names; end

  # `options` supports any of the optional fields documented
  # in the [protocol](../../docs/protocol-description.md).
  #
  # source://chatops-controller//lib/chatops/controller.rb#77
  def chatop_send(message, options: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://chatops-controller//lib/chatops/controller.rb#183
  def chatops_test_auth?; end

  # @raise [ConfigurationError]
  #
  # source://chatops-controller//lib/chatops/controller.rb#120
  def ensure_chatops_authenticated; end

  # source://chatops-controller//lib/chatops/controller.rb#199
  def ensure_method_exists; end

  # source://chatops-controller//lib/chatops/controller.rb#114
  def ensure_user_given; end

  # source://chatops-controller//lib/chatops/controller.rb#146
  def ensure_valid_chatops_nonce; end

  # source://chatops-controller//lib/chatops/controller.rb#151
  def ensure_valid_chatops_signature; end

  # source://chatops-controller//lib/chatops/controller.rb#168
  def ensure_valid_chatops_timestamp; end

  # source://chatops-controller//lib/chatops/controller.rb#138
  def ensure_valid_chatops_url; end

  # source://chatops-controller//lib/chatops/controller.rb#67
  def json_body; end

  # source://chatops-controller//lib/chatops/controller.rb#103
  def jsonrpc_error(number, http_status, message); end

  # source://chatops-controller//lib/chatops/controller.rb#97
  def jsonrpc_failure(message); end

  # source://chatops-controller//lib/chatops/controller.rb#97
  def jsonrpc_invalid_params(message); end

  # source://chatops-controller//lib/chatops/controller.rb#89
  def jsonrpc_invalid_request; end

  # source://chatops-controller//lib/chatops/controller.rb#93
  def jsonrpc_method_not_found; end

  # source://chatops-controller//lib/chatops/controller.rb#63
  def jsonrpc_params; end

  # source://chatops-controller//lib/chatops/controller.rb#85
  def jsonrpc_parse_error; end

  # source://chatops-controller//lib/chatops/controller.rb#107
  def jsonrpc_response(hash, http_status = T.unsafe(nil)); end

  # `options` supports any of the optional fields documented
  # in the [protocol](../../docs/protocol-description.md).
  #
  # source://chatops-controller//lib/chatops/controller.rb#77
  def jsonrpc_success(message, options: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://chatops-controller//lib/chatops/controller.rb#179
  def request_is_chatop?; end

  # source://chatops-controller//lib/chatops/controller.rb#52
  def setup_params!; end

  # @return [Boolean]
  #
  # source://chatops-controller//lib/chatops/controller.rb#187
  def should_authenticate_chatops?; end

  # @return [Boolean]
  #
  # source://chatops-controller//lib/chatops/controller.rb#191
  def signature_valid?(key_string, signature, signature_string); end
end

# source://chatops-controller//lib/chatops/controller.rb#207
module Chatops::Controller::ClassMethods
  # source://chatops-controller//lib/chatops/controller.rb#208
  def chatop(method_name, regex, help, &block); end

  # source://chatops-controller//lib/chatops/controller.rb#227
  def chatops; end

  # source://chatops-controller//lib/chatops/controller.rb#218
  def chatops_error_response(*args); end

  # source://chatops-controller//lib/chatops/controller.rb#218
  def chatops_help(*args); end

  # source://chatops-controller//lib/chatops/controller.rb#218
  def chatops_namespace(*args); end
end

# source://chatops-controller//lib/chatops/controller.rb#5
class Chatops::Controller::ConfigurationError < ::StandardError; end

# source://chatops-controller//lib/chatops/controller/test_case_helpers.rb#1
module Chatops::Controller::TestCaseHelpers
  # @raise [NoMatchingCommandRegex]
  #
  # source://chatops-controller//lib/chatops/controller/test_case_helpers.rb#42
  def chat(message, user, room_id = T.unsafe(nil), message_id = T.unsafe(nil)); end

  # source://chatops-controller//lib/chatops/controller/test_case_helpers.rb#19
  def chatop(method, params = T.unsafe(nil)); end

  # source://chatops-controller//lib/chatops/controller/test_case_helpers.rb#76
  def chatop_error; end

  # source://chatops-controller//lib/chatops/controller/test_case_helpers.rb#68
  def chatop_response; end

  # source://chatops-controller//lib/chatops/controller/test_case_helpers.rb#5
  def chatops_auth!; end

  # source://chatops-controller//lib/chatops/controller/test_case_helpers.rb#9
  def chatops_prefix(prefix = T.unsafe(nil)); end

  # source://chatops-controller//lib/chatops/controller/test_case_helpers.rb#81
  def extract_named_params(command_string); end
end

# source://chatops-controller//lib/chatops/controller/test_case_helpers.rb#3
class Chatops::Controller::TestCaseHelpers::NoMatchingCommandRegex < ::StandardError; end

# THREAD_STYLES defines the various thread styles available to Hubot Chatops RPC.
# https://github.com/github/hubot-classic/blob/master/docs/rpc_chatops_protocol.md#executing-commands
#
# source://chatops-controller//lib/chatops.rb#4
Chatops::THREAD_STYLES = T.let(T.unsafe(nil), Hash)

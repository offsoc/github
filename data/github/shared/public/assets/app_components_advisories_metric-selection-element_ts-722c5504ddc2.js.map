{"version":3,"file":"chunk-app_components_advisories_metric-selection-element_ts-xxxxxxxxxxxx.js","mappings":"sgBAGe,YAAMA,+BAA+BC,YAGlDC,mBAAoB,CAClB,IAAI,CAACC,gBAAgB,CAAC,UAAW,IAAI,CAACC,aAAa,CACrD,CAGAC,YAAYC,CAA0B,CAAE,CACtC,IAAK,IAAMC,KAAW,IAAI,CAACC,cAAc,CACnCD,IAAYD,EACdC,EAAQE,QAAQ,CAAG,EAEnBF,EAAQE,QAAQ,CAAG,EAGzB,CAEAL,cAAcM,CAAoB,CAAE,CAIlC,GAAIA,EAAMC,GAAG,CAACC,UAAU,CAAC,SAAU,CACjC,IAAMC,EAASH,EAAMG,MAAM,CACvBC,EAAgDD,EAEpD,OAAQH,EAAMC,GAAG,EACf,IAAK,aACL,IAAK,YACHG,EAA4BD,EAAOE,kBAAkB,CACrD,KACF,KAAK,YACL,IAAK,UACHD,EAA4BD,EAAOG,sBAAsB,CAIzDF,IACF,IAAI,CAACG,aAAa,EAAI,IAAI,CAACZ,WAAW,CAACS,GACvCA,EAA0BI,KAAK,GAC/BR,EAAMS,cAAc,GAExB,CAEF,CAEAC,eAAed,CAA0B,CAAiB,CACxD,OAAOA,EAAce,YAAY,CAAC,aACpC,CAEA,IAAIC,YAAa,CACf,OAAO,IAAI,CAACD,YAAY,CAAC,mBAC3B,CAEA,IAAIJ,eAA+B,CACjC,OAAO,IAAI,CAACI,YAAY,CAAC,sBAC3B,CAEA,IAAIJ,cAAcM,CAAuB,CAAE,CACrCA,GACF,IAAI,CAACC,YAAY,CAAC,sBAAuBD,EAE7C,CAEAE,qBAAsB,CACpB,IAAI,CAACC,eAAe,CAAC,sBACvB,CAEAC,UAAW,CACT,IAAMC,EAAkB,IAAI,CAACpB,cAAc,CAACqB,IAAI,CAACvB,GAAiBA,EAAcwB,SAAS,CAACC,QAAQ,CAAC,aAC/FH,IACFA,EAAgBE,SAAS,CAACE,MAAM,CAAC,WAAY,eAC7CJ,EAAgBJ,YAAY,CAAC,eAAgB,SAC7CI,EAAgBnB,QAAQ,CAAG,IAE7B,IAAI,CAACgB,mBAAmB,EAC1B,CAEAQ,OAAOC,CAA8B,CAAE,CACrC,IAAMC,EAAa,IAAI,CAACf,cAAc,CAACc,GACjCE,EAAiB,IAAI,CAACnB,aAAa,CAEzC,GAAIkB,IAAeC,GAInB,GAAIA,EACF,IAAI,CAACT,QAAQ,OACR,CAKL,IAAMU,EAAqB,IAAI,CAAC7B,cAAc,CAACqB,IAAI,CAACvB,GAAiBA,EAAcG,QAAQ,EAAI,GAC3F4B,GACFA,CAAAA,EAAmB5B,QAAQ,CAAG,EAAC,CAEnC,CAEAyB,EAAkBJ,SAAS,CAACQ,GAAG,CAAC,WAAY,eAC5CJ,EAAkBV,YAAY,CAAC,eAAgB,QAC/CU,EAAkBzB,QAAQ,CAAG,EAC7B,IAAI,CAACQ,aAAa,CAAGkB,EACvB,CAEAI,gBAAgB7B,CAAY,CAAE,CAC5B,IAAI,CAACuB,MAAM,CAACvB,EAAMG,MAAM,EAExB,IAAI,CAAC2B,aAAa,CAAC,IAAIC,YAAY,yBACrC,CAEAC,eAAeC,CAAa,CAAE,CAC5B,GAAI,IAAI,CAAC1B,aAAa,GAAK0B,EACzB,OAGF,IAAMrC,EAAgB,IAAI,CAACE,cAAc,CAACqB,IAAI,CAACtB,GAAW,IAAI,CAACa,cAAc,CAACb,KAAaoC,GAC3F,GAAI,CAACrC,EAAe,CAElB,IAAI,CAACqB,QAAQ,GACb,IAAI,CAACnB,cAAc,CAAC,EAAE,CAAEC,QAAQ,CAAG,EACnC,MACF,CAEA,IAAI,CAACwB,MAAM,CAAC3B,EACd,CACF,E,GA7HGsC,EAAAA,EAAOA,C,CADW5C,EAAAA,SAAAA,CAAAA,iBAAAA,KAAAA,GAAAA,EAAAA,EAAAA,CADpB6C,EAAAA,EAAUA,C,CACU7C,E","sources":["app/components/advisories/metric-selection-element.ts"],"sourcesContent":["import {controller, targets} from '@github/catalyst'\n\n@controller\nexport default class MetricSelectionElement extends HTMLElement {\n  @targets choiceElements: HTMLElement[]\n\n  connectedCallback() {\n    this.addEventListener('keydown', this.handleKeydown)\n  }\n\n  // Used to remember at what choice the user left off during navigation\n  setTabIndex(choiceElement: HTMLElement) {\n    for (const element of this.choiceElements) {\n      if (element === choiceElement) {\n        element.tabIndex = 0\n      } else {\n        element.tabIndex = -1\n      }\n    }\n  }\n\n  handleKeydown(event: KeyboardEvent) {\n    // TODO: Refactor to use data-hotkey\n    /* eslint eslint-comments/no-use: off */\n    /* eslint-disable @github-ui/ui-commands/no-manual-shortcut-logic */\n    if (event.key.startsWith('Arrow')) {\n      const target = event.target as HTMLElement\n      let nextPossibleChoiceElement: HTMLElement | null = target\n\n      switch (event.key) {\n        case 'ArrowRight':\n        case 'ArrowDown':\n          nextPossibleChoiceElement = target.nextElementSibling as HTMLElement | null\n          break\n        case 'ArrowLeft':\n        case 'ArrowUp':\n          nextPossibleChoiceElement = target.previousElementSibling as HTMLElement | null\n          break\n      }\n\n      if (nextPossibleChoiceElement) {\n        this.selectedValue || this.setTabIndex(nextPossibleChoiceElement)\n        nextPossibleChoiceElement.focus()\n        event.preventDefault()\n      }\n    }\n    /* eslint-enable @github-ui/ui-commands/no-manual-shortcut-logic */\n  }\n\n  getChoiceValue(choiceElement: HTMLElement): string | null {\n    return choiceElement.getAttribute('data-value')\n  }\n\n  get metricCode() {\n    return this.getAttribute('data-metric-code')\n  }\n\n  get selectedValue(): string | null {\n    return this.getAttribute('data-selected-value')\n  }\n\n  set selectedValue(newValue: string | null) {\n    if (newValue) {\n      this.setAttribute('data-selected-value', newValue)\n    }\n  }\n\n  deleteSelectedValue() {\n    this.removeAttribute('data-selected-value')\n  }\n\n  deselect() {\n    const selectedElement = this.choiceElements.find(choiceElement => choiceElement.classList.contains('selected'))!\n    if (selectedElement) {\n      selectedElement.classList.remove('selected', 'btn-primary')\n      selectedElement.setAttribute('aria-checked', 'false')\n      selectedElement.tabIndex = -1\n    }\n    this.deleteSelectedValue()\n  }\n\n  select(nextChoiceElement: HTMLElement) {\n    const nextChoice = this.getChoiceValue(nextChoiceElement)\n    const previousChoice = this.selectedValue\n\n    if (nextChoice === previousChoice) {\n      return\n    }\n\n    if (previousChoice) {\n      this.deselect()\n    } else {\n      // By default when there is initially no selection, the first choice is\n      // the entry tab point. Or the user could have changed that by focusing\n      // another choice and leaving without actually making a selection.\n      // Remove that and later let it choose the new entry point.\n      const lastFocusedElement = this.choiceElements.find(choiceElement => choiceElement.tabIndex >= 0)\n      if (lastFocusedElement) {\n        lastFocusedElement.tabIndex = -1\n      }\n    }\n\n    nextChoiceElement.classList.add('selected', 'btn-primary')\n    nextChoiceElement.setAttribute('aria-checked', 'true')\n    nextChoiceElement.tabIndex = 0\n    this.selectedValue = nextChoice\n  }\n\n  selectFromClick(event: Event) {\n    this.select(event.target as HTMLElement)\n\n    this.dispatchEvent(new CustomEvent('metricSelectionChange'))\n  }\n\n  selectFromCode(value: string) {\n    if (this.selectedValue === value) {\n      return\n    }\n\n    const choiceElement = this.choiceElements.find(element => this.getChoiceValue(element) === value)\n    if (!choiceElement) {\n      // an invalid choice that does not exist clears the selection\n      this.deselect()\n      this.choiceElements[0]!.tabIndex = 0\n      return\n    }\n\n    this.select(choiceElement)\n  }\n}\n"],"names":["MetricSelectionElement","HTMLElement","connectedCallback","addEventListener","handleKeydown","setTabIndex","choiceElement","element","choiceElements","tabIndex","event","key","startsWith","target","nextPossibleChoiceElement","nextElementSibling","previousElementSibling","selectedValue","focus","preventDefault","getChoiceValue","getAttribute","metricCode","newValue","setAttribute","deleteSelectedValue","removeAttribute","deselect","selectedElement","find","classList","contains","remove","select","nextChoiceElement","nextChoice","previousChoice","lastFocusedElement","add","selectFromClick","dispatchEvent","CustomEvent","selectFromCode","value","targets","controller"],"sourceRoot":""}
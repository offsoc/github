# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::RepositoryIssueTypeUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::RepositoryIssueTypeUpdate`.

class Hydro::Schemas::Github::V1::RepositoryIssueTypeUpdate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      enabled: T.nilable(T::Boolean),
      issue_type: T.nilable(Hydro::Schemas::Github::V1::Entities::IssueType),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)
    ).void
  end
  def initialize(actor: nil, enabled: nil, issue_type: nil, repository: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_enabled; end

  sig { void }
  def clear_issue_type; end

  sig { void }
  def clear_repository; end

  sig { returns(T::Boolean) }
  def enabled; end

  sig { params(value: T::Boolean).void }
  def enabled=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::IssueType)) }
  def issue_type; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::IssueType)).void }
  def issue_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end
end

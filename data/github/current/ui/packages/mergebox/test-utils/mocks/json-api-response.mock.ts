import type {
  JSONAPIPullRequestPayload,
  MergeBoxPageData,
  PullRequestMergeRequirementsPayload,
} from '../../page-data/payloads/merge-box'
import {
  baseRefChannel,
  commitHeadShaChannel,
  deployedChannel,
  gitMergeStateChannel,
  headRefChannel,
  mergeQueueChannel,
  reviewStateChannel,
  stateChannel,
  workflowsChannel,
} from './alive-channels-mock'

type MergeBoxDataOptions = {
  pullRequestKind?: keyof typeof mockPullRequest
  mergeRequirementsKind?: keyof typeof mockMergeRequirements
}

/**
 * Returns a mock response from the JSON API for the merge box page data.
 *
 * Pass the kind of preset state for a pull request or the merge requirements you need to test.
 * Typically, we want to use preset states rather than configuring the data ourselves, which is prone to error. However, if this function does not meet your needs, you are welcome to either add additional states or use the escape hatches (via exported objects below).
 */
export function mergeBoxMockData({
  pullRequestKind = 'default',
  mergeRequirementsKind = 'default',
}: MergeBoxDataOptions = {}): MergeBoxPageData {
  return {
    // Assert these values are present because we set a default
    pullRequest: mockPullRequest[pullRequestKind]!,
    mergeRequirements: mockMergeRequirements[mergeRequirementsKind]!,
  }
}

/**
 * A default pull request - an escape hatch if mergeBoxMockData is too opinionated.
 */
export const defaultPullRequest: JSONAPIPullRequestPayload = {
  autoMergeRequest: null,
  baseRefName: 'master',
  headRefOid: '123456789',
  headRefName: 'prx/test-branch',
  headRepository: {
    ownerLogin: 'monalisa',
    name: 'smile',
  },
  id: 'PR_123',
  isDraft: false,
  isInMergeQueue: false,
  latestOpinionatedReviews: [
    {
      authorCanPushToRepository: true,
      author: {
        login: 'collaborator',
        avatarUrl: 'https://avatars.githubusercontent.com/u/12345?v=4',
        name: 'collaborator',
        url: 'https://github.com/collaborator',
      },
      onBehalfOf: ['my-cool-team'],
      state: 'APPROVED',
    },
    {
      authorCanPushToRepository: true,
      author: {
        login: 'octocat',
        avatarUrl: 'https://avatars.githubusercontent.com/u/678910?v=4',
        name: 'octocat',
        url: 'https://github.com/octocat',
      },
      onBehalfOf: ['my-cool-team-reviewers'],
      state: 'CHANGES_REQUESTED',
    },
  ],
  mergeBoxAliveChannels: {
    stateChannel,
    deployedChannel,
    reviewStateChannel,
    workflowsChannel,
    mergeQueueChannel,
    headRefChannel,
    baseRefChannel,
    commitHeadShaChannel,
    gitMergeStateChannel,
  },
  mergeQueue: {
    url: 'https://github.com/monalisa/smile/queue/master',
  },
  mergeQueueEntry: null,
  mergeStateStatus: 'BLOCKED',
  numberOfCommits: 15,
  resourcePath: 'https://github.com/github/github/pull/337434',
  state: 'OPEN',
  viewerCanAddAndRemoveFromMergeQueue: true,
  viewerCanDeleteHeadRef: false,
  viewerCanDisableAutoMerge: false,
  viewerCanEnableAutoMerge: true,
  viewerCanRestoreHeadRef: false,
  viewerCanUpdateBranch: true,
  viewerCanUpdate: true,
  viewerDidAuthor: true,
  viewerMergeActions: [
    {
      isAllowable: true,
      mergeMethods: [
        {
          isAllowable: false,
          isAllowableWithBypass: false,
          name: 'MERGE',
          // This is returned, but not currently needed
          // isDefault: true,
        },
        {
          isAllowable: false,
          isAllowableWithBypass: false,
          name: 'SQUASH',
          // This is returned, but not currently needed
          // isDefault: false,
        },
        {
          isAllowable: false,
          isAllowableWithBypass: false,
          name: 'REBASE',
          // This is returned, but not currently needed
          // isDefault: false,
        },
      ],
      name: 'MERGE_QUEUE',
      // This is returned, but not currently needed
      // isAllowableWithBypass: false,
    },
    {
      isAllowable: false,
      mergeMethods: [
        {
          isAllowable: false,
          isAllowableWithBypass: false,
          name: 'MERGE',
          // This is returned, but not currently needed
          // isDefault: true,
        },
        {
          isAllowable: false,
          isAllowableWithBypass: false,
          name: 'SQUASH',
          // This is returned, but not currently needed
          // isDefault: false,
        },
        {
          isAllowable: false,
          isAllowableWithBypass: false,
          name: 'REBASE',
          // This is returned, but not currently needed
          // isDefault: false,
        },
      ],
      name: 'DIRECT_MERGE',
      // This is returned, but not currently needed
      // isAllowableWithBypass: false,
    },
  ],
}

/**
 * A default set of merge requirements - an excape hatch if mergeBoxMockData is too opinionated.
 */
export const defaultMergeRequirements: PullRequestMergeRequirementsPayload = {
  state: 'UNMERGEABLE',
  conditions: [
    {
      type: 'PULL_REQUEST_STATE',
      displayName: 'Pull request state',
      description: 'Pull request must be open and not in draft mode in order to be merged',
      message: null,
      result: 'PASSED',
      ruleRollups: null,
    },
    {
      type: 'PULL_REQUEST_REPO_STATE',
      displayName: 'Pull request repository state',
      description: 'The repository must be not archived or locked',
      message: null,
      result: 'PASSED',
      ruleRollups: null,
    },
    {
      type: 'PULL_REQUEST_USER_STATE',
      displayName: 'Pull request user state',
      description: 'The user must have push access to the repo and a verified email',
      message: null,
      result: 'PASSED',
      ruleRollups: null,
    },
    {
      type: 'PULL_REQUEST_RULES',
      displayName: 'Repo rules',
      description: 'Pull request repository rules',
      message:
        'Changes must be made through the merge queue Missing successful active production deployment. Waiting on approval from at least one compliance team: my-cool-reviewers.',
      result: 'FAILED',
      ruleRollups: [
        {
          ruleType: 'PULL_REQUEST',
          displayName: 'Require a pull request before merging',
          message: 'Waiting on approval from at least one compliance team: my-cool-reviewers.',
          result: 'FAILED',
          bypassable: false,
          metadata: {
            requiredReviewers: 1,
            requiresCodeowners: false,
            failureReasons: ['soc2_approval_process_required'],
          },
        },
        {
          ruleType: 'WORKFLOWS',
          displayName: 'Require workflows to pass before merging',
          message: '',
          result: 'PASSED',
          bypassable: true,
          metadata: null,
        },
        {
          ruleType: 'DELETION',
          displayName: 'Restrict deletions',
          message: '',
          result: 'PASSED',
          bypassable: false,
          metadata: null,
        },
        {
          ruleType: 'NON_FAST_FORWARD',
          displayName: 'Block force pushes',
          message: '',
          result: 'PASSED',
          bypassable: false,
          metadata: null,
        },
        {
          ruleType: 'REQUIRED_STATUS_CHECKS',
          displayName: 'Require status checks to pass',
          message: '',
          result: 'PASSED',
          bypassable: false,
          metadata: {
            statusCheckResults: [
              {
                context: 'job / job-name',
                integrationId: 12345,
                result: 'success',
              },
            ],
          },
        },
      ],
    },
    {
      type: 'PULL_REQUEST_MERGE_CONFLICT_STATE',
      displayName: 'Pull request merge conflict state',
      description: 'The pull request must not have any unresolved merge conflicts',
      message: null,
      result: 'PASSED',
      ruleRollups: null,
      conflicts: [],
      isConflictResolvableInWeb: true,
    },
    {
      type: 'PULL_REQUEST_MERGE_METHOD',
      displayName: 'Pull request merge method',
      description: 'The selected merge method must be valid for the base repository.',
      message: null,
      result: 'FAILED',
      ruleRollups: null,
    },
  ],
  commitAuthor: 'monalisa@github.cokm',
  commitMessageHeadline: 'Merge pull request #12345 from github/prx/test-branch',
  commitMessageBody: 'My commit message body',
}

/**
 * Object containing the preset and common pull request states
 */
const mockPullRequest: {[key: string]: JSONAPIPullRequestPayload} = {
  default: defaultPullRequest,
  draft: {...defaultPullRequest, isDraft: true},
  withDirectMergeEnabled: {
    ...defaultPullRequest,
    mergeQueue: null,
    viewerCanAddAndRemoveFromMergeQueue: false,
    viewerCanEnableAutoMerge: false,
    viewerMergeActions: [
      {
        isAllowable: false,
        mergeMethods: [
          {
            isAllowable: false,
            isAllowableWithBypass: false,
            name: 'MERGE',
          },
          {
            isAllowable: false,
            isAllowableWithBypass: false,
            name: 'SQUASH',
          },
          {
            isAllowable: false,
            isAllowableWithBypass: false,
            name: 'REBASE',
          },
        ],
        name: 'MERGE_QUEUE',
      },
      {
        isAllowable: true,
        mergeMethods: [
          {
            isAllowable: true,
            isAllowableWithBypass: false,
            name: 'MERGE',
          },
          {
            isAllowable: true,
            isAllowableWithBypass: false,
            name: 'SQUASH',
          },
          {
            isAllowable: true,
            isAllowableWithBypass: false,
            name: 'REBASE',
          },
        ],
        name: 'DIRECT_MERGE',
      },
    ],
  },
  closedWithUserActionsAllowed: {...defaultPullRequest, state: 'CLOSED', viewerCanDeleteHeadRef: true},
  closedWithoutUserActionsAllowed: {
    ...defaultPullRequest,
    state: 'CLOSED',
    viewerCanDeleteHeadRef: false,
    viewerCanRestoreHeadRef: false,
  },
  mergedWithUserActionsAllowed: {...defaultPullRequest, state: 'MERGED', viewerCanDeleteHeadRef: true},
  isInMergeQueue: {...defaultPullRequest, isInMergeQueue: true},
}

/**
 * Object containing preset and common merge requirements states
 */
const mockMergeRequirements: {[key: string]: PullRequestMergeRequirementsPayload} = {
  default: defaultMergeRequirements,
  nonActionableFailure: {
    state: 'UNMERGEABLE',
    conditions: [
      {
        type: 'PULL_REQUEST_STATE',
        displayName: 'Pull request state',
        description: 'Pull request must be open and not in draft mode in order to be merged',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_REPO_STATE',
        displayName: 'Pull request repository state',
        description: 'The repository must be not archived or locked',
        message: null,
        result: 'FAILED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_USER_STATE',
        displayName: 'Pull request user state',
        description: 'The user must have push access to the repo and a verified email',
        message: null,
        result: 'FAILED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_RULES',
        displayName: 'Repo rules',
        description: 'Pull request repository rules',
        message: null,
        result: 'PASSED',
        ruleRollups: [
          {
            ruleType: 'PULL_REQUEST',
            displayName: 'Require a pull request before merging',
            message: null,
            result: 'PASSED',
            bypassable: false,
            metadata: {
              requiredReviewers: 0,
              requiresCodeowners: false,
              failureReasons: [],
            },
          },
          {
            ruleType: 'WORKFLOWS',
            displayName: 'Require workflows to pass before merging',
            message: '',
            result: 'PASSED',
            bypassable: true,
            metadata: null,
          },
          {
            ruleType: 'DELETION',
            displayName: 'Restrict deletions',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'NON_FAST_FORWARD',
            displayName: 'Block force pushes',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'REQUIRED_STATUS_CHECKS',
            displayName: 'Require status checks to pass',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: {
              statusCheckResults: [
                {
                  context: 'job / job-name',
                  integrationId: 12345,
                  result: 'success',
                },
              ],
            },
          },
        ],
      },
      {
        type: 'PULL_REQUEST_MERGE_CONFLICT_STATE',
        displayName: 'Pull request merge conflict state',
        description: 'The pull request must not have any unresolved merge conflicts',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
        conflicts: [],
        isConflictResolvableInWeb: true,
      },
      {
        type: 'PULL_REQUEST_MERGE_METHOD',
        displayName: 'Pull request merge method',
        description: 'The selected merge method must be valid for the base repository.',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
    ],
    commitAuthor: 'monalisa@github.cokm',
    commitMessageHeadline: 'Merge pull request #12345 from github/prx/test-branch',
    commitMessageBody: 'My commit message body',
  },
  draftReadyForReview: {
    state: 'UNMERGEABLE',
    conditions: [
      {
        type: 'PULL_REQUEST_STATE',
        displayName: 'Pull request state',
        description: 'Pull request must be open and not in draft mode in order to be merged',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_REPO_STATE',
        displayName: 'Pull request repository state',
        description: 'The repository must be not archived or locked',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_USER_STATE',
        displayName: 'Pull request user state',
        description: 'The user must have push access to the repo and a verified email',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_RULES',
        displayName: 'Repo rules',
        description: 'Pull request repository rules',
        message: null,
        result: 'PASSED',
        ruleRollups: [
          {
            ruleType: 'PULL_REQUEST',
            displayName: 'Require a pull request before merging',
            message: null,
            result: 'FAILED',
            bypassable: false,
            metadata: {
              requiredReviewers: 0,
              requiresCodeowners: false,
              failureReasons: [],
            },
          },
          {
            ruleType: 'WORKFLOWS',
            displayName: 'Require workflows to pass before merging',
            message: '',
            result: 'PASSED',
            bypassable: true,
            metadata: null,
          },
          {
            ruleType: 'DELETION',
            displayName: 'Restrict deletions',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'NON_FAST_FORWARD',
            displayName: 'Block force pushes',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'REQUIRED_STATUS_CHECKS',
            displayName: 'Require status checks to pass',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: {
              statusCheckResults: [
                {
                  context: 'job / job-name',
                  integrationId: 12345,
                  result: 'success',
                },
              ],
            },
          },
        ],
      },
      {
        type: 'PULL_REQUEST_MERGE_CONFLICT_STATE',
        displayName: 'Pull request merge conflict state',
        description: 'The pull request must not have any unresolved merge conflicts',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
        conflicts: [],
        isConflictResolvableInWeb: true,
      },
      {
        type: 'PULL_REQUEST_MERGE_METHOD',
        displayName: 'Pull request merge method',
        description: 'The selected merge method must be valid for the base repository.',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
    ],
    commitAuthor: 'monalisa@github.cokm',
    commitMessageHeadline: 'Merge pull request #12345 from github/prx/test-branch',
    commitMessageBody: 'My commit message body',
  },
  draftNotReadyForReview: {
    state: 'UNMERGEABLE',
    conditions: [
      {
        type: 'PULL_REQUEST_STATE',
        displayName: 'Pull request state',
        description: 'Pull request must be open and not in draft mode in order to be merged',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_REPO_STATE',
        displayName: 'Pull request repository state',
        description: 'The repository must be not archived or locked',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_USER_STATE',
        displayName: 'Pull request user state',
        description: 'The user must have push access to the repo and a verified email',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_RULES',
        displayName: 'Repo rules',
        description: 'Pull request repository rules',
        message: null,
        result: 'FAILED',
        ruleRollups: [
          {
            ruleType: 'PULL_REQUEST',
            displayName: 'Require a pull request before merging',
            message: null,
            result: 'FAILED',
            bypassable: false,
            metadata: {
              requiredReviewers: 0,
              requiresCodeowners: false,
              failureReasons: [],
            },
          },
          {
            ruleType: 'WORKFLOWS',
            displayName: 'Require workflows to pass before merging',
            message: '',
            result: 'PASSED',
            bypassable: true,
            metadata: null,
          },
          {
            ruleType: 'DELETION',
            displayName: 'Restrict deletions',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'NON_FAST_FORWARD',
            displayName: 'Block force pushes',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'REQUIRED_STATUS_CHECKS',
            displayName: 'Require status checks to pass',
            message: '',
            result: 'FAILED',
            bypassable: false,
            metadata: {
              statusCheckResults: [
                {
                  context: 'job / job-name',
                  integrationId: 12345,
                  result: 'success',
                },
                {
                  context: 'job 2 / job-name-2',
                  integrationId: 13368,
                  result: 'expected',
                },
                {
                  context: 'job 3 / job-name-3',
                  integrationId: 143211,
                  result: 'in_progress',
                },
              ],
            },
          },
        ],
      },
      {
        type: 'PULL_REQUEST_MERGE_CONFLICT_STATE',
        displayName: 'Pull request merge conflict state',
        description: 'The pull request must not have any unresolved merge conflicts',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
        conflicts: [],
        isConflictResolvableInWeb: true,
      },
      {
        type: 'PULL_REQUEST_MERGE_METHOD',
        displayName: 'Pull request merge method',
        description: 'The selected merge method must be valid for the base repository.',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
    ],
    commitAuthor: 'monalisa@github.cokm',
    commitMessageHeadline: 'Merge pull request #12345 from github/prx/test-branch',
    commitMessageBody: 'My commit message body',
  },
  mergeable: {
    state: 'MERGEABLE',
    conditions: [
      {
        type: 'PULL_REQUEST_STATE',
        displayName: 'Pull request state',
        description: 'Pull request must be open and not in draft mode in order to be merged',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_REPO_STATE',
        displayName: 'Pull request repository state',
        description: 'The repository must be not archived or locked',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_USER_STATE',
        displayName: 'Pull request user state',
        description: 'The user must have push access to the repo and a verified email',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_RULES',
        displayName: 'Repo rules',
        description: 'Pull request repository rules',
        message: null,
        result: 'PASSED',
        ruleRollups: [
          {
            ruleType: 'PULL_REQUEST',
            displayName: 'Require a pull request before merging',
            message: null,
            result: 'PASSED',
            bypassable: false,
            metadata: {
              requiredReviewers: 0,
              requiresCodeowners: false,
              failureReasons: [],
            },
          },
          {
            ruleType: 'WORKFLOWS',
            displayName: 'Require workflows to pass before merging',
            message: '',
            result: 'PASSED',
            bypassable: true,
            metadata: null,
          },
          {
            ruleType: 'DELETION',
            displayName: 'Restrict deletions',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'NON_FAST_FORWARD',
            displayName: 'Block force pushes',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'REQUIRED_STATUS_CHECKS',
            displayName: 'Require status checks to pass',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: {
              statusCheckResults: [
                {
                  context: 'job / job-name',
                  integrationId: 12345,
                  result: 'success',
                },
              ],
            },
          },
        ],
      },
      {
        type: 'PULL_REQUEST_MERGE_CONFLICT_STATE',
        displayName: 'Pull request merge conflict state',
        description: 'The pull request must not have any unresolved merge conflicts',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
        conflicts: [],
        isConflictResolvableInWeb: true,
      },
      {
        type: 'PULL_REQUEST_MERGE_METHOD',
        displayName: 'Pull request merge method',
        description: 'The selected merge method must be valid for the base repository.',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
    ],
    commitAuthor: 'monalisa@github.cokm',
    commitMessageHeadline: 'Merge pull request #12345 from github/prx/test-branch',
    commitMessageBody: 'My commit message body',
  },
  checksPending: {
    state: 'UNMERGEABLE',
    conditions: [
      {
        type: 'PULL_REQUEST_STATE',
        displayName: 'Pull request state',
        description: 'Pull request must be open and not in draft mode in order to be merged',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_REPO_STATE',
        displayName: 'Pull request repository state',
        description: 'The repository must be not archived or locked',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_USER_STATE',
        displayName: 'Pull request user state',
        description: 'The user must have push access to the repo and a verified email',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_RULES',
        displayName: 'Repo rules',
        description: 'Pull request repository rules',
        message: null,
        result: 'PASSED',
        ruleRollups: [
          {
            ruleType: 'PULL_REQUEST',
            displayName: 'Require a pull request before merging',
            message: null,
            result: 'PASSED',
            bypassable: false,
            metadata: {
              requiredReviewers: 0,
              requiresCodeowners: false,
              failureReasons: [],
            },
          },
          {
            ruleType: 'WORKFLOWS',
            displayName: 'Require workflows to pass before merging',
            message: '',
            result: 'PASSED',
            bypassable: true,
            metadata: null,
          },
          {
            ruleType: 'DELETION',
            displayName: 'Restrict deletions',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'NON_FAST_FORWARD',
            displayName: 'Block force pushes',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'REQUIRED_STATUS_CHECKS',
            displayName: 'Require status checks to pass',
            message: '2 of 3 required status checks have not succeeded: 2 expected',
            result: 'FAILED',
            bypassable: false,
            metadata: {
              statusCheckResults: [
                {
                  context: 'job / job-name',
                  integrationId: 12345,
                  result: 'success',
                },
                {
                  context: 'job 2 / job-name-2',
                  integrationId: 11365,
                  result: 'expected',
                },
                {
                  context: 'job 3 / job-name-3',
                  integrationId: 18311,
                  result: 'in_progress',
                },
              ],
            },
          },
        ],
      },
      {
        type: 'PULL_REQUEST_MERGE_CONFLICT_STATE',
        displayName: 'Pull request merge conflict state',
        description: 'The pull request must not have any unresolved merge conflicts',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
        conflicts: [],
        isConflictResolvableInWeb: true,
      },
      {
        type: 'PULL_REQUEST_MERGE_METHOD',
        displayName: 'Pull request merge method',
        description: 'The selected merge method must be valid for the base repository.',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
    ],
    commitAuthor: 'monalisa@github.cokm',
    commitMessageHeadline: 'Merge pull request #12345 from github/prx/test-branch',
    commitMessageBody: 'My commit message body',
  },
  checksFailing: {
    state: 'UNMERGEABLE',
    conditions: [
      {
        type: 'PULL_REQUEST_STATE',
        displayName: 'Pull request state',
        description: 'Pull request must be open and not in draft mode in order to be merged',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_REPO_STATE',
        displayName: 'Pull request repository state',
        description: 'The repository must be not archived or locked',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_USER_STATE',
        displayName: 'Pull request user state',
        description: 'The user must have push access to the repo and a verified email',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_RULES',
        displayName: 'Repo rules',
        description: 'Pull request repository rules',
        message: null,
        result: 'PASSED',
        ruleRollups: [
          {
            ruleType: 'PULL_REQUEST',
            displayName: 'Require a pull request before merging',
            message: null,
            result: 'PASSED',
            bypassable: false,
            metadata: {
              requiredReviewers: 0,
              requiresCodeowners: false,
              failureReasons: [],
            },
          },
          {
            ruleType: 'WORKFLOWS',
            displayName: 'Require workflows to pass before merging',
            message: '',
            result: 'PASSED',
            bypassable: true,
            metadata: null,
          },
          {
            ruleType: 'DELETION',
            displayName: 'Restrict deletions',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'NON_FAST_FORWARD',
            displayName: 'Block force pushes',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'REQUIRED_STATUS_CHECKS',
            displayName: 'Require status checks to pass',
            message: '2 of 3 required status checks are failing.',
            result: 'FAILED',
            bypassable: false,
            metadata: {
              statusCheckResults: [
                {
                  context: 'job / job-name',
                  integrationId: 12345,
                  result: 'success',
                },
                {
                  context: 'job 2 / job-name-2',
                  integrationId: 11365,
                  result: 'failed',
                },
                {
                  context: 'job 3 / job-name-3',
                  integrationId: 18311,
                  result: 'failed',
                },
              ],
            },
          },
        ],
      },
      {
        type: 'PULL_REQUEST_MERGE_CONFLICT_STATE',
        displayName: 'Pull request merge conflict state',
        description: 'The pull request must not have any unresolved merge conflicts',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
        conflicts: [],
        isConflictResolvableInWeb: true,
      },
      {
        type: 'PULL_REQUEST_MERGE_METHOD',
        displayName: 'Pull request merge method',
        description: 'The selected merge method must be valid for the base repository.',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
    ],
    commitAuthor: 'monalisa@github.cokm',
    commitMessageHeadline: 'Merge pull request #12345 from github/prx/test-branch',
    commitMessageBody: 'My commit message body',
  },
  changesRequested: {
    state: 'UNMERGEABLE',
    conditions: [
      {
        type: 'PULL_REQUEST_STATE',
        displayName: 'Pull request state',
        description: 'Pull request must be open and not in draft mode in order to be merged',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_REPO_STATE',
        displayName: 'Pull request repository state',
        description: 'The repository must be not archived or locked',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_USER_STATE',
        displayName: 'Pull request user state',
        description: 'The user must have push access to the repo and a verified email',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_RULES',
        displayName: 'Repo rules',
        description: 'Pull request repository rules',
        message: null,
        result: 'FAILED',
        ruleRollups: [
          {
            ruleType: 'PULL_REQUEST',
            displayName: 'Require a pull request before merging',
            message: null,
            result: 'FAILED',
            bypassable: false,
            metadata: {
              requiredReviewers: 0,
              requiresCodeowners: false,
              failureReasons: ['changes_requested'],
            },
          },
          {
            ruleType: 'WORKFLOWS',
            displayName: 'Require workflows to pass before merging',
            message: '',
            result: 'PASSED',
            bypassable: true,
            metadata: null,
          },
          {
            ruleType: 'DELETION',
            displayName: 'Restrict deletions',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'NON_FAST_FORWARD',
            displayName: 'Block force pushes',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'REQUIRED_STATUS_CHECKS',
            displayName: 'Require status checks to pass',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: {
              statusCheckResults: [
                {
                  context: 'job / job-name',
                  integrationId: 12345,
                  result: 'success',
                },
              ],
            },
          },
        ],
      },
      {
        type: 'PULL_REQUEST_MERGE_CONFLICT_STATE',
        displayName: 'Pull request merge conflict state',
        description: 'The pull request must not have any unresolved merge conflicts',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
        conflicts: [],
        isConflictResolvableInWeb: true,
      },
      {
        type: 'PULL_REQUEST_MERGE_METHOD',
        displayName: 'Pull request merge method',
        description: 'The selected merge method must be valid for the base repository.',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
    ],
    commitAuthor: 'monalisa@github.cokm',
    commitMessageHeadline: 'Merge pull request #12345 from github/prx/test-branch',
    commitMessageBody: 'My commit message body',
  },
  unknownNoConflicts: {
    state: 'UNKNOWN',
    conditions: [
      {
        type: 'PULL_REQUEST_STATE',
        displayName: 'Pull request state',
        description: 'Pull request must be open and not in draft mode in order to be merged',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_REPO_STATE',
        displayName: 'Pull request repository state',
        description: 'The repository must be not archived or locked',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_USER_STATE',
        displayName: 'Pull request user state',
        description: 'The user must have push access to the repo and a verified email',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_RULES',
        displayName: 'Repo rules',
        description: 'Pull request repository rules',
        message: null,
        result: 'FAILED',
        ruleRollups: [
          {
            ruleType: 'PULL_REQUEST',
            displayName: 'Require a pull request before merging',
            message: null,
            result: 'PASSED',
            bypassable: false,
            metadata: {
              requiredReviewers: 0,
              requiresCodeowners: false,
              failureReasons: [],
            },
          },
          {
            ruleType: 'WORKFLOWS',
            displayName: 'Require workflows to pass before merging',
            message: '',
            result: 'PASSED',
            bypassable: true,
            metadata: null,
          },
          {
            ruleType: 'DELETION',
            displayName: 'Restrict deletions',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'NON_FAST_FORWARD',
            displayName: 'Block force pushes',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'REQUIRED_STATUS_CHECKS',
            displayName: 'Require status checks to pass',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: {
              statusCheckResults: [
                {
                  context: 'job / job-name',
                  integrationId: 12345,
                  result: 'success',
                },
              ],
            },
          },
        ],
      },
      {
        type: 'PULL_REQUEST_MERGE_CONFLICT_STATE',
        displayName: 'Pull request merge conflict state',
        description: 'The pull request must not have any unresolved merge conflicts',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
        conflicts: [],
        isConflictResolvableInWeb: true,
      },
      {
        type: 'PULL_REQUEST_MERGE_METHOD',
        displayName: 'Pull request merge method',
        description: 'The selected merge method must be valid for the base repository.',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
    ],
    commitAuthor: 'monalisa@github.cokm',
    commitMessageHeadline: 'Merge pull request #12345 from github/prx/test-branch',
    commitMessageBody: 'My commit message body',
  },
  mergeConflicts: {
    state: 'UNMERGEABLE',
    conditions: [
      {
        type: 'PULL_REQUEST_STATE',
        displayName: 'Pull request state',
        description: 'Pull request must be open and not in draft mode in order to be merged',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_REPO_STATE',
        displayName: 'Pull request repository state',
        description: 'The repository must be not archived or locked',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_USER_STATE',
        displayName: 'Pull request user state',
        description: 'The user must have push access to the repo and a verified email',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
      {
        type: 'PULL_REQUEST_RULES',
        displayName: 'Repo rules',
        description: 'Pull request repository rules',
        message: null,
        result: 'PASSED',
        ruleRollups: [
          {
            ruleType: 'PULL_REQUEST',
            displayName: 'Require a pull request before merging',
            message: null,
            result: 'PASSED',
            bypassable: false,
            metadata: {
              requiredReviewers: 0,
              requiresCodeowners: false,
              failureReasons: [],
            },
          },
          {
            ruleType: 'WORKFLOWS',
            displayName: 'Require workflows to pass before merging',
            message: '',
            result: 'PASSED',
            bypassable: true,
            metadata: null,
          },
          {
            ruleType: 'DELETION',
            displayName: 'Restrict deletions',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'NON_FAST_FORWARD',
            displayName: 'Block force pushes',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: null,
          },
          {
            ruleType: 'REQUIRED_STATUS_CHECKS',
            displayName: 'Require status checks to pass',
            message: '',
            result: 'PASSED',
            bypassable: false,
            metadata: {
              statusCheckResults: [
                {
                  context: 'job / job-name',
                  integrationId: 12345,
                  result: 'success',
                },
              ],
            },
          },
        ],
      },
      {
        type: 'PULL_REQUEST_MERGE_CONFLICT_STATE',
        displayName: 'Pull request merge conflict state',
        description: 'The pull request must not have any unresolved merge conflicts',
        message: null,
        result: 'FAILED',
        ruleRollups: null,
        conflicts: ['readme.md'],
        isConflictResolvableInWeb: true,
      },
      {
        type: 'PULL_REQUEST_MERGE_METHOD',
        displayName: 'Pull request merge method',
        description: 'The selected merge method must be valid for the base repository.',
        message: null,
        result: 'PASSED',
        ruleRollups: null,
      },
    ],
    commitAuthor: 'monalisa@github.cokm',
    commitMessageHeadline: 'Merge pull request #12345 from github/prx/test-branch',
    commitMessageBody: 'My commit message body',
  },
}

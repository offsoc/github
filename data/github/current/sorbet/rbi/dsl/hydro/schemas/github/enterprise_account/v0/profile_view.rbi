# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::EnterpriseAccount::V0::ProfileView`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::EnterpriseAccount::V0::ProfileView`.

class Hydro::Schemas::Github::EnterpriseAccount::V0::ProfileView
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      actor_is_billing_manager: T.nilable(T::Boolean),
      actor_is_organization_member: T.nilable(T::Boolean),
      actor_is_owner: T.nilable(T::Boolean),
      enterprise: T.nilable(Hydro::Schemas::Github::V1::Entities::Business),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, actor_is_billing_manager: nil, actor_is_organization_member: nil, actor_is_owner: nil, enterprise: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T::Boolean) }
  def actor_is_billing_manager; end

  sig { params(value: T::Boolean).void }
  def actor_is_billing_manager=(value); end

  sig { returns(T::Boolean) }
  def actor_is_organization_member; end

  sig { params(value: T::Boolean).void }
  def actor_is_organization_member=(value); end

  sig { returns(T::Boolean) }
  def actor_is_owner; end

  sig { params(value: T::Boolean).void }
  def actor_is_owner=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_actor_is_billing_manager; end

  sig { void }
  def clear_actor_is_organization_member; end

  sig { void }
  def clear_actor_is_owner; end

  sig { void }
  def clear_enterprise; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Business)) }
  def enterprise; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Business)).void }
  def enterprise=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

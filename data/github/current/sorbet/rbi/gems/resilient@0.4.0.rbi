# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `resilient` gem.
# Please instead update this file by running `bin/tapioca gem resilient`.

# source://resilient//lib/resilient/version.rb#1
module Resilient; end

class Resilient::CircuitBreaker
  extend ::Forwardable

  # Private: Builds new instance of a CircuitBreaker.
  #
  #  key - The String or Resilient::Key that determines uniqueness of the
  #        circuit breaker in the registry and for instrumentation.
  #
  #  properties - The Hash or Resilient::CircuitBreaker::Properties that determine how the
  #               circuit breaker should behave. Optional. Defaults to new
  #               Resilient::CircuitBreaker::Properties instance.
  #
  # Returns CircuitBreaker instance.
  #
  # @raise [ArgumentError]
  # @return [CircuitBreaker] a new instance of CircuitBreaker
  #
  # source://resilient//lib/resilient/circuit_breaker.rb#49
  def initialize(key, properties = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://resilient//lib/resilient/circuit_breaker.rb#58
  def allow_request?; end

  # source://resilient//lib/resilient/circuit_breaker.rb#90
  def failure; end

  # Returns the value of attribute key.
  #
  # source://resilient//lib/resilient/circuit_breaker.rb#34
  def key; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def metrics(*args, **_arg1, &block); end

  # Returns the value of attribute open.
  #
  # source://resilient//lib/resilient/circuit_breaker.rb#35
  def open; end

  # Returns the value of attribute opened_or_last_checked_at_epoch.
  #
  # source://resilient//lib/resilient/circuit_breaker.rb#36
  def opened_or_last_checked_at_epoch; end

  # Returns the value of attribute properties.
  #
  # source://resilient//lib/resilient/circuit_breaker.rb#37
  def properties; end

  # source://resilient//lib/resilient/circuit_breaker.rb#97
  def reset; end

  # source://resilient//lib/resilient/circuit_breaker.rb#78
  def success; end

  private

  # @return [Boolean]
  #
  # source://resilient//lib/resilient/circuit_breaker.rb#146
  def allow_single_request?; end

  # source://resilient//lib/resilient/circuit_breaker.rb#113
  def close_circuit; end

  # source://resilient//lib/resilient/circuit_breaker.rb#159
  def instrument(name, payload = T.unsafe(nil), &block); end

  # @return [Boolean]
  #
  # source://resilient//lib/resilient/circuit_breaker.rb#127
  def open?; end

  # source://resilient//lib/resilient/circuit_breaker.rb#108
  def open_circuit; end

  # @return [Boolean]
  #
  # source://resilient//lib/resilient/circuit_breaker.rb#123
  def under_error_threshold_percentage?; end

  # @return [Boolean]
  #
  # source://resilient//lib/resilient/circuit_breaker.rb#119
  def under_request_volume_threshold?; end

  class << self
    # Public: Returns an instance of circuit breaker based on key and registry.
    # Default registry is used if none is provided. If key does not exist, it is
    # registered. If key does exist, it returns registered instance instead of
    # allocating a new instance in order to ensure that state/metrics are the
    # same per key.
    #
    #  See #initialize for docs on key and properties.
    #
    # source://resilient//lib/resilient/circuit_breaker.rb#18
    def get(key, properties = T.unsafe(nil), registry = T.unsafe(nil)); end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

class Resilient::CircuitBreaker::Metrics
  # @return [Metrics] a new instance of Metrics
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#24
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute bucket_size_in_seconds.
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#10
  def bucket_size_in_seconds; end

  # Returns the value of attribute buckets.
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#11
  def buckets; end

  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#64
  def error_percentage; end

  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#39
  def failure; end

  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#50
  def failures; end

  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#55
  def requests; end

  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#77
  def reset; end

  # Returns the value of attribute storage.
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#12
  def storage; end

  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#33
  def success; end

  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#45
  def successes; end

  # Returns the value of attribute window_size_in_seconds.
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#9
  def window_size_in_seconds; end

  private

  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#84
  def current_bucket(timestamp = T.unsafe(nil)); end

  # source://resilient//lib/resilient/circuit_breaker/metrics.rb#94
  def prune_buckets(timestamp = T.unsafe(nil)); end
end

class Resilient::CircuitBreaker::Metrics::Bucket
  # @return [Bucket] a new instance of Bucket
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket.rb#8
  def initialize(timestamp_start, timestamp_end); end

  # @return [Boolean]
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket.rb#17
  def include?(timestamp); end

  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket.rb#13
  def prune_before(window_size); end

  # Returns the value of attribute timestamp_end.
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket.rb#6
  def timestamp_end; end

  # Returns the value of attribute timestamp_start.
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket.rb#5
  def timestamp_start; end
end

class Resilient::CircuitBreaker::Metrics::BucketRange
  # @return [BucketRange] a new instance of BucketRange
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket_range.rb#14
  def initialize(start_bucket, end_bucket); end

  # Returns the value of attribute end_bucket.
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket_range.rb#12
  def end_bucket; end

  # @return [Boolean]
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket_range.rb#19
  def prune?(bucket); end

  # Returns the value of attribute start_bucket.
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket_range.rb#11
  def start_bucket; end

  class << self
    # source://resilient//lib/resilient/circuit_breaker/metrics/bucket_range.rb#5
    def generate(timestamp, window_size, bucket_size); end
  end
end

class Resilient::CircuitBreaker::Metrics::BucketSize
  # @return [BucketSize] a new instance of BucketSize
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket_size.rb#9
  def initialize(seconds); end

  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket_size.rb#17
  def aligned_end(timestamp = T.unsafe(nil)); end

  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket_size.rb#13
  def aligned_start(timestamp = T.unsafe(nil)); end

  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket_size.rb#21
  def bucket(timestamp = T.unsafe(nil)); end

  # Returns the value of attribute seconds.
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/bucket_size.rb#7
  def seconds; end
end

module Resilient::CircuitBreaker::Metrics::Storage; end

class Resilient::CircuitBreaker::Metrics::Storage::Memory
  # @return [Memory] a new instance of Memory
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/storage/memory.rb#8
  def initialize; end

  # source://resilient//lib/resilient/circuit_breaker/metrics/storage/memory.rb#12
  def increment(buckets, keys); end

  # source://resilient//lib/resilient/circuit_breaker/metrics/storage/memory.rb#30
  def prune(buckets, keys); end

  # Returns the value of attribute source.
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/storage/memory.rb#6
  def source; end

  # source://resilient//lib/resilient/circuit_breaker/metrics/storage/memory.rb#20
  def sum(buckets, keys); end
end

# source://resilient//lib/resilient/circuit_breaker/metrics.rb#18
Resilient::CircuitBreaker::Metrics::StorageFailureKeys = T.let(T.unsafe(nil), Array)

# source://resilient//lib/resilient/circuit_breaker/metrics.rb#22
Resilient::CircuitBreaker::Metrics::StorageKeys = T.let(T.unsafe(nil), Array)

# source://resilient//lib/resilient/circuit_breaker/metrics.rb#14
Resilient::CircuitBreaker::Metrics::StorageSuccessKeys = T.let(T.unsafe(nil), Array)

class Resilient::CircuitBreaker::Metrics::WindowSize
  # @return [WindowSize] a new instance of WindowSize
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/window_size.rb#9
  def initialize(seconds); end

  # Returns the value of attribute seconds.
  #
  # source://resilient//lib/resilient/circuit_breaker/metrics/window_size.rb#7
  def seconds; end
end

class Resilient::CircuitBreaker::Properties
  # @return [Properties] a new instance of Properties
  #
  # source://resilient//lib/resilient/circuit_breaker/properties.rb#53
  def initialize(options = T.unsafe(nil)); end

  # size of buckets in statistical window
  #
  # source://resilient//lib/resilient/circuit_breaker/properties.rb#48
  def bucket_size_in_seconds; end

  # % of "marks" that must be failed to trip the circuit
  #
  # source://resilient//lib/resilient/circuit_breaker/properties.rb#42
  def error_threshold_percentage; end

  # allows ignoring errors and therefore never trip "open"
  # (ie. allow all traffic through); normal instrumentation will still
  # happen, thus allowing you to "test" configuration live without impact
  #
  # source://resilient//lib/resilient/circuit_breaker/properties.rb#28
  def force_closed; end

  # allows forcing the circuit open (stopping all requests)
  #
  # source://resilient//lib/resilient/circuit_breaker/properties.rb#23
  def force_open; end

  # what to use to instrument all events that happen
  # (ie: ActiveSupport::Notifications)
  #
  # source://resilient//lib/resilient/circuit_breaker/properties.rb#32
  def instrumenter; end

  # metrics instance used to keep track of success and failure
  #
  # source://resilient//lib/resilient/circuit_breaker/properties.rb#51
  def metrics; end

  # number of requests that must be made within a statistical window before
  # open/close decisions are made using stats
  #
  # source://resilient//lib/resilient/circuit_breaker/properties.rb#39
  def request_volume_threshold; end

  # seconds after tripping circuit before allowing retry
  #
  # source://resilient//lib/resilient/circuit_breaker/properties.rb#35
  def sleep_window_seconds; end

  # number of seconds in the statistical window
  #
  # source://resilient//lib/resilient/circuit_breaker/properties.rb#45
  def window_size_in_seconds; end

  class << self
    # Internal: Takes a string name or instance of a Key and always returns a
    # Key instance.
    #
    # source://resilient//lib/resilient/circuit_breaker/properties.rb#9
    def wrap(hash_or_instance); end
  end
end

class Resilient::CircuitBreaker::Registry
  # @return [Registry] a new instance of Registry
  #
  # source://resilient//lib/resilient/circuit_breaker/registry.rb#21
  def initialize(source = T.unsafe(nil)); end

  # Internal: To be used by CircuitBreaker to either get an instance for a
  # key or set a new instance for a key.
  #
  # Raises KeyError if key not found and no block provided.
  #
  # source://resilient//lib/resilient/circuit_breaker/registry.rb#33
  def fetch(key, &block); end

  # Internal: To be used by CircuitBreaker to reset the stored circuit
  # breakers, which should only really be used for cleaning up in
  # test environment.
  #
  # source://resilient//lib/resilient/circuit_breaker/registry.rb#48
  def reset; end

  class << self
    # Internal: Default registry to use for circuit breakers.
    #
    # source://resilient//lib/resilient/circuit_breaker/registry.rb#5
    def default; end

    # Internal: Allows overriding default registry for circuit breakers.
    #
    # source://resilient//lib/resilient/circuit_breaker/registry.rb#10
    def default=(value); end

    # Public: Reset the default registry. This completely wipes all instances
    # by swapping out the default registry for a new one and letting the old
    # one get GC'd. Useful in tests to get a completely clean slate.
    #
    # source://resilient//lib/resilient/circuit_breaker/registry.rb#17
    def reset; end
  end
end

module Resilient::Instrumenters; end

class Resilient::Instrumenters::Noop
  class << self
    # @yield [payload]
    #
    # source://resilient//lib/resilient/instrumenters/noop.rb#4
    def instrument(name, payload = T.unsafe(nil)); end
  end
end

class Resilient::Key
  # @raise [TypeError]
  # @return [Key] a new instance of Key
  #
  # source://resilient//lib/resilient/key.rb#17
  def initialize(name); end

  # source://resilient//lib/resilient/key.rb#22
  def ==(other); end

  # source://resilient//lib/resilient/key.rb#22
  def eql?(other); end

  # source://resilient//lib/resilient/key.rb#27
  def hash; end

  # Returns the value of attribute name.
  #
  # source://resilient//lib/resilient/key.rb#15
  def name; end

  class << self
    # Internal: Takes a string name or instance of a Key and always returns a
    # Key instance.
    #
    # source://resilient//lib/resilient/key.rb#6
    def wrap(string_or_instance); end
  end
end

# source://resilient//lib/resilient/version.rb#2
Resilient::VERSION = T.let(T.unsafe(nil), String)

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Turboscan::Proto::InsightsAlert`.
# Please instead update this file by running `bin/tapioca dsl Turboscan::Proto::InsightsAlert`.

class Turboscan::Proto::InsightsAlert
  sig do
    params(
      closed: T.nilable(T::Boolean),
      closed_at: T.nilable(Google::Protobuf::Timestamp),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      id: T.nilable(Integer),
      number: T.nilable(Integer),
      present_on_default_ref: T.nilable(T::Boolean),
      repository_id: T.nilable(Integer),
      resolution: T.nilable(T.any(Symbol, Integer)),
      rule_name: T.nilable(String),
      rule_sarif_identifier: T.nilable(String),
      severity: T.nilable(T.any(Symbol, Integer)),
      tool_name: T.nilable(String),
      updated_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(closed: nil, closed_at: nil, created_at: nil, id: nil, number: nil, present_on_default_ref: nil, repository_id: nil, resolution: nil, rule_name: nil, rule_sarif_identifier: nil, severity: nil, tool_name: nil, updated_at: nil); end

  sig { void }
  def clear_closed; end

  sig { void }
  def clear_closed_at; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_number; end

  sig { void }
  def clear_present_on_default_ref; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_resolution; end

  sig { void }
  def clear_rule_name; end

  sig { void }
  def clear_rule_sarif_identifier; end

  sig { void }
  def clear_severity; end

  sig { void }
  def clear_tool_name; end

  sig { void }
  def clear_updated_at; end

  sig { returns(T::Boolean) }
  def closed; end

  sig { params(value: T::Boolean).void }
  def closed=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def closed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def closed_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(Integer) }
  def number; end

  sig { params(value: Integer).void }
  def number=(value); end

  sig { returns(T::Boolean) }
  def present_on_default_ref; end

  sig { params(value: T::Boolean).void }
  def present_on_default_ref=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def resolution; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def resolution=(value); end

  sig { returns(String) }
  def rule_name; end

  sig { params(value: String).void }
  def rule_name=(value); end

  sig { returns(String) }
  def rule_sarif_identifier; end

  sig { params(value: String).void }
  def rule_sarif_identifier=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def severity; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def severity=(value); end

  sig { returns(String) }
  def tool_name; end

  sig { params(value: String).void }
  def tool_name=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end
end

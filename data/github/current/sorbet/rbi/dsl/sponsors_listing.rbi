# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `SponsorsListing`.
# Please instead update this file by running `bin/tapioca dsl SponsorsListing`.

class SponsorsListing
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  extend GeneratedWorkflowClassMethods
  include GeneratedWorkflowMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def featured_states; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::SponsorsListing).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListing).void)
      ).returns(::SponsorsListing)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListing).void)
      ).returns(::SponsorsListing)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListing).void)
      ).returns(::SponsorsListing)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListing).void)
      ).returns(::SponsorsListing)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListing).void)
      ).returns(::SponsorsListing)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::SponsorsListing]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::SponsorsListing)) }
    def fifth; end

    sig { returns(::SponsorsListing) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::SponsorsListing)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::SponsorsListing) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::SponsorsListing).void)
      ).returns(T.nilable(T::Enumerator[::SponsorsListing]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::SponsorsListing]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::SponsorsListing]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListing).void)
      ).returns(::SponsorsListing)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListing).void)
      ).returns(::SponsorsListing)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListing).void)
      ).returns(::SponsorsListing)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::SponsorsListing)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::SponsorsListing) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::SponsorsListing) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::SponsorsListing) }
    def first!; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def forty_two; end

    sig { returns(::SponsorsListing) }
    def forty_two!; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def fourth; end

    sig { returns(::SponsorsListing) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::SponsorsListing) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::SponsorsListing).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::SponsorsListing).void)
      ).returns(::SponsorsListing)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::SponsorsListing).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::SponsorsListing).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::SponsorsListing)) }
    def second; end

    sig { returns(::SponsorsListing) }
    def second!; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def second_to_last; end

    sig { returns(::SponsorsListing) }
    def second_to_last!; end

    sig { returns(::SponsorsListing) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::SponsorsListing) }
    def take!; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def third; end

    sig { returns(::SponsorsListing) }
    def third!; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def third_to_last; end

    sig { returns(::SponsorsListing) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def featured_active!; end

    sig { returns(T::Boolean) }
    def featured_active?; end

    sig { void }
    def featured_allowed!; end

    sig { returns(T::Boolean) }
    def featured_allowed?; end

    sig { void }
    def featured_disabled!; end

    sig { returns(T::Boolean) }
    def featured_disabled?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::SponsorsGoal)) }
    def active_goal; end

    sig { params(value: T.nilable(::SponsorsGoal)).void }
    def active_goal=(value); end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def active_parent_stripe_connect_account; end

    sig { params(value: T.nilable(::Billing::StripeConnect::Account)).void }
    def active_parent_stripe_connect_account=(value); end

    sig { returns(T::Array[T.untyped]) }
    def active_recurring_sponsorship_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def active_recurring_sponsorship_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :active_recurring_sponsorships`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Sponsorship::PrivateCollectionProxy) }
    def active_recurring_sponsorships; end

    sig { params(value: T::Enumerable[::Sponsorship]).void }
    def active_recurring_sponsorships=(value); end

    sig { returns(T::Array[T.untyped]) }
    def active_sponsorship_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def active_sponsorship_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :active_sponsorships`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Sponsorship::PrivateCollectionProxy) }
    def active_sponsorships; end

    sig { params(value: T::Enumerable[::Sponsorship]).void }
    def active_sponsorships=(value); end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def active_stripe_connect_account; end

    sig { params(value: T.nilable(::Billing::StripeConnect::Account)).void }
    def active_stripe_connect_account=(value); end

    sig { returns(T::Array[T.untyped]) }
    def active_subscription_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def active_subscription_item_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :active_subscription_items, through: :sponsors_tiers`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::SubscriptionItem::PrivateCollectionProxy) }
    def active_subscription_items; end

    sig { params(value: T::Enumerable[::Billing::SubscriptionItem]).void }
    def active_subscription_items=(value); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :activities`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsActivity::PrivateCollectionProxy) }
    def activities; end

    sig { params(value: T::Enumerable[::SponsorsActivity]).void }
    def activities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def activity_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def activity_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsGoal) }
    def build_active_goal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::StripeConnect::Account) }
    def build_active_parent_stripe_connect_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::StripeConnect::Account) }
    def build_active_stripe_connect_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def build_contact_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_created_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsTier) }
    def build_default_tier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SurveyChoice) }
    def build_first_fiscally_hosted_project_profile_survey_choice(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SurveyAnswer) }
    def build_fiscally_hosted_project_profile_survey_answer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SurveyQuestion) }
    def build_fiscally_hosted_project_profile_survey_question(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def build_parent_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_parent_listing_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsPatreonUser) }
    def build_sponsors_patreon_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def build_stafftools_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Survey) }
    def build_survey(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AccountScreeningProfile) }
    def build_trade_screening_record(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def child_listing_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def child_listing_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :child_listings`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsListing::PrivateCollectionProxy) }
    def child_listings; end

    sig { params(value: T::Enumerable[::SponsorsListing]).void }
    def child_listings=(value); end

    sig { returns(T.nilable(::UserEmail)) }
    def contact_email; end

    sig { params(value: T.nilable(::UserEmail)).void }
    def contact_email=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsGoal) }
    def create_active_goal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsGoal) }
    def create_active_goal!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::StripeConnect::Account) }
    def create_active_parent_stripe_connect_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::StripeConnect::Account) }
    def create_active_parent_stripe_connect_account!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::StripeConnect::Account) }
    def create_active_stripe_connect_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::StripeConnect::Account) }
    def create_active_stripe_connect_account!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_contact_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_contact_email!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_created_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_created_by!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsTier) }
    def create_default_tier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsTier) }
    def create_default_tier!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SurveyChoice) }
    def create_first_fiscally_hosted_project_profile_survey_choice(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SurveyChoice) }
    def create_first_fiscally_hosted_project_profile_survey_choice!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SurveyAnswer) }
    def create_fiscally_hosted_project_profile_survey_answer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SurveyAnswer) }
    def create_fiscally_hosted_project_profile_survey_answer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SurveyQuestion) }
    def create_fiscally_hosted_project_profile_survey_question(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SurveyQuestion) }
    def create_fiscally_hosted_project_profile_survey_question!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_parent_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_parent_listing!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_parent_listing_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_parent_listing_sponsorable!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_sponsorable!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsPatreonUser) }
    def create_sponsors_patreon_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsPatreonUser) }
    def create_sponsors_patreon_user!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def create_stafftools_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def create_stafftools_metadata!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Survey) }
    def create_survey(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Survey) }
    def create_survey!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AccountScreeningProfile) }
    def create_trade_screening_record(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AccountScreeningProfile) }
    def create_trade_screening_record!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def created_by; end

    sig { params(value: T.nilable(::User)).void }
    def created_by=(value); end

    sig { returns(T.nilable(::SponsorsTier)) }
    def default_tier; end

    sig { params(value: T.nilable(::SponsorsTier)).void }
    def default_tier=(value); end

    sig { returns(T::Array[T.untyped]) }
    def featured_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def featured_item_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :featured_items`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsListingFeaturedItem::PrivateCollectionProxy) }
    def featured_items; end

    sig { params(value: T::Enumerable[::SponsorsListingFeaturedItem]).void }
    def featured_items=(value); end

    sig { returns(T::Array[T.untyped]) }
    def featured_repo_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def featured_repo_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :featured_repos`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsListingFeaturedItem::PrivateCollectionProxy) }
    def featured_repos; end

    sig { params(value: T::Enumerable[::SponsorsListingFeaturedItem]).void }
    def featured_repos=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def featured_repos_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def featured_sponsorship_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def featured_sponsorship_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :featured_sponsorships`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsListingFeaturedItem::PrivateCollectionProxy) }
    def featured_sponsorships; end

    sig { params(value: T::Enumerable[::SponsorsListingFeaturedItem]).void }
    def featured_sponsorships=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def featured_sponsorships_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def featured_user_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def featured_user_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :featured_users`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsListingFeaturedItem::PrivateCollectionProxy) }
    def featured_users; end

    sig { params(value: T::Enumerable[::SponsorsListingFeaturedItem]).void }
    def featured_users=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def featured_users_attributes=(attributes); end

    sig { returns(T.nilable(::SurveyChoice)) }
    def first_fiscally_hosted_project_profile_survey_choice; end

    sig { params(value: T.nilable(::SurveyChoice)).void }
    def first_fiscally_hosted_project_profile_survey_choice=(value); end

    sig { returns(T.nilable(::SurveyAnswer)) }
    def fiscally_hosted_project_profile_survey_answer; end

    sig { params(value: T.nilable(::SurveyAnswer)).void }
    def fiscally_hosted_project_profile_survey_answer=(value); end

    sig { returns(T.nilable(::SurveyQuestion)) }
    def fiscally_hosted_project_profile_survey_question; end

    sig { params(value: T.nilable(::SurveyQuestion)).void }
    def fiscally_hosted_project_profile_survey_question=(value); end

    sig { returns(T::Array[T.untyped]) }
    def fraud_review_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def fraud_review_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :fraud_reviews`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsFraudReview::PrivateCollectionProxy) }
    def fraud_reviews; end

    sig { params(value: T::Enumerable[::SponsorsFraudReview]).void }
    def fraud_reviews=(value); end

    sig { returns(T::Array[T.untyped]) }
    def goal_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def goal_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :goals`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsGoal::PrivateCollectionProxy) }
    def goals; end

    sig { params(value: T::Enumerable[::SponsorsGoal]).void }
    def goals=(value); end

    sig { returns(T::Array[T.untyped]) }
    def hook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def hook_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :hooks`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Hook::PrivateCollectionProxy) }
    def hooks; end

    sig { params(value: T::Enumerable[::Hook]).void }
    def hooks=(value); end

    sig { returns(T::Array[T.untyped]) }
    def invoiced_sponsorship_transfer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invoiced_sponsorship_transfer_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :invoiced_sponsorship_transfers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::InvoicedSponsorshipTransfer::PrivateCollectionProxy) }
    def invoiced_sponsorship_transfers; end

    sig { params(value: T::Enumerable[::InvoicedSponsorshipTransfer]).void }
    def invoiced_sponsorship_transfers=(value); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :ledger_entries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PayoutsLedgerEntry::PrivateCollectionProxy) }
    def ledger_entries; end

    sig { params(value: T::Enumerable[::Billing::PayoutsLedgerEntry]).void }
    def ledger_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def ledger_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ledger_entry_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :matches_ledger_entries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PayoutsLedgerEntry::PrivateCollectionProxy) }
    def matches_ledger_entries; end

    sig { params(value: T::Enumerable[::Billing::PayoutsLedgerEntry]).void }
    def matches_ledger_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def matches_ledger_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def matches_ledger_entry_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def newsletter_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def newsletter_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :newsletters`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorshipNewsletter::PrivateCollectionProxy) }
    def newsletters; end

    sig { params(value: T::Enumerable[::SponsorshipNewsletter]).void }
    def newsletters=(value); end

    sig { returns(T.nilable(::SponsorsListing)) }
    def parent_listing; end

    sig { params(value: T.nilable(::SponsorsListing)).void }
    def parent_listing=(value); end

    sig { returns(T.nilable(::User)) }
    def parent_listing_sponsorable; end

    sig { params(value: T.nilable(::User)).void }
    def parent_listing_sponsorable=(value); end

    sig { returns(T::Array[T.untyped]) }
    def published_sponsors_tier_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def published_sponsors_tier_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :published_sponsors_tiers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsTier::PrivateCollectionProxy) }
    def published_sponsors_tiers; end

    sig { params(value: T::Enumerable[::SponsorsTier]).void }
    def published_sponsors_tiers=(value); end

    sig { returns(T.nilable(::SponsorsGoal)) }
    def reload_active_goal; end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def reload_active_parent_stripe_connect_account; end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def reload_active_stripe_connect_account; end

    sig { returns(T.nilable(::UserEmail)) }
    def reload_contact_email; end

    sig { returns(T.nilable(::User)) }
    def reload_created_by; end

    sig { returns(T.nilable(::SponsorsTier)) }
    def reload_default_tier; end

    sig { returns(T.nilable(::SurveyChoice)) }
    def reload_first_fiscally_hosted_project_profile_survey_choice; end

    sig { returns(T.nilable(::SurveyAnswer)) }
    def reload_fiscally_hosted_project_profile_survey_answer; end

    sig { returns(T.nilable(::SurveyQuestion)) }
    def reload_fiscally_hosted_project_profile_survey_question; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def reload_parent_listing; end

    sig { returns(T.nilable(::User)) }
    def reload_parent_listing_sponsorable; end

    sig { returns(T.nilable(::User)) }
    def reload_sponsorable; end

    sig { returns(T.nilable(::SponsorsPatreonUser)) }
    def reload_sponsors_patreon_user; end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def reload_stafftools_metadata; end

    sig { returns(T.nilable(::Survey)) }
    def reload_survey; end

    sig { returns(T.nilable(::AccountScreeningProfile)) }
    def reload_trade_screening_record; end

    sig { returns(T::Array[T.untyped]) }
    def retired_sponsors_tier_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def retired_sponsors_tier_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :retired_sponsors_tiers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsTier::PrivateCollectionProxy) }
    def retired_sponsors_tiers; end

    sig { params(value: T::Enumerable[::SponsorsTier]).void }
    def retired_sponsors_tiers=(value); end

    sig { returns(T.nilable(::User)) }
    def sponsorable; end

    sig { params(value: T.nilable(::User)).void }
    def sponsorable=(value); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :sponsors_memberships_criteria`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsMembershipsCriterion::PrivateCollectionProxy) }
    def sponsors_memberships_criteria; end

    sig { params(value: T::Enumerable[::SponsorsMembershipsCriterion]).void }
    def sponsors_memberships_criteria=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsors_memberships_criterium_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsors_memberships_criterium_ids=(ids); end

    sig { returns(T.nilable(::SponsorsPatreonUser)) }
    def sponsors_patreon_user; end

    sig { params(value: T.nilable(::SponsorsPatreonUser)).void }
    def sponsors_patreon_user=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsors_tier_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsors_tier_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :sponsors_tiers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsTier::PrivateCollectionProxy) }
    def sponsors_tiers; end

    sig { params(value: T::Enumerable[::SponsorsTier]).void }
    def sponsors_tiers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsorship_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsorship_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def sponsorship_match_ban_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsorship_match_ban_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :sponsorship_match_bans`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorshipMatchBan::PrivateCollectionProxy) }
    def sponsorship_match_bans; end

    sig { params(value: T::Enumerable[::SponsorshipMatchBan]).void }
    def sponsorship_match_bans=(value); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :sponsorships`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Sponsorship::PrivateCollectionProxy) }
    def sponsorships; end

    sig { params(value: T::Enumerable[::Sponsorship]).void }
    def sponsorships=(value); end

    sig { returns(T::Array[T.untyped]) }
    def staff_note_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def staff_note_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :staff_notes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::StaffNote::PrivateCollectionProxy) }
    def staff_notes; end

    sig { params(value: T::Enumerable[::StaffNote]).void }
    def staff_notes=(value); end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def stafftools_metadata; end

    sig { params(value: T.nilable(::SponsorsListingStafftoolsMetadata)).void }
    def stafftools_metadata=(value); end

    sig { returns(T::Array[T.untyped]) }
    def stripe_connect_account_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def stripe_connect_account_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :stripe_connect_accounts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::StripeConnect::Account::PrivateCollectionProxy) }
    def stripe_connect_accounts; end

    sig { params(value: T::Enumerable[::Billing::StripeConnect::Account]).void }
    def stripe_connect_accounts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def subscription_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subscription_item_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :subscription_items, through: :sponsors_tiers`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::SubscriptionItem::PrivateCollectionProxy) }
    def subscription_items; end

    sig { params(value: T::Enumerable[::Billing::SubscriptionItem]).void }
    def subscription_items=(value); end

    sig { returns(T.nilable(::Survey)) }
    def survey; end

    sig { params(value: T.nilable(::Survey)).void }
    def survey=(value); end

    sig { returns(T::Array[T.untyped]) }
    def survey_answer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def survey_answer_ids=(ids); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :survey_answers, through: :survey`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::SurveyAnswer::PrivateCollectionProxy) }
    def survey_answers; end

    sig { params(value: T::Enumerable[::SurveyAnswer]).void }
    def survey_answers=(value); end

    sig { returns(T.nilable(::AccountScreeningProfile)) }
    def trade_screening_record; end

    sig { params(value: T.nilable(::AccountScreeningProfile)).void }
    def trade_screening_record=(value); end

    # This method is created by ActiveRecord on the `SponsorsListing` class because it declared `has_many :transfer_ledger_entries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PayoutsLedgerEntry::PrivateCollectionProxy) }
    def transfer_ledger_entries; end

    sig { params(value: T::Enumerable[::Billing::PayoutsLedgerEntry]).void }
    def transfer_ledger_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def transfer_ledger_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def transfer_ledger_entry_ids=(ids); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def accepted_after_match_period(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def accepted_in(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def accepted_in_match_period(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def after_listing(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def featured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def featured_active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def featured_allowed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def featured_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_billing_country(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_featured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_fiscal_host(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_flags(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_ignored_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_matchableness(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_sponsorable_login(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_sponsorable_spamminess(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_sponsorable_suspendedness(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_user_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def fiscal_hosts(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def fiscal_hosts_visible_for_signup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_sponsorable_user_or_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_tier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ignored(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joined_after_match_deadline(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joined_before_match_deadline(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def match_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def match_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def match_limit_met(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def match_limit_not_met(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def matchable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def matches_slug_or_description(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def matches_sponsorable_login(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def mismatched_time_zone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def most_recent_join_date_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_featured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_featured_active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_featured_allowed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_featured_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_ignored(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_matchable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_stripe_verified(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def oldest_join_date_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def on_payout_probation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only_newly_created_sponsorables(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_approval_requested_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_join_date(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_named_sort(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_reviewed_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_sponsorable_login(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_user_creation_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def payouts_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def published_in_last_year(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def published_prior_to_this_last_year(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sponsorable_time_zone_matches_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def stripe_verified(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uncustomized_github_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def waitlist_queue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_auto_acceptable_billing_country(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_billing_country(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_min_sponsorship_amount_since_last_payout(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_no_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_parent_slug(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_slug(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_slug_like(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_sponsorable_logins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_sponsorable_time_zone_and_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_states(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_supported_billing_country(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_supported_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_unsupported_billing_country(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_unsupported_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_unsupported_time_zone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_current_pending_or_flagged_fraud_review(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_fraud_review_since_last_payout(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_parent_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_public_non_fork_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_sponsorable_time_zone_or_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_sponsorable_users(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_states(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_time_zone(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_active_goal; end

    sig { returns(Promise[T.untyped]) }
    def async_active_parent_stripe_connect_account; end

    sig { returns(Promise[T.untyped]) }
    def async_active_recurring_sponsorships; end

    sig { returns(Promise[T.untyped]) }
    def async_active_sponsorships; end

    sig { returns(Promise[T.untyped]) }
    def async_active_stripe_connect_account; end

    sig { returns(Promise[T.untyped]) }
    def async_active_subscription_items; end

    sig { returns(Promise[T.untyped]) }
    def async_activities; end

    sig { returns(Promise[T.untyped]) }
    def async_child_listings; end

    sig { returns(Promise[T.untyped]) }
    def async_contact_email; end

    sig { returns(Promise[T.untyped]) }
    def async_created_by; end

    sig { returns(Promise[T.untyped]) }
    def async_default_tier; end

    sig { returns(Promise[T.untyped]) }
    def async_featured_items; end

    sig { returns(Promise[T.untyped]) }
    def async_featured_repos; end

    sig { returns(Promise[T.untyped]) }
    def async_featured_sponsorships; end

    sig { returns(Promise[T.untyped]) }
    def async_featured_users; end

    sig { returns(Promise[T.untyped]) }
    def async_first_fiscally_hosted_project_profile_survey_choice; end

    sig { returns(Promise[T.untyped]) }
    def async_fiscally_hosted_project_profile_survey_answer; end

    sig { returns(Promise[T.untyped]) }
    def async_fiscally_hosted_project_profile_survey_question; end

    sig { returns(Promise[T.untyped]) }
    def async_fraud_reviews; end

    sig { returns(Promise[T.untyped]) }
    def async_goals; end

    sig { returns(Promise[T.untyped]) }
    def async_hooks; end

    sig { returns(Promise[T.untyped]) }
    def async_invoiced_sponsorship_transfers; end

    sig { returns(Promise[T.untyped]) }
    def async_ledger_entries; end

    sig { returns(Promise[T.untyped]) }
    def async_matches_ledger_entries; end

    sig { returns(Promise[T.untyped]) }
    def async_newsletters; end

    sig { returns(Promise[T.untyped]) }
    def async_parent_listing; end

    sig { returns(Promise[T.untyped]) }
    def async_parent_listing_sponsorable; end

    sig { returns(Promise[T.untyped]) }
    def async_published_sponsors_tiers; end

    sig { returns(Promise[T.untyped]) }
    def async_retired_sponsors_tiers; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorable; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_memberships_criteria; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_patreon_user; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_tiers; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorship_match_bans; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorships; end

    sig { returns(Promise[T.untyped]) }
    def async_staff_notes; end

    sig { returns(Promise[T.untyped]) }
    def async_stafftools_metadata; end

    sig { returns(Promise[T.untyped]) }
    def async_stripe_connect_accounts; end

    sig { returns(Promise[T.untyped]) }
    def async_subscription_items; end

    sig { returns(Promise[T.untyped]) }
    def async_survey; end

    sig { returns(Promise[T.untyped]) }
    def async_survey_answers; end

    sig { returns(Promise[T.untyped]) }
    def async_trade_screening_record; end

    sig { returns(Promise[T.untyped]) }
    def async_transfer_ledger_entries; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accepted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accepted_at=(value); end

    sig { returns(T::Boolean) }
    def accepted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accepted_at_before_last_save; end

    sig { returns(T.untyped) }
    def accepted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def accepted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def accepted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def accepted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def accepted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accepted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def accepted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def accepted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accepted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accepted_at_was; end

    sig { void }
    def accepted_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def billing_country; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def billing_country=(value); end

    sig { returns(T::Boolean) }
    def billing_country?; end

    sig { returns(T.nilable(::String)) }
    def billing_country_before_last_save; end

    sig { returns(T.untyped) }
    def billing_country_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_country_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_country_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_country_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_country_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_country_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_country_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_country_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_country_previously_was; end

    sig { returns(T.nilable(::String)) }
    def billing_country_was; end

    sig { void }
    def billing_country_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def contact_email_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def contact_email_id=(value); end

    sig { returns(T::Boolean) }
    def contact_email_id?; end

    sig { returns(T.nilable(::Integer)) }
    def contact_email_id_before_last_save; end

    sig { returns(T.untyped) }
    def contact_email_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def contact_email_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contact_email_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contact_email_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def contact_email_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def contact_email_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contact_email_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def contact_email_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def contact_email_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def contact_email_id_was; end

    sig { void }
    def contact_email_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country_of_residence; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country_of_residence=(value); end

    sig { returns(T::Boolean) }
    def country_of_residence?; end

    sig { returns(T.nilable(::String)) }
    def country_of_residence_before_last_save; end

    sig { returns(T.untyped) }
    def country_of_residence_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_of_residence_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_of_residence_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_of_residence_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_of_residence_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_of_residence_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_of_residence_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_of_residence_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_of_residence_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_of_residence_was; end

    sig { void }
    def country_of_residence_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def created_by_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def created_by_id=(value); end

    sig { returns(T::Boolean) }
    def created_by_id?; end

    sig { returns(T.nilable(::Integer)) }
    def created_by_id_before_last_save; end

    sig { returns(T.untyped) }
    def created_by_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_by_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def created_by_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def created_by_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def created_by_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def created_by_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def created_by_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def created_by_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def created_by_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def created_by_id_was; end

    sig { void }
    def created_by_id_will_change!; end

    sig { returns(T.untyped) }
    def featured_description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def featured_description=(value); end

    sig { returns(T::Boolean) }
    def featured_description?; end

    sig { returns(T.untyped) }
    def featured_description_before_last_save; end

    sig { returns(T.untyped) }
    def featured_description_before_type_cast; end

    sig { returns(T::Boolean) }
    def featured_description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def featured_description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def featured_description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def featured_description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def featured_description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def featured_description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def featured_description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def featured_description_previously_was; end

    sig { returns(T.untyped) }
    def featured_description_was; end

    sig { void }
    def featured_description_will_change!; end

    sig { returns(T.nilable(::String)) }
    def featured_state; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def featured_state=(value); end

    sig { returns(T::Boolean) }
    def featured_state?; end

    sig { returns(T.nilable(::String)) }
    def featured_state_before_last_save; end

    sig { returns(T.untyped) }
    def featured_state_before_type_cast; end

    sig { returns(T::Boolean) }
    def featured_state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def featured_state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def featured_state_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def featured_state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def featured_state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def featured_state_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def featured_state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def featured_state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def featured_state_was; end

    sig { void }
    def featured_state_will_change!; end

    sig { returns(T.untyped) }
    def full_description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def full_description=(value); end

    sig { returns(T::Boolean) }
    def full_description?; end

    sig { returns(T.untyped) }
    def full_description_before_last_save; end

    sig { returns(T.untyped) }
    def full_description_before_type_cast; end

    sig { returns(T::Boolean) }
    def full_description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def full_description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def full_description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def full_description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def full_description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def full_description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def full_description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def full_description_previously_was; end

    sig { returns(T.untyped) }
    def full_description_was; end

    sig { void }
    def full_description_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Boolean) }
    def is_fiscal_host; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def is_fiscal_host=(value); end

    sig { returns(T::Boolean) }
    def is_fiscal_host?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_fiscal_host_before_last_save; end

    sig { returns(T.untyped) }
    def is_fiscal_host_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_fiscal_host_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_fiscal_host_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_fiscal_host_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_fiscal_host_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_fiscal_host_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_fiscal_host_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_fiscal_host_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_fiscal_host_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_fiscal_host_was; end

    sig { void }
    def is_fiscal_host_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def joined_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def joined_at=(value); end

    sig { returns(T::Boolean) }
    def joined_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def joined_at_before_last_save; end

    sig { returns(T.untyped) }
    def joined_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def joined_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def joined_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def joined_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def joined_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def joined_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def joined_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def joined_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def joined_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def joined_at_was; end

    sig { void }
    def joined_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_payout_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_payout_at=(value); end

    sig { returns(T::Boolean) }
    def last_payout_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_payout_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_payout_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_payout_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_payout_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_payout_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_payout_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_payout_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_payout_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_payout_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_payout_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_payout_at_was; end

    sig { void }
    def last_payout_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def legal_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def legal_name=(value); end

    sig { returns(T::Boolean) }
    def legal_name?; end

    sig { returns(T.nilable(::String)) }
    def legal_name_before_last_save; end

    sig { returns(T.untyped) }
    def legal_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def legal_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def legal_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def legal_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def legal_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def legal_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def legal_name_was; end

    sig { void }
    def legal_name_will_change!; end

    sig { returns(T::Boolean) }
    def match_disabled; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def match_disabled=(value); end

    sig { returns(T::Boolean) }
    def match_disabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def match_disabled_before_last_save; end

    sig { returns(T.untyped) }
    def match_disabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def match_disabled_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def match_disabled_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def match_disabled_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def match_disabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def match_disabled_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def match_disabled_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def match_disabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def match_disabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def match_disabled_was; end

    sig { void }
    def match_disabled_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def match_limit_reached_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def match_limit_reached_at=(value); end

    sig { returns(T::Boolean) }
    def match_limit_reached_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def match_limit_reached_at_before_last_save; end

    sig { returns(T.untyped) }
    def match_limit_reached_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def match_limit_reached_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def match_limit_reached_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def match_limit_reached_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def match_limit_reached_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def match_limit_reached_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def match_limit_reached_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def match_limit_reached_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def match_limit_reached_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def match_limit_reached_at_was; end

    sig { void }
    def match_limit_reached_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def milestone_email_sent_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def milestone_email_sent_at=(value); end

    sig { returns(T::Boolean) }
    def milestone_email_sent_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def milestone_email_sent_at_before_last_save; end

    sig { returns(T.untyped) }
    def milestone_email_sent_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def milestone_email_sent_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def milestone_email_sent_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def milestone_email_sent_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def milestone_email_sent_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def milestone_email_sent_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def milestone_email_sent_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def milestone_email_sent_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def milestone_email_sent_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def milestone_email_sent_at_was; end

    sig { void }
    def milestone_email_sent_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def min_custom_tier_amount_in_cents; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def min_custom_tier_amount_in_cents=(value); end

    sig { returns(T::Boolean) }
    def min_custom_tier_amount_in_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def min_custom_tier_amount_in_cents_before_last_save; end

    sig { returns(T.untyped) }
    def min_custom_tier_amount_in_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def min_custom_tier_amount_in_cents_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def min_custom_tier_amount_in_cents_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def min_custom_tier_amount_in_cents_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def min_custom_tier_amount_in_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def min_custom_tier_amount_in_cents_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def min_custom_tier_amount_in_cents_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def min_custom_tier_amount_in_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def min_custom_tier_amount_in_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def min_custom_tier_amount_in_cents_was; end

    sig { void }
    def min_custom_tier_amount_in_cents_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::Integer) }
    def owner_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def owner_id=(value); end

    sig { returns(T::Boolean) }
    def owner_id?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_before_last_save; end

    sig { returns(T.untyped) }
    def owner_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def owner_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def owner_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def owner_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_was; end

    sig { void }
    def owner_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def parent_listing_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def parent_listing_id=(value); end

    sig { returns(T::Boolean) }
    def parent_listing_id?; end

    sig { returns(T.nilable(::Integer)) }
    def parent_listing_id_before_last_save; end

    sig { returns(T.untyped) }
    def parent_listing_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def parent_listing_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def parent_listing_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def parent_listing_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def parent_listing_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def parent_listing_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def parent_listing_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def parent_listing_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def parent_listing_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def parent_listing_id_was; end

    sig { void }
    def parent_listing_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payout_probation_ended_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payout_probation_ended_at=(value); end

    sig { returns(T::Boolean) }
    def payout_probation_ended_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payout_probation_ended_at_before_last_save; end

    sig { returns(T.untyped) }
    def payout_probation_ended_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def payout_probation_ended_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def payout_probation_ended_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def payout_probation_ended_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def payout_probation_ended_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payout_probation_ended_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def payout_probation_ended_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def payout_probation_ended_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payout_probation_ended_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payout_probation_ended_at_was; end

    sig { void }
    def payout_probation_ended_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payout_probation_started_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payout_probation_started_at=(value); end

    sig { returns(T::Boolean) }
    def payout_probation_started_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payout_probation_started_at_before_last_save; end

    sig { returns(T.untyped) }
    def payout_probation_started_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def payout_probation_started_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def payout_probation_started_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def payout_probation_started_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def payout_probation_started_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payout_probation_started_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def payout_probation_started_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def payout_probation_started_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payout_probation_started_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payout_probation_started_at_was; end

    sig { void }
    def payout_probation_started_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at=(value); end

    sig { returns(T::Boolean) }
    def published_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_before_last_save; end

    sig { returns(T.untyped) }
    def published_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def published_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def published_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def published_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def published_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def published_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def published_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def published_at_was; end

    sig { void }
    def published_at_will_change!; end

    sig { void }
    def restore_accepted_at!; end

    sig { void }
    def restore_billing_country!; end

    sig { void }
    def restore_contact_email_id!; end

    sig { void }
    def restore_country_of_residence!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_created_by_id!; end

    sig { void }
    def restore_featured_description!; end

    sig { void }
    def restore_featured_state!; end

    sig { void }
    def restore_full_description!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_is_fiscal_host!; end

    sig { void }
    def restore_joined_at!; end

    sig { void }
    def restore_last_payout_at!; end

    sig { void }
    def restore_legal_name!; end

    sig { void }
    def restore_match_disabled!; end

    sig { void }
    def restore_match_limit_reached_at!; end

    sig { void }
    def restore_milestone_email_sent_at!; end

    sig { void }
    def restore_min_custom_tier_amount_in_cents!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_owner_id!; end

    sig { void }
    def restore_parent_listing_id!; end

    sig { void }
    def restore_payout_probation_ended_at!; end

    sig { void }
    def restore_payout_probation_started_at!; end

    sig { void }
    def restore_published_at!; end

    sig { void }
    def restore_short_description!; end

    sig { void }
    def restore_slug!; end

    sig { void }
    def restore_sponsorable_id!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_stripe_authorization_code!; end

    sig { void }
    def restore_suggested_custom_tier_amount_in_cents!; end

    sig { void }
    def restore_survey_id!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_accepted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_accepted_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_billing_country; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_country?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_contact_email_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_contact_email_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country_of_residence; end

    sig { returns(T::Boolean) }
    def saved_change_to_country_of_residence?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_created_by_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_by_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_featured_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_featured_description?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_featured_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_featured_state?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_full_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_full_description?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_is_fiscal_host; end

    sig { returns(T::Boolean) }
    def saved_change_to_is_fiscal_host?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_joined_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_joined_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_payout_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_payout_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_legal_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_legal_name?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_match_disabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_match_disabled?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_match_limit_reached_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_match_limit_reached_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_milestone_email_sent_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_milestone_email_sent_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_min_custom_tier_amount_in_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_min_custom_tier_amount_in_cents?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_owner_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_owner_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_parent_listing_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_parent_listing_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_payout_probation_ended_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_payout_probation_ended_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_payout_probation_started_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_payout_probation_started_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_published_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_published_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_short_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_short_description?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_slug?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sponsorable_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsorable_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_stripe_authorization_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_stripe_authorization_code?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_suggested_custom_tier_amount_in_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_suggested_custom_tier_amount_in_cents?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_survey_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_survey_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.untyped) }
    def short_description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def short_description=(value); end

    sig { returns(T::Boolean) }
    def short_description?; end

    sig { returns(T.untyped) }
    def short_description_before_last_save; end

    sig { returns(T.untyped) }
    def short_description_before_type_cast; end

    sig { returns(T::Boolean) }
    def short_description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def short_description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def short_description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def short_description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def short_description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def short_description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def short_description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def short_description_previously_was; end

    sig { returns(T.untyped) }
    def short_description_was; end

    sig { void }
    def short_description_will_change!; end

    sig { returns(::String) }
    def slug; end

    sig { params(value: ::String).returns(::String) }
    def slug=(value); end

    sig { returns(T::Boolean) }
    def slug?; end

    sig { returns(T.nilable(::String)) }
    def slug_before_last_save; end

    sig { returns(T.untyped) }
    def slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def slug_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def slug_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def slug_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slug_was; end

    sig { void }
    def slug_will_change!; end

    sig { returns(::Integer) }
    def sponsorable_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sponsorable_id=(value); end

    sig { returns(T::Boolean) }
    def sponsorable_id?; end

    sig { returns(T.nilable(::Integer)) }
    def sponsorable_id_before_last_save; end

    sig { returns(T.untyped) }
    def sponsorable_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsorable_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsorable_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsorable_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsorable_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsorable_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsorable_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsorable_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsorable_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sponsorable_id_was; end

    sig { void }
    def sponsorable_id_will_change!; end

    sig { returns(::Integer) }
    def state; end

    sig { params(value: ::Integer).returns(::Integer) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::Integer)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def state_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def state_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::String)) }
    def stripe_authorization_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def stripe_authorization_code=(value); end

    sig { returns(T::Boolean) }
    def stripe_authorization_code?; end

    sig { returns(T.nilable(::String)) }
    def stripe_authorization_code_before_last_save; end

    sig { returns(T.untyped) }
    def stripe_authorization_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def stripe_authorization_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_authorization_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_authorization_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def stripe_authorization_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def stripe_authorization_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_authorization_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def stripe_authorization_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def stripe_authorization_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def stripe_authorization_code_was; end

    sig { void }
    def stripe_authorization_code_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def suggested_custom_tier_amount_in_cents; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def suggested_custom_tier_amount_in_cents=(value); end

    sig { returns(T::Boolean) }
    def suggested_custom_tier_amount_in_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def suggested_custom_tier_amount_in_cents_before_last_save; end

    sig { returns(T.untyped) }
    def suggested_custom_tier_amount_in_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def suggested_custom_tier_amount_in_cents_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def suggested_custom_tier_amount_in_cents_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def suggested_custom_tier_amount_in_cents_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def suggested_custom_tier_amount_in_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def suggested_custom_tier_amount_in_cents_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def suggested_custom_tier_amount_in_cents_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def suggested_custom_tier_amount_in_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def suggested_custom_tier_amount_in_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def suggested_custom_tier_amount_in_cents_was; end

    sig { void }
    def suggested_custom_tier_amount_in_cents_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def survey_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def survey_id=(value); end

    sig { returns(T::Boolean) }
    def survey_id?; end

    sig { returns(T.nilable(::Integer)) }
    def survey_id_before_last_save; end

    sig { returns(T.untyped) }
    def survey_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def survey_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def survey_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def survey_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def survey_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def survey_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def survey_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def survey_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def survey_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def survey_id_was; end

    sig { void }
    def survey_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_accepted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_country?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_contact_email_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country_of_residence?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_by_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_featured_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_featured_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_full_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_is_fiscal_host?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_joined_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_payout_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_legal_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_match_disabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_match_limit_reached_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_milestone_email_sent_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_min_custom_tier_amount_in_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_owner_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_parent_listing_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payout_probation_ended_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payout_probation_started_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_published_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_short_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsorable_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_stripe_authorization_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_suggested_custom_tier_amount_in_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_survey_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedPreludeBatchMethods
    sig { params(billing_cycle: T.untyped).returns(T.untyped) }
    def product_uuid(billing_cycle); end

    sig { params(billing_cycle: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_product_uuid(billing_cycle); end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def sponsored_by_viewer?(viewer); end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_sponsored_by_viewer?(viewer); end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def accepted_after_match_period(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def accepted_in(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def accepted_in_match_period(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def after_listing(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def featured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def featured_active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def featured_allowed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def featured_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_billing_country(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_featured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_fiscal_host(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_flags(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_ignored_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_matchableness(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_sponsorable_login(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_sponsorable_spamminess(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_sponsorable_suspendedness(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_user_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def fiscal_hosts(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def fiscal_hosts_visible_for_signup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_sponsorable_user_or_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_tier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ignored(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joined_after_match_deadline(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joined_before_match_deadline(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def match_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def match_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def match_limit_met(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def match_limit_not_met(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def matchable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def matches_slug_or_description(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def matches_sponsorable_login(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def mismatched_time_zone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def most_recent_join_date_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_featured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_featured_active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_featured_allowed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_featured_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_ignored(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_matchable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_stripe_verified(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def oldest_join_date_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def on_payout_probation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only_newly_created_sponsorables(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_approval_requested_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_join_date(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_named_sort(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_reviewed_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_sponsorable_login(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_user_creation_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def payouts_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def published_in_last_year(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def published_prior_to_this_last_year(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sponsorable_time_zone_matches_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def stripe_verified(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uncustomized_github_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def waitlist_queue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_auto_acceptable_billing_country(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_billing_country(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_min_sponsorship_amount_since_last_payout(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_no_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_parent_slug(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_slug(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_slug_like(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_sponsorable_logins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_sponsorable_time_zone_and_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_states(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_supported_billing_country(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_supported_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_unsupported_billing_country(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_unsupported_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_unsupported_time_zone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_current_pending_or_flagged_fraud_review(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_fraud_review_since_last_payout(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_parent_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_public_non_fork_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_sponsorable_time_zone_or_country_of_residence(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_sponsorable_users(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_states(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_time_zone(*args, &blk); end
  end

  module GeneratedWorkflowClassMethods
    sig { params(val: String).returns(T.untyped) }
    def state=(val); end

    sig { returns(PrivateRelationWhereChain) }
    def with_approved_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_banned_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_disabled_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_draft_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_pending_approval_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_queued_for_auto_approval_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_requires_additional_review_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_sdn_disabled_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_spammy_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_waitlisted_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_approved_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_banned_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_disabled_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_draft_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_pending_approval_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_queued_for_auto_approval_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_requires_additional_review_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_sdn_disabled_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_spammy_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_waitlisted_state; end
  end

  module GeneratedWorkflowMethods
    sig { void }
    def accept!; end

    sig { void }
    def approve!; end

    sig { void }
    def approve!; end

    sig { void }
    def approve!; end

    sig { returns(T::Boolean) }
    def approved?; end

    sig { void }
    def auto_approval_failed!; end

    sig { void }
    def ban!; end

    sig { void }
    def ban!; end

    sig { void }
    def ban!; end

    sig { void }
    def ban!; end

    sig { void }
    def ban!; end

    sig { void }
    def ban!; end

    sig { void }
    def ban!; end

    sig { void }
    def ban!; end

    sig { void }
    def ban!; end

    sig { returns(T::Boolean) }
    def banned?; end

    sig { returns(T::Boolean) }
    def can_accept?; end

    sig { returns(T::Boolean) }
    def can_approve?; end

    sig { returns(T::Boolean) }
    def can_approve?; end

    sig { returns(T::Boolean) }
    def can_approve?; end

    sig { returns(T::Boolean) }
    def can_auto_approval_failed?; end

    sig { returns(T::Boolean) }
    def can_ban?; end

    sig { returns(T::Boolean) }
    def can_ban?; end

    sig { returns(T::Boolean) }
    def can_ban?; end

    sig { returns(T::Boolean) }
    def can_ban?; end

    sig { returns(T::Boolean) }
    def can_ban?; end

    sig { returns(T::Boolean) }
    def can_ban?; end

    sig { returns(T::Boolean) }
    def can_ban?; end

    sig { returns(T::Boolean) }
    def can_ban?; end

    sig { returns(T::Boolean) }
    def can_ban?; end

    sig { returns(T::Boolean) }
    def can_cancel_approval_request?; end

    sig { returns(T::Boolean) }
    def can_cancel_approval_request?; end

    sig { returns(T::Boolean) }
    def can_cancel_approval_request?; end

    sig { returns(T::Boolean) }
    def can_disable?; end

    sig { returns(T::Boolean) }
    def can_disable?; end

    sig { returns(T::Boolean) }
    def can_disable?; end

    sig { returns(T::Boolean) }
    def can_disable?; end

    sig { returns(T::Boolean) }
    def can_enqueue_for_auto_approval?; end

    sig { returns(T::Boolean) }
    def can_mark_not_spammy?; end

    sig { returns(T::Boolean) }
    def can_mark_spammy?; end

    sig { returns(T::Boolean) }
    def can_publish?; end

    sig { returns(T::Boolean) }
    def can_reactivate?; end

    sig { returns(T::Boolean) }
    def can_redraft?; end

    sig { returns(T::Boolean) }
    def can_request_approval?; end

    sig { returns(T::Boolean) }
    def can_request_approval?; end

    sig { returns(T::Boolean) }
    def can_require_additional_review?; end

    sig { returns(T::Boolean) }
    def can_revert_to_waitlisted?; end

    sig { returns(T::Boolean) }
    def can_sdn_disable?; end

    sig { returns(T::Boolean) }
    def can_sdn_enable?; end

    sig { returns(T::Boolean) }
    def can_un_ban?; end

    sig { returns(T::Boolean) }
    def can_unpublish?; end

    sig { void }
    def cancel_approval_request!; end

    sig { void }
    def cancel_approval_request!; end

    sig { void }
    def cancel_approval_request!; end

    sig { void }
    def disable!; end

    sig { void }
    def disable!; end

    sig { void }
    def disable!; end

    sig { void }
    def disable!; end

    sig { returns(T::Boolean) }
    def disabled?; end

    sig { returns(T::Boolean) }
    def draft?; end

    sig { void }
    def enqueue_for_auto_approval!; end

    sig { void }
    def mark_not_spammy!; end

    sig { void }
    def mark_spammy!; end

    sig { returns(T::Boolean) }
    def pending_approval?; end

    sig { void }
    def publish!; end

    sig { returns(T::Boolean) }
    def queued_for_auto_approval?; end

    sig { void }
    def reactivate!; end

    sig { void }
    def redraft!; end

    sig { void }
    def request_approval!; end

    sig { void }
    def request_approval!; end

    sig { void }
    def require_additional_review!; end

    sig { returns(T::Boolean) }
    def requires_additional_review?; end

    sig { void }
    def revert_to_waitlisted!; end

    sig { void }
    def sdn_disable!; end

    sig { returns(T::Boolean) }
    def sdn_disabled?; end

    sig { void }
    def sdn_enable!; end

    sig { returns(T::Boolean) }
    def spammy?; end

    sig { void }
    def un_ban!; end

    sig { void }
    def unpublish!; end

    sig { returns(T::Boolean) }
    def waitlisted?; end

    sig { returns(PrivateRelationWhereChain) }
    def without_approved_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_banned_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_disabled_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_draft_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_pending_approval_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_queued_for_auto_approval_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_requires_additional_review_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_sdn_disabled_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_spammy_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_waitlisted_state; end
  end

  class PrivateAssocationRelation < ::ActiveRecord::AssociationRelation
    include GeneratedWorkflowClassMethods
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::SponsorsListing } }

    sig { returns(T::Array[::SponsorsListing]) }
    def to_a; end

    sig { returns(T::Array[::SponsorsListing]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::SponsorsListing } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedWorkflowClassMethods
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::SponsorsListing } }

    sig do
      params(
        records: T.any(::SponsorsListing, T::Enumerable[T.any(::SponsorsListing, T::Enumerable[::SponsorsListing])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::SponsorsListing, T::Enumerable[T.any(::SponsorsListing, T::Enumerable[::SponsorsListing])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::SponsorsListing, T::Enumerable[T.any(::SponsorsListing, T::Enumerable[::SponsorsListing])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::SponsorsListing]) }
    def load_target; end

    sig do
      params(
        records: T.any(::SponsorsListing, T::Enumerable[T.any(::SponsorsListing, T::Enumerable[::SponsorsListing])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::SponsorsListing, T::Enumerable[T.any(::SponsorsListing, T::Enumerable[::SponsorsListing])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::SponsorsListing, T::Enumerable[T.any(::SponsorsListing, T::Enumerable[::SponsorsListing])])
      ).returns(T::Array[::SponsorsListing])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::SponsorsListing]) }
    def target; end

    sig { returns(T::Array[::SponsorsListing]) }
    def to_a; end

    sig { returns(T::Array[::SponsorsListing]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include GeneratedWorkflowClassMethods
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::SponsorsListing } }

    sig { returns(T::Array[::SponsorsListing]) }
    def to_a; end

    sig { returns(T::Array[::SponsorsListing]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::SponsorsListing } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

# frozen_string_literal: true

module SlashCommands
  class <%= class_name %>Command < ApplicationSlashCommand
    trigger_on name: "<%= name %>", title: "<%= name.humanize %>", description: "<%= options[:description] ? options[:description] : "TODO: this subtitle of the command" %>"

    # Here we outline how the slash command will behave. Order matters (in alpha).
    # `menu` - Declares a which method to use to generate menu. The method should return a list of items.
    # `fill` - Declares a which method to use to fill in the text-area. This method should return a string.
    menu :example_menu_1
    menu :example_menu_2, if: :picked_three?
    fill :example_fill

    def example_menu_1
      items = [
        Item.new(text: "item 1", description: "TODO: fill in this subtitle", value: 1 ),
        Item.new(text: "item 2", description: "TODO: fill in this subtitle", value: 2 ),
        Item.new(text: "item 3", description: "Choose this to see secret menu", value: 3 ),
      ]

      menu(:first_menu, items)
    end

    def example_menu_2
      items = [
        Item.new(text: "item 3", description: "TODO: fill in this subtitle", value: 3 ),
        Item.new(text: "item 4", description: "TODO: fill in this subtitle", value: 4 ),
        Item.new(text: "item 5", description: "TODO: fill in this subtitle", value: 5 ),
      ]

      menu(:second_menu, items)
    end

    def picked_three?
      data[:first_menu].to_i == 3
    end

    def example_fill
      description = [data[:first_menu], data[:second_menu]].compact.to_sentence

      "You picked ##{description}"
    end
  end
end

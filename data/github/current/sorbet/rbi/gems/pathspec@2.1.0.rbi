# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pathspec` gem.
# Please instead update this file by running `bin/tapioca gem pathspec`.

# Main PathSpec class, provides interfaces to various spec implementations
#
# source://pathspec//lib/pathspec/spec.rb#3
class PathSpec
  # @return [PathSpec] a new instance of PathSpec
  #
  # source://pathspec//lib/pathspec.rb#12
  def initialize(lines = T.unsafe(nil), type = T.unsafe(nil)); end

  # Generate specs from lines of text
  #
  # source://pathspec//lib/pathspec.rb#81
  def add(obj, type = T.unsafe(nil)); end

  # source://pathspec//lib/pathspec.rb#67
  def drive_letter_to_path(path); end

  # @return [Boolean]
  #
  # source://pathspec//lib/pathspec.rb#101
  def empty?; end

  # Check if a path matches the pathspecs described
  # Returns true if there are matches and none are excluded
  # Returns false if there aren't matches or none are included
  #
  # source://pathspec//lib/pathspec.rb#23
  def match(path); end

  # source://pathspec//lib/pathspec.rb#49
  def match_path(path, root = T.unsafe(nil)); end

  # source://pathspec//lib/pathspec.rb#57
  def match_paths(paths, root = T.unsafe(nil)); end

  # Check if any files in a given directory or subdirectories match the specs
  # Returns matched paths or nil if no paths matched
  #
  # source://pathspec//lib/pathspec.rb#36
  def match_tree(root); end

  # source://pathspec//lib/pathspec.rb#105
  def spec_type(type); end

  # Returns the value of attribute specs.
  #
  # source://pathspec//lib/pathspec.rb#10
  def specs; end

  # source://pathspec//lib/pathspec.rb#28
  def specs_matching(path); end

  class << self
    # Generate specs from a filename, such as a .gitignore
    #
    # source://pathspec//lib/pathspec.rb#72
    def from_filename(filename, type = T.unsafe(nil)); end

    # source://pathspec//lib/pathspec.rb#76
    def from_lines(lines, type = T.unsafe(nil)); end
  end
end

# Class for parsing a .gitignore spec
#
# source://pathspec//lib/pathspec/gitignorespec.rb#7
class PathSpec::GitIgnoreSpec < ::PathSpec::RegexSpec
  # @return [GitIgnoreSpec] a new instance of GitIgnoreSpec
  #
  # source://pathspec//lib/pathspec/gitignorespec.rb#10
  def initialize(original_pattern); end

  # @return [Boolean]
  #
  # source://pathspec//lib/pathspec/gitignorespec.rb#274
  def inclusive?; end

  # Returns the value of attribute pattern.
  #
  # source://pathspec//lib/pathspec/gitignorespec.rb#8
  def pattern; end

  # Returns the value of attribute regex.
  #
  # source://pathspec//lib/pathspec/gitignorespec.rb#8
  def regex; end

  # source://pathspec//lib/pathspec/gitignorespec.rb#157
  def translate_segment_glob(pattern); end
end

# Simple regex-based spec
#
# source://pathspec//lib/pathspec/regexspec.rb#7
class PathSpec::RegexSpec < ::PathSpec::Spec
  # @return [RegexSpec] a new instance of RegexSpec
  #
  # source://pathspec//lib/pathspec/regexspec.rb#8
  def initialize(pattern); end

  # @return [Boolean]
  #
  # source://pathspec//lib/pathspec/regexspec.rb#15
  def inclusive?; end

  # source://pathspec//lib/pathspec/regexspec.rb#19
  def match(path); end
end

# Abstract spec
#
# source://pathspec//lib/pathspec/spec.rb#5
class PathSpec::Spec
  # @return [Spec] a new instance of Spec
  #
  # source://pathspec//lib/pathspec/spec.rb#8
  def initialize(*_); end

  # @return [Boolean]
  #
  # source://pathspec//lib/pathspec/spec.rb#14
  def inclusive?; end

  # source://pathspec//lib/pathspec/spec.rb#10
  def match(files); end

  # Returns the value of attribute pattern.
  #
  # source://pathspec//lib/pathspec/spec.rb#6
  def pattern; end

  # Returns the value of attribute regex.
  #
  # source://pathspec//lib/pathspec/spec.rb#6
  def regex; end

  # source://pathspec//lib/pathspec/spec.rb#18
  def to_s; end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `uuidtools` gem.
# Please instead update this file by running `bin/tapioca gem uuidtools`.

# source://uuidtools//lib/uuidtools/version.rb#21
module UUIDTools; end

# UUIDTools was designed to be a simple library for generating any
# of the various types of UUIDs.  It conforms to RFC 4122 whenever
# possible.
#
# @example
#   UUID.md5_create(UUID_DNS_NAMESPACE, "www.widgets.com")
#   # => #<UUID:0x287576 UUID:3d813cbb-47fb-32ba-91df-831e1593ac29>
#   UUID.sha1_create(UUID_DNS_NAMESPACE, "www.widgets.com")
#   # => #<UUID:0x2a0116 UUID:21f7f8de-8051-5b89-8680-0195ef798b6a>
#   UUID.timestamp_create
#   # => #<UUID:0x2adfdc UUID:64a5189c-25b3-11da-a97b-00c04fd430c8>
#   UUID.random_create
#   # => #<UUID:0x19013a UUID:984265dc-4200-4f02-ae70-fe4f48964159>
#
# source://uuidtools//lib/uuidtools.rb#50
class UUIDTools::UUID
  include ::Comparable

  # Creates a new UUID structure from its component values.
  #
  # @api private
  # @return [UUID] a new instance of UUID
  # @see UUID.md5_create
  # @see UUID.sha1_create
  # @see UUID.timestamp_create
  # @see UUID.random_create
  #
  # source://uuidtools//lib/uuidtools.rb#80
  def initialize(time_low, time_mid, time_hi_and_version, clock_seq_hi_and_reserved, clock_seq_low, nodes); end

  # Compares two UUIDs lexically
  #
  # source://uuidtools//lib/uuidtools.rb#395
  def <=>(other_uuid); end

  # Returns the value of attribute `clock_seq_hi_and_reserved`
  #
  # source://uuidtools//lib/uuidtools.rb#142
  def clock_seq_hi_and_reserved; end

  # Returns the value of attribute `clock_seq_hi_and_reserved`
  #
  # source://uuidtools//lib/uuidtools.rb#142
  def clock_seq_hi_and_reserved=(_arg0); end

  # Returns the value of attribute `clock_seq_low`
  #
  # source://uuidtools//lib/uuidtools.rb#146
  def clock_seq_low; end

  # Returns the value of attribute `clock_seq_low`
  #
  # source://uuidtools//lib/uuidtools.rb#146
  def clock_seq_low=(_arg0); end

  # Returns true if this UUID is exactly equal to the other UUID.
  #
  # @return [Boolean]
  #
  # source://uuidtools//lib/uuidtools.rb#520
  def eql?(other); end

  # Returns an integer hash value.
  #
  # source://uuidtools//lib/uuidtools.rb#460
  def hash; end

  # Returns the hex digest of the UUID object.
  #
  # source://uuidtools//lib/uuidtools.rb#427
  def hexdigest; end

  # Returns a representation of the object's state
  #
  # source://uuidtools//lib/uuidtools.rb#421
  def inspect; end

  # Returns the IEEE 802 address used to generate this UUID or
  # nil if a MAC address was not used.
  #
  # source://uuidtools//lib/uuidtools.rb#372
  def mac_address; end

  # Returns true if this UUID is the
  # nil UUID (00000000-0000-0000-0000-000000000000).
  #
  # @return [Boolean]
  #
  # source://uuidtools//lib/uuidtools.rb#314
  def nil_uuid?; end

  # Returns the value of attribute `nodes`
  #
  # source://uuidtools//lib/uuidtools.rb#150
  def nodes; end

  # Returns the value of attribute `nodes`
  #
  # source://uuidtools//lib/uuidtools.rb#150
  def nodes=(_arg0); end

  # This method applies only to version 1 UUIDs.
  # Checks if the node ID was generated from a random number
  # or from an IEEE 802 address (MAC address).
  # Always returns false for UUIDs that aren't version 1.
  # This should not be confused with version 4 UUIDs where
  # more than just the node id is random.
  #
  # @return [Boolean]
  #
  # source://uuidtools//lib/uuidtools.rb#306
  def random_node_id?; end

  # Returns the raw bytes that represent this UUID.
  #
  # source://uuidtools//lib/uuidtools.rb#435
  def raw; end

  # Returns the value of attribute `time_hi_and_version`
  #
  # source://uuidtools//lib/uuidtools.rb#138
  def time_hi_and_version; end

  # Returns the value of attribute `time_hi_and_version`
  #
  # source://uuidtools//lib/uuidtools.rb#138
  def time_hi_and_version=(_arg0); end

  # Returns the value of attribute `time_low`
  #
  # source://uuidtools//lib/uuidtools.rb#130
  def time_low; end

  # Returns the value of attribute `time_low`
  #
  # source://uuidtools//lib/uuidtools.rb#130
  def time_low=(_arg0); end

  # Returns the value of attribute `time_mid`
  #
  # source://uuidtools//lib/uuidtools.rb#134
  def time_mid; end

  # Returns the value of attribute `time_mid`
  #
  # source://uuidtools//lib/uuidtools.rb#134
  def time_mid=(_arg0); end

  # Returns the timestamp used to generate this UUID
  #
  # source://uuidtools//lib/uuidtools.rb#382
  def timestamp; end

  # Returns an integer representation for this UUID.
  #
  # source://uuidtools//lib/uuidtools.rb#448
  def to_i; end

  # Returns a string representation for this UUID.
  #
  # source://uuidtools//lib/uuidtools.rb#441
  def to_s; end

  # Returns a string representation for this UUID.
  #
  # source://uuidtools//lib/uuidtools.rb#441
  def to_str; end

  # Returns a URI string for this UUID.
  #
  # source://uuidtools//lib/uuidtools.rb#454
  def to_uri; end

  # Returns true if this UUID is valid.
  #
  # @return [Boolean]
  #
  # source://uuidtools//lib/uuidtools.rb#360
  def valid?; end

  # Returns the UUID variant.
  # Possible values:
  # 0b000 - Reserved, NCS backward compatibility.
  # 0b100 - The variant specified in this document.
  # 0b110 - Reserved, Microsoft Corporation backward compatibility.
  # 0b111 - Reserved for future definition.
  #
  # source://uuidtools//lib/uuidtools.rb#345
  def variant; end

  # Returns the UUID version type.
  # Possible values:
  # 1 - Time-based with unique or random host identifier
  # 2 - DCE Security version (with POSIX UIDs)
  # 3 - Name-based (MD5 hash)
  # 4 - Random
  # 5 - Name-based (SHA-1 hash)
  #
  # source://uuidtools//lib/uuidtools.rb#334
  def version; end

  protected

  # Generates an integer hash value.
  #
  # @api private
  #
  # source://uuidtools//lib/uuidtools.rb#476
  def generate_hash; end

  # Generates the hex digest of the UUID object.
  #
  # @api private
  #
  # source://uuidtools//lib/uuidtools.rb#469
  def generate_hexdigest; end

  # Generates an integer representation for this UUID.
  #
  # @api private
  #
  # source://uuidtools//lib/uuidtools.rb#484
  def generate_i; end

  # Generates the raw bytes that represent this UUID.
  #
  # @api private
  #
  # source://uuidtools//lib/uuidtools.rb#513
  def generate_raw; end

  # Generates a string representation for this UUID.
  #
  # @api private
  #
  # source://uuidtools//lib/uuidtools.rb#500
  def generate_s; end

  class << self
    # @api private
    #
    # source://uuidtools//lib/uuidtools.rb#710
    def convert_byte_string_to_int(byte_string); end

    # @api private
    #
    # source://uuidtools//lib/uuidtools.rb#697
    def convert_int_to_byte_string(integer, size); end

    # Creates a new UUID from a SHA1 or MD5 hash
    #
    # @api private
    #
    # source://uuidtools//lib/uuidtools.rb#672
    def create_from_hash(hash_class, namespace, name); end

    # Match and return the first Mac address found
    #
    # source://uuidtools//lib/uuidtools.rb#591
    def first_mac(instring); end

    # Call the ifconfig or ip command that is found
    #
    # source://uuidtools//lib/uuidtools.rb#575
    def ifconfig(all = T.unsafe(nil)); end

    # Returns the value of attribute ifconfig_command.
    #
    # source://uuidtools//lib/uuidtools.rb#550
    def ifconfig_command; end

    # Sets the attribute ifconfig_command
    #
    # @param value the value to set the attribute ifconfig_command to.
    #
    # source://uuidtools//lib/uuidtools.rb#550
    def ifconfig_command=(_arg0); end

    # Find the path of the ifconfig(8) command if it is present
    #
    # source://uuidtools//lib/uuidtools.rb#557
    def ifconfig_path; end

    # Returns the value of attribute ifconfig_path_default.
    #
    # source://uuidtools//lib/uuidtools.rb#550
    def ifconfig_path_default; end

    # Sets the attribute ifconfig_path_default
    #
    # @param value the value to set the attribute ifconfig_path_default to.
    #
    # source://uuidtools//lib/uuidtools.rb#550
    def ifconfig_path_default=(_arg0); end

    # Returns the value of attribute ip_command.
    #
    # source://uuidtools//lib/uuidtools.rb#551
    def ip_command; end

    # Sets the attribute ip_command
    #
    # @param value the value to set the attribute ip_command to.
    #
    # source://uuidtools//lib/uuidtools.rb#551
    def ip_command=(_arg0); end

    # Find the path of the ip(8) command if it is present
    #
    # source://uuidtools//lib/uuidtools.rb#566
    def ip_path; end

    # Returns the value of attribute ip_path_default.
    #
    # source://uuidtools//lib/uuidtools.rb#551
    def ip_path_default; end

    # Sets the attribute ip_path_default
    #
    # @param value the value to set the attribute ip_path_default to.
    #
    # source://uuidtools//lib/uuidtools.rb#551
    def ip_path_default=(_arg0); end

    # Returns the MAC address of the current computer's network card.
    # Returns nil if a MAC address could not be found.
    #
    # source://uuidtools//lib/uuidtools.rb#622
    def mac_address; end

    # Allows users to set the MAC address manually in cases where the MAC
    # address cannot be obtained programatically.
    #
    # source://uuidtools//lib/uuidtools.rb#660
    def mac_address=(new_mac_address); end

    # Creates a UUID using the MD5 hash.  (Version 3)
    #
    # source://uuidtools//lib/uuidtools.rb#289
    def md5_create(namespace, name); end

    # Determine what OS we're running on.  Helps decide how to find the MAC
    #
    # source://uuidtools//lib/uuidtools.rb#527
    def os_class; end

    # Parses a UUID from a string.
    #
    # @raise [ArgumentError]
    #
    # source://uuidtools//lib/uuidtools.rb#154
    def parse(uuid_string); end

    # Parse a UUID from a hexdigest String.
    #
    # source://uuidtools//lib/uuidtools.rb#208
    def parse_hexdigest(uuid_hexdigest); end

    # Parses a UUID from an Integer.
    #
    # source://uuidtools//lib/uuidtools.rb#198
    def parse_int(uuid_int); end

    # Parses a UUID from a raw byte string.
    #
    # source://uuidtools//lib/uuidtools.rb#176
    def parse_raw(raw_string); end

    # Creates a UUID from a random value.
    #
    # source://uuidtools//lib/uuidtools.rb#218
    def random_create; end

    # Creates a UUID using the SHA1 hash.  (Version 5)
    #
    # source://uuidtools//lib/uuidtools.rb#295
    def sha1_create(namespace, name); end

    # Creates a UUID from a timestamp.
    #
    # source://uuidtools//lib/uuidtools.rb#229
    def timestamp_create(timestamp = T.unsafe(nil)); end
  end
end

# Constant that represents the DNS namespace.
#
# source://uuidtools//lib/uuidtools.rb#732
UUIDTools::UUID_DNS_NAMESPACE = T.let(T.unsafe(nil), UUIDTools::UUID)

# Constant that represents the OID namespace.
#
# source://uuidtools//lib/uuidtools.rb#740
UUIDTools::UUID_OID_NAMESPACE = T.let(T.unsafe(nil), UUIDTools::UUID)

# Constant Regexp that matches a UUID and captures its components.
#
# source://uuidtools//lib/uuidtools.rb#727
UUIDTools::UUID_REGEXP = T.let(T.unsafe(nil), Regexp)

# Constant that represents the URL namespace.
#
# source://uuidtools//lib/uuidtools.rb#736
UUIDTools::UUID_URL_NAMESPACE = T.let(T.unsafe(nil), UUIDTools::UUID)

# Constant that represents the X500 namespace.
#
# source://uuidtools//lib/uuidtools.rb#744
UUIDTools::UUID_X500_NAMESPACE = T.let(T.unsafe(nil), UUIDTools::UUID)

# source://uuidtools//lib/uuidtools/version.rb#22
module UUIDTools::VERSION; end

# source://uuidtools//lib/uuidtools/version.rb#23
UUIDTools::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://uuidtools//lib/uuidtools/version.rb#24
UUIDTools::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://uuidtools//lib/uuidtools/version.rb#27
UUIDTools::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://uuidtools//lib/uuidtools/version.rb#25
UUIDTools::VERSION::TINY = T.let(T.unsafe(nil), Integer)

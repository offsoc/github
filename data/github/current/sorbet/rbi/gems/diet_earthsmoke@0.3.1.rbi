# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `diet_earthsmoke` gem.
# Please instead update this file by running `bin/tapioca gem diet_earthsmoke`.

# source://diet_earthsmoke//lib/diet_earthsmoke.rb#8
module DietEarthsmoke
  class << self
    # Embed an ID into some data.
    #
    # data - Binary String data.
    #
    # Returns a binary String.
    #
    # source://diet_earthsmoke//lib/diet_earthsmoke.rb#347
    def embed(id, data); end
  end
end

# source://diet_earthsmoke//lib/diet_earthsmoke.rb#48
DietEarthsmoke::AES_ALGO = T.let(T.unsafe(nil), String)

# source://diet_earthsmoke//lib/diet_earthsmoke.rb#12
class DietEarthsmoke::CipherError < ::DietEarthsmoke::DietEarthsmokeError; end

# We subclass all errors from `DietEarthsmokeError` so that we can catch that
# in `github/github` instead of `StandardError`.
#
# source://diet_earthsmoke//lib/diet_earthsmoke.rb#11
class DietEarthsmoke::DietEarthsmokeError < ::StandardError; end

# source://diet_earthsmoke//lib/diet_earthsmoke.rb#15
class DietEarthsmoke::ExtractionError < ::DietEarthsmoke::DietEarthsmokeError; end

# source://diet_earthsmoke//lib/diet_earthsmoke.rb#50
class DietEarthsmoke::Key
  # Initialize a key from a key name. We can use the key name to find the
  # current key.
  #
  # @raise [KeyParseError]
  # @return [Key] a new instance of Key
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#54
  def initialize(key_name); end

  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#77
  def current_key(scope: T.unsafe(nil)); end

  # Decrypts a high level ciphertext.
  #
  # ciphertext - The ciphertext to decrypt.
  # vault_key_name - The name of the vault key to use.
  # scope - Accepts this argument to provide a cleaner error experience for user.
  #
  # Returns a binary string.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#116
  def decrypt(ciphertext, scope = T.unsafe(nil)); end

  # Encrypts a plaintext to aes and embeds the key_id.
  #
  # plaintext - The plaintext to encrypt.
  # scope - Accepts this argument to. provide a cleaner error experience for user
  #
  # Returns a binary string containing nonce, ciphertext, and tag embedded with key_id.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#155
  def encrypt(plaintext, scope = T.unsafe(nil)); end

  # Export a libsodium scoped keys
  #
  # scope - The scope to export the public key with.
  #
  # Returns a string.
  #
  # @raise [KeyExportError]
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#229
  def export(scope: T.unsafe(nil)); end

  # Open a ciphertext with a RbNaCL private key
  #
  # ciphertext - The ciphertext to open.
  #
  # Returns a string.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#203
  def open(ciphertext, scope: T.unsafe(nil)); end

  # Seal a plaintext with a RbNaCL public key
  #
  # plaintext - The plaintext to seal.
  #
  # Returns a binary string.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#184
  def seal(plaintext, scope: T.unsafe(nil)); end

  private

  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#333
  def decode_key_data(key_data); end

  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#311
  def derive_private_key(key, scope); end

  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#320
  def derive_public_key(key, scope); end

  # Embed an ID into some data.
  #
  # data - Binary String data.
  #
  # Returns a binary String.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#307
  def embed(data); end

  # Extract an ID from some data.
  #
  # data - Binary string with embedded ID.
  #
  # Returns an Array of [id, data].
  #
  # @raise [ExtractionError]
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#273
  def extract(data); end

  # @raise [CipherError]
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#324
  def validate_cipher!(expected_algo, actual_algo); end

  # @raise [CipherError]
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#328
  def validate_plaintext!(plaintext); end
end

# source://diet_earthsmoke//lib/diet_earthsmoke.rb#14
class DietEarthsmoke::KeyExportError < ::DietEarthsmoke::DietEarthsmokeError; end

# source://diet_earthsmoke//lib/diet_earthsmoke.rb#38
class DietEarthsmoke::KeyExportResponse
  # @return [KeyExportResponse] a new instance of KeyExportResponse
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#41
  def initialize(args = T.unsafe(nil)); end

  # Returns the value of attribute current_key_id.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#39
  def current_key_id; end

  # Sets the attribute current_key_id
  #
  # @param value the value to set the attribute current_key_id to.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#39
  def current_key_id=(_arg0); end

  # Returns the value of attribute key_versions.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#39
  def key_versions; end

  # Sets the attribute key_versions
  #
  # @param value the value to set the attribute key_versions to.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#39
  def key_versions=(_arg0); end
end

# source://diet_earthsmoke//lib/diet_earthsmoke.rb#13
class DietEarthsmoke::KeyParseError < ::DietEarthsmoke::DietEarthsmokeError; end

# source://diet_earthsmoke//lib/diet_earthsmoke.rb#18
class DietEarthsmoke::KeyVersion
  # @return [KeyVersion] a new instance of KeyVersion
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#27
  def initialize(args = T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def id; end

  # Sets the attribute id
  #
  # @param value the value to set the attribute id to.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def id=(_arg0); end

  # Returns the value of attribute key_pair_algo.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def key_pair_algo; end

  # Sets the attribute key_pair_algo
  #
  # @param value the value to set the attribute key_pair_algo to.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def key_pair_algo=(_arg0); end

  # Returns the value of attribute private_key.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def private_key; end

  # Sets the attribute private_key
  #
  # @param value the value to set the attribute private_key to.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def private_key=(_arg0); end

  # Returns the value of attribute public_key.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def public_key; end

  # Sets the attribute public_key
  #
  # @param value the value to set the attribute public_key to.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def public_key=(_arg0); end

  # Returns the value of attribute scoping_kdf_secret.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def scoping_kdf_secret; end

  # Sets the attribute scoping_kdf_secret
  #
  # @param value the value to set the attribute scoping_kdf_secret to.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def scoping_kdf_secret=(_arg0); end

  # Returns the value of attribute symmetric_key.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def symmetric_key; end

  # Sets the attribute symmetric_key
  #
  # @param value the value to set the attribute symmetric_key to.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def symmetric_key=(_arg0); end

  # Returns the value of attribute symmetric_key_algo.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def symmetric_key_algo; end

  # Sets the attribute symmetric_key_algo
  #
  # @param value the value to set the attribute symmetric_key_algo to.
  #
  # source://diet_earthsmoke//lib/diet_earthsmoke.rb#19
  def symmetric_key_algo=(_arg0); end
end

# source://diet_earthsmoke//lib/diet_earthsmoke.rb#47
DietEarthsmoke::LIBSODIUM_ALGO = T.let(T.unsafe(nil), String)

# source://diet_earthsmoke//lib/diet_earthsmoke.rb#16
class DietEarthsmoke::UnsupportedError < ::DietEarthsmoke::DietEarthsmokeError; end

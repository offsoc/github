# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Blackbird::Admin::V1::CorpusStatus`.
# Please instead update this file by running `bin/tapioca dsl Blackbird::Admin::V1::CorpusStatus`.

class Blackbird::Admin::V1::CorpusStatus
  sig do
    params(
      active_epoch: T.nilable(T::Boolean),
      binary_version: T.nilable(String),
      cache_cluster: T.nilable(String),
      cluster_name: T.nilable(String),
      corpus_id: T.nilable(Integer),
      corpus_name: T.nilable(String),
      corruption: T.nilable(Float),
      epoch_description: T.nilable(String),
      epoch_id: T.nilable(Integer),
      epoch_mode: T.nilable(T.any(Symbol, Integer)),
      filter_blobs: T.nilable(T::Boolean),
      healing: T.nilable(T::Boolean),
      health_score: T.nilable(Float),
      hosts: T.nilable(T.any(Google::Protobuf::RepeatedField[Blackbird::Admin::V1::HostStatus], T::Array[Blackbird::Admin::V1::HostStatus])),
      index_version: T.nilable(Integer),
      indexing: T.nilable(T::Boolean),
      ingest_mode: T.nilable(String),
      max_repos_indexed: T.nilable(Integer),
      pinned_serving_ts: T.nilable(Google::Protobuf::Int64Value),
      serving: T.nilable(T::Boolean),
      serving_offset: T.nilable(Integer),
      serving_ts: T.nilable(Integer),
      shadow_traffic_percent: T.nilable(Float),
      shard_error: T.nilable(String),
      staleness_seconds: T.nilable(Integer),
      status: T.nilable(String)
    ).void
  end
  def initialize(active_epoch: nil, binary_version: nil, cache_cluster: nil, cluster_name: nil, corpus_id: nil, corpus_name: nil, corruption: nil, epoch_description: nil, epoch_id: nil, epoch_mode: nil, filter_blobs: nil, healing: nil, health_score: nil, hosts: T.unsafe(nil), index_version: nil, indexing: nil, ingest_mode: nil, max_repos_indexed: nil, pinned_serving_ts: nil, serving: nil, serving_offset: nil, serving_ts: nil, shadow_traffic_percent: nil, shard_error: nil, staleness_seconds: nil, status: nil); end

  sig { returns(T::Boolean) }
  def active_epoch; end

  sig { params(value: T::Boolean).void }
  def active_epoch=(value); end

  sig { returns(String) }
  def binary_version; end

  sig { params(value: String).void }
  def binary_version=(value); end

  sig { returns(String) }
  def cache_cluster; end

  sig { params(value: String).void }
  def cache_cluster=(value); end

  sig { void }
  def clear_active_epoch; end

  sig { void }
  def clear_binary_version; end

  sig { void }
  def clear_cache_cluster; end

  sig { void }
  def clear_cluster_name; end

  sig { void }
  def clear_corpus_id; end

  sig { void }
  def clear_corpus_name; end

  sig { void }
  def clear_corruption; end

  sig { void }
  def clear_epoch_description; end

  sig { void }
  def clear_epoch_id; end

  sig { void }
  def clear_epoch_mode; end

  sig { void }
  def clear_filter_blobs; end

  sig { void }
  def clear_healing; end

  sig { void }
  def clear_health_score; end

  sig { void }
  def clear_hosts; end

  sig { void }
  def clear_index_version; end

  sig { void }
  def clear_indexing; end

  sig { void }
  def clear_ingest_mode; end

  sig { void }
  def clear_max_repos_indexed; end

  sig { void }
  def clear_pinned_serving_ts; end

  sig { void }
  def clear_serving; end

  sig { void }
  def clear_serving_offset; end

  sig { void }
  def clear_serving_ts; end

  sig { void }
  def clear_shadow_traffic_percent; end

  sig { void }
  def clear_shard_error; end

  sig { void }
  def clear_staleness_seconds; end

  sig { void }
  def clear_status; end

  sig { returns(String) }
  def cluster_name; end

  sig { params(value: String).void }
  def cluster_name=(value); end

  sig { returns(Integer) }
  def corpus_id; end

  sig { params(value: Integer).void }
  def corpus_id=(value); end

  sig { returns(String) }
  def corpus_name; end

  sig { params(value: String).void }
  def corpus_name=(value); end

  sig { returns(Float) }
  def corruption; end

  sig { params(value: Float).void }
  def corruption=(value); end

  sig { returns(String) }
  def epoch_description; end

  sig { params(value: String).void }
  def epoch_description=(value); end

  sig { returns(Integer) }
  def epoch_id; end

  sig { params(value: Integer).void }
  def epoch_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def epoch_mode; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def epoch_mode=(value); end

  sig { returns(T::Boolean) }
  def filter_blobs; end

  sig { params(value: T::Boolean).void }
  def filter_blobs=(value); end

  sig { returns(T::Boolean) }
  def healing; end

  sig { params(value: T::Boolean).void }
  def healing=(value); end

  sig { returns(Float) }
  def health_score; end

  sig { params(value: Float).void }
  def health_score=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Blackbird::Admin::V1::HostStatus]) }
  def hosts; end

  sig { params(value: Google::Protobuf::RepeatedField[Blackbird::Admin::V1::HostStatus]).void }
  def hosts=(value); end

  sig { returns(Integer) }
  def index_version; end

  sig { params(value: Integer).void }
  def index_version=(value); end

  sig { returns(T::Boolean) }
  def indexing; end

  sig { params(value: T::Boolean).void }
  def indexing=(value); end

  sig { returns(String) }
  def ingest_mode; end

  sig { params(value: String).void }
  def ingest_mode=(value); end

  sig { returns(Integer) }
  def max_repos_indexed; end

  sig { params(value: Integer).void }
  def max_repos_indexed=(value); end

  sig { returns(T.nilable(Google::Protobuf::Int64Value)) }
  def pinned_serving_ts; end

  sig { params(value: T.nilable(Google::Protobuf::Int64Value)).void }
  def pinned_serving_ts=(value); end

  sig { returns(T::Boolean) }
  def serving; end

  sig { params(value: T::Boolean).void }
  def serving=(value); end

  sig { returns(Integer) }
  def serving_offset; end

  sig { params(value: Integer).void }
  def serving_offset=(value); end

  sig { returns(Integer) }
  def serving_ts; end

  sig { params(value: Integer).void }
  def serving_ts=(value); end

  sig { returns(Float) }
  def shadow_traffic_percent; end

  sig { params(value: Float).void }
  def shadow_traffic_percent=(value); end

  sig { returns(String) }
  def shard_error; end

  sig { params(value: String).void }
  def shard_error=(value); end

  sig { returns(Integer) }
  def staleness_seconds; end

  sig { params(value: Integer).void }
  def staleness_seconds=(value); end

  sig { returns(String) }
  def status; end

  sig { params(value: String).void }
  def status=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jwt` gem.
# Please instead update this file by running `bin/tapioca gem jwt`.

# JSON Web Token implementation
#
# Should be up to date with the latest spec:
# https://tools.ietf.org/html/rfc7519
#
# source://jwt//lib/jwt/decode.rb#6
module JWT
  include ::JWT::DefaultOptions

  private

  # source://jwt//lib/jwt.rb#56
  def allowed_algorithms(options); end

  # source://jwt//lib/jwt.rb#25
  def decode(jwt, key = T.unsafe(nil), verify = T.unsafe(nil), custom_options = T.unsafe(nil), &keyfinder); end

  # source://jwt//lib/jwt.rb#41
  def decode_verify_signature(key, header, payload, signature, signing_input, options, &keyfinder); end

  # source://jwt//lib/jwt.rb#20
  def encode(payload, key, algorithm = T.unsafe(nil), header_fields = T.unsafe(nil)); end

  # source://jwt//lib/jwt.rb#50
  def signature_algorithm_and_key(header, payload, key, &keyfinder); end

  class << self
    # source://jwt//lib/jwt.rb#56
    def allowed_algorithms(options); end

    # @raise [JWT::DecodeError]
    #
    # source://jwt//lib/jwt.rb#25
    def decode(jwt, key = T.unsafe(nil), verify = T.unsafe(nil), custom_options = T.unsafe(nil), &keyfinder); end

    # @raise [JWT::IncorrectAlgorithm]
    #
    # source://jwt//lib/jwt.rb#41
    def decode_verify_signature(key, header, payload, signature, signing_input, options, &keyfinder); end

    # source://jwt//lib/jwt.rb#20
    def encode(payload, key, algorithm = T.unsafe(nil), header_fields = T.unsafe(nil)); end

    # @raise [JWT::DecodeError]
    #
    # source://jwt//lib/jwt.rb#50
    def signature_algorithm_and_key(header, payload, key, &keyfinder); end
  end
end

# source://jwt//lib/jwt/algos/hmac.rb#2
module JWT::Algos; end

# source://jwt//lib/jwt/algos/ecdsa.rb#3
module JWT::Algos::Ecdsa
  private

  # source://jwt//lib/jwt/algos/ecdsa.rb#13
  def sign(to_sign); end

  # source://jwt//lib/jwt/algos/ecdsa.rb#24
  def verify(to_verify); end

  class << self
    # source://jwt//lib/jwt/algos/ecdsa.rb#13
    def sign(to_sign); end

    # source://jwt//lib/jwt/algos/ecdsa.rb#24
    def verify(to_verify); end
  end
end

# source://jwt//lib/jwt/algos/ecdsa.rb#7
JWT::Algos::Ecdsa::NAMED_CURVES = T.let(T.unsafe(nil), Hash)

# source://jwt//lib/jwt/algos/ecdsa.rb#6
JWT::Algos::Ecdsa::SUPPORTED = T.let(T.unsafe(nil), String)

# source://jwt//lib/jwt/algos/eddsa.rb#3
module JWT::Algos::Eddsa
  private

  # source://jwt//lib/jwt/algos/eddsa.rb#8
  def sign(to_sign); end

  # source://jwt//lib/jwt/algos/eddsa.rb#15
  def verify(to_verify); end

  class << self
    # @raise [EncodeError]
    #
    # source://jwt//lib/jwt/algos/eddsa.rb#8
    def sign(to_sign); end

    # @raise [IncorrectAlgorithm]
    #
    # source://jwt//lib/jwt/algos/eddsa.rb#15
    def verify(to_verify); end
  end
end

# source://jwt//lib/jwt/algos/eddsa.rb#6
JWT::Algos::Eddsa::SUPPORTED = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/algos/hmac.rb#3
module JWT::Algos::Hmac
  private

  # source://jwt//lib/jwt/algos/hmac.rb#8
  def sign(to_sign); end

  # source://jwt//lib/jwt/algos/hmac.rb#18
  def verify(to_verify); end

  class << self
    # source://jwt//lib/jwt/algos/hmac.rb#8
    def sign(to_sign); end

    # source://jwt//lib/jwt/algos/hmac.rb#18
    def verify(to_verify); end
  end
end

# source://jwt//lib/jwt/algos/hmac.rb#6
JWT::Algos::Hmac::SUPPORTED = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/algos/rsa.rb#3
module JWT::Algos::Rsa
  private

  # source://jwt//lib/jwt/algos/rsa.rb#8
  def sign(to_sign); end

  # source://jwt//lib/jwt/algos/rsa.rb#14
  def verify(to_verify); end

  class << self
    # @raise [EncodeError]
    #
    # source://jwt//lib/jwt/algos/rsa.rb#8
    def sign(to_sign); end

    # source://jwt//lib/jwt/algos/rsa.rb#14
    def verify(to_verify); end
  end
end

# source://jwt//lib/jwt/algos/rsa.rb#6
JWT::Algos::Rsa::SUPPORTED = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/algos/unsupported.rb#3
module JWT::Algos::Unsupported
  private

  # source://jwt//lib/jwt/algos/unsupported.rb#11
  def sign(*_arg0); end

  # source://jwt//lib/jwt/algos/unsupported.rb#7
  def verify(*_arg0); end

  class << self
    # @raise [NotImplementedError]
    #
    # source://jwt//lib/jwt/algos/unsupported.rb#11
    def sign(*_arg0); end

    # @raise [JWT::VerificationError]
    #
    # source://jwt//lib/jwt/algos/unsupported.rb#7
    def verify(*_arg0); end
  end
end

# source://jwt//lib/jwt/algos/unsupported.rb#6
JWT::Algos::Unsupported::SUPPORTED = T.let(T.unsafe(nil), Object)

# Decoding logic for JWT
#
# source://jwt//lib/jwt/decode.rb#8
class JWT::Decode
  # @return [Decode] a new instance of Decode
  #
  # source://jwt//lib/jwt/decode.rb#16
  def initialize(jwt, verify); end

  # source://jwt//lib/jwt/decode.rb#24
  def decode_segments; end

  # Returns the value of attribute header.
  #
  # source://jwt//lib/jwt/decode.rb#9
  def header; end

  # Returns the value of attribute payload.
  #
  # source://jwt//lib/jwt/decode.rb#9
  def payload; end

  # Returns the value of attribute signature.
  #
  # source://jwt//lib/jwt/decode.rb#9
  def signature; end

  private

  # source://jwt//lib/jwt/decode.rb#41
  def decode_header_and_payload(header_segment, payload_segment); end

  # @raise [JWT::DecodeError]
  #
  # source://jwt//lib/jwt/decode.rb#34
  def raw_segments; end

  class << self
    # source://jwt//lib/jwt/decode.rb#11
    def base64url_decode(str); end
  end
end

# source://jwt//lib/jwt/error.rb#5
class JWT::DecodeError < ::StandardError; end

# source://jwt//lib/jwt/default_options.rb#2
module JWT::DefaultOptions; end

# source://jwt//lib/jwt/default_options.rb#3
JWT::DefaultOptions::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# Encoding logic for JWT
#
# source://jwt//lib/jwt/encode.rb#8
class JWT::Encode
  # @return [Encode] a new instance of Encode
  #
  # source://jwt//lib/jwt/encode.rb#15
  def initialize(payload, key, algorithm, header_fields); end

  # Returns the value of attribute algorithm.
  #
  # source://jwt//lib/jwt/encode.rb#9
  def algorithm; end

  # Returns the value of attribute header_fields.
  #
  # source://jwt//lib/jwt/encode.rb#9
  def header_fields; end

  # Returns the value of attribute key.
  #
  # source://jwt//lib/jwt/encode.rb#9
  def key; end

  # Returns the value of attribute payload.
  #
  # source://jwt//lib/jwt/encode.rb#9
  def payload; end

  # Returns the value of attribute segments.
  #
  # source://jwt//lib/jwt/encode.rb#9
  def segments; end

  private

  # source://jwt//lib/jwt/encode.rb#44
  def encode_segments; end

  # source://jwt//lib/jwt/encode.rb#25
  def encoded_header; end

  # @raise [InvalidPayload]
  #
  # source://jwt//lib/jwt/encode.rb#30
  def encoded_payload; end

  # source://jwt//lib/jwt/encode.rb#35
  def encoded_signature(signing_input); end

  class << self
    # source://jwt//lib/jwt/encode.rb#11
    def base64url_encode(str); end
  end
end

# source://jwt//lib/jwt/error.rb#4
class JWT::EncodeError < ::StandardError; end

# source://jwt//lib/jwt/error.rb#7
class JWT::ExpiredSignature < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#9
class JWT::ImmatureSignature < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#8
class JWT::IncorrectAlgorithm < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#12
class JWT::InvalidAudError < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#11
class JWT::InvalidIatError < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#10
class JWT::InvalidIssuerError < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#14
class JWT::InvalidJtiError < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#15
class JWT::InvalidPayload < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#13
class JWT::InvalidSubError < ::JWT::DecodeError; end

# Collection of security methods
#
# @see: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/security_utils.rb
#
# source://jwt//lib/jwt/security_utils.rb#5
module JWT::SecurityUtils
  private

  # source://jwt//lib/jwt/security_utils.rb#23
  def asn1_to_raw(signature, public_key); end

  # source://jwt//lib/jwt/security_utils.rb#28
  def raw_to_asn1(signature, private_key); end

  # source://jwt//lib/jwt/security_utils.rb#35
  def rbnacl_fixup(algorithm, key); end

  # source://jwt//lib/jwt/security_utils.rb#8
  def secure_compare(left, right); end

  # source://jwt//lib/jwt/security_utils.rb#19
  def verify_rsa(algorithm, public_key, signing_input, signature); end

  class << self
    # source://jwt//lib/jwt/security_utils.rb#23
    def asn1_to_raw(signature, public_key); end

    # source://jwt//lib/jwt/security_utils.rb#28
    def raw_to_asn1(signature, private_key); end

    # source://jwt//lib/jwt/security_utils.rb#35
    def rbnacl_fixup(algorithm, key); end

    # source://jwt//lib/jwt/security_utils.rb#8
    def secure_compare(left, right); end

    # source://jwt//lib/jwt/security_utils.rb#19
    def verify_rsa(algorithm, public_key, signing_input, signature); end
  end
end

# Signature logic for JWT
#
# source://jwt//lib/jwt/signature.rb#19
module JWT::Signature
  extend ::JWT::Signature

  # source://jwt//lib/jwt/signature.rb#31
  def sign(algorithm, msg, key); end

  # source://jwt//lib/jwt/signature.rb#38
  def verify(algorithm, key, signing_input, signature); end
end

# source://jwt//lib/jwt/signature.rb#21
JWT::Signature::ALGOS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/signature.rb#28
class JWT::Signature::ToSign < ::Struct
  # Returns the value of attribute algorithm
  #
  # @return [Object] the current value of algorithm
  def algorithm; end

  # Sets the attribute algorithm
  #
  # @param value [Object] the value to set the attribute algorithm to.
  # @return [Object] the newly set value
  def algorithm=(_); end

  # Returns the value of attribute key
  #
  # @return [Object] the current value of key
  def key; end

  # Sets the attribute key
  #
  # @param value [Object] the value to set the attribute key to.
  # @return [Object] the newly set value
  def key=(_); end

  # Returns the value of attribute msg
  #
  # @return [Object] the current value of msg
  def msg; end

  # Sets the attribute msg
  #
  # @param value [Object] the value to set the attribute msg to.
  # @return [Object] the newly set value
  def msg=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://jwt//lib/jwt/signature.rb#29
class JWT::Signature::ToVerify < ::Struct
  # Returns the value of attribute algorithm
  #
  # @return [Object] the current value of algorithm
  def algorithm; end

  # Sets the attribute algorithm
  #
  # @param value [Object] the value to set the attribute algorithm to.
  # @return [Object] the newly set value
  def algorithm=(_); end

  # Returns the value of attribute public_key
  #
  # @return [Object] the current value of public_key
  def public_key; end

  # Sets the attribute public_key
  #
  # @param value [Object] the value to set the attribute public_key to.
  # @return [Object] the newly set value
  def public_key=(_); end

  # Returns the value of attribute signature
  #
  # @return [Object] the current value of signature
  def signature; end

  # Sets the attribute signature
  #
  # @param value [Object] the value to set the attribute signature to.
  # @return [Object] the newly set value
  def signature=(_); end

  # Returns the value of attribute signing_input
  #
  # @return [Object] the current value of signing_input
  def signing_input; end

  # Sets the attribute signing_input
  #
  # @param value [Object] the value to set the attribute signing_input to.
  # @return [Object] the newly set value
  def signing_input=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://jwt//lib/jwt/error.rb#6
class JWT::VerificationError < ::JWT::DecodeError; end

# JWT verify methods
#
# source://jwt//lib/jwt/verify.rb#7
class JWT::Verify
  # @return [Verify] a new instance of Verify
  #
  # source://jwt//lib/jwt/verify.rb#27
  def initialize(payload, options); end

  # @raise [JWT::InvalidAudError]
  #
  # source://jwt//lib/jwt/verify.rb#32
  def verify_aud; end

  # @raise [JWT::ExpiredSignature]
  #
  # source://jwt//lib/jwt/verify.rb#39
  def verify_expiration; end

  # @raise [JWT::InvalidIatError]
  #
  # source://jwt//lib/jwt/verify.rb#44
  def verify_iat; end

  # @raise [JWT::InvalidIssuerError]
  #
  # source://jwt//lib/jwt/verify.rb#51
  def verify_iss; end

  # source://jwt//lib/jwt/verify.rb#61
  def verify_jti; end

  # @raise [JWT::ImmatureSignature]
  #
  # source://jwt//lib/jwt/verify.rb#73
  def verify_not_before; end

  # @raise [JWT::InvalidSubError]
  #
  # source://jwt//lib/jwt/verify.rb#78
  def verify_sub; end

  private

  # source://jwt//lib/jwt/verify.rb#90
  def exp_leeway; end

  # source://jwt//lib/jwt/verify.rb#86
  def global_leeway; end

  # source://jwt//lib/jwt/verify.rb#94
  def iat_leeway; end

  # source://jwt//lib/jwt/verify.rb#98
  def nbf_leeway; end

  class << self
    # source://jwt//lib/jwt/verify.rb#14
    def verify_aud(payload, options); end

    # source://jwt//lib/jwt/verify.rb#19
    def verify_claims(payload, options); end

    # source://jwt//lib/jwt/verify.rb#14
    def verify_expiration(payload, options); end

    # source://jwt//lib/jwt/verify.rb#14
    def verify_iat(payload, options); end

    # source://jwt//lib/jwt/verify.rb#14
    def verify_iss(payload, options); end

    # source://jwt//lib/jwt/verify.rb#14
    def verify_jti(payload, options); end

    # source://jwt//lib/jwt/verify.rb#14
    def verify_not_before(payload, options); end

    # source://jwt//lib/jwt/verify.rb#14
    def verify_sub(payload, options); end
  end
end

# source://jwt//lib/jwt/verify.rb#8
JWT::Verify::DEFAULTS = T.let(T.unsafe(nil), Hash)

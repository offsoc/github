# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate`.

class Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate
  sig do
    params(
      annotations: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Actions::V0::Entities::Annotation], T::Array[Hydro::Schemas::Github::Actions::V0::Entities::Annotation])),
      artifacts: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Actions::V0::Entities::Artifact], T::Array[Hydro::Schemas::Github::Actions::V0::Entities::Artifact])),
      check_run_id: T.nilable(String),
      complete: T.nilable(Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::JobComplete),
      concurrency: T.nilable(Hydro::Schemas::Github::Actions::V0::Entities::Concurrency),
      delayed: T.nilable(T::Boolean),
      display_name: T.nilable(String),
      duration_ms: T.nilable(Integer),
      environment: T.nilable(Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::Environment),
      external_id: T.nilable(String),
      in_progress: T.nilable(Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::JobInProgress),
      is_cloned_from_previous_run: T.nilable(T::Boolean),
      job_id: T.nilable(String),
      job_key: T.nilable(String),
      labels: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      number: T.nilable(Integer),
      parent_job_id: T.nilable(String),
      runner_group_id: T.nilable(Integer),
      runner_group_name: T.nilable(String),
      runner_id: T.nilable(Integer),
      runner_name: T.nilable(String),
      runtime: T.nilable(String),
      runtime_version: T.nilable(String),
      self_hosted: T.nilable(T::Boolean),
      steps: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::JobStep], T::Array[Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::JobStep]))
    ).void
  end
  def initialize(annotations: T.unsafe(nil), artifacts: T.unsafe(nil), check_run_id: nil, complete: nil, concurrency: nil, delayed: nil, display_name: nil, duration_ms: nil, environment: nil, external_id: nil, in_progress: nil, is_cloned_from_previous_run: nil, job_id: nil, job_key: nil, labels: T.unsafe(nil), number: nil, parent_job_id: nil, runner_group_id: nil, runner_group_name: nil, runner_id: nil, runner_name: nil, runtime: nil, runtime_version: nil, self_hosted: nil, steps: T.unsafe(nil)); end

  sig { returns(T.nilable(Symbol)) }
  def Progress; end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Actions::V0::Entities::Annotation]) }
  def annotations; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Actions::V0::Entities::Annotation]
    ).void
  end
  def annotations=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Actions::V0::Entities::Artifact]) }
  def artifacts; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Actions::V0::Entities::Artifact]).void }
  def artifacts=(value); end

  sig { returns(String) }
  def check_run_id; end

  sig { params(value: String).void }
  def check_run_id=(value); end

  sig { void }
  def clear_annotations; end

  sig { void }
  def clear_artifacts; end

  sig { void }
  def clear_check_run_id; end

  sig { void }
  def clear_complete; end

  sig { void }
  def clear_concurrency; end

  sig { void }
  def clear_delayed; end

  sig { void }
  def clear_display_name; end

  sig { void }
  def clear_duration_ms; end

  sig { void }
  def clear_environment; end

  sig { void }
  def clear_external_id; end

  sig { void }
  def clear_in_progress; end

  sig { void }
  def clear_is_cloned_from_previous_run; end

  sig { void }
  def clear_job_id; end

  sig { void }
  def clear_job_key; end

  sig { void }
  def clear_labels; end

  sig { void }
  def clear_number; end

  sig { void }
  def clear_parent_job_id; end

  sig { void }
  def clear_runner_group_id; end

  sig { void }
  def clear_runner_group_name; end

  sig { void }
  def clear_runner_id; end

  sig { void }
  def clear_runner_name; end

  sig { void }
  def clear_runtime; end

  sig { void }
  def clear_runtime_version; end

  sig { void }
  def clear_self_hosted; end

  sig { void }
  def clear_steps; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::JobComplete)) }
  def complete; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::JobComplete)).void }
  def complete=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Actions::V0::Entities::Concurrency)) }
  def concurrency; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Actions::V0::Entities::Concurrency)).void }
  def concurrency=(value); end

  sig { returns(T::Boolean) }
  def delayed; end

  sig { params(value: T::Boolean).void }
  def delayed=(value); end

  sig { returns(String) }
  def display_name; end

  sig { params(value: String).void }
  def display_name=(value); end

  sig { returns(Integer) }
  def duration_ms; end

  sig { params(value: Integer).void }
  def duration_ms=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::Environment)) }
  def environment; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::Environment)).void }
  def environment=(value); end

  sig { returns(String) }
  def external_id; end

  sig { params(value: String).void }
  def external_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::JobInProgress)) }
  def in_progress; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::JobInProgress)).void }
  def in_progress=(value); end

  sig { returns(T::Boolean) }
  def is_cloned_from_previous_run; end

  sig { params(value: T::Boolean).void }
  def is_cloned_from_previous_run=(value); end

  sig { returns(String) }
  def job_id; end

  sig { params(value: String).void }
  def job_id=(value); end

  sig { returns(String) }
  def job_key; end

  sig { params(value: String).void }
  def job_key=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def labels; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def labels=(value); end

  sig { returns(Integer) }
  def number; end

  sig { params(value: Integer).void }
  def number=(value); end

  sig { returns(String) }
  def parent_job_id; end

  sig { params(value: String).void }
  def parent_job_id=(value); end

  sig { returns(Integer) }
  def runner_group_id; end

  sig { params(value: Integer).void }
  def runner_group_id=(value); end

  sig { returns(String) }
  def runner_group_name; end

  sig { params(value: String).void }
  def runner_group_name=(value); end

  sig { returns(Integer) }
  def runner_id; end

  sig { params(value: Integer).void }
  def runner_id=(value); end

  sig { returns(String) }
  def runner_name; end

  sig { params(value: String).void }
  def runner_name=(value); end

  sig { returns(String) }
  def runtime; end

  sig { params(value: String).void }
  def runtime=(value); end

  sig { returns(String) }
  def runtime_version; end

  sig { params(value: String).void }
  def runtime_version=(value); end

  sig { returns(T::Boolean) }
  def self_hosted; end

  sig { params(value: T::Boolean).void }
  def self_hosted=(value); end

  sig do
    returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::JobStep])
  end
  def steps; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Actions::V0::WorkflowUpdate::JobUpdate::JobStep]
    ).void
  end
  def steps=(value); end
end

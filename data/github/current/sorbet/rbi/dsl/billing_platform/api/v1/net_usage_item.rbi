# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `BillingPlatform::Api::V1::NetUsageItem`.
# Please instead update this file by running `bin/tapioca dsl BillingPlatform::Api::V1::NetUsageItem`.

class BillingPlatform::Api::V1::NetUsageItem
  sig do
    params(
      appliedCostPerQuantity: T.nilable(Float),
      discountAmount: T.nilable(Float),
      friendlySkuName: T.nilable(String),
      fullQuantity: T.nilable(Float),
      grossAmount: T.nilable(Float),
      netAmount: T.nilable(Float),
      orgId: T.nilable(Integer),
      product: T.nilable(String),
      quantity: T.nilable(Float),
      repoId: T.nilable(Integer),
      selfReference: T.nilable(BillingPlatform::Base::Key),
      sku: T.nilable(String),
      unitType: T.nilable(T.any(Symbol, Integer)),
      usageAt: T.nilable(Integer),
      usageEntityId: T.nilable(String)
    ).void
  end
  def initialize(appliedCostPerQuantity: nil, discountAmount: nil, friendlySkuName: nil, fullQuantity: nil, grossAmount: nil, netAmount: nil, orgId: nil, product: nil, quantity: nil, repoId: nil, selfReference: nil, sku: nil, unitType: nil, usageAt: nil, usageEntityId: nil); end

  sig { returns(Float) }
  def appliedCostPerQuantity; end

  sig { params(value: Float).void }
  def appliedCostPerQuantity=(value); end

  sig { void }
  def clear_appliedCostPerQuantity; end

  sig { void }
  def clear_discountAmount; end

  sig { void }
  def clear_friendlySkuName; end

  sig { void }
  def clear_fullQuantity; end

  sig { void }
  def clear_grossAmount; end

  sig { void }
  def clear_netAmount; end

  sig { void }
  def clear_orgId; end

  sig { void }
  def clear_product; end

  sig { void }
  def clear_quantity; end

  sig { void }
  def clear_repoId; end

  sig { void }
  def clear_selfReference; end

  sig { void }
  def clear_sku; end

  sig { void }
  def clear_unitType; end

  sig { void }
  def clear_usageAt; end

  sig { void }
  def clear_usageEntityId; end

  sig { returns(Float) }
  def discountAmount; end

  sig { params(value: Float).void }
  def discountAmount=(value); end

  sig { returns(String) }
  def friendlySkuName; end

  sig { params(value: String).void }
  def friendlySkuName=(value); end

  sig { returns(Float) }
  def fullQuantity; end

  sig { params(value: Float).void }
  def fullQuantity=(value); end

  sig { returns(Float) }
  def grossAmount; end

  sig { params(value: Float).void }
  def grossAmount=(value); end

  sig { returns(Float) }
  def netAmount; end

  sig { params(value: Float).void }
  def netAmount=(value); end

  sig { returns(Integer) }
  def orgId; end

  sig { params(value: Integer).void }
  def orgId=(value); end

  sig { returns(String) }
  def product; end

  sig { params(value: String).void }
  def product=(value); end

  sig { returns(Float) }
  def quantity; end

  sig { params(value: Float).void }
  def quantity=(value); end

  sig { returns(Integer) }
  def repoId; end

  sig { params(value: Integer).void }
  def repoId=(value); end

  sig { returns(T.nilable(BillingPlatform::Base::Key)) }
  def selfReference; end

  sig { params(value: T.nilable(BillingPlatform::Base::Key)).void }
  def selfReference=(value); end

  sig { returns(String) }
  def sku; end

  sig { params(value: String).void }
  def sku=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def unitType; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def unitType=(value); end

  sig { returns(Integer) }
  def usageAt; end

  sig { params(value: Integer).void }
  def usageAt=(value); end

  sig { returns(String) }
  def usageEntityId; end

  sig { params(value: String).void }
  def usageEntityId=(value); end
end

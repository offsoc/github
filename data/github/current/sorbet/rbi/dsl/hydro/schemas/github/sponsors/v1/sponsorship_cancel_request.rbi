# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Sponsors::V1::SponsorshipCancelRequest`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Sponsors::V1::SponsorshipCancelRequest`.

class Hydro::Schemas::Github::Sponsors::V1::SponsorshipCancelRequest
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      forced: T.nilable(T::Boolean),
      listing: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing),
      listing_stafftools_metadata: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListingStafftoolsMetadata),
      reason: T.nilable(T.any(Symbol, Integer)),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      sponsor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      sponsorable: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      sponsorship: T.nilable(Hydro::Schemas::Github::Sponsors::V0::Entities::Sponsorship),
      tier: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsTier)
    ).void
  end
  def initialize(actor: nil, forced: nil, listing: nil, listing_stafftools_metadata: nil, reason: nil, request_context: nil, sponsor: nil, sponsorable: nil, sponsorship: nil, tier: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_forced; end

  sig { void }
  def clear_listing; end

  sig { void }
  def clear_listing_stafftools_metadata; end

  sig { void }
  def clear_reason; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_sponsor; end

  sig { void }
  def clear_sponsorable; end

  sig { void }
  def clear_sponsorship; end

  sig { void }
  def clear_tier; end

  sig { returns(T::Boolean) }
  def forced; end

  sig { params(value: T::Boolean).void }
  def forced=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing)) }
  def listing; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing)).void }
  def listing=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListingStafftoolsMetadata)) }
  def listing_stafftools_metadata; end

  sig do
    params(
      value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListingStafftoolsMetadata)
    ).void
  end
  def listing_stafftools_metadata=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def reason; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def reason=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def sponsor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def sponsor=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def sponsorable; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def sponsorable=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V0::Entities::Sponsorship)) }
  def sponsorship; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V0::Entities::Sponsorship)).void }
  def sponsorship=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsTier)) }
  def tier; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsTier)).void }
  def tier=(value); end
end

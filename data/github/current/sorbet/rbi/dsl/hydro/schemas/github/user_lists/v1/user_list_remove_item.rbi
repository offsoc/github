# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::UserLists::V1::UserListRemoveItem`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::UserLists::V1::UserListRemoveItem`.

class Hydro::Schemas::Github::UserLists::V1::UserListRemoveItem
  sig do
    params(
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      user_list: T.nilable(Hydro::Schemas::Github::UserLists::V1::Entities::UserList),
      user_list_item: T.nilable(Hydro::Schemas::Github::UserLists::V1::Entities::UserListItem)
    ).void
  end
  def initialize(repository: nil, repository_owner: nil, request_context: nil, user: nil, user_list: nil, user_list_item: nil); end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_user; end

  sig { void }
  def clear_user_list; end

  sig { void }
  def clear_user_list_item; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::UserLists::V1::Entities::UserList)) }
  def user_list; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::UserLists::V1::Entities::UserList)).void }
  def user_list=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::UserLists::V1::Entities::UserListItem)) }
  def user_list_item; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::UserLists::V1::Entities::UserListItem)).void }
  def user_list_item=(value); end
end

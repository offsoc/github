# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::MergeQueue::V1::MergeGroupEntryEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::MergeQueue::V1::MergeGroupEntryEvent`.

class Hydro::Schemas::Github::MergeQueue::V1::MergeGroupEntryEvent
  sig do
    params(
      event: T.nilable(T.any(Symbol, Integer)),
      group_entry: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry),
      merge_group: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup),
      protected_branch: T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch),
      queue: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueue),
      queue_entry: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      required_status_checks: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::RequiredStatusCheck], T::Array[Hydro::Schemas::Github::MergeQueue::V1::Entities::RequiredStatusCheck]))
    ).void
  end
  def initialize(event: nil, group_entry: nil, merge_group: nil, protected_branch: nil, queue: nil, queue_entry: nil, repository: nil, required_status_checks: T.unsafe(nil)); end

  sig { void }
  def clear_event; end

  sig { void }
  def clear_group_entry; end

  sig { void }
  def clear_merge_group; end

  sig { void }
  def clear_protected_branch; end

  sig { void }
  def clear_queue; end

  sig { void }
  def clear_queue_entry; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_required_status_checks; end

  sig { returns(T.any(Symbol, Integer)) }
  def event; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def event=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry)) }
  def group_entry; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry)).void }
  def group_entry=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup)) }
  def merge_group; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup)).void }
  def merge_group=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch)) }
  def protected_branch; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch)).void }
  def protected_branch=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueue)) }
  def queue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueue)).void }
  def queue=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry)) }
  def queue_entry; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry)).void }
  def queue_entry=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig do
    returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::RequiredStatusCheck])
  end
  def required_status_checks; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::RequiredStatusCheck]
    ).void
  end
  def required_status_checks=(value); end
end

syntax = "proto3";

package actions.core.v1;

option go_package = "core/v1";
option ruby_package = "MonolithTwirp::Actions::Core::V1";

import "core/v1/identity.proto";

service WorkflowDetailsAPI {
  // GetBillingDetails retrieves Actions billing info for a given
  // repository
  rpc GetBillingDetails(GetBillingDetailsRequest) returns (GetBillingDetailsResponse);

  // GetBillingDetailsForEntity retrieves Actions billing info for a given organization, enterprise, or repository
  rpc GetBillingDetailsForEntity(GetBillingDetailsForEntityRequest) returns (GetBillingDetailsForEntityResponse);
}

message GetBillingDetailsRequest {
  // repository_id is the global ID
  Identity repository_id = 1;
}

message GetBillingDetailsResponse {
  // Indicates if the repository can use Actions
  bool is_actions_usage_allowed = 1;

  // Indicates if the repository can use Actions storage (artifacts)
  bool is_actions_storage_allowed = 2;

  // Indicates if the repository owner is spammy
  bool is_owner_spammy = 3;
}

message GetBillingDetailsForEntityRequest {
  // entity_id is the global ID
  Identity entity_id = 1;
  // product_sku is the name of the product sku for the runner
  string product_sku = 2;
}

message GetBillingDetailsForEntityResponse {
  // Indicates if the entity can use Actions
  bool is_actions_usage_allowed = 1;

  // Indicates if the entity can use Actions storage (artifacts)
  bool is_actions_storage_allowed = 2;

  // Indicates if the entity owner is spammy
  bool is_owner_spammy = 3;
}


# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::OrganizationRetryInvitation`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::OrganizationRetryInvitation`.

class Hydro::Schemas::Github::V1::OrganizationRetryInvitation
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      email: T.nilable(Google::Protobuf::StringValue),
      invitation: T.nilable(Hydro::Schemas::Github::V1::Entities::OrganizationInvitation),
      organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      organization_profile: T.nilable(Hydro::Schemas::Github::V1::Entities::Profile),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(actor: nil, email: nil, invitation: nil, organization: nil, organization_profile: nil, request_context: nil, user: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_email; end

  sig { void }
  def clear_invitation; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_organization_profile; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_user; end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def email; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def email=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::OrganizationInvitation)) }
  def invitation; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::OrganizationInvitation)).void }
  def invitation=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def organization=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Profile)) }
  def organization_profile; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Profile)).void }
  def organization_profile=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end
end

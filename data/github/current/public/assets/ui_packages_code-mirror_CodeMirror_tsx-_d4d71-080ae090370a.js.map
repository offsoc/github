{"version":3,"file":"chunk-ui_packages_code-mirror_CodeMirror_tsx-_d4d71-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/hotkey/hotkey.ts","ui/packages/hotkey/keyboard-shortcuts-helper.ts","ui/packages/code-mirror/extensions/basic-setup.ts","ui/packages/code-mirror/themes/github-theme.ts","ui/packages/code-mirror/extensions/spacing-controls.ts","ui/packages/code-mirror/extensions/file-upload.ts","ui/packages/code-mirror/extensions/markdown.ts","ui/packages/code-mirror/autocomplete/emoji-autocomplete.ts","ui/packages/code-mirror/decorations/lint-mark.ts","ui/packages/code-mirror/extensions/secret-detected.ts","ui/packages/code-mirror/themes/language-themes.ts","ui/packages/code-mirror/extensions/focus-trap-toggle.ts","ui/packages/code-mirror/CodeMirror.tsx","ui/packages/code-mirror/hooks/use-code-mirror.ts","ui/packages/code-mirror/extensions/scroller-attributes.ts","ui/packages/code-mirror/extensions/data-hpc.ts","ui/packages/code-mirror/extensions/readonly.ts","ui/packages/code-mirror/extensions/utils.ts"],"sourcesContent":["// this file is a shim to allow importing @github/hotkey and is the only allowed import for @github/hotkey\n// eslint-disable-next-line no-restricted-imports\nexport * from '@github/hotkey'\n\n// - (?:^|,)    Starting with the beginning of the string or the comma delineating the previous item\n// - ((?:[^,]|,(?=\\+| |$))*(?:,(?=,))?)    The target capture group, consisting of:\n//   - (?:[^,]|,(?=\\+| |$))*    Any number of characters that are not commas, or are commas that are followed by a\n//     plus sign, space, or end of string (ie, the commas in `,+Control` or `Control+, g` or `Control+,`)\n//   - (?:,(?=,))?    Optionally ending with a comma followed by another comma, like the commas in `Control+,,n` or\n//     `Control+,,,`\n// - (?=,|$)    Ending with a comma or the end of the string\nconst chordOrKeyRegex = /(?:^|,)((?:[^,]|,(?=\\+| |$))*(?:,(?=,))?)/g\n\nexport function splitHotkeyString(hotkey: string) {\n  // \",\" is a valid key name, so we can't just use `String.split()`. Even with a regular expression we can't split, for\n  // example \"Control+,,,\" into [\"Control+,\", \",\"] without a lookbehind (not supported in Safari).\n\n  // Instead, we match against all valid substrings:\n  return Array.from(hotkey.matchAll(chordOrKeyRegex)).map(([, chord]) => chord!)\n}\n","import {eventToHotkeyString} from './hotkey'\n\n/** Returns false if a user has explicitly disabled character key shortcuts. */\nexport const areCharacterKeyShortcutsEnabled = () => {\n  const keyboardShortcutsPreference = document.querySelector<HTMLMetaElement>(\n    'meta[name=keyboard-shortcuts-preference]',\n  )\n  if (keyboardShortcutsPreference) {\n    return keyboardShortcutsPreference.content === 'all'\n  }\n  return true\n}\n\n/**\n * Character-key shortcuts are implemented only with lowercase characters (\"g\", \"g f\"), uppercase characters (\"Shift+A\", \"a\"),\n * symbols (\"Alt+g\"), and punctuation (\"?\", \"!\", \"/\").\n *\n * Returns true if string is NOT what we define as a character key shortcut.\n */\nexport const isNonCharacterKeyShortcut = (hotkey: string) => {\n  return /Enter|Arrow|Escape|Meta|Control|Mod|Esc/.test(hotkey) || (hotkey.includes('Alt') && hotkey.includes('Shift'))\n}\n\nconst nonEditableInputTypes = new Set([\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit',\n])\n\n/**\n * Returns true if `element` is editable - that is, if it can be focused and typed in like an input or textarea.\n */\nexport function isEditableElement(target: EventTarget | null): boolean {\n  if (!(target instanceof HTMLElement)) return false\n\n  const name = target.nodeName.toLowerCase()\n  const type = target.getAttribute('type')?.toLowerCase() ?? 'text'\n\n  const isReadonly =\n    target.ariaReadOnly === 'true' ||\n    target.getAttribute('aria-readonly') === 'true' ||\n    target.getAttribute('readonly') !== null\n\n  return (\n    (name === 'select' ||\n      name === 'textarea' ||\n      (name === 'input' && !nonEditableInputTypes.has(type)) ||\n      target.isContentEditable) &&\n    !isReadonly\n  )\n}\n\n/**\n * Returns false if a user settings has character key shortcut disabled and keyboard event corresponds to a character\n * key shortcut. Character key shortcuts are never enabled on editable form inputs.\n */\nexport const isShortcutAllowed = (event: KeyboardEvent) => {\n  const hotkey = eventToHotkeyString(event)\n\n  // Never allow character key shortcuts in inputs\n  const allowCharacterKeyShortcuts = areCharacterKeyShortcutsEnabled() && !isEditableElement(event.target)\n\n  return isNonCharacterKeyShortcut(hotkey) || allowCharacterKeyShortcuts\n}\n","import {defaultKeymap, history, historyKeymap} from '@codemirror/commands'\nimport {search, searchKeymap} from '@codemirror/search'\nimport type {Extension} from '@codemirror/state'\nimport {EditorView, type KeyBinding, keymap, lineNumbers, tooltips} from '@codemirror/view'\nimport {bracketMatching, indentOnInput} from '@codemirror/language'\nimport {areCharacterKeyShortcutsEnabled} from '@github-ui/hotkey/keyboard-shortcuts-helper'\n\n// instead of trying to find and delete specific keymaps, we're going to catch them, mark them handled, and prevent them from bubbling\nconst specialCharacterKeyShortcuts: KeyBinding[] = (() => {\n  if (!areCharacterKeyShortcutsEnabled()) {\n    // We treat `Alt+G` as a character key shortcut because it is equivalent to a special character.\n    return [\n      {\n        key: 'Alt-g',\n        run: () => {\n          return true\n        },\n        preventDefault: true, // dont bubble up\n      },\n    ]\n  }\n\n  return []\n})()\n\nexport const basicSetup: Extension[] = (() => [\n  history(),\n  indentOnInput(),\n  lineNumbers(),\n  bracketMatching(),\n  tooltips({position: 'absolute'}),\n  search({top: true}),\n  EditorView.editorAttributes.of({\n    class: 'js-codemirror-editor',\n    'data-testid': 'codemirror-editor',\n  }),\n  keymap.of([...specialCharacterKeyShortcuts, ...defaultKeymap, ...searchKeymap, ...historyKeymap]),\n])()\n","import {EditorView} from '@codemirror/view'\nimport {HighlightStyle, type TagStyle, syntaxHighlighting} from '@codemirror/language'\nimport {tags as t} from '@lezer/highlight'\n\nconst ghTheme = {\n  '&': {\n    background: 'var(--codeMirror-bgColor, var(--color-codemirror-bg))',\n    color: 'var(--codeMirror-fgColor, var(--color-codemirror-text))',\n    cursor: 'text',\n  },\n\n  '.cm-gutters': {\n    background: 'var(--codeMirror-gutters-bgColor, var(--color-codemirror-gutters-bg))',\n    borderRightWidth: 0,\n  },\n  '.cm-lineNumbers .cm-gutterElement': {\n    color: 'var(--codeMirror-lineNumber-fgColor, var(--color-codemirror-linenumber-text))',\n    fontFamily: 'var(--fontStack-monospace)',\n    fontSize: '12px',\n    lineHeight: '20px',\n    padding: '0 16px 0 16px',\n  },\n\n  '.cm-content': {\n    caretColor: 'var(--codeMirror-cursor-fgColor, var(--color-codemirror-cursor))',\n    fontFamily: 'var(--fontStack-monospace)',\n    fontSize: '12px',\n    background: 'var(--codeMirror-lines-bgColor, var(--color-codemirror-lines-bg))',\n    lineHeight: '20px',\n    paddingTop: '8px',\n  },\n\n  '&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection': {\n    backgroundColor: 'var(--codeMirror-selection-bgColor, var(--color-codemirror-selection-bg, #d7d4f0))',\n  },\n\n  '&.cm-focused': {\n    outline: 'none',\n  },\n\n  '&.hide-help-until-focus': {\n    '&.cm-focused .cm-panels-bottom': {\n      display: 'block',\n    },\n\n    '& .cm-panels-bottom': {\n      display: 'none',\n    },\n  },\n\n  '.cm-content ::-moz-selection': {\n    backgroundColor: 'var(--codeMirror-selection-bgColor, var(--color-codemirror-selection-bg, #d7d4f0))',\n  },\n\n  '.cm-activeLine': {\n    backgroundColor: 'var(--codeMirror-activeline-bgColor, var(--color-codemirror-activeline-bg))',\n  },\n\n  '.cm-line': {\n    paddingLeft: '16px',\n  },\n\n  '.cm-help-panel': {\n    background: 'var(--bgColor-muted, var(--color-canvas-subtle))',\n    padding: '7px 10px',\n    margin: 0,\n    fontSize: '13px',\n    lineHeight: '16px',\n    color: 'var(--fgColor-muted, var(--color-fg-muted))',\n    cursor: 'default',\n  },\n\n  '.cm-panels-bottom': {\n    borderTop: 'var(--borderWidth-thin, 1px) solid var(--borderColor-default, var(--color-border-default))',\n    background: 'none',\n  },\n\n  // this adjusts the position of the help panel to account for the sticky markdown footer\n  // the & isnt standard css, it's a placeholder for CM6 to insert the generated editor class name\n  '.js-upload-markdown-image & .cm-panels-bottom': {\n    bottom: '30px !important',\n  },\n\n  '.cm-panel.cm-search': {\n    background: 'var(--bgColor-muted, var(--color-canvas-subtle))',\n    padding: '8px',\n    fontSize: '16px',\n  },\n\n  '.cm-panel.cm-search > button': {\n    borderRadius: '6px',\n    padding: '4px 8px',\n    background: 'var(--codeMirror-bgColor, var(--color-codemirror-bg))',\n    color: 'var(--button-default-fgColor-rest, var(--color-btn-text))',\n    border: '1px solid var(--button-default-borderColor-rest, var(--color-btn-border))',\n    textTransform: 'capitalize',\n  },\n\n  '.cm-panel.cm-search > label': {\n    color: 'var(--fgColor-default, var(--color-fg-default))',\n    textTransform: 'capitalize',\n    fontSize: '12px',\n  },\n\n  '.cm-panel.cm-search > input': {\n    borderRadius: '6px',\n    padding: '4px 8px',\n    background: 'var(--bgColor-default, var(--color-canvas-default))',\n    color: 'var(--fgColor-default, var(--color-fg-default))',\n    border: '1px solid var(--borderColor-default, var(--color-border-default))',\n    fontSize: '12px',\n  },\n\n  '.cm-panel.cm-search > button[name=\"close\"]': {\n    padding: '4px',\n  },\n\n  '.cm-panels-top': {\n    borderBottom: 'var(--borderWidth-thin, 1px) solid var(--color-border-default)',\n    background: 'none',\n  },\n\n  '.cm-panel.cm-search input, .cm-panel.cm-search button, .cm-panel.cm-search label': {\n    marginRight: '8px',\n    marginBottom: '4px',\n    marginTop: '4px',\n    marginLeft: 0,\n  },\n\n  '.cm-lintRange': {\n    cursor: 'help',\n    // prefer using lint-mark styles in /workspaces/github/app/assets/stylesheets/bundles/github/blob-editor.scss\n    backgroundImage: 'none !important',\n  },\n\n  // Resolves an issue where multiline placeholder values cause the\n  // fake CodeMirror cursor to expand to the height of that content\n  '.cm-placeholder': {\n    height: '1em',\n  },\n\n  '&.custom-tooltips .cm-tooltip': {\n    border: 'none !important',\n    backgroundColor: 'transparent !important',\n  },\n\n  '&.custom-tooltips .cm-diagnostic': {\n    padding: 0,\n    marginLeft: '0 !important',\n    borderLeft: 'none !important',\n    whiteSpace: 'unset',\n  },\n}\n\n// Simple highlighting missing entity and support highlighting from the old codemirror\n// The new codemirror gives a lot more control over how things are highlighted maybe we should look at constructing\n// a new, more detailed syntax theme\nconst githubDefaultHighlights: TagStyle[] = [\n  {tag: [t.keyword], color: 'var(--codeMirror-syntax-fgColor-keyword, var(--color-codemirror-syntax-keyword))'},\n  {tag: [t.comment], color: 'var(--codeMirror-syntax-fgColor-comment, var(--color-codemirror-syntax-comment))'},\n  // No way in the new one to tell if a bracket is matching to my knowledge\n  {tag: [t.bracket], color: 'var(--codeMirror-matchingBracket-fgColor, var(--color-codemirror-matchingbracket-text))'},\n  {\n    tag: [t.string, t.url, t.regexp],\n    color: 'var(--codeMirror-syntax-fgColor-string, var(--color-codemirror-syntax-string))',\n  },\n  {\n    tag: [t.constant(t.name), t.propertyName, t.attributeName],\n    color: 'var(--codeMirror-syntax-fgColor-constant, var(--color-codemirror-syntax-constant))',\n  },\n  {\n    tag: [t.atom, t.number, t.bool],\n    color: 'var(--codeMirror-syntax-fgColor-constant, var(--color-codemirror-syntax-constant))',\n  },\n  {\n    tag: [t.function(t.variableName)],\n    color: 'var(--codeMirror-syntax-fgColor-entity, var(--color-codemirror-syntax-entity))',\n  },\n  {\n    tag: t.definition(t.variableName),\n    color: 'var(--codeMirror-syntax-fgColor-variable, var(--color-codemirror-syntax-variable))',\n  },\n  {tag: t.meta, color: 'inherit'},\n  {tag: t.heading, fontWeight: 'bold', color: 'inherit !important'},\n  {tag: t.monospace, color: 'var(--codeMirror-syntax-fgColor-comment, var(--color-codemirror-syntax-comment))'}, // markdown code blocks\n]\n\n// empty for now but a dark mode placeholder\nconst darkModeHighlights: TagStyle[] = []\n\n// default styles taken from @codemirror/language\nexport const codemirrorDefaultHighlightStyle = [\n  // uncommented lines are used from the default theme without overrides\n  {tag: t.link, textDecoration: 'underline'},\n  {tag: t.emphasis, fontStyle: 'italic'},\n  {tag: t.strong, fontWeight: 'bold'},\n  {tag: t.strikethrough, textDecoration: 'line-through'},\n\n  // remaining commented out for reference until needed for overrides\n  // {tag: [t.contentSeparator, t.labelName], color: '#219'},\n  // {tag: [t.literal, t.inserted], color: '#164'},\n  // {tag: [t.deleted], color: '#a11'},\n  // {tag: [t.regexp, t.escape, t.special(t.string)], color: '#e40'},\n  // {tag: t.local(t.variableName), color: '#30a'},\n  // {tag: [t.typeName, t.namespace], color: '#085'},\n  // {tag: t.className, color: '#167'},\n  // {tag: [t.special(t.variableName), t.macroName], color: '#256'},\n  // {tag: t.definition(t.propertyName), color: '#00c'},\n  // {tag: t.invalid, color: '#f00'},\n]\n\nconst githubLightHighlightStyle = [...githubDefaultHighlights, ...codemirrorDefaultHighlightStyle]\nconst githubDarkHighlightStyle = [...githubDefaultHighlights, ...darkModeHighlights, ...codemirrorDefaultHighlightStyle]\n\nexport function getTheme(additionalStyles: TagStyle[] = []) {\n  const isDarkMode = document.querySelector('[data-color-mode=\"dark\"]') !== null\n\n  const baseHighlightStyles = isDarkMode ? githubDarkHighlightStyle : githubLightHighlightStyle\n  const extendedHighlightStyles = [...baseHighlightStyles, ...additionalStyles]\n\n  return [\n    EditorView.theme(ghTheme),\n    syntaxHighlighting(HighlightStyle.define(extendedHighlightStyles), {fallback: true}),\n  ]\n}\n","import {indentUnit} from '@codemirror/language'\nimport {EditorState, type Extension} from '@codemirror/state'\nimport {EditorView} from '@codemirror/view'\nimport type {SpacingOptions} from '../CodeMirror'\n\nexport const spacingControls = (options: SpacingOptions): Extension[] => {\n  const extensions: Extension[] = [EditorState.tabSize.of(options.indentUnit)]\n\n  if (options.indentWithTabs) {\n    extensions.push(indentUnit.of('\\t'))\n  } else {\n    extensions.push(indentUnit.of(' '.repeat(options.indentUnit)))\n  }\n\n  if (options.lineWrapping) {\n    extensions.push(EditorView.lineWrapping)\n  }\n\n  return extensions\n}\n","import type {Extension} from '@codemirror/state'\nimport {EditorView} from '@codemirror/view'\nimport {findAndReplace, insertAtCursor, replaceSelection, somethingSelected} from '../utils'\nimport type {UploadChangeDetail, UploadCursorChangeDetail, UploadEvents} from '../types/custom-events'\n\nconst handleUploadChange = (event: Event, view: EditorView) => {\n  const customEvent = event as CustomEvent<UploadChangeDetail>\n  const {state, placeholder, replacementText} = customEvent.detail\n\n  if (state === 'uploading') {\n    if (somethingSelected(view)) {\n      replaceSelection(view, placeholder)\n    } else {\n      insertAtCursor(view, replacementText)\n    }\n  } else if (state === 'uploaded' || state === 'failed') {\n    findAndReplace(view, placeholder, replacementText)\n  }\n}\n\n// positions the cursor where the user expects the file upload to be insert\nconst handleCursorChange = (event: Event, view: EditorView) => {\n  const customEvent = event as CustomEvent<UploadCursorChangeDetail>\n  const {left, top} = customEvent.detail\n  const dropPos = view.posAtCoords({x: left, y: top})\n\n  if (!dropPos) return\n\n  view.dispatch({selection: {anchor: dropPos, head: dropPos}})\n}\n\ntype EventHandlers = {\n  [key in UploadEvents]: (event: Event, view: EditorView) => void\n}\n\nexport function fileUploadListener(): Extension {\n  const eventHandlers: EventHandlers = {\n    'upload:editor:change': handleUploadChange,\n    'upload:editor:cursor': handleCursorChange,\n  }\n\n  return [EditorView.domEventHandlers(eventHandlers)]\n}\n","import {\n  type Command,\n  Decoration,\n  type DecorationSet,\n  EditorView,\n  type KeyBinding,\n  ViewPlugin,\n  type ViewUpdate,\n  keymap,\n} from '@codemirror/view'\nimport {\n  find,\n  getCursor,\n  getSelection,\n  insertAtCursor,\n  insertAtStartOfLine,\n  removeFromStartOfLine,\n  replaceSelection,\n  setCursor,\n  setSelection,\n  somethingSelected,\n} from '../utils'\nimport {type Extension, RangeSetBuilder} from '@codemirror/state'\n\nconst ITALIC_TOKEN = '_'\nconst BOLD_TOKEN = '**'\nconst CODE_TOKEN = '`'\nconst BLOCKQUOTE_TOKEN = '>'\nconst ORDERED_LIST_TOKEN = 'ol'\nconst UNORDERED_LIST_TOKEN = '-'\n\nconst DISALLOW_LINKYFY_ON_PASTE = new WeakMap<EditorView, boolean>()\n\nfunction insertToken(view: EditorView, token: string) {\n  if (somethingSelected(view)) {\n    const currentSelection = getSelection(view.state)\n    replaceSelection(view, `${token}${currentSelection}${token}`)\n  } else {\n    const cursor = getCursor(view)\n    insertAtCursor(view, token.repeat(2))\n    setCursor(view, cursor.anchor + token.length)\n  }\n\n  return true // indicates that the key was handled\n}\n\nfunction toggleList(view: EditorView, token: string) {\n  const cursor = getCursor(view)\n  const currentLine = view.state.doc.lineAt(cursor.from)\n\n  const selection = getSelection(view.state)\n  const prefixRegex = new RegExp(`^${token === 'ol' ? '\\\\d+\\\\.' : token}\\\\s`)\n\n  if (selection) {\n    // if we end with a newline character, we need to trim it off to keep the right number of selected lines\n    const trimmedSelection = selection.endsWith('\\n') ? selection.slice(0, -2) : selection\n    const rawLines = trimmedSelection.split('\\n')\n\n    // re-select the lines, to make sure we are looking at the full line and not just the selection\n    const lines = rawLines.map((_line, index) => {\n      const lineNumber = currentLine.number + index\n      return {text: view.state.doc.line(lineNumber).text, lineNumber}\n    })\n\n    const everyLineStartsWithPrefix = lines.every(line => prefixRegex.test(line.text))\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i]!\n\n      if (everyLineStartsWithPrefix) {\n        // unformat every line\n        const match = line.text.match(prefixRegex)\n        if (match) {\n          removeFromStartOfLine(view, line?.lineNumber, match[0])\n        }\n      } else {\n        // format every line\n        const marker = `${token === 'ol' ? `${i + 1}.` : token} `\n        insertAtStartOfLine(view, line?.lineNumber, marker)\n      }\n    }\n  } else {\n    const match = currentLine.text.match(prefixRegex)\n    if (match) {\n      removeFromStartOfLine(view, currentLine.number, match[0])\n    } else {\n      const marker = `${token === 'ol' ? `1.` : token} `\n      insertAtStartOfLine(view, currentLine.number, marker)\n\n      if (!currentLine.text) {\n        // if we are on an empty line, we need to move the cursor to the right of the inserted marker\n        setCursor(view, cursor.anchor + marker.length)\n      }\n    }\n  }\n\n  return true // indicates that the key was handled\n}\n\nexport const insertLink: Command = (view: EditorView) => {\n  const selection = getSelection(view.state)\n  if (selection) {\n    const newSelection = `[${selection}](url)`\n    replaceSelection(view, newSelection)\n\n    const match = find(view, newSelection)\n    const matchStart = match.value.from\n\n    // 3 => Add 3 for `[,],(` - characters added to the\n    // 6 => Add 3 for `[,],(` - The 3 above, plus `url`\n    setSelection(view, matchStart + selection.length + 3, matchStart + selection.length + 6)\n  } else {\n    const cursor = getCursor(view)\n    insertAtCursor(view, '[](url)')\n    setCursor(view, cursor.anchor + 1) // Then place the cursor between the square brackets\n  }\n\n  return true // indicates that the key was handled\n}\n\nfunction insertSelectedTextLink(view: EditorView, event: ClipboardEvent) {\n  const selection = getSelection(view.state)\n  const dataTransfer = event.clipboardData\n\n  if (selection && dataTransfer) {\n    const pasteLink = dataTransfer.getData('text/plain')\n\n    // check if the clipboard item was an actual link\n    if (!/^https?:\\/\\//i.test(pasteLink)) return\n\n    if (pasteLink) {\n      event.preventDefault() // prevent default paste insertion and let us handle the paste and replace\n      replaceSelection(view, `[${selection}](${pasteLink})`)\n    }\n  }\n}\n\nfunction setDisallowLinkifyOnPaste(view: EditorView, disallow: boolean) {\n  DISALLOW_LINKYFY_ON_PASTE.set(view, disallow)\n\n  return false // indicates should be allowed to bubble up\n}\n\nexport const insertItalicToken: Command = (view: EditorView) => insertToken(view, ITALIC_TOKEN)\nexport const insertBoldToken: Command = (view: EditorView) => insertToken(view, BOLD_TOKEN)\nexport const insertCodeToken: Command = (view: EditorView) => insertToken(view, CODE_TOKEN)\n\nexport const toggleBlockQuoteList: Command = (view: EditorView) => toggleList(view, BLOCKQUOTE_TOKEN)\nexport const toggleOrderedList: Command = (view: EditorView) => toggleList(view, ORDERED_LIST_TOKEN)\nexport const toggleUnorderedList: Command = (view: EditorView) => toggleList(view, UNORDERED_LIST_TOKEN)\n\nconst pasteFormatted: Command = (view: EditorView) => setDisallowLinkifyOnPaste(view, false)\nconst pasteUnformatted: Command = (view: EditorView) => setDisallowLinkifyOnPaste(view, true)\n\nconst MarkdownKeymaps: KeyBinding[] = [\n  {key: 'Mod-i', run: insertItalicToken, preventDefault: true},\n  {key: 'Mod-b', run: insertBoldToken, preventDefault: true},\n  {key: 'Mod-e', run: insertCodeToken, preventDefault: true},\n  {key: 'Mod-k', run: insertLink, preventDefault: true},\n  {key: 'Shift-Mod-.', run: toggleBlockQuoteList, preventDefault: true},\n  {key: 'Shift-Mod-7', run: toggleOrderedList, preventDefault: true},\n  {key: 'Shift-Mod-8', run: toggleUnorderedList, preventDefault: true},\n  {key: 'Mod-v', run: pasteFormatted},\n  {key: 'Shift-Mod-v', run: pasteUnformatted},\n]\n\nfunction autoDirectionBuilder(view: EditorView) {\n  const autoDirectionDecoration = Decoration.line({\n    attributes: {dir: 'auto'},\n  })\n\n  const builder = new RangeSetBuilder<Decoration>()\n  for (const {from, to} of view.visibleRanges) {\n    for (let pos = from; pos <= to; ) {\n      const line = view.state.doc.lineAt(pos)\n\n      builder.add(line.from, line.from, autoDirectionDecoration)\n      pos = line.to + 1\n    }\n  }\n  return builder.finish()\n}\n\n// right-align pargraphs in right-to-left languages when editing Markdown\nconst autoDirectionPlugin = ViewPlugin.fromClass(\n  class {\n    decorations: DecorationSet\n\n    constructor(view: EditorView) {\n      this.decorations = autoDirectionBuilder(view)\n    }\n\n    update(update: ViewUpdate) {\n      if (update.docChanged || update.viewportChanged) this.decorations = autoDirectionBuilder(update.view)\n    }\n  },\n  {\n    decorations: v => v.decorations,\n  },\n)\n\nexport const markdownExtension: Extension[] = (() => [\n  // order of the keymaps matters for stopping propagation\n  EditorView.domEventHandlers({\n    keydown(event) {\n      // if we don't stop the propagation, this will open the Command Prompt\n      // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {\n        event.stopPropagation()\n      }\n    },\n    paste(event, view) {\n      // we need to do this funny business here instead of a key binding because we need access to the clipboard event\n      if (!DISALLOW_LINKYFY_ON_PASTE.get(view)) {\n        insertSelectedTextLink(view, event)\n      }\n      DISALLOW_LINKYFY_ON_PASTE.set(view, false)\n    },\n  }),\n  keymap.of(MarkdownKeymaps),\n  autoDirectionPlugin,\n])()\n","import {\n  type Completion,\n  type CompletionContext,\n  type CompletionResult,\n  acceptCompletion,\n  autocompletion,\n} from '@codemirror/autocomplete'\nimport {Prec} from '@codemirror/state'\nimport {keymap} from '@codemirror/view'\nimport memoize from '@github/memoize'\nimport {autocompleteTheme} from './theme'\n\ninterface Emoji {\n  name: string\n  src: string\n  emoji?: string\n}\n\ninterface EmojiResponse {\n  [name: string]: [src: string, emoji?: string]\n}\n\nconst emojiRequest = memoize(async function getEmojis() {\n  const request = new Request('/autocomplete/emojis_for_editor', {\n    method: 'GET',\n    credentials: 'same-origin',\n    headers: {\n      Accept: 'application/json',\n      'X-Requested-With': 'XMLHttpRequest',\n    },\n  })\n\n  const res = await fetch(request)\n  if (res.status !== 200) {\n    throw new Error(`emoji request failed with a ${res.status}`)\n  }\n\n  const emojiData: EmojiResponse = await res.json()\n\n  // flatten the response into something more reasonable to work with\n  const emojis: Emoji[] = Object.keys(emojiData).map(emojiName => {\n    const emoji = emojiData[emojiName]!\n\n    return {\n      name: emojiName,\n      src: emoji[0],\n      emoji: emoji[1],\n    }\n  })\n\n  return emojis\n})\n\nfunction emojiAutocompleteContext(context: CompletionContext, data: Emoji[] = []): CompletionResult | null {\n  const word = context.matchBefore(/:\\w+/)\n\n  if (!word) return null\n  if (word && word.from === word.to && !context.explicit) {\n    return null\n  }\n\n  const filteredEmojis = data.filter(emoji => {\n    return emoji.name.indexOf(word.text.replace(':', '')) !== -1\n  })\n\n  const completions: Completion[] = filteredEmojis.map(emoji => {\n    return {\n      label: emoji.name,\n\n      // some emojis don't have a unicode representation and get rendered from markdown pipeline\n      apply: emoji.emoji || `:${emoji.name}:`,\n\n      // we can only talk to the render via Completion objects - hack the src in this way\n      // alternatively we could push the emoji data into a global store and have the render look it up\n      type: emoji.src,\n    }\n  })\n\n  return {\n    from: word.from,\n    to: word.to,\n    options: completions,\n    filter: false,\n  }\n}\n\nexport function emojiAutocomplete() {\n  return [\n    autocompleteTheme,\n    autocompletion({\n      override: [\n        async (context: CompletionContext) => {\n          const emojiData = await emojiRequest()\n          return emojiAutocompleteContext(context, emojiData)\n        },\n      ],\n      icons: false,\n      addToOptions: [\n        {\n          render: (completion: Completion) => {\n            const emojiOption = document.createElement('img')\n            emojiOption.className = 'emoji emoji-result mr-2'\n            emojiOption.height = 20\n            emojiOption.width = 20\n            emojiOption.alt = `:${completion.label}:`\n            emojiOption.src = completion.type!\n            emojiOption.setAttribute('async', '')\n\n            return emojiOption\n          },\n          position: 0,\n        },\n      ],\n    }),\n    Prec.highest(keymap.of([{key: 'Tab', run: acceptCompletion}])),\n  ]\n}\n","import {StateField, StateEffect} from '@codemirror/state'\nimport {EditorView, Decoration, type DecorationSet} from '@codemirror/view'\n\nexport type LintMarkSeverity = 'info' | 'warning' | 'error'\n\ninterface AddLintMark {\n  from: number\n  to: number\n  severity: LintMarkSeverity\n}\n\nexport const addLintMark = StateEffect.define<AddLintMark>({\n  map: ({from, to, severity}, change) => ({from: change.mapPos(from), to: change.mapPos(to), severity}),\n})\n\nexport const lintMarkField = StateField.define<DecorationSet>({\n  create() {\n    return Decoration.none\n  },\n  update(lintMarks, tr) {\n    lintMarks = lintMarks.map(tr.changes)\n    for (const e of tr.effects) {\n      if (e.is(addLintMark)) {\n        if (e.value.severity === 'error') {\n          lintMarks = lintMarks.update({\n            add: [lintMarkError.range(e.value.from, e.value.to)],\n          })\n        } else if (e.value.severity === 'warning') {\n          lintMarks = lintMarks.update({\n            add: [lintMarkWarning.range(e.value.from, e.value.to)],\n          })\n        } else if (e.value.severity === 'info') {\n          lintMarks = lintMarks.update({\n            add: [lintMarkInfo.range(e.value.from, e.value.to)],\n          })\n        }\n      }\n    }\n    return lintMarks\n  },\n  provide: f => EditorView.decorations.from(f),\n})\n\nconst lintMarkError = Decoration.mark({class: 'CodeMirror-lint-mark-error'})\nconst lintMarkWarning = Decoration.mark({class: 'CodeMirror-lint-mark-warning'})\nconst lintMarkInfo = Decoration.mark({class: 'CodeMirror-lint-mark-info'})\n","import type {Extension} from '@codemirror/state'\nimport {EditorView} from '@codemirror/view'\nimport {posToOffset} from '../utils'\nimport type {SecretDetectedLintEventDetail, SecretDetectedEvents} from '../types/custom-events'\nimport {addLintMark, lintMarkField} from '../decorations/lint-mark'\n\nconst handleSecretLint = (event: Event, view: EditorView) => {\n  const customEvent = event as CustomEvent<SecretDetectedLintEventDetail>\n  const {from, to, severity} = customEvent.detail\n\n  const fromOffset = posToOffset(view, {line: from.lineNumber, ch: from.character})\n  const toOffset = posToOffset(view, {line: to.lineNumber, ch: to.character})\n\n  view.dispatch({\n    effects: [addLintMark.of({from: fromOffset, to: toOffset, severity})],\n  })\n}\n\ntype EventHandlers = {\n  [key in SecretDetectedEvents]: (event: Event, view: EditorView) => void\n}\n\nexport function secretDetectedListener(): Extension {\n  const eventHandlers: EventHandlers = {\n    'secret-detected:lint': handleSecretLint,\n  }\n\n  return [EditorView.domEventHandlers(eventHandlers), lintMarkField]\n}\n","import type {TagStyle} from '@codemirror/language'\nimport {tags as t} from '@lezer/highlight'\n\n// these keys should be lower cased versions of LanguageDescription.name\ntype LanguageThemeMapping = {\n  [key: string]: TagStyle[]\n}\n\n// This is a mapping of language names to the tags that should be highlighted for that language\nconst languageThemes: LanguageThemeMapping = {\n  ruby: [\n    {tag: t.variableName, color: 'var(--codeMirror-syntax-fgColor-variable, var(--color-codemirror-syntax-variable))'},\n  ],\n}\n\nexport const languageNames = Object.keys(languageThemes)\n\nexport function loadLanguageTheme(name: string) {\n  if (languageNames.includes(name.toLowerCase())) {\n    return languageThemes[name.toLowerCase()]\n  }\n\n  return null\n}\n","import {indentLess, indentMore} from '@codemirror/commands'\nimport {indentUnit} from '@codemirror/language'\nimport type {Extension, StateCommand} from '@codemirror/state'\nimport {type KeyBinding, keymap} from '@codemirror/view'\nimport {toggleWith} from './utils'\nimport {helpPanelConstructor} from './help-panels'\n\nexport const insertIndent: StateCommand = ({state, dispatch}) => {\n  if (state.selection.ranges.some(r => !r.empty)) return indentMore({state, dispatch})\n  dispatch(state.update(state.replaceSelection(state.facet(indentUnit)), {scrollIntoView: true, userEvent: 'input'}))\n  return true\n}\n\n// this keymap prevents the editor from losing focus when tab is pressed\nconst indentWithTab: KeyBinding = {key: 'Tab', run: insertIndent, shift: indentLess}\n\nexport function focusTrapToggle(): Extension {\n  // by default, pressing tab will insert an indent\n  // pressing Shift-Ctrl-m will toggle the focus trap and allow tab to be used for navigation\n  // pressing Shift-Ctrl-m again will toggle the focus trap back on\n  return [toggleWith('Shift-Ctrl-m', keymap.of([indentWithTab]), true), helpPanelConstructor(focusTrapHelpPanel())]\n}\n\nfunction focusTrapHelpPanel() {\n  const dom = document.createElement('div')\n\n  const createKbdElement = (key: string) => {\n    const kbd = document.createElement('kbd')\n    kbd.textContent = key\n    return kbd\n  }\n\n  // manually create the dom for the help text to avoid unnecessary dependencies (ie- lit-html)\n  dom.append(\n    'Use ',\n    createKbdElement(`Control + Shift + m`),\n    ' to toggle the ',\n    createKbdElement('tab'),\n    ' key moving focus. Alternatively, use ',\n    createKbdElement('esc'),\n    ' then ',\n    createKbdElement('tab'),\n    ' to move to the next interactive element on the page.',\n  )\n\n  dom.className = 'cm-help-panel'\n  dom.id = 'focus-trap-help-panel'\n  return dom\n}\n","import type {EditorStateConfig, Extension} from '@codemirror/state'\nimport {type EditorView, type KeyBinding, type ViewUpdate, keymap} from '@codemirror/view'\nimport {forwardRef, useImperativeHandle, useRef} from 'react'\n\nimport {useCodeMirror} from './hooks/use-code-mirror'\n\nexport interface CodeMirrorProps extends Omit<EditorStateConfig, 'doc' | 'extensions'> {\n  value?: string\n  height?: string\n  minHeight?: string\n  width?: string\n  fileName?: string\n  placeholder?: string\n  ariaLabelledBy: string\n\n  extensions?: Extension[]\n  keyBindings?: KeyBinding[]\n  spacing: SpacingOptions\n  focusNextRenderRef?: React.MutableRefObject<boolean>\n\n  // after CM6 is stable and the default experience\n  // consumers will pass extensions in instead of prop based\n  enableFileUpload?: boolean\n  isHpc?: boolean\n  isReadOnly?: boolean\n  hideHelpUntilFocus?: boolean\n\n  /** Fired whenever a change occurs to the document. */\n  onChange(newValue: string): void\n  /** Fired whenever any state change occurs within the editor, including non-document changes like lint results. */\n  onUpdate?(viewUpdate: ViewUpdate): void\n  /** Fired when the editor is created. */\n  onCreateEditor?(view: EditorView): void\n  /** Fired when the editor is destroyed. */\n  onDestroyEditor?(view: EditorView): void\n}\n\nexport interface SpacingOptions {\n  indentUnit: number\n  indentWithTabs: boolean\n  lineWrapping: boolean\n}\n\nexport interface CodeMirrorRef {\n  editor?: HTMLDivElement | null\n  view?: EditorView\n}\n\nconst CodeMirror = forwardRef<CodeMirrorRef, CodeMirrorProps>((props, ref) => {\n  const {\n    value = '',\n    extensions = [],\n    keyBindings = [],\n    height = '85vh',\n    width = '100%',\n    focusNextRenderRef,\n    ...rest\n  } = props\n  const editorRef = useRef<HTMLDivElement>(null)\n\n  const viewRef = useCodeMirror({\n    parentRef: editorRef,\n    value,\n    height,\n    width,\n    extensions: [...extensions, keymap.of(keyBindings)],\n    ...rest,\n  })\n\n  useImperativeHandle(ref, () => ({editor: editorRef.current, view: viewRef.current}), [editorRef, viewRef])\n\n  if (focusNextRenderRef?.current && viewRef) {\n    window.requestAnimationFrame(() => {\n      if (viewRef.current && !viewRef.current.hasFocus) {\n        viewRef.current.focus()\n      }\n    })\n    focusNextRenderRef.current = false\n  }\n\n  return <div ref={editorRef} />\n})\n\nCodeMirror.displayName = 'CodeMirror'\n\nexport default CodeMirror\n","import {EditorState, Compartment, StateEffect} from '@codemirror/state'\nimport {languages} from '@codemirror/language-data'\nimport {markdown, markdownLanguage} from '@codemirror/lang-markdown'\nimport {dropCursor, EditorView, placeholder as placeholderExtension, type ViewUpdate} from '@codemirror/view'\nimport {type RefObject, useCallback, useEffect, useMemo, useRef} from 'react'\n\nimport {basicSetup} from '../extensions/basic-setup'\nimport {getTheme} from '../themes/github-theme'\nimport type {CodeMirrorProps} from '../CodeMirror'\nimport {spacingControls} from '../extensions/spacing-controls'\nimport {fileUploadListener} from '../extensions/file-upload'\nimport {markdownExtension} from '../extensions/markdown'\nimport {emojiAutocomplete} from '../autocomplete/emoji-autocomplete'\nimport {secretDetectedListener} from '../extensions/secret-detected'\nimport {dataHpc} from '../extensions/data-hpc'\nimport {loadLanguageTheme} from '../themes/language-themes'\nimport {scrollerAttributes} from '../extensions/scroller-attributes'\nimport {readOnly} from '../extensions/readonly'\nimport {focusTrapToggle} from '../extensions/focus-trap-toggle'\n\nexport interface UseCodeMirror extends CodeMirrorProps {\n  parentRef: RefObject<HTMLElement | null>\n}\n\nexport function useCodeMirror({\n  extensions = [],\n  fileName = '',\n  onChange,\n  spacing,\n  isHpc,\n  isReadOnly,\n  enableFileUpload,\n  parentRef,\n  placeholder = 'Enter file contents here',\n  ariaLabelledBy,\n  value,\n  width = '',\n  height = '',\n  minHeight = '',\n  hideHelpUntilFocus,\n  onCreateEditor,\n  onDestroyEditor,\n}: UseCodeMirror) {\n  const viewRef = useRef<EditorView | undefined>(undefined)\n  const languageCompartment = useMemo(() => {\n    return new Compartment()\n  }, [])\n\n  const autoCompleteCompartment = useMemo(() => {\n    return new Compartment()\n  }, [])\n\n  const themeCompartment = useMemo(() => {\n    return new Compartment()\n  }, [])\n\n  const internalOnChange = useCallback(\n    (update: ViewUpdate) => {\n      if (update.docChanged) {\n        onChange(update.state.doc.toString() || '')\n      }\n    },\n    [onChange],\n  )\n\n  const updateListener = EditorView.updateListener.of(internalOnChange)\n\n  const editorSizingTheme = EditorView.theme({\n    '&': {\n      height,\n      minHeight,\n      width,\n    },\n  })\n\n  let managedExtensions = useMemo(() => {\n    return [\n      ...basicSetup,\n      updateListener,\n      editorSizingTheme,\n      placeholderExtension(placeholder),\n      ...spacingControls(spacing),\n      secretDetectedListener(),\n      languageCompartment.of([]),\n      autoCompleteCompartment.of([]),\n      themeCompartment.of([getTheme()]),\n      scrollerAttributes(ariaLabelledBy),\n      EditorView.contentAttributes.of({\n        'aria-labelledby': `${ariaLabelledBy} focus-trap-help-panel`,\n      }),\n      EditorView.editorAttributes.of({\n        class: hideHelpUntilFocus ? 'hide-help-until-focus' : '',\n      }),\n    ]\n  }, [\n    updateListener,\n    editorSizingTheme,\n    placeholder,\n    spacing,\n    languageCompartment,\n    autoCompleteCompartment,\n    themeCompartment,\n    ariaLabelledBy,\n    hideHelpUntilFocus,\n  ])\n\n  if (enableFileUpload) {\n    managedExtensions.push(dropCursor())\n    managedExtensions.push(fileUploadListener())\n  }\n\n  if (isHpc) {\n    managedExtensions.push(dataHpc())\n  }\n\n  if (isReadOnly) {\n    managedExtensions.push(readOnly())\n  } else {\n    managedExtensions.push(focusTrapToggle())\n  }\n\n  managedExtensions = managedExtensions.concat(extensions)\n\n  useEffect(() => {\n    const parent = parentRef.current\n    if (!parent) return\n\n    const state = EditorState.create({\n      doc: value,\n      extensions: managedExtensions,\n    })\n\n    const view = new EditorView({\n      state,\n      parent,\n    })\n\n    onCreateEditor && onCreateEditor(view)\n\n    viewRef.current = view\n\n    return () => {\n      view.destroy()\n\n      onDestroyEditor && onDestroyEditor(view)\n    }\n    // right now - only run once to initialize\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (viewRef.current) {\n      viewRef.current.dispatch({effects: autoCompleteCompartment.reconfigure([])}) // reset autocomplete\n      viewRef.current.dispatch({effects: StateEffect.reconfigure.of(managedExtensions)})\n    }\n  }, [autoCompleteCompartment, managedExtensions])\n\n  // update the value if it changes externally\n  useEffect(() => {\n    if (viewRef.current && value !== undefined) {\n      const currentValue = viewRef.current.state.doc.toString() || ''\n      const newValue = value || ''\n\n      if (newValue !== currentValue) {\n        viewRef.current.dispatch({\n          changes: {from: 0, to: currentValue.length, insert: newValue},\n        })\n      }\n    }\n  }, [value])\n\n  useEffect(() => {\n    const loadLanguage = async () => {\n      const fileExtension = fileName.split('.').pop() || ''\n      const language = fileExtension\n        ? languages.find(l => l.extensions.includes(fileExtension) || (l.filename && l.filename.test(fileName)))\n        : undefined\n\n      if (language && viewRef.current) {\n        const languageTheme = loadLanguageTheme(language.name)\n\n        if (languageTheme) {\n          viewRef.current.dispatch({\n            effects: themeCompartment.reconfigure(getTheme(languageTheme)),\n          })\n        }\n\n        if (language.name === 'Markdown') {\n          // use gfm as the base for markdown language\n          viewRef.current.dispatch({\n            effects: languageCompartment.reconfigure(markdown({base: markdownLanguage})),\n          })\n\n          // add markdown extensions\n          viewRef.current.dispatch({\n            effects: StateEffect.reconfigure.of([...markdownExtension, ...managedExtensions]),\n          })\n\n          // add emoji autocomplete - this needs its own compartment\n          viewRef.current.dispatch({effects: autoCompleteCompartment.reconfigure(emojiAutocomplete())})\n        } else {\n          viewRef.current.dispatch({effects: autoCompleteCompartment.reconfigure([])}) // reset autocomplete\n          viewRef.current.dispatch({effects: languageCompartment.reconfigure(await language.load())})\n        }\n      }\n    }\n\n    if (viewRef.current) {\n      loadLanguage()\n    }\n  }, [fileName, languageCompartment, autoCompleteCompartment, managedExtensions, themeCompartment])\n\n  return viewRef\n}\n","import type {Extension} from '@codemirror/state'\nimport type {EditorView} from '@codemirror/view'\nimport {ViewPlugin} from '@codemirror/view'\n\n/**\n * Adds role, tabIndex, and aria-labelledby attributes to the scroller DOM element\n * @param ariaLabelledBy The id of the element that the scroller is labelled by\n * @returns Extension\n */\nexport function scrollerAttributes(ariaLabelledBy: string): Extension {\n  const scroller = ViewPlugin.fromClass(\n    class {\n      constructor(view: EditorView) {\n        view.scrollDOM.tabIndex = 0\n        view.scrollDOM.setAttribute('role', 'region')\n        view.scrollDOM.setAttribute('aria-labelledby', ariaLabelledBy)\n      }\n    },\n  )\n\n  return [scroller]\n}\n","import type {Extension} from '@codemirror/state'\nimport {EditorView} from '@codemirror/view'\n\nexport function dataHpc(): Extension {\n  return EditorView.editorAttributes.of({\n    'data-hpc': 'true',\n  })\n}\n","import {EditorState, type Extension} from '@codemirror/state'\n\nexport function readOnly(): Extension {\n  return EditorState.readOnly.of(true)\n}\n","import {Compartment, type Extension} from '@codemirror/state'\nimport {type EditorView, keymap} from '@codemirror/view'\n\n/**\n * This function is used to create an extension that is toggleable by a key binding.\n * @param key The key to use to toggle the extension\n * @param extension The extension to toggle\n * @param initialState The initial state of the extension\n * @returns An extension array\n */\nexport function toggleWith(keyBinding: string, extension: Extension, initiallyEnabled: boolean): Extension[] {\n  const initial = initiallyEnabled ? extension : []\n\n  const privateCompartment = new Compartment()\n  function toggle(view: EditorView) {\n    const on = privateCompartment.get(view.state) === extension\n    view.dispatch({\n      effects: privateCompartment.reconfigure(on ? [] : extension),\n    })\n    return true\n  }\n  return [privateCompartment.of(initial), keymap.of([{key: keyBinding, run: toggle}])]\n}\n"],"names":["chordOrKeyRegex","splitHotkeyString","hotkey","Array","from","matchAll","map","chord","areCharacterKeyShortcutsEnabled","keyboardShortcutsPreference","document","querySelector","content","isNonCharacterKeyShortcut","test","includes","nonEditableInputTypes","Set","isShortcutAllowed","eventToHotkeyString","event","allowCharacterKeyShortcuts","isEditableElement","target","HTMLElement","name","nodeName","toLowerCase","type","getAttribute","isReadonly","ariaReadOnly","has","isContentEditable","specialCharacterKeyShortcuts","key","run","preventDefault","basicSetup","history","indentOnInput","lineNumbers","bracketMatching","tooltips","position","search","top","EditorView","editorAttributes","of","class","keymap","defaultKeymap","searchKeymap","historyKeymap","ghTheme","background","color","cursor","borderRightWidth","fontFamily","fontSize","lineHeight","padding","caretColor","paddingTop","backgroundColor","outline","display","paddingLeft","margin","borderTop","bottom","borderRadius","border","textTransform","borderBottom","marginRight","marginBottom","marginTop","marginLeft","backgroundImage","height","borderLeft","whiteSpace","githubDefaultHighlights","tag","t","keyword","comment","bracket","string","url","regexp","constant","propertyName","attributeName","atom","number","bool","function","variableName","definition","meta","heading","fontWeight","monospace","codemirrorDefaultHighlightStyle","link","textDecoration","emphasis","fontStyle","strong","strikethrough","githubLightHighlightStyle","githubDarkHighlightStyle","getTheme","additionalStyles","extendedHighlightStyles","isDarkMode","theme","syntaxHighlighting","HighlightStyle","define","fallback","spacingControls","extensions","EditorState","tabSize","options","indentUnit","indentWithTabs","push","repeat","lineWrapping","handleUploadChange","view","state","placeholder","replacementText","customEvent","detail","somethingSelected","replaceSelection","insertAtCursor","findAndReplace","handleCursorChange","left","dropPos","posAtCoords","x","y","dispatch","selection","anchor","head","DISALLOW_LINKYFY_ON_PASTE","WeakMap","insertToken","token","currentSelection","getSelection","getCursor","setCursor","length","toggleList","currentLine","doc","lineAt","prefixRegex","lines","rawLines","endsWith","slice","split","_line","index","lineNumber","text","line","everyLineStartsWithPrefix","every","i","match","removeFromStartOfLine","marker","insertAtStartOfLine","MarkdownKeymaps","newSelection","matchStart","find","value","setSelection","set","autoDirectionBuilder","autoDirectionDecoration","Decoration","attributes","dir","builder","RangeSetBuilder","to","visibleRanges","pos","add","finish","autoDirectionPlugin","ViewPlugin","fromClass","update","docChanged","viewportChanged","decorations","constructor","v","markdownExtension","domEventHandlers","keydown","metaKey","ctrlKey","stopPropagation","paste","get","insertSelectedTextLink","dataTransfer","clipboardData","pasteLink","getData","emojiRequest","memoize","request","Request","method","credentials","headers","Accept","res","fetch","status","emojiData","json","Object","keys","emojiName","emoji","src","addLintMark","StateEffect","severity","change","mapPos","lintMarkField","StateField","create","none","lintMarks","tr","e","changes","effects","is","lintMarkError","range","lintMarkWarning","lintMarkInfo","provide","f","mark","handleSecretLint","fromOffset","posToOffset","ch","character","toOffset","languageThemes","ruby","languageNames","indentWithTab","ranges","some","r","empty","indentMore","facet","scrollIntoView","userEvent","shift","indentLess","CodeMirror","forwardRef","props","ref","keyBindings","width","focusNextRenderRef","rest","editorRef","useRef","viewRef","useCodeMirror","fileName","onChange","spacing","isHpc","isReadOnly","enableFileUpload","parentRef","ariaLabelledBy","minHeight","hideHelpUntilFocus","onCreateEditor","onDestroyEditor","undefined","languageCompartment","useMemo","Compartment","autoCompleteCompartment","themeCompartment","internalOnChange","useCallback","toString","updateListener","editorSizingTheme","managedExtensions","placeholderExtension","scrollDOM","tabIndex","setAttribute","contentAttributes","dropCursor","readOnly","toggleWith","keyBinding","extension","initiallyEnabled","privateCompartment","on","reconfigure","helpPanelConstructor","focusTrapHelpPanel","dom","createElement","createKbdElement","kbd","textContent","append","className","id","concat","useEffect","parent","current","destroy","currentValue","newValue","insert","loadLanguage","fileExtension","pop","language","languages","l","filename","languageTheme","markdown","base","markdownLanguage","autocompleteTheme","autocompletion","override","context","emojiAutocompleteContext","data","word","matchBefore","explicit","completions","filteredEmojis","filter","indexOf","replace","label","apply","icons","addToOptions","render","emojiOption","alt","completion","Prec","highest","acceptCompletion","load","useImperativeHandle","editor","window","requestAnimationFrame","hasFocus","focus","div","displayName"],"sourceRoot":""}
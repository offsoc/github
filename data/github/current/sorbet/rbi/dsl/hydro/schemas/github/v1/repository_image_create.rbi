# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::RepositoryImageCreate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::RepositoryImageCreate`.

class Hydro::Schemas::Github::V1::RepositoryImageCreate
  sig do
    params(
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_image: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryImage),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      uploader: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(repository: nil, repository_image: nil, request_context: nil, uploader: nil); end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_image; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_uploader; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryImage)) }
  def repository_image; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryImage)).void }
  def repository_image=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def uploader; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def uploader=(value); end
end

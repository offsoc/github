{"version":3,"file":"chunk-app_components_memex_project_list_memex-project-picker-unlink-element_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/components/memex/project_list/memex-project-picker-unlink-element.ts","app/components/memex/project_list/project-buttons-list-element.ts","ui/packages/form-utils/form-utils.ts","ui/packages/form-utils/remote-submit.ts"],"sourcesContent":["import {controller, target} from '@github/catalyst'\nimport type {MemexProjectPickerElement} from '../memex-project-picker-element'\nimport {ActionType} from './project-buttons-list-element'\nimport type {MemexProjectPickerPanelElement} from '../memex-project-picker-panel-element'\n\n@controller\nclass MemexProjectPickerUnlinkElement extends HTMLElement {\n  @target button: HTMLButtonElement\n\n  unlinkProject(event: MouseEvent) {\n    event.preventDefault()\n\n    document.getElementById('action-type-control')?.setAttribute('value', ActionType.Link)\n\n    const pickerForm = document.getElementById('js-project-picker-form')\n    const picker =\n      pickerForm?.querySelector<MemexProjectPickerElement>('memex-project-picker') ||\n      pickerForm?.querySelector<MemexProjectPickerPanelElement>('memex-project-picker-panel')\n\n    if (!picker) return\n\n    const numberStr = this.button.getAttribute('data-number')\n    if (!numberStr) return\n\n    const number = parseInt(numberStr)\n\n    // Unlink project can only operate on 1 project at a time\n    const removeSucceeded = picker.removeItem(\n      this.button.getAttribute('data-name') || '',\n      number,\n      this.button.getAttribute('data-owner') || '',\n    )\n\n    if (removeSucceeded) picker.triggerUpdate(event)\n  }\n}\n","import {controller, target} from '@github/catalyst'\nimport {requestSubmit} from '@github-ui/form-utils'\n\nexport const enum ActionType {\n  Create = 'create',\n  Link = 'link',\n}\n@controller\nclass ProjectButtonsListElement extends HTMLElement {\n  @target splitButtonContainer: HTMLDetailsElement\n  @target actionType: HTMLInputElement\n  @target newProjectButton: HTMLButtonElement\n  @target newProject: HTMLDivElement\n  @target linkProject: HTMLDivElement\n  @target newProjectInput: HTMLInputElement\n  @target linkProjectInput: HTMLInputElement\n  @target linkingMenu: HTMLDetailsElement\n\n  connectedCallback() {\n    this.updateActionType(ActionType.Link)\n    this.newProjectButton.addEventListener('click', () => this.handleNewProjectFromLinkingMenuClick())\n  }\n\n  handleSplitButtonClick() {\n    if (this.actionType.getAttribute('value') === ActionType.Create) {\n      this.submitForm()\n    }\n  }\n\n  handleNewProjectFromLinkingMenuClick() {\n    this.updateActionType(ActionType.Create)\n    this.submitForm()\n  }\n\n  select(event: CustomEvent) {\n    const domElement = (event.detail.relatedTarget as Element).querySelector<HTMLInputElement>(\n      'input[name=\"button_state\"]',\n    )\n    if (domElement === this.newProjectInput) {\n      this.newProject.hidden = false\n      this.linkProject.hidden = true\n      this.linkingMenu.hidden = true\n      this.updateActionType(ActionType.Create)\n      this.splitButtonContainer.setAttribute('data-button-type', ActionType.Create)\n    } else if (domElement === this.linkProjectInput) {\n      this.newProject.hidden = true\n      this.linkProject.hidden = false\n      this.linkingMenu.hidden = false\n      this.updateActionType(ActionType.Link)\n      this.splitButtonContainer.setAttribute('data-button-type', ActionType.Link)\n    }\n  }\n\n  private submitForm() {\n    const form = document.getElementById('js-project-picker-form') as HTMLFormElement\n    requestSubmit(form)\n  }\n\n  private updateActionType(actionType: ActionType) {\n    this.actionType.setAttribute('value', actionType)\n  }\n}\n","import {persistSubmitButtonValue} from './remote-submit'\n\ntype TextField = HTMLInputElement | HTMLTextAreaElement\ntype Button = HTMLInputElement | HTMLButtonElement\n\nfunction fire(target: HTMLElement, name: string, cancelable: boolean): boolean {\n  return target.dispatchEvent(\n    new CustomEvent(name, {\n      bubbles: true,\n      cancelable,\n    }),\n  )\n}\n\n// Submit a form while ensuring that `submit` event is also triggered.\n//\n// Calling native `form.submit()` method immediately submits the form without triggering the `submit` event.\n// As a result, code that wants to hook into form submits would never execute.\n//\n// This method first triggers the `submit` event and, if that event wasn't `preventDefault`d, submits the\n// form natively.\nexport function requestSubmit(form: HTMLFormElement, submitter?: Button) {\n  if (submitter) {\n    checkButtonValidity(form, submitter)\n    persistSubmitButtonValue(submitter)\n  }\n  if (fire(form, 'submit', true)) {\n    form.submit()\n  }\n}\n\n// Check submitter validity for form.requestSubmit compatibility.\n// See https://html.spec.whatwg.org/#dom-form-requestsubmit.\nfunction checkButtonValidity(form: HTMLFormElement, submitter: Button) {\n  if (!(form instanceof HTMLFormElement)) throw new TypeError('The specified element is not of type HTMLFormElement.')\n  if (!(submitter instanceof HTMLElement)) throw new TypeError('The specified element is not of type HTMLElement.')\n  if (submitter.type !== 'submit') throw new TypeError('The specified element is not a submit button.')\n  if (!form || form !== submitter.form) throw new Error('The specified element is not owned by the form element.')\n}\n\n// Set a form field value while ensuring that `change` event is also triggered.\n//\n// Having the `change` event fire is important for various behaviors to react, such as form validation.\nexport function changeValue(input: TextField, value: string | boolean) {\n  if (typeof value === 'boolean') {\n    if (input instanceof HTMLInputElement) {\n      input.checked = value\n    } else {\n      throw new TypeError('only checkboxes can be set to boolean value')\n    }\n  } else {\n    if (input.type === 'checkbox') {\n      throw new TypeError(\"checkbox can't be set to string value\")\n    } else {\n      input.value = value\n    }\n  }\n  fire(input, 'change', false)\n}\n\n// Fill multiple form fields by item name.\nexport function fillFormValues(form: HTMLFormElement, fields: {[key: string]: string}) {\n  for (const name in fields) {\n    const value = fields[name]\n    const element = form.elements.namedItem(name)\n\n    if (element instanceof HTMLInputElement) {\n      element.value = value!\n    } else if (element instanceof HTMLTextAreaElement) {\n      element.value = value!\n    }\n  }\n}\n\n// Test if element is a form field.\nexport function isFormField(element: Node): boolean {\n  if (!(element instanceof HTMLElement)) {\n    return false\n  }\n\n  const name = element.nodeName.toLowerCase()\n  const type = (element.getAttribute('type') || '').toLowerCase()\n  return (\n    name === 'select' ||\n    name === 'textarea' ||\n    (name === 'input' && type !== 'submit' && type !== 'reset') ||\n    element.isContentEditable\n  )\n}\n\nfunction searchParamsFromFormData(formData: FormData): URLSearchParams {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new URLSearchParams(formData as any)\n}\n\n// Get a `?` search string for a URL for a GET form, using its `action` attribute as well as its other fields.\nexport function combineGetFormSearchParams(formAction: URL, formData: FormData): string {\n  const allSearchParams = new URLSearchParams(formAction.search)\n  const searchParamsFromInputs = searchParamsFromFormData(formData)\n  for (const [key, value] of searchParamsFromInputs) {\n    allSearchParams.append(key, value)\n  }\n  return allSearchParams.toString()\n}\n\n// Serialize form data into string.\nexport function serialize(form: HTMLFormElement): string {\n  return searchParamsFromFormData(new FormData(form)).toString()\n}\n","// Emulates submit button submission values by inserting a hidden input to the form.\n//\n// Submit events can be triggerd in the following ways:\n// - User clicks on a submit button.\n// - User press Enter when focusing on a form field; also known as \"implicit submission\".\n// - Programmatically via requestSubmit helper.\n//\n// On GitHub.com, the submission is either handled by the browser or remoteForm.\n//\n// For submissions triggered by user actions, the name and value of the clicked submit button (also known as\n// \"the submitter\") is passed along in the request, and can be programmatically retrieved with FormData.entries().\n//\n// However, this value will be lost in the following cases:\n// - 1. When the submitter button is disabled, most commonly by [data-disable-with].\n// - 2. When submitting via requestSubmit (from form.js), because the submission does not originated from a submitter.\n// - 3. When submitting with remoteForm, because FormData(form).entries() does not know about the submitter. In Safari\n// the submitter is known during the submission steps, but this behavior is not supported in any other browsers.\n//\n// @see {@link https://github.com/github/form-data-entries/pull/7}.\n//\n// For the exact workarounds, refer to ./form.js and ./remote.js.\nexport function persistSubmitButtonValue(button: HTMLButtonElement | HTMLInputElement) {\n  const form = button.closest('form')\n  if (!(form instanceof HTMLFormElement)) {\n    return\n  }\n\n  let input = findPersistedSubmitButtonValue(form)\n\n  if (button.name) {\n    const defaultValue = button.matches('input[type=submit]') ? 'Submit' : ''\n    const value = button.value || defaultValue\n    if (!input) {\n      input = document.createElement('input')\n      input.type = 'hidden'\n      input.classList.add('js-submit-button-value')\n      form.prepend(input)\n    }\n    input.name = button.name\n    input.value = value\n  } else if (input) {\n    input.remove()\n  }\n}\n\nexport function findPersistedSubmitButtonValue(form: HTMLFormElement): HTMLInputElement | null {\n  const input = form.querySelector('input.js-submit-button-value')\n  return input instanceof HTMLInputElement ? input : null\n}\n"],"names":["MemexProjectPickerUnlinkElement","HTMLElement","unlinkProject","event","preventDefault","document","getElementById","setAttribute","ActionType","Link","pickerForm","picker","querySelector","numberStr","button","getAttribute","number","parseInt","removeItem","triggerUpdate","target","controller","ProjectButtonsListElement","connectedCallback","updateActionType","newProjectButton","addEventListener","handleNewProjectFromLinkingMenuClick","handleSplitButtonClick","actionType","submitForm","select","domElement","detail","relatedTarget","newProjectInput","newProject","hidden","linkProject","linkingMenu","splitButtonContainer","linkProjectInput","form","requestSubmit","fire","name","cancelable","dispatchEvent","CustomEvent","bubbles","submitter","checkButtonValidity","HTMLFormElement","type","persistSubmitButtonValue","submit","changeValue","input","value","HTMLInputElement","checked","fillFormValues","fields","element","elements","namedItem","HTMLTextAreaElement","isFormField","nodeName","toLowerCase","isContentEditable","searchParamsFromFormData","formData","URLSearchParams","combineGetFormSearchParams","formAction","allSearchParams","search","key","append","toString","serialize","FormData","closest","findPersistedSubmitButtonValue","defaultValue","matches","createElement","classList","add","prepend","remove"],"sourceRoot":""}
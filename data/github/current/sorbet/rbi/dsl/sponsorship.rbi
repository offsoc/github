# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Sponsorship`.
# Please instead update this file by running `bin/tapioca dsl Sponsorship`.

class Sponsorship
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  extend GeneratedWorkflowClassMethods
  include GeneratedWorkflowMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def payment_sources; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def privacy_levels; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Sponsorship).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Sponsorship).void)
      ).returns(::Sponsorship)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Sponsorship).void)
      ).returns(::Sponsorship)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Sponsorship).void)
      ).returns(::Sponsorship)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Sponsorship).void)
      ).returns(::Sponsorship)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Sponsorship).void)
      ).returns(::Sponsorship)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Sponsorship]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Sponsorship)) }
    def fifth; end

    sig { returns(::Sponsorship) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Sponsorship)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Sponsorship) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Sponsorship).void)
      ).returns(T.nilable(T::Enumerator[::Sponsorship]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Sponsorship]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Sponsorship]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Sponsorship).void)
      ).returns(::Sponsorship)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Sponsorship).void)
      ).returns(::Sponsorship)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Sponsorship).void)
      ).returns(::Sponsorship)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Sponsorship)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Sponsorship) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Sponsorship) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Sponsorship) }
    def first!; end

    sig { returns(T.nilable(::Sponsorship)) }
    def forty_two; end

    sig { returns(::Sponsorship) }
    def forty_two!; end

    sig { returns(T.nilable(::Sponsorship)) }
    def fourth; end

    sig { returns(::Sponsorship) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Sponsorship) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Sponsorship).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Sponsorship).void)
      ).returns(::Sponsorship)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Sponsorship).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Sponsorship).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Sponsorship)) }
    def second; end

    sig { returns(::Sponsorship) }
    def second!; end

    sig { returns(T.nilable(::Sponsorship)) }
    def second_to_last; end

    sig { returns(::Sponsorship) }
    def second_to_last!; end

    sig { returns(::Sponsorship) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Sponsorship) }
    def take!; end

    sig { returns(T.nilable(::Sponsorship)) }
    def third; end

    sig { returns(::Sponsorship) }
    def third!; end

    sig { returns(T.nilable(::Sponsorship)) }
    def third_to_last; end

    sig { returns(::Sponsorship) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def github!; end

    sig { returns(T::Boolean) }
    def github?; end

    sig { void }
    def patreon!; end

    sig { returns(T::Boolean) }
    def patreon?; end

    sig { void }
    def privacy_private!; end

    sig { returns(T::Boolean) }
    def privacy_private?; end

    sig { void }
    def privacy_public!; end

    sig { returns(T::Boolean) }
    def privacy_public?; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::InvoicedSponsorshipTransfer) }
    def build_invoiced_sponsorship_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsActivity) }
    def build_latest_one_time_payment_activity(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def build_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_sponsor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def build_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def build_sponsors_listing_stafftools_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorshipRepository) }
    def build_sponsorship_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::SubscriptionItem) }
    def build_subscription_item(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsTier) }
    def build_tier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InvoicedSponsorshipTransfer) }
    def create_invoiced_sponsorship_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InvoicedSponsorshipTransfer) }
    def create_invoiced_sponsorship_transfer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsActivity) }
    def create_latest_one_time_payment_activity(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsActivity) }
    def create_latest_one_time_payment_activity!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_plan_subscription!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_sponsor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_sponsor!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_sponsorable!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_sponsors_listing!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def create_sponsors_listing_stafftools_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def create_sponsors_listing_stafftools_metadata!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorshipRepository) }
    def create_sponsorship_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorshipRepository) }
    def create_sponsorship_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::SubscriptionItem) }
    def create_subscription_item(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::SubscriptionItem) }
    def create_subscription_item!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsTier) }
    def create_tier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsTier) }
    def create_tier!(*args, &blk); end

    sig { returns(T.nilable(::InvoicedSponsorshipTransfer)) }
    def invoiced_sponsorship_transfer; end

    sig { params(value: T.nilable(::InvoicedSponsorshipTransfer)).void }
    def invoiced_sponsorship_transfer=(value); end

    sig { returns(T.nilable(::SponsorsActivity)) }
    def latest_one_time_payment_activity; end

    sig { params(value: T.nilable(::SponsorsActivity)).void }
    def latest_one_time_payment_activity=(value); end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def plan_subscription; end

    sig { params(value: T.nilable(::Billing::PlanSubscription)).void }
    def plan_subscription=(value); end

    sig { returns(T.nilable(::InvoicedSponsorshipTransfer)) }
    def reload_invoiced_sponsorship_transfer; end

    sig { returns(T.nilable(::SponsorsActivity)) }
    def reload_latest_one_time_payment_activity; end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def reload_plan_subscription; end

    sig { returns(T.nilable(::User)) }
    def reload_sponsor; end

    sig { returns(T.nilable(::User)) }
    def reload_sponsorable; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def reload_sponsors_listing; end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def reload_sponsors_listing_stafftools_metadata; end

    sig { returns(T.nilable(::SponsorshipRepository)) }
    def reload_sponsorship_repository; end

    sig { returns(T.nilable(::Billing::SubscriptionItem)) }
    def reload_subscription_item; end

    sig { returns(T.nilable(::SponsorsTier)) }
    def reload_tier; end

    sig { returns(T.nilable(::User)) }
    def sponsor; end

    sig { params(value: T.nilable(::User)).void }
    def sponsor=(value); end

    sig { returns(T.nilable(::User)) }
    def sponsorable; end

    sig { params(value: T.nilable(::User)).void }
    def sponsorable=(value); end

    sig { returns(T.nilable(::SponsorsListing)) }
    def sponsors_listing; end

    sig { params(value: T.nilable(::SponsorsListing)).void }
    def sponsors_listing=(value); end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def sponsors_listing_stafftools_metadata; end

    sig { params(value: T.nilable(::SponsorsListingStafftoolsMetadata)).void }
    def sponsors_listing_stafftools_metadata=(value); end

    sig { returns(T.nilable(::SponsorshipRepository)) }
    def sponsorship_repository; end

    sig { params(value: T.nilable(::SponsorshipRepository)).void }
    def sponsorship_repository=(value); end

    sig { returns(T.nilable(::Billing::SubscriptionItem)) }
    def subscription_item; end

    sig { params(value: T.nilable(::Billing::SubscriptionItem)).void }
    def subscription_item=(value); end

    sig { returns(T.nilable(::SponsorsTier)) }
    def tier; end

    sig { params(value: T.nilable(::SponsorsTier)).void }
    def tier=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active_or_paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active_test(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def amount_visible_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def at_sponsors_tier_price(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def emailable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from_sponsor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def github(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def has_subscribable_selected_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def inactive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def inactive_test(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invoiced(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def join_sponsors_listings_on_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def listing_approved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def locked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_github(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_invoiced(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_patreon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_privacy_private(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_privacy_public(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def one_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only_custom_tiers(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def paid_or_patreon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def patreon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def privacy_private(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def privacy_public(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def processing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ranked_by_sponsor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ranked_by_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ranked_for_public_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def recurring(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sponsor_visible_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def tier_selected_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def tier_selected_since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unpaid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_linked_org_preloads(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_tier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_user_or_org_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_custom_tiers(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_invoiced_sponsorship_transfer; end

    sig { returns(Promise[T.untyped]) }
    def async_latest_one_time_payment_activity; end

    sig { returns(Promise[T.untyped]) }
    def async_plan_subscription; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsor; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorable; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_listing; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_listing_stafftools_metadata; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorship_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_subscription_item; end

    sig { returns(Promise[T.untyped]) }
    def async_tier; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def activated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def activated_at=(value); end

    sig { returns(T::Boolean) }
    def activated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def activated_at_before_last_save; end

    sig { returns(T.untyped) }
    def activated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def activated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def activated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def activated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def activated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def activated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def activated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def activated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def activated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def activated_at_was; end

    sig { void }
    def activated_at_will_change!; end

    sig { returns(T::Boolean) }
    def active; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def active=(value); end

    sig { returns(T::Boolean) }
    def active?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_before_last_save; end

    sig { returns(T.untyped) }
    def active_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def active_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def active_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_was; end

    sig { void }
    def active_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def expires_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def expires_at=(value); end

    sig { returns(T::Boolean) }
    def expires_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def expires_at_before_last_save; end

    sig { returns(T.untyped) }
    def expires_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def expires_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def expires_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def expires_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def expires_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def expires_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def expires_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def expires_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def expires_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def expires_at_was; end

    sig { void }
    def expires_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def invoiced_sponsorship_transfer_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def invoiced_sponsorship_transfer_id=(value); end

    sig { returns(T::Boolean) }
    def invoiced_sponsorship_transfer_id?; end

    sig { returns(T.nilable(::Integer)) }
    def invoiced_sponsorship_transfer_id_before_last_save; end

    sig { returns(T.untyped) }
    def invoiced_sponsorship_transfer_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def invoiced_sponsorship_transfer_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invoiced_sponsorship_transfer_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invoiced_sponsorship_transfer_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def invoiced_sponsorship_transfer_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def invoiced_sponsorship_transfer_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invoiced_sponsorship_transfer_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def invoiced_sponsorship_transfer_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def invoiced_sponsorship_transfer_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def invoiced_sponsorship_transfer_id_was; end

    sig { void }
    def invoiced_sponsorship_transfer_id_will_change!; end

    sig { returns(T::Boolean) }
    def is_sponsor_opted_in_to_email; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def is_sponsor_opted_in_to_email=(value); end

    sig { returns(T::Boolean) }
    def is_sponsor_opted_in_to_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_sponsor_opted_in_to_email_before_last_save; end

    sig { returns(T.untyped) }
    def is_sponsor_opted_in_to_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_sponsor_opted_in_to_email_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_sponsor_opted_in_to_email_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_sponsor_opted_in_to_email_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_sponsor_opted_in_to_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_sponsor_opted_in_to_email_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_sponsor_opted_in_to_email_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_sponsor_opted_in_to_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_sponsor_opted_in_to_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_sponsor_opted_in_to_email_was; end

    sig { void }
    def is_sponsor_opted_in_to_email_will_change!; end

    sig { returns(T::Boolean) }
    def is_sponsor_opted_in_to_share_with_fiscal_host; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def is_sponsor_opted_in_to_share_with_fiscal_host=(value); end

    sig { returns(T::Boolean) }
    def is_sponsor_opted_in_to_share_with_fiscal_host?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_sponsor_opted_in_to_share_with_fiscal_host_before_last_save; end

    sig { returns(T.untyped) }
    def is_sponsor_opted_in_to_share_with_fiscal_host_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_sponsor_opted_in_to_share_with_fiscal_host_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_sponsor_opted_in_to_share_with_fiscal_host_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_sponsor_opted_in_to_share_with_fiscal_host_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_sponsor_opted_in_to_share_with_fiscal_host_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_sponsor_opted_in_to_share_with_fiscal_host_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_sponsor_opted_in_to_share_with_fiscal_host_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_sponsor_opted_in_to_share_with_fiscal_host_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_sponsor_opted_in_to_share_with_fiscal_host_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_sponsor_opted_in_to_share_with_fiscal_host_was; end

    sig { void }
    def is_sponsor_opted_in_to_share_with_fiscal_host_will_change!; end

    sig { returns(T::Boolean) }
    def is_sponsor_tier_reward_fulfilled; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def is_sponsor_tier_reward_fulfilled=(value); end

    sig { returns(T::Boolean) }
    def is_sponsor_tier_reward_fulfilled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_sponsor_tier_reward_fulfilled_before_last_save; end

    sig { returns(T.untyped) }
    def is_sponsor_tier_reward_fulfilled_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_sponsor_tier_reward_fulfilled_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_sponsor_tier_reward_fulfilled_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_sponsor_tier_reward_fulfilled_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_sponsor_tier_reward_fulfilled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_sponsor_tier_reward_fulfilled_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_sponsor_tier_reward_fulfilled_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_sponsor_tier_reward_fulfilled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_sponsor_tier_reward_fulfilled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_sponsor_tier_reward_fulfilled_was; end

    sig { void }
    def is_sponsor_tier_reward_fulfilled_will_change!; end

    sig { returns(T.untyped) }
    def latest_sponsorable_metadata; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def latest_sponsorable_metadata=(value); end

    sig { returns(T::Boolean) }
    def latest_sponsorable_metadata?; end

    sig { returns(T.untyped) }
    def latest_sponsorable_metadata_before_last_save; end

    sig { returns(T.untyped) }
    def latest_sponsorable_metadata_before_type_cast; end

    sig { returns(T::Boolean) }
    def latest_sponsorable_metadata_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def latest_sponsorable_metadata_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def latest_sponsorable_metadata_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def latest_sponsorable_metadata_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def latest_sponsorable_metadata_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def latest_sponsorable_metadata_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def latest_sponsorable_metadata_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def latest_sponsorable_metadata_previously_was; end

    sig { returns(T.untyped) }
    def latest_sponsorable_metadata_was; end

    sig { void }
    def latest_sponsorable_metadata_will_change!; end

    sig { returns(T.nilable(::String)) }
    def maintainer_notes; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def maintainer_notes=(value); end

    sig { returns(T::Boolean) }
    def maintainer_notes?; end

    sig { returns(T.nilable(::String)) }
    def maintainer_notes_before_last_save; end

    sig { returns(T.untyped) }
    def maintainer_notes_before_type_cast; end

    sig { returns(T::Boolean) }
    def maintainer_notes_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def maintainer_notes_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def maintainer_notes_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def maintainer_notes_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def maintainer_notes_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def maintainer_notes_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def maintainer_notes_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def maintainer_notes_previously_was; end

    sig { returns(T.nilable(::String)) }
    def maintainer_notes_was; end

    sig { void }
    def maintainer_notes_will_change!; end

    sig { returns(T::Boolean) }
    def paid; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def paid=(value); end

    sig { returns(T::Boolean) }
    def paid?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def paid_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def paid_at=(value); end

    sig { returns(T::Boolean) }
    def paid_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def paid_at_before_last_save; end

    sig { returns(T.untyped) }
    def paid_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def paid_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def paid_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def paid_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def paid_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def paid_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def paid_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def paid_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def paid_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def paid_at_was; end

    sig { void }
    def paid_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def paid_before_last_save; end

    sig { returns(T.untyped) }
    def paid_before_type_cast; end

    sig { returns(T::Boolean) }
    def paid_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def paid_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def paid_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def paid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def paid_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def paid_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def paid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def paid_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def paid_was; end

    sig { void }
    def paid_will_change!; end

    sig { returns(::String) }
    def payment_source; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def payment_source=(value); end

    sig { returns(T::Boolean) }
    def payment_source?; end

    sig { returns(T.nilable(::String)) }
    def payment_source_before_last_save; end

    sig { returns(T.untyped) }
    def payment_source_before_type_cast; end

    sig { returns(T::Boolean) }
    def payment_source_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def payment_source_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def payment_source_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def payment_source_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payment_source_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def payment_source_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def payment_source_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payment_source_previously_was; end

    sig { returns(T.nilable(::String)) }
    def payment_source_was; end

    sig { void }
    def payment_source_will_change!; end

    sig { returns(::String) }
    def privacy_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def privacy_level=(value); end

    sig { returns(T::Boolean) }
    def privacy_level?; end

    sig { returns(T.nilable(::String)) }
    def privacy_level_before_last_save; end

    sig { returns(T.untyped) }
    def privacy_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def privacy_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def privacy_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def privacy_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def privacy_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def privacy_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def privacy_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def privacy_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def privacy_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def privacy_level_was; end

    sig { void }
    def privacy_level_will_change!; end

    sig { void }
    def restore_activated_at!; end

    sig { void }
    def restore_active!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_expires_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_invoiced_sponsorship_transfer_id!; end

    sig { void }
    def restore_is_sponsor_opted_in_to_email!; end

    sig { void }
    def restore_is_sponsor_opted_in_to_share_with_fiscal_host!; end

    sig { void }
    def restore_is_sponsor_tier_reward_fulfilled!; end

    sig { void }
    def restore_latest_sponsorable_metadata!; end

    sig { void }
    def restore_maintainer_notes!; end

    sig { void }
    def restore_paid!; end

    sig { void }
    def restore_paid_at!; end

    sig { void }
    def restore_payment_source!; end

    sig { void }
    def restore_privacy_level!; end

    sig { void }
    def restore_skip_proration!; end

    sig { void }
    def restore_sponsor_id!; end

    sig { void }
    def restore_sponsorable_id!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_subscribable_id!; end

    sig { void }
    def restore_subscribable_selected_at!; end

    sig { void }
    def restore_subscription_item_id!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_activated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_activated_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_active; end

    sig { returns(T::Boolean) }
    def saved_change_to_active?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_expires_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_expires_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_invoiced_sponsorship_transfer_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_invoiced_sponsorship_transfer_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_is_sponsor_opted_in_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_is_sponsor_opted_in_to_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_is_sponsor_opted_in_to_share_with_fiscal_host; end

    sig { returns(T::Boolean) }
    def saved_change_to_is_sponsor_opted_in_to_share_with_fiscal_host?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_is_sponsor_tier_reward_fulfilled; end

    sig { returns(T::Boolean) }
    def saved_change_to_is_sponsor_tier_reward_fulfilled?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_latest_sponsorable_metadata; end

    sig { returns(T::Boolean) }
    def saved_change_to_latest_sponsorable_metadata?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_maintainer_notes; end

    sig { returns(T::Boolean) }
    def saved_change_to_maintainer_notes?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_paid; end

    sig { returns(T::Boolean) }
    def saved_change_to_paid?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_paid_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_paid_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_payment_source; end

    sig { returns(T::Boolean) }
    def saved_change_to_payment_source?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_privacy_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_privacy_level?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_skip_proration; end

    sig { returns(T::Boolean) }
    def saved_change_to_skip_proration?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sponsor_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsor_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sponsorable_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsorable_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_subscribable_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_subscribable_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_subscribable_selected_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_subscribable_selected_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_subscription_item_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_subscription_item_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def skip_proration; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def skip_proration=(value); end

    sig { returns(T::Boolean) }
    def skip_proration?; end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_proration_before_last_save; end

    sig { returns(T.untyped) }
    def skip_proration_before_type_cast; end

    sig { returns(T::Boolean) }
    def skip_proration_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def skip_proration_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def skip_proration_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def skip_proration_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_proration_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def skip_proration_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def skip_proration_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_proration_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_proration_was; end

    sig { void }
    def skip_proration_will_change!; end

    sig { returns(::Integer) }
    def sponsor_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sponsor_id=(value); end

    sig { returns(T::Boolean) }
    def sponsor_id?; end

    sig { returns(T.nilable(::Integer)) }
    def sponsor_id_before_last_save; end

    sig { returns(T.untyped) }
    def sponsor_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsor_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsor_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsor_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsor_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsor_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsor_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsor_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsor_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sponsor_id_was; end

    sig { void }
    def sponsor_id_will_change!; end

    sig { returns(::Integer) }
    def sponsorable_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sponsorable_id=(value); end

    sig { returns(T::Boolean) }
    def sponsorable_id?; end

    sig { returns(T.nilable(::Integer)) }
    def sponsorable_id_before_last_save; end

    sig { returns(T.untyped) }
    def sponsorable_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsorable_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsorable_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsorable_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsorable_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsorable_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsorable_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsorable_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsorable_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sponsorable_id_was; end

    sig { void }
    def sponsorable_id_will_change!; end

    sig { returns(::Integer) }
    def state; end

    sig { params(value: ::Integer).returns(::Integer) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::Integer)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def state_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def state_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(::Integer) }
    def subscribable_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def subscribable_id=(value); end

    sig { returns(T::Boolean) }
    def subscribable_id?; end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id_before_last_save; end

    sig { returns(T.untyped) }
    def subscribable_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def subscribable_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def subscribable_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def subscribable_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def subscribable_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def subscribable_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def subscribable_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def subscribable_id_was; end

    sig { void }
    def subscribable_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def subscribable_selected_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def subscribable_selected_at=(value); end

    sig { returns(T::Boolean) }
    def subscribable_selected_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def subscribable_selected_at_before_last_save; end

    sig { returns(T.untyped) }
    def subscribable_selected_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def subscribable_selected_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def subscribable_selected_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def subscribable_selected_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def subscribable_selected_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def subscribable_selected_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def subscribable_selected_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def subscribable_selected_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def subscribable_selected_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def subscribable_selected_at_was; end

    sig { void }
    def subscribable_selected_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def subscription_item_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def subscription_item_id=(value); end

    sig { returns(T::Boolean) }
    def subscription_item_id?; end

    sig { returns(T.nilable(::Integer)) }
    def subscription_item_id_before_last_save; end

    sig { returns(T.untyped) }
    def subscription_item_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def subscription_item_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subscription_item_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subscription_item_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def subscription_item_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def subscription_item_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subscription_item_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def subscription_item_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def subscription_item_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def subscription_item_id_was; end

    sig { void }
    def subscription_item_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_activated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_expires_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invoiced_sponsorship_transfer_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_is_sponsor_opted_in_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_is_sponsor_opted_in_to_share_with_fiscal_host?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_is_sponsor_tier_reward_fulfilled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_latest_sponsorable_metadata?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_maintainer_notes?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_paid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_paid_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payment_source?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_privacy_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_skip_proration?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsor_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsorable_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subscribable_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subscribable_selected_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subscription_item_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedPreludeBatchMethods
    sig { returns(T.untyped) }
    def active_goal; end

    sig { params(current_user: T.untyped).returns(T.untyped) }
    def blocked_for?(current_user); end

    sig { returns(T.untyped) }
    def latest_billing_transaction_line_item_for_tier; end

    sig { returns(T.untyped) }
    def pending_change; end

    sig { returns(T.untyped) }
    def pending_subscription_item_change; end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def sponsor_readable_by?(viewer); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_active_goal; end

    sig { params(current_user: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_blocked_for?(current_user); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_latest_billing_transaction_line_item_for_tier; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_pending_change; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_pending_subscription_item_change; end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_sponsor_readable_by?(viewer); end

    sig { returns(T.untyped) }
    def sponsors_invoiced?; end

    sig { returns(T.untyped) }
    def via_bulk_sponsorship?; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_sponsors_invoiced?; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_via_bulk_sponsorship?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active_or_paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active_test(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def amount_visible_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def at_sponsors_tier_price(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def emailable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from_sponsor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def github(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def has_subscribable_selected_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def inactive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def inactive_test(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invoiced(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def join_sponsors_listings_on_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def listing_approved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def locked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_github(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_invoiced(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_patreon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_privacy_private(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_privacy_public(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def one_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only_custom_tiers(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def paid_or_patreon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def patreon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def privacy_private(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def privacy_public(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def processing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ranked_by_sponsor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ranked_by_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ranked_for_public_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def recurring(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sponsor_visible_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def tier_selected_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def tier_selected_since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unpaid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_linked_org_preloads(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_tier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_user_or_org_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_custom_tiers(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedWorkflowClassMethods
    sig { params(val: String).returns(T.untyped) }
    def state=(val); end

    sig { returns(PrivateRelationWhereChain) }
    def with_active_test_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_inactive_test_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_pending_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_active_test_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_inactive_test_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_pending_state; end
  end

  module GeneratedWorkflowMethods
    sig { returns(T::Boolean) }
    def active_test?; end

    sig { returns(T::Boolean) }
    def can_payment_completed?; end

    sig { returns(T::Boolean) }
    def inactive_test?; end

    sig { void }
    def payment_completed!; end

    sig { returns(T::Boolean) }
    def pending?; end

    sig { returns(PrivateRelationWhereChain) }
    def without_active_test_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_inactive_test_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_pending_state; end
  end

  class PrivateAssocationRelation < ::ActiveRecord::AssociationRelation
    include GeneratedWorkflowClassMethods
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Sponsorship } }

    sig { returns(T::Array[::Sponsorship]) }
    def to_a; end

    sig { returns(T::Array[::Sponsorship]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Sponsorship } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedWorkflowClassMethods
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Sponsorship } }

    sig do
      params(
        records: T.any(::Sponsorship, T::Enumerable[T.any(::Sponsorship, T::Enumerable[::Sponsorship])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Sponsorship, T::Enumerable[T.any(::Sponsorship, T::Enumerable[::Sponsorship])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Sponsorship, T::Enumerable[T.any(::Sponsorship, T::Enumerable[::Sponsorship])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Sponsorship]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Sponsorship, T::Enumerable[T.any(::Sponsorship, T::Enumerable[::Sponsorship])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Sponsorship, T::Enumerable[T.any(::Sponsorship, T::Enumerable[::Sponsorship])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Sponsorship, T::Enumerable[T.any(::Sponsorship, T::Enumerable[::Sponsorship])])
      ).returns(T::Array[::Sponsorship])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Sponsorship]) }
    def target; end

    sig { returns(T::Array[::Sponsorship]) }
    def to_a; end

    sig { returns(T::Array[::Sponsorship]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include GeneratedWorkflowClassMethods
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Sponsorship } }

    sig { returns(T::Array[::Sponsorship]) }
    def to_a; end

    sig { returns(T::Array[::Sponsorship]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Sponsorship } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

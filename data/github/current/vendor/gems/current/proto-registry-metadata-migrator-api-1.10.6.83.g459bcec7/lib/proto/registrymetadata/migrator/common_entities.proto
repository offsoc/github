syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "pkg_entities.proto";

package github.registry.metadata.v1.migrator.common;

option go_package = "github.com/github/registry-metadata/rms/twirp/proto/rms/v1/common";
option ruby_package = "Proto::RegistryMetadata::V1::Migrator::Common";

// VersionSummary represents a version of a package along with the package which contains it, and a list of aliases
// which refer to that version
message PackageOverview {
    pkg.Package package = 1;
    repeated pkg.Version versions = 2;
    PageSummary versions_page_summary = 3;
    repeated common.VersionAlias aliases = 4;
    PageSummary aliases_page_summary = 5;
}

// VersionSummary represents a version of a package along with the package which contains it, and a list of aliases
// which refer to that version
message VersionOverview {
    pkg.Package package = 1;
    pkg.Version version = 2;
    repeated common.VersionAlias aliases = 3;
    PageSummary aliases_page_summary = 4;
}

// VersionAlias represents a named reference to a version of a package. VersionAliases are unique within a package, and
// may be overwritten at any time.
message VersionAlias {
    pkg.Ecosystem ecosystem = 1;
    string package_namespace = 2;
    string package_name = 3;
    string alias = 4;
    string version = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
}

// PageInfo represents a pointer to a page of results. It can either refer to a page of results via an integer offset
// (begin listing after skipping `offset` results), or via a textual token (begin listing results after the record
// which matches `cursor`).
// The default value will get the first page of results with the default page size, and with results in the default
// order (descending).
message PageInfo {
    int64 limit = 1;
    oneof cursor {
        int64 offset = 2;
        string token = 3;
    }
    pkg.Order order = 4;
}

// PageSummary represents the pagination state of paginated RPC responses. If next_page is nil, the end of the result
// set has been reached. Otherwise, the next_page struct will represent the pageInfo message which will provide the next
// page of results when sent to an appropriate RPC endpoint.
// In this way, fully paginating over a result set can be done by repeatedly calling an API using the returned next_page
// message as the provided PageInfo for subsequent calls, until the
message PageSummary {
    PageInfo next_page = 1;
    int64 total_results = 2;
}

// AuthenticationDecision represents whether an request to authenticate a certain action is allowed or denied.
enum AuthenticationDecision {
    DENY = 0;
    ALLOW = 1;
}

enum ActorType {
    UNSPECIFIED = 0;
    USER = 1;
    INSTALLATION = 2;
}

// RequestMeta contains information around how the registry side request, including the actor making the request, and
// information about how the request was made such as the user agent received by the registry.
message RequestMeta {
    int64 actor_id = 1;
    string user_agent = 2;
    ActorType actor_type = 3;
    string username = 4;
    pkg.Visibility repo_visibility = 5;
	pkg.Visibility package_creation_visibility = 6;
	int64 owner_id = 7;
	int64 repo_id = 8;
    string owner_type = 9;
}

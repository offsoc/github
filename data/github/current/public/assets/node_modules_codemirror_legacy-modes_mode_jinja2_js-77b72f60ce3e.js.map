{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_jinja2_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/jinja2.js"],"sourcesContent":["var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n                \"extends\", \"filter\", \"endfilter\", \"firstof\", \"do\", \"for\",\n                \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n                \"ifequal\", \"endifequal\", \"ifnotequal\", \"set\", \"raw\", \"endraw\",\n                \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n                \"parsed\", \"regroup\", \"reversed\", \"spaceless\", \"call\", \"endcall\", \"macro\",\n                \"endmacro\", \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n                \"closeblock\", \"openvariable\", \"closevariable\", \"without\", \"context\",\n                \"openbrace\", \"closebrace\", \"opencomment\",\n                \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n                \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n                \"endblocktrans\", \"get_available_languages\",\n                \"get_current_language_bidi\", \"pluralize\", \"autoescape\", \"endautoescape\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\nkeywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\natom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\nfunction tokenBase (stream, state) {\n  var ch = stream.peek();\n\n  //Comment\n  if (state.incomment) {\n    if(!stream.skipTo(\"#}\")) {\n      stream.skipToEnd();\n    } else {\n      stream.eatWhile(/\\#|}/);\n      state.incomment = false;\n    }\n    return \"comment\";\n    //Tag\n  } else if (state.intag) {\n    //After operator\n    if(state.operator) {\n      state.operator = false;\n      if(stream.match(atom)) {\n        return \"atom\";\n      }\n      if(stream.match(number)) {\n        return \"number\";\n      }\n    }\n    //After sign\n    if(state.sign) {\n      state.sign = false;\n      if(stream.match(atom)) {\n        return \"atom\";\n      }\n      if(stream.match(number)) {\n        return \"number\";\n      }\n    }\n\n    if(state.instring) {\n      if(ch == state.instring) {\n        state.instring = false;\n      }\n      stream.next();\n      return \"string\";\n    } else if(ch == \"'\" || ch == '\"') {\n      state.instring = ch;\n      stream.next();\n      return \"string\";\n    } else if (state.inbraces > 0 && ch ==\")\") {\n      stream.next()\n      state.inbraces--;\n    }\n    else if (ch == \"(\") {\n      stream.next()\n      state.inbraces++;\n    }\n    else if (state.inbrackets > 0 && ch ==\"]\") {\n      stream.next()\n      state.inbrackets--;\n    }\n    else if (ch == \"[\") {\n      stream.next()\n      state.inbrackets++;\n    } else if (!state.lineTag && (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\"))) {\n      state.intag = false;\n      return \"tag\";\n    } else if(stream.match(operator)) {\n      state.operator = true;\n      return \"operator\";\n    } else if(stream.match(sign)) {\n      state.sign = true;\n    } else {\n      if (stream.column() == 1 && state.lineTag && stream.match(keywords)) {\n        //allow nospace after tag before the keyword\n        return \"keyword\";\n      }\n      if(stream.eat(\" \") || stream.sol()) {\n        if(stream.match(keywords)) {\n          return \"keyword\";\n        }\n        if(stream.match(atom)) {\n          return \"atom\";\n        }\n        if(stream.match(number)) {\n          return \"number\";\n        }\n        if(stream.sol()) {\n          stream.next();\n        }\n      } else {\n        stream.next();\n      }\n\n    }\n    return \"variable\";\n  } else if (stream.eat(\"{\")) {\n    if (stream.eat(\"#\")) {\n      state.incomment = true;\n      if(!stream.skipTo(\"#}\")) {\n        stream.skipToEnd();\n      } else {\n        stream.eatWhile(/\\#|}/);\n        state.incomment = false;\n      }\n      return \"comment\";\n      //Open tag\n    } else if (ch = stream.eat(/\\{|%/)) {\n      //Cache close tag\n      state.intag = ch;\n      state.inbraces = 0;\n      state.inbrackets = 0;\n      if(ch == \"{\") {\n        state.intag = \"}\";\n      }\n      stream.eat(\"-\");\n      return \"tag\";\n    }\n    //Line statements\n  } else if (stream.eat('#')) {\n    if (stream.peek() == '#') {\n      stream.skipToEnd();\n      return \"comment\"\n    }\n    else if (!stream.eol()) {\n      state.intag = true;\n      state.lineTag = true;\n      state.inbraces = 0;\n      state.inbrackets = 0;\n      return \"tag\";\n    }\n  }\n  stream.next();\n};\n\nexport const jinja2 = {\n  name: \"jinja2\",\n  startState: function () {\n    return {tokenize: tokenBase, inbrackets: 0, inbraces: 0};\n  },\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    if (stream.eol() && state.lineTag && !state.instring && state.inbraces == 0 && state.inbrackets == 0) {\n      //Close line statement at the EOL\n      state.intag = false\n      state.lineTag = false\n    }\n    return style;\n  },\n  languageData: {\n    commentTokens: {block: {open: \"{#\", close: \"#}\", line: \"##\"}}\n  }\n};\n"],"names":["keywords","operator","sign","atom","number","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","match","instring","next","inbraces","inbrackets","lineTag","eat","column","sol","eol","join","jinja2","name","startState","tokenize","token","style","languageData","commentTokens","block","open","close","line"],"sourceRoot":""}
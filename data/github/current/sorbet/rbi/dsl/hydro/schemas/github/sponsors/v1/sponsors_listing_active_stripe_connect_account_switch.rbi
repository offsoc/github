# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Sponsors::V1::SponsorsListingActiveStripeConnectAccountSwitch`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Sponsors::V1::SponsorsListingActiveStripeConnectAccountSwitch`.

class Hydro::Schemas::Github::Sponsors::V1::SponsorsListingActiveStripeConnectAccountSwitch
  sig do
    params(
      new_active_stripe_connect_account: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::StripeConnectAccount),
      old_active_stripe_connect_account: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::StripeConnectAccount),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      sponsorable: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      sponsors_listing: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing),
      sponsors_listing_stafftools_metadata: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListingStafftoolsMetadata)
    ).void
  end
  def initialize(new_active_stripe_connect_account: nil, old_active_stripe_connect_account: nil, request_context: nil, sponsorable: nil, sponsors_listing: nil, sponsors_listing_stafftools_metadata: nil); end

  sig { void }
  def clear_new_active_stripe_connect_account; end

  sig { void }
  def clear_old_active_stripe_connect_account; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_sponsorable; end

  sig { void }
  def clear_sponsors_listing; end

  sig { void }
  def clear_sponsors_listing_stafftools_metadata; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::StripeConnectAccount)) }
  def new_active_stripe_connect_account; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::StripeConnectAccount)).void }
  def new_active_stripe_connect_account=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::StripeConnectAccount)) }
  def old_active_stripe_connect_account; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::StripeConnectAccount)).void }
  def old_active_stripe_connect_account=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def sponsorable; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def sponsorable=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing)) }
  def sponsors_listing; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing)).void }
  def sponsors_listing=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListingStafftoolsMetadata)) }
  def sponsors_listing_stafftools_metadata; end

  sig do
    params(
      value: T.nilable(Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListingStafftoolsMetadata)
    ).void
  end
  def sponsors_listing_stafftools_metadata=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::Entities::ConflictedPath`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::Entities::ConflictedPath`.

class Hydro::Schemas::Github::V1::Entities::ConflictedPath
  sig do
    params(
      ancestor: T.nilable(Hydro::Schemas::Github::V1::Entities::ConflictItem),
      conflict_type: T.nilable(T.any(Symbol, Integer)),
      ours: T.nilable(Hydro::Schemas::Github::V1::Entities::ConflictItem),
      path: T.nilable(String),
      theirs: T.nilable(Hydro::Schemas::Github::V1::Entities::ConflictItem)
    ).void
  end
  def initialize(ancestor: nil, conflict_type: nil, ours: nil, path: nil, theirs: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::ConflictItem)) }
  def ancestor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::ConflictItem)).void }
  def ancestor=(value); end

  sig { void }
  def clear_ancestor; end

  sig { void }
  def clear_conflict_type; end

  sig { void }
  def clear_ours; end

  sig { void }
  def clear_path; end

  sig { void }
  def clear_theirs; end

  sig { returns(T.any(Symbol, Integer)) }
  def conflict_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def conflict_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::ConflictItem)) }
  def ours; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::ConflictItem)).void }
  def ours=(value); end

  sig { returns(String) }
  def path; end

  sig { params(value: String).void }
  def path=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::ConflictItem)) }
  def theirs; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::ConflictItem)).void }
  def theirs=(value); end
end

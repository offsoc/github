{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_groovy_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/groovy.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\n  \"abstract as assert boolean break byte case catch char class const continue def default \" +\n    \"do double else enum extends final finally float for goto if implements import in \" +\n    \"instanceof int interface long native new package private protected public return \" +\n    \"short static strictfp super switch synchronized threadsafe throw throws trait transient \" +\n    \"try void volatile while\");\nvar blockKeywords = words(\"catch class def do else enum finally for if interface switch trait try while\");\nvar standaloneKeywords = words(\"return break continue\");\nvar atoms = words(\"null true false this\");\n\nvar curPunc;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\") {\n    return startString(ch, stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    if (stream.eat(/eE/)) { stream.eat(/\\+\\-/); stream.eatWhile(/\\d/); }\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize.push(tokenComment);\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (expectExpression(state.lastToken, false)) {\n      return startString(ch, stream, state);\n    }\n  }\n  if (ch == \"-\" && stream.eat(\">\")) {\n    curPunc = \"->\";\n    return null;\n  }\n  if (/[+\\-*&%=<>!?|\\/~]/.test(ch)) {\n    stream.eatWhile(/[+\\-*&%=<>|~]/);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  if (ch == \"@\") { stream.eatWhile(/[\\w\\$_\\.]/); return \"meta\"; }\n  if (state.lastToken == \".\") return \"property\";\n  if (stream.eat(\":\")) { curPunc = \"proplabel\"; return \"property\"; }\n  var cur = stream.current();\n  if (atoms.propertyIsEnumerable(cur)) { return \"atom\"; }\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc = \"standalone\";\n    return \"keyword\";\n  }\n  return \"variable\";\n}\ntokenBase.isBase = true;\n\nfunction startString(quote, stream, state) {\n  var tripleQuoted = false;\n  if (quote != \"/\" && stream.eat(quote)) {\n    if (stream.eat(quote)) tripleQuoted = true;\n    else return \"string\";\n  }\n  function t(stream, state) {\n    var escaped = false, next, end = !tripleQuoted;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        if (!tripleQuoted) { break; }\n        if (stream.match(quote + quote)) { end = true; break; }\n      }\n      if (quote == '\"' && next == \"$\" && !escaped) {\n        if (stream.eat(\"{\")) {\n          state.tokenize.push(tokenBaseUntilBrace());\n          return \"string\";\n        } else if (stream.match(/^\\w/, false)) {\n          state.tokenize.push(tokenVariableDeref);\n          return \"string\";\n        }\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize.pop();\n    return \"string\";\n  }\n  state.tokenize.push(t);\n  return t(stream, state);\n}\n\nfunction tokenBaseUntilBrace() {\n  var depth = 1;\n  function t(stream, state) {\n    if (stream.peek() == \"}\") {\n      depth--;\n      if (depth == 0) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length-1](stream, state);\n      }\n    } else if (stream.peek() == \"{\") {\n      depth++;\n    }\n    return tokenBase(stream, state);\n  }\n  t.isBase = true;\n  return t;\n}\n\nfunction tokenVariableDeref(stream, state) {\n  var next = stream.match(/^(\\.|[\\w\\$_]+)/)\n  if (!next) {\n    state.tokenize.pop()\n    return state.tokenize[state.tokenize.length-1](stream, state)\n  }\n  return next[0] == \".\" ? null : \"variable\"\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize.pop();\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction expectExpression(last, newline) {\n  return !last || last == \"operator\" || last == \"->\" || /[\\.\\[\\{\\(,;:]/.test(last) ||\n    last == \"newstatement\" || last == \"keyword\" || last == \"proplabel\" ||\n    (last == \"standalone\" && !newline);\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport const groovy = {\n  name: \"groovy\",\n  startState: function(indentUnit) {\n    return {\n      tokenize: [tokenBase],\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true,\n      lastToken: null\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n      // Automatic semicolon insertion\n      if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) {\n        popContext(state); ctx = state.context;\n      }\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = state.tokenize[state.tokenize.length-1](stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n    // Handle indentation for {x -> \\n ... }\n    else if (curPunc == \"->\" && ctx.type == \"statement\" && ctx.prev.type == \"}\") {\n      popContext(state);\n      state.context.align = false;\n    }\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n      pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    state.lastToken = curPunc || style;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (!state.tokenize[state.tokenize.length-1].isBase) return null;\n    var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;\n    if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;\n    var closing = firstChar == ctx.type;\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : cx.unit);\n    else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']}\n  }\n};\n"],"names":["words","str","obj","split","i","length","curPunc","keywords","blockKeywords","standaloneKeywords","atoms","tokenBase","stream","state","ch","next","startString","test","eatWhile","eat","tokenize","push","tokenComment","skipToEnd","expectExpression","lastToken","cur","current","propertyIsEnumerable","quote","tripleQuoted","t","escaped","end","match","tokenBaseUntilBrace","depth","peek","pop","isBase","tokenVariableDeref","maybeEnd","last","newline","Context","indented","column","type","align","prev","pushContext","col","context","popContext","groovy","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","cx","firstChar","charAt","closing","unit","languageData","indentOnInput","commentTokens","line","block","open","close","closeBrackets","brackets"],"sourceRoot":""}
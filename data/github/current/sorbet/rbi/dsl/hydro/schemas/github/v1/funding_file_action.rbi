# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::FundingFileAction`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::FundingFileAction`.

class Hydro::Schemas::Github::V1::FundingFileAction
  sig do
    params(
      action: T.nilable(T.any(Symbol, Integer)),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      occurred_at: T.nilable(Google::Protobuf::Timestamp),
      owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      repo_platforms: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::FundingPlatform], T::Array[Hydro::Schemas::Github::V1::Entities::FundingPlatform])),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(action: nil, actor: nil, occurred_at: nil, owner: nil, repo_platforms: T.unsafe(nil), repository: nil, request_context: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_occurred_at; end

  sig { void }
  def clear_owner; end

  sig { void }
  def clear_repo_platforms; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def occurred_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def occurred_at=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def owner=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::FundingPlatform]) }
  def repo_platforms; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::FundingPlatform]).void }
  def repo_platforms=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

{"version":3,"file":"chunk-app_components_advisories_cvss-calculator-metric-element_ts-xxxxxxxxxxxx.js","mappings":"4gBAGe,YAAMA,oCAAoCC,YAGvD,IAAWC,YAAa,CACtB,OAAO,IAAI,CAACC,YAAY,CAAC,mBAC3B,CAEOC,gBAAgBC,CAAY,CAAE,CACnC,IAAIC,EAAUD,EAAME,MAAM,CAC1BD,EAAUA,EAAQE,OAAO,CAAC,iCAC1B,IAAI,CAACC,MAAM,CAACH,EAAS,GACvB,CAEOI,eAAeC,CAAa,CAAE,CACnC,IAAMC,EAAkB,IAAI,CAACC,cAAc,CAACC,IAAI,CAACR,GAAW,IAAI,CAACS,cAAc,CAACT,KAAaK,GAC7F,IAAI,CAACF,MAAM,CAACG,EAAiB,GAC/B,CAEA,IAAWI,eAA+B,CACxC,OAAO,IAAI,CAACb,YAAY,CAAC,sBAC3B,CAEQc,yBAA0B,CAChC,OAAO,IAAI,CAACC,aAAa,CAAC,mCAC5B,CAEQT,OAAOU,CAAuC,CAAEC,CAAsB,CAAE,CAE9E,IAAMC,EAAoBF,GAAY,IAAI,CAACN,cAAc,CAAC,EAAE,CAE5D,GAAI,IAAI,CAACI,uBAAuB,KAAOI,EACrC,OAGF,IAAK,IAAMC,KAAU,IAAI,CAACT,cAAc,CACtCS,EAAOC,aAAa,EAAEC,UAAUC,OAAO,mCACvCH,EAAOJ,aAAa,CAAC,mBAAmBQ,aAAa,eAAgB,SAGvEL,EAAkBb,OAAO,CAAC,6BAA6BgB,UAAUG,IAAI,mCACrEN,EAAkBK,YAAY,CAAC,eAAgB,QAE/C,IAAME,EAAa,IAAI,CAACb,cAAc,CAACM,EAEvC,KAAI,CAACL,aAAa,CAAGY,EAErB,IAAI,CAACC,aAAa,CAAC,IAAIC,YAAsC,wBAAyB,CAACC,OAAQ,CAACX,cAAAA,CAAa,CAAC,GAChH,CAEA,IAAYJ,cAAcgB,CAAuB,CAAE,CAC7CA,GACF,IAAI,CAACN,YAAY,CAAC,sBAAuBM,EAE7C,CAEQjB,eAAekB,CAA0B,CAAiB,CAChE,OAAOA,EAAc9B,YAAY,CAAC,aACpC,CACF,E,GAzDG+B,EAAAA,EAAOA,C,CADWlC,EAAAA,SAAAA,CAAAA,iBAAAA,KAAAA,GAAAA,EAAAA,EAAAA,CADpBmC,EAAAA,EAAUA,C,CACUnC,E","sources":["app/components/advisories/cvss-calculator-metric-element.ts"],"sourcesContent":["import {controller, targets} from '@github/catalyst'\n\n@controller\nexport default class CvssCalculatorMetricElement extends HTMLElement {\n  @targets choiceElements: HTMLButtonElement[]\n\n  public get metricCode() {\n    return this.getAttribute('data-metric-code')\n  }\n\n  public selectFromClick(event: Event) {\n    let element = event.target as HTMLButtonElement\n    element = element.closest('.metric-selection-next-choice')!\n    this.select(element, true)\n  }\n\n  public selectFromCode(value: string) {\n    const elementToChoose = this.choiceElements.find(element => this.getChoiceValue(element) === value)\n    this.select(elementToChoose, false)\n  }\n\n  public get selectedValue(): string | null {\n    return this.getAttribute('data-selected-value')\n  }\n\n  private currentlySelectedChoice() {\n    return this.querySelector('.SegmentedControl-item--selected')\n  }\n\n  private select(toSelect: HTMLButtonElement | undefined, userInitiated: boolean) {\n    // We could pick whatever the calculator considers default instead, by storing the default element in search of the metric-selections\n    const nextChoiceElement = toSelect || this.choiceElements[0]!\n\n    if (this.currentlySelectedChoice() === nextChoiceElement) {\n      return\n    }\n\n    for (const choice of this.choiceElements) {\n      choice.parentElement?.classList.remove('SegmentedControl-item--selected')\n      choice.querySelector('[aria-current]')?.setAttribute('aria-current', 'false')\n    }\n\n    nextChoiceElement.closest('li.SegmentedControl-item')?.classList.add('SegmentedControl-item--selected')\n    nextChoiceElement.setAttribute('aria-current', 'true')\n\n    const nextChoice = this.getChoiceValue(nextChoiceElement)\n\n    this.selectedValue = nextChoice\n\n    this.dispatchEvent(new CustomEvent<{userInitiated: boolean}>('metricSelectionChange', {detail: {userInitiated}}))\n  }\n\n  private set selectedValue(newValue: string | null) {\n    if (newValue) {\n      this.setAttribute('data-selected-value', newValue)\n    }\n  }\n\n  private getChoiceValue(choiceElement: HTMLElement): string | null {\n    return choiceElement.getAttribute('data-value')\n  }\n}\n"],"names":["CvssCalculatorMetricElement","HTMLElement","metricCode","getAttribute","selectFromClick","event","element","target","closest","select","selectFromCode","value","elementToChoose","choiceElements","find","getChoiceValue","selectedValue","currentlySelectedChoice","querySelector","toSelect","userInitiated","nextChoiceElement","choice","parentElement","classList","remove","setAttribute","add","nextChoice","dispatchEvent","CustomEvent","detail","newValue","choiceElement","targets","controller"],"sourceRoot":""}
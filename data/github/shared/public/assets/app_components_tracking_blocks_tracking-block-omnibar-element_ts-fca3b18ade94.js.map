{"version":3,"file":"chunk-app_components_tracking_blocks_tracking-block-omnibar-element_ts-xxxxxxxxxxxx.js","mappings":"2wBAsEE,cAyBA,cASA,cA7Fa,YAAMA,oCAAoCC,YAIvD,IAAIC,OAAiC,CACnC,MAAQC,CAAAA,EAAAA,EAAAA,EAAAA,EAAW,IAAI,CAAE,UAAY,IAAI,CAACC,YAAY,EAAEC,cAAc,QACxE,CAEAC,mBAAoB,CAClB,MAAI,CAAEC,EAAAA,GAAAA,IAAAA,CAAN,IAAI,CACN,CAEAC,iBAAkB,CAChB,MAAI,CAAED,EAAAA,GAAAA,IAAAA,CAAN,IAAI,CACN,CAEAE,yBAAyBC,CAAY,CAAE,CACxB,kBAATA,GACF,MAAI,CAAEH,EAAAA,GAAAA,IAAAA,CAAN,IAAI,CAER,CAEAI,yBAAyBC,CAA4B,CAAE,CACrD,IAAMV,EAAQU,EAAMC,MAAM,CAC1B,GAAI,CAACX,EAAO,OACZ,IAAMY,EAAaZ,EAAMa,KAAK,CAACC,IAAI,GACnC,GAAI,CAACF,EAAWG,MAAM,CAAE,OAExB,IAAMC,EAAU,MAAI,CAAEC,EAAAA,GAAAA,IAAAA,CAAN,IAAI,CAA6BjB,EAAOY,GACxD,MAAI,CAAEM,EAAAA,GAAAA,IAAAA,CAAN,IAAI,CAAyBF,GAG7BN,EAAMC,MAAM,CAACE,KAAK,CAAG,GACrBH,EAAMS,aAAa,CAACC,KAAK,EAC3B,CAEAC,aAAaX,CAAkB,CAAE,CAC/BA,EAAMY,cAAc,GACpB,IAAMtB,EAAQU,EAAMa,aAAa,CAC3BC,EAAgB,IAAIC,SAASf,EAAMa,aAAa,EAAqBG,GAAG,CAAC,oBACzEd,EAAaY,GAAeG,WAAWb,QAAU,GAEvD,GAAIF,EAAY,CACd,IAAMI,EAAU,MAAI,CAAEC,EAAAA,GAAAA,IAAAA,CAAN,IAAI,CAA6BjB,EAAOY,GACxD,MAAI,CAAEM,EAAAA,GAAAA,IAAAA,CAAN,IAAI,CAAyBF,EAC/B,CAEI,IAAI,CAAChB,KAAK,GACZ,IAAI,CAACA,KAAK,CAACa,KAAK,CAAG,GACnB,IAAI,CAACb,KAAK,CAACoB,KAAK,GAEpB,CAESA,OAAQ,CACV,IAAI,CAACpB,KAAK,EAEf,IAAI,CAACA,KAAK,CAACoB,KAAK,EAClB,C,8BAEA,UAyBA,UASA,U,KA5FMQ,QAAQ,CAAG,E,CAiGnB,EAvCE,WAA4B5B,CAA4C,CAAEY,CAAkB,EAC1F,IAAIiB,EAAU7B,EAAM8B,OAAO,CAAiB,eACxCC,EAAO,KAIMF,EAIfE,EAAOF,EAAQ1B,aAAa,CAAkB,sBAF9C0B,EAAU7B,EAAM8B,OAAO,CAAiB,kBAK1C,IAAME,EAAgBhC,EAAM8B,OAAO,CAAiB,kBAIpD,MAAO,CACLG,UAAW,cACXC,SAJeC,MADYC,IAAI,CAACP,EAAQQ,gBAAgB,CAAC,mBAC3BC,SAAS,CAACC,GAASA,IAAUP,GAK3DnB,MAAOD,EACP4B,OAAQT,GAAMU,IAAM,EACtB,CACF,CAEA,WAAwBzB,CAA4B,EAClD,IAAI,CAAC0B,aAAa,CAChB,IAAIC,YAAY,gCAAiC,CAC/CC,QAAS,GACTC,OAAQ7B,CACV,GAEJ,CAEA,aACO,IAAI,CAAChB,KAAK,EAEf,KAAI,CAACA,KAAK,CAAC4B,QAAQ,CAAG,IAAI,CAACA,QAAQ,CACrC,C,GAhGCkB,EAAAA,EAAIA,C,CADchD,EAAAA,SAAAA,CAAAA,WAAAA,KAAAA,G,GAElBa,EAAAA,EAAMA,C,CAFYb,EAAAA,SAAAA,CAAAA,eAAAA,KAAAA,GAAAA,EAAAA,EAAAA,CADpBiD,EAAAA,EAAUA,C,CACUjD,E","sources":["app/components/tracking_blocks/tracking-block-omnibar-element.ts"],"sourcesContent":["import type AutocompleteElement from '@github/auto-complete-element'\nimport {attr, controller, target, findTarget} from '@github/catalyst'\nimport type {AppendItemMDPayload} from '@github-ui/tasklist-block-operations'\n\ntype AutocompleteEventInit = CustomEventInit & {\n  target: AutocompleteElement\n  relatedTarget: HTMLInputElement\n  previousInputValue: string\n}\n\n@controller\nexport default class TrackingBlockOmnibarElement extends HTMLElement {\n  @attr disabled = false\n  @target autocomplete: AutocompleteElement | null\n\n  get input(): HTMLInputElement | null {\n    return (findTarget(this, 'input') || this.autocomplete?.querySelector('input')) as HTMLInputElement\n  }\n\n  connectedCallback() {\n    this.#updateDisabledStatus()\n  }\n\n  adoptedCallback() {\n    this.#updateDisabledStatus()\n  }\n\n  attributeChangedCallback(name: string) {\n    if (name === 'data-disabled') {\n      this.#updateDisabledStatus()\n    }\n  }\n\n  handleAutoCompleteSelect(event: AutocompleteEventInit) {\n    const input = event.target\n    if (!input) return\n    const inputValue = input.value.trim()\n    if (!inputValue.length) return\n\n    const payload = this.#composeAppendItemMDPayload(input, inputValue)\n    this.#dispatchSubmitMDAtRest(payload)\n\n    // Restore the original input value\n    event.target.value = ''\n    event.relatedTarget.focus()\n  }\n\n  handleSubmit(event: SubmitEvent) {\n    event.preventDefault()\n    const input = event.currentTarget as HTMLFormElement\n    const inputFormData = new FormData(event.currentTarget as HTMLFormElement).get('tasklist_omnibar')\n    const inputValue = inputFormData?.toString().trim() ?? ''\n\n    if (inputValue) {\n      const payload = this.#composeAppendItemMDPayload(input, inputValue)\n      this.#dispatchSubmitMDAtRest(payload)\n    }\n\n    if (this.input) {\n      this.input.value = ''\n      this.input.focus()\n    }\n  }\n\n  override focus() {\n    if (!this.input) return\n\n    this.input.focus()\n  }\n\n  #composeAppendItemMDPayload(input: HTMLFormElement | AutocompleteElement, inputValue: string): AppendItemMDPayload {\n    let comment = input.closest<HTMLDivElement>('.js-comment')!\n    let form = null\n\n    // The js-comment class is a dotcom convention that is used to determine whether the call\n    // is occuring in issues#show or in a react view.\n    const isReact = !comment\n    if (isReact) {\n      comment = input.closest<HTMLDivElement>('.markdown-body')!\n    } else {\n      form = comment.querySelector<HTMLFormElement>('.js-comment-update')!\n    }\n\n    const trackingBlock = input.closest<HTMLDivElement>('tracking-block')!\n    const trackingBlocks = Array.from(comment.querySelectorAll('tracking-block'))\n    const position = trackingBlocks.findIndex(block => block === trackingBlock)\n\n    return {\n      operation: 'append_item',\n      position,\n      value: inputValue,\n      formId: form?.id || '',\n    }\n  }\n\n  #dispatchSubmitMDAtRest(payload: AppendItemMDPayload) {\n    this.dispatchEvent(\n      new CustomEvent('tracking-block-omnibar-append', {\n        bubbles: true,\n        detail: payload,\n      }),\n    )\n  }\n\n  #updateDisabledStatus() {\n    if (!this.input) return\n\n    this.input.disabled = this.disabled\n  }\n}\n"],"names":["TrackingBlockOmnibarElement","HTMLElement","input","findTarget","autocomplete","querySelector","connectedCallback","updateDisabledStatus","adoptedCallback","attributeChangedCallback","name","handleAutoCompleteSelect","event","target","inputValue","value","trim","length","payload","composeAppendItemMDPayload","dispatchSubmitMDAtRest","relatedTarget","focus","handleSubmit","preventDefault","currentTarget","inputFormData","FormData","get","toString","disabled","comment","closest","form","trackingBlock","operation","position","trackingBlocks","from","querySelectorAll","findIndex","block","formId","id","dispatchEvent","CustomEvent","bubbles","detail","attr","controller"],"sourceRoot":""}
{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_d_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/d.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar blockKeywordsStr = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" +\n    \"out scope struct switch try union unittest version while with\";\n\nconst parserConfig = {\n  keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" +\n                  \"debug default delegate delete deprecated export extern final finally function goto immutable \" +\n                  \"import inout invariant is lazy macro module new nothrow override package pragma private \" +\n                  \"protected public pure ref return shared short static super synchronized template this \" +\n                  \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" +\n                  blockKeywordsStr),\n  blockKeywords: words(blockKeywordsStr),\n  builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" +\n                 \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n  atoms: words(\"exit failure success true false null\"),\n  hooks: {\n    \"@\": function(stream, _state) {\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    }\n  }\n}\n\nvar statementIndentUnit = parserConfig.statementIndentUnit,\n    keywords = parserConfig.keywords,\n    builtin = parserConfig.builtin,\n    blockKeywords = parserConfig.blockKeywords,\n    atoms = parserConfig.atoms,\n    hooks = parserConfig.hooks,\n    multiLineStrings = parserConfig.multiLineStrings;\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (hooks[ch]) {\n    var result = hooks[ch](stream, state);\n    if (result !== false) return result;\n  }\n  if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"+\")) {\n      state.tokenize = tokenNestedComment;\n      return tokenNestedComment(stream, state);\n    }\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"keyword\";\n  }\n  if (builtin.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"builtin\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !(escaped || multiLineStrings))\n      state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenNestedComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"+\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport const d = {\n  name: \"d\",\n  startState: function(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n      pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return null;\n    var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n    if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n    var closing = firstChar == ctx.type;\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit || cx.unit);\n    else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n"],"names":["words","str","obj","split","i","length","curPunc","blockKeywordsStr","parserConfig","keywords","blockKeywords","builtin","atoms","hooks","stream","_state","eatWhile","statementIndentUnit","multiLineStrings","isOperatorChar","tokenBase","state","ch","next","result","tokenize","escaped","end","test","eat","tokenNestedComment","tokenComment","skipToEnd","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","d","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","textAfter","cx","firstChar","charAt","closing","unit","languageData","indentOnInput","commentTokens","line","block","open","close"],"sourceRoot":""}
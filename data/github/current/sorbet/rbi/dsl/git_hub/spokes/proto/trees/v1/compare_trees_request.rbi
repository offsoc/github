# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::Trees::V1::CompareTreesRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::Trees::V1::CompareTreesRequest`.

class GitHub::Spokes::Proto::Trees::V1::CompareTreesRequest
  sig do
    params(
      cursor: T.nilable(GitHub::Spokes::Proto::Types::V1::Cursor),
      include_renames: T.nilable(T::Boolean),
      range_selector: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::RangeSelector),
      recursive: T.nilable(T::Boolean),
      repository: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository),
      request_context: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)
    ).void
  end
  def initialize(cursor: nil, include_renames: nil, range_selector: nil, recursive: nil, repository: nil, request_context: nil); end

  sig { void }
  def clear_cursor; end

  sig { void }
  def clear_include_renames; end

  sig { void }
  def clear_range_selector; end

  sig { void }
  def clear_recursive; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Cursor)) }
  def cursor; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Cursor)).void }
  def cursor=(value); end

  sig { returns(T::Boolean) }
  def include_renames; end

  sig { params(value: T::Boolean).void }
  def include_renames=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::RangeSelector)) }
  def range_selector; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::RangeSelector)).void }
  def range_selector=(value); end

  sig { returns(T::Boolean) }
  def recursive; end

  sig { params(value: T::Boolean).void }
  def recursive=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)) }
  def repository; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Symbol)) }
  def selector; end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubypants` gem.
# Please instead update this file by running `bin/tapioca gem rubypants`.

# source://rubypants//lib/rubypants.rb#3
class RubyPants < ::String
  extend ::RubyPantsVersion

  # Create a new RubyPants instance with the text in +string+.
  #
  # Allowed elements in the options array:
  #
  # 0  :: do nothing
  # 1  :: enable all, using only em-dash shortcuts
  # 2  :: enable all, using old school en- and em-dash shortcuts (*default*)
  # 3  :: enable all, using inverted old school en and em-dash shortcuts
  # -1 :: stupefy (translate HTML entities to their ASCII-counterparts)
  #
  # If you don't like any of these defaults, you can pass symbols to change
  # RubyPants' behavior:
  #
  # <tt>:quotes</tt>         :: quotes
  # <tt>:backticks</tt>      :: backtick quotes (``double'' only)
  # <tt>:allbackticks</tt>   :: backtick quotes (``double'' and `single')
  # <tt>:dashes</tt>         :: dashes
  # <tt>:oldschool</tt>      :: old school dashes
  # <tt>:inverted</tt>       :: inverted old school dashes
  # <tt>:ellipses</tt>       :: ellipses
  # <tt>:prevent_breaks</tt> :: use nbsp and word-joiner to avoid breaking
  #                             before dashes and ellipses
  # <tt>:named_entities</tt> :: used named entities instead of the default
  #                             decimal entities (see below)
  # <tt>:convertquotes</tt>  :: convert <tt>&quot;</tt> entities to
  #                             <tt>"</tt>
  # <tt>:stupefy</tt>        :: translate RubyPants HTML entities
  #                             to their ASCII counterparts.
  #
  # In addition, you can customize the HTML entities that will be injected by
  # passing in a hash for the final argument. The defaults for these entities
  # are as follows:
  #
  # <tt>:single_left_quote</tt>  :: <tt>&#8216;</tt>
  # <tt>:double_left_quote</tt>  :: <tt>&#8220;</tt>
  # <tt>:single_right_quote</tt> :: <tt>&#8217;</tt>
  # <tt>:double_right_quote</tt> :: <tt>&#8221;</tt>
  # <tt>:em_dash</tt>            :: <tt>&#8212;</tt>
  # <tt>:en_dash</tt>            :: <tt>&#8211;</tt>
  # <tt>:ellipsis</tt>           :: <tt>&#8230;</tt>
  # <tt>:non_breaking_space</tt> :: <tt>&nbsp;</tt>
  # <tt>:word_joiner</tt>        :: <tt>&#8288;</tt>
  #
  # If the <tt>:named_entities</tt> option is used, the default entities are
  # as follows:
  #
  # <tt>:single_left_quote</tt>  :: <tt>&lsquo;</tt>
  # <tt>:double_left_quote</tt>  :: <tt>&ldquo;</tt>
  # <tt>:single_right_quote</tt> :: <tt>&rsquo;</tt>
  # <tt>:double_right_quote</tt> :: <tt>&rdquo;</tt>
  # <tt>:em_dash</tt>            :: <tt>&mdash;</tt>
  # <tt>:en_dash</tt>            :: <tt>&ndash;</tt>
  # <tt>:ellipsis</tt>           :: <tt>&hellip;</tt>
  # <tt>:non_breaking_space</tt> :: <tt>&nbsp;</tt>
  # <tt>:word_joiner</tt>        :: <tt>&#8288;</tt>
  #
  # If the <tt>:character_entities</tt> option is used, RubyPants will
  # emit Unicode characters directly, rather than HTML entities. By default
  # this excludes the space characters (non-breaking space and
  # word-joiner). To additionally emit Unicode space characters, use the
  # <tt>:character_spaces</tt> option.
  #
  # @return [RubyPants] a new instance of RubyPants
  #
  # source://rubypants//lib/rubypants.rb#68
  def initialize(string, options = T.unsafe(nil), entities = T.unsafe(nil)); end

  # Apply SmartyPants transformations.
  #
  # source://rubypants//lib/rubypants.rb#91
  def to_html; end

  protected

  # source://rubypants//lib/rubypants.rb#478
  def character_entities; end

  # source://rubypants//lib/rubypants.rb#490
  def character_spaces; end

  # source://rubypants//lib/rubypants.rb#450
  def default_entities; end

  # Return +str+ replacing all +patt+ with +repl+. If +prevent_breaks+ is true,
  # then replace spaces preceding +patt+ with a non-breaking space, and if there
  # are no spaces, then insert a word-joiner.
  #
  # source://rubypants//lib/rubypants.rb#247
  def educate(str, patt, repl, prevent_breaks); end

  # Return the string, with "<tt>``backticks''</tt>"-style single quotes
  # translated into HTML curly quote entities.
  #
  # source://rubypants//lib/rubypants.rb#307
  def educate_backticks(str); end

  # Return the string, with each instance of "<tt>--</tt>" translated to an
  # em-dash HTML entity.
  #
  # source://rubypants//lib/rubypants.rb#264
  def educate_dashes(str, prevent_breaks = T.unsafe(nil)); end

  # Return the string, with each instance of "<tt>--</tt>" translated
  # to an em-dash HTML entity, and each "<tt>---</tt>" translated to
  # an en-dash HTML entity. Two reasons why: First, unlike the en- and
  # em-dash syntax supported by +educate_dashes_oldschool+, it's
  # compatible with existing entries written before SmartyPants 1.1,
  # back when "<tt>--</tt>" was only used for em-dashes.  Second,
  # em-dashes are more common than en-dashes, and so it sort of makes
  # sense that the shortcut should be shorter to type. (Thanks to
  # Aaron Swartz for the idea.)
  #
  # source://rubypants//lib/rubypants.rb#287
  def educate_dashes_inverted(str, prevent_breaks = T.unsafe(nil)); end

  # Return the string, with each instance of "<tt>--</tt>" translated to an
  # en-dash HTML entity, and each "<tt>---</tt>" translated to an
  # em-dash HTML entity.
  #
  # source://rubypants//lib/rubypants.rb#272
  def educate_dashes_oldschool(str, prevent_breaks = T.unsafe(nil)); end

  # Return the string, with each instance of "<tt>...</tt>" translated
  # to an ellipsis HTML entity. Also converts the case where there are
  # spaces between the dots.
  #
  # source://rubypants//lib/rubypants.rb#298
  def educate_ellipses(str, prevent_breaks = T.unsafe(nil)); end

  # Return the string, with "educated" curly quote HTML entities.
  #
  # source://rubypants//lib/rubypants.rb#339
  def educate_quotes(str); end

  # Return the string, with "<tt>`backticks'</tt>"-style single quotes
  # translated into HTML curly quote entities.
  #
  # source://rubypants//lib/rubypants.rb#316
  def educate_single_backticks(str); end

  # source://rubypants//lib/rubypants.rb#497
  def entity(key); end

  # source://rubypants//lib/rubypants.rb#464
  def named_entities; end

  # Return the string, with after processing the following backslash
  # escape sequences. This is useful if you want to force a "dumb" quote
  # or other character to appear.
  #
  # Escaped are:
  #      \\    \"    \'    \.    \-    \`
  #
  # source://rubypants//lib/rubypants.rb#221
  def process_escapes(str); end

  # Return the string, with each RubyPants HTML entity translated to
  # its ASCII counterpart.
  #
  # Note: This is not reversible (but exactly the same as in SmartyPants)
  #
  # source://rubypants//lib/rubypants.rb#400
  def stupefy_entities(str); end

  # Return an array of the tokens comprising the string. Each token is
  # either a tag (possibly with nested, tags contained therein, such
  # as <tt><a href="<MTFoo>"></tt>, or a run of text between
  # tags. Each element of the array is a two-element array; the first
  # is either :tag or :text; the second is the actual value.
  #
  # Based on the <tt>_tokenize()</tt> subroutine from Brad Choate's
  # MTRegex plugin.  <http://www.bradchoate.com/past/mtregex.php>
  #
  # This is actually the easier variant using tag_soup, as used by
  # Chad Miller in the Python port of SmartyPants.
  #
  # source://rubypants//lib/rubypants.rb#432
  def tokenize; end

  class << self
    # source://rubypants//lib/rubypants.rb#231
    def n_of(n, x); end
  end
end

# source://rubypants//lib/rubypants.rb#334
RubyPants::CHAR_LEADS_DBLE_QUOTE = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#332
RubyPants::CHAR_LEADS_SNGL_QUOTE = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#331
RubyPants::CLOSE_CLASS = T.let(T.unsafe(nil), String)

# source://rubypants//lib/rubypants.rb#324
RubyPants::DBLE_QUOT_PUNCT_CASE = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#329
RubyPants::DECADE_ABBR_CASE = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#239
RubyPants::DOUBLE_DASH = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#88
RubyPants::NON_WHITESPACE_CHARS = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#322
RubyPants::PUNCT_CLASS = T.let(T.unsafe(nil), String)

# source://rubypants//lib/rubypants.rb#323
RubyPants::SNGL_QUOT_PUNCT_CASE = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#292
RubyPants::SPACED_ELLIPSIS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#87
RubyPants::SPECIAL_HTML_TAGS = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#327
RubyPants::STARTS_MIXED_QUOTS_WITH_DBLE = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#326
RubyPants::STARTS_MIXED_QUOTS_WITH_SNGL = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#418
RubyPants::TAG_SOUP = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#240
RubyPants::TRIPLE_DASH = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#241
RubyPants::TRIPLE_DOTS = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#335
RubyPants::WHITESPACE_TRAILS_DBLE_QUOTE = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/rubypants.rb#333
RubyPants::WHITESPACE_TRAILS_SNGL_QUOTE = T.let(T.unsafe(nil), Regexp)

# source://rubypants//lib/version.rb#1
module RubyPantsVersion; end

# source://rubypants//lib/version.rb#2
RubyPantsVersion::VERSION = T.let(T.unsafe(nil), String)

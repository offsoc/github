<dl class="form-group">
  <dt><%= f.label :name, for: "name" %></dt>
  <dd class="mb-2">
    <%= f.text_field :name, id: "name", class: "form-control bgColor-default width-full" %>
  </dd>

  <dt class="mt-3"><%= f.label :description %></dt>
  <dd class="js-copilot-custom-instructions-wrapper">
    <div class="position-relative">
      <%= f.text_area :description,
              placeholder: "Explain it in a way that Copilot is able to understand",
              class: "form-control bgColor-default pb-7",
              "data-copilot-custom-instructions-character-limit" => Copilot::CodingGuideline::PROMPT_CHAR_LIMIT %>
      <%= render(Primer::Alpha::ActionList.new(
        position: :absolute,
        p: 2,
        display: :flex,
        classes: "bgColor-default rounded gap-2",
        style: "bottom: 2px; left: 2px;"
      )) do |list| %>
        <% suggestions.each do |label, suggestion| %>
          <% list.with_item(
            label: label,
            href: "#",
            border: true,
            classes: "bgColor-default js-copilot-suggested-custom-instruction",
            "data-copilot-custom-instructions-suggestion-text": suggestion,
          ) do |item| %>
            <% item.with_leading_visual_icon(icon: :"plus-circle") %>
          <% end %>
        <% end %>
      <% end %>
    </div>
    <span class="FormControl-caption js-copilot-custom-instructions-character-counter mt-2">
      <span class="js-copilot-custom-instructions-character-count">0</span>
      /
      <%= Copilot::CodingGuideline::PROMPT_CHAR_LIMIT %> characters
    </span>
  </dd>

  <dt class="mt-3"><%= f.label :example_code_violations, "Example of violations (optional)", for: "example_code_violations" %></dt>
  <dd class="js-copilot-custom-instructions-wrapper">
    <%= f.text_area :example_code_violations,
      class: "form-control bgColor-default width-full",
      id: "example_code_violations",
      placeholder: "Define code examples of things Copilot should regard as a violation of this guideline",
      "data-copilot-custom-instructions-character-limit" => Copilot::CodingGuideline::PROMPT_CHAR_LIMIT %>
    <span class="FormControl-caption js-copilot-custom-instructions-character-counter mt-2">
      <span class="js-copilot-custom-instructions-character-count">0</span>
      /
      <%= Copilot::CodingGuideline::PROMPT_CHAR_LIMIT %> characters
    </span>
  </dd>
</dl>

<%= render Primer::Beta::BorderBox.new(mt: 1) do |component| %>
  <% component.with_header do |h| %>
    <div class="d-flex flex-justify-between flex-row flex-items-center">
      <h2 class="Box-title">File paths (optional)</h2>
      <%= render Primer::Beta::Button.new("data-show-dialog-id": "add_file_path_dialog") do |button| %>
        <% button.with_leading_visual_icon(icon: :plus, color: :success) %>
        Add file path
      <% end %>
    </div>
  <% end %>

  <% component.with_body(p: 0) do %>
    <%= render Primer::Beta::Blankslate.new(hidden: f.object.paths.any?, data: {target: "copilot-coding-guideline-form.blankslate"}) do |blankslate| %>
      <% blankslate.with_heading(tag: :h3, font_size: 4).with_content("Add a file path to restrict when this guideline runs.") %>
    <% end %>

    <div data-target="copilot-coding-guideline-form.list">
      <%= f.fields_for :paths do |path_form| %>
        <%# Pass a `nil` index so that Rails uses the default index generated by fields_for %>
        <%= render partial: "edit_repositories/copilot_code_guidelines/path_row", locals: { f: path_form, index: nil, path: path_form.object.path} %>
      <% end %>
    </div>

    <template data-target="copilot-coding-guideline-form.rowTemplate">
      <%= f.fields_for :paths_attributes, Copilot::CodingGuidelinePath.new do |path_form| %>
        <%# The {{}} will be replaced by the copilot-coding-guideline-form.addRow method %>
        <%= render partial: "edit_repositories/copilot_code_guidelines/path_row", locals: { f: path_form, index: "{{index}}", path: "{{path}}" } %>
      <% end %>
    </template>
  <% end %>
<% end %>

<div class="mt-4 d-flex gap-2">
  <%= render Primer::Beta::Button.new(scheme: :primary, type: :submit).with_content("Save changes") %>
  <%= render Primer::Beta::Button.new(tag: :a, href: copilot_code_guidelines_path).with_content("Cancel") %>
</div>

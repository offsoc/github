# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::ProjectEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::ProjectEvent`.

class Hydro::Schemas::Github::V1::ProjectEvent
  sig do
    params(
      action: T.nilable(T.any(Symbol, Integer)),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      project: T.nilable(Hydro::Schemas::Github::V1::Entities::Project),
      project_owner_repo: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      project_owner_user: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(action: nil, actor: nil, project: nil, project_owner_repo: nil, project_owner_user: nil, request_context: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_project; end

  sig { void }
  def clear_project_owner_repo; end

  sig { void }
  def clear_project_owner_user; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Project)) }
  def project; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Project)).void }
  def project=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def project_owner_repo; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def project_owner_repo=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def project_owner_user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def project_owner_user=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

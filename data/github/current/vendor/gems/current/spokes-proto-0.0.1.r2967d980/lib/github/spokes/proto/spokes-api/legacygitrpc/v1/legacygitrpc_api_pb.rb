# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: spokes-api/legacygitrpc/v1/legacygitrpc_api.proto

require 'google/protobuf'

require 'spokes-api/types/v1/repository_pb'
require 'spokes-api/types/v1/request_context_pb'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("spokes-api/legacygitrpc/v1/legacygitrpc_api.proto", :syntax => :proto3) do
    add_message "github.spokes.legacygitrpc.v1.DataServer" do
      optional :name, :string, 1
      optional :voting, :bool, 2
    end
    add_message "github.spokes.legacygitrpc.v1.TopologyContext" do
      repeated :data_servers, :message, 1, "github.spokes.legacygitrpc.v1.DataServer"
    end
    add_message "github.spokes.legacygitrpc.v1.Status" do
      optional :code, :enum, 1, "github.spokes.legacygitrpc.v1.StatusCode"
      optional :message, :string, 2
    end
    add_message "github.spokes.legacygitrpc.v1.ErnicornResponse" do
      optional :response, :bytes, 1
      optional :status, :message, 2, "github.spokes.legacygitrpc.v1.Status"
    end
    add_message "github.spokes.legacygitrpc.v1.WriteServerResponse" do
      optional :data_server, :message, 1, "github.spokes.legacygitrpc.v1.DataServer"
      optional :ernicorn_response, :message, 2, "github.spokes.legacygitrpc.v1.ErnicornResponse"
    end
    add_message "github.spokes.legacygitrpc.v1.ErnicornRequest" do
      optional :options, :bytes, 1
      optional :function, :string, 2
      optional :args, :bytes, 3
      optional :kwargs, :bytes, 4
    end
    add_message "github.spokes.legacygitrpc.v1.LegacyGitrpcReaderRequest" do
      optional :repository, :message, 1, "github.spokes.types.v1.Repository"
      optional :request_context, :message, 2, "github.spokes.types.v1.RequestContext"
      optional :ernicorn_request, :message, 3, "github.spokes.legacygitrpc.v1.ErnicornRequest"
      optional :topology_context, :message, 4, "github.spokes.legacygitrpc.v1.TopologyContext"
    end
    add_message "github.spokes.legacygitrpc.v1.LegacyGitrpcReaderResponse" do
      optional :response, :bytes, 1
    end
    add_message "github.spokes.legacygitrpc.v1.LegacyGitrpcWriterRequest" do
      optional :repository, :message, 1, "github.spokes.types.v1.Repository"
      optional :request_context, :message, 2, "github.spokes.types.v1.RequestContext"
      optional :ernicorn_request, :message, 3, "github.spokes.legacygitrpc.v1.ErnicornRequest"
      optional :topology_context, :message, 4, "github.spokes.legacygitrpc.v1.TopologyContext"
    end
    add_message "github.spokes.legacygitrpc.v1.LegacyGitrpcWriterResponse" do
      repeated :responses, :message, 1, "github.spokes.legacygitrpc.v1.WriteServerResponse"
    end
    add_message "github.spokes.legacygitrpc.v1.BertrpcRequest" do
      optional :host, :string, 1
      optional :path, :string, 2
      optional :request_context, :message, 3, "github.spokes.types.v1.RequestContext"
      optional :ernicorn_request, :message, 4, "github.spokes.legacygitrpc.v1.ErnicornRequest"
    end
    add_message "github.spokes.legacygitrpc.v1.BertrpcResponse" do
      optional :ernicorn_response, :message, 1, "github.spokes.legacygitrpc.v1.ErnicornResponse"
    end
    add_message "github.spokes.legacygitrpc.v1.GetCacheKeyRequest" do
      optional :repository, :message, 1, "github.spokes.types.v1.Repository"
      optional :use_primary, :bool, 2
    end
    add_message "github.spokes.legacygitrpc.v1.GetCacheKeyResponse" do
      optional :cache_key, :string, 1
    end
    add_message "github.spokes.legacygitrpc.v1.GetCacheKeysRequest" do
      repeated :repositories, :message, 1, "github.spokes.types.v1.Repository"
      optional :use_primary, :bool, 2
    end
    add_message "github.spokes.legacygitrpc.v1.RepositoryWithCacheKey" do
      optional :repository, :message, 1, "github.spokes.types.v1.Repository"
      optional :cache_key, :string, 2
    end
    add_message "github.spokes.legacygitrpc.v1.GetCacheKeysResponse" do
      repeated :repositories_with_cache_keys, :message, 1, "github.spokes.legacygitrpc.v1.RepositoryWithCacheKey"
    end
    add_enum "github.spokes.legacygitrpc.v1.StatusCode" do
      value :STATUS_CODE_INVALID, 0
      value :STATUS_CODE_OK, 1
      value :STATUS_CODE_DEADLINE_EXCEEDED, 2
      value :STATUS_CODE_REQUEST_CANCELLED, 3
      value :STATUS_CODE_INVALID_REQUEST, 4
      value :STATUS_CODE_INVALID_GIT_PATH, 5
      value :STATUS_CODE_ERROR_ENCODING_REQUEST, 6
      value :STATUS_CODE_ERROR_CONNECTING_TO_ERNICORN, 7
      value :STATUS_CODE_ERROR_TALKING_TO_ERNICORN, 8
      value :STATUS_CODE_ERROR_PROCESSING_ERNICORN_RESPONSE, 9
    end
  end
end

module GitHub
  module Spokes
    module Proto
      module LegacyGitrpc
        module V1
          DataServer = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.DataServer").msgclass
          TopologyContext = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.TopologyContext").msgclass
          Status = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.Status").msgclass
          ErnicornResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.ErnicornResponse").msgclass
          WriteServerResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.WriteServerResponse").msgclass
          ErnicornRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.ErnicornRequest").msgclass
          LegacyGitrpcReaderRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.LegacyGitrpcReaderRequest").msgclass
          LegacyGitrpcReaderResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.LegacyGitrpcReaderResponse").msgclass
          LegacyGitrpcWriterRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.LegacyGitrpcWriterRequest").msgclass
          LegacyGitrpcWriterResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.LegacyGitrpcWriterResponse").msgclass
          BertrpcRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.BertrpcRequest").msgclass
          BertrpcResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.BertrpcResponse").msgclass
          GetCacheKeyRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.GetCacheKeyRequest").msgclass
          GetCacheKeyResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.GetCacheKeyResponse").msgclass
          GetCacheKeysRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.GetCacheKeysRequest").msgclass
          RepositoryWithCacheKey = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.RepositoryWithCacheKey").msgclass
          GetCacheKeysResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.GetCacheKeysResponse").msgclass
          StatusCode = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.spokes.legacygitrpc.v1.StatusCode").enummodule
        end
      end
    end
  end
end

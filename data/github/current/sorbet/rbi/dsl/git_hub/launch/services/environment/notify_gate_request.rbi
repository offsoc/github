# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Services::Environment::NotifyGateRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Services::Environment::NotifyGateRequest`.

class GitHub::Launch::Services::Environment::NotifyGateRequest
  sig do
    params(
      check_suite_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      external_id: T.nilable(String),
      external_job_id: T.nilable(String),
      gate_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      is_open: T.nilable(T::Boolean),
      repository_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      token: T.nilable(String)
    ).void
  end
  def initialize(check_suite_id: nil, external_id: nil, external_job_id: nil, gate_id: nil, is_open: nil, repository_id: nil, token: nil); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def check_suite_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def check_suite_id=(value); end

  sig { void }
  def clear_check_suite_id; end

  sig { void }
  def clear_external_id; end

  sig { void }
  def clear_external_job_id; end

  sig { void }
  def clear_gate_id; end

  sig { void }
  def clear_is_open; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_token; end

  sig { returns(String) }
  def external_id; end

  sig { params(value: String).void }
  def external_id=(value); end

  sig { returns(String) }
  def external_job_id; end

  sig { params(value: String).void }
  def external_job_id=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def gate_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def gate_id=(value); end

  sig { returns(T::Boolean) }
  def is_open; end

  sig { params(value: T::Boolean).void }
  def is_open=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def repository_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def repository_id=(value); end

  sig { returns(String) }
  def token; end

  sig { params(value: String).void }
  def token=(value); end
end

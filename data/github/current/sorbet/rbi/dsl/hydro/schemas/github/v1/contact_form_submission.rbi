# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::ContactFormSubmission`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::ContactFormSubmission`.

class Hydro::Schemas::Github::V1::ContactFormSubmission
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      body: T.nilable(String),
      email: T.nilable(String),
      form_type: T.nilable(T.any(Symbol, Integer)),
      last_repository: T.nilable(String),
      name: T.nilable(String),
      referring_url: T.nilable(String),
      reported_content: T.nilable(String),
      reported_content_classifier: T.nilable(T.any(Symbol, Integer)),
      reported_content_id: T.nilable(Integer),
      reported_content_type: T.nilable(T.any(Symbol, Integer)),
      reported_content_url: T.nilable(String),
      reported_integration: T.nilable(Hydro::Schemas::Github::V1::Entities::Integration),
      reported_user: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      reported_user_login: T.nilable(String),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      subject: T.nilable(String)
    ).void
  end
  def initialize(actor: nil, body: nil, email: nil, form_type: nil, last_repository: nil, name: nil, referring_url: nil, reported_content: nil, reported_content_classifier: nil, reported_content_id: nil, reported_content_type: nil, reported_content_url: nil, reported_integration: nil, reported_user: nil, reported_user_login: nil, request_context: nil, subject: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def body; end

  sig { params(value: String).void }
  def body=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_body; end

  sig { void }
  def clear_email; end

  sig { void }
  def clear_form_type; end

  sig { void }
  def clear_last_repository; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_referring_url; end

  sig { void }
  def clear_reported_content; end

  sig { void }
  def clear_reported_content_classifier; end

  sig { void }
  def clear_reported_content_id; end

  sig { void }
  def clear_reported_content_type; end

  sig { void }
  def clear_reported_content_url; end

  sig { void }
  def clear_reported_integration; end

  sig { void }
  def clear_reported_user; end

  sig { void }
  def clear_reported_user_login; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_subject; end

  sig { returns(String) }
  def email; end

  sig { params(value: String).void }
  def email=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def form_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def form_type=(value); end

  sig { returns(String) }
  def last_repository; end

  sig { params(value: String).void }
  def last_repository=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(String) }
  def referring_url; end

  sig { params(value: String).void }
  def referring_url=(value); end

  sig { returns(String) }
  def reported_content; end

  sig { params(value: String).void }
  def reported_content=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def reported_content_classifier; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def reported_content_classifier=(value); end

  sig { returns(Integer) }
  def reported_content_id; end

  sig { params(value: Integer).void }
  def reported_content_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def reported_content_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def reported_content_type=(value); end

  sig { returns(String) }
  def reported_content_url; end

  sig { params(value: String).void }
  def reported_content_url=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Integration)) }
  def reported_integration; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Integration)).void }
  def reported_integration=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def reported_user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def reported_user=(value); end

  sig { returns(String) }
  def reported_user_login; end

  sig { params(value: String).void }
  def reported_user_login=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(String) }
  def subject; end

  sig { params(value: String).void }
  def subject=(value); end
end

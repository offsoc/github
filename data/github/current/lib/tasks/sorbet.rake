# frozen_string_literal: true

namespace :sorbet do
  desc "Generate a compiled rb file for the template associated with a view component"
  task :precompile_template, [:template_path] => :environment do |_, args|
    template_path = args[:template_path]

    unless File.exist?(template_path) && template_path.ends_with?(".html.erb")
      puts "Cannot find an erb template at #{template_path}"
      exit(1)
    end

    base_path = "app/components/"
    relative_path = template_path[(base_path.size)..-1]

    # This emulates how zeitwerk would call the inflector
    inflector = ::GitHub::ZeitwerkInflector.new
    namespace = []
    seen_path = base_path.dup
    relative_path.split("/").each do |segment|
      seen_path << "/" << segment
      segment = segment[0..-10] if segment.ends_with?(".html.erb")
      namespace << inflector.camelize(segment, seen_path)
    end
    view_component_class_name = namespace.join("::")
    klass = view_component_class_name.safe_constantize

    if !klass || !klass.ancestors.include?(ViewComponent::Base)
      puts "Skipping compilation of #{template_path}\nIs this a view component template?"
      exit(1)
    end

    file_path = Rails.root.join("sorbet", "precompiled_templates", "components", "#{view_component_class_name.underscore}.rb")
    FileUtils.mkdir_p(file_path.dirname)

    ActionView::Base.annotate_rendered_view_with_filenames = false
    compiler = ViewComponent::Compiler.new(view_component_class_name.constantize)
    compiler.compile
    templates = compiler.send(:templates)
    src = compiler.send(:compiled_template, templates.first[:path])

    File.open(file_path, "w") do |f|
      f.puts <<~RUBY
        # typed: true
        # frozen_string_literal: true
        # component_template_hash: #{Digest::SHA256.hexdigest(File.read(template_path))}

        # DO NOT EDIT MANUALLY
        # This is an autogenerated file for the component template of `#{klass}`.
        # Please instead update this file by running `bin/rake sorbet:precompiled_template['#{template_path}']`.

        class #{view_component_class_name}
          def render_call
            #{src.split(/;\s/).join("\n")}
          end
        end
      RUBY
    end

    `bin/rubocop -A #{file_path}`
  end
end

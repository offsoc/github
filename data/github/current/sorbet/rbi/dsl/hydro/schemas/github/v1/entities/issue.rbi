# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::Entities::Issue`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::Entities::Issue`.

class Hydro::Schemas::Github::V1::Entities::Issue
  sig do
    params(
      body_size: T.nilable(Integer),
      closed_at: T.nilable(Google::Protobuf::Timestamp),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      global_relay_id: T.nilable(String),
      id: T.nilable(Integer),
      id_value: T.nilable(Integer),
      issue_state: T.nilable(T.any(Symbol, Integer)),
      issue_state_reason: T.nilable(T.any(Symbol, Integer)),
      number: T.nilable(Integer),
      repository_id: T.nilable(Integer),
      updated_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(body_size: nil, closed_at: nil, created_at: nil, global_relay_id: nil, id: nil, id_value: nil, issue_state: nil, issue_state_reason: nil, number: nil, repository_id: nil, updated_at: nil); end

  sig { returns(Integer) }
  def body_size; end

  sig { params(value: Integer).void }
  def body_size=(value); end

  sig { void }
  def clear_body_size; end

  sig { void }
  def clear_closed_at; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_global_relay_id; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_id_value; end

  sig { void }
  def clear_issue_state; end

  sig { void }
  def clear_issue_state_reason; end

  sig { void }
  def clear_number; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_updated_at; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def closed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def closed_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(String) }
  def global_relay_id; end

  sig { params(value: String).void }
  def global_relay_id=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(Integer) }
  def id_value; end

  sig { params(value: Integer).void }
  def id_value=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def issue_state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def issue_state=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def issue_state_reason; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def issue_state_reason=(value); end

  sig { returns(Integer) }
  def number; end

  sig { params(value: Integer).void }
  def number=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::References::V1::UpdateDefaultBranchRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::References::V1::UpdateDefaultBranchRequest`.

class GitHub::Spokes::Proto::References::V1::UpdateDefaultBranchRequest
  sig do
    params(
      new_value: T.nilable(GitHub::Spokes::Proto::Types::V1::Reference),
      nwo: T.nilable(String),
      priority: T.nilable(GitHub::Spokes::Proto::Types::V1::UpdateReferencesPriority),
      repository: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository),
      request_context: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext),
      sockstat: T.nilable(GitHub::Spokes::Proto::Types::V1::Sockstat)
    ).void
  end
  def initialize(new_value: nil, nwo: nil, priority: nil, repository: nil, request_context: nil, sockstat: nil); end

  sig { void }
  def clear_new_value; end

  sig { void }
  def clear_nwo; end

  sig { void }
  def clear_priority; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_sockstat; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Reference)) }
  def new_value; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Reference)).void }
  def new_value=(value); end

  sig { returns(String) }
  def nwo; end

  sig { params(value: String).void }
  def nwo=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::UpdateReferencesPriority)) }
  def priority; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::UpdateReferencesPriority)).void }
  def priority=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)) }
  def repository; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Sockstat)) }
  def sockstat; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Sockstat)).void }
  def sockstat=(value); end
end

const fs = require('fs')
const path = require('path')
const glob = require('glob')
const {rgPath} = require('@vscode/ripgrep')
const {execSync} = require('child_process')
const {pathFromRoot} = require('./config-paths')
const {SERVICE_OWNERS_FILE_PATH} = require('./config-paths')

const TMP_FILE = '/tmp/queries.txt'
const TARGET_OUTPUT_DIR = SERVICE_OWNERS_FILE_PATH
const PERSISTED_QUERY_GLOB = 'config/persisted_graphql_queries/*.json'

function getQueriesFromAllFiles(jsonGlob = PERSISTED_QUERY_GLOB) {
  const jsonFilePaths = glob.sync(pathFromRoot(jsonGlob))
  let queries = {}

  for (const jsonPath of jsonFilePaths) {
    const serviceQueries = JSON.parse(fs.readFileSync(jsonPath, 'utf8'))
    // keep track of queries for the the final result
    queries = {...queries, ...serviceQueries}
  }
  return queries
}

function writeQueryDigestsToFile(queries, filepath = TMP_FILE) {
  const digests = Object.keys(queries)
  fs.writeFileSync(filepath, `${digests.join('\n')}\n`)
}

function getRipGrepResults(filepath = TMP_FILE) {
  const rgResult = execSync(`${rgPath} -f ${filepath} --no-ignore-vcs --json ui/packages/ app/assets/modules/`)
  return rgResult
}

function getFileNameForQueries(tmpFilepath = TMP_FILE) {
  const matches = {}
  const rgResult = getRipGrepResults(tmpFilepath)

  for (const line of rgResult.toString().split('\n')) {
    try {
      const parsedLine = JSON.parse(line)

      // we don't care about any other data
      if (parsedLine.type !== 'match') continue

      const filePath = parsedLine.data.path.text

      if (matches[filePath]) continue

      const digest = parsedLine.data.submatches[0].match.text
      matches[filePath] = digest
    } catch {
      // everything that does not have a match or throws an error will be attributed to the unknown service
      continue
    }
  }

  return matches
}

function matchQueriesToServiceOwners(serviceownersResult, matches, queries) {
  const result = {}
  const queriesWithOwners = []
  for (const line of serviceownersResult.toString().split('\n')) {
    const [filePath, service] = line.split(': ')

    if (!filePath || !service) continue

    result[service] ||= {}

    const digest = matches[filePath]

    queriesWithOwners.push(digest)
    // write the object in the relay format
    result[service][digest] = queries[digest]
  }

  // add all queries without owners to the unknown service
  const queriesWithoutOwners = Object.keys(queries).filter(digest => !queriesWithOwners.includes(digest))
  for (const digest of queriesWithoutOwners) {
    result['unknown'] ||= {}
    result['unknown'][digest] = queries[digest]
  }

  return result
}

function createJsonFilesForServiceOwners(result, targetDir = TARGET_OUTPUT_DIR) {
  for (const [service, serviceQueries] of Object.entries(result)) {
    // Order the objects to make it harder to introduce merge conflicts
    const ordered = Object.keys(serviceQueries)
      .sort()
      .reduce((obj, key) => {
        obj[key] = serviceQueries[key]
        return obj
      }, {})

    fs.writeFileSync(path.join(targetDir, `${service}.json`), JSON.stringify(ordered, null, 2))
  }
}

function getServiceOwners(matches) {
  return execSync(`bin/serviceowners ${Object.keys(matches).join(' ')}`)
}

function generateServiceownersFiles() {
  // get all queries from all json files generated by the relay compiler
  // eg. "123123123123": "query { ... }"
  const queries = getQueriesFromAllFiles()

  // write all query digests to a file used by ripgrep
  writeQueryDigestsToFile(queries)

  // find the file path for each query digest
  // eg. "123123123123" is part of "ui/packages/relay-build/compo.tsx"
  const matches = getFileNameForQueries()

  // get service owners for each file, this will not return files without owners
  const serviceownersResult = getServiceOwners(matches)

  // match the queries to the service owners
  const result = matchQueriesToServiceOwners(serviceownersResult, matches, queries)

  // create json files for each service owner
  createJsonFilesForServiceOwners(result)
}

module.exports.createJsonFilesForServiceOwners = createJsonFilesForServiceOwners
module.exports.matchQueriesToServiceOwners = matchQueriesToServiceOwners
module.exports.getFileNameForQueries = getFileNameForQueries
module.exports.writeQueryDigestsToFile = writeQueryDigestsToFile
module.exports.getQueriesFromAllFiles = getQueriesFromAllFiles
module.exports.getRipGrepResults = getRipGrepResults
module.exports.getServiceOwners = getServiceOwners
module.exports.generateServiceownersFiles = generateServiceownersFiles

module.exports.main = function () {
  if (!fs.existsSync(pathFromRoot('bin/serviceowners'))) {
    console.log('bin/serviceowners does not exist, skipping generate-serviceowners')
    return
  }

  const timeKey = 'Execution Time for GenerateServiceownersPlugin'
  console.time(timeKey)

  if (!fs.existsSync(TARGET_OUTPUT_DIR)) {
    fs.mkdirSync(TARGET_OUTPUT_DIR)
  }
  if (!fs.existsSync('/tmp')) {
    fs.mkdirSync('/tmp')
  }

  generateServiceownersFiles()

  if (fs.existsSync(TMP_FILE)) {
    fs.rmSync(TMP_FILE)
  }
  console.timeEnd(timeKey)
}

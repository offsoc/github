{"version":3,"file":"ui_packages_copilot-chat_utils_copilot-chat-hooks_ts-ui_packages_issue-viewer_utils_queries_ts-xxxxxxxxxxxx.js","mappings":"qOA4BO,oBAAMA,UAeX,IAAIC,0BAA2B,CAC7B,MAAO,CAAC,cAAc,EAAE,IAAI,CAACC,KAAK,CAAC,CAAC,CAMtCC,gBAAgBC,CAAmB,CAAE,CACnC,OAAO,IAAI,CAACC,SAAS,EAAI,IAAI,CAACC,UAAU,CAACF,EAC3C,CAKA,IAAIC,WAAY,CACd,IAAME,EAAuB,IAAIC,KAAK,IAAI,CAACC,UAAU,EAgBrD,OAAOC,IAdoBF,KACzBA,KAAKG,GAAG,CACNJ,EAAqBK,cAAc,GACnCL,EAAqBM,WAAW,GAChCN,EAAqBO,UAAU,GAC/BP,EAAqBQ,WAAW,GAChCR,EAAqBS,aAAa,GAClCT,EAAqBU,aAAa,GAClCV,EAAqBW,kBAAkB,KAMnB,IAAIV,KAAKA,KAAKW,GAAG,GAFzB,KAGlB,CAQAb,WAAWc,CAAmB,CAAE,CAC9B,MAAO,CACL,KAAI,CAACA,SAAS,CAACC,KAAK,CAACC,GAAOF,EAAUG,QAAQ,CAACD,KAASF,EAAUC,KAAK,CAACC,GAAO,IAAI,CAACF,SAAS,CAACG,QAAQ,CAACD,GAAI,CAE/G,CAKA,OAAOE,WAAWC,CAAuB,CAAEC,CAAgB,CAAE,CAC3D,OAAO,IAAI1B,UAAUyB,EAAOE,KAAK,CAAEF,EAAOhB,UAAU,CAAEiB,EACxD,CAKAE,WAAiC,CAC/B,MAAO,CACL1B,MAAO,IAAI,CAACA,KAAK,CACjBO,WAAY,IAAI,CAACA,UAAU,CAC3BW,UAAW,IAAI,CAACA,SAAS,CAE7B,CAKA,OAAOS,YAAYC,CAA+B,CAAa,CAC7D,OAAO,IAAI9B,UAAU8B,EAAW5B,KAAK,CAAE4B,EAAWrB,UAAU,CAAEqB,EAAWV,SAAS,CACpF,CA/EAW,YAAY7B,CAAa,CAAEO,CAAkB,CAAEW,CAAmB,CAAE,CAClE,IAAI,CAAClB,KAAK,CAAGA,EACb,IAAI,CAACO,UAAU,CAAGA,EAClB,IAAI,CAACW,SAAS,CAAGA,CACnB,CA4EF,E,0BC7GA,IAAMY,EAAyB,qBACxB,mCAAMC,yBAoBX,MAAMC,cAAmC,CACvC,IAAMP,EAAQ,IAAI,CAACQ,wBAAwB,GAE3C,OAAOR,EAAQ,IAAI,CAACS,iBAAiB,CAACT,GAAS,IAAI,CAACU,cAAc,EACpE,CAEAC,yBAAyBX,CAAgB,CAAE,CACzC,IAAI,CAACY,mBAAmB,CAACC,OAAO,CAACR,EAAwBS,KAAKC,SAAS,CAACf,EAAMC,SAAS,IACzF,CAEAO,0BAA6C,CAC3C,IAAMjC,EAAQ,IAAI,CAACqC,mBAAmB,CAACI,OAAO,CAACX,GAE/C,OAAO9B,EAAQF,UAAU6B,WAAW,CAACY,KAAKG,KAAK,CAAC1C,IAAiC,IACnF,CAMA,MAAckC,kBAAkBT,CAAgB,CAAsB,CACpE,OAAOA,EAAMxB,eAAe,CAAC,IAAI,CAACiB,SAAS,EAAI,IAAI,CAACiB,cAAc,GAAKV,CACzE,CASA,gBAA6C,CAK3C,OAJK,IAAI,CAACkB,uBAAuB,EAC/B,KAAI,CAACA,uBAAuB,CAAG,IAAI,CAACC,eAAe,EAAC,EAG/C,IAAI,CAACD,uBAAuB,CAOrC,MAAcC,iBAAsC,CAClD,IAAMC,EAAW,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB,6BAA8B,CAACC,OAAQ,MAAM,GAEtF,GAAIF,EAASG,EAAE,CAAE,CACf,IAAMzB,EAAU,MAAMsB,EAASI,IAAI,EACnC,KAAI,CAACN,uBAAuB,CAAG,KAE/B,IAAMlB,EAAQ3B,UAAUwB,UAAU,CAACC,EAAQ,IAAI,CAACL,SAAS,EAIzD,OAFA,IAAI,CAACkB,wBAAwB,CAACX,GAEvBA,CACT,CAGE,MAFA,IAAI,CAACkB,uBAAuB,CAAG,KAEzB,MAAU,gCAEpB,CAxEAd,YAAYX,CAAmB,CAAE,CAC/B,IAAI,CAACA,SAAS,CAAGA,EACjB,IAAI,CAACyB,uBAAuB,CAAG,KAC/B,IAAI,CAACN,mBAAmB,CAAGa,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,eAAgB,CACrDC,sBAAuB,GACvBC,IAAK,KACP,EACF,CAkEF,C,sDCtFO,IAAMC,EAAwB,wBACxBC,EAA2B,4BAC3BC,EAAoB,Q,wPCqB1B,IAAMC,EAAe,WAErB,SAASC,EAAa,CAC3BC,KAAAA,CAAI,CACJC,QAAAA,CAAO,CACPC,MAAAA,CAAK,CACLC,WAAAA,EAAa,EAAE,CACfC,OAAAA,CAAM,CACNC,cAAAA,CAAa,CAQd,EACC,MAAO,CACLC,GAAIC,OAAOC,UAAU,GACrBC,SAAUL,GAAQE,IAAM,OACxBN,KAAAA,EACAC,QAAAA,EACAS,UAAW,IAAI9D,OAAO+D,WAAW,GACjCT,MAAAA,EACAC,WAAAA,EACAS,gBAAiB,EAAE,CACnBC,oBAAqBR,CACvB,CACF,CAEO,SAASS,EAAWV,CAA4C,EACrE,OAAOA,GAAQW,MAAQ,kBACzB,CAEO,SAASC,EAAcC,CAAyB,EACrD,OAAQA,EAAIC,IAAI,EACd,IAAK,OACH,OAAOC,EAAYF,EACrB,KAAK,YACH,OAAOG,EAAgBH,EACzB,KAAK,UACH,OAAOI,SAgIWJ,CAAqB,EAC3C,GAAIA,EAAIK,KAAK,CACX,OAAOL,EAAIK,KAAK,CAElB,IAAMC,EAAWN,EAAIO,IAAI,CAACC,KAAK,CAAC,KAAKC,GAAG,GAClCC,EAAQ,CAAC,EAAEV,EAAIW,KAAK,CAACC,KAAK,CAAC,CAAC,EAAEZ,EAAIW,KAAK,CAACE,GAAG,CAAC,CAAC,CACnD,MAAO,CAAC,EAAEP,EAAS,CAAC,EAAEI,EAAM,CAAC,EAtIHV,EACxB,KAAK,aACH,MAwIG,CAAC,EAAEA,EAAIc,UAAU,CAAC,CAAC,EAAEd,EAAIF,IAAI,CAAC,CAAC,KAvI/B,SACL,IAAK,SACH,OAAOE,EAAIF,IAAI,KACZ,SACH,OAAOE,EAAIe,OAAO,KACf,eACH,OAAOf,EAAIK,KAAK,KACb,kBACH,MAmIG,CAAC,EAAEL,EAAIgB,YAAY,CAACC,SAAS,CAAC,EAAG,GAAG,EAAE,EAAEjB,EAAIkB,YAAY,CAACD,SAAS,CAAC,EAAG,GAAG,CAAC,SAjI7E,MAAO,wBACX,CACF,CAEO,SAASE,EAAYnB,CAAyB,EACnD,OAAQA,EAAIC,IAAI,EACd,IAAK,OACH,MAAO,CAAC,EAAED,EAAIC,IAAI,CAAC,CAAC,EAAED,EAAIoB,SAAS,CAAC,CAAC,EAAEpB,EAAIqB,QAAQ,CAAC,CAAC,EAAErB,EAAIsB,SAAS,CAAC,CAAC,EAAEtB,EAAIO,IAAI,CAAC,CAAC,KAC/E,eACH,MAAO,CAAC,EAAEP,EAAIC,IAAI,CAAC,CAAC,EAAED,EAAIuB,UAAU,CAACC,KAAK,CAAC,CAAC,EAAExB,EAAIuB,UAAU,CAACC,KAAK,CAAC,CAAC,EAAExB,EAAIA,GAAG,CAAC,CAAC,EAAEA,EAAIO,IAAI,CAAC,CAAC,KACxF,YACH,MAAO,CAAC,EAAEP,EAAIC,IAAI,CAAC,CAAC,EAAED,EAAIyB,QAAQ,EAAElB,KAAK,CAAC,EAAEP,EAAIyB,QAAQ,EAAEH,UAAU,CAAC,EAAEtB,EAAI0B,QAAQ,EAAEnB,KAAK,CAAC,EAAEP,EAAI0B,QAAQ,EAAEJ,UAAU,EAAE,EAAEtB,EAAI2B,aAAa,EAAEf,MAAM,CAAC,EAAEZ,EAAI2B,aAAa,EAAEd,IAAI,CAAC,KAC1K,UACH,MAAO,CAAC,EAAEb,EAAIC,IAAI,CAAC,CAAC,EAAED,EAAIoB,SAAS,CAAC,CAAC,EAAEpB,EAAIqB,QAAQ,CAAC,CAAC,EAAErB,EAAIsB,SAAS,CAAC,CAAC,EAAEtB,EAAIO,IAAI,CAAC,CAAC,EAAEP,EAAIW,KAAK,CAACC,KAAK,CAAC,CAAC,EAAEZ,EAAIW,KAAK,CAACE,GAAG,CAAC,CAAC,KACnH,aACH,MAAO,CAAC,EAAEb,EAAIC,IAAI,CAAC,CAAC,EAAED,EAAIX,EAAE,CAAC,CAAC,EAAEW,EAAIc,UAAU,CAAC,CAAC,EAAEd,EAAIF,IAAI,CAAC,CAAC,KACzD,SACH,MAAO,CAAC,EAAEE,EAAIC,IAAI,CAAC,CAAC,EAAED,EAAI4B,IAAI,CAAC,CAAC,EAAE5B,EAAIF,IAAI,CAAC,CAAC,KACzC,SACH,MAAO,CAAC,EAAEE,EAAIC,IAAI,CAAC,CAAC,EAAED,EAAIF,IAAI,CAAC,CAAC,KAC7B,SACH,MAAO,CAAC,EAAEE,EAAIC,IAAI,CAAC,EAAE,EAAED,EAAI6B,GAAG,CAAC,CAAC,EAAE7B,EAAIuB,UAAU,CAACC,KAAK,CAAC,CAAC,EAAExB,EAAIuB,UAAU,CAACzB,IAAI,CAAC,CAAC,KAC5E,eACH,MAAO,CAAC,EAAEE,EAAIC,IAAI,CAAC,CAAC,EAAED,EAAI8B,MAAM,CAAC,CAAC,EAAE9B,EAAIuB,UAAU,CAACT,UAAU,CAAC,CAAC,EAAEd,EAAIuB,UAAU,CAACzB,IAAI,CAAC,CAAC,KACnF,aACH,MAAO,CAAC,EAAEE,EAAIC,IAAI,CAAC,CAAC,EAAED,EAAI+B,KAAK,CAAC,CAAC,SAEjC,MAAO,EACX,CACF,CAmBO,SAASC,EAAahC,CAAyB,EACpD,OAAQA,EAAIC,IAAI,EACd,IAAK,OACL,IAAK,YACL,IAAK,eACH,OAAOD,EAAIiC,GAAG,KACX,aACH,MAAO,CAAC,CAAC,EAAEjC,EAAIc,UAAU,CAAC,CAAC,EAAEd,EAAIF,IAAI,CAAC,CAAC,KACpC,SACH,OAAOE,EAAIkC,SAAS,KACjB,UACH,OAAOC,SAtBenC,CAAqB,EAE/C,GAPA,CAAIoC,SAAAA,EAAUnC,IAAI,EAAemC,YAAAA,EAAUnC,IAAI,GAC1CmC,EAAUC,YAAY,EACpBD,aAAAA,EAAUC,YAAY,CAACC,WAAW,GAKpB,CACnB,IAAML,EAAM,IAAIM,IAAIvC,EAAIiC,GAAG,CAAEO,OAAOC,QAAQ,CAACC,MAAM,EAEnD,OADAT,EAAIU,MAAM,CAAG,UACNV,EAAIW,IAAI,CAGjB,OAAO5C,EAAIiC,GAAG,EAcgBjC,EAE5B,SAGE,MAAO,GACX,CACF,CAOO,SAAS6C,EAAc7C,CAAqC,EACjE,IAAMQ,EAAQR,EAAIO,IAAI,CAACC,KAAK,CAAC,WAE7B,CADAA,EAAMC,GAAG,GACLD,IAAAA,EAAMsC,MAAM,EACP,IAEAtC,EAAMuC,IAAI,CAAC,IAEtB,CAOO,SAASC,EAAkBhD,CAA4D,EAC5F,OAAOE,EAAYF,EACrB,CAEA,SAASE,EAAYF,CAA4D,EAE/E,OAAOM,EADcC,IAAI,CAACC,KAAK,CAAC,KAAKC,GAAG,IACrBT,EAAIO,IAAI,CAGtB,SAASJ,EAAgBH,CAAsB,EACpD,IAAMO,EAAOP,EAAI0B,QAAQ,EAAEnB,MAAQP,EAAIyB,QAAQ,EAAElB,MAAQP,EAAIiD,IAAI,EAAE1C,MAAQP,EAAIkD,IAAI,EAAE3C,KAC/ED,EAAWC,GAAMC,MAAM,KAAKC,OAAS,UAG3C,EAASkB,aAAa,EAAK3B,EAAI2B,aAAa,CAACf,KAAK,CAK9C,EAAKe,aAAa,CAACd,GAAG,EAAIb,EAAI2B,aAAa,CAACf,KAAK,GAAKZ,EAAI2B,aAAa,CAACd,GAAG,CAKxE,CAAC,EAAEP,EAAS,CAAC,EAAEN,EAAI2B,aAAa,CAACf,KAAK,CAAC,CAAC,EAAEZ,EAAI2B,aAAa,CAACd,GAAG,CAAC,CAAC,CAJ/D,CAAC,EAAEP,EAAS,CAAC,EAAEN,EAAI2B,aAAa,CAACf,KAAK,CAAC,CAAC,CALxCN,CAUX,CAmIO,SAAS6C,EAAyBC,CAAY,CAAE7B,CAA2B,EAmBhF,MAX+B,CAC7BtB,KAAM,OACNgC,IAAK,IAAIM,IATMc,CAAAA,EAAAA,EAAAA,EAAAA,EAAmB,CAClCC,KAAM/B,EACNgC,UAAWhC,EAAWiC,OAAO,CAAC1D,IAAI,CAClC2D,OAAQ,OACRlD,KAAM6C,CACR,GAIyBZ,OAAOC,QAAQ,CAACC,MAAM,EAAEE,IAAI,CACnDrC,KAAM6C,EACNM,OAAQnC,EAAWlC,EAAE,CACrB+B,UAAWG,EAAWT,UAAU,CAChCO,SAAUE,EAAWzB,IAAI,CACzBE,IAAKuB,EAAWvB,GAAG,CACnBsB,UAAWC,EAAWD,SAAS,CAInC,CAEO,SAASqC,EACdC,CAA+B,CAC/BrC,CAA2B,EAE3B,IAAMsC,EAA6BD,EAAWE,MAAM,EAAEC,sBAAwB,GAsB9E,MArBwC,CACtC9D,KAAM,SACN2B,KAAM,mBACN9B,KAAM+D,EACNG,sBAAuB,CACrB,CACEC,YAAa,CAACrD,MAAOgD,EAAWE,MAAM,EAAEI,aAAe,EAAGrD,IAAK+C,EAAWE,MAAM,EAAEK,WAAa,CAAC,EAChGC,aAAc,CAACxD,MAAOgD,EAAWE,MAAM,EAAEO,cAAgB,EAAGxD,IAAK+C,EAAWE,MAAM,EAAEQ,YAAc,CAAC,EACnG1C,KAAMgC,EAAWE,MAAM,EAAElC,MAAQ,GACjCiC,mBAAAA,EACAH,OAAQnC,EAAWlC,EAAE,CACrB+B,UAAWG,EAAWT,UAAU,CAChCO,SAAUE,EAAWzB,IAAI,CACzBE,IAAK4D,EAAWW,UAAU,CAC1BjD,UAAWsC,EAAWW,UAAU,CAChChE,KAAMqD,EAAWrD,IAAI,EAExB,CACDiE,WAAYZ,EAAWa,WAAW,CAItC,CAOO,SAASC,EAAoBC,CAAc,EAChD,MAAO,CACL,GAAGA,CAAM,CACT1E,KAAM,QACR,CACF,CAEO,SAAS2E,EAAwBtB,CAAqB,EAC3D,MAAO,CAAC,GAAGA,CAAI,CAAErD,KAAM,YAAY,CACrC,CAEO,SAAS4E,EACdC,CAAyE,EAEzE,MAAO,CAAC,CAACA,GAAgB,iBAAkBA,CAC7C,CAEO,SAASC,EAAaD,CAAkD,EAC7E,MAAO,CAAC,CAACA,GAAgB,CAACD,EAASC,EACrC,CAEO,SAASE,EAAmBC,CAAmC,CAAEC,CAAmC,SAEzG,IAAUA,GAKAC,KAAAA,IAANF,GAAmBC,KAAMC,IAAND,GAIhB/D,EAAY8D,KAAO9D,EAAY+D,EACxC,CAEO,SAASE,EACdH,CAAqC,CACrCC,CAAqC,EAErC,GAAID,KAAME,IAANF,GAAmBC,KAAMC,IAAND,EAAiB,MAAO,GAC/C,GAAUC,KAAAA,IAANF,GAAmBC,KAAMC,IAAND,GAEnBD,EAAEnC,MAAM,GAAKoC,EAAEpC,MAAM,CAFe,MAAO,GAM/C,IAAK,IAAIuC,EAAI,EAAGA,EAAIJ,EAAEnC,MAAM,CAAEuC,IAC5B,GAAI,CAACL,EAAmBC,CAAC,CAACI,EAAE,CAAEH,CAAC,CAACG,EAAE,EAChC,MAAO,GAIX,MAAO,EACT,CAEO,SAASC,EAAoBC,CAAwC,CAAEC,CAAqB,EACjGD,EAAgB,IACH,cAATC,GACFhD,OAAOiD,OAAO,CAACC,SAAS,CAAC,KAAM,GAAI,CAAC,EAAE7G,EAAa,CAAC,CAExD,CAEO,SAAS8G,EAAgBvD,CAA+B,EAC7D,MAAOA,SAAAA,EAAUnC,IAAI,CAYhB,SAAS2F,EAAW7E,CAA2B,CAAE8E,CAAwB,EAC9E,GAAI9E,SAAAA,EAAQhC,IAAI,CACd,MAAO,CACLe,KAAM+F,EACNC,UAAW,CAAC,CAAC,EAAED,EAAiB,IAAI,CAAC,CACrC5F,KAAM,MACR,EAGF,GAAIc,EAAQ7B,UAAU,CAAE,CACtB,IAAM6G,EAAiBhF,EAAQ7B,UAAU,CAAC8G,IAAI,CAAChG,GAAOA,iBAAAA,EAAIC,IAAI,EAC9D,GAAI8F,EACF,MAAO,CACLjG,KAAMiG,EAAeE,KAAK,CAC1BH,UAAWC,EAAeD,SAAS,CACnC7F,KAAM,OACR,CAEJ,CAEA,MAAO,CACLH,KAAM,UACNgG,UAAW,GACX7F,KAAM,SACR,CACF,CAEO,SAASiG,EAAQC,CAAc,EACpC,MAAOA,UAAAA,EAAOlG,IAAI,CAMb,SAASmG,EAAwBC,CAA8B,EACpE,IAAMC,EAAgBD,EAASE,GAAG,CAACxF,GAAW6E,EAAW7E,EAAS,KAAKyF,MAAM,CAACL,GAAUA,GAAQlG,OAAS,SACnGwG,EAAe,IAAIC,IACzB,IAAK,IAAMC,KAASL,EAClBG,EAAaG,GAAG,CAACD,EAAM7G,IAAI,CAAE6G,GAE/B,OAAOE,MAAMC,IAAI,CAACL,EAAaM,MAAM,GACvC,CAEO,SAASC,EAAwB7H,CAAyB,EAC/D,IAAM8H,EAAkB,IAAItL,KAAKwD,EAAO+H,SAAS,EAAEC,OAAO,GAK1D,OAAOC,IAJSzL,OAAOwL,OAAO,GACKF,EACjB,KAGpB,C,yMCleYI,CAAgB,E,yFAAhBA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,G,SAOAC,CAAc,E,yPAAdA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAiBL,IAAMC,EAAmB,IACnBC,EAAkB,IAExB,SAASC,EACdC,CAAqB,CACrB3F,CAAa,CACb4F,CAA8B,EAE9B,IAAMC,EAAYC,CAAAA,EAAAA,EAAAA,MAAAA,IACZC,EAAeD,CAAAA,EAAAA,EAAAA,MAAAA,IACfE,EAAiBF,CAAAA,EAAAA,EAAAA,MAAAA,EAAiB,EAAE,EACpCG,EAAkBH,CAAAA,EAAAA,EAAAA,MAAAA,EAAgB,IAClC,CAACI,EAASC,EAAW,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAmB,EAAE,EAC7C,CAACC,EAAWC,EAAa,CAAGF,CAAAA,EAAAA,EAAAA,QAAAA,EAAkB,IAE9CG,EAAeC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KAC/BL,EAAW,EAAE,EACbG,EAAa,GACf,EAAG,EAAE,EAECG,EAAeD,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KAC/B,GAAI,GAAgBb,EAEpB,GAAI,CACF,IAAMe,EAAS,IAAIC,OAAOf,EAC1Bc,CAAAA,EAAOE,SAAS,CAAG,CAAC,CAACC,KAAAA,CAAI,CAA+B,IACtDZ,EAAgBa,OAAO,CAAG,GAC1BX,EAAWU,EAAKlB,IAAI,EACpBW,EAAa,IACbP,EAAae,OAAO,CAAGD,EAAK7G,KAAK,CACjCgG,EAAec,OAAO,CAAGD,EAAKlB,IAAI,EAGpCE,EAAUiB,OAAO,CAAGJ,CACtB,CAAE,MAAOK,EAAG,CAGVC,QAAQC,IAAI,CAAC,kCAAmCF,EAClD,CACF,EAAG,CAACnB,EAAYD,EAAK,EAEfuB,EAAoBV,CAAAA,EAAAA,EAAAA,WAAAA,EACxB,IACMP,EAAgBa,OAAO,GACzBjB,EAAUiB,OAAO,EAAEK,YACnBV,KAGF,IAAMW,EACJrB,EAAae,OAAO,EAAIO,EAASC,UAAU,CAACvB,EAAae,OAAO,GAAKd,EAAec,OAAO,CAAC/F,MAAM,CAEpGuF,EAAa,IACbL,EAAgBa,OAAO,CAAG,GAC1BjB,EAAUiB,OAAO,EAAES,YAAY,CAACC,SAAUJ,EAAqBpB,EAAec,OAAO,CAAGnB,EAAM3F,MAAOqH,CAAQ,EAC/G,EACA,CAAC1B,EAAMc,EAAa,QAYtB,CATAgB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACRhB,IACO,IAAMZ,EAAUiB,OAAO,EAAEK,aAC/B,CAACV,EAAa,EAEjBgB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACRP,EAAkBlH,EACpB,EAAG,CAACA,EAAOkH,EAAkB,EAExBtB,GAEE,CAACM,EAASG,EAAWE,EAAa,CAFjB,CAAC,EAAE,CAAE,GAAO,KAAO,EAAE,CAKxC,SAASmB,EACdC,CAAc,CACdC,CAAsB,CACtBC,EAAyB,EAAK,MAkNNC,EA0BSC,EAhBVA,EA1NvB,IAAMC,EAASC,CAAAA,EAAAA,EAAAA,EAAAA,IAETC,EAA2B1B,CAAAA,EAAAA,EAAAA,WAAAA,EAC/B,IAAM2B,QAAQC,GAAG,CAACT,EAAKnD,GAAG,CAAC6D,GAAOL,EAAOM,iBAAiB,CAAC,CAACC,SAAU,CAAC,sBAAuBF,EAAI,KAClG,CAACL,EAAQL,EAAK,EAGVa,EAAUC,CAAAA,EAAAA,EAAAA,CAAAA,EAAW,CACzBC,QAASf,EAAKnD,GAAG,CAAC6D,GAAQ,EACxBE,SAAU,CAAC,sBAAuBF,EAAI,CACtCM,QAAS,IAAMC,EAAoBP,GACnCQ,gBAAiB,CACfC,cAAe,UACfC,KAAM,UACNC,KAAM,SACR,EACAC,UAAWC,GACb,GACF,GAEM,CAACC,OAAQC,CAAuB,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,CACpDC,YAAa,CAAC,sBAAsB,CACpCC,WAAY,IAAMC,EAAgB7B,EAAMC,GACxC6B,UAAWvB,CACb,GAEMwB,EAuLC,CACLZ,cAyBF,IAAIf,CAD6BA,EAxBUD,CAFnBA,EArLtBU,EAAQhE,GAAG,CAACmF,GAAKA,EAAE9C,IAAI,GAuL6BrC,GAAG,CAACoF,GAAKA,EAAEd,aAAa,GAyBjE/H,MAAM,CAAe,UAE9BgH,EAAStN,KAAK,CAACmP,GAAKA,OAAAA,GAAuC,KAC3D7B,EAAS8B,IAAI,CAACD,GAAKA,YAAAA,GAAsC,UAEtD7B,EAAS9D,IAAI,CAAC2F,GAAKA,OAAAA,GAAiCA,YAAAA,GA7BzDb,KAAMe,EAA4BhC,EAAWtD,GAAG,CAACoF,GAAKA,EAAEb,IAAI,GAC5DC,KAAMnB,EAQR,CAFuBE,EALDD,EAAWtD,GAAG,CAACoF,GAAKA,EAAEZ,IAAI,GAOnCvO,KAAK,CAACmP,GAAKA,aAAAA,GAAmCA,gBAAAA,GAClD,cAEL7B,EAAS8B,IAAI,CAACD,GAAKA,aAAAA,GAAyC,WACzD,UAVDE,EAA4BhC,EAAWtD,GAAG,CAACoF,GAAKA,EAAEZ,IAAI,EAC5D,EAjLA,OAFAe,SA+MmBC,CAAoB,CAAEC,CAAa,EACtD,IAAMC,EAAcpE,CAAAA,EAAAA,EAAAA,MAAAA,EAA2B1C,KAAAA,GACzC+G,EAAgBrE,CAAAA,EAAAA,EAAAA,MAAAA,EAAOkE,GAC7BvC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR0C,EAAcrD,OAAO,CAAGkD,CAC1B,EAAG,CAACA,EAAS,EACbvC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KAER,GAAIwC,EAAQ,EAEV,OADAC,EAAYpD,OAAO,CAAGrG,OAAO2J,WAAW,CAF7B,IAAMD,EAAcrD,OAAO,GAESmD,GACxC,IAAMxJ,OAAO4J,aAAa,CAACH,EAAYpD,OAAO,CAEzD,EAAG,CAACmD,EAAM,CAEZ,EA7Nc,IAAM,KAAK/B,IAA4BoC,cAJjDZ,EAAyBZ,aAAa,EACtCY,aAAAA,EAAyBX,IAAI,EAC7BW,aAAAA,EAAyBV,IAAI,CAE2C,IAAQ,GAE3E,CAACU,EAA0B,IAAMN,IAA0B,CAgB7D,SAASmB,IACd,IAAMC,EAAqB7O,EAAAA,CAAmBA,CAAC8O,cAAc,GACvDC,EAAoB/O,EAAAA,CAAmBA,CAACgP,aAAa,GACrDC,EAAe9E,CAAAA,EAAAA,EAAAA,MAAAA,EAAsB,MACrC+E,EAAoB/E,CAAAA,EAAAA,EAAAA,MAAAA,EAAO0E,GAC3BM,EAAYhF,CAAAA,EAAAA,EAAAA,MAAAA,EAAO0E,GACnBO,EAAejF,CAAAA,EAAAA,EAAAA,MAAAA,EAAsB,MACrCkF,EAAmBlF,CAAAA,EAAAA,EAAAA,MAAAA,EAAO4E,GAC1BO,EAAWnF,CAAAA,EAAAA,EAAAA,MAAAA,EAAO4E,GAClB,CAACQ,EAAaC,EAAe,CAAG/E,CAAAA,EAAAA,EAAAA,QAAAA,EAASoE,GACzC,CAACY,EAAYC,EAAc,CAAGjF,CAAAA,EAAAA,EAAAA,QAAAA,EAASsE,GACvCY,EAAUxF,CAAAA,EAAAA,EAAAA,MAAAA,EAAO,GAEvB2B,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR6D,EAAQxE,OAAO,CAAGyE,WAAWC,iBAAiBC,SAASC,eAAe,EAAEC,QAAQ,CAClF,EAAG,EAAE,EAEL,IAAMlB,EAAiB,GACdmB,KAAKC,GAAG,CAACD,KAAKE,GAAG,CAACC,EAAQvG,GAAmB/E,OAAOuL,WAAW,CAAGV,EAAQxE,OAAO,EAGpF6D,EAAgB,GACbiB,KAAKC,GAAG,CAACD,KAAKE,GAAG,CAACG,EAAOxG,GAAkBhF,OAAOyL,UAAU,CAAG,EAAIZ,EAAQxE,OAAO,EAGrFqF,EAAS3F,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,IACzB,GAAIoE,OAAAA,EAAa9D,OAAO,CAAW,CACjC,IAAMsF,EAAKxB,EAAa9D,OAAO,CAAGC,EAAEsF,OAAO,CACrCN,EAAStB,EAAeI,EAAkB/D,OAAO,CAAGsF,GAC1DjB,EAAeY,GACfjB,EAAUhE,OAAO,CAAGiF,CACtB,CACA,GAAIhB,OAAAA,EAAajE,OAAO,CAAW,CACjC,IAAMwF,EAAKvB,EAAajE,OAAO,CAAGC,EAAEwF,OAAO,CACrCN,EAAQtB,EAAcK,EAAiBlE,OAAO,CAAGwF,GACvDjB,EAAcY,GACdhB,EAASnE,OAAO,CAAGmF,CACrB,CACF,EAAG,EAAE,EAECO,EAAahG,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KAC7B/F,OAAOgM,mBAAmB,CAAC,YAAaN,GACxC1L,OAAOgM,mBAAmB,CAAC,UAAWD,GACT,OAAzB5B,EAAa9D,OAAO,GAEtBnL,EAAAA,CAAmBA,CAACwP,cAAc,CAACL,EAAUhE,OAAO,EACpD8D,EAAa9D,OAAO,CAAG,MAEI,OAAzBiE,EAAajE,OAAO,GACtBnL,EAAAA,CAAmBA,CAAC0P,aAAa,CAACJ,EAASnE,OAAO,EAClDiE,EAAajE,OAAO,CAAG,KAE3B,EAAG,CAACqF,EAAO,EAELO,EAAclG,CAAAA,EAAAA,EAAAA,WAAAA,EAClB,CAACO,EAAqB4F,EAAqBC,KACxB,IAAb7F,EAAE8F,MAAM,GACV9F,EAAE+F,cAAc,GACZF,IACFhC,EAAa9D,OAAO,CAAGC,EAAEsF,OAAO,CAChCxB,EAAkB/D,OAAO,CAAGoE,GAE1ByB,IACF5B,EAAajE,OAAO,CAAGC,EAAEwF,OAAO,CAChCvB,EAAiBlE,OAAO,CAAGsE,GAE7B3K,OAAOsM,gBAAgB,CAAC,YAAaZ,GACrC1L,OAAOsM,gBAAgB,CAAC,UAAWP,GAEvC,EACA,CAACtB,EAAaE,EAAYe,EAAQK,EAAW,EAGzCQ,EAAmBxG,CAAAA,EAAAA,EAAAA,WAAAA,EACvB,IAEE,GAAIO,YAAAA,EAAEkG,GAAG,CAAgB,CACvB,IAAMC,EAAiBzC,EAAeS,EAAc,GACpDC,EAAe+B,GACfvR,EAAAA,CAAmBA,CAACwP,cAAc,CAAC+B,GACnCnG,EAAE+F,cAAc,EAElB,MAAO,GAAI/F,cAAAA,EAAEkG,GAAG,CAAkB,CAChC,IAAMC,EAAiBzC,EAAeS,EAAc,GACpDC,EAAe+B,GACfvR,EAAAA,CAAmBA,CAACwP,cAAc,CAAC+B,GACnCnG,EAAE+F,cAAc,EAElB,MAAO,GAAI/F,eAAAA,EAAEkG,GAAG,CAAmB,CACjC,IAAME,EAAgBxC,EAAcS,EAAa,GACjDC,EAAc8B,GACdxR,EAAAA,CAAmBA,CAAC0P,aAAa,CAAC8B,GAClCpG,EAAE+F,cAAc,EAElB,MAAO,GAAI/F,cAAAA,EAAEkG,GAAG,CAAkB,CAChC,IAAME,EAAgBxC,EAAcS,EAAa,GACjDC,EAAc8B,GACdxR,EAAAA,CAAmBA,CAAC0P,aAAa,CAAC8B,GAClCpG,EAAE+F,cAAc,EAClB,CACF,EACA,CAAC5B,EAAaE,EAAW,EAG3B,MAAO,CAACA,WAAAA,EAAYF,YAAAA,EAAawB,YAAAA,EAAaM,iBAAAA,CAAgB,CAChE,CAEO,SAASI,EAA2BC,CAAa,EACtD,GAAM,CAACC,EAAgBC,EAAkB,CAAGnH,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,CAAC,GAChDoH,EAAWC,CAAAA,EAAAA,EAAAA,EAAAA,IAajB,MAXAhG,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACJ4F,GAAQ,CAACG,GAAU1G,SAAS4G,aAAe,GAAE,EAAK,KAAOjN,OAAOyL,UAAU,CAC5EqB,EAAkB,CAChBI,KAAM,CAAC,EAAElN,OAAOyL,UAAU,CAAIsB,CAAAA,GAAU1G,SAAS4G,aAAe,GAAE,EAAG,aAAa,CAAC,CACnFE,OAAQ,MACV,GAEAL,EAAkB,CAAC,EAEvB,EAAG,CAACF,EAAMG,EAAS,EAEZF,CACT,CAEA,eAAe1E,EAAoBP,CAAW,EAC5C,IAAMwF,EAAM,MAAMC,MAAM,CAAC,kCAAkC,EAAEC,mBAAmB1F,GAAK,CAAC,CAAE,CACtF2F,QAAS,CAACC,OAAQ,mBAAoB,mBAAoB,gBAAgB,CAC5E,GAEA,GAAI,CAACJ,EAAIvR,EAAE,CACT,MAAO,CACLwM,cAAe,iBACfC,KAAM,UACNC,KAAM,SACR,EAGF,IAAMnC,EAAQ,MAAMgH,EAAItR,IAAI,GAE5B,MAAO,CACLuM,cAAejC,EAAKqH,SAAS,CAC7BnF,KAAMlC,EAAKsH,WAAW,CACtBnF,KAAMnC,EAAKuH,WAAW,CAE1B,CAEA,eAAe5E,EAAgB7B,CAAc,CAAE0G,CAAiB,EAC9D,IAAMC,EACJ3G,IAAAA,EAAK5G,MAAM,CAAS,CAAC,IAAI,EAAEgN,mBAAmBpG,CAAI,CAAC,EAAE,EAAG,CAAC,CAAG,CAAC,KAAK,EAAEoG,mBAAmBlS,KAAKC,SAAS,CAAC6L,IAAO,CAAC,CAEhH,MAAO4G,CAAAA,EAAAA,EAAAA,EAAAA,EAAc,CAAC,yBAAyB,EAAED,EAAU,YAAY,EAAE,CAACD,EAAS,CAAC,CAAE,CAAChS,OAAQ,MAAM,EACvG,CAqBA,SAASyN,EAA4B/B,CAA4B,SAC/D,EAAa8B,IAAI,CAACD,GAAKA,YAAAA,GAAwC,UAC3D7B,EAAS8B,IAAI,CAACD,GAAKA,gBAAAA,GAA0C,cAC7D7B,EAAS8B,IAAI,CAACD,GAAKA,aAAAA,GAAyC,WACzD,SACT,C,iGC5VO,mBAAM4E,SAMX,MAAaC,IAAI,GAAGC,CAAe,CAA+B,CAChE,IAAMzB,EAAMyB,EAAO1N,IAAI,CAAC,IAAI,CAAC2N,SAAS,EAChCC,EAAS,IAAI,CAACC,KAAK,CAACJ,GAAG,CAACxB,GAC9B,GAAI2B,EACF,OAAOA,CACF,EACL,IAAME,EAAU,IAAI,CAACC,OAAO,IAAIL,GAMhC,OALA,IAAI,CAACG,KAAK,CAAChK,GAAG,CAACoI,EAAK6B,GAEfjU,CADU,MAAMiU,CAAM,EACfxS,EAAE,EACZ,IAAI,CAACuS,KAAK,CAACG,MAAM,CAAC/B,GAEb6B,CACT,CACF,CAhBA,YAAmB,CAAoE,CAAE,C,KAA9DC,OAAO,CAAPA,E,KAHVJ,SAAS,CAAG,M,KACrBE,KAAK,CAAG,IAAIlK,GAEsE,CAiB5F,E,eCCA,IAAMsK,EAA6B,IAAIC,IAAI,CAAC,UAAW,OAAQ,SAAU,SAAU,aAAa,EA8BnFC,EAAkC,CAC7C,IAAK,uCACL,IAAK,6CACL,IAAK,kFACL,IAAK,wCACL,IAAK,6DACL,IAAK,gFACL,IAAK,4DACP,EAOO,6BAAMC,mBAcX,MAAMC,aAAaX,EAA6B,CAAC,CAAC,CAA2C,CAC3F,IAAMY,EAAc,IAAIC,eACG,WAAvB,OAAOb,EAAO3Q,IAAI,EAAeuR,EAAYzK,GAAG,CAAC,OAAQ6J,EAAO3Q,IAAI,EACxE,IAAMyR,EAAiB,CAAC,SAAS,EAAEF,EAAYG,QAAQ,GAAG,CAAC,CACrD5B,EAAM,MAAM,IAAI,CAAC6B,eAAe,CAACF,EAAgB,OACvD,GAAI,CAAC3B,EAAIvR,EAAE,CAAE,OAAOuR,EAEpB,IAAM8B,EAA+B,CAAC,MAAM9B,EAAItR,IAAI,EAAC,EAAGqT,OAAO,EAAI,EAAE,CACrE,MAAO,CAACC,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAMqT,QAAAA,CAAO,CAC/C,CAEA,MAAMG,cAAsD,CAC1D,IAAMjC,EAAM,MAAM,IAAI,CAAC6B,eAAe,CAAC,WAAY,QACnD,GAAI,CAAC7B,EAAIvR,EAAE,CAAE,OAAOuR,EAEpB,IAAM8B,EAA6B,CAAC,MAAM9B,EAAItR,IAAI,EAAC,EAAGa,MAAM,CAC5D,MAAO,CAACyS,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAMqT,QAAAA,CAAO,CAC/C,CAEA,MAAMI,aAAatS,CAAgB,CAA4B,CAC7D,IAAMoQ,EAAM,MAAM,IAAI,CAAC6B,eAAe,CAAC,CAAC,SAAS,EAAEjS,EAAS,CAAC,CAAE,iBAC/D,EAASnB,EAAE,CAEJ,CAACuT,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAMqT,QAAS,IAAI,EAF/B9B,CAGtB,CAEA,MAAMmC,aAAavS,CAAgB,CAAEwS,CAAe,CAA8B,CAGhF,IAAMpC,EAAM,MAAM,IAAI,CAAC6B,eAAe,CAAC,CAAC,SAAS,EAAEjS,EAAS,KAAK,CAAC,CAAE,QAFvD,CAACyS,SAAU,GAAOnS,KAAMkS,CAAO,GAG5C,GAAI,CAACpC,EAAIvR,EAAE,CAAE,OAAOuR,EAEpB,IAAM8B,EAAkB,CAAC,MAAM9B,EAAItR,IAAI,EAAC,EAAGwB,IAAI,EAAI,GACnD,MAAO,CAAC8R,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAMqT,QAAAA,CAAO,CAC/C,CAEA,MAAMQ,YAAY1S,CAAgB,CAA4B,CAC5D,IAAMoQ,EAAM,MAAM,IAAI,CAAC6B,eAAe,CAAC,CAAC,SAAS,EAAEjS,EAAS,MAAM,CAAC,CAAE,gBACrE,EAASnB,EAAE,CAEJ,CAACuT,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAMqT,QAAS,IAAI,EAF/B9B,CAGtB,CAEA,MAAMuC,mBAAmB3S,CAAgB,CAA8B,CAGrE,IAAMoQ,EAAM,MAAM,IAAI,CAAC6B,eAAe,CAAC,CAAC,SAAS,EAAEjS,EAAS,KAAK,CAAC,CAAE,QAFvD,CAACyS,SAAU,GAAMnS,KAAM,EAAE,GAGtC,GAAI,CAAC8P,EAAIvR,EAAE,CAAE,OAAOuR,EAEpB,IAAM8B,EAAkB,CAAC,MAAM9B,EAAItR,IAAI,EAAC,EAAGwB,IAAI,EAAI,GACnD,MAAO,CAAC8R,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAMqT,QAAAA,CAAO,CAC/C,CAEA,MAAMU,aAAa5S,CAAgB,CAA2C,CAC5E,GAAI,IAAI,CAAC6S,iBAAiB,EAAElT,OAAOE,KAAOG,EACxC,MAAO,CAACoS,OAAQ,IAAKvT,GAAI,GAAMqT,QAAS,IAAI,CAACW,iBAAiB,EAGhE,IAAMzC,EAAM,MAAM,IAAI,CAAC6B,eAAe,CAAC,CAAC,SAAS,EAAEjS,EAAS,SAAS,CAAC,CAAE,OACxE,GAAI,CAACoQ,EAAIvR,EAAE,CAAE,OAAOuR,EAEpB,IAAM8B,EAAU,MAAM9B,EAAItR,IAAI,GAE9B,OADA,IAAI,CAAC+T,iBAAiB,CAAGX,EAClB,CAACE,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAMqT,QAAAA,CAAO,CAC/C,CAEA,MAAMY,cACJ9S,CAAgB,CAChBR,CAAe,CACfuT,CAAc,CACdrT,CAAkC,CAClCsT,CAA6B,CACW,CACxC,IAAI,CAACH,iBAAiB,CAAGlN,KAAAA,EACzB,IAAMyK,EAAM,MAAM,IAAI,CAAC6B,eAAe,CAAC,CAAC,SAAS,EAAEjS,EAAS,SAAS,CAAC,CAAE,OAAQ,CAC9ER,QAAAA,EACAuT,OAAAA,EACArT,WAAAA,EACAuT,WAAYjQ,OAAOC,QAAQ,CAACG,IAAI,CAChC4P,mBAAAA,CACF,GACA,GAAI,CAAC5C,EAAIvR,EAAE,CAAE,OAAOuR,EAEpB,IAAM8B,EAA8B,CAAC,MAAM9B,EAAItR,IAAI,EAAC,EAAGyC,OAAO,CAC9D,MAAO,CAAC6Q,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAMqT,QAAAA,CAAO,CAC/C,CAEA,MAAMgB,uBACJlT,CAAgB,CAChBR,CAAe,CACfuT,CAAc,CACdrT,CAAkC,CAClCyT,CAA+B,CAC/BvT,CAA0C,CAC1CoT,CAA6B,CAC7BI,CAAyB,CACI,CAC7B,IAAI,CAACP,iBAAiB,CAAGlN,KAAAA,EACzB,IAAM0N,EAA6B,CACjC7T,QAAAA,EACAuT,OAAAA,EACArT,WAAAA,EACAyT,QAAAA,EACAF,WAAYjQ,OAAOC,QAAQ,CAACG,IAAI,CAChCkQ,UAAW,GACX1T,cAAAA,EACAoT,mBAAAA,EACAI,eAAAA,CACF,EAEMhD,EAAM,MAAM,IAAI,CAAC6B,eAAe,CAAC,CAAC,SAAS,EAAEjS,EAAS,SAAS,CAAC,CAAE,OAAQqT,EAAM,WACtF,EAASxU,EAAE,CAEJ,CAACuT,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAMH,SAAU0R,CAAG,EAF/BA,CAGtB,CAEA,MAAMmD,aAAa,CAACC,SAAAA,CAAQ,CAAEC,eAAAA,CAAc,CAAEC,UAAAA,CAAS,CAAEC,SAAAA,CAAQ,CAAEC,aAAAA,CAAY,CAAkB,CAAE,CAQjG,IAAMxD,EAAM,MAAM,IAAI,CAACyD,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAACC,aAAa,CAAC,SAAS,CAAC,CAAE,OAP9D,CACXN,SAAAA,EACAO,gBAAiBN,EACjBO,WAAYN,EACZO,UAAWN,EACXO,cAAeN,CACjB,UAEA,EAAS/U,EAAE,CAEJ,CAACuT,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAMqT,QAAS,IAAI,EAF/B9B,CAGtB,CAEA,MAAM+D,aAA4C,CAChD,IAAMzV,EAAW,MAAM,IAAI,CAAC0V,oBAAoB,UAChD,EAAcvV,EAAE,CACT,CAACuT,OAAQ,IAAKvT,GAAI,GAAMqT,QAASxT,EAASwT,OAAO,CAACkB,cAAc,EAD9C1U,CAE3B,CAcA,MAAM2V,iDAA+F,CACnG,IAAM3V,EAAW,MAAM,IAAI,CAAC0V,oBAAoB,UAChD,EAAcvV,EAAE,CACT,CAACuT,OAAQ,IAAKvT,GAAI,GAAMqT,QAASxT,EAASwT,OAAO,CAACoC,2CAA2C,EAD3E5V,CAE3B,CAEA0V,sBAAmE,CAIjE,OAHK,IAAI,CAACG,cAAc,EACtB,KAAI,CAACA,cAAc,CAAG,IAAI,CAACC,oBAAoB,EAAC,EAE3C,IAAI,CAACD,cAAc,CAG5B,MAAMC,sBAAmE,CACvE,IAAMpE,EAAM,MAAM,IAAI,CAACyD,iBAAiB,CAAC,+BAAgC,cACzE,EAAShV,EAAE,CAEJ,CAACuT,OAAQ,IAAKvT,GAAI,GAAMqT,QADd,MAAM9B,EAAItR,IAAI,EACO,EAFlBsR,CAGtB,CAEA,MAAMqE,aAAatP,CAAc,CAAE,CACjC,IAAMiL,EAAM,MAAM,IAAI,CAACyD,iBAAiB,CAAC,CAAC,iBAAiB,EAAE1O,EAAOtF,EAAE,CAAC,CAAC,CAAE,iBAC1E,EAAShB,EAAE,CACJ,CAACuT,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAMqT,QAAS,IAAI,EAD/B9B,CAEtB,CAEA,MAAMsE,cAAc5Q,CAAqB,CAAgC,CACvE,IAAM/C,EAAO4T,CAAAA,EAAAA,EAAAA,EAAAA,EAAa,CAAC7Q,KAAAA,EAAM8Q,UAAW9Q,EAAKhC,SAAS,CAAE+S,mBAAoB,EAAK,GACrF,OAAO,IAAI,CAACC,cAAc,CAAC9D,GAAG,CAACjQ,EACjC,CAYA,MAAMgU,aAAajR,CAAqB,CAAEvB,CAAa,CAA6C,CAClG,OAAO,IAAI,CAACyS,iBAAiB,CAAChE,GAAG,CAAClN,EAAKxC,UAAU,CAAEwC,EAAKxD,IAAI,CAAEiC,EAChE,CA0BA,MAAM0S,qBACJxS,CAAW,CACXT,CAAa,CACb8B,CAAY,CACuD,CACnE,IAAMpF,EAAW,MAAM,IAAI,CAACmV,iBAAiB,CAC3C,CAAC,EAAE,IAAI,CAACC,aAAa,CAAC,kBAAkB,EAAE9R,EAAM,CAAC,EAAE8B,EAAK,CAAC,EAAEwM,mBAAmB7N,GAAK,CAAC,CACpF,cAGF,EAAc5D,EAAE,CAET,CACLuT,OAAQ1T,EAAS0T,MAAM,CACvBvT,GAAIH,EAASG,EAAE,CACfqT,QAAS,MAAMxT,EAASI,IAAI,EAC9B,EANyBJ,CAO3B,CAEA,MAAMwW,UAAUhR,CAAuB,CAAuC,CAC5E,IAAIgO,EACJ,GAAI,IAAI,CAACiD,gBAAgB,CAACC,GAAG,CAAClR,GAC5BgO,EAAU,IAAI,CAACiD,gBAAgB,CAACnE,GAAG,CAAC9M,OAC/B,CACL,IAAMkM,EAAM,MAAM,IAAI,CAACyD,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAACC,aAAa,CAAC,cAAc,EAAE5P,EAAO,CAAC,CAAE,OACzF,GAAI,CAACkM,EAAIvR,EAAE,CAAE,OAAOuR,EAEpB8B,EAAU,MAAM9B,EAAItR,IAAI,GACxB,IAAI,CAACqW,gBAAgB,CAAC/N,GAAG,CAAClD,EAAQgO,EACpC,CAEA,MAAO,CAACE,OAAQ,IAAKvT,GAAI,GAAMqT,QAAAA,CAAO,CACxC,CAEA,MAAMmD,WAAWC,CAAkB,CAA0C,CAC3E,IAAMlF,EAAM,MAAMzR,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB2W,GACpC,GAAI,CAAClF,EAAIvR,EAAE,CAAE,MAAO,CAACuT,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAOY,MAAOiS,CAAM,CAACtB,EAAIgC,MAAM,CAAC,EAAI,IAAI,CAACmD,SAAS,EAC/F,IAAMrD,EAAU,MAAM9B,EAAItR,IAAI,GAC9B,MAAO,CAACsT,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAIuR,EAAIvR,EAAE,CAAEqT,QAAAA,CAAO,CACjD,CAEA,MAAMsD,iBAAiD5S,CAAY,CAA2C,CAC5G,GAAI,CAAC4O,EAA2B4D,GAAG,CAACxS,EAAUnC,IAAI,EAChD,MAAO,CACL2R,OAAQ,IACRvT,GAAI,GACJqT,QAAStP,CACX,EAEF,IAAMlE,EAAW,MAAM,IAAI,CAACmV,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAACC,aAAa,CAAC,kBAAkB,CAAC,CAAE,OAAQ,CAAClR,UAAAA,CAAS,UAE3G,EAAc/D,EAAE,CAET,CACLuT,OAAQ1T,EAAS0T,MAAM,CACvBvT,GAAIH,EAASG,EAAE,CACfqT,QAAS,MAAMxT,EAASI,IAAI,EAC9B,EANyBJ,CAO3B,CAEA,MAAM+W,8BAA8B7S,CAAwB,CAAE,CAC5D,GAAM,CAAChB,UAAWN,CAAU,CAAEO,SAAUvB,CAAI,CAAC,CAAGsC,EAC1C7B,EAAOiC,OAAO0S,IAAI,CAAC9S,EAAU7B,IAAI,EAEjC4U,EAAYC,CAAAA,EAAAA,EAAAA,EAAAA,EADL,CAACtU,WAAAA,EAAYhB,KAAAA,CAAI,EACaS,EAAM,IAE3CrC,EAAW,MAAM,IAAI,CAACmV,iBAAiB,CAAC8B,EAAW,cAEzD,EAAc9W,EAAE,CAET,CACLuT,OAAQ1T,EAAS0T,MAAM,CACvBvT,GAAIH,EAASG,EAAE,CACfqT,QAAS,MAAMxT,EAASI,IAAI,EAC9B,EANyBJ,CAO3B,CAEA,MAAMmX,oBACJ1C,CAAwD,CACxDnT,CAAgB,CAC4B,CAC5C,IAAMqT,EAAO,CAACF,QAAS,CAACA,EAAQ,CAAE2C,WAAY,CAAC,EAAE9S,OAAOC,QAAQ,CAACG,IAAI,CAAC,CAAC,EAEjE1E,EAAW,MAAM,IAAI,CAACuT,eAAe,CAAC,CAAC,SAAS,EAAEjS,EAAS,YAAY,CAAC,CAAE,OAAQqT,GACxF,GAAI,CAAC3U,EAASG,EAAE,CAAE,OAAOH,EACzB,IAAMwT,EAAU,MAAMxT,EAASI,IAAI,GAEnC,MAAO,CACLsT,OAAQ1T,EAAS0T,MAAM,CACvBvT,GAAIH,EAASG,EAAE,CACfqT,QAAAA,CACF,CACF,CAEA,MAAgB2B,kBACd9S,CAAY,CACZnC,CAAmD,CACnDyU,CAA0B,CACW,CACrC,IAAM9C,EAAmC,CAAC,EAC1C,IAAK,IAAMwF,IAAOC,CAAAA,EAAAA,EAAAA,CAAAA,IAAyB,CACzC,IAAMC,EAAaF,EAAI/U,KAAK,CAAC,KACvBV,EAAO2V,CAAU,CAAC,EAAE,EAAEC,WAAW,IAAK,KACxCra,EAAQ,GACRoa,CAAAA,EAAW3S,MAAM,CAAG,GACtBzH,CAAAA,EAAQoa,CAAU,CAAC,EAAE,EAEvB1F,CAAO,CAAC,CAAC,aAAa,EAAEjQ,EAAK,CAAC,CAAC,CAAGzE,CACpC,CAEA,IAAMyB,EAAQ,MAAM,IAAI,CAAC6Y,wBAAwB,CAACtY,YAAY,EAC9D0S,CAAAA,CAAO,CAAC,sBAAsB,CAAGjT,EAAMzB,KAAK,CAE5C,GAAI,CACF,IAAMuU,EAAM,MAAMzR,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBoC,EAAM,CAACnC,OAAAA,EAAQyU,KAAAA,EAAM9C,QAAAA,CAAO,GAChE,GAAIH,EAAIvR,EAAE,CAAE,OAAOuR,EACnB,MAAO,CAACgC,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAOY,MAAOiS,CAAM,CAACtB,EAAIgC,MAAM,CAAC,EAAI,IAAI,CAACmD,SAAS,CACpF,CAAE,MAAO9V,EAAO,CACd,MAAO,CAAC2S,OAAQ,IAAKvT,GAAI,GAAOY,MAAO,IAAI,CAAC8V,SAAS,CACvD,CACF,CAEA,IAAYa,4BAA6B,CACvC,MAEI,CAACC,cAAe,cAAc,CACpC,CAEA,MAAcpE,gBACZlR,CAAY,CACZnC,CAA2C,CAC3CyU,CAA0B,CAC1BiD,EAAoB,EAAK,CACzBC,EAAW,cAAc,CACY,CACrC,GAAI,CACF,IAAMC,EAAU,IAAI,CAACC,MAAM,CAIrBlG,EAAmC,CACvCmG,cAAepZ,CAHH,MAAM,IAAI,CAAC6Y,wBAAwB,CAACtY,YAAY,EAAC,EAGxCjC,wBAAwB,CAC7C,yBAA0B,IAAI,CAACwa,0BAA0B,CAACC,aAAa,EAEzE,IAAK,IAAMN,IAAOC,CAAAA,EAAAA,EAAAA,CAAAA,IAAyB,CACzC,IAAMC,EAAaF,EAAI/U,KAAK,CAAC,KACvBV,EAAO2V,CAAU,CAAC,EAAE,EAAEC,WAAW,IAAK,KACxCra,EAAQ,GACRoa,CAAAA,EAAW3S,MAAM,CAAG,GACtBzH,CAAAA,EAAQoa,CAAU,CAAC,EAAE,EAEvB1F,CAAO,CAAC,CAAC,aAAa,EAAEjQ,EAAK,CAAC,CAAC,CAAGzE,CACpC,CAEIya,GACF/F,CAAAA,CAAO,CAAC,eAAe,CAAG,mBAAkB,EAG9C,IAAMH,EAAM,MAAMC,MAAMmG,EAAUD,EAAWxV,EAAM,CACjDnC,OAAAA,EACAoH,KAAM,OACNoL,MAAO,WACPb,QAAAA,EACA8C,KAAMjV,KAAKC,SAAS,CAACgV,EACvB,GAEA,GAAIjD,EAAIvR,EAAE,CAAE,OAAOuR,EACnB,MAAO,CAACgC,OAAQhC,EAAIgC,MAAM,CAAEvT,GAAI,GAAOY,MAAOiS,CAAM,CAACtB,EAAIgC,MAAM,CAAC,EAAI,IAAI,CAACmD,SAAS,CACpF,CAAE,MAAO9V,EAAO,CACd,MAAO,CAAC2S,OAAQ,IAAKvT,GAAI,GAAOY,MAAO,IAAI,CAAC8V,SAAS,CACvD,CACF,CAzYA7X,YAAY+Y,CAAc,CAAEE,CAAyB,CAAE,C,KAPvD7C,aAAa,CAAG,uB,KAChByB,SAAS,CAAG,sD,KACZhB,cAAc,CAA2D5O,KAAAA,E,KACzEwP,gBAAgB,CAAG,IAAIjO,I,KACvB2L,iBAAiB,CAAoClN,KAAAA,E,KA2L7CiR,iBAAiB,CAAG,MAAO7V,IACjC,IAAMqP,EAAM,MAAM,IAAI,CAACyD,iBAAiB,CAAC9S,EAAM,cAC/C,EAASlC,EAAE,CAIJ,CAACuT,OAAQ,IAAKvT,GAAI,GAAMqT,QAFf,CAAC,MAAM9B,EAAItR,IAAI,EAAC,EAAG+X,KAAK,EAAI,EAAE,EAF1BzG,CAKtB,E,KACQ0E,cAAc,CAAG,IAAI/D,SAAS,IAAI,CAAC6F,iBAAiB,E,KAMpDE,gBAAgB,CAAG,MACzBxV,EACAwC,EACAvB,KAEA,IAAM7D,EAAW,MAAM,IAAI,CAACmV,iBAAiB,CAC3C,CAAC,+BAA+B,EAAEvS,EAAW,CAAC,EAAEwC,EAAK,CAAC,EAAEvB,EAAM,CAAC,CAC/D,cAGF,EAAc1D,EAAE,CAMT,CACLuT,OAAQ,IACRvT,GAAI,GACJqT,QAASA,CALM,MAAMxT,EAASI,IAAI,EAAC,EAKlBiY,WAAW,CAAC/P,MAAM,CAAC5C,GAAcA,2BAAAA,EAAWhC,IAAI,CACnE,EATS1D,CAUX,E,KACQsW,iBAAiB,CAAG,IAAIjE,SAAS,IAAI,CAAC+F,gBAAgB,EA3N5D,IAAI,CAACL,MAAM,CAAGA,EACd,IAAI,CAACN,wBAAwB,CAAG,IAAIvY,EAAAA,CAAwBA,CAAC+Y,EAAQ5P,GAAG,CAAC9J,GAAOA,EAAI4C,EAAE,EACxF,CAuYF,C,+DC/MO,IAAMmX,EAAiC,kBA6XjCC,EAAqB,CAChCC,QAAS,UACTC,aAAc,eACdC,QAAS,UACTC,QAAS,WACTC,gBAAiB,oBACjBC,gBAAiB,oBACjBC,SAAU,qBACZ,EA4HaC,EAAgC,CAC3C,YACA,WACA,kBACA,YACA,oBACA,eACA,eACA,wBACD,CAsHYC,EAAsB,CACjC,cACA,aACA,YACA,aACA,yBACA,WACA,eACA,YACA,aACA,UACA,UACA,oBACA,UACA,iBACA,gBACA,uBACA,iBACA,WACA,YACA,kBACA,iBACD,E,gDCl2BM,IAAMC,EAAsB,IA9DnC,MAAMC,oBAKJ,IAAWC,WAAY,CACrB,MAAOC,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,6CAC1B,CAEA,IAAWC,aAAc,CACvB,MAAOD,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,uBAC1B,CAEA,IAAWE,YAAa,CACtB,MAAOF,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,sBAC1B,CAEA,IAAWG,oBAAqB,CAC9B,MAAOH,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,yCAC1B,CAEA,IAAWI,0BAA2B,CACpC,MAAOJ,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,8BAC1B,CAEA,IAAWK,iBAAkB,CAC3B,MAAOL,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,2BAC1B,CAEA,IAAWM,eAAgB,CACzB,MAAON,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,yBAC1B,CAEA,IAAWO,yBAA0B,CACnC,MAAOP,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,yCAC1B,CAEA,IAAWQ,2BAA4B,CACrC,MAAOR,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,4CAC1B,CAEA,IAAWS,iBAAkB,CAC3B,MAAOT,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,4BAC1B,CAEA,IAAW9E,oBAAqB,CAC9B,MAAO8E,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,mCAC1B,CAEA,IAAWU,eAAgB,CACzB,MAAOV,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,yBAC1B,CAEA,IAAWW,wBAAyB,CAClC,MAAOX,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,yCAC1B,CAEA,IAAWY,uBAAwB,CACjC,MAAOZ,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,0BAC1B,CACF,C,wECxDO,8BAAMa,oBA+BX,IAAIC,kBAAkC,CACpC,OAAO,IAAI,CAACC,YAAY,CAACva,OAAO,CAAC,IAAI,CAACwa,sCAAsC,CAC9E,CAEA,IAAIF,iBAAiB5Y,CAAuB,CAAE,CAC5C,IAAMwP,EAAM,IAAI,CAACsJ,sCAAsC,CACvD,GAAI9Y,MAAAA,EAAkB,CACpB,IAAI,CAAC6Y,YAAY,CAACE,UAAU,CAACvJ,GAC7B,MACF,CACA,IAAI,CAACqJ,YAAY,CAAC1a,OAAO,CAACqR,EAAKxP,EACjC,CAEAgN,gBAAyB,CACvB,IAAMgM,EAAM,IAAI,CAACH,YAAY,CAACva,OAAO,CAAC,IAAI,CAAC2a,oBAAoB,EAC/D,OAAOD,EAAME,SAASF,GAAO,IAAI,CAACG,oBAAoB,CAGxDzL,eAAeY,CAAc,CAAE,CAC7B,IAAMkB,EAAM,IAAI,CAACyJ,oBAAoB,CACrC,IAAI,CAACJ,YAAY,CAAC1a,OAAO,CAACqR,EAAKlB,EAAO0D,QAAQ,GAChD,CAEA9E,eAAwB,CACtB,IAAM8L,EAAM,IAAI,CAACH,YAAY,CAACva,OAAO,CAAC,IAAI,CAAC8a,mBAAmB,EAC9D,OAAOJ,EAAME,SAASF,GAAO,IAAI,CAACK,mBAAmB,CAGvDzL,cAAcY,CAAa,CAAE,CAC3B,IAAMgB,EAAM,IAAI,CAAC4J,mBAAmB,CACpC,IAAI,CAACP,YAAY,CAAC1a,OAAO,CAACqR,EAAKhB,EAAMwD,QAAQ,GAC/C,CAEAsH,mBAA6B,CAE3B,MAAON,UADK,IAAI,CAACO,cAAc,CAACjb,OAAO,CAAC,IAAI,CAACkb,2BAA2B,CAE1E,CAEAC,kBAAkBC,CAAkB,CAAE,CACpC,IAAMlK,EAAM,IAAI,CAACgK,2BAA2B,CAC5C,IAAI,CAACD,cAAc,CAACpb,OAAO,CAACqR,EAAKkK,EAAU1H,QAAQ,GACrD,CAEA2H,iBAAiB3Z,CAAgB,CAAiB,CAChD,OAAO,IAAI,CAAC6Y,YAAY,CAACva,OAAO,CAAC,IAAI,CAACsb,kCAAkC,CAAC5Z,GAC3E,CAEA6Z,iBAAiB7Z,CAAgB,CAAE8Z,CAAoB,CAAE,CACvD,GAAIA,MAAAA,EAAe,CACjB,IAAI,CAACjB,YAAY,CAACE,UAAU,CAAC,IAAI,CAACa,kCAAkC,CAAC5Z,IACrE,MACF,CAEA,IAAMwP,EAAM,IAAI,CAACoK,kCAAkC,CAAC5Z,GACpD,IAAI,CAAC6Y,YAAY,CAAC1a,OAAO,CAACqR,EAAKsK,EACjC,CAEAC,gBAAgB/Z,CAAuB,CAAiB,CACtD,OAAO,IAAI,CAAC6Y,YAAY,CAACva,OAAO,CAAC,IAAI,CAAC0b,8BAA8B,CAACha,GACvE,CAGAia,gBAAgBja,CAAuB,CAAEuB,CAAsB,CAAE,CAC/D,IAAI,CAAC2Y,mBAAmB,CAACla,EAAUuB,EACrC,CAIA2Y,oBAAoBla,CAAuB,CAAEuB,CAAsB,CAAE,CACnE,IAAMiO,EAAM,IAAI,CAACwK,8BAA8B,CAACha,GAEhD,GAAIuB,MAAAA,EAAiB,CACnB,IAAI,CAACsX,YAAY,CAACE,UAAU,CAACvJ,GAC7B,MACF,CAEA,IAAI,CAACqJ,YAAY,CAAC1a,OAAO,CAACqR,EAAKjO,EACjC,CAEA4Y,qBAAqBna,CAAuB,CAAiC,CAC3E,IAAMwP,EAAM,IAAI,CAAC4K,8BAA8B,CAACpa,GAE1CgZ,EAAM,IAAI,CAACH,YAAY,CAACva,OAAO,CAACkR,UACtC,EAEOpR,KAAKG,KAAK,CAACya,GAFD,IAGnB,CAEAqB,qBAAqBra,CAAuB,CAAEN,CAAkC,CAAQ,CACtF,IAAM8P,EAAM,IAAI,CAAC4K,8BAA8B,CAACpa,GAC1Csa,EAAmB5a,EAAWsH,MAAM,CAAC,CAACxG,EAAK+Z,IACxCA,IAAU7a,EAAW8a,SAAS,CAACtO,GAAKvK,CAAAA,EAAAA,EAAAA,EAAAA,EAAYnB,KAASmB,CAAAA,EAAAA,EAAAA,EAAAA,EAAYuK,KAE9E,IAAI,CAAC2M,YAAY,CAAC1a,OAAO,CAACqR,EAAKpR,KAAKC,SAAS,CAACic,GAChD,CAEAG,uBAAuBza,CAAuB,CAAQ,CACpD,IAAMwP,EAAM,IAAI,CAAC4K,8BAA8B,CAACpa,GAChD,IAAI,CAAC6Y,YAAY,CAACE,UAAU,CAACvJ,EAC/B,CAEAkL,6BAA6BC,CAAmB,CAAQ,CACtD,IAAMC,EAAe,IAAI,CAACb,eAAe,CAAC,MAC1C,IAAI,CAACE,eAAe,CAAC,KAAM,MACvBW,GAAc,IAAI,CAACX,eAAe,CAACU,EAAaC,GAEpD,IAAMC,EAAY,IAAI,CAACV,oBAAoB,CAAC,MAC5C,IAAI,CAACM,sBAAsB,CAAC,MACxBI,GAAW,IAAI,CAACR,oBAAoB,CAACM,EAAaE,EACxD,C,mBA3IQ/B,sCAAsC,CAAG,yC,KACzCU,2BAA2B,CAAG,8B,KAC9BP,oBAAoB,CAAG,uB,KACvBE,oBAAoB,CAAG,I,KACvBC,mBAAmB,CAAG,sB,KAC9BC,mBAAmB,CAAG,I,KACdW,8BAA8B,CAAG,GAChC,CAAC,2BAA2B,EAAEha,EAAS,CAAC,C,KAGzCoa,8BAA8B,CAAG,GAChC,CAAC,2BAA2B,EAAEpa,EAAS,CAAC,C,KAGzC4Z,kCAAkC,CAAG,GACpC,CAAC,uBAAuB,EAAEjG,EAAS,CAAC,C,KAGrChW,sBAAsB,CAAG,qB,KAEzBkb,YAAY,CAAG9Z,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,eAAgB,CACjDC,sBAAuB,GACvBC,IAAK,KACP,G,KAEQsa,cAAc,CAAGxa,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,iBAAkB,CACrDC,sBAAuB,GACvBC,IAAK,KACP,E,CAgHF,G,4TAjDG6b,CAAAA,EAAAA,EAAAA,CAAAA,EAAS,K,CA5FCnC,oBAAAA,SAAAA,CAAAA,kBAAAA,MA+IN,IAAMza,EAAsB,IAAIya,mB,0DCnJvC,IAAMoC,EAA6B,sBAE5B,SAAS/E,IACd,IAAMgF,EAAcjc,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,gBAAgBT,OAAO,CAACyc,UACxD,EAEOC,EAAYha,KAAK,CAAC,KAFA,EAAE,CAKtB,SAASia,EAAsBD,CAAqB,EACzDjc,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,gBAAgBZ,OAAO,CAAC4c,EAA4BC,EAAYzX,IAAI,CAAC,KACnF,C,mCCXO,SAAS2X,EAAyBC,CAAmB,EAC1D,IAAMC,EAAgBD,EAAYE,OAAO,CAAC,KAG1C,GAAID,KAAAA,GAAwBA,IAAAA,EAC1B,MAAO,CAAC,EAAED,EAAY,uBAAuB,CAAC,CAIhD,IAAMG,EAAgBH,EAAYI,KAAK,CAAC,EAAGH,GACrCI,EAAiBL,EAAYI,KAAK,CAACH,EAAgB,UAEzD,IAAII,EAAelY,MAAM,CAChB,CAAC,IAAI,EAAEgY,EAAc,uBAAuB,CAAC,CAG/C,CAAC,IAAI,EAAEA,EAAc,CAAC,EAAEE,EAAe,uBAAuB,CAAC,C,gFCPjE,qCAAMC,2BAWXC,iBAAiB3a,CAAY,CAAU,CACrC,IAAM4a,EAAQ5a,EAAKC,KAAK,CAAC,KACzB,OAAO2a,CAAK,CAACA,EAAMrY,MAAM,CAAG,EAAE,CAGhC,MAAMsY,6BAA6B9X,CAAqB,CAAE+X,CAAmB,CAAiB,CAC5F,GAAM,CAACC,EAASC,EAAM,CAAG,MAAMrR,QAAQC,GAAG,CAAC,CACzC,IAAI,CAACqR,OAAO,CAACC,OAAO,CAAClH,YAAY,CAACjR,EAAM+X,GACxC,IAAI,CAACG,OAAO,CAACC,OAAO,CAACvH,aAAa,CAAC5Q,GACpC,EAED,GAAIgY,EAAQjd,EAAE,CAAE,CACd,IAAMqd,EAAgBJ,EAAQ5J,OAAO,CAACiK,OAAO,CAAC/X,GAC5C,EAAgBE,MAAM,CACf,CAACH,CAAAA,EAAAA,EAAAA,EAAAA,EAAoBC,EAAYN,GAAM,CADf,EAAE,CAGnC,KAAI,CAACsY,iBAAiB,CAAG,IAAIlV,IAAIgV,EAAcnV,GAAG,CAACsV,GAAW,CAACA,EAAQ/b,IAAI,CAAE+b,EAAQ,EACvF,CAEA,GAAI,IAAI,CAACC,mBAAmB,CAAClH,GAAG,CAACtR,EAAKxD,IAAI,EAAG,CAC3C,IAAI,CAACic,eAAe,CAAG,IAAI,CAACD,mBAAmB,CAACtL,GAAG,CAAClN,EAAKxD,IAAI,EAC7D,MACF,CAEA,GAAIyb,EAAMld,EAAE,CAAE,CACZ,IAAM2d,EAAc,IAAItV,IACxB,IAAI,CAACoV,mBAAmB,CAAClV,GAAG,CAACtD,EAAKxD,IAAI,CAAEkc,GAKxC,IAAIjC,EAAQ,EAENkC,EAAe,KACnB,IAAMpb,EAAM8M,KAAKC,GAAG,CAACmM,EAJL,IAIwBwB,EAAM7J,OAAO,CAAC5O,MAAM,EAC5D,KAAOiX,EAAQlZ,EAAKkZ,IAAS,CAC3B,IAAMmC,EAAQX,EAAM7J,OAAO,CAACqI,EAAM,CAClC,GAAImC,EAAO,CACT,IAAMlc,EAAMmD,CAAAA,EAAAA,EAAAA,EAAAA,EAAyB+Y,EAAO5Y,GAC5C0Y,EAAYpV,GAAG,CAAC5G,EAAIO,IAAI,CAAEP,EAC5B,CACF,CAEA,GAAI+Z,EAAQwB,EAAM7J,OAAO,CAAC5O,MAAM,CAC9BqZ,WAAWF,EAAc,OACpB,CACL,IAAI,CAACF,eAAe,CAAGC,EACvB,MACF,CACF,EAEAC,GACF,CACF,CAEAG,cAAcC,CAAgB,CAAEC,CAAuB,CAAoC,CACzF,OAAOA,EAAMC,iBAAiB,CAACvW,IAAI,CAAC3K,GAASghB,IAAalb,CAAAA,EAAAA,EAAAA,EAAAA,EAAY9F,GACxE,CAQA,MAAMmhB,gBAAgBC,CAAkC,CAAEH,CAAuB,CAAE,CACjF,IAAMD,EAAWlb,CAAAA,EAAAA,EAAAA,EAAAA,EAAYsb,GAG7B,GAF0B,IAAI,CAACL,aAAa,CAACC,EAAUC,GAEhC,OAEvB,IAAII,EAAiBD,EACrB,GAAI9W,CAAAA,EAAAA,EAAAA,EAAAA,EAAgB8W,GAAe,CACjC,IAAMve,EAAW,MAAM,IAAI,CAACsd,OAAO,CAACC,OAAO,CAACxG,6BAA6B,CAACwH,GAC1E,GAAIve,EAASG,EAAE,EAAIH,EAASwT,OAAO,CAACiL,QAAQ,CAAE,CAC5C,GAAM,CAACta,aAAAA,CAAY,CAAEua,WAAAA,CAAU,CAAC,CAAG1e,EAASwT,OAAO,CAACiL,QAAQ,CAC5DD,EAAiB,CAAC,GAAGD,CAAY,CAAEpa,aAAAA,EAAcua,WAAAA,CAAU,CAC7D,CACF,CAEA,IAAI,CAACpB,OAAO,CAACqB,YAAY,CAACH,EAAgB,eAC5C,CArFAxf,YAAYse,CAA2B,CAAE,C,KALzCO,eAAe,CAAG,IAAIrV,I,KACtBkV,iBAAiB,CAAG,IAAIlV,I,KACxBoW,oBAAoB,CAAG,IAAIpW,I,KAC3BoV,mBAAmB,CAAG,IAAIpV,IAGxB,IAAI,CAAC8U,OAAO,CAAGA,CACjB,CAoFF,E,cClGA,IAAMuB,EAAiCC,CAAAA,EAAAA,EAAAA,aAAAA,EAAiD,MAEjF,SAASC,EAAgC,CAACC,SAAAA,CAAQ,CAAoB,EAC3E,IAAM1B,EAAU2B,CAAAA,EAAAA,EAAAA,CAAAA,IACVC,EAAeC,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,IAAM,IAAIpC,2BAA2BO,GAAU,CAACA,EAAQ,EACrF,MACE,UAACuB,EAA+BO,QAAQ,EAACjiB,MAAO+hB,E,SAAeF,C,EAEnE,CAEO,SAASK,IACd,MAAOC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWT,EACpB,CAEA,GAAG,CAAEA,EAA+BU,WAAW,EAA1CV,CAAAA,EAA+BU,WAAW,CAAK,gCAA+B,CAAE,CAAE,KAAM,CAAC,CAC9F,GAAG,CAAER,EAAgCQ,WAAW,EAA3CR,CAAAA,EAAgCQ,WAAW,CAAK,iCAAgC,CAAE,CAAE,KAAM,CAAC,C,iLCwHzF,IAAMC,EAAqB,CAACpB,EAAyB7Y,KAC1D,IAAMka,EAAoBC,EAAAA,EAAaA,CAAEnb,QAAQ,EAAEob,UAAUrd,MAAM,KAAKsC,QAAU,EAC5Egb,EAAsB,IACtB1F,GAAkB1a,CAAAA,EAAAA,CAAmBA,CAAC0a,gBAAgB,CAAGA,CAAe,EACrE,CACL,GAAGkE,CAAK,CACRlE,iBAAAA,EACA2F,YAAa,SACbxY,gBAAiB6S,CAAAA,GAA2BkE,EAAM/W,eAAe,GAI/DsU,EAAuB,IAC3Bnc,EAAAA,CAAmBA,CAACmc,oBAAoB,CAACyC,EAAMlE,gBAAgB,CAAEmE,GAC1D,CAAC,GAAGD,CAAK,CAAEC,kBAAAA,CAAiB,GAGrC,OAAQ9Y,EAAOxD,IAAI,EACjB,IAAK,uBAEH,MADA+d,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,gCACH,CACL,GAAG1B,CAAK,CACR2B,oBAAqB,CAAC,GAAG3B,EAAM2B,mBAAmB,CAAE3B,MAAO,OAAO,CACpE,CAEF,KAAK,wBAEH,MADA0B,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,iCACH,CACL,GAAG1B,CAAK,CACR2B,oBAAqB,CAAC,GAAG3B,EAAM2B,mBAAmB,CAAE3B,MAAO,QAAQ,CACrE,CAEF,KAAK,yBAEH,MADA0B,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,kCACH,CACL,GAAG1B,CAAK,CACR2B,oBAAqB,CAAC,GAAG3B,EAAM2B,mBAAmB,CAAE3B,MAAO,SAAS,CACtE,CAEF,KAAK,0BAEH,MADA0B,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,kCAAmC,CAAC5O,KAAM3L,EAAO2L,IAAI,GACxD,CACL,GAAGkN,CAAK,CACR4B,yBAA0Bza,EAAO2L,IAAI,CAEzC,KAAK,oBAEH,MADA4O,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,4BAA6B,CAACG,OAAQ1a,EAAO0a,MAAM,GACtD,CACL,GAAG7B,CAAK,CACR8B,WAAY,GACZC,aAAc5a,EAAOpE,EAAE,CAE3B,KAAK,qBAEH,MADA2e,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,8BACH,CACL,GAAG1B,CAAK,CACR8B,WAAY,EACd,CACF,KAAK,sBAEH,MADAJ,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,+BACH,CACL,GAAG1B,CAAK,CACRgC,gBAAiB,EACnB,CACF,KAAK,wBAEH,MADAN,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,iCACH,CACL,GAAG1B,CAAK,CACRgC,gBAAiB,EACnB,CACF,KAAK,iBAKH,MAJAN,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,yBAA0B,CAClC,GAAGO,EAAgB9a,EAAOtE,MAAM,CAAC,CACjCqf,MAAOlC,EAAM3K,OAAO,CAAC8M,IAAI,CAAG,CAC9B,GACO,CACL,GAAGX,EAAoBra,EAAOtE,MAAM,CAACE,EAAE,CAAC,CACxCsS,QAAS,IAAIjL,IAAI4V,EAAM3K,OAAO,CAAC/K,GAAG,CAACnD,EAAOtE,MAAM,CAACE,EAAE,CAAEoE,EAAOtE,MAAM,GAClEkH,SAAU,EAAE,CACZqY,gBAAiB,CAAC,GAAGpC,EAAMoC,eAAe,CAAEpC,MAAO,QAAQ,EAC3DC,kBAAmB7e,EAAAA,CAAmBA,CAACic,oBAAoB,CAAClW,EAAOtE,MAAM,CAACE,EAAE,GAAK,EAAE,CACnFsf,aAAchB,EAAoBrB,EAAMqC,YAAY,CAAGxZ,KAAAA,EACvDyZ,iBAAkBzZ,KAAAA,EAClB0Z,uBAAwB,EAAE,CAE9B,KAAK,wBACH,MAAO,CACL,GAAGvC,CAAK,CACR/F,YAAa9S,EAAO8S,WAAW,CAEnC,KAAK,oBACH,MAAO,CACL,GAAG+F,CAAK,CACR/F,YAAa,IACf,CACF,KAAK,eAEH,MADAyH,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,wBACH,CACL,GAAG1B,CAAK,CACRjW,SAAU,EAAE,CACZkW,kBAAmB,EAAE,CAEzB,KAAK,mBAEH,GADAyB,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,4BACN1G,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,2DAEnB,MAAO,CACL,GAAGgF,CAAK,CACRC,kBAAmBD,EAAMC,iBAAiB,CAAC/V,MAAM,CAACpE,GAAaA,WAAAA,EAAUnC,IAAI,CAC/E,EAEF,MAAO,CACL,GAAGqc,CAAK,CACRC,kBAAmB,EAAE,CAEzB,KAAK,2BAEH,MADAyB,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,4BACH,CACL,GAAG1B,CAAK,CACRC,kBAAmB,EAAE,CAEzB,KAAK,mBAEH,GADAyB,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,2BAA4B,CAACQ,MAAO/a,EAAO4C,QAAQ,EAAEvD,OAAQgc,QAASrb,EAAO6Y,KAAK,IACxF7Y,EAAO4C,QAAQ,CAoBjB,MAAO,CACL,GAAGiW,CAAK,CACRoC,gBAAiB,CAAC,GAAGpC,EAAMoC,eAAe,CAAEpC,MAAO7Y,EAAO6Y,KAAK,CACjE,CAvBmB,EACnB,IAAIsC,EAAmBtC,EAAMsC,gBAAgB,CACzCC,EAAyBvC,EAAMuC,sBAAsB,CAUzD,MATqB,WAAjBpb,EAAO6Y,KAAK,EAAiB7Y,EAAO4C,QAAQ,CAACvD,MAAM,CAAG,IACxD8b,EAAmBG,EAAoBtb,EAAO4C,QAAQ,CAAC5C,EAAO4C,QAAQ,CAACvD,MAAM,CAAG,EAAE,CAAGwZ,GACrFuC,EAAyBpb,EAAO4C,QAAQ,CACrCE,GAAG,CACFxF,GAAWA,EAAQnB,mBAAmB,EAAE2G,IAAIyY,GAAMphB,KAAKC,SAAS,CAACohB,OAAOlY,MAAM,CAACiY,EAAGE,YAAY,EAAEC,IAAI,MAErGC,IAAI,GACJ5Y,MAAM,CAAC6Y,UAEL,CACL,GAAG/C,CAAK,CACRsC,iBAAAA,EACAC,uBAAAA,EACAxY,SAAU5C,EAAO4C,QAAQ,CACzBqY,gBAAiB,CAAC,GAAGpC,EAAMoC,eAAe,CAAEpC,MAAO7Y,EAAO6Y,KAAK,CACjE,CACF,CAMF,IAAK,qBAEH,MADA0B,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,6BAA8B,CAACsB,mBAAoB7b,EAAOqb,OAAO,GACpE,CACL,GAAGxC,CAAK,CACRgD,mBAAoB7b,EAAOqb,OAAO,CAEtC,KAAK,gBAEH,MADAd,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,wBAAyB,CAACxe,SAAUiE,EAAOtE,MAAM,EAAEE,EAAE,GACxD,CACL,GAAGye,EAAoBra,EAAOtE,MAAM,EAAEE,IAAM,KAAK,CAErD,KAAK,qBAGH,MAFA2e,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,8BAEH,CAD6E,GAAnEva,EAAOvE,UAAU,CAAG2a,EAAqBpW,EAAOvE,UAAU,EAAIod,CAE7E,CACA8B,WAAY,GACZE,gBAAiB,GACjBD,aAAc5a,EAAOpE,EAAE,CAG3B,KAAK,kBAEH,MADA2e,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,2BACH,CACL,GAAG1B,CAAK,CACRiD,eAAgB,CAAC,GAAGjD,EAAMiD,cAAc,CAAEjD,MAAO,SAAS,CAC5D,CACF,KAAK,6CAEH,MADA0B,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,sDACH,CACL,GAAG1B,CAAK,CACRkD,qCAAsC,EACxC,CACF,KAAK,kDAEH,MADAxB,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,2DACH,CACL,GAAG1B,CAAK,CACRmD,yCAA0C,EAC5C,CACF,KAAK,0BAEH,MADAzB,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,mCACH,CACL,GAAG1B,CAAK,CACRoD,sBAAuB,CAAC,GAAGpD,EAAMoD,qBAAqB,CAAEpD,MAAO,SAAS,CAC1E,CACF,KAAK,yBAEH,MADA0B,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,iCAAkC,CAACQ,MAAO/a,EAAOmP,cAAc,CAAC9P,MAAM,GACzE,CACL,GAAGwZ,CAAK,CACR1J,eAAgBnP,EAAOmP,cAAc,CACrC8M,sBAAuB,CAAC,GAAGpD,EAAMoD,qBAAqB,CAAEpD,MAAO,SAAUrd,MAAO,IAAI,CACtF,CACF,KAAK,gCAEH,MADA+e,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,wCAAyC,CAAC/e,MAAOwE,EAAO1C,OAAO,GAClE,CACL,GAAGub,CAAK,CACRoD,sBAAuB,CAAC,GAAGpD,EAAMoD,qBAAqB,CAAEpD,MAAO,QAASrd,MAAOwE,EAAO1C,OAAO,CAC/F,CACF,KAAK,iBAEH,MADAid,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,yBAA0B,CAACQ,MAAO/a,EAAOkO,OAAO,CAAC7O,MAAM,GAC1D,CACL,GAAGwZ,CAAK,CACRiD,eAAgB,CAAC,GAAGjD,EAAMiD,cAAc,CAAEjD,MAAO,QAAQ,EACzD3K,QAAS,IAAIjL,IAAIjD,EAAOkO,OAAO,CAACpL,GAAG,CAACoZ,GAAK,CAACA,EAAEtgB,EAAE,CAAEsgB,EAAE,EACpD,CACF,KAAK,wBAEH,MADA3B,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,gCAAiC,CAAC/e,MAAOwE,EAAO1C,OAAO,GAC1D,CACL,GAAGub,CAAK,CACRiD,eAAgB,CAACtgB,MAAOwE,EAAO1C,OAAO,CAAEub,MAAO,OAAO,CACxD,CACF,KAAK,+BAMH,MALA0B,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,yBAA0B,CAClC,GAAGO,EAAgB9a,EAAOtE,MAAM,CAAC,CACjCqf,MAAOlC,EAAM3K,OAAO,CAAC8M,IAAI,CAAG,CAC9B,GACAnC,EAAM3K,OAAO,CAACZ,MAAM,CAACtN,EAAOtE,MAAM,CAACE,EAAE,EAC9B,CACL,GAAGye,EAAoB,KAAK,CAC5BnM,QAAS,IAAIjL,IAAI4V,EAAM3K,OAAO,EAC9B4N,eAAgB,CAAC,GAAGjD,EAAMiD,cAAc,CAAEjD,MAAO,QAAQ,EACzDjW,SAAU,EAAE,CACZqY,gBAAiB,CAACpC,MAAO,SAAUrd,MAAO,IAAI,EAC9Csd,kBAAmB,EAAE,CACrBwB,YAAa,MACf,CACF,KAAK,gBAMH,MALAC,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,yBAA0B,CAClC,GAAGO,EAAgB9a,EAAOtE,MAAM,CAAC,CACjCqf,MAAOlC,EAAM3K,OAAO,CAAC8M,IAAI,CAAG,CAC9B,GACAnC,EAAM3K,OAAO,CAACZ,MAAM,CAACtN,EAAOtE,MAAM,CAACE,EAAE,EAC9B,CACL,GAAGye,EAAoB,KAAK,CAC5BnM,QAAS,IAAIjL,IAAI4V,EAAM3K,OAAO,EAC9B4N,eAAgB,CAAC,GAAGjD,EAAMiD,cAAc,CAAEjD,MAAO,QAAQ,EACzDjW,SAAU,EAAE,CACZqY,gBAAiB,CAACpC,MAAO,SAAUrd,MAAO,IAAI,EAC9Csd,kBAAmB,EAAE,CAEzB,KAAK,sBAEH,MADAyB,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,8BAA+B,CAAC,GAAGO,EAAgB9a,EAAOtE,MAAM,CAAC,CAAEF,MAAOwE,EAAOxE,KAAK,GACzF,CACL,GAAGqd,CAAK,CACRiD,eAAgB,CAAC,GAAGjD,EAAMiD,cAAc,CAAEtgB,MAAOwE,EAAOxE,KAAK,EAC7D0S,QAAS,IAAIjL,IAAI4V,EAAM3K,OAAO,CAAC/K,GAAG,CAACnD,EAAOtE,MAAM,CAACE,EAAE,CAAEoE,EAAOtE,MAAM,EACpE,CACF,KAAK,gBAKH,MAJA6e,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,wBAAyB,CACjC,GAAG4B,EAAiBnc,EAAO1C,OAAO,CAAC,CACnCyd,MAAOlC,EAAMjW,QAAQ,CAACvD,MAAM,CAAG,CACjC,GACO,CACL,GAAGwZ,CAAK,CACRjW,SAAU,IAAIiW,EAAMjW,QAAQ,CAAE5C,EAAO1C,OAAO,CAAC,CAEjD,KAAK,iBAEH,MADAid,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,yBAA0BO,EAAgB9a,EAAOtE,MAAM,GAC1D,CACL,GAAGmd,CAAK,CACR,GAAGwB,EAAoBra,EAAOtE,MAAM,CAACE,EAAE,CAAC,CACxCsS,QAAS,IAAIjL,IAAI4V,EAAM3K,OAAO,CAAC/K,GAAG,CAACnD,EAAOtE,MAAM,CAACE,EAAE,CAAEoE,EAAOtE,MAAM,EACpE,CACF,KAAK,oBAEH,MADA6e,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,4BAA6B,CAACQ,MAAO/a,EAAOvE,UAAU,CAAC4D,MAAM,GAChE,CACL,GAAGwZ,CAAK,CACRC,kBAAmB9Y,EAAOvE,UAAU,CAExC,KAAK,gBAMH,MALA8e,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,wBAAyB,CACjC,GAAG6B,EAAmBpc,EAAOrB,SAAS,CAAC,CACvC+b,OAAQ1a,EAAO0a,MAAM,CACrBK,MAAOlC,EAAMC,iBAAiB,CAACzZ,MAAM,CAAG,CAC1C,GACO,CACL,GAAGwZ,CAAK,CACR,GAAGzC,EAAqB,IACnByC,EAAMC,iBAAiB,CAAC/V,MAAM,CAACpE,GAAa,CAAC4C,CAAAA,EAAAA,EAAAA,EAAAA,EAAmB5C,EAAWqB,EAAOrB,SAAS,GAC9FqB,EAAOrB,SAAS,CACjB,CAAC,CAEN,KAAK,mBAAoB,CACvB,IAAMA,EAAYka,EAAMC,iBAAiB,CAAC9Y,EAAOqc,cAAc,CAAC,CAOhE,OANI1d,GACF4b,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,2BAA4B,CACpC,GAAG6B,EAAmBzd,EAAU,CAChCoc,MAAOlC,EAAMC,iBAAiB,CAACzZ,MAAM,CAAG,CAC1C,GAEK,CACL,GAAG+W,EAAqByC,EAAMC,iBAAiB,CAAC/V,MAAM,CAAC,CAACuZ,EAAG1a,IAAMA,IAAM5B,EAAOqc,cAAc,EAAE,CAElG,CACA,IAAK,oBACH,MAAO,CACL,GAAGxD,CAAK,CACR/W,gBAAiB9B,EAAOuc,IAAI,CAEhC,KAAK,wBAMH,OALIvc,EAAO6V,KAAK,EACd0E,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,gCAAiC,CACzC/d,KAAM,EAAQqZ,KAAK,CAAYzU,CAAAA,EAAAA,EAAAA,CAAAA,EAASpB,EAAO6V,KAAK,EAAI,SAAW,aAA7C,MACxB,GAEK,CACL,GAAGgD,CAAK,CACRqC,aAAclb,EAAO6V,KAAK,CAC1B2G,aAAc,CAAC,GAAG3D,EAAM2D,YAAY,CAAE3D,MAAO7Y,EAAO6Y,KAAK,CAC3D,CACF,KAAK,4BAKH,MAJA0B,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,oCAAqC,CAC7C,GAAG4B,EAAiBnc,EAAO1C,OAAO,CAAC,CACnCyd,MAAOlC,EAAMjW,QAAQ,CAACvD,MAAM,GAEvB,CACL,GAAGwZ,CAAK,CACRgD,mBAAoB,GACpBY,SAAUzc,EAAOyc,QAAQ,CACzBC,iBAAkB1c,EAAO1C,OAAO,CAChCsF,SAAU,IAAIiW,EAAMjW,QAAQ,CAAC,CAEjC,KAAK,gCACH,MAAO,CACL,GAAGiW,CAAK,CACR6D,iBAAkB7D,EAAM6D,gBAAgB,CACpC,CAAC,GAAG7D,EAAM6D,gBAAgB,CAAEnhB,QAASsd,EAAM6D,gBAAgB,CAACnhB,OAAO,CAAGyE,EAAO3G,KAAK,EAClF,IACN,CACF,KAAK,oCACH,GAAIwf,EAAM6D,gBAAgB,CAAE,CAC1B,IAAMC,EAAiB9D,EAAM6D,gBAAgB,CAACxgB,eAAe,EAAI,EAAE,CAC7D0gB,EAAkBD,EAAepG,SAAS,CAACsG,GAAMA,YAAAA,EAAG1O,MAAM,EAC1D2O,EAAwBF,GAAmB,EAAID,CAAc,CAACC,EAAgB,CAAG,KAGnFG,EAAaJ,EAEjB,OAAQ3c,EAAOmO,MAAM,EAEnB,IAAK,UACH4O,EAAa,IACRJ,EACH,CACEK,KAAMhd,EAAO3D,IAAI,CACjB8R,OAAQnO,EAAOmO,MAAM,CACrB8O,UAAWjd,EAAOid,SAAS,CAC3BC,aAAcld,EAAOkd,YAAY,CACjCzhB,WAAY,EAAE,EAEjB,CACD,KACF,KAAK,YAECqhB,GACFC,CAAAA,CAAU,CAACH,EAAgB,CAAG,CAC5B,GAAGE,CAAqB,CACxB3O,OAAQnO,EAAOmO,MAAM,CACrB1S,WAAYuE,EAAOvE,UAAU,CAC/B,EAEF,KACF,KAAK,QAECqhB,GACFC,CAAAA,CAAU,CAACH,EAAgB,CAAG,CAC5B,GAAGE,CAAqB,CACxB3O,OAAQnO,EAAOmO,MAAM,CACrB+O,aAAcld,EAAOkd,YAAY,CACnC,CAGN,CAEA,MAAO,CACL,GAAGrE,CAAK,CACR6D,iBAAkB,CAChB,GAAG7D,EAAM6D,gBAAgB,CACzBxgB,gBAAiB6gB,CACnB,CACF,CACF,CACA,OAAOlE,CACT,KAAK,8BAA+B,CAClC,IACIsE,EADAhC,EAAmBtC,EAAMsC,gBAAgB,CAiB7C,OAfItC,EAAM6D,gBAAgB,GASxBvB,EAAmBG,EARnB6B,EAAa,CACX,GAAGtE,EAAM6D,gBAAgB,CACzB9gB,GAAIoE,EAAOod,eAAe,CAACxhB,EAAE,CAC7BH,WAAYuE,EAAOod,eAAe,CAAC3hB,UAAU,CAC7CO,UAAWgE,EAAOod,eAAe,CAACphB,SAAS,CAC3C8S,OAAQ9O,EAAOod,eAAe,CAACtO,MAAM,CACrCuO,mBAAoBrd,EAAOod,eAAe,CAACC,kBAAkB,EAEZxE,GACnD0B,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,sCAAuC,CAC/C,GAAG4B,EAAiBgB,EAAW,CAC/BpC,MAAOlC,EAAMjW,QAAQ,CAACvD,MAAM,CAAG,CACjC,IAEK,CACL,GAAGwZ,CAAK,CACRsC,iBAAAA,EACAU,mBAAoB,GACpBY,SAAU,KACVC,iBAAkB,KAClB9Z,SAAUua,EAAa,IAAItE,EAAMjW,QAAQ,CAAEua,EAAW,CAAGtE,EAAMjW,QAAQ,CAE3E,CACA,IAAK,2BAEH,MADA2X,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,oCACH,CACL,GAAG1B,CAAK,CACRgD,mBAAoB,GACpBY,SAAU,KACVC,iBAAkB,IACpB,CACF,KAAK,4BAA6B,CAChC,IAAIS,EAWJ,OAVItE,EAAM6D,gBAAgB,GACxBS,EAAa,CACX,GAAGtE,EAAM6D,gBAAgB,CACzBY,YAAa,EACf,EACA/C,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,oCAAqC,CAC7C,GAAG4B,EAAiBgB,EAAW,CAC/BpC,MAAOlC,EAAMjW,QAAQ,CAACvD,MAAM,CAAG,CACjC,IAEK,CACL,GAAGwZ,CAAK,CACRgD,mBAAoB,GACpBY,SAAU,KACVC,iBAAkB,KAClB9Z,SAAUua,EAAa,IAAItE,EAAMjW,QAAQ,CAAEua,EAAW,CAAGtE,EAAMjW,QAAQ,CAE3E,CACA,IAAK,mBAIH,OAHI5C,EAAOrB,SAAS,EAClB4b,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,2BAA4B6B,EAAmBpc,EAAOrB,SAAS,GAEpE,CACL,GAAGka,CAAK,CACR0E,kBAAmBvd,EAAOrB,SAAS,CAEvC,KAAK,mBACH,MAAO,CACL,GAAGka,CAAK,CACRyB,YAAa,MACf,CACF,KAAK,sBACH,MAAO,CACL,GAAGzB,CAAK,CACRyB,YAAa,QACf,CACF,KAAK,2BACH,GAAI,CAAC3Y,CAAAA,EAAAA,EAAAA,EAAAA,EAAwB3B,EAAOkP,OAAO,CAAE2J,EAAM3J,OAAO,EACxD,MAAO,CACL,GAAG2J,CAAK,CACR3J,QAASlP,EAAOkP,OAAO,EAG3B,OAAO2J,CACT,KAAK,uBACH,MAAO,CACL,GAAGA,CAAK,CACR2E,qBAAsBxd,EAAOyd,MAAM,CAEvC,KAAK,aACH,MAAO,CACL,GAAG5E,CAAK,CACR6E,OAAQ1d,EAAO0d,MAAM,CAEzB,KAAK,iCAAkC,CACrC,IAAMjC,EAAe,CACnB7e,MAAOoD,EAAOpD,KAAK,CACnBU,QAAS0C,EAAO1C,OAAO,CACvBme,aAAczb,EAAOyb,YAAY,EAEnC,MAAO,CACL,GAAG5C,CAAK,CACR6D,iBAAkB7D,EAAM6D,gBAAgB,CACpC,CACE,GAAG7D,EAAM6D,gBAAgB,CACzB/gB,cAAekd,EAAM6D,gBAAgB,CAAC/gB,aAAa,CAC/C,IAAIkd,EAAM6D,gBAAgB,CAAC/gB,aAAa,CAAE8f,EAAa,CACvD,CAACA,EAAa,EAEpB,IACN,CACF,CACA,IAAK,cAAe,CAClB,IAAMiB,EAAmB7D,EAAM6D,gBAAgB,CACzCiB,EAAa3d,EAAOxE,KAAK,CAE/B,MAAO,CACL,GAAGqd,CAAK,CACR6D,iBAAkBA,GAAoB,CACpC,GAAGA,CAAgB,CACnBkB,YAAa,IACPlB,EAAiBkB,WAAW,EAAI,EAAE,CACtC,CACEphB,KAAMmhB,EAAWnhB,IAAI,CACrB6K,KAAMsW,EAAWtW,IAAI,CACrB/J,QAASqgB,EAAWrgB,OAAO,CAC3BugB,WAAYF,EAAWE,UAAU,EAEpC,CAEL,CACF,CACF,CACF,EAKA,SAAS1B,EAAiB7e,CAA2B,MA2DvBpB,EA1D5B,GAAI,CAACoB,EACH,MAAOwgB,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAAC,GAEhC,IAAMC,EAA+B,CACnCniB,GAAI0B,EAAQ1B,EAAE,CACdN,KAAMgC,EAAQhC,IAAI,CAClBU,UAAWsB,EAAQtB,SAAS,CAC5BD,SAAUuB,EAAQvB,QAAQ,CAC1BiiB,eAAgB1gB,EAAQ7B,UAAU,EAAE4D,QAAU,CAChD,EAgBA,OAfI/B,EAAQwR,MAAM,EAChBiP,CAAAA,EAAIjP,MAAM,CAAGxR,EAAQwR,MAAM,EAEzBxR,EAAQ9B,KAAK,EACfuiB,CAAAA,EAAIviB,KAAK,CAAG8B,EAAQ9B,KAAK,EAEvB8B,EAAQ+f,kBAAkB,EAC5BU,CAAAA,EAAIV,kBAAkB,CAAGY,SAyDIC,CAA2C,EAC1E,GAAKA,EAGL,MAAO,CACLC,kBAAmBD,EAAYC,iBAAiB,EAAErb,IAAIsb,GAAS,EAC7DC,QAAS,CACP7hB,KAAM4hB,GAAMC,SAAS7hB,IACvB,CACF,GACF,CACF,EApEqDc,EAAQ+f,kBAAkB,GAEzE/f,EAAQpB,eAAe,EACzB6hB,CAAAA,EAAI7hB,eAAe,CAuCrB,CAD4BA,EAtCiBoB,EAAQpB,eAAe,EA0C7DA,EAAgB4G,GAAG,CAACwb,GAAc,EACvCtB,KAAMsB,GAAWtB,KACjB7O,OAAQmQ,GAAWnQ,OACnBoQ,cAAeD,GAAWrB,WAAW5d,QAAU,EAC/C6d,aAAcoB,GAAWpB,aACzBzhB,WAAY6iB,GAAW7iB,YAAY4D,QAAU,CAC/C,IARS,EAAE,EAtCP/B,EAAQggB,WAAW,EACrBS,CAAAA,EAAIT,WAAW,CAAG,EAAG,EAEhBQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAsBC,EAC/B,CAKA,SAASjD,EAAgBpf,CAAyB,SAChD,EAGOoiB,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAC3BliB,GAAIF,EAAOE,EAAE,CACbI,UAAWN,EAAOM,SAAS,CAC3ByH,UAAW/H,EAAO+H,SAAS,CAC3B+a,sBAAuB9iB,EAAOod,iBAAiB,EAAEzZ,QAAU,CAC7D,GAPSye,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAAC,EAQlC,CAKA,SAAS1B,EAAmBzd,CAA+B,SACzD,EAGOmf,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAC3BthB,KAAMmC,EAAUnC,IAAI,GAHbshB,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CAAC,EAKlC,CAkCA,SAASxC,EAAoBhe,CAA2B,CAAEub,CAAuB,EAC/E,GAAI,CAACnF,EAAAA,CAAmBA,CAACY,eAAe,CACtC,OAEF,IAAM5R,EAASP,CAAAA,EAAAA,EAAAA,EAAAA,EAAW7E,EAASub,EAAMzW,gBAAgB,EACzD,GAAIM,UAAAA,EAAOlG,IAAI,CACb,OAAOkG,EAAOrG,IAAI,C,yBCpuBf,IAAMoiB,EAAqBlF,CAAAA,EAAAA,EAAAA,aAAAA,EAAuC,MAC5DmF,EAA4BnF,CAAAA,EAAAA,EAAAA,aAAAA,EAAsD,MACzFoF,EAA6BpF,CAAAA,EAAAA,EAAAA,aAAAA,EAAwD,MA0BpF,SAASqF,EAAoB,CAClCnF,SAAAA,CAAQ,CACR5D,MAAAA,CAAK,CACLrT,MAAAA,CAAK,CACLgQ,OAAAA,CAAM,CACNtO,WAAAA,CAAU,CACVwL,SAAAA,CAAQ,CACRmP,KAAAA,CAAI,CACJtB,kBAAAA,CAAiB,CACjBxb,KAAAA,CAAI,CACJ+c,iBAAAA,CAAgB,CAChBC,qBAAAA,CAAoB,CACpBhD,qCAAAA,CAAoC,CACpCC,yCAAAA,CAAwC,CACxCjN,mBAAAA,CAAkB,CAClBiQ,mBAAAA,CAAkB,CAClBC,uBAAAA,CAAsB,CACtB5N,WAAAA,CAAU,CACV6N,sBAAAA,CAAqB,CACrBxB,OAAAA,CAAM,CACN9a,SAAAA,CAAQ,CACRuc,iBAAAA,CAAgB,CAChBC,UAAAA,CAAS,CACmC,EAC5C,IAAMC,EAAeF,GAAoB,CACvCrD,eAAgB,CAACjD,MAAO,UAAWrd,MAAO,IAAI,EAC9Cyf,gBAAiB,CAACpC,MAAO,UAAWrd,MAAO,IAAI,EAC/Cgf,oBAAqB,CAAC3B,MAAO,UAAWrd,MAAO,IAAI,EACnDsG,gBAAiB,CAAC,CAAC4N,GAAY3N,cAAAA,CAAmB,GAAM,CAAC8T,EACzD2G,aAAc,CAAC3D,MAAO,UAAWrd,MAAO,IAAI,EAC5C0S,QAAS,IAAIjL,IACbgZ,sBAAuB,CAACpD,MAAO,UAAWrd,MAAO,IAAI,EACrD2T,eAAgB,EAAE,CAClBvM,SAAUA,GAAY,EAAE,CACxB6Z,SAAU,KACVC,iBAAkB,KAClB/H,iBAAkBjF,EAClBwL,aAAcrF,EACd8E,WAAY,GACZE,gBAAiB9Y,cAAAA,EACjB8Z,mBAAoB,GACpBzZ,iBAAkBI,EAClB8c,OAAQ9M,EACRsG,kBAAmB+F,EACnBU,mBAAoBrb,EACpBuW,yBAA0B,GAC1BH,YAAa,SACbiD,kBAAmBA,GAAqB,KACxCxb,KAAAA,EACAyd,kBAAmBle,CAAAA,EAAAA,EAAAA,EAAAA,EAAauU,GAASA,EAAQnU,KAAAA,EACjDod,iBAAAA,EACA5P,QAASxN,KAAAA,EACTqd,qBAAsBA,GAAwB,GAC9ChD,qCAAAA,EACAC,yCAAAA,EACAjN,mBAAAA,EACAiQ,mBAAAA,EACAC,uBAAAA,EACAzB,qBAAsB9b,KAAAA,EACtB2P,WAAAA,EACA6N,sBAAAA,EACAxB,OAAAA,EACA+B,qBAAsB,GACtBL,UAAAA,CACF,EAEM,CAACvG,EAAO6G,EAAS,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,EAAW1F,EAAoBoF,GAEnDO,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,IAEpB,MACE,UAACpB,EAAmB5E,QAAQ,EAACjiB,MAAOihB,E,SAClC,UAAC8F,EAA2B9E,QAAQ,EAACjiB,MAAO8nB,E,SAC1C,UAACI,EAAAA,CAA0BA,CAAAA,CACzBtN,OAAQA,EACRqG,MAAOA,EACP6G,SAAUA,EACVZ,iBAAkBA,E,SAElB,UAACtF,EAAAA,CAA+BA,CAAAA,C,SAC9B,UAACuG,EAAAA,wBAAwBA,CAAAA,CAACH,YAAaA,E,SAAcnG,C,UAMjE,CAEO,SAASuG,IACd,MAAOjG,CAAAA,EAAAA,EAAAA,UAAAA,EAAW0E,EACpB,CAMO,SAAS1S,IACd,MAAOgO,CAAAA,EAAAA,EAAAA,UAAAA,EAAW2E,EACpB,CAEA,GAAG,CAAED,EAAmBzE,WAAW,EAA9ByE,CAAAA,EAAmBzE,WAAW,CAAK,oBAAmB,CAAE,CAAE,KAAM,CAAC,CACtE,GAAG,CAAE0E,EAA0B1E,WAAW,EAArC0E,CAAAA,EAA0B1E,WAAW,CAAK,2BAA0B,CAAE,CAAE,KAAM,CAAC,CACpF,GAAG,CAAE2E,EAA2B3E,WAAW,EAAtC2E,CAAAA,EAA2B3E,WAAW,CAAK,4BAA2B,CAAE,CAAE,KAAM,CAAC,CACtF,GAAG,CAAE4E,EAAoB5E,WAAW,EAA/B4E,CAAAA,EAAoB5E,WAAW,CAAK,qBAAoB,CAAE,CAAE,KAAM,CAAC,C,sICrJxE,IAAMiG,EAAiB,YAEhB,gCAAMC,8BAA8BC,MAGzC1mB,YAAY+B,CAAoC,CAAE,CAChD,KAAK,CAACA,EAAM4kB,WAAW,EACvB,IAAI,CAAC5kB,KAAK,CAAGA,CACf,CACF,EAIO,qCAAM6kB,2BAOX,OAAOC,QAAkD,CACvD,IAAMC,EAAc,IAAIC,YAAY,SAEhCC,EAAiB,GAErB,OAAS,CACP,IAAI7oB,EACA8oB,EACJ,GAAI,CACA,EAAC9oB,MAAAA,CAAK,CAAE8oB,KAAAA,CAAI,CAAC,CAAG,MAAM,IAAI,CAACC,MAAM,CAACC,IAAI,EAAC,CAC3C,CAAE,MAAOvb,EAAG,CAOV,MAAM,IAAI6a,sBANmC,CAC3C1jB,KAAM,QACNqkB,UAAW,eACXT,YAAa,gCACf,EAGF,CAEA,GAAIM,EAAM,MAKV,IAFAD,GAAkBF,EAAYO,MAAM,CAAClpB,KAE5B,CAEP,IAAMmpB,EAAaN,EAAerJ,OAAO,CAhDvB,QAiDlB,GAAI2J,KAAAA,EAAmB,MAGvB,IAAMC,EAA0C7mB,KAAKG,KAAK,CADvCmmB,EAAenJ,KAAK,CAAC,EAAGyJ,GAAYE,OAAO,CAAChB,EAAgB,KAM/E,GAHA,MAAMe,EAGFA,aAAAA,EAAcxkB,IAAI,CAAiB,OAGvCikB,EAAiBA,EAAenJ,KAAK,CAACyJ,EA5DpB,EA6DpB,CACF,CACF,CAEA,MAAMG,MAAO,CACX,OAAO,IAAI,CAACP,MAAM,CAACQ,MAAM,EAC3B,CAlDA1nB,YAAYknB,CAAc,CAAE,CAC1B,IAAI,CAACA,MAAM,CAAGA,CAChB,CAiDF,E,gDCnBO,6BAAMS,mBAkBX,MAAMC,SACJ3lB,CAAgC,CAChC4e,CAA8B,CAC9BI,CAAc,CACduE,CAA+B,CAC/BqC,CAAwC,CACxC,CAEA,GADA,IAAI,CAAC5B,QAAQ,CAAC,CAACljB,KAAM,oBAAqBke,OAAAA,CAAM,GAC5CJ,SAAAA,IAEJ,MAAM,IAAI,CAACiH,oBAAoB,CAAC7lB,EAAQ4lB,GACpCrC,GAAwB,CAC1B,IAAM9Z,EAAO,IAAIqc,SACjBrc,EAAKhC,GAAG,CAAC,uBAAwB,QAC5B0J,CAAAA,EAAAA,EAAAA,EAAAA,EAAcoS,EAAwB,CAACtkB,OAAQ,MAAOyU,KAAMjK,CAAI,EACvE,CACF,CAEAsc,UAAUxC,CAA+B,CAAE,CAEzC,GADA,IAAI,CAACS,QAAQ,CAAC,CAACljB,KAAM,oBAAoB,GACrCyiB,EAAwB,CAC1B,IAAM9Z,EAAO,IAAIqc,SACjBrc,EAAKhC,GAAG,CAAC,uBAAwB,SAC5B0J,CAAAA,EAAAA,EAAAA,EAAAA,EAAcoS,EAAwB,CACzCtkB,OAAQ,MACRyU,KAAMjK,EACNmH,QAAS,CACPC,OAAQ,kBACV,CACF,EACF,CACAtS,EAAAA,CAAmBA,CAACub,iBAAiB,CAAC,GACxC,CAEAkM,gBAAiB,CACf,IAAI,CAAChC,QAAQ,CAAC,CAACljB,KAAM,kBAAkB,EACzC,CAEAmlB,mBAAoB,CAClB,IAAI,CAACjC,QAAQ,CAAC,CAACljB,KAAM,qBAAqB,EAC5C,CAEAolB,cAAe,CACb,IAAI,CAAClC,QAAQ,CAAC,CAACljB,KAAM,uBAAuB,GAC5CvC,EAAAA,CAAmBA,CAACub,iBAAiB,CAAC,GACxC,CAEAqM,YAAa,CACX,IAAI,CAACnC,QAAQ,CAAC,CAACljB,KAAM,qBAAqB,GAC1CvC,EAAAA,CAAmBA,CAACub,iBAAiB,CAAC,GACxC,CAEA,MAAMsM,gBACJpmB,CAAgC,CAChCH,CAAe,CACfE,CAAkC,CAClCoa,CAAgC,CAChC3G,CAAgC,CAChCvT,CAAyC,CACzCoT,CAA2B,CAC3BI,CAAyB,CACzB,CACA,IAAM4S,EAAgB3gB,CAAAA,EAAAA,EAAAA,CAAAA,EAASyU,GAEzB/G,EAASkT,SA4pBsB,CACvCvmB,WAAAA,CAAU,CACVsmB,cAAAA,CAAa,CAId,EACC,IAAME,EAAoB,IAAIzU,IAAI/R,EAAWqH,GAAG,CAACmF,GAAKA,EAAEzL,IAAI,SAC5D,CAAQ,IACDulB,CAAAA,GAAiBE,EAAkB9Q,GAAG,CAAC,SAAQ,EAC3C0C,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB,2DACpBb,EAAAA,EAAkBA,CAACE,YAAY,CAC/BF,EAAAA,EAAkBA,CAACI,OAAO,CAI3BJ,EAAAA,EAAkBA,CAACE,YAAY,EA5qBW,CAACzX,WAAAA,EAAYsmB,cAAAA,CAAa,GACnEliB,EAAOkiB,EAAgBrgB,KAAAA,EAAYmU,EAczC,OAZIkM,GAAiB,CAACtmB,EAAW0M,IAAI,CAAC5L,GAAOA,WAAAA,EAAIC,IAAI,EAAiBD,EAAIF,IAAI,GAAKwZ,EAAMxZ,IAAI,GAC3FZ,EAAWymB,IAAI,CAAC,CACd1lB,KAAM,SACNH,KAAMwZ,EAAMxZ,IAAI,CAChBT,GAAIia,EAAMja,EAAE,CACZumB,aAActM,EAAMsM,YAAY,CAChCC,UAAWvM,EAAMuM,SAAS,CAC1BC,MAAOxM,EAAMwM,KAAK,CAClBjC,YAAavK,EAAMuK,WAAW,GAI3B,IAAI,CAACkC,WAAW,CACrB5mB,EACAH,EACAuT,EACArT,EACAoE,EACAqP,EACAvT,EACAoT,EACAI,EAEJ,CAEA,MAAMoT,cAAcjlB,CAAkC,CAAEmf,CAAoC,CAAE,CAC5F,MAAMA,EAASyE,IAAI,GAEnB,IAAI,CAACxB,QAAQ,CAAC,CAACljB,KAAM,4BAA6Bc,QAAAA,CAAO,EAC3D,CAEA,MAAcglB,YACZ5mB,CAAgC,CAChCH,CAAe,CACfuT,CAA8B,CAC9BrT,CAAkC,CAClCoE,CAAsB,CACtBqP,CAAgC,CAChCvT,CAAyC,CACzCoT,CAA2B,CAC3BI,CAAyB,CACzB,CACA,IAAMqT,EAAqB7mB,EAAgB,CAACA,EAAc,CAAG,EAAE,CACzD8mB,EAAcpnB,CAAAA,EAAAA,EAAAA,EAAAA,EAAa,CAACC,KAAM,OAAQC,QAAAA,EAASE,WAAAA,EAAYC,OAAAA,EAAQC,cAAe6mB,CAAkB,GAE9G,IAAI,CAAC9C,QAAQ,CAAC,CAACljB,KAAM,gBAAiBc,QAASmlB,CAAW,GAE1D,IAAMtF,EAAa9hB,CAAAA,EAAAA,EAAAA,EAAAA,EAAa,CAACC,KAAM,YAAaC,QAAS,GAAIG,OAAAA,CAAM,GAKvE,GAHA,IAAI,CAACgkB,QAAQ,CAAC,CAACljB,KAAM,qBAAsB6e,QAAS,EAAI,GAGpD,CAAC3f,EAAQ,CACX,IAAMyQ,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAAC5J,YAAY,GAC3C,GAAIjC,EAAIvR,EAAE,CACRc,EAASyQ,EAAI8B,OAAO,CACpBhU,EAAAA,CAAmBA,CAACwc,4BAA4B,CAAC/a,EAAOE,EAAE,MACrD,CACL,IAAI,CAAC8mB,sBAAsB,CAAChnB,EAAQinB,EAAexW,EAAI3Q,KAAK,GAC5D,MACF,CACF,CAEA,IAAI,CAACkkB,QAAQ,CAAC,CAACljB,KAAM,iBAAkBd,OAAQ,CAAC,GAAGA,CAAM,CAAE+H,UAAW,IAAIvL,OAAO+D,WAAW,EAAE,CAAC,GAI3F,IAAI,CAAC2mB,gCAAgC,EAAI9T,IAAWkE,EAAAA,EAAkBA,CAACI,OAAO,EAChF,IAAI,CAACsM,QAAQ,CAAC,CAACljB,KAAM,mBAAoBT,SAAUL,EAAOE,EAAE,GAG9D,IAAMsY,EACJ,EAAY7U,MAAM,EAAK5D,CAAAA,IAAAA,EAAW4D,MAAM,EAAU5D,CAAU,CAAC,EAAE,EAAEe,OAAS,YAAW,EAAekF,KAAAA,EAAVwN,EAC5FqL,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,2BAA4B,CACpCsI,oBAAqB,CAAC,CAAC3O,EACvB1X,KAAM0X,GAAiB,CAAC,EAAE,EAAE1X,KAC5Bue,MAAO7G,GAAiB7U,MAC1B,GACI,CAAC5D,EAAW4D,MAAM,EAAIQ,GAAMpE,CAAAA,EAAa,CAAC0F,CAAAA,EAAAA,EAAAA,EAAAA,EAAwBtB,GAAM,EAI5E,IAAMsM,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAAC/I,sBAAsB,CACnDvT,EAAOE,EAAE,CACTL,EACAuT,EACArT,EACAyY,GAAmB,EAAE,CACrBsO,EAR8BzT,EAAqB,CAACA,EAAmB,CAAG,EAAE,CAU5EI,GAEF,GAAI,CAAChD,EAAIvR,EAAE,CAAE,CACX,IAAI,CAAC8nB,sBAAsB,CAAChnB,EAAQinB,EAAexW,EAAI3Q,KAAK,GAC5D,MACF,CAEA,IAAMmlB,EAASxU,EAAI1R,QAAQ,CAAC2U,IAAI,EAAE0T,YAClC,GAAI,CAACnC,EAAQ,CACX,IAAI,CAAC+B,sBAAsB,CAAChnB,EAAQinB,EAAe,IAAI,CAAC3K,OAAO,CAAC1G,SAAS,GACzE,MACF,CAEA,IAAMmL,EAAW,IAAI4D,2BAA2BM,GAEhD,IAAI,CAACjB,QAAQ,CAAC,CAACljB,KAAM,4BAA6Bc,QAAS6f,EAAYV,SAAAA,CAAQ,GAE/E,MAAM,IAAI,CAACsG,sBAAsB,CAACrnB,EAAQ+gB,EAAUvI,EACtD,CAEAkF,aAAaza,CAA+B,CAAE+b,CAAc,CAAE,CAC5D,IAAI,CAACgF,QAAQ,CAAC,CAACljB,KAAM,gBAAiBmC,UAAAA,EAAW+b,OAAAA,CAAM,EACzD,CAEAsI,gBAAgB3G,CAAsB,CAAE,CACtC,IAAI,CAACqD,QAAQ,CAAC,CAACljB,KAAM,mBAAoB6f,eAAAA,CAAc,EACzD,CAMA,MAAM4G,uCAAwC,CAC5C,IAAI,CAACvD,QAAQ,CAAC,CAACljB,KAAM,4CAA4C,GACjE,MAAMqQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAc,uEAAwE,CAC1FlS,OAAQ,MACV,EACF,CAEA,MAAMuoB,2CAA4C,CAChD,IAAI,CAACxD,QAAQ,CAAC,CAACljB,KAAM,iDAAiD,GACtE,MAAMqQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAc,4EAA6E,CAC/FlS,OAAQ,MACV,EACF,CAEA,MAAMwoB,aAAaznB,CAAgC,CAAE0nB,EAA0B,EAAI,CAAE,CACnF,IAAI,CAAC1D,QAAQ,CAAC,CAACljB,KAAM,gBAAiBd,OAAAA,CAAM,GAC5C,IAAM2nB,EAAgB,EAAE,CAExBA,EAAcnB,IAAI,CAAC,IAAI,CAACoB,aAAa,CAAC5nB,GAAQE,IAAM,OAChDwnB,GAAgBC,EAAcnB,IAAI,CAAC,IAAI,CAACvU,YAAY,IAExD,MAAMlH,QAAQC,GAAG,CAAC2c,EACpB,CAEAE,WACEjoB,CAA0B,CAC1BI,CAAgC,CAChCH,CAAe,CACfE,CAAkC,CAClC,CACA,IAAM6B,EAAUjC,CAAAA,EAAAA,EAAAA,EAAAA,EAAa,CAACC,KAAAA,EAAMC,QAAAA,EAASE,WAAAA,EAAYC,OAAAA,CAAM,GAC/D,IAAI,CAACgkB,QAAQ,CAAC,CAACljB,KAAM,gBAAiBc,QAAAA,CAAO,EAC/C,CAEA,MAAMgR,aAAa5S,CAAyB,CAAE6S,CAAe,CAAE,CAEzDpC,CADQ,MAAM,IAAI,CAAC6L,OAAO,CAAC1J,YAAY,CAAC5S,EAAOE,EAAE,CAAE2S,EAAO,EACtD3T,EAAE,EACR,IAAI,CAAC8kB,QAAQ,CAAC,CAACljB,KAAM,iBAAkBd,OAAQ,CAAC,GAAGA,CAAM,CAAEW,KAAMkS,CAAO,CAAC,EAE7E,CAEA,MAAME,YAAY/S,CAAyB,CAAE,CAEvCyQ,CADQ,MAAM,IAAI,CAAC6L,OAAO,CAACvJ,WAAW,CAAC/S,EAAOE,EAAE,GAC5ChB,EAAE,EACR,IAAI,CAAC8kB,QAAQ,CAAC,CAACljB,KAAM,eAAgBT,SAAUL,EAAOE,EAAE,EAE5D,CAEA,MAAM4nB,0BAA0B9nB,CAAyB,CAAE,CACzD,IAAI,CAACgkB,QAAQ,CAAC,CAACljB,KAAM,+BAAgCd,OAAAA,CAAM,GAC3D,IAAMyQ,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAAC3J,YAAY,CAAC3S,EAAOE,EAAE,CAChDuQ,CAAAA,EAAIvR,EAAE,EAAE,IAAI,CAAC8kB,QAAQ,CAAC,CAACljB,KAAM,sBAAuBd,OAAAA,EAAQF,MAAO2Q,EAAI3Q,KAAK,EACnF,CAEA,MAAM6S,aAAa3S,CAAyB,CAAE,CAC5C,IAAI,CAACgkB,QAAQ,CAAC,CAACljB,KAAM,gBAAiBd,OAAAA,CAAM,GAC5C,IAAMyQ,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAAC3J,YAAY,CAAC3S,EAAOE,EAAE,CAChDuQ,CAAAA,EAAIvR,EAAE,EAAE,IAAI,CAAC8kB,QAAQ,CAAC,CAACljB,KAAM,sBAAuBd,OAAAA,EAAQF,MAAO2Q,EAAI3Q,KAAK,EACnF,CAEA,MAAM4S,aACJqV,CAAuB,CACvBC,CAA0C,CACP,CACnC,IAAI,CAAChE,QAAQ,CAAC,CAACljB,KAAM,iBAAiB,GAEtC,IAAM2P,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAAC5J,YAAY,GAC3C,GAAI,CAACjC,EAAIvR,EAAE,CAET,OADA,IAAI,CAAC8kB,QAAQ,CAAC,CAACljB,KAAM,wBAAyBc,QAAS6O,EAAI3Q,KAAK,GACzD,KAGT,IAAME,EAASyQ,EAAI8B,OAAO,CAU1B,OARIwV,GACFxpB,EAAAA,CAAmBA,CAACgc,mBAAmB,CAACva,EAAOE,EAAE,CAAE6nB,GAEjDC,GACFzpB,EAAAA,CAAmBA,CAACmc,oBAAoB,CAAC1a,EAAOE,EAAE,CAAE8nB,GAEtD,IAAI,CAAChE,QAAQ,CAAC,CAACljB,KAAM,iBAAkBd,OAAAA,CAAM,GAEtCA,CACT,CAEA,MAAMkW,oBACJ1C,CAAwD,CACxDnT,CAAgB,CACwB,CACxC,IAAMoQ,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAACpG,mBAAmB,CAAC1C,EAASnT,GAC5D,GAAI,CAACoQ,EAAIvR,EAAE,CAET,OAAO,KAGT,IAAMkY,EAAc3G,EAAI8B,OAAO,CAG/B,OAFA,IAAI,CAACyR,QAAQ,CAAC,CAACljB,KAAM,wBAAyBsW,YAAAA,CAAW,GAElDA,CACT,CAEA6Q,kBAAyB,CACvB,IAAI,CAACjE,QAAQ,CAAC,CAACljB,KAAM,mBAAmB,EAC1C,CAEA,MAAMonB,qBACJloB,CAAgC,CAChC2J,CAAuB,CACvBwQ,CAAgC,CAChC,CACA,IAAM5H,EAAU5I,EAAE4I,OAAO,CAezB,GAbI4V,EAAoB5V,GACtBvS,EAAS,MAAM,IAAI,CAAC0S,YAAY,GACvB0V,EAAiB7V,EAAS,CAAC+E,EAAAA,EAAkBA,CAACO,QAAQ,CAAC,GAChE,IAAI,CAACgQ,UAAU,CAAC,OAAQtV,EAAQvS,MAAM,CAAEP,EAAAA,EAAiBA,CAAE8S,EAAQxS,UAAU,EAC7E,IAAI,CAAC8nB,UAAU,CAAC,YAAatV,EAAQvS,MAAM,CAAEuS,EAAQ8V,UAAU,CAAE9V,EAAQxS,UAAU,EAC9E,IAAI,CAAC0nB,YAAY,CAAClV,EAAQvS,MAAM,CAAE,KAEvCA,EAAS,MAAM,IAAI,CAAC6lB,oBAAoB,CAAC7lB,GAG3C,IAAI,CAACgkB,QAAQ,CAAC,CAACljB,KAAM,qBAAsBf,WAAYwS,EAAQxS,UAAU,CAAEG,GAAIqS,EAAQrS,EAAE,GAIvFkoB,EAAiB7V,EAAS,CACxB+E,EAAAA,EAAkBA,CAACE,YAAY,CAC/BF,EAAAA,EAAkBA,CAACK,eAAe,CAClCL,EAAAA,EAAkBA,CAACO,QAAQ,CAC5B,GACD,CAACsQ,EAAoB5V,GAErB,OAEF,IAAIyM,EAAS,CAAC,KAAK,EAAEzM,EAAQa,MAAM,CAAC,CAAC,CACjCb,EAAQrS,EAAE,EACZ8e,CAAAA,EAAS,CAAC,QAAQ,EAAErV,EAAE4I,OAAO,CAACrS,EAAE,CAAC,CAAC,EAEpC2e,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,4BAA6B,CAACG,OAAAA,CAAM,GAE9C,MAAM,IAAI,CAAC4H,WAAW,CACpB5mB,EACAuS,EAAQ1S,OAAO,CACf0S,EAAQa,MAAM,CACdb,EAAQxS,UAAU,EAAI,EAAE,CACxB6F,CAAAA,EAAAA,EAAAA,EAAAA,EAAauU,GAASA,EAAQnU,KAAAA,EAElC,CAEA,MAAMsiB,yBAAyB3e,CAAqB,CAAE,CACpD,IAAM3J,EAAS,MAAM,IAAI,CAAC0S,YAAY,GAChCyH,EAAQ,MAAM,IAAI,CAACoO,gBAAgB,CAAC5e,EAAE6e,OAAO,EAC7C3nB,EAA6BsZ,EAAQ,CAAC,CAACrZ,KAAM,aAAc,GAAGqZ,CAAK,EAAE,CAAG,EAAE,CAE3E,IAAI,CAACwL,QAAQ,CAAC3lB,EAAQ,SAAU,cACrC,IAAI,CAACmmB,UAAU,GACf,MAAM,IAAI,CAACS,WAAW,CAAC5mB,EAAQ2J,EAAE9J,OAAO,CAAEyX,EAAAA,EAAkBA,CAACE,YAAY,CAAE3W,GAC3Ege,CAAAA,EAAAA,EAAAA,EAAAA,EAAU,4BAA6B,CAACG,OAAQ,YAAY,EAC9D,CAEA,MAAMyJ,wBAAwB9e,CAA+B,CAAE,CAE7D,MAAM,IAAI,CAACkc,oBAAoB,GAC/B,IAAI,CAACnI,YAAY,CAAC/T,EAAE1G,SAAS,CAAE,SAC3B0G,EAAE+e,SAAS,EACb,IAAI,CAAC1E,QAAQ,CAAC,CAACljB,KAAM,oBAAqBke,OAAQ,QAAS9e,GAAIyJ,EAAEzJ,EAAE,EAEvE,CAEAyoB,yBAAyBhf,CAAqB,CAAE,CAC9C,IAAMif,EAAgBjf,EAAE6J,OAAO,CAC/B,IAAI,CAACwQ,QAAQ,CAAC,CAACljB,KAAM,2BAA4B0S,QAAS,CAACoV,EAAc,EAC3E,CAEAC,kBAAkB1L,CAAuB,CAA4B,QACnE,EAAWlE,gBAAgB,EACpBkE,EAAM3K,OAAO,CAACnB,GAAG,CAAC8L,EAAMlE,gBAAgB,GAAK,IACtD,CAEA6P,YAAYtW,CAAuC,CAAuB,CAExE,OAAOuW,MADkBphB,IAAI,CAAC6K,EAAQ5K,MAAM,IAC1BoY,IAAI,CAAC,CAACla,EAAGC,IAAM,IAAIvJ,KAAKuJ,EAAEgC,SAAS,EAAEC,OAAO,GAAK,IAAIxL,KAAKsJ,EAAEiC,SAAS,EAAEC,OAAO,GAClG,CAEA,MAAMghB,uBACJC,CAA2B,CAC3BrnB,CAAe,CACfuhB,CAA4B,CAC5B3P,CAAgC,CAChC,CACuB,KAAnB5R,EAAQsnB,IAAI,KAEZD,IACF1qB,EAAAA,CAAmBA,CAACgc,mBAAmB,CAAC0O,EAAc,MACtD1qB,EAAAA,CAAmBA,CAACuc,sBAAsB,CAACmO,IAI7C,MAAM,IAAI,CAACrC,WAAW,CAAC,KAAMhlB,EAAS0V,EAAAA,EAAkBA,CAACE,YAAY,CAAE2L,EAAMnd,KAAAA,EAAWwN,GAC1F,CAEA,MAAMoU,cAAcvnB,CAAuB,CAAE,CAC3C,IAAM8iB,EAAO5kB,EAAAA,CAAmBA,CAACic,oBAAoB,CAACna,GAEtD,GAAI,CAACA,EAAU,CACb,IAAI,CAAC8oB,gBAAgB,CAAC,EAAE,CAAEhG,GAAQ,EAAE,EACpC,MACF,CAEA,IAAI,CAACa,QAAQ,CAAC,CAACljB,KAAM,mBAAoBoG,SAAU,EAAE,CAAEiW,MAAO,SAAS,GAEvE,IAAM1M,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAACrJ,YAAY,CAAC5S,GAC5C,GAAIoQ,EAAIvR,EAAE,CAAE,CACV,IAAMc,EAASyQ,EAAI8B,OAAO,CAACvS,MAAM,CACjC,IAAI,CAACmpB,gBAAgB,CAAC1Y,EAAI8B,OAAO,CAACrL,QAAQ,CAAEic,GAAQnjB,EAAOod,iBAAiB,EAAI,EAAE,CACpF,MACE,IAAI,CAAC4G,QAAQ,CAAC,CAACljB,KAAM,mBAAoBqc,MAAO,OAAO,EAE3D,CAEAiM,gBAAgBnmB,CAAsC,CAAE,CACtD,IAAI,CAAC+gB,QAAQ,CAAC,CAACljB,KAAM,mBAAoBmC,UAAAA,CAAS,EACpD,CAEAomB,uBAAuBtH,CAA+B,CAAE,CACtD,IAAI,CAACiC,QAAQ,CAAC,CAACljB,KAAM,uBAAwBihB,OAAAA,CAAM,EACrD,CAEA,MAAcsF,uBACZrnB,CAAyB,CACzB+gB,CAAoC,CACpCvI,CAAwC,CACxC,CACA,GAAI,CACF,UAAW,IAAM5W,KAAWmf,EAAS6D,MAAM,GACzC,MAAM,IAAI,CAAC0E,uBAAuB,CAACtpB,EAAQ4B,EAAS4W,EAExD,CAAE,MAAO7O,EAAG,CACV,IAAM7J,EAAQ,IAAI,CAACypB,+BAA+B,CAAC5f,GAC/C,IAAI,CAAC6f,wBAAwB,CAAC7f,EAAE7J,KAAK,EACrCmnB,EAAe,IAAI,CAAC3K,OAAO,CAAC1G,SAAS,EACzC,IAAI,CAACoR,sBAAsB,CAAChnB,EAAQF,GAEpC,MACF,CACF,CAEQypB,gCAAgC5f,CAAU,CAA+C,CAC/F,MACE,CAAC,CAACA,GACF,iBAAOA,GACP,UAAWA,GACX,CAAC,CAACA,EAAE7J,KAAK,EACT,iBAAO6J,EAAE7J,KAAK,EACd,cAAe6J,EAAE7J,KAAK,EACtB,iBAAO6J,EAAE7J,KAAK,CAACqlB,SAAS,EACxBrN,EAAAA,EAA6BA,CAACva,QAAQ,CAACoM,EAAE7J,KAAK,CAACqlB,SAAS,CAE5D,CAEA,MAAcmE,wBACZtpB,CAAyB,CACzB0hB,CAAyC,CACzClJ,CAAwC,CACxC,CACA,OAAQkJ,EAAgB5gB,IAAI,EAC1B,IAAK,UACH,IAAI,CAACkjB,QAAQ,CAAC,CAACljB,KAAM,gCAAiCnD,MAAO+jB,EAAgBhO,IAAI,GACjF,KAEF,KAAK,mBAmSkB/S,EAAAA,EAlSG+gB,EAAgB/gB,IAAI,CAmS3CoX,CAAAA,EAAAA,EAAmBA,CAACxa,QAAQ,CAACoD,IAAUqX,EAAAA,CAAmBA,CAACS,aAAa,EAAI9X,sBAAAA,CAA2B,GAlStG,IAAI,CAACqjB,QAAQ,CAAC,CACZljB,KAAM,oCACNH,KAAM+gB,EAAgB/gB,IAAI,CAC1B8R,OAAQiP,EAAgBjP,MAAM,CAC9B8O,UAAWG,EAAgBH,SAAS,CACpCC,aAAcE,EAAgBF,YAAY,CAC1CzhB,WAAY2hB,EAAgB3hB,UAAU,GAG1C,KAEF,KAAK,eACH,IAAI,CAACikB,QAAQ,CAAC,CACZljB,KAAM,iCACNI,MAAOwgB,EAAgBxgB,KAAK,CAC5BU,QAAS8f,EAAgB9f,OAAO,CAChCme,aAAc2B,EAAgB3B,YAAY,GAE5C,KAEF,KAAK,WACH,IAAI,CAACiE,QAAQ,CAAC,CAACljB,KAAM,8BAA+B4gB,gBAAAA,CAAe,GACnE,MAAM,IAAI,CAAC+H,wBAAwB,CAACzpB,GAChCwY,GAAmBA,EAAgB7U,MAAM,CAAG,GAAKqU,EAAAA,CAAmBA,CAACW,yBAAyB,EAChG,MAAM,IAAI,CAACzC,mBAAmB,CAACsC,CAAe,CAAC,EAAE,CAAGxY,EAAOE,EAAE,EAC/D,KAEF,KAAK,QAAS,CACZ,IAAMwpB,EAAS,IAAI,CAACF,wBAAwB,CAAC9H,GAC7C,IAAI,CAACsF,sBAAsB,CAAChnB,EAAQ0pB,GACpC,KACF,CACA,IAAK,QAEH9f,QAAQ+f,GAAG,CAAC,eAAgBjI,EAAgBhO,IAAI,EAChD,KAEF,KAAK,aACH,IAAI,CAACsQ,QAAQ,CAAC,CACZljB,KAAM,cACNhB,MAAO,CACLgB,KAAM4gB,EAAgBkI,cAAc,CACpCje,KAAM+V,EAAgB/V,IAAI,CAC1B/J,QAAS8f,EAAgB9f,OAAO,CAChCugB,WAAYT,EAAgBS,UAAU,CAE1C,EAEJ,CACF,CAEQqH,yBAAyB/Y,CAAkC,CAAa,CAC9E,OAAQA,EAAI0U,SAAS,EACnB,IAAK,WACH,OAAO8B,EAAelV,EAAAA,CAAM,CAAC,IAAI,EAAI,IAAI,CAACuK,OAAO,CAAC1G,SAAS,CAC7D,KAAK,kBACH,OAAOqR,EAAelV,EAAAA,CAAM,CAAC,IAAI,EAAI,IAAI,CAACuK,OAAO,CAAC1G,SAAS,CAC7D,KAAK,YACH,OAAOqR,EAAelV,EAAAA,CAAM,CAAC,IAAI,EAAI,IAAI,CAACuK,OAAO,CAAC1G,SAAS,CAC7D,KAAK,oBAAqB,CACxB,IAAM+M,EAAUlkB,KAAKG,KAAK,CAAC6R,EAAIiU,WAAW,EAE1C,MAAO,CAAC5jB,KAAM,oBAAqB+oB,QAAS,GAAMjoB,QAD7B,CAAC,uBAAuB,EAAE+gB,EAAQhiB,IAAI,CAAC,wDAAwD,EAAE0C,OAAOC,QAAQ,CAACC,MAAM,CAAC,iCAAiC,EAAEof,EAAQmH,SAAS,CAAC,CAAC,CAC1HnH,QAAAA,CAAO,CAClF,CACA,IAAK,eAAgB,CACnB,IAAMA,EAAUlkB,KAAKG,KAAK,CAAC6R,EAAIiU,WAAW,EAC1C,MAAO,CAAC5jB,KAAM,eAAgB+oB,QAAS,GAAMjoB,QAAS+gB,EAAQ/gB,OAAO,CAAE+gB,QAAAA,CAAO,CAChF,CACA,IAAK,wBACH,OAAOsE,EAviBb,8KAyiBI,KAAK,eACH,OAAOA,EAAelV,EAAAA,CAAM,CAAC,IAAI,EAAI,IAAI,CAACuK,OAAO,CAAC1G,SAAS,CAC7D,SAEE,OAAOqR,EAAe,IAAI,CAAC3K,OAAO,CAAC1G,SAAS,CAChD,CACF,CAEA,MAAc6T,yBAAyBzpB,CAAyB,CAAE,CAChEzB,EAAAA,CAAmBA,CAAC+b,eAAe,CAACta,EAAOE,EAAE,CAAE,MAC/C3B,EAAAA,CAAmBA,CAACuc,sBAAsB,CAAC9a,EAAOE,EAAE,EAEpD,IAAI,CAAC8jB,QAAQ,CAAC,CAACljB,KAAM,qBAAsB6e,QAAS,EAAK,GAEzD3f,EAAS,MAAM,IAAI,CAACgT,kBAAkB,CAAChT,GACvC,IAAI,CAACgkB,QAAQ,CAAC,CAACljB,KAAM,iBAAkBd,OAAQ,CAAC,GAAGA,CAAM,CAAE+H,UAAW,IAAIvL,OAAO+D,WAAW,EAAE,CAAC,EACjG,CAEQymB,uBAAuBhnB,CAAgC,CAAEF,CAAgB,CAAE,CACjF,IAAM8B,EAAUjC,CAAAA,EAAAA,EAAAA,EAAAA,EAAa,CAACC,KAAM,YAAaC,QAAS,GAAIC,MAAAA,EAAOE,OAAAA,CAAM,GAC3E,IAAI,CAACgkB,QAAQ,CAAC,CAACljB,KAAM,gBAAiBc,QAAAA,CAAO,GAC7C,IAAI,CAACoiB,QAAQ,CAAC,CAACljB,KAAM,qBAAsB6e,QAAS,EAAK,GACzD,IAAI,CAACqE,QAAQ,CAAC,CAACljB,KAAM,0BAA0B,EACjD,CAEA,MAAMmR,cAAoD,CACxD,IAAI,CAAC+R,QAAQ,CAAC,CAACljB,KAAM,iBAAiB,GAEtC,IAAM2P,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAACrK,YAAY,UAC3C,EAAS/S,EAAE,EASX8d,WAAW,IAAM,IAAI,CAACgH,QAAQ,CAAC,CAACljB,KAAM,iBAAkB0R,QAAS/B,EAAI8B,OAAO,GAAI,KAEzE9B,EAAI8B,OAAO,GARhByK,WAAW,IAAM,IAAI,CAACgH,QAAQ,CAAC,CAACljB,KAAM,wBAAyBc,QAAS6O,EAAI3Q,KAAK,GAAI,KAC9E,KAQX,CAOA,MAAc+lB,qBACZkE,CAAwC,CACxCnE,CAAwC,CACL,CACnC,IAAI5lB,EAAmC,KAEvC,GAAI+pB,EACF/pB,EAAS+pB,MACJ,CACL,IAAMvX,EAAU,MAAM,IAAI,CAACP,YAAY,GACvC,GAAIO,GAAS7O,OAAQ,CACnB,IAAMqmB,EAA6BzrB,EAAAA,CAAmBA,CAAC0a,gBAAgB,CACvEjZ,EAAS,GAA+BwS,EAAQ3L,IAAI,CAAC2Z,GAAKA,EAAEtgB,EAAE,GAAK8pB,IAAgCxX,CAAO,CAAC,EAAE,CAEjH,CAIA,GAFIxS,GAAU6H,CAAAA,EAAAA,EAAAA,EAAAA,EAAwB7H,IAASA,CAAAA,EAAS,IAAG,EAEvDA,GAAU4lB,EAAmB,CAC/B,IAAM7mB,EAAW,MAAM,IAAI,CAACud,OAAO,CAACrJ,YAAY,CAACjT,EAAOE,EAAE,EAC1D,GAAInB,EAASG,EAAE,CAAE,CACf,IAAMgI,EAAWnI,EAASwT,OAAO,CAACrL,QAAQ,CACpC+iB,EAAM/iB,GAAUvD,OAElBsmB,GAAO,GAAK,CAAC/iB,CAAQ,CAAC+iB,EAAM,EAAE,EAAElqB,YAAY8G,KAAKhG,GAAOgF,EAAAA,EAAAA,CAAmBhF,EAAK+kB,KAClF5lB,CAAAA,EAAS,IAAG,CAEhB,CACF,CAIA,OAFA,MAAM,IAAI,CAACynB,YAAY,CAACznB,EAAQ,IAEzBA,CACT,CAEA,MAAcgT,mBAAmBhT,CAAyB,CAA8B,CACtF,GAAIA,EAAOW,IAAI,CAAE,OAAOX,EAExB,IAAMyQ,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAACtJ,kBAAkB,CAAChT,EAAOE,EAAE,EAG3D,OAFIuQ,EAAIvR,EAAE,EAAEc,CAAAA,EAAS,CAAC,GAAGA,CAAM,CAAEW,KAAM8P,EAAI8B,OAAO,GAE3CvS,CACT,CAEA,MAAakqB,YAAYvU,CAAkB,CAA+B,CACxE,IAAMlF,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAAC5G,UAAU,CAACC,GACtCqM,EAA6B,EAAE,CAMnC,OALIvR,EAAIvR,EAAE,GACR8iB,EAASvR,EAAI8B,OAAO,CACpB,IAAI,CAACyR,QAAQ,CAAC,CAACljB,KAAM,aAAckhB,OAAAA,CAAM,IAGpCA,CACT,CAEA,MAAauG,iBAAiBhkB,CAAuB,CAAwC,CAC3F,IAAI,CAACyf,QAAQ,CAAC,CAACljB,KAAM,wBAAyBqZ,MAAOnU,KAAAA,EAAWmX,MAAO,SAAS,GAChF,IAAM1M,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAAC/G,SAAS,CAAChR,GACzC,GAAIkM,EAAIvR,EAAE,CAER,OADA,IAAI,CAAC8kB,QAAQ,CAAC,CAACljB,KAAM,wBAAyBqZ,MAAO1J,EAAI8B,OAAO,CAAE4K,MAAO,QAAQ,GAC1E1M,EAAI8B,OAAO,CAElB,IAAI,CAACyR,QAAQ,CAAC,CAACljB,KAAM,wBAAyBqZ,MAAOnU,KAAAA,EAAWmX,MAAO,OAAO,EAGlF,CAEA,MAAagN,qBAAsB,CACjC,IAAI,CAACnG,QAAQ,CAAC,CAACljB,KAAM,yBAAyB,GAC9C,IAAM2P,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAAC9H,WAAW,GAM1C,OALI/D,EAAIvR,EAAE,CACR,IAAI,CAAC8kB,QAAQ,CAAC,CAACljB,KAAM,yBAA0B2S,eAAgBhD,EAAI8B,OAAO,GAE1E,IAAI,CAACyR,QAAQ,CAAC,CAACljB,KAAM,gCAAiCc,QAAS6O,EAAI3Q,KAAK,GAEnE2Q,CACT,CAEA,MAAa2Z,mBAAmBC,CAAkB,CAAE,CAClD,IAAI,CAACrG,QAAQ,CAAC,CAACljB,KAAM,wBAAyBqZ,MAAOnU,KAAAA,EAAWmX,MAAO,SAAS,GAChF,IAAM1M,EAAM,MAAM,IAAI,CAAC0Z,mBAAmB,GAC1C,GAAI,CAAC1Z,EAAIvR,EAAE,CAAE,CACX,IAAI,CAAC8kB,QAAQ,CAAC,CAACljB,KAAM,wBAAyBqZ,MAAOnU,KAAAA,EAAWmX,MAAO,OAAO,GAC9E,MACF,CAEA,IAAM3X,EAASiL,EAAI8B,OAAO,CAAC1L,IAAI,CAACyjB,GAAKA,EAAE3pB,IAAI,GAAK0pB,GAChD,GAAI,CAAC7kB,EAAQ,CACX,IAAI,CAACwe,QAAQ,CAAC,CAACljB,KAAM,wBAAyBqZ,MAAOnU,KAAAA,EAAWmX,MAAO,OAAO,GAC9E,MACF,CAEA,IAAI,CAAC6G,QAAQ,CAAC,CAACljB,KAAM,wBAAyBqZ,MAAO3U,EAAQ2X,MAAO,QAAQ,EAC9E,CAEA,MAAa7H,qBAAqBxS,CAAW,CAAET,CAAa,CAAE8B,CAAY,CAAE,CAC1E,IAAMsM,EAAM,MAAM,IAAI,CAAC6L,OAAO,CAAChH,oBAAoB,CAACxS,EAAKT,EAAO8B,GAChE,GAAIsM,EAAIvR,EAAE,CAAE,CACV,IAAMsU,EAAU,EAAKjB,OAAO,CAAe7K,MAAM6iB,OAAO,CAAC9Z,EAAI8B,OAAO,EAAI9B,EAAI8B,OAAO,CAAG,CAAC9B,EAAI8B,OAAO,CAAC,CAApEvM,KAAAA,EAC/B,IAAI,CAACge,QAAQ,CAAC,CAACljB,KAAM,2BAA4B0S,QAAAA,CAAO,EAC1D,CAGF,CAEA,MAAasB,aAAatP,CAAc,CAAE,CAExC,MAAOiL,CADK,MAAM,IAAI,CAAC6L,OAAO,CAACxH,YAAY,CAACtP,EAAM,EACvCtG,EAAE,CAWPiqB,iBAAiBjiB,CAA8B,CAAEnH,CAAkC,CAAE,CAC3F,IAAI,CAACikB,QAAQ,CAAC,CACZljB,KAAM,mBACNoG,SAAAA,EACAiW,MAAO,QACT,GAEA,IAAI,CAAC6G,QAAQ,CAAC,CACZljB,KAAM,oBACNf,WAAAA,CACF,EACF,CAntBAhC,YAAYimB,CAAoB,CAAElN,CAAc,CAAEsM,CAAkC,CAAE,C,KAFtF8D,gCAAgC,CAAYlP,EAAAA,CAAmBA,CAACM,kBAAkB,C,KAwMlFwC,sBAAsB,CAAG,KACvB,IAAI,CAACkJ,QAAQ,CAAC,CAACljB,KAAM,0BAA0B,EACjD,E,KAwfO0pB,iBAAiB,CAAG,KACzB,IAAI,CAACxG,QAAQ,CAAC,CAACljB,KAAM,wBAAyBqZ,MAAOnU,KAAAA,EAAWmX,MAAO,QAAQ,EACjF,E,KAEO/W,eAAe,CAAG,CAAClK,EAAQ,EAAI,IACpC,IAAI,CAAC8nB,QAAQ,CAAC,CAACljB,KAAM,oBAAqB+f,KAAM3kB,CAAK,EACvD,EArsBE,IAAI,CAAC8nB,QAAQ,CAAGA,EAChB,IAAI,CAAC1H,OAAO,CAAG,IAAItK,EAAAA,CAAkBA,CAAC8E,EAAQsM,EAChD,CAitBF,EAEA,SAAS+E,EAAoB5V,CAAgC,MAOlCA,EANzB,OACE6V,EAAiB7V,EAAS,CAAC+E,EAAAA,EAAkBA,CAACC,OAAO,CAAED,EAAAA,EAAkBA,CAACG,OAAO,CAAC,GACjF2Q,EAAiB7V,EAAS,CAAC+E,EAAAA,EAAkBA,CAACE,YAAY,CAAC,GAKvD,YADkBjF,EAJ4DA,IAKtD,iBAAOA,EAAQ1S,OAAO,CAGvD,SAASuoB,EACP7V,CAAgC,CAChCkY,CAA0B,EAG1B,OAAOhjB,IADSqK,IAAY2Y,GACjBhV,GAAG,CAAClD,EAAQa,MAAM,CAC/B,CAyBA,SAAS6T,EAAerlB,CAAe,EACrC,MAAO,CAACioB,QAAS,GAAMjoB,QAAAA,EAASd,KAAM,OAAO,CAC/C,CChzBA,IAAM4pB,EAA4B7M,CAAAA,EAAAA,EAAAA,aAAAA,EAAyC,MASpE,SAASuG,EAA2B,CACzCtN,OAAAA,CAAM,CACNqG,MAAAA,CAAK,CACL6G,SAAAA,CAAQ,CACRZ,iBAAAA,CAAgB,CAChBrF,SAAAA,CAAQ,CAC2C,EACnD,IAAM1B,EAAU6B,CAAAA,EAAAA,EAAAA,OAAAA,EACd,IAAM,IAAIwH,mBAAmB1B,EAAUlN,EAAQsM,GAC/C,CAACY,EAAUlN,EAAQsM,EAAiB,EAsEtC,MAnEA/Y,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KAcHsgB,CAbqB,UACxB,GAAIxN,EAAMlE,gBAAgB,EAAIkE,EAAMjW,QAAQ,CAACvD,MAAM,CAAG,GAAK,CAACwZ,EAAMqC,YAAY,CAAE,CAC9E,IAAMoL,EAAqBrsB,EAAAA,CAAmBA,CAACyb,gBAAgB,CAACmD,EAAMlE,gBAAgB,EACtF,GAAI2R,EAAoB,CACtB,IAAMC,EAAWC,OAAOF,GACnBG,MAAMF,GAGT,MAAMxO,EAAQ+N,kBAAkB,CAACQ,GAFjC,MAAMvO,EAAQkM,gBAAgB,CAACsC,EAInC,CACF,CACF,IAEF,EAAG,CAAC1N,EAAMlE,gBAAgB,CAAEoD,EAASc,EAAMjW,QAAQ,CAACvD,MAAM,CAAEwZ,EAAMqC,YAAY,CAAC,EAE/EnV,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR,IAAM2gB,EAAmB,UACvB,IAAMC,EAAO5nB,OAAOC,QAAQ,CAAC2nB,IAAI,CAC3BC,EAAW7nB,OAAOC,QAAQ,CAACob,QAAQ,CACnC5b,EAAMO,OAAOC,QAAQ,CAAC2nB,IAAI,CAAG,CAAC,EAAEC,EAAS,EAAED,EAAK,CAAC,CAAGC,EACpDC,EAAWroB,EAAI8Y,KAAK,CAAC,GAAGva,KAAK,CAAC,KACpC,GAAI8pB,EAASxnB,MAAM,CAAG,EACpB,OAGF,IAAMtB,EAAQ8oB,CAAQ,CAAC,EAAE,CACnBhnB,EAAOgnB,CAAQ,CAAC,EAAE,CAEnB9oB,GAAU8B,GAIf,MAAMkY,EAAQ/G,oBAAoB,CAACxS,EAAKT,EAAO8B,EACjD,EAMMinB,EAAiBjQ,CAAAA,EAAAA,EAAAA,CAAAA,EAJL,KACX6P,GACP,EAE2C,IAoBvChT,CAAAA,EAAAA,CAAmBA,CAACQ,eAAe,GACrC4S,IACAC,WAlBA,GAAM,CAACC,aAAAA,CAAY,CAAC,CAAGjoB,OAAOiD,OAAO,CAErCjD,OAAOiD,OAAO,CAACglB,YAAY,CAAG,SAAU,GAAGC,CAAI,EAC7CD,EAAaE,KAAK,CAACnoB,OAAOiD,OAAO,CAAEilB,GACnCloB,OAAOooB,aAAa,CAAC,IAAIC,MAAM,gBACjC,EAEAroB,OAAOsM,gBAAgB,CAAC,WAAYyb,GACpC/nB,OAAOsM,gBAAgB,CAAC,eAAgByb,GAEjC,KACL/nB,OAAOgM,mBAAmB,CAAC,WAAY+b,GACvC/nB,OAAOgM,mBAAmB,CAAC,eAAgB+b,EAC7C,CACF,IAMF,EAAG,CAAC/O,EAAQ,EAEL,UAACqO,EAA0BvM,QAAQ,EAACjiB,MAAOmgB,E,SAAU0B,C,EAC9D,CAEO,SAASC,IACd,MAAOK,CAAAA,EAAAA,EAAAA,UAAAA,EAAWqM,EACpB,CAEA,GAAG,CAAEA,EAA0BpM,WAAW,EAArCoM,CAAAA,EAA0BpM,WAAW,CAAK,2BAA0B,CAAE,CAAE,KAAM,CAAC,CACpF,GAAG,CAAE8F,EAA2B9F,WAAW,EAAtC8F,CAAAA,EAA2B9F,WAAW,CAAK,4BAA2B,CAAE,CAAE,KAAM,CAAC,C","sources":["ui/packages/copilot-auth-token/auth-token.ts","ui/packages/copilot-auth-token/copilot-auth-token.ts","ui/packages/copilot-chat/utils/constants.ts","ui/packages/copilot-chat/utils/copilot-chat-helpers.ts","ui/packages/copilot-chat/utils/copilot-chat-hooks.ts","ui/packages/copilot-chat/utils/api-cache.ts","ui/packages/copilot-chat/utils/copilot-chat-service.ts","ui/packages/copilot-chat/utils/copilot-chat-types.ts","ui/packages/copilot-chat/utils/copilot-feature-flags.ts","ui/packages/copilot-chat/utils/copilot-local-storage.ts","ui/packages/copilot-chat/utils/experiments.ts","ui/packages/issue-viewer/utils/queries.ts","ui/packages/copilot-chat/utils/copilot-autocompletions.ts","ui/packages/copilot-chat/utils/CopilotChatAutocompleteContext.tsx","ui/packages/copilot-chat/utils/copilot-chat-reducer.ts","ui/packages/copilot-chat/utils/CopilotChatContext.tsx","ui/packages/copilot-chat/utils/copilot-chat-message-streamer.ts","ui/packages/copilot-chat/utils/copilot-chat-manager.ts","ui/packages/copilot-chat/utils/CopilotChatManagerContext.tsx"],"sourcesContent":["export type AuthTokenResult = {\n  token: string\n  expiration: string\n}\n\nexport type SerializedAuthToken = {\n  value: string\n  expiration: string\n  ssoOrgIDs: string[]\n}\n\n/**\n * AuthToken represents an authentication token that is passed to CAPI, which is used to pull resources\n * from the monolith.\n *\n * It is capable of determining which authorization scheme to use (Bearer for SSATs or our own\n * GitHub-Bearer for user tokens).\n *\n * It also can tell if it needs refreshing, i.e. if it is expired or if the SSO orgs have changed since\n * it was minted.\n *\n * AuthToken doesn't care where the list of SSO orgs comes from.  Typically they are hydrated into a React\n * partial/component via props sent from the server, which would require a page refresh to receive the\n * current list, but they could theoretically come from other places too, like API calls...\n *\n * Finally, it can convert itself to/from ordinary JS objects that can be stored/retrieved from\n * local storage.\n */\nexport class AuthToken {\n  value: string\n  expiration: string\n  ssoOrgIDs: string[]\n\n  constructor(value: string, expiration: string, ssoOrgIDs: string[]) {\n    this.value = value\n    this.expiration = expiration\n    this.ssoOrgIDs = ssoOrgIDs\n  }\n\n  /**\n   * Returns a formatted string to be used as the value of an `Authorization` header\n   * to be \"GitHub-Bearer <encrypted token>\"\n   */\n  get authorizationHeaderValue() {\n    return `GitHub-Bearer ${this.value}`\n  }\n\n  /**\n   * Returns true if this auth token needs to be refreshed.\n   */\n  needsRefreshing(ssoOrgIds: string[]) {\n    return this.isExpired || this.ssoChanged(ssoOrgIds)\n  }\n\n  /**\n   * Returns true if this auth token is expired.\n   */\n  get isExpired() {\n    const expirationDateString = new Date(this.expiration)\n\n    const expirationDate = new Date(\n      Date.UTC(\n        expirationDateString.getUTCFullYear(),\n        expirationDateString.getUTCMonth(),\n        expirationDateString.getUTCDate(),\n        expirationDateString.getUTCHours(),\n        expirationDateString.getUTCMinutes(),\n        expirationDateString.getUTCSeconds(),\n        expirationDateString.getUTCMilliseconds(),\n      ),\n    )\n\n    const padding = 15 * 1000 // seconds\n\n    return expirationDate < new Date(Date.now() + padding)\n  }\n\n  /**\n   * Returns true if the session's SSO'd organizations have changed since the token was originally issued.\n   *\n   * Technically the set of orgs is inverted, representing the orgs that are *not* SSO'd, but functionally\n   * it will operate the same.\n   */\n  ssoChanged(ssoOrgIDs: string[]) {\n    return !(\n      this.ssoOrgIDs.every(org => ssoOrgIDs.includes(org)) && ssoOrgIDs.every(org => this.ssoOrgIDs.includes(org))\n    )\n  }\n\n  /**\n   * Build a new AuthToken from the results of a call to the token API endpoint.\n   */\n  static fromResult(result: AuthTokenResult, orgIds: string[]) {\n    return new AuthToken(result.token, result.expiration, orgIds)\n  }\n\n  /**\n   * Convert this token into a plain JS object, which can be stringified and put into localStorage.\n   */\n  serialize(): SerializedAuthToken {\n    return {\n      value: this.value,\n      expiration: this.expiration,\n      ssoOrgIDs: this.ssoOrgIDs,\n    }\n  }\n\n  /**\n   * Build a new auth token from a plain JS object, i.e. one parsed from localStorage.\n   */\n  static deserialize(serialized: SerializedAuthToken): AuthToken {\n    return new AuthToken(serialized.value, serialized.expiration, serialized.ssoOrgIDs)\n  }\n}\n","import {AuthToken, type AuthTokenResult, type SerializedAuthToken} from './auth-token'\nimport safeStorage from '@github-ui/safe-storage'\nimport {verifiedFetchJSON} from '@github-ui/verified-fetch'\n\nconst COPILOT_AUTH_TOKEN_KEY = 'COPILOT_AUTH_TOKEN'\nexport class CopilotAuthTokenProvider {\n  ssoOrgIDs: string[]\n  currentAuthTokenRequest: Promise<AuthToken> | null\n  copilotLocalStorage: {\n    getItem: (key: string, now?: number) => string | null\n    setItem: (key: string, value: string, now?: number) => void\n  }\n\n  constructor(ssoOrgIDs: string[]) {\n    this.ssoOrgIDs = ssoOrgIDs\n    this.currentAuthTokenRequest = null\n    this.copilotLocalStorage = safeStorage('localStorage', {\n      throwQuotaErrorsOnSet: false,\n      ttl: 1000 * 60 * 60 * 24,\n    })\n  }\n\n  /**\n   * Get the current auth token, either from local storage or by minting a new one from dotcom.\n   */\n  async getAuthToken(): Promise<AuthToken> {\n    const token = this.getLocalStorageAuthToken()\n\n    return token ? this.validateAuthToken(token) : this.fetchAuthToken()\n  }\n\n  setLocalStorageAuthToken(token: AuthToken) {\n    this.copilotLocalStorage.setItem(COPILOT_AUTH_TOKEN_KEY, JSON.stringify(token.serialize()))\n  }\n\n  getLocalStorageAuthToken(): AuthToken | null {\n    const value = this.copilotLocalStorage.getItem(COPILOT_AUTH_TOKEN_KEY)\n\n    return value ? AuthToken.deserialize(JSON.parse(value) as SerializedAuthToken) : null\n  }\n\n  /**\n   * Validate the given auth token.  If it's all good, return it, otherwise, go mint a new one from\n   * dotcom and return it instead.\n   */\n  private async validateAuthToken(token: AuthToken): Promise<AuthToken> {\n    return token.needsRefreshing(this.ssoOrgIDs) ? this.fetchAuthToken() : token\n  }\n\n  /**\n   * Return the current auth token request, or start a new one.\n   *\n   * The inner workings of the chat app can cause multiple requests to CAPI in quick succession.  If we\n   * do not have an auth token available in local storage, each of those requests will trigger their own\n   * token fetch, hence the storing of the current request on `this`.\n   */\n  private fetchAuthToken(): Promise<AuthToken> {\n    if (!this.currentAuthTokenRequest) {\n      this.currentAuthTokenRequest = this._fetchAuthToken()\n    }\n\n    return this.currentAuthTokenRequest\n  }\n\n  /**\n   * Start a new auth token request, parsing the result, persisting it in local storage,\n   * and clearing the current request once finished.\n   */\n  private async _fetchAuthToken(): Promise<AuthToken> {\n    const response = await verifiedFetchJSON('/github-copilot/chat/token', {method: 'POST'})\n\n    if (response.ok) {\n      const result = (await response.json()) as AuthTokenResult\n      this.currentAuthTokenRequest = null\n\n      const token = AuthToken.fromResult(result, this.ssoOrgIDs)\n\n      this.setLocalStorageAuthToken(token)\n\n      return token\n    } else {\n      this.currentAuthTokenRequest = null\n\n      throw new Error('Failed to mint new auth token')\n    }\n  }\n}\n","export const copilotChatTextAreaId = 'copilot-chat-textarea'\nexport const copilotChatSearchInputId = 'copilot-chat-topic-search'\nexport const reviewUserMessage = 'Review'\n","import {repositoryTreePath} from '@github-ui/paths'\n\nimport type {\n  BlackbirdSuggestion,\n  ChatError,\n  CopilotChatMessage,\n  CopilotChatMode,\n  CopilotChatReference,\n  CopilotChatRepo,\n  CopilotChatThread,\n  CopilotClientConfirmation,\n  Docset,\n  DocsetReference,\n  FileChangesReference,\n  FileDiffReference,\n  FileReference,\n  GitHubAgentReference,\n  RepositoryReference,\n  SnippetReference,\n  SuggestionSymbolReference,\n  TreeComparisonReference,\n} from './copilot-chat-types'\n\nexport const COPILOT_PATH = '/copilot'\n\nexport function buildMessage({\n  role,\n  content,\n  error,\n  references = [],\n  thread,\n  confirmations,\n}: {\n  role: 'user' | 'assistant'\n  content: string\n  error?: ChatError\n  references?: CopilotChatReference[]\n  thread?: CopilotChatThread | null\n  confirmations?: CopilotClientConfirmation[]\n}): CopilotChatMessage {\n  return {\n    id: crypto.randomUUID(),\n    threadID: thread?.id || 'temp',\n    role,\n    content,\n    createdAt: new Date().toISOString(),\n    error,\n    references,\n    skillExecutions: [],\n    clientConfirmations: confirmations,\n  }\n}\n\nexport function threadName(thread: CopilotChatThread | undefined | null): string {\n  return thread?.name || 'New conversation'\n}\n\nexport function referenceName(ref: CopilotChatReference): string {\n  switch (ref.type) {\n    case 'file':\n      return fileRefName(ref)\n    case 'file-diff':\n      return fileDiffRefName(ref)\n    case 'snippet':\n      return snippetRefName(ref)\n    case 'repository':\n      return repoRefName(ref)\n    case 'symbol':\n    case 'docset':\n      return ref.name\n    case 'commit':\n      return ref.message\n    case 'pull-request':\n      return ref.title\n    case 'tree-comparison':\n      return diffRefName(ref)\n    default:\n      return 'unrecognized reference'\n  }\n}\n\nexport function referenceID(ref: CopilotChatReference): string {\n  switch (ref.type) {\n    case 'file':\n      return `${ref.type}-${ref.repoOwner}/${ref.repoName}@${ref.commitOID}:${ref.path}`\n    case 'file-changes':\n      return `${ref.type}-${ref.repository.owner}/${ref.repository.owner}@${ref.ref}:${ref.path}`\n    case 'file-diff':\n      return `${ref.type}:${ref.baseFile?.path}@${ref.baseFile?.commitOID}-${ref.headFile?.path}@${ref.headFile?.commitOID}##${ref.selectedRange?.start}-${ref.selectedRange?.end}`\n    case 'snippet':\n      return `${ref.type}-${ref.repoOwner}/${ref.repoName}@${ref.commitOID}:${ref.path}#${ref.range.start}-${ref.range.end}`\n    case 'repository':\n      return `${ref.type}-${ref.id}-${ref.ownerLogin}/${ref.name}`\n    case 'symbol':\n      return `${ref.type}-${ref.kind}-${ref.name}` // TODO: attach repo?\n    case 'docset':\n      return `${ref.type}-${ref.name}` // TODO: repo too?\n    case 'commit':\n      return `${ref.type}-@${ref.oid}-${ref.repository.owner}/${ref.repository.name}`\n    case 'pull-request':\n      return `${ref.type}-${ref.commit}-${ref.repository.ownerLogin}/${ref.repository.name}`\n    case 'web-search':\n      return `${ref.type}-${ref.query}`\n    default:\n      return ''\n  }\n}\n\nfunction isMarkdown(reference: CopilotChatReference): boolean {\n  if (reference.type !== 'file' && reference.type !== 'snippet') return false\n  if (!reference.languageName) return false\n  return reference.languageName.toLowerCase() === 'markdown'\n}\n\nfunction plainRenderableUrl(ref: SnippetReference): string {\n  // Force .md files to render the code view so line ranges can be seen\n  if (isMarkdown(ref)) {\n    const url = new URL(ref.url, window.location.origin)\n    url.search = 'plain=1'\n    return url.href\n  }\n\n  return ref.url\n}\n\nexport function referenceURL(ref: CopilotChatReference): string {\n  switch (ref.type) {\n    case 'file':\n    case 'file-diff':\n    case 'pull-request':\n      return ref.url\n    case 'repository':\n      return `/${ref.ownerLogin}/${ref.name}`\n    case 'commit':\n      return ref.permalink\n    case 'snippet':\n      return plainRenderableUrl(ref)\n    // TODO: handle symbol and docset URLs\n    case 'symbol':\n    case 'docset':\n    default:\n      return '#'\n  }\n}\n\n/**\n * Returns the folder of the reference.\n *\n * e.g. for \"/foo/bar/file.ts\" returns \"foo/bar\"\n */\nexport function referencePath(ref: FileReference | SnippetReference): string {\n  const split = ref.path.split('/')\n  split.pop()\n  if (split.length === 0) {\n    return '/'\n  } else {\n    return split.join('/')\n  }\n}\n\n/**\n * Returns the file name of the reference.\n *\n * e.g. for \"/foo/bar/file.ts\" returns \"file.ts\"\n */\nexport function referenceFileName(ref: FileReference | FileChangesReference | SnippetReference): string {\n  return fileRefName(ref)\n}\n\nfunction fileRefName(ref: FileReference | FileChangesReference | SnippetReference): string {\n  const fileName = ref.path.split('/').pop()\n  return fileName || ref.path\n}\n\nexport function fileDiffRefName(ref: FileDiffReference): string {\n  const path = ref.headFile?.path ?? ref.baseFile?.path ?? ref.head?.path ?? ref.base?.path\n  const fileName = path?.split('/').pop() ?? ''\n\n  // if we have no range or no start, just the filename\n  if (!ref.selectedRange || !ref.selectedRange.start) {\n    return fileName\n  }\n\n  // if we have no end or the end and start are the same, just the start line\n  if (!ref.selectedRange.end || ref.selectedRange.start === ref.selectedRange.end) {\n    return `${fileName} ${ref.selectedRange.start}`\n  }\n\n  // if we have a start and and end the range\n  return `${fileName} ${ref.selectedRange.start}-${ref.selectedRange.end}`\n}\n\nfunction snippetRefName(ref: SnippetReference): string {\n  if (ref.title) {\n    return ref.title\n  }\n  const fileName = ref.path.split('/').pop()\n  const lines = `${ref.range.start}-${ref.range.end}`\n  return `${fileName}:${lines}`\n}\n\nfunction repoRefName(ref: RepositoryReference): string {\n  return `${ref.ownerLogin}/${ref.name}`\n}\n\nfunction diffRefName(ref: TreeComparisonReference) {\n  return `${ref.baseRevision.substring(0, 5)}..${ref.headRevision.substring(0, 5)}`\n}\n\nexport function qualifyRef(ref: string, refType: 'branch' | 'tag'): string {\n  if (refType === 'branch') return `refs/heads/${ref}`\n  if (refType === 'tag') return `refs/tags/${ref}`\n  return ref\n}\n\nexport function parseReferencesFromLocation(location: Location, repo: CopilotChatRepo): CopilotChatReference[] {\n  const refs: CopilotChatReference[] = []\n\n  const blobMatch = location.pathname.match(/^\\S+\\/blob\\/\\w+\\/(\\S+)$/i)\n  if (!blobMatch) return refs\n\n  const fileRef: FileReference = {\n    type: 'file',\n    url: location.href,\n    path: blobMatch.length > 1 ? blobMatch[1]! : blobMatch[0],\n    repoID: repo.id,\n    repoOwner: repo.ownerLogin,\n    repoName: repo.name,\n    ref: repo.ref,\n    commitOID: repo.commitOID,\n  }\n\n  refs.push(fileRef)\n\n  const lineSelection = parseBlobRange(location.hash)\n  if (lineSelection) {\n    const snippetRef: SnippetReference = {\n      ...fileRef,\n      type: 'snippet',\n      range: {start: lineSelection.start.line, end: lineSelection.end.line},\n    }\n\n    refs.push(snippetRef)\n  }\n\n  return refs\n}\n\n// TODO: temporarily borrowing from github/blob-anchor.ts\n\ninterface BlobOffset {\n  line: number\n  column: number | null\n}\n\ninterface BlobRange {\n  start: BlobOffset\n  end: BlobOffset\n}\n\nfunction parseBlobRange(str: string): BlobRange | undefined {\n  const lines = str.match(/#?(?:L)(\\d+)((?:C)(\\d+))?/g)\n  if (!lines) {\n    return\n  } else if (lines.length === 1) {\n    const offset = parseBlobOffset(lines[0])\n    if (!offset) return\n    return Object.freeze({start: offset, end: offset})\n  } else if (lines.length === 2) {\n    const startOffset = parseBlobOffset(lines[0])\n    const endOffset = parseBlobOffset(lines[1]!)\n    if (!startOffset || !endOffset) return\n\n    return ascendingBlobRange(\n      Object.freeze({\n        start: startOffset,\n        end: endOffset,\n      }),\n    )\n  } else {\n    return\n  }\n}\n\nfunction parseBlobOffset(str: string): BlobOffset | null {\n  const lineMatch = str.match(/L(\\d+)/)\n  const columnMatch = str.match(/C(\\d+)/)\n  if (lineMatch) {\n    return Object.freeze({\n      line: parseInt(lineMatch[1]!),\n      column: columnMatch ? parseInt(columnMatch[1]!) : null,\n    })\n  } else {\n    return null\n  }\n}\n\nfunction ascendingBlobRange(range: BlobRange): BlobRange {\n  const offsets = [range.start, range.end]\n  offsets.sort(compareBlobOffsets)\n\n  if (offsets[0] === range.start && offsets[1] === range.end) {\n    return range\n  } else {\n    return Object.freeze({\n      start: offsets[0]!,\n      end: offsets[1]!,\n    })\n  }\n}\n\nfunction compareBlobOffsets(a: BlobOffset, b: BlobOffset): number {\n  if (a.line === b.line && a.column === b.column) {\n    return 0\n  } else if (a.line === b.line && typeof a.column === 'number' && typeof b.column === 'number') {\n    return a.column - b.column\n  } else {\n    return a.line - b.line\n  }\n}\n\nexport function makeCopilotChatReference(file: string, repository: CopilotChatRepo): FileReference {\n  const blobPath = repositoryTreePath({\n    repo: repository,\n    commitish: repository.refInfo.name,\n    action: 'blob',\n    path: file,\n  })\n\n  const fileRef: FileReference = {\n    type: 'file',\n    url: new URL(blobPath, window.location.origin).href,\n    path: file,\n    repoID: repository.id,\n    repoOwner: repository.ownerLogin,\n    repoName: repository.name,\n    ref: repository.ref,\n    commitOID: repository.commitOID,\n  }\n\n  return fileRef\n}\n\nexport function makeSymbolReference(\n  suggestion: BlackbirdSuggestion,\n  repository: CopilotChatRepo,\n): SuggestionSymbolReference {\n  const fullyQualifiedName: string = suggestion.symbol?.fully_qualified_name || ''\n  const symbolRef: CopilotChatReference = {\n    type: 'symbol',\n    kind: 'suggestionSymbol',\n    name: fullyQualifiedName,\n    suggestionDefinitions: [\n      {\n        identOffset: {start: suggestion.symbol?.ident_start || 0, end: suggestion.symbol?.ident_end || 0},\n        extentOffset: {start: suggestion.symbol?.extent_start || 0, end: suggestion.symbol?.extent_end || 0},\n        kind: suggestion.symbol?.kind || '',\n        fullyQualifiedName,\n        repoID: repository.id,\n        repoOwner: repository.ownerLogin,\n        repoName: repository.name,\n        ref: suggestion.commit_sha,\n        commitOID: suggestion.commit_sha,\n        path: suggestion.path,\n      },\n    ],\n    languageID: suggestion.language_id,\n  }\n\n  return symbolRef\n}\n\n/**\n * Making a docset reference from a docset is as simple as adding the 'docset' type\n * discriminator to the docset object. We don't have a good reason to limit the\n * fields in the object at runtime.\n */\nexport function makeDocsetReference(docset: Docset): DocsetReference {\n  return {\n    ...docset,\n    type: 'docset',\n  }\n}\n\nexport function makeRepositoryReference(repo: CopilotChatRepo): RepositoryReference {\n  return {...repo, type: 'repository'}\n}\n\nexport function isDocset(\n  repoOrDocset: CopilotChatRepo | Docset | CopilotChatReference | undefined,\n): repoOrDocset is Docset {\n  return !!repoOrDocset && 'scopingQuery' in repoOrDocset\n}\n\nexport function isRepository(repoOrDocset: CopilotChatRepo | Docset | undefined): repoOrDocset is CopilotChatRepo {\n  return !!repoOrDocset && !isDocset(repoOrDocset)\n}\n\nexport function referencesAreEqual(a: CopilotChatReference | undefined, b: CopilotChatReference | undefined): boolean {\n  // if both are undefined, they're equal\n  if (a === b) {\n    return true\n  }\n\n  // if either is undefined now, they are not equal\n  if (a === undefined || b === undefined) {\n    return false\n  }\n\n  return referenceID(a) === referenceID(b)\n}\n\nexport function referenceArraysAreEqual(\n  a: CopilotChatReference[] | undefined,\n  b: CopilotChatReference[] | undefined,\n): boolean {\n  if (a === undefined && b === undefined) return true\n  if (a === undefined || b === undefined) return false\n\n  if (a.length !== b.length) {\n    return false\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (!referencesAreEqual(a[i], b[i])) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function navigateToAllTopics(showTopicPicker: (show: boolean) => void, mode: CopilotChatMode) {\n  showTopicPicker(true)\n  if (mode === 'immersive') {\n    window.history.pushState(null, '', `${COPILOT_PATH}`)\n  }\n}\n\nexport function isFileReference(reference: CopilotChatReference): reference is FileReference {\n  return reference.type === 'file'\n}\n\ntype Author = {\n  name: string\n  avatarURL: string\n  type: 'user' | 'copilot' | 'agent'\n}\n\n/**\n * Returns the author of a message.\n */\nexport function findAuthor(message: CopilotChatMessage, currentUserLogin: string): Author {\n  if (message.role === 'user') {\n    return {\n      name: currentUserLogin,\n      avatarURL: `/${currentUserLogin}.png`,\n      type: 'user',\n    }\n  }\n\n  if (message.references) {\n    const agentReference = message.references.find(ref => ref.type === 'github.agent') as GitHubAgentReference | null\n    if (agentReference) {\n      return {\n        name: agentReference.login,\n        avatarURL: agentReference.avatarURL,\n        type: 'agent',\n      }\n    }\n  }\n\n  return {\n    name: 'Copilot',\n    avatarURL: '',\n    type: 'copilot',\n  }\n}\n\nexport function isAgent(author: Author): boolean {\n  return author.type === 'agent'\n}\n\n/**\n * Finds all the agents who have sent messages to the thread.\n */\nexport function findAgentCorrespondents(messages: CopilotChatMessage[]): Author[] {\n  const agentMessages = messages.map(message => findAuthor(message, '')).filter(author => author?.type === 'agent')\n  const uniqueAgents = new Map<string, Author>()\n  for (const agent of agentMessages) {\n    uniqueAgents.set(agent.name, agent)\n  }\n  return Array.from(uniqueAgents.values())\n}\n\nexport function isThreadOlderThan4Hours(thread: CopilotChatThread) {\n  const threadUpdatedAt = new Date(thread.updatedAt).getTime()\n  const now = new Date().getTime()\n  const timeSinceLastMessage = now - threadUpdatedAt\n  const fourHours = 4 * 60 * 60 * 1000\n\n  return timeSinceLastMessage > fourHours\n}\n","import {verifiedFetch} from '@github-ui/verified-fetch'\nimport {useMutation, useQueries, useQueryClient} from '@tanstack/react-query'\nimport {useCallback, useEffect, useRef, useState} from 'react'\n\nimport {copilotLocalStorage} from './copilot-local-storage'\nimport {useChatPanelReferenceContext, useChatState} from './CopilotChatContext'\nimport {useChatManager} from './CopilotChatManagerContext'\n\nexport interface IndexingState {\n  code: TopicIndexStatus\n  docs: TopicIndexStatus\n  requestStatus: CanIndexStatus\n}\n\ninterface IndexingStateResponse {\n  code_status: TopicIndexStatus\n  docs_status: TopicIndexStatus\n  can_index: CanIndexStatus\n}\n\nexport enum TopicIndexStatus {\n  Unknown = 'unknown',\n  Indexing = 'indexing',\n  Indexed = 'indexed',\n  Unindexed = 'not_indexed',\n}\n\nexport enum CanIndexStatus {\n  Unknown = 'unknown',\n  CanIndex = 'ok',\n  NotFound = 'not_found',\n  Unauthorized = 'unauthorized',\n  Forbidden = 'forbidden',\n  ServiceUnavailable = 'service_unavailable',\n  Requested = 'requested',\n  RequestFailed = 'request_failed',\n  QuotaExhausted = 'quota_exhausted',\n}\n\ninterface FilterWorkerResponse {\n  query: string\n  list: string[]\n}\n\nexport const MIN_PANEL_HEIGHT = 256\nexport const MIN_PANEL_WIDTH = 400\n\nexport function useFilter(\n  list: string[] | null,\n  query: string,\n  workerPath: string | undefined,\n): [string[], boolean, () => void] {\n  const workerRef = useRef<Worker>()\n  const lastQueryRef = useRef<string>()\n  const lastMatchesRef = useRef<string[]>([])\n  const isWorkerWorking = useRef<boolean>(false)\n  const [matches, setMatches] = useState<string[]>([])\n  const [searching, setSearching] = useState<boolean>(true)\n\n  const clearMatches = useCallback(() => {\n    setMatches([])\n    setSearching(false)\n  }, [])\n\n  const createWorker = useCallback(() => {\n    if (!workerPath || !list) return\n\n    try {\n      const worker = new Worker(workerPath)\n      worker.onmessage = ({data}: {data: FilterWorkerResponse}) => {\n        isWorkerWorking.current = false\n        setMatches(data.list)\n        setSearching(false)\n        lastQueryRef.current = data.query\n        lastMatchesRef.current = data.list\n      }\n\n      workerRef.current = worker\n    } catch (e) {\n      // TODO: handle when worker cannot be created\n      // eslint-disable-next-line no-console\n      console.warn('Web workers are not available: ', e)\n    }\n  }, [workerPath, list])\n\n  const postWorkerMessage = useCallback(\n    (newQuery: string) => {\n      if (isWorkerWorking.current) {\n        workerRef.current?.terminate()\n        createWorker()\n      }\n\n      const usePreviousMatches =\n        lastQueryRef.current && newQuery.startsWith(lastQueryRef.current) && lastMatchesRef.current.length\n\n      setSearching(true)\n      isWorkerWorking.current = true\n      workerRef.current?.postMessage({baseList: usePreviousMatches ? lastMatchesRef.current : list, query: newQuery})\n    },\n    [list, createWorker],\n  )\n\n  useEffect(() => {\n    createWorker()\n    return () => workerRef.current?.terminate()\n  }, [createWorker])\n\n  useEffect(() => {\n    postWorkerMessage(query)\n  }, [query, postWorkerMessage])\n\n  if (!workerPath) return [[], false, () => {}]\n\n  return [matches, searching, clearMatches]\n}\n\nexport function useReposIndexingState(\n  nwos: string[],\n  isTopicDocset: boolean,\n  checkKBStatus: boolean = false,\n): [IndexingState, () => void] {\n  const client = useQueryClient()\n\n  const invalidateIndexingStatus = useCallback(\n    () => Promise.all(nwos.map(nwo => client.invalidateQueries({queryKey: ['repo-indexing-state', nwo]}))),\n    [client, nwos],\n  )\n\n  const results = useQueries({\n    queries: nwos.map(nwo => ({\n      queryKey: ['repo-indexing-state', nwo],\n      queryFn: () => fetchIndexingStatus(nwo),\n      placeholderData: {\n        requestStatus: CanIndexStatus.Unknown,\n        code: TopicIndexStatus.Unknown,\n        docs: TopicIndexStatus.Unknown,\n      },\n      staleTime: Infinity,\n    })),\n  })\n\n  const {mutate: triggerIndexingForRepos} = useMutation({\n    mutationKey: ['repo-indexing-state'],\n    mutationFn: () => triggerIndexing(nwos, isTopicDocset),\n    onSuccess: invalidateIndexingStatus,\n  })\n\n  const aggregatedIndexingStatus = aggregateResults(\n    results.map(r => r.data!),\n    checkKBStatus,\n  )\n\n  const isIndexingInProgress =\n    aggregatedIndexingStatus.requestStatus === CanIndexStatus.Requested ||\n    aggregatedIndexingStatus.code === TopicIndexStatus.Indexing ||\n    aggregatedIndexingStatus.docs === TopicIndexStatus.Indexing\n\n  useInterval(() => void invalidateIndexingStatus(), isIndexingInProgress ? 10000 : 0)\n\n  return [aggregatedIndexingStatus, () => triggerIndexingForRepos()]\n}\n\nexport function useShowTopicPicker() {\n  const state = useChatState()\n  const manager = useChatManager()\n\n  useEffect(() => {\n    manager.showTopicPicker(\n      (!state.selectedThreadID || state.mode === 'assistive') && state.messages.length === 0 && !state.currentTopic,\n    )\n    // When the thread updates, see if we need to show a blank thread.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.selectedThreadID])\n}\n\nexport function useResizablePanel() {\n  const initialPanelHeight = copilotLocalStorage.getPanelHeight()\n  const initialPanelWidth = copilotLocalStorage.getPanelWidth()\n  const resizeStartY = useRef<number | null>(null)\n  const resizeStartHeight = useRef(initialPanelHeight)\n  const newHeight = useRef(initialPanelHeight)\n  const resizeStartX = useRef<number | null>(null)\n  const resizeStartWidth = useRef(initialPanelWidth)\n  const newWidth = useRef(initialPanelWidth)\n  const [panelHeight, setPanelHeight] = useState(initialPanelHeight)\n  const [panelWidth, setPanelWidth] = useState(initialPanelWidth)\n  const remSize = useRef(0)\n\n  useEffect(() => {\n    remSize.current = parseFloat(getComputedStyle(document.documentElement).fontSize)\n  }, [])\n\n  const getPanelHeight = (height: number) => {\n    return Math.min(Math.max(height, MIN_PANEL_HEIGHT), window.innerHeight - remSize.current)\n  }\n\n  const getPanelWidth = (width: number) => {\n    return Math.min(Math.max(width, MIN_PANEL_WIDTH), window.innerWidth - 2 * remSize.current)\n  }\n\n  const resize = useCallback((e: MouseEvent) => {\n    if (resizeStartY.current !== null) {\n      const dy = resizeStartY.current - e.clientY\n      const height = getPanelHeight(resizeStartHeight.current + dy)\n      setPanelHeight(height)\n      newHeight.current = height\n    }\n    if (resizeStartX.current !== null) {\n      const dx = resizeStartX.current - e.clientX\n      const width = getPanelWidth(resizeStartWidth.current + dx)\n      setPanelWidth(width)\n      newWidth.current = width\n    }\n  }, [])\n\n  const stopResize = useCallback(() => {\n    window.removeEventListener('mousemove', resize)\n    window.removeEventListener('mouseup', stopResize)\n    if (resizeStartY.current !== null) {\n      // use newHeight ref since panelHeight might not be updated yet.\n      copilotLocalStorage.setPanelHeight(newHeight.current)\n      resizeStartY.current = null\n    }\n    if (resizeStartX.current !== null) {\n      copilotLocalStorage.setPanelWidth(newWidth.current)\n      resizeStartX.current = null\n    }\n  }, [resize])\n\n  const startResize = useCallback(\n    (e: React.MouseEvent, horizontal: boolean, vertical: boolean) => {\n      if (e.button === 0) {\n        e.preventDefault()\n        if (vertical) {\n          resizeStartY.current = e.clientY\n          resizeStartHeight.current = panelHeight\n        }\n        if (horizontal) {\n          resizeStartX.current = e.clientX\n          resizeStartWidth.current = panelWidth\n        }\n        window.addEventListener('mousemove', resize)\n        window.addEventListener('mouseup', stopResize)\n      }\n    },\n    [panelHeight, panelWidth, resize, stopResize],\n  )\n\n  const onResizerKeyDown = useCallback(\n    (e: React.KeyboardEvent) => {\n      // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      if (e.key === 'ArrowUp') {\n        const newPanelHeight = getPanelHeight(panelHeight + 4)\n        setPanelHeight(newPanelHeight)\n        copilotLocalStorage.setPanelHeight(newPanelHeight)\n        e.preventDefault()\n        // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      } else if (e.key === 'ArrowDown') {\n        const newPanelHeight = getPanelHeight(panelHeight - 4)\n        setPanelHeight(newPanelHeight)\n        copilotLocalStorage.setPanelHeight(newPanelHeight)\n        e.preventDefault()\n        // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      } else if (e.key === 'ArrowRight') {\n        const newPanelWidth = getPanelWidth(panelWidth - 4)\n        setPanelWidth(newPanelWidth)\n        copilotLocalStorage.setPanelWidth(newPanelWidth)\n        e.preventDefault()\n        // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      } else if (e.key === 'ArrowLeft') {\n        const newPanelWidth = getPanelWidth(panelWidth + 4)\n        setPanelWidth(newPanelWidth)\n        copilotLocalStorage.setPanelWidth(newPanelWidth)\n        e.preventDefault()\n      }\n    },\n    [panelHeight, panelWidth],\n  )\n\n  return {panelWidth, panelHeight, startResize, onResizerKeyDown}\n}\n\nexport function useSidePanelPositionStyles(open: boolean): {left?: string; bottom?: string} {\n  const [positionStyles, setPositionStyles] = useState({})\n  const panelRef = useChatPanelReferenceContext()\n\n  useEffect(() => {\n    if (open && (panelRef?.current?.clientWidth || 480) + 480 >= window.innerWidth) {\n      setPositionStyles({\n        left: `${window.innerWidth - (panelRef?.current?.clientWidth || 480)}px !important`,\n        bottom: '64px',\n      })\n    } else {\n      setPositionStyles({})\n    }\n  }, [open, panelRef])\n\n  return positionStyles\n}\n\nasync function fetchIndexingStatus(nwo: string): Promise<IndexingState> {\n  const res = await fetch(`/search/check_indexing_status?nwo=${encodeURIComponent(nwo)}`, {\n    headers: {Accept: 'application/json', 'X-Requested-With': 'XMLHttpRequest'},\n  })\n\n  if (!res.ok) {\n    return {\n      requestStatus: CanIndexStatus.RequestFailed,\n      code: TopicIndexStatus.Unknown,\n      docs: TopicIndexStatus.Unknown,\n    }\n  }\n\n  const data = (await res.json()) as IndexingStateResponse\n\n  return {\n    requestStatus: data.can_index,\n    code: data.code_status,\n    docs: data.docs_status,\n  }\n}\n\nasync function triggerIndexing(nwos: string[], onlyDocs: boolean) {\n  const nwosParam =\n    nwos.length === 1 ? `nwo=${encodeURIComponent(nwos[0]!)}` : `nwos=${encodeURIComponent(JSON.stringify(nwos))}`\n\n  return verifiedFetch(`/search/index_embeddings?${nwosParam}&index_code=${!onlyDocs}`, {method: 'POST'})\n}\n\nfunction aggregateResults(repoStates: IndexingState[], checkKBStatus: boolean): IndexingState {\n  return {\n    requestStatus: aggregateCanIndexStatuses(repoStates.map(s => s.requestStatus)),\n    code: aggregateTopicIndexStatuses(repoStates.map(s => s.code)),\n    docs: checkKBStatus\n      ? KBStatusResults(repoStates.map(s => s.docs))\n      : aggregateTopicIndexStatuses(repoStates.map(s => s.docs)),\n  }\n}\n\nfunction KBStatusResults(statuses: TopicIndexStatus[]): TopicIndexStatus {\n  // If all repos are in the process of being indexed or unindexed, the KB is unindexed\n  if (statuses.every(s => s === TopicIndexStatus.Indexing || s === TopicIndexStatus.Unindexed))\n    return TopicIndexStatus.Unindexed\n  // If the above is false, then some repos are indexed (or unknown) and some are indexing, the KB is partially indexed\n  if (statuses.some(s => s === TopicIndexStatus.Indexing)) return TopicIndexStatus.Indexing\n  return TopicIndexStatus.Unknown\n}\n\nfunction aggregateTopicIndexStatuses(statuses: TopicIndexStatus[]): TopicIndexStatus {\n  if (statuses.some(s => s === TopicIndexStatus.Indexed)) return TopicIndexStatus.Indexed\n  if (statuses.some(s => s === TopicIndexStatus.Unindexed)) return TopicIndexStatus.Unindexed\n  if (statuses.some(s => s === TopicIndexStatus.Indexing)) return TopicIndexStatus.Indexing\n  return TopicIndexStatus.Unknown\n}\n\nfunction aggregateCanIndexStatuses(statuses: CanIndexStatus[]): CanIndexStatus {\n  if (statuses.length === 0) return CanIndexStatus.Unknown\n\n  if (statuses.every(s => s === CanIndexStatus.CanIndex)) return CanIndexStatus.CanIndex\n  if (statuses.some(s => s === CanIndexStatus.Unknown)) return CanIndexStatus.Unknown\n  // The remaining statuses are various error conditions - just return the first one\n  return statuses.find(s => s !== CanIndexStatus.CanIndex && s !== CanIndexStatus.Unknown)!\n}\n\nfunction useInterval(callback: () => void, delay: number) {\n  const intervalRef = useRef<number | undefined>(undefined)\n  const savedCallback = useRef(callback)\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n  useEffect(() => {\n    const tick = () => savedCallback.current()\n    if (delay > 0) {\n      intervalRef.current = window.setInterval(tick, delay)\n      return () => window.clearInterval(intervalRef.current)\n    }\n  }, [delay])\n  return intervalRef\n}\n","import type {APIResult} from './copilot-chat-types'\n\n/**\n * Caches results of API calls based on the parameters. Ensures that only one request is dispatched for the same parameters.\n */\nexport class ApiCache<TResult, TParams extends string[]> {\n  private readonly separator = '-!-'\n  private cache = new Map<string, Promise<APIResult<TResult>>>()\n\n  public constructor(private fetchFn: (...params: TParams) => Promise<APIResult<TResult>>) {}\n\n  public async get(...params: TParams): Promise<APIResult<TResult>> {\n    const key = params.join(this.separator)\n    const cached = this.cache.get(key)\n    if (cached) {\n      return cached\n    } else {\n      const promise = this.fetchFn(...params)\n      this.cache.set(key, promise)\n      const result = await promise\n      if (!result.ok) {\n        this.cache.delete(key)\n      }\n      return promise\n    }\n  }\n}\n","import {CopilotAuthTokenProvider} from '@github-ui/copilot-auth-token'\nimport {blobDetectLanguage, treeListPath} from '@github-ui/paths'\nimport {verifiedFetchJSON} from '@github-ui/verified-fetch'\n\nimport {ApiCache} from './api-cache'\nimport type {\n  APIResult,\n  APIStreamingResult,\n  BlackbirdSuggestion,\n  CopilotChatAgent,\n  CopilotChatMessage,\n  CopilotChatOrg,\n  CopilotChatReference,\n  CopilotChatRepo,\n  CopilotChatSuggestions,\n  CopilotChatThread,\n  CopilotClientConfirmation,\n  Docset,\n  FailedAPIResult,\n  FileReference,\n  KnowledgeBasesResponse,\n  ReferenceDetails,\n  SuggestionsResponse,\n} from './copilot-chat-types'\nimport {getCopilotExperiments} from './experiments'\n\nconst BLACKBIRD_SUGGESTION_KIND = 'SUGGESTION_KIND_SYMBOL'\nconst HYDRATABLE_REFERENCE_TYPES = new Set(['snippet', 'file', 'symbol', 'docset', 'repository'])\n\ntype ListMessagesPayload = {\n  thread: CopilotChatThread\n  messages: CopilotChatMessage[]\n}\n\ntype FeedbackPayload = {\n  feedback?: string\n  textResponse?: string\n  feedbackChoice?: string[]\n  isContactedChecked?: string | null\n  messageId: string\n  threadId: string | undefined\n}\n\ntype APIPayload = CreateMessagePayload\n\ntype CreateMessagePayload = {\n  content: string\n  intent: string\n  references: CopilotChatReference[]\n  currentURL: string\n  streaming?: boolean\n  context: CopilotChatReference[]\n  confirmations: CopilotClientConfirmation[]\n  customInstructions?: string[]\n  knowledgeBases?: Docset[]\n}\n\nexport const ERRORS: {[key: number]: string} = {\n  400: 'This message could not be processed.',\n  401: 'You’re not authorized to use Copilot.',\n  403: 'This response could not be shown as it violates GitHub’s content policies.',\n  404: 'Resource not found. Please try again.',\n  408: 'Your network connection was interrupted. Please try again.',\n  413: 'Message too large. Please shorten it or remove some references and try again.',\n  429: 'GitHub API rate limit exceeded. Please wait and try again.',\n}\n\ninterface FetchThreadsParams {\n  /* Filter threads to just those with the specified name, case sensitive */\n  name?: string | undefined | null\n}\n\nexport class CopilotChatService {\n  apiURL: string\n  urlPathPrefix = '/github-copilot/chat'\n  ERROR_MSG = \"I'm sorry but there was an error. Please try again.\"\n  docsetsPromise: Promise<APIResult<KnowledgeBasesResponse>> | undefined = undefined\n  repoDetailsCache = new Map<number | string, CopilotChatRepo>()\n  listMessagesCache: ListMessagesPayload | undefined = undefined\n  copilotAuthTokenProvider: CopilotAuthTokenProvider\n\n  constructor(apiURL: string, ssoOrgs: CopilotChatOrg[]) {\n    this.apiURL = apiURL\n    this.copilotAuthTokenProvider = new CopilotAuthTokenProvider(ssoOrgs.map(org => org.id))\n  }\n\n  async fetchThreads(params: FetchThreadsParams = {}): Promise<APIResult<CopilotChatThread[]>> {\n    const queryParams = new URLSearchParams()\n    if (typeof params.name === 'string') queryParams.set('name', params.name)\n    const pathWithParams = `/threads?${queryParams.toString()}`\n    const res = await this.makeCAPIRequest(pathWithParams, 'GET')\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload: CopilotChatThread[] = (await res.json()).threads || []\n    return {status: res.status, ok: true, payload}\n  }\n\n  async createThread(): Promise<APIResult<CopilotChatThread>> {\n    const res = await this.makeCAPIRequest(`/threads`, 'POST')\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload: CopilotChatThread = (await res.json()).thread\n    return {status: res.status, ok: true, payload}\n  }\n\n  async deleteThread(threadID: string): Promise<APIResult<null>> {\n    const res = await this.makeCAPIRequest(`/threads/${threadID}`, 'DELETE')\n    if (!res.ok) return res as FailedAPIResult\n\n    return {status: res.status, ok: true, payload: null}\n  }\n\n  async renameThread(threadID: string, newName: string): Promise<APIResult<string>> {\n    const body = {generate: false, name: newName}\n\n    const res = await this.makeCAPIRequest(`/threads/${threadID}/name`, 'PATCH', body)\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload: string = (await res.json()).name || ''\n    return {status: res.status, ok: true, payload}\n  }\n\n  async clearThread(threadID: string): Promise<APIResult<null>> {\n    const res = await this.makeCAPIRequest(`/threads/${threadID}/clear`, 'PATCH')\n    if (!res.ok) return res as FailedAPIResult\n\n    return {status: res.status, ok: true, payload: null}\n  }\n\n  async generateThreadName(threadID: string): Promise<APIResult<string>> {\n    const body = {generate: true, name: ''}\n\n    const res = await this.makeCAPIRequest(`/threads/${threadID}/name`, 'PATCH', body)\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload: string = (await res.json()).name || ''\n    return {status: res.status, ok: true, payload}\n  }\n\n  async listMessages(threadID: string): Promise<APIResult<ListMessagesPayload>> {\n    if (this.listMessagesCache?.thread.id === threadID) {\n      return {status: 200, ok: true, payload: this.listMessagesCache}\n    }\n\n    const res = await this.makeCAPIRequest(`/threads/${threadID}/messages`, 'GET')\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload = await res.json()\n    this.listMessagesCache = payload\n    return {status: res.status, ok: true, payload}\n  }\n\n  async createMessage(\n    threadID: string,\n    content: string,\n    intent: string,\n    references: CopilotChatReference[],\n    customInstructions?: string[],\n  ): Promise<APIResult<CopilotChatMessage>> {\n    this.listMessagesCache = undefined\n    const res = await this.makeCAPIRequest(`/threads/${threadID}/messages`, 'POST', {\n      content,\n      intent,\n      references,\n      currentURL: window.location.href,\n      customInstructions,\n    })\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload: CopilotChatMessage = (await res.json()).message\n    return {status: res.status, ok: true, payload}\n  }\n\n  async createMessageStreaming(\n    threadID: string,\n    content: string,\n    intent: string,\n    references: CopilotChatReference[],\n    context: CopilotChatReference[],\n    confirmations: CopilotClientConfirmation[],\n    customInstructions?: string[],\n    knowledgeBases?: Docset[],\n  ): Promise<APIStreamingResult> {\n    this.listMessagesCache = undefined\n    const body: CreateMessagePayload = {\n      content,\n      intent,\n      references,\n      context,\n      currentURL: window.location.href,\n      streaming: true,\n      confirmations,\n      customInstructions,\n      knowledgeBases,\n    }\n\n    const res = await this.makeCAPIRequest(`/threads/${threadID}/messages`, 'POST', body, true)\n    if (!res.ok) return res as FailedAPIResult\n\n    return {status: res.status, ok: true, response: res}\n  }\n\n  async sendFeedback({feedback, feedbackChoice, messageId, threadId, textResponse}: FeedbackPayload) {\n    const body = {\n      feedback,\n      feedback_choice: feedbackChoice,\n      message_id: messageId,\n      thread_id: threadId,\n      text_response: textResponse,\n    }\n    const res = await this.makeDotcomRequest(`${this.urlPathPrefix}/feedback`, 'POST', body)\n    if (!res.ok) return res as FailedAPIResult\n\n    return {status: res.status, ok: true, payload: null}\n  }\n\n  async listDocsets(): Promise<APIResult<Docset[]>> {\n    const response = await this.fetchDocsetsResponse()\n    if (!response.ok) return response\n    return {status: 200, ok: true, payload: response.payload.knowledgeBases}\n  }\n\n  // The response from the server will be null if the user has access to one or more knowledge bases. That is because\n  // we only use the administratedCopilotEnterpriseOrganizations if there are no knowledge bases. So to save executing a bunch\n  // of queries to get administrated orgs and check if they have Copilot Enterprise we just return null in that case.\n  //\n  // We could have made a separate API endpoint to get a list of administratedCopilotEnterpriseOrganizations and only called it\n  // if there are no knowledge bases, but this would result in a layout shift when the response comes in and we render\n  // a different set of HTML if there are orgs.\n  //\n  // In the future we may need a separate endpoint if we need administratedCopilotEnterpriseOrganizations elsewhere but for now\n  // this is a much higher performance way to get this information without layout shifting.\n  //\n  // See the issue this fixes: https://github.com/github/copilot-core-productivity/issues/1443\n  async listAdministratedCopilotEnterpriseOrganizations(): Promise<APIResult<CopilotChatOrg[] | null>> {\n    const response = await this.fetchDocsetsResponse()\n    if (!response.ok) return response\n    return {status: 200, ok: true, payload: response.payload.administratedCopilotEnterpriseOrganizations}\n  }\n\n  fetchDocsetsResponse(): Promise<APIResult<KnowledgeBasesResponse>> {\n    if (!this.docsetsPromise) {\n      this.docsetsPromise = this.docsetRequestPromise()\n    }\n    return this.docsetsPromise\n  }\n\n  async docsetRequestPromise(): Promise<APIResult<KnowledgeBasesResponse>> {\n    const res = await this.makeDotcomRequest(`/github-copilot/docs/docsets`, 'GET')\n    if (!res.ok) return res as FailedAPIResult\n    const payload = (await res.json()) as KnowledgeBasesResponse\n    return {status: 200, ok: true, payload}\n  }\n\n  async deleteDocset(docset: Docset) {\n    const res = await this.makeDotcomRequest(`/copilot/docsets/${docset.id}`, 'DELETE')\n    if (!res.ok) return res as FailedAPIResult\n    return {status: res.status, ok: true, payload: null}\n  }\n\n  async listRepoFiles(repo: CopilotChatRepo): Promise<APIResult<string[]>> {\n    const path = treeListPath({repo, commitOid: repo.commitOID, includeDirectories: false})\n    return this.repoFilesCache.get(path)\n  }\n\n  private listRepoFilesImpl = async (path: string): Promise<APIResult<string[]>> => {\n    const res = await this.makeDotcomRequest(path, 'GET')\n    if (!res.ok) return res as FailedAPIResult\n\n    const payload = (await res.json()).paths || []\n\n    return {status: 200, ok: true, payload}\n  }\n  private repoFilesCache = new ApiCache(this.listRepoFilesImpl)\n\n  async querySymbols(repo: CopilotChatRepo, query: string): Promise<APIResult<BlackbirdSuggestion[]>> {\n    return this.querySymbolsCache.get(repo.ownerLogin, repo.name, query)\n  }\n\n  private querySymbolsImpl = async (\n    ownerLogin: string,\n    repo: string,\n    query: string,\n  ): Promise<APIResult<BlackbirdSuggestion[]>> => {\n    const response = await this.makeDotcomRequest(\n      `/search/suggestions?query=repo:${ownerLogin}/${repo} ${query}`,\n      'GET',\n    )\n\n    if (!response.ok) {\n      return response as FailedAPIResult\n    }\n\n    const payload = (await response.json()) as SuggestionsResponse\n\n    return {\n      status: 200,\n      ok: true,\n      payload: payload.suggestions.filter(suggestion => suggestion.kind === BLACKBIRD_SUGGESTION_KIND),\n    }\n  }\n  private querySymbolsCache = new ApiCache(this.querySymbolsImpl)\n\n  async fetchImplicitContext(\n    url: string,\n    owner: string,\n    repo: string,\n  ): Promise<APIResult<CopilotChatReference | CopilotChatReference[]>> {\n    const response = await this.makeDotcomRequest(\n      `${this.urlPathPrefix}/implicit-context/${owner}/${repo}/${encodeURIComponent(url)}`,\n      'GET',\n    )\n\n    if (!response.ok) return response as FailedAPIResult\n\n    return {\n      status: response.status,\n      ok: response.ok,\n      payload: await response.json(),\n    }\n  }\n\n  async fetchRepo(repoID: number | string): Promise<APIResult<CopilotChatRepo>> {\n    let payload: CopilotChatRepo\n    if (this.repoDetailsCache.has(repoID)) {\n      payload = this.repoDetailsCache.get(repoID)!\n    } else {\n      const res = await this.makeDotcomRequest(`${this.urlPathPrefix}/repositories/${repoID}`, 'GET')\n      if (!res.ok) return res as FailedAPIResult\n\n      payload = await res.json()\n      this.repoDetailsCache.set(repoID, payload)\n    }\n\n    return {status: 200, ok: true, payload}\n  }\n\n  async listAgents(agentsPath: string): Promise<APIResult<CopilotChatAgent[]>> {\n    const res = await verifiedFetchJSON(agentsPath)\n    if (!res.ok) return {status: res.status, ok: false, error: ERRORS[res.status] || this.ERROR_MSG}\n    const payload = await res.json()\n    return {status: res.status, ok: res.ok, payload}\n  }\n\n  async hydrateReference<T extends CopilotChatReference>(reference: T): Promise<APIResult<ReferenceDetails<T>>> {\n    if (!HYDRATABLE_REFERENCE_TYPES.has(reference.type)) {\n      return {\n        status: 204,\n        ok: true,\n        payload: reference as ReferenceDetails<T>,\n      }\n    }\n    const response = await this.makeDotcomRequest(`${this.urlPathPrefix}/reference_details`, 'POST', {reference})\n\n    if (!response.ok) return response as FailedAPIResult\n\n    return {\n      status: response.status,\n      ok: response.ok,\n      payload: await response.json(),\n    }\n  }\n\n  async fetchLanguageForFileReference(reference: FileReference) {\n    const {repoOwner: ownerLogin, repoName: name} = reference\n    const path = window.btoa(reference.path)\n    const repo = {ownerLogin, name}\n    const fetchPath = blobDetectLanguage(repo, path, true)\n\n    const response = await this.makeDotcomRequest(fetchPath, 'GET')\n\n    if (!response.ok) return response as FailedAPIResult\n\n    return {\n      status: response.status,\n      ok: response.ok,\n      payload: await response.json(),\n    }\n  }\n\n  async generateSuggestions(\n    context: CopilotChatReference | CopilotChatRepo | Docset,\n    threadID: string,\n  ): Promise<APIResult<CopilotChatSuggestions>> {\n    const body = {context: [context], currentUrl: `${window.location.href}`}\n\n    const response = await this.makeCAPIRequest(`/threads/${threadID}/suggestions`, 'POST', body)\n    if (!response.ok) return response as FailedAPIResult\n    const payload = await response.json()\n\n    return {\n      status: response.status,\n      ok: response.ok,\n      payload,\n    }\n  }\n\n  protected async makeDotcomRequest(\n    path: string,\n    method: 'GET' | 'POST' | 'DELETE' | 'PATCH' | 'PUT',\n    body?: object | APIPayload,\n  ): Promise<Response | FailedAPIResult> {\n    const headers: {[key: string]: string} = {}\n    for (const exp of getCopilotExperiments()) {\n      const components = exp.split('=')\n      const name = components[0]?.replaceAll('_', '-')\n      let value = '1'\n      if (components.length > 1) {\n        value = components[1]!\n      }\n      headers[`X-Experiment-${name}`] = value\n    }\n\n    const token = await this.copilotAuthTokenProvider.getAuthToken()\n    headers['X-Copilot-Api-Token'] = token.value\n\n    try {\n      const res = await verifiedFetchJSON(path, {method, body, headers})\n      if (res.ok) return res\n      return {status: res.status, ok: false, error: ERRORS[res.status] || this.ERROR_MSG}\n    } catch (error) {\n      return {status: 500, ok: false, error: this.ERROR_MSG}\n    }\n  }\n\n  private get directConnectConfiguration() {\n    return process.env.NODE_ENV === 'development'\n      ? {integrationID: 'copilot-chat-dev'}\n      : {integrationID: 'copilot-chat'}\n  }\n\n  private async makeCAPIRequest(\n    path: string,\n    method: 'GET' | 'POST' | 'DELETE' | 'PATCH',\n    body?: object | APIPayload,\n    streamingResponse = false,\n    basePath = '/github/chat',\n  ): Promise<Response | FailedAPIResult> {\n    try {\n      const baseURL = this.apiURL\n\n      const token = await this.copilotAuthTokenProvider.getAuthToken()\n\n      const headers: {[key: string]: string} = {\n        Authorization: token.authorizationHeaderValue,\n        'copilot-integration-id': this.directConnectConfiguration.integrationID,\n      }\n      for (const exp of getCopilotExperiments()) {\n        const components = exp.split('=')\n        const name = components[0]?.replaceAll('_', '-')\n        let value = '1'\n        if (components.length > 1) {\n          value = components[1]!\n        }\n        headers[`X-Experiment-${name}`] = value\n      }\n\n      if (streamingResponse) {\n        headers['Content-Type'] = 'text/event-stream'\n      }\n\n      const res = await fetch(baseURL + basePath + path, {\n        method,\n        mode: 'cors',\n        cache: 'no-cache',\n        headers,\n        body: JSON.stringify(body),\n      })\n\n      if (res.ok) return res\n      return {status: res.status, ok: false, error: ERRORS[res.status] || this.ERROR_MSG}\n    } catch (error) {\n      return {status: 500, ok: false, error: this.ERROR_MSG}\n    }\n  }\n}\n","import type {SafeHTMLString} from '@github-ui/safe-html'\n\nexport type TopicItem = {\n  key: string\n  actionItem: JSX.Element\n}\n\nexport type CopilotChatRepo = {\n  id: number\n  name: string\n  ownerLogin: string\n  ownerType: 'User' | 'Organization'\n  readmePath?: string\n  description?: string\n  commitOID: string\n  ref: string\n  refInfo: {\n    name: string\n    type: 'branch' | 'tag'\n  }\n  visibility: string\n  languages?: Array<{name: string; percent: number}>\n}\n\nexport type CopilotChatPlan = Record<string, never>\n\nexport type CopilotChatOrg = {\n  id: string\n  login: string\n  avatarUrl: string\n}\n\nexport type CopilotChatThread = {\n  id: string\n  name: string\n  repoID?: number\n  currentReferences: CopilotChatReference[] | undefined\n  createdAt: string\n  updatedAt: string\n}\n\nexport type CopilotChatSuggestions = {\n  referenceType?: string\n  suggestions: GeneratedSuggestion[]\n}\n\nexport type GeneratedSuggestion = {\n  question: string\n  skill: string\n}\n\nexport type SkillExecution = {\n  slug: string\n  status: FunctionCalledStatus\n  arguments?: string\n  errorMessage?: string\n  references?: CopilotChatReference[]\n}\n\nexport type CopilotChatAgent = {\n  name: string\n  slug: string\n  avatarUrl: string\n  integrationUrl: string\n}\n\nexport type CopilotChatMessage = {\n  id: string\n  intent?: string\n  role: 'user' | 'assistant'\n  content?: string\n  createdAt: string\n  threadID: string\n  error?: ChatError\n  references: CopilotChatReference[] | null\n  skillExecutions?: SkillExecution[]\n  copilotAnnotations?: CopilotAnnotations\n  interrupted?: boolean\n  confirmations?: CopilotAgentConfirmation[] | null // confirmation from copilot/agent\n  clientConfirmations?: CopilotClientConfirmation[] | null // users response to agent confirmation\n  agentErrors?: CopilotAgentError[]\n}\n\nexport type CopilotAgentConfirmation = {\n  title: string\n  message: string\n  confirmation: object\n}\n\nexport type CopilotAgentError = {\n  type: string\n  code: string\n  message: string\n  identifier: string\n}\n\nexport type CopilotClientConfirmation = {\n  state: CopilotClientConfirmationState\n  confirmation: object\n}\n\nexport type CopilotClientConfirmationState = 'accepted' | 'dismissed'\n\nexport type CopilotAnnotations = {\n  CodeVulnerability?: CodeVulnerability[]\n}\n\ntype CodeVulnerability = {\n  startOffset: number\n  endOffset: number\n  details: CodeVulnerabilityDetails\n}\n\ntype CodeVulnerabilityDetails = {\n  type: string\n  uiType: string\n  description: string\n  uiDescription: string\n}\n\nexport type RepositoryReference = CopilotChatRepo & {\n  type: 'repository'\n}\n\nexport interface ReferenceHeaderInfo {\n  blobSize: string\n  displayName: string\n  isLfs: boolean\n  lineInfo: {truncatedLoc: number; truncatedSloc: number}\n  rawBlobUrl: string\n  viewable: boolean\n}\n\ntype APIResponseResource =\n  | {resourceType: 'Repository'; data: Omit<RepositoryAPIReference, 'type'>}\n  | {resourceType: 'Issue'; data: Omit<IssueAPIReference, 'type'>}\n  | {resourceType: 'Release'; data: Omit<ReleaseAPIReference, 'type'>}\n  | {resourceType: 'PullRequest'; data: Omit<PullRequestAPIReference, 'type'>}\n  | {resourceType: 'Commit'; data: Omit<CommitAPIReference, 'type'>}\n  | {resourceType: 'Topic'; data: Omit<TopicAPIReference, 'type'>}\n\nexport type APIResponseReference = APIResponseResource & {\n  type: 'api-response'\n  id: number\n  repo?: string\n}\n\nexport type FileReference = {\n  type: 'file' | 'file-v2'\n  url: string\n  path: string\n  repoID: number\n  repoOwner: string\n  repoName: string\n  ref: string\n  commitOID: string\n  languageName?: string\n  languageId?: number\n}\n\nexport type FileChangesReference = {\n  type: 'file-changes'\n  ref: string\n  path: string\n  url: string\n  commits: Array<{\n    oid: string\n    shortSha: string\n    message: string\n    createdAt: string\n    author: {\n      name: string\n      email: string\n      login: string\n    }\n    blameLines: Array<{\n      lineNo: number\n      text: string\n    }>\n  }>\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n}\n\nexport interface FileReferenceDetails extends FileReference {\n  contents: string\n  highlightedContents: SafeHTMLString[]\n  repoIsOrgOwned: boolean\n  range: LineRange\n  expandedRange: LineRange\n  headerInfo: ReferenceHeaderInfo\n}\n\nexport interface FileDiffReference {\n  type: 'file-diff'\n  id: string\n  url: string\n  base: SnippetReference | null // will be null if a file was 'added'\n  head: SnippetReference | null // will be null if a file was 'removed'\n  baseFile: FileReference | null // will be null if a file was 'added'\n  headFile: FileReference | null // will be null if a file was 'removed'\n  // user-selected, shown in location.hash, ex L1-R5\n  // won't be populated in the server props but should be present when calling CAPI\n  selectedRange?: {\n    start?: string\n    end?: string\n  }\n}\n\nexport interface FileDiffReferenceDetails extends FileDiffReference {\n  contents: string\n  highlightedContents: SafeHTMLString[]\n  repoIsOrgOwned: boolean\n  expandedRange: LineRange\n}\n\nexport interface SnippetReference {\n  type: 'snippet'\n  url: string\n  path: string\n  repoID: number\n  repoOwner: string\n  repoName: string\n  ref: string\n  commitOID: string\n  range: LineRange\n  languageID?: number\n  languageName?: string\n  title?: string\n}\n\nexport interface SnippetReferenceDetails extends SnippetReference {\n  contents: string\n  highlightedContents: SafeHTMLString[]\n  repoIsOrgOwned: boolean\n  expandedRange: LineRange\n  headerInfo: ReferenceHeaderInfo\n}\n\nexport interface CommitReference {\n  type: 'commit'\n  oid: string\n  message: string\n  permalink: string\n  author: {\n    name: string\n    email: string\n    login: string\n  }\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n}\n\nexport interface PullRequestReference {\n  type: 'pull-request'\n  title: string\n  url: string\n  commit?: string\n  authorLogin: string\n  repository: CopilotChatRepo\n}\n\nexport const TREE_COMPARISON_REFERENCE_TYPE = 'tree-comparison'\nexport interface TreeComparisonReference {\n  type: typeof TREE_COMPARISON_REFERENCE_TYPE\n  baseRepoId: number\n  headRepoId: number\n  baseRevision: string\n  headRevision: string\n  diffHunks: DiffHunk[]\n}\n\nexport interface DiffHunk {\n  type: 'diff-hunk'\n  changeReference: string\n  diff: string\n  fileName: string\n  headerContext: string\n}\n\nexport interface IssueReference {\n  type: 'issue'\n  id: number\n  number: number\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n  title?: string\n  body?: string\n  state?: string\n  authorLogin?: string\n  url?: string\n  assignees?: string[]\n  pullRequestUrl?: string\n}\n\nexport interface DiscussionReference {\n  type: 'discussion'\n  number: number\n  title: string\n  body: string\n  user: {\n    login: string\n  }\n  state: string\n  id: number\n  url: string\n  authorLogin: string\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n}\n\nexport interface ReleaseReference {\n  type: 'release'\n  name?: string\n  tagName?: string\n  url?: string\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n  body?: string\n  isDraft: boolean\n  isPrerelease: boolean\n  authorLogin?: string\n  targetCommitish?: string\n}\n\nexport interface ReleaseAPIReference {\n  type: 'release.api'\n  name?: string\n  tag_name: string\n  html_url?: string\n}\n\nexport interface PullRequestAPIReference {\n  type: 'pull-request.api'\n  title?: string\n  html_url?: string\n  number: number\n  repo?: string\n}\n\nexport interface AlertReference {\n  type: 'alert.api'\n  number: number\n  repo?: string\n}\n\nexport interface IssueAPIReference {\n  type: 'issue.api'\n  title?: string\n  html_url: string\n  number: number\n  repo?: string\n  state: string\n}\n\nexport interface RepositoryAPIReference {\n  type: 'repository.api'\n  name: string\n  description?: string\n  html_url?: string\n}\n\nexport interface CommitAPIReference {\n  type: 'commit.api'\n  sha: string\n  commit: {\n    message?: string\n  }\n  html_url?: string\n}\n\nexport interface DiffAPIReference {\n  type: 'diff.api'\n}\n\nexport interface FileAPIReference {\n  type: 'file.api'\n}\n\nexport interface TopicAPIReference {\n  type: 'topic.api'\n  name: string\n  display_name?: string\n  short_description?: string\n}\n\nexport interface TextReference {\n  type: 'text'\n  text?: string\n}\n\nexport interface UnsupportedAPIReference {\n  type: 'unsupported'\n  text?: string\n}\n\nexport interface LineRange {\n  start: number\n  end: number\n}\n\nexport interface CodeNavSymbolReference {\n  type: 'symbol'\n  kind: 'codeNavSymbol'\n  name: string\n  languageID?: number\n  codeNavDefinitions?: CodeNavSymbol[]\n  codeNavReferences?: CodeReference[]\n  languageName?: string\n}\n\nexport interface CodeNavSymbolReferenceDetails extends CodeNavSymbolReference {\n  codeNavDefinitions?: CodeNavSymbolDetails[]\n  codeNavReferences?: CodeReferenceDetails[]\n}\n\nexport interface SuggestionSymbolReference {\n  type: 'symbol'\n  kind: 'suggestionSymbol'\n  name: string\n  languageID?: number\n  suggestionDefinitions?: SuggestionSymbol[]\n}\n\nexport interface SuggestionSymbolReferenceDetails extends SuggestionSymbolReference {\n  suggestionDefinitions?: SuggestionSymbolDetails[]\n}\n\nexport type DocsetReference = {\n  type: 'docset'\n  name: string\n  id: string\n  scopingQuery: string // TODO: is this the correct name for CAPI?\n  avatarUrl: string\n  // Docset references coming from previous threads in CAPI currently don't have their\n  // repos serialized.\n  repos?: string[]\n  description: string\n}\n\nexport type GitHubAgentReference = {\n  type: 'github.agent'\n  login: string\n  avatarURL: string\n}\n\nexport type WebSearchReference = {\n  type: 'web-search'\n  query: string\n  results: Array<{title: string; excerpt: string; url: string}>\n  status: string\n}\n\nexport type SupportDocumentReference = {\n  type: 'support-document'\n  query: string\n  results: Array<{title: string; content: string; url: string}>\n  status: string\n}\n\nexport type JobReference = {\n  type: 'job'\n  id: string\n  repoId: number\n  repoName: string\n  repoOwner: string\n}\n\nexport type PlanReference = {\n  type: 'plan'\n}\n\ntype CodeNavSymbol = {\n  ident: Range\n  extent: Range\n} & CodeSymbol\n\ntype SuggestionSymbol = {\n  identOffset?: ByteOffset\n  extentOffset?: ByteOffset\n} & CodeSymbol\n\ntype CodeSymbol = {\n  kind: string\n  fullyQualifiedName: string\n  repoID: number\n  repoOwner: string\n  repoName: string\n  ref: string\n  commitOID: string\n  path: string\n}\n\ntype CodeReference = {\n  ident: Range\n  repoID: number\n  repoOwner: string\n  repoName: string\n  ref: string\n  commitOID: string\n  path: string\n}\n\ntype SymbolDetails = {\n  repoIsOrgOwned: boolean\n  highlightedContents?: SafeHTMLString[]\n  range?: LineRange\n}\n\nexport type CodeNavSymbolDetails = CodeNavSymbol & SymbolDetails\nexport type SuggestionSymbolDetails = SuggestionSymbol & SymbolDetails\nexport type CodeReferenceDetails = CodeReference & SymbolDetails\n\ntype Range = {\n  start: Position\n  end: Position\n}\n\ntype Position = {\n  line: number\n  column: number\n}\n\ntype ByteOffset = {\n  start: number\n  end: number\n}\n\nexport type CopilotChatReference =\n  | FileReference\n  | FileChangesReference\n  | SnippetReference\n  | FileDiffReference\n  | RepositoryReference\n  | CodeNavSymbolReference\n  | SuggestionSymbolReference\n  | DocsetReference\n  | CommitReference\n  | PullRequestReference\n  | GitHubAgentReference\n  | WebSearchReference\n  | TreeComparisonReference\n  | IssueReference\n  | TextReference\n  | ReleaseReference\n  | DiscussionReference\n  | JobReference\n  | PlanReference\n  | ReleaseAPIReference\n  | PullRequestAPIReference\n  | AlertReference\n  | IssueAPIReference\n  | RepositoryAPIReference\n  | CommitAPIReference\n  | DiffAPIReference\n  | FileAPIReference\n  | TopicAPIReference\n  | APIResponseReference\n  | UnsupportedAPIReference\n\nexport type NumberedCopilotChatReference = CopilotChatReference & {n: number}\n\nexport type CopilotChatReferenceDetails = SnippetReferenceDetails\n\nexport type ReferenceDetails<TReference extends CopilotChatReference> = TReference extends SnippetReference\n  ? SnippetReferenceDetails\n  : TReference extends FileReference\n    ? FileReferenceDetails\n    : TReference extends CodeNavSymbolReference\n      ? CodeNavSymbolReferenceDetails\n      : TReference extends SuggestionSymbolReference\n        ? SuggestionSymbolReferenceDetails\n        : TReference extends FileDiffReference\n          ? FileDiffReferenceDetails\n          : unknown\n\ntype CopilotChatExplainEventPayload = {\n  intent: typeof CopilotChatIntents.explain\n  content: string\n  references: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatAskEventPayload = {\n  intent: typeof CopilotChatIntents.conversation\n  references?: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatAskPrEventPayload = {\n  intent: typeof CopilotChatIntents.conversation\n  references: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatExplainPrEventPayload = {\n  intent: typeof CopilotChatIntents.explainFileDiff\n  content: string\n  references: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatSuggestEventPayload = {\n  intent: typeof CopilotChatIntents.suggest\n  content: string\n  references: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatReviewPrEventPayload = {\n  intent: typeof CopilotChatIntents.reviewPr\n  content: string\n  references: CopilotChatReference[]\n  completion: string\n  thread: CopilotChatThread\n  id?: string\n}\n\ntype CopilotChatStartConversationPayload = {\n  intent: typeof CopilotChatIntents.conversation\n  content: string\n  references: CopilotChatReference[]\n  id?: string\n}\n\nexport type CopilotChatEventPayload =\n  | CopilotChatExplainEventPayload\n  | CopilotChatAskEventPayload\n  | CopilotChatSuggestEventPayload\n  | CopilotChatAskPrEventPayload\n  | CopilotChatExplainPrEventPayload\n  | CopilotChatReviewPrEventPayload\n  | CopilotChatStartConversationPayload\n\nexport const CopilotChatIntents = {\n  explain: 'explain',\n  conversation: 'conversation',\n  suggest: 'suggest',\n  askDocs: 'ask-docs',\n  discussFileDiff: 'discuss-file-diff',\n  explainFileDiff: 'explain-file-diff',\n  reviewPr: 'review-pull-request',\n} as const\nexport type CopilotChatIntentsType = (typeof CopilotChatIntents)[keyof typeof CopilotChatIntents]\n\ninterface ChatErrorBase {\n  type: MessageStreamingErrorType | 'basic'\n  isError: boolean\n  message?: string\n  details?: unknown\n}\n\ninterface BasicChatError extends ChatErrorBase {\n  type: 'basic'\n  isError: true\n}\n\ninterface AgentError<TType extends MessageStreamingErrorType, TDetails> extends ChatErrorBase {\n  type: TType\n  isError: true\n  details: TDetails\n}\n\nexport type AgentUnauthorizedChatError = AgentError<'agentUnauthorized', NotAuthorizedForAgentErrorPayload>\nexport type AgentRequestChatError = AgentError<'agentRequest', AppAgentRequestErrorPayload>\nexport type AgentChatError = AgentUnauthorizedChatError | AgentRequestChatError\n\nexport type ChatError = BasicChatError | AgentChatError\n\nexport type BlackbirdSymbol = {\n  fully_qualified_name: string\n  kind: string\n  ident_start: number\n  ident_end: number\n  extent_start: number\n  extent_end: number\n}\n\nexport interface BlackbirdSuggestion {\n  kind: string\n  query: string\n  repository_nwo: string\n  language_id: number\n  path: string\n  repository_id: number\n  commit_sha: string\n  line_number: number\n  symbol: BlackbirdSymbol | null\n}\n\nexport type SuggestionsResponse = {\n  suggestions: BlackbirdSuggestion[]\n  queryErrors: string[]\n  failed: boolean\n}\n\nexport type KnowledgeBasesResponse = {\n  knowledgeBases: Docset[]\n  administratedCopilotEnterpriseOrganizations: CopilotChatOrg[] | null\n}\n\nexport interface Docset {\n  id: string\n  name: string\n  description: string\n  createdByID: number\n  ownerID: number\n  ownerLogin: string\n  ownerType: string\n  visibility: string\n  scopingQuery: string\n  repos: string[]\n  sourceRepos?: SourceRepo[]\n  visibleOutsideOrg: boolean\n  iconHtml?: SafeHTMLString\n  avatarUrl: string\n  adminableByUser: boolean\n  /**\n   * Orgs which own at least one repo in the docset but that the current user is not currently SSO'd into\n   */\n  protectedOrganizations: string[]\n}\n\nexport interface RepoData {\n  databaseId: number | null | undefined\n  name: string\n  nameWithOwner: string\n  isInOrganization: boolean\n  shortDescriptionHTML: string\n  paths?: string[]\n  owner: {\n    databaseId: number | null | undefined\n    avatarUrl: string\n    login: string\n  }\n}\n\nexport interface DocsetRepo extends RepoData {\n  paths: string[]\n}\n\nexport interface SourceRepo {\n  id: number\n  ownerID: number\n  paths: string[]\n}\n\nexport type MessageStreamingResponse =\n  | MessageStreamingResponseContent\n  | MessageStreamingResponseError\n  | MessageStreamingResponseComplete\n  | MessageStreamingResponseDebug\n  | MessageStreamingResponseFunctionCall\n  | MessageStreamingResponseConfirmation\n  | MessageStreamingResponseAgentError\n\nexport type MessageStreamingResponseContent = {\n  type: 'content'\n  body: string\n}\n\nexport type MessageStreamingResponseDebug = {\n  type: 'debug'\n  body: string\n}\n\nexport const MESSAGE_STREAMING_ERROR_TYPES = [\n  'exception',\n  'filtered',\n  'contentTooLarge',\n  'rateLimit',\n  'agentUnauthorized',\n  'agentRequest',\n  'networkError',\n  'multipleAgentsAttempt',\n] as const\n\ntype MessageStreamingErrorTypes = typeof MESSAGE_STREAMING_ERROR_TYPES\nexport type MessageStreamingErrorType = MessageStreamingErrorTypes[number]\n\nexport type MessageStreamingResponseError = {\n  type: 'error'\n  errorType: MessageStreamingErrorType\n  description: string\n}\n\nexport type MessageStreamingResponseComplete = {\n  type: 'complete'\n  id: string\n  turnID: string\n  createdAt: string\n  intent: string\n  references: CopilotChatReference[] | null\n  copilotAnnotations?: CopilotAnnotations\n}\n\nexport type MessageStreamingResponseFunctionCall = {\n  arguments: string\n  type: 'functionCall'\n  name: string\n  status: FunctionCalledStatus\n  errorMessage: string\n  references: CopilotChatReference[]\n}\n\nexport type MessageStreamingResponseConfirmation = {\n  type: 'confirmation'\n  title: string\n  message: string\n  confirmation: object\n}\n\nexport type MessageStreamingResponseAgentError = {\n  type: 'agentError'\n  agentErrorType: string\n  code: string\n  message: string\n  identifier: string\n}\n\nexport type FunctionArguments =\n  | BingSearchArguments\n  | FilePathSearchArguments\n  | SymbolSearchArguments\n  | CodeSearchArguments\n  | CreateIssueArguments\n  | GetIssueArguments\n  | GetPullRequestCommitsArguments\n  | GetCommitArguments\n  | GetAlertArguments\n  | GetReleaseArguments\n  | GetRepoArguments\n  | JobLogsArguments\n  | GetDiffArguments\n  | GetDiffByRangeArguments\n  | KnowledgeBaseSearchArguments\n  | GetFileArguments\n  | GetFileChangesArguments\n  | GetDiscussionArguments\n  | GetPullRequestArguments\n  | PlanArguments\n  | GitHubAPIArguments\n  | SupportSearchArguments\n\nexport type BingSearchArguments = {kind: 'bing-search'; query: string; freshness?: string}\nexport type SupportSearchArguments = {kind: 'support-search'; rawUserQuery: string}\nexport type CodeSearchArguments = {kind: 'codesearch'; query: string; scopingQuery: string}\nexport type KnowledgeBaseSearchArguments = {kind: 'kb-search'; query: string; kbID: string}\nexport type FilePathSearchArguments = {kind: 'pathsearch'; filename: string; scopingQuery: string}\nexport type GetFileArguments = {kind: 'getfile'; repo: string; path: string; ref?: string}\nexport type GetFileChangesArguments = {kind: 'getfilechanges'; repo: string; path: string; ref: string; max?: number}\nexport type SymbolSearchArguments = {kind: 'show-symbol-definition'; symbolName: string; scopingQuery: string}\nexport type CreateIssueArguments = {\n  kind: 'githubissuecreate'\n  repo: string\n  assignees: string[]\n  labels: string[]\n  title: string\n  body: string\n}\nexport type GetIssueArguments = {kind: 'getissue'; issueNumber: number; repo: string}\nexport type GetAlertArguments = {kind: 'getalert'; url: string}\nexport type GetPullRequestCommitsArguments = {kind: 'getprcommits'; pullRequestNumber: number; repo: string}\nexport type GetCommitArguments = {kind: 'getcommit'; commitish: number; repo: string}\nexport type GetReleaseArguments = {kind: 'getrelease'; repo: string; tagName?: string}\nexport type GetRepoArguments = {kind: 'getrepo'; repo: string}\nexport type JobLogsArguments = {\n  kind: 'get-actions-job-logs'\n  repo: string\n  jobId?: number\n  pullRequestNumber?: number\n  runId?: number\n  workflowPath?: string\n}\nexport type GetDiffArguments = {\n  kind: 'getdiff'\n  baseRepoId: number\n  headRepoId: number\n  baseRevision: string\n  headRevision: string\n}\nexport type GetDiffByRangeArguments = {kind: 'get-diff-by-range'; repo: string; range: string}\nexport type GetDiscussionArguments = {kind: 'getdiscussion'; repo: string; discussionNumber: number; owner: string}\nexport type GetPullRequestArguments = {kind: 'getpullrequest'; pullRequestNumber: number; repo: string}\nexport type PlanArguments = {kind: 'planskill'; user_query: string}\nexport type GitHubAPIArguments = {\n  kind: 'get-github-data'\n  endpoint: string\n  repo: string\n  endpointDescription?: string\n  task?: string\n}\n\nexport const SUPPORTED_FUNCTIONS = [\n  'bing-search',\n  'codesearch',\n  'kb-search',\n  'pathsearch',\n  'show-symbol-definition',\n  'getissue',\n  'getprcommits',\n  'getcommit',\n  'getrelease',\n  'getrepo',\n  'getdiff',\n  'get-diff-by-range',\n  'getfile',\n  'getfilechanges',\n  'getdiscussion',\n  'get-actions-job-logs',\n  'getpullrequest',\n  'getalert',\n  'planskill',\n  'get-github-data',\n  'support-search',\n]\n\nexport type FunctionCalledStatus = 'completed' | 'started' | 'error' | 'unsupported'\n\nexport type NotAuthorizedForAgentErrorPayload = {\n  authorize_url: string\n  client_id: string\n  name: string\n  avatar_url: string\n  slug: string\n  description: string\n}\n\nexport type AppAgentRequestErrorPayload = {\n  type: string\n  code: string\n  identifier: string\n  message: string\n}\n\nexport type CopilotChatMode = 'immersive' | 'assistive'\n\nexport type SuccessfulAPIResult<T> = {\n  status: number\n  ok: true\n  payload: T\n}\n\nexport type FailedAPIResult = {\n  status: number\n  ok: false\n  error: string\n}\n\nexport type APIResult<T> = SuccessfulAPIResult<T> | FailedAPIResult\n\ntype SuccessfulAPIStreamingResult = {\n  status: number\n  ok: true\n  response: Response\n}\n\nexport type APIStreamingResult = SuccessfulAPIStreamingResult | FailedAPIResult\n\nexport interface CopilotChatPayload {\n  agentsPath: string\n  apiURL: string\n  currentUserLogin: string\n  customInstructions?: string\n  renderKnowledgeBases?: boolean\n  optedInToUserFeedback: boolean\n  renderAttachKnowledgeBaseHerePopover?: boolean\n  renderKnowledgeBaseAttachedToChatPopover?: boolean\n  reviewLab: boolean\n}\n","import {isFeatureEnabled} from '@github-ui/feature-flags'\n\nclass CopilotFeatureFlags {\n  /**\n   * Returns a boolean indicating whether the Copilot conversational UX embedding update feature is enabled.\n   * @returns {boolean} Whether the feature is enabled.\n   */\n  public get embedding() {\n    return isFeatureEnabled('copilot_conversational_ux_embedding_update')\n  }\n\n  public get copyMessage() {\n    return isFeatureEnabled('copilot_copy_message')\n  }\n\n  public get formatDiff() {\n    return isFeatureEnabled('copilot_format_diff')\n  }\n\n  public get unstickyReferences() {\n    return isFeatureEnabled('copilot_conversational_ux_history_refs')\n  }\n\n  public get vulnerabilityAnnotations() {\n    return isFeatureEnabled('code_vulnerability_scanning')\n  }\n\n  public get implicitContext() {\n    return isFeatureEnabled('COPILOT_IMPLICIT_CONTEXT')\n  }\n\n  public get issueCreation() {\n    return isFeatureEnabled('copilot_issue_creation')\n  }\n\n  public get staticThreadSuggestions() {\n    return isFeatureEnabled('copilot_chat_static_thread_suggestions')\n  }\n\n  public get followUpThreadSuggestions() {\n    return isFeatureEnabled('copilot_chat_follow_up_thread_suggestions')\n  }\n\n  public get followupToAgent() {\n    return isFeatureEnabled('copilot_followup_to_agent')\n  }\n\n  public get customInstructions() {\n    return isFeatureEnabled('copilot_chat_custom_instructions')\n  }\n\n  public get reactMarkdown() {\n    return isFeatureEnabled('copilot_react_markdown')\n  }\n\n  public get dotcomUserServerTokens() {\n    return isFeatureEnabled('copilot_chat_dotcom_user_server_tokens')\n  }\n\n  public get copilotFloatingButton() {\n    return isFeatureEnabled('copilot_floating_button')\n  }\n}\n\nexport const copilotFeatureFlags = new CopilotFeatureFlags()\nexport type {CopilotFeatureFlags}\n","import {debounce} from '@github/mini-throttle/decorators'\nimport safeStorage from '@github-ui/safe-storage'\n\nimport {referenceID} from './copilot-chat-helpers'\nimport type {CopilotChatReference} from './copilot-chat-types'\n\nexport class CopilotLocalStorage {\n  private COPILOT_SELECTED_THREAD_ID_STORAGE_KEY = 'COPILOT_SELECTED_THREAD_ID_STORAGE_KEY'\n  private COPILOT_COLLAPSED_STATE_KEY = 'COPILOT_COLLAPSED_STATE_KEY'\n  private COPILOT_PANEL_HEIGHT = 'COPILOT_PANEL_HEIGHT'\n  private DEFAULT_PANEL_HEIGHT = 600\n  private COPILOT_PANEL_WIDTH = 'COPILOT_PANEL_WIDTH'\n  DEFAULT_PANEL_WIDTH = 480\n  private COPILOT_SAVED_USER_MESSAGE_KEY = (threadID: string | null): string => {\n    return `COPILOT_SAVED_USER_MESSAGE_${threadID}`\n  }\n\n  private COPILOT_CURRENT_REFERENCES_KEY = (threadID: string | null): string => {\n    return `COPILOT_CURRENT_REFERENCES_${threadID}`\n  }\n\n  private COPILOT_SELECTED_TOPIC_STORAGE_KEY = (threadId: string): string => {\n    return `COPILOT_SELECTED_TOPIC_${threadId}`\n  }\n\n  private COPILOT_AUTH_TOKEN_KEY = 'COPILOT_AUTH_TOKEN'\n\n  private localStorage = safeStorage('localStorage', {\n    throwQuotaErrorsOnSet: false,\n    ttl: 1000 * 60 * 60 * 24,\n  })\n\n  private sessionStorage = safeStorage('sessionStorage', {\n    throwQuotaErrorsOnSet: false,\n    ttl: 1000 * 60 * 60 * 24,\n  })\n\n  get selectedThreadID(): string | null {\n    return this.localStorage.getItem(this.COPILOT_SELECTED_THREAD_ID_STORAGE_KEY)\n  }\n\n  set selectedThreadID(threadID: string | null) {\n    const key = this.COPILOT_SELECTED_THREAD_ID_STORAGE_KEY\n    if (threadID == null) {\n      this.localStorage.removeItem(key)\n      return\n    }\n    this.localStorage.setItem(key, threadID)\n  }\n\n  getPanelHeight(): number {\n    const val = this.localStorage.getItem(this.COPILOT_PANEL_HEIGHT)\n    return val ? parseInt(val) : this.DEFAULT_PANEL_HEIGHT\n  }\n\n  setPanelHeight(height: number) {\n    const key = this.COPILOT_PANEL_HEIGHT\n    this.localStorage.setItem(key, height.toString())\n  }\n\n  getPanelWidth(): number {\n    const val = this.localStorage.getItem(this.COPILOT_PANEL_WIDTH)\n    return val ? parseInt(val) : this.DEFAULT_PANEL_WIDTH\n  }\n\n  setPanelWidth(width: number) {\n    const key = this.COPILOT_PANEL_WIDTH\n    this.localStorage.setItem(key, width.toString())\n  }\n\n  getCollapsedState(): boolean {\n    const val = this.sessionStorage.getItem(this.COPILOT_COLLAPSED_STATE_KEY)\n    return val !== 'false'\n  }\n\n  setCollapsedState(collapsed: boolean) {\n    const key = this.COPILOT_COLLAPSED_STATE_KEY\n    this.sessionStorage.setItem(key, collapsed.toString())\n  }\n\n  getSelectedTopic(threadID: string): string | null {\n    return this.localStorage.getItem(this.COPILOT_SELECTED_TOPIC_STORAGE_KEY(threadID))\n  }\n\n  setSelectedTopic(threadID: string, topic: string | null) {\n    if (topic == null) {\n      this.localStorage.removeItem(this.COPILOT_SELECTED_TOPIC_STORAGE_KEY(threadID))\n      return\n    }\n\n    const key = this.COPILOT_SELECTED_TOPIC_STORAGE_KEY(threadID)\n    this.localStorage.setItem(key, topic)\n  }\n\n  getSavedMessage(threadID: string | null): string | null {\n    return this.localStorage.getItem(this.COPILOT_SAVED_USER_MESSAGE_KEY(threadID))\n  }\n\n  @debounce(100)\n  setSavedMessage(threadID: string | null, message: string | null) {\n    this.setSavedMessageFast(threadID, message)\n  }\n\n  // Same as setSavedMessage but without debounce\n  // Used when we want to set/reset the message immediately (e.g. when sending user meessage to a new thread)\n  setSavedMessageFast(threadID: string | null, message: string | null) {\n    const key = this.COPILOT_SAVED_USER_MESSAGE_KEY(threadID)\n\n    if (message == null) {\n      this.localStorage.removeItem(key)\n      return\n    }\n\n    this.localStorage.setItem(key, message)\n  }\n\n  getCurrentReferences(threadID: string | null): CopilotChatReference[] | null {\n    const key = this.COPILOT_CURRENT_REFERENCES_KEY(threadID)\n\n    const val = this.localStorage.getItem(key)\n    if (!val) return null\n\n    return JSON.parse(val) as CopilotChatReference[]\n  }\n\n  setCurrentReferences(threadID: string | null, references: CopilotChatReference[]): void {\n    const key = this.COPILOT_CURRENT_REFERENCES_KEY(threadID)\n    const uniqueReferences = references.filter((ref, index) => {\n      return index === references.findIndex(r => referenceID(ref) === referenceID(r))\n    })\n    this.localStorage.setItem(key, JSON.stringify(uniqueReferences))\n  }\n\n  clearCurrentReferences(threadID: string | null): void {\n    const key = this.COPILOT_CURRENT_REFERENCES_KEY(threadID)\n    this.localStorage.removeItem(key)\n  }\n\n  migrateNullThreadToNewThread(newThreadID: string): void {\n    const savedMessage = this.getSavedMessage(null)\n    this.setSavedMessage(null, null)\n    if (savedMessage) this.setSavedMessage(newThreadID, savedMessage)\n\n    const savedRefs = this.getCurrentReferences(null)\n    this.clearCurrentReferences(null)\n    if (savedRefs) this.setCurrentReferences(newThreadID, savedRefs)\n  }\n}\n\nexport const copilotLocalStorage = new CopilotLocalStorage()\n","import safeStorage from '@github-ui/safe-storage'\n\nconst experimentsLocalStorageKey = 'copilot_experiments'\n\nexport function getCopilotExperiments(): string[] {\n  const experiments = safeStorage('localStorage').getItem(experimentsLocalStorageKey)\n  if (!experiments) return []\n\n  return experiments.split(',')\n}\n\nexport function setCopilotExperiments(experiments: string[]): void {\n  safeStorage('localStorage').setItem(experimentsLocalStorageKey, experiments.join(','))\n}\n","// Attempt to use the `org` parameter to filter the results if we have a `/` present in the query\n// This is to be used with the `search` graphQL endpoint for type `Repository` only.\nexport function getRepositorySearchQuery(queryString: string): string {\n  const orgIndexSplit = queryString.indexOf('/')\n\n  // If there is no / in the query, or the org name is empty, just search for the repo name\n  if (orgIndexSplit === -1 || orgIndexSplit === 0) {\n    return `${queryString} in:name archived:false`\n  }\n\n  // Naively extract the org name and repo name from the query by assuming anything before the / is the org name\n  const orgSearchName = queryString.slice(0, orgIndexSplit)\n  const repoSearchName = queryString.slice(orgIndexSplit + 1)\n\n  if (repoSearchName.length === 0) {\n    return `org:${orgSearchName} in:name archived:false`\n  }\n\n  return `org:${orgSearchName} ${repoSearchName} in:name archived:false`\n}\n","import {isFileReference, makeCopilotChatReference, makeSymbolReference, referenceID} from './copilot-chat-helpers'\nimport type {CopilotChatManager} from './copilot-chat-manager'\nimport type {CopilotChatState} from './copilot-chat-reducer'\nimport type {\n  CopilotChatReference,\n  CopilotChatRepo,\n  DocsetReference,\n  FileReference,\n  SuggestionSymbolReference,\n} from './copilot-chat-types'\n\nexport class CopilotAutocompleteManager {\n  manager: CopilotChatManager\n  fileSuggestions = new Map<string, FileReference>()\n  symbolSuggestions = new Map<string, SuggestionSymbolReference>()\n  knowledgeSuggestions = new Map<string, DocsetReference>()\n  repoFileSuggestions = new Map<string, Map<string, FileReference>>()\n\n  constructor(manager: CopilotChatManager) {\n    this.manager = manager\n  }\n\n  filenameFromPath(path: string): string {\n    const parts = path.split('/')\n    return parts[parts.length - 1]!\n  }\n\n  async fetchAutocompleteSuggestions(repo: CopilotChatRepo, symbolQuery: string): Promise<void> {\n    const [symbols, files] = await Promise.all([\n      this.manager.service.querySymbols(repo, symbolQuery),\n      this.manager.service.listRepoFiles(repo),\n    ])\n\n    if (symbols.ok) {\n      const symbolResults = symbols.payload.flatMap(suggestion => {\n        if (!suggestion.symbol) return []\n        return [makeSymbolReference(suggestion, repo)]\n      })\n      this.symbolSuggestions = new Map(symbolResults.map($result => [$result.name, $result]))\n    }\n\n    if (this.repoFileSuggestions.has(repo.name)) {\n      this.fileSuggestions = this.repoFileSuggestions.get(repo.name)!\n      return\n    }\n\n    if (files.ok) {\n      const filesByPath = new Map<string, FileReference>()\n      this.repoFileSuggestions.set(repo.name, filesByPath)\n      // Large repos could have hundreds of thousands of files, so we process them in chunks\n      // to avoid blocking the main thread for too long.\n      // This could eventually be done in a web worker too.\n      const chunkSize = 5000\n      let index = 0\n\n      const processChunk = () => {\n        const end = Math.min(index + chunkSize, files.payload.length)\n        for (; index < end; index++) {\n          const $file = files.payload[index]\n          if ($file) {\n            const ref = makeCopilotChatReference($file, repo)\n            filesByPath.set(ref.path, ref)\n          }\n        }\n\n        if (index < files.payload.length) {\n          setTimeout(processChunk, 0) // Schedule the next chunk\n        } else {\n          this.fileSuggestions = filesByPath\n          return\n        }\n      }\n\n      processChunk() // Start processing the first chunk\n    }\n  }\n\n  findReference(uniqueID: string, state: CopilotChatState): CopilotChatReference | undefined {\n    return state.currentReferences.find(value => uniqueID === referenceID(value))\n  }\n\n  /**\n   * Adds a new reference to the list of references in the CopilotChatState.\n   * If the reference already exists, it will not be added again.\n   * @param newReference The new reference to be added.\n   * @param state The current CopilotChatState.\n   */\n  async addToReferences(newReference: CopilotChatReference, state: CopilotChatState) {\n    const uniqueID = referenceID(newReference)\n    const existingReference = this.findReference(uniqueID, state)\n\n    if (existingReference) return\n\n    let referenceToAdd = newReference\n    if (isFileReference(newReference)) {\n      const response = await this.manager.service.fetchLanguageForFileReference(newReference)\n      if (response.ok && response.payload.language) {\n        const {languageName, languageId} = response.payload.language\n        referenceToAdd = {...newReference, languageName, languageId}\n      }\n    }\n\n    this.manager.addReference(referenceToAdd, 'autocomplete')\n  }\n}\n","import type {PropsWithChildren} from 'react'\nimport {createContext, useContext, useMemo} from 'react'\n\nimport {CopilotAutocompleteManager} from './copilot-autocompletions'\nimport {useChatManager} from './CopilotChatManagerContext'\n\nconst CopilotChatAutocompleteContext = createContext<CopilotAutocompleteManager | null>(null)\n\nexport function CopilotChatAutocompleteProvider({children}: PropsWithChildren) {\n  const manager = useChatManager()\n  const autocomplete = useMemo(() => new CopilotAutocompleteManager(manager), [manager])\n  return (\n    <CopilotChatAutocompleteContext.Provider value={autocomplete}>{children}</CopilotChatAutocompleteContext.Provider>\n  )\n}\n\nexport function useChatAutocomplete() {\n  return useContext(CopilotChatAutocompleteContext)!\n}\n\ntry{ CopilotChatAutocompleteContext.displayName ||= 'CopilotChatAutocompleteContext' } catch {}\ntry{ CopilotChatAutocompleteProvider.displayName ||= 'CopilotChatAutocompleteProvider' } catch {}","import {isFeatureEnabled} from '@github-ui/feature-flags'\nimport {sendEvent, stringifyObjectValues} from '@github-ui/hydro-analytics'\nimport {ssrSafeWindow} from '@github-ui/ssr-utils'\n\nimport {findAuthor, isDocset, referenceArraysAreEqual, referencesAreEqual} from './copilot-chat-helpers'\nimport type {CopilotChatMessageStreamer} from './copilot-chat-message-streamer'\nimport type {\n  CopilotAgentError,\n  CopilotAnnotations,\n  CopilotChatAgent,\n  CopilotChatMessage,\n  CopilotChatMode,\n  CopilotChatOrg,\n  CopilotChatReference,\n  CopilotChatRepo,\n  CopilotChatSuggestions,\n  CopilotChatThread,\n  Docset,\n  FunctionCalledStatus,\n  MessageStreamingResponseComplete,\n  SkillExecution,\n  TopicItem,\n} from './copilot-chat-types'\nimport {copilotFeatureFlags} from './copilot-feature-flags'\nimport {copilotLocalStorage} from './copilot-local-storage'\n\nexport type LoadingStateState = 'pending' | 'loading' | 'loaded' | 'error'\ntype LoadingState = {\n  state: LoadingStateState\n  error: string | null\n}\nexport interface CopilotChatState {\n  threadsLoading: LoadingState\n  messagesLoading: LoadingState\n  slashCommandLoading: LoadingState\n  showTopicPicker: boolean\n  topicLoading: LoadingState\n  threads: Map<string, CopilotChatThread>\n  messages: CopilotChatMessage[]\n  streamer: CopilotChatMessageStreamer | null\n  streamingMessage: CopilotChatMessage | null\n  selectedThreadID: string | null\n  currentTopic?: CopilotChatRepo | Docset\n  chatIsOpen: boolean\n  chatIsCollapsed: boolean\n  isWaitingOnCopilot: boolean\n  currentUserLogin: string\n  apiUrl: string\n  currentReferences: CopilotChatReference[]\n  selectedReference: CopilotChatReference | null\n  findFileWorkerPath: string\n  threadActionMenuIsOpened: boolean\n  currentView: 'thread' | 'list'\n  mode: CopilotChatMode\n  currentRepository?: CopilotChatRepo\n  ssoOrganizations: CopilotChatOrg[]\n  context?: CopilotChatReference[]\n  renderKnowledgeBases?: boolean\n  renderAttachKnowledgeBaseHerePopover?: boolean\n  renderKnowledgeBaseAttachedToChatPopover?: boolean\n  chatVisibleSetting?: boolean\n  chatVisibleSettingPath?: string\n  customInstructions?: string\n  topRepositoriesCache: TopicItem[] | undefined\n  entryPointId?: string\n  suggestions?: CopilotChatSuggestions | null\n  agents?: CopilotChatAgent[]\n  agentsPath?: string\n  optedInToUserFeedback: boolean\n  /** when set, messages default to being sent to this agent */\n  defaultRecipient?: string\n  allClientConfirmations?: string[]\n  knowledgeBasesLoading: LoadingState\n  knowledgeBases: Docset[]\n  reviewLab: boolean\n}\n\nexport type CopilotChatAction =\n  | {type: 'OPEN_THREAD_ACTION_MENU'; open: boolean}\n  | {type: 'OPEN_COPILOT_CHAT'; source: string; id?: string}\n  | {type: 'CLOSE_COPILOT_CHAT'}\n  | {type: 'EXPAND_COPILOT_CHAT'}\n  | {type: 'COLLAPSE_COPILOT_CHAT'}\n  | {type: 'MESSAGES_UPDATED'; messages?: CopilotChatMessage[]; state: LoadingStateState}\n  | {type: 'SELECT_THREAD'; thread: CopilotChatThread | null}\n  | {type: 'THREADS_LOADING'}\n  | {type: 'THREADS_LOADING_ERROR'; message: string}\n  | {type: 'HANDLE_EVENT_START'; references?: CopilotChatReference[]; id?: string}\n  | {type: 'THREAD_CREATED'; thread: CopilotChatThread}\n  | {type: 'WAITING_ON_COPILOT'; loading: boolean}\n  | {type: 'DELETE_THREAD'; thread: CopilotChatThread}\n  | {type: 'DELETE_THREAD_KEEP_SELECTION'; thread: CopilotChatThread}\n  | {type: 'DELETE_THREAD_ERROR'; thread: CopilotChatThread; error: string}\n  | {type: 'CLEAR_THREAD'; threadID: string}\n  | {type: 'CLEAR_REFERENCES'; threadID: string}\n  | {type: 'CLEAR_CURRENT_REFERENCES'}\n  | {type: 'KNOWLEDGE_BASES_LOADING'}\n  | {type: 'KNOWLEDGE_BASES_LOADED'; knowledgeBases: Docset[]}\n  | {type: 'KNOWLEDGE_BASES_LOADING_ERROR'; message: string}\n  | {type: 'THREADS_LOADED'; threads: CopilotChatThread[]}\n  | {type: 'MESSAGE_ADDED'; message: CopilotChatMessage}\n  | {type: 'THREAD_UPDATED'; thread: CopilotChatThread}\n  | {type: 'REFERENCES_LOADED'; references: CopilotChatReference[]}\n  | {type: 'ADD_REFERENCE'; reference: CopilotChatReference; source: string}\n  | {type: 'REMOVE_REFERENCE'; referenceIndex: number}\n  | {type: 'SLASH_COMMANDS_LOADING'}\n  | {type: 'SLASH_COMMANDS_LOADED'}\n  | {type: 'SLASH_COMMANDS_ERROR'}\n  | {type: 'SHOW_TOPIC_PICKER'; show: boolean}\n  | {type: 'CURRENT_TOPIC_UPDATED'; topic: CopilotChatRepo | Docset | undefined; state: LoadingStateState}\n  | {type: 'MESSAGE_STREAMING_STARTED'; message: CopilotChatMessage; streamer: CopilotChatMessageStreamer}\n  | {type: 'MESSAGE_STREAMING_TOKEN_ADDED'; token: string}\n  | {\n      type: 'MESSAGE_STREAMING_FUNCTION_CALLED'\n      name: string\n      status: FunctionCalledStatus\n      arguments?: string\n      errorMessage?: string\n      references: CopilotChatReference[]\n    }\n  | {type: 'MESSAGE_STREAMING_COMPLETED'; messageResponse: MessageStreamingResponseComplete}\n  | {type: 'MESSAGE_STREAMING_FAILED'}\n  | {type: 'MESSAGE_STREAMING_STOPPED'; message: CopilotChatMessage | null}\n  | {type: 'SELECT_REFERENCE'; reference: CopilotChatReference | null}\n  | {type: 'VIEW_ALL_THREADS'}\n  | {type: 'VIEW_CURRENT_THREAD'}\n  | {type: 'IMPLICIT_CONTEXT_UPDATED'; context: CopilotChatReference[] | undefined}\n  | {type: 'DISMISS_ATTACH_KNOWLEDGE_BASE_HERE_POPOVER'}\n  | {type: 'DISMISS_KNOWLEDGE_BASE_ATTACHED_TO_CHAT_POPOVER'}\n  | {type: 'SET_TOP_REPOSITORIES'; topics: TopicItem[] | undefined}\n  | {type: 'SUGGESTIONS_GENERATED'; suggestions: CopilotChatSuggestions}\n  | {type: 'CLEAR_SUGGESTIONS'}\n  | {type: 'SET_AGENTS'; agents: CopilotChatAgent[]}\n  | {\n      type: 'MESSAGE_STREAMING_CONFIRMATION'\n      title: string\n      message: string\n      confirmation: object\n    }\n  | {type: 'AGENT_ERROR'; error: CopilotAgentError}\n\nexport const copilotChatReducer = (state: CopilotChatState, action: CopilotChatAction): CopilotChatState => {\n  const chattingAboutRepo = ssrSafeWindow!.location?.pathname?.split('/').length >= 3\n  const setSelectedThreadID = (selectedThreadID: string | null): CopilotChatState => {\n    if (selectedThreadID) copilotLocalStorage.selectedThreadID = selectedThreadID\n    return {\n      ...state,\n      selectedThreadID,\n      currentView: 'thread',\n      showTopicPicker: selectedThreadID ? false : state.showTopicPicker,\n    }\n  }\n\n  const setCurrentReferences = (currentReferences: CopilotChatReference[]): CopilotChatState => {\n    copilotLocalStorage.setCurrentReferences(state.selectedThreadID, currentReferences)\n    return {...state, currentReferences}\n  }\n\n  switch (action.type) {\n    case 'SLASH_COMMANDS_ERROR': {\n      sendEvent('copilot.slash_commands_error')\n      return {\n        ...state,\n        slashCommandLoading: {...state.slashCommandLoading, state: 'error'},\n      }\n    }\n    case 'SLASH_COMMANDS_LOADED': {\n      sendEvent('copilot.slash_commands_loaded')\n      return {\n        ...state,\n        slashCommandLoading: {...state.slashCommandLoading, state: 'loaded'},\n      }\n    }\n    case 'SLASH_COMMANDS_LOADING': {\n      sendEvent('copilot.slash_commands_loading')\n      return {\n        ...state,\n        slashCommandLoading: {...state.slashCommandLoading, state: 'loading'},\n      }\n    }\n    case 'OPEN_THREAD_ACTION_MENU':\n      sendEvent('copilot.open_thread_action_menu', {open: action.open})\n      return {\n        ...state,\n        threadActionMenuIsOpened: action.open,\n      }\n    case 'OPEN_COPILOT_CHAT':\n      sendEvent('copilot.open_copilot_chat', {source: action.source})\n      return {\n        ...state,\n        chatIsOpen: true,\n        entryPointId: action.id,\n      }\n    case 'CLOSE_COPILOT_CHAT':\n      sendEvent('copilot.close_copilot_chat')\n      return {\n        ...state,\n        chatIsOpen: false,\n      }\n    case 'EXPAND_COPILOT_CHAT':\n      sendEvent('copilot.expand_copilot_chat')\n      return {\n        ...state,\n        chatIsCollapsed: false,\n      }\n    case 'COLLAPSE_COPILOT_CHAT':\n      sendEvent('copilot.collapse_copilot_chat')\n      return {\n        ...state,\n        chatIsCollapsed: true,\n      }\n    case 'THREAD_CREATED':\n      sendEvent('copilot.thread_created', {\n        ...stringifyThread(action.thread),\n        count: state.threads.size + 1,\n      })\n      return {\n        ...setSelectedThreadID(action.thread.id),\n        threads: new Map(state.threads.set(action.thread.id, action.thread)),\n        messages: [],\n        messagesLoading: {...state.messagesLoading, state: 'loaded'},\n        currentReferences: copilotLocalStorage.getCurrentReferences(action.thread.id) ?? [],\n        currentTopic: chattingAboutRepo ? state.currentTopic : undefined,\n        defaultRecipient: undefined,\n        allClientConfirmations: [],\n      }\n    case 'SUGGESTIONS_GENERATED':\n      return {\n        ...state,\n        suggestions: action.suggestions,\n      }\n    case 'CLEAR_SUGGESTIONS':\n      return {\n        ...state,\n        suggestions: null,\n      }\n    case 'CLEAR_THREAD':\n      sendEvent('copilot.clear_thread')\n      return {\n        ...state,\n        messages: [],\n        currentReferences: [],\n      }\n    case 'CLEAR_REFERENCES':\n      sendEvent('copilot.clear_references')\n      if (isFeatureEnabled('COPILOT_CHAT_CONVERSATION_INTENT_KNOWLEDGE_SEARCH_SKILL')) {\n        // keep any references who have a type == 'docset'\n        return {\n          ...state,\n          currentReferences: state.currentReferences.filter(reference => reference.type === 'docset'),\n        }\n      }\n      return {\n        ...state,\n        currentReferences: [],\n      }\n    case 'CLEAR_CURRENT_REFERENCES':\n      sendEvent('copilot.clear_references')\n      return {\n        ...state,\n        currentReferences: [],\n      }\n    case 'MESSAGES_UPDATED':\n      sendEvent('copilot.messages_updated', {count: action.messages?.length, loading: action.state})\n      if (action.messages) {\n        let defaultRecipient = state.defaultRecipient\n        let allClientConfirmations = state.allClientConfirmations\n        if (action.state === 'loaded' && action.messages.length > 0) {\n          defaultRecipient = getDefaultRecipient(action.messages[action.messages.length - 1]!, state)\n          allClientConfirmations = action.messages\n            .map(\n              message => message.clientConfirmations?.map(cc => JSON.stringify(Object.values(cc.confirmation).sort())),\n            )\n            .flat()\n            .filter(Boolean) as string[]\n        }\n        return {\n          ...state,\n          defaultRecipient,\n          allClientConfirmations,\n          messages: action.messages,\n          messagesLoading: {...state.messagesLoading, state: action.state},\n        }\n      } else {\n        return {\n          ...state,\n          messagesLoading: {...state.messagesLoading, state: action.state},\n        }\n      }\n    case 'WAITING_ON_COPILOT':\n      sendEvent('copilot.waiting_on_copilot', {isWaitingOnCopilot: action.loading})\n      return {\n        ...state,\n        isWaitingOnCopilot: action.loading,\n      }\n    case 'SELECT_THREAD':\n      sendEvent('copilot.select_thread', {threadID: action.thread?.id})\n      return {\n        ...setSelectedThreadID(action.thread?.id || null),\n      }\n    case 'HANDLE_EVENT_START': {\n      sendEvent('copilot.handle_event_start')\n      const newState = action.references ? setCurrentReferences(action.references) : state\n      return {\n        ...newState,\n        chatIsOpen: true,\n        chatIsCollapsed: false,\n        entryPointId: action.id,\n      }\n    }\n    case 'THREADS_LOADING':\n      sendEvent('copilot.threads_loading')\n      return {\n        ...state,\n        threadsLoading: {...state.threadsLoading, state: 'loading'},\n      }\n    case 'DISMISS_ATTACH_KNOWLEDGE_BASE_HERE_POPOVER':\n      sendEvent('copilot.dismiss_attach_knowledge_base_here_popover')\n      return {\n        ...state,\n        renderAttachKnowledgeBaseHerePopover: false,\n      }\n    case 'DISMISS_KNOWLEDGE_BASE_ATTACHED_TO_CHAT_POPOVER':\n      sendEvent('copilot.dismiss_knowledge_base_attached_to_chat_popover')\n      return {\n        ...state,\n        renderKnowledgeBaseAttachedToChatPopover: false,\n      }\n    case 'KNOWLEDGE_BASES_LOADING':\n      sendEvent('copilot.knowledge_bases_loading')\n      return {\n        ...state,\n        knowledgeBasesLoading: {...state.knowledgeBasesLoading, state: 'loading'},\n      }\n    case 'KNOWLEDGE_BASES_LOADED':\n      sendEvent('copilot.knowledge_bases_loaded', {count: action.knowledgeBases.length})\n      return {\n        ...state,\n        knowledgeBases: action.knowledgeBases,\n        knowledgeBasesLoading: {...state.knowledgeBasesLoading, state: 'loaded', error: null},\n      }\n    case 'KNOWLEDGE_BASES_LOADING_ERROR':\n      sendEvent('copilot.knowledge_bases_loading_error', {error: action.message})\n      return {\n        ...state,\n        knowledgeBasesLoading: {...state.knowledgeBasesLoading, state: 'error', error: action.message},\n      }\n    case 'THREADS_LOADED':\n      sendEvent('copilot.threads_loaded', {count: action.threads.length})\n      return {\n        ...state,\n        threadsLoading: {...state.threadsLoading, state: 'loaded'},\n        threads: new Map(action.threads.map(t => [t.id, t])),\n      }\n    case 'THREADS_LOADING_ERROR':\n      sendEvent('copilot.threads_loading_error', {error: action.message})\n      return {\n        ...state,\n        threadsLoading: {error: action.message, state: 'error'},\n      }\n    case 'DELETE_THREAD_KEEP_SELECTION':\n      sendEvent('copilot.thread_deleted', {\n        ...stringifyThread(action.thread),\n        count: state.threads.size - 1,\n      })\n      state.threads.delete(action.thread.id)\n      return {\n        ...setSelectedThreadID(null),\n        threads: new Map(state.threads),\n        threadsLoading: {...state.threadsLoading, state: 'loaded'},\n        messages: [],\n        messagesLoading: {state: 'loaded', error: null},\n        currentReferences: [],\n        currentView: 'list',\n      }\n    case 'DELETE_THREAD':\n      sendEvent('copilot.thread_deleted', {\n        ...stringifyThread(action.thread),\n        count: state.threads.size - 1,\n      })\n      state.threads.delete(action.thread.id)\n      return {\n        ...setSelectedThreadID(null),\n        threads: new Map(state.threads),\n        threadsLoading: {...state.threadsLoading, state: 'loaded'},\n        messages: [],\n        messagesLoading: {state: 'loaded', error: null},\n        currentReferences: [],\n      }\n    case 'DELETE_THREAD_ERROR':\n      sendEvent('copilot.delete_thread_error', {...stringifyThread(action.thread), error: action.error})\n      return {\n        ...state,\n        threadsLoading: {...state.threadsLoading, error: action.error},\n        threads: new Map(state.threads.set(action.thread.id, action.thread)),\n      }\n    case 'MESSAGE_ADDED':\n      sendEvent('copilot.message_added', {\n        ...stringifyMessage(action.message),\n        count: state.messages.length + 1,\n      })\n      return {\n        ...state,\n        messages: [...state.messages, action.message],\n      }\n    case 'THREAD_UPDATED':\n      sendEvent('copilot.thread_updated', stringifyThread(action.thread))\n      return {\n        ...state,\n        ...setSelectedThreadID(action.thread.id),\n        threads: new Map(state.threads.set(action.thread.id, action.thread)),\n      }\n    case 'REFERENCES_LOADED':\n      sendEvent('copilot.references_loaded', {count: action.references.length})\n      return {\n        ...state,\n        currentReferences: action.references,\n      }\n    case 'ADD_REFERENCE':\n      sendEvent('copilot.add_reference', {\n        ...stringifyReference(action.reference),\n        source: action.source,\n        count: state.currentReferences.length + 1,\n      })\n      return {\n        ...state,\n        ...setCurrentReferences([\n          ...state.currentReferences.filter(reference => !referencesAreEqual(reference, action.reference)),\n          action.reference,\n        ]),\n      }\n    case 'REMOVE_REFERENCE': {\n      const reference = state.currentReferences[action.referenceIndex]\n      if (reference) {\n        sendEvent('copilot.remove_reference', {\n          ...stringifyReference(reference),\n          count: state.currentReferences.length - 1,\n        })\n      }\n      return {\n        ...setCurrentReferences(state.currentReferences.filter((_, i) => i !== action.referenceIndex)),\n      }\n    }\n    case 'SHOW_TOPIC_PICKER':\n      return {\n        ...state,\n        showTopicPicker: action.show,\n      }\n    case 'CURRENT_TOPIC_UPDATED':\n      if (action.topic) {\n        sendEvent('copilot.current_topic_updated', {\n          type: !action.topic ? 'none' : isDocset(action.topic) ? 'docset' : 'repository',\n        })\n      }\n      return {\n        ...state,\n        currentTopic: action.topic,\n        topicLoading: {...state.topicLoading, state: action.state},\n      }\n    case 'MESSAGE_STREAMING_STARTED':\n      sendEvent('copilot.message_streaming_started', {\n        ...stringifyMessage(action.message),\n        count: state.messages.length,\n      })\n      return {\n        ...state,\n        isWaitingOnCopilot: true,\n        streamer: action.streamer,\n        streamingMessage: action.message,\n        messages: [...state.messages],\n      }\n    case 'MESSAGE_STREAMING_TOKEN_ADDED':\n      return {\n        ...state,\n        streamingMessage: state.streamingMessage\n          ? {...state.streamingMessage, content: state.streamingMessage.content + action.token}\n          : null,\n      }\n    case 'MESSAGE_STREAMING_FUNCTION_CALLED':\n      if (state.streamingMessage) {\n        const prevExecutions = state.streamingMessage.skillExecutions || []\n        const firstStartedIdx = prevExecutions.findIndex(fc => fc.status === 'started')\n        const firstStartedExecution = firstStartedIdx >= 0 ? prevExecutions[firstStartedIdx] : null\n\n        // Default to the previous executions if somehow we don't hit our expected conditions in the switch statement\n        let executions = prevExecutions\n\n        switch (action.status) {\n          // If status is started, append to skillExecutions\n          case 'started':\n            executions = [\n              ...prevExecutions,\n              {\n                slug: action.name,\n                status: action.status,\n                arguments: action.arguments,\n                errorMessage: action.errorMessage,\n                references: [],\n              },\n            ]\n            break\n          case 'completed':\n            // Mark the first matching started execution as completed, and update its references.\n            if (firstStartedExecution) {\n              executions[firstStartedIdx] = {\n                ...firstStartedExecution,\n                status: action.status,\n                references: action.references,\n              }\n            }\n            break\n          case 'error':\n            // Mark the first matching started execution as errored.\n            if (firstStartedExecution) {\n              executions[firstStartedIdx] = {\n                ...firstStartedExecution,\n                status: action.status,\n                errorMessage: action.errorMessage,\n              }\n            }\n            break\n        }\n\n        return {\n          ...state,\n          streamingMessage: {\n            ...state.streamingMessage,\n            skillExecutions: executions,\n          },\n        }\n      }\n      return state\n    case 'MESSAGE_STREAMING_COMPLETED': {\n      let defaultRecipient = state.defaultRecipient\n      let newMessage: CopilotChatMessage | undefined\n      if (state.streamingMessage) {\n        newMessage = {\n          ...state.streamingMessage,\n          id: action.messageResponse.id,\n          references: action.messageResponse.references,\n          createdAt: action.messageResponse.createdAt,\n          intent: action.messageResponse.intent,\n          copilotAnnotations: action.messageResponse.copilotAnnotations,\n        }\n        defaultRecipient = getDefaultRecipient(newMessage, state)\n        sendEvent('copilot.message_streaming_completed', {\n          ...stringifyMessage(newMessage),\n          count: state.messages.length + 1,\n        })\n      }\n      return {\n        ...state,\n        defaultRecipient,\n        isWaitingOnCopilot: false,\n        streamer: null,\n        streamingMessage: null,\n        messages: newMessage ? [...state.messages, newMessage] : state.messages,\n      }\n    }\n    case 'MESSAGE_STREAMING_FAILED':\n      sendEvent('copilot.message_streaming_failed')\n      return {\n        ...state,\n        isWaitingOnCopilot: false,\n        streamer: null,\n        streamingMessage: null,\n      }\n    case 'MESSAGE_STREAMING_STOPPED': {\n      let newMessage: CopilotChatMessage | undefined\n      if (state.streamingMessage) {\n        newMessage = {\n          ...state.streamingMessage,\n          interrupted: true,\n        }\n        sendEvent('copilot.message_streaming_stopped', {\n          ...stringifyMessage(newMessage),\n          count: state.messages.length + 1,\n        })\n      }\n      return {\n        ...state,\n        isWaitingOnCopilot: false,\n        streamer: null,\n        streamingMessage: null,\n        messages: newMessage ? [...state.messages, newMessage] : state.messages,\n      }\n    }\n    case 'SELECT_REFERENCE':\n      if (action.reference) {\n        sendEvent('copilot.select_reference', stringifyReference(action.reference))\n      }\n      return {\n        ...state,\n        selectedReference: action.reference,\n      }\n    case 'VIEW_ALL_THREADS':\n      return {\n        ...state,\n        currentView: 'list',\n      }\n    case 'VIEW_CURRENT_THREAD':\n      return {\n        ...state,\n        currentView: 'thread',\n      }\n    case 'IMPLICIT_CONTEXT_UPDATED':\n      if (!referenceArraysAreEqual(action.context, state.context)) {\n        return {\n          ...state,\n          context: action.context,\n        }\n      }\n      return state\n    case 'SET_TOP_REPOSITORIES':\n      return {\n        ...state,\n        topRepositoriesCache: action.topics,\n      }\n    case 'SET_AGENTS':\n      return {\n        ...state,\n        agents: action.agents,\n      }\n    case 'MESSAGE_STREAMING_CONFIRMATION': {\n      const confirmation = {\n        title: action.title,\n        message: action.message,\n        confirmation: action.confirmation,\n      }\n      return {\n        ...state,\n        streamingMessage: state.streamingMessage\n          ? {\n              ...state.streamingMessage,\n              confirmations: state.streamingMessage.confirmations\n                ? [...state.streamingMessage.confirmations, confirmation]\n                : [confirmation],\n            }\n          : null,\n      }\n    }\n    case 'AGENT_ERROR': {\n      const streamingMessage = state.streamingMessage\n      const agentError = action.error\n\n      return {\n        ...state,\n        streamingMessage: streamingMessage && {\n          ...streamingMessage,\n          agentErrors: [\n            ...(streamingMessage.agentErrors ?? []),\n            {\n              type: agentError.type,\n              code: agentError.code,\n              message: agentError.message,\n              identifier: agentError.identifier,\n            },\n          ],\n        },\n      }\n    }\n  }\n}\n\n/**\n * Stringifies the given message while cleaning sensitive information from it.\n */\nfunction stringifyMessage(message: CopilotChatMessage) {\n  if (!message) {\n    return stringifyObjectValues({})\n  }\n  const obj: Record<string, unknown> = {\n    id: message.id,\n    role: message.role,\n    createdAt: message.createdAt,\n    threadID: message.threadID,\n    referenceCount: message.references?.length ?? 0,\n  }\n  if (message.intent) {\n    obj.intent = message.intent\n  }\n  if (message.error) {\n    obj.error = message.error\n  }\n  if (message.copilotAnnotations) {\n    obj.copilotAnnotations = cleanCopilotAnnotations(message.copilotAnnotations)\n  }\n  if (message.skillExecutions) {\n    obj.skillExecutions = cleanSkillExecutions(message.skillExecutions)\n  }\n  if (message.interrupted) {\n    obj.interrupted = true\n  }\n  return stringifyObjectValues(obj)\n}\n\n/**\n * Stringifies the given thread while cleaning sensitive information from it.\n */\nfunction stringifyThread(thread: CopilotChatThread) {\n  if (!thread) {\n    return stringifyObjectValues({})\n  }\n  return stringifyObjectValues({\n    id: thread.id,\n    createdAt: thread.createdAt,\n    updatedAt: thread.updatedAt,\n    currentReferenceCount: thread.currentReferences?.length ?? 0,\n  })\n}\n\n/**\n * Stringifies the given reference while cleaning sensitive information from it.\n */\nfunction stringifyReference(reference: CopilotChatReference) {\n  if (!reference) {\n    return stringifyObjectValues({})\n  }\n  return stringifyObjectValues({\n    type: reference.type,\n  })\n}\n\n/**\n * Remove sensitive information from skillExecutions in preparation for logging.\n */\nfunction cleanSkillExecutions(skillExecutions: SkillExecution[] | undefined) {\n  if (!skillExecutions) {\n    return []\n  }\n  return skillExecutions.map(execution => ({\n    slug: execution?.slug,\n    status: execution?.status,\n    argumentCount: execution?.arguments?.length ?? 0,\n    errorMessage: execution?.errorMessage,\n    references: execution?.references?.length ?? 0,\n  }))\n}\n\n/**\n * Remove sensitive information from copilotAnnotations in preparation for logging.\n */\nfunction cleanCopilotAnnotations(annotations: CopilotAnnotations | undefined) {\n  if (!annotations) {\n    return undefined\n  }\n  return {\n    CodeVulnerability: annotations.CodeVulnerability?.map(vuln => ({\n      details: {\n        type: vuln?.details?.type,\n      },\n    })),\n  }\n}\n\nfunction getDefaultRecipient(message: CopilotChatMessage, state: CopilotChatState): string | undefined {\n  if (!copilotFeatureFlags.followupToAgent) {\n    return undefined\n  }\n  const author = findAuthor(message, state.currentUserLogin)\n  if (author.type === 'agent') {\n    return author.name\n  }\n}\n","import {relayEnvironmentWithMissingFieldHandlerForNode} from '@github-ui/relay-environment'\nimport type {PropsWithChildren} from 'react'\nimport {createContext, useContext, useReducer} from 'react'\nimport {RelayEnvironmentProvider} from 'react-relay'\n\nimport {isRepository} from './copilot-chat-helpers'\nimport type {CopilotChatAction, CopilotChatState} from './copilot-chat-reducer'\nimport {copilotChatReducer} from './copilot-chat-reducer'\nimport type {\n  CopilotChatAgent,\n  CopilotChatMessage,\n  CopilotChatMode,\n  CopilotChatOrg,\n  CopilotChatReference,\n  CopilotChatRepo,\n  CopilotChatThread,\n  Docset,\n} from './copilot-chat-types'\nimport {CopilotChatAutocompleteProvider} from './CopilotChatAutocompleteContext'\nimport {CopilotChatManagerProvider} from './CopilotChatManagerContext'\n\nexport const CopilotChatContext = createContext<CopilotChatState | null>(null)\nexport const ChatPanelReferenceContext = createContext<React.RefObject<HTMLDivElement> | null>(null)\nconst CopilotChatDispatchContext = createContext<React.Dispatch<CopilotChatAction> | null>(null)\n\nexport interface CopilotChatProviderProps {\n  apiURL: string\n  login: string\n  topic?: CopilotChatRepo | Docset\n  threadId: string | null\n  workerPath: string\n  refs: CopilotChatReference[]\n  selectedReference?: CopilotChatReference | null\n  mode: CopilotChatMode\n  ssoOrganizations: CopilotChatOrg[]\n  renderKnowledgeBases?: boolean\n  renderAttachKnowledgeBaseHerePopover?: boolean\n  renderKnowledgeBaseAttachedToChatPopover?: boolean\n  customInstructions?: string\n  chatVisibleSetting?: boolean\n  chatVisibleSettingPath?: string\n  agentsPath: string\n  optedInToUserFeedback: boolean\n  agents?: CopilotChatAgent[]\n  messages?: CopilotChatMessage[]\n  testReducerState?: CopilotChatState\n  reviewLab: boolean\n}\n\nexport function CopilotChatProvider({\n  children,\n  topic,\n  login,\n  apiURL,\n  workerPath,\n  threadId,\n  refs,\n  selectedReference,\n  mode,\n  ssoOrganizations,\n  renderKnowledgeBases,\n  renderAttachKnowledgeBaseHerePopover,\n  renderKnowledgeBaseAttachedToChatPopover,\n  customInstructions,\n  chatVisibleSetting,\n  chatVisibleSettingPath,\n  agentsPath,\n  optedInToUserFeedback,\n  agents,\n  messages,\n  testReducerState,\n  reviewLab,\n}: PropsWithChildren<CopilotChatProviderProps>) {\n  const initialState = testReducerState || {\n    threadsLoading: {state: 'pending', error: null},\n    messagesLoading: {state: 'pending', error: null},\n    slashCommandLoading: {state: 'pending', error: null},\n    showTopicPicker: (!threadId || mode === 'assistive') && !topic,\n    topicLoading: {state: 'pending', error: null},\n    threads: new Map<string, CopilotChatThread>(),\n    knowledgeBasesLoading: {state: 'pending', error: null},\n    knowledgeBases: [],\n    messages: messages ?? [],\n    streamer: null,\n    streamingMessage: null,\n    selectedThreadID: threadId,\n    currentTopic: topic,\n    chatIsOpen: false,\n    chatIsCollapsed: mode === 'assistive',\n    isWaitingOnCopilot: false,\n    currentUserLogin: login,\n    apiUrl: apiURL,\n    currentReferences: refs,\n    findFileWorkerPath: workerPath,\n    threadActionMenuIsOpened: false,\n    currentView: 'thread',\n    selectedReference: selectedReference ?? null,\n    mode,\n    currentRepository: isRepository(topic) ? topic : undefined,\n    ssoOrganizations,\n    context: undefined,\n    renderKnowledgeBases: renderKnowledgeBases ?? true,\n    renderAttachKnowledgeBaseHerePopover,\n    renderKnowledgeBaseAttachedToChatPopover,\n    customInstructions,\n    chatVisibleSetting,\n    chatVisibleSettingPath,\n    topRepositoriesCache: undefined,\n    agentsPath,\n    optedInToUserFeedback,\n    agents,\n    suggestionsDismissed: false,\n    reviewLab,\n  }\n\n  const [state, dispatch] = useReducer(copilotChatReducer, initialState)\n\n  const environment = relayEnvironmentWithMissingFieldHandlerForNode()\n\n  return (\n    <CopilotChatContext.Provider value={state}>\n      <CopilotChatDispatchContext.Provider value={dispatch}>\n        <CopilotChatManagerProvider\n          apiURL={apiURL}\n          state={state}\n          dispatch={dispatch}\n          ssoOrganizations={ssoOrganizations}\n        >\n          <CopilotChatAutocompleteProvider>\n            <RelayEnvironmentProvider environment={environment}>{children}</RelayEnvironmentProvider>\n          </CopilotChatAutocompleteProvider>\n        </CopilotChatManagerProvider>\n      </CopilotChatDispatchContext.Provider>\n    </CopilotChatContext.Provider>\n  )\n}\n\nexport function useChatState() {\n  return useContext(CopilotChatContext)!\n}\n\nexport function useChatDispatch() {\n  return useContext(CopilotChatDispatchContext)!\n}\n\nexport function useChatPanelReferenceContext() {\n  return useContext(ChatPanelReferenceContext)!\n}\n\ntry{ CopilotChatContext.displayName ||= 'CopilotChatContext' } catch {}\ntry{ ChatPanelReferenceContext.displayName ||= 'ChatPanelReferenceContext' } catch {}\ntry{ CopilotChatDispatchContext.displayName ||= 'CopilotChatDispatchContext' } catch {}\ntry{ CopilotChatProvider.displayName ||= 'CopilotChatProvider' } catch {}","import type {MessageStreamingResponse, MessageStreamingResponseError} from './copilot-chat-types'\n\nconst MESSAGE_DELIMITER = '\\n\\n'\nconst MESSAGE_REGEXP = /^data:\\s+/\n\nexport class CopilotStreamingError extends Error {\n  error: MessageStreamingResponseError\n\n  constructor(error: MessageStreamingResponseError) {\n    super(error.description)\n    this.error = error\n  }\n}\n\ntype Reader = ReadableStreamDefaultReader<Uint8Array>\n\nexport class CopilotChatMessageStreamer {\n  reader: Reader\n\n  constructor(reader: Reader) {\n    this.reader = reader\n  }\n\n  async *stream(): AsyncIterable<MessageStreamingResponse> {\n    const utf8Decoder = new TextDecoder('utf-8')\n\n    let partialMessage = ''\n\n    for (;;) {\n      let value\n      let done\n      try {\n        ;({value, done} = await this.reader.read())\n      } catch (e) {\n        const error: MessageStreamingResponseError = {\n          type: 'error',\n          errorType: 'networkError',\n          description: 'NETWORK_CONNECTION_INTERRUPTED',\n        }\n\n        throw new CopilotStreamingError(error)\n      }\n\n      if (done) break\n\n      // Keep track of partial messages in between stream chunks.\n      partialMessage += utf8Decoder.decode(value)\n\n      for (;;) {\n        // Find the end of the first message. If there isn't one we need to get the next chunk in the stream.\n        const messageEnd = partialMessage.indexOf(MESSAGE_DELIMITER)\n        if (messageEnd === -1) break\n\n        const rawMessage = partialMessage.slice(0, messageEnd).replace(MESSAGE_REGEXP, '')\n        const parsedMessage: MessageStreamingResponse = JSON.parse(rawMessage)\n\n        yield parsedMessage\n\n        // If we get a complete or error message, then we know we are done and can exit early.\n        if (parsedMessage.type === 'complete') return\n\n        // Move to the next potential message in this chunk.\n        partialMessage = partialMessage.slice(messageEnd + MESSAGE_DELIMITER.length)\n      }\n    }\n  }\n\n  async stop() {\n    return this.reader.cancel()\n  }\n}\n","import {reviewUserMessage} from '@github-ui/copilot-chat/utils/constants'\nimport {isFeatureEnabled} from '@github-ui/feature-flags'\nimport {sendEvent} from '@github-ui/hydro-analytics'\nimport {verifiedFetch} from '@github-ui/verified-fetch'\n\nimport type {\n  AddCopilotChatReferenceEvent,\n  OpenCopilotChatEvent,\n  SearchCopilotEvent,\n  SymbolChangedEvent,\n} from './copilot-chat-events'\nimport {\n  buildMessage,\n  isDocset,\n  isRepository,\n  isThreadOlderThan4Hours,\n  makeRepositoryReference,\n  referencesAreEqual,\n} from './copilot-chat-helpers'\nimport {CopilotChatMessageStreamer} from './copilot-chat-message-streamer'\nimport type {CopilotChatAction, CopilotChatState} from './copilot-chat-reducer'\nimport {CopilotChatService, ERRORS} from './copilot-chat-service'\nimport type {\n  AppAgentRequestErrorPayload,\n  ChatError,\n  CopilotChatAgent,\n  CopilotChatEventPayload,\n  CopilotChatIntentsType,\n  CopilotChatMessage,\n  CopilotChatOrg,\n  CopilotChatReference,\n  CopilotChatRepo,\n  CopilotChatSuggestions,\n  CopilotChatThread,\n  CopilotClientConfirmation,\n  Docset,\n  MessageStreamingErrorType,\n  MessageStreamingResponse,\n  MessageStreamingResponseError,\n  NotAuthorizedForAgentErrorPayload,\n  RepositoryReference,\n  TopicItem,\n} from './copilot-chat-types'\nimport {CopilotChatIntents, MESSAGE_STREAMING_ERROR_TYPES, SUPPORTED_FUNCTIONS} from './copilot-chat-types'\nimport {copilotFeatureFlags} from './copilot-feature-flags'\nimport {copilotLocalStorage} from './copilot-local-storage'\n\nexport type Dispatcher = (value: CopilotChatAction) => void\nconst multipleAgentsAttemptMessage =\n  \"Only one agent is allowed per thread, and their context can't be shared. If you want to interact with another agent, please start a new thread and @ mention the new agent.\"\n\nexport class CopilotChatManager {\n  dispatch: Dispatcher\n  service: CopilotChatService\n  unstickyReferencesFeatureEnabled: boolean = copilotFeatureFlags.unstickyReferences\n\n  constructor(dispatch: Dispatcher, apiURL: string, ssoOrganizations: CopilotChatOrg[]) {\n    this.dispatch = dispatch\n    this.service = new CopilotChatService(apiURL, ssoOrganizations)\n  }\n\n  /**\n   * Opens a new chat window\n   * @param thread the thread to display (leave null to try to find an appropriate thread to open or start a new thread)\n   * @param currentView\n   * @param source what is triggering the open, e.g. 'search-bar' or 'header'\n   * @param expectedReference a reference the thread should be relevant to, if the default one doesn't reference this, create a new thread.\n   * @returns\n   */\n  async openChat(\n    thread: CopilotChatThread | null,\n    currentView: 'thread' | 'list',\n    source: string,\n    chatVisibleSettingPath?: string,\n    expectedReference?: CopilotChatReference,\n  ) {\n    this.dispatch({type: 'OPEN_COPILOT_CHAT', source})\n    if (currentView === 'list') return\n\n    await this.findOrStartNewThread(thread, expectedReference)\n    if (chatVisibleSettingPath) {\n      const data = new FormData()\n      data.set('copilot_chat_visible', 'true')\n      void verifiedFetch(chatVisibleSettingPath, {method: 'PUT', body: data})\n    }\n  }\n\n  closeChat(chatVisibleSettingPath?: string) {\n    this.dispatch({type: 'CLOSE_COPILOT_CHAT'})\n    if (chatVisibleSettingPath) {\n      const data = new FormData()\n      data.set('copilot_chat_visible', 'false')\n      void verifiedFetch(chatVisibleSettingPath, {\n        method: 'PUT',\n        body: data,\n        headers: {\n          Accept: 'application/json',\n        },\n      })\n    }\n    copilotLocalStorage.setCollapsedState(true)\n  }\n\n  viewAllThreads() {\n    this.dispatch({type: 'VIEW_ALL_THREADS'})\n  }\n\n  viewCurrentThread() {\n    this.dispatch({type: 'VIEW_CURRENT_THREAD'})\n  }\n\n  collapseChat() {\n    this.dispatch({type: 'COLLAPSE_COPILOT_CHAT'})\n    copilotLocalStorage.setCollapsedState(true)\n  }\n\n  expandChat() {\n    this.dispatch({type: 'EXPAND_COPILOT_CHAT'})\n    copilotLocalStorage.setCollapsedState(false)\n  }\n\n  async sendChatMessage(\n    thread: CopilotChatThread | null,\n    content: string,\n    references: CopilotChatReference[],\n    topic?: CopilotChatRepo | Docset,\n    context?: CopilotChatReference[],\n    confirmations?: CopilotClientConfirmation,\n    customInstructions?: string,\n    knowledgeBases?: Docset[],\n  ) {\n    const topicIsDocset = isDocset(topic)\n\n    const intent = getIntentFromReferencesAndTopic({references, topicIsDocset})\n    const repo = topicIsDocset ? undefined : topic\n\n    if (topicIsDocset && !references.some(ref => ref.type === 'docset' && ref.name === topic.name)) {\n      references.push({\n        type: 'docset',\n        name: topic.name,\n        id: topic.id,\n        scopingQuery: topic.scopingQuery,\n        avatarUrl: topic.avatarUrl,\n        repos: topic.repos,\n        description: topic.description,\n      })\n    }\n\n    return this.sendMessage(\n      thread,\n      content,\n      intent,\n      references,\n      repo,\n      context,\n      confirmations,\n      customInstructions,\n      knowledgeBases,\n    )\n  }\n\n  async stopStreaming(message: CopilotChatMessage | null, streamer: CopilotChatMessageStreamer) {\n    await streamer.stop()\n\n    this.dispatch({type: 'MESSAGE_STREAMING_STOPPED', message})\n  }\n\n  private async sendMessage(\n    thread: CopilotChatThread | null,\n    content: string,\n    intent: CopilotChatIntentsType,\n    references: CopilotChatReference[],\n    repo?: CopilotChatRepo,\n    context?: CopilotChatReference[],\n    confirmations?: CopilotClientConfirmation,\n    customInstructions?: string,\n    knowledgeBases?: Docset[],\n  ) {\n    const confirmationsArray = confirmations ? [confirmations] : []\n    const userMessage = buildMessage({role: 'user', content, references, thread, confirmations: confirmationsArray})\n\n    this.dispatch({type: 'MESSAGE_ADDED', message: userMessage})\n\n    const newMessage = buildMessage({role: 'assistant', content: '', thread})\n\n    this.dispatch({type: 'WAITING_ON_COPILOT', loading: true})\n\n    // create thread if one is not given\n    if (!thread) {\n      const res = await this.service.createThread()\n      if (res.ok) {\n        thread = res.payload\n        copilotLocalStorage.migrateNullThreadToNewThread(thread.id)\n      } else {\n        this.handleSendMessageError(thread, makeBasicError(res.error))\n        return\n      }\n    }\n\n    this.dispatch({type: 'THREAD_UPDATED', thread: {...thread, updatedAt: new Date().toISOString()}})\n\n    // as of https://github.com/github/copilot-core-productivity/issues/1040 we need to leave\n    // the reference in the thread if we're talking about a knowledge base (Docset)\n    if (this.unstickyReferencesFeatureEnabled && intent !== CopilotChatIntents.askDocs) {\n      this.dispatch({type: 'CLEAR_REFERENCES', threadID: thread.id})\n    }\n\n    const implicitContext =\n      !references.length || (references.length === 1 && references[0]?.type === 'repository') ? context : undefined\n    sendEvent('copilot.implicit_context', {\n      usedImplicitContext: !!implicitContext,\n      type: implicitContext?.[0]?.type,\n      count: implicitContext?.length,\n    })\n    if (!references.length && repo) references = [makeRepositoryReference(repo)]\n\n    const customInstructionsArray = customInstructions ? [customInstructions] : []\n\n    const res = await this.service.createMessageStreaming(\n      thread.id,\n      content,\n      intent,\n      references,\n      implicitContext ?? [],\n      confirmationsArray,\n      customInstructionsArray,\n      knowledgeBases,\n    )\n    if (!res.ok) {\n      this.handleSendMessageError(thread, makeBasicError(res.error))\n      return\n    }\n\n    const reader = res.response.body?.getReader()\n    if (!reader) {\n      this.handleSendMessageError(thread, makeBasicError(this.service.ERROR_MSG))\n      return\n    }\n\n    const streamer = new CopilotChatMessageStreamer(reader)\n\n    this.dispatch({type: 'MESSAGE_STREAMING_STARTED', message: newMessage, streamer})\n\n    await this.handleStreamingMessage(thread, streamer, implicitContext)\n  }\n\n  addReference(reference: CopilotChatReference, source: string) {\n    this.dispatch({type: 'ADD_REFERENCE', reference, source})\n  }\n\n  removeReference(referenceIndex: number) {\n    this.dispatch({type: 'REMOVE_REFERENCE', referenceIndex})\n  }\n\n  clearCurrentReferences = () => {\n    this.dispatch({type: 'CLEAR_CURRENT_REFERENCES'})\n  }\n\n  async dismissAttachKnowledgeBaseHerePopover() {\n    this.dispatch({type: 'DISMISS_ATTACH_KNOWLEDGE_BASE_HERE_POPOVER'})\n    await verifiedFetch('/settings/dismiss-notice/copilot_for_docs_attach_knowledge_base_here', {\n      method: 'POST',\n    })\n  }\n\n  async dismissKnowledgeBaseAttachedToChatPopover() {\n    this.dispatch({type: 'DISMISS_KNOWLEDGE_BASE_ATTACHED_TO_CHAT_POPOVER'})\n    await verifiedFetch('/settings/dismiss-notice/copilot_for_docs_knowledge_base_attached_to_chat', {\n      method: 'POST',\n    })\n  }\n\n  async selectThread(thread: CopilotChatThread | null, includeThreads: boolean = true) {\n    this.dispatch({type: 'SELECT_THREAD', thread})\n    const thingsToFetch = []\n\n    thingsToFetch.push(this.fetchMessages(thread?.id || null))\n    if (includeThreads) thingsToFetch.push(this.fetchThreads())\n\n    await Promise.all(thingsToFetch)\n  }\n\n  addMessage(\n    role: 'user' | 'assistant',\n    thread: CopilotChatThread | null,\n    content: string,\n    references: CopilotChatReference[],\n  ) {\n    const message = buildMessage({role, content, references, thread})\n    this.dispatch({type: 'MESSAGE_ADDED', message})\n  }\n\n  async renameThread(thread: CopilotChatThread, newName: string) {\n    const res = await this.service.renameThread(thread.id, newName)\n    if (res.ok) {\n      this.dispatch({type: 'THREAD_UPDATED', thread: {...thread, name: newName}})\n    }\n  }\n\n  async clearThread(thread: CopilotChatThread) {\n    const res = await this.service.clearThread(thread.id)\n    if (res.ok) {\n      this.dispatch({type: 'CLEAR_THREAD', threadID: thread.id})\n    }\n  }\n\n  async deleteThreadKeepSelection(thread: CopilotChatThread) {\n    this.dispatch({type: 'DELETE_THREAD_KEEP_SELECTION', thread})\n    const res = await this.service.deleteThread(thread.id)\n    if (!res.ok) this.dispatch({type: 'DELETE_THREAD_ERROR', thread, error: res.error})\n  }\n\n  async deleteThread(thread: CopilotChatThread) {\n    this.dispatch({type: 'DELETE_THREAD', thread})\n    const res = await this.service.deleteThread(thread.id)\n    if (!res.ok) this.dispatch({type: 'DELETE_THREAD_ERROR', thread, error: res.error})\n  }\n\n  async createThread(\n    initialMessage?: string,\n    initialReferences?: CopilotChatReference[],\n  ): Promise<CopilotChatThread | null> {\n    this.dispatch({type: 'THREADS_LOADING'})\n\n    const res = await this.service.createThread()\n    if (!res.ok) {\n      this.dispatch({type: 'THREADS_LOADING_ERROR', message: res.error})\n      return null\n    }\n\n    const thread = res.payload\n\n    if (initialMessage) {\n      copilotLocalStorage.setSavedMessageFast(thread.id, initialMessage)\n    }\n    if (initialReferences) {\n      copilotLocalStorage.setCurrentReferences(thread.id, initialReferences)\n    }\n    this.dispatch({type: 'THREAD_CREATED', thread})\n\n    return thread\n  }\n\n  async generateSuggestions(\n    context: CopilotChatReference | CopilotChatRepo | Docset,\n    threadID: string,\n  ): Promise<CopilotChatSuggestions | null> {\n    const res = await this.service.generateSuggestions(context, threadID)\n    if (!res.ok) {\n      // No need to throw an error here, we can return null if suggestions fail\n      return null\n    }\n\n    const suggestions = res.payload\n    this.dispatch({type: 'SUGGESTIONS_GENERATED', suggestions})\n\n    return suggestions\n  }\n\n  clearSuggestions(): void {\n    this.dispatch({type: 'CLEAR_SUGGESTIONS'})\n  }\n\n  async handleOpenPanelEvent(\n    thread: CopilotChatThread | null,\n    e: OpenCopilotChatEvent,\n    topic?: CopilotChatRepo | Docset,\n  ) {\n    const payload = e.payload\n    // We always want to create a new thread for icebreakers, they don't make sense to include in an existing thread\n    if (payloadIsIcebreaker(payload)) {\n      thread = await this.createThread()\n    } else if (payloadHasIntent(payload, [CopilotChatIntents.reviewPr])) {\n      this.addMessage('user', payload.thread, reviewUserMessage, payload.references)\n      this.addMessage('assistant', payload.thread, payload.completion, payload.references)\n      void this.selectThread(payload.thread, true)\n    } else {\n      thread = await this.findOrStartNewThread(thread)\n    }\n\n    this.dispatch({type: 'HANDLE_EVENT_START', references: payload.references, id: payload.id})\n\n    // conversation events are only used to set up references, unless it is an icebreaker\n    if (\n      payloadHasIntent(payload, [\n        CopilotChatIntents.conversation,\n        CopilotChatIntents.discussFileDiff,\n        CopilotChatIntents.reviewPr,\n      ]) &&\n      !payloadIsIcebreaker(payload)\n    )\n      return\n\n    let source = `blob ${payload.intent}`\n    if (payload.id) {\n      source = `element ${e.payload.id}`\n    }\n    sendEvent('copilot.open_copilot_chat', {source})\n\n    await this.sendMessage(\n      thread,\n      payload.content,\n      payload.intent,\n      payload.references ?? [],\n      isRepository(topic) ? topic : undefined,\n    )\n  }\n\n  async handleSearchCopilotEvent(e: SearchCopilotEvent) {\n    const thread = await this.createThread()\n    const topic = await this.fetchCurrentRepo(e.repoNwo)\n    const ref: RepositoryReference[] = topic ? [{type: 'repository', ...topic}] : []\n\n    void this.openChat(thread, 'thread', 'search-bar')\n    this.expandChat()\n    await this.sendMessage(thread, e.content, CopilotChatIntents.conversation, ref)\n    sendEvent('copilot.open_copilot_chat', {source: 'search-bar'})\n  }\n\n  async handleAddReferenceEvent(e: AddCopilotChatReferenceEvent) {\n    // make sure there's a thread to add the reference to\n    await this.findOrStartNewThread()\n    this.addReference(e.reference, 'event')\n    if (e.openPanel) {\n      this.dispatch({type: 'OPEN_COPILOT_CHAT', source: 'event', id: e.id})\n    }\n  }\n\n  handleSymbolChangedEvent(e: SymbolChangedEvent) {\n    const symbolContext = e.context\n    this.dispatch({type: 'IMPLICIT_CONTEXT_UPDATED', context: [symbolContext]})\n  }\n\n  getSelectedThread(state: CopilotChatState): CopilotChatThread | null {\n    if (!state.selectedThreadID) return null\n    return state.threads.get(state.selectedThreadID) || null\n  }\n\n  sortThreads(threads: Map<string, CopilotChatThread>): CopilotChatThread[] {\n    const threadsArr = Array.from(threads.values())\n    return threadsArr.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())\n  }\n\n  async sendMessageToNewThread(\n    prevThreadID: string | null,\n    message: string,\n    refs: CopilotChatReference[],\n    context?: CopilotChatReference[],\n  ) {\n    if (message.trim() === '') return\n\n    if (prevThreadID) {\n      copilotLocalStorage.setSavedMessageFast(prevThreadID, null)\n      copilotLocalStorage.clearCurrentReferences(prevThreadID)\n    }\n\n    // Create a new thread and send the message\n    await this.sendMessage(null, message, CopilotChatIntents.conversation, refs, undefined, context)\n  }\n\n  async fetchMessages(threadID: string | null) {\n    const refs = copilotLocalStorage.getCurrentReferences(threadID)\n\n    if (!threadID) {\n      this.threadDataLoaded([], refs || [])\n      return\n    }\n\n    this.dispatch({type: 'MESSAGES_UPDATED', messages: [], state: 'loading'})\n\n    const res = await this.service.listMessages(threadID)\n    if (res.ok) {\n      const thread = res.payload.thread\n      this.threadDataLoaded(res.payload.messages, refs || thread.currentReferences || [])\n    } else {\n      this.dispatch({type: 'MESSAGES_UPDATED', state: 'error'})\n    }\n  }\n\n  selectReference(reference: CopilotChatReference | null) {\n    this.dispatch({type: 'SELECT_REFERENCE', reference})\n  }\n\n  setTopRepositoryTopics(topics: TopicItem[] | undefined) {\n    this.dispatch({type: 'SET_TOP_REPOSITORIES', topics})\n  }\n\n  private async handleStreamingMessage(\n    thread: CopilotChatThread,\n    streamer: CopilotChatMessageStreamer,\n    implicitContext?: CopilotChatReference[],\n  ) {\n    try {\n      for await (const message of streamer.stream()) {\n        await this.processStreamingMessage(thread, message, implicitContext)\n      }\n    } catch (e) {\n      const error = this.isWrappedStreamingResponseError(e)\n        ? this.getStreamingErrorMessage(e.error)\n        : makeBasicError(this.service.ERROR_MSG)\n      this.handleSendMessageError(thread, error)\n\n      return\n    }\n  }\n\n  private isWrappedStreamingResponseError(e: unknown): e is {error: MessageStreamingResponseError} {\n    return (\n      !!e &&\n      typeof e === 'object' &&\n      'error' in e &&\n      !!e.error &&\n      typeof e.error === 'object' &&\n      'errorType' in e.error &&\n      typeof e.error.errorType === 'string' &&\n      MESSAGE_STREAMING_ERROR_TYPES.includes(e.error.errorType as MessageStreamingErrorType)\n    )\n  }\n\n  private async processStreamingMessage(\n    thread: CopilotChatThread,\n    messageResponse: MessageStreamingResponse,\n    implicitContext?: CopilotChatReference[],\n  ) {\n    switch (messageResponse.type) {\n      case 'content': {\n        this.dispatch({type: 'MESSAGE_STREAMING_TOKEN_ADDED', token: messageResponse.body})\n        break\n      }\n      case 'functionCall': {\n        if (functionIsSupported(messageResponse.name)) {\n          this.dispatch({\n            type: 'MESSAGE_STREAMING_FUNCTION_CALLED',\n            name: messageResponse.name,\n            status: messageResponse.status,\n            arguments: messageResponse.arguments,\n            errorMessage: messageResponse.errorMessage,\n            references: messageResponse.references,\n          })\n        }\n        break\n      }\n      case 'confirmation': {\n        this.dispatch({\n          type: 'MESSAGE_STREAMING_CONFIRMATION',\n          title: messageResponse.title,\n          message: messageResponse.message,\n          confirmation: messageResponse.confirmation,\n        })\n        break\n      }\n      case 'complete': {\n        this.dispatch({type: 'MESSAGE_STREAMING_COMPLETED', messageResponse})\n        await this.handleSendMessageSuccess(thread)\n        if (implicitContext && implicitContext.length > 0 && copilotFeatureFlags.followUpThreadSuggestions)\n          await this.generateSuggestions(implicitContext[0]!, thread.id)\n        break\n      }\n      case 'error': {\n        const errMsg = this.getStreamingErrorMessage(messageResponse)\n        this.handleSendMessageError(thread, errMsg)\n        break\n      }\n      case 'debug': {\n        // eslint-disable-next-line no-console\n        console.log('Prompt Body:', messageResponse.body)\n        break\n      }\n      case 'agentError':\n        this.dispatch({\n          type: 'AGENT_ERROR',\n          error: {\n            type: messageResponse.agentErrorType,\n            code: messageResponse.code,\n            message: messageResponse.message,\n            identifier: messageResponse.identifier,\n          },\n        })\n        break\n    }\n  }\n\n  private getStreamingErrorMessage(res: MessageStreamingResponseError): ChatError {\n    switch (res.errorType) {\n      case 'filtered':\n        return makeBasicError(ERRORS[403] || this.service.ERROR_MSG)\n      case 'contentTooLarge':\n        return makeBasicError(ERRORS[413] || this.service.ERROR_MSG)\n      case 'rateLimit':\n        return makeBasicError(ERRORS[429] || this.service.ERROR_MSG)\n      case 'agentUnauthorized': {\n        const details = JSON.parse(res.description) as NotAuthorizedForAgentErrorPayload\n        const authorizeURL = `You haven't authorized ${details.name} to access your account. You can do that by going here: ${window.location.origin}/login/oauth/authorize?client_id=${details.client_id}`\n        return {type: 'agentUnauthorized', isError: true, message: authorizeURL, details}\n      }\n      case 'agentRequest': {\n        const details = JSON.parse(res.description) as AppAgentRequestErrorPayload\n        return {type: 'agentRequest', isError: true, message: details.message, details}\n      }\n      case 'multipleAgentsAttempt': {\n        return makeBasicError(multipleAgentsAttemptMessage)\n      }\n      case 'networkError':\n        return makeBasicError(ERRORS[408] || this.service.ERROR_MSG)\n      case 'exception':\n      default:\n        return makeBasicError(this.service.ERROR_MSG)\n    }\n  }\n\n  private async handleSendMessageSuccess(thread: CopilotChatThread) {\n    copilotLocalStorage.setSavedMessage(thread.id, null)\n    copilotLocalStorage.clearCurrentReferences(thread.id)\n\n    this.dispatch({type: 'WAITING_ON_COPILOT', loading: false})\n\n    thread = await this.generateThreadName(thread)\n    this.dispatch({type: 'THREAD_UPDATED', thread: {...thread, updatedAt: new Date().toISOString()}})\n  }\n\n  private handleSendMessageError(thread: CopilotChatThread | null, error: ChatError) {\n    const message = buildMessage({role: 'assistant', content: '', error, thread})\n    this.dispatch({type: 'MESSAGE_ADDED', message})\n    this.dispatch({type: 'WAITING_ON_COPILOT', loading: false})\n    this.dispatch({type: 'MESSAGE_STREAMING_FAILED'})\n  }\n\n  async fetchThreads(): Promise<CopilotChatThread[] | null> {\n    this.dispatch({type: 'THREADS_LOADING'})\n\n    const res = await this.service.fetchThreads()\n    if (!res.ok) {\n      // There is a bit of a race condition with the THREADS_LOADING event\n      // Wait 10ms before dispatching the THREADS_LOADING_ERROR event\n      setTimeout(() => this.dispatch({type: 'THREADS_LOADING_ERROR', message: res.error}), 100)\n      return null\n    }\n\n    // There is a bit of a race condition with the THREADS_LOADING event\n    // Wait 10ms before dispatching the THREADS_LOADED event\n    setTimeout(() => this.dispatch({type: 'THREADS_LOADED', threads: res.payload}), 100)\n\n    return res.payload\n  }\n\n  /**\n   * Finds a thread to show to the user in a new chat, or starts a new thread if none are found.\n   * @param currentThread The current thread to show to the user.\n   * @param expectedReference A reference the thread should be relevant to, if the default one doesn't reference this, create a new thread.\n   */\n  private async findOrStartNewThread(\n    currentThread?: CopilotChatThread | null,\n    expectedReference?: CopilotChatReference,\n  ): Promise<CopilotChatThread | null> {\n    let thread: CopilotChatThread | null = null\n\n    if (currentThread) {\n      thread = currentThread\n    } else {\n      const threads = await this.fetchThreads()\n      if (threads?.length) {\n        const previouslySelectedThreadID = copilotLocalStorage.selectedThreadID\n        thread = (previouslySelectedThreadID && threads.find(t => t.id === previouslySelectedThreadID)) || threads[0]!\n      }\n    }\n\n    if (thread && isThreadOlderThan4Hours(thread)) thread = null\n\n    if (thread && expectedReference) {\n      const response = await this.service.listMessages(thread.id)\n      if (response.ok) {\n        const messages = response.payload.messages\n        const len = messages?.length\n        // Check for the last user message (len - 2) in the thread and see if any of its references match the the expected reference\n        if (len >= 2 && !messages[len - 2]?.references?.find(ref => referencesAreEqual(ref, expectedReference))) {\n          thread = null\n        }\n      }\n    }\n\n    await this.selectThread(thread, false)\n\n    return thread\n  }\n\n  private async generateThreadName(thread: CopilotChatThread): Promise<CopilotChatThread> {\n    if (thread.name) return thread\n\n    const res = await this.service.generateThreadName(thread.id)\n    if (res.ok) thread = {...thread, name: res.payload}\n\n    return thread\n  }\n\n  public async fetchAgents(agentsPath: string): Promise<CopilotChatAgent[]> {\n    const res = await this.service.listAgents(agentsPath)\n    let agents: CopilotChatAgent[] = []\n    if (res.ok) {\n      agents = res.payload\n      this.dispatch({type: 'SET_AGENTS', agents})\n    }\n\n    return agents\n  }\n\n  public async fetchCurrentRepo(repoID: number | string): Promise<CopilotChatRepo | undefined> {\n    this.dispatch({type: 'CURRENT_TOPIC_UPDATED', topic: undefined, state: 'loading'})\n    const res = await this.service.fetchRepo(repoID)\n    if (res.ok) {\n      this.dispatch({type: 'CURRENT_TOPIC_UPDATED', topic: res.payload, state: 'loaded'})\n      return res.payload\n    } else {\n      this.dispatch({type: 'CURRENT_TOPIC_UPDATED', topic: undefined, state: 'error'})\n    }\n    return undefined\n  }\n\n  public async fetchKnowledgeBases() {\n    this.dispatch({type: 'KNOWLEDGE_BASES_LOADING'})\n    const res = await this.service.listDocsets()\n    if (res.ok) {\n      this.dispatch({type: 'KNOWLEDGE_BASES_LOADED', knowledgeBases: res.payload})\n    } else {\n      this.dispatch({type: 'KNOWLEDGE_BASES_LOADING_ERROR', message: res.error})\n    }\n    return res\n  }\n\n  public async fetchCurrentDocset(docsetName: string) {\n    this.dispatch({type: 'CURRENT_TOPIC_UPDATED', topic: undefined, state: 'loading'})\n    const res = await this.fetchKnowledgeBases()\n    if (!res.ok) {\n      this.dispatch({type: 'CURRENT_TOPIC_UPDATED', topic: undefined, state: 'error'})\n      return\n    }\n\n    const docset = res.payload.find(d => d.name === docsetName)\n    if (!docset) {\n      this.dispatch({type: 'CURRENT_TOPIC_UPDATED', topic: undefined, state: 'error'})\n      return\n    }\n\n    this.dispatch({type: 'CURRENT_TOPIC_UPDATED', topic: docset, state: 'loaded'})\n  }\n\n  public async fetchImplicitContext(url: string, owner: string, repo: string) {\n    const res = await this.service.fetchImplicitContext(url, owner, repo)\n    if (res.ok) {\n      const context = !res.payload ? undefined : Array.isArray(res.payload) ? res.payload : [res.payload]\n      this.dispatch({type: 'IMPLICIT_CONTEXT_UPDATED', context})\n    } else {\n      return undefined\n    }\n  }\n\n  public async deleteDocset(docset: Docset) {\n    const res = await this.service.deleteDocset(docset)\n    return res.ok\n  }\n\n  public clearCurrentTopic = () => {\n    this.dispatch({type: 'CURRENT_TOPIC_UPDATED', topic: undefined, state: 'loaded'})\n  }\n\n  public showTopicPicker = (value = true) => {\n    this.dispatch({type: 'SHOW_TOPIC_PICKER', show: value})\n  }\n\n  private threadDataLoaded(messages: CopilotChatMessage[], references: CopilotChatReference[]) {\n    this.dispatch({\n      type: 'MESSAGES_UPDATED',\n      messages,\n      state: 'loaded',\n    })\n\n    this.dispatch({\n      type: 'REFERENCES_LOADED',\n      references,\n    })\n  }\n}\n\nfunction payloadIsIcebreaker(payload: CopilotChatEventPayload) {\n  return (\n    payloadHasIntent(payload, [CopilotChatIntents.explain, CopilotChatIntents.suggest]) ||\n    (payloadHasIntent(payload, [CopilotChatIntents.conversation]) && payloadHasContent(payload))\n  )\n}\n\nfunction payloadHasContent(payload: CopilotChatEventPayload): payload is CopilotChatEventPayload & {content: string} {\n  return 'content' in payload && typeof payload.content == 'string'\n}\n\nfunction payloadHasIntent<const Intent extends CopilotChatIntentsType>(\n  payload: CopilotChatEventPayload,\n  intents: readonly Intent[],\n): payload is Extract<typeof payload, {intent: Intent}> {\n  const set = new Set<string>(intents)\n  return set.has(payload.intent)\n}\n\nfunction getIntentFromReferencesAndTopic({\n  references,\n  topicIsDocset,\n}: {\n  references: CopilotChatReference[]\n  topicIsDocset: boolean\n}): CopilotChatIntentsType {\n  const allReferenceTypes = new Set(references.map(r => r.type))\n  switch (true) {\n    case topicIsDocset || allReferenceTypes.has('docset'): {\n      return isFeatureEnabled('COPILOT_CHAT_CONVERSATION_INTENT_KNOWLEDGE_SEARCH_SKILL')\n        ? CopilotChatIntents.conversation\n        : CopilotChatIntents.askDocs\n    }\n  }\n\n  return CopilotChatIntents.conversation\n}\n\nfunction functionIsSupported(name: string): boolean {\n  return SUPPORTED_FUNCTIONS.includes(name) || (copilotFeatureFlags.issueCreation && name === 'githubissuecreate')\n}\n\nfunction makeBasicError(message: string): ChatError {\n  return {isError: true, message, type: 'basic'}\n}\n","import {debounce} from '@github/mini-throttle'\nimport type {Dispatch, PropsWithChildren} from 'react'\nimport {createContext, useContext, useEffect, useMemo} from 'react'\n\nimport {CopilotChatManager} from './copilot-chat-manager'\nimport type {CopilotChatAction, CopilotChatState} from './copilot-chat-reducer'\nimport type {CopilotChatOrg} from './copilot-chat-types'\nimport {copilotFeatureFlags} from './copilot-feature-flags'\nimport {copilotLocalStorage} from './copilot-local-storage'\n\nconst CopilotChatManagerContext = createContext<CopilotChatManager | null>(null)\n\nexport interface CopilotChatManagerProviderProps {\n  apiURL: string\n  state: CopilotChatState\n  dispatch: Dispatch<CopilotChatAction>\n  ssoOrganizations: CopilotChatOrg[]\n}\n\nexport function CopilotChatManagerProvider({\n  apiURL,\n  state,\n  dispatch,\n  ssoOrganizations,\n  children,\n}: PropsWithChildren<CopilotChatManagerProviderProps>) {\n  const manager = useMemo(\n    () => new CopilotChatManager(dispatch, apiURL, ssoOrganizations),\n    [dispatch, apiURL, ssoOrganizations],\n  )\n\n  useEffect(() => {\n    const fetchCurrentTopic = async () => {\n      if (state.selectedThreadID && state.messages.length > 0 && !state.currentTopic) {\n        const currentThreadTopic = copilotLocalStorage.getSelectedTopic(state.selectedThreadID)\n        if (currentThreadTopic) {\n          const numberId = Number(currentThreadTopic)\n          if (!isNaN(numberId)) {\n            await manager.fetchCurrentRepo(numberId)\n          } else {\n            await manager.fetchCurrentDocset(currentThreadTopic)\n          }\n        }\n      }\n    }\n    void fetchCurrentTopic()\n  }, [state.selectedThreadID, manager, state.messages.length, state.currentTopic])\n\n  useEffect(() => {\n    const fetchContextPage = async () => {\n      const hash = window.location.hash\n      const pathName = window.location.pathname\n      const url = window.location.hash ? `${pathName}${hash}` : pathName\n      const urlParts = url.slice(1).split('/')\n      if (urlParts.length < 2) {\n        return\n      }\n\n      const owner = urlParts[0]\n      const repo = urlParts[1]\n\n      if (!owner || !repo) {\n        return\n      }\n\n      await manager.fetchImplicitContext(url, owner, repo)\n    }\n\n    const voidFetch = () => {\n      void fetchContextPage()\n    }\n\n    const debouncedFetch = debounce(voidFetch, 500)\n\n    function watchHistoryEvents() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const {replaceState} = window.history\n\n      window.history.replaceState = function (...args) {\n        replaceState.apply(window.history, args)\n        window.dispatchEvent(new Event('replaceState'))\n      }\n\n      window.addEventListener('popstate', debouncedFetch)\n      window.addEventListener('replaceState', debouncedFetch)\n\n      return () => {\n        window.removeEventListener('popstate', debouncedFetch)\n        window.removeEventListener('replaceState', debouncedFetch)\n      }\n    }\n\n    if (copilotFeatureFlags.implicitContext) {\n      debouncedFetch()\n      watchHistoryEvents()\n    }\n  }, [manager])\n\n  return <CopilotChatManagerContext.Provider value={manager}>{children}</CopilotChatManagerContext.Provider>\n}\n\nexport function useChatManager() {\n  return useContext(CopilotChatManagerContext)!\n}\n\ntry{ CopilotChatManagerContext.displayName ||= 'CopilotChatManagerContext' } catch {}\ntry{ CopilotChatManagerProvider.displayName ||= 'CopilotChatManagerProvider' } catch {}"],"names":["AuthToken","authorizationHeaderValue","value","needsRefreshing","ssoOrgIds","isExpired","ssoChanged","expirationDateString","Date","expiration","expirationDate","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","now","ssoOrgIDs","every","org","includes","fromResult","result","orgIds","token","serialize","deserialize","serialized","constructor","COPILOT_AUTH_TOKEN_KEY","CopilotAuthTokenProvider","getAuthToken","getLocalStorageAuthToken","validateAuthToken","fetchAuthToken","setLocalStorageAuthToken","copilotLocalStorage","setItem","JSON","stringify","getItem","parse","currentAuthTokenRequest","_fetchAuthToken","response","verifiedFetchJSON","method","ok","json","safeStorage","throwQuotaErrorsOnSet","ttl","copilotChatTextAreaId","copilotChatSearchInputId","reviewUserMessage","COPILOT_PATH","buildMessage","role","content","error","references","thread","confirmations","id","crypto","randomUUID","threadID","createdAt","toISOString","skillExecutions","clientConfirmations","threadName","name","referenceName","ref","type","fileRefName","fileDiffRefName","snippetRefName","title","fileName","path","split","pop","lines","range","start","end","ownerLogin","message","baseRevision","substring","headRevision","referenceID","repoOwner","repoName","commitOID","repository","owner","baseFile","headFile","selectedRange","kind","oid","commit","query","referenceURL","url","permalink","plainRenderableUrl","reference","languageName","toLowerCase","URL","window","location","origin","search","href","referencePath","length","join","referenceFileName","head","base","makeCopilotChatReference","file","repositoryTreePath","repo","commitish","refInfo","action","repoID","makeSymbolReference","suggestion","fullyQualifiedName","symbol","fully_qualified_name","suggestionDefinitions","identOffset","ident_start","ident_end","extentOffset","extent_start","extent_end","commit_sha","languageID","language_id","makeDocsetReference","docset","makeRepositoryReference","isDocset","repoOrDocset","isRepository","referencesAreEqual","a","b","undefined","referenceArraysAreEqual","i","navigateToAllTopics","showTopicPicker","mode","history","pushState","isFileReference","findAuthor","currentUserLogin","avatarURL","agentReference","find","login","isAgent","author","findAgentCorrespondents","messages","agentMessages","map","filter","uniqueAgents","Map","agent","set","Array","from","values","isThreadOlderThan4Hours","threadUpdatedAt","updatedAt","getTime","timeSinceLastMessage","TopicIndexStatus","CanIndexStatus","MIN_PANEL_HEIGHT","MIN_PANEL_WIDTH","useFilter","list","workerPath","workerRef","useRef","lastQueryRef","lastMatchesRef","isWorkerWorking","matches","setMatches","useState","searching","setSearching","clearMatches","useCallback","createWorker","worker","Worker","onmessage","data","current","e","console","warn","postWorkerMessage","terminate","usePreviousMatches","newQuery","startsWith","postMessage","baseList","useEffect","useReposIndexingState","nwos","isTopicDocset","checkKBStatus","repoStates","statuses","client","useQueryClient","invalidateIndexingStatus","Promise","all","nwo","invalidateQueries","queryKey","results","useQueries","queries","queryFn","fetchIndexingStatus","placeholderData","requestStatus","code","docs","staleTime","Infinity","mutate","triggerIndexingForRepos","useMutation","mutationKey","mutationFn","triggerIndexing","onSuccess","aggregatedIndexingStatus","r","s","some","aggregateTopicIndexStatuses","useInterval","callback","delay","intervalRef","savedCallback","setInterval","clearInterval","isIndexingInProgress","useResizablePanel","initialPanelHeight","getPanelHeight","initialPanelWidth","getPanelWidth","resizeStartY","resizeStartHeight","newHeight","resizeStartX","resizeStartWidth","newWidth","panelHeight","setPanelHeight","panelWidth","setPanelWidth","remSize","parseFloat","getComputedStyle","document","documentElement","fontSize","Math","min","max","height","innerHeight","width","innerWidth","resize","dy","clientY","dx","clientX","stopResize","removeEventListener","startResize","horizontal","vertical","button","preventDefault","addEventListener","onResizerKeyDown","key","newPanelHeight","newPanelWidth","useSidePanelPositionStyles","open","positionStyles","setPositionStyles","panelRef","useChatPanelReferenceContext","clientWidth","left","bottom","res","fetch","encodeURIComponent","headers","Accept","can_index","code_status","docs_status","onlyDocs","nwosParam","verifiedFetch","ApiCache","get","params","separator","cached","cache","promise","fetchFn","delete","HYDRATABLE_REFERENCE_TYPES","Set","ERRORS","CopilotChatService","fetchThreads","queryParams","URLSearchParams","pathWithParams","toString","makeCAPIRequest","payload","threads","status","createThread","deleteThread","renameThread","newName","generate","clearThread","generateThreadName","listMessages","listMessagesCache","createMessage","intent","customInstructions","currentURL","createMessageStreaming","context","knowledgeBases","body","streaming","sendFeedback","feedback","feedbackChoice","messageId","threadId","textResponse","makeDotcomRequest","urlPathPrefix","feedback_choice","message_id","thread_id","text_response","listDocsets","fetchDocsetsResponse","listAdministratedCopilotEnterpriseOrganizations","administratedCopilotEnterpriseOrganizations","docsetsPromise","docsetRequestPromise","deleteDocset","listRepoFiles","treeListPath","commitOid","includeDirectories","repoFilesCache","querySymbols","querySymbolsCache","fetchImplicitContext","fetchRepo","repoDetailsCache","has","listAgents","agentsPath","ERROR_MSG","hydrateReference","fetchLanguageForFileReference","btoa","fetchPath","blobDetectLanguage","generateSuggestions","currentUrl","exp","getCopilotExperiments","components","replaceAll","copilotAuthTokenProvider","directConnectConfiguration","integrationID","streamingResponse","basePath","baseURL","apiURL","Authorization","ssoOrgs","listRepoFilesImpl","paths","querySymbolsImpl","suggestions","TREE_COMPARISON_REFERENCE_TYPE","CopilotChatIntents","explain","conversation","suggest","askDocs","discussFileDiff","explainFileDiff","reviewPr","MESSAGE_STREAMING_ERROR_TYPES","SUPPORTED_FUNCTIONS","copilotFeatureFlags","CopilotFeatureFlags","embedding","isFeatureEnabled","copyMessage","formatDiff","unstickyReferences","vulnerabilityAnnotations","implicitContext","issueCreation","staticThreadSuggestions","followUpThreadSuggestions","followupToAgent","reactMarkdown","dotcomUserServerTokens","copilotFloatingButton","CopilotLocalStorage","selectedThreadID","localStorage","COPILOT_SELECTED_THREAD_ID_STORAGE_KEY","removeItem","val","COPILOT_PANEL_HEIGHT","parseInt","DEFAULT_PANEL_HEIGHT","COPILOT_PANEL_WIDTH","DEFAULT_PANEL_WIDTH","getCollapsedState","sessionStorage","COPILOT_COLLAPSED_STATE_KEY","setCollapsedState","collapsed","getSelectedTopic","COPILOT_SELECTED_TOPIC_STORAGE_KEY","setSelectedTopic","topic","getSavedMessage","COPILOT_SAVED_USER_MESSAGE_KEY","setSavedMessage","setSavedMessageFast","getCurrentReferences","COPILOT_CURRENT_REFERENCES_KEY","setCurrentReferences","uniqueReferences","index","findIndex","clearCurrentReferences","migrateNullThreadToNewThread","newThreadID","savedMessage","savedRefs","debounce","experimentsLocalStorageKey","experiments","setCopilotExperiments","getRepositorySearchQuery","queryString","orgIndexSplit","indexOf","orgSearchName","slice","repoSearchName","CopilotAutocompleteManager","filenameFromPath","parts","fetchAutocompleteSuggestions","symbolQuery","symbols","files","manager","service","symbolResults","flatMap","symbolSuggestions","$result","repoFileSuggestions","fileSuggestions","filesByPath","processChunk","$file","setTimeout","findReference","uniqueID","state","currentReferences","addToReferences","newReference","referenceToAdd","language","languageId","addReference","knowledgeSuggestions","CopilotChatAutocompleteContext","createContext","CopilotChatAutocompleteProvider","children","useChatManager","autocomplete","useMemo","Provider","useChatAutocomplete","useContext","displayName","copilotChatReducer","chattingAboutRepo","ssrSafeWindow","pathname","setSelectedThreadID","currentView","sendEvent","slashCommandLoading","threadActionMenuIsOpened","source","chatIsOpen","entryPointId","chatIsCollapsed","stringifyThread","count","size","messagesLoading","currentTopic","defaultRecipient","allClientConfirmations","loading","getDefaultRecipient","cc","Object","confirmation","sort","flat","Boolean","isWaitingOnCopilot","threadsLoading","renderAttachKnowledgeBaseHerePopover","renderKnowledgeBaseAttachedToChatPopover","knowledgeBasesLoading","t","stringifyMessage","stringifyReference","referenceIndex","_","show","topicLoading","streamer","streamingMessage","prevExecutions","firstStartedIdx","fc","firstStartedExecution","executions","slug","arguments","errorMessage","newMessage","messageResponse","copilotAnnotations","interrupted","selectedReference","topRepositoriesCache","topics","agents","agentError","agentErrors","identifier","stringifyObjectValues","obj","referenceCount","cleanCopilotAnnotations","annotations","CodeVulnerability","vuln","details","execution","argumentCount","currentReferenceCount","CopilotChatContext","ChatPanelReferenceContext","CopilotChatDispatchContext","CopilotChatProvider","refs","ssoOrganizations","renderKnowledgeBases","chatVisibleSetting","chatVisibleSettingPath","optedInToUserFeedback","testReducerState","reviewLab","initialState","apiUrl","findFileWorkerPath","currentRepository","suggestionsDismissed","dispatch","useReducer","environment","relayEnvironmentWithMissingFieldHandlerForNode","CopilotChatManagerProvider","RelayEnvironmentProvider","useChatState","MESSAGE_REGEXP","CopilotStreamingError","Error","description","CopilotChatMessageStreamer","stream","utf8Decoder","TextDecoder","partialMessage","done","reader","read","errorType","decode","messageEnd","parsedMessage","replace","stop","cancel","CopilotChatManager","openChat","expectedReference","findOrStartNewThread","FormData","closeChat","viewAllThreads","viewCurrentThread","collapseChat","expandChat","sendChatMessage","topicIsDocset","getIntentFromReferencesAndTopic","allReferenceTypes","push","scopingQuery","avatarUrl","repos","sendMessage","stopStreaming","confirmationsArray","userMessage","handleSendMessageError","makeBasicError","unstickyReferencesFeatureEnabled","usedImplicitContext","getReader","handleStreamingMessage","removeReference","dismissAttachKnowledgeBaseHerePopover","dismissKnowledgeBaseAttachedToChatPopover","selectThread","includeThreads","thingsToFetch","fetchMessages","addMessage","deleteThreadKeepSelection","initialMessage","initialReferences","clearSuggestions","handleOpenPanelEvent","payloadIsIcebreaker","payloadHasIntent","completion","handleSearchCopilotEvent","fetchCurrentRepo","repoNwo","handleAddReferenceEvent","openPanel","handleSymbolChangedEvent","symbolContext","getSelectedThread","sortThreads","threadsArr","sendMessageToNewThread","prevThreadID","trim","threadDataLoaded","selectReference","setTopRepositoryTopics","processStreamingMessage","isWrappedStreamingResponseError","getStreamingErrorMessage","handleSendMessageSuccess","errMsg","log","agentErrorType","isError","client_id","currentThread","previouslySelectedThreadID","len","fetchAgents","fetchKnowledgeBases","fetchCurrentDocset","docsetName","d","isArray","clearCurrentTopic","intents","CopilotChatManagerContext","fetchCurrentTopic","currentThreadTopic","numberId","Number","isNaN","fetchContextPage","hash","pathName","urlParts","debouncedFetch","watchHistoryEvents","replaceState","args","apply","dispatchEvent","Event"],"sourceRoot":""}
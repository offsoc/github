# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `simple_uuid` gem.
# Please instead update this file by running `bin/tapioca gem simple_uuid`.

# source://simple_uuid//lib/simple_uuid.rb#11
module SimpleUUID; end

# UUID format version 1, as specified in RFC 4122, with jitter in place of the mac address and sequence counter.
#
# source://simple_uuid//lib/simple_uuid.rb#13
class SimpleUUID::UUID
  include ::Comparable

  # @return [UUID] a new instance of UUID
  #
  # source://simple_uuid//lib/simple_uuid.rb#23
  def initialize(bytes = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://simple_uuid//lib/simple_uuid.rb#111
  def <=>(other); end

  # source://simple_uuid//lib/simple_uuid.rb#115
  def ==(other); end

  # source://simple_uuid//lib/simple_uuid.rb#129
  def bytes; end

  # @return [Boolean]
  #
  # source://simple_uuid//lib/simple_uuid.rb#138
  def eql?(other); end

  # source://simple_uuid//lib/simple_uuid.rb#134
  def hash; end

  # source://simple_uuid//lib/simple_uuid.rb#119
  def inspect(long = T.unsafe(nil)); end

  # source://simple_uuid//lib/simple_uuid.rb#103
  def seconds; end

  # source://simple_uuid//lib/simple_uuid.rb#96
  def to_guid; end

  # source://simple_uuid//lib/simple_uuid.rb#78
  def to_i; end

  # source://simple_uuid//lib/simple_uuid.rb#129
  def to_s; end

  # Return a time object
  #
  # source://simple_uuid//lib/simple_uuid.rb#149
  def to_time; end

  # source://simple_uuid//lib/simple_uuid.rb#107
  def usecs; end

  # source://simple_uuid//lib/simple_uuid.rb#92
  def variant; end

  # source://simple_uuid//lib/simple_uuid.rb#86
  def version; end

  private

  # source://simple_uuid//lib/simple_uuid.rb#161
  def total_usecs; end

  class << self
    # Given raw bytes, return a time object
    #
    # source://simple_uuid//lib/simple_uuid.rb#143
    def to_time(bytes); end

    # Given raw bytes, return the total_usecs
    #
    # source://simple_uuid//lib/simple_uuid.rb#154
    def total_usecs(bytes); end
  end
end

# Oct 15, 1582
#
# source://simple_uuid//lib/simple_uuid.rb#19
SimpleUUID::UUID::GREGORIAN_EPOCH_OFFSET = T.let(T.unsafe(nil), Integer)

# source://simple_uuid//lib/simple_uuid.rb#16
class SimpleUUID::UUID::InvalidVersion < ::StandardError; end

# source://simple_uuid//lib/simple_uuid.rb#21
SimpleUUID::UUID::VARIANT = T.let(T.unsafe(nil), Integer)

# source://simple_uuid//lib/simple_uuid.rb#1
class Time
  include ::Comparable
  include ::DateAndTime::Zones
  include ::DateAndTime::Calculations

  # source://simple_uuid//lib/simple_uuid.rb#6
  def stamp; end

  class << self
    # source://simple_uuid//lib/simple_uuid.rb#2
    def stamp; end
  end
end

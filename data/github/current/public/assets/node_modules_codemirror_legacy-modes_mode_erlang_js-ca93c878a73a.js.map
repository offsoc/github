{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_erlang_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/erlang.js"],"sourcesContent":["/////////////////////////////////////////////////////////////////////////////\n// constants\n\nvar typeWords = [\n  \"-type\", \"-spec\", \"-export_type\", \"-opaque\"];\n\nvar keywordWords = [\n  \"after\",\"begin\",\"catch\",\"case\",\"cond\",\"end\",\"fun\",\"if\",\n  \"let\",\"of\",\"query\",\"receive\",\"try\",\"when\"];\n\nvar separatorRE    = /[\\->,;]/;\nvar separatorWords = [\n  \"->\",\";\",\",\"];\n\nvar operatorAtomWords = [\n  \"and\",\"andalso\",\"band\",\"bnot\",\"bor\",\"bsl\",\"bsr\",\"bxor\",\n  \"div\",\"not\",\"or\",\"orelse\",\"rem\",\"xor\"];\n\nvar operatorSymbolRE    = /[\\+\\-\\*\\/<>=\\|:!]/;\nvar operatorSymbolWords = [\n  \"=\",\"+\",\"-\",\"*\",\"/\",\">\",\">=\",\"<\",\"=<\",\"=:=\",\"==\",\"=/=\",\"/=\",\"||\",\"<-\",\"!\"];\n\nvar openParenRE    = /[<\\(\\[\\{]/;\nvar openParenWords = [\n  \"<<\",\"(\",\"[\",\"{\"];\n\nvar closeParenRE    = /[>\\)\\]\\}]/;\nvar closeParenWords = [\n  \"}\",\"]\",\")\",\">>\"];\n\nvar guardWords = [\n  \"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\"is_float\",\n  \"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\n  \"is_port\",\"is_record\",\"is_reference\",\"is_tuple\",\n  \"atom\",\"binary\",\"bitstring\",\"boolean\",\"function\",\"integer\",\"list\",\n  \"number\",\"pid\",\"port\",\"record\",\"reference\",\"tuple\"];\n\nvar bifWords = [\n  \"abs\",\"adler32\",\"adler32_combine\",\"alive\",\"apply\",\"atom_to_binary\",\n  \"atom_to_list\",\"binary_to_atom\",\"binary_to_existing_atom\",\n  \"binary_to_list\",\"binary_to_term\",\"bit_size\",\"bitstring_to_list\",\n  \"byte_size\",\"check_process_code\",\"contact_binary\",\"crc32\",\n  \"crc32_combine\",\"date\",\"decode_packet\",\"delete_module\",\n  \"disconnect_node\",\"element\",\"erase\",\"exit\",\"float\",\"float_to_list\",\n  \"garbage_collect\",\"get\",\"get_keys\",\"group_leader\",\"halt\",\"hd\",\n  \"integer_to_list\",\"internal_bif\",\"iolist_size\",\"iolist_to_binary\",\n  \"is_alive\",\"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\n  \"is_float\",\"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\n  \"is_port\",\"is_process_alive\",\"is_record\",\"is_reference\",\"is_tuple\",\n  \"length\",\"link\",\"list_to_atom\",\"list_to_binary\",\"list_to_bitstring\",\n  \"list_to_existing_atom\",\"list_to_float\",\"list_to_integer\",\n  \"list_to_pid\",\"list_to_tuple\",\"load_module\",\"make_ref\",\"module_loaded\",\n  \"monitor_node\",\"node\",\"node_link\",\"node_unlink\",\"nodes\",\"notalive\",\n  \"now\",\"open_port\",\"pid_to_list\",\"port_close\",\"port_command\",\n  \"port_connect\",\"port_control\",\"pre_loaded\",\"process_flag\",\n  \"process_info\",\"processes\",\"purge_module\",\"put\",\"register\",\n  \"registered\",\"round\",\"self\",\"setelement\",\"size\",\"spawn\",\"spawn_link\",\n  \"spawn_monitor\",\"spawn_opt\",\"split_binary\",\"statistics\",\n  \"term_to_binary\",\"time\",\"throw\",\"tl\",\"trunc\",\"tuple_size\",\n  \"tuple_to_list\",\"unlink\",\"unregister\",\"whereis\"];\n\n// upper case: [A-Z] [Ø-Þ] [À-Ö]\n// lower case: [a-z] [ß-ö] [ø-ÿ]\nvar anumRE       = /[\\w@Ø-ÞÀ-Öß-öø-ÿ]/;\nvar escapesRE    =\n    /[0-7]{1,3}|[bdefnrstv\\\\\"']|\\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;\n\n/////////////////////////////////////////////////////////////////////////////\n// tokenizer\n\nfunction tokenizer(stream,state) {\n  // in multi-line string\n  if (state.in_string) {\n    state.in_string = (!doubleQuote(stream));\n    return rval(state,stream,\"string\");\n  }\n\n  // in multi-line atom\n  if (state.in_atom) {\n    state.in_atom = (!singleQuote(stream));\n    return rval(state,stream,\"atom\");\n  }\n\n  // whitespace\n  if (stream.eatSpace()) {\n    return rval(state,stream,\"whitespace\");\n  }\n\n  // attributes and type specs\n  if (!peekToken(state) &&\n      stream.match(/-\\s*[a-zß-öø-ÿ][\\wØ-ÞÀ-Öß-öø-ÿ]*/)) {\n    if (is_member(stream.current(),typeWords)) {\n      return rval(state,stream,\"type\");\n    }else{\n      return rval(state,stream,\"attribute\");\n    }\n  }\n\n  var ch = stream.next();\n\n  // comment\n  if (ch == '%') {\n    stream.skipToEnd();\n    return rval(state,stream,\"comment\");\n  }\n\n  // colon\n  if (ch == \":\") {\n    return rval(state,stream,\"colon\");\n  }\n\n  // macro\n  if (ch == '?') {\n    stream.eatSpace();\n    stream.eatWhile(anumRE);\n    return rval(state,stream,\"macro\");\n  }\n\n  // record\n  if (ch == \"#\") {\n    stream.eatSpace();\n    stream.eatWhile(anumRE);\n    return rval(state,stream,\"record\");\n  }\n\n  // dollar escape\n  if (ch == \"$\") {\n    if (stream.next() == \"\\\\\" && !stream.match(escapesRE)) {\n      return rval(state,stream,\"error\");\n    }\n    return rval(state,stream,\"number\");\n  }\n\n  // dot\n  if (ch == \".\") {\n    return rval(state,stream,\"dot\");\n  }\n\n  // quoted atom\n  if (ch == '\\'') {\n    if (!(state.in_atom = (!singleQuote(stream)))) {\n      if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\n        stream.match(/\\s*\\/\\s*[0-9]/,true);\n        return rval(state,stream,\"fun\");      // 'f'/0 style fun\n      }\n      if (stream.match(/\\s*\\(/,false) || stream.match(/\\s*:/,false)) {\n        return rval(state,stream,\"function\");\n      }\n    }\n    return rval(state,stream,\"atom\");\n  }\n\n  // string\n  if (ch == '\"') {\n    state.in_string = (!doubleQuote(stream));\n    return rval(state,stream,\"string\");\n  }\n\n  // variable\n  if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {\n    stream.eatWhile(anumRE);\n    return rval(state,stream,\"variable\");\n  }\n\n  // atom/keyword/BIF/function\n  if (/[a-z_ß-öø-ÿ]/.test(ch)) {\n    stream.eatWhile(anumRE);\n\n    if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\n      stream.match(/\\s*\\/\\s*[0-9]/,true);\n      return rval(state,stream,\"fun\");      // f/0 style fun\n    }\n\n    var w = stream.current();\n\n    if (is_member(w,keywordWords)) {\n      return rval(state,stream,\"keyword\");\n    }else if (is_member(w,operatorAtomWords)) {\n      return rval(state,stream,\"operator\");\n    }else if (stream.match(/\\s*\\(/,false)) {\n      // 'put' and 'erlang:put' are bifs, 'foo:put' is not\n      if (is_member(w,bifWords) &&\n          ((peekToken(state).token != \":\") ||\n           (peekToken(state,2).token == \"erlang\"))) {\n        return rval(state,stream,\"builtin\");\n      }else if (is_member(w,guardWords)) {\n        return rval(state,stream,\"guard\");\n      }else{\n        return rval(state,stream,\"function\");\n      }\n    }else if (lookahead(stream) == \":\") {\n      if (w == \"erlang\") {\n        return rval(state,stream,\"builtin\");\n      } else {\n        return rval(state,stream,\"function\");\n      }\n    }else if (is_member(w,[\"true\",\"false\"])) {\n      return rval(state,stream,\"boolean\");\n    }else{\n      return rval(state,stream,\"atom\");\n    }\n  }\n\n  // number\n  var digitRE      = /[0-9]/;\n  var radixRE      = /[0-9a-zA-Z]/;         // 36#zZ style int\n  if (digitRE.test(ch)) {\n    stream.eatWhile(digitRE);\n    if (stream.eat('#')) {                // 36#aZ  style integer\n      if (!stream.eatWhile(radixRE)) {\n        stream.backUp(1);                 //\"36#\" - syntax error\n      }\n    } else if (stream.eat('.')) {       // float\n      if (!stream.eatWhile(digitRE)) {\n        stream.backUp(1);        // \"3.\" - probably end of function\n      } else {\n        if (stream.eat(/[eE]/)) {        // float with exponent\n          if (stream.eat(/[-+]/)) {\n            if (!stream.eatWhile(digitRE)) {\n              stream.backUp(2);            // \"2e-\" - syntax error\n            }\n          } else {\n            if (!stream.eatWhile(digitRE)) {\n              stream.backUp(1);            // \"2e\" - syntax error\n            }\n          }\n        }\n      }\n    }\n    return rval(state,stream,\"number\");   // normal integer\n  }\n\n  // open parens\n  if (nongreedy(stream,openParenRE,openParenWords)) {\n    return rval(state,stream,\"open_paren\");\n  }\n\n  // close parens\n  if (nongreedy(stream,closeParenRE,closeParenWords)) {\n    return rval(state,stream,\"close_paren\");\n  }\n\n  // separators\n  if (greedy(stream,separatorRE,separatorWords)) {\n    return rval(state,stream,\"separator\");\n  }\n\n  // operators\n  if (greedy(stream,operatorSymbolRE,operatorSymbolWords)) {\n    return rval(state,stream,\"operator\");\n  }\n\n  return rval(state,stream,null);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// utilities\nfunction nongreedy(stream,re,words) {\n  if (stream.current().length == 1 && re.test(stream.current())) {\n    stream.backUp(1);\n    while (re.test(stream.peek())) {\n      stream.next();\n      if (is_member(stream.current(),words)) {\n        return true;\n      }\n    }\n    stream.backUp(stream.current().length-1);\n  }\n  return false;\n}\n\nfunction greedy(stream,re,words) {\n  if (stream.current().length == 1 && re.test(stream.current())) {\n    while (re.test(stream.peek())) {\n      stream.next();\n    }\n    while (0 < stream.current().length) {\n      if (is_member(stream.current(),words)) {\n        return true;\n      }else{\n        stream.backUp(1);\n      }\n    }\n    stream.next();\n  }\n  return false;\n}\n\nfunction doubleQuote(stream) {\n  return quote(stream, '\"', '\\\\');\n}\n\nfunction singleQuote(stream) {\n  return quote(stream,'\\'','\\\\');\n}\n\nfunction quote(stream,quoteChar,escapeChar) {\n  while (!stream.eol()) {\n    var ch = stream.next();\n    if (ch == quoteChar) {\n      return true;\n    }else if (ch == escapeChar) {\n      stream.next();\n    }\n  }\n  return false;\n}\n\nfunction lookahead(stream) {\n  var m = stream.match(/^\\s*([^\\s%])/, false)\n  return m ? m[1] : \"\";\n}\n\nfunction is_member(element,list) {\n  return (-1 < list.indexOf(element));\n}\n\nfunction rval(state,stream,type) {\n\n  // parse stack\n  pushToken(state,realToken(type,stream));\n\n  // map erlang token type to CodeMirror style class\n  //     erlang             -> CodeMirror tag\n  switch (type) {\n  case \"atom\":        return \"atom\";\n  case \"attribute\":   return \"attribute\";\n  case \"boolean\":     return \"atom\";\n  case \"builtin\":     return \"builtin\";\n  case \"close_paren\": return null;\n  case \"colon\":       return null;\n  case \"comment\":     return \"comment\";\n  case \"dot\":         return null;\n  case \"error\":       return \"error\";\n  case \"fun\":         return \"meta\";\n  case \"function\":    return \"tag\";\n  case \"guard\":       return \"property\";\n  case \"keyword\":     return \"keyword\";\n  case \"macro\":       return \"macroName\";\n  case \"number\":      return \"number\";\n  case \"open_paren\":  return null;\n  case \"operator\":    return \"operator\";\n  case \"record\":      return \"bracket\";\n  case \"separator\":   return null;\n  case \"string\":      return \"string\";\n  case \"type\":        return \"def\";\n  case \"variable\":    return \"variable\";\n  default:            return null;\n  }\n}\n\nfunction aToken(tok,col,ind,typ) {\n  return {token:  tok,\n          column: col,\n          indent: ind,\n          type:   typ};\n}\n\nfunction realToken(type,stream) {\n  return aToken(stream.current(),\n                stream.column(),\n                stream.indentation(),\n                type);\n}\n\nfunction fakeToken(type) {\n  return aToken(type,0,0,type);\n}\n\nfunction peekToken(state,depth) {\n  var len = state.tokenStack.length;\n  var dep = (depth ? depth : 1);\n\n  if (len < dep) {\n    return false;\n  }else{\n    return state.tokenStack[len-dep];\n  }\n}\n\nfunction pushToken(state,token) {\n\n  if (!(token.type == \"comment\" || token.type == \"whitespace\")) {\n    state.tokenStack = maybe_drop_pre(state.tokenStack,token);\n    state.tokenStack = maybe_drop_post(state.tokenStack);\n  }\n}\n\nfunction maybe_drop_pre(s,token) {\n  var last = s.length-1;\n\n  if (0 < last && s[last].type === \"record\" && token.type === \"dot\") {\n    s.pop();\n  }else if (0 < last && s[last].type === \"group\") {\n    s.pop();\n    s.push(token);\n  }else{\n    s.push(token);\n  }\n  return s;\n}\n\nfunction maybe_drop_post(s) {\n  if (!s.length) return s\n  var last = s.length-1;\n\n  if (s[last].type === \"dot\") {\n    return [];\n  }\n  if (last > 1 && s[last].type === \"fun\" && s[last-1].token === \"fun\") {\n    return s.slice(0,last-1);\n  }\n  switch (s[last].token) {\n  case \"}\":    return d(s,{g:[\"{\"]});\n  case \"]\":    return d(s,{i:[\"[\"]});\n  case \")\":    return d(s,{i:[\"(\"]});\n  case \">>\":   return d(s,{i:[\"<<\"]});\n  case \"end\":  return d(s,{i:[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]});\n  case \",\":    return d(s,{e:[\"begin\",\"try\",\"when\",\"->\",\n                              \",\",\"(\",\"[\",\"{\",\"<<\"]});\n  case \"->\":   return d(s,{r:[\"when\"],\n                           m:[\"try\",\"if\",\"case\",\"receive\"]});\n  case \";\":    return d(s,{E:[\"case\",\"fun\",\"if\",\"receive\",\"try\",\"when\"]});\n  case \"catch\":return d(s,{e:[\"try\"]});\n  case \"of\":   return d(s,{e:[\"case\"]});\n  case \"after\":return d(s,{e:[\"receive\",\"try\"]});\n  default:     return s;\n  }\n}\n\nfunction d(stack,tt) {\n  // stack is a stack of Token objects.\n  // tt is an object; {type:tokens}\n  // type is a char, tokens is a list of token strings.\n  // The function returns (possibly truncated) stack.\n  // It will descend the stack, looking for a Token such that Token.token\n  //  is a member of tokens. If it does not find that, it will normally (but\n  //  see \"E\" below) return stack. If it does find a match, it will remove\n  //  all the Tokens between the top and the matched Token.\n  // If type is \"m\", that is all it does.\n  // If type is \"i\", it will also remove the matched Token and the top Token.\n  // If type is \"g\", like \"i\", but add a fake \"group\" token at the top.\n  // If type is \"r\", it will remove the matched Token, but not the top Token.\n  // If type is \"e\", it will keep the matched Token but not the top Token.\n  // If type is \"E\", it behaves as for type \"e\", except if there is no match,\n  //  in which case it will return an empty stack.\n\n  for (var type in tt) {\n    var len = stack.length-1;\n    var tokens = tt[type];\n    for (var i = len-1; -1 < i ; i--) {\n      if (is_member(stack[i].token,tokens)) {\n        var ss = stack.slice(0,i);\n        switch (type) {\n        case \"m\": return ss.concat(stack[i]).concat(stack[len]);\n        case \"r\": return ss.concat(stack[len]);\n        case \"i\": return ss;\n        case \"g\": return ss.concat(fakeToken(\"group\"));\n        case \"E\": return ss.concat(stack[i]);\n        case \"e\": return ss.concat(stack[i]);\n        }\n      }\n    }\n  }\n  return (type == \"E\" ? [] : stack);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// indenter\n\nfunction indenter(state, textAfter, cx) {\n  var t;\n  var wordAfter = wordafter(textAfter);\n  var currT = peekToken(state,1);\n  var prevT = peekToken(state,2);\n\n  if (state.in_string || state.in_atom) {\n    return null;\n  }else if (!prevT) {\n    return 0;\n  }else if (currT.token == \"when\") {\n    return currT.column + cx.unit;\n  }else if (wordAfter === \"when\" && prevT.type === \"function\") {\n    return prevT.indent+cx.unit;\n  }else if (wordAfter === \"(\" && currT.token === \"fun\") {\n    return  currT.column+3;\n  }else if (wordAfter === \"catch\" && (t = getToken(state,[\"try\"]))) {\n    return t.column;\n  }else if (is_member(wordAfter,[\"end\",\"after\",\"of\"])) {\n    t = getToken(state,[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]);\n    return t ? t.column : null;\n  }else if (is_member(wordAfter,closeParenWords)) {\n    t = getToken(state,openParenWords);\n    return t ? t.column : null;\n  }else if (is_member(currT.token,[\",\",\"|\",\"||\"]) ||\n            is_member(wordAfter,[\",\",\"|\",\"||\"])) {\n    t = postcommaToken(state);\n    return t ? t.column+t.token.length : cx.unit;\n  }else if (currT.token == \"->\") {\n    if (is_member(prevT.token, [\"receive\",\"case\",\"if\",\"try\"])) {\n      return prevT.column+cx.unit+cx.unit;\n    }else{\n      return prevT.column+cx.unit;\n    }\n  }else if (is_member(currT.token,openParenWords)) {\n    return currT.column+currT.token.length;\n  }else{\n    t = defaultToken(state);\n    return truthy(t) ? t.column+cx.unit : 0;\n  }\n}\n\nfunction wordafter(str) {\n  var m = str.match(/,|[a-z]+|\\}|\\]|\\)|>>|\\|+|\\(/);\n\n  return truthy(m) && (m.index === 0) ? m[0] : \"\";\n}\n\nfunction postcommaToken(state) {\n  var objs = state.tokenStack.slice(0,-1);\n  var i = getTokenIndex(objs,\"type\",[\"open_paren\"]);\n\n  return truthy(objs[i]) ? objs[i] : false;\n}\n\nfunction defaultToken(state) {\n  var objs = state.tokenStack;\n  var stop = getTokenIndex(objs,\"type\",[\"open_paren\",\"separator\",\"keyword\"]);\n  var oper = getTokenIndex(objs,\"type\",[\"operator\"]);\n\n  if (truthy(stop) && truthy(oper) && stop < oper) {\n    return objs[stop+1];\n  } else if (truthy(stop)) {\n    return objs[stop];\n  } else {\n    return false;\n  }\n}\n\nfunction getToken(state,tokens) {\n  var objs = state.tokenStack;\n  var i = getTokenIndex(objs,\"token\",tokens);\n\n  return truthy(objs[i]) ? objs[i] : false;\n}\n\nfunction getTokenIndex(objs,propname,propvals) {\n\n  for (var i = objs.length-1; -1 < i ; i--) {\n    if (is_member(objs[i][propname],propvals)) {\n      return i;\n    }\n  }\n  return false;\n}\n\nfunction truthy(x) {\n  return (x !== false) && (x != null);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// this object defines the mode\n\nexport const erlang = {\n  name: \"erlang\",\n  startState() {\n    return {tokenStack: [],\n            in_string:  false,\n            in_atom:    false};\n  },\n\n  token: tokenizer,\n\n  indent: indenter,\n\n  languageData: {\n    commentTokens: {line: \"%\"}\n  }\n};\n\n"],"names":["typeWords","keywordWords","separatorRE","separatorWords","operatorAtomWords","operatorSymbolRE","operatorSymbolWords","openParenRE","openParenWords","closeParenRE","closeParenWords","guardWords","bifWords","anumRE","escapesRE","nongreedy","stream","re","words","current","length","test","backUp","peek","next","is_member","greedy","doubleQuote","quote","singleQuote","quoteChar","escapeChar","eol","ch","element","list","indexOf","rval","state","type","token","s","last","aToken","column","indentation","tokenStack","pop","push","maybe_drop_post","slice","d","g","i","e","r","m","E","tok","col","ind","typ","indent","peekToken","depth","len","dep","stack","tt","tokens","ss","concat","getToken","objs","getTokenIndex","truthy","propname","propvals","x","erlang","name","startState","in_string","in_atom","eatSpace","match","skipToEnd","eatWhile","w","digitRE","eat","textAfter","cx","stop","oper","t","wordAfter","str","index","currT","prevT","unit","languageData","commentTokens","line"],"sourceRoot":""}
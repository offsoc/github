{"version":3,"file":"enterprise-team-management-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/enterprise-team-management/App.tsx","ui/packages/enterprise-team-management/routes/EnterpriseTeamManagement.tsx","ui/packages/enterprise-team-management/enterprise-team-management.ts","ui/packages/is-hash-navigation/is-hash-navigation.ts","ui/packages/use-navigate/use-navigate.ts","ui/packages/verified-fetch/verified-fetch.ts","ui/packages/react-core/JsonRoute.tsx","ui/packages/safe-html/SafeHTML.tsx"],"sourcesContent":["import type React from 'react'\n\n/**\n * The App component is used to render content which should be present on _all_ routes within this app\n */\nexport function App(props: {children?: React.ReactNode}) {\n  return <>{props.children}</>\n}\n\ntry{ App.displayName ||= 'App' } catch {}","import {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {TriangleDownIcon} from '@primer/octicons-react'\nimport type {ItemInput} from '@primer/react/lib-esm/deprecated/ActionList/List'\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  Button,\n  Checkbox,\n  Flash,\n  FormControl,\n  Heading,\n  Link,\n  SelectPanel,\n  Text,\n  TextInput,\n} from '@primer/react'\nimport {SafeHTMLBox, type SafeHTMLString} from '@github-ui/safe-html'\nimport {verifiedFetch} from '@github-ui/verified-fetch'\nimport {useNavigate} from '@github-ui/use-navigate'\nimport type {SaveResponse} from '@github-ui/code-view-types'\nimport type {FormEvent} from 'react'\nimport {useEffect, useRef, useState} from 'react'\n\ninterface IdpGroup {\n  id: string\n  text: string\n  member_count: number\n}\n\ninterface EnterpriseTeam {\n  name: string\n  slug: string\n  idpGroup?: IdpGroup\n  syncToOrganizations: boolean\n  isSecurityManager: boolean\n}\n\nexport interface EnterpriseTeamManagementPayload {\n  // Update this type to reflect the data you place in payload in Rails\n  enterpriseSlug: string\n  enterpriseTeam?: EnterpriseTeam\n  idpGroups: IdpGroup[]\n  idpGroupsDisabled: boolean\n  enterpriseManaged: boolean\n  enabledForOrganizations: boolean\n  enabledForOrganizationSecurityManager: boolean\n  canSyncToOrganizations: boolean\n  maxSyncOrgs: number\n  maxSyncMembers: number\n  showEnterpriseSecurityManagerAssignmentPage: boolean\n}\n\nexport function EnterpriseTeamManagement() {\n  const payload = useRoutePayload<EnterpriseTeamManagementPayload>()\n  const teamsURL = `/enterprises/${payload.enterpriseSlug}/teams`\n  const teamNameRef = useRef<HTMLInputElement>(null)\n  const canSyncToOrganizations = payload.canSyncToOrganizations ?? false\n  const maxSyncMembers = payload.maxSyncMembers\n\n  const [isSyncToOrganizations, setSyncToOrganizations] = useState(payload.enterpriseTeam?.syncToOrganizations ?? false)\n  const [isSecurityManager, setSecurityManager] = useState(payload.enterpriseTeam?.isSecurityManager ?? false)\n\n  const [selectedIdpGroup, setSelectedIdpGroup] = useState<ItemInput | undefined>(\n    payload.idpGroups.find(item => item.id === payload.enterpriseTeam?.idpGroup?.id),\n  )\n  const [filter, setFilter] = useState('')\n  const [open, setOpen] = useState(false)\n  const [flash, setFlash] = useState<SafeHTMLString>('' as SafeHTMLString)\n  const [isPressed, setIsPressed] = useState(false)\n\n  const filteredItems = payload.idpGroups.filter(item => item.text.toLowerCase().startsWith(filter.toLowerCase()))\n  const editMode = payload.enterpriseTeam !== undefined\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    const selectedIdpGroupMemberCount =\n      payload.idpGroups.find(item => item.id === selectedIdpGroup?.id)?.member_count || 0\n    const teamCanSyncToOrgs = canSyncToOrganizations && selectedIdpGroupMemberCount <= maxSyncMembers\n\n    if (!teamCanSyncToOrgs) {\n      setSyncToOrganizations(false)\n    }\n  }, [selectedIdpGroup, canSyncToOrganizations, maxSyncMembers, payload.idpGroups])\n\n  const flashRef = useRef<HTMLDivElement | null>(null)\n  useEffect(() => {\n    flashRef.current?.focus()\n  }, [flash, flashRef])\n\n  async function handleSubmit() {\n    setIsPressed(true)\n\n    const formData = new FormData()\n    formData.append('teamName', teamNameRef.current?.value ?? '')\n    formData.append('idpGroup', selectedIdpGroup?.id?.toString() ?? '')\n    if (payload.enabledForOrganizations) {\n      formData.append('syncToOrganizations', isSyncToOrganizations.toString())\n    }\n    if (payload.enabledForOrganizationSecurityManager) {\n      formData.append('isSecurityManager', isSecurityManager.toString())\n    }\n\n    const url = editMode ? `${teamsURL}/${payload?.enterpriseTeam?.slug}` : teamsURL\n    try {\n      const result = await verifiedFetch(url, {\n        method: editMode ? 'PUT' : 'POST',\n        headers: {Accept: 'application/json'},\n        body: formData,\n      })\n\n      const json: SaveResponse = await result.json()\n      if (json.data.redirect) {\n        const redirectUrl = json.data.redirect\n        const relUrl = redirectUrl.startsWith(window.location.origin)\n          ? redirectUrl.replace(window.location.origin, '')\n          : redirectUrl\n        navigate(relUrl)\n      } else if (json.data.error) {\n        setFlash(json.data.error as SafeHTMLString)\n        setIsPressed(false)\n      }\n    } catch (error) {\n      setFlash('Something went wrong!' as SafeHTMLString)\n      setIsPressed(false)\n    }\n  }\n\n  const selectedIdpGroupMemberCount =\n    payload.idpGroups.find(item => item.id === selectedIdpGroup?.id)?.member_count || 0\n  const teamCanSyncToOrgs = canSyncToOrganizations ? selectedIdpGroupMemberCount <= maxSyncMembers : false\n\n  return (\n    <>\n      <Box\n        as=\"form\"\n        sx={{my: 6, px: 3}}\n        className=\"container-md px-md-4 px-lg-5\"\n        onSubmit={(event: FormEvent) => {\n          handleSubmit()\n          event.preventDefault()\n        }}\n      >\n        {flash && (\n          <Flash data-testid=\"flash-error\" tabIndex={0} ref={flashRef} variant=\"danger\" sx={{mb: 2}}>\n            <SafeHTMLBox html={flash} />\n          </Flash>\n        )}\n\n        <Box sx={{pb: 2, mb: 2, mt: 3, borderBottom: 'solid', borderBottomColor: 'border.muted', borderBottomWidth: 1}}>\n          <Link href={teamsURL}>← Back to enterprise teams</Link>\n          <Heading as=\"h1\" sx={{fontSize: 4, mt: 3}}>\n            {editMode ? 'Edit team' : 'Create new enterprise team'}\n          </Heading>\n        </Box>\n\n        <Box sx={{mt: 3, display: 'flex'}}>\n          <FormControl id=\"owner-input\" required>\n            <FormControl.Label as=\"span\">Owner</FormControl.Label>\n            <ActionMenu>\n              <ActionMenu.Button disabled>{payload.enterpriseSlug}</ActionMenu.Button>\n              <ActionMenu.Overlay width=\"medium\" maxHeight=\"large\" sx={{overflow: 'auto'}}>\n                <ActionList.Group>\n                  <TextInput sx={{mx: 2, display: 'flex'}} aria-label=\"Search owner\" placeholder=\"Filter…\" />\n                </ActionList.Group>\n                <ActionList.Divider />\n                <ActionList.Group sx={{maxHeight: 350, overflow: 'auto'}}>\n                  <ActionList>\n                    <ActionList.Item>{payload.enterpriseSlug}</ActionList.Item>\n                  </ActionList>\n                </ActionList.Group>\n              </ActionMenu.Overlay>\n            </ActionMenu>\n          </FormControl>\n          <Text sx={{fontSize: 4, mx: 2, mt: '21px'}}>/</Text>\n          <FormControl required>\n            <FormControl.Label>Team name</FormControl.Label>\n            <TextInput\n              data-testid=\"team-name-input\"\n              ref={teamNameRef}\n              aria-label=\"Team name\"\n              name=\"teamName\"\n              defaultValue={editMode ? payload.enterpriseTeam?.name : undefined}\n              sx={{width: '400px'}}\n            />\n          </FormControl>\n        </Box>\n        <Text sx={{color: 'fg.muted', fontSize: 0}}>\n          {editMode\n            ? 'Changing the team name will break past @mentions.'\n            : \"You'll use this name to mention this team.\"}\n        </Text>\n\n        {payload.enterpriseManaged && !payload.idpGroupsDisabled && (\n          <Box sx={{mt: 3}}>\n            <FormControl id=\"idp-input\">\n              <FormControl.Label as=\"span\">\n                Identity Provider Group\n                <br />\n                <Text sx={{color: 'fg.muted', fontSize: 0, fontWeight: 'normal'}}>\n                  Manage team members using your identity provider group.\n                </Text>\n              </FormControl.Label>\n              <Box sx={{my: 1}} data-testid=\"idp-group-select-panel\">\n                <SelectPanel\n                  title=\"Select Groups\"\n                  subtitle=\"Use groups to manage team members\"\n                  renderAnchor={({children, 'aria-labelledby': ariaLabelledBy, ...anchorProps}) => (\n                    <Button trailingAction={TriangleDownIcon} aria-labelledby={` ${ariaLabelledBy}`} {...anchorProps}>\n                      {children ?? 'Select Groups'}\n                    </Button>\n                  )}\n                  placeholderText=\"Filter groups\"\n                  open={open}\n                  onOpenChange={setOpen}\n                  items={filteredItems}\n                  selected={selectedIdpGroup}\n                  onSelectedChange={setSelectedIdpGroup}\n                  onFilterChange={setFilter}\n                  showItemDividers={true}\n                  overlayProps={{\n                    width: 'small',\n                    height: 'xsmall',\n                  }}\n                />\n              </Box>\n            </FormControl>\n            <Text sx={{color: 'fg.muted', fontSize: 0}}>You can manage this team&apos;s members externally</Text>\n          </Box>\n        )}\n\n        {!payload.showEnterpriseSecurityManagerAssignmentPage && payload.enabledForOrganizations && (\n          <div>\n            <FormControl disabled={!teamCanSyncToOrgs}>\n              <Checkbox\n                data-testid=\"sync-to-organizations-input\"\n                checked={isSyncToOrganizations}\n                onChange={() => {\n                  if (teamCanSyncToOrgs) {\n                    setSyncToOrganizations(!isSyncToOrganizations)\n                  }\n                  if (!teamCanSyncToOrgs || !isSyncToOrganizations) {\n                    setSecurityManager(false)\n                  }\n                }}\n              />\n              <FormControl.Label>Make this team available in all organizations.</FormControl.Label>\n            </FormControl>\n            {!teamCanSyncToOrgs && (\n              <Text sx={{color: 'red', fontSize: 0}}>\n                Cannot sync to all organizations if Enterprise Team has more than {payload.maxSyncMembers} members or\n                Business has over {payload.maxSyncOrgs} organizations\n              </Text>\n            )}\n            {payload.enabledForOrganizationSecurityManager && (\n              <div>\n                <FormControl disabled={!isSyncToOrganizations}>\n                  <Checkbox\n                    data-testid=\"security-manager-input\"\n                    checked={isSecurityManager && isSyncToOrganizations}\n                    onChange={() => {\n                      setSecurityManager(!isSecurityManager)\n                    }}\n                  />\n                  <FormControl.Label>\n                    Grant the team permission to manage security alerts and settings across your enterprise. This team\n                    will also be granted read access to all repositories.\n                  </FormControl.Label>\n                </FormControl>\n              </div>\n            )}\n          </div>\n        )}\n\n        <Box sx={{mt: 3, display: 'flex', flexDirection: 'row'}}>\n          <Button data-testid=\"submit-button\" variant=\"primary\" type=\"submit\" disabled={isPressed}>\n            {editMode ? 'Save changes' : 'Create team'}\n          </Button>\n        </Box>\n      </Box>\n    </>\n  )\n}\n\ntry{ EnterpriseTeamManagement.displayName ||= 'EnterpriseTeamManagement' } catch {}","import {App} from './App'\nimport {EnterpriseTeamManagement} from './routes/EnterpriseTeamManagement'\nimport {registerReactAppFactory} from '@github-ui/react-core/register-app'\nimport {jsonRoute} from '@github-ui/react-core/json-route'\n\nregisterReactAppFactory('enterprise-team-management', () => ({\n  App,\n  routes: [\n    jsonRoute({path: '/enterprises/:slug/new_team', Component: EnterpriseTeamManagement}),\n    jsonRoute({path: '/enterprises/:slug/teams/:team_slug/edit', Component: EnterpriseTeamManagement}),\n  ],\n}))\n","// Check if the navigation is only a hash change.\nconst isHashNavigation = (currentUrl: string, targetUrl: string): boolean => {\n  const current = new URL(currentUrl, window.location.origin)\n  const target = new URL(targetUrl, window.location.origin)\n  const hasHash = target.href.includes('#')\n\n  return (\n    hasHash && current.host === target.host && current.pathname === target.pathname && current.search === target.search\n  )\n}\n\nexport default isHashNavigation\n","import React, {startTransition} from 'react'\nimport {\n  createSearchParams,\n  matchRoutes,\n  resolvePath,\n  useLocation,\n  useNavigate as useReactRouterNavigate,\n  useSearchParams as useReactRouterSearchParams,\n  type NavigateOptions,\n  type To,\n  type URLSearchParamsInit,\n} from 'react-router-dom'\n\nimport isHashNavigation from '@github-ui/is-hash-navigation'\nimport {AppContext} from '@github-ui/react-core/app-context'\nimport {startSoftNav} from '@github-ui/soft-nav/state'\nimport {PREVENT_AUTOFOCUS_KEY} from '@github-ui/react-core/prevent-autofocus'\n\nexport interface NavigateOptionsWithPreventAutofocus extends NavigateOptions {\n  preventAutofocus?: boolean\n}\n\nexport const useNavigate = (): ((to: To, options?: NavigateOptionsWithPreventAutofocus) => void) => {\n  const {routes, history} = React.useContext(AppContext)\n  const reactRouterNavigate = useReactRouterNavigate()\n  return React.useCallback(\n    (to, navigateOptions = {}) => {\n      const pathname = resolvePath(to).pathname\n      const isExternalToApp = !matchRoutes(routes, pathname)\n\n      if (isExternalToApp) {\n        const href = history.createHref(to)\n        ;(async () => {\n          const {softNavigate: turboSoftNavigate} = await import('@github-ui/soft-navigate')\n          turboSoftNavigate(href)\n        })()\n      } else {\n        if (!isHashNavigation(location.href, to.toString())) {\n          startSoftNav('react')\n        }\n        const {preventAutofocus, ...options} = navigateOptions\n        startTransition(() => {\n          reactRouterNavigate(\n            to,\n            preventAutofocus\n              ? {\n                  ...options,\n                  state: {\n                    [PREVENT_AUTOFOCUS_KEY]: true,\n                    ...options.state,\n                  },\n                }\n              : options,\n          )\n          const {turbo, ...state} = window.history.state\n          window.history.replaceState({...state, skipTurbo: true}, '', location.href)\n        })\n      }\n    },\n    [history, reactRouterNavigate, routes],\n  )\n}\n\n/**\n * An implementation of `useSearchParams` that mirrors `react-router-dom`'s `useSearchParams` hook\n * but utilizes `@github-ui/useNavigate` instead of `react-router` `useNavigate` to handle updates.\n */\nexport const useSearchParams = () => {\n  const [searchParams] = useReactRouterSearchParams()\n  const navigate = useNavigate()\n  const {pathname} = useLocation()\n\n  const setSearchParams = React.useCallback<\n    (\n      nextInit?: URLSearchParamsInit | ((prev: URLSearchParams) => URLSearchParamsInit),\n      navigateOpts?: NavigateOptionsWithPreventAutofocus,\n    ) => void\n  >(\n    (nextInit, navigateOptions = {}) => {\n      const newSearchParams = createSearchParams(typeof nextInit === 'function' ? nextInit(searchParams) : nextInit)\n      navigate(\n        {\n          pathname,\n          search: newSearchParams.toString(),\n        },\n        navigateOptions,\n      )\n    },\n    [searchParams, navigate, pathname],\n  )\n\n  return [searchParams, setSearchParams] as const\n}\n","/**\n * A Fetch function which will automatically add the correct headers for\n * making requests to GitHub application servers as long as the associated controller methods allow it.\n * Track down the associated controller method and confirm the controller includes\n * ApplicationController::VerifiedFetchDependency as well as `allow_verified_fetch only:`\n * to the relevant controller methods.\n *\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetch('/foo', {method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.text())\ntest.\n *     }\n */\nexport function verifiedFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  assertRelativePathOrSameOrigin(path)\n\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Verified-Fetch': 'true',\n    'X-Requested-With': 'XMLHttpRequest',\n  }\n\n  return fetch(path, {...init, headers})\n}\n\nexport interface JSONRequestInit extends Omit<RequestInit, 'body'> {\n  body?: unknown\n}\n\nfunction assertRelativePathOrSameOrigin(path: string) {\n  if (process.env.NODE_ENV === 'test' && !window.location.origin) return\n  const url = new URL(path, window.location.origin)\n  if (url.origin !== window.location.origin) {\n    throw new Error('Can not make cross-origin requests from verifiedFetch')\n  }\n}\n\n/**\n * A Fetch function which will automatically add the correct headers for\n * making JSON requests\n *\n * Will also `JSON.stringify` the request body if provided.\n\n * ## Example\n *\n *     const onClick = async () => {\n *       const resp = await verifiedFetchJSON('/foo', {body: {foo: 'bar'}, method: 'POST'})\n *       if (resp.ok) console.log('The response was', await resp.json())\n *     }\n */\nexport function verifiedFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  }\n\n  const body = init?.body ? JSON.stringify(init.body) : undefined\n\n  return verifiedFetch(path, {...init, body, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetch(path: string, init: RequestInit = {}): Promise<Response> {\n  const headers: HeadersInit = {\n    ...init.headers,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetch(path, {...init, headers})\n}\n\n/**\n * A Fetch function which will automatically add the GitHub-Is-React header for\n * making JSON requests. It will in turn call verifiedFetchJSON.\n *\n * Using this in React components to fetch data enables us to track these\n * requests in Datadog in the request.dist.referrer metric.\n */\nexport function reactFetchJSON(path: string, init?: JSONRequestInit): Promise<Response> {\n  const initHeaders: HeadersInit = init?.headers ?? {}\n\n  const headers: HeadersInit = {\n    ...initHeaders,\n    'GitHub-Is-React': 'true',\n  }\n\n  return verifiedFetchJSON(path, {...init, headers})\n}\n","import type {ChildRoute, LoaderResult, RouteRegistration, TransitionType} from './app-routing-types'\nimport type React from 'react'\nimport type {Location} from '@remix-run/router'\n\nexport interface JsonRouteProps {\n  path: string\n  Component: React.ComponentType\n  transitionType?: TransitionType\n  shouldNavigateOnError?: boolean\n  children?: ChildRoute[]\n}\n/**\n * A utility for building a route registration for a route that consumes a JSON object (either via embedding in a\n * script tag or via a JSON fetch on React soft navigations).\n */\nexport function jsonRoute<TRouteData, TEmbeddedData>({\n  path,\n  Component,\n  /**\n   * Some routes want to handle their own errors and not just show a generic error page. In this case,\n   * the error is just handled like any other payload for the route.\n   * NOTE: We might consider replacing the shouldNavigateOnError flag with a parallel implementation to jsonRoute.\n   */\n  shouldNavigateOnError,\n  transitionType,\n  children,\n}: JsonRouteProps): RouteRegistration<TRouteData, TEmbeddedData> {\n  async function coreLoader({location}: {location: Location}): Promise<LoaderResult<TRouteData>> {\n    let response: Response\n    try {\n      const fetchPath = `${location.pathname}${location.search}`\n      response = await window.fetch(fetchPath, {\n        headers: {\n          Accept: 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-GitHub-Target': 'dotcom',\n          'X-React-Router': 'json',\n        },\n      })\n    } catch (error) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'fetchError'},\n      }\n    }\n    if (response.redirected) {\n      return {\n        type: 'redirect',\n        url: response.url,\n      }\n    } else if (!response.ok) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'httpError', httpStatus: response.status},\n      }\n    } else {\n      try {\n        const responseJson = await response.json()\n        return {\n          type: 'loaded',\n          data: responseJson,\n          title: responseJson.title,\n        }\n      } catch (error) {\n        return {\n          type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n          error: {type: 'badResponseError'},\n        }\n      }\n    }\n  }\n\n  function loadFromEmbeddedData({embeddedData}: {embeddedData: TEmbeddedData}): {data: TRouteData; title: string} {\n    const data = embeddedData as unknown as TRouteData & {title: string}\n    return {data, title: data.title}\n  }\n\n  return {\n    path,\n    // TODO: consider wrapping Component with a component that passes payload as a prop — ideally as part of migrating\n    // away from useRoutePayload.\n    Component,\n    coreLoader,\n    loadFromEmbeddedData,\n    transitionType,\n    children,\n  }\n}\n","import {Box, type BoxProps, Text, type TextProps} from '@primer/react'\nimport type {ForwardRefComponent as PolymorphicForwardRefComponent} from '@radix-ui/react-polymorphic'\nimport DOMPurify, {type Config as DOMPurifyConfig} from 'dompurify'\nimport type React from 'react'\nimport {forwardRef} from 'react'\n\ntype Brand<TBase, TBrand extends string> = TBase & {__brand: TBrand}\n\n/**\n * A string that has specifically been marked as verified.\n *\n * WARNING: A string should only be branded as a `SafeHTMLString` if one of the following applies:\n * - it comes from a trusted source on the server\n * - has known static content, or\n * - has been sanitized by DOMPurify.\n */\nexport type SafeHTMLString = Brand<string, 'SafeHTMLString'>\n\ninterface BaseHTMLProps {\n  /**\n   * Set the rendered HTML of the component. Use this prop if the source is untrusted. If you know the string can be\n   * trusted, or has already been sanitized, use the `html` prop instead to avoid re-sanitizing.\n   */\n  unverifiedHTML?: string\n  /**\n   * Optional config passed to DOMPurify when sanitizing `unverifiedHTML`.\n   */\n  unverifiedHTMLConfig?: DOMPurifyConfig\n  /**\n   * Set the rendered HTML of the component. To prevent XSS, ensure that the source of this\n   * HTML is trusted! If the source is untrusted, use `unverifiedHTML` instead.\n   */\n  html?: SafeHTMLString\n}\n\ninterface VerifiedHTMLProps extends BaseHTMLProps {\n  unverifiedHTML?: undefined\n  html: SafeHTMLString\n}\n\ninterface UnverifiedHTMLProps extends BaseHTMLProps {\n  unverifiedHTML: string\n  html?: undefined\n}\n\nexport type SafeHTMLProps = VerifiedHTMLProps | UnverifiedHTMLProps\n\ntype PropsWithHTML<T> = T & SafeHTMLProps\n\nfunction getSafeHTMLAndProps<T>(propsWithHtml: PropsWithHTML<T>) {\n  /**\n   * Note we have to explicitly cast props to T because TypeScript\n   * is not properly converting Omit<T & VerifiedHTMLProps, 'html'> to T.\n   *\n   * We include the `as unknown` intermediate step to avoid warnings\n   * about insufficient type overlap\n   */\n\n  if ('html' in propsWithHtml && propsWithHtml.html !== undefined) {\n    const {html, ...props} = propsWithHtml\n    return {\n      // This is verified html, so we can use it directly\n      safeHTML: html,\n      props: props as unknown as T,\n    }\n  }\n\n  const {unverifiedHTML, unverifiedHTMLConfig, ...props} = propsWithHtml\n  const config = {\n    ...unverifiedHTMLConfig,\n    // we want to ensure we are returning a string not a dom node\n    RETURN_DOM: false,\n    RETURN_DOM_FRAGMENT: false,\n  } satisfies DOMPurifyConfig\n\n  return {\n    // Run the unverified HTML through DOMPurify to sanitize it\n    safeHTML: DOMPurify.sanitize(unverifiedHTML, config),\n    props: props as unknown as T,\n  }\n}\n\n/**\n * `SafeHTMLBox` extends `Box` from `@primer/react` with props for safely\n * rendering HTML strings. Exactly one `html` or `unverifiedHTML` must be\n * supplied.\n *\n * `html` only supports strings that have specifically been marked as verified,\n * which means either they come from a trusted source on the server, they have\n * known static contents, or they have been sanitized by DOMPurify.\n *\n * `unverifiedHTML` supports arbitrary strings; they will be run through\n * DOMPurify before being put in the DOM.\n */\nexport const SafeHTMLBox = withSafeHTML<BoxProps>(Box) as PolymorphicForwardRefComponent<\n  'div' | 'span' | 'pre' | 'table' | 'tbody' | 'tr' | 'td' | 'ul' | 'ol' | 'li',\n  PropsWithHTML<BoxProps>\n>\nSafeHTMLBox.displayName = 'SafeHTMLBox'\n\n/**\n * `SafeHTMLText` extends `Text` from `@primer/react` with props for safely\n * rendering HTML strings. Exactly one `html` or `unverifiedHTML` must be\n * supplied.\n *\n * `html` only supports strings that have specifically been marked as verified,\n * which means either they come from a trusted source on the server, they have\n * known static contents, or they have been sanitized by DOMPurify.\n *\n * `unverifiedHTML` supports arbitrary strings; they will be run through\n * DOMPurify before being put in the DOM.\n */\nexport const SafeHTMLText = withSafeHTML<TextProps>(Text) as PolymorphicForwardRefComponent<\n  'div' | 'span' | 'p' | 'strong' | 'em' | 'pre' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'a',\n  PropsWithHTML<TextProps>\n>\nSafeHTMLText.displayName = 'SafeHTMLText'\n\n/**\n * A higher-order component that extends a basic component by offering\n * `html` and `unverifiedHTML` props that are safe alternatives to `dangerouslySetInnerHTML`.\n */\nfunction withSafeHTML<T>(Component: React.ComponentType<T>) {\n  // We give these display names above\n  // eslint-disable-next-line react/display-name\n  const SafeHTMLComponent = forwardRef<HTMLSpanElement, PropsWithHTML<T>>((propsWithHtml, ref) => {\n    const {safeHTML, props} = getSafeHTMLAndProps(propsWithHtml)\n    // This is the only place in the codebase where `dangerouslySetInnerHTML` should be allowed\n    // eslint-disable-next-line react/forbid-component-props\n    return <Component ref={ref} {...props} dangerouslySetInnerHTML={safeHTML ? {__html: safeHTML} : undefined} />\n  })\n\n  return SafeHTMLComponent\n}\n\n/**\n * `SafeHTMLDiv` extends `div`with props for safely rendering HTML strings.\n * Exactly one `html` or `unverifiedHTML` must be supplied.\n *\n * `html` only supports strings that have specifically been marked as verified,\n * which means either they come from a trusted source on the server, they have\n * known static contents, or they have been sanitized by DOMPurify.\n *\n * `unverifiedHTML` supports arbitrary strings; they will be run through\n * DOMPurify before being put in the DOM.\n */\nexport const SafeHTMLDiv = forwardRef<\n  HTMLDivElement,\n  PropsWithHTML<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>>\n>((propsWithHtml, ref) => {\n  const {safeHTML, props} = getSafeHTMLAndProps(propsWithHtml)\n  // eslint-disable-next-line react/no-danger\n  return <div ref={ref} {...props} dangerouslySetInnerHTML={safeHTML ? {__html: safeHTML} : undefined} />\n})\nSafeHTMLDiv.displayName = 'SafeHTMLDiv'\n\ntry{ SafeHTMLComponent.displayName ||= 'SafeHTMLComponent' } catch {}"],"names":["App","props","children","displayName","EnterpriseTeamManagement","payload","useRoutePayload","teamsURL","enterpriseSlug","teamNameRef","useRef","canSyncToOrganizations","maxSyncMembers","isSyncToOrganizations","setSyncToOrganizations","useState","enterpriseTeam","syncToOrganizations","isSecurityManager","setSecurityManager","selectedIdpGroup","setSelectedIdpGroup","idpGroups","find","item","id","idpGroup","filter","setFilter","open","setOpen","flash","setFlash","isPressed","setIsPressed","filteredItems","text","toLowerCase","startsWith","editMode","undefined","navigate","useNavigate","useEffect","selectedIdpGroupMemberCount","member_count","flashRef","handleSubmit","formData","FormData","append","current","value","toString","enabledForOrganizations","enabledForOrganizationSecurityManager","url","slug","result","verifiedFetch","method","headers","Accept","body","json","data","redirect","redirectUrl","relUrl","window","location","origin","replace","error","focus","teamCanSyncToOrgs","Box","as","sx","my","px","className","onSubmit","event","preventDefault","Flash","data-testid","tabIndex","ref","variant","mb","SafeHTMLBox","html","pb","mt","borderBottom","borderBottomColor","borderBottomWidth","Link","href","Heading","fontSize","display","FormControl","required","Label","ActionMenu","Button","disabled","Overlay","width","maxHeight","overflow","ActionList","Group","TextInput","mx","aria-label","placeholder","Divider","Item","Text","name","defaultValue","color","enterpriseManaged","idpGroupsDisabled","br","fontWeight","SelectPanel","title","subtitle","renderAnchor","ariaLabelledBy","anchorProps","trailingAction","TriangleDownIcon","aria-labelledby","placeholderText","onOpenChange","items","selected","onSelectedChange","onFilterChange","showItemDividers","overlayProps","height","showEnterpriseSecurityManagerAssignmentPage","div","Checkbox","checked","onChange","maxSyncOrgs","flexDirection","type","registerReactAppFactory","routes","jsonRoute","path","Component","currentUrl","targetUrl","URL","target","hasHash","includes","host","pathname","search","history","React","AppContext","reactRouterNavigate","useReactRouterNavigate","to","navigateOptions","resolvePath","matchRoutes","isHashNavigation","startSoftNav","preventAutofocus","options","startTransition","state","PREVENT_AUTOFOCUS_KEY","turbo","replaceState","skipTurbo","createHref","softNavigate","turboSoftNavigate","useSearchParams","searchParams","useReactRouterSearchParams","useLocation","setSearchParams","nextInit","newSearchParams","createSearchParams","init","assertRelativePathOrSameOrigin","fetch","verifiedFetchJSON","JSON","stringify","reactFetch","reactFetchJSON","shouldNavigateOnError","transitionType","coreLoader","response","fetchPath","redirected","ok","httpStatus","status","responseJson","loadFromEmbeddedData","embeddedData","SafeHTMLComponent","getSafeHTMLAndProps","propsWithHtml","safeHTML","unverifiedHTML","unverifiedHTMLConfig","config","RETURN_DOM","RETURN_DOM_FRAGMENT","DOMPurify","withSafeHTML","SafeHTMLText","forwardRef","dangerouslySetInnerHTML","__html","SafeHTMLDiv"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Marketplace::ListingInsight`.
# Please instead update this file by running `bin/tapioca dsl Marketplace::ListingInsight`.

class Marketplace::ListingInsight
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Marketplace::ListingInsight).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingInsight).void)
      ).returns(::Marketplace::ListingInsight)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingInsight).void)
      ).returns(::Marketplace::ListingInsight)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingInsight).void)
      ).returns(::Marketplace::ListingInsight)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingInsight).void)
      ).returns(::Marketplace::ListingInsight)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingInsight).void)
      ).returns(::Marketplace::ListingInsight)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Marketplace::ListingInsight]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Marketplace::ListingInsight)) }
    def fifth; end

    sig { returns(::Marketplace::ListingInsight) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Marketplace::ListingInsight)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Marketplace::ListingInsight) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingInsight).void)
      ).returns(T.nilable(T::Enumerator[::Marketplace::ListingInsight]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Marketplace::ListingInsight]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Marketplace::ListingInsight]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingInsight).void)
      ).returns(::Marketplace::ListingInsight)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingInsight).void)
      ).returns(::Marketplace::ListingInsight)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingInsight).void)
      ).returns(::Marketplace::ListingInsight)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Marketplace::ListingInsight)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Marketplace::ListingInsight) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Marketplace::ListingInsight) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Marketplace::ListingInsight) }
    def first!; end

    sig { returns(T.nilable(::Marketplace::ListingInsight)) }
    def forty_two; end

    sig { returns(::Marketplace::ListingInsight) }
    def forty_two!; end

    sig { returns(T.nilable(::Marketplace::ListingInsight)) }
    def fourth; end

    sig { returns(::Marketplace::ListingInsight) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Marketplace::ListingInsight) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Marketplace::ListingInsight).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingInsight).void)
      ).returns(::Marketplace::ListingInsight)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Marketplace::ListingInsight).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Marketplace::ListingInsight).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Marketplace::ListingInsight)) }
    def second; end

    sig { returns(::Marketplace::ListingInsight) }
    def second!; end

    sig { returns(T.nilable(::Marketplace::ListingInsight)) }
    def second_to_last; end

    sig { returns(::Marketplace::ListingInsight) }
    def second_to_last!; end

    sig { returns(::Marketplace::ListingInsight) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Marketplace::ListingInsight) }
    def take!; end

    sig { returns(T.nilable(::Marketplace::ListingInsight)) }
    def third; end

    sig { returns(::Marketplace::ListingInsight) }
    def third!; end

    sig { returns(T.nilable(::Marketplace::ListingInsight)) }
    def third_to_last; end

    sig { returns(::Marketplace::ListingInsight) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Listing) }
    def build_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Listing) }
    def create_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Listing) }
    def create_listing!(*args, &blk); end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def listing; end

    sig { params(value: T.nilable(::Marketplace::Listing)).void }
    def listing=(value); end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def reload_listing; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_period(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def grouped_by_month(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def recorded_during(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def summed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_listing; end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def cancellations; end

    sig { params(value: ::Integer).returns(::Integer) }
    def cancellations=(value); end

    sig { returns(T::Boolean) }
    def cancellations?; end

    sig { returns(T.nilable(::Integer)) }
    def cancellations_before_last_save; end

    sig { returns(T.untyped) }
    def cancellations_before_type_cast; end

    sig { returns(T::Boolean) }
    def cancellations_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def cancellations_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def cancellations_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def cancellations_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def cancellations_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def cancellations_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def cancellations_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def cancellations_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def cancellations_was; end

    sig { void }
    def cancellations_will_change!; end

    sig { returns(::Integer) }
    def cancelled_seats; end

    sig { params(value: ::Integer).returns(::Integer) }
    def cancelled_seats=(value); end

    sig { returns(T::Boolean) }
    def cancelled_seats?; end

    sig { returns(T.nilable(::Integer)) }
    def cancelled_seats_before_last_save; end

    sig { returns(T.untyped) }
    def cancelled_seats_before_type_cast; end

    sig { returns(T::Boolean) }
    def cancelled_seats_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def cancelled_seats_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def cancelled_seats_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def cancelled_seats_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def cancelled_seats_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def cancelled_seats_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def cancelled_seats_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def cancelled_seats_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def cancelled_seats_was; end

    sig { void }
    def cancelled_seats_will_change!; end

    sig { returns(::Integer) }
    def checkout_uniques; end

    sig { params(value: ::Integer).returns(::Integer) }
    def checkout_uniques=(value); end

    sig { returns(T::Boolean) }
    def checkout_uniques?; end

    sig { returns(T.nilable(::Integer)) }
    def checkout_uniques_before_last_save; end

    sig { returns(T.untyped) }
    def checkout_uniques_before_type_cast; end

    sig { returns(T::Boolean) }
    def checkout_uniques_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def checkout_uniques_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def checkout_uniques_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def checkout_uniques_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def checkout_uniques_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def checkout_uniques_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def checkout_uniques_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def checkout_uniques_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def checkout_uniques_was; end

    sig { void }
    def checkout_uniques_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def downgraded_seats; end

    sig { params(value: ::Integer).returns(::Integer) }
    def downgraded_seats=(value); end

    sig { returns(T::Boolean) }
    def downgraded_seats?; end

    sig { returns(T.nilable(::Integer)) }
    def downgraded_seats_before_last_save; end

    sig { returns(T.untyped) }
    def downgraded_seats_before_type_cast; end

    sig { returns(T::Boolean) }
    def downgraded_seats_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def downgraded_seats_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def downgraded_seats_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def downgraded_seats_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def downgraded_seats_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def downgraded_seats_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def downgraded_seats_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def downgraded_seats_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def downgraded_seats_was; end

    sig { void }
    def downgraded_seats_will_change!; end

    sig { returns(::Integer) }
    def downgrades; end

    sig { params(value: ::Integer).returns(::Integer) }
    def downgrades=(value); end

    sig { returns(T::Boolean) }
    def downgrades?; end

    sig { returns(T.nilable(::Integer)) }
    def downgrades_before_last_save; end

    sig { returns(T.untyped) }
    def downgrades_before_type_cast; end

    sig { returns(T::Boolean) }
    def downgrades_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def downgrades_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def downgrades_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def downgrades_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def downgrades_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def downgrades_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def downgrades_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def downgrades_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def downgrades_was; end

    sig { void }
    def downgrades_will_change!; end

    sig { returns(::Integer) }
    def free_trial_cancellations; end

    sig { params(value: ::Integer).returns(::Integer) }
    def free_trial_cancellations=(value); end

    sig { returns(T::Boolean) }
    def free_trial_cancellations?; end

    sig { returns(T.nilable(::Integer)) }
    def free_trial_cancellations_before_last_save; end

    sig { returns(T.untyped) }
    def free_trial_cancellations_before_type_cast; end

    sig { returns(T::Boolean) }
    def free_trial_cancellations_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def free_trial_cancellations_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def free_trial_cancellations_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def free_trial_cancellations_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def free_trial_cancellations_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def free_trial_cancellations_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def free_trial_cancellations_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def free_trial_cancellations_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def free_trial_cancellations_was; end

    sig { void }
    def free_trial_cancellations_will_change!; end

    sig { returns(::Integer) }
    def free_trial_conversions; end

    sig { params(value: ::Integer).returns(::Integer) }
    def free_trial_conversions=(value); end

    sig { returns(T::Boolean) }
    def free_trial_conversions?; end

    sig { returns(T.nilable(::Integer)) }
    def free_trial_conversions_before_last_save; end

    sig { returns(T.untyped) }
    def free_trial_conversions_before_type_cast; end

    sig { returns(T::Boolean) }
    def free_trial_conversions_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def free_trial_conversions_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def free_trial_conversions_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def free_trial_conversions_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def free_trial_conversions_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def free_trial_conversions_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def free_trial_conversions_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def free_trial_conversions_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def free_trial_conversions_was; end

    sig { void }
    def free_trial_conversions_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def installs; end

    sig { params(value: ::Integer).returns(::Integer) }
    def installs=(value); end

    sig { returns(T::Boolean) }
    def installs?; end

    sig { returns(T.nilable(::Integer)) }
    def installs_before_last_save; end

    sig { returns(T.untyped) }
    def installs_before_type_cast; end

    sig { returns(T::Boolean) }
    def installs_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def installs_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def installs_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def installs_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def installs_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def installs_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def installs_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def installs_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def installs_was; end

    sig { void }
    def installs_will_change!; end

    sig { returns(::Integer) }
    def landing_uniques; end

    sig { params(value: ::Integer).returns(::Integer) }
    def landing_uniques=(value); end

    sig { returns(T::Boolean) }
    def landing_uniques?; end

    sig { returns(T.nilable(::Integer)) }
    def landing_uniques_before_last_save; end

    sig { returns(T.untyped) }
    def landing_uniques_before_type_cast; end

    sig { returns(T::Boolean) }
    def landing_uniques_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def landing_uniques_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def landing_uniques_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def landing_uniques_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def landing_uniques_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def landing_uniques_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def landing_uniques_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def landing_uniques_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def landing_uniques_was; end

    sig { void }
    def landing_uniques_will_change!; end

    sig { returns(::Integer) }
    def marketplace_listing_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def marketplace_listing_id=(value); end

    sig { returns(T::Boolean) }
    def marketplace_listing_id?; end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_listing_id_before_last_save; end

    sig { returns(T.untyped) }
    def marketplace_listing_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def marketplace_listing_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def marketplace_listing_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def marketplace_listing_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def marketplace_listing_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_listing_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def marketplace_listing_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def marketplace_listing_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_listing_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_listing_id_was; end

    sig { void }
    def marketplace_listing_id_will_change!; end

    sig { returns(::Integer) }
    def mrr_gained; end

    sig { params(value: ::Integer).returns(::Integer) }
    def mrr_gained=(value); end

    sig { returns(T::Boolean) }
    def mrr_gained?; end

    sig { returns(T.nilable(::Integer)) }
    def mrr_gained_before_last_save; end

    sig { returns(T.untyped) }
    def mrr_gained_before_type_cast; end

    sig { returns(T::Boolean) }
    def mrr_gained_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mrr_gained_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mrr_gained_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def mrr_gained_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def mrr_gained_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mrr_gained_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def mrr_gained_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def mrr_gained_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def mrr_gained_was; end

    sig { void }
    def mrr_gained_will_change!; end

    sig { returns(::Integer) }
    def mrr_lost; end

    sig { params(value: ::Integer).returns(::Integer) }
    def mrr_lost=(value); end

    sig { returns(T::Boolean) }
    def mrr_lost?; end

    sig { returns(T.nilable(::Integer)) }
    def mrr_lost_before_last_save; end

    sig { returns(T.untyped) }
    def mrr_lost_before_type_cast; end

    sig { returns(T::Boolean) }
    def mrr_lost_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mrr_lost_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mrr_lost_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def mrr_lost_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def mrr_lost_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mrr_lost_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def mrr_lost_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def mrr_lost_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def mrr_lost_was; end

    sig { void }
    def mrr_lost_will_change!; end

    sig { returns(::Integer) }
    def mrr_recurring; end

    sig { params(value: ::Integer).returns(::Integer) }
    def mrr_recurring=(value); end

    sig { returns(T::Boolean) }
    def mrr_recurring?; end

    sig { returns(T.nilable(::Integer)) }
    def mrr_recurring_before_last_save; end

    sig { returns(T.untyped) }
    def mrr_recurring_before_type_cast; end

    sig { returns(T::Boolean) }
    def mrr_recurring_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mrr_recurring_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mrr_recurring_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def mrr_recurring_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def mrr_recurring_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mrr_recurring_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def mrr_recurring_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def mrr_recurring_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def mrr_recurring_was; end

    sig { void }
    def mrr_recurring_will_change!; end

    sig { returns(::Integer) }
    def new_free_subscriptions; end

    sig { params(value: ::Integer).returns(::Integer) }
    def new_free_subscriptions=(value); end

    sig { returns(T::Boolean) }
    def new_free_subscriptions?; end

    sig { returns(T.nilable(::Integer)) }
    def new_free_subscriptions_before_last_save; end

    sig { returns(T.untyped) }
    def new_free_subscriptions_before_type_cast; end

    sig { returns(T::Boolean) }
    def new_free_subscriptions_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_free_subscriptions_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_free_subscriptions_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def new_free_subscriptions_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def new_free_subscriptions_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_free_subscriptions_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def new_free_subscriptions_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def new_free_subscriptions_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def new_free_subscriptions_was; end

    sig { void }
    def new_free_subscriptions_will_change!; end

    sig { returns(::Integer) }
    def new_free_trial_subscriptions; end

    sig { params(value: ::Integer).returns(::Integer) }
    def new_free_trial_subscriptions=(value); end

    sig { returns(T::Boolean) }
    def new_free_trial_subscriptions?; end

    sig { returns(T.nilable(::Integer)) }
    def new_free_trial_subscriptions_before_last_save; end

    sig { returns(T.untyped) }
    def new_free_trial_subscriptions_before_type_cast; end

    sig { returns(T::Boolean) }
    def new_free_trial_subscriptions_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_free_trial_subscriptions_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_free_trial_subscriptions_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def new_free_trial_subscriptions_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def new_free_trial_subscriptions_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_free_trial_subscriptions_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def new_free_trial_subscriptions_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def new_free_trial_subscriptions_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def new_free_trial_subscriptions_was; end

    sig { void }
    def new_free_trial_subscriptions_will_change!; end

    sig { returns(::Integer) }
    def new_paid_subscriptions; end

    sig { params(value: ::Integer).returns(::Integer) }
    def new_paid_subscriptions=(value); end

    sig { returns(T::Boolean) }
    def new_paid_subscriptions?; end

    sig { returns(T.nilable(::Integer)) }
    def new_paid_subscriptions_before_last_save; end

    sig { returns(T.untyped) }
    def new_paid_subscriptions_before_type_cast; end

    sig { returns(T::Boolean) }
    def new_paid_subscriptions_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_paid_subscriptions_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_paid_subscriptions_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def new_paid_subscriptions_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def new_paid_subscriptions_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_paid_subscriptions_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def new_paid_subscriptions_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def new_paid_subscriptions_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def new_paid_subscriptions_was; end

    sig { void }
    def new_paid_subscriptions_will_change!; end

    sig { returns(::Integer) }
    def new_purchases; end

    sig { params(value: ::Integer).returns(::Integer) }
    def new_purchases=(value); end

    sig { returns(T::Boolean) }
    def new_purchases?; end

    sig { returns(T.nilable(::Integer)) }
    def new_purchases_before_last_save; end

    sig { returns(T.untyped) }
    def new_purchases_before_type_cast; end

    sig { returns(T::Boolean) }
    def new_purchases_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_purchases_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_purchases_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def new_purchases_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def new_purchases_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_purchases_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def new_purchases_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def new_purchases_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def new_purchases_was; end

    sig { void }
    def new_purchases_will_change!; end

    sig { returns(::Integer) }
    def new_seats; end

    sig { params(value: ::Integer).returns(::Integer) }
    def new_seats=(value); end

    sig { returns(T::Boolean) }
    def new_seats?; end

    sig { returns(T.nilable(::Integer)) }
    def new_seats_before_last_save; end

    sig { returns(T.untyped) }
    def new_seats_before_type_cast; end

    sig { returns(T::Boolean) }
    def new_seats_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_seats_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_seats_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def new_seats_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def new_seats_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def new_seats_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def new_seats_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def new_seats_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def new_seats_was; end

    sig { void }
    def new_seats_will_change!; end

    sig { returns(::Integer) }
    def pageviews; end

    sig { params(value: ::Integer).returns(::Integer) }
    def pageviews=(value); end

    sig { returns(T::Boolean) }
    def pageviews?; end

    sig { returns(T.nilable(::Integer)) }
    def pageviews_before_last_save; end

    sig { returns(T.untyped) }
    def pageviews_before_type_cast; end

    sig { returns(T::Boolean) }
    def pageviews_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pageviews_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pageviews_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pageviews_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pageviews_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pageviews_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pageviews_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pageviews_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pageviews_was; end

    sig { void }
    def pageviews_will_change!; end

    sig { returns(::Date) }
    def recorded_on; end

    sig { params(value: ::Date).returns(::Date) }
    def recorded_on=(value); end

    sig { returns(T::Boolean) }
    def recorded_on?; end

    sig { returns(T.nilable(::Date)) }
    def recorded_on_before_last_save; end

    sig { returns(T.untyped) }
    def recorded_on_before_type_cast; end

    sig { returns(T::Boolean) }
    def recorded_on_came_from_user?; end

    sig { returns(T.nilable([::Date, ::Date])) }
    def recorded_on_change; end

    sig { returns(T.nilable([::Date, ::Date])) }
    def recorded_on_change_to_be_saved; end

    sig { params(from: ::Date, to: ::Date).returns(T::Boolean) }
    def recorded_on_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def recorded_on_in_database; end

    sig { returns(T.nilable([::Date, ::Date])) }
    def recorded_on_previous_change; end

    sig { params(from: ::Date, to: ::Date).returns(T::Boolean) }
    def recorded_on_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def recorded_on_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def recorded_on_was; end

    sig { void }
    def recorded_on_will_change!; end

    sig { void }
    def restore_cancellations!; end

    sig { void }
    def restore_cancelled_seats!; end

    sig { void }
    def restore_checkout_uniques!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_downgraded_seats!; end

    sig { void }
    def restore_downgrades!; end

    sig { void }
    def restore_free_trial_cancellations!; end

    sig { void }
    def restore_free_trial_conversions!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_installs!; end

    sig { void }
    def restore_landing_uniques!; end

    sig { void }
    def restore_marketplace_listing_id!; end

    sig { void }
    def restore_mrr_gained!; end

    sig { void }
    def restore_mrr_lost!; end

    sig { void }
    def restore_mrr_recurring!; end

    sig { void }
    def restore_new_free_subscriptions!; end

    sig { void }
    def restore_new_free_trial_subscriptions!; end

    sig { void }
    def restore_new_paid_subscriptions!; end

    sig { void }
    def restore_new_purchases!; end

    sig { void }
    def restore_new_seats!; end

    sig { void }
    def restore_pageviews!; end

    sig { void }
    def restore_recorded_on!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_upgraded_seats!; end

    sig { void }
    def restore_upgrades!; end

    sig { void }
    def restore_visitors!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_cancellations; end

    sig { returns(T::Boolean) }
    def saved_change_to_cancellations?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_cancelled_seats; end

    sig { returns(T::Boolean) }
    def saved_change_to_cancelled_seats?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_checkout_uniques; end

    sig { returns(T::Boolean) }
    def saved_change_to_checkout_uniques?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_downgraded_seats; end

    sig { returns(T::Boolean) }
    def saved_change_to_downgraded_seats?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_downgrades; end

    sig { returns(T::Boolean) }
    def saved_change_to_downgrades?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_free_trial_cancellations; end

    sig { returns(T::Boolean) }
    def saved_change_to_free_trial_cancellations?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_free_trial_conversions; end

    sig { returns(T::Boolean) }
    def saved_change_to_free_trial_conversions?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_installs; end

    sig { returns(T::Boolean) }
    def saved_change_to_installs?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_landing_uniques; end

    sig { returns(T::Boolean) }
    def saved_change_to_landing_uniques?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_marketplace_listing_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_marketplace_listing_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_mrr_gained; end

    sig { returns(T::Boolean) }
    def saved_change_to_mrr_gained?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_mrr_lost; end

    sig { returns(T::Boolean) }
    def saved_change_to_mrr_lost?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_mrr_recurring; end

    sig { returns(T::Boolean) }
    def saved_change_to_mrr_recurring?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_new_free_subscriptions; end

    sig { returns(T::Boolean) }
    def saved_change_to_new_free_subscriptions?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_new_free_trial_subscriptions; end

    sig { returns(T::Boolean) }
    def saved_change_to_new_free_trial_subscriptions?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_new_paid_subscriptions; end

    sig { returns(T::Boolean) }
    def saved_change_to_new_paid_subscriptions?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_new_purchases; end

    sig { returns(T::Boolean) }
    def saved_change_to_new_purchases?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_new_seats; end

    sig { returns(T::Boolean) }
    def saved_change_to_new_seats?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_pageviews; end

    sig { returns(T::Boolean) }
    def saved_change_to_pageviews?; end

    sig { returns(T.nilable([::Date, ::Date])) }
    def saved_change_to_recorded_on; end

    sig { returns(T::Boolean) }
    def saved_change_to_recorded_on?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_upgraded_seats; end

    sig { returns(T::Boolean) }
    def saved_change_to_upgraded_seats?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_upgrades; end

    sig { returns(T::Boolean) }
    def saved_change_to_upgrades?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_visitors; end

    sig { returns(T::Boolean) }
    def saved_change_to_visitors?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def upgraded_seats; end

    sig { params(value: ::Integer).returns(::Integer) }
    def upgraded_seats=(value); end

    sig { returns(T::Boolean) }
    def upgraded_seats?; end

    sig { returns(T.nilable(::Integer)) }
    def upgraded_seats_before_last_save; end

    sig { returns(T.untyped) }
    def upgraded_seats_before_type_cast; end

    sig { returns(T::Boolean) }
    def upgraded_seats_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def upgraded_seats_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def upgraded_seats_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def upgraded_seats_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upgraded_seats_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def upgraded_seats_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def upgraded_seats_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upgraded_seats_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def upgraded_seats_was; end

    sig { void }
    def upgraded_seats_will_change!; end

    sig { returns(::Integer) }
    def upgrades; end

    sig { params(value: ::Integer).returns(::Integer) }
    def upgrades=(value); end

    sig { returns(T::Boolean) }
    def upgrades?; end

    sig { returns(T.nilable(::Integer)) }
    def upgrades_before_last_save; end

    sig { returns(T.untyped) }
    def upgrades_before_type_cast; end

    sig { returns(T::Boolean) }
    def upgrades_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def upgrades_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def upgrades_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def upgrades_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upgrades_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def upgrades_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def upgrades_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upgrades_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def upgrades_was; end

    sig { void }
    def upgrades_will_change!; end

    sig { returns(::Integer) }
    def visitors; end

    sig { params(value: ::Integer).returns(::Integer) }
    def visitors=(value); end

    sig { returns(T::Boolean) }
    def visitors?; end

    sig { returns(T.nilable(::Integer)) }
    def visitors_before_last_save; end

    sig { returns(T.untyped) }
    def visitors_before_type_cast; end

    sig { returns(T::Boolean) }
    def visitors_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def visitors_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def visitors_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def visitors_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def visitors_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def visitors_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def visitors_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def visitors_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def visitors_was; end

    sig { void }
    def visitors_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cancellations?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cancelled_seats?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_checkout_uniques?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_downgraded_seats?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_downgrades?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_free_trial_cancellations?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_free_trial_conversions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_installs?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_landing_uniques?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_marketplace_listing_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mrr_gained?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mrr_lost?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mrr_recurring?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_new_free_subscriptions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_new_free_trial_subscriptions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_new_paid_subscriptions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_new_purchases?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_new_seats?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pageviews?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_recorded_on?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upgraded_seats?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upgrades?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_visitors?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_period(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def grouped_by_month(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def recorded_during(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def summed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Marketplace::ListingInsight } }

    sig { returns(T::Array[::Marketplace::ListingInsight]) }
    def to_a; end

    sig { returns(T::Array[::Marketplace::ListingInsight]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Marketplace::ListingInsight } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Marketplace::ListingInsight } }

    sig do
      params(
        records: T.any(::Marketplace::ListingInsight, T::Enumerable[T.any(::Marketplace::ListingInsight, T::Enumerable[::Marketplace::ListingInsight])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Marketplace::ListingInsight, T::Enumerable[T.any(::Marketplace::ListingInsight, T::Enumerable[::Marketplace::ListingInsight])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Marketplace::ListingInsight, T::Enumerable[T.any(::Marketplace::ListingInsight, T::Enumerable[::Marketplace::ListingInsight])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Marketplace::ListingInsight]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Marketplace::ListingInsight, T::Enumerable[T.any(::Marketplace::ListingInsight, T::Enumerable[::Marketplace::ListingInsight])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Marketplace::ListingInsight, T::Enumerable[T.any(::Marketplace::ListingInsight, T::Enumerable[::Marketplace::ListingInsight])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Marketplace::ListingInsight, T::Enumerable[T.any(::Marketplace::ListingInsight, T::Enumerable[::Marketplace::ListingInsight])])
      ).returns(T::Array[::Marketplace::ListingInsight])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Marketplace::ListingInsight]) }
    def target; end

    sig { returns(T::Array[::Marketplace::ListingInsight]) }
    def to_a; end

    sig { returns(T::Array[::Marketplace::ListingInsight]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Marketplace::ListingInsight } }

    sig { returns(T::Array[::Marketplace::ListingInsight]) }
    def to_a; end

    sig { returns(T::Array[::Marketplace::ListingInsight]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Marketplace::ListingInsight } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

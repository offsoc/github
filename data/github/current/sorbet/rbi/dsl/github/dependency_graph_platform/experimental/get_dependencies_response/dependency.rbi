# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Github::DependencyGraphPlatform::Experimental::GetDependenciesResponse::Dependency`.
# Please instead update this file by running `bin/tapioca dsl Github::DependencyGraphPlatform::Experimental::GetDependenciesResponse::Dependency`.

class Github::DependencyGraphPlatform::Experimental::GetDependenciesResponse::Dependency
  sig do
    params(
      dependencies: T.nilable(T.any(Google::Protobuf::RepeatedField[Github::DependencyGraphPlatform::Experimental::GetDependenciesResponse::TransitiveDependency], T::Array[Github::DependencyGraphPlatform::Experimental::GetDependenciesResponse::TransitiveDependency])),
      license: T.nilable(String),
      manifest_path: T.nilable(String),
      package_manager: T.nilable(T.any(Symbol, Integer)),
      package_name: T.nilable(String),
      relationship: T.nilable(T.any(Symbol, Integer)),
      requirements: T.nilable(String),
      scope: T.nilable(T.any(Symbol, Integer)),
      updated_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(dependencies: T.unsafe(nil), license: nil, manifest_path: nil, package_manager: nil, package_name: nil, relationship: nil, requirements: nil, scope: nil, updated_at: nil); end

  sig { void }
  def clear_dependencies; end

  sig { void }
  def clear_license; end

  sig { void }
  def clear_manifest_path; end

  sig { void }
  def clear_package_manager; end

  sig { void }
  def clear_package_name; end

  sig { void }
  def clear_relationship; end

  sig { void }
  def clear_requirements; end

  sig { void }
  def clear_scope; end

  sig { void }
  def clear_updated_at; end

  sig do
    returns(Google::Protobuf::RepeatedField[Github::DependencyGraphPlatform::Experimental::GetDependenciesResponse::TransitiveDependency])
  end
  def dependencies; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Github::DependencyGraphPlatform::Experimental::GetDependenciesResponse::TransitiveDependency]
    ).void
  end
  def dependencies=(value); end

  sig { returns(String) }
  def license; end

  sig { params(value: String).void }
  def license=(value); end

  sig { returns(String) }
  def manifest_path; end

  sig { params(value: String).void }
  def manifest_path=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def package_manager; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def package_manager=(value); end

  sig { returns(String) }
  def package_name; end

  sig { params(value: String).void }
  def package_name=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def relationship; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def relationship=(value); end

  sig { returns(String) }
  def requirements; end

  sig { params(value: String).void }
  def requirements=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def scope; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def scope=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end
end

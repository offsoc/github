# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::CloseIssueReferenceConnected`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::CloseIssueReferenceConnected`.

class Hydro::Schemas::Github::V1::CloseIssueReferenceConnected
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue),
      issue_repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest),
      pull_request_author: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      source: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(actor: nil, issue: nil, issue_repository: nil, pull_request: nil, pull_request_author: nil, source: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_issue; end

  sig { void }
  def clear_issue_repository; end

  sig { void }
  def clear_pull_request; end

  sig { void }
  def clear_pull_request_author; end

  sig { void }
  def clear_source; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def issue=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def issue_repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def issue_repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def pull_request=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def pull_request_author; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def pull_request_author=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def source; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def source=(value); end
end

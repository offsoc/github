<%# erblint:counter DeprecatedComponentsCounter 5 %>
<%= render Primer::Beta::Subhead.new(spacious: true) do |component| %>
        <% component.with_heading(tag: :h2, id: "merge-button-settings") do %>Pull Requests<% end %>
      <% end %>
      <p id="merge-button-settings-desc">
        When merging pull requests, you can allow any combination of merge commits, squashing, or rebasing.
        At least one option must be enabled.
        If you have linear history requirement enabled on any protected branch, you must enable squashing or rebasing.
      </p>
<%= form_tag update_repository_merge_settings_path(current_repository.owner, current_repository),
    :method => :put,
    :class => "repository-merge-features js-merge-features-form",
    "data-autosubmit" => true do %>
    <div class="Box">
      <%= render(Primer::Beta::Flash.new(scheme: :warning, full: true, classes: "js-select-one-warning", hidden: true)) do %>
        You must select at least one option
      <% end %>
      <%= render(Primer::Beta::Flash.new(scheme: :warning, full: true, classes: "js-no-merge-commit-warning", hidden: true)) do %>
        You must select squashing or rebasing option.
        This is because linear history is required on at least one protected branch.
      <% end %>

      <ul aria-labelledby="merge-button-settings" aria-describedby="merge-button-settings-desc">
        <li class="Box-row py-0">
          <div class="form-group js-repo-option js-toggler-container merge-commit-options <% if current_repository.merge_commit_allowed? %>on<% end %>">
            <div class="form-checkbox">
              <label for="merge_types_merge_commit">Allow merge commits</label>
              <span class="hx_status-indicator status-indicator js-status-indicator">
                <%= render(Primer::Beta::Spinner.new(size: :small, classes: "status-indicator-spinner")) %>
                <%= primer_octicon(:check) %>
              </span>
              <input type="checkbox"
                     name="merge_types[]"
                     value="merge_commit"
                     aria-describedby="merge_types_merge_commit_desc"
                     id="merge_types_merge_commit"
                     class="js-toggler-target"
                     <%= "checked" if current_repository.merge_commit_allowed? %>>
              <p id="merge_types_merge_commit_desc" class="note">Add all commits from the head branch to the base branch with a merge commit.</p>

              <%
                merge_commit_message_options = {
                  use_default_merge_title_and_body: "Default message",
                  use_merge_pr_title_as_default: "Pull request title",
                  use_merge_pr_body_as_default: "Pull request title and description",
                }
              %>
              <div class="merge-commit-message mt-2">
                <h3 class="h5">Default commit message</h3>
                <p class="note">Presented when merging a pull request with merge.</p>

                <% selected_option =
                  if current_repository.use_merge_pr_body_as_default?
                    "use_merge_pr_body_as_default".to_sym
                  elsif current_repository.use_merge_pr_title_as_default?
                    "use_merge_pr_title_as_default".to_sym
                  else
                    "use_default_merge_title_and_body".to_sym
                  end
                %>
                <details class="select-menu details-reset details-overlay mt-1">
                  <%= render Primer::ButtonComponent.new(tag: :summary, variant: :medium, classes: "select-menu-button") do %>
                    <span data-menu-button><%= merge_commit_message_options[selected_option] %></span>
                  <% end %>
                  <details-menu class="select-menu-modal position-absolute" style="z-index: 99;"><%# erblint:disable Primer::Accessibility::DetailsMenuMigration %>
                    <div class="select-menu-list">
                      <% merge_commit_message_options.each do |option, message| %>
                        <% selected = (option == selected_option) %>
                        <label class="select-menu-item text-normal f6" role="menuitemradio" tabindex="0" aria-checked="<%= selected %>">
                          <%= radio_button_tag "merge_commit_types[]", option, selected %>
                          <%= primer_octicon(:check, classes: 'select-menu-item-icon') %>
                          <span data-menu-button-text><%= message %></span>
                        </label>
                      <% end %>
                    </div>
                  </details-menu>
                </details>
              </div>
            </div>
          </div>
        </li>

        <li class="Box-row py-0">
          <div class="form-group js-repo-option js-toggler-container merge-squash-options <% if current_repository.squash_merge_allowed? %>on<% end %>">
            <div class="form-checkbox">
              <label for="merge_types_squash">Allow squash merging</label>
              <span class="hx_status-indicator status-indicator js-status-indicator">
                <%= render(Primer::Beta::Spinner.new(size: :small, classes: "status-indicator-spinner")) %>
                <%= primer_octicon(:check) %>
              </span>
              <input type="checkbox"
                     name="merge_types[]"
                     value="squash_merge"
                     aria-describedby="merge_types_squash_desc"
                     id="merge_types_squash"
                     class="js-toggler-target"
                     <%= "checked" if current_repository.squash_merge_allowed? %>>
              <p id="merge_types_squash_desc" class="note">Combine all commits from the head branch into a single commit in the base branch.</p>

              <%
                squash_commit_message_options = {
                  use_default_squash_title_and_body: "Default message",
                  use_squash_pr_title_as_default: "Pull request title",
                  use_squash_pr_commits_as_default: "Pull request title and commit details",
                  use_squash_pr_body_as_default: "Pull request title and description",
                }
              %>
              <div class="mt-2 squash-commit-message">
                <h3 class="h5">Default commit message</h3>
                <p class="note">Presented when merging a pull request with squash.</p>

                <% selected_option =
                  if current_repository.use_squash_pr_body_as_default?
                    "use_squash_pr_body_as_default".to_sym
                  elsif current_repository.use_squash_pr_commits_as_default?
                    "use_squash_pr_commits_as_default".to_sym
                  elsif current_repository.use_squash_pr_title_as_default?
                    "use_squash_pr_title_as_default".to_sym
                  else
                    "use_default_squash_title_and_body".to_sym
                  end
                %>
                <details class="select-menu details-reset details-overlay mt-1">
                  <%= render Primer::ButtonComponent.new(tag: :summary, variant: :medium, classes: "select-menu-button") do %>
                  <span data-menu-button><%= squash_commit_message_options[selected_option] %></span>
                  <% end %>
                  <details-menu class="select-menu-modal position-absolute" style="z-index: 99;"><%# erblint:disable Primer::Accessibility::DetailsMenuMigration %>
                    <div class="select-menu-list">
                      <% squash_commit_message_options.each do |option, message| %>
                        <% selected = (option == selected_option) %>
                        <label class="select-menu-item text-normal f6" role="menuitemradio" tabindex="0" aria-checked="<%= selected %>">
                          <%= radio_button_tag "squash_merge_commit_types[]", option, selected %>
                          <%= primer_octicon(:check, classes: 'select-menu-item-icon') %>
                          <span data-menu-button-text><%= message %></span>
                        </label>
                      <% end %>
                    </div>
                  </details-menu>
                </details>
              </div>
            </div>
          </div>
        </li>

        <li class="Box-row py-0">
          <div class="form-group js-repo-option">
            <div class="form-checkbox">
              <label for="merge_types_rebase">Allow rebase merging</label>
              <span class="hx_status-indicator status-indicator js-status-indicator">
                <%= render(Primer::Beta::Spinner.new(size: :small, classes: "status-indicator-spinner")) %>
                <%= primer_octicon(:check) %>
              </span>
              <input type="checkbox"
                     name="merge_types[]"
                     value="rebase_merge"
                     aria-describedby="merge_types_rebase_desc"
                     id="merge_types_rebase"
                     <%= "checked" if current_repository.rebase_merge_allowed? %>>
              <p id="merge_types_rebase_desc" class="note">Add all commits from the head branch onto the base branch individually.</p>
            </div>
          </div>
        </li>
      </ul>
    </div>

    <p class="mt-3">
      Control how and when users are prompted to update their branches if there are new changes available in the base branch.
    </p>
    <div class="Box">
      <ul>
        <li class="Box-row py-0">
          <div class="form-group js-repo-option">
            <div class="form-checkbox">
              <label for="allow_update_branch">Always suggest updating pull request branches</label>
              <span class="hx_status-indicator status-indicator js-status-indicator">
                <%= render(Primer::Beta::Spinner.new(size: :small, classes: "status-indicator-spinner")) %>
                <%= primer_octicon(:check) %>
              </span>
              <input type="checkbox"
                    name="merge_types[]"
                    value="update_branch"
                    aria-describedby="allow_update_branch_desc"
                    id="allow_update_branch"
                    <%= "checked" if current_repository.enable_update_branch? %>>
              <p id="allow_update_branch_desc" class="note">Whenever there are new changes available in the base branch, present an “update branch” option in the pull request.</p>
            </div>
          </div>
        </li>
      </ul>
    </div>

    <p class="mt-3">
      You can allow setting pull requests to merge automatically once all required reviews and status checks have passed.
    </p>
    <div class="Box">
      <ul>
        <li class="Box-row py-0">
          <div class="form-group js-repo-option">
            <div class="form-checkbox">
              <label for="merge_types_auto_merge" <% if !current_repository.can_auto_merge_be_allowed? %> class="color-fg-muted" <% end %>>
                Allow auto-merge
              </label>
              <span class="hx_status-indicator status-indicator js-status-indicator">
                <%= render(Primer::Beta::Spinner.new(size: :small, classes: "status-indicator-spinner")) %>
                <%= primer_octicon(:check) %>
              </span>
              <input type="checkbox"
                    name="merge_types[]"
                    value="auto_merge"
                    aria-describedby="merge_types_auto_merge_desc"
                    id="merge_types_auto_merge"
                    <%= "disabled" if !current_repository.can_auto_merge_be_allowed? %>
                    <%= "checked" if current_repository.can_auto_merge_be_allowed? && current_repository.auto_merge_allowed? %>
                    <%= safe_analytics_click_attributes(
                      category: "Merge Button",
                      action: "Allow Auto-Merge",
                      label: "merge_button_settings_toggle:#{!current_repository.auto_merge_allowed?}"
                    ) %>
              >
              <p id="merge_types_auto_merge_desc" class="note">
                Waits for merge requirements to be met and then merges automatically.
                <%= link_to(current_repository.can_auto_merge_be_allowed? ? "Learn more" : "Why is this option disabled?", docs_url("pull-requests/automatically-merging"), class: "small Link--inTextBlock", target: "_blank", rel: "noopener noreferrer") %>
              </p>
            </div>
          </div>
        </li>
      </ul>
    </div>
    <% if permission == :admin %>
        <p class="mt-3">
          After pull requests are merged, you can have head branches deleted automatically.
        </p>
        <div class="Box">
          <ul>
            <li class="Box-row py-0">
              <div class="form-group js-repo-option">
                <div class="form-checkbox">
                  <label for="merge_types_delete_branch">Automatically delete head branches</label>
                  <span class="hx_status-indicator status-indicator js-status-indicator">
                    <%= render(Primer::Beta::Spinner.new(size: :small, classes: "status-indicator-spinner")) %>
                    <%= primer_octicon(:check) %>
                  </span>
                  <input type="checkbox"
                        name="merge_types[]"
                        value="delete_branch"
                        aria-describedby="merge_types_delete_branch_desc"
                        id="merge_types_delete_branch"
                        <%= "checked" if current_repository.delete_branch_on_merge? %>>
                  <p id="merge_types_delete_branch_desc" class="note">Deleted branches will still be able to be restored.</p>
                </div>
              </div>
            </li>
          </ul>
        </div>
    <% end %>
  <noscript>
    <%= render Primer::ButtonComponent.new(scheme: :primary, type: :submit) do %>Save changes<% end %>
  </noscript>
<% end %>

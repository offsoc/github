<%# erblint:counter DeprecatedComponentsCounter 4 %>
<% if disabled_button.present? %>
  <%= disabled_button %>
<% elsif content %>
  <%= content %>
<% else %>
  <div class="position-relative width-fit <%= block ? " d-block width-full" : " d-inline-block" %>">
    <template id="concurrency-error">
      <%= render Codespaces::CreateConcurrencyErrorComponent.new %>
    </template>
    <div class="position-relative width-fit <%= block ? " d-flex width-full text-center" : " d-inline-block" %>">
      <%= form_for(codespace, form_options) do |f| %>
        <%= f.hidden_field(:repository_id) %>
        <%= f.hidden_field(:template_repository_id) %>
        <%= f.hidden_field(:ref, value: codespace.ref_for_display) %>
        <%= f.hidden_field(:pull_request_id) %>
        <%= f.hidden_field(:vscs_target, value: vscs_target) if vscs_target.present? %>
        <%= f.hidden_field(:sku_name, value: sku.name) if sku.present? %>
        <%= f.hidden_field(:vscs_target_url, value: vscs_target_url, data: { target: "new-codespace.vscsTargetUrl" }) %>
        <%= hidden_field_tag(:open_in_deeplink, open_in_deeplink) if open_in_deeplink %>
        <%# We don't want to nest this within the codespace object we send up, as that would actually try to dictate the billable owner, which we recompute server-side. %>
        <%= hidden_field_tag(:expected_billable_owner_id, codespace.billable_owner_id) %>
        <% if !hide_location %>
          <%= f.hidden_field(:location, value: codespace.location) %>
          <%= hidden_field_tag(:geo, geo) %>
        <% end %>
        <%= f.hidden_field(:devcontainer_path) %>
        <%= hidden_field_tag(:secrets_data, nil, data: { target: "new-codespace.declarativeSecretsHash"}) %>
        <% if dropdown %>
          <create-button data-load-on="firstInteraction" class="js-toggle-hidden d-flex<%= " width-full" unless !block %>">
            <%= f.button({
              class: "#{btn_class} width-fit js-toggle-hidden#{ " width-full" unless !block }", "data-target": "create-button.createButton", hidden: !hide_advanced_options_button}.merge(test_selector_data_hash("codespaces-create-button"))) do %>
              <%= render Primer::Beta::Octicon.new(icon: button_icon, classes: icon_class) if button_icon %>
              <%= render Primer::Truncate.new(tag: :div, max_width: 260, mx: :auto).with_content(text) %>
            <% end %>
            <%= render Primer::ButtonComponent.new(
              data: { target: "create-button.configureAndCreateLink" },
              tag: :a,
              hidden: hide_advanced_options_button,
              block: block,
              classes: "btn btn-primary border-right-0 rounded-left-2 rounded-right-0",
              href: new_codespace_path(repo: codespace.repository_id, hide_repo_select: true, ref: codespace.ref || codespace.pull_request&.head_ref),
              target: "_blank"
            ).with_content("Configure and create codespace") %>
            <%= render Codespaces::CreateOptionsDropdownComponent.new(
              codespace: codespace,
              create_button_text: text,
              default_sku: sku,
              hide_advanced_options_button: hide_advanced_options_button,
            ) %>
          </create-button>
        <% else %>
          <%= render Primer::ButtonComponent.new(
              data: { target: "create-button.configureAndCreateLink" },
              tag: :a,
              hidden: hide_advanced_options_button,
              block: block,
              border_radius: 2, classes: "btn btn-primary",
              href: new_codespace_path(repo: codespace.repository_id, hide_repo_select: true, ref: codespace.ref || codespace.pull_request&.head_ref),
              target: "_blank"
            ).with_content("Configure and create codespace") %>
          <%= f.button({class: "#{btn_class} js-toggle-hidden rounded-2 width-fit", hidden: !hide_advanced_options_button}.merge(test_selector_data_hash("codespaces-create-button"))) do %>
            <%= render Primer::Beta::Octicon.new(icon: button_icon, classes: icon_class) if button_icon %>
            <%= render Primer::Truncate.new(tag: :div).with_content(text) %>
          <% end %>
        <% end %>
        <span class="js-toggle-hidden" hidden> <%#= TODO: maybe instead of relying on js-toggle-hidden can show if loading state in js form is true etc. %>
          <%= loading_button %>
        </span>
      <% end %>
    </div>
  </div>
<% end %>

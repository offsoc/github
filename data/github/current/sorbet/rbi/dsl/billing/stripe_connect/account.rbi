# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Billing::StripeConnect::Account`.
# Please instead update this file by running `bin/tapioca dsl Billing::StripeConnect::Account`.

class Billing::StripeConnect::Account
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def verification_statuses; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::StripeConnect::Account).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::StripeConnect::Account).void)
      ).returns(::Billing::StripeConnect::Account)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::StripeConnect::Account).void)
      ).returns(::Billing::StripeConnect::Account)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::StripeConnect::Account).void)
      ).returns(::Billing::StripeConnect::Account)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::StripeConnect::Account).void)
      ).returns(::Billing::StripeConnect::Account)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::StripeConnect::Account).void)
      ).returns(::Billing::StripeConnect::Account)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Billing::StripeConnect::Account]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def fifth; end

    sig { returns(::Billing::StripeConnect::Account) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Billing::StripeConnect::Account)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Billing::StripeConnect::Account) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Billing::StripeConnect::Account).void)
      ).returns(T.nilable(T::Enumerator[::Billing::StripeConnect::Account]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Billing::StripeConnect::Account]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Billing::StripeConnect::Account]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::StripeConnect::Account).void)
      ).returns(::Billing::StripeConnect::Account)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::StripeConnect::Account).void)
      ).returns(::Billing::StripeConnect::Account)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::StripeConnect::Account).void)
      ).returns(::Billing::StripeConnect::Account)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Billing::StripeConnect::Account)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Billing::StripeConnect::Account) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Billing::StripeConnect::Account) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Billing::StripeConnect::Account) }
    def first!; end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def forty_two; end

    sig { returns(::Billing::StripeConnect::Account) }
    def forty_two!; end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def fourth; end

    sig { returns(::Billing::StripeConnect::Account) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Billing::StripeConnect::Account) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::StripeConnect::Account).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::StripeConnect::Account).void)
      ).returns(::Billing::StripeConnect::Account)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::StripeConnect::Account).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::StripeConnect::Account).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def second; end

    sig { returns(::Billing::StripeConnect::Account) }
    def second!; end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def second_to_last; end

    sig { returns(::Billing::StripeConnect::Account) }
    def second_to_last!; end

    sig { returns(::Billing::StripeConnect::Account) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Billing::StripeConnect::Account) }
    def take!; end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def third; end

    sig { returns(::Billing::StripeConnect::Account) }
    def third!; end

    sig { returns(T.nilable(::Billing::StripeConnect::Account)) }
    def third_to_last; end

    sig { returns(::Billing::StripeConnect::Account) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def unknown_verification_status!; end

    sig { returns(T::Boolean) }
    def unknown_verification_status?; end

    sig { void }
    def unverified_details_not_submitted_verification_status!; end

    sig { returns(T::Boolean) }
    def unverified_details_not_submitted_verification_status?; end

    sig { void }
    def unverified_no_card_payments_capability_verification_status!; end

    sig { returns(T::Boolean) }
    def unverified_no_card_payments_capability_verification_status?; end

    sig { void }
    def unverified_no_tax_reporting_capability_verification_status!; end

    sig { returns(T::Boolean) }
    def unverified_no_tax_reporting_capability_verification_status?; end

    sig { void }
    def unverified_no_transfers_capability_verification_status!; end

    sig { returns(T::Boolean) }
    def unverified_no_transfers_capability_verification_status?; end

    sig { void }
    def unverified_requirements_currently_due_verification_status!; end

    sig { returns(T::Boolean) }
    def unverified_requirements_currently_due_verification_status?; end

    sig { void }
    def unverified_requirements_past_due_verification_status!; end

    sig { returns(T::Boolean) }
    def unverified_requirements_past_due_verification_status?; end

    sig { void }
    def unverified_verification_status!; end

    sig { returns(T::Boolean) }
    def unverified_verification_status?; end

    sig { void }
    def verified_verification_status!; end

    sig { returns(T::Boolean) }
    def verified_verification_status?; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::StripeWebhook) }
    def build_latest_payout_webhook(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def build_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::StripeWebhook) }
    def create_latest_payout_webhook(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::StripeWebhook) }
    def create_latest_payout_webhook!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_sponsorable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_sponsorable!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_sponsors_listing!(*args, &blk); end

    sig { returns(T.nilable(::Billing::StripeWebhook)) }
    def latest_payout_webhook; end

    sig { params(value: T.nilable(::Billing::StripeWebhook)).void }
    def latest_payout_webhook=(value); end

    # This method is created by ActiveRecord on the `Billing::StripeConnect::Account` class because it declared `has_many :ledger_entries`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PayoutsLedgerEntry::PrivateCollectionProxy) }
    def ledger_entries; end

    sig { params(value: T::Enumerable[::Billing::PayoutsLedgerEntry]).void }
    def ledger_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def ledger_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ledger_entry_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def payout_webhook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def payout_webhook_ids=(ids); end

    # This method is created by ActiveRecord on the `Billing::StripeConnect::Account` class because it declared `has_many :payout_webhooks`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::StripeWebhook::PrivateCollectionProxy) }
    def payout_webhooks; end

    sig { params(value: T::Enumerable[::Billing::StripeWebhook]).void }
    def payout_webhooks=(value); end

    sig { returns(T.nilable(::Billing::StripeWebhook)) }
    def reload_latest_payout_webhook; end

    sig { returns(T.nilable(::User)) }
    def reload_sponsorable; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def reload_sponsors_listing; end

    sig { returns(T.nilable(::User)) }
    def sponsorable; end

    sig { params(value: T.nilable(::User)).void }
    def sponsorable=(value); end

    sig { returns(T.nilable(::SponsorsListing)) }
    def sponsors_listing; end

    sig { params(value: T.nilable(::SponsorsListing)).void }
    def sponsors_listing=(value); end

    sig { returns(T::Array[T.untyped]) }
    def webhook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def webhook_ids=(ids); end

    # This method is created by ActiveRecord on the `Billing::StripeConnect::Account` class because it declared `has_many :webhooks`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::StripeWebhook::PrivateCollectionProxy) }
    def webhooks; end

    sig { params(value: T::Enumerable[::Billing::StripeWebhook]).void }
    def webhooks=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active_first(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def inactive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def including_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unknown_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unverified_details_not_submitted_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unverified_no_card_payments_capability_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unverified_no_tax_reporting_capability_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unverified_no_transfers_capability_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unverified_requirements_currently_due_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unverified_requirements_past_due_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unverified_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_verified(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_verified_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_ledger_entry_amount(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def payouts_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unknown_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unverified_details_not_submitted_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unverified_no_card_payments_capability_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unverified_no_tax_reporting_capability_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unverified_no_transfers_capability_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unverified_requirements_currently_due_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unverified_requirements_past_due_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unverified_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def verified(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def verified_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_latest_payout_webhook; end

    sig { returns(Promise[T.untyped]) }
    def async_ledger_entries; end

    sig { returns(Promise[T.untyped]) }
    def async_payout_webhooks; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorable; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_listing; end

    sig { returns(Promise[T.untyped]) }
    def async_webhooks; end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def active; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def active=(value); end

    sig { returns(T::Boolean) }
    def active?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_before_last_save; end

    sig { returns(T.untyped) }
    def active_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def active_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def active_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_was; end

    sig { void }
    def active_will_change!; end

    sig { returns(T.nilable(::String)) }
    def billing_country; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def billing_country=(value); end

    sig { returns(T::Boolean) }
    def billing_country?; end

    sig { returns(T.nilable(::String)) }
    def billing_country_before_last_save; end

    sig { returns(T.untyped) }
    def billing_country_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_country_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_country_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_country_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_country_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_country_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_country_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_country_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_country_previously_was; end

    sig { returns(T.nilable(::String)) }
    def billing_country_was; end

    sig { void }
    def billing_country_will_change!; end

    sig { returns(T::Boolean) }
    def card_payments_capability; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def card_payments_capability=(value); end

    sig { returns(T::Boolean) }
    def card_payments_capability?; end

    sig { returns(T.nilable(T::Boolean)) }
    def card_payments_capability_before_last_save; end

    sig { returns(T.untyped) }
    def card_payments_capability_before_type_cast; end

    sig { returns(T::Boolean) }
    def card_payments_capability_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def card_payments_capability_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def card_payments_capability_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def card_payments_capability_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def card_payments_capability_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def card_payments_capability_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def card_payments_capability_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def card_payments_capability_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def card_payments_capability_was; end

    sig { void }
    def card_payments_capability_will_change!; end

    sig { returns(T::Boolean) }
    def charges_enabled; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def charges_enabled=(value); end

    sig { returns(T::Boolean) }
    def charges_enabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def charges_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def charges_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def charges_enabled_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def charges_enabled_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def charges_enabled_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def charges_enabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def charges_enabled_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def charges_enabled_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def charges_enabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def charges_enabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def charges_enabled_was; end

    sig { void }
    def charges_enabled_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country=(value); end

    sig { returns(T::Boolean) }
    def country?; end

    sig { returns(T.nilable(::String)) }
    def country_before_last_save; end

    sig { returns(T.untyped) }
    def country_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_was; end

    sig { void }
    def country_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_requirements_deadline; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_requirements_deadline=(value); end

    sig { returns(T::Boolean) }
    def current_requirements_deadline?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_requirements_deadline_before_last_save; end

    sig { returns(T.untyped) }
    def current_requirements_deadline_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_requirements_deadline_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_requirements_deadline_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_requirements_deadline_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def current_requirements_deadline_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_requirements_deadline_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_requirements_deadline_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def current_requirements_deadline_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_requirements_deadline_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_requirements_deadline_was; end

    sig { void }
    def current_requirements_deadline_will_change!; end

    sig { returns(T.nilable(::String)) }
    def default_currency; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def default_currency=(value); end

    sig { returns(T::Boolean) }
    def default_currency?; end

    sig { returns(T.nilable(::String)) }
    def default_currency_before_last_save; end

    sig { returns(T.untyped) }
    def default_currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def default_currency_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def default_currency_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def default_currency_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def default_currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def default_currency_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def default_currency_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def default_currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def default_currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def default_currency_was; end

    sig { void }
    def default_currency_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at=(value); end

    sig { returns(T::Boolean) }
    def deleted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_was; end

    sig { void }
    def deleted_at_will_change!; end

    sig { returns(T::Boolean) }
    def details_submitted; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def details_submitted=(value); end

    sig { returns(T::Boolean) }
    def details_submitted?; end

    sig { returns(T.nilable(T::Boolean)) }
    def details_submitted_before_last_save; end

    sig { returns(T.untyped) }
    def details_submitted_before_type_cast; end

    sig { returns(T::Boolean) }
    def details_submitted_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def details_submitted_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def details_submitted_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def details_submitted_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def details_submitted_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def details_submitted_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def details_submitted_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def details_submitted_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def details_submitted_was; end

    sig { void }
    def details_submitted_will_change!; end

    sig { returns(T.nilable(::String)) }
    def disabled_reason; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def disabled_reason=(value); end

    sig { returns(T::Boolean) }
    def disabled_reason?; end

    sig { returns(T.nilable(::String)) }
    def disabled_reason_before_last_save; end

    sig { returns(T.untyped) }
    def disabled_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def disabled_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def disabled_reason_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def disabled_reason_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def disabled_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def disabled_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def disabled_reason_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def disabled_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def disabled_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def disabled_reason_was; end

    sig { void }
    def disabled_reason_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def payout_interval; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def payout_interval=(value); end

    sig { returns(T::Boolean) }
    def payout_interval?; end

    sig { returns(T.nilable(::String)) }
    def payout_interval_before_last_save; end

    sig { returns(T.untyped) }
    def payout_interval_before_type_cast; end

    sig { returns(T::Boolean) }
    def payout_interval_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payout_interval_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payout_interval_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def payout_interval_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payout_interval_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payout_interval_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def payout_interval_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payout_interval_previously_was; end

    sig { returns(T.nilable(::String)) }
    def payout_interval_was; end

    sig { void }
    def payout_interval_will_change!; end

    sig { returns(T::Boolean) }
    def payouts_enabled; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def payouts_enabled=(value); end

    sig { returns(T::Boolean) }
    def payouts_enabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def payouts_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def payouts_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def payouts_enabled_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def payouts_enabled_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def payouts_enabled_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def payouts_enabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def payouts_enabled_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def payouts_enabled_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def payouts_enabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def payouts_enabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def payouts_enabled_was; end

    sig { void }
    def payouts_enabled_will_change!; end

    sig { returns(T::Boolean) }
    def requirements_currently_due; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def requirements_currently_due=(value); end

    sig { returns(T::Boolean) }
    def requirements_currently_due?; end

    sig { returns(T.nilable(T::Boolean)) }
    def requirements_currently_due_before_last_save; end

    sig { returns(T.untyped) }
    def requirements_currently_due_before_type_cast; end

    sig { returns(T::Boolean) }
    def requirements_currently_due_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def requirements_currently_due_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def requirements_currently_due_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def requirements_currently_due_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def requirements_currently_due_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def requirements_currently_due_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def requirements_currently_due_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def requirements_currently_due_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def requirements_currently_due_was; end

    sig { void }
    def requirements_currently_due_will_change!; end

    sig { returns(T::Boolean) }
    def requirements_eventually_due; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def requirements_eventually_due=(value); end

    sig { returns(T::Boolean) }
    def requirements_eventually_due?; end

    sig { returns(T.nilable(T::Boolean)) }
    def requirements_eventually_due_before_last_save; end

    sig { returns(T.untyped) }
    def requirements_eventually_due_before_type_cast; end

    sig { returns(T::Boolean) }
    def requirements_eventually_due_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def requirements_eventually_due_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def requirements_eventually_due_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def requirements_eventually_due_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def requirements_eventually_due_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def requirements_eventually_due_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def requirements_eventually_due_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def requirements_eventually_due_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def requirements_eventually_due_was; end

    sig { void }
    def requirements_eventually_due_will_change!; end

    sig { returns(T::Boolean) }
    def requirements_past_due; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def requirements_past_due=(value); end

    sig { returns(T::Boolean) }
    def requirements_past_due?; end

    sig { returns(T.nilable(T::Boolean)) }
    def requirements_past_due_before_last_save; end

    sig { returns(T.untyped) }
    def requirements_past_due_before_type_cast; end

    sig { returns(T::Boolean) }
    def requirements_past_due_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def requirements_past_due_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def requirements_past_due_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def requirements_past_due_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def requirements_past_due_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def requirements_past_due_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def requirements_past_due_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def requirements_past_due_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def requirements_past_due_was; end

    sig { void }
    def requirements_past_due_will_change!; end

    sig { void }
    def restore_active!; end

    sig { void }
    def restore_billing_country!; end

    sig { void }
    def restore_card_payments_capability!; end

    sig { void }
    def restore_charges_enabled!; end

    sig { void }
    def restore_country!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_current_requirements_deadline!; end

    sig { void }
    def restore_default_currency!; end

    sig { void }
    def restore_deleted_at!; end

    sig { void }
    def restore_details_submitted!; end

    sig { void }
    def restore_disabled_reason!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_payout_interval!; end

    sig { void }
    def restore_payouts_enabled!; end

    sig { void }
    def restore_requirements_currently_due!; end

    sig { void }
    def restore_requirements_eventually_due!; end

    sig { void }
    def restore_requirements_past_due!; end

    sig { void }
    def restore_sponsors_listing_id!; end

    sig { void }
    def restore_stripe_account_id!; end

    sig { void }
    def restore_tax_reporting_capability!; end

    sig { void }
    def restore_transfers_capability!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_verification_status!; end

    sig { void }
    def restore_w8_or_w9_requested_at!; end

    sig { void }
    def restore_w8_or_w9_verified!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_active; end

    sig { returns(T::Boolean) }
    def saved_change_to_active?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_billing_country; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_country?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_card_payments_capability; end

    sig { returns(T::Boolean) }
    def saved_change_to_card_payments_capability?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_charges_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_charges_enabled?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country; end

    sig { returns(T::Boolean) }
    def saved_change_to_country?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_current_requirements_deadline; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_requirements_deadline?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_default_currency; end

    sig { returns(T::Boolean) }
    def saved_change_to_default_currency?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_deleted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_details_submitted; end

    sig { returns(T::Boolean) }
    def saved_change_to_details_submitted?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_disabled_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_disabled_reason?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_payout_interval; end

    sig { returns(T::Boolean) }
    def saved_change_to_payout_interval?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_payouts_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_payouts_enabled?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_requirements_currently_due; end

    sig { returns(T::Boolean) }
    def saved_change_to_requirements_currently_due?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_requirements_eventually_due; end

    sig { returns(T::Boolean) }
    def saved_change_to_requirements_eventually_due?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_requirements_past_due; end

    sig { returns(T::Boolean) }
    def saved_change_to_requirements_past_due?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sponsors_listing_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsors_listing_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_stripe_account_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_stripe_account_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_tax_reporting_capability; end

    sig { returns(T::Boolean) }
    def saved_change_to_tax_reporting_capability?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_transfers_capability; end

    sig { returns(T::Boolean) }
    def saved_change_to_transfers_capability?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_verification_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_verification_status?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_w8_or_w9_requested_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_w8_or_w9_requested_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_w8_or_w9_verified; end

    sig { returns(T::Boolean) }
    def saved_change_to_w8_or_w9_verified?; end

    sig { returns(::Integer) }
    def sponsors_listing_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sponsors_listing_id=(value); end

    sig { returns(T::Boolean) }
    def sponsors_listing_id?; end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id_before_last_save; end

    sig { returns(T.untyped) }
    def sponsors_listing_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsors_listing_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsors_listing_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsors_listing_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsors_listing_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsors_listing_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsors_listing_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_listing_id_was; end

    sig { void }
    def sponsors_listing_id_will_change!; end

    sig { returns(::String) }
    def stripe_account_id; end

    sig { params(value: ::String).returns(::String) }
    def stripe_account_id=(value); end

    sig { returns(T::Boolean) }
    def stripe_account_id?; end

    sig { returns(T.nilable(::String)) }
    def stripe_account_id_before_last_save; end

    sig { returns(T.untyped) }
    def stripe_account_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def stripe_account_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def stripe_account_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def stripe_account_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def stripe_account_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def stripe_account_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def stripe_account_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def stripe_account_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def stripe_account_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def stripe_account_id_was; end

    sig { void }
    def stripe_account_id_will_change!; end

    sig { returns(T::Boolean) }
    def tax_reporting_capability; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def tax_reporting_capability=(value); end

    sig { returns(T::Boolean) }
    def tax_reporting_capability?; end

    sig { returns(T.nilable(T::Boolean)) }
    def tax_reporting_capability_before_last_save; end

    sig { returns(T.untyped) }
    def tax_reporting_capability_before_type_cast; end

    sig { returns(T::Boolean) }
    def tax_reporting_capability_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def tax_reporting_capability_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def tax_reporting_capability_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def tax_reporting_capability_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def tax_reporting_capability_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def tax_reporting_capability_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def tax_reporting_capability_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def tax_reporting_capability_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def tax_reporting_capability_was; end

    sig { void }
    def tax_reporting_capability_will_change!; end

    sig { returns(T::Boolean) }
    def transfers_capability; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def transfers_capability=(value); end

    sig { returns(T::Boolean) }
    def transfers_capability?; end

    sig { returns(T.nilable(T::Boolean)) }
    def transfers_capability_before_last_save; end

    sig { returns(T.untyped) }
    def transfers_capability_before_type_cast; end

    sig { returns(T::Boolean) }
    def transfers_capability_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def transfers_capability_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def transfers_capability_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def transfers_capability_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def transfers_capability_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def transfers_capability_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def transfers_capability_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def transfers_capability_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def transfers_capability_was; end

    sig { void }
    def transfers_capability_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::String) }
    def verification_status; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def verification_status=(value); end

    sig { returns(T::Boolean) }
    def verification_status?; end

    sig { returns(T.nilable(::String)) }
    def verification_status_before_last_save; end

    sig { returns(T.untyped) }
    def verification_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def verification_status_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def verification_status_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def verification_status_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def verification_status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def verification_status_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def verification_status_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def verification_status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def verification_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def verification_status_was; end

    sig { void }
    def verification_status_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def w8_or_w9_requested_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def w8_or_w9_requested_at=(value); end

    sig { returns(T::Boolean) }
    def w8_or_w9_requested_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def w8_or_w9_requested_at_before_last_save; end

    sig { returns(T.untyped) }
    def w8_or_w9_requested_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def w8_or_w9_requested_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def w8_or_w9_requested_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def w8_or_w9_requested_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def w8_or_w9_requested_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def w8_or_w9_requested_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def w8_or_w9_requested_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def w8_or_w9_requested_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def w8_or_w9_requested_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def w8_or_w9_requested_at_was; end

    sig { void }
    def w8_or_w9_requested_at_will_change!; end

    sig { returns(T::Boolean) }
    def w8_or_w9_verified; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def w8_or_w9_verified=(value); end

    sig { returns(T::Boolean) }
    def w8_or_w9_verified?; end

    sig { returns(T.nilable(T::Boolean)) }
    def w8_or_w9_verified_before_last_save; end

    sig { returns(T.untyped) }
    def w8_or_w9_verified_before_type_cast; end

    sig { returns(T::Boolean) }
    def w8_or_w9_verified_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def w8_or_w9_verified_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def w8_or_w9_verified_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def w8_or_w9_verified_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def w8_or_w9_verified_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def w8_or_w9_verified_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def w8_or_w9_verified_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def w8_or_w9_verified_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def w8_or_w9_verified_was; end

    sig { void }
    def w8_or_w9_verified_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_country?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_card_payments_capability?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_charges_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_requirements_deadline?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_default_currency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_details_submitted?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disabled_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payout_interval?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payouts_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_requirements_currently_due?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_requirements_eventually_due?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_requirements_past_due?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsors_listing_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_stripe_account_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tax_reporting_capability?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_transfers_capability?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_verification_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_w8_or_w9_requested_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_w8_or_w9_verified?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active_first(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def inactive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def including_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unknown_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unverified_details_not_submitted_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unverified_no_card_payments_capability_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unverified_no_tax_reporting_capability_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unverified_no_transfers_capability_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unverified_requirements_currently_due_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unverified_requirements_past_due_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unverified_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_verified(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_verified_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_ledger_entry_amount(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def payouts_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unknown_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unverified_details_not_submitted_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unverified_no_card_payments_capability_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unverified_no_tax_reporting_capability_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unverified_no_transfers_capability_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unverified_requirements_currently_due_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unverified_requirements_past_due_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unverified_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def verified(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def verified_verification_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Billing::StripeConnect::Account } }

    sig { returns(T::Array[::Billing::StripeConnect::Account]) }
    def to_a; end

    sig { returns(T::Array[::Billing::StripeConnect::Account]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Billing::StripeConnect::Account } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Billing::StripeConnect::Account } }

    sig do
      params(
        records: T.any(::Billing::StripeConnect::Account, T::Enumerable[T.any(::Billing::StripeConnect::Account, T::Enumerable[::Billing::StripeConnect::Account])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Billing::StripeConnect::Account, T::Enumerable[T.any(::Billing::StripeConnect::Account, T::Enumerable[::Billing::StripeConnect::Account])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Billing::StripeConnect::Account, T::Enumerable[T.any(::Billing::StripeConnect::Account, T::Enumerable[::Billing::StripeConnect::Account])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Billing::StripeConnect::Account]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Billing::StripeConnect::Account, T::Enumerable[T.any(::Billing::StripeConnect::Account, T::Enumerable[::Billing::StripeConnect::Account])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Billing::StripeConnect::Account, T::Enumerable[T.any(::Billing::StripeConnect::Account, T::Enumerable[::Billing::StripeConnect::Account])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Billing::StripeConnect::Account, T::Enumerable[T.any(::Billing::StripeConnect::Account, T::Enumerable[::Billing::StripeConnect::Account])])
      ).returns(T::Array[::Billing::StripeConnect::Account])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Billing::StripeConnect::Account]) }
    def target; end

    sig { returns(T::Array[::Billing::StripeConnect::Account]) }
    def to_a; end

    sig { returns(T::Array[::Billing::StripeConnect::Account]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Billing::StripeConnect::Account } }

    sig { returns(T::Array[::Billing::StripeConnect::Account]) }
    def to_a; end

    sig { returns(T::Array[::Billing::StripeConnect::Account]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Billing::StripeConnect::Account } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

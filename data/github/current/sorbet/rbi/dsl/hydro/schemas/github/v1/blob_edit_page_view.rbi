# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::BlobEditPageView`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::BlobEditPageView`.

class Hydro::Schemas::Github::V1::BlobEditPageView
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      branch: T.nilable(String),
      can_commit_to_branch: T.nilable(T::Boolean),
      file_extension: T.nilable(String),
      path: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      target_repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)
    ).void
  end
  def initialize(actor: nil, branch: nil, can_commit_to_branch: nil, file_extension: nil, path: nil, repository: nil, request_context: nil, target_repository: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def branch; end

  sig { params(value: String).void }
  def branch=(value); end

  sig { returns(T::Boolean) }
  def can_commit_to_branch; end

  sig { params(value: T::Boolean).void }
  def can_commit_to_branch=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_branch; end

  sig { void }
  def clear_can_commit_to_branch; end

  sig { void }
  def clear_file_extension; end

  sig { void }
  def clear_path; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_target_repository; end

  sig { returns(String) }
  def file_extension; end

  sig { params(value: String).void }
  def file_extension=(value); end

  sig { returns(String) }
  def path; end

  sig { params(value: String).void }
  def path=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def target_repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def target_repository=(value); end
end

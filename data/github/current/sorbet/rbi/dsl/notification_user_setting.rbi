# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `NotificationUserSetting`.
# Please instead update this file by running `bin/tapioca dsl NotificationUserSetting`.

class NotificationUserSetting
  include GeneratedAsyncReflectionAssociations
  include GeneratedColumnCoderAccessors
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::NotificationUserSetting).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::NotificationUserSetting).void)
      ).returns(::NotificationUserSetting)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::NotificationUserSetting).void)
      ).returns(::NotificationUserSetting)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::NotificationUserSetting).void)
      ).returns(::NotificationUserSetting)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::NotificationUserSetting).void)
      ).returns(::NotificationUserSetting)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::NotificationUserSetting).void)
      ).returns(::NotificationUserSetting)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::NotificationUserSetting]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::NotificationUserSetting)) }
    def fifth; end

    sig { returns(::NotificationUserSetting) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::NotificationUserSetting)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::NotificationUserSetting) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::NotificationUserSetting).void)
      ).returns(T.nilable(T::Enumerator[::NotificationUserSetting]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::NotificationUserSetting]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::NotificationUserSetting]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::NotificationUserSetting).void)
      ).returns(::NotificationUserSetting)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::NotificationUserSetting).void)
      ).returns(::NotificationUserSetting)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::NotificationUserSetting).void)
      ).returns(::NotificationUserSetting)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::NotificationUserSetting)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::NotificationUserSetting) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::NotificationUserSetting) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::NotificationUserSetting) }
    def first!; end

    sig { returns(T.nilable(::NotificationUserSetting)) }
    def forty_two; end

    sig { returns(::NotificationUserSetting) }
    def forty_two!; end

    sig { returns(T.nilable(::NotificationUserSetting)) }
    def fourth; end

    sig { returns(::NotificationUserSetting) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::NotificationUserSetting) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::NotificationUserSetting).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::NotificationUserSetting).void)
      ).returns(::NotificationUserSetting)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::NotificationUserSetting).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::NotificationUserSetting).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::NotificationUserSetting)) }
    def second; end

    sig { returns(::NotificationUserSetting) }
    def second!; end

    sig { returns(T.nilable(::NotificationUserSetting)) }
    def second_to_last; end

    sig { returns(::NotificationUserSetting) }
    def second_to_last!; end

    sig { returns(::NotificationUserSetting) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::NotificationUserSetting) }
    def take!; end

    sig { returns(T.nilable(::NotificationUserSetting)) }
    def third; end

    sig { returns(::NotificationUserSetting) }
    def third!; end

    sig { returns(T.nilable(::NotificationUserSetting)) }
    def third_to_last; end

    sig { returns(::NotificationUserSetting) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_user; end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def auto_subscribe; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def auto_subscribe=(value); end

    sig { returns(T::Boolean) }
    def auto_subscribe?; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_subscribe_before_last_save; end

    sig { returns(T.untyped) }
    def auto_subscribe_before_type_cast; end

    sig { returns(T::Boolean) }
    def auto_subscribe_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_subscribe_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_subscribe_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def auto_subscribe_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_subscribe_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_subscribe_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def auto_subscribe_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_subscribe_previously_was; end

    sig { returns(T::Boolean) }
    def auto_subscribe_teams; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def auto_subscribe_teams=(value); end

    sig { returns(T::Boolean) }
    def auto_subscribe_teams?; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_subscribe_teams_before_last_save; end

    sig { returns(T.untyped) }
    def auto_subscribe_teams_before_type_cast; end

    sig { returns(T::Boolean) }
    def auto_subscribe_teams_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_subscribe_teams_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_subscribe_teams_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def auto_subscribe_teams_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_subscribe_teams_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_subscribe_teams_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def auto_subscribe_teams_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_subscribe_teams_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_subscribe_teams_was; end

    sig { void }
    def auto_subscribe_teams_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_subscribe_was; end

    sig { void }
    def auto_subscribe_will_change!; end

    sig { returns(T::Boolean) }
    def continuous_integration_email; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def continuous_integration_email=(value); end

    sig { returns(T::Boolean) }
    def continuous_integration_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def continuous_integration_email_before_last_save; end

    sig { returns(T.untyped) }
    def continuous_integration_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def continuous_integration_email_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def continuous_integration_email_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def continuous_integration_email_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def continuous_integration_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def continuous_integration_email_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def continuous_integration_email_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def continuous_integration_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def continuous_integration_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def continuous_integration_email_was; end

    sig { void }
    def continuous_integration_email_will_change!; end

    sig { returns(T::Boolean) }
    def continuous_integration_failures_only; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def continuous_integration_failures_only=(value); end

    sig { returns(T::Boolean) }
    def continuous_integration_failures_only?; end

    sig { returns(T.nilable(T::Boolean)) }
    def continuous_integration_failures_only_before_last_save; end

    sig { returns(T.untyped) }
    def continuous_integration_failures_only_before_type_cast; end

    sig { returns(T::Boolean) }
    def continuous_integration_failures_only_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def continuous_integration_failures_only_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def continuous_integration_failures_only_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def continuous_integration_failures_only_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def continuous_integration_failures_only_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def continuous_integration_failures_only_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def continuous_integration_failures_only_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def continuous_integration_failures_only_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def continuous_integration_failures_only_was; end

    sig { void }
    def continuous_integration_failures_only_will_change!; end

    sig { returns(T::Boolean) }
    def continuous_integration_web; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def continuous_integration_web=(value); end

    sig { returns(T::Boolean) }
    def continuous_integration_web?; end

    sig { returns(T.nilable(T::Boolean)) }
    def continuous_integration_web_before_last_save; end

    sig { returns(T.untyped) }
    def continuous_integration_web_before_type_cast; end

    sig { returns(T::Boolean) }
    def continuous_integration_web_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def continuous_integration_web_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def continuous_integration_web_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def continuous_integration_web_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def continuous_integration_web_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def continuous_integration_web_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def continuous_integration_web_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def continuous_integration_web_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def continuous_integration_web_was; end

    sig { void }
    def continuous_integration_web_will_change!; end

    sig { returns(T::Boolean) }
    def direct_mention_mobile_push; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def direct_mention_mobile_push=(value); end

    sig { returns(T::Boolean) }
    def direct_mention_mobile_push?; end

    sig { returns(T.nilable(T::Boolean)) }
    def direct_mention_mobile_push_before_last_save; end

    sig { returns(T.untyped) }
    def direct_mention_mobile_push_before_type_cast; end

    sig { returns(T::Boolean) }
    def direct_mention_mobile_push_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def direct_mention_mobile_push_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def direct_mention_mobile_push_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def direct_mention_mobile_push_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def direct_mention_mobile_push_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def direct_mention_mobile_push_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def direct_mention_mobile_push_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def direct_mention_mobile_push_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def direct_mention_mobile_push_was; end

    sig { void }
    def direct_mention_mobile_push_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Boolean) }
    def notify_comment_email; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def notify_comment_email=(value); end

    sig { returns(T::Boolean) }
    def notify_comment_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_comment_email_before_last_save; end

    sig { returns(T.untyped) }
    def notify_comment_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def notify_comment_email_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def notify_comment_email_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def notify_comment_email_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def notify_comment_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_comment_email_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def notify_comment_email_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def notify_comment_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_comment_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_comment_email_was; end

    sig { void }
    def notify_comment_email_will_change!; end

    sig { returns(T::Boolean) }
    def notify_own_via_email; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def notify_own_via_email=(value); end

    sig { returns(T::Boolean) }
    def notify_own_via_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_own_via_email_before_last_save; end

    sig { returns(T.untyped) }
    def notify_own_via_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def notify_own_via_email_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def notify_own_via_email_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def notify_own_via_email_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def notify_own_via_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_own_via_email_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def notify_own_via_email_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def notify_own_via_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_own_via_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_own_via_email_was; end

    sig { void }
    def notify_own_via_email_will_change!; end

    sig { returns(T::Boolean) }
    def notify_pull_request_push_email; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def notify_pull_request_push_email=(value); end

    sig { returns(T::Boolean) }
    def notify_pull_request_push_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_pull_request_push_email_before_last_save; end

    sig { returns(T.untyped) }
    def notify_pull_request_push_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def notify_pull_request_push_email_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def notify_pull_request_push_email_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def notify_pull_request_push_email_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def notify_pull_request_push_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_pull_request_push_email_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def notify_pull_request_push_email_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def notify_pull_request_push_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_pull_request_push_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_pull_request_push_email_was; end

    sig { void }
    def notify_pull_request_push_email_will_change!; end

    sig { returns(T::Boolean) }
    def notify_pull_request_review_email; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def notify_pull_request_review_email=(value); end

    sig { returns(T::Boolean) }
    def notify_pull_request_review_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_pull_request_review_email_before_last_save; end

    sig { returns(T.untyped) }
    def notify_pull_request_review_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def notify_pull_request_review_email_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def notify_pull_request_review_email_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def notify_pull_request_review_email_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def notify_pull_request_review_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_pull_request_review_email_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def notify_pull_request_review_email_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def notify_pull_request_review_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_pull_request_review_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def notify_pull_request_review_email_was; end

    sig { void }
    def notify_pull_request_review_email_will_change!; end

    sig { returns(T::Boolean) }
    def org_deploy_key_email; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def org_deploy_key_email=(value); end

    sig { returns(T::Boolean) }
    def org_deploy_key_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def org_deploy_key_email_before_last_save; end

    sig { returns(T.untyped) }
    def org_deploy_key_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def org_deploy_key_email_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def org_deploy_key_email_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def org_deploy_key_email_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def org_deploy_key_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def org_deploy_key_email_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def org_deploy_key_email_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def org_deploy_key_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def org_deploy_key_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def org_deploy_key_email_was; end

    sig { void }
    def org_deploy_key_email_will_change!; end

    sig { returns(T::Boolean) }
    def participating_email; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def participating_email=(value); end

    sig { returns(T::Boolean) }
    def participating_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def participating_email_before_last_save; end

    sig { returns(T.untyped) }
    def participating_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def participating_email_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def participating_email_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def participating_email_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def participating_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def participating_email_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def participating_email_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def participating_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def participating_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def participating_email_was; end

    sig { void }
    def participating_email_will_change!; end

    sig { returns(T::Boolean) }
    def participating_web; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def participating_web=(value); end

    sig { returns(T::Boolean) }
    def participating_web?; end

    sig { returns(T.nilable(T::Boolean)) }
    def participating_web_before_last_save; end

    sig { returns(T.untyped) }
    def participating_web_before_type_cast; end

    sig { returns(T::Boolean) }
    def participating_web_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def participating_web_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def participating_web_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def participating_web_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def participating_web_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def participating_web_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def participating_web_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def participating_web_previously_was; end

    sig { returns(T::Boolean) }
    def participating_web_push; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def participating_web_push=(value); end

    sig { returns(T::Boolean) }
    def participating_web_push?; end

    sig { returns(T.nilable(T::Boolean)) }
    def participating_web_push_before_last_save; end

    sig { returns(T.untyped) }
    def participating_web_push_before_type_cast; end

    sig { returns(T::Boolean) }
    def participating_web_push_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def participating_web_push_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def participating_web_push_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def participating_web_push_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def participating_web_push_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def participating_web_push_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def participating_web_push_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def participating_web_push_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def participating_web_push_was; end

    sig { void }
    def participating_web_push_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def participating_web_was; end

    sig { void }
    def participating_web_will_change!; end

    sig { returns(T.untyped) }
    def raw_data; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def raw_data=(value); end

    sig { returns(T::Boolean) }
    def raw_data?; end

    sig { returns(T.untyped) }
    def raw_data_before_last_save; end

    sig { returns(T.untyped) }
    def raw_data_before_type_cast; end

    sig { returns(T::Boolean) }
    def raw_data_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def raw_data_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def raw_data_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def raw_data_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def raw_data_previously_was; end

    sig { returns(T.untyped) }
    def raw_data_was; end

    sig { void }
    def raw_data_will_change!; end

    sig { void }
    def restore_auto_subscribe!; end

    sig { void }
    def restore_auto_subscribe_teams!; end

    sig { void }
    def restore_continuous_integration_email!; end

    sig { void }
    def restore_continuous_integration_failures_only!; end

    sig { void }
    def restore_continuous_integration_web!; end

    sig { void }
    def restore_direct_mention_mobile_push!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_notify_comment_email!; end

    sig { void }
    def restore_notify_own_via_email!; end

    sig { void }
    def restore_notify_pull_request_push_email!; end

    sig { void }
    def restore_notify_pull_request_review_email!; end

    sig { void }
    def restore_org_deploy_key_email!; end

    sig { void }
    def restore_participating_email!; end

    sig { void }
    def restore_participating_web!; end

    sig { void }
    def restore_participating_web_push!; end

    sig { void }
    def restore_raw_data!; end

    sig { void }
    def restore_subscribed_email!; end

    sig { void }
    def restore_subscribed_web!; end

    sig { void }
    def restore_vulnerability_cli!; end

    sig { void }
    def restore_vulnerability_email!; end

    sig { void }
    def restore_vulnerability_web!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_auto_subscribe; end

    sig { returns(T::Boolean) }
    def saved_change_to_auto_subscribe?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_auto_subscribe_teams; end

    sig { returns(T::Boolean) }
    def saved_change_to_auto_subscribe_teams?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_continuous_integration_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_continuous_integration_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_continuous_integration_failures_only; end

    sig { returns(T::Boolean) }
    def saved_change_to_continuous_integration_failures_only?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_continuous_integration_web; end

    sig { returns(T::Boolean) }
    def saved_change_to_continuous_integration_web?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_direct_mention_mobile_push; end

    sig { returns(T::Boolean) }
    def saved_change_to_direct_mention_mobile_push?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_notify_comment_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_notify_comment_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_notify_own_via_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_notify_own_via_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_notify_pull_request_push_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_notify_pull_request_push_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_notify_pull_request_review_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_notify_pull_request_review_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_org_deploy_key_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_org_deploy_key_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_participating_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_participating_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_participating_web; end

    sig { returns(T::Boolean) }
    def saved_change_to_participating_web?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_participating_web_push; end

    sig { returns(T::Boolean) }
    def saved_change_to_participating_web_push?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_raw_data; end

    sig { returns(T::Boolean) }
    def saved_change_to_raw_data?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_subscribed_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_subscribed_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_subscribed_web; end

    sig { returns(T::Boolean) }
    def saved_change_to_subscribed_web?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_vulnerability_cli; end

    sig { returns(T::Boolean) }
    def saved_change_to_vulnerability_cli?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_vulnerability_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_vulnerability_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_vulnerability_web; end

    sig { returns(T::Boolean) }
    def saved_change_to_vulnerability_web?; end

    sig { returns(T::Boolean) }
    def subscribed_email; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def subscribed_email=(value); end

    sig { returns(T::Boolean) }
    def subscribed_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def subscribed_email_before_last_save; end

    sig { returns(T.untyped) }
    def subscribed_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def subscribed_email_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def subscribed_email_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def subscribed_email_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def subscribed_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def subscribed_email_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def subscribed_email_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def subscribed_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def subscribed_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def subscribed_email_was; end

    sig { void }
    def subscribed_email_will_change!; end

    sig { returns(T::Boolean) }
    def subscribed_web; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def subscribed_web=(value); end

    sig { returns(T::Boolean) }
    def subscribed_web?; end

    sig { returns(T.nilable(T::Boolean)) }
    def subscribed_web_before_last_save; end

    sig { returns(T.untyped) }
    def subscribed_web_before_type_cast; end

    sig { returns(T::Boolean) }
    def subscribed_web_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def subscribed_web_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def subscribed_web_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def subscribed_web_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def subscribed_web_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def subscribed_web_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def subscribed_web_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def subscribed_web_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def subscribed_web_was; end

    sig { void }
    def subscribed_web_will_change!; end

    sig { returns(T::Boolean) }
    def vulnerability_cli; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def vulnerability_cli=(value); end

    sig { returns(T::Boolean) }
    def vulnerability_cli?; end

    sig { returns(T.nilable(T::Boolean)) }
    def vulnerability_cli_before_last_save; end

    sig { returns(T.untyped) }
    def vulnerability_cli_before_type_cast; end

    sig { returns(T::Boolean) }
    def vulnerability_cli_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def vulnerability_cli_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def vulnerability_cli_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def vulnerability_cli_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def vulnerability_cli_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def vulnerability_cli_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def vulnerability_cli_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def vulnerability_cli_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def vulnerability_cli_was; end

    sig { void }
    def vulnerability_cli_will_change!; end

    sig { returns(T::Boolean) }
    def vulnerability_email; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def vulnerability_email=(value); end

    sig { returns(T::Boolean) }
    def vulnerability_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def vulnerability_email_before_last_save; end

    sig { returns(T.untyped) }
    def vulnerability_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def vulnerability_email_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def vulnerability_email_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def vulnerability_email_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def vulnerability_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def vulnerability_email_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def vulnerability_email_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def vulnerability_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def vulnerability_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def vulnerability_email_was; end

    sig { void }
    def vulnerability_email_will_change!; end

    sig { returns(T::Boolean) }
    def vulnerability_web; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def vulnerability_web=(value); end

    sig { returns(T::Boolean) }
    def vulnerability_web?; end

    sig { returns(T.nilable(T::Boolean)) }
    def vulnerability_web_before_last_save; end

    sig { returns(T.untyped) }
    def vulnerability_web_before_type_cast; end

    sig { returns(T::Boolean) }
    def vulnerability_web_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def vulnerability_web_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def vulnerability_web_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def vulnerability_web_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def vulnerability_web_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def vulnerability_web_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def vulnerability_web_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def vulnerability_web_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def vulnerability_web_was; end

    sig { void }
    def vulnerability_web_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_auto_subscribe?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_auto_subscribe_teams?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_continuous_integration_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_continuous_integration_failures_only?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_continuous_integration_web?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_direct_mention_mobile_push?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notify_comment_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notify_own_via_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notify_pull_request_push_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notify_pull_request_review_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_org_deploy_key_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_participating_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_participating_web?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_participating_web_push?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_raw_data?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subscribed_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subscribed_web?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vulnerability_cli?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vulnerability_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vulnerability_web?; end
  end

  module GeneratedColumnCoderAccessors
    sig { returns(T.untyped) }
    def emails; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def emails=(value); end

    sig { returns(T::Boolean) }
    def emails?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::NotificationUserSetting } }

    sig { returns(T::Array[::NotificationUserSetting]) }
    def to_a; end

    sig { returns(T::Array[::NotificationUserSetting]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::NotificationUserSetting } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::NotificationUserSetting } }

    sig do
      params(
        records: T.any(::NotificationUserSetting, T::Enumerable[T.any(::NotificationUserSetting, T::Enumerable[::NotificationUserSetting])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::NotificationUserSetting, T::Enumerable[T.any(::NotificationUserSetting, T::Enumerable[::NotificationUserSetting])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::NotificationUserSetting, T::Enumerable[T.any(::NotificationUserSetting, T::Enumerable[::NotificationUserSetting])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::NotificationUserSetting]) }
    def load_target; end

    sig do
      params(
        records: T.any(::NotificationUserSetting, T::Enumerable[T.any(::NotificationUserSetting, T::Enumerable[::NotificationUserSetting])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::NotificationUserSetting, T::Enumerable[T.any(::NotificationUserSetting, T::Enumerable[::NotificationUserSetting])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::NotificationUserSetting, T::Enumerable[T.any(::NotificationUserSetting, T::Enumerable[::NotificationUserSetting])])
      ).returns(T::Array[::NotificationUserSetting])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::NotificationUserSetting]) }
    def target; end

    sig { returns(T::Array[::NotificationUserSetting]) }
    def to_a; end

    sig { returns(T::Array[::NotificationUserSetting]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::NotificationUserSetting } }

    sig { returns(T::Array[::NotificationUserSetting]) }
    def to_a; end

    sig { returns(T::Array[::NotificationUserSetting]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::NotificationUserSetting } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Licensing::Repositories::V1::Repository`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Licensing::Repositories::V1::Repository`.

class MonolithTwirp::Licensing::Repositories::V1::Repository
  sig do
    params(
      id: T.nilable(Integer),
      is_active: T.nilable(T::Boolean),
      is_advisory_workspace: T.nilable(T::Boolean),
      is_fork: T.nilable(T::Boolean),
      owner_customer_id: T.nilable(Integer),
      parent_id: T.nilable(Integer),
      visibility: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(id: nil, is_active: nil, is_advisory_workspace: nil, is_fork: nil, owner_customer_id: nil, parent_id: nil, visibility: nil); end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_is_active; end

  sig { void }
  def clear_is_advisory_workspace; end

  sig { void }
  def clear_is_fork; end

  sig { void }
  def clear_owner_customer_id; end

  sig { void }
  def clear_parent_id; end

  sig { void }
  def clear_visibility; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def is_active; end

  sig { params(value: T::Boolean).void }
  def is_active=(value); end

  sig { returns(T::Boolean) }
  def is_advisory_workspace; end

  sig { params(value: T::Boolean).void }
  def is_advisory_workspace=(value); end

  sig { returns(T::Boolean) }
  def is_fork; end

  sig { params(value: T::Boolean).void }
  def is_fork=(value); end

  sig { returns(Integer) }
  def owner_customer_id; end

  sig { params(value: Integer).void }
  def owner_customer_id=(value); end

  sig { returns(Integer) }
  def parent_id; end

  sig { params(value: Integer).void }
  def parent_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def visibility; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def visibility=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `actionview_precompiler` gem.
# Please instead update this file by running `bin/tapioca gem actionview_precompiler`.

# source://actionview_precompiler//lib/actionview_precompiler/version.rb#1
module ActionviewPrecompiler
  class << self
    # source://actionview_precompiler//lib/actionview_precompiler.rb#21
    def precompile(verbose: T.unsafe(nil)); end
  end
end

# source://actionview_precompiler//lib/actionview_precompiler/ast_parser.rb#21
ActionviewPrecompiler::ASTParser = ActionviewPrecompiler::PrismASTParser

# source://actionview_precompiler//lib/actionview_precompiler/controller_parser.rb#2
class ActionviewPrecompiler::ControllerParser
  # @return [ControllerParser] a new instance of ControllerParser
  #
  # source://actionview_precompiler//lib/actionview_precompiler/controller_parser.rb#3
  def initialize(filename); end

  # source://actionview_precompiler//lib/actionview_precompiler/controller_parser.rb#7
  def render_calls; end
end

# source://actionview_precompiler//lib/actionview_precompiler/controller_scanner.rb#2
class ActionviewPrecompiler::ControllerScanner
  # @return [ControllerScanner] a new instance of ControllerScanner
  #
  # source://actionview_precompiler//lib/actionview_precompiler/controller_scanner.rb#5
  def initialize(controller_dir); end

  # Returns the value of attribute controller_dir.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/controller_scanner.rb#3
  def controller_dir; end

  # source://actionview_precompiler//lib/actionview_precompiler/controller_scanner.rb#9
  def template_renders; end

  private

  # source://actionview_precompiler//lib/actionview_precompiler/controller_scanner.rb#39
  def each_controller; end
end

# source://actionview_precompiler//lib/actionview_precompiler.rb#14
class ActionviewPrecompiler::Error < ::StandardError; end

# Allow overriding from ActionView default handlers if necessary
#
# source://actionview_precompiler//lib/actionview_precompiler.rb#17
ActionviewPrecompiler::HANDLERS_FOR_EXTENSION = T.let(T.unsafe(nil), Hash)

# source://actionview_precompiler//lib/actionview_precompiler/helper_parser.rb#2
class ActionviewPrecompiler::HelperParser
  # @return [HelperParser] a new instance of HelperParser
  #
  # source://actionview_precompiler//lib/actionview_precompiler/helper_parser.rb#3
  def initialize(filename); end

  # source://actionview_precompiler//lib/actionview_precompiler/helper_parser.rb#7
  def render_calls; end
end

# source://actionview_precompiler//lib/actionview_precompiler/helper_scanner.rb#2
class ActionviewPrecompiler::HelperScanner
  # @return [HelperScanner] a new instance of HelperScanner
  #
  # source://actionview_precompiler//lib/actionview_precompiler/helper_scanner.rb#3
  def initialize(dir); end

  # source://actionview_precompiler//lib/actionview_precompiler/helper_scanner.rb#7
  def template_renders; end

  private

  # source://actionview_precompiler//lib/actionview_precompiler/helper_scanner.rb#26
  def each_helper; end
end

# source://actionview_precompiler//lib/actionview_precompiler/parsed_filename.rb#2
class ActionviewPrecompiler::ParsedFilename
  # @return [ParsedFilename] a new instance of ParsedFilename
  #
  # source://actionview_precompiler//lib/actionview_precompiler/parsed_filename.rb#5
  def initialize(path); end

  # Returns the value of attribute action.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/parsed_filename.rb#3
  def action; end

  # Returns the value of attribute details.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/parsed_filename.rb#3
  def details; end

  # Returns the value of attribute options.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/parsed_filename.rb#3
  def options; end

  # source://actionview_precompiler//lib/actionview_precompiler/parsed_filename.rb#37
  def parse_template_path(path); end

  # @return [Boolean]
  #
  # source://actionview_precompiler//lib/actionview_precompiler/parsed_filename.rb#15
  def partial?; end

  # Returns the value of attribute path.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/parsed_filename.rb#3
  def path; end

  # source://actionview_precompiler//lib/actionview_precompiler/parsed_filename.rb#19
  def path_regex; end

  # Returns the value of attribute prefix.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/parsed_filename.rb#3
  def prefix; end
end

# source://actionview_precompiler//lib/actionview_precompiler/precompiler.rb#7
class ActionviewPrecompiler::Precompiler
  # @return [Precompiler] a new instance of Precompiler
  #
  # source://actionview_precompiler//lib/actionview_precompiler/precompiler.rb#8
  def initialize(verbose: T.unsafe(nil)); end

  # source://actionview_precompiler//lib/actionview_precompiler/precompiler.rb#28
  def add_template(virtual_path, locals = T.unsafe(nil)); end

  # source://actionview_precompiler//lib/actionview_precompiler/precompiler.rb#33
  def run; end

  # source://actionview_precompiler//lib/actionview_precompiler/precompiler.rb#20
  def scan_controller_dir(controller_dir); end

  # source://actionview_precompiler//lib/actionview_precompiler/precompiler.rb#24
  def scan_helper_dir(controller_dir); end

  # source://actionview_precompiler//lib/actionview_precompiler/precompiler.rb#16
  def scan_view_dir(view_dir); end

  # source://actionview_precompiler//lib/actionview_precompiler/precompiler.rb#47
  def template_renders; end

  private

  # source://actionview_precompiler//lib/actionview_precompiler/precompiler.rb#65
  def debug(msg); end
end

# source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#6
module ActionviewPrecompiler::PrismASTParser
  class << self
    # Main entrypoint into this AST parser variant. It's responsible for
    # returning a hash of render calls. The keys are the method names, and the
    # values are arrays of call objects.
    #
    # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#143
    def parse_render_nodes(code); end
  end
end

# This error is raised whenever an assumption we made wasn't met by the AST.
#
# source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#8
class ActionviewPrecompiler::PrismASTParser::CompilationError < ::StandardError; end

# Each call object is responsible for holding a list of arguments and should
# respond to a single #arguments_node method that returns an array of
# arguments.
#
# source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#14
class ActionviewPrecompiler::PrismASTParser::RenderCall
  # @return [RenderCall] a new instance of RenderCall
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#17
  def initialize(argument_nodes); end

  # Returns the value of attribute argument_nodes.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#15
  def argument_nodes; end
end

# This class represents a node in the tree that is returned by the parser
# that corresponds to an argument to a render call, or a child of one of
# those nodes.
#
# source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#25
class ActionviewPrecompiler::PrismASTParser::RenderNode
  # @return [RenderNode] a new instance of RenderNode
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#28
  def initialize(node); end

  # @return [Boolean]
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#32
  def call?; end

  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#62
  def call_method_name; end

  # @return [Boolean]
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#36
  def hash?; end

  # Returns the value of attribute node.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#26
  def node; end

  # @return [Boolean]
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#40
  def string?; end

  # @return [Boolean]
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#44
  def symbol?; end

  # Converts the node into a hash where the keys and values are nodes. This
  # will raise an error if the hash doesn't match the format we expect or
  # if the hash contains any splats.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#79
  def to_hash; end

  # Converts the node into a string value. Only handles plain string
  # content, and will raise an error if the node contains interpolation.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#91
  def to_string; end

  # Converts the node into a symbol value. Only handles labels and plain
  # symbols, and will raise an error if the node contains interpolation.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#101
  def to_symbol; end

  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#66
  def variable_name; end

  # @return [Boolean]
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#48
  def variable_reference?; end

  # @return [Boolean]
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#58
  def vcall?; end
end

# This visitor is responsible for visiting the parsed tree and extracting
# out the render calls. After visiting the tree, the #render_calls method
# will return the hash expected by the #parse_render_nodes method.
#
# source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#113
class ActionviewPrecompiler::PrismASTParser::RenderVisitor < ::Prism::Visitor
  # @return [RenderVisitor] a new instance of RenderVisitor
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#118
  def initialize; end

  # Returns the value of attribute render_calls.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#116
  def render_calls; end

  # source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#122
  def visit_call_node(node); end
end

# source://actionview_precompiler//lib/actionview_precompiler/ast_parser/prism.rb#114
ActionviewPrecompiler::PrismASTParser::RenderVisitor::MESSAGE = T.let(T.unsafe(nil), Regexp)

# source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#2
class ActionviewPrecompiler::RenderCall < ::Struct
  # Returns the value of attribute locals_keys
  #
  # @return [Object] the current value of locals_keys
  def locals_keys; end

  # Sets the attribute locals_keys
  #
  # @param value [Object] the value to set the attribute locals_keys to.
  # @return [Object] the newly set value
  def locals_keys=(_); end

  # Returns the value of attribute virtual_path
  #
  # @return [Object] the current value of virtual_path
  def virtual_path; end

  # Sets the attribute virtual_path
  #
  # @param value [Object] the value to set the attribute virtual_path to.
  # @return [Object] the newly set value
  def virtual_path=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#4
class ActionviewPrecompiler::RenderParser
  # @return [RenderParser] a new instance of RenderParser
  #
  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#5
  def initialize(code, parser: T.unsafe(nil), from_controller: T.unsafe(nil)); end

  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#11
  def render_calls; end

  private

  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#213
  def debug(message); end

  # @return [Boolean]
  #
  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#217
  def from_controller?; end

  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#241
  def layout_to_virtual_path(layout_path); end

  # Convert
  #   render("foo", ...)
  # into either
  #   render(template: "foo", ...)
  # or
  #   render(partial: "foo", ...)
  # depending on controller or view context
  #
  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#34
  def normalize_args(string, options_hash); end

  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#82
  def parse_hash(node); end

  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#86
  def parse_hash_to_symbols(node); end

  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#72
  def parse_layout(node); end

  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#52
  def parse_render(node); end

  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#98
  def parse_render_from_options(options_hash); end

  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#203
  def parse_str(node); end

  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#207
  def parse_sym(node); end

  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#233
  def partial_to_virtual_path(render_type, partial_path); end

  # @return [Boolean]
  #
  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#221
  def render_template_with_layout?(render_type, options_hash); end

  # @return [Boolean]
  #
  # source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#227
  def render_template_with_spacer?(options_hash); end
end

# source://actionview_precompiler//lib/actionview_precompiler/render_parser.rb#96
ActionviewPrecompiler::RenderParser::ALL_KNOWN_KEYS = T.let(T.unsafe(nil), Array)

# source://actionview_precompiler//lib/actionview_precompiler/template_file.rb#2
class ActionviewPrecompiler::TemplateFile
  # @return [TemplateFile] a new instance of TemplateFile
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_file.rb#6
  def initialize(fullpath, relative_path); end

  # Returns the value of attribute action.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_file.rb#4
  def action; end

  # Returns the value of attribute details.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_file.rb#4
  def details; end

  # Returns the value of attribute fullpath.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_file.rb#3
  def fullpath; end

  # @return [Boolean]
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_file.rb#18
  def partial?; end

  # Returns the value of attribute prefix.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_file.rb#4
  def prefix; end

  # Returns the value of attribute relative_path.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_file.rb#3
  def relative_path; end

  # Returns the value of attribute virtual_path.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_file.rb#3
  def virtual_path; end
end

# source://actionview_precompiler//lib/actionview_precompiler/template_loader.rb#2
class ActionviewPrecompiler::TemplateLoader
  # @return [TemplateLoader] a new instance of TemplateLoader
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_loader.rb#5
  def initialize; end

  # source://actionview_precompiler//lib/actionview_precompiler/template_loader.rb#11
  def load_template(virtual_path, locals); end

  private

  # source://actionview_precompiler//lib/actionview_precompiler/template_loader.rb#20
  def find_all_templates(virtual_path, locals); end
end

# source://actionview_precompiler//lib/actionview_precompiler/template_loader.rb#3
ActionviewPrecompiler::TemplateLoader::VIRTUAL_PATH_REGEX = T.let(T.unsafe(nil), Regexp)

# source://actionview_precompiler//lib/actionview_precompiler/template_parser.rb#4
class ActionviewPrecompiler::TemplateParser
  # @return [TemplateParser] a new instance of TemplateParser
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_parser.rb#21
  def initialize(filename); end

  # Returns the value of attribute basename.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_parser.rb#5
  def basename; end

  # Returns the value of attribute filename.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_parser.rb#5
  def filename; end

  # Returns the value of attribute handler.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_parser.rb#5
  def handler; end

  # source://actionview_precompiler//lib/actionview_precompiler/template_parser.rb#28
  def render_calls; end
end

# source://actionview_precompiler//lib/actionview_precompiler/template_parser.rb#7
class ActionviewPrecompiler::TemplateParser::FakeTemplate
  # source://actionview_precompiler//lib/actionview_precompiler/template_parser.rb#16
  def format; end

  # source://actionview_precompiler//lib/actionview_precompiler/template_parser.rb#8
  def identifier; end

  # source://actionview_precompiler//lib/actionview_precompiler/template_parser.rb#12
  def type; end
end

# source://actionview_precompiler//lib/actionview_precompiler/template_scanner.rb#4
class ActionviewPrecompiler::TemplateScanner
  # @return [TemplateScanner] a new instance of TemplateScanner
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_scanner.rb#7
  def initialize(view_dir); end

  # source://actionview_precompiler//lib/actionview_precompiler/template_scanner.rb#11
  def template_renders; end

  # Returns the value of attribute view_dir.
  #
  # source://actionview_precompiler//lib/actionview_precompiler/template_scanner.rb#5
  def view_dir; end

  private

  # source://actionview_precompiler//lib/actionview_precompiler/template_scanner.rb#35
  def each_template; end
end

# source://actionview_precompiler//lib/actionview_precompiler/version.rb#2
ActionviewPrecompiler::VERSION = T.let(T.unsafe(nil), String)

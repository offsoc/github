<%# erblint:counter DeprecatedComponentsCounter 1 %>
<%# erblint:counter DeprecatedComponentsCounter 1 %>
<% slack_channel_link = "https://github.slack.com/archives/C017CT2GN30" %>
<% page_info title: "#{organization.name} - Security center" %>

<%= render Primer::Beta::Subhead.new do |component| %>
  <% component.with_heading(tag: :h2) do %>Resync Security Center Organization Data<% end %>
<% end %>

<%= render(Primer::Beta::Flash.new(scheme: :warning, mt: 3, test_selector: "organization-security-center-resync-warning")) do %>
    <p>Please let <%= safe_link_to "#security-overview", slack_channel_link, target: "_blank" %> know why you're resync'ing so we can work to fix any underlying issues.</p>
    <p>These buttons are safe to trigger, and the jobs should only take a few minutes to complete.</p>
<% end %>

<%= render(Primer::Beta::BorderBox.new(padding: :condensed, mb: 3, test_selector: "update-job")) do |component| %>
  <% component.with_body(p: 2, display: :flex, justify_content: :space_between) do %>
    <%= render(Primer::Box.new) do %>
      <%= render(Primer::Beta::Heading.new(tag: :h4)) { "Trigger Reconciliation job" } %>
      <p>Triggers the ReconciliationJob on the organization for all features.</p>
    <% end %>
    <%= render(Primer::Box.new) do %>
      <%= form_tag stafftools_user_security_center_reconciliation_job_path(organization), method: :post do %>
        <%= render Primer::Beta::Button.new(type: :submit) do %>Run reconciliation job<% end %>
      <% end %>
    <% end %>
  <% end %>
<% end %>

<%= render(Primer::Beta::BorderBox.new(padding: :condensed, mb: 3, test_selector: "organization-security-center-kv-data")) do |component| %>
  <% component.with_header(p: 2) do |h| %>
    <% h.with_title(tag: :h3) { "Reconciliation Cache" } %>
  <% end %>

  <% component.with_body(p: 0) do %>
    <table class="site-admin-table mb-0 border-0">
      <tr>
        <th>Key</th>
        <td>
          <%= render(Primer::Box.new(test_selector: "reconciliation_cache_key")) { reconciliation_cache[:key] } %>
        </td>
      </tr>
      <tr>
        <th>Expires</th>
        <td>
          <%= render(Primer::Box.new(test_selector: "reconciliation_cache_ttl")) { reconciliation_cache[:ttl]&.to_s } %>
        </td>
      </tr>
    </table>
  <% end %>
<% end %>

<%= render(Primer::Beta::BorderBox.new(padding: :condensed, mb: 3, test_selector: "code-scanning-data")) do |component| %>
  <% component.with_header(p: 2) do |h| %>
    <% h.with_title(tag: :h3) { "Code scanning service alert counts" } %>
  <% end %>

  <% component.with_body(p: 0) do %>
    <% if SecurityCenter::FeatureFlagHelper.fetch_stafftool_alert_count_async?(organization) %>
      <include-fragment src="<%= stafftools_user_security_center_code_scanning_alert_counts_path(organization) %>">
        <div class="text-center" data-hide-on-error>
          <%= render Primer::Beta::Spinner.new(aria: { label: "Loading" }) %>
        </div>
        <div class="text-center" data-show-on-error hidden>
          Something went wrong.
        </div>
      </include-fragment>
    <% else %>
      <table class="site-admin-table mb-0 border-0">
        <thead>
          <tr>
            <th>Total</th>
            <th>Open (Service)</th>
            <th>Open (Security Center)</th>
            <th>Closed</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td <%= test_selector('code-scanning-total-alert-count') %>><%= alert_counts[:code_scanning][:total] %></td>
            <td <%= test_selector('code-scanning-open-alert-count') %>><%= alert_counts[:code_scanning][:open] %></td>
            <td <%= test_selector('code-scanning-security-center-open-alert-count') %>><%= alert_counts[:code_scanning][:open_security_center] %></td>
            <td <%= test_selector('code-scanning-close-alert-count') %>><%= alert_counts[:code_scanning][:closed] %></td>
          </tr>
        </tbody>
      </table>
    <% end %>
  <% end %>
<% end %>

<%= render(Primer::Beta::BorderBox.new(padding: :condensed, mb: 3, test_selector: "dependabot-data")) do |component| %>
  <% component.with_header(p: 2) do |h| %>
    <% h.with_title(tag: :h3) { "Dependabot alert counts" } %>
  <% end %>

  <% component.with_body(p: 0) do %>
    <% if SecurityCenter::FeatureFlagHelper.fetch_stafftool_alert_count_async?(organization) %>
      <include-fragment src="<%= stafftools_user_security_center_dependabot_alert_counts_path(organization) %>">
        <div class="text-center" data-hide-on-error>
          <%= render Primer::Beta::Spinner.new(aria: { label: "Loading" }) %>
        </div>
        <div class="text-center" data-show-on-error hidden>
          Something went wrong.
        </div>
      </include-fragment>
    <% else %>
      <table class="site-admin-table mb-0 border-0">
        <thead>
          <tr>
            <th>Total</th>
            <th>Open (Service)</th>
            <th>Open (Security Center)</th>
            <th>Closed</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td <%= test_selector('dependabot-alerts-total-alert-count') %>><%= alert_counts[:dependabot][:total] %></td>
            <td <%= test_selector('dependabot-alerts-open-alert-count') %>><%= alert_counts[:dependabot][:open] %></td>
            <td <%= test_selector('dependabot-alerts-security-center-open-alert-count') %>><%= alert_counts[:dependabot][:open_security_center] %></td>
            <td <%= test_selector('dependabot-alerts-close-alert-count') %>><%= alert_counts[:dependabot][:closed] %></td>
          </tr>
        </tbody>
      </table>
    <% end %>
  <% end %>
<% end %>

<%= render(Primer::Beta::BorderBox.new(padding: :condensed, mb: 3, test_selector: "secret-scanning-data")) do |component| %>
  <% component.with_header(p: 2) do |h| %>
    <% h.with_title(tag: :h3) { "Token scanning service alert counts" } %>
  <% end %>

  <% component.with_body(p: 0) do %>
    <% if SecurityCenter::FeatureFlagHelper.fetch_stafftool_alert_count_async?(organization) %>
      <include-fragment src="<%= stafftools_user_security_center_secret_scanning_alert_counts_path(organization) %>">
        <div class="text-center" data-hide-on-error>
          <%= render Primer::Beta::Spinner.new(aria: { label: "Loading" }) %>
        </div>
        <div class="text-center" data-show-on-error hidden>
          Something went wrong.
        </div>
      </include-fragment>
    <% else %>
      <table class="site-admin-table mb-0 border-0">
        <thead>
          <tr>
            <th>Total</th>
            <th>Open (Service)</th>
            <th>Open (Security Center)</th>
            <th>Closed</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td <%= test_selector('secret-scanning-total-alert-count') %>><%= alert_counts[:secret_scanning][:total] %></td>
            <td <%= test_selector('secret-scanning-open-alert-count') %>><%= alert_counts[:secret_scanning][:open] %></td>
            <td <%= test_selector('secret-scanning-security-center-open-alert-count') %>><%= alert_counts[:secret_scanning][:open_security_center] %></td>
            <td <%= test_selector('secret-scanning-close-alert-count') %>><%= alert_counts[:secret_scanning][:closed] %></td>
          </tr>
        </tbody>
      </table>
    <% end %>
  <% end %>
<% end %>

<%= render(Primer::Beta::BorderBox.new(padding: :condensed, mb: 3, test_selector: "organization-security-manager-teams-data")) do |component| %>
  <% component.with_header(p: 2) do |h| %>
    <% h.with_title(tag: :h3) { "Security Manager Teams" } %>
  <% end %>

  <% if security_manager_teams.any?%>
    <% component.with_body(p: 0) do %>
      <table class="site-admin-table mb-0 border-0">
        <thead>
          <tr>
            <th>Team</th>
            <th>Team repo count</th>
            <th>Org repo count</th>
            <th>Role created</th>
            <th>Team created</th>
            <th>Team updated</th>
          </tr>
        </thead>
        <tbody>
          <%
          team_id_to_created_at = UserRole
            .select(:id, :actor_id, :created_at)
            .where(
              actor_id: security_manager_teams.pluck(:id),
              actor_type: "Team",
              role_id: Role.security_manager_role.id
            )
            .find_each
            .with_object({}) do |user_role, memo|
              memo[user_role.actor_id] = user_role.created_at
            end
          %>

          <% security_manager_teams.each do |team| %>
            <tr>
              <td><%= team.name %></td>
              <td><%= team.repositories_scope.count %></td>
              <td><%= organization.repositories.count %></td>
              <td><%= team_id_to_created_at[team.id] %></td>
              <td><%= team.created_at %></td>
              <td><%= team.updated_at %></td>
            </tr>
          <% end %>
        </tbody>
      </table>
    <% end %>
  <% else %>
    <% component.with_body(p: 2) { "This organization has no Security Manager teams." } %>
  <% end %>
<% end %>

<%= render(Primer::Beta::Subhead.new(hide_border: true, spacious: true)) do |component| %>
  <% component.with_heading(tag: :h2) do %>
    Analytics
    <span class="Subhead-actions f6">
      <% if analytics_data[:eligible?] %>
        <%= primer_octicon(:check, classes: "success") %> Eligible
      <% else %>
        <%= primer_octicon(:x, classes: "error") %> Not eligible
      <% end %>
    </span>
  <% end %>
  <% component.with_description do %>
    Master controls for the purge and initialization of analytics metric data. Please be careful.
  <% end %>
<% end %>

<%= render(Primer::Box.new(display: :flex, mb: 3, style: "gap: 1em")) do %>
  <%= form_tag(stafftools_user_security_center_enqueue_analytics_reconciliation_path(organization), method: :post) do %>
    <%= render(Primer::Beta::Button.new(type: :submit)) do %>
      Reconcile metrics
    <% end %>
  <% end %>

  <%= form_tag(stafftools_user_security_center_initialize_analytics_path(organization), method: :post) do %>
    <%= render(Primer::Beta::Button.new(type: :submit)) do %>
      Initialize metrics
    <% end %>
  <% end %>

  <%= form_tag(stafftools_user_security_center_reset_analytics_path(organization), method: :post) do %>
    <%= render(Primer::Beta::Button.new(scheme: :danger, type: :submit)) do %>
      Reset (delete and initialize) metrics
    <% end %>
  <% end %>
<% end %>

<%= render(Primer::Box.new(display: :flex, flex_wrap: :wrap, style: "gap: 1em")) do %>
  <% analytics_data[:metric_types].each do |detail| %>
    <%= render(Primer::Beta::BorderBox.new(padding: :condensed)) do |component| %>
      <% component.with_header do |h| %>
        <% h.with_title(tag: :h3) { detail[:metric_type].humanize } %>
      <% end %>
      <% component.with_body(border: 0, p: 2) do %>
        <table class="stafftools-table mb-0 border-0">
          <tr>
            <th>Initialized?</th>
            <td>
              <%= detail[:initialized?] %>
              &ndash;
              <%= form_tag(stafftools_user_security_center_initialize_analytics_path, method: :post, class: "d-inline") do %>
                <%= hidden_field_tag :type, detail[:metric_type] %>
                <%= render(Primer::Beta::Button.new(type: :submit, size: :small, scheme: :default)) { "Initialize" } %>
              <% end %>
              <% unless detail.key?(:global_fanout_only) && detail[:global_fanout_only] %>
                <%= form_tag(stafftools_user_security_center_reset_analytics_path, method: :post, class: "d-inline") do %>
                  <%= hidden_field_tag :type, detail[:metric_type] %>
                  <%= render(Primer::Beta::Button.new(type: :submit, size: :small, scheme: :link, color: :danger)) { "Reset data" } %>
                <% end %>
              <% end %>
            </td>
          </tr>
          <% if detail.key?(:revision_count) %>
            <tr>
              <th>Total revisions</th>
              <td><%= number_with_delimiter(detail[:revision_count]) %></td>
            </tr>
          <% end %>
          <tr>
            <th>Current count</th>
            <td><%= number_with_delimiter(detail[:current_count]) %></td>
          </tr>
          <% if detail.key?(:current_open_count) %>
            <tr>
              <th>&nbsp; Open</th>
              <td><%= number_with_delimiter(detail[:current_open_count]) %></td>
            </tr>
          <% end %>
          <% if detail.key?(:current_closed_count) %>
            <tr>
              <th>&nbsp; Closed</th>
              <td><%= number_with_delimiter(detail[:current_closed_count]) %></td>
            </tr>
          <% end %>
          <tr>
            <th>Last reconciled</th>
            <td>
              <%= detail[:last_reconciled] %>
              <% unless detail.key?(:global_fanout_only) && detail[:global_fanout_only] %>
                &ndash;
                <%= form_tag(stafftools_user_security_center_enqueue_analytics_reconciliation_path, method: :post, class: "d-inline") do %>
                  <%= hidden_field_tag :type, detail[:metric_type] %>
                  <%= render(Primer::Beta::Button.new(type: :submit, size: :small, scheme: :default)) { "Enqueue" } %>
                <% end %>
              <% end %>
            </td>
          </tr>
          <tr>
            <th>&nbsp; Locked?</th>
            <td>
              <%= detail[:reconciliation_locked?] %>
              &ndash;
              <%= form_tag(stafftools_user_security_center_clear_analytics_reconciliation_path, method: :post, class: "d-inline") do %>
                <%= hidden_field_tag :type, detail[:metric_type] %>
                <%= render(Primer::Beta::Button.new(type: :submit, size: :small, scheme: :link, color: :danger)) { "Clear lock" } %>
              <% end %>
            </td>
          </tr>
          <tr>
            <th>&nbsp; Expires</th>
            <td><%= detail[:reconciliation_lock_expiry] %></td>
          </tr>
        </table>
      <% end %>
    <% end %>
  <% end %>
<% end %>

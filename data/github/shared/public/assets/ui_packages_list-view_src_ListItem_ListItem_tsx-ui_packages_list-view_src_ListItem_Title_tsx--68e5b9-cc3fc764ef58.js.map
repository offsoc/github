{"version":3,"file":"ui_packages_list-view_src_ListItem_ListItem_tsx-ui_packages_list-view_src_ListItem_Title_tsx--68e5b9-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/action-bar/src/ActionBarContentContext.tsx","ui/packages/action-bar/src/ActionBarRefContext.tsx","ui/packages/action-bar/src/utils.ts","ui/packages/action-bar/src/ActionBarResizeContext.tsx","ui/packages/action-bar/src/OverflowMenu.tsx","ui/packages/action-bar/src/VisibleItem.tsx","ui/packages/action-bar/src/VisibleItems.tsx","ui/packages/action-bar/src/VisibleAndOverflowContainer.tsx","ui/packages/action-bar/src/ActionBar.tsx","ui/packages/list-view/src/constants.ts","ui/packages/list-view/src/hooks/use-next-header-tag.ts","ui/packages/test-id-props/test-id-props.ts","ui/packages/list-view/src/ListItem/ActionBar.module.css","ui/packages/list-view/src/ListItem/ActionBar.tsx","ui/packages/list-view/src/ListItem/DescriptionContext.tsx","ui/packages/list-view/src/ListItem/ActionsContext.tsx","ui/packages/list-view/src/ListItem/LeadingBadgeContext.tsx","ui/packages/list-view/src/ListItem/ListItem.module.css","ui/packages/list-view/src/ListItem/MetadataContainer.module.css","ui/packages/list-view/src/ListItem/MetadataContainer.tsx","ui/packages/list-view/src/ListItem/ListItem.tsx","ui/packages/list-view/src/ListItem/NewActivityContext.tsx","ui/packages/list-view/src/ListItem/SelectionContext.tsx","ui/packages/list-view/src/ListItem/StatusContext.tsx","ui/packages/list-view/src/ListItem/TitleHeader.tsx","ui/packages/list-view/src/ListItem/Selection.module.css","ui/packages/list-view/src/ListItem/Selection.tsx","ui/packages/list-view/src/ListItem/Title.module.css","ui/packages/list-view/src/ListItem/TitleHeader.module.css","ui/packages/list-view/src/ListItem/Title.tsx","ui/packages/list-view/src/ListItem/TitleContext.tsx","ui/packages/list-view/src/ListView/IdContext.tsx","ui/packages/list-view/src/ListView/ItemsContext.tsx","ui/packages/list-view/src/hooks/use-roving-tab-index.ts","ui/packages/list-view/src/ListView/ListView.module.css","ui/packages/list-view/src/ListView/ListView.tsx","ui/packages/list-view/src/ListView/MultiPageSelectionContext.tsx","ui/packages/list-view/src/ListView/SelectionContext.tsx","ui/packages/list-view/src/ListView/TitleContext.tsx","ui/packages/list-view/src/ListView/VariantContext.tsx","ui/packages/safe-html/SafeHTML.tsx"],"sourcesContent":["import {createContext, type PropsWithChildren, useContext, useMemo} from 'react'\n\nimport type {Action, StaticMenuAction} from './types'\n\nexport type ActionBarContentContextProps = {\n  /**\n   * Description of the controls found in the action bar, e.g., \"Issue actions\", \"Markdown formatting tools\".\n   * Will be used in a hidden label for accessibility purposes.\n   */\n  label: string\n  /**\n   * The controls to show in the action bar. These will move into a dropdown menu when the screen isn't big enough to\n   * fit them side by side.\n   */\n  actions?: Action[]\n\n  /**\n   * The controls to always show in the overflow menu, even when there's enough space to show them side by side.\n   */\n  staticMenuActions?: StaticMenuAction[]\n\n  /**\n   * Determines accessibility specific behavior of the action bar. Toolbar assigns a toolbar role and enables custom keyboard navigation.\n   * Menu uses default browser behavior and does not enable custom keyboard navigation.\n   * Defaults to \"toolbar\"\n   */\n  variant?: 'toolbar' | 'menu'\n}\n\nconst ActionBarContentContext = createContext<ActionBarContentContextProps>({\n  actions: [],\n  staticMenuActions: [],\n  label: 'Actions',\n})\n\ntype ActionBarContentProviderProps = PropsWithChildren & {value: ActionBarContentContextProps}\n\nexport const ActionBarContentProvider = ({\n  children,\n  value: {actions = [], staticMenuActions, variant = 'toolbar', label},\n}: ActionBarContentProviderProps) => {\n  const value = useMemo(\n    () => ({actions, staticMenuActions, variant, label}),\n    [actions, staticMenuActions, variant, label],\n  )\n  return <ActionBarContentContext.Provider value={value}>{children}</ActionBarContentContext.Provider>\n}\n\nexport const useActionBarContent = () => {\n  const context = useContext(ActionBarContentContext)\n  if (!context) throw new Error('useActionBarContent must be used with ActionBarContentProvider.')\n  return context\n}\n\ntry{ ActionBarContentContext.displayName ||= 'ActionBarContentContext' } catch {}\ntry{ ActionBarContentProvider.displayName ||= 'ActionBarContentProvider' } catch {}","import {createContext, createRef, type PropsWithChildren, type RefObject, useContext, useMemo, useRef} from 'react'\n\ntype ActionBarRefContextProps = {\n  outerContainerRef: RefObject<HTMLDivElement>\n  itemContainerRef: RefObject<HTMLDivElement>\n  anchorRef?: RefObject<HTMLElement>\n}\n\nconst ActionBarRefContext = createContext<ActionBarRefContextProps>({\n  outerContainerRef: createRef(),\n  itemContainerRef: createRef(),\n})\n\nexport const ActionBarRefProvider = ({\n  value: {anchorRef},\n  children,\n}: PropsWithChildren & {value: Pick<ActionBarRefContextProps, 'anchorRef'>}) => {\n  const outerContainerRef = useRef<HTMLDivElement>(null)\n  const itemContainerRef = useRef<HTMLDivElement>(null)\n  const value = useMemo(() => ({outerContainerRef, itemContainerRef, anchorRef}), [anchorRef])\n  return <ActionBarRefContext.Provider value={value}>{children}</ActionBarRefContext.Provider>\n}\n\nexport const useActionBarRef = () => {\n  const context = useContext(ActionBarRefContext)\n  if (!context) throw new Error('useActionBarRef must be used with ActionBarRefProvider.')\n  return context\n}\n\ntry{ ActionBarRefContext.displayName ||= 'ActionBarRefContext' } catch {}\ntry{ ActionBarRefProvider.displayName ||= 'ActionBarRefProvider' } catch {}","import type {Density} from './types'\n\nconst columnGap = (el: Element | null) => {\n  if (!el) return 0\n  const computedStyle = window.getComputedStyle(el)\n  if (computedStyle?.columnGap) return parseInt(computedStyle.columnGap, 10) // e.g., '16px' => 16\n  return 0\n}\n\nexport const calculateItemOffsetWidth = (item: Element, itemContainer: HTMLDivElement | null) => {\n  const gap = columnGap(itemContainer) * 2\n  const width = item.getBoundingClientRect().width\n  const itemStyle = window.getComputedStyle(item)\n  const marginLeft = itemStyle?.marginLeft ? parseInt(itemStyle.marginLeft, 10) : 0\n  const marginRight = itemStyle?.marginRight ? parseInt(itemStyle.marginRight, 10) : 0\n  return width + marginLeft + marginRight + gap\n}\n\n/**\n * How much space is the overflow menu toggle button taking up?\n */\nexport const calculateMenuSpace = (outerContainer: HTMLDivElement | null, itemContainer: HTMLDivElement | null) => {\n  const availableSpace = calculateAvailableSpace(outerContainer, itemContainer)\n  if (typeof availableSpace === 'undefined') return\n  let menuSpace = availableSpace\n  if (itemContainer) menuSpace -= itemContainer.offsetLeft\n  return menuSpace\n}\n\n/**\n * How much space do we have to expand into, to show more action items?\n * @returns Get the offset of the item container from the container edge\n */\nexport const calculateAvailableSpace = (\n  outerContainer: HTMLDivElement | null,\n  itemContainer: HTMLDivElement | null,\n) => {\n  if (!outerContainer) return\n  let availableSpace = outerContainer.offsetWidth\n  if (itemContainer) availableSpace -= itemContainer.offsetWidth\n  return availableSpace\n}\n\nexport const gapFromDensity = (density?: Density) => {\n  if (density === 'condensed') return 1\n  if (density === 'spacious') return 3\n  if (density === 'none') return 0\n  return 2\n}\n","import {noop} from '@github-ui/noop'\nimport {useResizeObserver} from '@primer/react'\nimport useIsomorphicLayoutEffect from '@primer/react/lib-esm/utils/useIsomorphicLayoutEffect'\nimport {createContext, type PropsWithChildren, useCallback, useContext, useMemo, useState} from 'react'\n\nimport {useActionBarRef} from './ActionBarRefContext'\nimport {calculateAvailableSpace, calculateItemOffsetWidth, calculateMenuSpace} from './utils'\n\ntype ActionBarResizeContextProps = {\n  /**\n   * The index of the key for the last `action` node that fits on the screen.\n   */\n  visibleChildEndIndex: number\n  /**\n   * Whether the justify-content CSS style for the outer container should be 'space-between' or not.\n   */\n  justifySpaceBetween: boolean\n  /**\n   * Number (in Primer spacing units) for how much space should be between individual actions as well as between\n   * actions and the overflow menu toggle button.\n   */\n  gap: number\n  /**\n   * Handler to trigger a recalculation of which action items should be visible versus hidden in the overflow menu.\n   * Can be used in one of the given nested menus or nested select panels, such as if the selection of list items\n   * changes in the select panel and that affects the width of the select panel toggle button rendered in the action\n   * bar.\n   */\n  recalculateItemSize: (key: string, el: HTMLElement) => void\n}\n\nconst ActionBarResizeContext = createContext<ActionBarResizeContextProps>({\n  visibleChildEndIndex: 0,\n  justifySpaceBetween: false,\n  gap: 0,\n  recalculateItemSize: noop,\n})\n\nexport type ActionBarResizeProviderValueProps = Pick<ActionBarResizeContextProps, 'gap'> & {\n  actionKeys: string[]\n}\n\ntype ActionBarResizeProviderProps = PropsWithChildren & {value: ActionBarResizeProviderValueProps}\n\nexport const ActionBarResizeProvider = ({children, value: {actionKeys, gap}}: ActionBarResizeProviderProps) => {\n  const totalActions = actionKeys.length\n  const [visibleChildEndIndex, setVisibleChildEndIndex] = useState(totalActions)\n  const {outerContainerRef, itemContainerRef} = useActionBarRef()\n  const [previousBarWidth, setPreviousBarWidth] = useState<number | undefined>()\n  const [initialBarWidth, setInitialBarWidth] = useState<number | undefined>()\n  const [itemOffsetWidths, setItemOffsetWidths] = useState<Map<string, number | undefined>>(\n    new Map(actionKeys.map(key => [key, undefined])),\n  )\n  const [justifySpaceBetween, setJustifySpaceBetween] = useState<boolean>(false)\n  const allItemWidthsCalculated = useMemo(\n    () => actionKeys.every(key => itemOffsetWidths.has(key) && typeof itemOffsetWidths.get(key) === 'number'),\n    [actionKeys, itemOffsetWidths],\n  )\n\n  const itemWidthAt = useCallback(\n    (index: number) => {\n      const key = actionKeys[index]\n      if (key) return itemOffsetWidths.get(key)\n    },\n    [actionKeys, itemOffsetWidths],\n  )\n\n  const recalculateItemSize = useCallback(\n    (key: string, el: HTMLElement) => {\n      // If the item container isn't shown, none of the items are visible so we can't know their size\n      const itemContainer = itemContainerRef.current\n      if (!itemContainer) return\n\n      const newWidth = calculateItemOffsetWidth(el, itemContainer)\n\n      setItemOffsetWidths(oldVal => {\n        if (newWidth === oldVal.get(key) || isNaN(newWidth)) return oldVal\n\n        const newVal = new Map<string, number | undefined>(Array.from(oldVal.entries()))\n        newVal.set(key, newWidth)\n        return newVal\n      })\n    },\n    [itemContainerRef],\n  )\n\n  const shrink = useCallback(() => {\n    // Don't try moving any items to the overflow menu if we haven't calculated yet how wide each item is when visible\n    if (!allItemWidthsCalculated) return\n\n    const outerContainer = outerContainerRef.current\n    const itemContainer = itemContainerRef.current\n    const availableSpace = calculateAvailableSpace(outerContainer, itemContainer)\n    if (typeof availableSpace === 'undefined') return\n\n    // Hide right-most item that's visible if there isn't enough space for it\n    const menuSpace = calculateMenuSpace(outerContainer, itemContainer)\n    if (typeof menuSpace === 'undefined') return\n\n    if (availableSpace <= menuSpace) setVisibleChildEndIndex(Math.max(0, visibleChildEndIndex - 1))\n  }, [allItemWidthsCalculated, visibleChildEndIndex, itemContainerRef, outerContainerRef])\n\n  const grow = useCallback(() => {\n    const outerContainer = outerContainerRef.current\n    const itemContainer = itemContainerRef.current\n    const availableSpace = calculateAvailableSpace(outerContainer, itemContainer)\n    if (typeof availableSpace === 'undefined') return\n\n    // If we don't know how wide the next item is, we can't safely show it, so bail out\n    const itemWidth = itemWidthAt(visibleChildEndIndex)\n    if (typeof itemWidth === 'undefined') return\n\n    const menuSpace = calculateMenuSpace(outerContainer, itemContainer)\n    if (typeof menuSpace === 'undefined') return\n\n    if (availableSpace > menuSpace + itemWidth) {\n      setVisibleChildEndIndex(Math.min(totalActions, visibleChildEndIndex + 1))\n    }\n  }, [itemWidthAt, totalActions, visibleChildEndIndex, outerContainerRef, itemContainerRef])\n\n  const update = useCallback(() => {\n    const outerContainer = outerContainerRef.current\n    const itemContainer = itemContainerRef.current\n    if (!outerContainer || !itemContainer) return\n\n    const currentBarWidth = outerContainer.offsetWidth\n    if (!currentBarWidth) return\n\n    if (typeof previousBarWidth === 'undefined' || currentBarWidth <= previousBarWidth) shrink()\n    else if (currentBarWidth > previousBarWidth) grow()\n\n    setPreviousBarWidth(currentBarWidth)\n    setJustifySpaceBetween(currentBarWidth <= (initialBarWidth ?? itemContainer.offsetWidth))\n  }, [grow, shrink, initialBarWidth, previousBarWidth, outerContainerRef, itemContainerRef])\n\n  useIsomorphicLayoutEffect(() => {\n    setVisibleChildEndIndex(totalActions)\n  }, [totalActions])\n\n  useIsomorphicLayoutEffect(() => {\n    const itemContainer = itemContainerRef.current\n    if (!itemContainer) return\n\n    const widths = new Map<string, number | undefined>()\n\n    for (const key of actionKeys) {\n      const el = itemContainer.querySelector(`[data-action-bar-item=\"${key}\"]`)\n      if (el) widths.set(key, calculateItemOffsetWidth(el, itemContainer))\n    }\n\n    setItemOffsetWidths(widths)\n  }, [actionKeys, itemContainerRef])\n\n  useIsomorphicLayoutEffect(() => {\n    const itemContainer = itemContainerRef.current\n    if (itemContainer) setInitialBarWidth(itemContainer.offsetWidth)\n  }, [itemContainerRef])\n\n  useIsomorphicLayoutEffect(() => {\n    update()\n  }, [update])\n\n  useResizeObserver(update, outerContainerRef)\n\n  const value = useMemo<ActionBarResizeContextProps>(\n    () => ({visibleChildEndIndex, justifySpaceBetween, gap, recalculateItemSize}),\n    [visibleChildEndIndex, justifySpaceBetween, gap, recalculateItemSize],\n  )\n  return <ActionBarResizeContext.Provider value={value}>{children}</ActionBarResizeContext.Provider>\n}\n\nexport const useActionBarResize = () => {\n  const context = useContext(ActionBarResizeContext)\n  if (!context) throw new Error('useActionBarResize must be used with ActionBarResizeProvider.')\n  return context\n}\n\ntry{ ActionBarResizeContext.displayName ||= 'ActionBarResizeContext' } catch {}\ntry{ ActionBarResizeProvider.displayName ||= 'ActionBarResizeProvider' } catch {}","import {testIdProps} from '@github-ui/test-id-props'\nimport {KebabHorizontalIcon} from '@primer/octicons-react'\nimport {ActionList, ActionMenu, IconButton, type IconButtonProps, merge} from '@primer/react'\nimport {Fragment, useMemo} from 'react'\n\nimport {useActionBarContent} from './ActionBarContentContext'\nimport {useActionBarRef} from './ActionBarRefContext'\nimport {useActionBarResize} from './ActionBarResizeContext'\n\nexport type OverflowMenuProps = {\n  anchorProps?: Omit<IconButtonProps, 'aria-labelledby'>\n}\n\nconst defaultMenuToggleIcon = KebabHorizontalIcon\nconst defaultMenuToggleVariant = 'invisible'\n\nexport const OverflowMenu = ({\n  anchorProps: {\n    'aria-label': ariaLabel,\n    icon = defaultMenuToggleIcon,\n    variant = defaultMenuToggleVariant,\n    ...otherAnchorProps\n  } = {\n    icon: defaultMenuToggleIcon,\n    variant: defaultMenuToggleVariant,\n  },\n}: OverflowMenuProps) => {\n  const {actions, staticMenuActions, label} = useActionBarContent()\n  const {visibleChildEndIndex} = useActionBarResize()\n  const {anchorRef} = useActionBarRef()\n  const anchorProps = useMemo(\n    () =>\n      merge(otherAnchorProps, {\n        'aria-label': ariaLabel?.trim() || `More ${label}`,\n        icon,\n        sx: {flexShrink: 0},\n        variant,\n      }),\n    [ariaLabel, icon, label, variant, otherAnchorProps],\n  )\n  const overflowActions = useMemo(() => actions?.slice(visibleChildEndIndex), [actions, visibleChildEndIndex])\n\n  const hasOverflowActions = overflowActions && overflowActions.length > 0\n  const hasStaticMenuActions = staticMenuActions && staticMenuActions.length > 0\n\n  if (!hasOverflowActions && !hasStaticMenuActions) return null\n\n  return (\n    <ActionMenu anchorRef={anchorRef}>\n      <ActionMenu.Anchor>\n        <IconButton {...testIdProps('overflow-menu-anchor')} {...anchorProps} />\n      </ActionMenu.Anchor>\n      <ActionMenu.Overlay align=\"end\">\n        <ActionList>\n          {hasStaticMenuActions &&\n            staticMenuActions.map(staticMenuAction => (\n              <Fragment key={`${staticMenuAction.key}`}>{staticMenuAction.render()}</Fragment>\n            ))}\n\n          {overflowActions?.map(action => <Fragment key={action.key}>{action.render(true)}</Fragment>)}\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>\n  )\n}\n\ntry{ OverflowMenu.displayName ||= 'OverflowMenu' } catch {}","import {testIdProps} from '@github-ui/test-id-props'\nimport {Box} from '@primer/react'\nimport useIsomorphicLayoutEffect from '@primer/react/lib-esm/utils/useIsomorphicLayoutEffect'\nimport {type PropsWithChildren, useRef} from 'react'\n\nimport {useActionBarResize} from './ActionBarResizeContext'\n\ntype VisibleItemProps = PropsWithChildren<{actionKey: string}>\n\nexport const VisibleItem = ({children, actionKey: key}: VisibleItemProps) => {\n  const itemRef = useRef<HTMLDivElement>(null)\n  const {recalculateItemSize} = useActionBarResize()\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemRef.current) recalculateItemSize(key, itemRef.current)\n  }, [itemRef, recalculateItemSize, key])\n\n  return (\n    <Box\n      {...testIdProps(`action-bar-item-${key}`)}\n      data-action-bar-item={key}\n      sx={{display: 'inline-flex'}}\n      ref={itemRef}\n    >\n      {children}\n    </Box>\n  )\n}\n\ntry{ VisibleItem.displayName ||= 'VisibleItem' } catch {}","import {testIdProps} from '@github-ui/test-id-props'\nimport {Box, type SxProp} from '@primer/react'\nimport type {CSSProperties} from 'react'\n\nimport {useActionBarContent} from './ActionBarContentContext'\nimport {useActionBarRef} from './ActionBarRefContext'\nimport {useActionBarResize} from './ActionBarResizeContext'\nimport {VisibleItem} from './VisibleItem'\n\nconst defaultStyles = {\n  display: 'flex',\n  justifyContent: 'flex-end',\n  overflow: 'visible',\n  flexDirection: 'row',\n  marginLeft: 'auto',\n  alignItems: 'center',\n  boxSizing: 'content-box',\n  flexShrink: 0,\n  flexGrow: 0,\n}\n\nexport const VisibleItems = ({sx, ...props}: SxProp & {className?: string; style?: CSSProperties}) => {\n  const {actions} = useActionBarContent()\n  const {gap, visibleChildEndIndex} = useActionBarResize()\n  const {itemContainerRef} = useActionBarRef()\n  const visibleActions = actions?.slice(0, visibleChildEndIndex)\n\n  return (\n    <Box\n      {...testIdProps('action-bar')}\n      ref={itemContainerRef}\n      sx={{\n        ...defaultStyles,\n        ...sx,\n        gap,\n      }}\n      {...props}\n    >\n      {visibleActions?.map(({key, render}) => (\n        <VisibleItem key={key} actionKey={key}>\n          {render(false)}\n        </VisibleItem>\n      ))}\n    </Box>\n  )\n}\n\ntry{ VisibleItems.displayName ||= 'VisibleItems' } catch {}","import {testIdProps} from '@github-ui/test-id-props'\nimport {FocusKeys} from '@primer/behaviors'\nimport {Box, type SxProp, useFocusZone} from '@primer/react'\nimport type {CSSProperties, PropsWithChildren} from 'react'\n\nimport {useActionBarContent} from './ActionBarContentContext'\nimport {useActionBarRef} from './ActionBarRefContext'\nimport {useActionBarResize} from './ActionBarResizeContext'\nimport {OverflowMenu, type OverflowMenuProps} from './OverflowMenu'\nimport {VisibleItems} from './VisibleItems'\n\nexport type VisibleAndOverflowContainerProps = PropsWithChildren<{\n  overflowMenuToggleProps?: OverflowMenuProps['anchorProps']\n  outerContainerSx?: SxProp['sx']\n  className?: string\n  style?: CSSProperties\n}> &\n  SxProp\n\nconst defaultStyles = {\n  position: 'relative',\n  minWidth: 0,\n  display: 'flex',\n  overflow: 'visible',\n  flexDirection: 'row',\n  marginLeft: 'auto',\n  alignItems: 'center',\n  boxSizing: 'content-box',\n  flexShrink: 1,\n  flexGrow: 1,\n}\n\nexport const VisibleAndOverflowContainer = ({\n  overflowMenuToggleProps,\n  children,\n  outerContainerSx,\n  ...props\n}: VisibleAndOverflowContainerProps) => {\n  const {gap, justifySpaceBetween} = useActionBarResize()\n  const {outerContainerRef} = useActionBarRef()\n  const {label, variant} = useActionBarContent()\n\n  useFocusZone(\n    {\n      containerRef: outerContainerRef,\n      bindKeys: FocusKeys.ArrowHorizontal | FocusKeys.HomeAndEnd,\n      focusOutBehavior: 'wrap',\n      disabled: variant !== 'toolbar',\n    },\n    [outerContainerRef],\n  )\n\n  return (\n    <Box\n      ref={outerContainerRef}\n      {...testIdProps('action-bar-container')}\n      role={variant === 'toolbar' ? 'toolbar' : undefined}\n      aria-label={variant === 'toolbar' ? label : undefined}\n      sx={{\n        ...defaultStyles,\n        ...outerContainerSx,\n        justifyContent: justifySpaceBetween ? 'space-between' : 'flex-end',\n        gap,\n      }}\n    >\n      <VisibleItems {...props} />\n      {children}\n      <OverflowMenu anchorProps={overflowMenuToggleProps} />\n    </Box>\n  )\n}\n\ntry{ VisibleAndOverflowContainer.displayName ||= 'VisibleAndOverflowContainer' } catch {}","import {type ReactNode, type RefObject, useMemo} from 'react'\n\nimport {type ActionBarContentContextProps, ActionBarContentProvider} from './ActionBarContentContext'\nimport {ActionBarRefProvider} from './ActionBarRefContext'\nimport {ActionBarResizeProvider, type ActionBarResizeProviderValueProps} from './ActionBarResizeContext'\nimport type {Density} from './types'\nimport {gapFromDensity} from './utils'\nimport {VisibleAndOverflowContainer, type VisibleAndOverflowContainerProps} from './VisibleAndOverflowContainer'\n\nconst defaultDensity: Density = 'normal'\n\nexport type ActionBarProps = ActionBarContentContextProps &\n  Pick<\n    VisibleAndOverflowContainerProps,\n    'overflowMenuToggleProps' | 'sx' | 'outerContainerSx' | 'className' | 'style'\n  > & {\n    /**\n     * Any other elements to display in the action bar that shouldn't be collapsed based on available space.\n     */\n    children?: ReactNode\n    /**\n     * Spacing between individual items in the action bar, as well as between items and the overflow menu toggle\n     * button. Defaults to 'normal'.\n     */\n    density?: Density\n\n    /**\n     * A ref to the element that should be used as the anchor for the overflow menu.\n     */\n    anchorRef?: RefObject<HTMLElement>\n  }\n\nexport const ActionBar = ({\n  actions = [],\n  staticMenuActions,\n  overflowMenuToggleProps,\n  children,\n  sx,\n  label,\n  variant,\n  outerContainerSx,\n  density = defaultDensity,\n  anchorRef,\n  className,\n  style,\n}: ActionBarProps) => {\n  const contentProviderValue = useMemo<ActionBarContentContextProps>(\n    () => ({actions, staticMenuActions, variant, label}),\n    [actions, staticMenuActions, variant, label],\n  )\n  const resizeProviderValue = useMemo<ActionBarResizeProviderValueProps>(\n    () => ({actionKeys: actions.map(action => action.key), gap: gapFromDensity(density)}),\n    [actions, density],\n  )\n\n  const hasStaticMenuActions = staticMenuActions && staticMenuActions.length > 0\n  const hasActions = actions && actions.length > 0\n\n  if (!hasActions && !hasStaticMenuActions) return null\n\n  return (\n    <ActionBarRefProvider value={{anchorRef}}>\n      <ActionBarResizeProvider value={resizeProviderValue}>\n        <ActionBarContentProvider value={contentProviderValue}>\n          <VisibleAndOverflowContainer\n            outerContainerSx={outerContainerSx}\n            overflowMenuToggleProps={overflowMenuToggleProps}\n            sx={sx}\n            className={className}\n            style={style}\n          >\n            {children}\n          </VisibleAndOverflowContainer>\n        </ActionBarContentProvider>\n      </ActionBarResizeProvider>\n    </ActionBarRefProvider>\n  )\n}\n\ntry{ ActionBar.displayName ||= 'ActionBar' } catch {}","export const HeaderTags = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] as const\nexport type HeaderTag = (typeof HeaderTags)[number]\nexport const HeaderTagLevels = ['list-view', 'list-view-metadata', 'listitem'] as const\nexport type HeaderTagLevel = (typeof HeaderTagLevels)[number]\nexport const defaultTitleHeaderTag = 'h2' as HeaderTag\nexport const defaultHeaderTags = {\n  'list-view': defaultTitleHeaderTag,\n  'list-view-metadata': 'h3' as HeaderTag,\n  listitem: 'h3' as HeaderTag,\n}\n\nexport const Variants = ['default', 'compact'] as const\n\nexport const defaultVariant = 'default'\nexport const defaultIsSelectable = false\nexport const defaultTitle = 'List view'\nexport const defaultTotalCount = 3\nexport const defaultSelectedCount = 0\n","import {useMemo} from 'react'\n\nimport {defaultHeaderTags, type HeaderTag, type HeaderTagLevel, HeaderTagLevels, HeaderTags} from '../constants'\nimport {useListViewTitle} from '../ListView/TitleContext'\n\nexport function useNextHeaderTag(level: HeaderTagLevel): HeaderTag {\n  const {titleHeaderTag, hasMetadataTitle} = useListViewTitle()\n\n  const titleTag = useMemo(() => {\n    const levelIndex = HeaderTagLevels.findIndex(e => e === level)\n    const headerIndex = HeaderTags.indexOf(titleHeaderTag) + (hasMetadataTitle ? levelIndex : levelIndex - 1)\n\n    // https://github.com/github/issues/issues/7295#issuecomment-1679724969\n    // We return h6 even if the preceeding title is h6 for screen reader users to quickly navigate via heading\n    if (headerIndex > HeaderTags.length - 1) return 'h6'\n\n    return HeaderTags[headerIndex] || defaultHeaderTags[level]\n  }, [titleHeaderTag, hasMetadataTitle, level])\n\n  return titleTag\n}\n","export interface TestIdProps {\n  /** Test ID to be queried by automated testing suites */\n  'data-testid'?: string\n}\n\nexport const testIdProps = (value: string): TestIdProps => {\n  return {'data-testid': value}\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ActionBar-module__container--ZVTfi\",\"hasActions\":\"ActionBar-module__hasActions--cU9tJ\"};","import {ActionBar as GitHubUiActionBar, type ActionBarProps as GitHubUiActionBarProps} from '@github-ui/action-bar'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport type {Icon} from '@primer/octicons-react'\nimport {Box} from '@primer/react'\nimport {clsx} from 'clsx'\nimport {useEffect} from 'react'\n\nimport {useListViewItems} from '../ListView/ItemsContext'\nimport type {StylableProps} from '../types'\nimport styles from './ActionBar.module.css'\n\nexport type ListItemActionBarProps = Omit<GitHubUiActionBarProps, 'label' | 'variant' | 'sx'> &\n  StylableProps & {\n    /**\n     * Override the icon used in the button that opens the action menu. Defaults to KebabHorizontalIcon.\n     */\n    anchorIcon?: Icon\n    label?: GitHubUiActionBarProps['label']\n  }\n\nexport const ListItemActionBar = ({\n  anchorIcon,\n  style,\n  sx,\n  className,\n  label = 'list item action bar',\n  ...props\n}: ListItemActionBarProps) => {\n  const {setAnyItemsWithActionBar, setHasResizableActionsWithActionBar} = useListViewItems()\n  useEffect(() => setAnyItemsWithActionBar(true), [setAnyItemsWithActionBar])\n  useEffect(() => {\n    if (props.actions) setHasResizableActionsWithActionBar(true)\n  }, [props.actions, setHasResizableActionsWithActionBar])\n\n  return (\n    <Box\n      className={clsx(styles.container, props.actions && styles.hasActions, className)}\n      style={style}\n      sx={sx}\n      {...testIdProps('list-view-item-action-bar-container')}\n    >\n      <GitHubUiActionBar\n        {...props}\n        label={label}\n        variant=\"menu\"\n        overflowMenuToggleProps={anchorIcon ? {icon: anchorIcon} : undefined}\n      />\n    </Box>\n  )\n}\n\ntry{ ListItemActionBar.displayName ||= 'ListItemActionBar' } catch {}","import {\n  createContext,\n  type Dispatch,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\nexport type DescriptionContextProps = {\n  /**\n   * The description of the list item.\n   * ListItem description is composed from the aria-label property of the ListItem.DescriptionItem children\n   * Available only when the ListItem.DescriptionItem is included\n   * Used for the aria-label of the list item\n   */\n  description: string\n  setDescription: Dispatch<SetStateAction<string>>\n}\n\nconst DescriptionContext = createContext<DescriptionContextProps | undefined>(undefined)\n\nexport const DescriptionProvider = ({children}: PropsWithChildren) => {\n  const [description, setDescription] = useState('')\n  const contextProps = useMemo(() => ({description, setDescription}) satisfies DescriptionContextProps, [description])\n  return <DescriptionContext.Provider value={contextProps}>{children}</DescriptionContext.Provider>\n}\nDescriptionProvider.displayName = 'ListItemDescriptionProvider'\n\nexport const useListItemDescription = () => {\n  const context = useContext(DescriptionContext)\n  if (!context) throw new Error('useListItemDescription must be used with DescriptionProvider.')\n  return context\n}\n\ntry{ DescriptionContext.displayName ||= 'DescriptionContext' } catch {}","import {noop} from '@github-ui/noop'\nimport type {Dispatch, PropsWithChildren, SetStateAction} from 'react'\nimport {createContext, useContext, useMemo, useState} from 'react'\n\ntype ActionsContextProps = {\n  actionsOpen: boolean\n  setActionsOpen: Dispatch<SetStateAction<boolean>>\n}\n\nconst ActionsContext = createContext<ActionsContextProps>({\n  actionsOpen: false,\n  setActionsOpen: noop,\n})\n\nexport const ActionsProvider = ({children}: PropsWithChildren) => {\n  const [actionsOpen, setActionsOpen] = useState(false)\n  const contextProps = useMemo(() => ({actionsOpen, setActionsOpen}), [actionsOpen])\n  return <ActionsContext.Provider value={contextProps}>{children}</ActionsContext.Provider>\n}\nActionsProvider.displayName = 'ListItemActionsProvider'\n\nexport const useListItemActions = () => {\n  return useContext(ActionsContext)\n}\n\ntry{ ActionsContext.displayName ||= 'ActionsContext' } catch {}","import {\n  createContext,\n  type Dispatch,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\nexport type LeadingBadgeContextProps = {\n  /**\n   * The badge before the title of the list item. Used for the aria-label of the list item\n   */\n  leadingBadge: string\n  setLeadingBadge: Dispatch<SetStateAction<string>>\n}\n\nconst LeadingBadgeContext = createContext<LeadingBadgeContextProps | undefined>(undefined)\n\nexport const LeadingBadgeProvider = ({children}: PropsWithChildren) => {\n  const [leadingBadge, setLeadingBadge] = useState('')\n  const contextProps = useMemo(\n    () => ({leadingBadge, setLeadingBadge}) satisfies LeadingBadgeContextProps,\n    [leadingBadge],\n  )\n  return <LeadingBadgeContext.Provider value={contextProps}>{children}</LeadingBadgeContext.Provider>\n}\nLeadingBadgeProvider.displayName = 'ListItemLeadingBadgeProvider'\n\nexport const useListItemLeadingBadge = () => {\n  const context = useContext(LeadingBadgeContext)\n  if (!context) throw new Error('useListItemLeadingBadge must be used with LeadingBadgeProvider.')\n  return context\n}\n\ntry{ LeadingBadgeContext.displayName ||= 'LeadingBadgeContext' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"ListItem-module__listItem--kHali\",\"compact\":\"ListItem-module__compact--z60S6\",\"hasActionBar\":\"ListItem-module__hasActionBar--av1aD\",\"selected\":\"ListItem-module__selected--BaCDB\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MetadataContainer-module__container--lj6YE\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {Box} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {ReactElement, ReactNode} from 'react'\n\nimport type {StylableProps} from '../types'\nimport type {ListItemMetadata} from './Metadata'\nimport styles from './MetadataContainer.module.css'\n\nexport type ListItemMetadataContainerProps = StylableProps & {\n  children: ReactNode | Array<ReactElement<typeof ListItemMetadata>>\n}\n\nexport function ListItemMetadataContainer({style, sx, className, children}: ListItemMetadataContainerProps) {\n  return (\n    <Box\n      className={clsx(styles.container, className)}\n      style={style}\n      sx={sx}\n      {...testIdProps('list-view-item-metadata')}\n    >\n      {children}\n    </Box>\n  )\n}\n\ntry{ ListItemMetadataContainer.displayName ||= 'ListItemMetadataContainer' } catch {}","import {noop} from '@github-ui/noop'\nimport {Box} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {FocusEvent, JSX, KeyboardEvent, PropsWithChildren, ReactElement} from 'react'\nimport {Fragment, useCallback, useEffect, useId, useMemo, useRef} from 'react'\n\nimport {useListViewId} from '../ListView/IdContext'\nimport {useListViewItems} from '../ListView/ItemsContext'\nimport {useListViewSelection} from '../ListView/SelectionContext'\nimport {useListViewVariant} from '../ListView/VariantContext'\nimport type {PrefixedStylableProps, StylableProps} from '../types'\nimport {ListItemActionBar} from './ActionBar'\nimport {ActionsProvider} from './ActionsContext'\nimport {DescriptionProvider, useListItemDescription} from './DescriptionContext'\nimport {LeadingBadgeProvider, useListItemLeadingBadge} from './LeadingBadgeContext'\nimport styles from './ListItem.module.css'\nimport {ListItemMetadataContainer, type ListItemMetadataContainerProps} from './MetadataContainer'\nimport {NewActivityProvider, useListItemNewActivity} from './NewActivityContext'\nimport {SelectionProvider, useListItemSelection} from './SelectionContext'\nimport {StatusProvider, useListItemStatus} from './StatusContext'\nimport type {ListItemTitle} from './Title'\nimport {TitleProvider, useListItemTitle} from './TitleContext'\n\nexport type ListItemProps = StylableProps &\n  PrefixedStylableProps<'metadataContainer'> &\n  PropsWithChildren<{\n    isSelected?: boolean\n    isActive?: boolean\n    onSelect?: (isSelected: boolean) => void\n    /*\n     * Optional. Overrides the default behavior of the list item when a key is pressed\n     */\n    onKeyDown?: (event: KeyboardEvent<HTMLLIElement>) => void\n    onFocus?: (event: FocusEvent<HTMLLIElement>) => void\n\n    /**\n     * A ListItem title communicates the overall purpose of the ListItem.\n     */\n    title: ReactElement<typeof ListItemTitle>\n\n    /**\n     * Optional extra elements to display on the right side of the list item. You can optionally wrap individual\n     * pieces of content in `ListItem.Metadata` for a consistent appearance.\n     */\n    metadata?: ListItemMetadataContainerProps['children']\n\n    /**\n     * Optional menu of additional actions to be shown on the right side of the ListItem. Use `ListItem.ActionBar`.\n     */\n    secondaryActions?: ReactElement<typeof ListItemActionBar>\n  }>\n\nconst ListItemBase = ({\n  children,\n  isActive = false,\n  title,\n  metadata,\n  secondaryActions,\n  style,\n  sx,\n  className,\n  metadataContainerStyle,\n  metadataContainerSx,\n  metadataContainerClassName,\n  ...props\n}: Omit<ListItemProps, 'isSelected' | 'onSelect'>): JSX.Element => {\n  const {idPrefix} = useListViewId()\n  const {isSelectable} = useListViewSelection()\n  const {variant} = useListViewVariant()\n  const {anyItemsWithActionBar, hasResizableActionsWithActionBar} = useListViewItems()\n  const uniqueIdSuffix = useId()\n  const {isSelected, onSelect} = useListItemSelection()\n  const {status: labelStatus} = useListItemStatus()\n  const {title: labelTitle, titleAction} = useListItemTitle()\n  const {description: labelDescription} = useListItemDescription()\n  const {leadingBadge: labelLeadingBadge} = useListItemLeadingBadge()\n  const {hasNewActivity} = useListItemNewActivity()\n  const itemRef = useRef<HTMLLIElement>(null)\n\n  useEffect(() => {\n    if (!itemRef.current) return\n    // Focus the element unless another element in the document is specifically focused\n    if (isActive && document.activeElement?.tagName === 'BODY') {\n      itemRef.current.focus()\n    }\n  })\n\n  const onKeyDown = useCallback(\n    (e: KeyboardEvent<HTMLLIElement>) => {\n      // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      switch (e.key) {\n        case 'Enter':\n          if (titleAction) titleAction(e)\n          break\n        case ' ':\n          // When the user presses Space\n          if (!isSelectable) break\n          if (itemRef?.current !== document.activeElement) break // if the focus is inside the listitem, do not select the item\n          e.preventDefault()\n          onSelect(!isSelected)\n          break\n        case 'Escape':\n          itemRef?.current?.focus()\n          break\n        default:\n          break\n      }\n    },\n    [titleAction, isSelectable, onSelect, isSelected],\n  )\n\n  const getAriaLabel = useCallback(() => {\n    const labelSelected = isSelected ? 'Selected' : ''\n    const labelNewActivity = hasNewActivity ? 'New activity' : ''\n    const hasSecondaryActions = !!secondaryActions\n    const hasMetadata = (Array.isArray(metadata) && metadata.length > 0) || (metadata && !Array.isArray(metadata))\n    let labelAdditionalInfo = ''\n    if (hasMetadata || hasSecondaryActions) {\n      labelAdditionalInfo = 'More information available below'\n    }\n\n    const main = [labelLeadingBadge, labelTitle, labelStatus]\n      .filter(str => str.trim())\n      .join(': ')\n      .replace(/\\.+$/, '') // Remove additional periods\n    const ariaLabel = [labelSelected, main, labelDescription, labelNewActivity, labelAdditionalInfo]\n      .filter(str => str.trim())\n      .join('. ')\n\n    return ariaLabel.endsWith('.') ? ariaLabel : `${ariaLabel}.`\n  }, [\n    secondaryActions,\n    metadata,\n    isSelected,\n    hasNewActivity,\n    labelLeadingBadge,\n    labelTitle,\n    labelStatus,\n    labelDescription,\n  ])\n\n  return (\n    <Box\n      as=\"li\"\n      ref={itemRef}\n      id={`${idPrefix}-list-view-node-${uniqueIdSuffix}`}\n      role=\"listitem\"\n      className={clsx(\n        styles.listItem,\n        isSelected && styles.selected,\n        variant === 'compact' && styles.compact,\n        anyItemsWithActionBar && hasResizableActionsWithActionBar && styles.hasActionBar,\n        className,\n      )}\n      tabIndex={-1} // Handled by useFocusZone with roving tabIndex\n      aria-label={getAriaLabel()}\n      style={style}\n      sx={sx}\n      onKeyDown={onKeyDown}\n      {...props}\n    >\n      {title}\n      {children}\n      {Array.isArray(metadata) && metadata.length > 0 ? (\n        <ListItemMetadataContainer\n          style={metadataContainerStyle}\n          sx={metadataContainerSx}\n          className={metadataContainerClassName}\n        >\n          {metadata.map((metadataItem, index) => (\n            <Fragment key={index}>{metadataItem}</Fragment>\n          ))}\n        </ListItemMetadataContainer>\n      ) : (\n        metadata &&\n        !Array.isArray(metadata) && (\n          <ListItemMetadataContainer\n            style={metadataContainerStyle}\n            sx={metadataContainerSx}\n            className={metadataContainerClassName}\n          >\n            {metadata}\n          </ListItemMetadataContainer>\n        )\n      )}\n      {secondaryActions ?? (anyItemsWithActionBar && <ListItemActionBar />)}\n    </Box>\n  )\n}\n\nexport const ListItem = ({\n  children,\n  isSelected = false,\n  onSelect = noop,\n  ...rest\n}: PropsWithChildren<ListItemProps>): JSX.Element => {\n  const {setSelectedCount} = useListViewSelection()\n  const isSelectedRef = useRef(isSelected)\n  isSelectedRef.current = isSelected\n\n  useEffect(() => {\n    setSelectedCount(count => (isSelected ? count + 1 : Math.max(0, count - 1)))\n  }, [isSelected, setSelectedCount])\n\n  useEffect(() => {\n    return () => {\n      if (isSelectedRef.current) {\n        setSelectedCount(count => Math.max(0, count - 1))\n      }\n    }\n  }, [setSelectedCount])\n\n  const selectionProviderProps = useMemo(() => ({isSelected, onSelect}), [isSelected, onSelect])\n\n  return (\n    <ActionsProvider>\n      <LeadingBadgeProvider>\n        <TitleProvider>\n          <SelectionProvider value={selectionProviderProps}>\n            <NewActivityProvider>\n              <DescriptionProvider>\n                <StatusProvider>\n                  <ListItemBase {...rest}>{children}</ListItemBase>\n                </StatusProvider>\n              </DescriptionProvider>\n            </NewActivityProvider>\n          </SelectionProvider>\n        </TitleProvider>\n      </LeadingBadgeProvider>\n    </ActionsProvider>\n  )\n}\n\ntry{ ListItemBase.displayName ||= 'ListItemBase' } catch {}\ntry{ ListItem.displayName ||= 'ListItem' } catch {}","import {\n  createContext,\n  type Dispatch,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\nexport type NewActivityContextProps = {\n  /**\n   * Available only when the ListItem.LeadingVisual is included with the newActivity prop set.\n   * Used for setting the aria-label of the list item.\n   */\n  hasNewActivity: boolean\n  setHasNewActivity: Dispatch<SetStateAction<boolean>>\n}\n\nconst NewActivityContext = createContext<NewActivityContextProps | undefined>(undefined)\n\nexport const NewActivityProvider = ({children}: PropsWithChildren) => {\n  const [hasNewActivity, setHasNewActivity] = useState(false)\n  const contextProps = useMemo(\n    () => ({hasNewActivity, setHasNewActivity}) satisfies NewActivityContextProps,\n    [hasNewActivity],\n  )\n\n  return <NewActivityContext.Provider value={contextProps}>{children}</NewActivityContext.Provider>\n}\nNewActivityProvider.displayName = 'ListItemNewActivityProvider'\n\nexport const useListItemNewActivity = () => {\n  const context = useContext(NewActivityContext)\n  if (!context) throw new Error('useListItemNewActivity must be used with NewActivityProvider.')\n  return context\n}\n\ntry{ NewActivityContext.displayName ||= 'NewActivityContext' } catch {}","import {announce} from '@github-ui/aria-live'\nimport {noop} from '@github-ui/noop'\nimport {createContext, type PropsWithChildren, useContext, useMemo} from 'react'\n\nimport {useListItemTitle} from './TitleContext'\n\nexport type SelectionContextProps = {\n  isSelected: boolean\n  onSelect: (isSelected: boolean) => void\n}\n\nconst SelectionContext = createContext<SelectionContextProps>({isSelected: false, onSelect: noop})\n\ntype SelectionProviderProps = PropsWithChildren & {value: SelectionContextProps}\n\nexport const SelectionProvider = ({children, value: {isSelected, onSelect}}: SelectionProviderProps) => {\n  const {title} = useListItemTitle()\n\n  const contextProps = useMemo(() => {\n    const onSelectAndAnnounce = (selected: boolean) => {\n      announce(selected ? `Selected. ${title}.` : `Unselected. ${title}.`)\n      onSelect(selected)\n    }\n    return {isSelected, onSelect: onSelectAndAnnounce}\n  }, [isSelected, onSelect, title])\n  return <SelectionContext.Provider value={contextProps}>{children}</SelectionContext.Provider>\n}\nSelectionProvider.displayName = 'ListItemSelectionProvider'\n\nexport const useListItemSelection = () => {\n  return useContext(SelectionContext)\n}\n\ntry{ SelectionContext.displayName ||= 'SelectionContext' } catch {}","import {\n  createContext,\n  type Dispatch,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\nexport type StatusContextProps = {\n  /**\n   * A text description of the ListItem.LeadingVisual in the list item\n   * Available only when the ListItem.LeadingVisual is included\n   * Used for the aria-label of the list item\n   */\n  status: string\n  setStatus: Dispatch<SetStateAction<string>>\n}\n\nconst StatusContext = createContext<StatusContextProps | undefined>(undefined)\n\nexport const StatusProvider = ({children}: PropsWithChildren) => {\n  const [status, setStatus] = useState('')\n  const contextProps = useMemo(() => ({status, setStatus}) satisfies StatusContextProps, [status])\n  return <StatusContext.Provider value={contextProps}>{children}</StatusContext.Provider>\n}\nStatusProvider.displayName = 'ListItemStatusProvider'\n\nexport const useListItemStatus = () => {\n  const context = useContext(StatusContext)\n  if (!context) throw new Error('useListItemStatus must be used with StatusProvider.')\n  return context\n}\n\ntry{ StatusContext.displayName ||= 'StatusContext' } catch {}","import {type SafeHTMLString, SafeHTMLText} from '@github-ui/safe-html'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {Link, Text} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type {ForwardedRef, PropsWithChildren, ReactElement, RefObject} from 'react'\n\nimport {useNextHeaderTag} from '../hooks/use-next-header-tag'\nimport type {PrefixedStylableProps} from '../types'\nimport type {ListItemLeadingBadge} from './LeadingBadge'\nimport styles from './TitleHeader.module.css'\n\ntype BaseTitleHeaderProps = {\n  /**\n   * The tooltip to add context to the title\n   */\n  tooltip?: string\n  /*\n   * An optional element used to indicate information such as the status of the item. Appears before the title text.\n   */\n  leadingBadge?: ReactElement<typeof ListItemLeadingBadge>\n}\n\ntype TitleHeadingProps = PrefixedStylableProps<'heading'> & {\n  headingRef?: RefObject<HTMLHeadingElement>\n}\n\nfunction TitleHeading({\n  headingStyle,\n  headingClassName,\n  headingSx,\n  headingRef,\n  children,\n}: PropsWithChildren<TitleHeadingProps>) {\n  const TitleTag = useNextHeaderTag('listitem')\n  return (\n    <Text\n      as={TitleTag}\n      className={clsx('markdown-title', headingClassName)}\n      style={headingStyle}\n      ref={headingRef}\n      sx={headingSx}\n    >\n      {children}\n    </Text>\n  )\n}\n\ntype HeadingLinkProps = PrefixedStylableProps<'anchor'> & {\n  /**\n   * A ref to the anchor element\n   */\n  anchorRef?: ForwardedRef<HTMLAnchorElement>\n  /**\n   * The link that will be opened when the item is clicked\n   */\n  href?: string\n  /**\n   * The target of the link that will be opened when the item is clicked\n   */\n  target?: string\n  /**\n   * A click handler to be executed when the element is clicked\n   */\n  onClick?: React.MouseEventHandler<HTMLElement>\n  onMouseEnter?: React.MouseEventHandler<HTMLElement>\n  onMouseLeave?: React.MouseEventHandler<HTMLElement>\n  /**\n   * An optional prop to pass additional props for the anchor tag of the title, if the title is a link\n   * Can be used to add a target or soft navigation, for example\n   */\n  linkProps?: React.ComponentPropsWithoutRef<typeof Text>\n}\n\nfunction HeadingLink({\n  anchorStyle,\n  anchorClassName,\n  anchorSx,\n  linkProps,\n  anchorRef,\n  children,\n  ...args\n}: PropsWithChildren<HeadingLinkProps>) {\n  return (\n    <Link\n      {...testIdProps('listitem-title-link')}\n      style={anchorStyle}\n      sx={anchorSx}\n      ref={anchorRef}\n      className={clsx(styles.inline, anchorClassName)}\n      {...args}\n      {...linkProps}\n    >\n      {children}\n    </Link>\n  )\n}\n\nexport type ListItemMarkdownHeaderProps = BaseTitleHeaderProps &\n  TitleHeadingProps &\n  HeadingLinkProps & {\n    /**\n     * The rendered markdown text content of the header, to convey the primary meaning of the list item.\n     * When provided, `value` will be used as the title's `title` attribute and `markdownValue` will be used as the title's text content.\n     * If `markdownValue` includes links and a `href` is provided, the `markdownValue` will build accessible links.\n     */\n    markdownValue: SafeHTMLString\n  }\n\nexport function ListItemMarkdownHeader({\n  markdownValue,\n  anchorStyle,\n  anchorClassName,\n  anchorSx,\n  headingStyle,\n  headingClassName,\n  headingSx,\n  headingRef,\n  tooltip,\n  leadingBadge,\n  ...props\n}: ListItemMarkdownHeaderProps) {\n  return (\n    <TitleHeading\n      headingStyle={headingStyle}\n      headingSx={headingSx}\n      headingClassName={headingClassName}\n      headingRef={headingRef}\n    >\n      {leadingBadge}\n      {/* markdownValue will provide a link if necessary */}\n      <SafeHTMLText\n        style={anchorStyle}\n        className={clsx(styles.inline, anchorClassName)}\n        html={markdownValue}\n        title={tooltip}\n        {...props}\n      />\n    </TitleHeading>\n  )\n}\n\nexport type ListItemLinkHeaderProps = BaseTitleHeaderProps &\n  TitleHeadingProps &\n  HeadingLinkProps & {\n    /**\n     * The text content of the header, to convey the primary meaning of the list item.\n     */\n    value: SafeHTMLString | string\n  }\n\nexport function ListItemLinkHeader({\n  headingStyle,\n  headingSx,\n  headingClassName,\n  headingRef,\n  value,\n  tooltip,\n  leadingBadge,\n  ...args\n}: ListItemLinkHeaderProps) {\n  return (\n    <TitleHeading\n      headingStyle={headingStyle}\n      headingSx={headingSx}\n      headingClassName={headingClassName}\n      headingRef={headingRef}\n    >\n      {leadingBadge}\n      <HeadingLink {...args}>\n        <SafeHTMLText html={value as SafeHTMLString} title={tooltip} />\n      </HeadingLink>\n    </TitleHeading>\n  )\n}\n\nexport type ListItemStaticHeaderProps = BaseTitleHeaderProps &\n  TitleHeadingProps & {\n    /**\n     * The text content of the header, to convey the primary meaning of the list item.\n     */\n    value: SafeHTMLString | string\n  }\n\nexport function ListItemStaticHeader({\n  value,\n  headingStyle,\n  headingSx,\n  headingClassName,\n  headingRef,\n  tooltip,\n  leadingBadge,\n}: ListItemStaticHeaderProps) {\n  return (\n    <TitleHeading\n      headingStyle={headingStyle}\n      headingSx={headingSx}\n      headingClassName={headingClassName}\n      headingRef={headingRef}\n    >\n      {leadingBadge}\n      <SafeHTMLText className={styles.inline} html={value as SafeHTMLString} title={tooltip} />\n    </TitleHeading>\n  )\n}\n\ntry{ TitleHeading.displayName ||= 'TitleHeading' } catch {}\ntry{ TitleTag.displayName ||= 'TitleTag' } catch {}\ntry{ HeadingLink.displayName ||= 'HeadingLink' } catch {}\ntry{ ListItemMarkdownHeader.displayName ||= 'ListItemMarkdownHeader' } catch {}\ntry{ ListItemLinkHeader.displayName ||= 'ListItemLinkHeader' } catch {}\ntry{ ListItemStaticHeader.displayName ||= 'ListItemStaticHeader' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Selection-module__container--VTcpJ\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {Checkbox} from '@primer/react'\n\nimport {useListViewSelection} from '../ListView/SelectionContext'\nimport {useListViewVariant} from '../ListView/VariantContext'\nimport styles from './Selection.module.css'\nimport {useListItemSelection} from './SelectionContext'\nimport {useListItemTitle} from './TitleContext'\n\nexport const ListItemSelection = () => {\n  const {variant} = useListViewVariant()\n  const {isSelectable} = useListViewSelection()\n  const {isSelected, onSelect} = useListItemSelection()\n  const {title} = useListItemTitle()\n\n  if (!isSelectable) return null\n\n  return (\n    <div className={styles.container} {...testIdProps('list-view-item-selection')}>\n      <Checkbox\n        sx={{marginTop: variant === 'default' ? '14px' : '10px'}}\n        checked={isSelected}\n        onChange={() => onSelect(!isSelected)}\n        aria-label={`Select: ${title}`}\n        data-listview-component=\"selection-input\"\n        {...testIdProps('list-view-item-selection-input')}\n      />\n    </div>\n  )\n}\n\ntry{ ListItemSelection.displayName ||= 'ListItemSelection' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"anchor\":\"Title-module__anchor--SyQM6\",\"markdown\":\"Title-module__markdown--KiFgL\",\"heading\":\"Title-module__heading--upUxW\",\"compact\":\"Title-module__compact--qLTco\",\"container\":\"Title-module__container--l9xi7\",\"trailingBadgesSpacer\":\"Title-module__trailingBadgesSpacer--TioiY\",\"trailingBadgesContainer\":\"Title-module__trailingBadgesContainer--XGsbF\"};","// extracted by mini-css-extract-plugin\nexport default {\"inline\":\"TitleHeader-module__inline--rL27T\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {Box, type Text} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type React from 'react'\nimport {type ReactElement, useEffect, useRef} from 'react'\n\nimport {useListViewVariant} from '../ListView/VariantContext'\nimport type {PrefixedStylableProps} from '../types'\nimport {ListItemSelection} from './Selection'\nimport styles from './Title.module.css'\nimport {useListItemTitle} from './TitleContext'\nimport {\n  ListItemLinkHeader,\n  type ListItemLinkHeaderProps,\n  ListItemMarkdownHeader,\n  type ListItemMarkdownHeaderProps,\n  ListItemStaticHeader,\n  type ListItemStaticHeaderProps,\n} from './TitleHeader'\nimport type {ListItemTrailingBadge} from './TrailingBadge'\n\nexport type ListItemTitleProps = {\n  /**\n   * Additional elements to be rendered after the title header element and trailing badge.\n   */\n  children?: React.ReactNode\n  /**\n   * An optional element used to indicate information such as the status of the item. Appears after the title text.\n   */\n  trailingBadges?: Array<ReactElement<typeof ListItemTrailingBadge>>\n} & Partial<ListItemMarkdownHeaderProps> &\n  ListItemLinkHeaderProps &\n  Omit<ListItemStaticHeaderProps, 'sanitize'> &\n  PrefixedStylableProps<'container'>\n\nexport function ListItemTitle({\n  value,\n  anchorRef: forwardedAnchorRef,\n  headingRef,\n  href,\n  target,\n  onClick,\n  onMouseEnter,\n  onMouseLeave,\n  children,\n  markdownValue,\n  containerStyle,\n  containerSx,\n  containerClassName,\n  headingStyle,\n  headingSx,\n  headingClassName,\n  anchorStyle,\n  anchorSx,\n  anchorClassName,\n  linkProps = {} as React.ComponentPropsWithoutRef<typeof Text>,\n  tooltip,\n  leadingBadge,\n  trailingBadges,\n}: ListItemTitleProps) {\n  const {variant} = useListViewVariant()\n  const {setTitle, setTitleAction} = useListItemTitle()\n  const fallbackAnchorRef = useRef<HTMLAnchorElement>(null)\n  const anchorRef = forwardedAnchorRef || fallbackAnchorRef\n\n  useEffect(() => setTitle(value), [setTitle, value])\n  useEffect(() => {\n    if ((href || onClick) && typeof anchorRef !== 'function' && anchorRef?.current) {\n      setTitleAction(() => (e: KeyboardEvent) => {\n        // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n        if (href && (e.metaKey || e.ctrlKey)) {\n          // open the link in a new tab when command or control are pressed\n          window.open(href, '_blank')\n        } else {\n          anchorRef?.current?.click()\n        }\n      })\n    }\n  }, [anchorRef, href, onClick, setTitleAction])\n\n  const baseHeaderProps = {\n    headingStyle,\n    headingSx,\n    headingClassName: clsx(styles.heading, variant === 'compact' && styles.compact, headingClassName),\n    leadingBadge,\n    tooltip,\n    headingRef,\n  }\n\n  const header = () => {\n    if (markdownValue) {\n      return (\n        <ListItemMarkdownHeader\n          markdownValue={markdownValue}\n          anchorStyle={anchorStyle}\n          anchorSx={anchorSx}\n          anchorClassName={clsx(styles.anchor, styles.markdown, anchorClassName)}\n          anchorRef={anchorRef}\n          onClick={onClick}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n          linkProps={linkProps}\n          {...baseHeaderProps}\n        />\n      )\n    }\n\n    if (href || onClick) {\n      return (\n        <ListItemLinkHeader\n          value={value}\n          anchorStyle={anchorStyle}\n          anchorSx={anchorSx}\n          anchorClassName={clsx(styles.anchor, anchorClassName)}\n          anchorRef={anchorRef}\n          href={href}\n          target={target}\n          onClick={onClick}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n          linkProps={linkProps}\n          {...baseHeaderProps}\n        />\n      )\n    }\n\n    return <ListItemStaticHeader value={value} {...baseHeaderProps} />\n  }\n\n  return (\n    <>\n      <Box\n        {...testIdProps('list-view-item-title-container')}\n        style={containerStyle}\n        sx={containerSx}\n        className={clsx(styles.container, variant === 'compact' && styles.compact, containerClassName)}\n      >\n        {header()}\n        {/* Can't use margin because the trailing badges need to wrap inline around the title\n        so we add gap after text for spacing */}\n        {trailingBadges && <span className={styles.trailingBadgesSpacer} />}\n        <span className={styles.trailingBadgesContainer}>{trailingBadges}</span>\n        {children}\n      </Box>\n      <ListItemSelection />\n    </>\n  )\n}\n\ntry{ ListItemTitle.displayName ||= 'ListItemTitle' } catch {}","import type {SafeHTMLString} from '@github-ui/safe-html'\nimport {\n  createContext,\n  type Dispatch,\n  type KeyboardEvent,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\ntype TitleContextProps = {\n  /**\n   * The main heading of the list item. Used for the aria-label of the list item and displayed visually.\n   */\n  title: SafeHTMLString\n  setTitle: (newTitle: SafeHTMLString | string) => void\n  titleAction: ((e: KeyboardEvent<HTMLLIElement>) => void) | null\n  setTitleAction: Dispatch<SetStateAction<((e: KeyboardEvent<HTMLLIElement>) => void) | null>>\n}\n\nconst TitleContext = createContext<TitleContextProps | undefined>(undefined)\n\nexport const TitleProvider = ({children}: PropsWithChildren) => {\n  const [title, setTitle] = useState('' as SafeHTMLString)\n  const [titleAction, setTitleAction] = useState<TitleContextProps['titleAction']>(null)\n  const contextProps = useMemo(\n    () =>\n      ({\n        title,\n        setTitle: newTitle => setTitle(newTitle.trim() as SafeHTMLString),\n        titleAction,\n        setTitleAction,\n      }) satisfies TitleContextProps,\n    [title, titleAction],\n  )\n  return <TitleContext.Provider value={contextProps}>{children}</TitleContext.Provider>\n}\nTitleProvider.displayName = 'ListItemTitleProvider'\n\nexport const useListItemTitle = () => {\n  const context = useContext(TitleContext)\n  if (!context) throw new Error('useListItemTitle must be used with TitleProvider.')\n  return context\n}\n\ntry{ TitleContext.displayName ||= 'TitleContext' } catch {}","import {createContext, type PropsWithChildren, useContext, useId, useMemo} from 'react'\n\nexport type IdContextProps = {\n  /**\n   * The prefix for use with unique `id` attributes for the list view and its subcomponents.\n   */\n  idPrefix: string\n}\n\nexport const IdContext = createContext<IdContextProps | undefined>(undefined)\n\nexport const IdProvider = ({children}: PropsWithChildren) => {\n  const idPrefix = useId()\n  const contextProps = useMemo(() => ({idPrefix}) satisfies IdContextProps, [idPrefix])\n\n  return <IdContext.Provider value={contextProps}>{children}</IdContext.Provider>\n}\n\nIdProvider.displayName = 'ListViewIdProvider'\n\nexport const useListViewId = () => {\n  const context = useContext(IdContext)\n  if (!context) throw new Error('useListViewId must be used with IdProvider.')\n  return context\n}\n\n/**\n * Determine if it's safe to use the `useListViewId` hook.\n * @returns true when called from within a ListView component\n */\nexport const useIsWithinListView = () => {\n  return useContext(IdContext) !== undefined\n}\n\ntry{ IdContext.displayName ||= 'IdContext' } catch {}","import {noop} from '@github-ui/noop'\nimport {createContext, type PropsWithChildren, useContext, useMemo, useState} from 'react'\n\nexport type ItemsContextProps = {\n  /**\n   * Whether any of the items in the ListView include an action bar. Will be used to ensure consistent\n   * alignment of the ListItem's trailing content.\n   */\n  anyItemsWithActionBar: boolean\n  /**\n   * Register whether any ListItem includes an action bar or not.\n   */\n  setAnyItemsWithActionBar: (hasActionBar: boolean) => void\n  /**\n   * Whether any of the items in the ListView includes actions that will move into a dropdown menu when the screen isn't big enough to\n   * fit them side by side.. Will be used to ensure consistent alignment of the ListItem's trailing content.\n   */\n  hasResizableActionsWithActionBar: boolean\n  setHasResizableActionsWithActionBar: (hasActionBar: boolean) => void\n}\n\nconst ItemsContext = createContext<ItemsContextProps>({\n  anyItemsWithActionBar: false,\n  setAnyItemsWithActionBar: noop,\n  hasResizableActionsWithActionBar: false,\n  setHasResizableActionsWithActionBar: noop,\n})\n\nexport const ItemsProvider = ({children}: PropsWithChildren) => {\n  const [anyItemsWithActionBar, setAnyItemsWithActionBar] = useState(false)\n  const [hasResizableActionsWithActionBar, setHasResizableActionsWithActionBar] = useState(false)\n  const contextProps = useMemo(\n    () =>\n      ({\n        anyItemsWithActionBar,\n        setAnyItemsWithActionBar,\n        hasResizableActionsWithActionBar,\n        setHasResizableActionsWithActionBar,\n      }) satisfies ItemsContextProps,\n    [anyItemsWithActionBar, hasResizableActionsWithActionBar],\n  )\n  return <ItemsContext.Provider value={contextProps}>{children}</ItemsContext.Provider>\n}\n\nItemsProvider.displayName = 'ListViewItemsProvider'\n\nexport const useListViewItems = () => {\n  return useContext(ItemsContext)\n}\n\ntry{ ItemsContext.displayName ||= 'ItemsContext' } catch {}","import {FocusKeys} from '@primer/behaviors'\n// eslint-disable-next-line no-restricted-imports\nimport {iterateFocusableElements} from '@primer/behaviors/utils'\nimport {useFocusZone} from '@primer/react'\n\nexport function useRovingTabIndex(): {containerRef: React.RefObject<HTMLElement>} {\n  const {containerRef} = useFocusZone({\n    strict: true,\n    bindKeys: FocusKeys.ArrowVertical | FocusKeys.HomeAndEnd | FocusKeys.PageUpDown | FocusKeys.Tab,\n    focusInStrategy: () => {\n      if (!containerRef.current) return\n      const lastFocused = containerRef.current.querySelector('[tabindex=\"0\"]') as HTMLElement\n      const listItemToFocus = lastFocused?.closest('[role=listitem]') as HTMLElement\n\n      return listItemToFocus ? listItemToFocus : lastFocused\n    },\n    focusableElementFilter: element => element.getAttribute('role') !== 'list',\n    getNextFocusable: (direction, from, event) => {\n      if (!(from instanceof HTMLElement)) return\n\n      // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      if (event.key === 'Tab' || event.code === 'Tab') {\n        // Custom tab focus behavior:\n        // 1. Check if focus is on the list item\n        // 2. Find the previous focusable element before the list-view.\n        // 3. Move focus to that.\n        if (event.shiftKey && from.getAttribute('role') === 'listitem') {\n          return getFocusElementOutsideOfListView(from, 'previous')\n        }\n\n        const listItem = from.closest('[role=listitem]') as HTMLElement\n        if (!listItem) return\n\n        const focusableElements = [...iterateFocusableElements(listItem, {strict: true})]\n\n        // Custom tab behavior when a select input and a trailing badge are present in a list item:\n        // 1. Check if focusableElements contains a trailing badge.\n        // 2. If selectable element also exists then swap the trailing badge and selection focus order\n        const hasTrailingBadgeIndex = focusableElements.findIndex(\n          element => element.parentElement?.getAttribute('data-listview-component') === 'trailing-badge',\n        )\n        const hasSelectableElementIndex = focusableElements.findIndex(\n          element => element.getAttribute('data-listview-component') === 'selection-input',\n        )\n\n        if (hasTrailingBadgeIndex >= 0 && hasSelectableElementIndex >= 0) {\n          focusableElements.splice(hasTrailingBadgeIndex, 0, focusableElements[hasSelectableElementIndex]!)\n          focusableElements.splice(hasSelectableElementIndex + 1, 1)\n        }\n\n        const eventIndex = focusableElements.indexOf(event.target as HTMLElement)\n        if (eventIndex === focusableElements.length - 1 && !event.shiftKey) {\n          // Custom tab focus behavior:\n          // 1. Check if focus is on the last focusable item in a list item\n          // 2. Find the next focusable element after the list-view.\n          // 3. Move focus to that.\n          return getFocusElementOutsideOfListView(from, 'next')\n        } else if (eventIndex > 0) {\n          // If we are within the listitem, move focus to the next/previous focusable element\n          // This is to handle dynamic `visibility: hidden` on elements (e.g. label is hidden/visible based on viewport)\n          if (event.shiftKey) return focusableElements[eventIndex - 1]\n          return focusableElements[eventIndex + 1]\n        }\n\n        // If undefined is returned, the regular algorithm to select the next element to focus will be used.\n        // https://primer.style/react/focusZone#focuszonesettings-interface\n        return\n      }\n\n      if (direction === 'previous') {\n        // Focus previous visible element\n        return getListItemElement(from, direction) || getFirstElement(from)\n      }\n\n      if (direction === 'next') {\n        // Focus next visible element\n        return getListItemElement(from, direction) || getLastElement(from)\n      }\n\n      if (direction === 'start') {\n        return getFirstElement(from)\n      }\n\n      if (direction === 'end') {\n        return getLastElement(from)\n      }\n\n      return undefined\n    },\n  })\n  return {containerRef}\n}\n\nfunction getListItemElement(element: HTMLElement, direction: 'next' | 'previous'): HTMLElement | undefined {\n  let listItem = element\n\n  // In case the event is fired from a child element, find the parent listitem\n  const foundListItem: HTMLElement | null = element.closest('[role=listitem]')\n  if (foundListItem) listItem = foundListItem\n\n  const root = listItem.closest('[role=list]')\n  if (!root) return\n\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, node => {\n    if (!(node instanceof HTMLElement)) return NodeFilter.FILTER_SKIP\n    return node.getAttribute('role') === 'listitem' ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP\n  })\n\n  let current = walker.firstChild()\n\n  let i = 0\n  while (current !== listItem) {\n    current = walker.nextNode()\n    i++\n    if (i > 500) break // fail-safe to not cause an endless loop\n  }\n\n  let next = direction === 'next' ? walker.nextNode() : walker.previousNode()\n\n  // If next element is nested inside a collapsed sublist, continue iterating\n  while (next instanceof HTMLElement && next.parentElement?.closest('[role=listitem][aria-expanded=false]')) {\n    next = direction === 'next' ? walker.nextNode() : walker.previousNode()\n  }\n\n  return next instanceof HTMLElement ? next : undefined\n}\n\nfunction getFirstElement(element: HTMLElement): HTMLElement | undefined {\n  const root = element.closest('[role=list]')\n  const first = root?.querySelector('[role=listitem]')\n  return first instanceof HTMLElement ? first : undefined\n}\n\nfunction getLastElement(element: HTMLElement): HTMLElement | undefined {\n  const root = element.closest('[role=list]')\n  const items = root?.querySelectorAll('[role=listitem]')\n\n  if (!items || items.length < 1) return\n\n  const last = items[items.length - 1]\n  if (last instanceof HTMLElement) return last\n}\n\nfunction getFocusElementOutsideOfListView(\n  element: HTMLElement,\n  direction: 'previous' | 'next',\n): HTMLElement | undefined {\n  // Find all focusable elements in the document excluding elements in ListView.\n  // All focusable elements inside a list-view are programatically given a tabindex of -1 because of the focusZone hook\n  // so by setting onlyTabbable:true we disregard elements in ListView to find the next focusable element outside of list-view\n  const focusableElements = [...iterateFocusableElements(document.documentElement, {strict: true, onlyTabbable: true})]\n  const currentFocusedElementIndex = focusableElements.indexOf(element)\n\n  // Search for the nearest focusable element before/after the current focused element\n  // that is outside of a list view and is focusable.\n  return direction === 'next'\n    ? focusableElements[currentFocusedElementIndex + 1]\n    : focusableElements[currentFocusedElementIndex - 1]\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"ul\":\"ListView-module__ul--vMLEZ\",\"container\":\"ListView-module__container--zF6wW\"};","import {noop} from '@github-ui/noop'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {Box, Heading} from '@primer/react'\nimport {clsx} from 'clsx'\nimport {\n  Children,\n  type MutableRefObject,\n  type PropsWithChildren,\n  type ReactElement,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\n\nimport {defaultVariant} from '../constants'\nimport {useRovingTabIndex} from '../hooks/use-roving-tab-index'\nimport type {PrefixedStylableProps} from '../types'\nimport {IdProvider, useListViewId} from './IdContext'\nimport {ItemsProvider} from './ItemsContext'\nimport styles from './ListView.module.css'\nimport type {ListViewMetadata} from './Metadata'\nimport {MultiPageSelectionProvider} from './MultiPageSelectionContext'\nimport {type SelectionContextProps, SelectionProvider} from './SelectionContext'\nimport {TitleProvider, type TitleProviderProps, useListViewTitle} from './TitleContext'\nimport {VariantProvider, type VariantType} from './VariantContext'\n\nexport type ListViewProps = PropsWithChildren<{\n  /**\n   * An optional element to contain bulk actions, a 'Select all' checkbox, a density toggle for the view, etc.\n   */\n  metadata?: ReactElement<typeof ListViewMetadata>\n  /**\n   * Controls the width and height of the list and its contents\n   */\n  variant?: VariantType\n  /**\n   * Callback for when the variant changes\n   */\n  onVariantChange?: (variant: VariantType) => void\n  /**\n   * Controls item's selection mode; bulk actions are allowed if true. Defaults to not selectable.\n   */\n  isSelectable?: boolean\n  /**\n   * What a single list item should be called. Used to customize assistive text about how many list items are\n   * selected. Defaults to 'list item'.\n   */\n  singularUnits?: string\n  /**\n   * What many list items are called. Used to customize assistive text about how many list items are selected.\n   * Defaults to 'list items'.\n   */\n  pluralUnits?: string\n  /**\n   * Optional ID of an element that labels the list view. When provided, this takes the place of the default sr-only title.\n   */\n  ariaLabelledBy?: string\n\n  listRef?: MutableRefObject<HTMLUListElement | undefined>\n}> &\n  Omit<TitleProviderProps, 'children'> &\n  Pick<SelectionContextProps, 'totalCount'> &\n  Partial<Pick<SelectionContextProps, 'selectedCount'>> &\n  PrefixedStylableProps<'itemsList'>\n\nexport const ListView = ({\n  title,\n  titleHeaderTag,\n  children,\n  totalCount,\n  selectedCount = 0,\n  variant: externalVariant = defaultVariant,\n  singularUnits,\n  pluralUnits,\n  onVariantChange = noop,\n  isSelectable,\n  ...rest\n}: PropsWithChildren<ListViewProps>): JSX.Element => {\n  const [variant, setVariant] = useState(externalVariant)\n\n  useEffect(() => setVariant(externalVariant), [externalVariant])\n\n  useEffect(() => {\n    onVariantChange?.(variant)\n  }, [onVariantChange, variant])\n\n  const countOnPage = useMemo(() => Children.toArray(children).length, [children])\n\n  return (\n    <IdProvider>\n      <TitleProvider title={title} titleHeaderTag={titleHeaderTag}>\n        <VariantProvider variant={variant} setVariant={setVariant}>\n          <SelectionProvider\n            countOnPage={countOnPage}\n            selectedCount={selectedCount}\n            totalCount={totalCount}\n            singularUnits={singularUnits}\n            pluralUnits={pluralUnits}\n            isSelectable={isSelectable}\n          >\n            <MultiPageSelectionProvider>\n              <ItemsProvider>\n                <ListViewContainer {...rest}>{children}</ListViewContainer>\n              </ItemsProvider>\n            </MultiPageSelectionProvider>\n          </SelectionProvider>\n        </VariantProvider>\n      </TitleProvider>\n    </IdProvider>\n  )\n}\n\nconst ListViewContainer = ({\n  metadata,\n  children,\n  listRef,\n  ariaLabelledBy: externalAriaLabelledBy,\n  itemsListClassName: className,\n  itemsListStyle: style,\n  itemsListSx: sx,\n  ...rest\n}: Omit<ListViewProps, 'title' | 'titleHeaderTag'>): JSX.Element => {\n  const {idPrefix} = useListViewId()\n  const {title, titleHeaderTag} = useListViewTitle()\n  const {containerRef} = useRovingTabIndex() as {containerRef: MutableRefObject<HTMLUListElement>}\n\n  useEffect(() => {\n    if (listRef) {\n      listRef.current = containerRef.current\n    }\n  }, [containerRef, listRef])\n\n  const listViewContainerTitleId = externalAriaLabelledBy ?? `${idPrefix}-list-view-container-title`\n\n  return (\n    <div id={`${idPrefix}-list-view-container`} className={styles.container}>\n      {!externalAriaLabelledBy && (\n        <Heading\n          className=\"sr-only\"\n          as={titleHeaderTag}\n          id={listViewContainerTitleId}\n          {...testIdProps('list-view-title')}\n        >\n          {title}\n        </Heading>\n      )}\n      {/**\n       * The `metadata` component might have a title rendered in it as well, so there can be some\n       * duplication between it and the sr-only list-view-container-title Heading above. However, having that title\n       * is important for accessibility and it's better to slightly over-describe than not. The `metadata`\n       * section is optional while the title attribute and list-view-container-title that renders it are required.\n       */}\n      {metadata}\n      <Box\n        as=\"ul\"\n        className={clsx(styles.ul, className)}\n        style={style}\n        sx={sx}\n        ref={containerRef}\n        aria-labelledby={listViewContainerTitleId}\n        tabIndex={-1}\n        // TODO: update roving tabIndex to not depend on this unnecessary role\n        role=\"list\"\n        data-listview-component=\"items-list\"\n        {...testIdProps('list-view-items')}\n        {...rest}\n      >\n        {children}\n      </Box>\n    </div>\n  )\n}\n\ntry{ ListView.displayName ||= 'ListView' } catch {}\ntry{ ListViewContainer.displayName ||= 'ListViewContainer' } catch {}","import {\n  createContext,\n  type Dispatch,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\ntype MultiPageSelectionContextProps = {\n  /**\n   * Indicate whether list items from multiple pages of ListView items can be selected by the user at a time. Used to\n   * determine when the 'Select all' checkbox should be rendered in an indeterminate state, to indicate when some but\n   * not all selectable items are selected.\n   */\n  multiPageSelectionAllowed: boolean\n  setMultiPageSelectionAllowed?: Dispatch<SetStateAction<boolean>>\n}\n\nconst MultiPageSelectionContext = createContext<MultiPageSelectionContextProps>({\n  multiPageSelectionAllowed: false,\n})\n\nexport type MultiPageSelectionProviderProps = PropsWithChildren<{\n  /**\n   * Indicate whether list items from multiple pages of ListView items can be selected by the user at a time. Used to\n   * determine when the 'Select all' checkbox should be rendered in an indeterminate state, to indicate when some but\n   * not all selectable items are selected. Defaults to false.\n   */\n  multiPageSelectionAllowed?: MultiPageSelectionContextProps['multiPageSelectionAllowed']\n}>\n\nexport const MultiPageSelectionProvider = ({\n  children,\n  multiPageSelectionAllowed: externalMultiPageSelectionAllowed = false,\n}: MultiPageSelectionProviderProps) => {\n  const [multiPageSelectionAllowed, setMultiPageSelectionAllowed] = useState(externalMultiPageSelectionAllowed)\n  const contextProps = useMemo(() => {\n    return {\n      multiPageSelectionAllowed,\n      setMultiPageSelectionAllowed,\n    } satisfies MultiPageSelectionContextProps\n  }, [multiPageSelectionAllowed])\n\n  return <MultiPageSelectionContext.Provider value={contextProps}>{children}</MultiPageSelectionContext.Provider>\n}\n\nMultiPageSelectionProvider.displayName = 'ListViewMultiPageSelectionProvider'\n\nexport const useListViewMultiPageSelection = () => {\n  return useContext(MultiPageSelectionContext)\n}\n\ntry{ MultiPageSelectionContext.displayName ||= 'MultiPageSelectionContext' } catch {}","import {noop} from '@github-ui/noop'\nimport {\n  createContext,\n  type Dispatch,\n  type PropsWithChildren,\n  type SetStateAction,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\n\nimport {defaultIsSelectable} from '../constants'\n\nconst defaultSingularUnits = 'list item'\nconst defaultPluralUnits = 'list items'\n\nexport type SelectionContextProps = {\n  /**\n   * How many items are selected in the list. Only applicable when the ListView's isSelectable=true.\n   */\n  selectedCount: number\n\n  /**\n   * Update how many items are selected in the ListView.\n   */\n  setSelectedCount: Dispatch<SetStateAction<number>>\n\n  /**\n   * How many items are in the list. Should represent how many items are in all pages of results, if multiple lists\n   * are shown across many pages.\n   */\n  totalCount?: number\n\n  /**\n   * How many list items are shown on the current page. Reflects how many items can be toggled when the 'Select all'\n   * checkbox is checked or unchecked.\n   */\n  countOnPage: number\n\n  /**\n   * Determine if the 'Select all' checkbox is in a checked state. Will be true when all list items currently rendered\n   * in the ListView are selected.\n   */\n  isSelectAllChecked: boolean\n\n  /**\n   * Determine if any list items are currently selected.\n   */\n  anyItemsSelected: boolean\n\n  /**\n   * What a single list item should be called. Used to customize assistive text about how many list items are\n   * selected.\n   */\n  singularUnits: string\n\n  /**\n   * What many list items are called. Used to customize assistive text about how many list items are selected.\n   */\n  pluralUnits: string\n\n  /**\n   * Whether multiple items at a time or no items can be selected.\n   */\n  isSelectable: boolean\n}\n\nconst SelectionContext = createContext<SelectionContextProps>({\n  selectedCount: 0,\n  setSelectedCount: noop,\n  countOnPage: 0,\n  isSelectAllChecked: false,\n  anyItemsSelected: false,\n  singularUnits: defaultSingularUnits,\n  pluralUnits: defaultPluralUnits,\n  isSelectable: defaultIsSelectable,\n})\n\nexport type SelectionProviderProps = PropsWithChildren<\n  Pick<SelectionContextProps, 'totalCount'> & {\n    singularUnits?: SelectionContextProps['singularUnits']\n    pluralUnits?: SelectionContextProps['pluralUnits']\n    isSelectable?: SelectionContextProps['isSelectable']\n    selectedCount?: SelectionContextProps['selectedCount']\n    countOnPage?: SelectionContextProps['countOnPage']\n  }\n>\n\nexport const SelectionProvider = (\n  {\n    children,\n    countOnPage = 0,\n    singularUnits = defaultSingularUnits,\n    pluralUnits = defaultPluralUnits,\n    totalCount,\n    selectedCount: externalSelectedCount = 0,\n    isSelectable = defaultIsSelectable,\n  }: SelectionProviderProps = {\n    singularUnits: defaultSingularUnits,\n    pluralUnits: defaultPluralUnits,\n    selectedCount: 0,\n    countOnPage: 0,\n    isSelectable: defaultIsSelectable,\n  },\n) => {\n  const [selectedCount, setSelectedCount] = useState(externalSelectedCount)\n\n  useEffect(() => setSelectedCount(externalSelectedCount), [externalSelectedCount])\n\n  // Allow for more than shown on page since some ListViews allow selecting all pages of items, and we want to\n  // continue showing the 'Select all' checkbox as checked when more than the current page of items is selected.\n  const isSelectAllChecked = selectedCount > 0 && selectedCount >= countOnPage\n  const anyItemsSelected = selectedCount > 0\n  const contextProps = useMemo(() => {\n    return {\n      totalCount,\n      countOnPage,\n      selectedCount,\n      setSelectedCount,\n      isSelectAllChecked,\n      anyItemsSelected,\n      singularUnits,\n      pluralUnits,\n      isSelectable,\n    } satisfies SelectionContextProps\n  }, [\n    selectedCount,\n    isSelectAllChecked,\n    anyItemsSelected,\n    totalCount,\n    countOnPage,\n    singularUnits,\n    pluralUnits,\n    isSelectable,\n  ])\n\n  return <SelectionContext.Provider value={contextProps}>{children}</SelectionContext.Provider>\n}\nSelectionProvider.displayName = 'ListViewSelectionProvider'\n\nexport const useListViewSelection = () => {\n  return useContext(SelectionContext)\n}\n\ntry{ SelectionContext.displayName ||= 'SelectionContext' } catch {}","import {createContext, type PropsWithChildren, useContext, useMemo, useState} from 'react'\n\nimport {defaultTitle, defaultTitleHeaderTag, type HeaderTag} from '../constants'\n\nexport type TitleContextProps = {\n  /**\n   * A title provides the ListView with a concise, descriptive name that communicates what kind of content it\n   * contains. Will be visually hidden.\n   */\n  title: string\n\n  /**\n   * The HTML element used for the visually hidden title. Should change depending on the information hierarchy of the\n   * page where the ListView is used.\n   */\n  titleHeaderTag: HeaderTag\n\n  hasMetadataTitle: boolean\n  setHasMetadataTitle: (hasMetadataTitle: boolean) => void\n}\n\nconst TitleContext = createContext<TitleContextProps | undefined>(undefined)\n\nexport type TitleProviderProps = PropsWithChildren<{\n  /**\n   * The HTML element used for the visually hidden title. Should change depending on the information hierarchy of the\n   * page where the ListView is used. Defaults to an `<h2>` tag.\n   */\n  titleHeaderTag?: TitleContextProps['titleHeaderTag']\n}> &\n  Pick<TitleContextProps, 'title'>\n\nexport const TitleProvider = ({children, title, titleHeaderTag = defaultTitleHeaderTag}: TitleProviderProps) => {\n  const [hasMetadataTitle, setHasMetadataTitle] = useState(false)\n  const contextProps = useMemo(\n    () =>\n      ({\n        title: title.trim() || defaultTitle,\n        titleHeaderTag,\n        hasMetadataTitle,\n        setHasMetadataTitle,\n      }) satisfies TitleContextProps,\n    [hasMetadataTitle, title, titleHeaderTag],\n  )\n  return <TitleContext.Provider value={contextProps}>{children}</TitleContext.Provider>\n}\n\nTitleProvider.displayName = 'ListViewTitleProvider'\n\nexport const useListViewTitle = () => {\n  const context = useContext(TitleContext)\n  if (!context) throw new Error('useListViewTitle must be used with TitleProvider.')\n  return context\n}\n\ntry{ TitleContext.displayName ||= 'TitleContext' } catch {}","import {noop} from '@github-ui/noop'\nimport {createContext, type PropsWithChildren, useContext, useMemo} from 'react'\n\nimport {defaultVariant, type Variants} from '../constants'\n\nexport type VariantType = (typeof Variants)[number]\n\ntype VariantContextProps = {\n  /**\n   * How the list is being displayed. Controls the width and height of the list and its contents.\n   */\n  variant: VariantType\n  setVariant: (variant: VariantType) => void\n}\n\nconst VariantContext = createContext<VariantContextProps | undefined>(undefined)\n\nexport type VariantProviderProps = PropsWithChildren<{\n  variant?: VariantContextProps['variant']\n  setVariant?: VariantContextProps['setVariant']\n}>\n\nexport const VariantProvider = ({children, variant = defaultVariant, setVariant = noop}: VariantProviderProps) => {\n  const contextProps = useMemo(() => ({variant, setVariant}) satisfies VariantContextProps, [setVariant, variant])\n  return <VariantContext.Provider value={contextProps}>{children}</VariantContext.Provider>\n}\n\nVariantProvider.displayName = 'ListViewVariantProvider'\n\nexport const useListViewVariant = () => {\n  const context = useContext(VariantContext)\n  if (!context) throw new Error('useListViewVariant must be used with VariantProvider.')\n  return context\n}\n\ntry{ VariantContext.displayName ||= 'VariantContext' } catch {}","import {Box, type BoxProps, Text, type TextProps} from '@primer/react'\nimport type {ForwardRefComponent as PolymorphicForwardRefComponent} from '@radix-ui/react-polymorphic'\nimport DOMPurify, {type Config as DOMPurifyConfig} from 'dompurify'\nimport type React from 'react'\nimport {forwardRef} from 'react'\n\ntype Brand<TBase, TBrand extends string> = TBase & {__brand: TBrand}\n\n/**\n * A string that has specifically been marked as verified.\n *\n * WARNING: A string should only be branded as a `SafeHTMLString` if one of the following applies:\n * - it comes from a trusted source on the server\n * - has known static content, or\n * - has been sanitized by DOMPurify.\n */\nexport type SafeHTMLString = Brand<string, 'SafeHTMLString'>\n\ninterface BaseHTMLProps {\n  /**\n   * Set the rendered HTML of the component. Use this prop if the source is untrusted. If you know the string can be\n   * trusted, or has already been sanitized, use the `html` prop instead to avoid re-sanitizing.\n   */\n  unverifiedHTML?: string\n  /**\n   * Optional config passed to DOMPurify when sanitizing `unverifiedHTML`.\n   */\n  unverifiedHTMLConfig?: DOMPurifyConfig\n  /**\n   * Set the rendered HTML of the component. To prevent XSS, ensure that the source of this\n   * HTML is trusted! If the source is untrusted, use `unverifiedHTML` instead.\n   */\n  html?: SafeHTMLString\n}\n\ninterface VerifiedHTMLProps extends BaseHTMLProps {\n  unverifiedHTML?: undefined\n  html: SafeHTMLString\n}\n\ninterface UnverifiedHTMLProps extends BaseHTMLProps {\n  unverifiedHTML: string\n  html?: undefined\n}\n\nexport type SafeHTMLProps = VerifiedHTMLProps | UnverifiedHTMLProps\n\ntype PropsWithHTML<T> = T & SafeHTMLProps\n\nfunction getSafeHTMLAndProps<T>(propsWithHtml: PropsWithHTML<T>) {\n  /**\n   * Note we have to explicitly cast props to T because TypeScript\n   * is not properly converting Omit<T & VerifiedHTMLProps, 'html'> to T.\n   *\n   * We include the `as unknown` intermediate step to avoid warnings\n   * about insufficient type overlap\n   */\n\n  if ('html' in propsWithHtml && propsWithHtml.html !== undefined) {\n    const {html, ...props} = propsWithHtml\n    return {\n      // This is verified html, so we can use it directly\n      safeHTML: html,\n      props: props as unknown as T,\n    }\n  }\n\n  const {unverifiedHTML, unverifiedHTMLConfig, ...props} = propsWithHtml\n  const config = {\n    ...unverifiedHTMLConfig,\n    // we want to ensure we are returning a string not a dom node\n    RETURN_DOM: false,\n    RETURN_DOM_FRAGMENT: false,\n  } satisfies DOMPurifyConfig\n\n  return {\n    // Run the unverified HTML through DOMPurify to sanitize it\n    safeHTML: DOMPurify.sanitize(unverifiedHTML, config),\n    props: props as unknown as T,\n  }\n}\n\n/**\n * `SafeHTMLBox` extends `Box` from `@primer/react` with props for safely\n * rendering HTML strings. Exactly one `html` or `unverifiedHTML` must be\n * supplied.\n *\n * `html` only supports strings that have specifically been marked as verified,\n * which means either they come from a trusted source on the server, they have\n * known static contents, or they have been sanitized by DOMPurify.\n *\n * `unverifiedHTML` supports arbitrary strings; they will be run through\n * DOMPurify before being put in the DOM.\n */\nexport const SafeHTMLBox = withSafeHTML<BoxProps>(Box) as PolymorphicForwardRefComponent<\n  'div' | 'span' | 'pre' | 'table' | 'tbody' | 'tr' | 'td' | 'ul' | 'ol' | 'li',\n  PropsWithHTML<BoxProps>\n>\nSafeHTMLBox.displayName = 'SafeHTMLBox'\n\n/**\n * `SafeHTMLText` extends `Text` from `@primer/react` with props for safely\n * rendering HTML strings. Exactly one `html` or `unverifiedHTML` must be\n * supplied.\n *\n * `html` only supports strings that have specifically been marked as verified,\n * which means either they come from a trusted source on the server, they have\n * known static contents, or they have been sanitized by DOMPurify.\n *\n * `unverifiedHTML` supports arbitrary strings; they will be run through\n * DOMPurify before being put in the DOM.\n */\nexport const SafeHTMLText = withSafeHTML<TextProps>(Text) as PolymorphicForwardRefComponent<\n  'div' | 'span' | 'p' | 'strong' | 'em' | 'pre' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'a',\n  PropsWithHTML<TextProps>\n>\nSafeHTMLText.displayName = 'SafeHTMLText'\n\n/**\n * A higher-order component that extends a basic component by offering\n * `html` and `unverifiedHTML` props that are safe alternatives to `dangerouslySetInnerHTML`.\n */\nfunction withSafeHTML<T>(Component: React.ComponentType<T>) {\n  // We give these display names above\n  // eslint-disable-next-line react/display-name\n  const SafeHTMLComponent = forwardRef<HTMLSpanElement, PropsWithHTML<T>>((propsWithHtml, ref) => {\n    const {safeHTML, props} = getSafeHTMLAndProps(propsWithHtml)\n    // This is the only place in the codebase where `dangerouslySetInnerHTML` should be allowed\n    // eslint-disable-next-line react/forbid-component-props\n    return <Component ref={ref} {...props} dangerouslySetInnerHTML={safeHTML ? {__html: safeHTML} : undefined} />\n  })\n\n  return SafeHTMLComponent\n}\n\n/**\n * `SafeHTMLDiv` extends `div`with props for safely rendering HTML strings.\n * Exactly one `html` or `unverifiedHTML` must be supplied.\n *\n * `html` only supports strings that have specifically been marked as verified,\n * which means either they come from a trusted source on the server, they have\n * known static contents, or they have been sanitized by DOMPurify.\n *\n * `unverifiedHTML` supports arbitrary strings; they will be run through\n * DOMPurify before being put in the DOM.\n */\nexport const SafeHTMLDiv = forwardRef<\n  HTMLDivElement,\n  PropsWithHTML<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>>\n>((propsWithHtml, ref) => {\n  const {safeHTML, props} = getSafeHTMLAndProps(propsWithHtml)\n  // eslint-disable-next-line react/no-danger\n  return <div ref={ref} {...props} dangerouslySetInnerHTML={safeHTML ? {__html: safeHTML} : undefined} />\n})\nSafeHTMLDiv.displayName = 'SafeHTMLDiv'\n\ntry{ SafeHTMLComponent.displayName ||= 'SafeHTMLComponent' } catch {}"],"names":["ActionBarContentContext","createContext","actions","staticMenuActions","label","ActionBarContentProvider","children","value","variant","useMemo","Provider","useActionBarContent","context","useContext","displayName","ActionBarRefContext","outerContainerRef","createRef","itemContainerRef","ActionBarRefProvider","anchorRef","useRef","useActionBarRef","columnGap","el","computedStyle","window","getComputedStyle","parseInt","calculateItemOffsetWidth","item","itemContainer","gap","width","getBoundingClientRect","itemStyle","marginLeft","marginRight","calculateMenuSpace","outerContainer","availableSpace","calculateAvailableSpace","menuSpace","offsetLeft","offsetWidth","gapFromDensity","density","ActionBarResizeContext","visibleChildEndIndex","justifySpaceBetween","recalculateItemSize","noop","ActionBarResizeProvider","actionKeys","totalActions","length","setVisibleChildEndIndex","useState","previousBarWidth","setPreviousBarWidth","initialBarWidth","setInitialBarWidth","itemOffsetWidths","setItemOffsetWidths","Map","map","key","undefined","setJustifySpaceBetween","allItemWidthsCalculated","every","has","get","itemWidthAt","useCallback","index","current","newWidth","oldVal","isNaN","newVal","Array","from","entries","set","shrink","Math","max","grow","itemWidth","min","update","currentBarWidth","useIsomorphicLayoutEffect","widths","querySelector","useResizeObserver","useActionBarResize","defaultMenuToggleIcon","KebabHorizontalIcon","defaultMenuToggleVariant","OverflowMenu","anchorProps","ariaLabel","icon","otherAnchorProps","merge","trim","sx","flexShrink","overflowActions","slice","hasOverflowActions","hasStaticMenuActions","ActionMenu","Anchor","IconButton","testIdProps","Overlay","align","ActionList","staticMenuAction","Fragment","render","action","VisibleItem","actionKey","itemRef","Box","data-action-bar-item","display","ref","defaultStyles","justifyContent","overflow","flexDirection","alignItems","boxSizing","flexGrow","VisibleItems","props","visibleActions","position","minWidth","VisibleAndOverflowContainer","overflowMenuToggleProps","outerContainerSx","useFocusZone","containerRef","bindKeys","FocusKeys","ArrowHorizontal","HomeAndEnd","focusOutBehavior","disabled","role","aria-label","defaultDensity","ActionBar","className","style","contentProviderValue","resizeProviderValue","HeaderTags","HeaderTagLevels","defaultTitleHeaderTag","defaultHeaderTags","listitem","defaultVariant","defaultIsSelectable","defaultTitle","useNextHeaderTag","level","titleHeaderTag","hasMetadataTitle","useListViewTitle","levelIndex","findIndex","e","headerIndex","indexOf","ListItemActionBar","anchorIcon","setAnyItemsWithActionBar","setHasResizableActionsWithActionBar","useListViewItems","useEffect","clsx","styles","container","hasActions","GitHubUiActionBar","DescriptionContext","DescriptionProvider","description","setDescription","contextProps","useListItemDescription","ActionsContext","actionsOpen","setActionsOpen","ActionsProvider","LeadingBadgeContext","LeadingBadgeProvider","leadingBadge","setLeadingBadge","useListItemLeadingBadge","ListItemMetadataContainer","ListItemBase","isActive","title","metadata","secondaryActions","metadataContainerStyle","metadataContainerSx","metadataContainerClassName","idPrefix","useListViewId","isSelectable","useListViewSelection","useListViewVariant","anyItemsWithActionBar","hasResizableActionsWithActionBar","uniqueIdSuffix","useId","isSelected","onSelect","useListItemSelection","status","labelStatus","useListItemStatus","labelTitle","titleAction","useListItemTitle","labelDescription","labelLeadingBadge","hasNewActivity","useListItemNewActivity","document","activeElement","tagName","focus","onKeyDown","preventDefault","getAriaLabel","labelSelected","labelNewActivity","hasSecondaryActions","hasMetadata","isArray","labelAdditionalInfo","filter","str","join","replace","endsWith","as","id","listItem","selected","compact","hasActionBar","tabIndex","metadataItem","ListItem","rest","setSelectedCount","isSelectedRef","count","selectionProviderProps","TitleProvider","SelectionProvider","NewActivityProvider","StatusProvider","NewActivityContext","setHasNewActivity","SelectionContext","announce","StatusContext","setStatus","TitleTag","ListItemSelection","div","Checkbox","marginTop","checked","onChange","data-listview-component","TitleHeading","headingStyle","headingClassName","headingSx","headingRef","Text","HeadingLink","anchorStyle","anchorClassName","anchorSx","linkProps","args","Link","inline","ListItemMarkdownHeader","markdownValue","tooltip","SafeHTMLText","html","ListItemLinkHeader","ListItemStaticHeader","ListItemTitle","forwardedAnchorRef","href","target","onClick","onMouseEnter","onMouseLeave","containerStyle","containerSx","containerClassName","trailingBadges","setTitle","setTitleAction","fallbackAnchorRef","metaKey","ctrlKey","open","click","baseHeaderProps","heading","anchor","markdown","span","trailingBadgesSpacer","trailingBadgesContainer","TitleContext","newTitle","IdContext","IdProvider","useIsWithinListView","ItemsContext","ItemsProvider","getListItemElement","element","direction","foundListItem","closest","root","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","node","HTMLElement","getAttribute","FILTER_ACCEPT","FILTER_SKIP","firstChild","i","nextNode","next","previousNode","parentElement","getFirstElement","first","getLastElement","items","querySelectorAll","last","getFocusElementOutsideOfListView","focusableElements","iterateFocusableElements","documentElement","strict","onlyTabbable","currentFocusedElementIndex","ListView","totalCount","selectedCount","externalVariant","singularUnits","pluralUnits","onVariantChange","setVariant","countOnPage","Children","toArray","VariantProvider","MultiPageSelectionProvider","ListViewContainer","listRef","ariaLabelledBy","externalAriaLabelledBy","itemsListClassName","itemsListStyle","itemsListSx","useRovingTabIndex","ArrowVertical","PageUpDown","Tab","focusInStrategy","lastFocused","listItemToFocus","focusableElementFilter","getNextFocusable","event","code","shiftKey","hasTrailingBadgeIndex","hasSelectableElementIndex","splice","eventIndex","listViewContainerTitleId","Heading","ul","aria-labelledby","MultiPageSelectionContext","multiPageSelectionAllowed","externalMultiPageSelectionAllowed","setMultiPageSelectionAllowed","useListViewMultiPageSelection","defaultSingularUnits","defaultPluralUnits","isSelectAllChecked","anyItemsSelected","externalSelectedCount","setHasMetadataTitle","VariantContext","SafeHTMLComponent","getSafeHTMLAndProps","propsWithHtml","safeHTML","unverifiedHTML","unverifiedHTMLConfig","config","RETURN_DOM","RETURN_DOM_FRAGMENT","DOMPurify","SafeHTMLBox","withSafeHTML","Component","forwardRef","dangerouslySetInnerHTML","__html","SafeHTMLDiv"],"sourceRoot":""}
---
summary: Update a release
description: Users with push access to the repository can edit a release.
tags:
  - repos
operationId: repos/update-release
externalDocs:
  description: API method documentation
  url: '${externalDocsUrl}/rest/releases/releases#update-a-release'
parameters:
  - $ref: '../../components/parameters/owner.yaml'
  - $ref: '../../components/parameters/repo.yaml'
  - $ref: '../../components/parameters/release-id.yaml'
requestBody:
  required: false
  content:
    application/json:
      schema:
        type: object
        properties:
          tag_name:
            type: string
            description: The name of the tag.
          target_commitish:
            type: string
            description: "Specifies the commitish value that determines where the
              Git tag is created from. Can be any branch or commit SHA. Unused if
              the Git tag already exists. Default: the repository's default branch."
          name:
            type: string
            description: The name of the release.
          body:
            type: string
            description: Text describing the contents of the tag.
          draft:
            type: boolean
            description: '`true` makes the release a draft, and `false` publishes
              the release.'
          prerelease:
            type: boolean
            description: '`true` to identify the release as a prerelease, `false`
              to identify the release as a full release.'
          make_latest:
            type: string
            description: "Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version."
            enum:
              - "true"
              - "false"
              - "legacy"
            default: true
          discussion_category_name:
            type: string
            description: If specified, a discussion of the specified category is created
              and linked to the release. The value must be a category that already
              exists in the repository. If there is already a discussion linked to
              the release, this parameter is ignored. For more information, see "[Managing
              categories for discussions in your repository](${externalDocsUrl}/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
      examples:
        default:
          value:
            tag_name: v1.0.0
            target_commitish: master
            name: v1.0.0
            body: Description of the release
            draft: false
            prerelease: false
responses:
  '200':
    description: Response
    content:
      application/json:
        schema:
          $ref: '../../components/schemas/release.yaml'
        examples:
          default:
            $ref: '../../components/examples/release.yaml'
  '404':
    description: Not Found if the discussion category name is invalid
    content:
      application/json:
        schema:
          $ref: '../../components/schemas/basic-error.yaml'
x-github-releases:
  - ghec
  - ghes: '>= 2.18'
  - api.github.com
x-github:
  githubCloudOnly: false
  enabledForGitHubApps: true

  category: releases
  subcategory: releases
x-github-internal:
  owner: '@github/repos'
  path: '/repos/{owner}/{repo}/releases/{release_id}'
  http-method: patch
  alternative-http-methods:
    - post
  service-tier: 1
  published: true
x-githubEnterpriseOverlays:
  '*':
    requestBody:
      content:
        application/json:
          schema:
            properties:
              discussion_category_name:
    responses:
      '404':
  '<= 3.7':
    requestBody:
      content:
        application/json:
          schema:
            properties:
              make_latest:

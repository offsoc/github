# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PlatformTypes::Issue`.
# Please instead update this file by running `bin/tapioca dsl PlatformTypes::Issue`.

class PlatformTypes::Issue < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(PlatformTypes::AbuseReportConnection) }
  def abuse_reports; end

  sig { returns(T::Boolean) }
  def abuse_reports?; end

  sig { returns(T.nilable(String)) }
  def active_lock_reason; end

  sig { returns(T::Boolean) }
  def active_lock_reason?; end

  sig { returns(PlatformTypes::UserConnection) }
  def assignees; end

  sig { returns(T::Boolean) }
  def assignees?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def author; end

  sig { returns(T::Boolean) }
  def author?; end

  sig { returns(String) }
  def author_association; end

  sig { returns(T::Boolean) }
  def author_association?; end

  sig { returns(T.nilable(PlatformTypes::Sponsorship)) }
  def author_to_repo_owner_sponsorship; end

  sig { returns(T::Boolean) }
  def author_to_repo_owner_sponsorship?; end

  sig { returns(T::Boolean) }
  def authored_by_subject_author; end

  sig { returns(T::Boolean) }
  def authored_by_subject_author?; end

  sig { returns(String) }
  def body; end

  sig { returns(T::Boolean) }
  def body?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def body_html; end

  sig { returns(T::Boolean) }
  def body_html?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def body_resource_path; end

  sig { returns(T::Boolean) }
  def body_resource_path?; end

  sig { returns(String) }
  def body_text; end

  sig { returns(T::Boolean) }
  def body_text?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def body_url; end

  sig { returns(T::Boolean) }
  def body_url?; end

  sig { returns(String) }
  def body_version; end

  sig { returns(T::Boolean) }
  def body_version?; end

  sig { returns(T::Boolean) }
  def closed; end

  sig { returns(T::Boolean) }
  def closed?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def closed_at; end

  sig { returns(T::Boolean) }
  def closed_at?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def closed_by; end

  sig { returns(T::Boolean) }
  def closed_by?; end

  sig { returns(T.nilable(PlatformTypes::PullRequestConnection)) }
  def closed_by_pull_requests_references; end

  sig { returns(T::Boolean) }
  def closed_by_pull_requests_references?; end

  sig { returns(T.nilable(PlatformTypes::IssueComment)) }
  def comment; end

  sig { returns(T::Boolean) }
  def comment?; end

  sig { returns(String) }
  def comment_type; end

  sig { returns(T::Boolean) }
  def comment_type?; end

  sig { returns(PlatformTypes::IssueCommentConnection) }
  def comments; end

  sig { returns(T::Boolean) }
  def comments?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def created_at; end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T::Boolean) }
  def created_via_email; end

  sig { returns(T::Boolean) }
  def created_via_email?; end

  sig { returns(T.nilable(Integer)) }
  def database_id; end

  sig { returns(T::Boolean) }
  def database_id?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def editor; end

  sig { returns(T::Boolean) }
  def editor?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def full_database_id; end

  sig { returns(T::Boolean) }
  def full_database_id?; end

  sig { returns(PlatformTypes::Hovercard) }
  def hovercard; end

  sig { returns(T::Boolean) }
  def hovercard?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T::Boolean) }
  def includes_created_edit; end

  sig { returns(T::Boolean) }
  def includes_created_edit?; end

  sig { returns(T.nilable(T::Boolean)) }
  def is_pinned; end

  sig { returns(T::Boolean) }
  def is_pinned?; end

  sig { returns(T.nilable(T::Boolean)) }
  def is_read_by_viewer; end

  sig { returns(T::Boolean) }
  def is_read_by_viewer?; end

  sig { returns(T::Boolean) }
  def is_transfer_in_progress; end

  sig { returns(T::Boolean) }
  def is_transfer_in_progress?; end

  sig { returns(T.nilable(PlatformTypes::IssueType)) }
  def issue_type; end

  sig { returns(T::Boolean) }
  def issue_type?; end

  sig { returns(T.nilable(PlatformTypes::LabelConnection)) }
  def labels; end

  sig { returns(T::Boolean) }
  def labels?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def last_edited_at; end

  sig { returns(T::Boolean) }
  def last_edited_at?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def last_reported_at; end

  sig { returns(T::Boolean) }
  def last_reported_at?; end

  sig { returns(T.nilable(PlatformTypes::UserContentEdit)) }
  def last_user_content_edit; end

  sig { returns(T::Boolean) }
  def last_user_content_edit?; end

  sig { returns(PlatformTypes::LinkedBranchConnection) }
  def linked_branches; end

  sig { returns(T::Boolean) }
  def linked_branches?; end

  sig { returns(T::Boolean) }
  def locked; end

  sig { returns(T::Boolean) }
  def locked?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def markdown_preview; end

  sig { returns(T::Boolean) }
  def markdown_preview?; end

  sig { returns(T.nilable(PlatformTypes::MentionableItemConnection)) }
  def mentionable_items; end

  sig { returns(T::Boolean) }
  def mentionable_items?; end

  sig { returns(T.nilable(PlatformTypes::Milestone)) }
  def milestone; end

  sig { returns(T::Boolean) }
  def milestone?; end

  sig { returns(Integer) }
  def number; end

  sig { returns(T::Boolean) }
  def number?; end

  sig { returns(T::Boolean) }
  def over_comment_limit; end

  sig { returns(T::Boolean) }
  def over_comment_limit?; end

  sig { returns(T.nilable(PlatformTypes::Issue)) }
  def parent; end

  sig { returns(T::Boolean) }
  def parent?; end

  sig { returns(PlatformTypes::UserConnection) }
  def participants; end

  sig { returns(T::Boolean) }
  def participants?; end

  sig { returns(T.nilable(PlatformTypes::RepositoryConnection)) }
  def possible_transfer_repositories_for_viewer; end

  sig { returns(T::Boolean) }
  def possible_transfer_repositories_for_viewer?; end

  sig { returns(PlatformTypes::ProjectCardConnection) }
  def project_cards; end

  sig { returns(T::Boolean) }
  def project_cards?; end

  sig { returns(PlatformTypes::ProjectV2ItemConnection) }
  def project_items; end

  sig { returns(T::Boolean) }
  def project_items?; end

  sig { returns(T.nilable(PlatformTypes::ProjectV2ItemConnection)) }
  def project_items_next; end

  sig { returns(T::Boolean) }
  def project_items_next?; end

  sig { returns(T.nilable(PlatformTypes::ProjectNext)) }
  def project_next; end

  sig { returns(T::Boolean) }
  def project_next?; end

  sig { returns(PlatformTypes::ProjectNextItemConnection) }
  def project_next_items; end

  sig { returns(T::Boolean) }
  def project_next_items?; end

  sig { returns(T.nilable(PlatformTypes::ProjectV2)) }
  def project_v2; end

  sig { returns(T::Boolean) }
  def project_v2?; end

  sig { returns(PlatformTypes::ProjectNextConnection) }
  def projects_next; end

  sig { returns(T::Boolean) }
  def projects_next?; end

  sig { returns(PlatformTypes::ProjectV2Connection) }
  def projects_v2; end

  sig { returns(T::Boolean) }
  def projects_v2?; end

  sig { returns(PlatformTypes::ProjectV2Connection) }
  def projects_v2_by_number; end

  sig { returns(T::Boolean) }
  def projects_v2_by_number?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def published_at; end

  sig { returns(T::Boolean) }
  def published_at?; end

  sig { returns(GraphQL::Client::Schema::InterfaceType) }
  def reaction_admin; end

  sig { returns(T::Boolean) }
  def reaction_admin?; end

  sig { returns(T.nilable(T::Array[PlatformTypes::ReactionGroup])) }
  def reaction_groups; end

  sig { returns(T::Boolean) }
  def reaction_groups?; end

  sig { returns(String) }
  def reaction_path; end

  sig { returns(T::Boolean) }
  def reaction_path?; end

  sig { returns(PlatformTypes::ReactionConnection) }
  def reactions; end

  sig { returns(T::Boolean) }
  def reactions?; end

  sig { returns(T.nilable(Integer)) }
  def report_count; end

  sig { returns(T::Boolean) }
  def report_count?; end

  sig { returns(PlatformTypes::Repository) }
  def repository; end

  sig { returns(T::Boolean) }
  def repository?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def resource_path; end

  sig { returns(T::Boolean) }
  def resource_path?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def safe_user; end

  sig { returns(T::Boolean) }
  def safe_user?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def short_body_html; end

  sig { returns(T::Boolean) }
  def short_body_html?; end

  sig { returns(T::Boolean) }
  def show_edit_history_onboarding; end

  sig { returns(T::Boolean) }
  def show_edit_history_onboarding?; end

  sig { returns(T::Boolean) }
  def show_first_contribution_prompt; end

  sig { returns(T::Boolean) }
  def show_first_contribution_prompt?; end

  sig { returns(T::Boolean) }
  def spammy; end

  sig { returns(T::Boolean) }
  def spammy?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def stafftools_url; end

  sig { returns(T::Boolean) }
  def stafftools_url?; end

  sig { returns(String) }
  def state; end

  sig { returns(T::Boolean) }
  def state?; end

  sig { returns(T.nilable(String)) }
  def state_reason; end

  sig { returns(T::Boolean) }
  def state_reason?; end

  sig { returns(PlatformTypes::IssueConnection) }
  def sub_issues; end

  sig { returns(T::Boolean) }
  def sub_issues?; end

  sig { returns(PlatformTypes::SubIssuesSummary) }
  def sub_issues_summary; end

  sig { returns(T::Boolean) }
  def sub_issues_summary?; end

  sig { returns(T.nilable(T.any(String, Integer))) }
  def subject_id; end

  sig { returns(T::Boolean) }
  def subject_id?; end

  sig { returns(PlatformTypes::UserConnection) }
  def suggested_assignees; end

  sig { returns(T::Boolean) }
  def suggested_assignees?; end

  sig { returns(Integer) }
  def task_list_item_count; end

  sig { returns(T::Boolean) }
  def task_list_item_count?; end

  sig { returns(T.nilable(PlatformTypes::TaskListSummary)) }
  def task_list_summary; end

  sig { returns(T::Boolean) }
  def task_list_summary?; end

  sig { returns(T.nilable(PlatformTypes::TasklistBlockConnection)) }
  def tasklist_blocks; end

  sig { returns(T::Boolean) }
  def tasklist_blocks?; end

  sig { returns(T.nilable(PlatformTypes::TrackedIssueCompletion)) }
  def tasklist_blocks_completion; end

  sig { returns(T::Boolean) }
  def tasklist_blocks_completion?; end

  sig { returns(PlatformTypes::IssueTimelineConnection) }
  def timeline; end

  sig { returns(T::Boolean) }
  def timeline?; end

  sig do
    returns(T.nilable(T.any(PlatformTypes::IssueComment, PlatformTypes::CrossReferencedEvent, PlatformTypes::AddedToProjectEvent, PlatformTypes::AddedToProjectV2Event, PlatformTypes::AssignedEvent, PlatformTypes::ClosedEvent, PlatformTypes::CommentDeletedEvent, PlatformTypes::ConnectedEvent, PlatformTypes::ConvertedFromDraftEvent, PlatformTypes::ConvertedNoteToIssueEvent, PlatformTypes::ConvertedToDiscussionEvent, PlatformTypes::DemilestonedEvent, PlatformTypes::DisconnectedEvent, PlatformTypes::LabeledEvent, PlatformTypes::LockedEvent, PlatformTypes::MarkedAsDuplicateEvent, PlatformTypes::MentionedEvent, PlatformTypes::MilestonedEvent, PlatformTypes::MovedColumnsInProjectEvent, PlatformTypes::PinnedEvent, PlatformTypes::ProjectV2ItemStatusChangedEvent, PlatformTypes::ReferencedEvent, PlatformTypes::RemovedFromProjectEvent, PlatformTypes::RemovedFromProjectV2Event, PlatformTypes::RenamedTitleEvent, PlatformTypes::ReopenedEvent, PlatformTypes::SubscribedEvent, PlatformTypes::TransferredEvent, PlatformTypes::UnassignedEvent, PlatformTypes::UnlabeledEvent, PlatformTypes::UnlockedEvent, PlatformTypes::UserBlockedEvent, PlatformTypes::UnmarkedAsDuplicateEvent, PlatformTypes::UnpinnedEvent, PlatformTypes::UnsubscribedEvent)))
  end
  def timeline_item; end

  sig { returns(T::Boolean) }
  def timeline_item?; end

  sig { returns(PlatformTypes::IssueTimelineItemsConnection) }
  def timeline_items; end

  sig { returns(T::Boolean) }
  def timeline_items?; end

  sig { returns(String) }
  def title; end

  sig { returns(T::Boolean) }
  def title?; end

  sig { returns(String) }
  def title_html; end

  sig { returns(T::Boolean) }
  def title_html?; end

  sig { returns(T.nilable(String)) }
  def top_report_reason; end

  sig { returns(T::Boolean) }
  def top_report_reason?; end

  sig { returns(T.nilable(Integer)) }
  def total_comments_count; end

  sig { returns(T::Boolean) }
  def total_comments_count?; end

  sig { returns(PlatformTypes::IssueConnection) }
  def tracked_in_issues; end

  sig { returns(T::Boolean) }
  def tracked_in_issues?; end

  sig { returns(PlatformTypes::IssueConnection) }
  def tracked_issues; end

  sig { returns(T::Boolean) }
  def tracked_issues?; end

  sig { returns(Integer) }
  def tracked_issues_count; end

  sig { returns(T::Boolean) }
  def tracked_issues_count?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def updated_at; end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(String)) }
  def updates_channel; end

  sig { returns(T::Boolean) }
  def updates_channel?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def url; end

  sig { returns(T::Boolean) }
  def url?; end

  sig { returns(T.nilable(PlatformTypes::UserContentEditConnection)) }
  def user_content_edits; end

  sig { returns(T::Boolean) }
  def user_content_edits?; end

  sig { returns(T.nilable(PlatformTypes::App)) }
  def via_app; end

  sig { returns(T::Boolean) }
  def via_app?; end

  sig { returns(T::Boolean) }
  def viewer_blocked_by_author; end

  sig { returns(T::Boolean) }
  def viewer_blocked_by_author?; end

  sig { returns(T::Boolean) }
  def viewer_can_assign; end

  sig { returns(T::Boolean) }
  def viewer_can_assign?; end

  sig { returns(T::Boolean) }
  def viewer_can_block_from_org; end

  sig { returns(T::Boolean) }
  def viewer_can_block_from_org?; end

  sig { returns(T::Boolean) }
  def viewer_can_close; end

  sig { returns(T::Boolean) }
  def viewer_can_close?; end

  sig { returns(T::Boolean) }
  def viewer_can_comment; end

  sig { returns(T::Boolean) }
  def viewer_can_comment?; end

  sig { returns(T.nilable(T::Boolean)) }
  def viewer_can_convert_to_discussion; end

  sig { returns(T::Boolean) }
  def viewer_can_convert_to_discussion?; end

  sig { returns(T::Boolean) }
  def viewer_can_delete; end

  sig { returns(T::Boolean) }
  def viewer_can_delete?; end

  sig { returns(T::Boolean) }
  def viewer_can_label; end

  sig { returns(T::Boolean) }
  def viewer_can_label?; end

  sig { returns(T::Boolean) }
  def viewer_can_react; end

  sig { returns(T::Boolean) }
  def viewer_can_react?; end

  sig { returns(T::Boolean) }
  def viewer_can_read_user_content_edits; end

  sig { returns(T::Boolean) }
  def viewer_can_read_user_content_edits?; end

  sig { returns(T::Boolean) }
  def viewer_can_reopen; end

  sig { returns(T::Boolean) }
  def viewer_can_reopen?; end

  sig { returns(T::Boolean) }
  def viewer_can_report; end

  sig { returns(T::Boolean) }
  def viewer_can_report?; end

  sig { returns(T::Boolean) }
  def viewer_can_report_to_maintainer; end

  sig { returns(T::Boolean) }
  def viewer_can_report_to_maintainer?; end

  sig { returns(T::Boolean) }
  def viewer_can_see_delete_button; end

  sig { returns(T::Boolean) }
  def viewer_can_see_delete_button?; end

  sig { returns(T::Boolean) }
  def viewer_can_see_issue_type; end

  sig { returns(T::Boolean) }
  def viewer_can_see_issue_type?; end

  sig { returns(T::Boolean) }
  def viewer_can_set_milestone; end

  sig { returns(T::Boolean) }
  def viewer_can_set_milestone?; end

  sig { returns(T::Boolean) }
  def viewer_can_subscribe; end

  sig { returns(T::Boolean) }
  def viewer_can_subscribe?; end

  sig { returns(T::Boolean) }
  def viewer_can_transfer; end

  sig { returns(T::Boolean) }
  def viewer_can_transfer?; end

  sig { returns(T.nilable(T::Boolean)) }
  def viewer_can_type; end

  sig { returns(T::Boolean) }
  def viewer_can_type?; end

  sig { returns(T::Boolean) }
  def viewer_can_unblock_from_org; end

  sig { returns(T::Boolean) }
  def viewer_can_unblock_from_org?; end

  sig { returns(T::Boolean) }
  def viewer_can_unsubscribe; end

  sig { returns(T::Boolean) }
  def viewer_can_unsubscribe?; end

  sig { returns(T::Boolean) }
  def viewer_can_update; end

  sig { returns(T::Boolean) }
  def viewer_can_update?; end

  sig { returns(T.nilable(T::Boolean)) }
  def viewer_can_update_metadata; end

  sig { returns(T::Boolean) }
  def viewer_can_update_metadata?; end

  sig { returns(T.nilable(T::Boolean)) }
  def viewer_can_update_next; end

  sig { returns(T::Boolean) }
  def viewer_can_update_next?; end

  sig { returns(T::Array[String]) }
  def viewer_cannot_update_reasons; end

  sig { returns(T::Boolean) }
  def viewer_cannot_update_reasons?; end

  sig { returns(T::Boolean) }
  def viewer_did_author; end

  sig { returns(T::Boolean) }
  def viewer_did_author?; end

  sig { returns(String) }
  def viewer_relationship; end

  sig { returns(T::Boolean) }
  def viewer_relationship?; end

  sig { returns(T.nilable(String)) }
  def viewer_subscription; end

  sig { returns(T::Boolean) }
  def viewer_subscription?; end

  sig { returns(T.nilable(String)) }
  def viewer_thread_subscription_form_action; end

  sig { returns(T::Boolean) }
  def viewer_thread_subscription_form_action?; end

  sig { returns(T.nilable(String)) }
  def viewer_thread_subscription_status; end

  sig { returns(T::Boolean) }
  def viewer_thread_subscription_status?; end

  sig { returns(String) }
  def websocket; end

  sig { returns(T::Boolean) }
  def websocket?; end
end

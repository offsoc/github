#!/bin/bash
set -e

# This script sets up the github/docs-internal repository for a github/github codespace.

RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print help message
help() {
   echo "Sets up the github/docs-internal repository for a github/github codespace."
   echo
   echo "Usage: setup-codespaces-docs-openapi [-b branch] [-d|h] "
   echo "Options:"
   echo "-b     Specify the docs-internal branch to clone. Defaults to main if not provided."
   echo "-d     Before starting, delete the existing docs-internal directory in the codespace."
   echo "-h     Print this help message."
   echo
}

# Set the branch as main. If a branch is provided as an argument, it will be set to that when we parse the provided options.
BRANCH=main

# Get the options
while getopts ":b:v:hdn" opt; do
   case $opt in
      h) # display help message
         help
         exit;;
      b) # If a branch was provided, re-set the variable
         BRANCH=$OPTARG;;
      d) # Delete the repository if it exists
         DELETE_REPO=true;;
     :)
      echo "Error: Option -$OPTARG requires an argument."
      exit 1;;
     \?) # Invalid option
         echo "Error: Invalid option -$OPTARG"
         exit 1;;
   esac
done

# If the docs-internal repo already exists and the delete argument hasn't been specified, echo a warning and exit.
if [[ -d "/workspaces/docs-internal" && -z "$DELETE_REPO" ]]; then
  echo -e "${RED}The docs-internal directory already exists in this codespace.${NC} \nIf you already ran the setup script and you want to regenerate the OpenAPI files and start a new docs server, \nrun these commands instead:"
  echo -e "  ${ORANGE}cd /workspaces/docs-internal ; npm run openapi-docs${NC}"
  echo -e "Alternatively, you can rerun the setup script with the -d argument to force the deletion of the existing repository."
  exit 1
fi

if [ "$DELETE_REPO" = true ]; then
  echo -e "\n${GREEN}‚û°Ô∏è Deleting the existing docs-internal repo...\n${NC}"
  rm -rf /workspaces/docs-internal
fi

# Do a shallow clone of docs-internal to the same dir as the github/github repo.
# If a branch was supplied, use that branch for the clone.
echo -e "\n${GREEN}‚û°Ô∏è Shallow cloning docs-internal repo at branch $BRANCH...\n${NC}"
git clone https://github.com/github/docs-internal.git /workspaces/docs-internal --depth 1 --branch $BRANCH

# Install node dependencies in the docs-internal repo
echo -e "\n${GREEN}‚û°Ô∏è Installing docs-internal Node package dependencies...\n${NC}"
( cd /workspaces/docs-internal ; npm ci )

echo -e ""
echo -e "${GREEN}üéâüéâ FINISHED! The docs-internal repo has been set up! üéâüéâ"
echo -e ""
echo -e "${ORANGE}To learn how to preview the OpenAPI-derived docs based on your current branch, run:"
echo -e ""
echo -e "  cd /workspaces/docs-internal ; npm run openapi-docs"
echo -e ""
echo -e "${BLUE}Note: Don't commit changes from the above command to a docs-internal PR.\n      When you merge OpenAPI changes in github/github to master, a docs-internal PR for the changes is automatically opened."
echo -e ""

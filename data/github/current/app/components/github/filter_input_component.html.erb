<%# erblint:counter DeprecatedComponentsCounter 2 %>
<% dropdown_id = "#{@tag_name}-autocomplete-dropdown" %>
<%= render Primer::BaseComponent.new(tag: @tag_name, **@system_arguments) do %>
  <%= form_tag(
    @path,
    method: @method,
    class: class_names(
      "subnav-search flex-auto js-navigation-container ml-0 mt-#{@my}",
      "mb-#{@my}": hide_clear_button? || @use_compact_clear_button
    ),
    role: "search",
    data: {
      pjax: @use_pjax,
      target: "#{@tag_name}.searchForm",
      turbo: @turbo_frame.present?,
      "turbo-frame": @turbo_frame,
      action: "
        navigation:keydown:#{@tag_name}#handleFormKeydownEvent
        navigation:open:#{@tag_name}#handleSelectedSuggestionResultEvent
        submit:#{@tag_name}#handleSubmitEvent
      "
    }.merge(test_selector_hash(@form_test_selector)),
  ) do %>
    <div>
      <div class="<%= class_names(
        "subnav-search",
        "ml-0"
      ) %>">
        <input
          role="combobox"
          aria-expanded="false"
          aria-label="<%= @placeholder %>"
          aria-controls="<%= dropdown_id %>"
          autocomplete="off"
          class="<%= class_names(
            "form-control",
            "input-block",
            "input-contrast",
            "width-full",
            "js-navigation-enable",
            "subnav-search-input",
            "css-truncate",
            "css-truncate-overflow",
            ("pr-5" if @use_compact_clear_button),
          ) %>"
          spellcheck="false"
          name="<%= @query_parameter_key %>"
          placeholder="<%= @placeholder %>"
          type="text"
          value="<%= @query %>"
          <%= tag.attributes(
            data: {
              target: "#{@tag_name}.searchInput",
              action: "
                input:#{@tag_name}#updateFilterSuggestionResults
                focusin:#{@tag_name}#updateFilterSuggestionResults
                focusout:delay:#{@tag_name}#handleSearchBlur
                keydown:#{@tag_name}#inputKey
              ",
              initial_value: @query,
              default_value: @default_value,
              suggestable_qualifiers: suggestable_qualifiers,
              negatable_qualifiers: negatable_qualifiers,
            }
          )%>
          <%= tag.attributes(suggestable_items_json) %>
          <%= test_selector(@input_test_selector) %>
        >
        <% if @icon.present? %>
          <%= render(Primer::Beta::Octicon.new(
            display: :block,
            color: :muted,
            icon: @icon,
            left: false,
            ml: 2,
            mt: 2,
            position: :absolute,
            top: false,
            test_selector: "input-icon"
          )) %>
        <% end %>
        <% if @use_compact_clear_button %>
          <%= render(Primer::ButtonComponent.new(
            hidden: hide_clear_button?,
            mr: 1,
            position: :absolute,
            right: false,
            scheme: :link,
            style: "margin-top: 6px;",
            tag: :a,
            top: false,
            data: {
              target: "#{@tag_name}.clearButton",
              action: "click:#{@tag_name}#clear"
            },
            test_selector: @reset_button_test_selector
          )) do |c| %>
            <% primer_octicon(:x, aria: { label: "Clear filters" }, classes: "reset-btn-override-icon") %>
          <% end %>
        <% end %>
        <%= render(Primer::Beta::BorderBox.new(
          id: dropdown_id,
          bg: :default,
          border_radius: 2,
          box_shadow: :large,
          classes: "card-filter-autocomplete-dropdown overflow-auto",
          data: { target: "#{@tag_name}.autocompleteDropdown"},
          aria: { label: "Available filters" },
          hidden: true,
          hide: :sm,
          mt: 1,
          w: :full,
          position: :absolute
        )) do |c| %>
          <%= c.with_body(px: 2, py: 1) do %>
            <%= render(Primer::Box.new(data: { target: "#{@tag_name}.autocompleteResults" })) %>
          <% end %>
        <% end %>
      </div>
    </div>
    <% if @hidden_inputs.present? %>
      <% @hidden_inputs.each do |name, value| %>
        <%= hidden_field_tag(name, value) %>
      <% end %>
    <% end %>
  <% end %>

  <% unless @use_compact_clear_button %>
    <%= render(
      Primer::ButtonComponent.new(
        hidden: hide_clear_button?,
        display: :block,
        position: :relative,
        scheme: :link,
        classes: "reset-btn-override",
        mt: 3,
        mb: @my,
        data: {
          target: "#{@tag_name}.clearButton",
          action: "click:#{@tag_name}#clear"
        },
        test_selector: @reset_button_test_selector
      )
    ) do |c| %>
      <% c.with_leading_visual_icon(icon: :x, aria: { label: "Clear filters" }, classes: "reset-btn-override-icon") %>
      <%= @verbose_clear_button_text %>
    <% end %>
  <% end %>
<% end %>

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::RepositoryCloneCreate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::RepositoryCloneCreate`.

class Hydro::Schemas::Github::V1::RepositoryCloneCreate
  sig do
    params(
      clone_repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      template_repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(clone_repository: nil, template_repository: nil, user: nil); end

  sig { void }
  def clear_clone_repository; end

  sig { void }
  def clear_template_repository; end

  sig { void }
  def clear_user; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def clone_repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def clone_repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def template_repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def template_repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end
end

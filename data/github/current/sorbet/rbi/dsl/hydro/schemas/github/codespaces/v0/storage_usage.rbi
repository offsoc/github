# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Codespaces::V0::StorageUsage`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Codespaces::V0::StorageUsage`.

class Hydro::Schemas::Github::Codespaces::V0::StorageUsage
  sig do
    params(
      accessible: T.nilable(T::Boolean),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      actor_id: T.nilable(Integer),
      billable_duration_in_seconds: T.nilable(Float),
      billing_plan_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::BillingPlanOwner),
      codespace_database_id: T.nilable(Integer),
      codespace_id: T.nilable(String),
      computed_usage: T.nilable(Float),
      copilot_workspace_id: T.nilable(String),
      end_time: T.nilable(Google::Protobuf::Timestamp),
      owner_id: T.nilable(Integer),
      region: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      size_in_bytes: T.nilable(Integer),
      sku: T.nilable(T.any(Symbol, Integer)),
      source_uri: T.nilable(String),
      start_time: T.nilable(Google::Protobuf::Timestamp),
      storage_type: T.nilable(T.any(Symbol, Integer)),
      unique_billing_identifier: T.nilable(String),
      vscs_target: T.nilable(String)
    ).void
  end
  def initialize(accessible: nil, actor: nil, actor_id: nil, billable_duration_in_seconds: nil, billing_plan_owner: nil, codespace_database_id: nil, codespace_id: nil, computed_usage: nil, copilot_workspace_id: nil, end_time: nil, owner_id: nil, region: nil, repository: nil, size_in_bytes: nil, sku: nil, source_uri: nil, start_time: nil, storage_type: nil, unique_billing_identifier: nil, vscs_target: nil); end

  sig { returns(T::Boolean) }
  def accessible; end

  sig { params(value: T::Boolean).void }
  def accessible=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(Integer) }
  def actor_id; end

  sig { params(value: Integer).void }
  def actor_id=(value); end

  sig { returns(Float) }
  def billable_duration_in_seconds; end

  sig { params(value: Float).void }
  def billable_duration_in_seconds=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::BillingPlanOwner)) }
  def billing_plan_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::BillingPlanOwner)).void }
  def billing_plan_owner=(value); end

  sig { void }
  def clear_accessible; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_actor_id; end

  sig { void }
  def clear_billable_duration_in_seconds; end

  sig { void }
  def clear_billing_plan_owner; end

  sig { void }
  def clear_codespace_database_id; end

  sig { void }
  def clear_codespace_id; end

  sig { void }
  def clear_computed_usage; end

  sig { void }
  def clear_copilot_workspace_id; end

  sig { void }
  def clear_end_time; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_region; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_size_in_bytes; end

  sig { void }
  def clear_sku; end

  sig { void }
  def clear_source_uri; end

  sig { void }
  def clear_start_time; end

  sig { void }
  def clear_storage_type; end

  sig { void }
  def clear_unique_billing_identifier; end

  sig { void }
  def clear_vscs_target; end

  sig { returns(Integer) }
  def codespace_database_id; end

  sig { params(value: Integer).void }
  def codespace_database_id=(value); end

  sig { returns(String) }
  def codespace_id; end

  sig { params(value: String).void }
  def codespace_id=(value); end

  sig { returns(Float) }
  def computed_usage; end

  sig { params(value: Float).void }
  def computed_usage=(value); end

  sig { returns(String) }
  def copilot_workspace_id; end

  sig { params(value: String).void }
  def copilot_workspace_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def end_time; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def end_time=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(String) }
  def region; end

  sig { params(value: String).void }
  def region=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(Integer) }
  def size_in_bytes; end

  sig { params(value: Integer).void }
  def size_in_bytes=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def sku; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def sku=(value); end

  sig { returns(String) }
  def source_uri; end

  sig { params(value: String).void }
  def source_uri=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def start_time; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def start_time=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def storage_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def storage_type=(value); end

  sig { returns(String) }
  def unique_billing_identifier; end

  sig { params(value: String).void }
  def unique_billing_identifier=(value); end

  sig { returns(String) }
  def vscs_target; end

  sig { params(value: String).void }
  def vscs_target=(value); end
end

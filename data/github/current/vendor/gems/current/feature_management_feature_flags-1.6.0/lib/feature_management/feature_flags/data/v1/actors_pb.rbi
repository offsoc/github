# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: feature_management/feature_flags/data/v1/actors.proto
# typed: strict

# *
# Actor is a feature flag actor that holds the actor's id and whether it is enabled for that feature flag.
class FeatureManagement::FeatureFlags::Data::V1::Actor
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V1::Actor) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V1::Actor).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V1::Actor) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V1::Actor, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      actor_id: T.nilable(String),
      enabled: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    actor_id: "",
    enabled: false
  )
  end

  # actor_id is the actor id of the actor.
  sig { returns(String) }
  def actor_id
  end

  # actor_id is the actor id of the actor.
  sig { params(value: String).void }
  def actor_id=(value)
  end

  # actor_id is the actor id of the actor.
  sig { void }
  def clear_actor_id
  end

  # enabled is when the actor is enabled on the feature flag.
  sig { returns(T::Boolean) }
  def enabled
  end

  # enabled is when the actor is enabled on the feature flag.
  sig { params(value: T::Boolean).void }
  def enabled=(value)
  end

  # enabled is when the actor is enabled on the feature flag.
  sig { void }
  def clear_enabled
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

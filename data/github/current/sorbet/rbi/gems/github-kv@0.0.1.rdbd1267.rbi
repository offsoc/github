# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `github-kv` gem.
# Please instead update this file by running `bin/tapioca gem github-kv`.

# GitHub::KV is a key/value data store backed by MySQL (however, the backing
# store used should be regarded as an implementation detail).
#
# Usage tips:
#
#   * Components in key names should be ordered by cardinality, from lowest to
#     highest. That is, static key components should be at the front of the key
#     and key components that vary should be at the end of the key in order of
#     how many potential values they might have.
#
#     For example, if using GitHub::KV to store a user preferences, the key
#     should be named "user.#{preference_name}.#{user_id}". Notice that the
#     part of the key that never changes ("user") comes first, followed by
#     the name of the preference (of which there might be a handful), followed
#     finally by the user id (of which there are millions).
#
#     This will make it easier to scan for keys later on, which is a necessity
#     if we ever need to move this data out of GitHub::KV or if we need to
#     search the keyspace for some reason (for example, if it's a preference
#     that we're planning to deprecate, putting the preference name near the
#     beginning of the key name makes it easier to search for all users with
#     that preference set).
#
#   * All reader methods in GitHub::KV return values wrapped inside a Result
#     object.
#
#     If any of these methods raise an exception for some reason (for example,
#     the database is down), they will return a Result value representing this
#     error rather than raising the exception directly. See lib/github/result.rb
#     for more documentation on GitHub::KV::Result including usage examples.
#
#     When using GitHub::KV, it's important to handle error conditions and not
#     assume that GitHub::KV::Result objects will always represent success.
#     Code using GitHub::KV should be able to fail partially if
#     GitHub::KV is down. How exactly to do this will depend on a
#     case-by-case basis - it may involve falling back to a default value, or it
#     might involve showing an error message to the user while still letting the
#     rest of the page load.
#
# source://github-kv//lib/github/kv/config.rb#3
module GitHub
  extend ::GitHub::Config::FirstPartyApps
  extend ::GitHub::Config::Metadata
  extend ::GitHub::Config::Datacenter
  extend ::GitHub::Config::ProximaSyncedThirdPartyApps
  extend ::GitHub::Config::Fastly
  extend ::GitHub::Config::Importers
  extend ::GitHub::Config::Kredz
  extend ::GitHub::Config::Varz
  extend ::GitHub::Config::Launch
  extend ::GitHub::Config::LegacyTextileFormatting
  extend ::GitHub::Config::Dreamlifter
  extend ::GitHub::Config::Migration
  extend ::GitHub::Config::Render
  extend ::GitHub::Config::Smtp
  extend ::GitHub::Config::Spokes
  extend ::GitHub::Config::Spokesd
  extend ::GitHub::Config::SupportLink
  extend ::GitHub::Config::Pages
  extend ::GitHub::Config::RequestLimits
  extend ::GitHub::Config::RateLimits
  extend ::GitHub::Config::OpenTelemetry
  extend ::GitHub::Config::HydroConfig
  extend ::GitHub::Config::Redis
  extend ::GitHub::Config::GroupSyncer
  extend ::GitHub::Config::Dependabot
  extend ::GitHub::Config::Twirp
  extend ::GitHub::Config::DriftwoodConfig
  extend ::GitHub::Config::PullRequests
  extend ::GitHub::Config::Repositories
  extend ::GitHub::Config::S3
  extend ::GitHub::Config::Registry
  extend ::GitHub::Config::SystemRoles
  extend ::GitHub::Config::Elasticsearch
  extend ::GitHub::Config::OpenApi
  extend ::GitHub::Config::AuditLogCuratorConfig
  extend ::GitHub::Config::AuditLog
  extend ::GitHub::Config::Billing
  extend ::GitHub::Config::AfterResponse
  extend ::GitHub::Config::Features
  extend ::GitHub::Config::ApiVersioning
  extend ::GitHub::Config::InsightsConfig
  extend ::GitHub::Config::HttpFluentbitConfig
  extend ::GitHub::Config::CodeScanning
  extend ::GitHub::Config::CodeQLVariantAnalysis
  extend ::GitHub::Config::OctoshiftStorage
  extend ::GitHub::Config::OIDCProviders
  extend ::GitHub::Config::BingIndexnow
  extend ::GitHub::Config::Chatops
  extend ::GitHub::Config::IssuesGraphApiConfig
  extend ::GitHub::Config::TimelineApiConfig
  extend ::GitHub::Config::Memex
  extend ::GitHub::Config::MergeQueue
  extend ::GitHub::Config::Codespaces
  extend ::GitHub::Config::Copilot
  extend ::GitHub::Config::Azure
  extend ::GitHub::Config::MultiTenantEnterprise
  extend ::GitHub::Config::NotebooksConfig
  extend ::GitHub::Config::ViewscreenConfig
  extend ::GitHub::Config::Freno
  extend ::GitHub::Config::ActionsResults
  extend ::GitHub::Config::Conduit
  extend ::GitHub::Config::ActionsBroker
  extend ::GitHub::Config::ActionsBrokerWorker
  extend ::GitHub::Config::ActionsRunnerAdmin
  extend ::GitHub::Config::ActionsRunService
  extend ::GitHub::Config::ActionsScaleUnitDomains
  extend ::GitHub::Config::Proxima
  extend ::GitHub::Config::ProximaLoginExperience
  extend ::GitHub::Config::GitSrcMigrator
  extend ::GitHub::Config::Projects
  extend ::GitHub::Config::EnterpriseAccounts
  extend ::GitHub::Config::Orca
  extend ::GitHub::Config::Orcid
  extend ::GitHub::Config::Context
  extend ::GitHub::Config
  extend ::GitHub::Version
  extend ::GitHub::Config::Stats

  class << self
    def after_response_middleware_enabled; end
    def after_response_middleware_enabled=(_arg0); end
    def after_response_middleware_enabled?; end
    def after_response_raise_on_exception; end
    def after_response_raise_on_exception=(_arg0); end
    def after_response_raise_on_exception?; end
    def robot?(useragent); end
  end
end

module GitHub::AppPartitioning; end
module GitHub::CSP; end
module GitHub::DataStructures; end

# source://github-kv//lib/github/kv/config.rb#4
class GitHub::KV
  # initialize :: [Exception], Boolean, Proc -> nil
  #
  # Initialize a new KV instance.
  #
  # encapsulated_errors - An Array of Exception subclasses that, when raised,
  #                       will be replaced with UnavailableError.
  # use_local_time:     - Whether to use Ruby's `Time.now` instaed of MySQL's
  #                       `NOW()` function. This is mostly useful in testing
  #                       where time needs to be modified (eg. Timecop).
  #                       Default false.
  # &conn_block         - A block to call to open a new database connection.
  #
  # Returns nothing.
  #
  # @return [KV] a new instance of KV
  #
  # source://github-kv//lib/github/kv.rb#87
  def initialize(config: T.unsafe(nil), shard_key_value: T.unsafe(nil), &conn_block); end

  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  #
  # source://github-kv//lib/github/kv.rb#60
  def config=(_arg0); end

  # source://github-kv//lib/github/kv.rb#104
  def connection; end

  # del :: String -> nil
  #
  # Deletes the specified key. Returns nil. Raises on error.
  #
  # Example:
  #
  #   kv.del("foo")
  #     # => nil
  #
  # source://github-kv//lib/github/kv.rb#497
  def del(key); end

  # exists :: String -> Result<Boolean>
  #
  # Checks for existence of the specified key.
  #
  # Example:
  #
  #   kv.exists("foo")
  #     # => #<Result value: true>
  #
  #   kv.exists("octocat")
  #     # => #<Result value: false>
  #
  # source://github-kv//lib/github/kv.rb#296
  def exists(key); end

  # get :: String -> Result<String | nil>
  #
  # Gets the value of the specified key.
  #
  # Example:
  #
  #   kv.get("foo")
  #     # => #<Result value: "bar">
  #
  #   kv.get("octocat")
  #     # => #<Result value: nil>
  #
  # source://github-kv//lib/github/kv.rb#124
  def get(key); end

  # increment :: String, Integer, expires: Time? -> Integer
  #
  # Increment the key's value by an amount.
  #
  # key             - The key to increment.
  # amount          - The amount to increment the key's value by.
  #                   The user can increment by both positive and
  #                   negative values
  # expires         - When the key should expire.
  # touch_on_insert - Only when expires is specified. When true
  #                   the expires value is only touched upon
  #                   inserts. Otherwise the record is always
  #                   touched.
  #
  # Returns the key's value after incrementing.
  #
  # source://github-kv//lib/github/kv.rb#399
  def increment(key, amount: T.unsafe(nil), expires: T.unsafe(nil), touch_on_insert: T.unsafe(nil)); end

  # mdel :: String -> nil
  #
  # Deletes the specified keys. Returns nil. Raises on error.
  #
  # Example:
  #
  #   kv.mdel(["foo", "octocat"])
  #     # => nil
  #
  # source://github-kv//lib/github/kv.rb#512
  def mdel(keys); end

  # mdel_prefix :: String -> nil
  #
  # Deletes the keys starting with the given prefix. Returns nil. Raises on error.
  #
  # Example:
  #
  #   kv.mdel_prefix("prefix")
  #     # => nil
  #
  # source://github-kv//lib/github/kv.rb#538
  def mdel_prefix(prefix); end

  # mexists :: [String] -> Result<[Boolean]>
  #
  # Checks for existence of all specified keys. Booleans will be returned in
  # the same order as keys are specified.
  #
  # Example:
  #
  #   kv.mexists(["foo", "octocat"])
  #     # => #<Result value: [true, false]>
  #
  # TODO: `#get`` is case insensitive, shall we make mexists case insensitive as well?!
  #
  # source://github-kv//lib/github/kv.rb#313
  def mexists(keys); end

  # mget :: [String] -> Result<[String | nil]>
  #
  # Gets the values of all specified keys. Values will be returned in the
  # same order as keys are specified. nil will be returned in place of a
  # String for keys which do not exist.
  #
  # Example:
  #
  #   kv.mget(["foo", "octocat"])
  #     # => #<Result value: ["bar", nil]
  #
  # source://github-kv//lib/github/kv.rb#141
  def mget(keys); end

  # mget_prefix:: [String] -> Result<{String: String} | {}>
  #
  # Gets the key/value pair for keys starting with the given prefix.
  #
  # Example:
  #
  #   kv.mget_prefix("foo")
  #     # => #<Result value: { "foo" => "bar" }>
  #
  # source://github-kv//lib/github/kv.rb#174
  def mget_prefix(prefix); end

  # mset :: { String => String }, expires: Time? -> nil
  #
  # Sets the specified hash keys to their associated values, setting them to
  # expire at the specified time. Returns nil. Raises on error.
  #
  # Example:
  #
  #   kv.mset({ "foo" => "bar", "baz" => "quux" })
  #     # => nil
  #
  #   kv.mset({ "expires" => "soon" }, expires: 1.hour.from_now)
  #     # => nil
  #
  # source://github-kv//lib/github/kv.rb#243
  def mset(kvs, expires: T.unsafe(nil)); end

  # mttl :: [String] -> Result<[Time | nil]>
  #
  # Returns the expires_at time for the specified key or nil.
  #
  # Example:
  #
  #  kv.mttl(["foo", "octocat"])
  #    # => #<Result value: [2018-04-23 11:34:54 +0200, nil]>
  #
  # source://github-kv//lib/github/kv.rb#593
  def mttl(keys); end

  # source://github-kv//lib/github/kv.rb#108
  def quoted_table_name; end

  # set :: String, String, expires: Time? -> nil
  #
  # Sets the specified key to the specified value. Returns nil. Raises on
  # error.
  #
  # Example:
  #
  #   kv.set("foo", "bar")
  #     # => nil
  #
  # source://github-kv//lib/github/kv.rb#203
  def set(key, value, expires: T.unsafe(nil)); end

  # setnx :: String, String, expires: Time? -> Boolean
  #
  # Sets the specified key to the specified value only if it does not
  # already exist.
  #
  # Returns true if the key was set, false otherwise. Raises on error.
  #
  # Example:
  #
  #   kv.setnx("foo", "bar")
  #     # => false
  #
  #   kv.setnx("octocat", "monalisa")
  #     # => true
  #
  #   kv.setnx("expires", "soon", expires: 1.hour.from_now)
  #     # => true
  #
  # source://github-kv//lib/github/kv.rb#349
  def setnx(key, value, expires: T.unsafe(nil)); end

  # try_set :: String, String, expires: Time? -> nil
  #
  # Sets the specified key to the specified value. Returns true on success.
  # Returns false on UnavailableError. Raises on other errors.
  #
  # Example:
  #
  #  if kv.try_set("foo", "bar")
  #    # Key was set
  #  else
  #    # Fallback, if needed
  #  end
  #
  # source://github-kv//lib/github/kv.rb#223
  def try_set(key, value, expires: T.unsafe(nil)); end

  # ttl :: String -> Result<[Time | nil]>
  #
  # Returns the expires_at time for the specified key or nil.
  #
  # Example:
  #
  #  kv.ttl("foo")
  #    # => #<Result value: 2018-04-23 11:34:54 +0200>
  #
  #  kv.ttl("foo")
  #    # => #<Result value: nil>
  #
  # source://github-kv//lib/github/kv.rb#569
  def ttl(key); end

  # Returns the value of attribute use_local_time.
  #
  # source://github-kv//lib/github/kv.rb#59
  def use_local_time; end

  # Sets the attribute use_local_time
  #
  # @param value the value to set the attribute use_local_time to.
  #
  # source://github-kv//lib/github/kv.rb#59
  def use_local_time=(_arg0); end

  private

  # source://github-kv//lib/github/kv.rb#687
  def encapsulate_error; end

  # source://github-kv//lib/github/kv.rb#705
  def quoted_prefix(prefix); end

  # source://github-kv//lib/github/kv.rb#718
  def quoted_shard_key_column; end

  # source://github-kv//lib/github/kv.rb#722
  def quoted_shard_key_value; end

  # source://github-kv//lib/github/kv.rb#701
  def quoted_value(value); end

  # source://github-kv//lib/github/kv.rb#697
  def quoted_values(values); end

  # source://github-kv//lib/github/kv.rb#710
  def rounded_expiry(expiry_date_or_time); end

  # source://github-kv//lib/github/kv.rb#693
  def sanitized_now; end

  # @return [Boolean]
  #
  # source://github-kv//lib/github/kv.rb#726
  def sharded?; end

  # @raise [ArgumentError]
  #
  # source://github-kv//lib/github/kv.rb#668
  def validate_amount(amount); end

  # source://github-kv//lib/github/kv.rb#681
  def validate_expires(expires); end

  # source://github-kv//lib/github/kv.rb#615
  def validate_key(key, error_message: T.unsafe(nil)); end

  # source://github-kv//lib/github/kv.rb#631
  def validate_key_array(keys); end

  # source://github-kv//lib/github/kv.rb#656
  def validate_key_length(key); end

  # source://github-kv//lib/github/kv.rb#645
  def validate_key_value_hash(kvs); end

  # @raise [ArgumentError]
  #
  # source://github-kv//lib/github/kv.rb#673
  def validate_touch(touch, expires); end

  # source://github-kv//lib/github/kv.rb#623
  def validate_value(value, error_message: T.unsafe(nil)); end

  # source://github-kv//lib/github/kv.rb#662
  def validate_value_length(value); end

  class << self
    def BINARY(string); end

    # source://github-kv//lib/github/kv.rb#62
    def config; end

    # @yield [config]
    #
    # source://github-kv//lib/github/kv.rb#70
    def configure; end

    # source://github-kv//lib/github/kv.rb#66
    def reset; end
  end
end

# source://github-kv//lib/github/kv/config.rb#5
class GitHub::KV::Config
  # @return [Config] a new instance of Config
  #
  # source://github-kv//lib/github/kv/config.rb#8
  def initialize; end

  # Returns the value of attribute encapsulated_errors.
  #
  # source://github-kv//lib/github/kv/config.rb#6
  def encapsulated_errors; end

  # Sets the attribute encapsulated_errors
  #
  # @param value the value to set the attribute encapsulated_errors to.
  #
  # source://github-kv//lib/github/kv/config.rb#6
  def encapsulated_errors=(_arg0); end

  # Returns the value of attribute shard_key_column.
  #
  # source://github-kv//lib/github/kv/config.rb#6
  def shard_key_column; end

  # Sets the attribute shard_key_column
  #
  # @param value the value to set the attribute shard_key_column to.
  #
  # source://github-kv//lib/github/kv/config.rb#6
  def shard_key_column=(_arg0); end

  # Returns the value of attribute table_name.
  #
  # source://github-kv//lib/github/kv/config.rb#6
  def table_name; end

  # Sets the attribute table_name
  #
  # @param value the value to set the attribute table_name to.
  #
  # source://github-kv//lib/github/kv/config.rb#6
  def table_name=(_arg0); end

  # Returns the value of attribute use_local_time.
  #
  # source://github-kv//lib/github/kv/config.rb#6
  def use_local_time; end

  # Sets the attribute use_local_time
  #
  # @param value the value to set the attribute use_local_time to.
  #
  # source://github-kv//lib/github/kv/config.rb#6
  def use_local_time=(_arg0); end
end

# source://github-kv//lib/github/kv.rb#53
class GitHub::KV::InvalidValueError < ::StandardError; end

# source://github-kv//lib/github/kv.rb#50
class GitHub::KV::KeyLengthError < ::StandardError; end

# source://github-kv//lib/github/kv.rb#47
GitHub::KV::MAX_KEY_LENGTH = T.let(T.unsafe(nil), Integer)

# source://github-kv//lib/github/kv.rb#48
GitHub::KV::MAX_VALUE_LENGTH = T.let(T.unsafe(nil), Integer)

# source://github-kv//lib/github/kv.rb#57
class GitHub::KV::MissingConnectionError < ::StandardError; end

# source://github-kv//lib/github/kv.rb#55
GitHub::KV::NOW = T.let(T.unsafe(nil), String)

# source://github-kv//lib/github/kv/result.rb#6
class GitHub::KV::Result
  # Invokes the supplied block and wraps the return value in a
  # GitHub::KV::Result object.
  #
  # Exceptions raised by the block are caught and also wrapped.
  #
  # Example:
  #
  #   GitHub::KV::Result.new { 123 }
  #     # => #<GitHub::KV::Result value: 123>
  #
  #   GitHub::KV::Result.new { raise "oops" }
  #     # => #<GitHub::KV::Result error: #<RuntimeError: oops>>
  #
  # @return [Result] a new instance of Result
  #
  # source://github-kv//lib/github/kv/result.rb#20
  def initialize; end

  # If the result represents a value, returns nil.
  #
  # If the result represents an error, returns that error.
  #
  #   result = do_something()
  #     # => #<GitHub::KV::Result value: "foo">
  #
  #   result.error
  #     # => nil
  #
  #   result = do_something_that_fails()
  #     # => #<GitHub::KV::Result error: ...>
  #
  #   result.error
  #     # => ...
  #
  # source://github-kv//lib/github/kv/result.rb#225
  def error; end

  # source://github-kv//lib/github/kv/result.rb#29
  def inspect; end

  # If the result represents a value, invokes the supplied block with that
  # value and wraps the block's return value in a GitHub::KV::Result.
  #
  # If the result represents an error, returns self.
  #
  # The block should not return a GitHub::KV::Result object (unless you
  # truly intend to create a GitHub::KV::Result<GitHub::KV::Result<T>>).
  # Use #then if it does.
  #
  # Example:
  #
  #   result = do_something()
  #     # => #<GitHub::KV::Result value: 123>
  #
  #   result.map { |val| val * 2 }
  #     # => #<GitHub::KV::Result value: 246>
  #
  #   do_something_that_fails().map { |val|
  #     # never invoked
  #   }
  #     # => #<GitHub::KV::Result error: ...>
  #
  # source://github-kv//lib/github/kv/result.rb#126
  def map; end

  # Returns true if the result represents a value, false if an error.
  #
  # Example:
  #
  #   result = do_something()
  #     # => #<GitHub::KV::Result value: "foo">
  #
  #   result.ok?
  #     # => true
  #
  #   result = do_something_that_fails()
  #     # => #<GitHub::KV::Result error: ...>
  #
  #   result.ok?
  #     # => false
  #
  # @return [Boolean]
  #
  # source://github-kv//lib/github/kv/result.rb#205
  def ok?; end

  # If the result represents an error, invokes the supplied block with that error.
  #
  # If the result represents a value, returns self.
  #
  # The block must also return a GitHub::KV::Result object.
  # Use #map otherwise.
  #
  # Example:
  #
  #   result = do_something().rescue { |val|
  #     # never invoked
  #   }
  #     # => #<GitHub::KV::Result value: ...>
  #
  #   do_something_that_fails().rescue { |val|
  #     # handle_error(val)
  #   }
  #     # => #<GitHub::Result error: ...>
  #
  # source://github-kv//lib/github/kv/result.rb#92
  def rescue; end

  # If the result represents a value, invokes the supplied block with
  # that value.
  #
  # If the result represents an error, returns self.
  #
  # The block must also return a GitHub::KV::Result object.
  # Use #map otherwise.
  #
  # Example:
  #
  #   result = do_something().then { |val|
  #     do_other_thing(val)
  #   }
  #     # => #<GitHub::KV::Result value: ...>
  #
  #   do_something_that_fails().then { |val|
  #     # never invoked
  #   }
  #     # => #<GitHub::KV::Result error: ...>
  #
  # source://github-kv//lib/github/kv/result.rb#59
  def then; end

  # source://github-kv//lib/github/kv/result.rb#29
  def to_s; end

  # If the result represents a value, returns that value.
  #
  # If the result represents an error, invokes the supplied block with the
  # exception object.
  #
  # Example:
  #
  #   result = do_something()
  #     # => #<GitHub::KV::Result value: "foo">
  #
  #   result.value { "nope" }
  #     # => "foo"
  #
  #   result = do_something_that_fails()
  #     # => #<GitHub::KV::Result error: ...>
  #
  #   result.value { "nope" }
  #     # => #<GitHub::KV::Result value: "nope">
  #
  # source://github-kv//lib/github/kv/result.rb#153
  def value; end

  # If the result represents a value, returns that value.
  #
  # If the result represents an error, raises that error.
  #
  # Example:
  #
  #   result = do_something()
  #     # => #<GitHub::KV::Result value: "foo">
  #
  #   result.value!
  #     # => "foo"
  #
  #   result = do_something_that_fails()
  #     # => #<GitHub::KV::Result error: ...>
  #
  #   result.value!
  #     # !! raises exception
  #
  # @raise [@error]
  #
  # source://github-kv//lib/github/kv/result.rb#183
  def value!; end

  class << self
    # Create a GitHub::KV::Result with only the error condition set.
    #
    #    GitHub::KV::Result.error(e)
    #     # => # <GitHub::KV::Result error: ...>
    #
    # source://github-kv//lib/github/kv/result.rb#234
    def error(e); end
  end
end

# source://github-kv//lib/github/kv.rb#52
class GitHub::KV::UnavailableError < ::StandardError; end

# source://github-kv//lib/github/kv.rb#51
class GitHub::KV::ValueLengthError < ::StandardError; end

module GitHub::SCIM; end

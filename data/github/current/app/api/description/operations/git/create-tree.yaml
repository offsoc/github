---
summary: Create a tree
description: |-
  The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.

  If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](${externalDocsUrl}/rest/git/commits#create-a-commit)" and "[Update a reference](${externalDocsUrl}/rest/git/refs#update-a-reference)."

  Returns an error if you try to delete a file that does not exist.
tags:
  - git
operationId: git/create-tree
externalDocs:
  description: API method documentation
  url: '${externalDocsUrl}/rest/git/trees#create-a-tree'
parameters:
  - $ref: '../../components/parameters/owner.yaml'
  - $ref: '../../components/parameters/repo.yaml'
requestBody:
  required: true
  content:
    application/json:
      schema:
        type: object
        properties:
          tree:
            type: array
            description: Objects (of `path`, `mode`, `type`, and `sha`) specifying
              a tree structure.
            items:
              type: object
              properties:
                path:
                  type: string
                  description: The file referenced in the tree.
                mode:
                  type: string
                  description: The file mode; one of `100644` for file (blob), `100755`
                    for executable (blob), `040000` for subdirectory (tree), `160000`
                    for submodule (commit), or `120000` for a blob that specifies
                    the path of a symlink.
                  enum:
                    - '100644'
                    - '100755'
                    - '040000'
                    - '160000'
                    - '120000'
                type:
                  type: string
                  description: Either `blob`, `tree`, or `commit`.
                  enum:
                    - blob
                    - tree
                    - commit
                sha:
                  type: string
                  description: "The SHA1 checksum ID of the object in the tree. Also
                    called `tree.sha`. If the value is `null` then the file will be
                    deleted.  \n  \n**Note:** Use either `tree.sha` or `content` to
                    specify the contents of the entry. Using both `tree.sha` and `content`
                    will return an error."
                  nullable: true
                content:
                  type: string
                  description: "The content you want this file to have. GitHub will
                    write this blob out and use that SHA for this entry. Use either
                    this, or `tree.sha`.  \n  \n**Note:** Use either `tree.sha` or
                    `content` to specify the contents of the entry. Using both `tree.sha`
                    and `content` will return an error."
          base_tree:
            type: string
            description: |-
              The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
              If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
        required:
          - tree
      examples:
        default:
          value:
            base_tree: 9fb037999f264ba9a7fc6274d15fa3ae2ab98312
            tree:
              - path: file.rb
                mode: '100644'
                type: blob
                sha: 44b4fc6d56897b048c772eb4087f854f46256132
responses:
  '201':
    description: Response
    content:
      application/json:
        schema:
          $ref: '../../components/schemas/git-tree.yaml'
        examples:
          default:
            $ref: '../../components/examples/git-tree.yaml'
    headers:
      Location:
        example: https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7
        schema:
          type: string
  '422':
    $ref: '../../components/responses/validation_failed.yaml'
  '404':
    $ref: '../../components/responses/not_found.yaml'
  '403':
    $ref: '../../components/responses/forbidden.yaml'
  '409':
    $ref: '../../components/responses/conflict.yaml'
x-github-releases:
  - ghec
  - ghes: '>= 2.18'
  - api.github.com
x-github:
  githubCloudOnly: false
  enabledForGitHubApps: true

  category: git
  subcategory: trees
x-github-internal:
  path: '/repos/{owner}/{repo}/git/trees'
  http-method: post
  service-tier: 1
  owner: '@github/repos'
  published: true

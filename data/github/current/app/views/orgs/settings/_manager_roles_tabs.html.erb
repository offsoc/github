<%
  menu_item_link_classes = "SideNav-item d-flex flex-items-center org-menu-item"
  sub_menu_classes = "SideNav color-bg-default border-top py-3 pl-3 org-sub-menu rounded-bottom-2"
  sub_menu_item_link_classes = "SideNav-subItem"
%>

<div class="flex-shrink-0 pr-3">
  <%= render(Primer::Beta::NavList.new(aria: { label: "Organization settings" }, selected_item_id: @selected_link, item_classes: "org-menu-item", nav_classes: "org-sub-menu")) do |component| %><%# rubocop:disable Lint/InstanceVariable %>
    <% if org_billing_manager? && GitHub.sponsors_enabled? %>
      <% if GitHub.billing_enabled? %>
        <% component.with_item(
          label: "Billing and plans",
          href: settings_org_billing_path(current_organization),
          selected_by_ids: :organization_billing_settings,
          data: {
            **test_selector_hash("billing_and_plans"),
            **analytics_click_attributes(
              category: "Org billing and plans",
              action: "click to see billing and plans",
              label: "ref_cta:Billing & Plans;ref_loc:settings"
            )
        }) do |item| %>
          <% item.with_leading_visual_icon(icon: :"credit-card") %>
        <% end %>
      <% end %>

      <% component.with_item(
          label: "Sponsorship log",
          href: settings_org_sponsors_log_path(current_organization),
          selected_by_ids: :sponsors_log,
          data: {
            **test_selector_hash("billing_manager_sponsorship_log")
          }) do |item| %>
        <% item.with_leading_visual_icon(icon: :log) %>
      <% end%>
    <% end %>

    <% if current_organization.custom_roles_supported? && current_organization.async_can_read_custom_org_roles?(current_user).sync %>
      <% component.with_item(
        label: "Organization roles",
        href: settings_org_roles_path(current_organization),
        selected_by_ids: :org_roles) do |item| %>
        <% item.with_leading_visual_icon(icon: :"organization") %>
      <% end %>
    <% end %>

    <% if current_organization.async_can_read_custom_repo_roles?(current_user).sync %>
      <% component.with_item(
        label: "Repository roles",
        href: settings_org_repository_roles_path(current_organization),
        selected_by_ids: :roles) do |item| %>
        <% item.with_leading_visual_icon(icon: :"id-badge") %>
      <% end %>
    <% end %>

    <% if org_moderator? %>
      <% component.with_item(
        label: "Moderation",
        nav_classes: "org-sub-menu",
        id: "moderation-settings-item",
        data: {
          **test_selector_hash("moderation_settings")
      }) do |sub_item| %>
        <% sub_item.with_item(label: "Blocked users", href: organization_settings_blocked_users_path(current_organization), selected_by_ids: :block_users) %>
        <% sub_item.with_item(label: "Interaction limits", href: org_interaction_limits_path(current_organization), selected_by_ids: :interaction_limits) do |element| %>
          <% if RepositoryInteractionAbility.has_active_limits?(current_organization) %>
            <%= element.with_trailing_visual_icon(icon: :clock, color: :success) %>
          <% end %>
        <% end %>
        <% sub_item.with_leading_visual_icon(icon: :"report") %>
      <% end %>
    <% end %>

    <% if org_ref_rules_manager? || org_custom_properties_definitions_manager? || org_custom_properties_values_editor? %>
      <% component.with_item(label: "Repository", id: "repository") do |item| %>
        <% item.with_leading_visual_icon(icon: :repo) %>

        <% if org_ref_rules_manager? %>
          <% item.with_item(label: "Rulesets", href: organization_rulesets_path(current_organization), selected_by_ids: :repo_rulesets) %>
          <% item.with_item(label: "Rule insights", href: organization_rule_insights_path(current_organization), selected_by_ids: :repo_rule_insights) %>
        <% end %>

        <% if org_custom_properties_definitions_manager? || org_custom_properties_values_editor? %>
          <% item.with_item(label: "Custom properties", href: org_custom_properties_path(current_organization), selected_by_ids: :organization_custom_properties) %>
        <% end %>
      <% end %>
    <% end %>

    <% if current_organization.can_write_org_webhooks?(current_user) %>
      <% component.with_item(
        label: GitHub.enterprise? ? "Hooks" : "Webhooks",
        href: hooks_path(current_organization),
        highlight: :hooks,
        data: {
          **test_selector_hash("fgp_manage_webhook_log")
        }) do |element| %>
          <% element.with_leading_visual_icon(icon: :"webhook") %>
        <% end %>
    <% end %>

    <% if can_manage_code_security_settings? %>
      <% component.with_item(
        component_klass: Settings::SecurityProductsNavComponent,
        entity: current_organization
      ) %>
    <% end %>

    <% if GitHub.actions_enabled? %>
      <% if current_organization.can_write_organization_actions_settings?(current_user) || current_organization.can_write_organization_runners_and_runner_groups?(current_user) %>
        <% component.with_item(
          component_klass: Settings::ActionsNavComponent,
          entity: current_organization
        ) %>
      <% end %>

      <%= has_organization_actions_secrets_fgp = current_organization.can_write_organization_actions_secrets?(current_user) %>
      <%= has_organization_actions_variables_fgp = current_organization.can_write_organization_actions_variables?(current_user) %>

      <% if has_organization_actions_secrets_fgp || has_organization_actions_variables_fgp %>
        <% component.with_item(
          component_klass: Settings::SecretsNavComponent,
          user: current_user,
          entity: current_organization,
          is_admin: current_organization.adminable_by?(current_user),
          fine_grained_permissions: {
            organization_actions_secrets: has_organization_actions_secrets_fgp,
            organization_actions_variables: has_organization_actions_variables_fgp
          },
        ) %>
      <% end %>
    <% end %>

    <% if GitHub.oauth_application_policies_enabled? && current_organization.can_manage_org_oauth_app_policy?(current_user) %>
        <% component.with_item(label: "OAuth application policy", href: settings_org_oauth_application_policy_path(current_organization), selected_by_ids: :application_access_policy) do |item| %>
          <% item.with_leading_visual_icon(icon: :apps) %>
        <% end %>
    <% end %>

    <% if current_organization.can_read_org_audit_logs?(current_user) %>
      <% component.with_item(label: "Audit log", href: settings_org_audit_log_path(current_organization), highlight: :audit_log, data: { **test_selector_hash("fgp_audit_log") }) do |item| %>
        <% item.with_leading_visual_icon(icon: :log) %>
      <% end %>
    <% end %>

    <% if org_apps_manager? %>
      <% component.with_item(label: "GitHub Apps", href: settings_org_apps_path(current_organization), selected_by_ids: :integrations) do |item| %>
        <% item.with_leading_visual_icon(icon: :code) %>
      <% end %>
    <% end %>
  <% end %>
</div>

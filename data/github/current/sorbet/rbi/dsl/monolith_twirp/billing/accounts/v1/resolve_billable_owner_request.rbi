# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Billing::Accounts::V1::ResolveBillableOwnerRequest`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Billing::Accounts::V1::ResolveBillableOwnerRequest`.

class MonolithTwirp::Billing::Accounts::V1::ResolveBillableOwnerRequest
  sig do
    params(
      account_id: T.nilable(Integer),
      account_type: T.nilable(T.any(Symbol, Integer)),
      budget_group: T.nilable(String),
      customer_id: T.nilable(Integer),
      product_name: T.nilable(String),
      usage_at: T.nilable(Google::Protobuf::Timestamp),
      zuora_product_rate_plan_charges: T.nilable(MonolithTwirp::Billing::Accounts::V1::ZuoraProductRatePlanCharges)
    ).void
  end
  def initialize(account_id: nil, account_type: nil, budget_group: nil, customer_id: nil, product_name: nil, usage_at: nil, zuora_product_rate_plan_charges: nil); end

  sig { returns(Integer) }
  def account_id; end

  sig { params(value: Integer).void }
  def account_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def account_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def account_type=(value); end

  sig { returns(String) }
  def budget_group; end

  sig { params(value: String).void }
  def budget_group=(value); end

  sig { void }
  def clear_account_id; end

  sig { void }
  def clear_account_type; end

  sig { void }
  def clear_budget_group; end

  sig { void }
  def clear_customer_id; end

  sig { void }
  def clear_product_name; end

  sig { void }
  def clear_usage_at; end

  sig { void }
  def clear_zuora_product_rate_plan_charges; end

  sig { returns(Integer) }
  def customer_id; end

  sig { params(value: Integer).void }
  def customer_id=(value); end

  sig { returns(String) }
  def product_name; end

  sig { params(value: String).void }
  def product_name=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def usage_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def usage_at=(value); end

  sig { returns(T.nilable(MonolithTwirp::Billing::Accounts::V1::ZuoraProductRatePlanCharges)) }
  def zuora_product_rate_plan_charges; end

  sig { params(value: T.nilable(MonolithTwirp::Billing::Accounts::V1::ZuoraProductRatePlanCharges)).void }
  def zuora_product_rate_plan_charges=(value); end
end

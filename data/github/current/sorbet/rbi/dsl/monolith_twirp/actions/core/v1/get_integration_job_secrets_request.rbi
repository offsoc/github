# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Actions::Core::V1::GetIntegrationJobSecretsRequest`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Actions::Core::V1::GetIntegrationJobSecretsRequest`.

class MonolithTwirp::Actions::Core::V1::GetIntegrationJobSecretsRequest
  sig do
    params(
      bare_job_name: T.nilable(String),
      dynamic_workflow: T.nilable(MonolithTwirp::Actions::Core::V1::DynamicWorkflow),
      environment_name: T.nilable(String),
      integration_name: T.nilable(String),
      is_hosted_runner: T.nilable(T::Boolean),
      repository_id: T.nilable(Integer),
      workflow_run_id: T.nilable(Integer)
    ).void
  end
  def initialize(bare_job_name: nil, dynamic_workflow: nil, environment_name: nil, integration_name: nil, is_hosted_runner: nil, repository_id: nil, workflow_run_id: nil); end

  sig { returns(String) }
  def bare_job_name; end

  sig { params(value: String).void }
  def bare_job_name=(value); end

  sig { void }
  def clear_bare_job_name; end

  sig { void }
  def clear_dynamic_workflow; end

  sig { void }
  def clear_environment_name; end

  sig { void }
  def clear_integration_name; end

  sig { void }
  def clear_is_hosted_runner; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_workflow_run_id; end

  sig { returns(T.nilable(MonolithTwirp::Actions::Core::V1::DynamicWorkflow)) }
  def dynamic_workflow; end

  sig { params(value: T.nilable(MonolithTwirp::Actions::Core::V1::DynamicWorkflow)).void }
  def dynamic_workflow=(value); end

  sig { returns(String) }
  def environment_name; end

  sig { params(value: String).void }
  def environment_name=(value); end

  sig { returns(String) }
  def integration_name; end

  sig { params(value: String).void }
  def integration_name=(value); end

  sig { returns(T::Boolean) }
  def is_hosted_runner; end

  sig { params(value: T::Boolean).void }
  def is_hosted_runner=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(Integer) }
  def workflow_run_id; end

  sig { params(value: Integer).void }
  def workflow_run_id=(value); end
end

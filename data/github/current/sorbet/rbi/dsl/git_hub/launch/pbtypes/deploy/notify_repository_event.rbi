# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Pbtypes::Deploy::NotifyRepositoryEvent`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Pbtypes::Deploy::NotifyRepositoryEvent`.

class GitHub::Launch::Pbtypes::Deploy::NotifyRepositoryEvent
  sig do
    params(
      action: T.nilable(String),
      actor_login: T.nilable(String),
      actor_node_id: T.nilable(String),
      default_branch_changed: T.nilable(T::Boolean),
      installation_id: T.nilable(Integer),
      owner_database_id: T.nilable(Integer),
      repository_id: T.nilable(Integer),
      repository_node_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      repository_owner_node_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)
    ).void
  end
  def initialize(action: nil, actor_login: nil, actor_node_id: nil, default_branch_changed: nil, installation_id: nil, owner_database_id: nil, repository_id: nil, repository_node_id: nil, repository_owner_node_id: nil); end

  sig { returns(String) }
  def action; end

  sig { params(value: String).void }
  def action=(value); end

  sig { returns(String) }
  def actor_login; end

  sig { params(value: String).void }
  def actor_login=(value); end

  sig { returns(String) }
  def actor_node_id; end

  sig { params(value: String).void }
  def actor_node_id=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_actor_login; end

  sig { void }
  def clear_actor_node_id; end

  sig { void }
  def clear_default_branch_changed; end

  sig { void }
  def clear_installation_id; end

  sig { void }
  def clear_owner_database_id; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_repository_node_id; end

  sig { void }
  def clear_repository_owner_node_id; end

  sig { returns(T::Boolean) }
  def default_branch_changed; end

  sig { params(value: T::Boolean).void }
  def default_branch_changed=(value); end

  sig { returns(Integer) }
  def installation_id; end

  sig { params(value: Integer).void }
  def installation_id=(value); end

  sig { returns(Integer) }
  def owner_database_id; end

  sig { params(value: Integer).void }
  def owner_database_id=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def repository_node_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def repository_node_id=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def repository_owner_node_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def repository_owner_node_id=(value); end
end

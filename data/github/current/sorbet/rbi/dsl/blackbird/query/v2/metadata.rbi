# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Blackbird::Query::V2::Metadata`.
# Please instead update this file by running `bin/tapioca dsl Blackbird::Query::V2::Metadata`.

class Blackbird::Query::V2::Metadata
  sig do
    params(
      cluster_name: T.nilable(String),
      corpus_name: T.nilable(String),
      docs_returned: T.nilable(Integer),
      experiments_enabled: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      had_shard_failure: T.nilable(T::Boolean),
      is_failure: T.nilable(T::Boolean),
      limit_reached: T.nilable(T::Boolean),
      num_filtered_documents: T.nilable(Integer),
      query_ast: T.nilable(String),
      query_id: T.nilable(String),
      retries: T.nilable(Integer),
      satisfied: T.nilable(T::Boolean),
      shards: T.nilable(T.any(Google::Protobuf::RepeatedField[Blackbird::Query::V2::ShardMetadata], T::Array[Blackbird::Query::V2::ShardMetadata])),
      timing: T.nilable(Blackbird::Query::V2::Timing),
      total_cost: T.nilable(Float)
    ).void
  end
  def initialize(cluster_name: nil, corpus_name: nil, docs_returned: nil, experiments_enabled: T.unsafe(nil), had_shard_failure: nil, is_failure: nil, limit_reached: nil, num_filtered_documents: nil, query_ast: nil, query_id: nil, retries: nil, satisfied: nil, shards: T.unsafe(nil), timing: nil, total_cost: nil); end

  sig { void }
  def clear_cluster_name; end

  sig { void }
  def clear_corpus_name; end

  sig { void }
  def clear_docs_returned; end

  sig { void }
  def clear_experiments_enabled; end

  sig { void }
  def clear_had_shard_failure; end

  sig { void }
  def clear_is_failure; end

  sig { void }
  def clear_limit_reached; end

  sig { void }
  def clear_num_filtered_documents; end

  sig { void }
  def clear_query_ast; end

  sig { void }
  def clear_query_id; end

  sig { void }
  def clear_retries; end

  sig { void }
  def clear_satisfied; end

  sig { void }
  def clear_shards; end

  sig { void }
  def clear_timing; end

  sig { void }
  def clear_total_cost; end

  sig { returns(String) }
  def cluster_name; end

  sig { params(value: String).void }
  def cluster_name=(value); end

  sig { returns(String) }
  def corpus_name; end

  sig { params(value: String).void }
  def corpus_name=(value); end

  sig { returns(Integer) }
  def docs_returned; end

  sig { params(value: Integer).void }
  def docs_returned=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def experiments_enabled; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def experiments_enabled=(value); end

  sig { returns(T::Boolean) }
  def had_shard_failure; end

  sig { params(value: T::Boolean).void }
  def had_shard_failure=(value); end

  sig { returns(T::Boolean) }
  def is_failure; end

  sig { params(value: T::Boolean).void }
  def is_failure=(value); end

  sig { returns(T::Boolean) }
  def limit_reached; end

  sig { params(value: T::Boolean).void }
  def limit_reached=(value); end

  sig { returns(Integer) }
  def num_filtered_documents; end

  sig { params(value: Integer).void }
  def num_filtered_documents=(value); end

  sig { returns(String) }
  def query_ast; end

  sig { params(value: String).void }
  def query_ast=(value); end

  sig { returns(String) }
  def query_id; end

  sig { params(value: String).void }
  def query_id=(value); end

  sig { returns(Integer) }
  def retries; end

  sig { params(value: Integer).void }
  def retries=(value); end

  sig { returns(T::Boolean) }
  def satisfied; end

  sig { params(value: T::Boolean).void }
  def satisfied=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Blackbird::Query::V2::ShardMetadata]) }
  def shards; end

  sig { params(value: Google::Protobuf::RepeatedField[Blackbird::Query::V2::ShardMetadata]).void }
  def shards=(value); end

  sig { returns(T.nilable(Blackbird::Query::V2::Timing)) }
  def timing; end

  sig { params(value: T.nilable(Blackbird::Query::V2::Timing)).void }
  def timing=(value); end

  sig { returns(Float) }
  def total_cost; end

  sig { params(value: Float).void }
  def total_cost=(value); end
end

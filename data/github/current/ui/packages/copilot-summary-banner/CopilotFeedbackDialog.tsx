import {useState} from 'react'
import {Box, Button, Checkbox, Dialog, FormControl, Link, Text, Textarea, Select} from '@primer/react'
import {testIdProps} from '@github-ui/test-id-props'
import type {ClassificationOptions} from './utils'

export interface CopilotFeedbackDialogProps {
  onSubmitFeedback: (feedbackText: string, canContact: boolean, classification: string) => void
  onCancel: () => void
  isOpen: boolean
  classificationOptions: ClassificationOptions
}

export const CopilotFeedbackDialog = ({
  onCancel,
  onSubmitFeedback,
  isOpen,
  classificationOptions,
}: CopilotFeedbackDialogProps) => {
  const [feedbackText, setFeedbackText] = useState('')
  const [canContact, setCanContact] = useState(false)
  const [classification, setClassification] = useState('0')
  const headerMessage = 'Give feedback'
  const privacyStatementHref = 'https://docs.github.com/site-policy/privacy-policies/github-privacy-statement'
  const disclosure = (
    <Text sx={{fontSize: 'small', color: 'fg.muted'}}>
      Pull request description content generated by Copilot will be included in this feedback report. For more
      information, please view our{' '}
      <Link inline href={privacyStatementHref} target="_blank" data-testid="copilot-privacy-statement-link">
        privacy statement
      </Link>
      .
    </Text>
  )
  const feedbackPrompt = 'Details'
  const contactPrompt = 'I am open to a GitHub team member following up on my feedback'

  const onClickSubmitFeedback = (e: React.SyntheticEvent<EventTarget>) => {
    e.preventDefault()

    if (feedbackText.trim()) {
      onCancel()
      onSubmitFeedback(feedbackText, canContact, classification)
    }
  }

  return (
    <Dialog
      aria-label="Provide additional feedback on this Copilot PR Summary"
      isOpen={isOpen}
      onDismiss={onCancel}
      sx={{overflowY: 'auto'}}
      {...testIdProps('copilot-feedback-dialog')}
    >
      <Dialog.Header>{headerMessage}</Dialog.Header>
      <Box sx={{display: 'flex', flexDirection: 'column', padding: 3}}>
        <div key={`q-1`}>
          <FormControl sx={{pb: 3}}>
            <FormControl.Label sx={{fontWeight: 'bold'}}>What happened?</FormControl.Label>
            <Select
              onChange={e => setClassification(e.currentTarget.value)}
              placeholder="Select..."
              size="large"
              sx={{width: '100%'}}
            >
              {Object.entries(classificationOptions).map(([value, description]) => (
                <Select.Option key={value} value={value}>
                  {description}
                </Select.Option>
              ))}
            </Select>
          </FormControl>

          <FormControl sx={{pb: 3}}>
            <FormControl.Label sx={{fontWeight: 'bold'}}>{feedbackPrompt}</FormControl.Label>
            <Textarea
              rows={4}
              sx={{width: '100%'}}
              onChange={e => setFeedbackText(e.currentTarget.value)}
              {...testIdProps('submit-feedback-input')}
            />
          </FormControl>
          <Box sx={{display: 'flex', flexDirection: 'row', justifyContent: 'flex-start', pb: 3}}>
            <FormControl>
              <Checkbox checked={canContact} onChange={e => setCanContact(e.target.checked)} />
              <FormControl.Label sx={{fontWeight: 'normal'}}>{contactPrompt}</FormControl.Label>
            </FormControl>
          </Box>
        </div>
        <Box sx={{pb: 3}}>{disclosure}</Box>
        <Box sx={{display: 'flex', flexDirection: 'row', justifyContent: 'flex-end'}}>
          <Button onClick={onCancel}>Cancel</Button>
          <Button
            disabled={!feedbackText.trim()}
            variant="primary"
            onClick={onClickSubmitFeedback}
            sx={{ml: 2}}
            {...testIdProps('submit-feedback-button')}
          >
            Submit feedback
          </Button>
        </Box>
      </Box>
    </Dialog>
  )
}

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bertrpc` gem.
# Please instead update this file by running `bin/tapioca gem bertrpc`.

# This class, BERTRPC::MuxHandler::CallState, contains the state
# associated with a single operation, several of which are expected to
# proceed in parallel.
#
# The state includes a host:port to connect to, bytes to be written,
# and any bytes of the response read so far. There's a state machine
# that walks through :start -> :connecting -> :writing ->
# :reading_header -> :reading_data -> :complete, or switches to
# :failed on failure.
#
# The #run call advances the state machine. The caller should call
# #run once in any case to get the connection started. Thereafter, it
# should read [read_fd, write_fd] from #select_fds to see which fds
# need to be IO.selected on, and call #run again whenever one of those
# fds is ready for read/write. read_fd or write_fd are nil if the
# state doesn't want to read or write, respectively. When the state
# machine is done (either :complete or :failed), #select_fds returns
# [nil, nil].
#
# source://bertrpc//lib/bertrpc/service.rb#1
module BERTRPC
  class << self
    # source://bertrpc//lib/bertrpc.rb#14
    def version; end
  end
end

# source://bertrpc//lib/bertrpc/action.rb#2
class BERTRPC::Action
  include ::BERTRPC::Encodes

  # @return [Action] a new instance of Action
  #
  # source://bertrpc//lib/bertrpc/action.rb#5
  def initialize(svc, req, mod, fun, args); end

  # Creates a socket object which does speedy, non-blocking reads
  # and can perform reliable read timeouts.
  #
  # Raises Timeout::Error on timeout.
  #
  #   +host+ String address of the target TCP server
  #   +port+ Integer port of the target TCP server
  #   +timeout+ Optional Integer (in seconds) of the read timeout
  #
  # source://bertrpc//lib/bertrpc/action.rb#86
  def connect_to(host, port, timeout = T.unsafe(nil)); end

  # source://bertrpc//lib/bertrpc/action.rb#13
  def execute(mod_obj = T.unsafe(nil), mux_handler = T.unsafe(nil)); end

  # source://bertrpc//lib/bertrpc/action.rb#40
  def mux_transaction(bert_request, mod_obj, mux_handler); end

  # source://bertrpc//lib/bertrpc/action.rb#30
  def read(sock, len); end

  # source://bertrpc//lib/bertrpc/action.rb#46
  def transaction(bert_request); end

  # private
  #
  # source://bertrpc//lib/bertrpc/action.rb#25
  def write(sock, bert); end
end

# source://bertrpc//lib/bertrpc/errors.rb#2
class BERTRPC::BERTRPCError < ::StandardError
  # @return [BERTRPCError] a new instance of BERTRPCError
  #
  # source://bertrpc//lib/bertrpc/errors.rb#5
  def initialize(msg = T.unsafe(nil), klass = T.unsafe(nil), bt = T.unsafe(nil)); end

  # Returns the value of attribute code.
  #
  # source://bertrpc//lib/bertrpc/errors.rb#3
  def code; end

  # Sets the attribute code
  #
  # @param value the value to set the attribute code to.
  #
  # source://bertrpc//lib/bertrpc/errors.rb#3
  def code=(_arg0); end

  # Returns the value of attribute original_exception.
  #
  # source://bertrpc//lib/bertrpc/errors.rb#3
  def original_exception; end

  # Sets the attribute original_exception
  #
  # @param value the value to set the attribute original_exception to.
  #
  # source://bertrpc//lib/bertrpc/errors.rb#3
  def original_exception=(_arg0); end
end

# source://bertrpc//lib/bertrpc/errors.rb#29
class BERTRPC::ConnectionError < ::BERTRPC::BERTRPCError
  # @return [ConnectionError] a new instance of ConnectionError
  #
  # source://bertrpc//lib/bertrpc/errors.rb#31
  def initialize(host, port); end

  # Returns the value of attribute host.
  #
  # source://bertrpc//lib/bertrpc/errors.rb#30
  def host; end

  # Returns the value of attribute port.
  #
  # source://bertrpc//lib/bertrpc/errors.rb#30
  def port; end
end

# source://bertrpc//lib/bertrpc/encodes.rb#2
module BERTRPC::Encodes
  # source://bertrpc//lib/bertrpc/encodes.rb#7
  def decode_bert_response(bert_response); end

  # source://bertrpc//lib/bertrpc/encodes.rb#21
  def decode_error(err); end

  # source://bertrpc//lib/bertrpc/encodes.rb#3
  def encode_ruby_request(ruby_request); end
end

# source://bertrpc//lib/bertrpc/errors.rb#73
class BERTRPC::InvalidOption < ::BERTRPC::BERTRPCError; end

# source://bertrpc//lib/bertrpc/mod.rb#2
class BERTRPC::Mod
  # @return [Mod] a new instance of Mod
  #
  # source://bertrpc//lib/bertrpc/mod.rb#5
  def initialize(svc, req, mod); end

  # source://bertrpc//lib/bertrpc/mod.rb#11
  def build_action(cmd, *args); end

  # source://bertrpc//lib/bertrpc/mod.rb#16
  def method_missing(cmd, *args); end

  # Returns the value of attribute mux_handler.
  #
  # source://bertrpc//lib/bertrpc/mod.rb#3
  def mux_handler; end

  # Sets the attribute mux_handler
  #
  # @param value the value to set the attribute mux_handler to.
  #
  # source://bertrpc//lib/bertrpc/mod.rb#3
  def mux_handler=(_arg0); end
end

# source://bertrpc//lib/bertrpc/mux_call_state.rb#23
class BERTRPC::MuxHandler
  # @return [MuxHandler] a new instance of MuxHandler
  #
  # source://bertrpc//lib/bertrpc/mux_handler.rb#25
  def initialize; end

  # source://bertrpc//lib/bertrpc/mux_handler.rb#49
  def connect(mod, host, port); end

  # source://bertrpc//lib/bertrpc/mux_handler.rb#30
  def queue(client); end

  # Run all queued operations.
  # If `timeout` seconds elapse before all results are received,
  # unfinished connections are aborted.  A `timeout` value of nil lets
  # operations run indefinitely.
  # Once operations have been run, call any associated callbacks.
  #
  # source://bertrpc//lib/bertrpc/mux_handler.rb#42
  def run(timeout, connect_timeout); end

  # source://bertrpc//lib/bertrpc/mux_handler.rb#55
  def write(mod, data); end

  private

  # Parse responses, set result and error values, and then call the
  # appropriate callbacks.
  #
  # source://bertrpc//lib/bertrpc/mux_handler.rb#136
  def call_callbacks(timeout); end

  # Clean up each call -- i.e., close their sockets.
  #
  # source://bertrpc//lib/bertrpc/mux_handler.rb#128
  def clean_up_calls; end

  # Do the I/O (connect, write, read) for each RPC, until and unless
  # timeout elapses.
  #
  # source://bertrpc//lib/bertrpc/mux_handler.rb#64
  def run_io(timeout, connect_timeout); end
end

# source://bertrpc//lib/bertrpc/mux_call_state.rb#24
class BERTRPC::MuxHandler::CallState
  include ::BERTRPC::Encodes

  # @return [CallState] a new instance of CallState
  #
  # source://bertrpc//lib/bertrpc/mux_call_state.rb#30
  def initialize; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#55
  def call_callbacks; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#95
  def cleanup; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#70
  def connect(host, port); end

  # @return [Boolean]
  #
  # source://bertrpc//lib/bertrpc/mux_call_state.rb#78
  def connected?; end

  # Returns the value of attribute error.
  #
  # source://bertrpc//lib/bertrpc/mux_call_state.rb#25
  def error; end

  # Sets the attribute error
  #
  # @param value the value to set the attribute error to.
  #
  # source://bertrpc//lib/bertrpc/mux_call_state.rb#25
  def error=(_arg0); end

  # @return [Boolean]
  #
  # source://bertrpc//lib/bertrpc/mux_call_state.rb#82
  def finished?; end

  # Returns the value of attribute host.
  #
  # source://bertrpc//lib/bertrpc/mux_call_state.rb#26
  def host; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#45
  def on_complete(&block); end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#50
  def on_error(&block); end

  # Returns the value of attribute port.
  #
  # source://bertrpc//lib/bertrpc/mux_call_state.rb#26
  def port; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#86
  def read_data; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#91
  def read_result; end

  # Returns the value of attribute result.
  #
  # source://bertrpc//lib/bertrpc/mux_call_state.rb#26
  def result; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#65
  def result=(val); end

  # Execute the next step in the connection's state machine.
  # States are:
  #   :start = nothing has been done with this socket yet
  #   :connecting = SYN sent, select-on-write to get result
  #   :writing = connection completed, 0<=x<N bytes written so far
  #   :reading_header = writing complete, 0<=x<4 bytes read
  #   :reading_data = header-read complete, 0<=x<N data bytes read
  #   :complete = all reads and writes completed
  #   :failed = call has failed
  #
  # source://bertrpc//lib/bertrpc/mux_call_state.rb#111
  def run; end

  # Returns the value of attribute select_fds.
  #
  # source://bertrpc//lib/bertrpc/mux_call_state.rb#26
  def select_fds; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#41
  def to_s; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#74
  def write(data); end

  private

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#163
  def do_connecting; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#220
  def do_reading_data; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#191
  def do_reading_header; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#142
  def do_start; end

  # source://bertrpc//lib/bertrpc/mux_call_state.rb#176
  def do_writing; end

  # Advance the state machine if possible. Return a truthy value
  # if the next state should run immediately.
  #
  # source://bertrpc//lib/bertrpc/mux_call_state.rb#123
  def run_one; end
end

# source://bertrpc//lib/bertrpc/errors.rb#56
class BERTRPC::ProtocolError < ::BERTRPC::BERTRPCError; end

# source://bertrpc//lib/bertrpc/errors.rb#58
BERTRPC::ProtocolError::NO_DATA = T.let(T.unsafe(nil), Array)

# source://bertrpc//lib/bertrpc/errors.rb#57
BERTRPC::ProtocolError::NO_HEADER = T.let(T.unsafe(nil), Array)

# source://bertrpc//lib/bertrpc/errors.rb#69
class BERTRPC::ProxyError < ::BERTRPC::BERTRPCError; end

# Raised when unexpected EOF is reached on the socket.
#
# source://bertrpc//lib/bertrpc/errors.rb#48
class BERTRPC::ReadError < ::BERTRPC::BERTRPCError
  # @return [ReadError] a new instance of ReadError
  #
  # source://bertrpc//lib/bertrpc/errors.rb#50
  def initialize(host, port); end

  # Returns the value of attribute host.
  #
  # source://bertrpc//lib/bertrpc/errors.rb#49
  def host; end

  # Returns the value of attribute port.
  #
  # source://bertrpc//lib/bertrpc/errors.rb#49
  def port; end
end

# Raised when we don't get a response from a server in a timely
# manner. This typically occurs in spite of a successful connection.
#
# source://bertrpc//lib/bertrpc/errors.rb#39
class BERTRPC::ReadTimeoutError < ::BERTRPC::BERTRPCError
  # @return [ReadTimeoutError] a new instance of ReadTimeoutError
  #
  # source://bertrpc//lib/bertrpc/errors.rb#41
  def initialize(host, port, timeout); end

  # Returns the value of attribute host.
  #
  # source://bertrpc//lib/bertrpc/errors.rb#40
  def host; end

  # Returns the value of attribute port.
  #
  # source://bertrpc//lib/bertrpc/errors.rb#40
  def port; end

  # Returns the value of attribute timeout.
  #
  # source://bertrpc//lib/bertrpc/errors.rb#40
  def timeout; end
end

# source://bertrpc//lib/bertrpc/errors.rb#25
class BERTRPC::RemoteError < ::StandardError; end

# source://bertrpc//lib/bertrpc/request.rb#2
class BERTRPC::Request
  # @return [Request] a new instance of Request
  #
  # source://bertrpc//lib/bertrpc/request.rb#5
  def initialize(svc, kind, options); end

  # Returns the value of attribute kind.
  #
  # source://bertrpc//lib/bertrpc/request.rb#3
  def kind; end

  # Sets the attribute kind
  #
  # @param value the value to set the attribute kind to.
  #
  # source://bertrpc//lib/bertrpc/request.rb#3
  def kind=(_arg0); end

  # source://bertrpc//lib/bertrpc/request.rb#11
  def method_missing(cmd, *args); end

  # Returns the value of attribute options.
  #
  # source://bertrpc//lib/bertrpc/request.rb#3
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://bertrpc//lib/bertrpc/request.rb#3
  def options=(_arg0); end
end

# source://bertrpc//lib/bertrpc/errors.rb#61
class BERTRPC::ServerError < ::BERTRPC::BERTRPCError; end

# source://bertrpc//lib/bertrpc/service.rb#2
class BERTRPC::Service
  # @return [Service] a new instance of Service
  #
  # source://bertrpc//lib/bertrpc/service.rb#5
  def initialize(host, port, timeout = T.unsafe(nil), connect_timeout = T.unsafe(nil)); end

  # source://bertrpc//lib/bertrpc/service.rb#12
  def call(options = T.unsafe(nil)); end

  # source://bertrpc//lib/bertrpc/service.rb#17
  def cast(options = T.unsafe(nil)); end

  # Returns the value of attribute connect_timeout.
  #
  # source://bertrpc//lib/bertrpc/service.rb#3
  def connect_timeout; end

  # Sets the attribute connect_timeout
  #
  # @param value the value to set the attribute connect_timeout to.
  #
  # source://bertrpc//lib/bertrpc/service.rb#3
  def connect_timeout=(_arg0); end

  # Returns the value of attribute host.
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://bertrpc//lib/bertrpc/service.rb#3
  def host=(_arg0); end

  # Returns the value of attribute port.
  #
  # source://bertrpc//lib/bertrpc/service.rb#3
  def port; end

  # Sets the attribute port
  #
  # @param value the value to set the attribute port to.
  #
  # source://bertrpc//lib/bertrpc/service.rb#3
  def port=(_arg0); end

  # Returns the value of attribute timeout.
  #
  # source://bertrpc//lib/bertrpc/service.rb#3
  def timeout; end

  # Sets the attribute timeout
  #
  # @param value the value to set the attribute timeout to.
  #
  # source://bertrpc//lib/bertrpc/service.rb#3
  def timeout=(_arg0); end

  # private
  #
  # source://bertrpc//lib/bertrpc/service.rb#24
  def verify_options(options); end
end

# source://bertrpc//lib/bertrpc/errors.rb#65
class BERTRPC::UserError < ::BERTRPC::BERTRPCError; end

# source://bertrpc//lib/bertrpc.rb#20
BERTRPC::VERSION = T.let(T.unsafe(nil), String)

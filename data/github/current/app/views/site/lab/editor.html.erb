<% page_meta = {
    title: "Brand Lab • Editor",
    id: "lab",
    description: "An internal brand sandbox for trying out new ideas and testing out new features. This is not a public-facing site.",
  }

  page_info \
  title: page_meta[:title],
  description: page_meta[:description]
%>

<%= render "site/lab/nav" %>

<%= render Site::SectionComponent.new do %>
  <%= render Site::HeroComponent.new(
      header: "Editor",
      text: "Editor component with Copilot suggestions.",
      badge: "Internal"
    )
  %>

  <tab-container class="d-flex flex-column flex-md-row gutter">
    <div role="tablist" class="mb-4 d-flex flex-column col-12 col-md-3">
      <%= render Site::ButtonComponent.new(
        scheme: :subtle,
        id: "sentiments",
        role: "tab",
        aria: { selected: true },
        classes: "text-left copilot-tab-mktg"
      ) do %>
        <%= primer_octicon(:smiley, size: :medium, mr: 2) %>
        Sentiment
      <% end %>

      <%= render Site::ButtonComponent.new(
        scheme: :subtle,
        id: "runtime",
        role: "tab",
        classes: "text-left copilot-tab-mktg"
      ) do %>
        <%= primer_octicon(:hourglass, size: :medium, mr: 2) %>
        Runtime
      <% end %>

      <%= render Site::ButtonComponent.new(
        scheme: :subtle,
        id: "fetch-tweets",
        role: "tab",
        classes: "text-left copilot-tab-mktg"
      ) do %>
        <%= svg("modules/site/icons/twitter.svg", width: 24, height: 24, class: "octicon mr-2") %>
        Fetch tweets
      <% end %>

      <%= render Site::ButtonComponent.new(
        scheme: :subtle,
        id: "draw-scratterplot",
        role: "tab",
        classes: "text-left copilot-tab-mktg"
      ) do %>
        <%= primer_octicon("graph", size: :medium, mr: 2) %>
        Draw a scatterplot
      <% end %>

      <%= render Site::ButtonComponent.new(
        scheme: :subtle,
        id: "memoization",
        role: "tab",
        classes: "text-left copilot-tab-mktg"
      ) do %>
        <%= primer_octicon(:database, size: :medium, mr: 2) %>
        Memoization
      <% end %>

      <%= render Site::ButtonComponent.new(
        scheme: :subtle,
        id: "goodreads-rating",
        role: "tab",
        classes: "text-left copilot-tab-mktg"
      ) do %>
        <%= primer_octicon(:repo, size: :medium, mr: 2) %>
        Goodreads rating
      <% end %>
    </div>

    <%= content_tag(:div, role: "tabpanel", class: "col-12 col-md-9", aria: { labelledby: "sentiments" }) do %>
      <%= render Site::EditorComponent.new(
        shadow_size: :large,
        classes: "copilot-editor-mktg",
        files: [
          {
            name: "sentiments.ts",
            animated_line_start: 5,
            suggested_line_start: 8,
            code: <<~EOS
              #!/usr/bin/env ts-node

              import { fetch } from "fetch-h2";

              // Determine whether the sentiment of text is positive
              // Use a web service
              async function isPositive(text: string): Promise<boolean> {
                const response = await fetch(`http://text-processing.com/api/sentiment/`, {
                  method: "POST",
                  body: `text=${text}`,
                  headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                  },
                });
                const json = await response.json();
                return json.label === "pos";
              }
            EOS
          },
          {
            name: "write_sql.go",
            animated_line_start: 13,
            suggested_line_start: 14,
            code: <<~EOS
              package main

              type CategorySummary struct {
                  Title       string
                  Tasks       int
                  AvgValue    float64
              }

              func createTables(db *sql.DB) {
                  db.Exec("CREATE TABLE tasks (id INTEGER PRIMARY KEY, title TEXT, value INTEGER, category TEXT)")
              }

              func createCategorySummaries(db *sql.DB) ([]CategorySummary, error) {
                  var summaries []CategorySummary
                  rows, err := db.Query("SELECT category, COUNT(category), AVG(value) FROM tasks GROUP BY category")
                  if err != nil {
                      return nil, err
                  }
                  defer rows.Close()

                  for rows.Next() {
                      var summary CategorySummary
                      err := rows.Scan(&summary.Title, &summary.Tasks, &summary.AvgValue)
                      if err != nil {
                          return nil, err
                      }
                      summaries = append(summaries, summary)
                  }
                  return summaries, nil
              }
            EOS
          },
          {
            name: "parse_expenses.py",
            animated_line_start: 3,
            suggested_line_start: 12,
            code: <<~EOS
              import datetime

              def parse_expenses(expenses_string):
                  """Parse the list of expenses and return the list of triples (date, value, currency).
                  Ignore lines starting with #.
                  Parse the date using datetime.
                  Example expenses_string:
                      2016-01-02 -34.01 USD
                      2016-01-03 2.59 DKK
                      2016-01-03 -2.72 EUR
                  """
                  expenses = []
                  for line in expenses_string.splitlines():
                      if line.startswith("#"):
                          continue
                      date, value, currency = line.split(" ")
                      expenses.append((datetime.datetime.strptime(date, "%Y-%m-%d"),
                                      float(value),
                                      currency))
                  return expenses
            EOS
          },
          {
            name: "addresses.rb",
            suggested_line_start: 2,
            code: <<~EOS
              class CreateShippingAddresses < ActiveRecord::Migration
                def change
                  create_table :shipping_addresses do |t|
                    t.string :name
                    t.string :address
                    t.string :city
                    t.string :zip
                    t.string :state
                    t.string :phone
                    t.string :email
                    t.references :shipping_method, index: true, foreign_key: true
                    t.references :customer, index: true, foreign_key: true

                    t.timestamps null: false
                  end
                end
              end
            EOS
          },
        ]
      ) %>
    <% end %>

    <%= content_tag(:div, role: "tabpanel", class: "col-12 col-md-9", aria: { labelledby: "runtime" }, hidden: true) do %>
      <%= render Site::EditorComponent.new(
        classes: "copilot-editor-mktg",
        files: [
          {
            name: "runtime.go",
            animated_line_start: 9,
            suggested_line_start: 11,
            code: <<~EOS
              package main

              type Run struct {
                  Time int // in milliseconds
                  Results string
                  Failed bool
              }

              // Get average runtime of successful runs in seconds
              func averageRuntimeInSeconds(runs []Run) float64 {
                  var totalTime int
                  var failedRuns int
                  for _, run := range runs {
                      if run.Failed {
                          failedRuns++
                      } else {
                          totalTime += run.Time
                      }
                  }

                  averageRuntime := float64(totalTime) / float64(len(runs) - failedRuns) / 1000
                  return averageRuntime
              }
            EOS
          },
          {
            name: "course.rb",
            animated_line_start: 2,
            suggested_line_start: 4,
            code: <<~EOS
              class Course < ApplicationRecord
                has_many :enrollments, dependent: :destroy
                has_many :students, through: :enrollments, source: :user
                has_many :teachers, through: :enrollments, source: :user
                has_many :assignments, dependent: :destroy
                has_many :submissions, through: :assignments

                validates :name, presence: true
                validates :start_date, presence: true
                validates :end_date, presence: true
                validates :term, presence: true
                validates :year, presence: true

                def self.find_by_name(name)
                  Course.find_by(name: name)
                end
              end
            EOS
          },
          {
            name: "time.js",
            animated_line_start: 2,
            suggested_line_start: 3,
            code: <<~EOS
              const seconds = 3600
              const minutes = seconds / 60
              const hours = minutes / 60
              const days = hours / 24
              const weeks = days / 7
              const months = days / 30
              const years = months / 12
            EOS
          },
          {
            name: "IsPrimeTest.java",
            animated_line_start: 4,
            suggested_line_start: 8,
            code: <<~EOS
              import static org.junit.Assert.*;
              import org.junit.Test;

              public class IsPrimeTest {

                // Math.isPrime(int) returns whether the given number is prime or not
                @Test
                public void testIsPrime() {
                  assertTrue(Math.isPrime(2));
                  assertTrue(Math.isPrime(3));
                  assertTrue(Math.isPrime(5));
                  assertTrue(Math.isPrime(7));
                  assertTrue(Math.isPrime(11));
                  assertTrue(Math.isPrime(13));
                  assertTrue(Math.isPrime(17));
                  assertTrue(Math.isPrime(19));
                  assertTrue(Math.isPrime(23));
                  assertTrue(Math.isPrime(29));
              }
            EOS
          },
        ]
      ) %>
    <% end %>

    <%= content_tag(:div, role: "tabpanel", class: "col-12 col-md-9", aria: { labelledby: "fetch-tweets" }, hidden: true) do %>
      <%= render Site::EditorComponent.new(
        classes: "copilot-editor-mktg",
        files: [
          {
            name: "fetch_tweets.js",
            animated_line_start: 3,
            suggested_line_start: 4,
            code: <<~EOS
              const token = process.env["TWITTER_BEARER_TOKEN"]

              const fetchTweetsFromUser = async (screenName, count) => {
                const response = await fetch(
                  `https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=${screenName}&count=${count}`,
                  {
                    headers: {
                      Authorization: `Bearer ${token}`,
                    },
                  }
                )
                const json = await response.json()
                return json
              }
            EOS
          },
          {
            name: "fetch_tweets.py",
            animated_line_start: 3,
            suggested_line_start: 4,
            code: <<~EOS
              import tweepy, os # secrets in environment variables

              def fetch_tweets_from_user(user_name):
                  # authentification
                  auth = tweepy.OAuthHandler(os.environ['TWITTER_KEY'], os.environ['TWITTER_SECRET'])
                  auth.set_access_token(os.environ['TWITTER_TOKEN'], os.environ['TWITTER_TOKEN_SECRET'])
                  api = tweepy.API(auth)

                  # fetch tweets
                  tweets = api.user_timeline(screen_name=user, count=200, include_rts=False)
                  return tweets
            EOS
          },
          {
            name: "fetch_tweets.rb",
            animated_line_start: 3,
            suggested_line_start: 4,
            code: <<~EOS
              require 'twitter'

              def fetch_tweets_from_user(handle)
                twitter = Twitter::REST::Client.new do |config|
                  config.consumer_key        = ENV['TWITTER_CONSUMER_KEY']
                  config.consumer_secret     = ENV['TWITTER_CONSUMER_SECRET']
                  config.access_token        = ENV['TWITTER_ACCESS_TOKEN']
                  config.access_token_secret = ENV['TWITTER_ACCESS_TOKEN_SECRET']
                end
                tweets = twitter.user_timeline(handle)
                tweets
              end
            EOS
          },
          {
            name: "fetch_tweets.ts",
            animated_line_start: 3,
            suggested_line_start: 4,
            code: <<~EOS
              const token = process.env["TWITTER_BEARER_TOKEN"]

              const fetchTweetsFromUser = (userName: string) => {
                const url = `https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=${userName}&count=20`
                return fetch(url, {
                  headers: {
                    "Authorization": `Bearer ${token}`
                  }
                })
                  .then(res => res.json())
                  .then(tweets => tweets.map(tweet => ({
                    id: tweet.id,
                    text: tweet.text,
                    created_at: tweet.created_at,
                    user: {
                      id: tweet.user.id,
                      name: tweet.user.name,
                      screen_name: tweet.user.screen_name,
                      profile_image_url: tweet.user.profile_image_url
                    }
                  })))
              }
            EOS
          },
          {
            name: "fetch_tweets.go",
            animated_line_start: 6,
            suggested_line_start: 7,
            code: <<~EOS
              package main

              var apiKey = os.Getenv("TWITTER_BEARER_TOKEN")
              type Tweet = struct{ Text string }

              func fetchTweetsFromUser(user string) ([]Tweet, error) {
                  url := "https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=" + user + "&count=200"
                  req, err := http.NewRequest("GET", url, nil)
                  if err != nil {
                      return nil, err
                  }
                  req.Header.Set("Authorization", "Bearer "+apiKey)
                  resp, err := http.DefaultClient.Do(req)
                  if err != nil {
                      return nil, err
                  }
                  defer resp.Body.Close()
                  if resp.StatusCode != 200 {
                      return nil, fmt.Errorf("bad status: %d", resp.StatusCode)
                  }
                  var tweets []Tweet
                  if err := json.NewDecoder(resp.Body).Decode(&tweets); err != nil {
                      return nil, err
                  }
                  return tweets, nil
              }
            EOS
          },
        ]
      ) %>
    <% end %>

    <%= content_tag(:div, role: "tabpanel", class: "col-12 col-md-9", aria: { labelledby: "draw-scratterplot" }, hidden: true) do %>
      <%= render Site::EditorComponent.new(
        classes: "copilot-editor-mktg",
        files: [
          {
            name: "draw_scatterplot.js",
            animated_line_start: 3,
            suggested_line_start: 4,
            code: <<~EOS
              import d3 from "d3"

              const drawScatterplot = (data, height, width) => {
                const svg = d3.select("#scatterplot")
                  .append("svg")
                  .attr("height", height)
                  .attr("width", width)

                svg.selectAll("circle")
                  .data(data)
                  .enter()
                  .append("circle")
                  .attr("cx", d => d.x)
                  .attr("cy", d => d.y)
                  .attr("r", 5)
              }
            EOS
          },
          {
            name: "draw_scatterplot.py",
            animated_line_start: 3,
            suggested_line_start: 4,
            code: <<~EOS
              import matplotlib.pyplot as plt

              def draw_scatterplot(x_values, y_values):
                  plt.scatter(x_values, y_values, s=20)
                  plt.title("Scatter Plot")
                  plt.xlabel("x values")
                  plt.ylabel("y values")
                  plt.show()
            EOS
          },
          {
            name: "draw_scatterplot.rb",
            animated_line_start: 3,
            suggested_line_start: 4,
            code: <<~EOS
              require 'gruff'

              def draw_scatterplot(x_values, y_values)
                g = Gruff::Scatter.new(400)
                g.title = "GCD"
                g.x_axis_label = "X"
                g.y_axis_label = "Y"
                g.data('data', x_values, y_values)
                g.write("plot.png")
              end
            EOS
          },
          {
            name: "draw_scatterplot.ts",
            animated_line_start: 3,
            suggested_line_start: 4,
            code: <<~EOS
              import d3 from "d3"

              const drawScatterplot = (
                data: Array<{ x: number; y: number; size: number }>,
                x: d3.ScaleLinear<number, number>,
                y: d3.ScaleLinear<number, number>,
                svg: d3.Selection<SVGGElement, unknown, HTMLElement, any>,
                margin: { top: number; bottom: number; left: number; right: number }
              ) => {
                const width = svg.attr("width") - margin.left - margin.right
                const height = svg.attr("height") - margin.top - margin.bottom

                svg.selectAll("*").remove()

                const g = svg.append("g")
                  .attr("transform", `translate(${margin.left}, ${margin.top})`)

                const xAxis = g
                  .append("g")
                  .attr("transform", `translate(0, ${height})`)
                  .call(d3.axisBottom(x))
              ...
            EOS
          },
        ]
      ) %>
    <% end %>

    <%= content_tag(:div, role: "tabpanel", class: "col-12 col-md-9", aria: { labelledby: "memoization" }, hidden: true) do %>
      <%= render Site::EditorComponent.new(
        classes: "copilot-editor-mktg",
        files: [
          {
            name: "memoize.js",
            suggested_line_start: 2,
            code: <<~EOS
              const memoize = fn => {
                const cache = {};
                return (...args) => {
                  const key = JSON.stringify(args);
                  return (cache[key] = cache[key] || fn(...args));
                };
              }
            EOS
          },
          {
            name: "memoize.py",
            suggested_line_start: 2,
            code: <<~EOS
              def memoize(func):
              cache = {}

              def wrapper(*args):
                  if args in cache:
                      return cache[args]
                  else:
                      cache[args] = func(*args)
                      return cache[args]
              return wrapper
            EOS
          },
          {
            name: "memoize.rb",
            suggested_line_start: 2,
            code: <<~EOS
              def memoize(func)
                cache = {}
                lambda { |*args| cache[args] ||= func.call(*args) }
              end
            EOS
          },
          {
            name: "memoize.ts",
            suggested_line_start: 2,
            code: <<~EOS
              const memoize = (fn: Function): Function => {
                const cache: { [key: string]: any } = {};
                return (...args: any[]): any => {
                  const key = JSON.stringify(args);
                  if (cache[key]) {
                    return cache[key];
                  }
                  const result = fn(...args);
                  cache[key] = result;
                  return result;
                };
              }
            EOS
          },
          {
            name: "memoize.go",
            animated_line_start: 2,
            suggested_line_start: 3,
            code: <<~EOS
              package main
                func Memoize(fn func(int) int) func(int) int {
                    cache := make(map[int]int)
                    return func(n int) int {
                        if v, ok := cache[n]; ok {
                            return v
                        }
                        cache[n] = fn(n)
                        return cache[n]
                    }
                }
            EOS
          },
        ]
      ) %>
    <% end %>

    <%= content_tag(:div, role: "tabpanel", class: "col-12 col-md-9", aria: { labelledby: "goodreads-rating" }, hidden: true) do %>
      <%= render Site::EditorComponent.new(
        classes: "copilot-editor-mktg",
        files: [
          {
            name: "rating.js",
            animated_line_start: 5,
            suggested_line_start: 6,
            code: <<~EOS
              const https = require('https')
              const parseString = require('xml2js').parseString
              const apiKey = process.env["GOODREADS_API_KEY"]

              const getRating = title => {
                return new Promise((resolve, reject) => {
                  https.get(`https://www.goodreads.com/book/title.xml?key=${apiKey}&title=${title}`, res => {
                    let xml = ''
                    res.setEncoding('utf8')
                    res.on('data', chunk => {
                      xml += chunk
                    })
                    res.on('end', () => {
                      parseString(xml, (err, result) => {
                        if (err) {
                          reject(err)
                        } else {
                          resolve(result.GoodreadsResponse.book[0].average_rating)
                        }
                      })
                    })
                  })
                })
              }
            EOS
          },
          {
            name: "rating.py",
            animated_line_start: 4,
            suggested_line_start: 6,
            code: <<~EOS
              import os, requests, json, bs4
              key = os.environ['GOODREADS_API_KEY']

              def get_rating(title) :
                  """Get the average rating of the book from GoodReads, and return a float."""
                  url = 'https://www.goodreads.com/book/title.xml?key=' + key + '&title=' + title
                  response = requests.get(url)
                  soup = bs4.BeautifulSoup(response.text, 'xml')
                  rating = soup.find('average_rating').text
                  return float(rating)
            EOS
          },
          {
            name: "rating.rb",
            animated_line_start: 3,
            suggested_line_start: 4,
            code: <<~EOS
              require 'goodreads'

              def get_rating_of_book_by_title(title)
                client = Goodreads::Client.new(
                  api_key: "YOUR_API_KEY",
                  api_secret: "YOUR_API_SECRET"
                )
                book = client.book(title)
                book.rating
              end
            EOS
          },
          {
            name: "rating.ts",
            animated_line_start: 3,
            suggested_line_start: 4,
            code: <<~EOS
              const apiKey = process.env["GOODREADS_API_KEY"]

              const getRating = (title: string) => {
                return fetch(`https://www.goodreads.com/book/title.xml?key=${apiKey}&title=${title}`)
                  .then(res => res.text())
                  .then(res => {
                    const parser = new DOMParser();
                    const xml = parser.parseFromString(res, "text/xml");
                    const rating = xml.getElementsByTagName("average_rating")[0].textContent;
                    return rating;
                  })
                  .catch(error => console.log(error));
              }
            EOS
          },
          {
            name: "rating.go",
            animated_line_start: 6,
            suggested_line_start: 8,
            code: <<~EOS
              package main
              import ("log"; "net/http"; "net/url"; "os"; "strconv"; "github.com/beevik/etree")
              var (
                  apiKey = os.Getenv("GOODREADS_API_KEY")
              )
              // GetRating gets the average rating of a book using the Goodreads API.
              func GetRating(title string) (float64, error) {
                  u := url.URL{
                      Scheme: "https",
                      Host:   "www.goodreads.com",
                      Path:   "/book/title.xml",
                      RawQuery: url.Values{
                          "key":   {apiKey},
                          "title": {title},
                  }.Encode(),
                }
                resp, err := http.Get(u.String())
                if err != nil {
                    return 0, err
                }
                defer resp.Body.Close()
                doc := etree.NewDocument()
                if _, err := doc.ReadFrom(resp.Body); err != nil {
                    return 0, err
                }
                ratings := doc.FindElements("//average_rating")
                if len(ratings) == 0 {
                    return 0, nil
                }
                rating, err := strconv.ParseFloat(ratings[0].Text(), 64)
                if err != nil {
                    return 0, err
                }
                return rating, nil
              }
            EOS
          },
        ]
      ) %>
    <% end %>
  </tab-container>
<% end %>

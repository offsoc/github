{"version":3,"file":"app_assets_modules_github_editor_yaml-editors_workflow_workflow-rules_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/github/editor/pretty-cron.ts","app/assets/modules/github/editor/cron-parser.ts","app/assets/modules/github/editor/yaml-editors/workflow/workflow-rules.ts"],"sourcesContent":["import cronstrue from 'cronstrue'\nimport parse from './cron-parser'\n\ntype Options = {\n  capitalize?: boolean\n}\n\n/*\n * Given a cronspec, return the human-readable string.\n */\nexport default function prettyCron(cronspec: string, {capitalize = false}: Options = {}): string | null {\n  const schedule = parse(cronspec)\n  if (!schedule) {\n    return null\n  }\n\n  let desc = ''\n  try {\n    desc = cronstrue.toString(cronspec, {\n      dayOfWeekStartIndexZero: true,\n      monthStartIndexZero: false,\n      use24HourTimeFormat: true,\n      // cronstrue sets the description as the error if throwExceptionOnParseError is false\n      // so we need to distinguish between an error and a valid description\n      throwExceptionOnParseError: true,\n    })\n  } catch (err) {\n    return null\n  }\n\n  if (!desc) {\n    return null\n  }\n\n  // By default, cronstrue capitalizes the first letter of the description.\n  if (capitalize) {\n    return desc\n  }\n\n  return desc.charAt(0).toLowerCase() + desc.slice(1)\n}\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\n// Taken and adapted from https://raw.githubusercontent.com/bunkat/later/master/src/parse/cron.js\n// Because the library is no longer maintained\n\n/*\n * Cron\n * (c) 2013 Bill, BunKat LLC.\n *\n * Creates a valid Later schedule from a valid cron expression.\n *\n * Later is freely distributable under the MIT license.\n * For all details and documentation:\n *     https://github.com/bunkat/later\n */\n\n/*\n * Parses a valid cron expression and produces a valid schedule that\n * can then be used with Later.\n *\n * CronParser().parse('5 * * * *', true);\n *\n * @param {String} expr: The cron expression to parse\n * @api public\n */\n\ntype Schedule = {\n  [ket: string]: number[]\n}\n\ninterface Schedules {\n  schedules: Schedule[]\n  exceptions: unknown[]\n}\n\nexport default function parseCron(expr: string) {\n  // Constant array to convert valid names to values\n  const NAMES = {\n    JAN: 1,\n    FEB: 2,\n    MAR: 3,\n    APR: 4,\n    MAY: 5,\n    JUN: 6,\n    JUL: 7,\n    AUG: 8,\n    SEP: 9,\n    OCT: 10,\n    NOV: 11,\n    DEC: 12,\n    SUN: 1,\n    MON: 2,\n    TUE: 3,\n    WED: 4,\n    THU: 5,\n    FRI: 6,\n    SAT: 7,\n  }\n\n  interface Field {\n    // Contains the index, min, max, and offset for each of the constraints\n    constraints: [number, number, number, number]\n    // launch uses the robfig/cron Go package for parsing. It allows a subset of characters,\n    // see https://pkg.go.dev/github.com/robfig/cron?utm_source=godoc\n    // It allows ? to be used identically to *\n    allowedSyntax: RegExp\n  }\n\n  interface Fields {\n    m: Field // minutes\n    h: Field // hours\n    D: Field // day of month\n    M: Field // month\n    d: Field // day of week\n  }\n\n  // Contains the index, min, and max for each of the constraints\n  const FIELDS: Fields = {\n    m: {constraints: [0, 0, 59, 0], allowedSyntax: /^[0-9,*/?-]+$/},\n    h: {constraints: [1, 0, 23, 0], allowedSyntax: /^[0-9,*/?-]+$/},\n    D: {constraints: [2, 1, 31, 0], allowedSyntax: /^[0-9,*/?-]+$/}, // No L or W support\n    M: {constraints: [3, 1, 12, 0], allowedSyntax: /^([0-9,*/?-]|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)+$/},\n    d: {constraints: [4, 1, 7, 1], allowedSyntax: /^([0-6,*/?-]|SUN|MON|TUE|WED|THU|FRI|SAT)+$/}, // No # or L support\n  }\n\n  /*\n   * Returns the value + offset if value is a number, otherwise it\n   * attempts to look up the value in the NAMES table and returns\n   * that result instead.\n   *\n   * @param {Int,String} value: The value that should be parsed\n   * @param {Int} offset: Any offset that must be added to the value\n   */\n  function getValue(value: number | string, offset = 0, max = 9999) {\n    if (isNaN(value)) {\n      return NAMES[value] || null\n    }\n    const num = +value + offset\n    if (num < 0 || num > max) {\n      throw new Error(`Number ${num} out of range [0, ${max}].`)\n    }\n    return num\n  }\n\n  /*\n   * Adds values to the specified constraint in the current schedule.\n   *\n   * @param {Sched} sched: The schedule to add the constraint to\n   * @param {String} name: Name of constraint to add\n   * @param {Int} min: Minimum value for this constraint\n   * @param {Int} max: Maximum value for this constraint\n   * @param {Int} inc: The increment to use between min and max\n   */\n  function add(sched: Schedule, name: string, min: number, max: number, inc = 1) {\n    if (!sched[name]) {\n      sched[name] = []\n    }\n\n    for (let i = min; i <= max; i += inc) {\n      if (sched[name].indexOf(i) < 0) {\n        sched[name].push(i)\n      }\n    }\n\n    sched[name].sort((a, b) => a - b)\n  }\n\n  /*\n   * Adds a range item (of the form x-y/z) to the schedule.\n   *\n   * @param {String} item: The cron expression item to add\n   * @param {Schedule} curSched: The current schedule to add to\n   * @param {String} name: The name to use for this constraint\n   * @param {Int} min: The min value for the constraint\n   * @param {Int} max: The max value for the constraint\n   * @param {Int} offset: The offset to apply to the cron value\n   */\n  function addRange(item: string, curSched: Schedule, name: string, min: number, max: number, offset: number) {\n    // parse range/x\n    const incSplit = item.split('/')\n\n    const inc = +incSplit[1] || undefined\n\n    const range = incSplit[0]\n\n    // parse x-y or * or 0\n    if (range !== '*' && range !== '0') {\n      const rangeSplit = range.split('-')\n      min = getValue(rangeSplit[0], offset, max)\n\n      // fix for issue #13, range may be single digit\n      max = getValue(rangeSplit[1], offset, max) || max\n    }\n\n    add(curSched, name, min, max, inc)\n  }\n\n  /*\n   * Parses a particular item within a cron expression.\n   *\n   * @param {String} item: The cron expression item to parse\n   * @param {Schedule} s: The existing set of schedules\n   * @param {String} name: The name to use for this constraint\n   * @param {Int} min: The min value for the constraint\n   * @param {Int} max: The max value for the constraint\n   * @param {Int} offset: The offset to apply to the cron value\n   */\n  function parse(item: string, s: Schedules, name: string, min: number, max: number, offset: number) {\n    let value\n\n    const schedules = s.schedules\n\n    const curSched = schedules[schedules.length - 1]\n\n    // parse x\n    if ((value = getValue(item, offset, max)) !== null) {\n      add(curSched, name, value, value)\n    }\n    // parse x-y or x-y/z or */z or 0/z\n    else {\n      addRange(item, curSched, name, min, max, offset)\n    }\n  }\n\n  /*\n   * Returns true if the expression components are valid\n   *\n   * @param {String[]} components: The expression components\n   */\n  function isValidComponents(components: string[]): boolean {\n    if (components.length > Object.keys(FIELDS).length) {\n      return false\n    }\n\n    for (let i = 0; i < components.length; i++) {\n      const component = components[i]\n      const validSyntax = Object.values<Field>(FIELDS).find(v => v.constraints[0] === i).allowedSyntax\n      if (!component.match(validSyntax) || component.startsWith('/')) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /*\n   * Parses each of the fields in a cron expression.  The expression must\n   * include the seconds field, the year field is optional.\n   *\n   * @param {String} expr: The cron expression to parse\n   */\n  function parseExpr(expression: string) {\n    const components = expression.replace(/(\\s)+/g, ' ').split(' ')\n    if (!isValidComponents(components)) {\n      return null\n    }\n\n    const schedule: Schedules = {schedules: [{}], exceptions: []}\n\n    for (const field in FIELDS) {\n      const f = FIELDS[field]\n      const component = components[f.constraints[0]]\n      if (component && component !== '*' && component !== '?') {\n        const items = component.split(',')\n        for (let i = 0; i < items.length; i++) {\n          parse(items[i], schedule, field, f.constraints[1], f.constraints[2], f.constraints[3])\n        }\n      }\n    }\n\n    return schedule\n  }\n\n  try {\n    return parseExpr(expr.toUpperCase())\n  } catch {\n    return null\n  }\n}\n","import {\n  type Context,\n  type ContextSuggestion,\n  type Suggestion,\n  filterValues,\n  startsWithAndNotEquals,\n  unescapeContext,\n} from '../autocomplete-util'\nimport type {RootRule, Rule, Rules} from '../yaml-rule-util'\nimport {\n  codeTag,\n  findNode,\n  isFromJsonExpression,\n  extractInputsExpressions,\n  getExpressionContexts,\n  isStringWithExpressions,\n  isExpressionFunction,\n  joinCodeTags,\n  keysForPath,\n  validateGlob,\n} from '../utils'\nimport {featureFlag} from '@github-ui/feature-flags'\nimport {html} from 'lit-html'\nimport prettyCron from '../../pretty-cron'\nimport type {Validation} from '../../codemirror-linter-util'\nimport {unexpectedTypeMessage} from '../yaml-linters'\n\n// See https://docs.github.com/articles/workflow-syntax-for-github-actions\nconst regularStepKeys = ['uses', 'with']\nconst runStepKeys = ['run', 'working-directory', 'shell']\n\nconst inputsTypeMap: Map<string, string> = new Map()\n\nconst validateStepKey = async (workflow: Workflow, path: string[]): Promise<Validation | undefined> => {\n  const lastPath = path[path.length - 1]!\n  const arrFrom = regularStepKeys.includes(lastPath) ? regularStepKeys : runStepKeys\n  const arrForbidden = arrFrom === regularStepKeys ? runStepKeys : regularStepKeys\n\n  const keys = keysForPath(workflow, path.slice(0, path.length - 1))\n  const conflicting = arrForbidden.filter(key => keys.includes(key))\n  if (conflicting.length === 0) return\n\n  return {\n    message: html` ${codeTag(lastPath)} cannot be used with ${joinCodeTags(conflicting)} `,\n    severity: 'warning',\n  }\n}\n\nconst regularJobKeys = [\n  'concurrency',\n  'container',\n  'continue-on-error',\n  'defaults',\n  'env',\n  'environment',\n  'if',\n  'name',\n  'needs',\n  'runs-on',\n  'outputs',\n  'permissions',\n  'services',\n  'steps',\n  'strategy',\n  'timeout-minutes',\n]\nconst callableWorkflowJobKeys = [\n  'if',\n  'name',\n  'needs',\n  'permissions',\n  'secrets',\n  'uses',\n  'with',\n  'concurrency',\n  'strategy',\n]\n\nconst canUseCallableWorkflow = () => {\n  return true\n}\n\nconst canValidateOutputKey = () => {\n  return featureFlag.isFeatureEnabled('ACTIONS_MATRIX_OUTPUT_IMPROVEMENTS')\n}\n\nconst canShowActionsGreenTreeKey = () => {\n  return featureFlag.isFeatureEnabled('ACTIONS_GREEN_TREES')\n}\n\nconst canUseNumberTypeDispatchInputs = () => {\n  return featureFlag.isFeatureEnabled('ACTIONS_NUMBER_TYPE_DISPATCH_INPUTS')\n}\n\nconst validateJobKey = async (workflow: Workflow, path: string[]): Promise<Validation | undefined> => {\n  if (!canUseCallableWorkflow()) return\n  const currentKey = path[path.length - 1]!\n  if (regularJobKeys.includes(currentKey) !== callableWorkflowJobKeys.includes(currentKey)) {\n    // This key is unique to one of the types of jobs\n    const otherKeys = keysForPath(workflow, path.slice(0, path.length - 1)).filter(key => key !== currentKey)\n    // Get any other present keys unique to the other set\n    const conflicting = otherKeys.filter(\n      key =>\n        regularJobKeys.includes(key) !== callableWorkflowJobKeys.includes(key) &&\n        regularJobKeys.includes(key) !== regularJobKeys.includes(currentKey),\n    )\n\n    if (conflicting.length === 0) return\n\n    return {\n      message: html` You can't use ${codeTag(currentKey)} with ${joinCodeTags(conflicting)} `,\n      severity: 'error',\n    }\n  }\n}\n\nconst validateOutputKey = async (workflow: Workflow, path: string[]): Promise<Validation | undefined> => {\n  if (!canValidateOutputKey()) return\n\n  const currentKey = path[path.length - 1]!\n  if (isExpressionFunction(currentKey)) return\n  const contexts = getExpressionContexts(currentKey)\n  const nonMatrixContexts = contexts.filter(x => !x.startsWith('matrix.'))\n  if (nonMatrixContexts.length === 0) return\n\n  return {\n    message: html` Only ${codeTag(`matrix`)} context can be used in output key expression, invalid contexts found:\n    ${nonMatrixContexts.join(', ')}`,\n    severity: 'error',\n  }\n}\n\nconst validateReusableOutputKey = async (workflow: Workflow, path: string[]): Promise<Validation | undefined> => {\n  if (!canValidateOutputKey()) return\n\n  const currentKey = path[path.length - 1]!\n  if (isExpressionFunction(currentKey)) return\n  const contexts = getExpressionContexts(currentKey)\n  const nonInputContexts = contexts.filter(x => !x.startsWith('inputs.'))\n\n  if (nonInputContexts.length === 0) return\n\n  return {\n    message: html` Only ${codeTag(`inputs`)} context can be used in output key expression, invalid contexts found:\n    ${nonInputContexts.join(', ')}`,\n    severity: 'error',\n  }\n}\n\nconst primitiveTypes = ['string', 'number', 'boolean']\n\n// Any event that has a Rule beyond `{ nullable: true }`\nconst irregularEvents = [\n  'merge_group',\n  'push',\n  'pull_request',\n  'pull_request_target',\n  'schedule',\n  'workflow_call',\n  'workflow_run',\n  'workflow_dispatch',\n]\n\nconst regularEvents = [\n  'branch_protection_rule',\n  'check_run',\n  'check_suite',\n  'commit_comment',\n  'create',\n  'delete',\n  'deployment',\n  'deployment_status',\n  'discussion',\n  'discussion_comment',\n  'fork',\n  'gollum',\n  'issue_comment',\n  'issues',\n  'label',\n  'member',\n  'milestone',\n  'package',\n  'page_build',\n  'project',\n  'project_card',\n  'project_column',\n  'public',\n  'pull_request_review_comment',\n  'pull_request_review',\n  'registry_package', // will be deprecated\n  'repository_dispatch',\n  'release',\n  'status',\n  'watch',\n]\n\nconst allEvents = irregularEvents.concat(regularEvents)\n\nconst arrayOrSingleString: Rule = {\n  single: ['string'],\n  items: {\n    single: ['string'],\n  },\n}\n\nconst arrayOrSingleGlob: Rule = {\n  validateValue: validateGlob,\n  single: ['string'],\n  items: {\n    validateValue: validateGlob,\n    single: ['string'],\n  },\n}\n\nconst codeEventRules = (): Rule => {\n  const rules: Rule = {\n    nullable: true,\n    rules: {\n      branches: arrayOrSingleGlob,\n      'branches-ignore': arrayOrSingleGlob,\n      tags: arrayOrSingleGlob,\n      'tags-ignore': arrayOrSingleGlob,\n      paths: arrayOrSingleGlob,\n      'paths-ignore': arrayOrSingleGlob,\n      types: arrayOrSingleString,\n    },\n  }\n\n  if (canShowActionsGreenTreeKey()) {\n    rules.rules = {\n      ...rules.rules,\n      'reuse-previous-outcome': {\n        nullable: false,\n        single: ['boolean'],\n      },\n    }\n  }\n\n  return rules\n}\n\nconst mergeGroupRule = (): Rule => {\n  const mgRules: Rule = {\n    nullable: true,\n    rules: {\n      branches: arrayOrSingleGlob,\n      'branches-ignore': arrayOrSingleGlob,\n    },\n  }\n\n  if (canShowActionsGreenTreeKey()) {\n    mgRules.rules = {\n      ...mgRules.rules,\n      'reuse-previous-outcome': {\n        nullable: false,\n        single: ['boolean'],\n      },\n    }\n  }\n\n  return mgRules\n}\n\nfunction buildWorkflowDispatchRules() {\n  onRules['workflow_dispatch'] = {\n    async validateValue(workflow: Workflow, path: string[], value: unknown): Promise<Validation | undefined> {\n      if (value !== null) {\n        const helpUrl =\n          document.getElementById('workflow-dispatch-help-url')?.getAttribute('data-help-url') ||\n          'https://docs.github.com'\n        return {\n          // prettier-ignore\n          message: html` ${codeTag('workflow_dispatch')} only supports mapping values. <a class=\"Link--inTextBlock\" href=\"${helpUrl}\" target=\"_blank\">Learn more</a> `,\n          severity: 'error',\n        }\n      }\n    },\n    nullable: true,\n    rules: {\n      inputs: {\n        description: 'Inputs for a `workflow_dispatch` event',\n        keyPlaceholder: 'input_name',\n        keyPlaceholderHelp: 'Enter the name for the input',\n        map: {\n          nullable: true,\n          rules: {\n            type: {\n              description: \"Type of this input, defaults to 'text'\",\n              single: ['string'],\n              values: canUseNumberTypeDispatchInputs()\n                ? ['text', 'choice', 'boolean', 'number']\n                : ['text', 'choice', 'boolean'],\n            },\n            options: {\n              description: \"Options for an input of type 'choice'\",\n              multipleValues: true,\n              items: {\n                single: ['string'],\n              },\n            },\n            required: {\n              description: 'Whether this input needs to be specified when running the workflow',\n              single: ['boolean'],\n              values: ['true', 'false'],\n            },\n            description: {\n              description: 'Displays a custom description instead of the name',\n              single: ['string'],\n            },\n            default: {\n              async validateValue(workflow: Workflow, path: string[], value: unknown): Promise<Validation | undefined> {\n                const type = findNode(workflow, [...path.slice(0, path.length - 1), 'type'])\n                if (!type) return\n                if (type === 'boolean') {\n                  if (\n                    (typeof value === 'string' && (value === 'true' || value === 'false')) ||\n                    (typeof value === 'boolean' && (value === true || value === false))\n                  ) {\n                    return\n                  }\n                  return {\n                    message: html`\n                      ${codeTag('type')} is set to ${codeTag(type)} but ${codeTag('default')} has invalid value\n                    `,\n                    severity: 'error',\n                  }\n                }\n                if (canUseNumberTypeDispatchInputs() && type === 'number') {\n                  if (typeof value === 'number') {\n                    return\n                  }\n                  return {\n                    message: html`\n                      ${codeTag('type')} is set to ${codeTag(type)} but ${codeTag('default')} has invalid value\n                    `,\n                    severity: 'error',\n                  }\n                }\n              },\n              description: 'Default value for this input',\n              single: canUseNumberTypeDispatchInputs() ? primitiveTypes : ['string', 'boolean'],\n            },\n          },\n        },\n      },\n    },\n  }\n}\n\nconst onRules: Rules = {\n  merge_group: mergeGroupRule(),\n  push: codeEventRules(),\n  ['pull_request']: codeEventRules(),\n  pull_request_target: codeEventRules(),\n  schedule: {\n    items: {\n      rules: {\n        cron: {\n          single: ['string'],\n          validateValue: async (\n            workflow: Workflow,\n            path: string[],\n            value: unknown,\n          ): Promise<Validation | undefined> => {\n            const explain = prettyCron(String(value))\n            if (!explain) {\n              return {\n                message: html` Unrecognized cron expression `,\n                severity: 'warning',\n              }\n            }\n            const scheduleUrl = document\n              .getElementById('workflow-on-schedule-url')!\n              .getAttribute('data-on-schedule-url')!\n\n            return {\n              message: html`\n                Runs ${explain}. <br />\n                Actions schedules run at most every 5 minutes using UTC time.\n                <a class=\"Link--inTextBlock\" href=\"${scheduleUrl}\" target=\"_blank\">Learn more</a>\n              `,\n              severity: 'info',\n            }\n          },\n        },\n      },\n    },\n  },\n  workflow_run: {\n    nullable: true,\n    rules: {\n      branches: arrayOrSingleGlob,\n      'branches-ignore': arrayOrSingleGlob,\n      workflows: arrayOrSingleString,\n      types: arrayOrSingleString,\n    },\n  },\n}\n\nfunction buildCallableWorkflowRules() {\n  onRules['workflow_call'] = {\n    nullable: true,\n    rules: {\n      inputs: {\n        description: 'Inputs for a `workflow_call` event',\n        keyPlaceholder: 'input_name',\n        keyPlaceholderHelp: 'Enter the name for the input',\n        map: {\n          rules: {\n            description: {\n              description: 'Displays a custom description instead of the name',\n              single: ['string'],\n            },\n            type: {\n              async validateValue(workflow: Workflow, path: string[], value: unknown): Promise<Validation | undefined> {\n                if (typeof value !== 'string' || !primitiveTypes.includes(value)) {\n                  return {\n                    message: html` ${codeTag('type')} must be one of: ${joinCodeTags(primitiveTypes)} `,\n                    severity: 'error',\n                  }\n                }\n              },\n              description: 'The type of value callers can pass for this input',\n              single: ['string'],\n              values: primitiveTypes,\n              required: true,\n            },\n            required: {\n              description: 'Whether this input needs to be specified when calling the workflow',\n              single: ['boolean'],\n              values: ['true', 'false'],\n            },\n            default: {\n              async validateValue(workflow: Workflow, path: string[], value: unknown): Promise<Validation | undefined> {\n                const type = findNode(workflow, [...path.slice(0, path.length - 1), 'type'])\n                if (!type) return\n                if (type === 'string') return // We allow numbers and booleans, coerce them into strings\n                // eslint-disable-next-line valid-typeof\n                if (typeof value !== type) {\n                  return {\n                    message: html`\n                      ${codeTag('type')} is set to ${codeTag(type)}, but ${codeTag('default')} is of type\n                      ${codeTag(typeof value)}\n                    `,\n                    severity: 'error',\n                  }\n                }\n              },\n              description: 'Default value for this input',\n              single: primitiveTypes,\n            },\n          },\n        },\n      },\n      outputs: {\n        description: 'Outputs for a `workflow_call` event',\n        keyPlaceholder: 'output_name',\n        keyPlaceholderHelp: 'Enter the name for the output',\n        map: {\n          validateKey: validateReusableOutputKey,\n          rules: {\n            description: {\n              description: 'Displays a custom description instead of the name',\n              single: ['string'],\n            },\n            value: {\n              description: 'The value callers can receive from this output',\n              single: primitiveTypes,\n            },\n          },\n        },\n      },\n      secrets: {\n        description: 'Inputs passed as secrets for a `workflow_call` event',\n        keyPlaceholder: 'secret_name',\n        keyPlaceholderHelp: 'Enter the name for the secret',\n        map: {\n          rules: {\n            description: {\n              description: 'Displays a custom description instead of the name',\n              single: ['string'],\n            },\n            required: {\n              description: 'Whether this secret needs to be specified when calling the workflow',\n              single: ['boolean'],\n              values: ['true', 'false'],\n            },\n          },\n        },\n      },\n    },\n  }\n}\n\n/*\n * In order to support something like this:\n *\n * on:\n *   issue_comment:\n *   push:\n *     branches: master\n *\n * We need to accept any event also as a key, even if it's empty\n */\nfor (const eventName of regularEvents) {\n  onRules[eventName] = {\n    nullable: true,\n  }\n}\n\nconst permissionRule = {\n  single: ['string'],\n  values: ['read', 'write', 'none'],\n}\n\nconst permissionRules: Rules = {\n  actions: permissionRule,\n  attestations: permissionRule,\n  checks: permissionRule,\n  contents: permissionRule,\n  deployments: permissionRule,\n  discussions: permissionRule,\n  issues: permissionRule,\n  packages: permissionRule,\n  pages: permissionRule,\n  'pull-requests': permissionRule,\n  'repository-projects': permissionRule,\n  'security-events': permissionRule,\n  statuses: permissionRule,\n  'id-token': permissionRule,\n}\nconst serviceAndContainerRules: Rules = {\n  image: {\n    description: 'The Docker image to use as the container to run the action',\n    single: ['string'],\n  },\n  env: {\n    description: 'Sets an array of environment variables in the container',\n    map: {\n      single: ['string', 'number', 'boolean'],\n    },\n  },\n  ports: {\n    description: 'Sets an array of ports to expose on the container',\n    items: {\n      single: ['number', 'string'], // TODO: make them only integers\n    },\n  },\n  volumes: {\n    description: 'Sets an array of volumes for the container to use',\n    items: {\n      single: ['string'],\n    },\n  },\n  options: {\n    description: 'Additional Docker container resource options',\n    single: ['string'],\n  },\n  credentials: {\n    description: 'The username and password to log in to the registry with',\n    rules: {\n      username: {\n        description: 'Container registry username',\n        single: ['string'],\n        required: true,\n      },\n      password: {\n        description: 'Container registry password',\n        single: ['string'],\n        required: true,\n      },\n    },\n  },\n}\n\nconst buildSecretsRule = (): Rule => {\n  if (canUseCallableWorkflow()) {\n    return {\n      description:\n        'A map of the secret parameters defined by the reusable workflow. Use `inherit` to pass all secrets to the referenced workflow',\n      validateKey: validateJobKey,\n      async validateValue(workflow: Workflow, path: string[], value: unknown): Promise<Validation | undefined> {\n        if (typeof value !== 'string') return\n\n        if (value !== 'inherit') {\n          return {\n            message: html`Use ${codeTag('inherit')} to pass all secrets to the called workflow.`,\n            severity: 'error',\n          }\n        }\n      },\n      single: ['string'],\n      map: {\n        single: primitiveTypes,\n      },\n    }\n  } else {\n    return {\n      description: 'A map of the secret parameters defined by the reusable workflow',\n      validateKey: validateJobKey,\n      map: {\n        single: primitiveTypes,\n      },\n    }\n  }\n}\n\nconst buildRunsOnRule = (): Rule => {\n  return {\n    validateKey: validateJobKey,\n    description: 'The type of virtual host machine to run the job on',\n    required: !canUseCallableWorkflow(),\n    multipleValues: true,\n    caseInsensitive: true,\n    single: ['string'],\n    items: {\n      single: ['string'],\n    },\n    rules: {\n      group: {\n        description: 'The runner group name to target the runner group',\n        single: ['string'],\n      },\n      labels: {\n        description: 'The type of virtual host machine to run the job on',\n        multipleValues: true,\n        caseInsensitive: true,\n      },\n    },\n  }\n}\n\n// Includes rules that may be controlled by feature flags\nfunction fullRootRule(): RootRule {\n  return {\n    suggestionsForExpression,\n    processExpression,\n    rules: {\n      name: {\n        description: 'The name of your workflow',\n        single: ['string'],\n      },\n      'run-name': {\n        description: 'The name of the run',\n        single: ['string'],\n      },\n      defaults: {\n        description: 'A set of workflow defaults that will apply to all jobs',\n        rules: {\n          run: {\n            description: 'Set default behavior for all `run` steps within workflow',\n            rules: {\n              shell: {\n                description: 'Set default `shell` for all `run` steps within workflow',\n                single: ['string'],\n              },\n              'working-directory': {\n                description: 'Set default `working-directory` for all `run` steps within workflow',\n                single: ['string'],\n              },\n            },\n          },\n        },\n      },\n      on: {\n        description: 'The name of the GitHub event that triggers the workflow',\n        required: true,\n        values: allEvents,\n        multipleValues: true,\n        rules: onRules,\n      },\n      concurrency: {\n        description: 'The concurrency for this job',\n        single: ['string'],\n        rules: {\n          group: {\n            description: 'The name of the concurrency group to wait for',\n            single: ['string'],\n            required: true,\n          },\n          'cancel-in-progress': {\n            description: 'If new run should cancel in progress runs',\n            single: ['boolean'],\n            required: false,\n          },\n        },\n      },\n      env: {\n        description: 'A map of environment variables that are available to all jobs and steps in the workflow',\n        map: {single: primitiveTypes},\n      },\n      jobs: {\n        description: 'A workflow run is made up of one or more jobs',\n        keyPlaceholder: 'job_id',\n        keyPlaceholderHelp: 'Enter the id for the new job',\n        map: {\n          async validateKey(workflow: Workflow, path: string[]): Promise<Validation | undefined> {\n            const currentJobId = path[1]!.toLowerCase()\n\n            if (!/^[a-z_]/i.test(currentJobId)) {\n              return {\n                message: html` Job id must start with a letter or ${codeTag('_')} `,\n                severity: 'error',\n              }\n            }\n            if (!/^[\\w-]+$/i.test(currentJobId)) {\n              return {\n                message: html` Job id must contain only alphanumeric characters, ${codeTag('-')}, or ${codeTag('_')} `,\n                severity: 'error',\n              }\n            }\n\n            const jobIds = keysForPath(workflow, path.slice(0, path.length - 1)).map(k => k.toLowerCase())\n\n            const uniqueIds = jobIds.filter(jobId => jobId === currentJobId)\n            if (uniqueIds.length > 1) {\n              return {\n                message: html` This job id is already used in another job `,\n                severity: 'error',\n              }\n            }\n\n            const jobKeys = keysForPath(workflow, path)\n            if (canUseCallableWorkflow() && !jobKeys.includes('runs-on') && !jobKeys.includes('uses')) {\n              return {\n                message: html` A job requires either ${codeTag('runs-on')} or ${codeTag('uses')} `,\n                severity: 'error',\n              }\n            }\n          },\n          rules: {\n            if: {\n              description: 'You can use the `if` conditional to prevent a job from running unless a condition is met',\n              single: ['string', 'boolean'],\n            },\n            env: {\n              validateKey: validateJobKey,\n              description: 'A map of environment variables that are available to all steps in the job',\n              map: {single: primitiveTypes},\n            },\n            name: {\n              validateKey: validateJobKey,\n              description: 'The name of the job displayed on GitHub',\n              single: ['string'],\n              async validateValue(workflow: Workflow, path: string[], value: unknown): Promise<Validation | undefined> {\n                if (typeof value !== 'string') return\n                const jobs = findNode(workflow, ['jobs'])\n                if (!jobs || typeof jobs !== 'object') return // should never happen\n                for (const jobId in jobs) {\n                  if (jobId === path[1]) continue // ignore current job\n                  const job = jobs[jobId]\n                  if (typeof job === 'object' && job !== null && (job.name || jobId) === value) {\n                    return {\n                      message: html` This job name is already used in another job `,\n                      severity: 'error',\n                    }\n                  }\n                }\n              },\n            },\n            outputs: {\n              validateKey: validateJobKey,\n              description: 'Declare outputs from this job',\n              map: {\n                single: primitiveTypes,\n                validateKey: validateOutputKey,\n              },\n            },\n            defaults: {\n              validateKey: validateJobKey,\n              description: 'A set of job defaults that will apply to all steps',\n              rules: {\n                run: {\n                  description: 'Set default behavior for all `run` steps within job',\n                  rules: {\n                    shell: {\n                      description: 'Set default `shell` for all `run` steps within job',\n                      single: ['string'],\n                    },\n                    'working-directory': {\n                      description: 'Set default `working-directory` for all `run` steps within job',\n                      single: ['string'],\n                    },\n                  },\n                },\n              },\n            },\n            concurrency: {\n              validateKey: validateJobKey,\n              description: 'The concurrency for this job',\n              single: ['string'],\n              rules: {\n                group: {\n                  description: 'The name of the concurrency group to wait for',\n                  single: ['string'],\n                  required: true,\n                },\n                'cancel-in-progress': {\n                  description: 'If new run should cancel in progress runs',\n                  single: ['boolean'],\n                  required: false,\n                },\n              },\n            },\n            environment: {\n              validateKey: validateJobKey,\n              description: 'The environment for this job',\n              single: ['string'],\n              rules: {\n                name: {\n                  description: 'The name of the environment',\n                  single: ['string'],\n                  required: true,\n                },\n                url: {\n                  description: 'Set the URL for accessing your environment',\n                  single: ['string'],\n                  required: false,\n                },\n              },\n            },\n            needs: {\n              description: 'Identifies any jobs that must complete successfully before this job will run',\n              multipleValues: true,\n              async values(workflow: unknown, path: string[]) {\n                // path[1] is the current job id\n                return keysForPath(workflow, ['jobs']).filter(str => str !== path[1])\n              },\n              async validateValue(workflow: Workflow, path: string[], value: unknown): Promise<Validation | undefined> {\n                if (typeof value !== 'string') return\n                // @ts-expect-error values could be an array which we don't handle\n                const values = await this.values(workflow, path)\n                if (!values.includes(value)) {\n                  if (value === path[1]) {\n                    return {\n                      message: html` A job cannot depend on itself `,\n                      severity: 'error',\n                    }\n                  }\n                  return {\n                    message: html` Unknown job ${codeTag(value)} `,\n                    severity: 'error',\n                  }\n                }\n              },\n            },\n            'runs-on': buildRunsOnRule(),\n            steps: {\n              validateKey: validateJobKey,\n              description: 'The sequence of tasks to run in this job',\n              items: {\n                rules: {\n                  id: {\n                    description: 'A unique identifier for the step',\n                    single: ['string'],\n                    async validateValue(\n                      workflow: Workflow,\n                      path: string[],\n                      value: unknown,\n                    ): Promise<Validation | undefined> {\n                      if (typeof value !== 'string') return\n                      let steps = findNode(workflow, path.slice(0, 3))\n                      if (!Array.isArray(steps)) return\n                      steps = steps.slice()\n                      steps.splice(+path[3]!, 1) // remove current step\n                      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                      if (steps.find((step: any) => typeof step === 'object' && step !== null && step.id === value)) {\n                        return {\n                          message: html` This step id is already used in another step `,\n                          severity: 'error',\n                        }\n                      }\n                    },\n                  },\n                  if: {\n                    description: 'Prevents the step from running unless the condition is met',\n                    single: ['string', 'boolean'],\n                  },\n                  name: {\n                    description: 'The name to display on GitHub',\n                    single: ['string'],\n                  },\n                  uses: {\n                    description: 'Selects an action to run as part of a step in your job',\n                    validateKey: validateStepKey,\n                    single: ['string'],\n                    async validateValue(\n                      workflow: Workflow,\n                      path: string[],\n                      value: unknown,\n                    ): Promise<Validation | undefined> {\n                      if (typeof value !== 'string') return\n\n                      // If it's a Docker action or a local action, just go ahead\n                      // and return.\n                      if (value.startsWith('docker://') || value.startsWith('./')) return\n\n                      const [_, version] = value.split('@')\n\n                      // If version doesn't exist, throw an error\n                      if (!version) {\n                        return {\n                          message: html` Missing version for action `,\n                          severity: 'error',\n                        }\n                      }\n\n                      // If the version looks like a short sha, warn about the upcoming deprecation\n                      if (/\\b[0-9a-f]{7,8}\\b/i.test(version)) {\n                        const helpUrl = document\n                          .getElementById('workflow-short-sha-warning-url')!\n                          .getAttribute('data-help-url')!\n\n                        return {\n                          message: html`\n                            The ref ${codeTag(version)} looks like a short sha. This is not supported, please check the\n                            <a class=\"Link--inTextBlock\" href=\"${helpUrl}\" target=\"_blank\">documentation</a>.\n                          `,\n                          severity: 'warning',\n                        }\n                      }\n                    },\n                  },\n                  run: {\n                    description: \"Runs command line programs using the operating system's shell\",\n                    validateKey: validateStepKey,\n                    single: ['string'],\n                  },\n                  shell: {\n                    description: \"Overrides the default shell settings in the virtual environment's operating system\",\n                    validateKey: validateStepKey,\n                    single: ['string'],\n                    validateValue: async (\n                      workflow: Workflow,\n                      path: string[],\n                      value: unknown,\n                    ): Promise<Validation | undefined> => {\n                      const all = ['bash', 'pwsh', 'python']\n                      const win = ['cmd', 'powershell']\n                      const unix = ['sh']\n\n                      if (typeof value !== 'string') {\n                        return\n                      }\n\n                      if ([...all, ...unix, ...win].includes(value)) {\n                        return\n                      } else if (typeof value === 'string' && value.match(/^\\S+ +\\{0\\}$/i)) {\n                        return\n                      }\n\n                      const helpUrl = document.getElementById('workflow-shell-help-url')!.getAttribute('data-help-url')\n                      return {\n                        message: html`Invalid value. Please check the\n                          <a class=\"Link--inTextBlock\" href=\"${helpUrl}\" target=\"_blank\">documentation</a>.`,\n                        severity: 'error',\n                      }\n                    },\n                  },\n                  with: {\n                    description: 'A map of the input parameters defined by the action',\n                    validateKey: validateStepKey,\n                    map: {\n                      single: primitiveTypes,\n                    },\n                  },\n                  env: {\n                    description: 'Sets environment variables for steps to use in the virtual environment',\n                    map: {\n                      single: primitiveTypes,\n                    },\n                  },\n                  'working-directory': {\n                    description: \"The default directory that the action uses in a job's workspace\",\n                    validateKey: validateStepKey,\n                    single: ['string'],\n                  },\n                  'continue-on-error': {\n                    description: 'Prevents a job from failing when a step fails',\n                    single: ['boolean'],\n                    values: ['true', 'false'],\n                  },\n                  'timeout-minutes': {\n                    description: 'The maximum number of minutes to run the step before killing the process',\n                    single: ['number'],\n                  },\n                },\n              },\n            },\n            'timeout-minutes': {\n              validateKey: validateJobKey,\n              description: 'The maximum number of minutes to let a workflow run before GitHub automatically cancels it',\n              single: ['number'],\n            },\n            'continue-on-error': {\n              validateKey: validateJobKey,\n              description: 'Prevents a workflow run from failing when a job fails',\n              single: ['boolean'],\n              values: ['true', 'false'],\n            },\n            strategy: {\n              validateKey: validateJobKey,\n              description: 'A strategy creates a build matrix for your jobs',\n              rules: {\n                matrix: {\n                  description: 'Set of different configurations of the virtual environment',\n                  map: {\n                    items: {\n                      single: primitiveTypes,\n                      map: {\n                        // for config, exclude and include options\n                        single: primitiveTypes,\n                      },\n                    },\n                    async validateKey(workflow: Workflow, path: string[]): Promise<Validation | undefined> {\n                      const value = findNode(workflow, path)\n                      if (typeof value !== 'object' || !Array.isArray(value)) return\n\n                      const specialKeys = ['config', 'exclude', 'include']\n                      const key = path[path.length - 1]!\n\n                      if (specialKeys.includes(key)) {\n                        if (value.length === 0) return\n                        if (typeof value[0] !== 'object')\n                          return {\n                            message: html` ${joinCodeTags(specialKeys)} must be an array of objects `,\n                            severity: 'error',\n                          }\n                      } else {\n                        if (value.length === 0) {\n                          return {\n                            message: html` ${key} must contain at least one value `,\n                            severity: 'error',\n                          }\n                        }\n                        if (typeof value[0] === 'object')\n                          return {\n                            message: html` Matrix options must only contain primitive values `,\n                            severity: 'error',\n                          }\n                      }\n                    },\n                  },\n                },\n                'fail-fast': {\n                  description: 'When set to true, GitHub cancels all in-progress jobs if any matrix job fails',\n                  single: ['boolean'],\n                  values: ['true', 'false'],\n                },\n                'max-parallel': {\n                  description: 'The maximum number of jobs that can run simultaneously',\n                  single: ['number'],\n                },\n              },\n            },\n            container: {\n              validateKey: validateJobKey,\n              description: \"A container to run any steps in a job that don't already specify a container\",\n              single: ['string'],\n              rules: serviceAndContainerRules,\n            },\n            services: {\n              validateKey: validateJobKey,\n              description: 'Additional containers to host services for a job in a workflow',\n              map: {\n                single: ['string'],\n                rules: serviceAndContainerRules,\n              },\n            },\n            permissions: {\n              description: 'Control permissions for runnings jobs in a workflow',\n              single: ['string'],\n              values: ['read-all', 'write-all'],\n              rules: permissionRules,\n            },\n            uses: {\n              validateKey: validateJobKey,\n              description: 'Run a reusable workflow as a job',\n              single: ['string'],\n              async validateValue(workflow: Workflow, path: string[], value: unknown): Promise<Validation | undefined> {\n                if (typeof value !== 'string') return\n\n                if (!value.includes('.github/workflows/') && !value.includes('.github/workflows-lab/')) {\n                  return {\n                    message: html` Missing the full path for reusable workflow `,\n                    severity: 'error',\n                  }\n                }\n\n                const [_, version] = value.split('@')\n\n                // If version doesn't exist and it's not a local workflow, throw an error\n                if (!version && !value.startsWith('./')) {\n                  return {\n                    message: html` Missing version for reusable workflow `,\n                    severity: 'error',\n                  }\n                } else if (version && value.startsWith('./')) {\n                  return {\n                    message: html` Cannot call a local reusable workflow with a version `,\n                    severity: 'error',\n                  }\n                } else if (version === '' && value.startsWith('./')) {\n                  return {\n                    message: html` Invalid path to local reusable workflow file (@) `,\n                    severity: 'error',\n                  }\n                }\n\n                // If the version looks like a short sha, warn about the upcoming deprecation\n                if (/\\b[0-9a-f]{7,8}\\b/i.test(version!)) {\n                  const helpUrl = document\n                    .getElementById('workflow-short-sha-warning-url')!\n                    .getAttribute('data-help-url')!\n\n                  return {\n                    message: html`\n                      The ref ${codeTag(version!)} looks like a short sha. This is not supported, please check the\n                      <a class=\"Link--inTextBlock\" href=\"${helpUrl}\" target=\"_blank\">documentation</a>.\n                    `,\n                    severity: 'warning',\n                  }\n                }\n              },\n            },\n            secrets: buildSecretsRule(),\n            with: {\n              description: 'A map of the input parameters defined by the reusable workflow',\n              validateKey: validateJobKey,\n              map: {\n                single: primitiveTypes,\n              },\n            },\n          },\n        },\n      },\n      permissions: {\n        description: 'Control permissions for runnings jobs in a workflow',\n        single: ['string'],\n        values: ['read-all', 'write-all'],\n        rules: permissionRules,\n      },\n    },\n  }\n}\n\nfunction mapType(type: string) {\n  return (\n    {number: 'integer', string: 'string', boolean: 'boolean', environment: 'string', choice: 'string'}[type] ||\n    'invalid'\n  )\n}\n\nfunction setupInputsType(yaml: Record<string, Record<string, Record<string, unknown>>>) {\n  inputsTypeMap.clear()\n\n  const setupInputs = (inputs: Record<string, Record<string, unknown>>) => {\n    for (const [name, value] of Object.entries(inputs)) {\n      if (!inputsTypeMap.has(name)) {\n        let type = 'string'\n        if (value.type) {\n          type = mapType(value.type as string)\n        } else if (value.default) {\n          type = mapType(typeof value.default)\n        }\n        inputsTypeMap.set(name, type)\n      }\n    }\n  }\n\n  if (yaml && yaml.on) {\n    if (yaml.on.workflow_dispatch && yaml.on.workflow_dispatch.inputs) {\n      setupInputs(yaml.on.workflow_dispatch.inputs as Record<string, Record<string, unknown>>)\n    }\n\n    if (yaml.on.workflow_call && yaml.on.workflow_call.inputs) {\n      setupInputs(yaml.on.workflow_call.inputs as Record<string, Record<string, unknown>>)\n    }\n  }\n}\n\n// Removes any excluded rules\nexport function getRootRule(yaml: unknown): RootRule {\n  const rule = fullRootRule()\n\n  buildWorkflowDispatchRules()\n  if (canUseCallableWorkflow()) {\n    buildCallableWorkflowRules()\n  }\n\n  setupInputsType(yaml as Record<string, Record<string, Record<string, unknown>>>)\n\n  if (!canUseCallableWorkflow() && rule.rules) {\n    if (rule.rules.jobs!.map?.rules) {\n      delete rule.rules.jobs!.map.rules.uses\n      delete rule.rules.jobs!.map.rules.secrets\n      delete rule.rules.jobs!.map.rules.with\n    }\n  }\n\n  return rule\n}\n\ntype Workflow = unknown\n\n// See https://docs.github.com/articles/contexts-and-expression-syntax-for-github-actions#contexts\nconst rootContext: Context = {\n  keys: {\n    github: {\n      keys: {\n        event: {},\n        workflow: {},\n        actor: 'string',\n        repository: 'string',\n        ['event_name']: 'string',\n        sha: 'string',\n        ref: 'string',\n        ['head_ref']: 'string',\n        ['base_ref']: 'string',\n      },\n    },\n    job: {\n      keys: {\n        status: 'string',\n        container: {\n          keys: {\n            network: 'string',\n            id: 'string',\n          },\n        },\n        services: {\n          keys: {\n            network: 'string',\n          },\n          map: {\n            keys: {\n              id: 'string',\n              ports: {\n                map: {\n                  type: 'number',\n                },\n              },\n            },\n          },\n          async resolver(workflow: Workflow, path: string[]): Promise<string[]> {\n            return keysForPath(workflow, ['jobs', path[1]!, 'services'])\n          },\n        },\n      },\n    },\n    steps: {\n      map: {\n        keys: {\n          outputs: {\n            map: {\n              type: 'string',\n            },\n          },\n        },\n      },\n      async resolver(workflow: Workflow, path: string[]): Promise<string[]> {\n        const steps = findNode(workflow, ['jobs', path[1]!, 'steps']) || []\n        if (!Array.isArray(steps)) return []\n        return steps.map(step => (step && typeof step === 'object' && step.id ? String(step.id) : '')).filter(Boolean)\n      },\n    },\n    runner: {},\n    secrets: {\n      keys: {\n        GITHUB_TOKEN: 'string',\n      },\n      map: {\n        type: 'string',\n      },\n      // TODO: implement a resolver here that returns secret names from the repository\n    },\n    matrix: {\n      map: {\n        type: 'string',\n      },\n      async resolver(workflow: Workflow, path: string[]) {\n        return keysForPath(workflow, ['jobs', path[1]!, 'strategy', 'matrix'])\n      },\n    },\n  },\n}\n\nfunction pathSupportsInlineExpressions(path: string[]) {\n  if (path[0] !== 'jobs') return false\n  if (path.length < 2) return false\n  if (path[path.length - 1] === 'if') return false\n  return true\n}\n\nasync function suggestionsForContext(\n  contextPath: string[],\n  workflow: Workflow,\n  path: string[],\n): Promise<ContextSuggestion[] | null> {\n  const keys = contextPath.slice(0)\n  let obj: Context = rootContext\n  while (keys.length > 0) {\n    const key = unescapeContext(keys.shift()!)\n    if (obj.keys && obj.keys[key]) {\n      if (typeof obj.keys[key] !== 'string') {\n        obj = obj.keys[key]\n      } else {\n        return null\n      }\n    } else if (keys.length > 0) {\n      return null\n    }\n  }\n  if (obj.resolver) {\n    const values = await obj.resolver(workflow, path)\n    // All values from resolvers are terminal by now\n    return values.map(text => ({text, terminal: true}))\n  }\n  if (obj.keys) {\n    const contextKeys = obj.keys\n    return Object.keys(contextKeys).map(text => ({text, terminal: typeof contextKeys[text] === 'string'}))\n  }\n  return null\n}\n\nfunction escapeContext(name: string, first: boolean): string {\n  return name.match(/^[a-z][a-z0-9_-]+?$/i) ? `${first ? '' : '.'}${name}` : `['${name}']`\n}\n\nconst endOfExpression = \"([a-z0-9_\\\\-.[\\\\]']+)?$\"\nconst anyChars = '(?:.+?)?'\nconst expressionStart = '\\\\${{'\n\nconst ifExpression = new RegExp(endOfExpression, 'i')\nconst inlineExpression = new RegExp(`${expressionStart}${anyChars}${endOfExpression}`, 'i')\n\nasync function suggestionsForExpression(\n  workflow: Workflow,\n  path: string[],\n  lastValue: string,\n): Promise<Suggestion[] | null> {\n  if (pathSupportsInlineExpressions(path)) {\n    // Syntax doc here https://docs.github.com/articles/contexts-and-expression-syntax-for-github-actions#contexts\n    // There are two syntaxes: index syntax (e.g. github['sha']) and dereference syntax (e.g. github.sha)\n    // \"${{\"\" followed by optional whitespaces, then followed by optional identifiers (a-Z, 0-9) separated by (dots or brackets with single quotes)\n    const expression = lastValue.match(inlineExpression)\n    if (expression) return suggestionsFromExpression(workflow, path, expression[1] || '')\n  } else if (path[path.length - 1] === 'if') {\n    const expression = lastValue.match(ifExpression)\n    if (expression) return suggestionsFromExpression(workflow, path, expression[1] || '')\n  }\n  return null\n}\n\nasync function processExpression(\n  workflow: unknown,\n  path: string[],\n  expression: string,\n  rule: Rule,\n): Promise<Validation | undefined> {\n  let acceptedTypes: string[] = []\n  if (rule.single) {\n    acceptedTypes = rule.single\n  } else if (rule.values) {\n    if (Array.isArray(rule.values)) {\n      acceptedTypes = rule.values.map(value => mapType(typeof value))\n    } else {\n      acceptedTypes = (await rule.values(rule, path)).map(value => mapType(typeof value))\n    }\n  } else if (rule.map || rule.rules) {\n    acceptedTypes.push('object')\n  }\n\n  if (acceptedTypes.includes('object')) {\n    if (isFromJsonExpression(expression)) return\n    if (acceptedTypes.length === 1 && isStringWithExpressions(expression)) {\n      return unexpectedTypeMessage(acceptedTypes, codeTag('string'))\n    }\n  }\n\n  const inputsExpressions = extractInputsExpressions(expression)\n  for (const inputExpression of inputsExpressions) {\n    const expressionSplit = inputExpression.split('.')\n    const inputName = expressionSplit[1]!.trim()\n    const inputType = inputsTypeMap.get(inputName)\n\n    if (inputType && !acceptedTypes.includes(inputType)) {\n      return unexpectedTypeMessage(acceptedTypes, codeTag(inputType))\n    }\n  }\n}\n\ninterface ExpressionFunctionArgument {\n  name: string\n}\n\ninterface ExpressionFunction {\n  name: string\n  description: string\n  args: ExpressionFunctionArgument[]\n  jobFunction: boolean\n}\n\nfunction createFunction(name: string, description: string, args: ExpressionFunctionArgument[]) {\n  return {name, description, args, jobFunction: false}\n}\n\nfunction createJobFunction(name: string, description: string) {\n  return {name, description, args: [], jobFunction: true}\n}\n\n// See https://docs.github.com/articles/contexts-and-expression-syntax-for-github-actions#functions\nconst expressionFunctions: ExpressionFunction[] = [\n  // eslint-disable-next-line i18n-text/no-en\n  createFunction('contains', 'Returns true if the searchString contains searchValue', [\n    {name: 'searchString'},\n    {name: 'searchValue'},\n  ]),\n  // eslint-disable-next-line i18n-text/no-en\n  createFunction('startsWith', 'Returns true when searchString starts with searchValue', [\n    {name: 'searchString'},\n    {name: 'searchValue'},\n  ]),\n  // eslint-disable-next-line i18n-text/no-en\n  createFunction('endsWith', 'Returns true if searchString ends with searchValue', [\n    {name: 'searchString'},\n    {name: 'searchValue'},\n  ]),\n  // eslint-disable-next-line i18n-text/no-en\n  createFunction('format', 'Replaces values in the string, with the variable replaceValueN', [\n    {name: 'string'},\n    {name: 'replaceValueN'},\n  ]),\n  // eslint-disable-next-line i18n-text/no-en\n  createFunction('join', 'All values in element are concatenated into a string', [\n    {name: 'element'},\n    {name: 'optionalElem'},\n  ]),\n  // eslint-disable-next-line i18n-text/no-en\n  createFunction('toJson', 'Returns a pretty-print JSON representation of value', [{name: 'value'}]),\n  // eslint-disable-next-line i18n-text/no-en\n  createFunction('hashFiles', 'Returns a single hash for the set of files that matches the path pattern', [\n    {name: 'path'},\n  ]),\n  // eslint-disable-next-line i18n-text/no-en\n  createJobFunction('success', 'Returns true when the previous step of a job succeeds'),\n  // eslint-disable-next-line i18n-text/no-en\n  createJobFunction('always', 'Forces a conditional to evaluate as true, even when canceled'),\n  // eslint-disable-next-line i18n-text/no-en\n  createJobFunction('cancelled', 'Returns true if the workflow was canceled'),\n  // eslint-disable-next-line i18n-text/no-en\n  createJobFunction('failure', 'Returns true when the previous step of a job fails'),\n]\n\n/*\n * Autocompletes expressions\n */\nasync function suggestionsFromExpression(\n  workflow: Workflow,\n  path: string[],\n  expressionContent: string,\n): Promise<Suggestion[]> {\n  const contextPath = expressionContent.split(/(?=\\[)|(?=\\.)/) // split by dots or opening brackets but don't consume any char\n  const replace = contextPath[contextPath.length - 1]!\n  const lastPath = unescapeContext(contextPath[contextPath.length - 1]!)\n  const values: ContextSuggestion[] = (await suggestionsForContext(contextPath, workflow, path)) || []\n  const filteredContexts = filterValues(values, lastPath)\n  const suggestions: Suggestion[] = filteredContexts.map(context => ({\n    displayText: context.text,\n    snippet: {\n      tokens: [escapeContext(context.text, contextPath.length === 1)],\n      keepCursorLocation: !context.terminal,\n    },\n    replace,\n  }))\n\n  if (contextPath.length < 2) {\n    // If there are no dots in the part of the expression being written, we also suggest function names\n    const lowerCasedLastPath = lastPath.toLowerCase()\n    const canUseJobFunctions = path[path.length - 1] === 'if'\n    for (const fun of expressionFunctions) {\n      if (fun.jobFunction && !canUseJobFunctions) continue\n      const lowerCasedName = fun.name.toLowerCase()\n      if (!lowerCasedLastPath || startsWithAndNotEquals(lowerCasedLastPath, lowerCasedName)) {\n        const tokens = []\n        if (fun.args.length > 0) {\n          tokens.push(`${fun.name}(`)\n          for (const arg of fun.args) {\n            if (tokens.length > 1) {\n              tokens.push(', ')\n            }\n            tokens.push(arg.name)\n          }\n          tokens.push(')')\n        } else {\n          tokens.push(`${fun.name}()`)\n        }\n        suggestions.push({\n          displayText: `${fun.name}(${fun.args.length > 0 ? '…' : ''})`,\n          description: fun.description,\n          snippet: {tokens},\n          replace,\n        })\n      }\n    }\n  }\n  return suggestions\n}\n"],"names":["prettyCron","cronspec","capitalize","parse","expr","NAMES","JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC","SUN","MON","TUE","WED","THU","FRI","SAT","FIELDS","m","constraints","allowedSyntax","h","D","M","d","getValue","value","offset","max","isNaN","num","add","sched","name","min","inc","i","indexOf","push","sort","a","b","parseExpr","expression","components","replace","split","isValidComponents","length","Object","keys","component","validSyntax","values","find","v","match","startsWith","schedule","schedules","exceptions","field","f","items","item","s","curSched","addRange","incSplit","undefined","range","rangeSplit","toUpperCase","desc","cronstrue","dayOfWeekStartIndexZero","monthStartIndexZero","use24HourTimeFormat","throwExceptionOnParseError","err","charAt","toLowerCase","slice","regularStepKeys","runStepKeys","inputsTypeMap","Map","validateStepKey","workflow","path","lastPath","arrForbidden","arrFrom","includes","keysForPath","conflicting","filter","key","message","html","codeTag","joinCodeTags","severity","regularJobKeys","callableWorkflowJobKeys","canUseCallableWorkflow","canValidateOutputKey","featureFlag","isFeatureEnabled","canShowActionsGreenTreeKey","canUseNumberTypeDispatchInputs","validateJobKey","currentKey","otherKeys","validateOutputKey","isExpressionFunction","nonMatrixContexts","contexts","getExpressionContexts","x","join","validateReusableOutputKey","nonInputContexts","primitiveTypes","regularEvents","allEvents","irregularEvents","concat","arrayOrSingleString","single","arrayOrSingleGlob","validateValue","validateGlob","codeEventRules","rules","nullable","branches","tags","paths","types","onRules","merge_group","mergeGroupRule","mgRules","pull_request_target","cron","explain","String","scheduleUrl","document","getElementById","getAttribute","workflow_run","workflows","eventName","permissionRule","permissionRules","actions","attestations","checks","contents","deployments","discussions","issues","packages","pages","statuses","serviceAndContainerRules","image","description","env","map","ports","volumes","options","credentials","username","required","password","buildSecretsRule","validateKey","buildRunsOnRule","multipleValues","caseInsensitive","group","labels","mapType","type","number","string","boolean","environment","choice","getRootRule","yaml","rule","suggestionsForExpression","processExpression","defaults","run","shell","on","concurrency","jobs","keyPlaceholder","keyPlaceholderHelp","currentJobId","test","uniqueIds","k","jobId","jobKeys","if","findNode","job","outputs","url","needs","str","steps","id","Array","isArray","splice","step","uses","_","version","helpUrl","with","strategy","matrix","specialKeys","container","services","permissions","secrets","inputs","default","setupInputsType","clear","setupInputs","entries","has","set","workflow_dispatch","workflow_call","rootContext","github","event","actor","repository","sha","ref","status","network","resolver","Boolean","runner","GITHUB_TOKEN","suggestionsForContext","contextPath","obj","unescapeContext","shift","text","terminal","contextKeys","endOfExpression","ifExpression","inlineExpression","lastValue","suggestionsFromExpression","acceptedTypes","isFromJsonExpression","isStringWithExpressions","unexpectedTypeMessage","inputExpression","extractInputsExpressions","inputName","expressionSplit","trim","inputType","get","createFunction","args","jobFunction","createJobFunction","expressionFunctions","expressionContent","suggestions","filteredContexts","filterValues","context","first","displayText","snippet","tokens","keepCursorLocation","lowerCasedLastPath","canUseJobFunctions","fun","lowerCasedName","startsWithAndNotEquals","arg"],"sourceRoot":""}
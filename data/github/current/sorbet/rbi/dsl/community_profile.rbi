# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `CommunityProfile`.
# Please instead update this file by running `bin/tapioca dsl CommunityProfile`.

class CommunityProfile
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::CommunityProfile).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CommunityProfile).void)
      ).returns(::CommunityProfile)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CommunityProfile).void)
      ).returns(::CommunityProfile)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CommunityProfile).void)
      ).returns(::CommunityProfile)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CommunityProfile).void)
      ).returns(::CommunityProfile)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CommunityProfile).void)
      ).returns(::CommunityProfile)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::CommunityProfile]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::CommunityProfile)) }
    def fifth; end

    sig { returns(::CommunityProfile) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::CommunityProfile)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::CommunityProfile) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::CommunityProfile).void)
      ).returns(T.nilable(T::Enumerator[::CommunityProfile]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::CommunityProfile]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::CommunityProfile]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CommunityProfile).void)
      ).returns(::CommunityProfile)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CommunityProfile).void)
      ).returns(::CommunityProfile)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CommunityProfile).void)
      ).returns(::CommunityProfile)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::CommunityProfile)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::CommunityProfile) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::CommunityProfile) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::CommunityProfile) }
    def first!; end

    sig { returns(T.nilable(::CommunityProfile)) }
    def forty_two; end

    sig { returns(::CommunityProfile) }
    def forty_two!; end

    sig { returns(T.nilable(::CommunityProfile)) }
    def fourth; end

    sig { returns(::CommunityProfile) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::CommunityProfile) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::CommunityProfile).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CommunityProfile).void)
      ).returns(::CommunityProfile)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::CommunityProfile).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::CommunityProfile).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::CommunityProfile)) }
    def second; end

    sig { returns(::CommunityProfile) }
    def second!; end

    sig { returns(T.nilable(::CommunityProfile)) }
    def second_to_last; end

    sig { returns(::CommunityProfile) }
    def second_to_last!; end

    sig { returns(::CommunityProfile) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::CommunityProfile) }
    def take!; end

    sig { returns(T.nilable(::CommunityProfile)) }
    def third; end

    sig { returns(::CommunityProfile) }
    def third!; end

    sig { returns(T.nilable(::CommunityProfile)) }
    def third_to_last; end

    sig { returns(::CommunityProfile) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_repository; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def detected_code_of_conduct; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def detected_code_of_conduct=(value); end

    sig { returns(T::Boolean) }
    def detected_code_of_conduct?; end

    sig { returns(T.nilable(::String)) }
    def detected_code_of_conduct_before_last_save; end

    sig { returns(T.untyped) }
    def detected_code_of_conduct_before_type_cast; end

    sig { returns(T::Boolean) }
    def detected_code_of_conduct_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def detected_code_of_conduct_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def detected_code_of_conduct_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def detected_code_of_conduct_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def detected_code_of_conduct_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def detected_code_of_conduct_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def detected_code_of_conduct_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def detected_code_of_conduct_previously_was; end

    sig { returns(T.nilable(::String)) }
    def detected_code_of_conduct_was; end

    sig { void }
    def detected_code_of_conduct_will_change!; end

    sig { returns(::Integer) }
    def good_first_issue_issues_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def good_first_issue_issues_count=(value); end

    sig { returns(T::Boolean) }
    def good_first_issue_issues_count?; end

    sig { returns(T.nilable(::Integer)) }
    def good_first_issue_issues_count_before_last_save; end

    sig { returns(T.untyped) }
    def good_first_issue_issues_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def good_first_issue_issues_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def good_first_issue_issues_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def good_first_issue_issues_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def good_first_issue_issues_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def good_first_issue_issues_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def good_first_issue_issues_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def good_first_issue_issues_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def good_first_issue_issues_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def good_first_issue_issues_count_was; end

    sig { void }
    def good_first_issue_issues_count_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_code_of_conduct; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def has_code_of_conduct=(value); end

    sig { returns(T::Boolean) }
    def has_code_of_conduct?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_code_of_conduct_before_last_save; end

    sig { returns(T.untyped) }
    def has_code_of_conduct_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_code_of_conduct_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_code_of_conduct_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_code_of_conduct_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_code_of_conduct_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_code_of_conduct_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_code_of_conduct_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_code_of_conduct_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_code_of_conduct_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_code_of_conduct_was; end

    sig { void }
    def has_code_of_conduct_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_contributing; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def has_contributing=(value); end

    sig { returns(T::Boolean) }
    def has_contributing?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_contributing_before_last_save; end

    sig { returns(T.untyped) }
    def has_contributing_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_contributing_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_contributing_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_contributing_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_contributing_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_contributing_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_contributing_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_contributing_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_contributing_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_contributing_was; end

    sig { void }
    def has_contributing_will_change!; end

    sig { returns(T::Boolean) }
    def has_description; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_description=(value); end

    sig { returns(T::Boolean) }
    def has_description?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_description_before_last_save; end

    sig { returns(T.untyped) }
    def has_description_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_description_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_description_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_description_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_description_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_description_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_description_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_description_was; end

    sig { void }
    def has_description_will_change!; end

    sig { returns(T::Boolean) }
    def has_docs; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_docs=(value); end

    sig { returns(T::Boolean) }
    def has_docs?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_docs_before_last_save; end

    sig { returns(T.untyped) }
    def has_docs_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_docs_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_docs_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_docs_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_docs_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_docs_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_docs_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_docs_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_docs_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_docs_was; end

    sig { void }
    def has_docs_will_change!; end

    sig { returns(T::Boolean) }
    def has_issue_opened_by_non_collaborator; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_issue_opened_by_non_collaborator=(value); end

    sig { returns(T::Boolean) }
    def has_issue_opened_by_non_collaborator?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_issue_opened_by_non_collaborator_before_last_save; end

    sig { returns(T.untyped) }
    def has_issue_opened_by_non_collaborator_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_issue_opened_by_non_collaborator_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_issue_opened_by_non_collaborator_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_issue_opened_by_non_collaborator_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_issue_opened_by_non_collaborator_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_issue_opened_by_non_collaborator_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_issue_opened_by_non_collaborator_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_issue_opened_by_non_collaborator_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_issue_opened_by_non_collaborator_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_issue_opened_by_non_collaborator_was; end

    sig { void }
    def has_issue_opened_by_non_collaborator_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_license; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def has_license=(value); end

    sig { returns(T::Boolean) }
    def has_license?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_license_before_last_save; end

    sig { returns(T.untyped) }
    def has_license_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_license_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_license_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_license_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_license_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_license_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_license_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_license_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_license_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_license_was; end

    sig { void }
    def has_license_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_outside_contributors; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def has_outside_contributors=(value); end

    sig { returns(T::Boolean) }
    def has_outside_contributors?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_outside_contributors_before_last_save; end

    sig { returns(T.untyped) }
    def has_outside_contributors_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_outside_contributors_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_outside_contributors_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_outside_contributors_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_outside_contributors_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_outside_contributors_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_outside_contributors_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_outside_contributors_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_outside_contributors_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_outside_contributors_was; end

    sig { void }
    def has_outside_contributors_will_change!; end

    sig { returns(T::Boolean) }
    def has_pr_or_issue_template; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_pr_or_issue_template=(value); end

    sig { returns(T::Boolean) }
    def has_pr_or_issue_template?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_pr_or_issue_template_before_last_save; end

    sig { returns(T.untyped) }
    def has_pr_or_issue_template_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_pr_or_issue_template_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_pr_or_issue_template_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_pr_or_issue_template_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_pr_or_issue_template_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_pr_or_issue_template_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_pr_or_issue_template_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_pr_or_issue_template_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_pr_or_issue_template_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_pr_or_issue_template_was; end

    sig { void }
    def has_pr_or_issue_template_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_readme; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def has_readme=(value); end

    sig { returns(T::Boolean) }
    def has_readme?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_readme_before_last_save; end

    sig { returns(T.untyped) }
    def has_readme_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_readme_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_readme_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_readme_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_readme_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_readme_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_readme_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def has_readme_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_readme_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_readme_was; end

    sig { void }
    def has_readme_will_change!; end

    sig { returns(::Integer) }
    def help_wanted_issues_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def help_wanted_issues_count=(value); end

    sig { returns(T::Boolean) }
    def help_wanted_issues_count?; end

    sig { returns(T.nilable(::Integer)) }
    def help_wanted_issues_count_before_last_save; end

    sig { returns(T.untyped) }
    def help_wanted_issues_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def help_wanted_issues_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def help_wanted_issues_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def help_wanted_issues_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def help_wanted_issues_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def help_wanted_issues_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def help_wanted_issues_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def help_wanted_issues_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def help_wanted_issues_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def help_wanted_issues_count_was; end

    sig { void }
    def help_wanted_issues_count_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_detected_code_of_conduct!; end

    sig { void }
    def restore_good_first_issue_issues_count!; end

    sig { void }
    def restore_has_code_of_conduct!; end

    sig { void }
    def restore_has_contributing!; end

    sig { void }
    def restore_has_description!; end

    sig { void }
    def restore_has_docs!; end

    sig { void }
    def restore_has_issue_opened_by_non_collaborator!; end

    sig { void }
    def restore_has_license!; end

    sig { void }
    def restore_has_outside_contributors!; end

    sig { void }
    def restore_has_pr_or_issue_template!; end

    sig { void }
    def restore_has_readme!; end

    sig { void }
    def restore_help_wanted_issues_count!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_detected_code_of_conduct; end

    sig { returns(T::Boolean) }
    def saved_change_to_detected_code_of_conduct?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_good_first_issue_issues_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_good_first_issue_issues_count?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_has_code_of_conduct; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_code_of_conduct?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_has_contributing; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_contributing?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_description?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_docs; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_docs?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_issue_opened_by_non_collaborator; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_issue_opened_by_non_collaborator?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_has_license; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_license?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_has_outside_contributors; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_outside_contributors?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_pr_or_issue_template; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_pr_or_issue_template?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_has_readme; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_readme?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_help_wanted_issues_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_help_wanted_issues_count?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_detected_code_of_conduct?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_good_first_issue_issues_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_code_of_conduct?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_contributing?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_docs?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_issue_opened_by_non_collaborator?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_license?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_outside_contributors?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_pr_or_issue_template?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_readme?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_help_wanted_issues_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::CommunityProfile } }

    sig { returns(T::Array[::CommunityProfile]) }
    def to_a; end

    sig { returns(T::Array[::CommunityProfile]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::CommunityProfile } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::CommunityProfile } }

    sig do
      params(
        records: T.any(::CommunityProfile, T::Enumerable[T.any(::CommunityProfile, T::Enumerable[::CommunityProfile])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::CommunityProfile, T::Enumerable[T.any(::CommunityProfile, T::Enumerable[::CommunityProfile])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::CommunityProfile, T::Enumerable[T.any(::CommunityProfile, T::Enumerable[::CommunityProfile])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::CommunityProfile]) }
    def load_target; end

    sig do
      params(
        records: T.any(::CommunityProfile, T::Enumerable[T.any(::CommunityProfile, T::Enumerable[::CommunityProfile])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::CommunityProfile, T::Enumerable[T.any(::CommunityProfile, T::Enumerable[::CommunityProfile])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::CommunityProfile, T::Enumerable[T.any(::CommunityProfile, T::Enumerable[::CommunityProfile])])
      ).returns(T::Array[::CommunityProfile])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::CommunityProfile]) }
    def target; end

    sig { returns(T::Array[::CommunityProfile]) }
    def to_a; end

    sig { returns(T::Array[::CommunityProfile]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::CommunityProfile } }

    sig { returns(T::Array[::CommunityProfile]) }
    def to_a; end

    sig { returns(T::Array[::CommunityProfile]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::CommunityProfile } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::CodeScanning::V0::StatusReport`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::CodeScanning::V0::StatusReport`.

class Hydro::Schemas::CodeScanning::V0::StatusReport
  sig do
    params(
      action_name: T.nilable(String),
      action_oid: T.nilable(String),
      action_ref: T.nilable(String),
      action_started_at: T.nilable(Google::Protobuf::Timestamp),
      action_version: T.nilable(String),
      actions_event_name: T.nilable(Google::Protobuf::StringValue),
      analysis_key: T.nilable(String),
      analysis_name: T.nilable(String),
      analyze_builtin_queries_cpp_duration_ms: T.nilable(Integer),
      analyze_builtin_queries_csharp_duration_ms: T.nilable(Integer),
      analyze_builtin_queries_go_duration_ms: T.nilable(Integer),
      analyze_builtin_queries_java_duration_ms: T.nilable(Integer),
      analyze_builtin_queries_javascript_duration_ms: T.nilable(Integer),
      analyze_builtin_queries_python_duration_ms: T.nilable(Integer),
      analyze_builtin_queries_ruby_duration_ms: T.nilable(Integer),
      analyze_builtin_queries_swift_duration_ms: T.nilable(Integer),
      analyze_custom_queries_cpp_duration_ms: T.nilable(Integer),
      analyze_custom_queries_csharp_duration_ms: T.nilable(Integer),
      analyze_custom_queries_go_duration_ms: T.nilable(Integer),
      analyze_custom_queries_java_duration_ms: T.nilable(Integer),
      analyze_custom_queries_javascript_duration_ms: T.nilable(Integer),
      analyze_custom_queries_python_duration_ms: T.nilable(Integer),
      analyze_custom_queries_ruby_duration_ms: T.nilable(Integer),
      analyze_custom_queries_swift_duration_ms: T.nilable(Integer),
      analyze_failure_language: T.nilable(String),
      autobuild_failure: T.nilable(String),
      autobuild_languages: T.nilable(String),
      build_mode: T.nilable(Google::Protobuf::StringValue),
      cause: T.nilable(String),
      codeql_version: T.nilable(String),
      commit_oid: T.nilable(String),
      completed_at: T.nilable(Google::Protobuf::Timestamp),
      config_file: T.nilable(String),
      disable_default_queries: T.nilable(String),
      event_reports: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::CodeScanning::V0::Entities::EventReport], T::Array[Hydro::Schemas::CodeScanning::V0::Entities::EventReport])),
      exception: T.nilable(String),
      feature_flags_status: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::CodeScanning::V0::Entities::FeatureEnablement], T::Array[Hydro::Schemas::CodeScanning::V0::Entities::FeatureEnablement])),
      first_party_analysis: T.nilable(Google::Protobuf::BoolValue),
      interpret_results_cpp_duration_ms: T.nilable(Integer),
      interpret_results_csharp_duration_ms: T.nilable(Integer),
      interpret_results_go_duration_ms: T.nilable(Integer),
      interpret_results_java_duration_ms: T.nilable(Integer),
      interpret_results_javascript_duration_ms: T.nilable(Integer),
      interpret_results_python_duration_ms: T.nilable(Integer),
      interpret_results_ruby_duration_ms: T.nilable(Integer),
      interpret_results_swift_duration_ms: T.nilable(Integer),
      job_name: T.nilable(String),
      job_run_uuid: T.nilable(String),
      job_status: T.nilable(T.any(Symbol, Integer)),
      languages: T.nilable(String),
      matrix_vars: T.nilable(String),
      ml_powered_javascript_queries: T.nilable(String),
      num_results_in_sarif: T.nilable(Integer),
      packs: T.nilable(String),
      paths: T.nilable(String),
      paths_ignore: T.nilable(String),
      queries: T.nilable(String),
      query_filters: T.nilable(String),
      raw_upload_size_bytes: T.nilable(Integer),
      ref: T.nilable(String),
      registries: T.nilable(String),
      repository_id: T.nilable(Integer),
      repository_nwo: T.nilable(String),
      runner_arch: T.nilable(String),
      runner_available_disk_space_bytes: T.nilable(Google::Protobuf::Int64Value),
      runner_image_version: T.nilable(Google::Protobuf::StringValue),
      runner_os: T.nilable(String),
      runner_os_release: T.nilable(String),
      runner_total_disk_space_bytes: T.nilable(Google::Protobuf::Int64Value),
      scanned_language_extraction_duration_ms: T.nilable(Integer),
      started_at: T.nilable(Google::Protobuf::Timestamp),
      status: T.nilable(String),
      steady_state_default_setup: T.nilable(Google::Protobuf::BoolValue),
      testing_environment: T.nilable(String),
      tools_download_duration_ms_opt: T.nilable(Google::Protobuf::Int32Value),
      tools_feature_flags_valid_opt: T.nilable(Google::Protobuf::BoolValue),
      tools_input: T.nilable(String),
      tools_resolved_version: T.nilable(String),
      tools_source: T.nilable(T.any(Symbol, Integer)),
      trap_cache_cleanup_error: T.nilable(String),
      trap_cache_cleanup_size_bytes: T.nilable(Integer),
      trap_cache_cleanup_skipped_because: T.nilable(String),
      trap_cache_download_duration_ms: T.nilable(Integer),
      trap_cache_download_size_bytes: T.nilable(Integer),
      trap_cache_languages: T.nilable(String),
      trap_cache_upload_duration_ms: T.nilable(Integer),
      trap_cache_upload_size_bytes: T.nilable(Integer),
      trap_import_duration_ms: T.nilable(Integer),
      upload_failed_run_error: T.nilable(String),
      upload_failed_run_skipped_because: T.nilable(String),
      upload_failed_run_stack_trace: T.nilable(String),
      workflow_languages: T.nilable(String),
      workflow_run_attempt: T.nilable(Integer),
      workflow_run_id: T.nilable(Integer),
      zipped_upload_size_bytes: T.nilable(Integer)
    ).void
  end
  def initialize(action_name: nil, action_oid: nil, action_ref: nil, action_started_at: nil, action_version: nil, actions_event_name: nil, analysis_key: nil, analysis_name: nil, analyze_builtin_queries_cpp_duration_ms: nil, analyze_builtin_queries_csharp_duration_ms: nil, analyze_builtin_queries_go_duration_ms: nil, analyze_builtin_queries_java_duration_ms: nil, analyze_builtin_queries_javascript_duration_ms: nil, analyze_builtin_queries_python_duration_ms: nil, analyze_builtin_queries_ruby_duration_ms: nil, analyze_builtin_queries_swift_duration_ms: nil, analyze_custom_queries_cpp_duration_ms: nil, analyze_custom_queries_csharp_duration_ms: nil, analyze_custom_queries_go_duration_ms: nil, analyze_custom_queries_java_duration_ms: nil, analyze_custom_queries_javascript_duration_ms: nil, analyze_custom_queries_python_duration_ms: nil, analyze_custom_queries_ruby_duration_ms: nil, analyze_custom_queries_swift_duration_ms: nil, analyze_failure_language: nil, autobuild_failure: nil, autobuild_languages: nil, build_mode: nil, cause: nil, codeql_version: nil, commit_oid: nil, completed_at: nil, config_file: nil, disable_default_queries: nil, event_reports: T.unsafe(nil), exception: nil, feature_flags_status: T.unsafe(nil), first_party_analysis: nil, interpret_results_cpp_duration_ms: nil, interpret_results_csharp_duration_ms: nil, interpret_results_go_duration_ms: nil, interpret_results_java_duration_ms: nil, interpret_results_javascript_duration_ms: nil, interpret_results_python_duration_ms: nil, interpret_results_ruby_duration_ms: nil, interpret_results_swift_duration_ms: nil, job_name: nil, job_run_uuid: nil, job_status: nil, languages: nil, matrix_vars: nil, ml_powered_javascript_queries: nil, num_results_in_sarif: nil, packs: nil, paths: nil, paths_ignore: nil, queries: nil, query_filters: nil, raw_upload_size_bytes: nil, ref: nil, registries: nil, repository_id: nil, repository_nwo: nil, runner_arch: nil, runner_available_disk_space_bytes: nil, runner_image_version: nil, runner_os: nil, runner_os_release: nil, runner_total_disk_space_bytes: nil, scanned_language_extraction_duration_ms: nil, started_at: nil, status: nil, steady_state_default_setup: nil, testing_environment: nil, tools_download_duration_ms_opt: nil, tools_feature_flags_valid_opt: nil, tools_input: nil, tools_resolved_version: nil, tools_source: nil, trap_cache_cleanup_error: nil, trap_cache_cleanup_size_bytes: nil, trap_cache_cleanup_skipped_because: nil, trap_cache_download_duration_ms: nil, trap_cache_download_size_bytes: nil, trap_cache_languages: nil, trap_cache_upload_duration_ms: nil, trap_cache_upload_size_bytes: nil, trap_import_duration_ms: nil, upload_failed_run_error: nil, upload_failed_run_skipped_because: nil, upload_failed_run_stack_trace: nil, workflow_languages: nil, workflow_run_attempt: nil, workflow_run_id: nil, zipped_upload_size_bytes: nil); end

  sig { returns(String) }
  def action_name; end

  sig { params(value: String).void }
  def action_name=(value); end

  sig { returns(String) }
  def action_oid; end

  sig { params(value: String).void }
  def action_oid=(value); end

  sig { returns(String) }
  def action_ref; end

  sig { params(value: String).void }
  def action_ref=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def action_started_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def action_started_at=(value); end

  sig { returns(String) }
  def action_version; end

  sig { params(value: String).void }
  def action_version=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def actions_event_name; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def actions_event_name=(value); end

  sig { returns(String) }
  def analysis_key; end

  sig { params(value: String).void }
  def analysis_key=(value); end

  sig { returns(String) }
  def analysis_name; end

  sig { params(value: String).void }
  def analysis_name=(value); end

  sig { returns(Integer) }
  def analyze_builtin_queries_cpp_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_builtin_queries_cpp_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_builtin_queries_csharp_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_builtin_queries_csharp_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_builtin_queries_go_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_builtin_queries_go_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_builtin_queries_java_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_builtin_queries_java_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_builtin_queries_javascript_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_builtin_queries_javascript_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_builtin_queries_python_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_builtin_queries_python_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_builtin_queries_ruby_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_builtin_queries_ruby_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_builtin_queries_swift_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_builtin_queries_swift_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_custom_queries_cpp_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_custom_queries_cpp_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_custom_queries_csharp_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_custom_queries_csharp_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_custom_queries_go_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_custom_queries_go_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_custom_queries_java_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_custom_queries_java_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_custom_queries_javascript_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_custom_queries_javascript_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_custom_queries_python_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_custom_queries_python_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_custom_queries_ruby_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_custom_queries_ruby_duration_ms=(value); end

  sig { returns(Integer) }
  def analyze_custom_queries_swift_duration_ms; end

  sig { params(value: Integer).void }
  def analyze_custom_queries_swift_duration_ms=(value); end

  sig { returns(String) }
  def analyze_failure_language; end

  sig { params(value: String).void }
  def analyze_failure_language=(value); end

  sig { returns(String) }
  def autobuild_failure; end

  sig { params(value: String).void }
  def autobuild_failure=(value); end

  sig { returns(String) }
  def autobuild_languages; end

  sig { params(value: String).void }
  def autobuild_languages=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def build_mode; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def build_mode=(value); end

  sig { returns(String) }
  def cause; end

  sig { params(value: String).void }
  def cause=(value); end

  sig { void }
  def clear_action_name; end

  sig { void }
  def clear_action_oid; end

  sig { void }
  def clear_action_ref; end

  sig { void }
  def clear_action_started_at; end

  sig { void }
  def clear_action_version; end

  sig { void }
  def clear_actions_event_name; end

  sig { void }
  def clear_analysis_key; end

  sig { void }
  def clear_analysis_name; end

  sig { void }
  def clear_analyze_builtin_queries_cpp_duration_ms; end

  sig { void }
  def clear_analyze_builtin_queries_csharp_duration_ms; end

  sig { void }
  def clear_analyze_builtin_queries_go_duration_ms; end

  sig { void }
  def clear_analyze_builtin_queries_java_duration_ms; end

  sig { void }
  def clear_analyze_builtin_queries_javascript_duration_ms; end

  sig { void }
  def clear_analyze_builtin_queries_python_duration_ms; end

  sig { void }
  def clear_analyze_builtin_queries_ruby_duration_ms; end

  sig { void }
  def clear_analyze_builtin_queries_swift_duration_ms; end

  sig { void }
  def clear_analyze_custom_queries_cpp_duration_ms; end

  sig { void }
  def clear_analyze_custom_queries_csharp_duration_ms; end

  sig { void }
  def clear_analyze_custom_queries_go_duration_ms; end

  sig { void }
  def clear_analyze_custom_queries_java_duration_ms; end

  sig { void }
  def clear_analyze_custom_queries_javascript_duration_ms; end

  sig { void }
  def clear_analyze_custom_queries_python_duration_ms; end

  sig { void }
  def clear_analyze_custom_queries_ruby_duration_ms; end

  sig { void }
  def clear_analyze_custom_queries_swift_duration_ms; end

  sig { void }
  def clear_analyze_failure_language; end

  sig { void }
  def clear_autobuild_failure; end

  sig { void }
  def clear_autobuild_languages; end

  sig { void }
  def clear_build_mode; end

  sig { void }
  def clear_cause; end

  sig { void }
  def clear_codeql_version; end

  sig { void }
  def clear_commit_oid; end

  sig { void }
  def clear_completed_at; end

  sig { void }
  def clear_config_file; end

  sig { void }
  def clear_disable_default_queries; end

  sig { void }
  def clear_event_reports; end

  sig { void }
  def clear_exception; end

  sig { void }
  def clear_feature_flags_status; end

  sig { void }
  def clear_first_party_analysis; end

  sig { void }
  def clear_interpret_results_cpp_duration_ms; end

  sig { void }
  def clear_interpret_results_csharp_duration_ms; end

  sig { void }
  def clear_interpret_results_go_duration_ms; end

  sig { void }
  def clear_interpret_results_java_duration_ms; end

  sig { void }
  def clear_interpret_results_javascript_duration_ms; end

  sig { void }
  def clear_interpret_results_python_duration_ms; end

  sig { void }
  def clear_interpret_results_ruby_duration_ms; end

  sig { void }
  def clear_interpret_results_swift_duration_ms; end

  sig { void }
  def clear_job_name; end

  sig { void }
  def clear_job_run_uuid; end

  sig { void }
  def clear_job_status; end

  sig { void }
  def clear_languages; end

  sig { void }
  def clear_matrix_vars; end

  sig { void }
  def clear_ml_powered_javascript_queries; end

  sig { void }
  def clear_num_results_in_sarif; end

  sig { void }
  def clear_packs; end

  sig { void }
  def clear_paths; end

  sig { void }
  def clear_paths_ignore; end

  sig { void }
  def clear_queries; end

  sig { void }
  def clear_query_filters; end

  sig { void }
  def clear_raw_upload_size_bytes; end

  sig { void }
  def clear_ref; end

  sig { void }
  def clear_registries; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_repository_nwo; end

  sig { void }
  def clear_runner_arch; end

  sig { void }
  def clear_runner_available_disk_space_bytes; end

  sig { void }
  def clear_runner_image_version; end

  sig { void }
  def clear_runner_os; end

  sig { void }
  def clear_runner_os_release; end

  sig { void }
  def clear_runner_total_disk_space_bytes; end

  sig { void }
  def clear_scanned_language_extraction_duration_ms; end

  sig { void }
  def clear_started_at; end

  sig { void }
  def clear_status; end

  sig { void }
  def clear_steady_state_default_setup; end

  sig { void }
  def clear_testing_environment; end

  sig { void }
  def clear_tools_download_duration_ms_opt; end

  sig { void }
  def clear_tools_feature_flags_valid_opt; end

  sig { void }
  def clear_tools_input; end

  sig { void }
  def clear_tools_resolved_version; end

  sig { void }
  def clear_tools_source; end

  sig { void }
  def clear_trap_cache_cleanup_error; end

  sig { void }
  def clear_trap_cache_cleanup_size_bytes; end

  sig { void }
  def clear_trap_cache_cleanup_skipped_because; end

  sig { void }
  def clear_trap_cache_download_duration_ms; end

  sig { void }
  def clear_trap_cache_download_size_bytes; end

  sig { void }
  def clear_trap_cache_languages; end

  sig { void }
  def clear_trap_cache_upload_duration_ms; end

  sig { void }
  def clear_trap_cache_upload_size_bytes; end

  sig { void }
  def clear_trap_import_duration_ms; end

  sig { void }
  def clear_upload_failed_run_error; end

  sig { void }
  def clear_upload_failed_run_skipped_because; end

  sig { void }
  def clear_upload_failed_run_stack_trace; end

  sig { void }
  def clear_workflow_languages; end

  sig { void }
  def clear_workflow_run_attempt; end

  sig { void }
  def clear_workflow_run_id; end

  sig { void }
  def clear_zipped_upload_size_bytes; end

  sig { returns(String) }
  def codeql_version; end

  sig { params(value: String).void }
  def codeql_version=(value); end

  sig { returns(String) }
  def commit_oid; end

  sig { params(value: String).void }
  def commit_oid=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def completed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def completed_at=(value); end

  sig { returns(String) }
  def config_file; end

  sig { params(value: String).void }
  def config_file=(value); end

  sig { returns(String) }
  def disable_default_queries; end

  sig { params(value: String).void }
  def disable_default_queries=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::CodeScanning::V0::Entities::EventReport]) }
  def event_reports; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::CodeScanning::V0::Entities::EventReport]).void }
  def event_reports=(value); end

  sig { returns(String) }
  def exception; end

  sig { params(value: String).void }
  def exception=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::CodeScanning::V0::Entities::FeatureEnablement]) }
  def feature_flags_status; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::CodeScanning::V0::Entities::FeatureEnablement]
    ).void
  end
  def feature_flags_status=(value); end

  sig { returns(T.nilable(Google::Protobuf::BoolValue)) }
  def first_party_analysis; end

  sig { params(value: T.nilable(Google::Protobuf::BoolValue)).void }
  def first_party_analysis=(value); end

  sig { returns(Integer) }
  def interpret_results_cpp_duration_ms; end

  sig { params(value: Integer).void }
  def interpret_results_cpp_duration_ms=(value); end

  sig { returns(Integer) }
  def interpret_results_csharp_duration_ms; end

  sig { params(value: Integer).void }
  def interpret_results_csharp_duration_ms=(value); end

  sig { returns(Integer) }
  def interpret_results_go_duration_ms; end

  sig { params(value: Integer).void }
  def interpret_results_go_duration_ms=(value); end

  sig { returns(Integer) }
  def interpret_results_java_duration_ms; end

  sig { params(value: Integer).void }
  def interpret_results_java_duration_ms=(value); end

  sig { returns(Integer) }
  def interpret_results_javascript_duration_ms; end

  sig { params(value: Integer).void }
  def interpret_results_javascript_duration_ms=(value); end

  sig { returns(Integer) }
  def interpret_results_python_duration_ms; end

  sig { params(value: Integer).void }
  def interpret_results_python_duration_ms=(value); end

  sig { returns(Integer) }
  def interpret_results_ruby_duration_ms; end

  sig { params(value: Integer).void }
  def interpret_results_ruby_duration_ms=(value); end

  sig { returns(Integer) }
  def interpret_results_swift_duration_ms; end

  sig { params(value: Integer).void }
  def interpret_results_swift_duration_ms=(value); end

  sig { returns(String) }
  def job_name; end

  sig { params(value: String).void }
  def job_name=(value); end

  sig { returns(String) }
  def job_run_uuid; end

  sig { params(value: String).void }
  def job_run_uuid=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def job_status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def job_status=(value); end

  sig { returns(String) }
  def languages; end

  sig { params(value: String).void }
  def languages=(value); end

  sig { returns(String) }
  def matrix_vars; end

  sig { params(value: String).void }
  def matrix_vars=(value); end

  sig { returns(String) }
  def ml_powered_javascript_queries; end

  sig { params(value: String).void }
  def ml_powered_javascript_queries=(value); end

  sig { returns(Integer) }
  def num_results_in_sarif; end

  sig { params(value: Integer).void }
  def num_results_in_sarif=(value); end

  sig { returns(String) }
  def packs; end

  sig { params(value: String).void }
  def packs=(value); end

  sig { returns(String) }
  def paths; end

  sig { params(value: String).void }
  def paths=(value); end

  sig { returns(String) }
  def paths_ignore; end

  sig { params(value: String).void }
  def paths_ignore=(value); end

  sig { returns(String) }
  def queries; end

  sig { params(value: String).void }
  def queries=(value); end

  sig { returns(String) }
  def query_filters; end

  sig { params(value: String).void }
  def query_filters=(value); end

  sig { returns(Integer) }
  def raw_upload_size_bytes; end

  sig { params(value: Integer).void }
  def raw_upload_size_bytes=(value); end

  sig { returns(String) }
  def ref; end

  sig { params(value: String).void }
  def ref=(value); end

  sig { returns(String) }
  def registries; end

  sig { params(value: String).void }
  def registries=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(String) }
  def repository_nwo; end

  sig { params(value: String).void }
  def repository_nwo=(value); end

  sig { returns(String) }
  def runner_arch; end

  sig { params(value: String).void }
  def runner_arch=(value); end

  sig { returns(T.nilable(Google::Protobuf::Int64Value)) }
  def runner_available_disk_space_bytes; end

  sig { params(value: T.nilable(Google::Protobuf::Int64Value)).void }
  def runner_available_disk_space_bytes=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def runner_image_version; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def runner_image_version=(value); end

  sig { returns(String) }
  def runner_os; end

  sig { params(value: String).void }
  def runner_os=(value); end

  sig { returns(String) }
  def runner_os_release; end

  sig { params(value: String).void }
  def runner_os_release=(value); end

  sig { returns(T.nilable(Google::Protobuf::Int64Value)) }
  def runner_total_disk_space_bytes; end

  sig { params(value: T.nilable(Google::Protobuf::Int64Value)).void }
  def runner_total_disk_space_bytes=(value); end

  sig { returns(Integer) }
  def scanned_language_extraction_duration_ms; end

  sig { params(value: Integer).void }
  def scanned_language_extraction_duration_ms=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def started_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def started_at=(value); end

  sig { returns(String) }
  def status; end

  sig { params(value: String).void }
  def status=(value); end

  sig { returns(T.nilable(Google::Protobuf::BoolValue)) }
  def steady_state_default_setup; end

  sig { params(value: T.nilable(Google::Protobuf::BoolValue)).void }
  def steady_state_default_setup=(value); end

  sig { returns(String) }
  def testing_environment; end

  sig { params(value: String).void }
  def testing_environment=(value); end

  sig { returns(T.nilable(Google::Protobuf::Int32Value)) }
  def tools_download_duration_ms_opt; end

  sig { params(value: T.nilable(Google::Protobuf::Int32Value)).void }
  def tools_download_duration_ms_opt=(value); end

  sig { returns(T.nilable(Google::Protobuf::BoolValue)) }
  def tools_feature_flags_valid_opt; end

  sig { params(value: T.nilable(Google::Protobuf::BoolValue)).void }
  def tools_feature_flags_valid_opt=(value); end

  sig { returns(String) }
  def tools_input; end

  sig { params(value: String).void }
  def tools_input=(value); end

  sig { returns(String) }
  def tools_resolved_version; end

  sig { params(value: String).void }
  def tools_resolved_version=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def tools_source; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def tools_source=(value); end

  sig { returns(String) }
  def trap_cache_cleanup_error; end

  sig { params(value: String).void }
  def trap_cache_cleanup_error=(value); end

  sig { returns(Integer) }
  def trap_cache_cleanup_size_bytes; end

  sig { params(value: Integer).void }
  def trap_cache_cleanup_size_bytes=(value); end

  sig { returns(String) }
  def trap_cache_cleanup_skipped_because; end

  sig { params(value: String).void }
  def trap_cache_cleanup_skipped_because=(value); end

  sig { returns(Integer) }
  def trap_cache_download_duration_ms; end

  sig { params(value: Integer).void }
  def trap_cache_download_duration_ms=(value); end

  sig { returns(Integer) }
  def trap_cache_download_size_bytes; end

  sig { params(value: Integer).void }
  def trap_cache_download_size_bytes=(value); end

  sig { returns(String) }
  def trap_cache_languages; end

  sig { params(value: String).void }
  def trap_cache_languages=(value); end

  sig { returns(Integer) }
  def trap_cache_upload_duration_ms; end

  sig { params(value: Integer).void }
  def trap_cache_upload_duration_ms=(value); end

  sig { returns(Integer) }
  def trap_cache_upload_size_bytes; end

  sig { params(value: Integer).void }
  def trap_cache_upload_size_bytes=(value); end

  sig { returns(Integer) }
  def trap_import_duration_ms; end

  sig { params(value: Integer).void }
  def trap_import_duration_ms=(value); end

  sig { returns(String) }
  def upload_failed_run_error; end

  sig { params(value: String).void }
  def upload_failed_run_error=(value); end

  sig { returns(String) }
  def upload_failed_run_skipped_because; end

  sig { params(value: String).void }
  def upload_failed_run_skipped_because=(value); end

  sig { returns(String) }
  def upload_failed_run_stack_trace; end

  sig { params(value: String).void }
  def upload_failed_run_stack_trace=(value); end

  sig { returns(String) }
  def workflow_languages; end

  sig { params(value: String).void }
  def workflow_languages=(value); end

  sig { returns(Integer) }
  def workflow_run_attempt; end

  sig { params(value: Integer).void }
  def workflow_run_attempt=(value); end

  sig { returns(Integer) }
  def workflow_run_id; end

  sig { params(value: Integer).void }
  def workflow_run_id=(value); end

  sig { returns(Integer) }
  def zipped_upload_size_bytes; end

  sig { params(value: Integer).void }
  def zipped_upload_size_bytes=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Turboscan::Proto::EnableRequest`.
# Please instead update this file by running `bin/tapioca dsl Turboscan::Proto::EnableRequest`.

class Turboscan::Proto::EnableRequest
  sig do
    params(
      codeql_packs: T.nilable(String),
      default_ref: T.nilable(String),
      enabled_by_actor_grid: T.nilable(String),
      enabled_by_actor_login: T.nilable(String),
      global_repository_id: T.nilable(String),
      has_kotlin: T.nilable(T::Boolean),
      owner_id: T.nilable(Integer),
      query_suite: T.nilable(T.any(Symbol, Integer)),
      repository_id: T.nilable(Integer),
      selected_languages: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      supported_languages: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      threat_model: T.nilable(T.any(Symbol, Integer)),
      use_code_scanning_runner_label: T.nilable(T::Boolean)
    ).void
  end
  def initialize(codeql_packs: nil, default_ref: nil, enabled_by_actor_grid: nil, enabled_by_actor_login: nil, global_repository_id: nil, has_kotlin: nil, owner_id: nil, query_suite: nil, repository_id: nil, selected_languages: T.unsafe(nil), supported_languages: T.unsafe(nil), threat_model: nil, use_code_scanning_runner_label: nil); end

  sig { void }
  def clear_codeql_packs; end

  sig { void }
  def clear_default_ref; end

  sig { void }
  def clear_enabled_by_actor_grid; end

  sig { void }
  def clear_enabled_by_actor_login; end

  sig { void }
  def clear_global_repository_id; end

  sig { void }
  def clear_has_kotlin; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_query_suite; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_selected_languages; end

  sig { void }
  def clear_supported_languages; end

  sig { void }
  def clear_threat_model; end

  sig { void }
  def clear_use_code_scanning_runner_label; end

  sig { returns(String) }
  def codeql_packs; end

  sig { params(value: String).void }
  def codeql_packs=(value); end

  sig { returns(String) }
  def default_ref; end

  sig { params(value: String).void }
  def default_ref=(value); end

  sig { returns(String) }
  def enabled_by_actor_grid; end

  sig { params(value: String).void }
  def enabled_by_actor_grid=(value); end

  sig { returns(String) }
  def enabled_by_actor_login; end

  sig { params(value: String).void }
  def enabled_by_actor_login=(value); end

  sig { returns(String) }
  def global_repository_id; end

  sig { params(value: String).void }
  def global_repository_id=(value); end

  sig { returns(T::Boolean) }
  def has_kotlin; end

  sig { params(value: T::Boolean).void }
  def has_kotlin=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def query_suite; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def query_suite=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def selected_languages; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def selected_languages=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def supported_languages; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def supported_languages=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def threat_model; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def threat_model=(value); end

  sig { returns(T::Boolean) }
  def use_code_scanning_runner_label; end

  sig { params(value: T::Boolean).void }
  def use_code_scanning_runner_label=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ProtectedBranch`.
# Please instead update this file by running `bin/tapioca dsl ProtectedBranch`.

class ProtectedBranch
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def allow_deletions_enforcement_levels; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def allow_force_pushes_enforcement_levels; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def block_deletions_enforcement_levels; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def block_force_pushes_enforcement_levels; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def linear_history_requirement_enforcement_levels; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def lock_branch_enforcement_levels; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def merge_queue_enforcement_levels; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def migration_stages; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def pull_request_reviews_enforcement_levels; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def required_deployments_enforcement_levels; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def required_review_thread_resolution_enforcement_levels; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def required_status_checks_enforcement_levels; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def signature_requirement_enforcement_levels; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::ProtectedBranch).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProtectedBranch).void)
      ).returns(::ProtectedBranch)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProtectedBranch).void)
      ).returns(::ProtectedBranch)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProtectedBranch).void)
      ).returns(::ProtectedBranch)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProtectedBranch).void)
      ).returns(::ProtectedBranch)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProtectedBranch).void)
      ).returns(::ProtectedBranch)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::ProtectedBranch]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::ProtectedBranch)) }
    def fifth; end

    sig { returns(::ProtectedBranch) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::ProtectedBranch)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::ProtectedBranch) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::ProtectedBranch).void)
      ).returns(T.nilable(T::Enumerator[::ProtectedBranch]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::ProtectedBranch]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::ProtectedBranch]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProtectedBranch).void)
      ).returns(::ProtectedBranch)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProtectedBranch).void)
      ).returns(::ProtectedBranch)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProtectedBranch).void)
      ).returns(::ProtectedBranch)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::ProtectedBranch)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::ProtectedBranch) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::ProtectedBranch) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::ProtectedBranch) }
    def first!; end

    sig { returns(T.nilable(::ProtectedBranch)) }
    def forty_two; end

    sig { returns(::ProtectedBranch) }
    def forty_two!; end

    sig { returns(T.nilable(::ProtectedBranch)) }
    def fourth; end

    sig { returns(::ProtectedBranch) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::ProtectedBranch) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::ProtectedBranch).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProtectedBranch).void)
      ).returns(::ProtectedBranch)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::ProtectedBranch).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::ProtectedBranch).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::ProtectedBranch)) }
    def second; end

    sig { returns(::ProtectedBranch) }
    def second!; end

    sig { returns(T.nilable(::ProtectedBranch)) }
    def second_to_last; end

    sig { returns(::ProtectedBranch) }
    def second_to_last!; end

    sig { returns(::ProtectedBranch) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::ProtectedBranch) }
    def take!; end

    sig { returns(T.nilable(::ProtectedBranch)) }
    def third; end

    sig { returns(::ProtectedBranch) }
    def third!; end

    sig { returns(T.nilable(::ProtectedBranch)) }
    def third_to_last; end

    sig { returns(::ProtectedBranch) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def allow_deletions_enforcement_level_everyone!; end

    sig { returns(T::Boolean) }
    def allow_deletions_enforcement_level_everyone?; end

    sig { void }
    def allow_deletions_enforcement_level_non_admins!; end

    sig { returns(T::Boolean) }
    def allow_deletions_enforcement_level_non_admins?; end

    sig { void }
    def allow_deletions_enforcement_level_off!; end

    sig { returns(T::Boolean) }
    def allow_deletions_enforcement_level_off?; end

    sig { void }
    def allow_force_pushes_enforcement_level_everyone!; end

    sig { returns(T::Boolean) }
    def allow_force_pushes_enforcement_level_everyone?; end

    sig { void }
    def allow_force_pushes_enforcement_level_non_admins!; end

    sig { returns(T::Boolean) }
    def allow_force_pushes_enforcement_level_non_admins?; end

    sig { void }
    def allow_force_pushes_enforcement_level_off!; end

    sig { returns(T::Boolean) }
    def allow_force_pushes_enforcement_level_off?; end

    sig { void }
    def block_deletions_enforcement_level_everyone!; end

    sig { returns(T::Boolean) }
    def block_deletions_enforcement_level_everyone?; end

    sig { void }
    def block_deletions_enforcement_level_non_admins!; end

    sig { returns(T::Boolean) }
    def block_deletions_enforcement_level_non_admins?; end

    sig { void }
    def block_deletions_enforcement_level_off!; end

    sig { returns(T::Boolean) }
    def block_deletions_enforcement_level_off?; end

    sig { void }
    def block_force_pushes_enforcement_level_everyone!; end

    sig { returns(T::Boolean) }
    def block_force_pushes_enforcement_level_everyone?; end

    sig { void }
    def block_force_pushes_enforcement_level_non_admins!; end

    sig { returns(T::Boolean) }
    def block_force_pushes_enforcement_level_non_admins?; end

    sig { void }
    def block_force_pushes_enforcement_level_off!; end

    sig { returns(T::Boolean) }
    def block_force_pushes_enforcement_level_off?; end

    sig { void }
    def linear_history_requirement_enforcement_level_everyone!; end

    sig { returns(T::Boolean) }
    def linear_history_requirement_enforcement_level_everyone?; end

    sig { void }
    def linear_history_requirement_enforcement_level_non_admins!; end

    sig { returns(T::Boolean) }
    def linear_history_requirement_enforcement_level_non_admins?; end

    sig { void }
    def linear_history_requirement_enforcement_level_off!; end

    sig { returns(T::Boolean) }
    def linear_history_requirement_enforcement_level_off?; end

    sig { void }
    def lock_branch_enforcement_level_everyone!; end

    sig { returns(T::Boolean) }
    def lock_branch_enforcement_level_everyone?; end

    sig { void }
    def lock_branch_enforcement_level_non_admins!; end

    sig { returns(T::Boolean) }
    def lock_branch_enforcement_level_non_admins?; end

    sig { void }
    def lock_branch_enforcement_level_off!; end

    sig { returns(T::Boolean) }
    def lock_branch_enforcement_level_off?; end

    sig { void }
    def merge_queue_enforcement_level_everyone!; end

    sig { returns(T::Boolean) }
    def merge_queue_enforcement_level_everyone?; end

    sig { void }
    def merge_queue_enforcement_level_non_admins!; end

    sig { returns(T::Boolean) }
    def merge_queue_enforcement_level_non_admins?; end

    sig { void }
    def merge_queue_enforcement_level_off!; end

    sig { returns(T::Boolean) }
    def merge_queue_enforcement_level_off?; end

    sig { void }
    def migrated_with_allowances!; end

    sig { returns(T::Boolean) }
    def migrated_with_allowances?; end

    sig { void }
    def migrated_without_associations!; end

    sig { returns(T::Boolean) }
    def migrated_without_associations?; end

    sig { void }
    def pull_request_reviews_enforcement_level_everyone!; end

    sig { returns(T::Boolean) }
    def pull_request_reviews_enforcement_level_everyone?; end

    sig { void }
    def pull_request_reviews_enforcement_level_non_admins!; end

    sig { returns(T::Boolean) }
    def pull_request_reviews_enforcement_level_non_admins?; end

    sig { void }
    def pull_request_reviews_enforcement_level_off!; end

    sig { returns(T::Boolean) }
    def pull_request_reviews_enforcement_level_off?; end

    sig { void }
    def required_deployments_enforcement_level_everyone!; end

    sig { returns(T::Boolean) }
    def required_deployments_enforcement_level_everyone?; end

    sig { void }
    def required_deployments_enforcement_level_non_admins!; end

    sig { returns(T::Boolean) }
    def required_deployments_enforcement_level_non_admins?; end

    sig { void }
    def required_deployments_enforcement_level_off!; end

    sig { returns(T::Boolean) }
    def required_deployments_enforcement_level_off?; end

    sig { void }
    def required_review_thread_resolution_enforcement_level_everyone!; end

    sig { returns(T::Boolean) }
    def required_review_thread_resolution_enforcement_level_everyone?; end

    sig { void }
    def required_review_thread_resolution_enforcement_level_non_admins!; end

    sig { returns(T::Boolean) }
    def required_review_thread_resolution_enforcement_level_non_admins?; end

    sig { void }
    def required_review_thread_resolution_enforcement_level_off!; end

    sig { returns(T::Boolean) }
    def required_review_thread_resolution_enforcement_level_off?; end

    sig { void }
    def required_status_checks_enforcement_level_everyone!; end

    sig { returns(T::Boolean) }
    def required_status_checks_enforcement_level_everyone?; end

    sig { void }
    def required_status_checks_enforcement_level_non_admins!; end

    sig { returns(T::Boolean) }
    def required_status_checks_enforcement_level_non_admins?; end

    sig { void }
    def required_status_checks_enforcement_level_off!; end

    sig { returns(T::Boolean) }
    def required_status_checks_enforcement_level_off?; end

    sig { void }
    def signature_requirement_enforcement_level_everyone!; end

    sig { returns(T::Boolean) }
    def signature_requirement_enforcement_level_everyone?; end

    sig { void }
    def signature_requirement_enforcement_level_non_admins!; end

    sig { returns(T::Boolean) }
    def signature_requirement_enforcement_level_non_admins?; end

    sig { void }
    def signature_requirement_enforcement_level_off!; end

    sig { returns(T::Boolean) }
    def signature_requirement_enforcement_level_off?; end

    sig { void }
    def unmigrated!; end

    sig { returns(T::Boolean) }
    def unmigrated?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def branch_actor_allowance_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def branch_actor_allowance_ids=(ids); end

    # This method is created by ActiveRecord on the `ProtectedBranch` class because it declared `has_many :branch_actor_allowances`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BranchActorAllowance::PrivateCollectionProxy) }
    def branch_actor_allowances; end

    sig { params(value: T::Enumerable[::BranchActorAllowance]).void }
    def branch_actor_allowances=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_creator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MergeQueue) }
    def build_merge_queue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_creator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_creator!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MergeQueue) }
    def create_merge_queue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MergeQueue) }
    def create_merge_queue!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def creator; end

    sig { params(value: T.nilable(::User)).void }
    def creator=(value); end

    sig { returns(T.nilable(::MergeQueue)) }
    def merge_queue; end

    sig { params(value: T.nilable(::MergeQueue)).void }
    def merge_queue=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_creator; end

    sig { returns(T.nilable(::MergeQueue)) }
    def reload_merge_queue; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    sig { returns(T::Array[T.untyped]) }
    def required_deployment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def required_deployment_ids=(ids); end

    # This method is created by ActiveRecord on the `ProtectedBranch` class because it declared `has_many :required_deployments`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RequiredDeployment::PrivateCollectionProxy) }
    def required_deployments; end

    sig { params(value: T::Enumerable[::RequiredDeployment]).void }
    def required_deployments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def required_status_check_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def required_status_check_ids=(ids); end

    # This method is created by ActiveRecord on the `ProtectedBranch` class because it declared `has_many :required_status_checks`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RequiredStatusCheck::PrivateCollectionProxy) }
    def required_status_checks; end

    sig { params(value: T::Enumerable[::RequiredStatusCheck]).void }
    def required_status_checks=(value); end

    sig { returns(T::Array[T.untyped]) }
    def review_dismissal_allowance_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_dismissal_allowance_ids=(ids); end

    # This method is created by ActiveRecord on the `ProtectedBranch` class because it declared `has_many :review_dismissal_allowances`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReviewDismissalAllowance::PrivateCollectionProxy) }
    def review_dismissal_allowances; end

    sig { params(value: T::Enumerable[::ReviewDismissalAllowance]).void }
    def review_dismissal_allowances=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def allow_deletions_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def allow_deletions_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def allow_deletions_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def allow_force_pushes_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def allow_force_pushes_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def allow_force_pushes_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def block_deletions_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def block_deletions_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def block_deletions_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def block_force_pushes_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def block_force_pushes_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def block_force_pushes_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def linear_history_requirement_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def linear_history_requirement_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def linear_history_requirement_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock_branch_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock_branch_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock_branch_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge_queue_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge_queue_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge_queue_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def migrated_with_allowances(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def migrated_without_associations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_allow_deletions_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_allow_deletions_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_allow_deletions_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_allow_force_pushes_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_allow_force_pushes_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_allow_force_pushes_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_block_deletions_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_block_deletions_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_block_deletions_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_block_force_pushes_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_block_force_pushes_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_block_force_pushes_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_linear_history_requirement_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_linear_history_requirement_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_linear_history_requirement_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_lock_branch_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_lock_branch_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_lock_branch_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_merge_queue_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_merge_queue_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_merge_queue_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_migrated_with_allowances(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_migrated_without_associations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pull_request_reviews_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pull_request_reviews_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pull_request_reviews_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_required_deployments_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_required_deployments_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_required_deployments_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_required_review_thread_resolution_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_required_review_thread_resolution_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_required_review_thread_resolution_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_required_status_checks_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_required_status_checks_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_required_status_checks_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_signature_requirement_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_signature_requirement_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_signature_requirement_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unmigrated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pull_request_reviews_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pull_request_reviews_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pull_request_reviews_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def required_deployments_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def required_deployments_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def required_deployments_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def required_review_thread_resolution_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def required_review_thread_resolution_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def required_review_thread_resolution_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def required_status_checks_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def required_status_checks_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def required_status_checks_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def signature_requirement_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def signature_requirement_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def signature_requirement_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unmigrated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_branch_actor_allowances; end

    sig { returns(Promise[T.untyped]) }
    def async_creator; end

    sig { returns(Promise[T.untyped]) }
    def async_merge_queue; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_required_deployments; end

    sig { returns(Promise[T.untyped]) }
    def async_required_status_checks; end

    sig { returns(Promise[T.untyped]) }
    def async_review_dismissal_allowances; end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def admin_enforced; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def admin_enforced=(value); end

    sig { returns(T::Boolean) }
    def admin_enforced?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_enforced_before_last_save; end

    sig { returns(T.untyped) }
    def admin_enforced_before_type_cast; end

    sig { returns(T::Boolean) }
    def admin_enforced_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def admin_enforced_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def admin_enforced_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def admin_enforced_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_enforced_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def admin_enforced_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def admin_enforced_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_enforced_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_enforced_was; end

    sig { void }
    def admin_enforced_will_change!; end

    sig { returns(::String) }
    def allow_deletions_enforcement_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def allow_deletions_enforcement_level=(value); end

    sig { returns(T::Boolean) }
    def allow_deletions_enforcement_level?; end

    sig { returns(T.nilable(::String)) }
    def allow_deletions_enforcement_level_before_last_save; end

    sig { returns(T.untyped) }
    def allow_deletions_enforcement_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def allow_deletions_enforcement_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def allow_deletions_enforcement_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def allow_deletions_enforcement_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def allow_deletions_enforcement_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def allow_deletions_enforcement_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def allow_deletions_enforcement_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def allow_deletions_enforcement_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def allow_deletions_enforcement_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def allow_deletions_enforcement_level_was; end

    sig { void }
    def allow_deletions_enforcement_level_will_change!; end

    sig { returns(::String) }
    def allow_force_pushes_enforcement_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def allow_force_pushes_enforcement_level=(value); end

    sig { returns(T::Boolean) }
    def allow_force_pushes_enforcement_level?; end

    sig { returns(T.nilable(::String)) }
    def allow_force_pushes_enforcement_level_before_last_save; end

    sig { returns(T.untyped) }
    def allow_force_pushes_enforcement_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def allow_force_pushes_enforcement_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def allow_force_pushes_enforcement_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def allow_force_pushes_enforcement_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def allow_force_pushes_enforcement_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def allow_force_pushes_enforcement_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def allow_force_pushes_enforcement_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def allow_force_pushes_enforcement_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def allow_force_pushes_enforcement_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def allow_force_pushes_enforcement_level_was; end

    sig { void }
    def allow_force_pushes_enforcement_level_will_change!; end

    sig { returns(T::Boolean) }
    def authorized_actors_only; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def authorized_actors_only=(value); end

    sig { returns(T::Boolean) }
    def authorized_actors_only?; end

    sig { returns(T.nilable(T::Boolean)) }
    def authorized_actors_only_before_last_save; end

    sig { returns(T.untyped) }
    def authorized_actors_only_before_type_cast; end

    sig { returns(T::Boolean) }
    def authorized_actors_only_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def authorized_actors_only_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def authorized_actors_only_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def authorized_actors_only_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def authorized_actors_only_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def authorized_actors_only_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def authorized_actors_only_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def authorized_actors_only_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def authorized_actors_only_was; end

    sig { void }
    def authorized_actors_only_will_change!; end

    sig { returns(T::Boolean) }
    def authorized_dismissal_actors_only; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def authorized_dismissal_actors_only=(value); end

    sig { returns(T::Boolean) }
    def authorized_dismissal_actors_only?; end

    sig { returns(T.nilable(T::Boolean)) }
    def authorized_dismissal_actors_only_before_last_save; end

    sig { returns(T.untyped) }
    def authorized_dismissal_actors_only_before_type_cast; end

    sig { returns(T::Boolean) }
    def authorized_dismissal_actors_only_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def authorized_dismissal_actors_only_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def authorized_dismissal_actors_only_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def authorized_dismissal_actors_only_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def authorized_dismissal_actors_only_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def authorized_dismissal_actors_only_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def authorized_dismissal_actors_only_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def authorized_dismissal_actors_only_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def authorized_dismissal_actors_only_was; end

    sig { void }
    def authorized_dismissal_actors_only_will_change!; end

    sig { returns(::String) }
    def block_deletions_enforcement_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def block_deletions_enforcement_level=(value); end

    sig { returns(T::Boolean) }
    def block_deletions_enforcement_level?; end

    sig { returns(T.nilable(::String)) }
    def block_deletions_enforcement_level_before_last_save; end

    sig { returns(T.untyped) }
    def block_deletions_enforcement_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def block_deletions_enforcement_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def block_deletions_enforcement_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def block_deletions_enforcement_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def block_deletions_enforcement_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def block_deletions_enforcement_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def block_deletions_enforcement_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def block_deletions_enforcement_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def block_deletions_enforcement_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def block_deletions_enforcement_level_was; end

    sig { void }
    def block_deletions_enforcement_level_will_change!; end

    sig { returns(::String) }
    def block_force_pushes_enforcement_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def block_force_pushes_enforcement_level=(value); end

    sig { returns(T::Boolean) }
    def block_force_pushes_enforcement_level?; end

    sig { returns(T.nilable(::String)) }
    def block_force_pushes_enforcement_level_before_last_save; end

    sig { returns(T.untyped) }
    def block_force_pushes_enforcement_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def block_force_pushes_enforcement_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def block_force_pushes_enforcement_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def block_force_pushes_enforcement_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def block_force_pushes_enforcement_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def block_force_pushes_enforcement_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def block_force_pushes_enforcement_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def block_force_pushes_enforcement_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def block_force_pushes_enforcement_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def block_force_pushes_enforcement_level_was; end

    sig { void }
    def block_force_pushes_enforcement_level_will_change!; end

    sig { returns(T::Boolean) }
    def create_protected; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def create_protected=(value); end

    sig { returns(T::Boolean) }
    def create_protected?; end

    sig { returns(T.nilable(T::Boolean)) }
    def create_protected_before_last_save; end

    sig { returns(T.untyped) }
    def create_protected_before_type_cast; end

    sig { returns(T::Boolean) }
    def create_protected_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def create_protected_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def create_protected_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def create_protected_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def create_protected_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def create_protected_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def create_protected_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def create_protected_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def create_protected_was; end

    sig { void }
    def create_protected_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def creator_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def creator_id=(value); end

    sig { returns(T::Boolean) }
    def creator_id?; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_before_last_save; end

    sig { returns(T.untyped) }
    def creator_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def creator_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def creator_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def creator_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def creator_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def creator_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def creator_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_was; end

    sig { void }
    def creator_id_will_change!; end

    sig { returns(T::Boolean) }
    def dismiss_stale_reviews_on_push; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def dismiss_stale_reviews_on_push=(value); end

    sig { returns(T::Boolean) }
    def dismiss_stale_reviews_on_push?; end

    sig { returns(T.nilable(T::Boolean)) }
    def dismiss_stale_reviews_on_push_before_last_save; end

    sig { returns(T.untyped) }
    def dismiss_stale_reviews_on_push_before_type_cast; end

    sig { returns(T::Boolean) }
    def dismiss_stale_reviews_on_push_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def dismiss_stale_reviews_on_push_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def dismiss_stale_reviews_on_push_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def dismiss_stale_reviews_on_push_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def dismiss_stale_reviews_on_push_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def dismiss_stale_reviews_on_push_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def dismiss_stale_reviews_on_push_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def dismiss_stale_reviews_on_push_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def dismiss_stale_reviews_on_push_was; end

    sig { void }
    def dismiss_stale_reviews_on_push_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Boolean) }
    def ignore_approvals_from_contributors; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def ignore_approvals_from_contributors=(value); end

    sig { returns(T::Boolean) }
    def ignore_approvals_from_contributors?; end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_approvals_from_contributors_before_last_save; end

    sig { returns(T.untyped) }
    def ignore_approvals_from_contributors_before_type_cast; end

    sig { returns(T::Boolean) }
    def ignore_approvals_from_contributors_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ignore_approvals_from_contributors_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ignore_approvals_from_contributors_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ignore_approvals_from_contributors_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_approvals_from_contributors_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ignore_approvals_from_contributors_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ignore_approvals_from_contributors_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_approvals_from_contributors_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_approvals_from_contributors_was; end

    sig { void }
    def ignore_approvals_from_contributors_will_change!; end

    sig { returns(::String) }
    def linear_history_requirement_enforcement_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def linear_history_requirement_enforcement_level=(value); end

    sig { returns(T::Boolean) }
    def linear_history_requirement_enforcement_level?; end

    sig { returns(T.nilable(::String)) }
    def linear_history_requirement_enforcement_level_before_last_save; end

    sig { returns(T.untyped) }
    def linear_history_requirement_enforcement_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def linear_history_requirement_enforcement_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def linear_history_requirement_enforcement_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def linear_history_requirement_enforcement_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def linear_history_requirement_enforcement_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def linear_history_requirement_enforcement_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def linear_history_requirement_enforcement_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def linear_history_requirement_enforcement_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def linear_history_requirement_enforcement_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def linear_history_requirement_enforcement_level_was; end

    sig { void }
    def linear_history_requirement_enforcement_level_will_change!; end

    sig { returns(T::Boolean) }
    def lock_allows_fetch_and_merge; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def lock_allows_fetch_and_merge=(value); end

    sig { returns(T::Boolean) }
    def lock_allows_fetch_and_merge?; end

    sig { returns(T.nilable(T::Boolean)) }
    def lock_allows_fetch_and_merge_before_last_save; end

    sig { returns(T.untyped) }
    def lock_allows_fetch_and_merge_before_type_cast; end

    sig { returns(T::Boolean) }
    def lock_allows_fetch_and_merge_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def lock_allows_fetch_and_merge_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def lock_allows_fetch_and_merge_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def lock_allows_fetch_and_merge_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def lock_allows_fetch_and_merge_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def lock_allows_fetch_and_merge_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def lock_allows_fetch_and_merge_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def lock_allows_fetch_and_merge_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def lock_allows_fetch_and_merge_was; end

    sig { void }
    def lock_allows_fetch_and_merge_will_change!; end

    sig { returns(::String) }
    def lock_branch_enforcement_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def lock_branch_enforcement_level=(value); end

    sig { returns(T::Boolean) }
    def lock_branch_enforcement_level?; end

    sig { returns(T.nilable(::String)) }
    def lock_branch_enforcement_level_before_last_save; end

    sig { returns(T.untyped) }
    def lock_branch_enforcement_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def lock_branch_enforcement_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def lock_branch_enforcement_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def lock_branch_enforcement_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def lock_branch_enforcement_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def lock_branch_enforcement_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def lock_branch_enforcement_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def lock_branch_enforcement_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def lock_branch_enforcement_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def lock_branch_enforcement_level_was; end

    sig { void }
    def lock_branch_enforcement_level_will_change!; end

    sig { returns(::String) }
    def merge_queue_enforcement_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def merge_queue_enforcement_level=(value); end

    sig { returns(T::Boolean) }
    def merge_queue_enforcement_level?; end

    sig { returns(T.nilable(::String)) }
    def merge_queue_enforcement_level_before_last_save; end

    sig { returns(T.untyped) }
    def merge_queue_enforcement_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def merge_queue_enforcement_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def merge_queue_enforcement_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def merge_queue_enforcement_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def merge_queue_enforcement_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def merge_queue_enforcement_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def merge_queue_enforcement_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def merge_queue_enforcement_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def merge_queue_enforcement_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def merge_queue_enforcement_level_was; end

    sig { void }
    def merge_queue_enforcement_level_will_change!; end

    sig { returns(::String) }
    def migration_stage; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def migration_stage=(value); end

    sig { returns(T::Boolean) }
    def migration_stage?; end

    sig { returns(T.nilable(::String)) }
    def migration_stage_before_last_save; end

    sig { returns(T.untyped) }
    def migration_stage_before_type_cast; end

    sig { returns(T::Boolean) }
    def migration_stage_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def migration_stage_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def migration_stage_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def migration_stage_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def migration_stage_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def migration_stage_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def migration_stage_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def migration_stage_previously_was; end

    sig { returns(T.nilable(::String)) }
    def migration_stage_was; end

    sig { void }
    def migration_stage_will_change!; end

    sig { returns(T.untyped) }
    def name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.untyped) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def name_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def name_previously_was; end

    sig { returns(T.untyped) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::String) }
    def pull_request_reviews_enforcement_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def pull_request_reviews_enforcement_level=(value); end

    sig { returns(T::Boolean) }
    def pull_request_reviews_enforcement_level?; end

    sig { returns(T.nilable(::String)) }
    def pull_request_reviews_enforcement_level_before_last_save; end

    sig { returns(T.untyped) }
    def pull_request_reviews_enforcement_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def pull_request_reviews_enforcement_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def pull_request_reviews_enforcement_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def pull_request_reviews_enforcement_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def pull_request_reviews_enforcement_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pull_request_reviews_enforcement_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def pull_request_reviews_enforcement_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def pull_request_reviews_enforcement_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pull_request_reviews_enforcement_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def pull_request_reviews_enforcement_level_was; end

    sig { void }
    def pull_request_reviews_enforcement_level_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { returns(T::Boolean) }
    def require_code_owner_review; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def require_code_owner_review=(value); end

    sig { returns(T::Boolean) }
    def require_code_owner_review?; end

    sig { returns(T.nilable(T::Boolean)) }
    def require_code_owner_review_before_last_save; end

    sig { returns(T.untyped) }
    def require_code_owner_review_before_type_cast; end

    sig { returns(T::Boolean) }
    def require_code_owner_review_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def require_code_owner_review_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def require_code_owner_review_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def require_code_owner_review_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def require_code_owner_review_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def require_code_owner_review_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def require_code_owner_review_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def require_code_owner_review_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def require_code_owner_review_was; end

    sig { void }
    def require_code_owner_review_will_change!; end

    sig { returns(T::Boolean) }
    def require_last_push_approval; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def require_last_push_approval=(value); end

    sig { returns(T::Boolean) }
    def require_last_push_approval?; end

    sig { returns(T.nilable(T::Boolean)) }
    def require_last_push_approval_before_last_save; end

    sig { returns(T.untyped) }
    def require_last_push_approval_before_type_cast; end

    sig { returns(T::Boolean) }
    def require_last_push_approval_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def require_last_push_approval_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def require_last_push_approval_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def require_last_push_approval_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def require_last_push_approval_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def require_last_push_approval_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def require_last_push_approval_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def require_last_push_approval_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def require_last_push_approval_was; end

    sig { void }
    def require_last_push_approval_will_change!; end

    sig { returns(::Integer) }
    def required_approving_review_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def required_approving_review_count=(value); end

    sig { returns(T::Boolean) }
    def required_approving_review_count?; end

    sig { returns(T.nilable(::Integer)) }
    def required_approving_review_count_before_last_save; end

    sig { returns(T.untyped) }
    def required_approving_review_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def required_approving_review_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def required_approving_review_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def required_approving_review_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def required_approving_review_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def required_approving_review_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def required_approving_review_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def required_approving_review_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def required_approving_review_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def required_approving_review_count_was; end

    sig { void }
    def required_approving_review_count_will_change!; end

    sig { returns(::String) }
    def required_deployments_enforcement_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def required_deployments_enforcement_level=(value); end

    sig { returns(T::Boolean) }
    def required_deployments_enforcement_level?; end

    sig { returns(T.nilable(::String)) }
    def required_deployments_enforcement_level_before_last_save; end

    sig { returns(T.untyped) }
    def required_deployments_enforcement_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def required_deployments_enforcement_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def required_deployments_enforcement_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def required_deployments_enforcement_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def required_deployments_enforcement_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def required_deployments_enforcement_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def required_deployments_enforcement_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def required_deployments_enforcement_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def required_deployments_enforcement_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def required_deployments_enforcement_level_was; end

    sig { void }
    def required_deployments_enforcement_level_will_change!; end

    sig { returns(::String) }
    def required_review_thread_resolution_enforcement_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def required_review_thread_resolution_enforcement_level=(value); end

    sig { returns(T::Boolean) }
    def required_review_thread_resolution_enforcement_level?; end

    sig { returns(T.nilable(::String)) }
    def required_review_thread_resolution_enforcement_level_before_last_save; end

    sig { returns(T.untyped) }
    def required_review_thread_resolution_enforcement_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def required_review_thread_resolution_enforcement_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def required_review_thread_resolution_enforcement_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def required_review_thread_resolution_enforcement_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def required_review_thread_resolution_enforcement_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def required_review_thread_resolution_enforcement_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def required_review_thread_resolution_enforcement_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def required_review_thread_resolution_enforcement_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def required_review_thread_resolution_enforcement_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def required_review_thread_resolution_enforcement_level_was; end

    sig { void }
    def required_review_thread_resolution_enforcement_level_will_change!; end

    sig { returns(::String) }
    def required_status_checks_enforcement_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def required_status_checks_enforcement_level=(value); end

    sig { returns(T::Boolean) }
    def required_status_checks_enforcement_level?; end

    sig { returns(T.nilable(::String)) }
    def required_status_checks_enforcement_level_before_last_save; end

    sig { returns(T.untyped) }
    def required_status_checks_enforcement_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def required_status_checks_enforcement_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def required_status_checks_enforcement_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def required_status_checks_enforcement_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def required_status_checks_enforcement_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def required_status_checks_enforcement_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def required_status_checks_enforcement_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def required_status_checks_enforcement_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def required_status_checks_enforcement_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def required_status_checks_enforcement_level_was; end

    sig { void }
    def required_status_checks_enforcement_level_will_change!; end

    sig { void }
    def restore_admin_enforced!; end

    sig { void }
    def restore_allow_deletions_enforcement_level!; end

    sig { void }
    def restore_allow_force_pushes_enforcement_level!; end

    sig { void }
    def restore_authorized_actors_only!; end

    sig { void }
    def restore_authorized_dismissal_actors_only!; end

    sig { void }
    def restore_block_deletions_enforcement_level!; end

    sig { void }
    def restore_block_force_pushes_enforcement_level!; end

    sig { void }
    def restore_create_protected!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_creator_id!; end

    sig { void }
    def restore_dismiss_stale_reviews_on_push!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_ignore_approvals_from_contributors!; end

    sig { void }
    def restore_linear_history_requirement_enforcement_level!; end

    sig { void }
    def restore_lock_allows_fetch_and_merge!; end

    sig { void }
    def restore_lock_branch_enforcement_level!; end

    sig { void }
    def restore_merge_queue_enforcement_level!; end

    sig { void }
    def restore_migration_stage!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_pull_request_reviews_enforcement_level!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_require_code_owner_review!; end

    sig { void }
    def restore_require_last_push_approval!; end

    sig { void }
    def restore_required_approving_review_count!; end

    sig { void }
    def restore_required_deployments_enforcement_level!; end

    sig { void }
    def restore_required_review_thread_resolution_enforcement_level!; end

    sig { void }
    def restore_required_status_checks_enforcement_level!; end

    sig { void }
    def restore_signature_requirement_enforcement_level!; end

    sig { void }
    def restore_strict_required_status_checks_policy!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_admin_enforced; end

    sig { returns(T::Boolean) }
    def saved_change_to_admin_enforced?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_allow_deletions_enforcement_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_allow_deletions_enforcement_level?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_allow_force_pushes_enforcement_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_allow_force_pushes_enforcement_level?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_authorized_actors_only; end

    sig { returns(T::Boolean) }
    def saved_change_to_authorized_actors_only?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_authorized_dismissal_actors_only; end

    sig { returns(T::Boolean) }
    def saved_change_to_authorized_dismissal_actors_only?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_block_deletions_enforcement_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_block_deletions_enforcement_level?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_block_force_pushes_enforcement_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_block_force_pushes_enforcement_level?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_create_protected; end

    sig { returns(T::Boolean) }
    def saved_change_to_create_protected?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_creator_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_creator_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_dismiss_stale_reviews_on_push; end

    sig { returns(T::Boolean) }
    def saved_change_to_dismiss_stale_reviews_on_push?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_ignore_approvals_from_contributors; end

    sig { returns(T::Boolean) }
    def saved_change_to_ignore_approvals_from_contributors?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_linear_history_requirement_enforcement_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_linear_history_requirement_enforcement_level?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_lock_allows_fetch_and_merge; end

    sig { returns(T::Boolean) }
    def saved_change_to_lock_allows_fetch_and_merge?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_lock_branch_enforcement_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_lock_branch_enforcement_level?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_merge_queue_enforcement_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_merge_queue_enforcement_level?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_migration_stage; end

    sig { returns(T::Boolean) }
    def saved_change_to_migration_stage?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_pull_request_reviews_enforcement_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_pull_request_reviews_enforcement_level?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_require_code_owner_review; end

    sig { returns(T::Boolean) }
    def saved_change_to_require_code_owner_review?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_require_last_push_approval; end

    sig { returns(T::Boolean) }
    def saved_change_to_require_last_push_approval?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_required_approving_review_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_required_approving_review_count?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_required_deployments_enforcement_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_required_deployments_enforcement_level?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_required_review_thread_resolution_enforcement_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_required_review_thread_resolution_enforcement_level?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_required_status_checks_enforcement_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_required_status_checks_enforcement_level?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_signature_requirement_enforcement_level; end

    sig { returns(T::Boolean) }
    def saved_change_to_signature_requirement_enforcement_level?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_strict_required_status_checks_policy; end

    sig { returns(T::Boolean) }
    def saved_change_to_strict_required_status_checks_policy?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(::String) }
    def signature_requirement_enforcement_level; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def signature_requirement_enforcement_level=(value); end

    sig { returns(T::Boolean) }
    def signature_requirement_enforcement_level?; end

    sig { returns(T.nilable(::String)) }
    def signature_requirement_enforcement_level_before_last_save; end

    sig { returns(T.untyped) }
    def signature_requirement_enforcement_level_before_type_cast; end

    sig { returns(T::Boolean) }
    def signature_requirement_enforcement_level_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def signature_requirement_enforcement_level_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def signature_requirement_enforcement_level_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def signature_requirement_enforcement_level_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def signature_requirement_enforcement_level_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def signature_requirement_enforcement_level_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def signature_requirement_enforcement_level_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def signature_requirement_enforcement_level_previously_was; end

    sig { returns(T.nilable(::String)) }
    def signature_requirement_enforcement_level_was; end

    sig { void }
    def signature_requirement_enforcement_level_will_change!; end

    sig { returns(T::Boolean) }
    def strict_required_status_checks_policy; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def strict_required_status_checks_policy=(value); end

    sig { returns(T::Boolean) }
    def strict_required_status_checks_policy?; end

    sig { returns(T.nilable(T::Boolean)) }
    def strict_required_status_checks_policy_before_last_save; end

    sig { returns(T.untyped) }
    def strict_required_status_checks_policy_before_type_cast; end

    sig { returns(T::Boolean) }
    def strict_required_status_checks_policy_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def strict_required_status_checks_policy_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def strict_required_status_checks_policy_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def strict_required_status_checks_policy_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def strict_required_status_checks_policy_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def strict_required_status_checks_policy_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def strict_required_status_checks_policy_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def strict_required_status_checks_policy_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def strict_required_status_checks_policy_was; end

    sig { void }
    def strict_required_status_checks_policy_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_admin_enforced?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_allow_deletions_enforcement_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_allow_force_pushes_enforcement_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_authorized_actors_only?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_authorized_dismissal_actors_only?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_block_deletions_enforcement_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_block_force_pushes_enforcement_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_create_protected?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_creator_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dismiss_stale_reviews_on_push?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ignore_approvals_from_contributors?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_linear_history_requirement_enforcement_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_lock_allows_fetch_and_merge?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_lock_branch_enforcement_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_merge_queue_enforcement_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_migration_stage?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pull_request_reviews_enforcement_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_require_code_owner_review?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_require_last_push_approval?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_required_approving_review_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_required_deployments_enforcement_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_required_review_thread_resolution_enforcement_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_required_status_checks_enforcement_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_signature_requirement_enforcement_level?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_strict_required_status_checks_policy?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def allow_deletions_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def allow_deletions_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def allow_deletions_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def allow_force_pushes_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def allow_force_pushes_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def allow_force_pushes_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def block_deletions_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def block_deletions_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def block_deletions_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def block_force_pushes_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def block_force_pushes_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def block_force_pushes_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def linear_history_requirement_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def linear_history_requirement_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def linear_history_requirement_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock_branch_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock_branch_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock_branch_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge_queue_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge_queue_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge_queue_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def migrated_with_allowances(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def migrated_without_associations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_allow_deletions_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_allow_deletions_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_allow_deletions_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_allow_force_pushes_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_allow_force_pushes_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_allow_force_pushes_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_block_deletions_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_block_deletions_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_block_deletions_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_block_force_pushes_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_block_force_pushes_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_block_force_pushes_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_linear_history_requirement_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_linear_history_requirement_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_linear_history_requirement_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_lock_branch_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_lock_branch_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_lock_branch_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_merge_queue_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_merge_queue_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_merge_queue_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_migrated_with_allowances(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_migrated_without_associations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pull_request_reviews_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pull_request_reviews_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pull_request_reviews_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_required_deployments_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_required_deployments_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_required_deployments_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_required_review_thread_resolution_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_required_review_thread_resolution_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_required_review_thread_resolution_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_required_status_checks_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_required_status_checks_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_required_status_checks_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_signature_requirement_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_signature_requirement_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_signature_requirement_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unmigrated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pull_request_reviews_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pull_request_reviews_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pull_request_reviews_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def required_deployments_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def required_deployments_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def required_deployments_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def required_review_thread_resolution_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def required_review_thread_resolution_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def required_review_thread_resolution_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def required_status_checks_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def required_status_checks_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def required_status_checks_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def signature_requirement_enforcement_level_everyone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def signature_requirement_enforcement_level_non_admins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def signature_requirement_enforcement_level_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unmigrated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ProtectedBranch } }

    sig { returns(T::Array[::ProtectedBranch]) }
    def to_a; end

    sig { returns(T::Array[::ProtectedBranch]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::ProtectedBranch } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ProtectedBranch } }

    sig do
      params(
        records: T.any(::ProtectedBranch, T::Enumerable[T.any(::ProtectedBranch, T::Enumerable[::ProtectedBranch])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::ProtectedBranch, T::Enumerable[T.any(::ProtectedBranch, T::Enumerable[::ProtectedBranch])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::ProtectedBranch, T::Enumerable[T.any(::ProtectedBranch, T::Enumerable[::ProtectedBranch])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::ProtectedBranch]) }
    def load_target; end

    sig do
      params(
        records: T.any(::ProtectedBranch, T::Enumerable[T.any(::ProtectedBranch, T::Enumerable[::ProtectedBranch])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::ProtectedBranch, T::Enumerable[T.any(::ProtectedBranch, T::Enumerable[::ProtectedBranch])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::ProtectedBranch, T::Enumerable[T.any(::ProtectedBranch, T::Enumerable[::ProtectedBranch])])
      ).returns(T::Array[::ProtectedBranch])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::ProtectedBranch]) }
    def target; end

    sig { returns(T::Array[::ProtectedBranch]) }
    def to_a; end

    sig { returns(T::Array[::ProtectedBranch]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::ProtectedBranch } }

    sig { returns(T::Array[::ProtectedBranch]) }
    def to_a; end

    sig { returns(T::Array[::ProtectedBranch]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::ProtectedBranch } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

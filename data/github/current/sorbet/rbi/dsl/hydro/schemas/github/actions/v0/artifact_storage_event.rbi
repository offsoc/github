# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Actions::V0::ArtifactStorageEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Actions::V0::ArtifactStorageEvent`.

class Hydro::Schemas::Github::Actions::V0::ArtifactStorageEvent
  sig do
    params(
      artifact_event_type: T.nilable(T.any(Symbol, Integer)),
      artifact_global_id: T.nilable(String),
      artifact_id: T.nilable(Integer),
      artifact_name: T.nilable(String),
      artifact_repository_id: T.nilable(Integer),
      artifact_repository_owner_id: T.nilable(Integer),
      artifact_repository_visibility: T.nilable(T.any(Symbol, Integer)),
      artifact_size_in_bytes: T.nilable(Integer),
      check_run_id: T.nilable(Integer),
      check_suite_id: T.nilable(Integer),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      expires_at: T.nilable(Google::Protobuf::Timestamp),
      previously_expired_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(artifact_event_type: nil, artifact_global_id: nil, artifact_id: nil, artifact_name: nil, artifact_repository_id: nil, artifact_repository_owner_id: nil, artifact_repository_visibility: nil, artifact_size_in_bytes: nil, check_run_id: nil, check_suite_id: nil, created_at: nil, expires_at: nil, previously_expired_at: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def artifact_event_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def artifact_event_type=(value); end

  sig { returns(String) }
  def artifact_global_id; end

  sig { params(value: String).void }
  def artifact_global_id=(value); end

  sig { returns(Integer) }
  def artifact_id; end

  sig { params(value: Integer).void }
  def artifact_id=(value); end

  sig { returns(String) }
  def artifact_name; end

  sig { params(value: String).void }
  def artifact_name=(value); end

  sig { returns(Integer) }
  def artifact_repository_id; end

  sig { params(value: Integer).void }
  def artifact_repository_id=(value); end

  sig { returns(Integer) }
  def artifact_repository_owner_id; end

  sig { params(value: Integer).void }
  def artifact_repository_owner_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def artifact_repository_visibility; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def artifact_repository_visibility=(value); end

  sig { returns(Integer) }
  def artifact_size_in_bytes; end

  sig { params(value: Integer).void }
  def artifact_size_in_bytes=(value); end

  sig { returns(Integer) }
  def check_run_id; end

  sig { params(value: Integer).void }
  def check_run_id=(value); end

  sig { returns(Integer) }
  def check_suite_id; end

  sig { params(value: Integer).void }
  def check_suite_id=(value); end

  sig { void }
  def clear_artifact_event_type; end

  sig { void }
  def clear_artifact_global_id; end

  sig { void }
  def clear_artifact_id; end

  sig { void }
  def clear_artifact_name; end

  sig { void }
  def clear_artifact_repository_id; end

  sig { void }
  def clear_artifact_repository_owner_id; end

  sig { void }
  def clear_artifact_repository_visibility; end

  sig { void }
  def clear_artifact_size_in_bytes; end

  sig { void }
  def clear_check_run_id; end

  sig { void }
  def clear_check_suite_id; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_expires_at; end

  sig { void }
  def clear_previously_expired_at; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def expires_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def expires_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def previously_expired_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def previously_expired_at=(value); end
end

syntax = "proto3";
package git_hub.launch.services.environment;

option go_package = "github.com/github/launch/services/deploy/environment";

import "google/protobuf/empty.proto";
import "pbtypes/github.proto";

service Environment {
    // NotifyGate receives gate created or updated events from dotcom and forwards the call to actions service
    rpc NotifyGate (NotifyGateRequest) returns (google.protobuf.Empty);

    // GetOrCreateEnvironment is used for sending environment information to Actions Service
    rpc GetOrCreateEnvironment(GetOrCreateEnvironmentRequest) returns (GetOrCreateEnvironmentResponse);
}

message NotifyGateRequest {
    pbtypes.git_hub.Identity repository_id = 1;
    string external_id = 2; // check_suite.external_id
    string external_job_id = 3; // check_run.external_id
    pbtypes.git_hub.Identity gate_id = 4;
    string token = 5;
    bool is_open = 6;
    pbtypes.git_hub.Identity check_suite_id = 7; // check_suite.id
}

message GetOrCreateEnvironmentRequest {
    string WorkflowID = 1;
    string EnvironmentName = 2;
}

message GetOrCreateEnvironmentResponse {
    pbtypes.git_hub.Identity id = 1;
    string name = 2;
    repeated Gate gates = 3;
}

message Gate {
    pbtypes.git_hub.Identity id = 1;
    string type = 2;
    int32 timeoutInMinutes = 3;
    google.protobuf.Empty state = 4;
}

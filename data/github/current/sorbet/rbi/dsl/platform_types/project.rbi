# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PlatformTypes::Project`.
# Please instead update this file by running `bin/tapioca dsl PlatformTypes::Project`.

class PlatformTypes::Project < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def activity_resource_path; end

  sig { returns(T::Boolean) }
  def activity_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def activity_url; end

  sig { returns(T::Boolean) }
  def activity_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def add_cards_link_resource_path; end

  sig { returns(T::Boolean) }
  def add_cards_link_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def add_cards_link_url; end

  sig { returns(T::Boolean) }
  def add_cards_link_url?; end

  sig { returns(PlatformTypes::TeamConnection) }
  def addable_teams_for_viewer; end

  sig { returns(T::Boolean) }
  def addable_teams_for_viewer?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def admins_settings_resource_path; end

  sig { returns(T::Boolean) }
  def admins_settings_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def admins_settings_url; end

  sig { returns(T::Boolean) }
  def admins_settings_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def archived_cards_resource_path; end

  sig { returns(T::Boolean) }
  def archived_cards_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def archived_cards_url; end

  sig { returns(T::Boolean) }
  def archived_cards_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def automation_options_resource_path; end

  sig { returns(T::Boolean) }
  def automation_options_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def automation_options_url; end

  sig { returns(T::Boolean) }
  def automation_options_url?; end

  sig { returns(T.nilable(String)) }
  def body; end

  sig { returns(T::Boolean) }
  def body?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def body_html; end

  sig { returns(T::Boolean) }
  def body_html?; end

  sig { returns(PlatformTypes::ProjectCardConnection) }
  def cards; end

  sig { returns(T::Boolean) }
  def cards?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def cards_resource_path; end

  sig { returns(T::Boolean) }
  def cards_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def cards_url; end

  sig { returns(T::Boolean) }
  def cards_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def clone_resource_path; end

  sig { returns(T::Boolean) }
  def clone_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def clone_url; end

  sig { returns(T::Boolean) }
  def clone_url?; end

  sig { returns(T::Boolean) }
  def closed; end

  sig { returns(T::Boolean) }
  def closed?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::ScalarType)) }
  def closed_at; end

  sig { returns(T::Boolean) }
  def closed_at?; end

  sig { returns(PlatformTypes::ProjectUserConnection) }
  def collaborators; end

  sig { returns(T::Boolean) }
  def collaborators?; end

  sig { returns(PlatformTypes::ProjectColumnConnection) }
  def columns; end

  sig { returns(T::Boolean) }
  def columns?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def columns_resource_path; end

  sig { returns(T::Boolean) }
  def columns_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def columns_url; end

  sig { returns(T::Boolean) }
  def columns_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def created_at; end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def creator; end

  sig { returns(T::Boolean) }
  def creator?; end

  sig { returns(T.nilable(Integer)) }
  def database_id; end

  sig { returns(T::Boolean) }
  def database_id?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def dismiss_notice_resource_path; end

  sig { returns(T::Boolean) }
  def dismiss_notice_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def dismiss_notice_url; end

  sig { returns(T::Boolean) }
  def dismiss_notice_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def edit_resource_path; end

  sig { returns(T::Boolean) }
  def edit_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def edit_url; end

  sig { returns(T::Boolean) }
  def edit_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def fullscreen_resource_path; end

  sig { returns(T::Boolean) }
  def fullscreen_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def fullscreen_url; end

  sig { returns(T::Boolean) }
  def fullscreen_url?; end

  sig { returns(T::Boolean) }
  def has_max_linked_repositories; end

  sig { returns(T::Boolean) }
  def has_max_linked_repositories?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T::Boolean) }
  def is_public; end

  sig { returns(T::Boolean) }
  def is_public?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def linkable_repositories_resource_path; end

  sig { returns(T::Boolean) }
  def linkable_repositories_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def linkable_repositories_url; end

  sig { returns(T::Boolean) }
  def linkable_repositories_url?; end

  sig { returns(T.nilable(T::Array[PlatformTypes::Repository])) }
  def linked_repositories; end

  sig { returns(T::Boolean) }
  def linked_repositories?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def linked_repositories_settings_resource_path; end

  sig { returns(T::Boolean) }
  def linked_repositories_settings_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def linked_repositories_settings_url; end

  sig { returns(T::Boolean) }
  def linked_repositories_settings_url?; end

  sig { returns(T.nilable(String)) }
  def locked_for_cloning_by; end

  sig { returns(T::Boolean) }
  def locked_for_cloning_by?; end

  sig { returns(T.nilable(String)) }
  def locked_for_resync_by; end

  sig { returns(T::Boolean) }
  def locked_for_resync_by?; end

  sig { returns(String) }
  def metadata_websocket; end

  sig { returns(T::Boolean) }
  def metadata_websocket?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def migrate_resource_path; end

  sig { returns(T::Boolean) }
  def migrate_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def migrate_url; end

  sig { returns(T::Boolean) }
  def migrate_url?; end

  sig { returns(T.nilable(String)) }
  def migration_status; end

  sig { returns(T::Boolean) }
  def migration_status?; end

  sig { returns(String) }
  def name; end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def new_workflow_resource_path; end

  sig { returns(T::Boolean) }
  def new_workflow_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def new_workflow_url; end

  sig { returns(T::Boolean) }
  def new_workflow_url?; end

  sig { returns(Integer) }
  def number; end

  sig { returns(T::Boolean) }
  def number?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def org_settings_resource_path; end

  sig { returns(T::Boolean) }
  def org_settings_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def org_settings_url; end

  sig { returns(T::Boolean) }
  def org_settings_url?; end

  sig { returns(T.nilable(String)) }
  def organization_permission; end

  sig { returns(T::Boolean) }
  def organization_permission?; end

  sig { returns(GraphQL::Client::Schema::InterfaceType) }
  def owner; end

  sig { returns(T::Boolean) }
  def owner?; end

  sig { returns(PlatformTypes::ProjectCardConnection) }
  def pending_cards; end

  sig { returns(T::Boolean) }
  def pending_cards?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def preview_note_resource_path; end

  sig { returns(T::Boolean) }
  def preview_note_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def preview_note_url; end

  sig { returns(T::Boolean) }
  def preview_note_url?; end

  sig { returns(PlatformTypes::ProjectProgress) }
  def progress; end

  sig { returns(T::Boolean) }
  def progress?; end

  sig { returns(T::Boolean) }
  def public_project_or_owner; end

  sig { returns(T::Boolean) }
  def public_project_or_owner?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def reorder_columns_resource_path; end

  sig { returns(T::Boolean) }
  def reorder_columns_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def reorder_columns_url; end

  sig { returns(T::Boolean) }
  def reorder_columns_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def resource_path; end

  sig { returns(T::Boolean) }
  def resource_path?; end

  sig { returns(T.nilable(String)) }
  def search_query_for_viewer; end

  sig { returns(T::Boolean) }
  def search_query_for_viewer?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def search_results_resource_path; end

  sig { returns(T::Boolean) }
  def search_results_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def search_results_url; end

  sig { returns(T::Boolean) }
  def search_results_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def settings_resource_path; end

  sig { returns(T::Boolean) }
  def settings_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def settings_url; end

  sig { returns(T::Boolean) }
  def settings_url?; end

  sig { returns(T.nilable(Integer)) }
  def source_id; end

  sig { returns(T::Boolean) }
  def source_id?; end

  sig { returns(T.nilable(String)) }
  def source_kind; end

  sig { returns(T::Boolean) }
  def source_kind?; end

  sig { returns(String) }
  def state; end

  sig { returns(T::Boolean) }
  def state?; end

  sig { returns(T.nilable(T::Array[PlatformTypes::Repository])) }
  def suggested_repositories_to_link; end

  sig { returns(T::Boolean) }
  def suggested_repositories_to_link?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def target_owner_results_resource_path; end

  sig { returns(T::Boolean) }
  def target_owner_results_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def target_owner_results_url; end

  sig { returns(T::Boolean) }
  def target_owner_results_url?; end

  sig { returns(PlatformTypes::ProjectTeamConnection) }
  def teams; end

  sig { returns(T::Boolean) }
  def teams?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def teams_settings_resource_path; end

  sig { returns(T::Boolean) }
  def teams_settings_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def teams_settings_team_results_resource_path; end

  sig { returns(T::Boolean) }
  def teams_settings_team_results_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def teams_settings_team_results_url; end

  sig { returns(T::Boolean) }
  def teams_settings_team_results_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def teams_settings_url; end

  sig { returns(T::Boolean) }
  def teams_settings_url?; end

  sig { returns(T::Boolean) }
  def track_progress; end

  sig { returns(T::Boolean) }
  def track_progress?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def update_state_resource_path; end

  sig { returns(T::Boolean) }
  def update_state_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def update_state_url; end

  sig { returns(T::Boolean) }
  def update_state_url?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def updated_at; end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def url; end

  sig { returns(T::Boolean) }
  def url?; end

  sig { returns(T.nilable(String)) }
  def user_permission; end

  sig { returns(T::Boolean) }
  def user_permission?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def users_settings_resource_path; end

  sig { returns(T::Boolean) }
  def users_settings_resource_path?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def users_settings_url; end

  sig { returns(T::Boolean) }
  def users_settings_url?; end

  sig { returns(PlatformTypes::UserConnection) }
  def users_with_access; end

  sig { returns(T::Boolean) }
  def users_with_access?; end

  sig { returns(T::Boolean) }
  def viewer_can_administer; end

  sig { returns(T::Boolean) }
  def viewer_can_administer?; end

  sig { returns(T::Boolean) }
  def viewer_can_close; end

  sig { returns(T::Boolean) }
  def viewer_can_close?; end

  sig { returns(T::Boolean) }
  def viewer_can_reopen; end

  sig { returns(T::Boolean) }
  def viewer_can_reopen?; end

  sig { returns(T::Boolean) }
  def viewer_can_update; end

  sig { returns(T::Boolean) }
  def viewer_can_update?; end

  sig { returns(String) }
  def websocket; end

  sig { returns(T::Boolean) }
  def websocket?; end

  sig { returns(PlatformTypes::ProjectWorkflowConnection) }
  def workflows; end

  sig { returns(T::Boolean) }
  def workflows?; end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Blackbird::Query::V2::SnippetOptions`.
# Please instead update this file by running `bin/tapioca dsl Blackbird::Query::V2::SnippetOptions`.

class Blackbird::Query::V2::SnippetOptions
  sig do
    params(
      desired_width: T.nilable(Integer),
      format: T.nilable(T.any(Symbol, Integer)),
      high_density_snippet_max_lines: T.nilable(Integer),
      max_token_count: T.nilable(Integer),
      mode: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(desired_width: nil, format: nil, high_density_snippet_max_lines: nil, max_token_count: nil, mode: nil); end

  sig { void }
  def clear_desired_width; end

  sig { void }
  def clear_format; end

  sig { void }
  def clear_high_density_snippet_max_lines; end

  sig { void }
  def clear_max_token_count; end

  sig { void }
  def clear_mode; end

  sig { returns(Integer) }
  def desired_width; end

  sig { params(value: Integer).void }
  def desired_width=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def format; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def format=(value); end

  sig { returns(Integer) }
  def high_density_snippet_max_lines; end

  sig { params(value: Integer).void }
  def high_density_snippet_max_lines=(value); end

  sig { returns(Integer) }
  def max_token_count; end

  sig { params(value: Integer).void }
  def max_token_count=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def mode; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def mode=(value); end
end

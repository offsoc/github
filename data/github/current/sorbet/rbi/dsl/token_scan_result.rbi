# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `TokenScanResult`.
# Please instead update this file by running `bin/tapioca dsl TokenScanResult`.

class TokenScanResult
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def resolutions; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def scan_scopes; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::TokenScanResult).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TokenScanResult).void)
      ).returns(::TokenScanResult)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TokenScanResult).void)
      ).returns(::TokenScanResult)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TokenScanResult).void)
      ).returns(::TokenScanResult)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TokenScanResult).void)
      ).returns(::TokenScanResult)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TokenScanResult).void)
      ).returns(::TokenScanResult)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::TokenScanResult]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::TokenScanResult)) }
    def fifth; end

    sig { returns(::TokenScanResult) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::TokenScanResult)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::TokenScanResult) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::TokenScanResult).void)
      ).returns(T.nilable(T::Enumerator[::TokenScanResult]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::TokenScanResult]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::TokenScanResult]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TokenScanResult).void)
      ).returns(::TokenScanResult)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TokenScanResult).void)
      ).returns(::TokenScanResult)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TokenScanResult).void)
      ).returns(::TokenScanResult)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::TokenScanResult)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::TokenScanResult) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::TokenScanResult) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::TokenScanResult) }
    def first!; end

    sig { returns(T.nilable(::TokenScanResult)) }
    def forty_two; end

    sig { returns(::TokenScanResult) }
    def forty_two!; end

    sig { returns(T.nilable(::TokenScanResult)) }
    def fourth; end

    sig { returns(::TokenScanResult) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::TokenScanResult) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::TokenScanResult).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TokenScanResult).void)
      ).returns(::TokenScanResult)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::TokenScanResult).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::TokenScanResult).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::TokenScanResult)) }
    def second; end

    sig { returns(::TokenScanResult) }
    def second!; end

    sig { returns(T.nilable(::TokenScanResult)) }
    def second_to_last; end

    sig { returns(::TokenScanResult) }
    def second_to_last!; end

    sig { returns(::TokenScanResult) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::TokenScanResult) }
    def take!; end

    sig { returns(T.nilable(::TokenScanResult)) }
    def third; end

    sig { returns(::TokenScanResult) }
    def third!; end

    sig { returns(T.nilable(::TokenScanResult)) }
    def third_to_last; end

    sig { returns(::TokenScanResult) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def commit!; end

    sig { returns(T::Boolean) }
    def commit?; end

    sig { void }
    def false_positive!; end

    sig { returns(T::Boolean) }
    def false_positive?; end

    sig { void }
    def hidden_by_config!; end

    sig { returns(T::Boolean) }
    def hidden_by_config?; end

    sig { void }
    def pattern_deleted!; end

    sig { returns(T::Boolean) }
    def pattern_deleted?; end

    sig { void }
    def pattern_edited!; end

    sig { returns(T::Boolean) }
    def pattern_edited?; end

    sig { void }
    def reopened!; end

    sig { returns(T::Boolean) }
    def reopened?; end

    sig { void }
    def repo!; end

    sig { returns(T::Boolean) }
    def repo?; end

    sig { void }
    def resolution_unknown!; end

    sig { returns(T::Boolean) }
    def resolution_unknown?; end

    sig { void }
    def revoked!; end

    sig { returns(T::Boolean) }
    def revoked?; end

    sig { void }
    def unknown!; end

    sig { returns(T::Boolean) }
    def unknown?; end

    sig { void }
    def used_in_tests!; end

    sig { returns(T::Boolean) }
    def used_in_tests?; end

    sig { void }
    def wont_fix!; end

    sig { returns(T::Boolean) }
    def wont_fix?; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_resolver(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_resolver(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_resolver!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def ignored_location_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ignored_location_ids=(ids); end

    # This method is created by ActiveRecord on the `TokenScanResult` class because it declared `has_many :ignored_locations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TokenScanResultLocation::PrivateCollectionProxy) }
    def ignored_locations; end

    sig { params(value: T::Enumerable[::TokenScanResultLocation]).void }
    def ignored_locations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def included_location_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def included_location_ids=(ids); end

    # This method is created by ActiveRecord on the `TokenScanResult` class because it declared `has_many :included_locations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TokenScanResultLocation::PrivateCollectionProxy) }
    def included_locations; end

    sig { params(value: T::Enumerable[::TokenScanResultLocation]).void }
    def included_locations=(value); end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::User)) }
    def reload_resolver; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    sig { returns(T.nilable(::User)) }
    def resolver; end

    sig { params(value: T.nilable(::User)).void }
    def resolver=(value); end

    sig { returns(T::Array[T.untyped]) }
    def token_scan_result_location_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def token_scan_result_location_ids=(ids); end

    # This method is created by ActiveRecord on the `TokenScanResult` class because it declared `has_many :token_scan_result_locations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TokenScanResultLocation::PrivateCollectionProxy) }
    def token_scan_result_locations; end

    sig { params(value: T::Enumerable[::TokenScanResultLocation]).void }
    def token_scan_result_locations=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def commit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def false_positive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_token_types(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def hidden_by_config(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def included(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def least_recently_updated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def most_recently_updated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_commit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_false_positive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_hidden_by_config(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pattern_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pattern_edited(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_repo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_resolution_unknown(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_revoked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unknown(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_used_in_tests(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_wont_fix(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def oldest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pattern_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pattern_edited(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def repo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def resolution_unknown(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def resolved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def resolved_count(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def revoked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unknown(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unresolved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unresolved_count(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def used_in_tests(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_first_location(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def wont_fix(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_ignored_locations; end

    sig { returns(Promise[T.untyped]) }
    def async_included_locations; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_resolver; end

    sig { returns(Promise[T.untyped]) }
    def async_token_scan_result_locations; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def bypass_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def bypass_id=(value); end

    sig { returns(T::Boolean) }
    def bypass_id?; end

    sig { returns(T.nilable(::Integer)) }
    def bypass_id_before_last_save; end

    sig { returns(T.untyped) }
    def bypass_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def bypass_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def bypass_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def bypass_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def bypass_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def bypass_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def bypass_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def bypass_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def bypass_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def bypass_id_was; end

    sig { void }
    def bypass_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def custom_pattern_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def custom_pattern_id=(value); end

    sig { returns(T::Boolean) }
    def custom_pattern_id?; end

    sig { returns(T.nilable(::Integer)) }
    def custom_pattern_id_before_last_save; end

    sig { returns(T.untyped) }
    def custom_pattern_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def custom_pattern_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def custom_pattern_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def custom_pattern_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def custom_pattern_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def custom_pattern_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def custom_pattern_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def custom_pattern_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def custom_pattern_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def custom_pattern_id_was; end

    sig { void }
    def custom_pattern_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def first_location_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def first_location_id=(value); end

    sig { returns(T::Boolean) }
    def first_location_id?; end

    sig { returns(T.nilable(::Integer)) }
    def first_location_id_before_last_save; end

    sig { returns(T.untyped) }
    def first_location_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def first_location_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def first_location_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def first_location_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def first_location_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def first_location_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def first_location_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def first_location_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def first_location_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def first_location_id_was; end

    sig { void }
    def first_location_id_will_change!; end

    sig { returns(T::Boolean) }
    def has_valid_locations; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_valid_locations=(value); end

    sig { returns(T::Boolean) }
    def has_valid_locations?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_valid_locations_before_last_save; end

    sig { returns(T.untyped) }
    def has_valid_locations_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_valid_locations_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_valid_locations_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_valid_locations_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_valid_locations_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_valid_locations_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_valid_locations_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_valid_locations_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_valid_locations_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_valid_locations_was; end

    sig { void }
    def has_valid_locations_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def internally_leaked; end

    sig { params(value: ::Integer).returns(::Integer) }
    def internally_leaked=(value); end

    sig { returns(T::Boolean) }
    def internally_leaked?; end

    sig { returns(T.nilable(::Integer)) }
    def internally_leaked_before_last_save; end

    sig { returns(T.untyped) }
    def internally_leaked_before_type_cast; end

    sig { returns(T::Boolean) }
    def internally_leaked_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def internally_leaked_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def internally_leaked_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def internally_leaked_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def internally_leaked_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def internally_leaked_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def internally_leaked_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def internally_leaked_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def internally_leaked_was; end

    sig { void }
    def internally_leaked_will_change!; end

    sig { returns(T::Boolean) }
    def low_confidence; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def low_confidence=(value); end

    sig { returns(T::Boolean) }
    def low_confidence?; end

    sig { returns(T.nilable(T::Boolean)) }
    def low_confidence_before_last_save; end

    sig { returns(T.untyped) }
    def low_confidence_before_type_cast; end

    sig { returns(T::Boolean) }
    def low_confidence_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def low_confidence_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def low_confidence_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def low_confidence_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def low_confidence_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def low_confidence_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def low_confidence_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def low_confidence_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def low_confidence_was; end

    sig { void }
    def low_confidence_will_change!; end

    sig { returns(::Integer) }
    def number; end

    sig { params(value: ::Integer).returns(::Integer) }
    def number=(value); end

    sig { returns(T::Boolean) }
    def number?; end

    sig { returns(T.nilable(::Integer)) }
    def number_before_last_save; end

    sig { returns(T.untyped) }
    def number_before_type_cast; end

    sig { returns(T::Boolean) }
    def number_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def number_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def number_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def number_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def number_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def number_was; end

    sig { void }
    def number_will_change!; end

    sig { returns(::Integer) }
    def publicly_leaked; end

    sig { params(value: ::Integer).returns(::Integer) }
    def publicly_leaked=(value); end

    sig { returns(T::Boolean) }
    def publicly_leaked?; end

    sig { returns(T.nilable(::Integer)) }
    def publicly_leaked_before_last_save; end

    sig { returns(T.untyped) }
    def publicly_leaked_before_type_cast; end

    sig { returns(T::Boolean) }
    def publicly_leaked_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def publicly_leaked_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def publicly_leaked_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def publicly_leaked_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def publicly_leaked_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def publicly_leaked_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def publicly_leaked_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def publicly_leaked_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def publicly_leaked_was; end

    sig { void }
    def publicly_leaked_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def resolution; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def resolution=(value); end

    sig { returns(T::Boolean) }
    def resolution?; end

    sig { returns(T.nilable(::String)) }
    def resolution_before_last_save; end

    sig { returns(T.untyped) }
    def resolution_before_type_cast; end

    sig { returns(T::Boolean) }
    def resolution_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def resolution_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def resolution_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def resolution_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def resolution_comment; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def resolution_comment=(value); end

    sig { returns(T::Boolean) }
    def resolution_comment?; end

    sig { returns(T.nilable(::String)) }
    def resolution_comment_before_last_save; end

    sig { returns(T.untyped) }
    def resolution_comment_before_type_cast; end

    sig { returns(T::Boolean) }
    def resolution_comment_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def resolution_comment_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def resolution_comment_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def resolution_comment_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def resolution_comment_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def resolution_comment_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def resolution_comment_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def resolution_comment_previously_was; end

    sig { returns(T.nilable(::String)) }
    def resolution_comment_was; end

    sig { void }
    def resolution_comment_will_change!; end

    sig { returns(T.nilable(::String)) }
    def resolution_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def resolution_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def resolution_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def resolution_previously_was; end

    sig { returns(T.nilable(::String)) }
    def resolution_was; end

    sig { void }
    def resolution_will_change!; end

    sig { returns(T::Boolean) }
    def resolved; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def resolved=(value); end

    sig { returns(T::Boolean) }
    def resolved?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def resolved_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def resolved_at=(value); end

    sig { returns(T::Boolean) }
    def resolved_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def resolved_at_before_last_save; end

    sig { returns(T.untyped) }
    def resolved_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def resolved_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def resolved_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def resolved_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def resolved_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def resolved_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def resolved_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def resolved_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def resolved_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def resolved_at_was; end

    sig { void }
    def resolved_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def resolved_before_last_save; end

    sig { returns(T.untyped) }
    def resolved_before_type_cast; end

    sig { returns(T::Boolean) }
    def resolved_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def resolved_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def resolved_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def resolved_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def resolved_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def resolved_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def resolved_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def resolved_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def resolved_was; end

    sig { void }
    def resolved_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def resolver_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def resolver_id=(value); end

    sig { returns(T::Boolean) }
    def resolver_id?; end

    sig { returns(T.nilable(::Integer)) }
    def resolver_id_before_last_save; end

    sig { returns(T.untyped) }
    def resolver_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def resolver_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def resolver_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def resolver_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def resolver_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def resolver_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def resolver_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def resolver_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def resolver_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def resolver_id_was; end

    sig { void }
    def resolver_id_will_change!; end

    sig { void }
    def restore_bypass_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_custom_pattern_id!; end

    sig { void }
    def restore_first_location_id!; end

    sig { void }
    def restore_has_valid_locations!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_internally_leaked!; end

    sig { void }
    def restore_low_confidence!; end

    sig { void }
    def restore_number!; end

    sig { void }
    def restore_publicly_leaked!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_resolution!; end

    sig { void }
    def restore_resolution_comment!; end

    sig { void }
    def restore_resolved!; end

    sig { void }
    def restore_resolved_at!; end

    sig { void }
    def restore_resolver_id!; end

    sig { void }
    def restore_scan_id!; end

    sig { void }
    def restore_scan_scope!; end

    sig { void }
    def restore_token_signature!; end

    sig { void }
    def restore_token_type!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_validity!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_bypass_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_bypass_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_custom_pattern_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_custom_pattern_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_first_location_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_first_location_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_valid_locations; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_valid_locations?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_internally_leaked; end

    sig { returns(T::Boolean) }
    def saved_change_to_internally_leaked?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_low_confidence; end

    sig { returns(T::Boolean) }
    def saved_change_to_low_confidence?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_number?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_publicly_leaked; end

    sig { returns(T::Boolean) }
    def saved_change_to_publicly_leaked?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_resolution; end

    sig { returns(T::Boolean) }
    def saved_change_to_resolution?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_resolution_comment; end

    sig { returns(T::Boolean) }
    def saved_change_to_resolution_comment?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_resolved; end

    sig { returns(T::Boolean) }
    def saved_change_to_resolved?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_resolved_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_resolved_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_resolver_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_resolver_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_scan_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_scan_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_scan_scope; end

    sig { returns(T::Boolean) }
    def saved_change_to_scan_scope?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_token_signature; end

    sig { returns(T::Boolean) }
    def saved_change_to_token_signature?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_token_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_token_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_validity; end

    sig { returns(T::Boolean) }
    def saved_change_to_validity?; end

    sig { returns(T.nilable(::Integer)) }
    def scan_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def scan_id=(value); end

    sig { returns(T::Boolean) }
    def scan_id?; end

    sig { returns(T.nilable(::Integer)) }
    def scan_id_before_last_save; end

    sig { returns(T.untyped) }
    def scan_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def scan_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def scan_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def scan_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def scan_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def scan_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def scan_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def scan_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def scan_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def scan_id_was; end

    sig { void }
    def scan_id_will_change!; end

    sig { returns(::String) }
    def scan_scope; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def scan_scope=(value); end

    sig { returns(T::Boolean) }
    def scan_scope?; end

    sig { returns(T.nilable(::String)) }
    def scan_scope_before_last_save; end

    sig { returns(T.untyped) }
    def scan_scope_before_type_cast; end

    sig { returns(T::Boolean) }
    def scan_scope_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def scan_scope_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def scan_scope_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def scan_scope_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def scan_scope_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def scan_scope_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def scan_scope_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def scan_scope_previously_was; end

    sig { returns(T.nilable(::String)) }
    def scan_scope_was; end

    sig { void }
    def scan_scope_will_change!; end

    sig { returns(::String) }
    def token_signature; end

    sig { params(value: ::String).returns(::String) }
    def token_signature=(value); end

    sig { returns(T::Boolean) }
    def token_signature?; end

    sig { returns(T.nilable(::String)) }
    def token_signature_before_last_save; end

    sig { returns(T.untyped) }
    def token_signature_before_type_cast; end

    sig { returns(T::Boolean) }
    def token_signature_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def token_signature_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def token_signature_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def token_signature_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def token_signature_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def token_signature_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def token_signature_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def token_signature_previously_was; end

    sig { returns(T.nilable(::String)) }
    def token_signature_was; end

    sig { void }
    def token_signature_will_change!; end

    sig { returns(::String) }
    def token_type; end

    sig { params(value: ::String).returns(::String) }
    def token_type=(value); end

    sig { returns(T::Boolean) }
    def token_type?; end

    sig { returns(T.nilable(::String)) }
    def token_type_before_last_save; end

    sig { returns(T.untyped) }
    def token_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def token_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def token_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def token_type_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def token_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def token_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def token_type_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def token_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def token_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def token_type_was; end

    sig { void }
    def token_type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def validity; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def validity=(value); end

    sig { returns(T::Boolean) }
    def validity?; end

    sig { returns(T.nilable(::Integer)) }
    def validity_before_last_save; end

    sig { returns(T.untyped) }
    def validity_before_type_cast; end

    sig { returns(T::Boolean) }
    def validity_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def validity_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def validity_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def validity_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def validity_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def validity_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def validity_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def validity_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def validity_was; end

    sig { void }
    def validity_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bypass_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_custom_pattern_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_first_location_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_valid_locations?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_internally_leaked?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_low_confidence?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_publicly_leaked?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_resolution?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_resolution_comment?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_resolved?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_resolved_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_resolver_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_scan_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_scan_scope?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_token_signature?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_token_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_validity?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def commit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def false_positive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_token_types(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def hidden_by_config(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def included(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def least_recently_updated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def most_recently_updated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_commit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_false_positive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_hidden_by_config(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pattern_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pattern_edited(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_repo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_resolution_unknown(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_revoked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unknown(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_used_in_tests(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_wont_fix(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def oldest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pattern_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pattern_edited(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def repo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def resolution_unknown(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def resolved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def resolved_count(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def revoked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unknown(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unresolved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unresolved_count(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def used_in_tests(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_first_location(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def wont_fix(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::TokenScanResult } }

    sig { returns(T::Array[::TokenScanResult]) }
    def to_a; end

    sig { returns(T::Array[::TokenScanResult]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::TokenScanResult } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::TokenScanResult } }

    sig do
      params(
        records: T.any(::TokenScanResult, T::Enumerable[T.any(::TokenScanResult, T::Enumerable[::TokenScanResult])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::TokenScanResult, T::Enumerable[T.any(::TokenScanResult, T::Enumerable[::TokenScanResult])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::TokenScanResult, T::Enumerable[T.any(::TokenScanResult, T::Enumerable[::TokenScanResult])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::TokenScanResult]) }
    def load_target; end

    sig do
      params(
        records: T.any(::TokenScanResult, T::Enumerable[T.any(::TokenScanResult, T::Enumerable[::TokenScanResult])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::TokenScanResult, T::Enumerable[T.any(::TokenScanResult, T::Enumerable[::TokenScanResult])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::TokenScanResult, T::Enumerable[T.any(::TokenScanResult, T::Enumerable[::TokenScanResult])])
      ).returns(T::Array[::TokenScanResult])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::TokenScanResult]) }
    def target; end

    sig { returns(T::Array[::TokenScanResult]) }
    def to_a; end

    sig { returns(T::Array[::TokenScanResult]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::TokenScanResult } }

    sig { returns(T::Array[::TokenScanResult]) }
    def to_a; end

    sig { returns(T::Array[::TokenScanResult]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::TokenScanResult } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

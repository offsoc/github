<%# erblint:counter DeprecatedComponentsCounter 4 %>
<% page_info title: "Features", selected_link: :features %>

<% content_for :pagehead_path do %>
  / <a href="<%= devtools_feature_flags_path %>">Feature Flags</a>
<% end %>

<% if !GitHub.flipper[:devtools_feature_flags_disabled_exclusion].enabled?(current_user) %>
  <%= render Primer::Beta::Flash.new(scheme: :default, display: :flex, mb: 3) do |component| %>
    <%= primer_octicon(:stop, mr: 2, mt: 1) %>
    <div>
      <p>The feature flag UI as part of devtools has been deprecated, please use the <a class="Link--inTextBlock" href="https://devportal.githubapp.com/feature-flags" target="_blank" rel="noopener noreferrer">devportal</a> instead.</p>
      <p>For more information about this change, see this <a class="Link--inTextBlock" href="https://gh.io/devtools-migration" target="_blank" rel="noopener noreferrer">engineering discussion</a>.</p>
    </div>
  <% end %>
<% else %>
  <%= render(Primer::Box.new(mb: 3, display: :flex, align_content: :center, flex_items: :center, justify_content: :space_between)) do %>
    <div style="flex-basis:60%">
      <%= form_with url: devtools_feature_flags_path, method: :get, class: "d-flex flex-1" do |f| %>
        <%= f.text_field :q, value: q, placeholder: "query by name, service, rollout start and/or rollout end", class: "col-12" %>
        <%= render Primer::ButtonComponent.new(type: :submit, ml: 2) do %>Search<% end %>
      <% end %>
    </div>
    <div>
      <% if GitHub.multi_tenant_enterprise? %>
        <%= render partial: 'devtools/feature_flags/action_disabled_dialog', locals: {
          title: "Action Not Allowed",
          dialog_id: "create-feature-flag-dialog",
          button_text: "New feature",
          button_scheme: :primary,
          button_size: :medium,
          dialog_message: "Creating feature flags is not allowed on proxima stamps. Please create the feature from the dotcom devtools UI."} %>

        <% else %>
          <%= render(Primer::ButtonComponent.new(tag: :a, href: new_devtools_feature_flag_path, scheme: :primary, ml: 2)) { "New feature" } %>
        <% end %>
    </div>
  <% end -%>

  <div id="features" data-hpc>
    <% if features.any? %>
      <%= render(Primer::Beta::BorderBox.new(mb: 3)) do |component| %>
        <% component.with_header(font_weight: :bold) do %>
          <%= render Primer::Box.new(display: :flex, justify_content: :space_between, align_items: :center) do %>
            <%= render Primer::Box.new do %>
              Features <%= render(Primer::Beta::Counter.new(count: features.total_entries, scheme: :primary)) %>
            <% end %>

            <%= render Primer::Box.new(display: :flex, align_items: :center) do %>
              <%= render(GitHub::MenuComponent.new(
                title: "Services",
                filterable: true,
                items: services.map do |service|
                  GitHub::Menu::LinkComponent.new(text: service, href: devtools_feature_flags_path(q: "#{params[:q]} service:#{service}"))
                end
              )) %>

              <%= render(GitHub::MenuComponent.new(
                title: "Sort",
                items: [
                  GitHub::Menu::LinkComponent.new(text: "alphabetically", href: devtools_feature_flags_path(q: "#{params[:q]} sort:name-asc")),
                  GitHub::Menu::LinkComponent.new(text: "rolled out recently", href: devtools_feature_flags_path(q: "#{params[:q]} sort:rollout-desc")),
                  GitHub::Menu::LinkComponent.new(text: "rolled out last hour", href: devtools_feature_flags_path(q: "#{params[:q]} starts:#{Time.current - 1.hour}")),
                  GitHub::Menu::LinkComponent.new(text: "newest", href: devtools_feature_flags_path(q: "#{params[:q]} sort:created_at-desc")),
                  GitHub::Menu::LinkComponent.new(text: "oldest", href: devtools_feature_flags_path(q: "#{params[:q]} sort:created_at-asc")),
                ]
              )) %>
            <% end %>
          <% end %>
        <% end %>

        <% features.each do |feature| %>
          <% component.with_row(test_selector: dom_id(feature), py: 2, display: :flex, justify_content: :space_between, align_items: :center) do %>
            <div class="d-flex flex-column">
              <div>
                <%= render(Primer::Beta::Link.new(href: devtools_feature_flag_path(feature.name), scheme: :primary, font_weight: :bold, font_size: 4)) do %>
                  <%= feature.name %>
                <% end %>
                <% if feature.long_lived? %>
                  <%= render(Primer::Beta::Link.new(href: "https://thehub.github.com/engineering/products-and-services/dotcom/features/feature-flags/overview/#long-lived-feature-flags", target: "_blank", underline: false)) do %>
                    <%= render Primer::Beta::Label.new(scheme: :info, variant: :inline, ml: 1) do %>
                      long lived
                    <% end %>
                  <% end %>
                <% end %>
                <% if feature.big_feature? %>
                  <%= render(Primer::Beta::Link.new(href: "https://thehub.github.com/epd/engineering/products-and-services/dotcom/features/feature-flags/big-features/", target: "_blank", underline: false)) do %>
                    <%= render Primer::Beta::Label.new(scheme: :orange, variant: :inline, ml: 1) do %>
                      big feature
                    <% end %>
                  <% end %>
                <% end %>
              </div>
              <div class="d-flex" style="gap: 8px;">
                <div>
                  <%= render(Primer::Beta::Link.new(href: devtools_feature_flags_path(q: "#{params[:q]} service:#{feature.service_name}"), muted: true)) do %>
                    <%= render(Primer::Beta::Octicon.new(:organization)) %> <%= feature.short_service_name %>
                  <% end if feature.service_name %>
                </div>
                <div>
                  <%= render(Primer::Beta::Link.new(href: "https://app.datadoghq.com/dashboard/rc6-kc7-y2u/feature-flag-results-per-flag?tpl_var_feature_flag=#{feature.name}", muted: true, target: "_blank")) do %>
                    <%= render(Primer::Beta::Octicon.new(:pulse)) %> metrics
                  <% end %>
                </div>
                <div>
                  <%= render(Primer::Beta::Link.new(href: feature.tracking_issue_url, muted: true, target: "_blank")) do %>
                    <%= render(Primer::Beta::Octicon.new(:"issue-opened")) %> <%= feature.short_tracking_issue_url.truncate(50) %>
                  <% end if feature.tracking_issue_url %>
                </div>
              </div>
            </div>
            <div class="color-fg-muted">
              <%= render(FlipperFeatures::GateLabelComponent.new(feature: feature)) %>
              <% if feature.rollout_updated_at %>
                <%= render(Primer::Beta::Link.new(href: devtools_feature_flags_path(q: "#{params[:q]} starts:\"#{feature.rollout_updated_at.to_formatted_s(:db)}\""), scheme: :primary, muted: true)) do %>
                  <%= render(Primer::Beta::Octicon.new(:clock)) %> <%= render(Primer::Beta::RelativeTime.new(datetime: feature.rollout_updated_at, tense: :past)) %>
                <% end %>
              <% end %>
            </div>
          <% end %>
        <% end %>
      <% end %>

      <div class="mb-3 text-center">
        <%= will_paginate features %>
      </div>
    <% elsif features.empty? && q.present? %>
      <div <%= test_selector("no-feature-flag-results") %>>
        <%= render Primer::Beta::Blankslate.new do |c| %>
          <% c.with_visual_icon(icon: :"circle-slash") %>
          <% c.with_heading(tag: :h2).with_content("No feature flag matches") %>
          <% c.with_description do  %>
            No flags match: <code><%= q %></code>. <a class="Link--inTextBlock" href="<%= devtools_feature_flags_path %>">View all features</a>.
          <% end %>
        <% end %>
      </div>
    <% else %>
      <%= render Primer::BlankslateComponent.new(
        icon: "squirrel",
        title: "Welcome to Features!",
        large: true,
        spacious: true,
      ) do %>
        <p>Feature flags help manage code rollout. <a class="Link--inTextBlock" href="https://thehub.github.com/engineering/development-and-ops/dotcom/feature-flags/overview/">Read the docs</a> or <a class="Link--inTextBlock" href="<%= new_devtools_feature_flag_path %>">add a new feature</a>.</p>

        <code class="d-block">
          $ bin/toggle-feature-flag enable security_dashboard
        </code>
      <% end %>
    <% end %>
  </div>

  <%= render(Primer::Beta::BorderBox.new(mb: 3)) do |c| %>
    <% c.with_header(font_weight: :bold) { "Additional Tools" } %>
    <% c.with_row do %>
      <p class="my-0">
        <%= primer_octicon(:question) %> Want more info on how the search/filter works on this page?
      </p>
      <p class="my-0">
        <%= render Primer::Beta::Details.new do |c| %>
          <% c.with_summary(button: false) do %>
            Expand to learn more
          <% end %>
          <% c.with_body do %>
            You may search by name or description. You may also filter with the following qualifiers.
            <ul>
              <li>
                <code>service:</code> example
                <%= render(Primer::Beta::Link.new(href: devtools_feature_flags_path(q: "service:github/issues"), classes: "Link--inTextBlock")) do %>
                  <code>service:github/issues</code>
                <% end %> &mdash; shows flags maintained by a fuzzy match of the provided service.
              </li>
              <li>
                <code>starts:</code> example
                <%= render(Primer::Beta::Link.new(href: devtools_feature_flags_path(q: "starts:2018-01-01"), classes: "Link--inTextBlock")) do %>
                  <code>starts:2018-01-01</code>
                <% end %> &mdash; shows flags whose rollout has changed after the provided date.
              </li>
              <li>
                <code>ends:</code> example
                <%= render(Primer::Beta::Link.new(href: devtools_feature_flags_path(q: "ends:2018-01-01"), classes: "Link--inTextBlock")) do %>
                  <code>ends:2018-01-01</code>
                <% end %> &mdash; shows flags whose rollout has changed before the provided date.
              </li>
              <li>
                <code>sort:</code> example
                <%= render(Primer::Beta::Link.new(href: devtools_feature_flags_path(q: "sort:created_at-asc"), classes: "Link--inTextBlock")) do %>
                  <code>sort:created_at-asc</code>
                <% end %> &mdash; orders flags by the attribute and direction provided.
              </li>
            </ul>
          <% end %>
        <% end %>
      </p>
    <% end %>

    <% c.with_row do %>
      <p class="my-0">
        <%= primer_octicon(:cpu) %> Are you working on the in-memory adapter for feature flags? Check out the <%= render(Primer::Beta::Link.new(href: in_memory_devtools_feature_flags_url, classes: "Link--inTextBlock")) { "in-memory adapter admin page" } %>.
      </p>
    <% end %>
  <% end %>
<% end %>

<%= render(Primer::Beta::BorderBox.new(mb: 3)) do |c| %>
  <% c.with_header(font_weight: :bold) { "Admin Tools" } %>

  <% c.with_row do %>
    <%= form_tag devtools_synchronize_actors_path, method: :post, class: "inline-form" do %>
      <h3 class="h5">Bulk Synchronize Actors</h3>
      <p>Causes all actors on feature changed since the start date specified to be sent to the feature flag hub.</p>
      <div class="d-flex">
        <div class="pr-2">
          <%= render(
            Primer::Alpha::TextField.new(
              name: :start_date,
              label: "Start Date",
              placeholder: "DD/MM/YYYY",
              size: :normal,
              leading_visual: {
                icon: :calendar
              },
            )
          ) %>
        </div>
        <div class="d-flex flex-column-reverse">
            <%= render(Primer::Beta::Button.new(type: :submit, scheme: :danger, align_content: :center)) { "Batch Import" } %>
        </div>
      </div>
    <% end %>
  <% end %>

  <% c.with_row do %>
    <div class="d-flex">
      <div class="flex-1">
        <h3 class="h5">Enable/Disable MySQL Flipper Adapter Forwarder</h3>
        <p>Enables changes made by MySQL flipper adapter to be forwarded to the feature flag hub.</p>
      </div>

      <%= form_tag devtools_toggle_mysql_flipper_forwarder_enabled_path, method: :post, class: "inline-form" do %>
        <div class="d-flex flex-column-reverse">
          <% if mysql_flipper_forwarder_enabled %>
            <%= render(Primer::Beta::Button.new(type: :submit, scheme: :danger, align_content: :center)) { "Disable" } %>
          <% else %>
            <%= render(Primer::Beta::Button.new(type: :submit, scheme: :primary, align_content: :center)) { "Enable" } %>
          <% end %>
        </div>
      <% end %>
    </div>
  <% end %>

<% end %>

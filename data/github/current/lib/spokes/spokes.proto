syntax = "proto3";
package spokes;

option go_package = "services/spokes";

service Spokes {
  rpc Status(StatusRequest) returns (StatusResponse) {}
  rpc PickFileServers(PickFileServersRequest) returns (PickFileServersResponse) {}
  rpc AllRepoReplicas(AllRepoReplicasRequest) returns (AllRepoReplicasResponse) {}
}

message Repository {
  string nwo = 1;
  enum RepositoryType {
    UNKNOWN = 0;
    REPO = 1;
    WIKI = 2;
    GIST = 3;
    NETWORK = 4;
  }
  RepositoryType type = 2;
  int64 repositoryId = 3;
  int64 networkId = 4;
}

message StatusRequest {
  Repository repository = 1;
}

message StatusResponse {
  bool available = 1;
}

message FileServer {
  // NOTE: It seems like long term it wouldn't be wise to expose this much
  // internal data about a fileserver to spokesd clients. However, it's also
  // possible that longer term it will never make sense to return *any*
  // information about a FileServer to clients so in our ideal world, this
  // message will eventually go away.

  // These fields are necessary to build a ruby-side GitHub::DGit::FileServer
  //    def initialize(name:, ip:, fqdn:, datacenter:, rack:, online:, embargoed:, evacuating:, voting:, hdd_storage:, cache_location:)

  string name = 1;
  string ip = 2;
  string datacenter = 3;
  string rack = 4;

  bool voting = 5;
  bool hddStorage = 6;

  bool online = 7;
  bool embargoed = 8;
  bool evacuating = 9;
  string fqdn = 10;
  string cacheLocation = 11;

  // Unreachable indicates whether the fileserver is not reachable from spokesd.
  bool unreachable = 12;

  // Overloaded indicates that a fileserver's loadavg is over the overload threshold.
  bool overloaded = 13;
}

message Replica {
  // NOTE: It seems like long term it wouldn't be wise to expose this much
  // internal data about a repository replica to spokesd clients. However, it's also
  // possible that longer term it will never make sense to return *any*
  // information about a Repository to clients so in our ideal world, this
  // message will eventually go away.

  // These fields are necessary to build a ruby-side GitHub::DGit::Repository
  //     def initialize(db_name:, fileserver:, read_weight:, quiescing:, state:, created_at:, updated_at:)
  string db_name = 1;
  FileServer file_server = 2;
  bool quiescing = 3;
  int64 read_weight = 4;
  int64 replica_state = 5;
  string checksum = 6;
  string expected_checksum = 7;
  int64 created_at = 8;
  int64 updated_at = 9;
  int64 network_replica_id = 10;
}

// Pick a set of file servers where a repository can be placed, based
// on the placement policy set in the SPOKESD_STORAGE_POLICY
// environment variable.  Defaults to the production storage policy.
message PickFileServersRequest {}

message PickFileServersResponse {
  repeated FileServer file_server = 1;
}

message AllRepoReplicasRequest {
  Repository repository = 1;
  string preferred_dc = 2;
}

message AllRepoReplicasResponse {
  repeated Replica replicas = 1;
}

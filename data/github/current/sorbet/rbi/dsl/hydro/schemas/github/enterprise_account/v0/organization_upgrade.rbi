# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::EnterpriseAccount::V0::OrganizationUpgrade`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::EnterpriseAccount::V0::OrganizationUpgrade`.

class Hydro::Schemas::Github::EnterpriseAccount::V0::OrganizationUpgrade
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      billing_type: T.nilable(String),
      coupon_code: T.nilable(String),
      coupon_transfer_attempted: T.nilable(T::Boolean),
      coupon_transfer_succeeded: T.nilable(T::Boolean),
      enterprise: T.nilable(Hydro::Schemas::Github::V1::Entities::Business),
      marketplace_subscription: T.nilable(T::Boolean),
      organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      organization_previous_customer_id: T.nilable(Integer),
      organization_previous_plan: T.nilable(String),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      status: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(actor: nil, billing_type: nil, coupon_code: nil, coupon_transfer_attempted: nil, coupon_transfer_succeeded: nil, enterprise: nil, marketplace_subscription: nil, organization: nil, organization_previous_customer_id: nil, organization_previous_plan: nil, request_context: nil, status: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def billing_type; end

  sig { params(value: String).void }
  def billing_type=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_billing_type; end

  sig { void }
  def clear_coupon_code; end

  sig { void }
  def clear_coupon_transfer_attempted; end

  sig { void }
  def clear_coupon_transfer_succeeded; end

  sig { void }
  def clear_enterprise; end

  sig { void }
  def clear_marketplace_subscription; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_organization_previous_customer_id; end

  sig { void }
  def clear_organization_previous_plan; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_status; end

  sig { returns(String) }
  def coupon_code; end

  sig { params(value: String).void }
  def coupon_code=(value); end

  sig { returns(T::Boolean) }
  def coupon_transfer_attempted; end

  sig { params(value: T::Boolean).void }
  def coupon_transfer_attempted=(value); end

  sig { returns(T::Boolean) }
  def coupon_transfer_succeeded; end

  sig { params(value: T::Boolean).void }
  def coupon_transfer_succeeded=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Business)) }
  def enterprise; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Business)).void }
  def enterprise=(value); end

  sig { returns(T::Boolean) }
  def marketplace_subscription; end

  sig { params(value: T::Boolean).void }
  def marketplace_subscription=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def organization=(value); end

  sig { returns(Integer) }
  def organization_previous_customer_id; end

  sig { params(value: Integer).void }
  def organization_previous_customer_id=(value); end

  sig { returns(String) }
  def organization_previous_plan; end

  sig { params(value: String).void }
  def organization_previous_plan=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `UserMetadata`.
# Please instead update this file by running `bin/tapioca dsl UserMetadata`.

class UserMetadata
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::UserMetadata).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::UserMetadata).void)
      ).returns(::UserMetadata)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::UserMetadata).void)
      ).returns(::UserMetadata)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::UserMetadata).void)
      ).returns(::UserMetadata)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::UserMetadata).void)
      ).returns(::UserMetadata)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::UserMetadata).void)
      ).returns(::UserMetadata)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::UserMetadata]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::UserMetadata)) }
    def fifth; end

    sig { returns(::UserMetadata) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::UserMetadata)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::UserMetadata) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::UserMetadata).void)
      ).returns(T.nilable(T::Enumerator[::UserMetadata]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::UserMetadata]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::UserMetadata]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::UserMetadata).void)
      ).returns(::UserMetadata)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::UserMetadata).void)
      ).returns(::UserMetadata)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::UserMetadata).void)
      ).returns(::UserMetadata)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::UserMetadata)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::UserMetadata) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::UserMetadata) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::UserMetadata) }
    def first!; end

    sig { returns(T.nilable(::UserMetadata)) }
    def forty_two; end

    sig { returns(::UserMetadata) }
    def forty_two!; end

    sig { returns(T.nilable(::UserMetadata)) }
    def fourth; end

    sig { returns(::UserMetadata) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::UserMetadata) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::UserMetadata).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::UserMetadata).void)
      ).returns(::UserMetadata)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::UserMetadata).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::UserMetadata).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::UserMetadata)) }
    def second; end

    sig { returns(::UserMetadata) }
    def second!; end

    sig { returns(T.nilable(::UserMetadata)) }
    def second_to_last; end

    sig { returns(::UserMetadata) }
    def second_to_last!; end

    sig { returns(::UserMetadata) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::UserMetadata) }
    def take!; end

    sig { returns(T.nilable(::UserMetadata)) }
    def third; end

    sig { returns(::UserMetadata) }
    def third!; end

    sig { returns(T.nilable(::UserMetadata)) }
    def third_to_last; end

    sig { returns(::UserMetadata) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_user; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def achievement_private_slugs; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def achievement_private_slugs=(value); end

    sig { returns(T::Boolean) }
    def achievement_private_slugs?; end

    sig { returns(T.nilable(::String)) }
    def achievement_private_slugs_before_last_save; end

    sig { returns(T.untyped) }
    def achievement_private_slugs_before_type_cast; end

    sig { returns(T::Boolean) }
    def achievement_private_slugs_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def achievement_private_slugs_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def achievement_private_slugs_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def achievement_private_slugs_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def achievement_private_slugs_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def achievement_private_slugs_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def achievement_private_slugs_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def achievement_private_slugs_previously_was; end

    sig { returns(T.nilable(::String)) }
    def achievement_private_slugs_was; end

    sig { void }
    def achievement_private_slugs_will_change!; end

    sig { returns(T.nilable(::String)) }
    def achievement_public_slugs; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def achievement_public_slugs=(value); end

    sig { returns(T::Boolean) }
    def achievement_public_slugs?; end

    sig { returns(T.nilable(::String)) }
    def achievement_public_slugs_before_last_save; end

    sig { returns(T.untyped) }
    def achievement_public_slugs_before_type_cast; end

    sig { returns(T::Boolean) }
    def achievement_public_slugs_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def achievement_public_slugs_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def achievement_public_slugs_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def achievement_public_slugs_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def achievement_public_slugs_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def achievement_public_slugs_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def achievement_public_slugs_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def achievement_public_slugs_previously_was; end

    sig { returns(T.nilable(::String)) }
    def achievement_public_slugs_was; end

    sig { void }
    def achievement_public_slugs_will_change!; end

    sig { returns(::Integer) }
    def achievements_private_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def achievements_private_count=(value); end

    sig { returns(T::Boolean) }
    def achievements_private_count?; end

    sig { returns(T.nilable(::Integer)) }
    def achievements_private_count_before_last_save; end

    sig { returns(T.untyped) }
    def achievements_private_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def achievements_private_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def achievements_private_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def achievements_private_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def achievements_private_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def achievements_private_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def achievements_private_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def achievements_private_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def achievements_private_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def achievements_private_count_was; end

    sig { void }
    def achievements_private_count_will_change!; end

    sig { returns(::Integer) }
    def achievements_public_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def achievements_public_count=(value); end

    sig { returns(T::Boolean) }
    def achievements_public_count?; end

    sig { returns(T.nilable(::Integer)) }
    def achievements_public_count_before_last_save; end

    sig { returns(T.untyped) }
    def achievements_public_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def achievements_public_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def achievements_public_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def achievements_public_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def achievements_public_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def achievements_public_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def achievements_public_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def achievements_public_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def achievements_public_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def achievements_public_count_was; end

    sig { void }
    def achievements_public_count_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def discussion_answered_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def discussion_answered_count=(value); end

    sig { returns(T::Boolean) }
    def discussion_answered_count?; end

    sig { returns(T.nilable(::Integer)) }
    def discussion_answered_count_before_last_save; end

    sig { returns(T.untyped) }
    def discussion_answered_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def discussion_answered_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def discussion_answered_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def discussion_answered_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def discussion_answered_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def discussion_answered_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def discussion_answered_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def discussion_answered_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def discussion_answered_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def discussion_answered_count_was; end

    sig { void }
    def discussion_answered_count_will_change!; end

    sig { returns(::Integer) }
    def discussion_answered_public_and_private_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def discussion_answered_public_and_private_count=(value); end

    sig { returns(T::Boolean) }
    def discussion_answered_public_and_private_count?; end

    sig { returns(T.nilable(::Integer)) }
    def discussion_answered_public_and_private_count_before_last_save; end

    sig { returns(T.untyped) }
    def discussion_answered_public_and_private_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def discussion_answered_public_and_private_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def discussion_answered_public_and_private_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def discussion_answered_public_and_private_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def discussion_answered_public_and_private_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def discussion_answered_public_and_private_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def discussion_answered_public_and_private_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def discussion_answered_public_and_private_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def discussion_answered_public_and_private_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def discussion_answered_public_and_private_count_was; end

    sig { void }
    def discussion_answered_public_and_private_count_will_change!; end

    sig { returns(::Integer) }
    def followers_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def followers_count=(value); end

    sig { returns(T::Boolean) }
    def followers_count?; end

    sig { returns(T.nilable(::Integer)) }
    def followers_count_before_last_save; end

    sig { returns(T.untyped) }
    def followers_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def followers_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def followers_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def followers_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def followers_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def followers_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def followers_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def followers_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def followers_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def followers_count_was; end

    sig { void }
    def followers_count_will_change!; end

    sig { returns(::Integer) }
    def following_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def following_count=(value); end

    sig { returns(T::Boolean) }
    def following_count?; end

    sig { returns(T.nilable(::Integer)) }
    def following_count_before_last_save; end

    sig { returns(T.untyped) }
    def following_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def following_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def following_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def following_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def following_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def following_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def following_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def following_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def following_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def following_count_was; end

    sig { void }
    def following_count_will_change!; end

    sig { returns(::Integer) }
    def global_advisory_credit_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def global_advisory_credit_count=(value); end

    sig { returns(T::Boolean) }
    def global_advisory_credit_count?; end

    sig { returns(T.nilable(::Integer)) }
    def global_advisory_credit_count_before_last_save; end

    sig { returns(T.untyped) }
    def global_advisory_credit_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def global_advisory_credit_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def global_advisory_credit_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def global_advisory_credit_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def global_advisory_credit_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def global_advisory_credit_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def global_advisory_credit_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def global_advisory_credit_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def global_advisory_credit_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def global_advisory_credit_count_was; end

    sig { void }
    def global_advisory_credit_count_will_change!; end

    sig { returns(T::Boolean) }
    def has_acv_badge; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_acv_badge=(value); end

    sig { returns(T::Boolean) }
    def has_acv_badge?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_acv_badge_before_last_save; end

    sig { returns(T.untyped) }
    def has_acv_badge_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_acv_badge_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_acv_badge_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_acv_badge_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_acv_badge_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_acv_badge_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_acv_badge_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_acv_badge_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_acv_badge_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_acv_badge_was; end

    sig { void }
    def has_acv_badge_will_change!; end

    sig { returns(T::Boolean) }
    def has_nasa_badge; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_nasa_badge=(value); end

    sig { returns(T::Boolean) }
    def has_nasa_badge?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_nasa_badge_before_last_save; end

    sig { returns(T.untyped) }
    def has_nasa_badge_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_nasa_badge_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_nasa_badge_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_nasa_badge_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_nasa_badge_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_nasa_badge_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_nasa_badge_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_nasa_badge_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_nasa_badge_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_nasa_badge_was; end

    sig { void }
    def has_nasa_badge_will_change!; end

    sig { returns(T::Boolean) }
    def has_orcid_record; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_orcid_record=(value); end

    sig { returns(T::Boolean) }
    def has_orcid_record?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_orcid_record_before_last_save; end

    sig { returns(T.untyped) }
    def has_orcid_record_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_orcid_record_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_orcid_record_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_orcid_record_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_orcid_record_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_orcid_record_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_orcid_record_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_orcid_record_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_orcid_record_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_orcid_record_was; end

    sig { void }
    def has_orcid_record_will_change!; end

    sig { returns(T::Boolean) }
    def has_pro_badge; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_pro_badge=(value); end

    sig { returns(T::Boolean) }
    def has_pro_badge?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_pro_badge_before_last_save; end

    sig { returns(T.untyped) }
    def has_pro_badge_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_pro_badge_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_pro_badge_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_pro_badge_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_pro_badge_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_pro_badge_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_pro_badge_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_pro_badge_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_pro_badge_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_pro_badge_was; end

    sig { void }
    def has_pro_badge_will_change!; end

    sig { returns(T::Boolean) }
    def has_sponsoring_badge; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_sponsoring_badge=(value); end

    sig { returns(T::Boolean) }
    def has_sponsoring_badge?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_sponsoring_badge_before_last_save; end

    sig { returns(T.untyped) }
    def has_sponsoring_badge_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_sponsoring_badge_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_sponsoring_badge_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_sponsoring_badge_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_sponsoring_badge_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_sponsoring_badge_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_sponsoring_badge_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_sponsoring_badge_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_sponsoring_badge_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_sponsoring_badge_was; end

    sig { void }
    def has_sponsoring_badge_will_change!; end

    sig { returns(T::Boolean) }
    def has_unseen_private_achievement; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_unseen_private_achievement=(value); end

    sig { returns(T::Boolean) }
    def has_unseen_private_achievement?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_unseen_private_achievement_before_last_save; end

    sig { returns(T.untyped) }
    def has_unseen_private_achievement_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_unseen_private_achievement_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_unseen_private_achievement_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_unseen_private_achievement_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_unseen_private_achievement_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_unseen_private_achievement_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_unseen_private_achievement_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_unseen_private_achievement_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_unseen_private_achievement_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_unseen_private_achievement_was; end

    sig { void }
    def has_unseen_private_achievement_will_change!; end

    sig { returns(T::Boolean) }
    def has_unseen_public_achievement; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_unseen_public_achievement=(value); end

    sig { returns(T::Boolean) }
    def has_unseen_public_achievement?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_unseen_public_achievement_before_last_save; end

    sig { returns(T.untyped) }
    def has_unseen_public_achievement_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_unseen_public_achievement_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_unseen_public_achievement_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_unseen_public_achievement_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_unseen_public_achievement_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_unseen_public_achievement_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_unseen_public_achievement_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_unseen_public_achievement_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_unseen_public_achievement_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_unseen_public_achievement_was; end

    sig { void }
    def has_unseen_public_achievement_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def inactive_sponsoring_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def inactive_sponsoring_count=(value); end

    sig { returns(T::Boolean) }
    def inactive_sponsoring_count?; end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsoring_count_before_last_save; end

    sig { returns(T.untyped) }
    def inactive_sponsoring_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def inactive_sponsoring_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def inactive_sponsoring_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def inactive_sponsoring_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def inactive_sponsoring_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsoring_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def inactive_sponsoring_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def inactive_sponsoring_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsoring_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsoring_count_was; end

    sig { void }
    def inactive_sponsoring_count_will_change!; end

    sig { returns(::Integer) }
    def inactive_sponsoring_public_and_private_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def inactive_sponsoring_public_and_private_count=(value); end

    sig { returns(T::Boolean) }
    def inactive_sponsoring_public_and_private_count?; end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsoring_public_and_private_count_before_last_save; end

    sig { returns(T.untyped) }
    def inactive_sponsoring_public_and_private_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def inactive_sponsoring_public_and_private_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def inactive_sponsoring_public_and_private_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def inactive_sponsoring_public_and_private_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def inactive_sponsoring_public_and_private_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsoring_public_and_private_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def inactive_sponsoring_public_and_private_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def inactive_sponsoring_public_and_private_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsoring_public_and_private_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsoring_public_and_private_count_was; end

    sig { void }
    def inactive_sponsoring_public_and_private_count_will_change!; end

    sig { returns(::Integer) }
    def inactive_sponsors_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def inactive_sponsors_count=(value); end

    sig { returns(T::Boolean) }
    def inactive_sponsors_count?; end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsors_count_before_last_save; end

    sig { returns(T.untyped) }
    def inactive_sponsors_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def inactive_sponsors_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def inactive_sponsors_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def inactive_sponsors_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def inactive_sponsors_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsors_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def inactive_sponsors_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def inactive_sponsors_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsors_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsors_count_was; end

    sig { void }
    def inactive_sponsors_count_will_change!; end

    sig { returns(::Integer) }
    def inactive_sponsors_public_and_private_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def inactive_sponsors_public_and_private_count=(value); end

    sig { returns(T::Boolean) }
    def inactive_sponsors_public_and_private_count?; end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsors_public_and_private_count_before_last_save; end

    sig { returns(T.untyped) }
    def inactive_sponsors_public_and_private_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def inactive_sponsors_public_and_private_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def inactive_sponsors_public_and_private_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def inactive_sponsors_public_and_private_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def inactive_sponsors_public_and_private_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsors_public_and_private_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def inactive_sponsors_public_and_private_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def inactive_sponsors_public_and_private_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsors_public_and_private_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def inactive_sponsors_public_and_private_count_was; end

    sig { void }
    def inactive_sponsors_public_and_private_count_will_change!; end

    sig { returns(T::Boolean) }
    def is_bounty_hunter; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def is_bounty_hunter=(value); end

    sig { returns(T::Boolean) }
    def is_bounty_hunter?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_bounty_hunter_before_last_save; end

    sig { returns(T.untyped) }
    def is_bounty_hunter_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_bounty_hunter_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_bounty_hunter_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_bounty_hunter_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_bounty_hunter_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_bounty_hunter_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_bounty_hunter_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_bounty_hunter_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_bounty_hunter_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_bounty_hunter_was; end

    sig { void }
    def is_bounty_hunter_will_change!; end

    sig { returns(T::Boolean) }
    def is_campus_expert; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def is_campus_expert=(value); end

    sig { returns(T::Boolean) }
    def is_campus_expert?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_campus_expert_before_last_save; end

    sig { returns(T.untyped) }
    def is_campus_expert_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_campus_expert_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_campus_expert_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_campus_expert_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_campus_expert_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_campus_expert_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_campus_expert_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_campus_expert_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_campus_expert_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_campus_expert_was; end

    sig { void }
    def is_campus_expert_will_change!; end

    sig { returns(T::Boolean) }
    def is_developer_program_member; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def is_developer_program_member=(value); end

    sig { returns(T::Boolean) }
    def is_developer_program_member?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_developer_program_member_before_last_save; end

    sig { returns(T.untyped) }
    def is_developer_program_member_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_developer_program_member_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_developer_program_member_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_developer_program_member_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_developer_program_member_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_developer_program_member_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_developer_program_member_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_developer_program_member_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_developer_program_member_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_developer_program_member_was; end

    sig { void }
    def is_developer_program_member_will_change!; end

    sig { returns(T::Boolean) }
    def is_github_star; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def is_github_star=(value); end

    sig { returns(T::Boolean) }
    def is_github_star?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_github_star_before_last_save; end

    sig { returns(T.untyped) }
    def is_github_star_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_github_star_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_github_star_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_github_star_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_github_star_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_github_star_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_github_star_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_github_star_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_github_star_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_github_star_was; end

    sig { void }
    def is_github_star_will_change!; end

    sig { returns(T::Boolean) }
    def is_staff; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def is_staff=(value); end

    sig { returns(T::Boolean) }
    def is_staff?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_staff_before_last_save; end

    sig { returns(T.untyped) }
    def is_staff_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_staff_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_staff_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_staff_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_staff_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_staff_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_staff_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def is_staff_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_staff_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_staff_was; end

    sig { void }
    def is_staff_will_change!; end

    sig { returns(::Integer) }
    def packages_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def packages_count=(value); end

    sig { returns(T::Boolean) }
    def packages_count?; end

    sig { returns(T.nilable(::Integer)) }
    def packages_count_before_last_save; end

    sig { returns(T.untyped) }
    def packages_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def packages_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def packages_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def packages_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def packages_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def packages_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def packages_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def packages_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def packages_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def packages_count_was; end

    sig { void }
    def packages_count_will_change!; end

    sig { returns(::Integer) }
    def packages_public_and_private_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def packages_public_and_private_count=(value); end

    sig { returns(T::Boolean) }
    def packages_public_and_private_count?; end

    sig { returns(T.nilable(::Integer)) }
    def packages_public_and_private_count_before_last_save; end

    sig { returns(T.untyped) }
    def packages_public_and_private_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def packages_public_and_private_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def packages_public_and_private_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def packages_public_and_private_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def packages_public_and_private_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def packages_public_and_private_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def packages_public_and_private_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def packages_public_and_private_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def packages_public_and_private_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def packages_public_and_private_count_was; end

    sig { void }
    def packages_public_and_private_count_will_change!; end

    sig { returns(::Integer) }
    def projects_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def projects_count=(value); end

    sig { returns(T::Boolean) }
    def projects_count?; end

    sig { returns(T.nilable(::Integer)) }
    def projects_count_before_last_save; end

    sig { returns(T.untyped) }
    def projects_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def projects_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def projects_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def projects_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def projects_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def projects_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def projects_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def projects_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def projects_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def projects_count_was; end

    sig { void }
    def projects_count_will_change!; end

    sig { returns(::Integer) }
    def projects_public_and_private_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def projects_public_and_private_count=(value); end

    sig { returns(T::Boolean) }
    def projects_public_and_private_count?; end

    sig { returns(T.nilable(::Integer)) }
    def projects_public_and_private_count_before_last_save; end

    sig { returns(T.untyped) }
    def projects_public_and_private_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def projects_public_and_private_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def projects_public_and_private_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def projects_public_and_private_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def projects_public_and_private_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def projects_public_and_private_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def projects_public_and_private_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def projects_public_and_private_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def projects_public_and_private_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def projects_public_and_private_count_was; end

    sig { void }
    def projects_public_and_private_count_will_change!; end

    sig { returns(::Integer) }
    def repository_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_count=(value); end

    sig { returns(T::Boolean) }
    def repository_count?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_count_before_last_save; end

    sig { returns(T.untyped) }
    def repository_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_count_was; end

    sig { void }
    def repository_count_will_change!; end

    sig { returns(::Integer) }
    def repository_public_and_private_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_public_and_private_count=(value); end

    sig { returns(T::Boolean) }
    def repository_public_and_private_count?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_public_and_private_count_before_last_save; end

    sig { returns(T.untyped) }
    def repository_public_and_private_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_public_and_private_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_public_and_private_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_public_and_private_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_public_and_private_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_public_and_private_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_public_and_private_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_public_and_private_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_public_and_private_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_public_and_private_count_was; end

    sig { void }
    def repository_public_and_private_count_will_change!; end

    sig { void }
    def restore_achievement_private_slugs!; end

    sig { void }
    def restore_achievement_public_slugs!; end

    sig { void }
    def restore_achievements_private_count!; end

    sig { void }
    def restore_achievements_public_count!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_discussion_answered_count!; end

    sig { void }
    def restore_discussion_answered_public_and_private_count!; end

    sig { void }
    def restore_followers_count!; end

    sig { void }
    def restore_following_count!; end

    sig { void }
    def restore_global_advisory_credit_count!; end

    sig { void }
    def restore_has_acv_badge!; end

    sig { void }
    def restore_has_nasa_badge!; end

    sig { void }
    def restore_has_orcid_record!; end

    sig { void }
    def restore_has_pro_badge!; end

    sig { void }
    def restore_has_sponsoring_badge!; end

    sig { void }
    def restore_has_unseen_private_achievement!; end

    sig { void }
    def restore_has_unseen_public_achievement!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_inactive_sponsoring_count!; end

    sig { void }
    def restore_inactive_sponsoring_public_and_private_count!; end

    sig { void }
    def restore_inactive_sponsors_count!; end

    sig { void }
    def restore_inactive_sponsors_public_and_private_count!; end

    sig { void }
    def restore_is_bounty_hunter!; end

    sig { void }
    def restore_is_campus_expert!; end

    sig { void }
    def restore_is_developer_program_member!; end

    sig { void }
    def restore_is_github_star!; end

    sig { void }
    def restore_is_staff!; end

    sig { void }
    def restore_packages_count!; end

    sig { void }
    def restore_packages_public_and_private_count!; end

    sig { void }
    def restore_projects_count!; end

    sig { void }
    def restore_projects_public_and_private_count!; end

    sig { void }
    def restore_repository_count!; end

    sig { void }
    def restore_repository_public_and_private_count!; end

    sig { void }
    def restore_sponsoring_count!; end

    sig { void }
    def restore_sponsoring_public_and_private_count!; end

    sig { void }
    def restore_sponsors_count!; end

    sig { void }
    def restore_sponsors_public_and_private_count!; end

    sig { void }
    def restore_stars_count!; end

    sig { void }
    def restore_stars_public_and_private_count!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_id!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_achievement_private_slugs; end

    sig { returns(T::Boolean) }
    def saved_change_to_achievement_private_slugs?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_achievement_public_slugs; end

    sig { returns(T::Boolean) }
    def saved_change_to_achievement_public_slugs?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_achievements_private_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_achievements_private_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_achievements_public_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_achievements_public_count?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_discussion_answered_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_discussion_answered_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_discussion_answered_public_and_private_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_discussion_answered_public_and_private_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_followers_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_followers_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_following_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_following_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_global_advisory_credit_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_global_advisory_credit_count?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_acv_badge; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_acv_badge?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_nasa_badge; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_nasa_badge?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_orcid_record; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_orcid_record?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_pro_badge; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_pro_badge?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_sponsoring_badge; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_sponsoring_badge?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_unseen_private_achievement; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_unseen_private_achievement?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_unseen_public_achievement; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_unseen_public_achievement?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_inactive_sponsoring_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_inactive_sponsoring_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_inactive_sponsoring_public_and_private_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_inactive_sponsoring_public_and_private_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_inactive_sponsors_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_inactive_sponsors_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_inactive_sponsors_public_and_private_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_inactive_sponsors_public_and_private_count?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_is_bounty_hunter; end

    sig { returns(T::Boolean) }
    def saved_change_to_is_bounty_hunter?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_is_campus_expert; end

    sig { returns(T::Boolean) }
    def saved_change_to_is_campus_expert?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_is_developer_program_member; end

    sig { returns(T::Boolean) }
    def saved_change_to_is_developer_program_member?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_is_github_star; end

    sig { returns(T::Boolean) }
    def saved_change_to_is_github_star?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_is_staff; end

    sig { returns(T::Boolean) }
    def saved_change_to_is_staff?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_packages_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_packages_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_packages_public_and_private_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_packages_public_and_private_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_projects_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_projects_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_projects_public_and_private_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_projects_public_and_private_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_public_and_private_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_public_and_private_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sponsoring_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsoring_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sponsoring_public_and_private_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsoring_public_and_private_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sponsors_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsors_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sponsors_public_and_private_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_sponsors_public_and_private_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_stars_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_stars_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_stars_public_and_private_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_stars_public_and_private_count?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(::Integer) }
    def sponsoring_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sponsoring_count=(value); end

    sig { returns(T::Boolean) }
    def sponsoring_count?; end

    sig { returns(T.nilable(::Integer)) }
    def sponsoring_count_before_last_save; end

    sig { returns(T.untyped) }
    def sponsoring_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsoring_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsoring_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsoring_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsoring_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsoring_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsoring_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsoring_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsoring_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sponsoring_count_was; end

    sig { void }
    def sponsoring_count_will_change!; end

    sig { returns(::Integer) }
    def sponsoring_public_and_private_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sponsoring_public_and_private_count=(value); end

    sig { returns(T::Boolean) }
    def sponsoring_public_and_private_count?; end

    sig { returns(T.nilable(::Integer)) }
    def sponsoring_public_and_private_count_before_last_save; end

    sig { returns(T.untyped) }
    def sponsoring_public_and_private_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsoring_public_and_private_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsoring_public_and_private_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsoring_public_and_private_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsoring_public_and_private_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsoring_public_and_private_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsoring_public_and_private_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsoring_public_and_private_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsoring_public_and_private_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sponsoring_public_and_private_count_was; end

    sig { void }
    def sponsoring_public_and_private_count_will_change!; end

    sig { returns(::Integer) }
    def sponsors_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sponsors_count=(value); end

    sig { returns(T::Boolean) }
    def sponsors_count?; end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_count_before_last_save; end

    sig { returns(T.untyped) }
    def sponsors_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsors_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsors_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsors_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsors_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsors_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsors_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_count_was; end

    sig { void }
    def sponsors_count_will_change!; end

    sig { returns(::Integer) }
    def sponsors_public_and_private_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sponsors_public_and_private_count=(value); end

    sig { returns(T::Boolean) }
    def sponsors_public_and_private_count?; end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_public_and_private_count_before_last_save; end

    sig { returns(T.untyped) }
    def sponsors_public_and_private_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def sponsors_public_and_private_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsors_public_and_private_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsors_public_and_private_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsors_public_and_private_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_public_and_private_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sponsors_public_and_private_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sponsors_public_and_private_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_public_and_private_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sponsors_public_and_private_count_was; end

    sig { void }
    def sponsors_public_and_private_count_will_change!; end

    sig { returns(::Integer) }
    def stars_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def stars_count=(value); end

    sig { returns(T::Boolean) }
    def stars_count?; end

    sig { returns(T.nilable(::Integer)) }
    def stars_count_before_last_save; end

    sig { returns(T.untyped) }
    def stars_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def stars_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def stars_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def stars_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def stars_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def stars_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def stars_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def stars_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def stars_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def stars_count_was; end

    sig { void }
    def stars_count_will_change!; end

    sig { returns(::Integer) }
    def stars_public_and_private_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def stars_public_and_private_count=(value); end

    sig { returns(T::Boolean) }
    def stars_public_and_private_count?; end

    sig { returns(T.nilable(::Integer)) }
    def stars_public_and_private_count_before_last_save; end

    sig { returns(T.untyped) }
    def stars_public_and_private_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def stars_public_and_private_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def stars_public_and_private_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def stars_public_and_private_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def stars_public_and_private_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def stars_public_and_private_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def stars_public_and_private_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def stars_public_and_private_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def stars_public_and_private_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def stars_public_and_private_count_was; end

    sig { void }
    def stars_public_and_private_count_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def user_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_achievement_private_slugs?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_achievement_public_slugs?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_achievements_private_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_achievements_public_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_discussion_answered_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_discussion_answered_public_and_private_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_followers_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_following_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_global_advisory_credit_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_acv_badge?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_nasa_badge?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_orcid_record?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_pro_badge?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_sponsoring_badge?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_unseen_private_achievement?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_unseen_public_achievement?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_inactive_sponsoring_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_inactive_sponsoring_public_and_private_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_inactive_sponsors_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_inactive_sponsors_public_and_private_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_is_bounty_hunter?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_is_campus_expert?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_is_developer_program_member?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_is_github_star?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_is_staff?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_packages_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_packages_public_and_private_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_projects_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_projects_public_and_private_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_public_and_private_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsoring_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsoring_public_and_private_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsors_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sponsors_public_and_private_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_stars_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_stars_public_and_private_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::UserMetadata } }

    sig { returns(T::Array[::UserMetadata]) }
    def to_a; end

    sig { returns(T::Array[::UserMetadata]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::UserMetadata } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::UserMetadata } }

    sig do
      params(
        records: T.any(::UserMetadata, T::Enumerable[T.any(::UserMetadata, T::Enumerable[::UserMetadata])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::UserMetadata, T::Enumerable[T.any(::UserMetadata, T::Enumerable[::UserMetadata])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::UserMetadata, T::Enumerable[T.any(::UserMetadata, T::Enumerable[::UserMetadata])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::UserMetadata]) }
    def load_target; end

    sig do
      params(
        records: T.any(::UserMetadata, T::Enumerable[T.any(::UserMetadata, T::Enumerable[::UserMetadata])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::UserMetadata, T::Enumerable[T.any(::UserMetadata, T::Enumerable[::UserMetadata])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::UserMetadata, T::Enumerable[T.any(::UserMetadata, T::Enumerable[::UserMetadata])])
      ).returns(T::Array[::UserMetadata])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::UserMetadata]) }
    def target; end

    sig { returns(T::Array[::UserMetadata]) }
    def to_a; end

    sig { returns(T::Array[::UserMetadata]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::UserMetadata } }

    sig { returns(T::Array[::UserMetadata]) }
    def to_a; end

    sig { returns(T::Array[::UserMetadata]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::UserMetadata } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

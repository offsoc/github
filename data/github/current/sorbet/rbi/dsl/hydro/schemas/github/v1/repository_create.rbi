# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::RepositoryCreate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::RepositoryCreate`.

class Hydro::Schemas::Github::V1::RepositoryCreate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      gitignore_template: T.nilable(String),
      init_with_readme: T.nilable(T::Boolean),
      license_template: T.nilable(String),
      owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, gitignore_template: nil, init_with_readme: nil, license_template: nil, owner: nil, repository: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_gitignore_template; end

  sig { void }
  def clear_init_with_readme; end

  sig { void }
  def clear_license_template; end

  sig { void }
  def clear_owner; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { returns(String) }
  def gitignore_template; end

  sig { params(value: String).void }
  def gitignore_template=(value); end

  sig { returns(T::Boolean) }
  def init_with_readme; end

  sig { params(value: T::Boolean).void }
  def init_with_readme=(value); end

  sig { returns(String) }
  def license_template; end

  sig { params(value: String).void }
  def license_template=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

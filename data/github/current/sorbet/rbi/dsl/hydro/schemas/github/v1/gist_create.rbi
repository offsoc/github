# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::GistCreate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::GistCreate`.

class Hydro::Schemas::Github::V1::GistCreate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      files: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::GistFile], T::Array[Hydro::Schemas::Github::V1::Entities::GistFile])),
      gist: T.nilable(Hydro::Schemas::Github::V1::Entities::Gist),
      head_sha: T.nilable(String),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      spamurai_form_signals: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals),
      specimen_files: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::SpecimenData], T::Array[Hydro::Schemas::Github::V1::Entities::SpecimenData])),
      specimen_files_path: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::SpecimenData], T::Array[Hydro::Schemas::Github::V1::Entities::SpecimenData])),
      specimen_gist_description: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)
    ).void
  end
  def initialize(actor: nil, feature_flags: T.unsafe(nil), files: T.unsafe(nil), gist: nil, head_sha: nil, request_context: nil, spamurai_form_signals: nil, specimen_files: T.unsafe(nil), specimen_files_path: T.unsafe(nil), specimen_gist_description: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_files; end

  sig { void }
  def clear_gist; end

  sig { void }
  def clear_head_sha; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_spamurai_form_signals; end

  sig { void }
  def clear_specimen_files; end

  sig { void }
  def clear_specimen_files_path; end

  sig { void }
  def clear_specimen_gist_description; end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::GistFile]) }
  def files; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::GistFile]).void }
  def files=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Gist)) }
  def gist; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Gist)).void }
  def gist=(value); end

  sig { returns(String) }
  def head_sha; end

  sig { params(value: String).void }
  def head_sha=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)) }
  def spamurai_form_signals; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)).void }
  def spamurai_form_signals=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::SpecimenData]) }
  def specimen_files; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::SpecimenData]).void }
  def specimen_files=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::SpecimenData]) }
  def specimen_files_path; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::SpecimenData]).void }
  def specimen_files_path=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)) }
  def specimen_gist_description; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)).void }
  def specimen_gist_description=(value); end
end

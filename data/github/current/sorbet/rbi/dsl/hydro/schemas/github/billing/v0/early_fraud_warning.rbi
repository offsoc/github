# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Billing::V0::EarlyFraudWarning`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Billing::V0::EarlyFraudWarning`.

class Hydro::Schemas::Github::Billing::V0::EarlyFraudWarning
  sig do
    params(
      actionable: T.nilable(T::Boolean),
      fraud_type: T.nilable(T.any(Symbol, Integer)),
      stripe_charge_id: T.nilable(String),
      stripe_fraud_id: T.nilable(String),
      stripe_payment_intent_id: T.nilable(String),
      stripe_timestamp: T.nilable(Google::Protobuf::Timestamp),
      user_id: T.nilable(Integer)
    ).void
  end
  def initialize(actionable: nil, fraud_type: nil, stripe_charge_id: nil, stripe_fraud_id: nil, stripe_payment_intent_id: nil, stripe_timestamp: nil, user_id: nil); end

  sig { returns(T::Boolean) }
  def actionable; end

  sig { params(value: T::Boolean).void }
  def actionable=(value); end

  sig { void }
  def clear_actionable; end

  sig { void }
  def clear_fraud_type; end

  sig { void }
  def clear_stripe_charge_id; end

  sig { void }
  def clear_stripe_fraud_id; end

  sig { void }
  def clear_stripe_payment_intent_id; end

  sig { void }
  def clear_stripe_timestamp; end

  sig { void }
  def clear_user_id; end

  sig { returns(T.any(Symbol, Integer)) }
  def fraud_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def fraud_type=(value); end

  sig { returns(String) }
  def stripe_charge_id; end

  sig { params(value: String).void }
  def stripe_charge_id=(value); end

  sig { returns(String) }
  def stripe_fraud_id; end

  sig { params(value: String).void }
  def stripe_fraud_id=(value); end

  sig { returns(String) }
  def stripe_payment_intent_id; end

  sig { params(value: String).void }
  def stripe_payment_intent_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def stripe_timestamp; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def stripe_timestamp=(value); end

  sig { returns(Integer) }
  def user_id; end

  sig { params(value: Integer).void }
  def user_id=(value); end
end

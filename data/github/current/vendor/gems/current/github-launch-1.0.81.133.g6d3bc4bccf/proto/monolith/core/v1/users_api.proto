syntax = "proto3";

package actions.core.v1;

option go_package = "core/v1";
option ruby_package = "MonolithTwirp::Actions::Core::V1";

import "core/v1/actor.proto";
import "core/v1/identity.proto";
import "core/v1/reason.proto";
import "core/v1/repository.proto";

// UsersAPI manages user information.
service UsersAPI {
  // IsVisibleUser retrieves the visibility status of a user (optionally to
  // another user, such as the viewer).
  rpc IsVisibleUser(IsVisibleUserRequest) returns (IsVisibleUserResponse);
  // GetOrganizationOwner returns information about an organization as well as the
  // "owning" enterprise/business if there is one
  rpc GetOrganizationOwner(GetOrganizationOwnerRequest) returns (GetOrganizationOwnerResponse);
  // GetRepositories retrieves all repositories for a given owner
  rpc GetRepositories(GetRepositoriesRequest) returns (GetRepositoriesResponse);
  // GetUserByLogin retrieves a user by their login
  rpc GetUserByLogin(GetUserByLoginRequest) returns (GetUserByLoginResponse);
  // ShouldPullRequestWorkflowsRunForUser returns whether Actions should automatically run
  // workflows on a fork pull request for a user
  rpc ShouldPullRequestWorkflowsRunForUser(ShouldPullRequestWorkflowsRunForUserRequest) returns (ShouldPullRequestWorkflowsRunForUserResponse);
}

message IsVisibleUserRequest {
  reserved 2;
  // user_id is the user ID to check. (required)
  int64 user_id = 1;
}

message IsVisibleUserResponse {
  // is_visible is the visibility status of the user. (required)
  bool is_visible = 1;
  // reason gives the rationale behind marking the user as invisible. This field
  // is only present when is_visible = false.
  Reason reason = 2;
}

message GetOrganizationOwnerRequest {
  // id is the ID used to retrieve the user or organization. (required)
  int64 id = 1;
}

message GetOrganizationOwnerResponse {
  // organization is the organization (potentially user if called with one) being asked about (required)
  Actor organization = 1;
  // business that the organization is part of (optional)
  Actor business = 2;
  // organization_plan_name is the plan the organization is on
  string organization_plan_name = 3;
}

message GetRepositoriesRequest {
  // id is the ID used to retrieve the repositories for a given owner. (required)
  int64 owner_id = 1;
}

message GetRepositoriesResponse {
  // repositories are all repositories owned by the user.
  repeated Repository repositories = 1;
}

message GetUserByLoginRequest {
  // login is the login used to retrieve the user. (required)
  string login = 1;
}

message GetUserByLoginResponse {
  int64 id = 1;

  Identity global_id = 2;
}

message ShouldPullRequestWorkflowsRunForUserRequest {
  // The creator of the pull request
  Identity user = 1;

  // The repository of the pull request
  Identity repository = 2;
}

message ShouldPullRequestWorkflowsRunForUserResponse {
  // Indicates whether pull requests workflows should be run automatically
  bool run_workflows = 1;
}

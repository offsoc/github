{"version":3,"file":"chunk-app_assets_modules_github_behaviors_reload-after-polling-element_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/github/behaviors/reload-after-polling-element.ts","ui/packages/analytics-overrides/analytics-overrides.ts","ui/packages/client-env/client-env.ts","ui/packages/document-ready/document-ready.ts","ui/packages/failbot/failbot.ts","ui/packages/feature-flags/feature-flags.ts","ui/packages/html-safe-nonce/html-safe-nonce.ts","ui/packages/trusted-types-policies/server-x-safe-html.ts","ui/packages/fetch-utils/fetch-utils.ts","ui/packages/hydro-analytics/hydro-analytics.ts","ui/packages/trusted-types-policies/parse-html.ts","ui/packages/parse-html/parse-html.ts","ui/packages/runtime-environment/runtime-environment.ts","ui/packages/safe-storage/safe-storage.ts","ui/packages/safe-storage/session-storage.ts","ui/packages/soft-nav/utils.ts","ui/packages/ssr-utils/ssr-globals.ts","ui/packages/ssr-utils/ssr.ts","ui/packages/stats/stats.ts","ui/packages/trusted-types-policies/policy.ts","ui/packages/trusted-types/trusted-types.ts"],"sourcesContent":["import {controller} from '@github/catalyst'\nimport {fetchPoll} from '@github-ui/fetch-utils'\n\n@controller\nclass ReloadAfterPollingElement extends HTMLElement {\n  async connectedCallback() {\n    const url = new URL(window.location.href, window.location.origin)\n    const params = new URLSearchParams('polling=true')\n    url.search = params.toString()\n    await fetchPoll(url.toString())\n    window.location.reload()\n  }\n}\n","function queryLast<T extends Element>(selector: string): T | undefined {\n  const list = document.querySelectorAll<T>(selector)\n  if (list.length > 0) {\n    return list[list.length - 1]\n  }\n}\n\nfunction pagePathname() {\n  const locationOverride = queryLast<HTMLMetaElement>('meta[name=analytics-location]')\n  if (locationOverride) {\n    return locationOverride.content\n  } else {\n    return window.location.pathname\n  }\n}\n\nfunction pageQuery() {\n  const stripParams = queryLast<HTMLMetaElement>('meta[name=analytics-location-query-strip]')\n  let search = ''\n\n  if (!stripParams) {\n    search = window.location.search\n  }\n\n  const extraParams = queryLast<HTMLMetaElement>('meta[name=analytics-location-params]')\n  if (extraParams) {\n    search += (search ? '&' : '?') + extraParams.content\n  }\n\n  for (const meta of document.querySelectorAll<HTMLMetaElement>('meta[name=analytics-param-rename]')) {\n    const names = meta.content.split(':', 2)\n    search = search.replace(new RegExp(`(^|[?&])${names[0]}($|=)`, 'g'), `$1${names[1]}$2`)\n  }\n\n  return search\n}\n\nexport function requestUri() {\n  return `${window.location.protocol}//${window.location.host}${pagePathname() + pageQuery()}`\n}\n","export interface ClientEnvironment {\n  readonly locale: string\n  readonly featureFlags: string[]\n}\n\nlet env: ClientEnvironment | undefined\n\nexport function getEnv() {\n  if (!env) {\n    throw new Error(\n      'Client env was requested before it was loaded. This likely means you are attempting to use client env at the module level in SSR, which is not supported. Please move your client env usage into a function.',\n    )\n  }\n\n  return env\n}\n\nexport function getLocale() {\n  return env?.locale ?? 'en-US'\n}\n\nfunction loadEnv() {\n  if (typeof document !== 'undefined') {\n    const envTag = document.getElementById('client-env')\n    if (envTag) {\n      try {\n        env = JSON.parse(envTag.textContent || '')\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error parsing client-env', error)\n      }\n    }\n  }\n}\n\n// Automatically load the env on initial page load\nloadEnv()\n\n// This is a special helper method for setting the env in the SSR environment only\nexport function setClientEnvForSsr(clientEnv: ClientEnvironment | undefined) {\n  env = clientEnv\n}\n\n// This env object is used as a default for tests only and is not included in production builds\nexport const clientEnvForTests: ClientEnvironment = {\n  locale: 'en',\n  featureFlags: ['test_flag'],\n}\n\nexport function _resetForTests({loadNewEnv, forceUndefined}: {loadNewEnv: boolean; forceUndefined?: boolean}) {\n  // forget the current env\n  env = forceUndefined ? undefined : clientEnvForTests\n\n  if (loadNewEnv) {\n    // load the latest env\n    loadEnv()\n  }\n}\n","import {ssrSafeDocument, ssrSafeWindow} from '@github-ui/ssr-utils'\n\n// Check if document has passed interactive state.\n//\n// The document has finished loading and the document has been parsed but\n// sub-resources such as images, stylesheets and frames are still loading.\n// The state indicates that the DOMContentLoaded event has been fired.\nexport const ready: Promise<void> = (function () {\n  if (ssrSafeDocument?.readyState === 'interactive' || ssrSafeDocument?.readyState === 'complete') {\n    return Promise.resolve()\n  } else {\n    return new Promise<void>(resolve => {\n      ssrSafeDocument?.addEventListener('DOMContentLoaded', () => {\n        resolve()\n      })\n    })\n  }\n})()\n\n// Check if document has passed loaded state.\n//\n// The document and all sub-resources have finished loading. The state\n// indicates that the load event has been fired.\nexport const loaded: Promise<unknown> = (function () {\n  if (ssrSafeDocument?.readyState === 'complete') {\n    return Promise.resolve()\n  } else {\n    return new Promise(resolve => {\n      ssrSafeWindow?.addEventListener('load', resolve)\n    })\n  }\n})()\n","// Report uncaught JS errors to Sentry\n//   https://sentry.io/github/github-js\n\nimport {getOrCreateClientId} from '@github/hydro-analytics-client'\nimport {isSupported} from '@github/browser-support'\nimport {parse} from 'stacktrace-parser'\nimport {requestUri} from '@github-ui/analytics-overrides'\nimport {bundler} from '@github-ui/runtime-environment'\nimport {ssrSafeWindow} from '@github-ui/ssr-utils'\nimport {isFeatureEnabled} from '@github-ui/feature-flags'\nimport {getSoftNavReferrer} from '@github-ui/soft-nav/utils'\n\nlet extensionErrors = false\nlet errorsReported = 0\nconst loadTime = Date.now()\n// network error messages are not consistent across browsers, this is a list of known messages for chrome and firefox\nexport const EXPECTED_NETWORK_ERROR_MESSAGES = new Set([\n  'Failed to fetch',\n  'NetworkError when attempting to fetch resource.',\n])\n\ntype ErrorContext = {\n  message?: string\n}\n\n// Check if an arbitrary object is an error, or at least an object that satisfies the interface of an error,\n// with the necessary information to be able to report it to Sentry.\nfunction isError(error: unknown): error is Error {\n  // Check if it's a definite instance of an error\n  if (error instanceof Error) return true\n  // Otherwise, check that it at least satisfies the interface of an error\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    'name' in error &&\n    typeof error.name === 'string' &&\n    'message' in error &&\n    typeof error.message === 'string'\n  )\n}\n\n/** Tries to serialize an arbitrary error value that is not an Error object, and returns a default message otherwise */\nfunction serializeNonError(error: unknown): string {\n  try {\n    return JSON.stringify(error)\n  } catch {\n    return 'Unserializable'\n  }\n}\n\nfunction isExpectedError(error: Error): boolean {\n  // We use AbortController to control events and some workflows. When we call `abort()` on it, it will raise an\n  // `AbortError` which doesn't represent a real error, so we don't want to report it.\n  if (error.name === 'AbortError') return true\n  // Failed to fetch errors are usually related to the user's network connection. They also do not represent\n  // real errors related to our code, so we will also ignore them.\n  if (error.name === 'TypeError' && EXPECTED_NETWORK_ERROR_MESSAGES.has(error.message)) return true\n  // For memex we use an ApiError class to represent errors returned from the API\n  // Additional details in the format of ApiErrorOpts are affixed to the name as a stringified JSON object\n  // so we just need to ensure the error name starts with ApiError\n  // see ui/packages/memex/src/client/platform/api-error.ts for more details.\n  if (error.name.startsWith('ApiError') && EXPECTED_NETWORK_ERROR_MESSAGES.has(error.message)) return true\n\n  return false\n}\n\n// @deprecated Re-throw the caught exception instead.\nexport function reportError(error: unknown, context: ErrorContext = {}) {\n  if (isFeatureEnabled('FAILBOT_HANDLE_NON_ERRORS')) {\n    if (!isError(error)) {\n      if (isIgnoredNonError(error)) return\n\n      // Create an error instance so that we can get the stacktrace of how this was reported\n      const errorForStackTrace = new Error()\n      const serializedErrorValue = serializeNonError(error)\n      // Construct a custom error object so we can keep track of anywhere that we report an error that isn't an Error object\n      const newError: PlatformJavascriptError = {\n        type: 'UnknownError',\n        value: `Unable to report error, due to a thrown non-Error type: ${typeof error}, with value ${serializedErrorValue}`,\n        stacktrace: stacktrace(errorForStackTrace),\n        catalogService: undefined,\n      }\n      report(errorContext(newError, context))\n      return\n    }\n    if (!isExpectedError(error)) {\n      report(errorContext(formatError(error), context))\n    }\n  } else {\n    // Without feature flag, we will cast the `error` variable which was implicitly the old\n    // behavior of the non-feature flagged code.\n    if (!isExpectedError(error as Error)) {\n      report(errorContext(formatError(error as Error), context))\n    }\n  }\n}\n\n// Report context info to Sentry.\nasync function report(context: PlatformReportBrowserErrorInput) {\n  if (!reportable()) return\n\n  const url = document.head?.querySelector<HTMLMetaElement>('meta[name=\"browser-errors-url\"]')?.content\n  if (!url) return\n\n  if (isExtensionError(context.error.stacktrace)) {\n    extensionErrors = true\n    return\n  }\n\n  errorsReported++\n\n  try {\n    await fetch(url, {method: 'post', body: JSON.stringify(context)})\n  } catch {\n    // Error reporting failed so do nothing.\n  }\n}\n\nfunction formatError(error: Error): PlatformJavascriptError {\n  return {\n    type: error.name,\n    value: error.message,\n    stacktrace: stacktrace(error),\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    catalogService: (error as any)['catalogService'],\n  }\n}\n\nfunction errorContext(error: PlatformJavascriptError, context: ErrorContext = {}): PlatformReportBrowserErrorInput {\n  return Object.assign(\n    {\n      error,\n      sanitizedUrl: requestUri() || window.location.href,\n      readyState: document.readyState,\n      referrer: getSoftNavReferrer(),\n      timeSinceLoad: Math.round(Date.now() - loadTime),\n      user: pageUser() || undefined,\n      bundler,\n      ui: Boolean(document.querySelector('meta[name=\"ui\"]')),\n    },\n    context,\n  )\n}\n\nexport function stacktrace(error: Error): PlatformStackframe[] {\n  return parse(error.stack || '').map(frame => ({\n    filename: frame.file || '',\n    function: String(frame.methodName),\n    lineno: (frame.lineNumber || 0).toString(),\n    colno: (frame.column || 0).toString(),\n  }))\n}\n\nconst extensions = /(chrome|moz|safari)-extension:\\/\\//\n\n// Does this stack trace contain frames from browser extensions?\nfunction isExtensionError(stack: PlatformStackframe[]): boolean {\n  return stack.some(frame => extensions.test(frame.filename) || extensions.test(frame.function))\n}\n\nexport function pageUser() {\n  const login = document.head?.querySelector<HTMLMetaElement>('meta[name=\"user-login\"]')?.content\n  if (login) return login\n\n  const clientId = getOrCreateClientId()\n  return `anonymous-${clientId}`\n}\n\nlet unloaded = false\nssrSafeWindow?.addEventListener('pageshow', () => (unloaded = false))\nssrSafeWindow?.addEventListener('pagehide', () => (unloaded = true))\n\nfunction reportable() {\n  return !unloaded && !extensionErrors && errorsReported < 10 && isSupported()\n}\n\nif (typeof BroadcastChannel === 'function') {\n  const sharedWorkerErrorChannel = new BroadcastChannel('shared-worker-error')\n  sharedWorkerErrorChannel.addEventListener('message', event => {\n    // SharedWorker will emit a formatted error\n    reportError(event.data.error)\n  })\n}\n\nconst ignoredErrorMessages = [\n  'Object Not Found Matching Id', // from Microsoft Outlook SafeLink crawler\n  'Not implemented on this platform', // LastPass Safari extension\n  `provider because it's not your default extension`, // MetaMask extension\n]\n\n/**\n * We see a fair number of \"errors\" which are not actually Error objects. This function will return true if the\n * error is one of these known non-Error types and has content which we know can safely be ignored.\n * Most of these errors come from specific browsers or extensions which we can't control, so we just ignore them.\n * @param error An error that is not an Error object\n * @returns boolean\n */\nfunction isIgnoredNonError(error: unknown) {\n  if (!error || typeof error === 'boolean' || typeof error === 'number') {\n    // Rejected with a type that is not useful to report. Just ignore it.\n    return true\n  } else if (typeof error === 'string') {\n    // rejected with a string. See if it's a known error that we can ignore\n    if (ignoredErrorMessages.some(message => error.includes(message))) {\n      return true\n    }\n  } else if (\n    typeof error === 'object' &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof (error as any).message === 'string' &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof (error as any).code === 'number'\n  ) {\n    // We see an object like {\"message\":\"Not connected\",\"code\":4900} from some extension, likely MetaMask. Ignore these\n    return true\n  }\n\n  return false\n}\n","import memoize from '@github/memoize'\nimport {getEnv} from '@github-ui/client-env'\nimport {IS_SERVER} from '@github-ui/ssr-utils'\n\nfunction getEnabledFeaturesSet(): Set<string> {\n  const features = getEnv().featureFlags\n  const featuresUpperCase = features.map(feature => feature.toLowerCase())\n  return new Set<string>(featuresUpperCase)\n}\n\nconst featuresSet =\n  IS_SERVER || process.env.NODE_ENV === 'test' ? getEnabledFeaturesSet : memoize(getEnabledFeaturesSet)\n\nexport function getEnabledFeatures(): string[] {\n  return Array.from(featuresSet())\n}\n\nexport function isFeatureEnabled(name: string): boolean {\n  return featuresSet().has(name.toLowerCase())\n}\n\n//exported to allow mocking in tests\nconst featureFlag = {isFeatureEnabled}\n\nexport {featureFlag}\n","//  Get document's HTML Safe nonce.\n//\n// Example:\n//\n//   <meta name=\"html-safe-nonce\" content=\"de43a1f355c711f7f705e4f971964391ac0c8e13\">\nexport function getDocumentHtmlSafeNonces(document: Document): string[] {\n  const nonces = [...document.querySelectorAll<HTMLMetaElement>('meta[name=html-safe-nonce]')].map(meta => meta.content)\n\n  if (nonces.length < 1) {\n    throw new Error('could not find html-safe-nonce on document')\n  }\n  return nonces\n}\n\ninterface Response {\n  headers: Headers\n  status: number\n}\n\nclass ResponseError extends Error {\n  response: Response\n\n  constructor(message: string, response: Response) {\n    super(`${message} for HTTP ${response.status}`)\n    this.response = response\n  }\n}\n\nexport function verifyResponseHtmlSafeNonce(nonces: string[], response: Response, allowJson = false) {\n  const contentType = response.headers.get('content-type') || ''\n  if (!allowJson && !contentType.startsWith('text/html')) {\n    throw new ResponseError(`expected response with text/html, but was ${contentType}`, response)\n  }\n\n  if (allowJson && !(contentType.startsWith('text/html') || contentType.startsWith('application/json'))) {\n    throw new ResponseError(`expected response with text/html or application/json, but was ${contentType}`, response)\n  }\n\n  const responseNonce = response.headers.get('x-html-safe')\n  if (!responseNonce) {\n    throw new ResponseError(`missing X-HTML-Safe nonce`, response)\n  } else if (!nonces.includes(responseNonce)) {\n    throw new ResponseError(`response X-HTML-Safe nonce did not match`, response)\n  }\n}\n","import {getDocumentHtmlSafeNonces, verifyResponseHtmlSafeNonce} from '@github-ui/html-safe-nonce'\nimport {ghTrustedTypes} from '@github-ui/trusted-types'\nimport {trustedTypesPolicy} from './policy'\n\nconst policyName = 'server-x-safe-html'\n\n// This is a no-op policy to be used with server-side rendered HTML.\nexport const serverXSafeHTMLPolicy = ghTrustedTypes.createPolicy(policyName, {\n  createHTML: (s: string, response: Response) => {\n    return trustedTypesPolicy.apply({\n      policy: () => {\n        verifyResponseHtmlSafeNonce(getDocumentHtmlSafeNonces(document), response)\n        return s\n      },\n      policyName,\n      fallback: s,\n      silenceErrorReporting: true,\n    })\n  },\n})\n","import {parseHTML} from '@github-ui/parse-html'\nimport {serverXSafeHTMLPolicy} from '@github-ui/trusted-types-policies/server-x-safe-html'\n\nexport async function fetchSafeDocumentFragment(\n  document: Document,\n  url: RequestInfo,\n  options?: RequestInit,\n): Promise<DocumentFragment> {\n  const request = new Request(url, options)\n  request.headers.append('X-Requested-With', 'XMLHttpRequest')\n  const response = await self.fetch(request)\n  if (response.status < 200 || response.status >= 300) {\n    throw new Error(`HTTP ${response.status}${response.statusText || ''}`)\n  }\n  const trustedHTML = serverXSafeHTMLPolicy.createHTML(await response.text(), response)\n  return parseHTML(document, trustedHTML)\n}\n\nexport function fetchPoll(\n  url: RequestInfo,\n  options?: RequestInit,\n  timeBetweenRequests = 1000,\n  acceptedStatusCodes = [200],\n  pollStatusCodes = [202],\n): Promise<Response> {\n  return (async function poll(wait: number): Promise<Response> {\n    const request = new Request(url, options)\n    request.headers.append('X-Requested-With', 'XMLHttpRequest')\n    const response = await self.fetch(request)\n\n    if (pollStatusCodes.includes(response.status)) {\n      await new Promise(resolve => setTimeout(resolve, wait))\n      return poll(wait * 1.5)\n    }\n    if (acceptedStatusCodes.includes(response.status)) {\n      return response\n    }\n    if (response.status < 200 || response.status >= 300) {\n      throw new Error(`HTTP ${response.status}${response.statusText || ''}`)\n    }\n    throw new Error(`Unexpected ${response.status} response status from poll endpoint`)\n  })(timeBetweenRequests)\n}\n\ntype RetryResult = Response | 'retry'\ntype FetchRetryOptions = {\n  // Base wait time between retries\n  // this will be multiplied with the current attempt to perform a backoff strategy\n  // Defaults to 500ms\n  wait?: number\n  // List of accepted status codes that should not be retried. Defaults to [200]\n  acceptedStatusCodes?: number[]\n  // Max number of attempts. Defaults to 3\n  max?: number\n  // Current retry attempt. Starts at 0\n  attempt?: number\n}\n\n// Execute a fetch call in a callback and retry it up to `options.max` times\n// Each retry will be delayed `options.wait` * `options.attempt`\nexport async function fetchRetry(\n  url: RequestInfo,\n  fetchOptions?: RequestInit,\n  options?: FetchRetryOptions,\n): Promise<Response> {\n  const {wait = 500, acceptedStatusCodes = [200], max = 3, attempt = 0} = options || {}\n\n  const retry: () => Promise<RetryResult> = async () => {\n    return new Promise((resolve, reject) => {\n      setTimeout(async () => {\n        try {\n          const request = new Request(url, fetchOptions)\n          request.headers.append('X-Requested-With', 'XMLHttpRequest')\n          const response = await self.fetch(request)\n          if (acceptedStatusCodes.includes(response.status) || attempt + 1 === max) {\n            return resolve(response)\n          }\n\n          // The response failed, we indicate that it must be retried\n          resolve('retry')\n        } catch (err) {\n          // Only non successful HTTP status codes are controlled by this retry mechanism\n          // Any other error is propagated\n          reject(err)\n        }\n      }, wait * attempt)\n    })\n  }\n\n  const result = await retry()\n  if (result !== 'retry') {\n    return result\n  }\n\n  return fetchRetry(url, fetchOptions, {wait, acceptedStatusCodes, max, attempt: attempt + 1})\n}\n","import {AnalyticsClient, getOptionsFromMeta} from '@github/hydro-analytics-client'\nimport type {Context} from '@github/hydro-analytics-client'\nimport safeStorage from '@github-ui/safe-storage'\nimport {isStaff} from '@github-ui/stats'\nconst {getItem} = safeStorage('localStorage')\n\ndeclare const process: {\n  env: {\n    NODE_ENV: string\n  }\n}\n\nconst dimensionPrefix = 'dimension_'\nlet hydroAnalyticsClient: AnalyticsClient | undefined\n\nconst MARKETING_PARAMS = ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content', 'scid']\n\ntry {\n  const options = getOptionsFromMeta('octolytics')\n\n  // Remove the base context because meta tags can change as the user navigates with Turbo\n  // These will be folded in for each event & page view\n  delete options.baseContext\n\n  hydroAnalyticsClient = new AnalyticsClient(options)\n} catch (_) {\n  // Failed to get options from meta tags.  This most likely means analytics are disabled.\n}\n\nfunction extendBaseContext(context?: Context) {\n  const baseContext = getOptionsFromMeta('octolytics').baseContext || {}\n\n  if (baseContext) {\n    delete baseContext.app_id\n    delete baseContext.event_url\n    delete baseContext.host\n\n    for (const [key, value] of Object.entries(baseContext)) {\n      // some octolytics meta tags are prefixed with dimension-, which we don't need with the new hydro-analytics-client\n      if (key.startsWith(dimensionPrefix)) {\n        baseContext[key.replace(dimensionPrefix, '')] = value\n        delete baseContext[key]\n      }\n    }\n  }\n\n  const visitorMeta = document.querySelector<HTMLMetaElement>('meta[name=visitor-payload]')\n  if (visitorMeta) {\n    const visitorHash = JSON.parse(atob(visitorMeta.content))\n    Object.assign(baseContext, visitorHash)\n  }\n\n  const urlParams = new URLSearchParams(window.location.search)\n  for (const [key, value] of urlParams) {\n    if (MARKETING_PARAMS.includes(key.toLowerCase())) {\n      baseContext[key] = value\n    }\n  }\n\n  // Include additional context from the page\n  baseContext.staff = isStaff().toString()\n\n  return Object.assign(baseContext, context)\n}\n\nexport function sendPageView(context?: Context) {\n  hydroAnalyticsClient?.sendPageView(extendBaseContext(context))\n}\n\nexport function sendEvent(type: string, context: Record<string, string | number | boolean | undefined | null> = {}) {\n  const service = document.head?.querySelector<HTMLMetaElement>('meta[name=\"current-catalog-service\"]')?.content\n\n  const cleanContext: Context = service ? {service} : {}\n\n  for (const [key, value] of Object.entries(context)) {\n    if (value !== undefined && value !== null) {\n      cleanContext[key] = `${value}`\n    }\n  }\n\n  if (hydroAnalyticsClient) {\n    const typeWithFallback = type || 'unknown'\n    const fullContext = extendBaseContext(cleanContext)\n    hydroAnalyticsClient.sendEvent(typeWithFallback, extendBaseContext(cleanContext))\n\n    if (process.env.NODE_ENV === 'development') {\n      debugSendEvent(typeWithFallback, fullContext)\n    }\n  }\n}\n\nexport function stringifyObjectValues(obj: object) {\n  return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, JSON.stringify(v)]))\n}\n\nfunction debugSendEvent(type: string, context: Context) {\n  if (getItem('hydro-debug.send-event') === 'true') {\n    // eslint-disable-next-line no-console\n    console.group('[hydro-debug.send-event]')\n    // eslint-disable-next-line no-console\n    console.log({type, context})\n    // eslint-disable-next-line no-console\n    console.groupEnd()\n  }\n}\n","import {ghTrustedTypes} from '@github-ui/trusted-types'\nimport {trustedTypesPolicy} from './policy'\n\nconst policyName = 'parse-html-no-op'\n// This is a temporary policy to allow us to migrate to Trusted Types without breaking existing code.\nexport const temporaryPermissiveParseHTMLPolicy = ghTrustedTypes.createPolicy(policyName, {\n  createHTML: (s: string) => {\n    return trustedTypesPolicy.apply({\n      policy: () => s,\n      policyName,\n      fallback: s,\n      sanitize: false,\n      fallbackOnError: true,\n    })\n  },\n})\n","import {temporaryPermissiveParseHTMLPolicy} from '@github-ui/trusted-types-policies/parse-html'\n\nexport function parseHTML(document: Document, html: string): DocumentFragment {\n  const template = document.createElement('template')\n  template.innerHTML = temporaryPermissiveParseHTMLPolicy.createHTML(html)\n  return document.importNode(template.content, true)\n}\n","import memoize from '@github/memoize'\nimport {ssrSafeDocument} from '@github-ui/ssr-utils'\n\nconst runtimeEnvironment = memoize(githubEnvironment)\n\n// return the github instance environment\n// if dotcom, returns 'dotcom'\n// if enterprise, returns 'enterprise'\nfunction githubEnvironment(): string {\n  return ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"runtime-environment\"]')?.content || ''\n}\n\nexport const isEnterprise = memoize(isEnterpriseEnvironment)\nfunction isEnterpriseEnvironment(): boolean {\n  return runtimeEnvironment() === 'enterprise'\n}\n\n// This is the \"bundler\" that built the client-side assets, e.g. \"webpack\"\nexport const bundler = typeof BUNDLER !== 'undefined' ? BUNDLER : undefined\n","import {ssrSafeWindow} from '@github-ui/ssr-utils'\nimport {sendStats} from '@github-ui/stats'\n\ntype StorageBackend = 'sessionStorage' | 'localStorage'\n\n/**\n * An implementation of the Storage API that throws away all data.  Used in\n * cases when the requested Storage backend is not available.\n */\nclass NoOpStorage {\n  getItem() {\n    return null\n  }\n\n  setItem() {\n    return undefined\n  }\n\n  removeItem() {\n    return undefined\n  }\n\n  clear() {\n    return undefined\n  }\n\n  key() {\n    return null\n  }\n\n  get length() {\n    return 0\n  }\n}\n\ntype SafeStorageOptions = {\n  /** Callers may opt not to suppress quota errors thrown on set in case they rely on recieving them. */\n  throwQuotaErrorsOnSet: boolean\n  /** The amount of time the value should remain in storage, in milliseconds */\n  ttl?: number\n  /** Don't send stats in CI */\n  sendCacheStats?: boolean\n}\n\n/**\n * Safely access Storage items by wrapping a Storage instance\n * (localStorage or sessionStorage) with safe versions of its API\n * methods.  Callers may opt not to suppress quota errors thrown on\n * set in case they rely on recieving them.\n */\nexport default function safeStorage<T = string>(\n  storageKey: StorageBackend,\n  options: SafeStorageOptions = {throwQuotaErrorsOnSet: false},\n  global = ssrSafeWindow,\n  deserialize: (value: string) => T = value => value as unknown as T,\n  serialize: (value: T) => string = (value: T) => value as unknown as string,\n) {\n  let storage: Storage\n  try {\n    if (!global) {\n      // in an SSR environment, use noop storage\n      throw new Error()\n    }\n\n    storage = global[storageKey] || new NoOpStorage()\n  } catch {\n    storage = new NoOpStorage()\n  }\n\n  const {throwQuotaErrorsOnSet} = options\n\n  function emitStats(key: PlatformBrowserIncrementKey) {\n    if (options.sendCacheStats) {\n      sendStats({incrementKey: key})\n    }\n  }\n\n  /**  Safely get storage item. Returns `null` if the item is older than the provided ttl */\n  function getItem(key: string, now: number = new Date().getTime()): T | null {\n    try {\n      const value = storage.getItem(key)\n      if (!value) {\n        return null\n      }\n      const expiryKey = `${key}:expiry`\n      const expiry = Number(storage.getItem(expiryKey))\n      if (expiry && now > expiry) {\n        removeItem(key)\n        removeItem(expiryKey)\n        emitStats('SAFE_STORAGE_VALUE_EXPIRED')\n        return null\n      } else {\n        emitStats('SAFE_STORAGE_VALUE_WITHIN_TTL')\n        return deserialize(value)\n      }\n    } catch (error) {\n      // Ignore browser private mode error.\n      return null\n    }\n  }\n\n  /**\n   * Safely set storage item.\n   * If `ttl` is provided, set an expiry time for the item under the key `${key}:expiry`\n   * This function will be called\n   */\n  function setItem(key: string, value: T, now: number = new Date().getTime()) {\n    try {\n      storage.setItem(key, serialize(value) as unknown as string)\n      if (options.ttl) {\n        const expiryKey = `${key}:expiry`\n        const expiry = now + options.ttl\n        storage.setItem(expiryKey, expiry.toString())\n      }\n    } catch (error) {\n      if (throwQuotaErrorsOnSet && error instanceof Error && error.message.toLowerCase().includes('quota')) throw error\n    }\n  }\n\n  // Safely remove storage item.\n  function removeItem(key: string) {\n    try {\n      storage.removeItem(key)\n      if (options.ttl) {\n        const expiryKey = `${key}:expiry`\n        storage.removeItem(expiryKey)\n      }\n    } catch (error) {\n      // Ignore browser private mode error.\n    }\n  }\n\n  return {\n    getItem,\n    setItem,\n    removeItem,\n    clear: storage.clear,\n    key: storage.key,\n    get length() {\n      return storage.length\n    },\n  }\n}\n\nexport function jsonSafeStorage<T>(storageBackend: StorageBackend) {\n  return safeStorage<T>(\n    storageBackend,\n    {throwQuotaErrorsOnSet: false},\n    ssrSafeWindow,\n    JSON.parse as (value: string) => T,\n    JSON.stringify as (obj: T) => string,\n  )\n}\n","import safeStorage from './safe-storage'\n\nexport const {getItem, setItem, removeItem} = safeStorage('sessionStorage')\n","import {getItem, removeItem, setItem} from '@github-ui/safe-storage/session-storage'\nimport type {SoftNavMechanism} from './events'\n\nexport const DEFAULT_SOFT_NAV_ERROR_REASON = 'reload'\n\nexport const SOFT_NAV_FAIL = 'soft-nav:fail'\nexport const SOFT_NAV_FAIL_REFERRER = 'soft-nav:fail-referrer'\nexport const SOFT_NAV_REFERRER = 'soft-nav:referrer'\nexport const SOFT_NAV_MARK = 'soft-nav:marker'\nexport const SOFT_NAV_REACT_APP_NAME = 'soft-nav:react-app-name'\nexport const SOFT_NAV_LATEST_MECHANISM = 'soft-nav:latest-mechanism'\n\nexport function clearSoftNav() {\n  setItem(SOFT_NAV_MARK, '0')\n  removeItem(SOFT_NAV_REFERRER)\n  removeItem(SOFT_NAV_FAIL)\n  removeItem(SOFT_NAV_FAIL_REFERRER)\n  removeItem(SOFT_NAV_REACT_APP_NAME)\n  removeItem(SOFT_NAV_LATEST_MECHANISM)\n}\n\nexport function setSoftNavMechanism(mechanism: SoftNavMechanism) {\n  setItem(SOFT_NAV_MARK, mechanism)\n}\n\nexport function unsetSoftNav() {\n  setItem(SOFT_NAV_MARK, '0')\n}\n\nexport function inSoftNav() {\n  const softNav = getItem(SOFT_NAV_MARK)\n  return softNav && softNav !== '0'\n}\n\nexport function getSoftNavMechanism(): SoftNavMechanism {\n  return getItem(SOFT_NAV_MARK) as SoftNavMechanism\n}\n\nexport function hasSoftNavFailure() {\n  return Boolean(getSoftNavFailReason())\n}\n\nexport function getSoftNavFailReason() {\n  return getItem(SOFT_NAV_FAIL)\n}\n\nexport function setSoftNavFailReason(reason: string) {\n  setItem(SOFT_NAV_FAIL, reason || DEFAULT_SOFT_NAV_ERROR_REASON)\n  setItem(SOFT_NAV_FAIL_REFERRER, window.location.href)\n}\n\nexport function setSoftNavReferrer() {\n  setItem(SOFT_NAV_REFERRER, window.location.href)\n}\n\nexport function getSoftNavReferrer() {\n  return getItem(SOFT_NAV_REFERRER) || document.referrer\n}\n\nexport function setSoftNavReactAppName() {\n  const appName = getCurrentReactAppName()\n\n  if (appName) {\n    setItem(SOFT_NAV_REACT_APP_NAME, appName)\n  } else {\n    removeItem(SOFT_NAV_REACT_APP_NAME)\n  }\n}\n\nexport function getSoftNavReactAppName() {\n  return getItem(SOFT_NAV_REACT_APP_NAME)\n}\n\nexport function getCurrentReactAppName() {\n  if (document.querySelector('meta[name=\"ui\"]')) return 'ui'\n\n  return document.querySelector('react-app')?.getAttribute('app-name')\n}\n\nexport function setLatestMechanism(mechanism: SoftNavMechanism) {\n  setItem(SOFT_NAV_LATEST_MECHANISM, mechanism)\n}\n\nexport function getLatestMechanism() {\n  return getItem(SOFT_NAV_LATEST_MECHANISM) as SoftNavMechanism\n}\n","// When using SSR, browser globals are not available. If you try to use them, Node.js will throw an error\ntype SSRSafeLocation = Pick<Location, 'pathname' | 'origin' | 'search' | 'hash' | 'href'>\n\n// eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\nexport const ssrSafeDocument = typeof document === 'undefined' ? undefined : document\n// eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\nexport const ssrSafeWindow = typeof window === 'undefined' ? undefined : window\n// eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\nexport const ssrSafeHistory = typeof history === 'undefined' ? undefined : history\n\nexport const ssrSafeLocation: SSRSafeLocation =\n  // eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\n  typeof location === 'undefined' ? {pathname: '', origin: '', search: '', hash: '', href: ''} : location\n\nexport function setLocation(url: string) {\n  // eslint-disable-next-line no-restricted-syntax\n  const parsedURL: SSRSafeLocation = new URL(url)\n  const {pathname, origin, search, hash} = parsedURL\n\n  Object.assign(ssrSafeLocation, {pathname, origin, search, hash})\n}\n","import {ssrSafeDocument} from './ssr-globals'\n\n/***\n * Are we rendering on the server?\n */\nexport const IS_SERVER = typeof ssrSafeDocument === 'undefined'\n\n/***\n * Are we rendering on the client?\n */\nexport const IS_BROWSER = !IS_SERVER\n\n/***\n * This helper returns `true` if:\n * - we are rendering on the server\n * - we are on the client, and the app has been hydrated from a server-render\n */\nexport function wasServerRendered() {\n  if (IS_SERVER) {\n    return true\n  }\n\n  return Boolean(ssrSafeDocument!.querySelector('react-app[data-ssr=\"true\"]'))\n}\n","import {ssrSafeDocument} from '@github-ui/ssr-utils'\nimport {loaded} from '@github-ui/document-ready'\nimport {bundler} from '@github-ui/runtime-environment'\nimport {isFeatureEnabled} from '@github-ui/feature-flags'\nimport {throttle} from '@github/mini-throttle'\n\nlet stats: PlatformBrowserStat[] = []\nconst chunkSize = 64 * 1024\n\nexport function sendStats(stat: PlatformBrowserStat, flushImmediately = false, samplingProbability = 0.5): void {\n  if (isFeatureEnabled('BROWSER_STATS_DISABLED') === true) {\n    return\n  }\n  if (samplingProbability < 0 || samplingProbability > 1) {\n    throw new RangeError('Sampling probability must be between 0 and 1')\n  }\n\n  if (stat.timestamp === undefined) stat.timestamp = new Date().getTime()\n  stat.loggedIn = isLoggedIn()\n  stat.staff = isStaff()\n  stat.bundler = bundler\n  if (Math.random() < samplingProbability) {\n    stats.push(stat)\n  }\n\n  if (flushImmediately) {\n    flushStats()\n  } else {\n    throttledScheduleSendStats()\n  }\n}\n\nlet queued: number | null = null\n\nconst throttledScheduleSendStats = throttle(async function scheduleSendStats() {\n  await loaded\n  if (queued == null) {\n    queued = window.requestIdleCallback(flushStats)\n  }\n}, 5000)\n\nfunction flushStats() {\n  queued = null\n  if (!stats.length) {\n    return\n  }\n\n  const url = ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"browser-stats-url\"]')?.content\n  if (!url) {\n    return\n  }\n\n  const batches = getBatches(stats)\n\n  for (const batch of batches) {\n    safeSend(url, `{\"stats\": [${batch.join(',')}] }`)\n  }\n\n  stats = []\n}\n\n// getBatches breaks up the list of stats into smaller batches\n// that are less than 64kb in size. This is to avoid hitting the\n// size limit of the beacon API.\nfunction getBatches(items: PlatformBrowserStat[]): string[][] {\n  const batches: string[][] = []\n  const itemStrings = items.map(item => JSON.stringify(item))\n\n  while (itemStrings.length > 0) {\n    batches.push(makeBatch(itemStrings))\n  }\n\n  return batches\n}\n\n// makeBatch walks the items and collects batches of items that are within\n// the 64kb limit. If an item is too big to fit in a batch, it is sent alone.\nfunction makeBatch(itemStrings: string[]): string[] {\n  const firstItem = itemStrings.shift()!\n  const batch: string[] = [firstItem]\n  let size = firstItem.length\n\n  while (itemStrings.length > 0 && size <= chunkSize) {\n    const nextItemSize = itemStrings[0]!.length\n\n    if (size + nextItemSize <= chunkSize) {\n      const itemString = itemStrings.shift()!\n      batch.push(itemString)\n      size += nextItemSize\n    } else {\n      break\n    }\n  }\n\n  return batch\n}\n\nfunction safeSend(url: string, data: string) {\n  try {\n    if (navigator.sendBeacon) {\n      navigator.sendBeacon(url, data)\n    }\n  } catch {\n    // Silently ignore errors: https://github.com/github/github/issues/178088#issuecomment-829936461\n  }\n}\n\nfunction isLoggedIn(): boolean {\n  return !!ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"user-login\"]')?.content\n}\n\nexport function isStaff(): boolean {\n  return !!ssrSafeDocument?.head?.querySelector<HTMLMetaElement>('meta[name=\"user-staff\"]')?.content\n}\n\n// Flush stats before users navigate away from the page\nssrSafeDocument?.addEventListener('pagehide', flushStats)\nssrSafeDocument?.addEventListener('visibilitychange', flushStats)\n","import {isFeatureEnabled} from '@github-ui/feature-flags'\nimport {sendStats} from '@github-ui/stats'\n// eslint-disable-next-line no-restricted-imports\nimport {reportError} from '@github-ui/failbot'\nimport dompurify from 'dompurify'\nimport {sendEvent} from '@github-ui/hydro-analytics'\n\nexport class TrustedTypesPolicyError extends Error {}\n\ninterface PolicyParam {\n  policy: () => string\n  policyName: string\n  fallback: string\n  fallbackOnError?: boolean\n  sanitize?: boolean // report-only mode for now\n  silenceErrorReporting?: boolean\n}\n\nfunction apply({\n  policy,\n  policyName,\n  fallback,\n  fallbackOnError = false,\n  sanitize,\n  silenceErrorReporting = false,\n}: PolicyParam): string {\n  try {\n    if (isFeatureEnabled('BYPASS_TRUSTED_TYPES_POLICY_RULES')) return fallback\n    sendStats({incrementKey: 'TRUSTED_TYPES_POLICY_CALLED', trustedTypesPolicyName: policyName}, false, 0.1)\n    const policyOutput = policy()\n    if (sanitize) {\n      new Promise(resolve => {\n        const startTime = window.performance.now()\n        const sanitized = dompurify.sanitize(policyOutput, {FORBID_ATTR: []})\n        const endTime = window.performance.now()\n        const executionTime = endTime - startTime\n        if (policyOutput.length !== sanitized.length) {\n          const err = new Error('Trusted Types policy output sanitized')\n          const stack = err.stack?.slice(0, 1000)\n          const output = policyOutput.slice(0, 250)\n          sendEvent('trusted_types_policy.sanitize', {\n            policyName,\n            output,\n            stack,\n            outputLength: policyOutput.length,\n            sanitizedLength: sanitized.length,\n            executionTime,\n          })\n          resolve(policyOutput)\n        }\n      })\n    }\n    return policyOutput\n  } catch (e) {\n    if (e instanceof TrustedTypesPolicyError) throw e\n    if (!silenceErrorReporting) reportError(e)\n    sendStats({incrementKey: 'TRUSTED_TYPES_POLICY_ERROR', trustedTypesPolicyName: policyName})\n    if (!fallbackOnError) throw e\n  }\n\n  return fallback\n}\n\nexport const trustedTypesPolicy = {apply}\n","/* eslint no-restricted-globals: ['off', '__TRUSTED_TYPE_POLICIES__'] */\nimport {ssrSafeDocument} from '@github-ui/ssr-utils'\nimport {sendStats} from '@github-ui/stats'\n\n/*\n * Tinyfill for trusted types\n */\n\ninterface GHTrustedTypePolicyOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createHTML: (input: string, ...args: any[]) => string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createScript: (input: string, ...args: any[]) => string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createScriptURL: (input: string, ...args: any[]) => string\n}\n\ninterface GHTrustedTypePolicyWithName extends GHTrustedTypePolicyOptions {\n  name: string\n}\n\nfunction unimplemented(functionName: string) {\n  return () => {\n    throw new TypeError(`The policy does not implement the function ${functionName}`)\n  }\n}\n\nconst fallbacks = {\n  createHTML: unimplemented('createHTML'),\n  createScript: unimplemented('createScript'),\n  createScriptURL: unimplemented('createScriptURL'),\n}\n\nconst tinyfill = {\n  createPolicy: (name: string, rules: Partial<GHTrustedTypePolicyOptions>): GHTrustedTypePolicyWithName => ({\n    name,\n    ...fallbacks,\n    ...rules,\n  }),\n}\n\ntype TrustedTypesPolicies = Map<string, GHTrustedTypePolicyOptions>\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var trustedTypes: typeof tinyfill | undefined\n  // We need to store the policies in a global variable so that they accurately track the global policy store in the\n  // browser. This prevents false misses when there is more than one instance of this module loaded on the page.\n  // eslint-disable-next-line no-var\n  var __TRUSTED_TYPE_POLICIES__: TrustedTypesPolicies\n}\n\nconst registeredPolicies: TrustedTypesPolicies = (globalThis.__TRUSTED_TYPE_POLICIES__ ??= new Map())\n\n// eslint-disable-next-line compat/compat\nconst trustedTypes = globalThis.trustedTypes ?? tinyfill\n\nexport const ghTrustedTypes = {\n  createPolicy: (name: string, rules: Partial<GHTrustedTypePolicyOptions>): GHTrustedTypePolicyWithName => {\n    if (registeredPolicies.has(name)) {\n      sendStats({\n        incrementKey: 'TRUSTED_TYPES_POLICY_INITIALIZED_TWICE',\n      })\n      return registeredPolicies.get(name) as GHTrustedTypePolicyWithName\n    } else {\n      const policy = Object.freeze(trustedTypes.createPolicy(name, rules))\n      registeredPolicies.set(name, policy)\n      return policy\n    }\n  },\n}\n\n// This export is only for testing. Do not import in production code.\nexport const registeredPoliciesForTesting = registeredPolicies\nexport const tinyfillForTesting = tinyfill\n\n/*\n *\n * This is a temporary warning to indicate to hubbers that the following errors are expected and safe to ignore.\n *\n */\nlet hasWarnedHubberAboutTrustedTypes = false\n\nssrSafeDocument?.addEventListener('securitypolicyviolation', (e: SecurityPolicyViolationEvent) => {\n  if (e.violatedDirective === 'require-trusted-types-for' && !hasWarnedHubberAboutTrustedTypes) {\n    // eslint-disable-next-line no-console\n    console.warn(`Hi fellow Hubber!\n    You're probably seeing a Report Only Trusted Types error near this message. This is intended behaviour, staff-only,\n    does not impact application control flow, and is used solely for statistic collection. Unfortunately we\n    can't gather these statistics without adding the above warnings to your console. Sorry about that!\n    Feel free to drop by #prodsec-engineering if you have any additional questions about Trusted Types or CSP.`)\n    hasWarnedHubberAboutTrustedTypes = true\n  }\n})\n"],"names":["ReloadAfterPollingElement","HTMLElement","connectedCallback","url","URL","window","location","href","origin","params","URLSearchParams","search","toString","fetchPoll","reload","controller","queryLast","selector","list","document","querySelectorAll","length","requestUri","protocol","host","pagePathname","locationOverride","content","pathname","pageQuery","stripParams","extraParams","meta","names","split","replace","env","getEnv","getLocale","locale","loadEnv","envTag","getElementById","JSON","parse","textContent","error","console","ready","ssrSafeDocument","readyState","Promise","resolve","addEventListener","loaded","ssrSafeWindow","extensionErrors","errorsReported","loadTime","Date","now","EXPECTED_NETWORK_ERROR_MESSAGES","Set","isExpectedError","name","has","message","startsWith","reportError","context","isFeatureEnabled","Error","isIgnoredNonError","ignoredErrorMessages","some","includes","code","errorForStackTrace","serializedErrorValue","serializeNonError","stringify","report","errorContext","type","value","stacktrace","catalogService","undefined","formatError","unloaded","isSupported","head","querySelector","stack","frame","extensions","test","filename","function","fetch","method","body","Object","assign","sanitizedUrl","referrer","getSoftNavReferrer","timeSinceLoad","Math","round","user","pageUser","login","clientId","getOrCreateClientId","bundler","ui","Boolean","map","file","String","methodName","lineno","lineNumber","colno","column","BroadcastChannel","sharedWorkerErrorChannel","event","data","getEnabledFeaturesSet","features","featureFlags","feature","toLowerCase","featuresSet","IS_SERVER","memoize","getEnabledFeatures","Array","from","featureFlag","ResponseError","constructor","response","status","policyName","serverXSafeHTMLPolicy","ghTrustedTypes","createPolicy","createHTML","s","trustedTypesPolicy","apply","policy","verifyResponseHtmlSafeNonce","nonces","allowJson","contentType","headers","get","responseNonce","getDocumentHtmlSafeNonces","fallback","silenceErrorReporting","fetchSafeDocumentFragment","options","request","Request","append","self","statusText","trustedHTML","text","parseHTML","timeBetweenRequests","acceptedStatusCodes","pollStatusCodes","poll","wait","setTimeout","fetchRetry","fetchOptions","max","attempt","retry","reject","err","result","hydroAnalyticsClient","getItem","safeStorage","dimensionPrefix","MARKETING_PARAMS","getOptionsFromMeta","baseContext","AnalyticsClient","_","extendBaseContext","key","app_id","event_url","entries","visitorMeta","atob","staff","isStaff","sendPageView","sendEvent","service","cleanContext","stringifyObjectValues","obj","fromEntries","k","v","temporaryPermissiveParseHTMLPolicy","sanitize","fallbackOnError","html","template","createElement","innerHTML","importNode","runtimeEnvironment","isEnterprise","BUNDLER","NoOpStorage","setItem","removeItem","clear","storageKey","throwQuotaErrorsOnSet","global","deserialize","serialize","storage","emitStats","sendCacheStats","sendStats","incrementKey","ttl","expiryKey","getTime","expiry","Number","jsonSafeStorage","storageBackend","DEFAULT_SOFT_NAV_ERROR_REASON","SOFT_NAV_FAIL","SOFT_NAV_FAIL_REFERRER","SOFT_NAV_REFERRER","SOFT_NAV_MARK","SOFT_NAV_REACT_APP_NAME","SOFT_NAV_LATEST_MECHANISM","clearSoftNav","setSoftNavMechanism","mechanism","unsetSoftNav","inSoftNav","softNav","getSoftNavMechanism","hasSoftNavFailure","getSoftNavFailReason","setSoftNavFailReason","reason","setSoftNavReferrer","setSoftNavReactAppName","appName","getCurrentReactAppName","getSoftNavReactAppName","getAttribute","setLatestMechanism","getLatestMechanism","ssrSafeHistory","history","ssrSafeLocation","hash","IS_BROWSER","wasServerRendered","stats","stat","flushImmediately","samplingProbability","timestamp","loggedIn","random","push","flushStats","throttledScheduleSendStats","queued","throttle","requestIdleCallback","batch","getBatches","items","batches","itemStrings","item","makeBatch","firstItem","shift","size","nextItemSize","itemString","safeSend","navigator","sendBeacon","join","TrustedTypesPolicyError","trustedTypesPolicyName","policyOutput","startTime","performance","sanitized","dompurify","FORBID_ATTR","endTime","slice","output","outputLength","sanitizedLength","executionTime","e","globalThis","unimplemented","functionName","fallbacks","createScript","createScriptURL","registeredPolicies","__TRUSTED_TYPE_POLICIES__","Map","trustedTypes","rules","freeze","set","hasWarnedHubberAboutTrustedTypes","violatedDirective","warn"],"sourceRoot":""}
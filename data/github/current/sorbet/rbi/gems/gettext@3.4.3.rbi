# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `gettext` gem.
# Please instead update this file by running `bin/tapioca gem gettext`.

# source://gettext//lib/gettext/version.rb#11
module GetText
  extend ::GetText

  # makes dynamic translation messages readable for the gettext parser.
  # <tt>_(fruit)</tt> cannot be understood by the gettext parser. To help the parser find all your translations,
  # you can add <tt>fruit = N_("Apple")</tt> which does not translate, but tells the parser: "Apple" needs translation.
  # * msgid: the message id.
  # * Returns: msgid.
  #
  # source://gettext//lib/gettext.rb#234
  def N_(msgid); end

  # This is same function as N_ but for ngettext.
  # * msgid: the message id.
  # * msgid_plural: the plural message id.
  # * Returns: msgid.
  #
  # source://gettext//lib/gettext.rb#242
  def Nn_(msgid, msgid_plural); end

  # call-seq:
  #   gettext(msgid)
  #   _(msgid)
  #
  # Translates msgid and return the message.
  # This doesn't make a copy of the message.
  #
  # You need to use String#dup if you want to modify the return value
  # with destructive functions.
  #
  # (e.g.1) _("Hello ").dup << "world"
  #
  # But e.g.1 should be rewrite to:
  #
  # (e.g.2) _("Hello %{val}") % {:val => "world"}
  #
  # Because the translator may want to change the position of "world".
  #
  # * msgid: the message id.
  # * Returns: localized text by msgid. If there are not binded mo-file, it will return msgid.
  #
  # source://gettext//lib/gettext.rb#117
  def _(msgid); end

  # bindtextdomain(domainname, options = {})
  #
  # Bind a text domain(%{path}/%{locale}/LC_MESSAGES/%{domainname}.mo) to
  # your program.
  # Normally, the texdomain scope becomes the class/module(and parent
  # classes/included modules).
  #
  # * domainname: the text domain name.
  # * options: options as an Hash.
  #   * :path - the path to the mo-files. When the value is nil, it will search default paths such as
  #     /usr/share/locale, /usr/local/share/locale)
  #   * :output_charset - The output charset. Same with GetText.set_output_charset. Usually, L10n
  #     library doesn't use this option. Application may use this once.
  # * Returns: the GetText::TextDomainManager.
  #
  # source://gettext//lib/gettext.rb#53
  def bindtextdomain(domainname, *options); end

  # Includes GetText module and bind a text domain to a class.
  # * klass: the target ruby class.
  # * domainname: the text domain name.
  # * options: options as an Hash. See GetText.bindtextdomain.
  #
  # source://gettext//lib/gettext.rb#61
  def bindtextdomain_to(klass, domainname, *options); end

  # Set the locale to the current thread.
  # Note that if #set_locale is set, this value is ignored.
  # If you need, set_locale(nil); set_current_locale(lang)
  #
  # source://gettext//lib/gettext.rb#273
  def current_locale=(lang); end

  # call-seq:
  #   gettext(msgid)
  #   _(msgid)
  #
  # Translates msgid and return the message.
  # This doesn't make a copy of the message.
  #
  # You need to use String#dup if you want to modify the return value
  # with destructive functions.
  #
  # (e.g.1) _("Hello ").dup << "world"
  #
  # But e.g.1 should be rewrite to:
  #
  # (e.g.2) _("Hello %{val}") % {:val => "world"}
  #
  # Because the translator may want to change the position of "world".
  #
  # * msgid: the message id.
  # * Returns: localized text by msgid. If there are not binded mo-file, it will return msgid.
  #
  # source://gettext//lib/gettext.rb#117
  def gettext(msgid); end

  # source://gettext//lib/gettext.rb#277
  def locale; end

  # Set the locale. This value forces the locale whole the programs.
  # This method calls Locale.set_app_language_tags, Locale.default, Locale.current.
  # Use Locale methods if you need to handle locales more flexible.
  #
  # source://gettext//lib/gettext.rb#264
  def locale=(lang); end

  # call-seq:
  #   ngettext(msgid, msgid_plural, n)
  #   ngettext(msgids, n)  # msgids = [msgid, msgid_plural]
  #   n_(msgid, msgid_plural, n)
  #   n_(msgids, n)  # msgids = [msgid, msgid_plural]
  #
  # The ngettext is similar to the gettext function as it finds the message catalogs in the same way.
  # But it takes two extra arguments for plural form.
  #
  # * msgid: the singular form.
  # * msgid_plural: the plural form.
  # * n: a number used to determine the plural form.
  # * Returns: the localized text which key is msgid_plural if n is plural(follow plural-rule) or msgid.
  #   "plural-rule" is defined in po-file.
  #
  # source://gettext//lib/gettext.rb#169
  def n_(msgid, msgid_plural, n = T.unsafe(nil)); end

  # call-seq:
  #   ngettext(msgid, msgid_plural, n)
  #   ngettext(msgids, n)  # msgids = [msgid, msgid_plural]
  #   n_(msgid, msgid_plural, n)
  #   n_(msgids, n)  # msgids = [msgid, msgid_plural]
  #
  # The ngettext is similar to the gettext function as it finds the message catalogs in the same way.
  # But it takes two extra arguments for plural form.
  #
  # * msgid: the singular form.
  # * msgid_plural: the plural form.
  # * n: a number used to determine the plural form.
  # * Returns: the localized text which key is msgid_plural if n is plural(follow plural-rule) or msgid.
  #   "plural-rule" is defined in po-file.
  #
  # source://gettext//lib/gettext.rb#169
  def ngettext(msgid, msgid_plural, n = T.unsafe(nil)); end

  # call-seq:
  #   npgettext(msgctxt, msgid, msgid_plural, n)
  #   npgettext(msgctxt, msgids, n)  # msgids = [msgid, msgid_plural]
  #   np_(msgctxt, msgid, msgid_plural, n)
  #   np_(msgctxt, msgids, n)  # msgids = [msgid, msgid_plural]
  #
  # The npgettext is similar to the nsgettext function.
  #   e.g.) np_("Special", "An apple", "%{num} Apples", num) == ns_("Special|An apple", "%{num} Apples", num)
  # * msgctxt: the message context.
  # * msgid: the singular form.
  # * msgid_plural: the plural form.
  # * n: a number used to determine the plural form.
  # * Returns: the localized text which key is msgid_plural if n is plural(follow plural-rule) or msgid.
  #   "plural-rule" is defined in po-file.
  #
  # source://gettext//lib/gettext.rb#206
  def np_(msgctxt, msgids, arg2 = T.unsafe(nil), arg3 = T.unsafe(nil)); end

  # call-seq:
  #   npgettext(msgctxt, msgid, msgid_plural, n)
  #   npgettext(msgctxt, msgids, n)  # msgids = [msgid, msgid_plural]
  #   np_(msgctxt, msgid, msgid_plural, n)
  #   np_(msgctxt, msgids, n)  # msgids = [msgid, msgid_plural]
  #
  # The npgettext is similar to the nsgettext function.
  #   e.g.) np_("Special", "An apple", "%{num} Apples", num) == ns_("Special|An apple", "%{num} Apples", num)
  # * msgctxt: the message context.
  # * msgid: the singular form.
  # * msgid_plural: the plural form.
  # * n: a number used to determine the plural form.
  # * Returns: the localized text which key is msgid_plural if n is plural(follow plural-rule) or msgid.
  #   "plural-rule" is defined in po-file.
  #
  # source://gettext//lib/gettext.rb#206
  def npgettext(msgctxt, msgids, arg2 = T.unsafe(nil), arg3 = T.unsafe(nil)); end

  # call-seq:
  #   nsgettext(msgid, msgid_plural, n, div = "|")
  #   nsgettext(msgids, n, div = "|")  # msgids = [msgid, msgid_plural]
  #   ns_(msgid, msgid_plural, n, div = "|")
  #   ns_(msgids, n, div = "|")  # msgids = [msgid, msgid_plural]
  #
  # The nsgettext is similar to the ngettext.
  # But if there are no localized text,
  # it returns a last part of msgid separeted "div".
  #
  # * msgid: the singular form with "div". (e.g. "Special|An apple")
  # * msgid_plural: the plural form. (e.g. "%{num} Apples")
  # * n: a number used to determine the plural form.
  # * Returns: the localized text which key is msgid_plural if n is plural(follow plural-rule) or msgid.
  #   "plural-rule" is defined in po-file.
  #
  # source://gettext//lib/gettext.rb#188
  def ns_(msgid, msgid_plural, n = T.unsafe(nil), seperator = T.unsafe(nil)); end

  # call-seq:
  #   nsgettext(msgid, msgid_plural, n, div = "|")
  #   nsgettext(msgids, n, div = "|")  # msgids = [msgid, msgid_plural]
  #   ns_(msgid, msgid_plural, n, div = "|")
  #   ns_(msgids, n, div = "|")  # msgids = [msgid, msgid_plural]
  #
  # The nsgettext is similar to the ngettext.
  # But if there are no localized text,
  # it returns a last part of msgid separeted "div".
  #
  # * msgid: the singular form with "div". (e.g. "Special|An apple")
  # * msgid_plural: the plural form. (e.g. "%{num} Apples")
  # * n: a number used to determine the plural form.
  # * Returns: the localized text which key is msgid_plural if n is plural(follow plural-rule) or msgid.
  #   "plural-rule" is defined in po-file.
  #
  # source://gettext//lib/gettext.rb#188
  def nsgettext(msgid, msgid_plural, n = T.unsafe(nil), seperator = T.unsafe(nil)); end

  # Gets the current output_charset which is set using GetText.set_output_charset.
  # * Returns: output_charset.
  #
  # source://gettext//lib/gettext.rb#257
  def output_charset; end

  # Sets charset(String) such as "euc-jp", "sjis", "CP932", "utf-8", ...
  # You shouldn't use this in your own Libraries.
  # * charset: an output_charset
  # * Returns: self
  #
  # source://gettext//lib/gettext.rb#250
  def output_charset=(charset); end

  # call-seq:
  #   pgettext(msgctxt, msgid)
  #   p_(msgctxt, msgid)
  #
  # Translates msgid with msgctxt. This methods is similer with s_().
  #  e.g.) p_("File", "New")   == s_("File|New")
  #        p_("File", "Open")  == s_("File|Open")
  #
  # * msgctxt: the message context.
  # * msgid: the message id.
  # * Returns: the localized text by msgid. If there are no localized text,
  #   it returns msgid.
  # See: http://www.gnu.org/software/autoconf/manual/gettext/Contexts.html
  # This is the workaround to conflict p_ methods with the xx("double x") library.
  # http://rubyforge.org/projects/codeforpeople/
  #
  # source://gettext//lib/gettext.rb#151
  def p_(msgctxt, msgid); end

  # call-seq:
  #   pgettext(msgctxt, msgid)
  #   p_(msgctxt, msgid)
  #
  # Translates msgid with msgctxt. This methods is similer with s_().
  #  e.g.) p_("File", "New")   == s_("File|New")
  #        p_("File", "Open")  == s_("File|Open")
  #
  # * msgctxt: the message context.
  # * msgid: the message id.
  # * Returns: the localized text by msgid. If there are no localized text,
  #   it returns msgid.
  # See: http://www.gnu.org/software/autoconf/manual/gettext/Contexts.html
  #
  # source://gettext//lib/gettext.rb#151
  def pgettext(msgctxt, msgid); end

  # call-seq:
  #   sgettext(msgid, div = '|')
  #   s_(msgid, div = '|')
  #
  # Translates msgid, but if there are no localized text,
  # it returns a last part of msgid separeted "div".
  #
  # * msgid: the message id.
  # * separator: separator or nil for no seperation.
  # * Returns: the localized text by msgid. If there are no localized text,
  #   it returns a last part of the msgid separeted by "seperator".
  #   <tt>Movie|Location -> Location</tt>
  # See: http://www.gnu.org/software/gettext/manual/html_mono/gettext.html#SEC151
  #
  # source://gettext//lib/gettext.rb#134
  def s_(msgid, seperator = T.unsafe(nil)); end

  # Set the locale to the current thread.
  # Note that if #set_locale is set, this value is ignored.
  # If you need, set_locale(nil); set_current_locale(lang)
  #
  # source://gettext//lib/gettext.rb#273
  def set_current_locale(lang); end

  # Set the locale. This value forces the locale whole the programs.
  # This method calls Locale.set_app_language_tags, Locale.default, Locale.current.
  # Use Locale methods if you need to handle locales more flexible.
  #
  # source://gettext//lib/gettext.rb#264
  def set_locale(lang); end

  # Sets charset(String) such as "euc-jp", "sjis", "CP932", "utf-8", ...
  # You shouldn't use this in your own Libraries.
  # * charset: an output_charset
  # * Returns: self
  #
  # source://gettext//lib/gettext.rb#250
  def set_output_charset(charset); end

  # call-seq:
  #   sgettext(msgid, div = '|')
  #   s_(msgid, div = '|')
  #
  # Translates msgid, but if there are no localized text,
  # it returns a last part of msgid separeted "div".
  #
  # * msgid: the message id.
  # * separator: separator or nil for no seperation.
  # * Returns: the localized text by msgid. If there are no localized text,
  #   it returns a last part of the msgid separeted by "seperator".
  #   <tt>Movie|Location -> Location</tt>
  # See: http://www.gnu.org/software/gettext/manual/html_mono/gettext.html#SEC151
  #
  # source://gettext//lib/gettext.rb#134
  def sgettext(msgid, seperator = T.unsafe(nil)); end

  # Binds a existed text domain to your program.
  # This is the same function with GetText.bindtextdomain but simpler(and faster) than bindtextdomain.
  # Note that you need to call GetText.bindtextdomain first. If the domainname hasn't bound yet,
  # raises GetText::NoboundTextDomainError.
  # * domainname: a text domain name.
  # * Returns: the GetText::TextDomainManager.
  #
  # source://gettext//lib/gettext.rb#82
  def textdomain(domainname); end

  # Includes GetText module and bind an exsited text domain to a class.
  # See text domain for more detail.
  # * klass: the target ruby class.
  # * domainname: the text domain name.
  #
  # @raise [NoboundTextDomainError]
  #
  # source://gettext//lib/gettext.rb#91
  def textdomain_to(klass, domainname); end

  class << self
    # source://gettext//lib/gettext.rb#34
    def included(mod); end
  end
end

# For normalize/finding the related classes/modules.
# This is used for realizing the scope of TextDomain.
# (see: http://www.yotabanana.com/hiki/ruby-gettext-scope.html)
#
# source://gettext//lib/gettext/class_info.rb#7
module GetText::ClassInfo
  extend ::GetText::ClassInfo

  # normalize the class name
  # klass should kind of the class, not object.
  #
  # source://gettext//lib/gettext/class_info.rb#11
  def normalize_class(klass); end

  # Returns the classes which related to klass
  # (klass's ancestors, included modules and nested modules)
  #
  # source://gettext//lib/gettext/class_info.rb#56
  def related_classes(klass, all_classes = T.unsafe(nil)); end

  # Internal method for related_classes.
  #
  # source://gettext//lib/gettext/class_info.rb#24
  def related_classes_internal(klass, all_classes = T.unsafe(nil), analyzed_classes = T.unsafe(nil)); end

  # source://gettext//lib/gettext/class_info.rb#19
  def root_ancestors; end
end

# Treats locale-path for mo-files.
#
# source://gettext//lib/gettext/locale_path.rb#17
class GetText::LocalePath
  # Creates a new GetText::TextDomain.
  # * name: the textdomain name.
  # * topdir: the locale path ("%{topdir}/%{lang}/LC_MESSAGES/%{name}.mo") or nil.
  #
  # @return [LocalePath] a new instance of LocalePath
  #
  # source://gettext//lib/gettext/locale_path.rb#78
  def initialize(name, topdir = T.unsafe(nil)); end

  # Gets the current path.
  # * lang: a Locale::Tag.
  #
  # source://gettext//lib/gettext/locale_path.rb#105
  def current_path(lang); end

  # Returns the value of attribute locale_paths.
  #
  # source://gettext//lib/gettext/locale_path.rb#73
  def locale_paths; end

  # Returns the value of attribute supported_locales.
  #
  # source://gettext//lib/gettext/locale_path.rb#73
  def supported_locales; end

  class << self
    # Add default locale path. Usually you should use GetText.add_default_locale_path instead.
    # * path: a new locale path. (e.g.) "/usr/share/locale/%{lang}/LC_MESSAGES/%{name}.mo"
    #   ('locale' => "ja_JP", 'name' => "textdomain")
    # * Returns: the new DEFAULT_LOCALE_PATHS
    #
    # source://gettext//lib/gettext/locale_path.rb#38
    def add_default_rule(path); end

    # Returns path rules as an Array.
    # (e.g.) ["/usr/share/locale/%{lang}/LC_MESSAGES/%{name}.mo", ...]
    #
    # source://gettext//lib/gettext/locale_path.rb#44
    def default_path_rules; end
  end
end

# The default locale paths.
#
# source://gettext//lib/gettext/locale_path.rb#19
GetText::LocalePath::CONFIG_PREFIX = T.let(T.unsafe(nil), String)

# source://gettext//lib/gettext/locale_path.rb#31
GetText::LocalePath::DEFAULT_RULES = T.let(T.unsafe(nil), Array)

# source://gettext//lib/gettext/mo.rb#25
class GetText::MO < ::Hash
  # @return [MO] a new instance of MO
  #
  # source://gettext//lib/gettext/mo.rb#56
  def initialize(output_charset = T.unsafe(nil)); end

  # Returns the value of attribute charset.
  #
  # source://gettext//lib/gettext/mo.rb#303
  def charset; end

  # Returns the value of attribute filename.
  #
  # source://gettext//lib/gettext/mo.rb#28
  def filename; end

  # From gettext-0.12.1/gettext-runtime/intl/hash-string.h
  # Defines the so called `hashpjw' function by P.J. Weinberger
  # [see Aho/Sethi/Ullman, COMPILERS: Principles, Techniques and Tools,
  # 1986, 1987 Bell Telephone Laboratories, Inc.]
  #
  # source://gettext//lib/gettext/mo.rb#182
  def hash_string(str); end

  # Returns the value of attribute last_modified.
  #
  # source://gettext//lib/gettext/mo.rb#302
  def last_modified; end

  # Sets the attribute last_modified
  #
  # @param value the value to set the attribute last_modified to.
  #
  # source://gettext//lib/gettext/mo.rb#302
  def last_modified=(_arg0); end

  # Returns the value of attribute little_endian.
  #
  # source://gettext//lib/gettext/mo.rb#302
  def little_endian; end

  # Sets the attribute little_endian
  #
  # @param value the value to set the attribute little_endian to.
  #
  # source://gettext//lib/gettext/mo.rb#302
  def little_endian=(_arg0); end

  # source://gettext//lib/gettext/mo.rb#82
  def load(arg); end

  # source://gettext//lib/gettext/mo.rb#270
  def load_from_file(filename); end

  # source://gettext//lib/gettext/mo.rb#97
  def load_from_stream(io); end

  # source://gettext//lib/gettext/mo.rb#173
  def next_prime(seed); end

  # Returns the value of attribute nplurals.
  #
  # source://gettext//lib/gettext/mo.rb#303
  def nplurals; end

  # Returns the value of attribute path.
  #
  # source://gettext//lib/gettext/mo.rb#302
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://gettext//lib/gettext/mo.rb#302
  def path=(_arg0); end

  # Returns the value of attribute plural.
  #
  # source://gettext//lib/gettext/mo.rb#303
  def plural; end

  # source://gettext//lib/gettext/mo.rb#290
  def plural_as_proc; end

  # @return [Boolean]
  #
  # source://gettext//lib/gettext/mo.rb#169
  def prime?(number); end

  # source://gettext//lib/gettext/mo.rb#282
  def save_to_file(filename); end

  # Save data as little endian format.
  #
  # source://gettext//lib/gettext/mo.rb#198
  def save_to_stream(io); end

  # source://gettext//lib/gettext/mo.rb#286
  def set_comment(msgid_or_sym, comment); end

  # source://gettext//lib/gettext/mo.rb#66
  def store(msgid, msgstr, options); end

  # source://gettext//lib/gettext/mo.rb#71
  def update!; end

  private

  # source://gettext//lib/gettext/mo.rb#306
  def convert_encoding(string, original_string); end

  # source://gettext//lib/gettext/mo.rb#320
  def generate_original_string(msgid, options); end

  class << self
    # source://gettext//lib/gettext/mo.rb#51
    def open(arg = T.unsafe(nil), output_charset = T.unsafe(nil)); end
  end
end

# source://gettext//lib/gettext/mo.rb#177
GetText::MO::HASHWORDBITS = T.let(T.unsafe(nil), Integer)

# source://gettext//lib/gettext/mo.rb#30
class GetText::MO::Header < ::Struct
  # Returns the value of attribute hash_table_offset
  #
  # @return [Object] the current value of hash_table_offset
  def hash_table_offset; end

  # Sets the attribute hash_table_offset
  #
  # @param value [Object] the value to set the attribute hash_table_offset to.
  # @return [Object] the newly set value
  def hash_table_offset=(_); end

  # Returns the value of attribute hash_table_size
  #
  # @return [Object] the current value of hash_table_size
  def hash_table_size; end

  # Sets the attribute hash_table_size
  #
  # @param value [Object] the value to set the attribute hash_table_size to.
  # @return [Object] the newly set value
  def hash_table_size=(_); end

  # Returns the value of attribute magic
  #
  # @return [Object] the current value of magic
  def magic; end

  # Sets the attribute magic
  #
  # @param value [Object] the value to set the attribute magic to.
  # @return [Object] the newly set value
  def magic=(_); end

  # Returns the value of attribute nstrings
  #
  # @return [Object] the current value of nstrings
  def nstrings; end

  # Sets the attribute nstrings
  #
  # @param value [Object] the value to set the attribute nstrings to.
  # @return [Object] the newly set value
  def nstrings=(_); end

  # Returns the value of attribute orig_table_offset
  #
  # @return [Object] the current value of orig_table_offset
  def orig_table_offset; end

  # Sets the attribute orig_table_offset
  #
  # @param value [Object] the value to set the attribute orig_table_offset to.
  # @return [Object] the newly set value
  def orig_table_offset=(_); end

  # Returns the value of attribute revision
  #
  # @return [Object] the current value of revision
  def revision; end

  # Sets the attribute revision
  #
  # @param value [Object] the value to set the attribute revision to.
  # @return [Object] the newly set value
  def revision=(_); end

  # Returns the value of attribute translated_table_offset
  #
  # @return [Object] the current value of translated_table_offset
  def translated_table_offset; end

  # Sets the attribute translated_table_offset
  #
  # @param value [Object] the value to set the attribute translated_table_offset to.
  # @return [Object] the newly set value
  def translated_table_offset=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# The following are only used in .mo files
# with minor revision >= 1.
#
# source://gettext//lib/gettext/mo.rb#40
class GetText::MO::HeaderRev1 < ::GetText::MO::Header
  # Returns the value of attribute n_sysdep_segments.
  #
  # source://gettext//lib/gettext/mo.rb#41
  def n_sysdep_segments; end

  # Sets the attribute n_sysdep_segments
  #
  # @param value the value to set the attribute n_sysdep_segments to.
  #
  # source://gettext//lib/gettext/mo.rb#41
  def n_sysdep_segments=(_arg0); end

  # Returns the value of attribute n_sysdep_strings.
  #
  # source://gettext//lib/gettext/mo.rb#41
  def n_sysdep_strings; end

  # Sets the attribute n_sysdep_strings
  #
  # @param value the value to set the attribute n_sysdep_strings to.
  #
  # source://gettext//lib/gettext/mo.rb#41
  def n_sysdep_strings=(_arg0); end

  # Returns the value of attribute orig_sysdep_tab_offset.
  #
  # source://gettext//lib/gettext/mo.rb#41
  def orig_sysdep_tab_offset; end

  # Sets the attribute orig_sysdep_tab_offset
  #
  # @param value the value to set the attribute orig_sysdep_tab_offset to.
  #
  # source://gettext//lib/gettext/mo.rb#41
  def orig_sysdep_tab_offset=(_arg0); end

  # Returns the value of attribute sysdep_segments_offset.
  #
  # source://gettext//lib/gettext/mo.rb#41
  def sysdep_segments_offset; end

  # Sets the attribute sysdep_segments_offset
  #
  # @param value the value to set the attribute sysdep_segments_offset to.
  #
  # source://gettext//lib/gettext/mo.rb#41
  def sysdep_segments_offset=(_arg0); end

  # Returns the value of attribute trans_sysdep_tab_offset.
  #
  # source://gettext//lib/gettext/mo.rb#41
  def trans_sysdep_tab_offset; end

  # Sets the attribute trans_sysdep_tab_offset
  #
  # @param value the value to set the attribute trans_sysdep_tab_offset to.
  #
  # source://gettext//lib/gettext/mo.rb#41
  def trans_sysdep_tab_offset=(_arg0); end
end

# source://gettext//lib/gettext/mo.rb#26
class GetText::MO::InvalidFormat < ::RuntimeError; end

# source://gettext//lib/gettext/mo.rb#48
GetText::MO::MAGIC_BIG_ENDIAN = T.let(T.unsafe(nil), String)

# source://gettext//lib/gettext/mo.rb#49
GetText::MO::MAGIC_LITTLE_ENDIAN = T.let(T.unsafe(nil), String)

# If the text domain isn't bound when calling GetText.textdomain, this error is raised.
#
# source://gettext//lib/gettext.rb#23
class GetText::NoboundTextDomainError < ::RuntimeError
  # @return [NoboundTextDomainError] a new instance of NoboundTextDomainError
  #
  # source://gettext//lib/gettext.rb#24
  def initialize(domainname); end

  # source://gettext//lib/gettext.rb#27
  def message; end
end

# GetText::TextDomain class manages mo-files of a text domain.
#
# Usually, you don't need to use this class directly.
#
# Notice: This class is unstable. APIs will be changed.
#
# source://gettext//lib/gettext/text_domain.rb#25
class GetText::TextDomain
  # Creates a new GetText::TextDomain.
  # * name: the text domain name.
  # * topdir: the locale path ("%{topdir}/%{lang}/LC_MESSAGES/%{name}.mo") or nil.
  # * output_charset: output charset.
  # * Returns: a newly created GetText::TextDomain object.
  #
  # @return [TextDomain] a new instance of TextDomain
  #
  # source://gettext//lib/gettext/text_domain.rb#49
  def initialize(name, topdir = T.unsafe(nil), output_charset = T.unsafe(nil)); end

  # Clear cached mofiles.
  #
  # source://gettext//lib/gettext/text_domain.rb#135
  def clear; end

  # Returns the value of attribute mofiles.
  #
  # source://gettext//lib/gettext/text_domain.rb#28
  def mofiles; end

  # Returns the value of attribute name.
  #
  # source://gettext//lib/gettext/text_domain.rb#29
  def name; end

  # Returns the value of attribute output_charset.
  #
  # source://gettext//lib/gettext/text_domain.rb#27
  def output_charset; end

  # Set output_charset.
  # * charset: output charset.
  #
  # source://gettext//lib/gettext/text_domain.rb#141
  def output_charset=(charset); end

  # Translates the translated string.
  # * lang: Locale::Tag::Simple's subclass.
  # * msgid: the original message.
  # * msgid_plural: the original message(plural).
  # * Returns: the translated string as an Array ([[msgstr1, msgstr2, ...], cond]) or nil.
  #
  # source://gettext//lib/gettext/text_domain.rb#117
  def translate_plural_message(lang, msgid, msgid_plural); end

  # Translates the translated string.
  # * lang: Locale::Tag::Simple's subclass.
  # * msgid: the original message.
  # * Returns: the translated string or nil.
  #
  # source://gettext//lib/gettext/text_domain.rb#60
  def translate_singular_message(lang, msgid); end

  private

  # Load a mo-file from the file.
  # lang is the subclass of Locale::Tag::Simple.
  #
  # source://gettext//lib/gettext/text_domain.rb#149
  def load_mo(lang); end

  # source://gettext//lib/gettext/text_domain.rb#173
  def normalize_charset(charset); end

  class << self
    # Set to cache the mo-file or not.
    # * val: true if cached, otherwise false.
    #
    # source://gettext//lib/gettext/text_domain.rb#40
    def cached=(val); end

    # Cache the mo-file or not.
    # Default is true. If $DEBUG is set then false.
    #
    # @return [Boolean]
    #
    # source://gettext//lib/gettext/text_domain.rb#34
    def cached?; end
  end
end

# source://gettext//lib/gettext/text_domain.rb#109
GetText::TextDomain::DEFAULT_PLURAL_CALC = T.let(T.unsafe(nil), Proc)

# source://gettext//lib/gettext/text_domain.rb#110
GetText::TextDomain::DEFAULT_SINGLE_CALC = T.let(T.unsafe(nil), Proc)

# source://gettext//lib/gettext/text_domain_group.rb#15
class GetText::TextDomainGroup
  # @return [TextDomainGroup] a new instance of TextDomainGroup
  #
  # source://gettext//lib/gettext/text_domain_group.rb#18
  def initialize; end

  # source://gettext//lib/gettext/text_domain_group.rb#22
  def add(text_domain); end

  # Returns the value of attribute text_domains.
  #
  # source://gettext//lib/gettext/text_domain_group.rb#16
  def text_domains; end
end

# source://gettext//lib/gettext/text_domain_manager.rb#19
module GetText::TextDomainManager
  extend ::GetText::TextDomainManager

  # bind text domain to the class.
  #
  # source://gettext//lib/gettext/text_domain_manager.rb#67
  def bind_to(klass, domainname, options = T.unsafe(nil)); end

  # Set the value whether cache messages or not.
  # true to cache messages, otherwise false.
  #
  # Default is true. If $DEBUG is false, messages are not checked even if
  # this value is true.
  #
  # source://gettext//lib/gettext/text_domain_manager.rb#43
  def cached=(val); end

  # Return the cached value.
  #
  # @return [Boolean]
  #
  # source://gettext//lib/gettext/text_domain_manager.rb#49
  def cached?; end

  # for testing.
  #
  # source://gettext//lib/gettext/text_domain_manager.rb#203
  def clear_all_text_domains; end

  # for testing.
  #
  # source://gettext//lib/gettext/text_domain_manager.rb#211
  def clear_caches; end

  # source://gettext//lib/gettext/text_domain_manager.rb#223
  def create_or_find_text_domain(name, path, charset); end

  # source://gettext//lib/gettext/text_domain_manager.rb#216
  def create_or_find_text_domain_group(klass); end

  # for testing.
  #
  # source://gettext//lib/gettext/text_domain_manager.rb#187
  def dump_all_text_domains; end

  # source://gettext//lib/gettext/text_domain_manager.rb#79
  def each_text_domains(klass); end

  # Gets the output charset.
  #
  # source://gettext//lib/gettext/text_domain_manager.rb#54
  def output_charset; end

  # Sets the output charset.The program can have a output charset.
  #
  # source://gettext//lib/gettext/text_domain_manager.rb#59
  def output_charset=(charset); end

  # for testing.
  #
  # source://gettext//lib/gettext/text_domain_manager.rb#196
  def restore_all_text_domains(dumped_all_text_domains); end

  # Find text domain by name
  #
  # source://gettext//lib/gettext/text_domain_manager.rb#34
  def text_domain_pool(domainname); end

  # This function is similar to the get_singular_message function
  # as it finds the message catalogs in the same way.
  # But it takes two extra arguments for plural form.
  # The msgid parameter must contain the singular form of the string to be converted.
  # It is also used as the key for the search in the catalog.
  # The msgid_plural parameter is the plural form.
  # The parameter n is used to determine the plural form.
  # If no message catalog is found msgid1 is returned if n == 1, otherwise msgid2.
  # And if msgid includes "div", it returns a last part of msgid separeted "div".
  #
  # * msgid: the singular form with "div". (e.g. "Special|An apple", "An apple")
  # * msgid_plural: the plural form. (e.g. "%{num} Apples")
  # * n: a number used to determine the plural form.
  # * div: the separator. Default is "|".
  # * Returns: the localized text which key is msgid_plural if n is plural(follow plural-rule) or msgid.
  #   "plural-rule" is defined in po-file.
  #
  # or
  #
  # * [msgid, msgid_plural] : msgid and msgid_plural an Array
  # * n: a number used to determine the plural form.
  # * div: the separator. Default is "|".
  #
  # source://gettext//lib/gettext/text_domain_manager.rb#141
  def translate_plural_message(klass, arg1, arg2, arg3 = T.unsafe(nil), arg4 = T.unsafe(nil)); end

  # Translates msgid, but if there are no localized text,
  # it returns a last part of msgid separeted "div" or whole of the msgid with no "div".
  #
  # * msgid: the message id.
  # * div: separator or nil.
  # * Returns: the localized text by msgid. If there are no localized text,
  #   it returns a last part of msgid separeted "div".
  #
  # source://gettext//lib/gettext/text_domain_manager.rb#98
  def translate_singular_message(klass, msgid, div = T.unsafe(nil)); end
end

# source://gettext//lib/gettext/version.rb#12
GetText::VERSION = T.let(T.unsafe(nil), String)

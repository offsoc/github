# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::ActionsRunService::Api::Twirp::V1::Context`.
# Please instead update this file by running `bin/tapioca dsl GitHub::ActionsRunService::Api::Twirp::V1::Context`.

class GitHub::ActionsRunService::Api::Twirp::V1::Context
  sig do
    params(
      billing_plan_owner: T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::BillingPlanOwner),
      forked_pull_request: T.nilable(T::Boolean),
      forked_repository: T.nilable(T::Boolean),
      github_event_info: T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::GitHubEventInfo),
      owner_created_at: T.nilable(String),
      parent_repository_name: T.nilable(String),
      parent_repository_owner: T.nilable(String),
      private_repository: T.nilable(T::Boolean),
      repository: T.nilable(String),
      repository_id: T.nilable(String),
      repository_tier: T.nilable(Integer)
    ).void
  end
  def initialize(billing_plan_owner: nil, forked_pull_request: nil, forked_repository: nil, github_event_info: nil, owner_created_at: nil, parent_repository_name: nil, parent_repository_owner: nil, private_repository: nil, repository: nil, repository_id: nil, repository_tier: nil); end

  sig { returns(T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::BillingPlanOwner)) }
  def billing_plan_owner; end

  sig { params(value: T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::BillingPlanOwner)).void }
  def billing_plan_owner=(value); end

  sig { void }
  def clear_billing_plan_owner; end

  sig { void }
  def clear_forked_pull_request; end

  sig { void }
  def clear_forked_repository; end

  sig { void }
  def clear_github_event_info; end

  sig { void }
  def clear_owner_created_at; end

  sig { void }
  def clear_parent_repository_name; end

  sig { void }
  def clear_parent_repository_owner; end

  sig { void }
  def clear_private_repository; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_repository_tier; end

  sig { returns(T::Boolean) }
  def forked_pull_request; end

  sig { params(value: T::Boolean).void }
  def forked_pull_request=(value); end

  sig { returns(T::Boolean) }
  def forked_repository; end

  sig { params(value: T::Boolean).void }
  def forked_repository=(value); end

  sig { returns(T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::GitHubEventInfo)) }
  def github_event_info; end

  sig { params(value: T.nilable(GitHub::ActionsRunService::Api::Twirp::V1::GitHubEventInfo)).void }
  def github_event_info=(value); end

  sig { returns(String) }
  def owner_created_at; end

  sig { params(value: String).void }
  def owner_created_at=(value); end

  sig { returns(String) }
  def parent_repository_name; end

  sig { params(value: String).void }
  def parent_repository_name=(value); end

  sig { returns(String) }
  def parent_repository_owner; end

  sig { params(value: String).void }
  def parent_repository_owner=(value); end

  sig { returns(T::Boolean) }
  def private_repository; end

  sig { params(value: T::Boolean).void }
  def private_repository=(value); end

  sig { returns(String) }
  def repository; end

  sig { params(value: String).void }
  def repository=(value); end

  sig { returns(String) }
  def repository_id; end

  sig { params(value: String).void }
  def repository_id=(value); end

  sig { returns(Integer) }
  def repository_tier; end

  sig { params(value: Integer).void }
  def repository_tier=(value); end
end

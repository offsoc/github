# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Migration`.
# Please instead update this file by running `bin/tapioca dsl Migration`.

class Migration
  include GeneratedAsyncReflectionAssociations
  extend GeneratedWorkflowClassMethods
  include GeneratedWorkflowMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods
  include GeneratedUrlHelpersModule
  include GeneratedPathHelpersModule

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Migration).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Migration).void)
      ).returns(::Migration)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Migration).void)
      ).returns(::Migration)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Migration).void)
      ).returns(::Migration)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Migration).void)
      ).returns(::Migration)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Migration).void)
      ).returns(::Migration)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Migration]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Migration)) }
    def fifth; end

    sig { returns(::Migration) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Migration)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Migration) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Migration).void)
      ).returns(T.nilable(T::Enumerator[::Migration]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Migration]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Migration]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Migration).void)
      ).returns(::Migration)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Migration).void)
      ).returns(::Migration)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Migration).void)
      ).returns(::Migration)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Migration)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Migration) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Migration) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Migration) }
    def first!; end

    sig { returns(T.nilable(::Migration)) }
    def forty_two; end

    sig { returns(::Migration) }
    def forty_two!; end

    sig { returns(T.nilable(::Migration)) }
    def fourth; end

    sig { returns(::Migration) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Migration) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Migration).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Migration).void)
      ).returns(::Migration)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Migration).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Migration).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Migration)) }
    def second; end

    sig { returns(::Migration) }
    def second!; end

    sig { returns(T.nilable(::Migration)) }
    def second_to_last; end

    sig { returns(::Migration) }
    def second_to_last!; end

    sig { returns(::Migration) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Migration) }
    def take!; end

    sig { returns(T.nilable(::Migration)) }
    def third; end

    sig { returns(::Migration) }
    def third!; end

    sig { returns(T.nilable(::Migration)) }
    def third_to_last; end

    sig { returns(::Migration) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Business) }
    def build_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_creator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MigrationFile) }
    def build_file(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_owner(*args, &blk); end

    sig { returns(T.nilable(::Business)) }
    def business; end

    sig { params(value: T.nilable(::Business)).void }
    def business=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business) }
    def create_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business) }
    def create_business!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_creator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_creator!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MigrationFile) }
    def create_file(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MigrationFile) }
    def create_file!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_owner!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def creator; end

    sig { params(value: T.nilable(::User)).void }
    def creator=(value); end

    sig { returns(T.nilable(::MigrationFile)) }
    def file; end

    sig { params(value: T.nilable(::MigrationFile)).void }
    def file=(value); end

    sig { returns(T::Array[T.untyped]) }
    def mannequin_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def mannequin_ids=(ids); end

    # This method is created by ActiveRecord on the `Migration` class because it declared `has_many :mannequins`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def mannequins; end

    sig { params(value: T::Enumerable[::User]).void }
    def mannequins=(value); end

    sig { returns(T::Array[T.untyped]) }
    def migratable_resource_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def migratable_resource_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def migratable_resource_report_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def migratable_resource_report_ids=(ids); end

    # This method is created by ActiveRecord on the `Migration` class because it declared `has_many :migratable_resource_reports`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MigratableResourceReport::PrivateCollectionProxy) }
    def migratable_resource_reports; end

    sig { params(value: T::Enumerable[::MigratableResourceReport]).void }
    def migratable_resource_reports=(value); end

    # This method is created by ActiveRecord on the `Migration` class because it declared `has_many :migratable_resources`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MigratableResource::PrivateCollectionProxy) }
    def migratable_resources; end

    sig { params(value: T::Enumerable[::MigratableResource]).void }
    def migratable_resources=(value); end

    # This method is created by ActiveRecord on the `Migration` class because it declared `has_many :migration_repositories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MigrationRepository::PrivateCollectionProxy) }
    def migration_repositories; end

    sig { params(value: T::Enumerable[::MigrationRepository]).void }
    def migration_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def migration_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def migration_repository_ids=(ids); end

    sig { returns(T.nilable(::User)) }
    def owner; end

    sig { params(value: T.nilable(::User)).void }
    def owner=(value); end

    sig { returns(T.nilable(::Business)) }
    def reload_business; end

    sig { returns(T.nilable(::User)) }
    def reload_creator; end

    sig { returns(T.nilable(::MigrationFile)) }
    def reload_file; end

    sig { returns(T.nilable(::User)) }
    def reload_owner; end

    # This method is created by ActiveRecord on the `Migration` class because it declared `has_many :repositories, through: :migration_repositories`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def repositories; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_ids=(ids); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def newest(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_business; end

    sig { returns(Promise[T.untyped]) }
    def async_creator; end

    sig { returns(Promise[T.untyped]) }
    def async_file; end

    sig { returns(Promise[T.untyped]) }
    def async_mannequins; end

    sig { returns(Promise[T.untyped]) }
    def async_migratable_resource_reports; end

    sig { returns(Promise[T.untyped]) }
    def async_migratable_resources; end

    sig { returns(Promise[T.untyped]) }
    def async_migration_repositories; end

    sig { returns(Promise[T.untyped]) }
    def async_owner; end

    sig { returns(Promise[T.untyped]) }
    def async_repositories; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def archive_size; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def archive_size=(value); end

    sig { returns(T::Boolean) }
    def archive_size?; end

    sig { returns(T.nilable(::Integer)) }
    def archive_size_before_last_save; end

    sig { returns(T.untyped) }
    def archive_size_before_type_cast; end

    sig { returns(T::Boolean) }
    def archive_size_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def archive_size_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def archive_size_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def archive_size_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def archive_size_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def archive_size_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def archive_size_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def archive_size_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def archive_size_was; end

    sig { void }
    def archive_size_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def business_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def business_id=(value); end

    sig { returns(T::Boolean) }
    def business_id?; end

    sig { returns(T.nilable(::Integer)) }
    def business_id_before_last_save; end

    sig { returns(T.untyped) }
    def business_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def business_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def business_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def business_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def business_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def business_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def business_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def business_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def business_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def business_id_was; end

    sig { void }
    def business_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def creator_id=(value); end

    sig { returns(T::Boolean) }
    def creator_id?; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_before_last_save; end

    sig { returns(T.untyped) }
    def creator_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def creator_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def creator_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def creator_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def creator_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def creator_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def creator_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_was; end

    sig { void }
    def creator_id_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_attachments; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def exclude_attachments=(value); end

    sig { returns(T::Boolean) }
    def exclude_attachments?; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_attachments_before_last_save; end

    sig { returns(T.untyped) }
    def exclude_attachments_before_type_cast; end

    sig { returns(T::Boolean) }
    def exclude_attachments_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def exclude_attachments_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def exclude_attachments_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def exclude_attachments_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_attachments_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def exclude_attachments_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def exclude_attachments_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_attachments_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_attachments_was; end

    sig { void }
    def exclude_attachments_will_change!; end

    sig { returns(T::Boolean) }
    def exclude_git_data; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def exclude_git_data=(value); end

    sig { returns(T::Boolean) }
    def exclude_git_data?; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_git_data_before_last_save; end

    sig { returns(T.untyped) }
    def exclude_git_data_before_type_cast; end

    sig { returns(T::Boolean) }
    def exclude_git_data_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_git_data_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_git_data_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def exclude_git_data_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_git_data_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_git_data_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def exclude_git_data_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_git_data_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_git_data_was; end

    sig { void }
    def exclude_git_data_will_change!; end

    sig { returns(T::Boolean) }
    def exclude_metadata; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def exclude_metadata=(value); end

    sig { returns(T::Boolean) }
    def exclude_metadata?; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_metadata_before_last_save; end

    sig { returns(T.untyped) }
    def exclude_metadata_before_type_cast; end

    sig { returns(T::Boolean) }
    def exclude_metadata_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_metadata_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_metadata_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def exclude_metadata_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_metadata_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_metadata_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def exclude_metadata_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_metadata_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_metadata_was; end

    sig { void }
    def exclude_metadata_will_change!; end

    sig { returns(T::Boolean) }
    def exclude_owner_projects; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def exclude_owner_projects=(value); end

    sig { returns(T::Boolean) }
    def exclude_owner_projects?; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_owner_projects_before_last_save; end

    sig { returns(T.untyped) }
    def exclude_owner_projects_before_type_cast; end

    sig { returns(T::Boolean) }
    def exclude_owner_projects_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_owner_projects_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_owner_projects_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def exclude_owner_projects_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_owner_projects_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_owner_projects_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def exclude_owner_projects_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_owner_projects_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_owner_projects_was; end

    sig { void }
    def exclude_owner_projects_will_change!; end

    sig { returns(T::Boolean) }
    def exclude_releases; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def exclude_releases=(value); end

    sig { returns(T::Boolean) }
    def exclude_releases?; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_releases_before_last_save; end

    sig { returns(T.untyped) }
    def exclude_releases_before_type_cast; end

    sig { returns(T::Boolean) }
    def exclude_releases_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_releases_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_releases_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def exclude_releases_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_releases_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_releases_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def exclude_releases_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_releases_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_releases_was; end

    sig { void }
    def exclude_releases_will_change!; end

    sig { returns(::String) }
    def guid; end

    sig { params(value: ::String).returns(::String) }
    def guid=(value); end

    sig { returns(T::Boolean) }
    def guid?; end

    sig { returns(T.nilable(::String)) }
    def guid_before_last_save; end

    sig { returns(T.untyped) }
    def guid_before_type_cast; end

    sig { returns(T::Boolean) }
    def guid_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def guid_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def guid_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def guid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def guid_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def guid_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def guid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def guid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def guid_was; end

    sig { void }
    def guid_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def import_migration_source; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def import_migration_source=(value); end

    sig { returns(T::Boolean) }
    def import_migration_source?; end

    sig { returns(T.nilable(::String)) }
    def import_migration_source_before_last_save; end

    sig { returns(T.untyped) }
    def import_migration_source_before_type_cast; end

    sig { returns(T::Boolean) }
    def import_migration_source_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def import_migration_source_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def import_migration_source_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def import_migration_source_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def import_migration_source_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def import_migration_source_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def import_migration_source_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def import_migration_source_previously_was; end

    sig { returns(T.nilable(::String)) }
    def import_migration_source_was; end

    sig { void }
    def import_migration_source_will_change!; end

    sig { returns(T::Boolean) }
    def lock_repositories; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def lock_repositories=(value); end

    sig { returns(T::Boolean) }
    def lock_repositories?; end

    sig { returns(T.nilable(T::Boolean)) }
    def lock_repositories_before_last_save; end

    sig { returns(T.untyped) }
    def lock_repositories_before_type_cast; end

    sig { returns(T::Boolean) }
    def lock_repositories_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def lock_repositories_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def lock_repositories_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def lock_repositories_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def lock_repositories_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def lock_repositories_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def lock_repositories_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def lock_repositories_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def lock_repositories_was; end

    sig { void }
    def lock_repositories_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def migratable_resources_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def migratable_resources_count=(value); end

    sig { returns(T::Boolean) }
    def migratable_resources_count?; end

    sig { returns(T.nilable(::Integer)) }
    def migratable_resources_count_before_last_save; end

    sig { returns(T.untyped) }
    def migratable_resources_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def migratable_resources_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def migratable_resources_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def migratable_resources_count_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def migratable_resources_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def migratable_resources_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def migratable_resources_count_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def migratable_resources_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def migratable_resources_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def migratable_resources_count_was; end

    sig { void }
    def migratable_resources_count_will_change!; end

    sig { returns(T::Boolean) }
    def org_metadata_only; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def org_metadata_only=(value); end

    sig { returns(T::Boolean) }
    def org_metadata_only?; end

    sig { returns(T.nilable(T::Boolean)) }
    def org_metadata_only_before_last_save; end

    sig { returns(T.untyped) }
    def org_metadata_only_before_type_cast; end

    sig { returns(T::Boolean) }
    def org_metadata_only_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def org_metadata_only_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def org_metadata_only_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def org_metadata_only_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def org_metadata_only_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def org_metadata_only_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def org_metadata_only_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def org_metadata_only_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def org_metadata_only_was; end

    sig { void }
    def org_metadata_only_will_change!; end

    sig { returns(::Integer) }
    def owner_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def owner_id=(value); end

    sig { returns(T::Boolean) }
    def owner_id?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_before_last_save; end

    sig { returns(T.untyped) }
    def owner_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def owner_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def owner_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def owner_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_was; end

    sig { void }
    def owner_id_will_change!; end

    sig { void }
    def restore_archive_size!; end

    sig { void }
    def restore_business_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_creator_id!; end

    sig { void }
    def restore_exclude_attachments!; end

    sig { void }
    def restore_exclude_git_data!; end

    sig { void }
    def restore_exclude_metadata!; end

    sig { void }
    def restore_exclude_owner_projects!; end

    sig { void }
    def restore_exclude_releases!; end

    sig { void }
    def restore_guid!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_import_migration_source!; end

    sig { void }
    def restore_lock_repositories!; end

    sig { void }
    def restore_migratable_resources_count!; end

    sig { void }
    def restore_org_metadata_only!; end

    sig { void }
    def restore_owner_id!; end

    sig { void }
    def restore_source_product!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_archive_size; end

    sig { returns(T::Boolean) }
    def saved_change_to_archive_size?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_business_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_business_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_creator_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_creator_id?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_exclude_attachments; end

    sig { returns(T::Boolean) }
    def saved_change_to_exclude_attachments?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_exclude_git_data; end

    sig { returns(T::Boolean) }
    def saved_change_to_exclude_git_data?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_exclude_metadata; end

    sig { returns(T::Boolean) }
    def saved_change_to_exclude_metadata?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_exclude_owner_projects; end

    sig { returns(T::Boolean) }
    def saved_change_to_exclude_owner_projects?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_exclude_releases; end

    sig { returns(T::Boolean) }
    def saved_change_to_exclude_releases?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_guid; end

    sig { returns(T::Boolean) }
    def saved_change_to_guid?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_import_migration_source; end

    sig { returns(T::Boolean) }
    def saved_change_to_import_migration_source?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_lock_repositories; end

    sig { returns(T::Boolean) }
    def saved_change_to_lock_repositories?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_migratable_resources_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_migratable_resources_count?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_org_metadata_only; end

    sig { returns(T::Boolean) }
    def saved_change_to_org_metadata_only?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_owner_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_owner_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_source_product; end

    sig { returns(T::Boolean) }
    def saved_change_to_source_product?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::String)) }
    def source_product; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def source_product=(value); end

    sig { returns(T::Boolean) }
    def source_product?; end

    sig { returns(T.nilable(::String)) }
    def source_product_before_last_save; end

    sig { returns(T.untyped) }
    def source_product_before_type_cast; end

    sig { returns(T::Boolean) }
    def source_product_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_product_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_product_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def source_product_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def source_product_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_product_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def source_product_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def source_product_previously_was; end

    sig { returns(T.nilable(::String)) }
    def source_product_was; end

    sig { void }
    def source_product_will_change!; end

    sig { returns(::Integer) }
    def state; end

    sig { params(value: ::Integer).returns(::Integer) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::Integer)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def state_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def state_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_archive_size?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_business_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_creator_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_exclude_attachments?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_exclude_git_data?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_exclude_metadata?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_exclude_owner_projects?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_exclude_releases?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_guid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_import_migration_source?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_lock_repositories?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_migratable_resources_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_org_metadata_only?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_owner_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_source_product?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def newest(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedWorkflowClassMethods
    sig { params(val: String).returns(T.untyped) }
    def state=(val); end

    sig { returns(PrivateRelationWhereChain) }
    def with_archive_uploaded_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_authz_test_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_conflicts_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_export_archive_uploaded_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_exported_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_exporting_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_failed_import_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_failed_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_imported_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_importing_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_mapping_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_pending_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_preparing_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_ready_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_unlocked_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_waiting_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_archive_uploaded_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_authz_test_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_conflicts_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_export_archive_uploaded_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_exported_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_exporting_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_failed_import_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_failed_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_imported_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_importing_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_mapping_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_pending_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_preparing_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_ready_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_unlocked_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_waiting_state; end
  end

  module GeneratedWorkflowMethods
    sig { returns(T::Boolean) }
    def archive_uploaded?; end

    sig { returns(T::Boolean) }
    def authz_test?; end

    sig { void }
    def begin_import!; end

    sig { void }
    def begin_map!; end

    sig { void }
    def begin_map!; end

    sig { void }
    def begin_prepare!; end

    sig { returns(T::Boolean) }
    def can_begin_import?; end

    sig { returns(T::Boolean) }
    def can_begin_map?; end

    sig { returns(T::Boolean) }
    def can_begin_map?; end

    sig { returns(T::Boolean) }
    def can_begin_prepare?; end

    sig { returns(T::Boolean) }
    def can_complete_import?; end

    sig { returns(T::Boolean) }
    def can_conflicts_detected?; end

    sig { returns(T::Boolean) }
    def can_conflicts_detected?; end

    sig { returns(T::Boolean) }
    def can_conflicts_detected?; end

    sig { returns(T::Boolean) }
    def can_enqueue_map?; end

    sig { returns(T::Boolean) }
    def can_enqueue_map?; end

    sig { returns(T::Boolean) }
    def can_enqueue_map?; end

    sig { returns(T::Boolean) }
    def can_exported?; end

    sig { returns(T::Boolean) }
    def can_exported?; end

    sig { returns(T::Boolean) }
    def can_exported?; end

    sig { returns(T::Boolean) }
    def can_exporting?; end

    sig { returns(T::Boolean) }
    def can_exporting?; end

    sig { returns(T::Boolean) }
    def can_failed?; end

    sig { returns(T::Boolean) }
    def can_failed?; end

    sig { returns(T::Boolean) }
    def can_failed?; end

    sig { returns(T::Boolean) }
    def can_failed?; end

    sig { returns(T::Boolean) }
    def can_failed?; end

    sig { returns(T::Boolean) }
    def can_failed?; end

    sig { returns(T::Boolean) }
    def can_failed_import?; end

    sig { returns(T::Boolean) }
    def can_import?; end

    sig { returns(T::Boolean) }
    def can_import?; end

    sig { returns(T::Boolean) }
    def can_import?; end

    sig { returns(T::Boolean) }
    def can_no_conflicts_detected?; end

    sig { returns(T::Boolean) }
    def can_prepare?; end

    sig { returns(T::Boolean) }
    def can_prepare?; end

    sig { returns(T::Boolean) }
    def can_prepare?; end

    sig { returns(T::Boolean) }
    def can_resolve_conflicts?; end

    sig { returns(T::Boolean) }
    def can_resolve_conflicts?; end

    sig { returns(T::Boolean) }
    def can_resolve_conflicts?; end

    sig { returns(T::Boolean) }
    def can_retry_export?; end

    sig { returns(T::Boolean) }
    def can_retry_import?; end

    sig { returns(T::Boolean) }
    def can_unlock?; end

    sig { returns(T::Boolean) }
    def can_unlock?; end

    sig { returns(T::Boolean) }
    def can_upload_archive?; end

    sig { returns(T::Boolean) }
    def can_upload_archive?; end

    sig { returns(T::Boolean) }
    def can_upload_archive?; end

    sig { void }
    def complete_import!; end

    sig { returns(T::Boolean) }
    def conflicts?; end

    sig { void }
    def conflicts_detected!; end

    sig { void }
    def conflicts_detected!; end

    sig { void }
    def conflicts_detected!; end

    sig { void }
    def enqueue_map!; end

    sig { void }
    def enqueue_map!; end

    sig { void }
    def enqueue_map!; end

    sig { returns(T::Boolean) }
    def export_archive_uploaded?; end

    sig { void }
    def exported!; end

    sig { void }
    def exported!; end

    sig { void }
    def exported!; end

    sig { returns(T::Boolean) }
    def exported?; end

    sig { void }
    def exporting!; end

    sig { void }
    def exporting!; end

    sig { returns(T::Boolean) }
    def exporting?; end

    sig { void }
    def failed!; end

    sig { void }
    def failed!; end

    sig { void }
    def failed!; end

    sig { void }
    def failed!; end

    sig { void }
    def failed!; end

    sig { void }
    def failed!; end

    sig { returns(T::Boolean) }
    def failed?; end

    sig { void }
    def failed_import!; end

    sig { returns(T::Boolean) }
    def failed_import?; end

    sig { void }
    def import!; end

    sig { void }
    def import!; end

    sig { void }
    def import!; end

    sig { returns(T::Boolean) }
    def imported?; end

    sig { returns(T::Boolean) }
    def importing?; end

    sig { returns(T::Boolean) }
    def mapping?; end

    sig { void }
    def no_conflicts_detected!; end

    sig { returns(T::Boolean) }
    def pending?; end

    sig { void }
    def prepare!; end

    sig { void }
    def prepare!; end

    sig { void }
    def prepare!; end

    sig { returns(T::Boolean) }
    def preparing?; end

    sig { returns(T::Boolean) }
    def ready?; end

    sig { void }
    def resolve_conflicts!; end

    sig { void }
    def resolve_conflicts!; end

    sig { void }
    def resolve_conflicts!; end

    sig { void }
    def retry_export!; end

    sig { void }
    def retry_import!; end

    sig { void }
    def unlock!; end

    sig { void }
    def unlock!; end

    sig { returns(T::Boolean) }
    def unlocked?; end

    sig { void }
    def upload_archive!; end

    sig { void }
    def upload_archive!; end

    sig { void }
    def upload_archive!; end

    sig { returns(T::Boolean) }
    def waiting?; end

    sig { returns(PrivateRelationWhereChain) }
    def without_archive_uploaded_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_authz_test_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_conflicts_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_export_archive_uploaded_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_exported_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_exporting_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_failed_import_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_failed_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_imported_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_importing_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_mapping_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_pending_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_preparing_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_ready_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_unlocked_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_waiting_state; end
  end

  class PrivateAssocationRelation < ::ActiveRecord::AssociationRelation
    include GeneratedWorkflowClassMethods
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Migration } }

    sig { returns(T::Array[::Migration]) }
    def to_a; end

    sig { returns(T::Array[::Migration]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Migration } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedWorkflowClassMethods
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Migration } }

    sig do
      params(
        records: T.any(::Migration, T::Enumerable[T.any(::Migration, T::Enumerable[::Migration])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Migration, T::Enumerable[T.any(::Migration, T::Enumerable[::Migration])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Migration, T::Enumerable[T.any(::Migration, T::Enumerable[::Migration])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Migration]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Migration, T::Enumerable[T.any(::Migration, T::Enumerable[::Migration])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Migration, T::Enumerable[T.any(::Migration, T::Enumerable[::Migration])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Migration, T::Enumerable[T.any(::Migration, T::Enumerable[::Migration])])
      ).returns(T::Array[::Migration])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Migration]) }
    def target; end

    sig { returns(T::Array[::Migration]) }
    def to_a; end

    sig { returns(T::Array[::Migration]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include GeneratedWorkflowClassMethods
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Migration } }

    sig { returns(T::Array[::Migration]) }
    def to_a; end

    sig { returns(T::Array[::Migration]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Migration } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

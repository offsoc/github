# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Discussions::V2::OrgDiscussions`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Discussions::V2::OrgDiscussions`.

class Hydro::Schemas::Github::Discussions::V2::OrgDiscussions
  sig do
    params(
      action: T.nilable(T.any(Symbol, Integer)),
      action_timestamp: T.nilable(Google::Protobuf::Timestamp),
      actor_id: T.nilable(Integer),
      organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      organization_id: T.nilable(Integer),
      public_repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      public_repository_id: T.nilable(Integer),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(action: nil, action_timestamp: nil, actor_id: nil, organization: nil, organization_id: nil, public_repository: nil, public_repository_id: nil, request_context: nil, user: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def action_timestamp; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def action_timestamp=(value); end

  sig { returns(Integer) }
  def actor_id; end

  sig { params(value: Integer).void }
  def actor_id=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_action_timestamp; end

  sig { void }
  def clear_actor_id; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_organization_id; end

  sig { void }
  def clear_public_repository; end

  sig { void }
  def clear_public_repository_id; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_user; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def organization=(value); end

  sig { returns(Integer) }
  def organization_id; end

  sig { params(value: Integer).void }
  def organization_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def public_repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def public_repository=(value); end

  sig { returns(Integer) }
  def public_repository_id; end

  sig { params(value: Integer).void }
  def public_repository_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end
end

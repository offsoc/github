{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_ebnf_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/ebnf.js"],"sourcesContent":["var commentType = {slash: 0, parenthesis: 1};\nvar stateType = {comment: 0, _string: 1, characterClass: 2};\n\nexport const ebnf = {\n  name: \"ebnf\",\n  startState: function () {\n    return {\n      stringType: null,\n      commentType: null,\n      braced: 0,\n      lhs: true,\n      localState: null,\n      stack: [],\n      inDefinition: false\n    };\n  },\n  token: function (stream, state) {\n    if (!stream) return;\n\n    //check for state changes\n    if (state.stack.length === 0) {\n      //strings\n      if ((stream.peek() == '\"') || (stream.peek() == \"'\")) {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n        state.stack.unshift(stateType._string);\n      } else if (stream.match('/*')) { //comments starting with /*\n        state.stack.unshift(stateType.comment);\n        state.commentType = commentType.slash;\n      } else if (stream.match('(*')) { //comments starting with (*\n        state.stack.unshift(stateType.comment);\n        state.commentType = commentType.parenthesis;\n      }\n    }\n\n    //return state\n    //stack has\n    switch (state.stack[0]) {\n    case stateType._string:\n      while (state.stack[0] === stateType._string && !stream.eol()) {\n        if (stream.peek() === state.stringType) {\n          stream.next(); // Skip quote\n          state.stack.shift(); // Clear flag\n        } else if (stream.peek() === \"\\\\\") {\n          stream.next();\n          stream.next();\n        } else {\n          stream.match(/^.[^\\\\\\\"\\']*/);\n        }\n      }\n      return state.lhs ? \"property\" : \"string\"; // Token style\n\n    case stateType.comment:\n      while (state.stack[0] === stateType.comment && !stream.eol()) {\n        if (state.commentType === commentType.slash && stream.match('*/')) {\n          state.stack.shift(); // Clear flag\n          state.commentType = null;\n        } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {\n          state.stack.shift(); // Clear flag\n          state.commentType = null;\n        } else {\n          stream.match(/^.[^\\*]*/);\n        }\n      }\n      return \"comment\";\n\n    case stateType.characterClass:\n      while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n        if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) {\n          state.stack.shift();\n        }\n      }\n      return \"operator\";\n    }\n\n    var peek = stream.peek();\n\n    //no stack\n    switch (peek) {\n    case \"[\":\n      stream.next();\n      state.stack.unshift(stateType.characterClass);\n      return \"bracket\";\n    case \":\":\n    case \"|\":\n    case \";\":\n      stream.next();\n      return \"operator\";\n    case \"%\":\n      if (stream.match(\"%%\")) {\n        return \"header\";\n      } else if (stream.match(/[%][A-Za-z]+/)) {\n        return \"keyword\";\n      } else if (stream.match(/[%][}]/)) {\n        return \"bracket\";\n      }\n      break;\n    case \"/\":\n      if (stream.match(/[\\/][A-Za-z]+/)) {\n        return \"keyword\";\n      }\n    case \"\\\\\":\n      if (stream.match(/[\\][a-z]+/)) {\n        return \"string.special\";\n      }\n    case \".\":\n      if (stream.match(\".\")) {\n        return \"atom\";\n      }\n    case \"*\":\n    case \"-\":\n    case \"+\":\n    case \"^\":\n      if (stream.match(peek)) {\n        return \"atom\";\n      }\n    case \"$\":\n      if (stream.match(\"$$\")) {\n        return \"builtin\";\n      } else if (stream.match(/[$][0-9]+/)) {\n        return \"variableName.special\";\n      }\n    case \"<\":\n      if (stream.match(/<<[a-zA-Z_]+>>/)) {\n        return \"builtin\";\n      }\n    }\n\n    if (stream.match('//')) {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (stream.match('return')) {\n      return \"operator\";\n    } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n      if (stream.match(/(?=[\\(.])/)) {\n        return \"variable\";\n      } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n        return \"def\";\n      }\n      return \"variableName.special\";\n    } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n      stream.next();\n      return \"bracket\";\n    } else if (!stream.eatSpace()) {\n      stream.next();\n    }\n    return null;\n  }\n};\n"],"names":["commentType","slash","parenthesis","stateType","comment","_string","characterClass","ebnf","name","startState","stringType","braced","lhs","localState","stack","inDefinition","token","stream","state","length","peek","next","unshift","match","eol","shift","skipToEnd","indexOf","eatSpace"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::MergeQueue::V1::MergeQueueEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::MergeQueue::V1::MergeQueueEvent`.

class Hydro::Schemas::Github::MergeQueue::V1::MergeQueueEvent
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      candidate_groups: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup], T::Array[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup])),
      current_merge_group: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup),
      entries: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry], T::Array[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry])),
      event: T.nilable(T.any(Symbol, Integer)),
      group_entries: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry], T::Array[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry])),
      groups: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup], T::Array[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup])),
      protected_branch: T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch),
      queue: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueue),
      reason: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)
    ).void
  end
  def initialize(actor: nil, candidate_groups: T.unsafe(nil), current_merge_group: nil, entries: T.unsafe(nil), event: nil, group_entries: T.unsafe(nil), groups: T.unsafe(nil), protected_branch: nil, queue: nil, reason: nil, repository: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup]) }
  def candidate_groups; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup]
    ).void
  end
  def candidate_groups=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_candidate_groups; end

  sig { void }
  def clear_current_merge_group; end

  sig { void }
  def clear_entries; end

  sig { void }
  def clear_event; end

  sig { void }
  def clear_group_entries; end

  sig { void }
  def clear_groups; end

  sig { void }
  def clear_protected_branch; end

  sig { void }
  def clear_queue; end

  sig { void }
  def clear_reason; end

  sig { void }
  def clear_repository; end

  sig { returns(T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup)) }
  def current_merge_group; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup)).void }
  def current_merge_group=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry]) }
  def entries; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry]
    ).void
  end
  def entries=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def event; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def event=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry]) }
  def group_entries; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry]
    ).void
  end
  def group_entries=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup]) }
  def groups; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroup]
    ).void
  end
  def groups=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch)) }
  def protected_branch; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch)).void }
  def protected_branch=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueue)) }
  def queue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueue)).void }
  def queue=(value); end

  sig { returns(String) }
  def reason; end

  sig { params(value: String).void }
  def reason=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end
end

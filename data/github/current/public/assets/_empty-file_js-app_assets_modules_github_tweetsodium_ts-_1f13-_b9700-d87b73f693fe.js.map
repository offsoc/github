{"version":3,"file":"chunk-_empty-file_js-app_assets_modules_github_tweetsodium_ts-_1f13-_b9700-xxxxxxxxxxxx.js","mappings":"wQAOA,MAAe,CAAC,C,yECFhB,IAAMA,EAAiBC,IAAAA,GAAAA,CAASD,cAAc,CAAGC,IAAAA,GAAAA,CAASC,eAAe,CAuBlE,SAASC,EAAKC,CAAmB,CAAEC,CAAqB,EAC7D,IAAMC,EAAML,IAAAA,GAAQ,CAACM,OAAO,GAEtBC,EAAM,IAAIC,WAAWL,EAAQM,MAAM,CAAGV,GAC5CQ,EAAIG,GAAG,CAACL,EAAID,SAAS,CAAE,GAEvB,IAAMO,EAAQC,SApBGC,CAAe,CAAET,CAAqB,EACvD,IAAMU,EAAOC,CAAAA,EAAAA,EAAAA,WAAAA,EAAYf,IAAAA,GAAAA,CAASgB,WAAW,CAAE,IAI/C,MAFAC,CAAAA,EAAAA,EAAAA,aAAAA,EAAcH,EAAMD,GACpBI,CAAAA,EAAAA,EAAAA,aAAAA,EAAcH,EAAMV,GACbc,CAAAA,EAAAA,EAAAA,YAAAA,EAAaJ,EACtB,EAc0BT,EAAID,SAAS,CAAEA,GAEjCe,EAAKnB,IAAAA,GAAQ,CAACG,EAASQ,EAAOP,EAAWC,EAAIe,SAAS,EAG5D,OAFAb,EAAIG,GAAG,CAACS,EAAInB,IAAAA,GAAAA,CAASC,eAAe,EAE7BM,CACT,C","sources":[".empty-file.js","app/assets/modules/github/tweetsodium.ts"],"sourcesContent":["// An empty file that is mapped to in browser contexts. This is what the\n// node-resolve plugin does when the `browser` field attributes are mapped to\n// `false`.\n//\n// See\n// https://github.com/rollup/plugins/blob/53fb18c0c2852598200c547a0b1d745d15b5b487/packages/node-resolve/src/index.js#L87-L89\n// https://github.com/defunctzombie/package-browser-field-spec\nexport default {}\n","import {blake2bFinal, blake2bInit, blake2bUpdate} from 'blakejs'\nimport nacl from 'tweetnacl'\n\n// Authenticated sealing only prepends the nonce to the ciphertext. Anonymous\n// sealing also prepends a random public key.\nconst overheadLength = nacl.box.overheadLength + nacl.box.publicKeyLength\n\n// Generates a 24 byte nonce that is a blake2b digest of the ephemeral\n// public key and the recipient's public key.\n//\n// epk - Ephemeral public key.\n// publicKey - Recipient's public key.\n//\n// Returns a 24-byte Uint8Array.\nfunction sealNonce(epk: Uint8Array, publicKey: Uint8Array): Uint8Array {\n  const hash = blake2bInit(nacl.box.nonceLength, false)\n\n  blake2bUpdate(hash, epk)\n  blake2bUpdate(hash, publicKey)\n  return blake2bFinal(hash)\n}\n\n// Encrypt a message for a recipient.\n//\n// message - Message Uint8Array to encrypt.\n// publicKey - Recipient's public key Uint8Array.\n//\n// Returns an array whose length is 48 bytes greater than the message's.\nexport function seal(message: Uint8Array, publicKey: Uint8Array): Uint8Array {\n  const ekp = nacl.box.keyPair()\n\n  const out = new Uint8Array(message.length + overheadLength)\n  out.set(ekp.publicKey, 0)\n\n  const nonce = sealNonce(ekp.publicKey, publicKey)\n\n  const ct = nacl.box(message, nonce, publicKey, ekp.secretKey)\n  out.set(ct, nacl.box.publicKeyLength)\n\n  return out\n}\n"],"names":["overheadLength","nacl","publicKeyLength","seal","message","publicKey","ekp","keyPair","out","Uint8Array","length","set","nonce","sealNonce","epk","hash","blake2bInit","nonceLength","blake2bUpdate","blake2bFinal","ct","secretKey"],"sourceRoot":""}
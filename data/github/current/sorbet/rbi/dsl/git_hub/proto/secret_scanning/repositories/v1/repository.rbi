# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Proto::SecretScanning::Repositories::V1::Repository`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Proto::SecretScanning::Repositories::V1::Repository`.

class GitHub::Proto::SecretScanning::Repositories::V1::Repository
  sig do
    params(
      capabilities: T.nilable(GitHub::Proto::SecretScanning::Repositories::V1::Capabilities),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      default_branch: T.nilable(String),
      default_branch_bytes: T.nilable(String),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      global_relay_id: T.nilable(String),
      id: T.nilable(Integer),
      is_archived: T.nilable(T::Boolean),
      is_deleted: T.nilable(T::Boolean),
      name: T.nilable(String),
      network_id: T.nilable(Integer),
      owner: T.nilable(GitHub::Proto::SecretScanning::Repositories::V1::User),
      parent_id: T.nilable(Integer),
      pushed_at: T.nilable(Google::Protobuf::Timestamp),
      updated_at: T.nilable(Google::Protobuf::Timestamp),
      visibility: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(capabilities: nil, created_at: nil, default_branch: nil, default_branch_bytes: nil, feature_flags: T.unsafe(nil), global_relay_id: nil, id: nil, is_archived: nil, is_deleted: nil, name: nil, network_id: nil, owner: nil, parent_id: nil, pushed_at: nil, updated_at: nil, visibility: nil); end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Repositories::V1::Capabilities)) }
  def capabilities; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Repositories::V1::Capabilities)).void }
  def capabilities=(value); end

  sig { void }
  def clear_capabilities; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_default_branch; end

  sig { void }
  def clear_default_branch_bytes; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_global_relay_id; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_is_archived; end

  sig { void }
  def clear_is_deleted; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_network_id; end

  sig { void }
  def clear_owner; end

  sig { void }
  def clear_parent_id; end

  sig { void }
  def clear_pushed_at; end

  sig { void }
  def clear_updated_at; end

  sig { void }
  def clear_visibility; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(String) }
  def default_branch; end

  sig { params(value: String).void }
  def default_branch=(value); end

  sig { returns(String) }
  def default_branch_bytes; end

  sig { params(value: String).void }
  def default_branch_bytes=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(String) }
  def global_relay_id; end

  sig { params(value: String).void }
  def global_relay_id=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def is_archived; end

  sig { params(value: T::Boolean).void }
  def is_archived=(value); end

  sig { returns(T::Boolean) }
  def is_deleted; end

  sig { params(value: T::Boolean).void }
  def is_deleted=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(Integer) }
  def network_id; end

  sig { params(value: Integer).void }
  def network_id=(value); end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Repositories::V1::User)) }
  def owner; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Repositories::V1::User)).void }
  def owner=(value); end

  sig { returns(Integer) }
  def parent_id; end

  sig { params(value: Integer).void }
  def parent_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def pushed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def pushed_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def visibility; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def visibility=(value); end
end

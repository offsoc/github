# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Insights::Core::V1::RepositoryData`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Insights::Core::V1::RepositoryData`.

class MonolithTwirp::Insights::Core::V1::RepositoryData
  sig do
    params(
      active: T.nilable(T::Boolean),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      description: T.nilable(String),
      disabled_at: T.nilable(Google::Protobuf::Timestamp),
      disabled_by: T.nilable(Integer),
      disabling_detail: T.nilable(String),
      disabling_reason: T.nilable(String),
      disk_usage: T.nilable(Integer),
      has_downloads: T.nilable(T::Boolean),
      has_issues: T.nilable(T::Boolean),
      has_template: T.nilable(T::Boolean),
      has_wiki: T.nilable(T::Boolean),
      health_status: T.nilable(String),
      homepage: T.nilable(String),
      id: T.nilable(Integer),
      is_locked: T.nilable(T::Boolean),
      is_maintained: T.nilable(T::Boolean),
      is_public: T.nilable(T::Boolean),
      is_world_writable_wiki: T.nilable(T::Boolean),
      made_public_at: T.nilable(Google::Protobuf::Timestamp),
      name: T.nilable(String),
      organization_id: T.nilable(Integer),
      owner_id: T.nilable(Integer),
      owner_login: T.nilable(String),
      parent_id: T.nilable(Integer),
      primary_language_name_id: T.nilable(Integer),
      properties_version: T.nilable(Integer),
      public_fork_count: T.nilable(Integer),
      public_push: T.nilable(Integer),
      pushed_at: T.nilable(Google::Protobuf::Timestamp),
      pushed_at_usec: T.nilable(Integer),
      reflog_sync_enabled: T.nilable(T::Boolean),
      refset_updated_at: T.nilable(Google::Protobuf::Timestamp),
      sandbox: T.nilable(Integer),
      source_id: T.nilable(Integer),
      updated_at: T.nilable(Google::Protobuf::Timestamp),
      user_hidden: T.nilable(Integer),
      watcher_count: T.nilable(Integer)
    ).void
  end
  def initialize(active: nil, created_at: nil, description: nil, disabled_at: nil, disabled_by: nil, disabling_detail: nil, disabling_reason: nil, disk_usage: nil, has_downloads: nil, has_issues: nil, has_template: nil, has_wiki: nil, health_status: nil, homepage: nil, id: nil, is_locked: nil, is_maintained: nil, is_public: nil, is_world_writable_wiki: nil, made_public_at: nil, name: nil, organization_id: nil, owner_id: nil, owner_login: nil, parent_id: nil, primary_language_name_id: nil, properties_version: nil, public_fork_count: nil, public_push: nil, pushed_at: nil, pushed_at_usec: nil, reflog_sync_enabled: nil, refset_updated_at: nil, sandbox: nil, source_id: nil, updated_at: nil, user_hidden: nil, watcher_count: nil); end

  sig { returns(T::Boolean) }
  def active; end

  sig { params(value: T::Boolean).void }
  def active=(value); end

  sig { void }
  def clear_active; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_description; end

  sig { void }
  def clear_disabled_at; end

  sig { void }
  def clear_disabled_by; end

  sig { void }
  def clear_disabling_detail; end

  sig { void }
  def clear_disabling_reason; end

  sig { void }
  def clear_disk_usage; end

  sig { void }
  def clear_has_downloads; end

  sig { void }
  def clear_has_issues; end

  sig { void }
  def clear_has_template; end

  sig { void }
  def clear_has_wiki; end

  sig { void }
  def clear_health_status; end

  sig { void }
  def clear_homepage; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_is_locked; end

  sig { void }
  def clear_is_maintained; end

  sig { void }
  def clear_is_public; end

  sig { void }
  def clear_is_world_writable_wiki; end

  sig { void }
  def clear_made_public_at; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_organization_id; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_owner_login; end

  sig { void }
  def clear_parent_id; end

  sig { void }
  def clear_primary_language_name_id; end

  sig { void }
  def clear_properties_version; end

  sig { void }
  def clear_public_fork_count; end

  sig { void }
  def clear_public_push; end

  sig { void }
  def clear_pushed_at; end

  sig { void }
  def clear_pushed_at_usec; end

  sig { void }
  def clear_reflog_sync_enabled; end

  sig { void }
  def clear_refset_updated_at; end

  sig { void }
  def clear_sandbox; end

  sig { void }
  def clear_source_id; end

  sig { void }
  def clear_updated_at; end

  sig { void }
  def clear_user_hidden; end

  sig { void }
  def clear_watcher_count; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(String) }
  def description; end

  sig { params(value: String).void }
  def description=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def disabled_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def disabled_at=(value); end

  sig { returns(Integer) }
  def disabled_by; end

  sig { params(value: Integer).void }
  def disabled_by=(value); end

  sig { returns(String) }
  def disabling_detail; end

  sig { params(value: String).void }
  def disabling_detail=(value); end

  sig { returns(String) }
  def disabling_reason; end

  sig { params(value: String).void }
  def disabling_reason=(value); end

  sig { returns(Integer) }
  def disk_usage; end

  sig { params(value: Integer).void }
  def disk_usage=(value); end

  sig { returns(T::Boolean) }
  def has_downloads; end

  sig { params(value: T::Boolean).void }
  def has_downloads=(value); end

  sig { returns(T::Boolean) }
  def has_issues; end

  sig { params(value: T::Boolean).void }
  def has_issues=(value); end

  sig { returns(T::Boolean) }
  def has_template; end

  sig { params(value: T::Boolean).void }
  def has_template=(value); end

  sig { returns(T::Boolean) }
  def has_wiki; end

  sig { params(value: T::Boolean).void }
  def has_wiki=(value); end

  sig { returns(String) }
  def health_status; end

  sig { params(value: String).void }
  def health_status=(value); end

  sig { returns(String) }
  def homepage; end

  sig { params(value: String).void }
  def homepage=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def is_locked; end

  sig { params(value: T::Boolean).void }
  def is_locked=(value); end

  sig { returns(T::Boolean) }
  def is_maintained; end

  sig { params(value: T::Boolean).void }
  def is_maintained=(value); end

  sig { returns(T::Boolean) }
  def is_public; end

  sig { params(value: T::Boolean).void }
  def is_public=(value); end

  sig { returns(T::Boolean) }
  def is_world_writable_wiki; end

  sig { params(value: T::Boolean).void }
  def is_world_writable_wiki=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def made_public_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def made_public_at=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(Integer) }
  def organization_id; end

  sig { params(value: Integer).void }
  def organization_id=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(String) }
  def owner_login; end

  sig { params(value: String).void }
  def owner_login=(value); end

  sig { returns(Integer) }
  def parent_id; end

  sig { params(value: Integer).void }
  def parent_id=(value); end

  sig { returns(Integer) }
  def primary_language_name_id; end

  sig { params(value: Integer).void }
  def primary_language_name_id=(value); end

  sig { returns(Integer) }
  def properties_version; end

  sig { params(value: Integer).void }
  def properties_version=(value); end

  sig { returns(Integer) }
  def public_fork_count; end

  sig { params(value: Integer).void }
  def public_fork_count=(value); end

  sig { returns(Integer) }
  def public_push; end

  sig { params(value: Integer).void }
  def public_push=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def pushed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def pushed_at=(value); end

  sig { returns(Integer) }
  def pushed_at_usec; end

  sig { params(value: Integer).void }
  def pushed_at_usec=(value); end

  sig { returns(T::Boolean) }
  def reflog_sync_enabled; end

  sig { params(value: T::Boolean).void }
  def reflog_sync_enabled=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def refset_updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def refset_updated_at=(value); end

  sig { returns(Integer) }
  def sandbox; end

  sig { params(value: Integer).void }
  def sandbox=(value); end

  sig { returns(Integer) }
  def source_id; end

  sig { params(value: Integer).void }
  def source_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end

  sig { returns(Integer) }
  def user_hidden; end

  sig { params(value: Integer).void }
  def user_hidden=(value); end

  sig { returns(Integer) }
  def watcher_count; end

  sig { params(value: Integer).void }
  def watcher_count=(value); end
end

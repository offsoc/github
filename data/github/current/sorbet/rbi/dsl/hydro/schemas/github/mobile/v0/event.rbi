# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Mobile::V0::Event`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Mobile::V0::Event`.

class Hydro::Schemas::Github::Mobile::V0::Event
  sig do
    params(
      action: T.nilable(String),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      application: T.nilable(T.any(Symbol, Integer)),
      context: T.nilable(String),
      device: T.nilable(T.any(Symbol, Integer)),
      element: T.nilable(String),
      performed_at: T.nilable(Google::Protobuf::Timestamp),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      subject_identifier: T.nilable(String),
      subject_type: T.nilable(String)
    ).void
  end
  def initialize(action: nil, actor: nil, application: nil, context: nil, device: nil, element: nil, performed_at: nil, request_context: nil, subject_identifier: nil, subject_type: nil); end

  sig { returns(String) }
  def action; end

  sig { params(value: String).void }
  def action=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def application; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def application=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_application; end

  sig { void }
  def clear_context; end

  sig { void }
  def clear_device; end

  sig { void }
  def clear_element; end

  sig { void }
  def clear_performed_at; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_subject_identifier; end

  sig { void }
  def clear_subject_type; end

  sig { returns(String) }
  def context; end

  sig { params(value: String).void }
  def context=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def device; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def device=(value); end

  sig { returns(String) }
  def element; end

  sig { params(value: String).void }
  def element=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def performed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def performed_at=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(String) }
  def subject_identifier; end

  sig { params(value: String).void }
  def subject_identifier=(value); end

  sig { returns(String) }
  def subject_type; end

  sig { params(value: String).void }
  def subject_type=(value); end
end

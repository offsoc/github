# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `TradeScreeningMailer`.
# Please instead update this file by running `bin/tapioca dsl TradeScreeningMailer`.

class TradeScreeningMailer
  class << self
    sig { params(account: T.untyped, except: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def admin_emails(account, except: T.unsafe(nil)); end

    sig { params(_arg0: T.untyped, _arg1: T.untyped, _arg2: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_host_url(*_arg0, **_arg1, &_arg2); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_url(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def audio_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def audio_url(source, options = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def bcc_log; end

    sig { params(account: T.untyped, include_name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def billing_emails(account, include_name: T.unsafe(nil)); end

    sig { params(account: T.untyped, admins: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def build_admin_recipients_list(account, admins); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_extname(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_host(source = T.unsafe(nil), options = T.unsafe(nil)); end

    sig { params(source: ::String, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_path(source, options = T.unsafe(nil)); end

    sig do
      params(
        cc_email: ::String,
        subject: ::String,
        email_content: ::String,
        bcc_email: T.nilable(::String)
      ).returns(::ActionMailer::MessageDelivery)
    end
    def contact_microsoft_trade_help(cc_email:, subject:, email_content:, bcc_email:); end

    sig { params(mail: T.untyped, premailer_options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def convert_to_premail(mail, premailer_options: T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def default_url_options; end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def font_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def font_url(source, options = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_guides; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_marketplace; end

    sig { params(from: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def github_noreply(from = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_opensource; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_partnerships; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_shop; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_trade_appeals; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_trade_sap_bis; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def image_base_url; end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def image_path(source, options = T.unsafe(nil)); end

    sig { params(path: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def image_url(path); end

    sig { params(user: ::User).returns(::ActionMailer::MessageDelivery) }
    def individual_actor_allowed_status(user); end

    sig { params(user: ::User).returns(::ActionMailer::MessageDelivery) }
    def individual_actor_not_allowed_status(user); end

    sig { params(user: ::User).returns(::ActionMailer::MessageDelivery) }
    def individual_actor_profile_data_needs_fixing(user); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def javascript_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def javascript_url(source, options = T.unsafe(nil)); end

    sig { params(_arg0: T.untyped, _arg1: T.untyped, _arg2: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def mailer_asset_host_url(*_arg0, **_arg1, &_arg2); end

    sig { params(path: ::String).returns(::ActionMailer::MessageDelivery) }
    def mailer_static_asset_path(path); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def microsoft_trade_help; end

    sig { params(url: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def notification_signature(url); end

    sig { params(list: T.untyped, email: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def notifications_list_email(list, email); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_asset(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_audio(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_font(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_image(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_javascript(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_stylesheet(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_video(source, options = T.unsafe(nil)); end

    sig { params(args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def premail(*args); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def public_compute_asset_path(source, options = T.unsafe(nil)); end

    sig { params(email: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def quote_email_address(email); end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def quote_user_name(user); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def redalert; end

    sig { params(org: ::Organization).returns(::ActionMailer::MessageDelivery) }
    def restricted_free_organization_allowed_status(org); end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def safe_name?(name); end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def scrub_real_name(name); end

    sig do
      params(
        account: T.any(::Business, ::Organization, ::User),
        emails: T::Array[::String]
      ).returns(::ActionMailer::MessageDelivery)
    end
    def sponsors_maintainer_restricted(account:, emails:); end

    sig { params(path: ::String).returns(::ActionMailer::MessageDelivery) }
    def static_asset_path(path); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stylesheet_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stylesheet_url(source, options = T.unsafe(nil)); end

    sig { params(external_uuid: T.nilable(::String)).returns(::ActionMailer::MessageDelivery) }
    def trade_screening_48_hour_sla_breach(external_uuid); end

    sig do
      params(
        account: T.any(::Business, ::Organization, ::User),
        emails: T::Array[::String]
      ).returns(::ActionMailer::MessageDelivery)
    end
    def true_match_internal_notification(account:, emails:); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_asset(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_audio(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_font(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_image(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_javascript(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_stylesheet(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_video(source, options = T.unsafe(nil)); end

    sig do
      params(
        user: T.untyped,
        email: T.untyped,
        allow_private: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def user_email(user, email = T.unsafe(nil), allow_private: T.unsafe(nil)); end

    sig { params(account: T.untyped, except: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def user_or_admin_recipients(account, except: T.unsafe(nil)); end

    sig { params(account: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def user_or_billing_recipients(account); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def video_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def video_url(source, options = T.unsafe(nil)); end
  end
end

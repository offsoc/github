{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_pascal_js-xxxxxxxxxxxx.js","mappings":"+KAKA,IAAIA,EAAWC,SALAC,CAAG,EAEhB,IAAK,IADDC,EAAM,CAAC,EAAGF,EAAQC,EAAIE,KAAK,CAAC,KACvBC,EAAI,EAAGA,EAAIJ,EAAMK,MAAM,CAAE,EAAED,EAAGF,CAAG,CAACF,CAAK,CAACI,EAAE,CAAC,CAAG,GACvD,OAAOF,CACT,EAEE,w9BAcEI,EAAQ,CAAC,KAAQ,EAAI,EAErBC,EAAiB,mBAwDrB,SAASC,EAAaC,CAAM,CAAEC,CAAK,EAEjC,IADA,IAAsBC,EAAlBC,EAAW,GACRD,EAAKF,EAAOI,IAAI,IAAI,CACzB,GAAIF,KAAAA,GAAaC,EAAU,CACzBF,EAAMI,QAAQ,CAAG,KACjB,KACF,CACAF,EAAYD,KAAAA,CACd,CACA,MAAO,SACT,CAEA,SAASI,EAAmBN,CAAM,CAAEC,CAAK,EAEvC,IADA,IAAIC,EACGA,EAAKF,EAAOI,IAAI,IACrB,GAAIF,KAAAA,EAAW,CACbD,EAAMI,QAAQ,CAAG,KACjB,KACF,CAEF,MAAO,SACT,CAIO,IAAME,EAAS,CACpBC,KAAM,SAENC,WAAY,WACV,MAAO,CAACJ,SAAU,IAAI,CACxB,EAEAK,MAAO,SAASV,CAAM,CAAEC,CAAK,SAC3B,EAAWU,QAAQ,GAAW,KAClB,CAACV,EAAMI,QAAQ,EAxF/B,SAAmBL,CAAM,CAAEC,CAAK,EAC9B,IAAIC,EAAKF,EAAOI,IAAI,GACpB,GAAIF,KAAAA,GAAaD,EAAMW,WAAW,CAEhC,OADAZ,EAAOa,SAAS,GACT,OAET,GAAIX,KAAAA,GAAaA,KAAAA,EAEf,OADAD,EAAMI,QAAQ,CAoCT,SAASL,CAAM,CAAEC,CAAK,EAE3B,IADA,IAAqBG,EAAjBU,EAAU,GAAaC,EAAM,GAC1B,MAACX,CAAAA,EAAOJ,EAAOI,IAAI,EAAC,GAAY,CACrC,GAAIA,GAvCuBF,GAuCN,CAACY,EAAS,CAACC,EAAM,GAAM,KAAM,CAClDD,EAAU,CAACA,GAAWV,MAAAA,CACxB,CAEA,MADIW,CAAAA,GAAO,CAACD,CAAM,GAAGb,CAAAA,EAAMI,QAAQ,CAAG,IAAG,EAClC,QACT,EA3CSJ,EAAMI,QAAQ,CAACL,EAAQC,GAEhC,GAAIC,KAAAA,GAAaF,EAAOgB,GAAG,CAAC,KAE1B,OADAf,EAAMI,QAAQ,CAAGN,EACVA,EAAaC,EAAQC,GAE9B,GAAIC,KAAAA,EAEF,OADAD,EAAMI,QAAQ,CAAGC,EACVA,EAAmBN,EAAQC,GAEpC,GAAI,mBAAmBgB,IAAI,CAACf,GAC1B,OAAO,KAET,GAAI,KAAKe,IAAI,CAACf,GAEZ,OADAF,EAAOkB,QAAQ,CAAC,UACT,SAET,GAAIhB,KAAAA,GACEF,EAAOgB,GAAG,CAAC,KAEb,OADAhB,EAAOa,SAAS,GACT,UAGX,GAAIf,EAAemB,IAAI,CAACf,GAEtB,OADAF,EAAOkB,QAAQ,CAACpB,GACT,WAETE,EAAOkB,QAAQ,CAAC,WAChB,IAAIC,EAAMnB,EAAOoB,OAAO,UACxB,EAAaC,oBAAoB,CAACF,GAAa,UAC3CtB,EAAMwB,oBAAoB,CAACF,GAAa,OACrC,UACT,CAgD2C,EAAGnB,EAAQC,EAGpD,EAEAqB,aAAc,CACZC,cAAe,YACfC,cAAe,CAACC,MAAO,CAACC,KAAM,KAAMC,MAAO,IAAI,CAAC,CAClD,CACF,C","sources":["node_modules/@codemirror/legacy-modes/mode/pascal.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\n  \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\nvar atoms = {\"null\": true};\n\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == \"#\" && state.startOfLine) {\n    stream.skipToEnd();\n    return \"meta\";\n  }\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (ch == \"(\" && stream.eat(\"*\")) {\n    state.tokenize = tokenComment;\n    return tokenComment(stream, state);\n  }\n  if (ch == \"{\") {\n    state.tokenize = tokenCommentBraces;\n    return tokenCommentBraces(stream, state);\n  }\n  if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \")\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenCommentBraces(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"}\") {\n      state.tokenize = null;\n      break;\n    }\n  }\n  return \"comment\";\n}\n\n// Interface\n\nexport const pascal = {\n  name: \"pascal\",\n\n  startState: function() {\n    return {tokenize: null};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {block: {open: \"(*\", close: \"*)\"}}\n  }\n};\n"],"names":["keywords","words","str","obj","split","i","length","atoms","isOperatorChar","tokenComment","stream","state","ch","maybeEnd","next","tokenize","tokenCommentBraces","pascal","name","startState","token","eatSpace","startOfLine","skipToEnd","escaped","end","eat","test","eatWhile","cur","current","propertyIsEnumerable","languageData","indentOnInput","commentTokens","block","open","close"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::EnterpriseAccount::V0::OrganizationTransfer`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::EnterpriseAccount::V0::OrganizationTransfer`.

class Hydro::Schemas::Github::EnterpriseAccount::V0::OrganizationTransfer
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      completed_at: T.nilable(Google::Protobuf::Timestamp),
      destination_enterprise: T.nilable(Hydro::Schemas::Github::V1::Entities::Business),
      failed_at: T.nilable(Google::Protobuf::Timestamp),
      failed_reason: T.nilable(String),
      organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      site_admin_transfer: T.nilable(T::Boolean),
      source_enterprise: T.nilable(Hydro::Schemas::Github::V1::Entities::Business)
    ).void
  end
  def initialize(actor: nil, completed_at: nil, destination_enterprise: nil, failed_at: nil, failed_reason: nil, organization: nil, site_admin_transfer: nil, source_enterprise: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_completed_at; end

  sig { void }
  def clear_destination_enterprise; end

  sig { void }
  def clear_failed_at; end

  sig { void }
  def clear_failed_reason; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_site_admin_transfer; end

  sig { void }
  def clear_source_enterprise; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def completed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def completed_at=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Business)) }
  def destination_enterprise; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Business)).void }
  def destination_enterprise=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def failed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def failed_at=(value); end

  sig { returns(String) }
  def failed_reason; end

  sig { params(value: String).void }
  def failed_reason=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def organization=(value); end

  sig { returns(T::Boolean) }
  def site_admin_transfer; end

  sig { params(value: T::Boolean).void }
  def site_admin_transfer=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Business)) }
  def source_enterprise; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Business)).void }
  def source_enterprise=(value); end
end

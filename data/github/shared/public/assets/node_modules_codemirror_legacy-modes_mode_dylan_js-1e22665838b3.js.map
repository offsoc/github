{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_dylan_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/dylan.js"],"sourcesContent":["function forEach(arr, f) {\n  for (var i = 0; i < arr.length; i++) f(arr[i], i)\n}\nfunction some(arr, f) {\n  for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true\n  return false\n}\n\n// Words\nvar words = {\n  // Words that introduce unnamed definitions like \"define interface\"\n  unnamedDefinition: [\"interface\"],\n\n  // Words that introduce simple named definitions like \"define library\"\n  namedDefinition: [\"module\", \"library\", \"macro\",\n                    \"C-struct\", \"C-union\",\n                    \"C-function\", \"C-callable-wrapper\"\n                   ],\n\n  // Words that introduce type definitions like \"define class\".\n  // These are also parameterized like \"define method\" and are\n  // appended to otherParameterizedDefinitionWords\n  typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n\n  // Words that introduce trickier definitions like \"define method\".\n  // These require special definitions to be added to startExpressions\n  otherParameterizedDefinition: [\"method\", \"function\",\n                                 \"C-variable\", \"C-address\"\n                                ],\n\n  // Words that introduce module constant definitions.\n  // These must also be simple definitions and are\n  // appended to otherSimpleDefinitionWords\n  constantSimpleDefinition: [\"constant\"],\n\n  // Words that introduce module variable definitions.\n  // These must also be simple definitions and are\n  // appended to otherSimpleDefinitionWords\n  variableSimpleDefinition: [\"variable\"],\n\n  // Other words that introduce simple definitions\n  // (without implicit bodies).\n  otherSimpleDefinition: [\"generic\", \"domain\",\n                          \"C-pointer-type\",\n                          \"table\"\n                         ],\n\n  // Words that begin statements with implicit bodies.\n  statement: [\"if\", \"block\", \"begin\", \"method\", \"case\",\n              \"for\", \"select\", \"when\", \"unless\", \"until\",\n              \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"\n             ],\n\n  // Patterns that act as separators in compound statements.\n  // This may include any general pattern that must be indented\n  // specially.\n  separator: [\"finally\", \"exception\", \"cleanup\", \"else\",\n              \"elseif\", \"afterwards\"\n             ],\n\n  // Keywords that do not require special indentation handling,\n  // but which should be highlighted\n  other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\",\n          \"instance\", \"let\", \"local\", \"otherwise\", \"slot\",\n          \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"\n         ],\n\n  // Condition signaling function calls\n  signalingCalls: [\"signal\", \"error\", \"cerror\",\n                   \"break\", \"check-type\", \"abort\"\n                  ]\n};\n\nwords[\"otherDefinition\"] =\n  words[\"unnamedDefinition\"]\n  .concat(words[\"namedDefinition\"])\n  .concat(words[\"otherParameterizedDefinition\"]);\n\nwords[\"definition\"] =\n  words[\"typeParameterizedDefinition\"]\n  .concat(words[\"otherDefinition\"]);\n\nwords[\"parameterizedDefinition\"] =\n  words[\"typeParameterizedDefinition\"]\n  .concat(words[\"otherParameterizedDefinition\"]);\n\nwords[\"simpleDefinition\"] =\n  words[\"constantSimpleDefinition\"]\n  .concat(words[\"variableSimpleDefinition\"])\n  .concat(words[\"otherSimpleDefinition\"]);\n\nwords[\"keyword\"] =\n  words[\"statement\"]\n  .concat(words[\"separator\"])\n  .concat(words[\"other\"]);\n\n// Patterns\nvar symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\nvar symbol = new RegExp(\"^\" + symbolPattern);\nvar patterns = {\n  // Symbols with special syntax\n  symbolKeyword: symbolPattern + \":\",\n  symbolClass: \"<\" + symbolPattern + \">\",\n  symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n  symbolConstant: \"\\\\$\" + symbolPattern\n};\nvar patternStyles = {\n  symbolKeyword: \"atom\",\n  symbolClass: \"tag\",\n  symbolGlobal: \"variableName.standard\",\n  symbolConstant: \"variableName.constant\"\n};\n\n// Compile all patterns to regular expressions\nfor (var patternName in patterns)\n  if (patterns.hasOwnProperty(patternName))\n    patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n\n// Names beginning \"with-\" and \"without-\" are commonly\n// used as statement macro\npatterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n\nvar styles = {};\nstyles[\"keyword\"] = \"keyword\";\nstyles[\"definition\"] = \"def\";\nstyles[\"simpleDefinition\"] = \"def\";\nstyles[\"signalingCalls\"] = \"builtin\";\n\n// protected words lookup table\nvar wordLookup = {};\nvar styleLookup = {};\n\nforEach([\n  \"keyword\",\n  \"definition\",\n  \"simpleDefinition\",\n  \"signalingCalls\"\n], function(type) {\n  forEach(words[type], function(word) {\n    wordLookup[word] = type;\n    styleLookup[word] = styles[type];\n  });\n});\n\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  // String\n  var ch = stream.peek();\n  if (ch == \"'\" || ch == '\"') {\n    stream.next();\n    return chain(stream, state, tokenString(ch, \"string\"));\n  }\n  // Comment\n  else if (ch == \"/\") {\n    stream.next();\n    if (stream.eat(\"*\")) {\n      return chain(stream, state, tokenComment);\n    } else if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    stream.backUp(1);\n  }\n  // Decimal\n  else if (/[+\\-\\d\\.]/.test(ch)) {\n    if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||\n        stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||\n        stream.match(/^[+-]?\\d+/)) {\n      return \"number\";\n    }\n  }\n  // Hash\n  else if (ch == \"#\") {\n    stream.next();\n    // Symbol with string syntax\n    ch = stream.peek();\n    if (ch == '\"') {\n      stream.next();\n      return chain(stream, state, tokenString('\"', \"string\"));\n    }\n    // Binary number\n    else if (ch == \"b\") {\n      stream.next();\n      stream.eatWhile(/[01]/);\n      return \"number\";\n    }\n    // Hex number\n    else if (ch == \"x\") {\n      stream.next();\n      stream.eatWhile(/[\\da-f]/i);\n      return \"number\";\n    }\n    // Octal number\n    else if (ch == \"o\") {\n      stream.next();\n      stream.eatWhile(/[0-7]/);\n      return \"number\";\n    }\n    // Token concatenation in macros\n    else if (ch == '#') {\n      stream.next();\n      return \"punctuation\";\n    }\n    // Sequence literals\n    else if ((ch == '[') || (ch == '(')) {\n      stream.next();\n      return \"bracket\";\n      // Hash symbol\n    } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n      return \"atom\";\n    } else {\n      stream.eatWhile(/[-a-zA-Z]/);\n      return \"error\";\n    }\n  } else if (ch == \"~\") {\n    stream.next();\n    ch = stream.peek();\n    if (ch == \"=\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        return \"operator\";\n      }\n      return \"operator\";\n    }\n    return \"operator\";\n  } else if (ch == \":\") {\n    stream.next();\n    ch = stream.peek();\n    if (ch == \"=\") {\n      stream.next();\n      return \"operator\";\n    } else if (ch == \":\") {\n      stream.next();\n      return \"punctuation\";\n    }\n  } else if (\"[](){}\".indexOf(ch) != -1) {\n    stream.next();\n    return \"bracket\";\n  } else if (\".,\".indexOf(ch) != -1) {\n    stream.next();\n    return \"punctuation\";\n  } else if (stream.match(\"end\")) {\n    return \"keyword\";\n  }\n  for (var name in patterns) {\n    if (patterns.hasOwnProperty(name)) {\n      var pattern = patterns[name];\n      if ((pattern instanceof Array && some(pattern, function(p) {\n        return stream.match(p);\n      })) || stream.match(pattern))\n        return patternStyles[name];\n    }\n  }\n  if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n    stream.next();\n    return \"operator\";\n  }\n  if (stream.match(\"define\")) {\n    return \"def\";\n  } else {\n    stream.eatWhile(/[\\w\\-]/);\n    // Keyword\n    if (wordLookup.hasOwnProperty(stream.current())) {\n      return styleLookup[stream.current()];\n    } else if (stream.current().match(symbol)) {\n      return \"variable\";\n    } else {\n      stream.next();\n      return \"variableName.standard\";\n    }\n  }\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n  while ((ch = stream.next())) {\n    if (ch == \"/\" && maybeEnd) {\n      if (nestedCount > 0) {\n        nestedCount--;\n      } else {\n        state.tokenize = tokenBase;\n        break;\n      }\n    } else if (ch == \"*\" && maybeNested) {\n      nestedCount++;\n    }\n    maybeEnd = (ch == \"*\");\n    maybeNested = (ch == \"/\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote, style) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return style;\n  };\n}\n\n// Interface\nexport const dylan = {\n  name: \"dylan\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      currentIndent: 0\n    };\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace())\n      return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n  languageData: {\n    commentTokens: {block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n\n"],"names":["forEach","arr","f","i","length","words","unnamedDefinition","namedDefinition","typeParameterizedDefinition","otherParameterizedDefinition","constantSimpleDefinition","variableSimpleDefinition","otherSimpleDefinition","statement","separator","other","signalingCalls","concat","symbolPattern","symbol","patterns","symbolKeyword","symbolClass","symbolGlobal","symbolConstant","patternStyles","patternName","hasOwnProperty","styles","wordLookup","styleLookup","chain","stream","state","tokenize","tokenBase","ch","peek","next","tokenString","eat","tokenComment","skipToEnd","backUp","test","match","eatWhile","indexOf","name","pattern","Array","some","p","current","maybeEnd","maybeNested","nestedCount","quote","style","escaped","end","type","word","dylan","startState","currentIndent","token","eatSpace","languageData","commentTokens","block","open","close"],"sourceRoot":""}
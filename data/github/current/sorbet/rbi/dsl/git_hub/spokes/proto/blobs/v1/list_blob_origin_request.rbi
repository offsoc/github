# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::Blobs::V1::ListBlobOriginRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::Blobs::V1::ListBlobOriginRequest`.

class GitHub::Spokes::Proto::Blobs::V1::ListBlobOriginRequest
  sig do
    params(
      commit_order: T.nilable(T.any(Symbol, Integer)),
      cursor: T.nilable(GitHub::Spokes::Proto::Types::V1::Cursor),
      fork_push_selector: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::ForkPushSelector),
      max_commit_count: T.nilable(Integer),
      object_id_selector: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::ObjectIDSelector),
      push_selector: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::PushSelector),
      repository: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository),
      request_context: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext),
      universal_selector: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::UniversalSelector)
    ).void
  end
  def initialize(commit_order: nil, cursor: nil, fork_push_selector: nil, max_commit_count: nil, object_id_selector: nil, push_selector: nil, repository: nil, request_context: nil, universal_selector: nil); end

  sig { void }
  def clear_commit_order; end

  sig { void }
  def clear_cursor; end

  sig { void }
  def clear_fork_push_selector; end

  sig { void }
  def clear_max_commit_count; end

  sig { void }
  def clear_object_id_selector; end

  sig { void }
  def clear_push_selector; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_universal_selector; end

  sig { returns(T.any(Symbol, Integer)) }
  def commit_order; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def commit_order=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Cursor)) }
  def cursor; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Cursor)).void }
  def cursor=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::ForkPushSelector)) }
  def fork_push_selector; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::ForkPushSelector)).void }
  def fork_push_selector=(value); end

  sig { returns(Integer) }
  def max_commit_count; end

  sig { params(value: Integer).void }
  def max_commit_count=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::ObjectIDSelector)) }
  def object_id_selector; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::ObjectIDSelector)).void }
  def object_id_selector=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::PushSelector)) }
  def push_selector; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::PushSelector)).void }
  def push_selector=(value); end

  sig { returns(T.nilable(Symbol)) }
  def ref_selector; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)) }
  def repository; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Symbol)) }
  def selector; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::UniversalSelector)) }
  def universal_selector; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::UniversalSelector)).void }
  def universal_selector=(value); end
end

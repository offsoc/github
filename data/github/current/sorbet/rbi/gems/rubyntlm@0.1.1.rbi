# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubyntlm` gem.
# Please instead update this file by running `bin/tapioca gem rubyntlm`.

# source://rubyntlm//lib/net/ntlm.rb#50
module Net::NTLM
  class << self
    # source://rubyntlm//lib/net/ntlm.rb#130
    def apply_des(plain, keys); end

    # source://rubyntlm//lib/net/ntlm.rb#98
    def decode_utf16le(str); end

    # source://rubyntlm//lib/net/ntlm.rb#102
    def encode_utf16le(str); end

    # source://rubyntlm//lib/net/ntlm.rb#122
    def gen_keys(str); end

    # source://rubyntlm//lib/net/ntlm.rb#138
    def lm_hash(password); end

    # responses
    #
    # source://rubyntlm//lib/net/ntlm.rb#161
    def lm_response(arg); end

    # source://rubyntlm//lib/net/ntlm.rb#215
    def lmv2_response(arg, opt = T.unsafe(nil)); end

    # source://rubyntlm//lib/net/ntlm.rb#231
    def ntlm2_session(arg, opt = T.unsafe(nil)); end

    # source://rubyntlm//lib/net/ntlm.rb#143
    def ntlm_hash(password, opt = T.unsafe(nil)); end

    # source://rubyntlm//lib/net/ntlm.rb#173
    def ntlm_response(arg); end

    # source://rubyntlm//lib/net/ntlm.rb#151
    def ntlmv2_hash(user, password, target, opt = T.unsafe(nil)); end

    # source://rubyntlm//lib/net/ntlm.rb#181
    def ntlmv2_response(arg, opt = T.unsafe(nil)); end

    # source://rubyntlm//lib/net/ntlm.rb#106
    def pack_int64le(val); end

    # source://rubyntlm//lib/net/ntlm.rb#114
    def split7(str); end

    # source://rubyntlm//lib/net/ntlm.rb#110
    def swap16(str); end
  end
end

# source://rubyntlm//lib/net/ntlm.rb#363
class Net::NTLM::Blob < ::Net::NTLM::FieldSet
  # source://rubyntlm//lib/net/ntlm.rb#419
  def blob_signature; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def blob_signature=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def challenge; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def challenge=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def reserved; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def reserved=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def target_info; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def target_info=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def timestamp; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def timestamp=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def unknown1; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def unknown1=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def unknown2; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def unknown2=(val); end

  class << self
    # source://rubyntlm//lib/net/ntlm.rb#364
    def inherited(subclass); end
  end
end

# base classes for primitives
#
# source://rubyntlm//lib/net/ntlm.rb#255
class Net::NTLM::Field
  # @return [Field] a new instance of Field
  #
  # source://rubyntlm//lib/net/ntlm.rb#258
  def initialize(opts); end

  # Returns the value of attribute active.
  #
  # source://rubyntlm//lib/net/ntlm.rb#256
  def active; end

  # Sets the attribute active
  #
  # @param value the value to set the attribute active to.
  #
  # source://rubyntlm//lib/net/ntlm.rb#256
  def active=(_arg0); end

  # source://rubyntlm//lib/net/ntlm.rb#263
  def size; end

  # Returns the value of attribute value.
  #
  # source://rubyntlm//lib/net/ntlm.rb#256
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://rubyntlm//lib/net/ntlm.rb#256
  def value=(_arg0); end
end

# base class of data structure
#
# source://rubyntlm//lib/net/ntlm.rb#360
class Net::NTLM::FieldSet
  # @return [FieldSet] a new instance of FieldSet
  #
  # source://rubyntlm//lib/net/ntlm.rb#430
  def initialize; end

  # @raise [ArgumentError]
  #
  # source://rubyntlm//lib/net/ntlm.rb#446
  def [](name); end

  # @raise [ArgumentError]
  #
  # source://rubyntlm//lib/net/ntlm.rb#452
  def []=(name, val); end

  # source://rubyntlm//lib/net/ntlm.rb#462
  def disable(name); end

  # source://rubyntlm//lib/net/ntlm.rb#458
  def enable(name); end

  # source://rubyntlm//lib/net/ntlm.rb#438
  def parse(str, offset = T.unsafe(nil)); end

  # source://rubyntlm//lib/net/ntlm.rb#434
  def serialize; end

  # source://rubyntlm//lib/net/ntlm.rb#442
  def size; end

  class << self
    # source://rubyntlm//lib/net/ntlm.rb#362
    def define(&block); end

    # source://rubyntlm//lib/net/ntlm.rb#378
    def int16LE(name, opts); end

    # source://rubyntlm//lib/net/ntlm.rb#382
    def int32LE(name, opts); end

    # source://rubyntlm//lib/net/ntlm.rb#386
    def int64LE(name, opts); end

    # source://rubyntlm//lib/net/ntlm.rb#398
    def names; end

    # source://rubyntlm//lib/net/ntlm.rb#406
    def opts; end

    # source://rubyntlm//lib/net/ntlm.rb#394
    def prototypes; end

    # source://rubyntlm//lib/net/ntlm.rb#390
    def security_buffer(name, opts); end

    # source://rubyntlm//lib/net/ntlm.rb#374
    def string(name, opts); end

    # source://rubyntlm//lib/net/ntlm.rb#402
    def types; end

    private

    # source://rubyntlm//lib/net/ntlm.rb#412
    def add_field(name, type, opts); end

    # source://rubyntlm//lib/net/ntlm.rb#417
    def define_accessor(name); end
  end
end

# source://rubyntlm//lib/net/ntlm.rb#299
class Net::NTLM::Int16LE < ::Net::NTLM::Field
  # @return [Int16LE] a new instance of Int16LE
  #
  # source://rubyntlm//lib/net/ntlm.rb#300
  def initialize(opt); end

  # source://rubyntlm//lib/net/ntlm.rb#304
  def parse(str, offset = T.unsafe(nil)); end

  # source://rubyntlm//lib/net/ntlm.rb#313
  def serialize; end
end

# source://rubyntlm//lib/net/ntlm.rb#318
class Net::NTLM::Int32LE < ::Net::NTLM::Field
  # @return [Int32LE] a new instance of Int32LE
  #
  # source://rubyntlm//lib/net/ntlm.rb#319
  def initialize(opt); end

  # source://rubyntlm//lib/net/ntlm.rb#324
  def parse(str, offset = T.unsafe(nil)); end

  # source://rubyntlm//lib/net/ntlm.rb#333
  def serialize; end
end

# source://rubyntlm//lib/net/ntlm.rb#338
class Net::NTLM::Int64LE < ::Net::NTLM::Field
  # @return [Int64LE] a new instance of Int64LE
  #
  # source://rubyntlm//lib/net/ntlm.rb#339
  def initialize(opt); end

  # source://rubyntlm//lib/net/ntlm.rb#344
  def parse(str, offset = T.unsafe(nil)); end

  # source://rubyntlm//lib/net/ntlm.rb#354
  def serialize; end
end

# source://rubyntlm//lib/net/ntlm.rb#521
class Net::NTLM::Message < ::Net::NTLM::FieldSet
  # source://rubyntlm//lib/net/ntlm.rb#571
  def data_size; end

  # source://rubyntlm//lib/net/ntlm.rb#565
  def decode64(str); end

  # source://rubyntlm//lib/net/ntlm.rb#552
  def dump_flags; end

  # source://rubyntlm//lib/net/ntlm.rb#561
  def encode64; end

  # @return [Boolean]
  #
  # source://rubyntlm//lib/net/ntlm.rb#544
  def has_flag?(flag); end

  # source://rubyntlm//lib/net/ntlm.rb#442
  def head_size; end

  # source://rubyntlm//lib/net/ntlm.rb#556
  def serialize; end

  # source://rubyntlm//lib/net/ntlm.rb#548
  def set_flag(flag); end

  # source://rubyntlm//lib/net/ntlm.rb#575
  def size; end

  private

  # source://rubyntlm//lib/net/ntlm.rb#593
  def data_edge; end

  # source://rubyntlm//lib/net/ntlm.rb#586
  def deflag; end

  # source://rubyntlm//lib/net/ntlm.rb#582
  def security_buffers; end

  class << self
    # source://rubyntlm//lib/net/ntlm.rb#539
    def decode64(str); end

    # source://rubyntlm//lib/net/ntlm.rb#523
    def parse(str); end
  end
end

# sub class definitions
#
# source://rubyntlm//lib/net/ntlm.rb#363
class Net::NTLM::Message::Type0 < ::Net::NTLM::Message
  # source://rubyntlm//lib/net/ntlm.rb#419
  def sign; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def sign=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def type; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def type=(val); end

  class << self
    # source://rubyntlm//lib/net/ntlm.rb#364
    def inherited(subclass); end
  end
end

# source://rubyntlm//lib/net/ntlm.rb#363
class Net::NTLM::Message::Type1 < ::Net::NTLM::Message
  # source://rubyntlm//lib/net/ntlm.rb#419
  def domain; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def domain=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def flag; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def flag=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def padding; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def padding=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#622
  def parse(str); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def sign; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def sign=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def type; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def type=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def workstation; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def workstation=(val); end

  class << self
    # source://rubyntlm//lib/net/ntlm.rb#364
    def inherited(subclass); end

    # source://rubyntlm//lib/net/ntlm.rb#615
    def parse(str); end
  end
end

# source://rubyntlm//lib/net/ntlm.rb#363
class Net::NTLM::Message::Type2 < ::Net::NTLM::Message
  # source://rubyntlm//lib/net/ntlm.rb#419
  def challenge; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def challenge=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def context; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def context=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def flag; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def flag=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def padding; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def padding=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#654
  def parse(str); end

  # source://rubyntlm//lib/net/ntlm.rb#667
  def response(arg, opt = T.unsafe(nil)); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def sign; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def sign=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def target_info; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def target_info=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def target_name; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def target_name=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def type; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def type=(val); end

  class << self
    # source://rubyntlm//lib/net/ntlm.rb#364
    def inherited(subclass); end

    # source://rubyntlm//lib/net/ntlm.rb#647
    def parse(str); end
  end
end

# source://rubyntlm//lib/net/ntlm.rb#363
class Net::NTLM::Message::Type3 < ::Net::NTLM::Message
  # source://rubyntlm//lib/net/ntlm.rb#419
  def domain; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def domain=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def flag; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def flag=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def lm_response; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def lm_response=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def ntlm_response; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def ntlm_response=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def session_key; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def session_key=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def sign; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def sign=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def type; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def type=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def user; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def user=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def workstation; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def workstation=(val); end

  class << self
    # source://rubyntlm//lib/net/ntlm.rb#751
    def create(arg, opt = T.unsafe(nil)); end

    # source://rubyntlm//lib/net/ntlm.rb#364
    def inherited(subclass); end

    # source://rubyntlm//lib/net/ntlm.rb#745
    def parse(str); end
  end
end

# source://rubyntlm//lib/net/ntlm.rb#363
class Net::NTLM::SecurityBuffer < ::Net::NTLM::FieldSet
  # @return [SecurityBuffer] a new instance of SecurityBuffer
  #
  # source://rubyntlm//lib/net/ntlm.rb#486
  def initialize(opts); end

  # Returns the value of attribute active.
  #
  # source://rubyntlm//lib/net/ntlm.rb#485
  def active; end

  # Sets the attribute active
  #
  # @param value the value to set the attribute active to.
  #
  # source://rubyntlm//lib/net/ntlm.rb#485
  def active=(_arg0); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def allocated; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def allocated=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#516
  def data_size; end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def length; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def length=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#419
  def offset; end

  # source://rubyntlm//lib/net/ntlm.rb#423
  def offset=(val); end

  # source://rubyntlm//lib/net/ntlm.rb#493
  def parse(str, offset = T.unsafe(nil)); end

  # source://rubyntlm//lib/net/ntlm.rb#503
  def serialize; end

  # source://rubyntlm//lib/net/ntlm.rb#507
  def value; end

  # source://rubyntlm//lib/net/ntlm.rb#511
  def value=(val); end

  class << self
    # source://rubyntlm//lib/net/ntlm.rb#364
    def inherited(subclass); end
  end
end

# source://rubyntlm//lib/net/ntlm.rb#268
class Net::NTLM::String < ::Net::NTLM::Field
  # @return [String] a new instance of String
  #
  # source://rubyntlm//lib/net/ntlm.rb#269
  def initialize(opts); end

  # source://rubyntlm//lib/net/ntlm.rb#274
  def parse(str, offset = T.unsafe(nil)); end

  # source://rubyntlm//lib/net/ntlm.rb#283
  def serialize; end

  # source://rubyntlm//lib/net/ntlm.rb#291
  def value=(val); end
end

# source://rubyntlm//lib/net/ntlm.rb#52
module Net::NTLM::VERSION; end

# source://rubyntlm//lib/net/ntlm.rb#53
Net::NTLM::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://rubyntlm//lib/net/ntlm.rb#54
Net::NTLM::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://rubyntlm//lib/net/ntlm.rb#56
Net::NTLM::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://rubyntlm//lib/net/ntlm.rb#55
Net::NTLM::VERSION::TINY = T.let(T.unsafe(nil), Integer)

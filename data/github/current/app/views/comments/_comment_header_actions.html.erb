<%# erblint:counter DeprecatedComponentsCounter 2 %>
<%# erblint:counter ButtonComponentMigrationCounter 8 %>

<%
  minimized_comment_partial ||= false
  delete_enabled = local_assigns.fetch(:delete_enabled, true)

  can_view_in_stafftools = !comment.stafftools_url.nil?
  is_reactable = comment.is_a?(PlatformTypes::Reactable)
  is_archived = comment.is_a?(PlatformTypes::RepositoryNode) && comment.repository.is_archived?
  can_update = comment.is_a?(PlatformTypes::Updatable) && comment.viewer_can_update?
  can_delete = comment.is_a?(PlatformTypes::Deletable) && comment.viewer_can_see_delete_button? && form_path.present? && delete_enabled
  must_verify_email = comment.is_a?(PlatformTypes::UpdatableComment) && logged_in? && current_user.must_verify_email?
  can_report = comment.is_a?(PlatformTypes::Reportable) && comment.viewer_can_report?
  new_reporting_experience = can_report && comment.viewer_can_report_to_maintainer?
  can_minimize = comment.is_a?(PlatformTypes::Minimizable) && comment.viewer_can_see_minimize_button?
  can_unminimize = comment.is_a?(PlatformTypes::Minimizable) && comment.viewer_can_see_unminimize_button?
  can_block = comment.is_a?(PlatformTypes::OrgBlockable) && comment.viewer_can_block_from_org?
  can_unblock = comment.is_a?(PlatformTypes::OrgBlockable) && comment.viewer_can_unblock_from_org?
  can_open_new_issue = comment.is_a?(PlatformTypes::IssueComment) &&
    !minimized_comment_partial &&
    logged_in? &&
    comment.repository.has_issues_enabled?
%>

<% copy_button = capture do %>
  <%= render Primer::Beta::ClipboardCopy.new("aria-label": "Copy link", classes: "dropdown-item btn-link", for: permalink_id, role: "menuitem", test_selector: "comment-header-copy-link") do %>
    Copy link
  <% end %>
<% end %>

<% quote_reply_button = capture do %>
  <button
    type="button"
    class="dropdown-item btn-link js-comment-quote-reply"
    hidden
    data-hotkey="<%= hotkeys_for(current_user, :pull_request_conversation, :reply) %>"
    role="menuitem">
    Quote reply
  </button>
<% end %>

<% edit_button = capture do %>
  <% if is_archived %>
  <% elsif can_update %>
    <button
      type="button"
      class="dropdown-item btn-link js-comment-edit-button"
      role="menuitem"
      aria-label="Edit comment">
      Edit
    </button>
  <% elsif must_verify_email %>
    <button
      type="button"
      class="dropdown-item disabled btn-link"
      title="You need to verify your email address before you can edit this comment."
      role="menuitem"
      disabled><%# erblint:disable GitHub::Accessibility::NoTitleAttribute %>
      Edit
    </button>
  <% end %>
<% end %>

<% open_new_issue_button = capture do %>
  <% if can_open_new_issue %>
    <% parent = comment.pull_request || comment.issue %>
    <%= render layout: "shared/details_dialog", locals: {
        title: "Reference in new issue",
        button_text: "Reference in new issue",
        button_class: "dropdown-item",
        button_role: "menuitem",
        details_class: "",
        dialog_class: "Box-overlay--wide"
      } do %>
      <div class="Box-body overflow-auto">
        <%= render partial: "comments/convert_to_issue_form", locals: {
            text: comment.body,
            id: comment.id,
            user_id: comment.repository.owner.display_login,
            repository: comment.repository.name,
            repository_name: comment.repository.name,
            repository_id: comment.repository.database_id,
            author: comment.author&.display_login || GitHub.ghost_user_login,
            original_reference: "#{base_url}#{parent.resource_path}#{local_assigns[:href]}"
          } %>
      </div>
    <% end %>
  <% end %>
<% end %>

<% minimize_toggle_button = capture do %>
    <% if minimized_comment_partial %>
      <% if can_unminimize %>
        <%= form_tag unminimize_comment_path(user_id: comment.repository.owner.display_login, repository: comment.repository.name), method: :put, class: "inline-form js-comment-unminimize width-full" do %>
          <%# `CommunityController#unminimize` expects to receive a graphql_id of the comment %>
          <input type="hidden" name="comment_id" value="<%= comment.is_a?(ActiveRecord::Base) ? comment.global_relay_id : comment.id %>" >
          <button
            type="submit"
            class="dropdown-item btn-link"
            role="menuitem"
            aria-label="Unhide comment">
            Unhide
          </button>
        <% end %>
      <% end %>
    <% else %>
      <% if can_minimize %>
        <button
          type="button"
          class="dropdown-item btn-link js-comment-hide-button"
          role="menuitem"
          aria-label="Hide comment">
          Hide
        </button>
    <% end %>
  <% end %>
<% end %>


<% report_button = capture do %>
  <% if can_report %>
    <% if new_reporting_experience %>
      <%= render layout: "shared/details_dialog", locals: {
          button_text: "Report content",
          title: "Report content",
          button_class: "dropdown-item",
          details_class: "width-full",
          dialog_class: "Box-overlay--wide"
      } do %>
        <div class="container-lg clearfix d-flex ws-normal">
          <div class="col-lg-6 p-3">
            <% owner = comment.repository.owner %>

            <%= form_tag report_content_path(owner.display_login, comment.repository.name, comment_id: comment.id), method: :post, class: "inline-form" do %>
              <div class="d-flex flex-column flex-justify-between">
                <p>This content violates @<%= profile_link(owner, class: "Link--primary text-bold") %>'s Code of Conduct and should be submitted to the maintainers of this repository for review.</p>
                <p>This report, as well as your username as the reporter, will be viewable by all admins of this repository.</p>

                <dl class="form-group">
                  <dt> Choose a reason for reporting this content </dt>
                  <dd>
                    <select name="reason" class="form-select mr-2" aria-label="Reason" required>
                      <option value>
                      Choose a reason
                      </option>
                      <% classifier_enums = Platform::Enums::AbuseReportReason.values.keys - ["UNSPECIFIED"] %>
                      <%= options_for_select(classifier_enums.map { |s| [s.titleize, s] }) %>
                    </select>
                  </dd>
                </dl>

                <p class="text-small color-fg-muted">
                  Learn more about <%= link_to "requesting that maintainers moderate content.", "#{GitHub.help_url}/articles/reporting-abuse-or-spam", class: "Link--inTextBlock" %>
                </p>

                <%= render Primer::ButtonComponent.new(type: :submit, block: true, scheme: :danger) do %>Report to repository admins<% end %>
              </div>
            <% end %>
          </div>
          <div class="col-lg-6 p-3">
            <div class="d-flex flex-column flex-justify-between height-full">
              <p>Contact GitHub Support about this userâ€™s spammy or abusive behavior.</p>

              <div>
                <p class="text-small color-fg-muted mt-3">
                  Learn more about <%= link_to "reporting abuse to GitHub Support", "#{GitHub.help_url}/articles/reporting-abuse-or-spam", class: "Link--inTextBlock" %>
                </p>

                <%= link_to(flavored_contact_path(
                      flavor: "report-content",
                      report: "#{ comment.author ? comment.author.display_login : "ghost" } (user)",
                      content_url: "#{ (comment.is_a?(PlatformTypes::PullRequest) || comment.is_a?(PlatformTypes::Issue)) ? (comment.repository.url + "/" + comment.url) : comment.url }"),
                      class: "btn btn-block btn-danger") do %>
                  Report abuse to GitHub Support
                <% end %>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    <% else %>
      <%= link_to(flavored_contact_path(
            flavor: "report-content",
            report: "#{ comment.author ? comment.author.display_login : "ghost" } (user)",
            content_url: "#{ (comment.is_a?(PlatformTypes::PullRequest) || comment.is_a?(PlatformTypes::Issue)) ? (comment.repository.url + "/" + comment.url) : comment.url }"
          ), {
            'aria-label': "Report abusive content",
            role: "menuitem",
            class: "dropdown-item btn-link",
            'data-ga-click': "Report content, reported by #{comment.viewer_relationship}"
          }) do %>
        Report content
      <% end %>
    <% end %>
  <% end %>
<% end %>

<% delete_button = capture do %>
  <% if can_delete %>
    <%= form_tag form_path, :method => :delete, :class => "width-full inline-form js-comment-delete" do %>
      <input type="hidden" name="input[id]" value="<%= comment.id %>">
      <button
        type="submit"
        class="dropdown-item menu-item-danger btn-link"
        aria-label="Delete comment"
        role="menuitem"
        data-confirm="Are you sure you want to delete this?">
        Delete
      </button>
    <% end %>
  <% end %>
<% end %>


<% stafftools_button = capture do %>
  <% if can_view_in_stafftools %>
    <% text = GitHub.enterprise? ? "Site Admin" : "Stafftools" %>
    <a href="<%= comment.stafftools_url %>" class="dropdown-item btn-link" role="menuitem">View in <%= text %></a>
  <% end %>
<% end %>

<% block_button = capture do %>
  <% if can_block %>
    <%= render partial: "comments/block_user", locals: { comment_id: comment.id } %>
  <% elsif can_unblock %>
    <%= form_tag organization_settings_blocked_user_path(
        comment.repository.owner.display_login,
        login: comment.author.display_login,
        content_id: comment.is_a?(PlatformTypes::Comment) || comment.is_a?(Issue::Adapter::Base) ? comment.id : comment.global_relay_id,
      ),
      method: "delete",
      class: "inline-form width-full" do %>
      <button class="dropdown-item btn-link"
              type="submit"
              role="menuitem"
              data-confirm="Are you sure you want to unblock this user from the organization?">
        Unblock user
      </button>
    <% end %>
  <% end %>
<% end %>

<% divider_tag = capture do %>
  <div role="none" class="dropdown-divider"></div>
<% end %>

<%
  button_groups = [
    [copy_button, quote_reply_button, open_new_issue_button],
    [edit_button, minimize_toggle_button, delete_button],
    [report_button, block_button],
    [stafftools_button]
  ].map { |group| group.compact.presence }.compact

  dividers = [divider_tag] * [button_groups.length - 1, 0].max
%>

<%#
  Reactions should always be at the top-level, outside of the dropdown. Until
  we find a better solution to show team discussion comment states, Pin and
  Subscribe will also stay outside the dropdown.
%>

<% if logged_in? && is_reactable && !minimized_comment_partial %>
  <%= render partial: "comments/comment_header_reaction_button", locals: { subject: comment } %>
<% end %>

<%= yield if block_given? %>

<details class="details-overlay details-reset position-relative d-inline-block <%= "ml-1" if comment.is_a?(PlatformTypes::TeamDiscussion) %>">
  <%= render Primer::ButtonComponent.new(tag: :summary, scheme: :link, classes: "timeline-comment-action Link--secondary") do %>
    <%= primer_octicon(:"kebab-horizontal", "aria-label": "Show options") %>
  <% end %>
  <details-menu class="dropdown-menu dropdown-menu-sw show-more-popover color-fg-default anim-scale-in" style="width:185px"><%# erblint:disable Primer::Accessibility::DetailsMenuMigration %>
    <% button_groups.zip(dividers).flatten.each do |menu_item| %>
      <%= menu_item %>
    <% end %>
  </details-menu>
</details>

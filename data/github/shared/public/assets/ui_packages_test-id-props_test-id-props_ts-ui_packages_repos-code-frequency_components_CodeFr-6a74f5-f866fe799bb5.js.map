{"version":3,"file":"chunk-ui_packages_test-id-props_test-id-props_ts-ui_packages_repos-code-frequency_components_CodeFr-6a74f5-xxxxxxxxxxxx.js","mappings":"oNAKO,IAAMA,EAAc,GAClB,EAAC,cAAeC,CAAK,E,+FCGf,SAASC,EAAmB,CAACC,UAAAA,CAAS,CAAEC,UAAAA,CAAS,CAA0B,EACxF,IAAMC,EAAwBC,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KACpC,IAAMC,EAAQJ,CAAS,CAAC,EAAE,CACpBK,EAAOL,EAAUM,EAAE,CAAC,IAC1B,GAAI,CAACF,GAAS,CAACC,EACb,MAAO,GAET,IAAME,EAAY,IAAIC,KAAKJ,CAAK,CAACK,EAAAA,CAAUA,CAACC,SAAS,CAAC,EAChDC,EAAW,IAAIH,KAAKH,CAAI,CAACI,EAAAA,CAAUA,CAACC,SAAS,CAAC,EAEpD,OAAOH,GAAWK,gBAAkBD,GAAUC,aAChD,EAAG,CAACZ,EAAU,EAEd,MACE,WAACa,EAAAA,CAASA,CAAAA,CAACC,KAAK,K,UACd,UAACD,EAAAA,CAASA,CAACE,KAAK,E,SAAC,gB,GACjB,UAACF,EAAAA,CAASA,CAACG,WAAW,E,SAAC,kC,GACvB,UAACH,EAAAA,CAASA,CAACI,KAAK,EACdC,KAAK,aACLC,OAAQ,CACN,CACED,KAAM,aACNE,KAAM,YACNC,KAAMrB,CACR,EACA,CACEkB,KAAM,aACNE,KAAM,YACNC,KAAMpB,EACNqB,UAAW,MACb,EACD,CACDC,WAAW,OACXC,WAAW,YACXC,OAAQ,CACN,4DACA,wDACD,CACDC,aAAc,CACZR,KAAM,WACNS,OAAQ,CACNC,OAAQ,CAAC,YAAY,EAAE1B,EAAwB,OAAS,GAAG,CAAC,CAAC,CAEjE,EACA2B,YAAa,CACXV,OAAQ,CACNW,OAAQ,CACNC,QAAS,EACX,CACF,CACF,C,KAIR,CAEA,GAAG,CAAEhC,EAAmBiC,WAAW,EAA9BjC,CAAAA,EAAmBiC,WAAW,CAAK,oBAAmB,CAAE,CAAE,KAAM,CAAC,C","sources":["ui/packages/test-id-props/test-id-props.ts","ui/packages/repos-code-frequency/components/CodeFrequencyChart.tsx"],"sourcesContent":["export interface TestIdProps {\n  /** Test ID to be queried by automated testing suites */\n  'data-testid'?: string\n}\n\nexport const testIdProps = (value: string): TestIdProps => {\n  return {'data-testid': value}\n}\n","import {useMemo} from 'react'\nimport {ChartCard} from '@github-ui/chart-card'\nimport {type MetricDataPoint, METRIC_KEY} from '../types'\n\nexport type CodeFrequencyChartProps = {\n  additions: MetricDataPoint[]\n  deletions: MetricDataPoint[]\n}\n\nexport default function CodeFrequencyChart({additions, deletions}: CodeFrequencyChartProps) {\n  const isAcrossMultipleYears = useMemo(() => {\n    const first = additions[0]\n    const last = additions.at(-1)\n    if (!first || !last) {\n      return false\n    }\n    const firstDate = new Date(first[METRIC_KEY.TIMESTAMP])\n    const lastDate = new Date(last[METRIC_KEY.TIMESTAMP])\n\n    return firstDate?.getFullYear() !== lastDate?.getFullYear()\n  }, [additions])\n\n  return (\n    <ChartCard size=\"xl\">\n      <ChartCard.Title>Code frequency</ChartCard.Title>\n      <ChartCard.Description>Additions and deletions per week</ChartCard.Description>\n      <ChartCard.Chart\n        type=\"areaspline\"\n        series={[\n          {\n            type: 'areaspline',\n            name: 'Additions',\n            data: additions,\n          },\n          {\n            type: 'areaspline',\n            name: 'Deletions',\n            data: deletions,\n            dashStyle: 'Dash',\n          },\n        ]}\n        xAxisTitle=\"Date\"\n        yAxisTitle=\"Frequency\"\n        colors={[\n          'var(--data-green-color-emphasis, var(--data-green-color))',\n          'var(--data-red-color-emphasis, var(--data-red-color))',\n        ]}\n        xAxisOptions={{\n          type: 'datetime',\n          labels: {\n            format: `{value:%b %e${isAcrossMultipleYears ? ', %Y' : ''}}`,\n          },\n        }}\n        plotOptions={{\n          series: {\n            marker: {\n              enabled: false,\n            },\n          },\n        }}\n      />\n    </ChartCard>\n  )\n}\n\ntry{ CodeFrequencyChart.displayName ||= 'CodeFrequencyChart' } catch {}"],"names":["testIdProps","value","CodeFrequencyChart","additions","deletions","isAcrossMultipleYears","useMemo","first","last","at","firstDate","Date","METRIC_KEY","TIMESTAMP","lastDate","getFullYear","ChartCard","size","Title","Description","Chart","type","series","name","data","dashStyle","xAxisTitle","yAxisTitle","colors","xAxisOptions","labels","format","plotOptions","marker","enabled","displayName"],"sourceRoot":""}
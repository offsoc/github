# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PullRequestReview`.
# Please instead update this file by running `bin/tapioca dsl PullRequestReview`.

class PullRequestReview
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedSpammableMethods
  extend GeneratedSpammableClassMethods
  extend GeneratedWorkflowClassMethods
  include GeneratedWorkflowMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def variant_types; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::PullRequestReview).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequestReview).void)
      ).returns(::PullRequestReview)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequestReview).void)
      ).returns(::PullRequestReview)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequestReview).void)
      ).returns(::PullRequestReview)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequestReview).void)
      ).returns(::PullRequestReview)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequestReview).void)
      ).returns(::PullRequestReview)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::PullRequestReview]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::PullRequestReview)) }
    def fifth; end

    sig { returns(::PullRequestReview) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::PullRequestReview)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::PullRequestReview) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::PullRequestReview).void)
      ).returns(T.nilable(T::Enumerator[::PullRequestReview]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::PullRequestReview]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::PullRequestReview]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequestReview).void)
      ).returns(::PullRequestReview)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequestReview).void)
      ).returns(::PullRequestReview)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequestReview).void)
      ).returns(::PullRequestReview)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::PullRequestReview)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::PullRequestReview) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::PullRequestReview) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::PullRequestReview) }
    def first!; end

    sig { returns(T.nilable(::PullRequestReview)) }
    def forty_two; end

    sig { returns(::PullRequestReview) }
    def forty_two!; end

    sig { returns(T.nilable(::PullRequestReview)) }
    def fourth; end

    sig { returns(::PullRequestReview) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::PullRequestReview) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::PullRequestReview).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequestReview).void)
      ).returns(::PullRequestReview)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::PullRequestReview).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::PullRequestReview).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::PullRequestReview)) }
    def second; end

    sig { returns(::PullRequestReview) }
    def second!; end

    sig { returns(T.nilable(::PullRequestReview)) }
    def second_to_last; end

    sig { returns(::PullRequestReview) }
    def second_to_last!; end

    sig { returns(::PullRequestReview) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::PullRequestReview) }
    def take!; end

    sig { returns(T.nilable(::PullRequestReview)) }
    def third; end

    sig { returns(::PullRequestReview) }
    def third!; end

    sig { returns(T.nilable(::PullRequestReview)) }
    def third_to_last; end

    sig { returns(::PullRequestReview) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def code_scanning!; end

    sig { returns(T::Boolean) }
    def code_scanning?; end

    sig { void }
    def copilot!; end

    sig { returns(T::Boolean) }
    def copilot?; end

    sig { void }
    def dependabot!; end

    sig { returns(T::Boolean) }
    def dependabot?; end

    sig { void }
    def vanilla!; end

    sig { returns(T::Boolean) }
    def vanilla?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def abuse_report_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def abuse_report_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequestReview` class because it declared `has_many :abuse_reports`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AbuseReport::PrivateCollectionProxy) }
    def abuse_reports; end

    sig { params(value: T::Enumerable[::AbuseReport]).void }
    def abuse_reports=(value); end

    sig { returns(T::Array[T.untyped]) }
    def attachment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def attachment_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequestReview` class because it declared `has_many :attachments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Attachment::PrivateCollectionProxy) }
    def attachments; end

    sig { params(value: T::Enumerable[::Attachment]).void }
    def attachments=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestReviewEdit) }
    def build_latest_user_content_edit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
    def build_pull_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestReviewEdit) }
    def create_latest_user_content_edit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestReviewEdit) }
    def create_latest_user_content_edit!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
    def create_pull_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
    def create_pull_request!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T.nilable(::PullRequestReviewEdit)) }
    def latest_user_content_edit; end

    sig { params(value: T.nilable(::PullRequestReviewEdit)).void }
    def latest_user_content_edit=(value); end

    sig { returns(T::Array[T.untyped]) }
    def legacy_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def legacy_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequestReview` class because it declared `has_many :legacy_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reaction::PrivateCollectionProxy) }
    def legacy_reactions; end

    sig { params(value: T::Enumerable[::Reaction]).void }
    def legacy_reactions=(value); end

    sig { returns(T.nilable(::PullRequest)) }
    def pull_request; end

    sig { params(value: T.nilable(::PullRequest)).void }
    def pull_request=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pull_request_reviews_review_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pull_request_reviews_review_request_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequestReview` class because it declared `has_many :pull_request_reviews_review_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewsReviewRequest::PrivateCollectionProxy) }
    def pull_request_reviews_review_requests; end

    sig { params(value: T::Enumerable[::PullRequestReviewsReviewRequest]).void }
    def pull_request_reviews_review_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequestReview` class because it declared `has_many :reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewReaction::PrivateCollectionProxy) }
    def reactions; end

    sig { params(value: T::Enumerable[::PullRequestReviewReaction]).void }
    def reactions=(value); end

    sig { returns(T.nilable(::PullRequestReviewEdit)) }
    def reload_latest_user_content_edit; end

    sig { returns(T.nilable(::PullRequest)) }
    def reload_pull_request; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    sig { returns(T::Array[T.untyped]) }
    def review_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequestReview` class because it declared `has_many :review_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewComment::PrivateCollectionProxy) }
    def review_comments; end

    sig { params(value: T::Enumerable[::PullRequestReviewComment]).void }
    def review_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def review_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_request_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequestReview` class because it declared `has_many :review_requests, through: :pull_request_reviews_review_requests`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::ReviewRequest::PrivateCollectionProxy) }
    def review_requests; end

    sig { params(value: T::Enumerable[::ReviewRequest]).void }
    def review_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def review_thread_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_thread_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequestReview` class because it declared `has_many :review_threads`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewThread::PrivateCollectionProxy) }
    def review_threads; end

    sig { params(value: T::Enumerable[::PullRequestReviewThread]).void }
    def review_threads=(value); end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_content_edit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_content_edit_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequestReview` class because it declared `has_many :user_content_edits`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewEdit::PrivateCollectionProxy) }
    def user_content_edits; end

    sig { params(value: T::Enumerable[::PullRequestReviewEdit]).void }
    def user_content_edits=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def body_present(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def code_scanning(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def copilot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dependabot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_viewer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def has_body(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_code_scanning(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_commented(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_copilot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dependabot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_vanilla(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def vanilla(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def visible_in_timeline_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_non_reply_comments(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_abuse_reports; end

    sig { returns(Promise[T.untyped]) }
    def async_attachments; end

    sig { returns(Promise[T.untyped]) }
    def async_latest_user_content_edit; end

    sig { returns(Promise[T.untyped]) }
    def async_legacy_reactions; end

    sig { returns(Promise[T.untyped]) }
    def async_pull_request; end

    sig { returns(Promise[T.untyped]) }
    def async_pull_request_reviews_review_requests; end

    sig { returns(Promise[T.untyped]) }
    def async_reactions; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_review_comments; end

    sig { returns(Promise[T.untyped]) }
    def async_review_requests; end

    sig { returns(Promise[T.untyped]) }
    def async_review_threads; end

    sig { returns(Promise[T.untyped]) }
    def async_user; end

    sig { returns(Promise[T.untyped]) }
    def async_user_content_edits; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.untyped) }
    def body; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def body=(value); end

    sig { returns(T::Boolean) }
    def body?; end

    sig { returns(T.untyped) }
    def body_before_last_save; end

    sig { returns(T.untyped) }
    def body_before_type_cast; end

    sig { returns(T::Boolean) }
    def body_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def body_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def body_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def body_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def body_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def body_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def body_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def body_previously_was; end

    sig { returns(T.untyped) }
    def body_was; end

    sig { void }
    def body_will_change!; end

    sig { returns(T::Boolean) }
    def comment_hidden; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def comment_hidden=(value); end

    sig { returns(T::Boolean) }
    def comment_hidden?; end

    sig { returns(T.nilable(T::Boolean)) }
    def comment_hidden_before_last_save; end

    sig { returns(T.untyped) }
    def comment_hidden_before_type_cast; end

    sig { returns(T::Boolean) }
    def comment_hidden_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def comment_hidden_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def comment_hidden_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def comment_hidden_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def comment_hidden_classifier; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def comment_hidden_classifier=(value); end

    sig { returns(T::Boolean) }
    def comment_hidden_classifier?; end

    sig { returns(T.nilable(::String)) }
    def comment_hidden_classifier_before_last_save; end

    sig { returns(T.untyped) }
    def comment_hidden_classifier_before_type_cast; end

    sig { returns(T::Boolean) }
    def comment_hidden_classifier_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def comment_hidden_classifier_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def comment_hidden_classifier_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def comment_hidden_classifier_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def comment_hidden_classifier_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def comment_hidden_classifier_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def comment_hidden_classifier_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def comment_hidden_classifier_previously_was; end

    sig { returns(T.nilable(::String)) }
    def comment_hidden_classifier_was; end

    sig { void }
    def comment_hidden_classifier_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def comment_hidden_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def comment_hidden_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def comment_hidden_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def comment_hidden_previously_was; end

    sig { returns(T.untyped) }
    def comment_hidden_reason; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def comment_hidden_reason=(value); end

    sig { returns(T::Boolean) }
    def comment_hidden_reason?; end

    sig { returns(T.untyped) }
    def comment_hidden_reason_before_last_save; end

    sig { returns(T.untyped) }
    def comment_hidden_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def comment_hidden_reason_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def comment_hidden_reason_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def comment_hidden_reason_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def comment_hidden_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def comment_hidden_reason_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def comment_hidden_reason_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def comment_hidden_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def comment_hidden_reason_previously_was; end

    sig { returns(T.untyped) }
    def comment_hidden_reason_was; end

    sig { void }
    def comment_hidden_reason_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def comment_hidden_was; end

    sig { void }
    def comment_hidden_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def formatter; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def formatter=(value); end

    sig { returns(T::Boolean) }
    def formatter?; end

    sig { returns(T.nilable(::String)) }
    def formatter_before_last_save; end

    sig { returns(T.untyped) }
    def formatter_before_type_cast; end

    sig { returns(T::Boolean) }
    def formatter_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def formatter_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def formatter_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def formatter_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def formatter_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def formatter_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def formatter_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def formatter_previously_was; end

    sig { returns(T.nilable(::String)) }
    def formatter_was; end

    sig { void }
    def formatter_will_change!; end

    sig { returns(T::Boolean) }
    def has_body; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_body=(value); end

    sig { returns(T::Boolean) }
    def has_body?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_body_before_last_save; end

    sig { returns(T.untyped) }
    def has_body_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_body_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_body_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_body_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_body_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_body_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_body_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_body_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_body_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_body_was; end

    sig { void }
    def has_body_will_change!; end

    sig { returns(::String) }
    def head_sha; end

    sig { params(value: ::String).returns(::String) }
    def head_sha=(value); end

    sig { returns(T::Boolean) }
    def head_sha?; end

    sig { returns(T.nilable(::String)) }
    def head_sha_before_last_save; end

    sig { returns(T.untyped) }
    def head_sha_before_type_cast; end

    sig { returns(T::Boolean) }
    def head_sha_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def head_sha_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def head_sha_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def head_sha_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def head_sha_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def head_sha_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def head_sha_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def head_sha_previously_was; end

    sig { returns(T.nilable(::String)) }
    def head_sha_was; end

    sig { void }
    def head_sha_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def merge_base_sha; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def merge_base_sha=(value); end

    sig { returns(T::Boolean) }
    def merge_base_sha?; end

    sig { returns(T.nilable(::String)) }
    def merge_base_sha_before_last_save; end

    sig { returns(T.untyped) }
    def merge_base_sha_before_type_cast; end

    sig { returns(T::Boolean) }
    def merge_base_sha_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def merge_base_sha_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def merge_base_sha_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def merge_base_sha_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def merge_base_sha_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def merge_base_sha_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def merge_base_sha_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def merge_base_sha_previously_was; end

    sig { returns(T.nilable(::String)) }
    def merge_base_sha_was; end

    sig { void }
    def merge_base_sha_will_change!; end

    sig { returns(::Integer) }
    def pull_request_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def pull_request_id=(value); end

    sig { returns(T::Boolean) }
    def pull_request_id?; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id_before_last_save; end

    sig { returns(T.untyped) }
    def pull_request_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def pull_request_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pull_request_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pull_request_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pull_request_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pull_request_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pull_request_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_id_was; end

    sig { void }
    def pull_request_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def repository_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def repository_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_body!; end

    sig { void }
    def restore_comment_hidden!; end

    sig { void }
    def restore_comment_hidden_classifier!; end

    sig { void }
    def restore_comment_hidden_reason!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_formatter!; end

    sig { void }
    def restore_has_body!; end

    sig { void }
    def restore_head_sha!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_merge_base_sha!; end

    sig { void }
    def restore_pull_request_id!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_submitted_at!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_hidden!; end

    sig { void }
    def restore_user_id!; end

    sig { void }
    def restore_variant_type!; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_body; end

    sig { returns(T::Boolean) }
    def saved_change_to_body?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_comment_hidden; end

    sig { returns(T::Boolean) }
    def saved_change_to_comment_hidden?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_comment_hidden_classifier; end

    sig { returns(T::Boolean) }
    def saved_change_to_comment_hidden_classifier?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_comment_hidden_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_comment_hidden_reason?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_formatter; end

    sig { returns(T::Boolean) }
    def saved_change_to_formatter?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_body; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_body?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_head_sha; end

    sig { returns(T::Boolean) }
    def saved_change_to_head_sha?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_merge_base_sha; end

    sig { returns(T::Boolean) }
    def saved_change_to_merge_base_sha?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_pull_request_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_pull_request_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_submitted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_submitted_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_hidden; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_hidden?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_variant_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_variant_type?; end

    sig { returns(::Integer) }
    def state; end

    sig { params(value: ::Integer).returns(::Integer) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::Integer)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def state_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def state_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def submitted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def submitted_at=(value); end

    sig { returns(T::Boolean) }
    def submitted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def submitted_at_before_last_save; end

    sig { returns(T.untyped) }
    def submitted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def submitted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def submitted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def submitted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def submitted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def submitted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def submitted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def submitted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def submitted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def submitted_at_was; end

    sig { void }
    def submitted_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_hidden; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_hidden=(value); end

    sig { returns(T::Boolean) }
    def user_hidden?; end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_before_last_save; end

    sig { returns(T.untyped) }
    def user_hidden_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_hidden_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_hidden_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_hidden_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_was; end

    sig { void }
    def user_hidden_will_change!; end

    sig { returns(::Integer) }
    def user_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(::String) }
    def variant_type; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def variant_type=(value); end

    sig { returns(T::Boolean) }
    def variant_type?; end

    sig { returns(T.nilable(::String)) }
    def variant_type_before_last_save; end

    sig { returns(T.untyped) }
    def variant_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def variant_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def variant_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def variant_type_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def variant_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def variant_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def variant_type_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def variant_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def variant_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def variant_type_was; end

    sig { void }
    def variant_type_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_body?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_comment_hidden?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_comment_hidden_classifier?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_comment_hidden_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_formatter?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_body?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_head_sha?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_merge_base_sha?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pull_request_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_submitted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_hidden?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_variant_type?; end
  end

  module GeneratedPreludeBatchMethods
    sig { returns(T.untyped) }
    def dismissed_review_state; end

    sig { params(options: T.untyped).returns(T.untyped) }
    def prelude_body_html(options); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_dismissed_review_state; end

    sig { params(options: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_body_html(options); end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def prelude_on_behalf_of_visible_teams_for(viewer); end

    sig { params(viewer: T.untyped, options: T.untyped).returns(T.untyped) }
    def prelude_paginated_review_threads_and_replies_for(viewer, options); end

    sig { params(emotion: T.untyped).returns(T.untyped) }
    def prelude_reaction_count_for_reaction(emotion); end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def prelude_thread_comment_ids(viewer); end

    sig { returns(T.untyped) }
    def prelude_user_logins_by_reaction; end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_on_behalf_of_visible_teams_for(viewer); end

    sig { params(viewer: T.untyped, options: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_paginated_review_threads_and_replies_for(viewer, options); end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_thread_comment_ids(viewer); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_prelude_user_logins_by_reaction; end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def prelude_viewer_can_react(viewer); end

    sig { params(emotion: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_reaction_count_for_reaction(emotion); end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_viewer_can_react(viewer); end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def body_present(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def code_scanning(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def copilot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dependabot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_viewer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def has_body(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_code_scanning(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_commented(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_copilot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dependabot(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_vanilla(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def vanilla(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def visible_in_timeline_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_non_reply_comments(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedSpammableClassMethods
    sig { returns(Symbol) }
    def spammable_user_foreign_key; end
  end

  module GeneratedSpammableMethods
    sig { params(viewer: User).returns(Promise[T::Boolean]) }
    def async_hide_from_user?(viewer); end

    sig { params(viewer: User).returns(T::Boolean) }
    def hide_from_user?(viewer); end

    sig { returns(Integer) }
    def set_user_hidden; end

    sig { returns(T::Boolean) }
    def spammy?; end

    sig { returns(Symbol) }
    def user_association_for_spammy; end

    sig { params(viewer: User).returns(T::Boolean) }
    def user_authored_content?(viewer); end
  end

  module GeneratedWorkflowClassMethods
    sig { params(val: String).returns(T.untyped) }
    def state=(val); end

    sig { returns(PrivateRelationWhereChain) }
    def with_approved_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_changes_requested_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_commented_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_dismissed_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_pending_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_approved_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_changes_requested_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_commented_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_dismissed_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_pending_state; end
  end

  module GeneratedWorkflowMethods
    sig { void }
    def approve!; end

    sig { returns(T::Boolean) }
    def approved?; end

    sig { returns(T::Boolean) }
    def can_approve?; end

    sig { returns(T::Boolean) }
    def can_comment?; end

    sig { returns(T::Boolean) }
    def can_dismiss?; end

    sig { returns(T::Boolean) }
    def can_dismiss?; end

    sig { returns(T::Boolean) }
    def can_request_changes?; end

    sig { returns(T::Boolean) }
    def changes_requested?; end

    sig { void }
    def comment!; end

    sig { returns(T::Boolean) }
    def commented?; end

    sig { void }
    def dismiss!; end

    sig { void }
    def dismiss!; end

    sig { returns(T::Boolean) }
    def dismissed?; end

    sig { returns(T::Boolean) }
    def pending?; end

    sig { void }
    def request_changes!; end

    sig { returns(PrivateRelationWhereChain) }
    def without_approved_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_changes_requested_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_commented_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_dismissed_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_pending_state; end
  end

  class PrivateAssocationRelation < ::ActiveRecord::AssociationRelation
    include GeneratedWorkflowClassMethods
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::PullRequestReview } }

    sig { returns(T::Array[::PullRequestReview]) }
    def to_a; end

    sig { returns(T::Array[::PullRequestReview]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::PullRequestReview } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedWorkflowClassMethods
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::PullRequestReview } }

    sig do
      params(
        records: T.any(::PullRequestReview, T::Enumerable[T.any(::PullRequestReview, T::Enumerable[::PullRequestReview])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::PullRequestReview, T::Enumerable[T.any(::PullRequestReview, T::Enumerable[::PullRequestReview])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::PullRequestReview, T::Enumerable[T.any(::PullRequestReview, T::Enumerable[::PullRequestReview])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::PullRequestReview]) }
    def load_target; end

    sig do
      params(
        records: T.any(::PullRequestReview, T::Enumerable[T.any(::PullRequestReview, T::Enumerable[::PullRequestReview])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::PullRequestReview, T::Enumerable[T.any(::PullRequestReview, T::Enumerable[::PullRequestReview])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::PullRequestReview, T::Enumerable[T.any(::PullRequestReview, T::Enumerable[::PullRequestReview])])
      ).returns(T::Array[::PullRequestReview])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::PullRequestReview]) }
    def target; end

    sig { returns(T::Array[::PullRequestReview]) }
    def to_a; end

    sig { returns(T::Array[::PullRequestReview]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include GeneratedWorkflowClassMethods
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::PullRequestReview } }

    sig { returns(T::Array[::PullRequestReview]) }
    def to_a; end

    sig { returns(T::Array[::PullRequestReview]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::PullRequestReview } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

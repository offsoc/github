# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: feature_management/feature_flags/data/v2/feature.proto
# typed: strict

# *
# MonolithOptimizedFeatureFlag is the data model of a feature flag be used for enabled checks by the monolith. Embedded actors if present are present as an array.
class FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedFeatureFlag
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedFeatureFlag) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedFeatureFlag).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedFeatureFlag) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::MonolithOptimizedFeatureFlag, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String),
      owning_service: T.nilable(String),
      state: T.nilable(T.any(Symbol, String, Integer)),
      percentage_of_calls: T.nilable(Float),
      percentage_of_actors: T.nilable(Float),
      custom_gates: T.nilable(T::Array[String]),
      segments: T.nilable(T::Array[String]),
      default_segment_actors: T.nilable(T::Array[String])
    ).void
  end
  def initialize(
    name: "",
    owning_service: "",
    state: :INVALID,
    percentage_of_calls: 0.0,
    percentage_of_actors: 0.0,
    custom_gates: [],
    segments: [],
    default_segment_actors: []
  )
  end

  # name is the name of the feature flag and is unique. Max size is 250.
  sig { returns(String) }
  def name
  end

  # name is the name of the feature flag and is unique. Max size is 250.
  sig { params(value: String).void }
  def name=(value)
  end

  # name is the name of the feature flag and is unique. Max size is 250.
  sig { void }
  def clear_name
  end

  # owning_service is the name of the service in Service Catalog for that feature.
  sig { returns(String) }
  def owning_service
  end

  # owning_service is the name of the service in Service Catalog for that feature.
  sig { params(value: String).void }
  def owning_service=(value)
  end

  # owning_service is the name of the service in Service Catalog for that feature.
  sig { void }
  def clear_owning_service
  end

  # state is the enabled state of the feature. One of: invalid = 0, disabled = 1, partially-shipped = 2 or shipped = 3.
  sig { returns(T.any(Symbol, Integer)) }
  def state
  end

  # state is the enabled state of the feature. One of: invalid = 0, disabled = 1, partially-shipped = 2 or shipped = 3.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def state=(value)
  end

  # state is the enabled state of the feature. One of: invalid = 0, disabled = 1, partially-shipped = 2 or shipped = 3.
  sig { void }
  def clear_state
  end

  # percentage_of_calls indicates if the percentage of calls shared gate is defined. This will enable the feature flag for the specified percentage of calls. A value of zero will indicate it is off.
  sig { returns(Float) }
  def percentage_of_calls
  end

  # percentage_of_calls indicates if the percentage of calls shared gate is defined. This will enable the feature flag for the specified percentage of calls. A value of zero will indicate it is off.
  sig { params(value: Float).void }
  def percentage_of_calls=(value)
  end

  # percentage_of_calls indicates if the percentage of calls shared gate is defined. This will enable the feature flag for the specified percentage of calls. A value of zero will indicate it is off.
  sig { void }
  def clear_percentage_of_calls
  end

  # percentage_of_actors indicates if the percentage of actors' shared gate is defined for the feature flag. This will enable the feature flag for the specified percentage of actors. A value of zero will indicate it is off.
  sig { returns(Float) }
  def percentage_of_actors
  end

  # percentage_of_actors indicates if the percentage of actors' shared gate is defined for the feature flag. This will enable the feature flag for the specified percentage of actors. A value of zero will indicate it is off.
  sig { params(value: Float).void }
  def percentage_of_actors=(value)
  end

  # percentage_of_actors indicates if the percentage of actors' shared gate is defined for the feature flag. This will enable the feature flag for the specified percentage of actors. A value of zero will indicate it is off.
  sig { void }
  def clear_percentage_of_actors
  end

  # custom_gates indicates if custom group gates are defined for the feature flag. This will enable the feature flag for the specified custom groups.
  sig { returns(T::Array[String]) }
  def custom_gates
  end

  # custom_gates indicates if custom group gates are defined for the feature flag. This will enable the feature flag for the specified custom groups.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def custom_gates=(value)
  end

  # custom_gates indicates if custom group gates are defined for the feature flag. This will enable the feature flag for the specified custom groups.
  sig { void }
  def clear_custom_gates
  end

  # segments will contain the list of non-default segments associated with the feature flag.
  sig { returns(T::Array[String]) }
  def segments
  end

  # segments will contain the list of non-default segments associated with the feature flag.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def segments=(value)
  end

  # segments will contain the list of non-default segments associated with the feature flag.
  sig { void }
  def clear_segments
  end

  # default_segment_actors is the list of actors added to the default segment.
  sig { returns(T::Array[String]) }
  def default_segment_actors
  end

  # default_segment_actors is the list of actors added to the default segment.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def default_segment_actors=(value)
  end

  # default_segment_actors is the list of actors added to the default segment.
  sig { void }
  def clear_default_segment_actors
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# *
# FeatureFlag is the data model of a feature flag be used for enabled checks by clients. Embedded actors if present are present as a hash.
class FeatureManagement::FeatureFlags::Data::V2::FeatureFlag
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(FeatureManagement::FeatureFlags::Data::V2::FeatureFlag) }
  def self.decode(str)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::FeatureFlag).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(FeatureManagement::FeatureFlags::Data::V2::FeatureFlag) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: FeatureManagement::FeatureFlags::Data::V2::FeatureFlag, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String),
      owning_service: T.nilable(String),
      state: T.nilable(T.any(Symbol, String, Integer)),
      percentage_of_calls: T.nilable(Float),
      percentage_of_actors: T.nilable(Float),
      custom_gates: T.nilable(T::Array[String]),
      segments: T.nilable(T::Array[String]),
      default_segment_actors: T.nilable(T::Hash[String, T::Boolean])
    ).void
  end
  def initialize(
    name: "",
    owning_service: "",
    state: :INVALID,
    percentage_of_calls: 0.0,
    percentage_of_actors: 0.0,
    custom_gates: [],
    segments: [],
    default_segment_actors: ::Google::Protobuf::Map.new(:string, :bool)
  )
  end

  # name is the name of the feature flag and is unique. Max size is 250.
  sig { returns(String) }
  def name
  end

  # name is the name of the feature flag and is unique. Max size is 250.
  sig { params(value: String).void }
  def name=(value)
  end

  # name is the name of the feature flag and is unique. Max size is 250.
  sig { void }
  def clear_name
  end

  # owning_service is the name of the service in Service Catalog for that feature.
  sig { returns(String) }
  def owning_service
  end

  # owning_service is the name of the service in Service Catalog for that feature.
  sig { params(value: String).void }
  def owning_service=(value)
  end

  # owning_service is the name of the service in Service Catalog for that feature.
  sig { void }
  def clear_owning_service
  end

  # state is the enabled state of the feature. One of: invalid = 0, disabled = 1, partially-shipped = 2 or shipped = 3.
  sig { returns(T.any(Symbol, Integer)) }
  def state
  end

  # state is the enabled state of the feature. One of: invalid = 0, disabled = 1, partially-shipped = 2 or shipped = 3.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def state=(value)
  end

  # state is the enabled state of the feature. One of: invalid = 0, disabled = 1, partially-shipped = 2 or shipped = 3.
  sig { void }
  def clear_state
  end

  # percentage_of_calls indicates if the percentage of calls shared gate is defined. This will enable the feature flag for the specified percentage of calls. A value of zero will indicate it is off.
  sig { returns(Float) }
  def percentage_of_calls
  end

  # percentage_of_calls indicates if the percentage of calls shared gate is defined. This will enable the feature flag for the specified percentage of calls. A value of zero will indicate it is off.
  sig { params(value: Float).void }
  def percentage_of_calls=(value)
  end

  # percentage_of_calls indicates if the percentage of calls shared gate is defined. This will enable the feature flag for the specified percentage of calls. A value of zero will indicate it is off.
  sig { void }
  def clear_percentage_of_calls
  end

  # percentage_of_actors indicates if the percentage of actors' shared gate is defined for the feature flag. This will enable the feature flag for the specified percentage of actors. A value of zero will indicate it is off.
  sig { returns(Float) }
  def percentage_of_actors
  end

  # percentage_of_actors indicates if the percentage of actors' shared gate is defined for the feature flag. This will enable the feature flag for the specified percentage of actors. A value of zero will indicate it is off.
  sig { params(value: Float).void }
  def percentage_of_actors=(value)
  end

  # percentage_of_actors indicates if the percentage of actors' shared gate is defined for the feature flag. This will enable the feature flag for the specified percentage of actors. A value of zero will indicate it is off.
  sig { void }
  def clear_percentage_of_actors
  end

  # custom_gates indicates if custom group gates are defined for the feature flag. This will enable the feature flag for the specified custom groups.
  sig { returns(T::Array[String]) }
  def custom_gates
  end

  # custom_gates indicates if custom group gates are defined for the feature flag. This will enable the feature flag for the specified custom groups.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def custom_gates=(value)
  end

  # custom_gates indicates if custom group gates are defined for the feature flag. This will enable the feature flag for the specified custom groups.
  sig { void }
  def clear_custom_gates
  end

  # segments will contain the list of non-default segments associated with the feature flag.
  sig { returns(T::Array[String]) }
  def segments
  end

  # segments will contain the list of non-default segments associated with the feature flag.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def segments=(value)
  end

  # segments will contain the list of non-default segments associated with the feature flag.
  sig { void }
  def clear_segments
  end

  # default_segment_actors is a map of actor ids to boolean of the actors added to the default segment. In the map the boolean itself is of no consequence and presence of an actor is what matters.
  sig { returns(T::Hash[String, T::Boolean]) }
  def default_segment_actors
  end

  # default_segment_actors is a map of actor ids to boolean of the actors added to the default segment. In the map the boolean itself is of no consequence and presence of an actor is what matters.
  sig { params(value: ::Google::Protobuf::Map).void }
  def default_segment_actors=(value)
  end

  # default_segment_actors is a map of actor ids to boolean of the actors added to the default segment. In the map the boolean itself is of no consequence and presence of an actor is what matters.
  sig { void }
  def clear_default_segment_actors
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

module FeatureManagement::FeatureFlags::Data::V2::FeatureFlagState
  self::INVALID = T.let(0, Integer)
  self::DISABLED = T.let(1, Integer)
  self::PARTIALLY_SHIPPED = T.let(2, Integer)
  self::SHIPPED = T.let(3, Integer)

  sig { params(value: Integer).returns(T.nilable(Symbol)) }
  def self.lookup(value)
  end

  sig { params(value: Symbol).returns(T.nilable(Integer)) }
  def self.resolve(value)
  end

  sig { returns(::Google::Protobuf::EnumDescriptor) }
  def self.descriptor
  end
end

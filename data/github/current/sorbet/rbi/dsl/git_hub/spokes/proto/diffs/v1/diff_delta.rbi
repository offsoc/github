# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::Diffs::V1::DiffDelta`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::Diffs::V1::DiffDelta`.

class GitHub::Spokes::Proto::Diffs::V1::DiffDelta
  sig do
    params(
      diff_status: T.nilable(T.any(Symbol, Integer)),
      new_tree_node: T.nilable(GitHub::Spokes::Proto::Types::V1::TreeEntry),
      old_tree_node: T.nilable(GitHub::Spokes::Proto::Types::V1::TreeEntry),
      similarity: T.nilable(Integer)
    ).void
  end
  def initialize(diff_status: nil, new_tree_node: nil, old_tree_node: nil, similarity: nil); end

  sig { returns(T.nilable(Symbol)) }
  def _similarity; end

  sig { void }
  def clear_diff_status; end

  sig { void }
  def clear_new_tree_node; end

  sig { void }
  def clear_old_tree_node; end

  sig { void }
  def clear_similarity; end

  sig { returns(T.any(Symbol, Integer)) }
  def diff_status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def diff_status=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::TreeEntry)) }
  def new_tree_node; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::TreeEntry)).void }
  def new_tree_node=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::TreeEntry)) }
  def old_tree_node; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::TreeEntry)).void }
  def old_tree_node=(value); end

  sig { returns(Integer) }
  def similarity; end

  sig { params(value: Integer).void }
  def similarity=(value); end
end

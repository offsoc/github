# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::UserSignup`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::UserSignup`.

class Hydro::Schemas::Github::V1::UserSignup
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      arkose_captcha_response_v4: T.nilable(Hydro::Schemas::Github::V1::Entities::ArkoseCaptchaResponseV4),
      elected_to_receive_marketing_email: T.nilable(T::Boolean),
      email: T.nilable(Hydro::Schemas::Github::V1::Entities::UserEmail),
      funcaptcha_response: T.nilable(Hydro::Schemas::Github::V1::Entities::FuncaptchaResponse),
      funcaptcha_session_id: T.nilable(String),
      funcaptcha_solved: T.nilable(T::Boolean),
      ga_id: T.nilable(String),
      raw_arkose_captcha_response_v4: T.nilable(String),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      spamurai_form_signals: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals),
      visitor_id: T.nilable(String)
    ).void
  end
  def initialize(actor: nil, arkose_captcha_response_v4: nil, elected_to_receive_marketing_email: nil, email: nil, funcaptcha_response: nil, funcaptcha_session_id: nil, funcaptcha_solved: nil, ga_id: nil, raw_arkose_captcha_response_v4: nil, request_context: nil, spamurai_form_signals: nil, visitor_id: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::ArkoseCaptchaResponseV4)) }
  def arkose_captcha_response_v4; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::ArkoseCaptchaResponseV4)).void }
  def arkose_captcha_response_v4=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_arkose_captcha_response_v4; end

  sig { void }
  def clear_elected_to_receive_marketing_email; end

  sig { void }
  def clear_email; end

  sig { void }
  def clear_funcaptcha_response; end

  sig { void }
  def clear_funcaptcha_session_id; end

  sig { void }
  def clear_funcaptcha_solved; end

  sig { void }
  def clear_ga_id; end

  sig { void }
  def clear_raw_arkose_captcha_response_v4; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_spamurai_form_signals; end

  sig { void }
  def clear_visitor_id; end

  sig { returns(T::Boolean) }
  def elected_to_receive_marketing_email; end

  sig { params(value: T::Boolean).void }
  def elected_to_receive_marketing_email=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::UserEmail)) }
  def email; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::UserEmail)).void }
  def email=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::FuncaptchaResponse)) }
  def funcaptcha_response; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::FuncaptchaResponse)).void }
  def funcaptcha_response=(value); end

  sig { returns(String) }
  def funcaptcha_session_id; end

  sig { params(value: String).void }
  def funcaptcha_session_id=(value); end

  sig { returns(T::Boolean) }
  def funcaptcha_solved; end

  sig { params(value: T::Boolean).void }
  def funcaptcha_solved=(value); end

  sig { returns(String) }
  def ga_id; end

  sig { params(value: String).void }
  def ga_id=(value); end

  sig { returns(String) }
  def raw_arkose_captcha_response_v4; end

  sig { params(value: String).void }
  def raw_arkose_captcha_response_v4=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)) }
  def spamurai_form_signals; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)).void }
  def spamurai_form_signals=(value); end

  sig { returns(String) }
  def visitor_id; end

  sig { params(value: String).void }
  def visitor_id=(value); end
end

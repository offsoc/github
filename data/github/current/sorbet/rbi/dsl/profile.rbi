# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Profile`.
# Please instead update this file by running `bin/tapioca dsl Profile`.

class Profile
  include GeneratedAsyncReflectionAssociations
  include GeneratedSpammableMethods
  extend GeneratedSpammableClassMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Profile).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Profile).void)).returns(::Profile) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Profile).void)).returns(::Profile) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Profile).void)).returns(::Profile) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Profile).void)).returns(::Profile) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Profile).void)).returns(::Profile) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Profile]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Profile)) }
    def fifth; end

    sig { returns(::Profile) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Profile)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Profile) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Profile).void)
      ).returns(T.nilable(T::Enumerator[::Profile]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Profile]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Profile]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Profile).void)).returns(::Profile) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Profile).void)).returns(::Profile) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Profile).void)).returns(::Profile) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Profile)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Profile) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Profile) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Profile) }
    def first!; end

    sig { returns(T.nilable(::Profile)) }
    def forty_two; end

    sig { returns(::Profile) }
    def forty_two!; end

    sig { returns(T.nilable(::Profile)) }
    def fourth; end

    sig { returns(::Profile) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Profile) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Profile).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Profile).void)).returns(::Profile) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Profile).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Profile).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Profile)) }
    def second; end

    sig { returns(::Profile) }
    def second!; end

    sig { returns(T.nilable(::Profile)) }
    def second_to_last; end

    sig { returns(::Profile) }
    def second_to_last!; end

    sig { returns(::Profile) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Profile) }
    def take!; end

    sig { returns(T.nilable(::Profile)) }
    def third; end

    sig { returns(::Profile) }
    def third!; end

    sig { returns(T.nilable(::Profile)) }
    def third_to_last; end

    sig { returns(::Profile) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def build_sponsors_listing_stafftools_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserStatus) }
    def build_user_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def create_sponsors_listing_stafftools_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def create_sponsors_listing_stafftools_metadata!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserStatus) }
    def create_user_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserStatus) }
    def create_user_status!(*args, &blk); end

    # This method is created by ActiveRecord on the `Profile` class because it declared `has_many :pinned_repositories, through: :profile_pins`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def pinned_repositories; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def pinned_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pinned_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pinned_repository_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def profile_pin_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def profile_pin_ids=(ids); end

    # This method is created by ActiveRecord on the `Profile` class because it declared `has_many :profile_pins`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ProfilePin::PrivateCollectionProxy) }
    def profile_pins; end

    sig { params(value: T::Enumerable[::ProfilePin]).void }
    def profile_pins=(value); end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def reload_sponsors_listing_stafftools_metadata; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::UserStatus)) }
    def reload_user_status; end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def sponsors_listing_stafftools_metadata; end

    sig { params(value: T.nilable(::SponsorsListingStafftoolsMetadata)).void }
    def sponsors_listing_stafftools_metadata=(value); end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end

    sig { returns(T.nilable(::UserStatus)) }
    def user_status; end

    sig { params(value: T.nilable(::UserStatus)).void }
    def user_status=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_pinned_repositories; end

    sig { returns(Promise[T.untyped]) }
    def async_profile_pins; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsors_listing_stafftools_metadata; end

    sig { returns(Promise[T.untyped]) }
    def async_user; end

    sig { returns(Promise[T.untyped]) }
    def async_user_status; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.untyped) }
    def bio; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def bio=(value); end

    sig { returns(T::Boolean) }
    def bio?; end

    sig { returns(T.untyped) }
    def bio_before_last_save; end

    sig { returns(T.untyped) }
    def bio_before_type_cast; end

    sig { returns(T::Boolean) }
    def bio_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def bio_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def bio_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def bio_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def bio_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def bio_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def bio_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def bio_previously_was; end

    sig { returns(T.untyped) }
    def bio_was; end

    sig { void }
    def bio_will_change!; end

    sig { returns(T.nilable(::String)) }
    def blog; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def blog=(value); end

    sig { returns(T::Boolean) }
    def blog?; end

    sig { returns(T.nilable(::String)) }
    def blog_before_last_save; end

    sig { returns(T.untyped) }
    def blog_before_type_cast; end

    sig { returns(T::Boolean) }
    def blog_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def blog_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def blog_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def blog_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def blog_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def blog_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def blog_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def blog_previously_was; end

    sig { returns(T.nilable(::String)) }
    def blog_was; end

    sig { void }
    def blog_will_change!; end

    sig { returns(T.nilable(::String)) }
    def company; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def company=(value); end

    sig { returns(T::Boolean) }
    def company?; end

    sig { returns(T.nilable(::String)) }
    def company_before_last_save; end

    sig { returns(T.untyped) }
    def company_before_type_cast; end

    sig { returns(T::Boolean) }
    def company_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def company_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def company_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def company_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def company_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def company_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def company_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def company_previously_was; end

    sig { returns(T.nilable(::String)) }
    def company_was; end

    sig { void }
    def company_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country_code=(value); end

    sig { returns(T::Boolean) }
    def country_code?; end

    sig { returns(T.nilable(::String)) }
    def country_code_before_last_save; end

    sig { returns(T.untyped) }
    def country_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_code_was; end

    sig { void }
    def country_code_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T::Boolean) }
    def display_staff_badge; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def display_staff_badge=(value); end

    sig { returns(T::Boolean) }
    def display_staff_badge?; end

    sig { returns(T.nilable(T::Boolean)) }
    def display_staff_badge_before_last_save; end

    sig { returns(T.untyped) }
    def display_staff_badge_before_type_cast; end

    sig { returns(T::Boolean) }
    def display_staff_badge_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def display_staff_badge_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def display_staff_badge_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def display_staff_badge_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def display_staff_badge_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def display_staff_badge_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def display_staff_badge_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def display_staff_badge_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def display_staff_badge_was; end

    sig { void }
    def display_staff_badge_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(T.untyped) }
    def encoded_social_accounts; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def encoded_social_accounts=(value); end

    sig { returns(T::Boolean) }
    def encoded_social_accounts?; end

    sig { returns(T.untyped) }
    def encoded_social_accounts_before_last_save; end

    sig { returns(T.untyped) }
    def encoded_social_accounts_before_type_cast; end

    sig { returns(T::Boolean) }
    def encoded_social_accounts_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def encoded_social_accounts_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def encoded_social_accounts_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def encoded_social_accounts_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def encoded_social_accounts_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def encoded_social_accounts_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def encoded_social_accounts_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def encoded_social_accounts_previously_was; end

    sig { returns(T.untyped) }
    def encoded_social_accounts_was; end

    sig { void }
    def encoded_social_accounts_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def hireable; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def hireable=(value); end

    sig { returns(T::Boolean) }
    def hireable?; end

    sig { returns(T.nilable(T::Boolean)) }
    def hireable_before_last_save; end

    sig { returns(T.untyped) }
    def hireable_before_type_cast; end

    sig { returns(T::Boolean) }
    def hireable_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def hireable_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def hireable_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def hireable_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def hireable_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def hireable_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def hireable_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def hireable_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def hireable_was; end

    sig { void }
    def hireable_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def local_time_zone_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def local_time_zone_name=(value); end

    sig { returns(T::Boolean) }
    def local_time_zone_name?; end

    sig { returns(T.nilable(::String)) }
    def local_time_zone_name_before_last_save; end

    sig { returns(T.untyped) }
    def local_time_zone_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def local_time_zone_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def local_time_zone_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def local_time_zone_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def local_time_zone_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def local_time_zone_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def local_time_zone_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def local_time_zone_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def local_time_zone_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def local_time_zone_name_was; end

    sig { void }
    def local_time_zone_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def location; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def location=(value); end

    sig { returns(T::Boolean) }
    def location?; end

    sig { returns(T.nilable(::String)) }
    def location_before_last_save; end

    sig { returns(T.untyped) }
    def location_before_type_cast; end

    sig { returns(T::Boolean) }
    def location_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def location_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def location_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_previously_was; end

    sig { returns(T.nilable(::String)) }
    def location_was; end

    sig { void }
    def location_will_change!; end

    sig { returns(T.nilable(::String)) }
    def mobile_time_zone_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def mobile_time_zone_name=(value); end

    sig { returns(T::Boolean) }
    def mobile_time_zone_name?; end

    sig { returns(T.nilable(::String)) }
    def mobile_time_zone_name_before_last_save; end

    sig { returns(T.untyped) }
    def mobile_time_zone_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def mobile_time_zone_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def mobile_time_zone_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def mobile_time_zone_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def mobile_time_zone_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def mobile_time_zone_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def mobile_time_zone_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def mobile_time_zone_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def mobile_time_zone_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def mobile_time_zone_name_was; end

    sig { void }
    def mobile_time_zone_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def pronouns; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def pronouns=(value); end

    sig { returns(T::Boolean) }
    def pronouns?; end

    sig { returns(T.nilable(::String)) }
    def pronouns_before_last_save; end

    sig { returns(T.untyped) }
    def pronouns_before_type_cast; end

    sig { returns(T::Boolean) }
    def pronouns_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pronouns_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pronouns_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def pronouns_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pronouns_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pronouns_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def pronouns_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pronouns_previously_was; end

    sig { returns(T.nilable(::String)) }
    def pronouns_was; end

    sig { void }
    def pronouns_will_change!; end

    sig { returns(T::Boolean) }
    def readme_opt_in; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def readme_opt_in=(value); end

    sig { returns(T::Boolean) }
    def readme_opt_in?; end

    sig { returns(T.nilable(T::Boolean)) }
    def readme_opt_in_before_last_save; end

    sig { returns(T.untyped) }
    def readme_opt_in_before_type_cast; end

    sig { returns(T::Boolean) }
    def readme_opt_in_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def readme_opt_in_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def readme_opt_in_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def readme_opt_in_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def readme_opt_in_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def readme_opt_in_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def readme_opt_in_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def readme_opt_in_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def readme_opt_in_was; end

    sig { void }
    def readme_opt_in_will_change!; end

    sig { void }
    def restore_bio!; end

    sig { void }
    def restore_blog!; end

    sig { void }
    def restore_company!; end

    sig { void }
    def restore_country_code!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_display_staff_badge!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_encoded_social_accounts!; end

    sig { void }
    def restore_hireable!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_local_time_zone_name!; end

    sig { void }
    def restore_location!; end

    sig { void }
    def restore_mobile_time_zone_name!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_pronouns!; end

    sig { void }
    def restore_readme_opt_in!; end

    sig { void }
    def restore_spoken_language_preference_code!; end

    sig { void }
    def restore_twitter_username!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_hidden!; end

    sig { void }
    def restore_user_id!; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_bio; end

    sig { returns(T::Boolean) }
    def saved_change_to_bio?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_blog; end

    sig { returns(T::Boolean) }
    def saved_change_to_blog?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_company; end

    sig { returns(T::Boolean) }
    def saved_change_to_company?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_country_code?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_display_staff_badge; end

    sig { returns(T::Boolean) }
    def saved_change_to_display_staff_badge?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_encoded_social_accounts; end

    sig { returns(T::Boolean) }
    def saved_change_to_encoded_social_accounts?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_hireable; end

    sig { returns(T::Boolean) }
    def saved_change_to_hireable?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_local_time_zone_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_local_time_zone_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_location; end

    sig { returns(T::Boolean) }
    def saved_change_to_location?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_mobile_time_zone_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_mobile_time_zone_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_pronouns; end

    sig { returns(T::Boolean) }
    def saved_change_to_pronouns?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_readme_opt_in; end

    sig { returns(T::Boolean) }
    def saved_change_to_readme_opt_in?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_spoken_language_preference_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_spoken_language_preference_code?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_twitter_username; end

    sig { returns(T::Boolean) }
    def saved_change_to_twitter_username?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_hidden; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_hidden?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable(::String)) }
    def spoken_language_preference_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def spoken_language_preference_code=(value); end

    sig { returns(T::Boolean) }
    def spoken_language_preference_code?; end

    sig { returns(T.nilable(::String)) }
    def spoken_language_preference_code_before_last_save; end

    sig { returns(T.untyped) }
    def spoken_language_preference_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def spoken_language_preference_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def spoken_language_preference_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def spoken_language_preference_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def spoken_language_preference_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def spoken_language_preference_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def spoken_language_preference_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def spoken_language_preference_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def spoken_language_preference_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def spoken_language_preference_code_was; end

    sig { void }
    def spoken_language_preference_code_will_change!; end

    sig { returns(T.nilable(::String)) }
    def twitter_username; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def twitter_username=(value); end

    sig { returns(T::Boolean) }
    def twitter_username?; end

    sig { returns(T.nilable(::String)) }
    def twitter_username_before_last_save; end

    sig { returns(T.untyped) }
    def twitter_username_before_type_cast; end

    sig { returns(T::Boolean) }
    def twitter_username_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def twitter_username_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def twitter_username_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def twitter_username_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def twitter_username_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def twitter_username_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def twitter_username_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def twitter_username_previously_was; end

    sig { returns(T.nilable(::String)) }
    def twitter_username_was; end

    sig { void }
    def twitter_username_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_hidden; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_hidden=(value); end

    sig { returns(T::Boolean) }
    def user_hidden?; end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_before_last_save; end

    sig { returns(T.untyped) }
    def user_hidden_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_hidden_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_hidden_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_hidden_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_was; end

    sig { void }
    def user_hidden_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def user_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bio?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_blog?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_company?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_display_staff_badge?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_encoded_social_accounts?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hireable?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_local_time_zone_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_location?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mobile_time_zone_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pronouns?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_readme_opt_in?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_spoken_language_preference_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_twitter_username?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_hidden?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedSpammableClassMethods
    sig { returns(Symbol) }
    def spammable_user_foreign_key; end
  end

  module GeneratedSpammableMethods
    sig { params(viewer: User).returns(Promise[T::Boolean]) }
    def async_hide_from_user?(viewer); end

    sig { params(viewer: User).returns(T::Boolean) }
    def hide_from_user?(viewer); end

    sig { returns(Integer) }
    def set_user_hidden; end

    sig { returns(T::Boolean) }
    def spammy?; end

    sig { returns(Symbol) }
    def user_association_for_spammy; end

    sig { params(viewer: User).returns(T::Boolean) }
    def user_authored_content?(viewer); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Profile } }

    sig { returns(T::Array[::Profile]) }
    def to_a; end

    sig { returns(T::Array[::Profile]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Profile } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Profile } }

    sig do
      params(
        records: T.any(::Profile, T::Enumerable[T.any(::Profile, T::Enumerable[::Profile])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Profile, T::Enumerable[T.any(::Profile, T::Enumerable[::Profile])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Profile, T::Enumerable[T.any(::Profile, T::Enumerable[::Profile])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Profile]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Profile, T::Enumerable[T.any(::Profile, T::Enumerable[::Profile])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Profile, T::Enumerable[T.any(::Profile, T::Enumerable[::Profile])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Profile, T::Enumerable[T.any(::Profile, T::Enumerable[::Profile])])
      ).returns(T::Array[::Profile])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Profile]) }
    def target; end

    sig { returns(T::Array[::Profile]) }
    def to_a; end

    sig { returns(T::Array[::Profile]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Profile } }

    sig { returns(T::Array[::Profile]) }
    def to_a; end

    sig { returns(T::Array[::Profile]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Profile } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

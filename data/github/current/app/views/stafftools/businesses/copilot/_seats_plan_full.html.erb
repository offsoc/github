<% page_info title: "Copilot" %>

<%= render Primer::Beta::Subhead.new do |component| %>
  <% component.with_heading(tag: :h2) do %>Copilot<% end %>
<% end %>

<%= render(Primer::Beta::BorderBox.new(padding: :condensed)) do |component| %>
  <% component.with_header do |h| %>
    <% h.with_title(tag: :h2) do %>
      Copilot Access
    <% end %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Copilot Billable?",
      copilot_business.copilot_billable?,
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Copilot Metered Services Billable? (Billing Check)",
      copilot_business.billable_object.metered_services_billable?[:billable],
      "Reason: <strong>#{copilot_business.billable_object.metered_services_billable?[:reason]}</strong>".html_safe, # rubocop:disable Rails/OutputSafety
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Enterprise Billing Type",
      this_business.billing_type.present? ? this_business.billing_type : false,
      "What billing type does this enterprise have?",
      label_scheme: this_business.billing_type.present? ? :success : :danger,
    ) %>
  <% end %>
  <% if this_business.enterprise_agreements.where(status: "active").count > 0 %>
    <% component.with_row do %>
      <%= render Stafftools::Copilot::DetailComponent.new(
        "Does this enterprise have an Azure Subscription ID?",
        this_business.customer.present? && this_business.customer.azure_subscription_id.present?,
        "Since this enterprise has an Enterprise Agreement, they MUST have an Azure Subscription ID.",
      ) %>
    <% end %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Is this enterprise a trial enterprise?",
      this_business.trial_status(this_business).present?,
      this_business.trial_status(this_business),
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Has this enterprise enabled Copilot?",
      !copilot_business.copilot_disabled?,
      "Current setting: #{copilot_business.copilot_enabled_setting}",
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Eligible to migrate to EnterpriseTeams?",
      copilot_business.eligible_to_migrate_to_enterprise_teams?,
    ) %>
  <% end %>
  <% component.with_row do %>
    <%
      active_trials_count = active_trials.count
      active_trial_copilot_plan = active_trials.first&.copilot_plan
    %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Does this enterprise have an organization with an associated Copilot Business/Enterprise trial?",
      copilot_business.has_trial_organization?,
      active_trials_count > 0 ? "#{active_trials_count} Copilot #{active_trial_copilot_plan&.capitalize} trial(s) active" : "No active trials",
    ) %>
  <% end %>

<% end %>

<%= render(Stafftools::Copilot::PlanComponent.new(copilot_business)) %>

<br>
<%= render(Primer::Beta::BorderBox.new(padding: :condensed)) do |component| %>
  <% component.with_header do |h| %>
    <% h.with_title(tag: :h2) do %>
      Copilot Settings
    <% end %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Public Code Suggestions",
      copilot_business.no_public_code_suggestions_policy? ? "No Policy" : !copilot_business.public_code_suggestions_configured? ? "Unconfigured" : copilot_business.allow_public_code_suggestions? ? "Allow" : "Block",
      "Whether this enterprise has allowed or blocked public code suggestions",
      label_scheme: copilot_business.allow_public_code_suggestions? ? :success : copilot_business.no_public_code_suggestions_policy? ? :secondary : :danger
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "IDE Chat",
      copilot_business.chat_setting.titleize,
      "Whether this enterprise has allowed or blocked chat",
      label_scheme: copilot_business.chat_enabled? ? :success : copilot_business.no_chat_policy? ? :secondary : :danger
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "CLI",
      copilot_business.cli_setting.titleize,
      "Whether this enterprise has enabled or disabled Copilot in the CLI",
      label_scheme: copilot_business.cli_enabled? ? :success : copilot_business.cli_no_policy? ? :secondary : :danger
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "#{Copilot::COPILOT_IN_DOTCOM} (#{Copilot::ENTERPRISE_PRODUCT_NAME})",
      copilot_business.copilot_for_dotcom_setting.titleize,
      "Whether this enterprise has enabled or disabled #{Copilot::COPILOT_IN_DOTCOM}",
      label_scheme: copilot_business.copilot_for_dotcom_enabled? ? :success : copilot_business.copilot_for_dotcom_no_policy? ? :secondary : :danger
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Dotcom Chat",
      copilot_business.dotcom_chat_setting.titleize,
      "Whether this enterprise has enabled or disabled Copilot Chat in github.com (part of #{Copilot::ENTERPRISE_PRODUCT_NAME})",
      label_scheme: copilot_business.dotcom_chat_enabled? ? :success : copilot_business.dotcom_chat_no_policy? ? :secondary : :danger
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Bing in Dotcom Chat",
      copilot_business.bing_github_chat_no_policy? ? "No Policy" : copilot_business.bing_github_chat_enabled? ? "Enabled" : "Disabled",
      "Whether this enterprise has enabled or disabled the use of Bing Search in Copilot Chat in github.com (part of #{Copilot::ENTERPRISE_PRODUCT_NAME})",
      label_scheme: copilot_business.bing_github_chat_enabled? ? :success : copilot_business.bing_github_chat_no_policy? ? :secondary : :danger
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Preview features in github.com",
      copilot_business.beta_features_github_chat_no_policy? ? "No Policy" : copilot_business.beta_features_github_chat_enabled? ? "Enabled" : "Disabled",
      "Whether this enterprise has enabled or disabled the use of preview Copilot features in github.com (part of #{Copilot::ENTERPRISE_PRODUCT_NAME})",
      label_scheme: copilot_business.beta_features_github_chat_enabled? ? :success : copilot_business.beta_features_github_chat_no_policy? ? :secondary : :danger
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "PR Summarizations",
      copilot_business.pr_summarizations_setting.titleize,
      "Whether this enterprise has enabled or disabled Copilot PR Summarizations (part of #{Copilot::ENTERPRISE_PRODUCT_NAME})",
      label_scheme: copilot_business.pr_summarizations_enabled? ? :success : copilot_business.pr_summarizations_no_policy? ? :secondary : :danger
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Fine-tuning",
      copilot_business.custom_models_setting.titleize,
      "Whether this enterprise has enabled or disabled Copilot fine-tuning",
      label_scheme: copilot_business.custom_models_enabled? ? :success : copilot_business.custom_models_no_policy? ? :secondary : :danger
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Private Docs",
      copilot_business.private_docs_setting.titleize,
      "Whether this enterprise has enabled or disabled Copilot for Private Docs",
      label_scheme: copilot_business.private_docs_enabled? ? :success : copilot_business.private_docs_no_policy? ? :secondary : :danger
    ) %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Mobile Chat",
      copilot_business.mobile_chat_setting.titleize,
      "Whether this enterprise has enabled or disabled Copilot Chat in GitHub Mobile",
      label_scheme: copilot_business.mobile_chat_enabled? ? :success : copilot_business.no_mobile_chat_policy? ? :secondary : :danger
    ) %>
  <% end %>
  <% if copilot_business.business_object.feature_enabled?(:copilot_usage_metrics_policy) %>
    <% component.with_row do %>
      <%= render Stafftools::Copilot::DetailComponent .new(
        "Usage Metrics API",
        copilot_business.usage_telemetry_api_setting.titleize,
        "Whether this enterprise has enabled, disabled, or allowed organizations to control access to #{Copilot::COPILOT_METRICS_API_NAME} endpoints",
        label_scheme: copilot_business.telemetry_aggregation_enabled? ? :success : copilot_business.telemetry_aggregation_no_policy? ? :secondary : :danger
      ) %>
    <% end %>
  <% end %>
  <% component.with_row do %>
    <%= render Stafftools::Copilot::DetailComponent.new(
      "Extensions",
      copilot_business.copilot_extensions_setting.titleize,
      "Whether this enterprise has enabled or disabled Copilot Extensions",
      label_scheme: copilot_business.copilot_extensions_enabled? ? :success : copilot_business.copilot_extensions_no_policy? ? :secondary : :danger
    ) %>
  <% end %>
<% end %>
<br>

<%= render Stafftools::Copilot::EmailOptInOutComponent.new(
  entity: this_business,
  submit_path: business_toggle_copilot_email_notifications_stafftools_enterprise_path(this_business)
) %>

<%= render(Stafftools::Copilot::WaitlistsComponent.new(this_business)) %>

<% if seat_assignments.count > 0 %>
  <br>
  <%= render(Primer::Beta::BorderBox.new(padding: :condensed)) do |component| %>
    <% component.with_header do |h| %>
      <% h.with_title(tag: :h2) do %>
        Copilot Organizations
      <% end %>
    <% end %>
    <% component.with_row do %>
      <table class="width-full px-1 mt-n1 boxed-group-table">
        <tr>
          <th>Organization</th>
          <th>Seat Count</th>
          <th>Pending Cancellation</th>
          <% if copilot_business.feature_enabled?(:copilot_mixed_licenses) %>
            <th>License</th>
          <% end %>
        </tr>
        <% seat_assignments.each do |id, seat_assignment| %>
          <tr>
            <td>
              <%= render(Primer::Beta::Link.new(target: "_blank", href: stafftools_user_copilot_settings_path(seat_assignment[:organization]))) do %>
                <%= seat_assignment[:organization].display_login %><% if seat_assignment[:trial].present? %><span class="label"><%= seat_assignment[:trial].short_display_name %> - <%= seat_assignment[:trial].state.to_s.humanize %></span><% end %>
              <% end %>
            </td>
            <td>
              <%= seat_assignment[:seat_count] %> <% if seat_assignment[:seat_count] > 0 %>(<%= render(Primer::Beta::Link.new(target: "_blank", href: stafftools_user_copilot_seats_path(seat_assignment[:organization]))) do %>View<% end %>)<% end %>
            </td>
            <td>
              <%= seat_assignment[:seats_pending_cancellation_count] %>
            </td>
            <% if copilot_business.feature_enabled?(:copilot_mixed_licenses) %>
              <td>
                <%= render(Primer::Beta::Label.new(scheme: :default)) { Copilot::Organization.new(seat_assignment[:organization]).copilot_plan.capitalize } %>
              </td>
            <% end %>
          </tr>
        <% end %>
      </table>
    <% end %>
    <% component.with_row(text_align: :right, display: :flex, justify_content: :flex_end) do %>
      <%= form_tag business_generate_copilot_csv_stafftools_enterprise_path(this_business), :method => :post do %>
        <%= render(Primer::Beta::Button.new(
          type: :submit,
          scheme: :primary,
          id: "copilot-export-button",
        )) do |component| %>
          <% component.with_leading_visual_icon(icon: :download) %>
          Export Enterprise Seat Details
        <% end %>
      <% end %>
      <% if copilot_business.eligible_to_migrate_to_enterprise_teams? %>
        <%= form_with(url: migrate_to_enterprise_teams_copilot_stafftools_enterprise_path(this_business), method: :post, class: "ml-3", local: true)  do |f| %>
          <%= render(Primer::Beta::Button.new(type: :submit)) do |button| %>
            Migrate to EnterpriseTeams
          <% end %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
<% end %>

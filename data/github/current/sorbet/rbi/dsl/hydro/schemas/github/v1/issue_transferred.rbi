# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::IssueTransferred`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::IssueTransferred`.

class Hydro::Schemas::Github::V1::IssueTransferred
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      new_issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue),
      new_repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      old_issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue),
      old_repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, new_issue: nil, new_repository: nil, old_issue: nil, old_repository: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_new_issue; end

  sig { void }
  def clear_new_repository; end

  sig { void }
  def clear_old_issue; end

  sig { void }
  def clear_old_repository; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def new_issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def new_issue=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def new_repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def new_repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def old_issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def old_issue=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def old_repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def old_repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

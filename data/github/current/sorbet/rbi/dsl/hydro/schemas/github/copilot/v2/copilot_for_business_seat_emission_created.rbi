# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Copilot::V2::CopilotForBusinessSeatEmissionCreated`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Copilot::V2::CopilotForBusinessSeatEmissionCreated`.

class Hydro::Schemas::Github::Copilot::V2::CopilotForBusinessSeatEmissionCreated
  sig do
    params(
      already_billed_user_ids_count: T.nilable(Integer),
      number_of_days_in_billing_cycle: T.nilable(Float),
      owner_details: T.nilable(Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessOwnerDetails),
      per_seat_rate: T.nilable(Float),
      quantity: T.nilable(Float),
      seat_count: T.nilable(Float),
      seat_emission: T.nilable(Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessSeatEmission),
      source_uri: T.nilable(String),
      usage_at: T.nilable(Google::Protobuf::Timestamp),
      usage_uuid: T.nilable(String)
    ).void
  end
  def initialize(already_billed_user_ids_count: nil, number_of_days_in_billing_cycle: nil, owner_details: nil, per_seat_rate: nil, quantity: nil, seat_count: nil, seat_emission: nil, source_uri: nil, usage_at: nil, usage_uuid: nil); end

  sig { returns(Integer) }
  def already_billed_user_ids_count; end

  sig { params(value: Integer).void }
  def already_billed_user_ids_count=(value); end

  sig { void }
  def clear_already_billed_user_ids_count; end

  sig { void }
  def clear_number_of_days_in_billing_cycle; end

  sig { void }
  def clear_owner_details; end

  sig { void }
  def clear_per_seat_rate; end

  sig { void }
  def clear_quantity; end

  sig { void }
  def clear_seat_count; end

  sig { void }
  def clear_seat_emission; end

  sig { void }
  def clear_source_uri; end

  sig { void }
  def clear_usage_at; end

  sig { void }
  def clear_usage_uuid; end

  sig { returns(Float) }
  def number_of_days_in_billing_cycle; end

  sig { params(value: Float).void }
  def number_of_days_in_billing_cycle=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessOwnerDetails)) }
  def owner_details; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessOwnerDetails)).void }
  def owner_details=(value); end

  sig { returns(Float) }
  def per_seat_rate; end

  sig { params(value: Float).void }
  def per_seat_rate=(value); end

  sig { returns(Float) }
  def quantity; end

  sig { params(value: Float).void }
  def quantity=(value); end

  sig { returns(Float) }
  def seat_count; end

  sig { params(value: Float).void }
  def seat_count=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessSeatEmission)) }
  def seat_emission; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Copilot::V2::Entities::CopilotForBusinessSeatEmission)).void }
  def seat_emission=(value); end

  sig { returns(String) }
  def source_uri; end

  sig { params(value: String).void }
  def source_uri=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def usage_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def usage_at=(value); end

  sig { returns(String) }
  def usage_uuid; end

  sig { params(value: String).void }
  def usage_uuid=(value); end
end

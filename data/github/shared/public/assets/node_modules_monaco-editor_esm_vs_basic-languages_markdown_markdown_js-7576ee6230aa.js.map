{"version":3,"file":"chunk-node_modules_monaco-editor_esm_vs_basic-languages_markdown_markdown_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/monaco-editor/esm/vs/basic-languages/markdown/markdown.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.49.0(383fdf3fc0e1e1a024068b8d0fd4f3dcbae74d04)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/markdown/markdown.ts\nvar conf = {\n  comments: {\n    blockComment: [\"<!--\", \"-->\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\", notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    { open: \"(\", close: \")\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"`\", close: \"`\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*<!--\\\\s*#?region\\\\b.*-->\"),\n      end: new RegExp(\"^\\\\s*<!--\\\\s*#?endregion\\\\b.*-->\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".md\",\n  // escape codes\n  control: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n  noncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n  escapes: /\\\\(?:@control)/,\n  // escape codes for javascript/CSS strings\n  jsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n  // non matched elements\n  empty: [\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"link\",\n    \"meta\",\n    \"param\"\n  ],\n  tokenizer: {\n    root: [\n      // markdown tables\n      [/^\\s*\\|/, \"@rematch\", \"@table_header\"],\n      // headers (with #)\n      [/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, [\"white\", \"keyword\", \"keyword\", \"keyword\"]],\n      // headers (with =)\n      [/^\\s*(=+|\\-+)\\s*$/, \"keyword\"],\n      // headers (with ***)\n      [/^\\s*((\\*[ ]?)+)\\s*$/, \"meta.separator\"],\n      // quote\n      [/^\\s*>+/, \"comment\"],\n      // list (starting with * or number)\n      [/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, \"keyword\"],\n      // code block (4 spaces indent)\n      [/^(\\t|[ ]{4})[^ ].*$/, \"string\"],\n      // code block (3 tilde)\n      [/^\\s*~~~\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: \"string\", next: \"@codeblock\" }],\n      // github style code blocks (with backticks and language)\n      [\n        /^\\s*```\\s*((?:\\w|[\\/\\-#])+).*$/,\n        { token: \"string\", next: \"@codeblockgh\", nextEmbedded: \"$1\" }\n      ],\n      // github style code blocks (with backticks but no language)\n      [/^\\s*```\\s*$/, { token: \"string\", next: \"@codeblock\" }],\n      // markup within lines\n      { include: \"@linecontent\" }\n    ],\n    table_header: [\n      { include: \"@table_common\" },\n      [/[^\\|]+/, \"keyword.table.header\"]\n      // table header\n    ],\n    table_body: [{ include: \"@table_common\" }, { include: \"@linecontent\" }],\n    table_common: [\n      [/\\s*[\\-:]+\\s*/, { token: \"keyword\", switchTo: \"table_body\" }],\n      // header-divider\n      [/^\\s*\\|/, \"keyword.table.left\"],\n      // opening |\n      [/^\\s*[^\\|]/, \"@rematch\", \"@pop\"],\n      // exiting\n      [/^\\s*$/, \"@rematch\", \"@pop\"],\n      // exiting\n      [\n        /\\|/,\n        {\n          cases: {\n            \"@eos\": \"keyword.table.right\",\n            // closing |\n            \"@default\": \"keyword.table.middle\"\n            // inner |\n          }\n        }\n      ]\n    ],\n    codeblock: [\n      [/^\\s*~~~\\s*$/, { token: \"string\", next: \"@pop\" }],\n      [/^\\s*```\\s*$/, { token: \"string\", next: \"@pop\" }],\n      [/.*$/, \"variable.source\"]\n    ],\n    // github style code blocks\n    codeblockgh: [\n      [/```\\s*$/, { token: \"string\", next: \"@pop\", nextEmbedded: \"@pop\" }],\n      [/[^`]+/, \"variable.source\"]\n    ],\n    linecontent: [\n      // escapes\n      [/&\\w+;/, \"string.escape\"],\n      [/@escapes/, \"escape\"],\n      // various markup\n      [/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, \"strong\"],\n      [/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, \"strong\"],\n      [/\\b_[^_]+_\\b/, \"emphasis\"],\n      [/\\*([^\\\\*]|@escapes)+\\*/, \"emphasis\"],\n      [/`([^\\\\`]|@escapes)+`/, \"variable\"],\n      // links\n      [/\\{+[^}]+\\}+/, \"string.target\"],\n      [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, [\"string.link\", \"\", \"string.link\"]],\n      [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, \"string.link\"],\n      // or html\n      { include: \"html\" }\n    ],\n    // Note: it is tempting to rather switch to the real HTML mode instead of building our own here\n    // but currently there is a limitation in Monarch that prevents us from doing it: The opening\n    // '<' would start the HTML mode, however there is no way to jump 1 character back to let the\n    // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\n    // we cannot correctly tokenize it in that mode yet.\n    html: [\n      // html tags\n      [/<(\\w+)\\/>/, \"tag\"],\n      [\n        /<(\\w+)(\\-|\\w)*/,\n        {\n          cases: {\n            \"@empty\": { token: \"tag\", next: \"@tag.$1\" },\n            \"@default\": { token: \"tag\", next: \"@tag.$1\" }\n          }\n        }\n      ],\n      [/<\\/(\\w+)(\\-|\\w)*\\s*>/, { token: \"tag\" }],\n      [/<!--/, \"comment\", \"@comment\"]\n    ],\n    comment: [\n      [/[^<\\-]+/, \"comment.content\"],\n      [/-->/, \"comment\", \"@pop\"],\n      [/<!--/, \"comment.content.invalid\"],\n      [/[<\\-]/, \"comment.content\"]\n    ],\n    // Almost full HTML tag matching, complete with embedded scripts & styles\n    tag: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [\n        /(type)(\\s*=\\s*)(\")([^\"]+)(\")/,\n        [\n          \"attribute.name.html\",\n          \"delimiter.html\",\n          \"string.html\",\n          { token: \"string.html\", switchTo: \"@tag.$S2.$4\" },\n          \"string.html\"\n        ]\n      ],\n      [\n        /(type)(\\s*=\\s*)(')([^']+)(')/,\n        [\n          \"attribute.name.html\",\n          \"delimiter.html\",\n          \"string.html\",\n          { token: \"string.html\", switchTo: \"@tag.$S2.$4\" },\n          \"string.html\"\n        ]\n      ],\n      [/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, [\"attribute.name.html\", \"delimiter.html\", \"string.html\"]],\n      [/\\w+/, \"attribute.name.html\"],\n      [/\\/>/, \"tag\", \"@pop\"],\n      [\n        />/,\n        {\n          cases: {\n            \"$S2==style\": {\n              token: \"tag\",\n              switchTo: \"embeddedStyle\",\n              nextEmbedded: \"text/css\"\n            },\n            \"$S2==script\": {\n              cases: {\n                $S3: {\n                  token: \"tag\",\n                  switchTo: \"embeddedScript\",\n                  nextEmbedded: \"$S3\"\n                },\n                \"@default\": {\n                  token: \"tag\",\n                  switchTo: \"embeddedScript\",\n                  nextEmbedded: \"text/javascript\"\n                }\n              }\n            },\n            \"@default\": { token: \"tag\", next: \"@pop\" }\n          }\n        }\n      ]\n    ],\n    embeddedStyle: [\n      [/[^<]+/, \"\"],\n      [/<\\/style\\s*>/, { token: \"@rematch\", next: \"@pop\", nextEmbedded: \"@pop\" }],\n      [/</, \"\"]\n    ],\n    embeddedScript: [\n      [/[^<]+/, \"\"],\n      [/<\\/script\\s*>/, { token: \"@rematch\", next: \"@pop\", nextEmbedded: \"@pop\" }],\n      [/</, \"\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["conf","comments","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","end","language","defaultToken","tokenPostfix","control","noncontrol","escapes","jsescapes","empty","tokenizer","root","token","next","nextEmbedded","include","table_header","table_body","table_common","switchTo","cases","codeblock","codeblockgh","linecontent","html","comment","tag","$S3","embeddedStyle","embeddedScript"],"sourceRoot":""}
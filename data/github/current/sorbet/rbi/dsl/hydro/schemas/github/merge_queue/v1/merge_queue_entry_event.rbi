# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::MergeQueue::V1::MergeQueueEntryEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::MergeQueue::V1::MergeQueueEntryEvent`.

class Hydro::Schemas::Github::MergeQueue::V1::MergeQueueEntryEvent
  sig do
    params(
      dequeuer: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      enqueuer: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      entry: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry),
      event: T.nilable(T.any(Symbol, Integer)),
      group_entries: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry], T::Array[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry])),
      protected_branch: T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch),
      pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest),
      queue: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueue),
      queue_depth: T.nilable(Google::Protobuf::Int32Value),
      removal_reason: T.nilable(T.any(Symbol, Integer)),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      required_status_checks: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::RequiredStatusCheck], T::Array[Hydro::Schemas::Github::MergeQueue::V1::Entities::RequiredStatusCheck]))
    ).void
  end
  def initialize(dequeuer: nil, enqueuer: nil, entry: nil, event: nil, group_entries: T.unsafe(nil), protected_branch: nil, pull_request: nil, queue: nil, queue_depth: nil, removal_reason: nil, repository: nil, required_status_checks: T.unsafe(nil)); end

  sig { void }
  def clear_dequeuer; end

  sig { void }
  def clear_enqueuer; end

  sig { void }
  def clear_entry; end

  sig { void }
  def clear_event; end

  sig { void }
  def clear_group_entries; end

  sig { void }
  def clear_protected_branch; end

  sig { void }
  def clear_pull_request; end

  sig { void }
  def clear_queue; end

  sig { void }
  def clear_queue_depth; end

  sig { void }
  def clear_removal_reason; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_required_status_checks; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def dequeuer; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def dequeuer=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def enqueuer; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def enqueuer=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry)) }
  def entry; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueueEntry)).void }
  def entry=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def event; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def event=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry]) }
  def group_entries; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeGroupEntry]
    ).void
  end
  def group_entries=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch)) }
  def protected_branch; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::ProtectedBranch)).void }
  def protected_branch=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def pull_request=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueue)) }
  def queue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::MergeQueue::V1::Entities::MergeQueue)).void }
  def queue=(value); end

  sig { returns(T.nilable(Google::Protobuf::Int32Value)) }
  def queue_depth; end

  sig { params(value: T.nilable(Google::Protobuf::Int32Value)).void }
  def queue_depth=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def removal_reason; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def removal_reason=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig do
    returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::RequiredStatusCheck])
  end
  def required_status_checks; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::MergeQueue::V1::Entities::RequiredStatusCheck]
    ).void
  end
  def required_status_checks=(value); end
end

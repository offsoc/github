# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Proto::SecretScanning::Api::V2::GetTokensRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Proto::SecretScanning::Api::V2::GetTokensRequest`.

class GitHub::Proto::SecretScanning::Api::V2::GetTokensRequest
  sig do
    params(
      business_selector: T.nilable(GitHub::Proto::SecretScanning::Api::V2::BusinessSelector),
      bypassed: T.nilable(T::Boolean),
      exclude_resolutions: T.nilable(T.any(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)], T::Array[T.any(Symbol, Integer)])),
      exclude_token_providers: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      exclude_token_slugs: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      limit: T.nilable(Integer),
      low_confidence: T.nilable(T::Boolean),
      next_cursor: T.nilable(String),
      org_selector: T.nilable(GitHub::Proto::SecretScanning::Api::V2::OrgSelector),
      page: T.nilable(Integer),
      previous_cursor: T.nilable(String),
      repo_selector: T.nilable(GitHub::Proto::SecretScanning::Api::V2::RepoSelector),
      resolution: T.nilable(T.any(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)], T::Array[T.any(Symbol, Integer)])),
      sort_order: T.nilable(T.any(Symbol, Integer)),
      token_providers: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      token_slugs: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      token_state: T.nilable(T.any(Symbol, Integer)),
      validity: T.nilable(T.any(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)], T::Array[T.any(Symbol, Integer)]))
    ).void
  end
  def initialize(business_selector: nil, bypassed: nil, exclude_resolutions: T.unsafe(nil), exclude_token_providers: T.unsafe(nil), exclude_token_slugs: T.unsafe(nil), feature_flags: T.unsafe(nil), limit: nil, low_confidence: nil, next_cursor: nil, org_selector: nil, page: nil, previous_cursor: nil, repo_selector: nil, resolution: T.unsafe(nil), sort_order: nil, token_providers: T.unsafe(nil), token_slugs: T.unsafe(nil), token_state: nil, validity: T.unsafe(nil)); end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Api::V2::BusinessSelector)) }
  def business_selector; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Api::V2::BusinessSelector)).void }
  def business_selector=(value); end

  sig { returns(T::Boolean) }
  def bypassed; end

  sig { params(value: T::Boolean).void }
  def bypassed=(value); end

  sig { void }
  def clear_business_selector; end

  sig { void }
  def clear_bypassed; end

  sig { void }
  def clear_exclude_resolutions; end

  sig { void }
  def clear_exclude_token_providers; end

  sig { void }
  def clear_exclude_token_slugs; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_limit; end

  sig { void }
  def clear_low_confidence; end

  sig { void }
  def clear_next_cursor; end

  sig { void }
  def clear_org_selector; end

  sig { void }
  def clear_page; end

  sig { void }
  def clear_previous_cursor; end

  sig { void }
  def clear_repo_selector; end

  sig { void }
  def clear_resolution; end

  sig { void }
  def clear_sort_order; end

  sig { void }
  def clear_token_providers; end

  sig { void }
  def clear_token_slugs; end

  sig { void }
  def clear_token_state; end

  sig { void }
  def clear_validity; end

  sig { returns(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]) }
  def exclude_resolutions; end

  sig { params(value: Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]).void }
  def exclude_resolutions=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def exclude_token_providers; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def exclude_token_providers=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def exclude_token_slugs; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def exclude_token_slugs=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(Integer) }
  def limit; end

  sig { params(value: Integer).void }
  def limit=(value); end

  sig { returns(T::Boolean) }
  def low_confidence; end

  sig { params(value: T::Boolean).void }
  def low_confidence=(value); end

  sig { returns(String) }
  def next_cursor; end

  sig { params(value: String).void }
  def next_cursor=(value); end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Api::V2::OrgSelector)) }
  def org_selector; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Api::V2::OrgSelector)).void }
  def org_selector=(value); end

  sig { returns(Integer) }
  def page; end

  sig { params(value: Integer).void }
  def page=(value); end

  sig { returns(String) }
  def previous_cursor; end

  sig { params(value: String).void }
  def previous_cursor=(value); end

  sig { returns(T.nilable(GitHub::Proto::SecretScanning::Api::V2::RepoSelector)) }
  def repo_selector; end

  sig { params(value: T.nilable(GitHub::Proto::SecretScanning::Api::V2::RepoSelector)).void }
  def repo_selector=(value); end

  sig { returns(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]) }
  def resolution; end

  sig { params(value: Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]).void }
  def resolution=(value); end

  sig { returns(T.nilable(Symbol)) }
  def selector; end

  sig { returns(T.any(Symbol, Integer)) }
  def sort_order; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def sort_order=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def token_providers; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def token_providers=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def token_slugs; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def token_slugs=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def token_state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def token_state=(value); end

  sig { returns(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]) }
  def validity; end

  sig { params(value: Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]).void }
  def validity=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Licensify::Services::V1::CustomerLicenseEnablement`.
# Please instead update this file by running `bin/tapioca dsl Licensify::Services::V1::CustomerLicenseEnablement`.

class Licensify::Services::V1::CustomerLicenseEnablement
  sig do
    params(
      enablementIds: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      reason: T.nilable(T.any(Symbol, Integer)),
      type: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(enablementIds: T.unsafe(nil), reason: nil, type: nil); end

  sig { void }
  def clear_enablementIds; end

  sig { void }
  def clear_reason; end

  sig { void }
  def clear_type; end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def enablementIds; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def enablementIds=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def reason; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def reason=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def type=(value); end
end

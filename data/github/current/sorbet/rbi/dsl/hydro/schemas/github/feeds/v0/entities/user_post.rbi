# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Feeds::V0::Entities::UserPost`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Feeds::V0::Entities::UserPost`.

class Hydro::Schemas::Github::Feeds::V0::Entities::UserPost
  sig do
    params(
      author: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      body: T.nilable(String),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      id: T.nilable(Integer),
      owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      references: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Feeds::V0::Entities::UserPostReference], T::Array[Hydro::Schemas::Github::Feeds::V0::Entities::UserPostReference])),
      topic_id: T.nilable(Integer),
      updated_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(author: nil, body: nil, created_at: nil, id: nil, owner: nil, references: T.unsafe(nil), topic_id: nil, updated_at: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def author; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def author=(value); end

  sig { returns(String) }
  def body; end

  sig { params(value: String).void }
  def body=(value); end

  sig { void }
  def clear_author; end

  sig { void }
  def clear_body; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_owner; end

  sig { void }
  def clear_references; end

  sig { void }
  def clear_topic_id; end

  sig { void }
  def clear_updated_at; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def owner=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Feeds::V0::Entities::UserPostReference]) }
  def references; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Feeds::V0::Entities::UserPostReference]
    ).void
  end
  def references=(value); end

  sig { returns(Integer) }
  def topic_id; end

  sig { params(value: Integer).void }
  def topic_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end
end

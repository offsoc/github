# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `monolith-twirp-auditlog-streaming` gem.
# Please instead update this file by running `bin/tapioca gem monolith-twirp-auditlog-streaming`.

module Google::Protobuf::MessageExts::ClassMethods; end

# source://monolith-twirp-auditlog-streaming//lib/monolith-twirp-auditlog-streaming.rb#7
module Monolith; end

# source://monolith-twirp-auditlog-streaming//lib/monolith-twirp-auditlog-streaming.rb#8
module Monolith::Twirp; end

# source://monolith-twirp-auditlog-streaming//lib/monolith-twirp-auditlog-streaming.rb#9
module Monolith::Twirp::Auditlog; end

# source://monolith-twirp-auditlog-streaming//lib/monolith-twirp-auditlog-streaming.rb#10
module Monolith::Twirp::Auditlog::Streaming; end

# source://monolith-twirp-auditlog-streaming//lib/monolith-twirp-auditlog-streaming.rb#11
class Monolith::Twirp::Auditlog::Streaming::Error < ::StandardError; end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/version.rb#3
module MonolithTwirp; end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/version.rb#4
module MonolithTwirp::Auditlog; end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/version.rb#5
module MonolithTwirp::Auditlog::Streaming; end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#191
module MonolithTwirp::Auditlog::Streaming::V1; end

class MonolithTwirp::Auditlog::Streaming::V1::AzureBlobStorageSink
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module MonolithTwirp::Auditlog::Streaming::V1::AzureBlobStorageSink::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#201
MonolithTwirp::Auditlog::Streaming::V1::AzureBlobStorageSink::SubjectType::SUBJECT_TYPE_BUSINESSS = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#201
MonolithTwirp::Auditlog::Streaming::V1::AzureBlobStorageSink::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#201
MonolithTwirp::Auditlog::Streaming::V1::AzureBlobStorageSink::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

class MonolithTwirp::Auditlog::Streaming::V1::AzureHubsSink
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module MonolithTwirp::Auditlog::Streaming::V1::AzureHubsSink::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#199
MonolithTwirp::Auditlog::Streaming::V1::AzureHubsSink::SubjectType::SUBJECT_TYPE_BUSINESSS = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#199
MonolithTwirp::Auditlog::Streaming::V1::AzureHubsSink::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#199
MonolithTwirp::Auditlog::Streaming::V1::AzureHubsSink::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

class MonolithTwirp::Auditlog::Streaming::V1::ConfigurationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class MonolithTwirp::Auditlog::Streaming::V1::ConfigurationResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class MonolithTwirp::Auditlog::Streaming::V1::ConfigurationWithLimitRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class MonolithTwirp::Auditlog::Streaming::V1::ConfigurationWithLimitResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class MonolithTwirp::Auditlog::Streaming::V1::DatadogSink
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module MonolithTwirp::Auditlog::Streaming::V1::DatadogSink::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#211
MonolithTwirp::Auditlog::Streaming::V1::DatadogSink::SubjectType::SUBJECT_TYPE_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#211
MonolithTwirp::Auditlog::Streaming::V1::DatadogSink::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#211
MonolithTwirp::Auditlog::Streaming::V1::DatadogSink::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

class MonolithTwirp::Auditlog::Streaming::V1::GcpStorageSink
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module MonolithTwirp::Auditlog::Streaming::V1::GcpStorageSink::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#206
MonolithTwirp::Auditlog::Streaming::V1::GcpStorageSink::SubjectType::SUBJECT_TYPE_BUSINESSS = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#206
MonolithTwirp::Auditlog::Streaming::V1::GcpStorageSink::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#206
MonolithTwirp::Auditlog::Streaming::V1::GcpStorageSink::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

class MonolithTwirp::Auditlog::Streaming::V1::S3Sink
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module MonolithTwirp::Auditlog::Streaming::V1::S3Sink::AuthenticationType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#204
MonolithTwirp::Auditlog::Streaming::V1::S3Sink::AuthenticationType::AUTHENTICATION_TYPE_ACCESS_KEYS = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#204
MonolithTwirp::Auditlog::Streaming::V1::S3Sink::AuthenticationType::AUTHENTICATION_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#204
MonolithTwirp::Auditlog::Streaming::V1::S3Sink::AuthenticationType::AUTHENTICATION_TYPE_OIDC_AUDIT_LOG = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#204
MonolithTwirp::Auditlog::Streaming::V1::S3Sink::AuthenticationType::AUTHENTICATION_TYPE_OIDC_GITHUB = T.let(T.unsafe(nil), Integer)

module MonolithTwirp::Auditlog::Streaming::V1::S3Sink::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#203
MonolithTwirp::Auditlog::Streaming::V1::S3Sink::SubjectType::SUBJECT_TYPE_BUSINESSS = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#203
MonolithTwirp::Auditlog::Streaming::V1::S3Sink::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#203
MonolithTwirp::Auditlog::Streaming::V1::S3Sink::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

class MonolithTwirp::Auditlog::Streaming::V1::SplunkSink
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module MonolithTwirp::Auditlog::Streaming::V1::SplunkSink::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#197
MonolithTwirp::Auditlog::Streaming::V1::SplunkSink::SubjectType::SUBJECT_TYPE_BUSINESSS = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#197
MonolithTwirp::Auditlog::Streaming::V1::SplunkSink::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#197
MonolithTwirp::Auditlog::Streaming::V1::SplunkSink::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_twirp.rb#16
class MonolithTwirp::Auditlog::Streaming::V1::StreamingAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def configuration(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def configuration_with_limit(input, req_opts = T.unsafe(nil)); end
end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_twirp.rb#9
class MonolithTwirp::Auditlog::Streaming::V1::StreamingAPIService < ::Twirp::Service; end

class MonolithTwirp::Auditlog::Streaming::V1::SyslogSink
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module MonolithTwirp::Auditlog::Streaming::V1::SyslogSink::ProtocolType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#209
MonolithTwirp::Auditlog::Streaming::V1::SyslogSink::ProtocolType::PROTOCOL_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#209
MonolithTwirp::Auditlog::Streaming::V1::SyslogSink::ProtocolType::PROTOCOL_TYPE_TCP = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#209
MonolithTwirp::Auditlog::Streaming::V1::SyslogSink::ProtocolType::PROTOCOL_TYPE_TCP6 = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#209
MonolithTwirp::Auditlog::Streaming::V1::SyslogSink::ProtocolType::PROTOCOL_TYPE_TCP6_TLS = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#209
MonolithTwirp::Auditlog::Streaming::V1::SyslogSink::ProtocolType::PROTOCOL_TYPE_TCP_TLS = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#209
MonolithTwirp::Auditlog::Streaming::V1::SyslogSink::ProtocolType::PROTOCOL_TYPE_UDP = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#209
MonolithTwirp::Auditlog::Streaming::V1::SyslogSink::ProtocolType::PROTOCOL_TYPE_UDP6 = T.let(T.unsafe(nil), Integer)

module MonolithTwirp::Auditlog::Streaming::V1::SyslogSink::SubjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#208
MonolithTwirp::Auditlog::Streaming::V1::SyslogSink::SubjectType::SUBJECT_TYPE_BUSINESS = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#208
MonolithTwirp::Auditlog::Streaming::V1::SyslogSink::SubjectType::SUBJECT_TYPE_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/v1/conf_api_pb.rb#208
MonolithTwirp::Auditlog::Streaming::V1::SyslogSink::SubjectType::SUBJECT_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-auditlog-streaming//lib/monolith_twirp/auditlog/streaming/version.rb#6
MonolithTwirp::Auditlog::Streaming::VERSION = T.let(T.unsafe(nil), String)

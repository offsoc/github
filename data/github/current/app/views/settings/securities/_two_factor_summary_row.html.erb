<%# erblint:counter DeprecatedComponentsCounter 2 %>
<%# erblint:counter DeprecatedComponentsCounter 2 %>
<%
  is_configured ||= false
  row_badges ||= []
  factor_type = "" unless defined?(factor_type)
  edit_method ||= :get
  edit_path ||= settings_user_two_factor_authentication_configuration_path
  edit_label ||= "Edit"
  edit_class ||= "btn"
  edit_sudo_required ||= false
  data_test_selector ||= nil
  row_icon ||= :"shield-lock"
  tooltip_icon ||= :info
  note_redacted ||= nil
  note ||= nil
  configuring ||= false
  mashed_secret ||= ""
  qr_code_image_src ||= ""
  dev_otp ||= nil
  can_disable_factor ||= false
  disable_label ||= "Disable"
  show_menu = is_configured && !configuring && can_disable_factor
  inline_content_selector ||= nil
  expand_with_anchor ||= ""
%>

<div class="Box-row d-flex flex-justify-between" <%= test_selector(data_test_selector) %>>
  <%= render(Primer::Beta::Octicon.new(row_icon, size: :medium)) %>
  <div class="width-full">
    <div class="d-flex width-full">
      <div class="d-flex flex-column ml-2 width-full">
        <div class="d-flex flex-wrap">
          <h4 class="mr-2 my-0 h5 no-wrap"> <%= title %> </h4>
          <div class="d-flex">
            <% row_badges.each do |badge| %>
              <div>
                <%= render(Primer::Beta::Label.new(scheme: badge[:scheme], mr: 1, test_selector: data_test_selector + "-label")) { badge[:text] } %>
              </div>
            <% end %>
          </div>
        </div>
        <div class="<%= 'mt-1' if configuring %>">
          <% if (note || note_redacted) && !configuring %>
            <div class="note">
              <span class="js-note"><%= note_redacted ? note_redacted : note %></span>

              <% if note_redacted && note %>
                <%= render Primer::Beta::Button.new(classes: "btn js-toggle-redacted-note-content", scheme: :link, "data-content": note, "aria-label": "Show redacted content") do %>
                  <%= render Primer::Beta::Octicon.new(icon: :"eye-closed") %>
                <% end %>

                <%= render Primer::Beta::Button.new(classes: "btn js-toggle-redacted-note-content", scheme: :link, "data-content": note_redacted, "aria-label": "Hide redacted content", "hidden": "true") do %>
                  <%= render Primer::Beta::Octicon.new(icon: :eye) %>
                <% end %>
              <% end %>
            </div>
          <% end %>
        </div>
      </div>

      <% if show_menu %>
        <%= render Primer::Experimental::ActionMenu.new(menu_id: "credential-manage-#{factor_type}", anchor_align: :end) do |menu| %>
          <% menu.with_trigger(icon: :"kebab-horizontal", "aria-label": "Manage #{title}") %>
          <% menu.with_item(
            classes: "two-factor-summary-row-edit",
            p: 0,
          ) do |item| %>
            <% if inline_content_selector %>
                <two-factor-inline-expander inline-content-selector="<%= inline_content_selector %>">
                  <%# width set to 100% so that row is fully clickable, not just text; move the padding from the item to the button so the border doesn't close the menu %>
                  <%= render Primer::Beta::Button.new(type: :submit, scheme: :link, color: :default, underline: false, style: "width: 100%; padding: 6px 8px;", align_content: :start, data: { action: "click:two-factor-inline-expander#toggleInlineEdit", target: "two-factor-inline-expander.expander" }, aria: { label: "#{edit_label} #{title}", expanded: false }) do %><%= edit_label %><% end %>
                </two-factor-inline-expander>
            <% elsif factor_type == "fallback_sms" %>
              <two-factor-fallback-sms-config-toggle>
                <%# width set to 100% so that row is fully clickable, not just text; move the padding from the item to the button so the border doesn't close the menu %>
                <%= render Primer::Beta::Button.new(type: :submit, scheme: :link, color: :default, underline: false, style: "width: 100%; padding: 6px 8px;", align_content: :start, data: { action: "click:two-factor-fallback-sms-config-toggle#showFallbackSmsModal", sudo_required: edit_sudo_required, target: "two-factor-fallback-sms-config-toggle.button" }) do %><%= edit_label %><% end %>
              </two-factor-fallback-sms-config-toggle>
            <% else %>
              <%= form_tag edit_path, method: edit_method.to_sym do %>
                <input type="hidden" name="method" value="<%= edit_method %>">
                <%# width set to 100% so that row is fully clickable, not just text; move the padding from the item to the button so the border doesn't close the menu %>
                <%= render Primer::Beta::Button.new(type: :submit, scheme: :link, color: :default, underline: false, style: "width: 100%; padding: 6px 8px;", align_content: :start, "data-sudo-required": "#{edit_sudo_required}") do %><%= edit_label %><% end %>
              <% end %>
            <% end %>
          <% end %>

          <%# since users can configure both app and SMS, we want to give the ability for users to disable one (NOT BOTH)  %>
          <% if can_disable_factor %>
            <% menu.with_item(
              classes: "two-factor-summary-row-disable",
              p: 0
            ) do |item| %>
              <%= render partial: "settings/securities/disable_two_factor_method_option", locals: {
                factor_type: factor_type,
                edit_sudo_required: edit_sudo_required,
                disable_label: disable_label,
              } %>
            <% end %>
          <% end %>
        <% end %>
        <% if factor_type == "sms" || factor_type == "fallback_sms" %>
          <%= render partial: "settings/securities/disable_two_factor_method_dialog", locals: { factor_type: factor_type } %>
        <% end %>
      <% else %>
        <% if inline_content_selector %>
          <two-factor-inline-expander inline-content-selector="<%= inline_content_selector %>" expand-with-anchor="<%= expand_with_anchor %>">
            <%= render Primer::Beta::Button.new(type: :button, size: :small, w: :full, text_align: :center, data: { action: "click:two-factor-inline-expander#toggleInlineEdit", target: "two-factor-inline-expander.expander" }, aria: { label: "#{edit_label} #{title}", expanded: false },
              **test_selector_data_hash("two-factor-summary-row-action")) do %><%= edit_label %><% end %>
          </two-factor-inline-expander>
        <% elsif factor_type == "fallback_sms" %>
          <two-factor-fallback-sms-config-toggle>
            <%= render Primer::Beta::Button.new(type: :button, size: :small, w: :full, text_align: :center, data: { action: "click:two-factor-fallback-sms-config-toggle#showFallbackSmsModal", sudo_required: edit_sudo_required, target: "two-factor-fallback-sms-config-toggle.button" }, "aria-label": "#{edit_label} #{title}",
              **test_selector_data_hash("two-factor-summary-row-action")) do %><%= edit_label %><% end %>
          </two-factor-fallback-sms-config-toggle>
        <% else %>
          <%= form_tag edit_path, method: edit_method do %>
          <%= render Primer::Beta::Button.new(disabled: configuring, type: :submit, size: :small, w: :full, text_align: :center, "data-sudo-required": "#{edit_sudo_required}", aria: { label: "#{edit_label} #{title}", expanded: configuring }, **test_selector_data_hash("two-factor-summary-row-action")) do %><%= edit_label %><% end %>
          <% end %>
        <% end %>
      <% end %>
    </div>

    <div class="d-flex flex-justify-between">
      <% if configuring && factor_type == "app" %>
        <two-factor-configure-otp-factor data-factor-type="app">
          <div class="ml-2 mt-2">
            <%= render partial: "settings/user/two_factor_setup/app", locals: {
              mashed_secret: mashed_secret,
              qr_code_image_src: qr_code_image_src,
              dev_otp: dev_otp,
              component: "two-factor-configure-otp-factor"
            } %>

            <%= render Primer::Beta::Flash.new(
              mt: 3,
              scheme: :danger,
              hidden: true,
              data: {
                target: "two-factor-configure-otp-factor.verifyError"
              })
            %>

            <div class="d-flex mt-3" data-target="two-factor-configure-otp-factor.showButtons" hidden>
              <%= form_with url: settings_user_two_factor_authentication_configure_factor_enable_path(type: "app"), method: :post do |form| %>
                <%= render(Primer::Beta::Button.new(scheme: :primary, type: :submit, disabled: true, data: { target: "two-factor-configure-otp-factor.saveButton"})) { "Save" } %>
              <% end %>

              <%= render(Primer::Beta::Button.new(ml: 2, tag: :a, href: settings_security_path)) { "Cancel" } %>
            </div>
          </div>
        </two-factor-configure-otp-factor>
      <% elsif configuring && factor_type == 'sms' %>
        <two-factor-configure-otp-factor data-factor-type="sms">
          <div class="ml-2 mt-2">
            <%= render partial: "settings/user/two_factor_setup/sms", locals: {
              component: "two-factor-configure-otp-factor",
              button_sudo_required: true,
            } %>

            <%= render Primer::Beta::Flash.new(
              mt: 3,
              scheme: :danger,
              hidden: true,
              data: {
                target: "two-factor-configure-otp-factor.verifyError"
              })
            %>

            <div class="d-flex mt-3" data-target="two-factor-configure-otp-factor.showButtons" hidden>
              <%= form_with url: settings_user_two_factor_authentication_configure_factor_enable_path(type: "sms"), method: :post do |form| %>
                <%= render(Primer::Beta::Button.new(scheme: :primary, type: :submit, disabled: true, data: { target: "two-factor-configure-otp-factor.saveButton"})) { "Save" } %>
              <% end %>

              <%= render(Primer::Beta::Button.new(ml: 2, tag: :a, href: settings_security_path)) { "Cancel" } %>
            </div>
          </div>
        </two-factor-configure-otp-factor>
      <% elsif factor_type == "webauthn" %>
        <div class="js-webauthn-box webauthn-box mt-2 width-full" hidden>
          <div class="js-u2f-registrations mb-2 ml-2 width-full">
            <% current_user.security_keys_for_settings.each do |registration| %>
              <%= render partial: "settings/user/security_key", locals: { registration: registration } %>
            <% end %>
          </div>

          <span class="webauthn-sorry">
            This browser doesn't support security keys yet.
          </span>

          <div class="ml-2">
            <%= render partial: "settings/user/security_key_registration_form", locals: { page_view: 'settings_security'} %>
          </div>
        </div>
      <% elsif factor_type == "fallback_sms" %>
        <%= render Primer::Alpha::Dialog.new(title: "Add fallback SMS number", show_divider: true, h: :fit) do |component| %>
          <%# Not actually displaying this dialog's button, because the dialog should behaviorally be triggered
          by the "edit" button in the action menu for the row, but keeping its functionality and calling it remotely -
          the edit button calls JS to click this show button, which will show the dialog but make things seems like the "edit" calls the dialog. %>
          <% component.with_show_button(classes: "fallback-configure", hidden: true) %>
          <% component.with_body do %>
            <%= render partial: "settings/user/two_factor_fallback_prompt" %>
          <% end %>
        <% end %>
      <% end %>
    </div>
  </div>
</div>

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `RepositoryVulnerabilityAlert`.
# Please instead update this file by running `bin/tapioca dsl RepositoryVulnerabilityAlert`.

class RepositoryVulnerabilityAlert
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), String]) }
    def dependency_scopes; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def states; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::RepositoryVulnerabilityAlert).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryVulnerabilityAlert).void)
      ).returns(::RepositoryVulnerabilityAlert)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryVulnerabilityAlert).void)
      ).returns(::RepositoryVulnerabilityAlert)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryVulnerabilityAlert).void)
      ).returns(::RepositoryVulnerabilityAlert)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryVulnerabilityAlert).void)
      ).returns(::RepositoryVulnerabilityAlert)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryVulnerabilityAlert).void)
      ).returns(::RepositoryVulnerabilityAlert)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::RepositoryVulnerabilityAlert]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::RepositoryVulnerabilityAlert)) }
    def fifth; end

    sig { returns(::RepositoryVulnerabilityAlert) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::RepositoryVulnerabilityAlert)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::RepositoryVulnerabilityAlert) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::RepositoryVulnerabilityAlert).void)
      ).returns(T.nilable(T::Enumerator[::RepositoryVulnerabilityAlert]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::RepositoryVulnerabilityAlert]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::RepositoryVulnerabilityAlert]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryVulnerabilityAlert).void)
      ).returns(::RepositoryVulnerabilityAlert)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryVulnerabilityAlert).void)
      ).returns(::RepositoryVulnerabilityAlert)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryVulnerabilityAlert).void)
      ).returns(::RepositoryVulnerabilityAlert)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::RepositoryVulnerabilityAlert)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::RepositoryVulnerabilityAlert) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::RepositoryVulnerabilityAlert) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::RepositoryVulnerabilityAlert) }
    def first!; end

    sig { returns(T.nilable(::RepositoryVulnerabilityAlert)) }
    def forty_two; end

    sig { returns(::RepositoryVulnerabilityAlert) }
    def forty_two!; end

    sig { returns(T.nilable(::RepositoryVulnerabilityAlert)) }
    def fourth; end

    sig { returns(::RepositoryVulnerabilityAlert) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::RepositoryVulnerabilityAlert) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::RepositoryVulnerabilityAlert).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::RepositoryVulnerabilityAlert).void)
      ).returns(::RepositoryVulnerabilityAlert)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::RepositoryVulnerabilityAlert).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::RepositoryVulnerabilityAlert).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::RepositoryVulnerabilityAlert)) }
    def second; end

    sig { returns(::RepositoryVulnerabilityAlert) }
    def second!; end

    sig { returns(T.nilable(::RepositoryVulnerabilityAlert)) }
    def second_to_last; end

    sig { returns(::RepositoryVulnerabilityAlert) }
    def second_to_last!; end

    sig { returns(::RepositoryVulnerabilityAlert) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::RepositoryVulnerabilityAlert) }
    def take!; end

    sig { returns(T.nilable(::RepositoryVulnerabilityAlert)) }
    def third; end

    sig { returns(::RepositoryVulnerabilityAlert) }
    def third!; end

    sig { returns(T.nilable(::RepositoryVulnerabilityAlert)) }
    def third_to_last; end

    sig { returns(::RepositoryVulnerabilityAlert) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def auto_dismissed!; end

    sig { returns(T::Boolean) }
    def auto_dismissed?; end

    sig { void }
    def development!; end

    sig { returns(T::Boolean) }
    def development?; end

    sig { void }
    def dismissed!; end

    sig { returns(T::Boolean) }
    def dismissed?; end

    sig { void }
    def fixed!; end

    sig { returns(T::Boolean) }
    def fixed?; end

    sig { void }
    def open!; end

    sig { returns(T::Boolean) }
    def open?; end

    sig { void }
    def runtime!; end

    sig { returns(T::Boolean) }
    def runtime?; end

    sig { void }
    def withdrawn!; end

    sig { returns(T::Boolean) }
    def withdrawn?; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
    def build_create_pull_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_last_state_change_actor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
    def build_last_state_change_pull_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::VulnerabilityAlertRule) }
    def build_last_state_change_rule(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ScopedVulnerability) }
    def build_scoped_vulnerability(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Vulnerability) }
    def build_vulnerability(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::VulnerabilityAlertingEvent) }
    def build_vulnerability_alerting_event(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::VulnerableVersionRange) }
    def build_vulnerable_version_range(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
    def create_create_pull_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
    def create_create_pull_request!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_last_state_change_actor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_last_state_change_actor!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
    def create_last_state_change_pull_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
    def create_last_state_change_pull_request!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::VulnerabilityAlertRule) }
    def create_last_state_change_rule(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::VulnerabilityAlertRule) }
    def create_last_state_change_rule!(*args, &blk); end

    sig { returns(T.nilable(::PullRequest)) }
    def create_pull_request; end

    sig { params(value: T.nilable(::PullRequest)).void }
    def create_pull_request=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ScopedVulnerability) }
    def create_scoped_vulnerability(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ScopedVulnerability) }
    def create_scoped_vulnerability!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Vulnerability) }
    def create_vulnerability(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Vulnerability) }
    def create_vulnerability!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::VulnerabilityAlertingEvent) }
    def create_vulnerability_alerting_event(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::VulnerabilityAlertingEvent) }
    def create_vulnerability_alerting_event!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::VulnerableVersionRange) }
    def create_vulnerable_version_range(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::VulnerableVersionRange) }
    def create_vulnerable_version_range!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def event_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryVulnerabilityAlert` class because it declared `has_many :events`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryVulnerabilityAlertEvent::PrivateCollectionProxy) }
    def events; end

    sig { params(value: T::Enumerable[::RepositoryVulnerabilityAlertEvent]).void }
    def events=(value); end

    sig { returns(T.nilable(::User)) }
    def last_state_change_actor; end

    sig { params(value: T.nilable(::User)).void }
    def last_state_change_actor=(value); end

    sig { returns(T.nilable(::PullRequest)) }
    def last_state_change_pull_request; end

    sig { params(value: T.nilable(::PullRequest)).void }
    def last_state_change_pull_request=(value); end

    sig { returns(T.nilable(::VulnerabilityAlertRule)) }
    def last_state_change_rule; end

    sig { params(value: T.nilable(::VulnerabilityAlertRule)).void }
    def last_state_change_rule=(value); end

    sig { returns(T.nilable(::PullRequest)) }
    def reload_create_pull_request; end

    sig { returns(T.nilable(::User)) }
    def reload_last_state_change_actor; end

    sig { returns(T.nilable(::PullRequest)) }
    def reload_last_state_change_pull_request; end

    sig { returns(T.nilable(::VulnerabilityAlertRule)) }
    def reload_last_state_change_rule; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::ScopedVulnerability)) }
    def reload_scoped_vulnerability; end

    sig { returns(T.nilable(::Vulnerability)) }
    def reload_vulnerability; end

    sig { returns(T.nilable(::VulnerabilityAlertingEvent)) }
    def reload_vulnerability_alerting_event; end

    sig { returns(T.nilable(::VulnerableVersionRange)) }
    def reload_vulnerable_version_range; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_dependency_update_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_dependency_update_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryVulnerabilityAlert` class because it declared `has_many :repository_dependency_updates`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryDependencyUpdate::PrivateCollectionProxy) }
    def repository_dependency_updates; end

    sig { params(value: T::Enumerable[::RepositoryDependencyUpdate]).void }
    def repository_dependency_updates=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_vulnerable_function_reference_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_vulnerable_function_reference_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryVulnerabilityAlert` class because it declared `has_many :repository_vulnerable_function_references`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryVulnerableFunctionReference::PrivateCollectionProxy) }
    def repository_vulnerable_function_references; end

    sig { params(value: T::Enumerable[::RepositoryVulnerableFunctionReference]).void }
    def repository_vulnerable_function_references=(value); end

    sig { returns(T.nilable(::ScopedVulnerability)) }
    def scoped_vulnerability; end

    sig { params(value: T.nilable(::ScopedVulnerability)).void }
    def scoped_vulnerability=(value); end

    sig { returns(T.nilable(::Vulnerability)) }
    def vulnerability; end

    sig { params(value: T.nilable(::Vulnerability)).void }
    def vulnerability=(value); end

    sig { returns(T.nilable(::VulnerabilityAlertingEvent)) }
    def vulnerability_alerting_event; end

    sig { params(value: T.nilable(::VulnerabilityAlertingEvent)).void }
    def vulnerability_alerting_event=(value); end

    sig { returns(T::Array[T.untyped]) }
    def vulnerability_alerting_event_subscription_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def vulnerability_alerting_event_subscription_ids=(ids); end

    # This method is created by ActiveRecord on the `RepositoryVulnerabilityAlert` class because it declared `has_many :vulnerability_alerting_event_subscriptions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::VulnerabilityAlertingEventSubscription::PrivateCollectionProxy) }
    def vulnerability_alerting_event_subscriptions; end

    sig { params(value: T::Enumerable[::VulnerabilityAlertingEventSubscription]).void }
    def vulnerability_alerting_event_subscriptions=(value); end

    sig { returns(T.nilable(::VulnerableVersionRange)) }
    def vulnerable_version_range; end

    sig { params(value: T.nilable(::VulnerableVersionRange)).void }
    def vulnerable_version_range=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active_and_inactive(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def auto_dismissable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def auto_dismissed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def auto_reopenable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_after(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def development(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dismissable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dismissed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def fixable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def fixed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def has_vulnerable_version_range(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def inactive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_auto_dismissed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_development(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dismissed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_fixed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_runtime(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_withdrawn(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def oldest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reintroducible(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reopenable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def runtime(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def withdrawn(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_default_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_create_pull_request; end

    sig { returns(Promise[T.untyped]) }
    def async_events; end

    sig { returns(Promise[T.untyped]) }
    def async_last_state_change_actor; end

    sig { returns(Promise[T.untyped]) }
    def async_last_state_change_pull_request; end

    sig { returns(Promise[T.untyped]) }
    def async_last_state_change_rule; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_dependency_updates; end

    sig { returns(Promise[T.untyped]) }
    def async_repository_vulnerable_function_references; end

    sig { returns(Promise[T.untyped]) }
    def async_scoped_vulnerability; end

    sig { returns(Promise[T.untyped]) }
    def async_vulnerability; end

    sig { returns(Promise[T.untyped]) }
    def async_vulnerability_alerting_event; end

    sig { returns(Promise[T.untyped]) }
    def async_vulnerability_alerting_event_subscriptions; end

    sig { returns(Promise[T.untyped]) }
    def async_vulnerable_version_range; end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def active; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def active=(value); end

    sig { returns(T::Boolean) }
    def active?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_before_last_save; end

    sig { returns(T.untyped) }
    def active_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def active_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def active_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_was; end

    sig { void }
    def active_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def create_pull_request_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def create_pull_request_id=(value); end

    sig { returns(T::Boolean) }
    def create_pull_request_id?; end

    sig { returns(T.nilable(::Integer)) }
    def create_pull_request_id_before_last_save; end

    sig { returns(T.untyped) }
    def create_pull_request_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def create_pull_request_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def create_pull_request_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def create_pull_request_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def create_pull_request_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def create_pull_request_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def create_pull_request_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def create_pull_request_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def create_pull_request_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def create_pull_request_id_was; end

    sig { void }
    def create_pull_request_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def create_push_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def create_push_id=(value); end

    sig { returns(T::Boolean) }
    def create_push_id?; end

    sig { returns(T.nilable(::Integer)) }
    def create_push_id_before_last_save; end

    sig { returns(T.untyped) }
    def create_push_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def create_push_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def create_push_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def create_push_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def create_push_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def create_push_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def create_push_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def create_push_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def create_push_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def create_push_id_was; end

    sig { void }
    def create_push_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def dependency_scope; end

    sig { params(value: T.nilable(T.any(::String, ::Symbol))).returns(T.nilable(T.any(::String, ::Symbol))) }
    def dependency_scope=(value); end

    sig { returns(T::Boolean) }
    def dependency_scope?; end

    sig { returns(T.nilable(::String)) }
    def dependency_scope_before_last_save; end

    sig { returns(T.untyped) }
    def dependency_scope_before_type_cast; end

    sig { returns(T::Boolean) }
    def dependency_scope_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def dependency_scope_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def dependency_scope_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol)),
        to: T.nilable(T.any(::String, ::Symbol))
      ).returns(T::Boolean)
    end
    def dependency_scope_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def dependency_scope_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def dependency_scope_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol)),
        to: T.nilable(T.any(::String, ::Symbol))
      ).returns(T::Boolean)
    end
    def dependency_scope_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def dependency_scope_previously_was; end

    sig { returns(T.nilable(::String)) }
    def dependency_scope_was; end

    sig { void }
    def dependency_scope_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_actor_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def last_state_change_actor_id=(value); end

    sig { returns(T::Boolean) }
    def last_state_change_actor_id?; end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_actor_id_before_last_save; end

    sig { returns(T.untyped) }
    def last_state_change_actor_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_state_change_actor_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_state_change_actor_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_state_change_actor_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_state_change_actor_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_actor_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_state_change_actor_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_state_change_actor_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_actor_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_actor_id_was; end

    sig { void }
    def last_state_change_actor_id_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def last_state_change_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def last_state_change_at=(value); end

    sig { returns(T::Boolean) }
    def last_state_change_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_state_change_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_state_change_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_state_change_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def last_state_change_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def last_state_change_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def last_state_change_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_state_change_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def last_state_change_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def last_state_change_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_state_change_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_state_change_at_was; end

    sig { void }
    def last_state_change_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_state_change_comment; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_state_change_comment=(value); end

    sig { returns(T::Boolean) }
    def last_state_change_comment?; end

    sig { returns(T.nilable(::String)) }
    def last_state_change_comment_before_last_save; end

    sig { returns(T.untyped) }
    def last_state_change_comment_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_state_change_comment_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_state_change_comment_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_state_change_comment_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_state_change_comment_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_state_change_comment_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_state_change_comment_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_state_change_comment_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_state_change_comment_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_state_change_comment_was; end

    sig { void }
    def last_state_change_comment_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_pull_request_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def last_state_change_pull_request_id=(value); end

    sig { returns(T::Boolean) }
    def last_state_change_pull_request_id?; end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_pull_request_id_before_last_save; end

    sig { returns(T.untyped) }
    def last_state_change_pull_request_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_state_change_pull_request_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_state_change_pull_request_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_state_change_pull_request_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_state_change_pull_request_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_pull_request_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_state_change_pull_request_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_state_change_pull_request_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_pull_request_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_pull_request_id_was; end

    sig { void }
    def last_state_change_pull_request_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_push_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def last_state_change_push_id=(value); end

    sig { returns(T::Boolean) }
    def last_state_change_push_id?; end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_push_id_before_last_save; end

    sig { returns(T.untyped) }
    def last_state_change_push_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_state_change_push_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_state_change_push_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_state_change_push_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_state_change_push_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_push_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_state_change_push_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_state_change_push_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_push_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_push_id_was; end

    sig { void }
    def last_state_change_push_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_state_change_reason; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_state_change_reason=(value); end

    sig { returns(T::Boolean) }
    def last_state_change_reason?; end

    sig { returns(T.nilable(::String)) }
    def last_state_change_reason_before_last_save; end

    sig { returns(T.untyped) }
    def last_state_change_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_state_change_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_state_change_reason_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_state_change_reason_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_state_change_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_state_change_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_state_change_reason_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_state_change_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_state_change_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_state_change_reason_was; end

    sig { void }
    def last_state_change_reason_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_rule_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def last_state_change_rule_id=(value); end

    sig { returns(T::Boolean) }
    def last_state_change_rule_id?; end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_rule_id_before_last_save; end

    sig { returns(T.untyped) }
    def last_state_change_rule_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_state_change_rule_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_state_change_rule_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_state_change_rule_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_state_change_rule_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_rule_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_state_change_rule_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_state_change_rule_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_rule_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def last_state_change_rule_id_was; end

    sig { void }
    def last_state_change_rule_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def number; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def number=(value); end

    sig { returns(T::Boolean) }
    def number?; end

    sig { returns(T.nilable(::Integer)) }
    def number_before_last_save; end

    sig { returns(T.untyped) }
    def number_before_type_cast; end

    sig { returns(T::Boolean) }
    def number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def number_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def number_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def number_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def number_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def number_was; end

    sig { void }
    def number_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_active!; end

    sig { void }
    def restore_create_pull_request_id!; end

    sig { void }
    def restore_create_push_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_dependency_scope!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_last_state_change_actor_id!; end

    sig { void }
    def restore_last_state_change_at!; end

    sig { void }
    def restore_last_state_change_comment!; end

    sig { void }
    def restore_last_state_change_pull_request_id!; end

    sig { void }
    def restore_last_state_change_push_id!; end

    sig { void }
    def restore_last_state_change_reason!; end

    sig { void }
    def restore_last_state_change_rule_id!; end

    sig { void }
    def restore_number!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_state_auto_changeable!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_vulnerability_alerting_event_id!; end

    sig { void }
    def restore_vulnerability_id!; end

    sig { void }
    def restore_vulnerable_function_reference_count!; end

    sig { void }
    def restore_vulnerable_manifest_path!; end

    sig { void }
    def restore_vulnerable_requirements!; end

    sig { void }
    def restore_vulnerable_version_range_id!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_active; end

    sig { returns(T::Boolean) }
    def saved_change_to_active?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_create_pull_request_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_create_pull_request_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_create_push_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_create_push_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_dependency_scope; end

    sig { returns(T::Boolean) }
    def saved_change_to_dependency_scope?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_last_state_change_actor_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_state_change_actor_id?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_last_state_change_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_state_change_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_state_change_comment; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_state_change_comment?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_last_state_change_pull_request_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_state_change_pull_request_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_last_state_change_push_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_state_change_push_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_state_change_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_state_change_reason?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_last_state_change_rule_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_state_change_rule_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_number?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_state_auto_changeable; end

    sig { returns(T::Boolean) }
    def saved_change_to_state_auto_changeable?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_vulnerability_alerting_event_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_vulnerability_alerting_event_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_vulnerability_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_vulnerability_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_vulnerable_function_reference_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_vulnerable_function_reference_count?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_vulnerable_manifest_path; end

    sig { returns(T::Boolean) }
    def saved_change_to_vulnerable_manifest_path?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_vulnerable_requirements; end

    sig { returns(T::Boolean) }
    def saved_change_to_vulnerable_requirements?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_vulnerable_version_range_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_vulnerable_version_range_id?; end

    sig { returns(::String) }
    def state; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T::Boolean) }
    def state_auto_changeable; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def state_auto_changeable=(value); end

    sig { returns(T::Boolean) }
    def state_auto_changeable?; end

    sig { returns(T.nilable(T::Boolean)) }
    def state_auto_changeable_before_last_save; end

    sig { returns(T.untyped) }
    def state_auto_changeable_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_auto_changeable_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def state_auto_changeable_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def state_auto_changeable_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def state_auto_changeable_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def state_auto_changeable_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def state_auto_changeable_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def state_auto_changeable_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def state_auto_changeable_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def state_auto_changeable_was; end

    sig { void }
    def state_auto_changeable_will_change!; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def vulnerability_alerting_event_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def vulnerability_alerting_event_id=(value); end

    sig { returns(T::Boolean) }
    def vulnerability_alerting_event_id?; end

    sig { returns(T.nilable(::Integer)) }
    def vulnerability_alerting_event_id_before_last_save; end

    sig { returns(T.untyped) }
    def vulnerability_alerting_event_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def vulnerability_alerting_event_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def vulnerability_alerting_event_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def vulnerability_alerting_event_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def vulnerability_alerting_event_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def vulnerability_alerting_event_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def vulnerability_alerting_event_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def vulnerability_alerting_event_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def vulnerability_alerting_event_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def vulnerability_alerting_event_id_was; end

    sig { void }
    def vulnerability_alerting_event_id_will_change!; end

    sig { returns(::Integer) }
    def vulnerability_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def vulnerability_id=(value); end

    sig { returns(T::Boolean) }
    def vulnerability_id?; end

    sig { returns(T.nilable(::Integer)) }
    def vulnerability_id_before_last_save; end

    sig { returns(T.untyped) }
    def vulnerability_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def vulnerability_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def vulnerability_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def vulnerability_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def vulnerability_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def vulnerability_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def vulnerability_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def vulnerability_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def vulnerability_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def vulnerability_id_was; end

    sig { void }
    def vulnerability_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def vulnerable_function_reference_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def vulnerable_function_reference_count=(value); end

    sig { returns(T::Boolean) }
    def vulnerable_function_reference_count?; end

    sig { returns(T.nilable(::Integer)) }
    def vulnerable_function_reference_count_before_last_save; end

    sig { returns(T.untyped) }
    def vulnerable_function_reference_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def vulnerable_function_reference_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def vulnerable_function_reference_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def vulnerable_function_reference_count_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def vulnerable_function_reference_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def vulnerable_function_reference_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def vulnerable_function_reference_count_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def vulnerable_function_reference_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def vulnerable_function_reference_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def vulnerable_function_reference_count_was; end

    sig { void }
    def vulnerable_function_reference_count_will_change!; end

    sig { returns(T.untyped) }
    def vulnerable_manifest_path; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def vulnerable_manifest_path=(value); end

    sig { returns(T::Boolean) }
    def vulnerable_manifest_path?; end

    sig { returns(T.untyped) }
    def vulnerable_manifest_path_before_last_save; end

    sig { returns(T.untyped) }
    def vulnerable_manifest_path_before_type_cast; end

    sig { returns(T::Boolean) }
    def vulnerable_manifest_path_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def vulnerable_manifest_path_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def vulnerable_manifest_path_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def vulnerable_manifest_path_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def vulnerable_manifest_path_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def vulnerable_manifest_path_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def vulnerable_manifest_path_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def vulnerable_manifest_path_previously_was; end

    sig { returns(T.untyped) }
    def vulnerable_manifest_path_was; end

    sig { void }
    def vulnerable_manifest_path_will_change!; end

    sig { returns(T.nilable(::String)) }
    def vulnerable_requirements; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def vulnerable_requirements=(value); end

    sig { returns(T::Boolean) }
    def vulnerable_requirements?; end

    sig { returns(T.nilable(::String)) }
    def vulnerable_requirements_before_last_save; end

    sig { returns(T.untyped) }
    def vulnerable_requirements_before_type_cast; end

    sig { returns(T::Boolean) }
    def vulnerable_requirements_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def vulnerable_requirements_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def vulnerable_requirements_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def vulnerable_requirements_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def vulnerable_requirements_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def vulnerable_requirements_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def vulnerable_requirements_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def vulnerable_requirements_previously_was; end

    sig { returns(T.nilable(::String)) }
    def vulnerable_requirements_was; end

    sig { void }
    def vulnerable_requirements_will_change!; end

    sig { returns(::Integer) }
    def vulnerable_version_range_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def vulnerable_version_range_id=(value); end

    sig { returns(T::Boolean) }
    def vulnerable_version_range_id?; end

    sig { returns(T.nilable(::Integer)) }
    def vulnerable_version_range_id_before_last_save; end

    sig { returns(T.untyped) }
    def vulnerable_version_range_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def vulnerable_version_range_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def vulnerable_version_range_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def vulnerable_version_range_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def vulnerable_version_range_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def vulnerable_version_range_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def vulnerable_version_range_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def vulnerable_version_range_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def vulnerable_version_range_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def vulnerable_version_range_id_was; end

    sig { void }
    def vulnerable_version_range_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_create_pull_request_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_create_push_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dependency_scope?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_state_change_actor_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_state_change_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_state_change_comment?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_state_change_pull_request_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_state_change_push_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_state_change_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_state_change_rule_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state_auto_changeable?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vulnerability_alerting_event_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vulnerability_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vulnerable_function_reference_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vulnerable_manifest_path?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vulnerable_requirements?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vulnerable_version_range_id?; end
  end

  module GeneratedPreludeBatchMethods
    sig { returns(T.untyped) }
    def current_dependency_update; end

    sig { params(options: T.untyped).returns(T.untyped) }
    def prelude_body_html(options); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_current_dependency_update; end

    sig { returns(Promise[T.nilable(::Integer)]) }
    def async_batch_current_vulnerability_exposure_update_id; end

    sig { params(options: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_body_html(options); end

    sig { returns(T.nilable(::Integer)) }
    def current_vulnerability_exposure_update_id; end

    sig { returns(T::Array[::RepositoryVulnerableFunctionReference]) }
    def current_vulnerable_function_references; end

    sig { returns(Promise[T::Array[::RepositoryVulnerableFunctionReference]]) }
    def async_batch_current_vulnerable_function_references; end

    sig { returns(Integer) }
    def current_vulnerable_function_reference_count; end

    sig { returns(Promise[Integer]) }
    def async_batch_current_vulnerable_function_reference_count; end

    sig { returns(T.nilable(::String)) }
    def search_index_signature; end

    sig { returns(T::Boolean) }
    def searchable?; end

    sig { returns(Promise[Float]) }
    def async_batch_importance_score; end

    sig { returns(Promise[T.nilable(::String)]) }
    def async_batch_search_index_signature; end

    sig { returns(Promise[T::Boolean]) }
    def async_batch_searchable?; end

    sig { returns(Float) }
    def importance_score; end

    sig { returns(Float) }
    def severity_score; end

    sig { returns(Promise[Float]) }
    def async_batch_severity_score; end

    sig { returns(T.nilable(::Symbol)) }
    def reason_to_be_unsearchable; end

    sig { returns(Promise[T.nilable(::Symbol)]) }
    def async_batch_reason_to_be_unsearchable; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active_and_inactive(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def auto_dismissable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def auto_dismissed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def auto_reopenable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_after(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def development(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dismissable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dismissed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def fixable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def fixed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def has_vulnerable_version_range(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def inactive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_auto_dismissed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_development(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dismissed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_fixed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_runtime(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_withdrawn(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def oldest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reintroducible(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reopenable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def runtime(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def withdrawn(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_default_scope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::RepositoryVulnerabilityAlert } }

    sig { returns(T::Array[::RepositoryVulnerabilityAlert]) }
    def to_a; end

    sig { returns(T::Array[::RepositoryVulnerabilityAlert]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::RepositoryVulnerabilityAlert } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::RepositoryVulnerabilityAlert } }

    sig do
      params(
        records: T.any(::RepositoryVulnerabilityAlert, T::Enumerable[T.any(::RepositoryVulnerabilityAlert, T::Enumerable[::RepositoryVulnerabilityAlert])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::RepositoryVulnerabilityAlert, T::Enumerable[T.any(::RepositoryVulnerabilityAlert, T::Enumerable[::RepositoryVulnerabilityAlert])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::RepositoryVulnerabilityAlert, T::Enumerable[T.any(::RepositoryVulnerabilityAlert, T::Enumerable[::RepositoryVulnerabilityAlert])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::RepositoryVulnerabilityAlert]) }
    def load_target; end

    sig do
      params(
        records: T.any(::RepositoryVulnerabilityAlert, T::Enumerable[T.any(::RepositoryVulnerabilityAlert, T::Enumerable[::RepositoryVulnerabilityAlert])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::RepositoryVulnerabilityAlert, T::Enumerable[T.any(::RepositoryVulnerabilityAlert, T::Enumerable[::RepositoryVulnerabilityAlert])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::RepositoryVulnerabilityAlert, T::Enumerable[T.any(::RepositoryVulnerabilityAlert, T::Enumerable[::RepositoryVulnerabilityAlert])])
      ).returns(T::Array[::RepositoryVulnerabilityAlert])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::RepositoryVulnerabilityAlert]) }
    def target; end

    sig { returns(T::Array[::RepositoryVulnerabilityAlert]) }
    def to_a; end

    sig { returns(T::Array[::RepositoryVulnerabilityAlert]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::RepositoryVulnerabilityAlert } }

    sig { returns(T::Array[::RepositoryVulnerabilityAlert]) }
    def to_a; end

    sig { returns(T::Array[::RepositoryVulnerabilityAlert]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::RepositoryVulnerabilityAlert } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Primer::Experimental::SidePanel`.
# Please instead update this file by running `bin/tapioca dsl Primer::Experimental::SidePanel`.

class Primer::Experimental::SidePanel
  sig { returns(T.untyped) }
  def body_items; end

  sig { returns(T::Boolean) }
  def body_items?; end

  sig { returns(T.untyped) }
  def footer; end

  sig { returns(T::Boolean) }
  def footer?; end

  sig { returns(T.untyped) }
  def footer_list; end

  sig { returns(T::Boolean) }
  def footer_list?; end

  sig { returns(T.untyped) }
  def header; end

  sig { returns(T::Boolean) }
  def header?; end

  sig { returns(T.untyped) }
  def header_octicon; end

  sig { returns(T::Boolean) }
  def header_octicon?; end

  sig { returns(T.untyped) }
  def lists; end

  sig { returns(T::Boolean) }
  def lists?; end

  sig { returns(T.untyped) }
  def spinner; end

  sig { returns(T::Boolean) }
  def spinner?; end

  sig { returns(T.untyped) }
  def trigger; end

  sig { returns(T::Boolean) }
  def trigger?; end

  sig { params(args: T.nilable(T::Array[T.untyped]), _arg1: T.untyped, block: T.untyped).returns(T.untyped) }
  def with_body_item(*args, **_arg1, &block); end

  sig { params(args: T.nilable(T::Array[T.untyped]), _arg1: T.untyped, block: T.untyped).returns(T.untyped) }
  def with_footer(*args, **_arg1, &block); end

  sig { params(args: T.nilable(T::Array[T.untyped]), _arg1: T.untyped, block: T.untyped).returns(T.untyped) }
  def with_footer_list(*args, **_arg1, &block); end

  sig { params(args: T.nilable(T::Array[T.untyped]), _arg1: T.untyped, block: T.untyped).returns(T.untyped) }
  def with_header(*args, **_arg1, &block); end

  sig { params(args: T.nilable(T::Array[T.untyped]), _arg1: T.untyped, block: T.untyped).returns(T.untyped) }
  def with_header_octicon(*args, **_arg1, &block); end

  sig { params(args: T.nilable(T::Array[T.untyped]), _arg1: T.untyped, block: T.untyped).returns(T.untyped) }
  def with_list(*args, **_arg1, &block); end

  sig { params(args: T.nilable(T::Array[T.untyped]), _arg1: T.untyped, block: T.untyped).returns(T.untyped) }
  def with_spinner(*args, **_arg1, &block); end

  sig { params(args: T.nilable(T::Array[T.untyped]), _arg1: T.untyped, block: T.untyped).returns(T.untyped) }
  def with_trigger(*args, **_arg1, &block); end
end

syntax = "proto3";
package github.authentication.v0;

import "authentication/v0/authenticate.proto";
import "authentication/v0/revoke.proto";
import "authentication/v0/issue.proto";
import "authentication/v0/find.proto";
import "authentication/v0/mobile_device_auth.proto";
import "authentication/v0/mobile_device_keys.proto";
import "authentication/v0/verify.proto";

option go_package = "client/proto/authentication/v0";
option ruby_package = "Authnd::Proto";

// An Authenticator authenticates requests.
service Authenticator {
	// Authenticate authenticates the AuthenticateRequest credentials.
	rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);
}

// A CredentialManager manages the issuance and revocation of credentials.
service CredentialManager {
	// IssueToken issues a new token credential.
	rpc IssueToken(IssueTokenRequest) returns (IssueTokenResponse);

        // IssueSessionSAT issues a new signed auth token associated with a user session or ID.
        rpc IssueSignedAuthToken(IssueSignedAuthTokenRequest) returns (IssueSignedAuthTokenResponse);

	// VerifyCredentials verifies that given credentials are valid, working credentials.
	rpc VerifyCredentials(VerifyRequest) returns (BatchVerifyResponse);

	// RevokeCredentials revokes a batch of credentials.
	rpc RevokeCredentials(RevokeRequest) returns (BatchRevokeResponse);

	// FindCredentials finds credentials by the given attributes.
	rpc FindCredentials(FindCredentialsRequest) returns (FindCredentialsResponse);
}

// A MobileDeviceManager manages the registration and authentication methods for mobile devices
service MobileDeviceManager {
	// RegisterDeviceKey registers a public key for a mobile device that can be used for authentication or recovery requests.
	rpc RegisterDeviceKey(RegisterDeviceKeyRequest) returns (RegisterDeviceKeyResponse);

	// RevokeDeviceKey revokes a public key for a mobile device so that it can no longer be used.
	rpc RevokeDeviceKey(RevokeDeviceKeyRequest) returns (RevokeDeviceKeyResponse);

	// RevokeDeviceKeys revokes all mobile device keys for a given user so they can no longer be used.
	rpc RevokeDeviceKeys(RevokeDeviceKeysRequest) returns (RevokeDeviceKeysResponse);

	// FindDeviceKeyRegistrations gets all registered mobile device registrations for a user.
	rpc FindDeviceKeyRegistrations(FindDeviceKeyRegistrationsRequest) returns (FindDeviceKeyRegistrationsResponse);

	// FindDeviceKeyRegistration retrieves a device key registration associated with a user device.
	rpc FindDeviceKeyRegistration(FindDeviceKeyRegistrationRequest) returns (FindDeviceKeyRegistrationResponse);

	// RequestDeviceAuth begins the process of authenticating using a user device.
	rpc RequestDeviceAuth(RequestDeviceAuthRequest) returns (RequestDeviceAuthResponse);

	// GetDeviceAuthStatus retrieves the status (active, approved, rejected, expired) of a device auth request.
	rpc GetDeviceAuthStatus(GetDeviceAuthStatusRequest) returns (GetDeviceAuthStatusResponse);

	// FindActiveDeviceAuth finds an active device auth request.
	rpc FindActiveDeviceAuth(FindActiveDeviceAuthRequest) returns (FindActiveDeviceAuthResponse);

	// CompleteDeviceAuth approves or rejects an active device auth request.
	rpc CompleteDeviceAuth(CompleteDeviceAuthRequest) returns (CompleteDeviceAuthResponse);
}

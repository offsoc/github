{
  "01605ebfa9a57f7c60a96f03bb4ad2c3": "mutation applySuggestedChangesMutation(\n  $input: ApplySuggestedChangesInput!\n) {\n  applySuggestedChanges(input: $input) {\n    clientMutationId\n  }\n}\n",
  "04ba37f7e52d10064ab666f7ddeec8cf": "mutation minimizeCommentMutation(\n  $input: MinimizeCommentInput!\n) {\n  minimizeComment(input: $input) {\n    clientMutationId\n    minimizedComment {\n      __typename\n      isMinimized\n      minimizedReason\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n  }\n}\n",
  "050f8934f18fd80a6b72aec109e7b494": "mutation unresolvePullRequestThreadMutation(\n  $id: ID!\n) {\n  unresolvePullRequestThread(input: {threadId: $id}) {\n    thread {\n      id\n      isResolved\n      path\n      viewerCanResolve\n      viewerCanUnresolve\n      comments {\n        totalCount\n      }\n    }\n  }\n}\n",
  "0603fe0f6dabc68adea31e484c57deb7": "mutation submitAbuseReportMutation(\n  $input: SubmitAbuseReportInput!\n) {\n  submitAbuseReport(input: $input) {\n    clientMutationId\n  }\n}\n",
  "069aa6a233deb3ed97d10831800ce315": "query CommitsSelectorTestQuery(\n  $pullRequestId: ID!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ...CommitsSelector_pullRequest\n    id\n  }\n}\n\nfragment CommitsSelector_pullRequest on PullRequest {\n  baseRefOid\n  commits(first: 100) {\n    edges {\n      node {\n        commit {\n          abbreviatedOid\n          committedDate\n          messageHeadline\n          oid\n          author {\n            actor {\n              __typename\n              login\n              id\n            }\n          }\n          id\n        }\n        id\n      }\n    }\n  }\n}\n",
  "075c3a7b93e0e71c602642b04db28e0d": "query LabelSectionTestQuery {\n  pullRequest: node(id: \"test-id\") {\n    __typename\n    ... on PullRequest {\n      ...LabelSection_pullRequest\n    }\n    id\n  }\n}\n\nfragment LabelPickerAssignedLabels on Labelable {\n  __isLabelable: __typename\n  labels(first: 100, orderBy: {field: NAME, direction: ASC}) {\n    edges {\n      node {\n        ...LabelPickerLabel\n        id\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n  ... on Node {\n    __isNode: __typename\n    id\n  }\n}\n\nfragment LabelPickerLabel on Label {\n  id\n  color\n  name\n  nameHTML\n  description\n  url\n}\n\nfragment LabelSection_pullRequest on PullRequest {\n  ...LabelPickerAssignedLabels\n  viewerCanUpdate\n  id\n}\n",
  "09f3662a93f43320f264acda3a091080": "query ReviewersTestComponentQuery {\n  pullRequest: node(id: \"test-id\") {\n    __typename\n    ... on PullRequest {\n      ...Reviewers_pullRequest\n    }\n    id\n  }\n}\n\nfragment ReviewDetails_pullRequest on PullRequest {\n  latestReviews(first: 100, preferOpinionatedReviews: true) {\n    edges {\n      node {\n        onBehalfOfReviewers {\n          asCodeowner\n          reviewer {\n            __typename\n            ... on Team {\n              __typename\n              combinedSlug\n            }\n            ... on User {\n              __typename\n              login\n            }\n            ... on Node {\n              __isNode: __typename\n              id\n            }\n          }\n        }\n        author {\n          __typename\n          avatarUrl\n          login\n          url\n          id\n        }\n        state\n        id\n      }\n    }\n  }\n}\n\nfragment ReviewRequestDetails_pullRequest on PullRequest {\n  id\n  reviewRequests(first: 100) {\n    edges {\n      node {\n        asCodeOwner\n        assignedFromReviewRequest {\n          requestedReviewer {\n            __typename\n            ... on Team {\n              id\n              __typename\n              name\n            }\n            ... on User {\n              id\n              login\n              __typename\n            }\n            ... on Node {\n              __isNode: __typename\n              id\n            }\n          }\n          asCodeOwner\n          id\n        }\n        requestedReviewer {\n          __typename\n          ... on User {\n            id\n            avatarUrl\n            login\n            url\n            __typename\n          }\n          ... on Team {\n            combinedSlug\n            id\n            teamAvatarUrl: avatarUrl\n            name\n            url\n            organization {\n              name\n              id\n            }\n            __typename\n          }\n          ... on Node {\n            __isNode: __typename\n            id\n          }\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment Reviewers_pullRequest on PullRequest {\n  ...ReviewRequestDetails_pullRequest\n  ...ReviewDetails_pullRequest\n  id\n  isDraft\n  state\n  viewerCanUpdate\n  codeowners {\n    __typename\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  latestReviews(first: 100, preferOpinionatedReviews: true) {\n    edges {\n      node {\n        author {\n          __typename\n          login\n          id\n        }\n        state\n        id\n      }\n    }\n  }\n  reviewRequests(first: 100) {\n    edges {\n      node {\n        requestedReviewer {\n          __typename\n          ... on User {\n            id\n            __typename\n          }\n          ... on Team {\n            id\n            __typename\n          }\n          ... on Node {\n            __isNode: __typename\n            id\n          }\n        }\n        id\n      }\n    }\n  }\n}\n",
  "0e9c3591076627e2aac819c7311eda27": "mutation createSavedViewMutation(\n  $input: CreateSavedViewInput!\n) {\n  createSavedView(input: $input) {\n    savedView {\n      id\n      query\n      name\n    }\n  }\n}\n",
  "0ed244a04911a204602bcbfdc25a29e6": "query SuggestedReviewersTestQuery {\n  pullRequest: node(id: \"test-id\") {\n    __typename\n    ... on PullRequest {\n      ...SuggestedReviewers_pullRequest\n    }\n    id\n  }\n}\n\nfragment SuggestedReviewers_pullRequest on PullRequest {\n  id\n  state\n  suggestedReviewers {\n    reviewer {\n      id\n      avatarUrl\n      login\n      url\n    }\n  }\n  viewerCanUpdate\n}\n",
  "0eebf403ebe8d3fb9535ddd4266e3b68": "query ReviewsQuery(\n  $maxSavedViews: Int!\n) {\n  viewer {\n    id\n    dashboard {\n      id\n      reviewsCollection {\n        id\n        savedViews(first: $maxSavedViews, orderBy: {field: CREATED_AT, direction: ASC}) {\n          edges {\n            node {\n              ...SavedView_savedView\n              id\n              name\n              query\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment SavedView_savedView on SavedView {\n  id\n  name\n  query\n}\n",
  "114154284b8db8900e060a458641a1a0": "query ReviewRequestedEventSimpleStoryQuery(\n  $id: ID!\n) {\n  reviewRequestedEvent: node(id: $id) {\n    __typename\n    ...ReviewRequestedEvent_reviewRequestedEvent\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment ReviewRequestedEvent_reviewRequestedEvent on ReviewRequestedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  requestedReviewAssignedFromTeamName\n  reviewRequest {\n    codeOwnersResourcePath\n    requestedReviewer {\n      __typename\n      ... on User {\n        login\n        resourcePath\n      }\n      ... on Team {\n        combinedSlug\n        resourcePath\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    id\n  }\n  createdAt\n  databaseId\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "156ed0e3ad8e321848b300a3461a90c7": "query HeadRefForcePushedEventTestQuery(\n  $id: ID!\n) {\n  headRefForcePushedEvent: node(id: $id) {\n    __typename\n    ...HeadRefForcePushedEvent_headRefForcePushedEvent\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment HeadRefForcePushedEvent_headRefForcePushedEvent on HeadRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "182187fb626bab1ed591bec846627ba6": "query useLoadMergeBoxQuery(\n  $id: ID!\n  $mergeMethod: PullRequestMergeMethod\n) {\n  pullRequest: node(id: $id) {\n    __typename\n    ... on PullRequest {\n      ...useLoadMergeBoxQuery_pullRequest\n    }\n    id\n  }\n  viewer {\n    login\n    id\n  }\n}\n\nfragment useLoadMergeBoxQuery_pullRequest on PullRequest {\n  autoMergeRequest {\n    mergeMethod\n  }\n  baseRefName\n  commits {\n    totalCount\n  }\n  headRefOid\n  headRefName\n  headRepository {\n    owner {\n      __typename\n      login\n      id\n    }\n    name\n    id\n  }\n  id\n  isDraft\n  isInMergeQueue\n  latestOpinionatedReviews(first: 100) {\n    edges {\n      node {\n        authorCanPushToRepository\n        author {\n          __typename\n          login\n          avatarUrl\n          name\n          url\n          id\n        }\n        onBehalfOf(first: 10) {\n          edges {\n            node {\n              name\n              id\n            }\n          }\n        }\n        state\n        id\n      }\n    }\n  }\n  mergeQueueEntry {\n    position\n    state\n    id\n  }\n  mergeQueue {\n    url\n    id\n  }\n  mergeRequirements(mergeMethod: $mergeMethod) {\n    commitAuthor\n    commitMessageBody\n    commitMessageHeadline\n    state\n    conditions {\n      __typename\n      message\n      result\n      ... on PullRequestRulesCondition {\n        ruleRollups {\n          __typename\n          message\n          ruleType\n          result\n          ... on PullRequestRuleRollup {\n            failureReasons\n            requiredReviewers\n            requiresCodeowners\n          }\n        }\n      }\n      ... on PullRequestMergeConflictStateCondition {\n        __typename\n        conflicts\n        isConflictResolvableInWeb\n        result\n      }\n    }\n  }\n  mergeStateStatus\n  resourcePath\n  state\n  viewerCanAddAndRemoveFromMergeQueue\n  viewerCanDeleteHeadRef\n  viewerCanDisableAutoMerge\n  viewerCanEnableAutoMerge\n  viewerCanRestoreHeadRef\n  viewerCanUpdate\n  viewerCanUpdateBranch\n  viewerDidAuthor\n  viewerMergeActions {\n    name\n    isAllowable\n    mergeMethods {\n      name\n      isAllowable\n      isAllowableWithBypass\n    }\n  }\n  stateChannel: updatesChannel(name: STATE)\n  deployedChannel: updatesChannel(name: DEPLOYED)\n  reviewStateChannel: updatesChannel(name: REVIEW_STATE)\n  workflowsChannel: updatesChannel(name: WORKFLOWS)\n  mergeQueueChannel: updatesChannel(name: MERGE_QUEUE)\n  headRefChannel: updatesChannel(name: HEAD_REF)\n  baseRefChannel: updatesChannel(name: BASE_REF)\n  commitHeadShaChannel: updatesChannel(name: COMMIT_HEAD_SHA)\n  gitMergeStateChannel: updatesChannel(name: GIT_MERGE_STATE)\n}\n",
  "1883f77eefb3565ad849e3d61113356a": "query PullRequestCommitWithVerificationStoryQuery(\n  $id: ID!\n) {\n  pullRequestCommit: node(id: $id) {\n    __typename\n    ...PullRequestCommit_pullRequestCommit\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment PullRequestCommit_pullRequestCommit on PullRequestCommit {\n  commit {\n    abbreviatedOid\n    oid\n    message\n    authoredDate\n    verificationStatus\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "1a12e3ff6089cc933d1b486e6655f9e3": "query CommitsViewTestQuery(\n  $repositoryId: ID!\n  $number: Int!\n) {\n  repository: node(id: $repositoryId) {\n    __typename\n    ...CommitsView_repository\n    id\n  }\n}\n\nfragment CommitsView_repository on Repository {\n  name\n  owner {\n    __typename\n    login\n    id\n  }\n  pullRequest(number: $number) {\n    number\n    commits(first: 50) {\n      edges {\n        node {\n          messageHeadlineHTMLLink\n          commit {\n            committedViaWeb\n            authoredByCommitter\n            authoredDate\n            committedDate\n            messageBodyHTML\n            messageHeadline\n            oid\n            authors(first: 3) {\n              edges {\n                node {\n                  user {\n                    avatarUrl\n                    login\n                    name\n                    resourcePath\n                    id\n                  }\n                }\n              }\n            }\n            committer {\n              user {\n                avatarUrl\n                login\n                name\n                resourcePath\n                id\n              }\n            }\n            id\n          }\n          id\n        }\n      }\n    }\n    id\n  }\n}\n",
  "1d05325944747993395bb0167e7212e9": "mutation submitPullRequestReviewMutation(\n  $input: SubmitPullRequestReviewInput!\n) {\n  submitPullRequestReview(input: $input) {\n    pullRequestReview {\n      ...PullRequestReviewHeaderAndComment_pullRequestReview\n      url\n      state\n      pullRequest {\n        viewerPendingReview {\n          id\n          comments {\n            totalCount\n          }\n        }\n        id\n      }\n      comments(first: 100) {\n        edges {\n          node {\n            state\n            id\n          }\n        }\n      }\n      id\n    }\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment PullRequestReviewHeaderAndComment_pullRequestReview on PullRequestReview {\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n  id\n  databaseId\n  author {\n    __typename\n    id\n    avatarUrl(size: 64)\n    login\n    ...TimelineRowEventActor\n  }\n  authorAssociation\n  bodyHTML\n  bodyText\n  createdAt\n  pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  onBehalfOf(first: 10) {\n    edges {\n      node {\n        organization {\n          name\n          id\n        }\n        name\n        url\n        id\n      }\n    }\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  dismissedReviewState\n  state\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "21926dc13f67a7550d6782af98994f1f": "query ActivityViewTestQuery(\n  $pullRequestId: ID!\n  $timelinePageSize: Int!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ...ActivityView_pullRequest_3jKAAz\n    id\n  }\n  viewer {\n    ...ActivityView_viewer\n    id\n  }\n}\n\nfragment ActivityView_PullRequestTimeline_pullRequest on PullRequest {\n  id\n  url\n  viewerCanComment\n  author {\n    __typename\n    login\n    id\n  }\n  repository {\n    url\n    id\n  }\n}\n\nfragment ActivityView_pullRequest_3jKAAz on PullRequest {\n  ...ActivityView_pullRequest_forwardPagination_4k2445\n  ...ActivityView_pullRequest_backwardPagination_2Dhmdq\n  ...PullRequestCommentComposer_pullRequest\n  ...ActivityView_PullRequestTimeline_pullRequest\n}\n\nfragment ActivityView_pullRequest_backwardPagination_2Dhmdq on PullRequest {\n  backwardTimeline: timelineItems(last: 0, visibleEventsOnly: true, itemTypes: [ISSUE_COMMENT, PULL_REQUEST_REVIEW, PULL_REQUEST_COMMIT, BASE_REF_FORCE_PUSHED_EVENT, HEAD_REF_FORCE_PUSHED_EVENT, CLOSED_EVENT, REOPENED_EVENT, MERGED_EVENT, REVIEW_DISMISSED_EVENT, REVIEW_REQUESTED_EVENT]) {\n    edges {\n      node {\n        __typename\n        ...IssueComment_issueComment\n        ...ReactionViewerGroups\n        ...PullRequestReview_pullRequestReview\n        ... on IssueComment {\n          databaseId\n        }\n        ... on PullRequestReview {\n          databaseId\n        }\n        ... on PullRequestCommit {\n          ...PullRequestCommit_pullRequestCommit\n        }\n        ... on BaseRefForcePushedEvent {\n          databaseId\n          ...BaseRefForcePushedEvent_baseRefForcePushedEvent\n        }\n        ... on HeadRefForcePushedEvent {\n          databaseId\n          ...HeadRefForcePushedEvent_headRefForcePushedEvent\n        }\n        ... on ClosedEvent {\n          databaseId\n          ...ClosedEvent\n        }\n        ... on ReopenedEvent {\n          databaseId\n          ...ReopenedEvent\n        }\n        ... on MergedEvent {\n          databaseId\n          ...MergedEvent_mergedEvent\n        }\n        ... on ReviewDismissedEvent {\n          databaseId\n          ...ReviewDismissedEvent_reviewDismissedEvent\n        }\n        ... on ReviewRequestedEvent {\n          databaseId\n          ...ReviewRequestedEvent_reviewRequestedEvent\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasPreviousPage\n      startCursor\n    }\n  }\n  id\n}\n\nfragment ActivityView_pullRequest_forwardPagination_4k2445 on PullRequest {\n  viewerCanComment\n  forwardTimeline: timelineItems(first: $timelinePageSize, visibleEventsOnly: true, itemTypes: [ISSUE_COMMENT, PULL_REQUEST_REVIEW, PULL_REQUEST_COMMIT, BASE_REF_FORCE_PUSHED_EVENT, HEAD_REF_FORCE_PUSHED_EVENT, CLOSED_EVENT, REOPENED_EVENT, MERGED_EVENT, REVIEW_DISMISSED_EVENT, REVIEW_REQUESTED_EVENT]) {\n    totalCount\n    edges {\n      node {\n        __typename\n        ...IssueComment_issueComment\n        ...PullRequestReview_pullRequestReview\n        ...ReactionViewerGroups\n        ... on IssueComment {\n          databaseId\n        }\n        ... on PullRequestReview {\n          databaseId\n        }\n        ... on PullRequestCommit {\n          ...PullRequestCommit_pullRequestCommit\n        }\n        ... on BaseRefForcePushedEvent {\n          databaseId\n          ...BaseRefForcePushedEvent_baseRefForcePushedEvent\n        }\n        ... on HeadRefForcePushedEvent {\n          databaseId\n          ...HeadRefForcePushedEvent_headRefForcePushedEvent\n        }\n        ... on ClosedEvent {\n          databaseId\n          ...ClosedEvent\n        }\n        ... on ReopenedEvent {\n          databaseId\n          ...ReopenedEvent\n        }\n        ... on MergedEvent {\n          databaseId\n          ...MergedEvent_mergedEvent\n        }\n        ... on ReviewDismissedEvent {\n          databaseId\n          ...ReviewDismissedEvent_reviewDismissedEvent\n        }\n        ... on ReviewRequestedEvent {\n          databaseId\n          ...ReviewRequestedEvent_reviewRequestedEvent\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n  id\n}\n\nfragment ActivityView_viewer on User {\n  login\n  ...Thread_viewer\n}\n\nfragment BaseRefForcePushedEvent_baseRefForcePushedEvent on BaseRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment ClosedEvent on ClosedEvent {\n  databaseId\n  createdAt\n  stateReason\n  closingProjectItemStatus\n  closer {\n    __typename\n    ... on ProjectV2 {\n      url\n      title\n    }\n    ... on PullRequest {\n      url\n      number\n      repository {\n        name\n        owner {\n          __typename\n          login\n          id\n        }\n        id\n      }\n    }\n    ... on Commit {\n      url\n      abbreviatedOid\n      repository {\n        name\n        owner {\n          __typename\n          login\n          id\n        }\n        id\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment HeadRefForcePushedEvent_headRefForcePushedEvent on HeadRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment IssueCommentEditorBodyFragment on IssueComment {\n  id\n  body\n  bodyVersion\n  author {\n    __typename\n    login\n    avatarUrl\n    id\n  }\n  issue {\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  ...IssueCommentHeader\n}\n\nfragment IssueCommentEditor_repository on IssueComment {\n  repository {\n    slashCommandsEnabled\n    nameWithOwner\n    databaseId\n    id\n  }\n}\n\nfragment IssueCommentHeader on IssueComment {\n  id\n  databaseId\n  url\n  createdAt\n  body\n  authorAssociation\n  viewerCanUpdate\n  viewerCanDelete\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n  isHidden: isMinimized\n  minimizedReason\n  createdViaEmail\n  viewerDidAuthor\n  authorToRepoOwnerSponsorship {\n    createdAt\n    isActive\n    id\n  }\n  author {\n    __typename\n    id\n    login\n  }\n  repository {\n    id\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n    isPrivate\n  }\n  issue {\n    number\n    id\n  }\n  ...MarkdownEditHistoryViewer_comment\n}\n\nfragment IssueCommentViewerCommentRow on IssueComment {\n  id\n  databaseId\n  ...IssueCommentViewerMarkdownViewer\n  ...IssueCommentHeader\n  author {\n    avatarUrl\n    login\n    __typename\n    id\n  }\n  issue {\n    id\n    locked\n  }\n  body\n  isHidden: isMinimized\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerMarkdownViewer on IssueComment {\n  id\n  body\n  bodyHTML(unfurlReferences: true)\n  bodyVersion\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment IssueComment_issueComment on IssueComment {\n  ...IssueCommentViewerCommentRow\n  ...IssueCommentViewerReactable\n  ...IssueCommentEditor_repository\n  ...IssueCommentEditorBodyFragment\n  issue {\n    id\n  }\n  id\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment MergedEvent_mergedEvent on MergedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  mergeCommit: commit {\n    abbreviatedOid\n    oid\n    id\n  }\n  mergeRefName\n  viaMergeQueue\n  viaMergeQueueAPI\n  createdAt\n  databaseId\n}\n\nfragment PullRequestCommentActionButtons_pullRequest on PullRequest {\n  viewerCanClose\n  viewerCanReopen\n  state\n  id\n}\n\nfragment PullRequestCommentComposer_pullRequest on PullRequest {\n  id\n  locked\n  viewerCanComment\n  viewerCanClose\n  viewerCanReopen\n  databaseId\n  repository {\n    databaseId\n    isArchived\n    nameWithOwner\n    slashCommandsEnabled\n    securityPolicyUrl\n    contributingFileUrl\n    codeOfConductFileUrl\n    visibility\n    id\n  }\n  state\n  ...PullRequestCommentActionButtons_pullRequest\n}\n\nfragment PullRequestCommit_pullRequestCommit on PullRequestCommit {\n  commit {\n    abbreviatedOid\n    oid\n    message\n    authoredDate\n    verificationStatus\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment PullRequestReviewHeaderAndComment_pullRequestReview on PullRequestReview {\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n  id\n  databaseId\n  author {\n    __typename\n    id\n    avatarUrl(size: 64)\n    login\n    ...TimelineRowEventActor\n  }\n  authorAssociation\n  bodyHTML\n  bodyText\n  createdAt\n  pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  onBehalfOf(first: 10) {\n    edges {\n      node {\n        organization {\n          name\n          id\n        }\n        name\n        url\n        id\n      }\n    }\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  dismissedReviewState\n  state\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n}\n\nfragment PullRequestReview_pullRequestReview on PullRequestReview {\n  ...PullRequestReviewHeaderAndComment_pullRequestReview\n  databaseId\n  bodyText\n  id\n  pullRequestThreadsAndReplies(first: 100) {\n    edges {\n      node {\n        __typename\n        ... on PullRequestThread {\n          id\n          ...Thread_pullRequestThread\n          comments(first: 50) {\n            totalCount\n          }\n        }\n        ... on PullRequestReviewComment {\n          id\n          ...ReviewComment_pullRequestReviewComment\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment ReopenedEvent on ReopenedEvent {\n  databaseId\n  createdAt\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n}\n\nfragment ReviewComment_pullRequestReviewComment on PullRequestReviewComment {\n  id\n  currentDiffResourcePath\n  path\n  pullRequestThread {\n    id\n    isOutdated\n    isResolved\n  }\n  ...ReactionViewerGroups\n  ...useFetchThread_PullRequestReviewComment\n}\n\nfragment ReviewDismissedEvent_reviewDismissedEvent on ReviewDismissedEvent {\n  actor {\n    __typename\n    login\n    ...TimelineRowEventActor\n    id\n  }\n  pullRequestCommit {\n    commit {\n      abbreviatedOid\n      id\n    }\n    resourcePath\n    id\n  }\n  review {\n    fullDatabaseId\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  dismissalMessageHTML\n  createdAt\n  databaseId\n}\n\nfragment ReviewRequestedEvent_reviewRequestedEvent on ReviewRequestedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  requestedReviewAssignedFromTeamName\n  reviewRequest {\n    codeOwnersResourcePath\n    requestedReviewer {\n      __typename\n      ... on User {\n        login\n        resourcePath\n      }\n      ... on Team {\n        combinedSlug\n        resourcePath\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    id\n  }\n  createdAt\n  databaseId\n}\n\nfragment ThreadHeader_pullRequestThread on PullRequestThread {\n  id\n  isOutdated\n  isResolved\n  line\n  path\n}\n\nfragment Thread_pullRequestThread on PullRequestThread {\n  ...ThreadHeader_pullRequestThread\n  id\n  currentDiffResourcePath\n  isOutdated\n  isResolved\n  path\n  subject {\n    __typename\n    ... on PullRequestDiffThread {\n      originalStartLine\n      originalEndLine\n      startLine\n      endLine\n      startDiffSide\n      endDiffSide\n      diffLines(maxContextLines: 3) {\n        left\n        right\n        html\n        text\n        type\n      }\n    }\n  }\n  subjectType\n  viewerCanReply\n  comments(first: 50) {\n    edges {\n      node {\n        ...useFetchThread_PullRequestReviewComment\n        ...ReactionViewerGroups\n        id\n      }\n    }\n  }\n}\n\nfragment Thread_viewer on User {\n  avatarUrl\n  login\n  isSiteAdmin\n  pullRequestUserPreferences {\n    tabSize\n    diffView\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "22c7aafcfac19b8e056dc86488cb6dc2": "query PullRequestMainContentAreaQuery(\n  $number: Int!\n  $owner: String!\n  $repo: String!\n  $singleCommitOid: String\n  $startOid: String\n  $endOid: String\n) {\n  repository(owner: $owner, name: $repo) {\n    pullRequest(number: $number) {\n      ...Navigation_pullRequest\n      comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n        oldCommit {\n          oid\n          id\n        }\n      }\n      id\n    }\n    id\n  }\n}\n\nfragment CommitsDropdown_pullRequest on PullRequest {\n  ...CommitsSelector_pullRequest\n  baseRefOid\n  commits(first: 100) {\n    edges {\n      node {\n        commit {\n          oid\n          id\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment CommitsSelector_pullRequest on PullRequest {\n  baseRefOid\n  commits(first: 100) {\n    edges {\n      node {\n        commit {\n          abbreviatedOid\n          committedDate\n          messageHeadline\n          oid\n          author {\n            actor {\n              __typename\n              login\n              id\n            }\n          }\n          id\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment FileTree_pullRequest on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    summary {\n      path\n      pathDigest\n      changeType\n      totalCommentsCount\n      totalAnnotationsCount\n    }\n  }\n}\n\nfragment Navigation_pullRequest on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    summary {\n      __typename\n    }\n  }\n  ...FileTree_pullRequest\n  ...CommitsDropdown_pullRequest\n}\n",
  "2438569a9ee2f29f44d2b4568d05d5ba": "mutation markPullRequestReadyForReviewMutation(\n  $input: MarkPullRequestReadyForReviewInput!\n) {\n  markPullRequestReadyForReview(input: $input) {\n    pullRequest {\n      id\n      isDraft\n    }\n  }\n}\n",
  "25ed5b6e019502d00939c72ceb1dfdd5": "mutation addCommentMutation(\n  $input: AddCommentInput!\n) {\n  addComment(input: $input) {\n    timelineEdge {\n      node {\n        __typename\n        ...IssueCommentViewerCommentRow\n        ...IssueComment_issueComment\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n    }\n    subject {\n      __typename\n      id\n    }\n  }\n}\n\nfragment IssueCommentEditorBodyFragment on IssueComment {\n  id\n  body\n  bodyVersion\n  author {\n    __typename\n    login\n    avatarUrl\n    id\n  }\n  issue {\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  ...IssueCommentHeader\n}\n\nfragment IssueCommentEditor_repository on IssueComment {\n  repository {\n    slashCommandsEnabled\n    nameWithOwner\n    databaseId\n    id\n  }\n}\n\nfragment IssueCommentHeader on IssueComment {\n  id\n  databaseId\n  url\n  createdAt\n  body\n  authorAssociation\n  viewerCanUpdate\n  viewerCanDelete\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n  isHidden: isMinimized\n  minimizedReason\n  createdViaEmail\n  viewerDidAuthor\n  authorToRepoOwnerSponsorship {\n    createdAt\n    isActive\n    id\n  }\n  author {\n    __typename\n    id\n    login\n  }\n  repository {\n    id\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n    isPrivate\n  }\n  issue {\n    number\n    id\n  }\n  ...MarkdownEditHistoryViewer_comment\n}\n\nfragment IssueCommentViewerCommentRow on IssueComment {\n  id\n  databaseId\n  ...IssueCommentViewerMarkdownViewer\n  ...IssueCommentHeader\n  author {\n    avatarUrl\n    login\n    __typename\n    id\n  }\n  issue {\n    id\n    locked\n  }\n  body\n  isHidden: isMinimized\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerMarkdownViewer on IssueComment {\n  id\n  body\n  bodyHTML(unfurlReferences: true)\n  bodyVersion\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment IssueComment_issueComment on IssueComment {\n  ...IssueCommentViewerCommentRow\n  ...IssueCommentViewerReactable\n  ...IssueCommentEditor_repository\n  ...IssueCommentEditorBodyFragment\n  issue {\n    id\n  }\n  id\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n",
  "25f800cb238b5fc25c5887ee623cd6d9": "mutation convertPullRequestToDraftMutation(\n  $input: ConvertPullRequestToDraftInput!\n) {\n  convertPullRequestToDraft(input: $input) {\n    pullRequest {\n      id\n      isDraft\n    }\n  }\n}\n",
  "28e696bd498695f5c682e1e455659283": "query IssueCommentHeaderTestQuery {\n  repository(owner: \"owner\", name: \"repo\") {\n    issue(number: 33) {\n      timelineItems(last: 10) {\n        edges {\n          node {\n            __typename\n            ... on IssueComment {\n              ...IssueCommentHeader\n            }\n            ... on Node {\n              __isNode: __typename\n              id\n            }\n          }\n        }\n      }\n      id\n    }\n    id\n  }\n}\n\nfragment IssueCommentHeader on IssueComment {\n  id\n  databaseId\n  url\n  createdAt\n  body\n  authorAssociation\n  viewerCanUpdate\n  viewerCanDelete\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n  isHidden: isMinimized\n  minimizedReason\n  createdViaEmail\n  viewerDidAuthor\n  authorToRepoOwnerSponsorship {\n    createdAt\n    isActive\n    id\n  }\n  author {\n    __typename\n    id\n    login\n  }\n  repository {\n    id\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n    isPrivate\n  }\n  issue {\n    number\n    id\n  }\n  ...MarkdownEditHistoryViewer_comment\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n",
  "2f80277f4fb4ba43e1ab9c01d72aa851": "query IssueCommentComposerTestComponentQuery(\n  $commentId: ID!\n) {\n  comment: node(id: $commentId) {\n    __typename\n    ... on Comment {\n      __isComment: __typename\n      ...IssueCommentComposer\n      ...IssueCommentComposerSecondary\n    }\n    id\n  }\n  viewer {\n    ...IssueCommentComposerViewer\n    id\n  }\n}\n\nfragment IssueActions on Issue {\n  ...IssueActionsState\n}\n\nfragment IssueActionsState on Issue {\n  state\n  stateReason\n  id\n}\n\nfragment IssueCommentComposer on Issue {\n  id\n  locked\n  viewerCanComment\n  databaseId\n  repository {\n    id\n    databaseId\n    isArchived\n    nameWithOwner\n    viewerCanInteract\n    viewerInteractionLimitReasonHTML\n  }\n  ...IssueActions\n}\n\nfragment IssueCommentComposerSecondary on Issue {\n  viewerCanReopen\n  viewerCanClose\n  repository {\n    slashCommandsEnabled\n    id\n  }\n}\n\nfragment IssueCommentComposerViewer on User {\n  id\n  login\n  avatarUrl(size: 64)\n}\n",
  "30939196fef2ec5c693e64e9facf6140": "query MergedEventManualMergeStoryQuery(\n  $id: ID!\n) {\n  mergedEvent: node(id: $id) {\n    __typename\n    ...MergedEvent_mergedEvent\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment MergedEvent_mergedEvent on MergedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  mergeCommit: commit {\n    abbreviatedOid\n    oid\n    id\n  }\n  mergeRefName\n  viaMergeQueue\n  viaMergeQueueAPI\n  createdAt\n  databaseId\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "322f8ad89b4573ded9ac11a500650324": "query ActionSectionTestQuery {\n  pullRequest: node(id: \"test-id\") {\n    __typename\n    ... on PullRequest {\n      ...ActionSection_pullRequest\n    }\n    id\n  }\n}\n\nfragment ActionSection_pullRequest on PullRequest {\n  id\n  isDraft\n  baseRepository {\n    planSupportsDraftPullRequests: planSupports(feature: DRAFT_PRS)\n    id\n  }\n  state\n  viewerCanUpdate\n}\n",
  "345847292e95200386d7fbc673f55ab5": "mutation addPullRequestThreadReplyMutation(\n  $input: AddPullRequestThreadReplyInput!\n  $filePath: String\n) {\n  addPullRequestThreadReply(input: $input) {\n    comment {\n      ...useFetchThread_PullRequestReviewComment\n      pullRequest {\n        threads(first: 50, isPositioned: false, subjectType: FILE, path: $filePath) {\n          totalCommentsCount\n          edges {\n            __typename\n            cursor\n            node {\n              __typename\n              id\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n        id\n      }\n      pullRequestReview {\n        id\n        comments {\n          totalCount\n        }\n      }\n      id\n    }\n  }\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "34e2d4a2a54c81aedce8a41b48ea13b0": "query DescriptionTestQuery(\n  $pullRequestId: ID!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ...Description_pullRequest\n    id\n  }\n}\n\nfragment Description_pullRequest on PullRequest {\n  id\n  databaseId\n  bodyVersion\n  ...IssueBodyHeader\n  repository {\n    databaseId\n    nameWithOwner\n    slashCommandsEnabled\n    id\n  }\n  viewerCanUpdate\n  locked\n  body\n  bodyHTML(unfurlReferences: true)\n  ...IssueBodyViewerReactable\n  ...IssueBodyViewer\n}\n\nfragment IssueBodyHeader on Comment {\n  __isComment: __typename\n  ...IssueBodyHeaderActions_comment\n  createdAt\n  viewerDidAuthor\n  author {\n    __typename\n    ...IssueBodyHeaderAuthor\n    ...IssueBodyHeaderActions\n    id\n  }\n}\n\nfragment IssueBodyHeaderActions on Actor {\n  __isActor: __typename\n  login\n  id\n}\n\nfragment IssueBodyHeaderActions_comment on Comment {\n  __isComment: __typename\n  body\n}\n\nfragment IssueBodyHeaderAuthor on Actor {\n  __isActor: __typename\n  login\n  avatarUrl\n  profileUrl\n}\n\nfragment IssueBodyViewer on Comment {\n  __isComment: __typename\n  id\n}\n\nfragment IssueBodyViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n",
  "35fce8e8809c5d2e1f89aa0abfc914ca": "query useFetchAnchoredAnnotationData_AnchoredAnnotationQuery(\n  $owner: String!\n  $repo: String!\n  $number: Int!\n) {\n  repository(owner: $owner, name: $repo) {\n    pullRequest(number: $number) {\n      headCommit {\n        commit {\n          checkSuites(last: 100) {\n            edges {\n              node {\n                checkRuns(filterBy: {checkType: LATEST}, last: 100) {\n                  edges {\n                    node {\n                      annotations(last: 100) {\n                        edges {\n                          node {\n                            databaseId\n                            pathDigest\n                          }\n                        }\n                      }\n                      id\n                    }\n                  }\n                }\n                id\n              }\n            }\n          }\n          id\n        }\n        id\n      }\n      id\n    }\n    id\n  }\n}\n",
  "381500769f5dd363cf0ad8313169a8b6": "mutation updatePullRequestReviewMutation(\n  $input: UpdatePullRequestReviewInput!\n) {\n  updatePullRequestReview(input: $input) {\n    pullRequestReview {\n      ...PullRequestReview_pullRequestReview\n      id\n    }\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment PullRequestReviewHeaderAndComment_pullRequestReview on PullRequestReview {\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n  id\n  databaseId\n  author {\n    __typename\n    id\n    avatarUrl(size: 64)\n    login\n    ...TimelineRowEventActor\n  }\n  authorAssociation\n  bodyHTML\n  bodyText\n  createdAt\n  pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  onBehalfOf(first: 10) {\n    edges {\n      node {\n        organization {\n          name\n          id\n        }\n        name\n        url\n        id\n      }\n    }\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  dismissedReviewState\n  state\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n}\n\nfragment PullRequestReview_pullRequestReview on PullRequestReview {\n  ...PullRequestReviewHeaderAndComment_pullRequestReview\n  databaseId\n  bodyText\n  id\n  pullRequestThreadsAndReplies(first: 100) {\n    edges {\n      node {\n        __typename\n        ... on PullRequestThread {\n          id\n          ...Thread_pullRequestThread\n          comments(first: 50) {\n            totalCount\n          }\n        }\n        ... on PullRequestReviewComment {\n          id\n          ...ReviewComment_pullRequestReviewComment\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment ReviewComment_pullRequestReviewComment on PullRequestReviewComment {\n  id\n  currentDiffResourcePath\n  path\n  pullRequestThread {\n    id\n    isOutdated\n    isResolved\n  }\n  ...ReactionViewerGroups\n  ...useFetchThread_PullRequestReviewComment\n}\n\nfragment ThreadHeader_pullRequestThread on PullRequestThread {\n  id\n  isOutdated\n  isResolved\n  line\n  path\n}\n\nfragment Thread_pullRequestThread on PullRequestThread {\n  ...ThreadHeader_pullRequestThread\n  id\n  currentDiffResourcePath\n  isOutdated\n  isResolved\n  path\n  subject {\n    __typename\n    ... on PullRequestDiffThread {\n      originalStartLine\n      originalEndLine\n      startLine\n      endLine\n      startDiffSide\n      endDiffSide\n      diffLines(maxContextLines: 3) {\n        left\n        right\n        html\n        text\n        type\n      }\n    }\n  }\n  subjectType\n  viewerCanReply\n  comments(first: 50) {\n    edges {\n      node {\n        ...useFetchThread_PullRequestReviewComment\n        ...ReactionViewerGroups\n        id\n      }\n    }\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "3b1ca2bcf1e2519ec7a0749d051f04b2": "mutation deletePullRequestReviewMutation(\n  $input: DeletePullRequestReviewInput!\n) {\n  deletePullRequestReview(input: $input) {\n    pullRequestReview {\n      id\n      comments(first: 100) {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n    }\n  }\n}\n",
  "3bb2b18124f6d9e474f1e4d67f4d648c": "mutation unblockUserFromOrganizationMutation(\n  $input: UnblockUserFromOrganizationInput!\n) {\n  unblockUserFromOrganization(input: $input) {\n    clientMutationId\n  }\n}\n",
  "3bbe80b4f238645fe480d58d1009ea00": "query NavigationTestQuery(\n  $pullRequestId: ID!\n  $startOid: String\n  $endOid: String\n  $singleCommitOid: String\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ...Navigation_pullRequest\n    id\n  }\n}\n\nfragment CommitsDropdown_pullRequest on PullRequest {\n  ...CommitsSelector_pullRequest\n  baseRefOid\n  commits(first: 100) {\n    edges {\n      node {\n        commit {\n          oid\n          id\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment CommitsSelector_pullRequest on PullRequest {\n  baseRefOid\n  commits(first: 100) {\n    edges {\n      node {\n        commit {\n          abbreviatedOid\n          committedDate\n          messageHeadline\n          oid\n          author {\n            actor {\n              __typename\n              login\n              id\n            }\n          }\n          id\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment FileTree_pullRequest on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    summary {\n      path\n      pathDigest\n      changeType\n      totalCommentsCount\n      totalAnnotationsCount\n    }\n  }\n}\n\nfragment Navigation_pullRequest on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    summary {\n      __typename\n    }\n  }\n  ...FileTree_pullRequest\n  ...CommitsDropdown_pullRequest\n}\n",
  "3c31fc015a70449300de1401c3ba8e05": "query SectionRefetchQuery(\n  $cursor: String = null\n  $first: Int\n  $labelPageSize: Int!\n  $query: String!\n) {\n  ...Section_query_LI8aT\n}\n\nfragment IssueItem_WbnLh on Issue {\n  id\n  __typename\n  title\n  titleHtml: titleHTML\n  ...IssuePullRequestTitle_WbnLh\n  ...IssuePullRequestDescription\n  ...IssuePullRequestStateIcon\n  ...IssueTypeIndicator\n}\n\nfragment IssuePullRequestDescription on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  ... on Issue {\n    createdAt\n    updatedAt\n    author {\n      __typename\n      login\n      avatarUrl\n      id\n    }\n    number\n    ...MilestoneMetadata\n  }\n  ... on PullRequest {\n    createdAt\n    updatedAt\n    author {\n      __typename\n      login\n      avatarUrl\n      id\n    }\n    number\n    ...MilestoneMetadata\n    reviewDecision\n  }\n}\n\nfragment IssuePullRequestStateIcon on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  __typename\n  ... on Issue {\n    state\n    stateReason\n  }\n  ... on PullRequest {\n    isDraft\n    isInMergeQueue\n    pullRequestState: state\n  }\n}\n\nfragment IssuePullRequestTitle_WbnLh on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  __typename\n  ... on Issue {\n    number\n    labels(first: $labelPageSize, orderBy: {field: NAME, direction: ASC}) {\n      nodes {\n        ...Label\n        name\n        id\n      }\n    }\n  }\n  ... on PullRequest {\n    number\n    labels(first: $labelPageSize, orderBy: {field: NAME, direction: ASC}) {\n      nodes {\n        ...Label\n        name\n        id\n      }\n    }\n  }\n}\n\nfragment IssueRow_bj3h3 on Issue {\n  ...IssueItem_WbnLh\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment IssueTypeIndicator on Issue {\n  issueType {\n    id\n    name\n    color\n  }\n}\n\nfragment Label on Label {\n  id\n  nameHTML\n  color\n  name\n  description\n}\n\nfragment MilestoneMetadata on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  ... on Issue {\n    milestone {\n      title\n      url\n      id\n    }\n  }\n  ... on PullRequest {\n    milestone {\n      title\n      url\n      id\n    }\n  }\n}\n\nfragment PullRequestItem_WbnLh on PullRequest {\n  id\n  __typename\n  headCommit {\n    commit {\n      id\n      statusCheckRollup {\n        state\n        contexts {\n          checkRunCount\n          checkRunCountsByState {\n            count\n            state\n          }\n        }\n        id\n      }\n    }\n    id\n  }\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  title\n  titleHTML\n  ...IssuePullRequestTitle_WbnLh\n  ...IssuePullRequestDescription\n  ...IssuePullRequestStateIcon\n}\n\nfragment PullRequestRow_pullRequest_WbnLh on PullRequest {\n  __typename\n  id\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  ...PullRequestItem_WbnLh\n  headCommit {\n    commit {\n      id\n    }\n    id\n  }\n  number\n}\n\nfragment Section_query_LI8aT on Query {\n  search(first: $first, after: $cursor, query: $query, type: ISSUE) {\n    edges {\n      node {\n        __typename\n        ... on Issue {\n          __typename\n          number\n          ...IssueRow_bj3h3\n        }\n        ... on PullRequest {\n          __typename\n          number\n          ...PullRequestRow_pullRequest_WbnLh\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      startCursor\n      endCursor\n      hasPreviousPage\n      hasNextPage\n    }\n    issueCount\n  }\n}\n",
  "41a0279cd74ab3c591b392b34318fd1c": "query MergedEventMergeQueueStoryQuery(\n  $id: ID!\n) {\n  mergedEvent: node(id: $id) {\n    __typename\n    ...MergedEvent_mergedEvent\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment MergedEvent_mergedEvent on MergedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  mergeCommit: commit {\n    abbreviatedOid\n    oid\n    id\n  }\n  mergeRefName\n  viaMergeQueue\n  viaMergeQueueAPI\n  createdAt\n  databaseId\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "42aeb10e566d7d45087bb1b16685f9ed": "query ReviewDismissedEventViaCommitStoryQuery(\n  $id: ID!\n) {\n  reviewDismissedEvent: node(id: $id) {\n    __typename\n    ...ReviewDismissedEvent_reviewDismissedEvent\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment ReviewDismissedEvent_reviewDismissedEvent on ReviewDismissedEvent {\n  actor {\n    __typename\n    login\n    ...TimelineRowEventActor\n    id\n  }\n  pullRequestCommit {\n    commit {\n      abbreviatedOid\n      id\n    }\n    resourcePath\n    id\n  }\n  review {\n    fullDatabaseId\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  dismissalMessageHTML\n  createdAt\n  databaseId\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "46c3d4be3fbfa5b5b9d20b808bb7fc21": "query PullRequestCommitsViewerContentQuery(\n  $number: Int!\n  $owner: String!\n  $repo: String!\n) {\n  repository(owner: $owner, name: $repo) {\n    ...CommitsView_repository\n    pullRequest(number: $number) {\n      id\n      repository {\n        id\n      }\n      headRefOid\n      isInMergeQueue\n      state\n      viewerCanComment\n      viewerCanApplySuggestion\n      ...useEmitPageViewEvent_pullRequest\n    }\n    id\n  }\n}\n\nfragment CommitsView_repository on Repository {\n  name\n  owner {\n    __typename\n    login\n    id\n  }\n  pullRequest(number: $number) {\n    number\n    commits(first: 50) {\n      edges {\n        node {\n          messageHeadlineHTMLLink\n          commit {\n            committedViaWeb\n            authoredByCommitter\n            authoredDate\n            committedDate\n            messageBodyHTML\n            messageHeadline\n            oid\n            authors(first: 3) {\n              edges {\n                node {\n                  user {\n                    avatarUrl\n                    login\n                    name\n                    resourcePath\n                    id\n                  }\n                }\n              }\n            }\n            committer {\n              user {\n                avatarUrl\n                login\n                name\n                resourcePath\n                id\n              }\n            }\n            id\n          }\n          id\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment useEmitPageViewEvent_pullRequest on PullRequest {\n  comparison {\n    filesChanged\n    linesChanged\n  }\n}\n",
  "4702027fba719cc34ec83a0c90d83ecb": "query BaseRefForcePushedEventStoryQuery(\n  $id: ID!\n) {\n  baseRefForcePushedEvent: node(id: $id) {\n    __typename\n    ...BaseRefForcePushedEvent_baseRefForcePushedEvent\n    id\n  }\n}\n\nfragment BaseRefForcePushedEvent_baseRefForcePushedEvent on BaseRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "495701c3c45dde97d56226f77bb1c7d3": "query DiffTestQuery(\n  $pullRequestId: ID!\n  $injectedContextLines: [DiffLineRange!]\n  $inlineThreadCount: Int = 20\n  $singleCommitOid: String\n  $endOid: String\n  $startOid: String\n) {\n  viewer {\n    ...Diff_viewer\n    id\n  }\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...Diff_pullRequest\n      comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n        diffEntries(first: 20) {\n          nodes {\n            ...Diff_diffEntry\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment BlobActionsMenu_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  oid\n  status\n  isSubmodule\n  isBinary\n  isLfsPointer\n}\n\nfragment BlobActionsMenu_pullRequest on PullRequest {\n  id\n  number\n  headRefName\n  headRepository {\n    nameWithOwner\n    id\n  }\n  baseRepository {\n    nameWithOwner\n    id\n  }\n  viewerCanEditFiles\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n  }\n}\n\nfragment CodeownersBadge_pathOwnership on PathOwnership {\n  pathOwners {\n    name\n  }\n  ruleLineNumber\n  ruleUrl\n  isOwnedByViewer\n}\n\nfragment CodeownersBadge_viewer on User {\n  login\n}\n\nfragment DiffFileHeaderListView_diffEntry on PullRequestDiffEntry {\n  pathDigest\n  path\n  pathOwnership {\n    ...CodeownersBadge_pathOwnership\n  }\n  oldTreeEntry {\n    mode\n    path\n  }\n  newTreeEntry {\n    mode\n    path\n  }\n  status\n  linesAdded\n  linesDeleted\n  ...BlobActionsMenu_diffEntry\n  ...FileConversationsButton_diffEntry\n  ...ViewedCheckbox_diffEntry\n}\n\nfragment DiffFileHeaderListView_pullRequest on PullRequest {\n  ...BlobActionsMenu_pullRequest\n}\n\nfragment DiffFileHeaderListView_viewer on User {\n  ...CodeownersBadge_viewer\n  ...FileConversationsButton_viewer\n}\n\nfragment DiffLines_diffEntry on PullRequestDiffEntry {\n  id\n  diffLines(injectedContextLines: $injectedContextLines) {\n    left\n    right\n    blobLineNumber\n    html\n    type\n    text\n    threads(first: $inlineThreadCount) {\n      totalCount\n      totalCommentsCount\n      edges {\n        node {\n          diffSide\n          id\n          isOutdated\n          line\n          startDiffSide\n          startLine\n          comments(first: 50) {\n            totalCount\n            edges {\n              node {\n                author {\n                  __typename\n                  avatarUrl(size: 48)\n                  login\n                  id\n                }\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment DiffLines_viewer on User {\n  avatarUrl(size: 48)\n  isSiteAdmin\n  login\n  pullRequestUserPreferences {\n    diffView\n    tabSize\n  }\n}\n\nfragment Diff_diffEntry on PullRequestDiffEntry {\n  diffEntryId: id\n  isBinary\n  isTooBig\n  linesChanged\n  pathDigest\n  viewerViewedState\n  path\n  status\n  truncatedReason\n  oldTreeEntry {\n    mode\n    lineCount\n  }\n  newTreeEntry {\n    mode\n    lineCount\n    isGenerated\n  }\n  diffLines(injectedContextLines: $injectedContextLines) {\n    blobLineNumber\n  }\n  ...DiffFileHeaderListView_diffEntry\n  ...DiffLines_diffEntry\n}\n\nfragment Diff_pullRequest on PullRequest {\n  ...DiffFileHeaderListView_pullRequest\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n  }\n}\n\nfragment Diff_viewer on User {\n  ...DiffFileHeaderListView_viewer\n  ...DiffLines_viewer\n}\n\nfragment FileConversationsButton_diffEntry on PullRequestDiffEntry {\n  path\n  outdatedThreads: threads(first: 50, subjectType: LINE, outdatedFilter: ONLY_OUTDATED) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n  threads(first: 50, subjectType: FILE) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment FileConversationsButton_viewer on User {\n  login\n  avatarUrl(size: 48)\n}\n\nfragment ViewedCheckbox_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  viewerViewedState\n}\n",
  "4b142d4832b7dd7e1ba7d8cf70ee7ccd": "query PullRequestHeaderWrapperQuery(\n  $number: Int!\n  $owner: String!\n  $repo: String!\n  $singleCommitOid: String\n  $startOid: String\n  $endOid: String\n) {\n  viewer {\n    ...PullRequestHeaderWrapper_user\n    id\n  }\n  repository(owner: $owner, name: $repo) {\n    ...PullRequestHeaderWrapper_repository\n    pullRequest(number: $number) {\n      id\n    }\n    id\n  }\n}\n\nfragment HeaderBranchInfo_pullRequest on PullRequest {\n  mergedAt\n  baseRefName\n  baseRef {\n    repository {\n      defaultBranch\n      name\n      owner {\n        __typename\n        login\n        id\n      }\n      id\n    }\n    id\n  }\n  headRefName\n  state\n  commits {\n    totalCount\n  }\n  baseRepository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    defaultBranchRef {\n      name\n      id\n    }\n    id\n  }\n  headRepository {\n    name\n    isFork\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  author {\n    __typename\n    login\n    id\n  }\n  viewerCanChangeBaseBranch\n}\n\nfragment HeaderMetadata_pullRequest on PullRequest {\n  ...HeaderBranchInfo_pullRequest\n  titleHTML\n  title\n  isDraft\n  number\n  state\n  isInMergeQueue\n  repository {\n    nameWithOwner\n    id\n  }\n}\n\nfragment HeaderRightSideContent_pullRequest on PullRequest {\n  id\n  state\n  ...ReviewMenu_pullRequest\n}\n\nfragment HeaderRightSideContent_user on User {\n  ...ReviewMenu_user\n}\n\nfragment PullRequestHeaderWrapper_repository on Repository {\n  databaseId\n  nameWithOwner\n  id\n  isWritable\n  slashCommandsEnabled\n  pullRequest(number: $number) {\n    headRefOid\n    fullDatabaseId\n    id\n    baseRefName\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n      summary {\n        __typename\n      }\n    }\n    state\n    isInMergeQueue\n    title\n    titleHTML\n    viewerCanUpdate\n    ...HeaderMetadata_pullRequest\n    ...HeaderRightSideContent_pullRequest\n  }\n}\n\nfragment PullRequestHeaderWrapper_user on User {\n  ...HeaderRightSideContent_user\n}\n\nfragment ReviewMenu_pullRequest on PullRequest {\n  id\n  author {\n    __typename\n    login\n    id\n  }\n  headRefOid\n  repository {\n    id\n    viewerPermission\n  }\n  state\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    newCommit {\n      oid\n      id\n    }\n    summary {\n      path\n    }\n  }\n  viewerCanLeaveNonCommentReviews\n  viewerHasViolatedPushPolicy\n  viewerPendingReview {\n    id\n    comments {\n      totalCount\n    }\n  }\n}\n\nfragment ReviewMenu_user on User {\n  login\n}\n",
  "4c75d2dd75a3af4cc34d525194cff752": "mutation deletePullRequestCommentMutation(\n  $input: DeletePullRequestReviewCommentInput!\n  $filePath: String\n  $singleCommitOid: String\n  $startOid: String\n  $endOid: String\n) {\n  deletePullRequestReviewComment(input: $input) {\n    pullRequestReviewComment {\n      id\n      pullRequest {\n        ...ReviewMenu_pullRequest\n        threads(first: 50, isPositioned: false, subjectType: FILE, path: $filePath) {\n          totalCommentsCount\n          edges {\n            __typename\n            cursor\n            node {\n              __typename\n              id\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n        id\n      }\n      pullRequestReview {\n        pullRequestThreadsAndReplies(first: 100) {\n          totalCount\n          edges {\n            __typename\n            cursor\n            node {\n              __typename\n              ... on Node {\n                __isNode: __typename\n                id\n              }\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment ReviewMenu_pullRequest on PullRequest {\n  id\n  author {\n    __typename\n    login\n    id\n  }\n  headRefOid\n  repository {\n    id\n    viewerPermission\n  }\n  state\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    newCommit {\n      oid\n      id\n    }\n    summary {\n      path\n    }\n  }\n  viewerCanLeaveNonCommentReviews\n  viewerHasViolatedPushPolicy\n  viewerPendingReview {\n    id\n    comments {\n      totalCount\n    }\n  }\n}\n",
  "4fe7a247d28f4169b463b24ad8d7d8c4": "query OpenAnnotationsPanelButtonTestQuery(\n  $pullRequestId: ID!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...OpenAnnotationsPanelButton_pullRequest\n    }\n    id\n  }\n}\n\nfragment OpenAnnotationsPanelButton_pullRequest on PullRequest {\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n",
  "520afd717e425a3c7992dc2d1abd85db": "mutation updateWhitespacePreferenceMutation(\n  $pullRequestId: ID!\n  $whitespacePreference: Boolean!\n  $singleCommitOid: String = null\n  $endOid: String = null\n  $injectedContextLines: [DiffLineRange!] = null\n  $inlineThreadCount: Int = 20\n  $isSingleCommit: Boolean = false\n  $diffEntryCount: Int = 5\n  $diffEntryCursor: String = null\n  $startOid: String = null\n) {\n  updateWhitespacePreference(input: {pullRequestId: $pullRequestId, ignoreWhitespace: $whitespacePreference}) {\n    pullRequest {\n      id\n      ...PullRequestFilesViewerContent_pullRequest\n    }\n  }\n}\n\nfragment BlobActionsMenu_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  oid\n  status\n  isSubmodule\n  isBinary\n  isLfsPointer\n}\n\nfragment BlobActionsMenu_pullRequest on PullRequest {\n  id\n  number\n  headRefName\n  headRepository {\n    nameWithOwner\n    id\n  }\n  baseRepository {\n    nameWithOwner\n    id\n  }\n  viewerCanEditFiles\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n  }\n}\n\nfragment CodeownersBadge_pathOwnership on PathOwnership {\n  pathOwners {\n    name\n  }\n  ruleLineNumber\n  ruleUrl\n  isOwnedByViewer\n}\n\nfragment CommitDiffHeading_commit on Commit {\n  abbreviatedOid\n  authoredByCommitter\n  committedDate\n  committedViaWeb\n  hasSignature\n  messageHeadlineHTML\n  messageBodyHTML\n  oid\n  verificationStatus\n  authors(first: 3) {\n    edges {\n      node {\n        user {\n          avatarUrl\n          login\n          name\n          resourcePath\n          id\n        }\n      }\n    }\n  }\n  committer {\n    user {\n      avatarUrl\n      login\n      name\n      resourcePath\n      id\n    }\n  }\n  repository {\n    owner {\n      __typename\n      login\n      id\n    }\n    name\n    id\n  }\n  statusCheckRollup {\n    shortText\n    state\n    id\n  }\n  signature {\n    __typename\n    state\n    signer {\n      login\n      avatarUrl\n      id\n    }\n    wasSignedByGitHub\n    ... on GpgSignature {\n      __typename\n      keyId\n    }\n    ... on SmimeSignature {\n      __typename\n      issuer {\n        commonName\n        emailAddress\n        organization\n        organizationUnit\n      }\n      subject {\n        commonName\n        emailAddress\n        organization\n        organizationUnit\n      }\n    }\n    ... on SshSignature {\n      __typename\n      keyFingerprint\n    }\n  }\n}\n\nfragment DiffFileHeaderListView_diffEntry on PullRequestDiffEntry {\n  pathDigest\n  path\n  pathOwnership {\n    ...CodeownersBadge_pathOwnership\n  }\n  oldTreeEntry {\n    mode\n    path\n  }\n  newTreeEntry {\n    mode\n    path\n  }\n  status\n  linesAdded\n  linesDeleted\n  ...BlobActionsMenu_diffEntry\n  ...FileConversationsButton_diffEntry\n  ...ViewedCheckbox_diffEntry\n}\n\nfragment DiffFileHeaderListView_pullRequest on PullRequest {\n  ...BlobActionsMenu_pullRequest\n}\n\nfragment DiffLines_diffEntry on PullRequestDiffEntry {\n  id\n  diffLines(injectedContextLines: $injectedContextLines) {\n    left\n    right\n    blobLineNumber\n    html\n    type\n    text\n    threads(first: $inlineThreadCount) {\n      totalCount\n      totalCommentsCount\n      edges {\n        node {\n          diffSide\n          id\n          isOutdated\n          line\n          startDiffSide\n          startLine\n          comments(first: 50) {\n            totalCount\n            edges {\n              node {\n                author {\n                  __typename\n                  avatarUrl(size: 48)\n                  login\n                  id\n                }\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment DiffViewSettingsButton_pullRequest on PullRequest {\n  ...HideWhitespace_pullRequest\n}\n\nfragment Diff_diffEntry on PullRequestDiffEntry {\n  diffEntryId: id\n  isBinary\n  isTooBig\n  linesChanged\n  pathDigest\n  viewerViewedState\n  path\n  status\n  truncatedReason\n  oldTreeEntry {\n    mode\n    lineCount\n  }\n  newTreeEntry {\n    mode\n    lineCount\n    isGenerated\n  }\n  diffLines(injectedContextLines: $injectedContextLines) {\n    blobLineNumber\n  }\n  ...DiffFileHeaderListView_diffEntry\n  ...DiffLines_diffEntry\n}\n\nfragment Diff_pullRequest on PullRequest {\n  ...DiffFileHeaderListView_pullRequest\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n  }\n}\n\nfragment DiffsWithComments_pullRequest on PullRequest {\n  id\n  ...Diffs_pullRequest\n  ...Diffs_pullRequestComparison\n  ...FilesChangedHeading_pullRequest\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    newCommit @include(if: $isSingleCommit) {\n      ...CommitDiffHeading_commit\n      id\n    }\n  }\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  number\n}\n\nfragment Diffs_pullRequest on PullRequest {\n  ...Diff_pullRequest\n}\n\nfragment Diffs_pullRequestComparison on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    diffEntries(first: $diffEntryCount, after: $diffEntryCursor) {\n      edges {\n        node {\n          pathDigest\n          path\n          isTooBig\n          viewerViewedState\n          diffLines(injectedContextLines: $injectedContextLines) {\n            __typename\n          }\n          ...Diff_diffEntry\n          id\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n  id\n}\n\nfragment FileConversationsButton_diffEntry on PullRequestDiffEntry {\n  path\n  outdatedThreads: threads(first: 50, subjectType: LINE, outdatedFilter: ONLY_OUTDATED) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n  threads(first: 50, subjectType: FILE) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment FilesChangedHeading_pullRequest on PullRequest {\n  id\n  ...DiffViewSettingsButton_pullRequest\n  ...ViewedFileProgress_pullRequest\n  ...OpenCommentsPanelButton_pullRequest\n  ...OpenAnnotationsPanelButton_pullRequest\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n    linesAdded\n    linesDeleted\n  }\n}\n\nfragment HideWhitespace_pullRequest on PullRequest {\n  id\n  viewerPreferences {\n    ignoreWhitespace\n  }\n}\n\nfragment OpenAnnotationsPanelButton_pullRequest on PullRequest {\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment OpenCommentsPanelButton_pullRequest on PullRequest {\n  allThreads: threads(first: 50, isPositioned: false) {\n    totalCommentsCount\n  }\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment PullRequestFilesViewerContent_pullRequest on PullRequest {\n  ...DiffsWithComments_pullRequest\n  databaseId\n  id\n  headRefOid\n  viewerPendingReview {\n    id\n  }\n  repository {\n    databaseId\n    id\n    nameWithOwner\n    slashCommandsEnabled\n  }\n  isInMergeQueue\n  state\n  viewerCanComment\n  viewerCanApplySuggestion\n}\n\nfragment ViewedCheckbox_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  viewerViewedState\n}\n\nfragment ViewedFileProgress_pullRequest on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    summary {\n      __typename\n    }\n  }\n  viewerViewedFiles\n}\n",
  "5358a11694b4ef59c298353499a644b5": "query useFetchAnchoredCommentData_AnchoredCommentQuery(\n  $owner: String!\n  $repo: String!\n  $number: Int!\n  $commentId: Int!\n) {\n  repository(owner: $owner, name: $repo) {\n    pullRequest(number: $number) {\n      reviewComment(databaseId: $commentId) {\n        pullRequestThread {\n          id\n          pathDigest\n        }\n        id\n      }\n      id\n    }\n    id\n  }\n}\n",
  "53c57ba8bbd755add84fe706c985fed4": "query ReviewMenuTestQuery(\n  $singleCommitOid: String\n  $startOid: String\n  $endOid: String\n) {\n  viewer {\n    ...ReviewMenu_user\n    id\n  }\n  pullRequest: node(id: \"test-id\") {\n    __typename\n    ... on PullRequest {\n      ...ReviewMenu_pullRequest\n    }\n    id\n  }\n}\n\nfragment ReviewMenu_pullRequest on PullRequest {\n  id\n  author {\n    __typename\n    login\n    id\n  }\n  headRefOid\n  repository {\n    id\n    viewerPermission\n  }\n  state\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    newCommit {\n      oid\n      id\n    }\n    summary {\n      path\n    }\n  }\n  viewerCanLeaveNonCommentReviews\n  viewerHasViolatedPushPolicy\n  viewerPendingReview {\n    id\n    comments {\n      totalCount\n    }\n  }\n}\n\nfragment ReviewMenu_user on User {\n  login\n}\n",
  "542fc6ae3d5ed2df74c829eeaf884cb6": "query DiffsPaginationQuery(\n  $diffEntryCount: Int\n  $diffEntryCursor: String\n  $endOid: String\n  $injectedContextLines: [DiffLineRange!]\n  $inlineThreadCount: Int\n  $singleCommitOid: String\n  $startOid: String\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    ...Diffs_pullRequestComparison\n    id\n  }\n}\n\nfragment BlobActionsMenu_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  oid\n  status\n  isSubmodule\n  isBinary\n  isLfsPointer\n}\n\nfragment CodeownersBadge_pathOwnership on PathOwnership {\n  pathOwners {\n    name\n  }\n  ruleLineNumber\n  ruleUrl\n  isOwnedByViewer\n}\n\nfragment DiffFileHeaderListView_diffEntry on PullRequestDiffEntry {\n  pathDigest\n  path\n  pathOwnership {\n    ...CodeownersBadge_pathOwnership\n  }\n  oldTreeEntry {\n    mode\n    path\n  }\n  newTreeEntry {\n    mode\n    path\n  }\n  status\n  linesAdded\n  linesDeleted\n  ...BlobActionsMenu_diffEntry\n  ...FileConversationsButton_diffEntry\n  ...ViewedCheckbox_diffEntry\n}\n\nfragment DiffLines_diffEntry on PullRequestDiffEntry {\n  id\n  diffLines(injectedContextLines: $injectedContextLines) {\n    left\n    right\n    blobLineNumber\n    html\n    type\n    text\n    threads(first: $inlineThreadCount) {\n      totalCount\n      totalCommentsCount\n      edges {\n        node {\n          diffSide\n          id\n          isOutdated\n          line\n          startDiffSide\n          startLine\n          comments(first: 50) {\n            totalCount\n            edges {\n              node {\n                author {\n                  __typename\n                  avatarUrl(size: 48)\n                  login\n                  id\n                }\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment Diff_diffEntry on PullRequestDiffEntry {\n  diffEntryId: id\n  isBinary\n  isTooBig\n  linesChanged\n  pathDigest\n  viewerViewedState\n  path\n  status\n  truncatedReason\n  oldTreeEntry {\n    mode\n    lineCount\n  }\n  newTreeEntry {\n    mode\n    lineCount\n    isGenerated\n  }\n  diffLines(injectedContextLines: $injectedContextLines) {\n    blobLineNumber\n  }\n  ...DiffFileHeaderListView_diffEntry\n  ...DiffLines_diffEntry\n}\n\nfragment Diffs_pullRequestComparison on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    diffEntries(first: $diffEntryCount, after: $diffEntryCursor) {\n      edges {\n        node {\n          pathDigest\n          path\n          isTooBig\n          viewerViewedState\n          diffLines(injectedContextLines: $injectedContextLines) {\n            __typename\n          }\n          ...Diff_diffEntry\n          id\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n  id\n}\n\nfragment FileConversationsButton_diffEntry on PullRequestDiffEntry {\n  path\n  outdatedThreads: threads(first: 50, subjectType: LINE, outdatedFilter: ONLY_OUTDATED) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n  threads(first: 50, subjectType: FILE) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment ViewedCheckbox_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  viewerViewedState\n}\n",
  "5b7cf0ea1f1b910e8640887bd7e6a0bd": "mutation deleteSavedViewMutation(\n  $input: DeleteSavedViewInput!\n) {\n  deleteSavedView(input: $input) {\n    savedView {\n      id\n    }\n  }\n}\n",
  "6316b6a422593fd00e2e5fa3c994fe4f": "query CommentsSidesheetTestQuery(\n  $pullRequestId: ID!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...CommentsSidesheet_pullRequest\n    }\n    id\n  }\n  viewer {\n    ...CommentsSidesheet_viewer\n    id\n  }\n}\n\nfragment CommentsFilter_pullRequestThreadEdge on PullRequestThreadEdge {\n  node {\n    id\n    isResolved\n    path\n    firstComment: comments(first: 1) {\n      edges {\n        node {\n          body\n          author {\n            __typename\n            login\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment CommentsSidesheet_pullRequest on PullRequest {\n  allThreads: threads(first: 50, isPositioned: false, orderBy: DIFF_POSITION) {\n    edges {\n      ...CommentsFilter_pullRequestThreadEdge\n      node {\n        id\n        ...ThreadPreview_pullRequestThread\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment CommentsSidesheet_viewer on User {\n  ...ThreadPreview_viewer\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment ThreadHeader_pullRequestThread on PullRequestThread {\n  id\n  isOutdated\n  isResolved\n  line\n  path\n}\n\nfragment ThreadPreview_pullRequestThread on PullRequestThread {\n  ...ThreadHeader_pullRequestThread\n  id\n  isOutdated\n  isResolved\n  path\n  subject {\n    __typename\n    ... on PullRequestDiffThread {\n      originalStartLine\n      originalEndLine\n      startDiffSide\n      endDiffSide\n      diffLines(maxContextLines: 3) {\n        left\n        right\n        html\n        text\n        type\n      }\n    }\n  }\n  threadPreviewComments: comments(first: 50) {\n    edges {\n      node {\n        author {\n          __typename\n          login\n          avatarUrl\n          id\n        }\n        id\n      }\n    }\n  }\n  firstComment: comments(first: 1) {\n    edges {\n      node {\n        id\n        ...useFetchThread_PullRequestReviewComment\n        ...MarkdownEditHistoryViewer_comment\n        ...ReactionViewerGroups\n        repository {\n          isPrivate\n          id\n        }\n        reference: pullRequest {\n          number\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment ThreadPreview_viewer on User {\n  pullRequestUserPreferences {\n    tabSize\n  }\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "63efb7aa721ebfd3a73e957ecc8f6cb7": "query PullRequestHeaderTestQuery(\n  $number: Int!\n  $owner: String!\n  $repo: String!\n  $singleCommitOid: String\n  $startOid: String\n  $endOid: String\n) {\n  viewer {\n    ...PullRequestHeaderWrapper_user\n    id\n  }\n  repository(owner: $owner, name: $repo) {\n    ...PullRequestHeaderWrapper_repository\n    id\n  }\n}\n\nfragment HeaderBranchInfo_pullRequest on PullRequest {\n  mergedAt\n  baseRefName\n  baseRef {\n    repository {\n      defaultBranch\n      name\n      owner {\n        __typename\n        login\n        id\n      }\n      id\n    }\n    id\n  }\n  headRefName\n  state\n  commits {\n    totalCount\n  }\n  baseRepository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    defaultBranchRef {\n      name\n      id\n    }\n    id\n  }\n  headRepository {\n    name\n    isFork\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  author {\n    __typename\n    login\n    id\n  }\n  viewerCanChangeBaseBranch\n}\n\nfragment HeaderMetadata_pullRequest on PullRequest {\n  ...HeaderBranchInfo_pullRequest\n  titleHTML\n  title\n  isDraft\n  number\n  state\n  isInMergeQueue\n  repository {\n    nameWithOwner\n    id\n  }\n}\n\nfragment HeaderRightSideContent_pullRequest on PullRequest {\n  id\n  state\n  ...ReviewMenu_pullRequest\n}\n\nfragment HeaderRightSideContent_user on User {\n  ...ReviewMenu_user\n}\n\nfragment PullRequestHeaderWrapper_repository on Repository {\n  databaseId\n  nameWithOwner\n  id\n  isWritable\n  slashCommandsEnabled\n  pullRequest(number: $number) {\n    headRefOid\n    fullDatabaseId\n    id\n    baseRefName\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n      summary {\n        __typename\n      }\n    }\n    state\n    isInMergeQueue\n    title\n    titleHTML\n    viewerCanUpdate\n    ...HeaderMetadata_pullRequest\n    ...HeaderRightSideContent_pullRequest\n  }\n}\n\nfragment PullRequestHeaderWrapper_user on User {\n  ...HeaderRightSideContent_user\n}\n\nfragment ReviewMenu_pullRequest on PullRequest {\n  id\n  author {\n    __typename\n    login\n    id\n  }\n  headRefOid\n  repository {\n    id\n    viewerPermission\n  }\n  state\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    newCommit {\n      oid\n      id\n    }\n    summary {\n      path\n    }\n  }\n  viewerCanLeaveNonCommentReviews\n  viewerHasViolatedPushPolicy\n  viewerPendingReview {\n    id\n    comments {\n      totalCount\n    }\n  }\n}\n\nfragment ReviewMenu_user on User {\n  login\n}\n",
  "6526e82e8fdd55ac52126c8fdef9c398": "query PullRequestFilesViewerContentQuery(\n  $diffEntryCount: Int = 5\n  $diffEntryCursor: String\n  $endOid: String\n  $injectedContextLines: [DiffLineRange!]\n  $inlineThreadCount: Int = 20\n  $isSingleCommit: Boolean = false\n  $number: Int!\n  $owner: String!\n  $repo: String!\n  $singleCommitOid: String\n  $startOid: String\n) {\n  viewer {\n    ...PullRequestFilesViewerContent_viewer\n    isCopilotDotcomChatEnabled\n    id\n  }\n  repository(owner: $owner, name: $repo) {\n    pullRequest(number: $number) {\n      ...PullRequestFilesViewerContent_pullRequest\n      ...useEmitPageViewEvent_pullRequest_2MGL5S\n      id\n    }\n    id\n  }\n}\n\nfragment BlobActionsMenu_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  oid\n  status\n  isSubmodule\n  isBinary\n  isLfsPointer\n}\n\nfragment BlobActionsMenu_pullRequest on PullRequest {\n  id\n  number\n  headRefName\n  headRepository {\n    nameWithOwner\n    id\n  }\n  baseRepository {\n    nameWithOwner\n    id\n  }\n  viewerCanEditFiles\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n  }\n}\n\nfragment CodeownersBadge_pathOwnership on PathOwnership {\n  pathOwners {\n    name\n  }\n  ruleLineNumber\n  ruleUrl\n  isOwnedByViewer\n}\n\nfragment CodeownersBadge_viewer on User {\n  login\n}\n\nfragment CommitDiffHeading_commit on Commit {\n  abbreviatedOid\n  authoredByCommitter\n  committedDate\n  committedViaWeb\n  hasSignature\n  messageHeadlineHTML\n  messageBodyHTML\n  oid\n  verificationStatus\n  authors(first: 3) {\n    edges {\n      node {\n        user {\n          avatarUrl\n          login\n          name\n          resourcePath\n          id\n        }\n      }\n    }\n  }\n  committer {\n    user {\n      avatarUrl\n      login\n      name\n      resourcePath\n      id\n    }\n  }\n  repository {\n    owner {\n      __typename\n      login\n      id\n    }\n    name\n    id\n  }\n  statusCheckRollup {\n    shortText\n    state\n    id\n  }\n  signature {\n    __typename\n    state\n    signer {\n      login\n      avatarUrl\n      id\n    }\n    wasSignedByGitHub\n    ... on GpgSignature {\n      __typename\n      keyId\n    }\n    ... on SmimeSignature {\n      __typename\n      issuer {\n        commonName\n        emailAddress\n        organization\n        organizationUnit\n      }\n      subject {\n        commonName\n        emailAddress\n        organization\n        organizationUnit\n      }\n    }\n    ... on SshSignature {\n      __typename\n      keyFingerprint\n    }\n  }\n}\n\nfragment CommitDiffHeading_viewer on User {\n  login\n}\n\nfragment DiffFileHeaderListView_diffEntry on PullRequestDiffEntry {\n  pathDigest\n  path\n  pathOwnership {\n    ...CodeownersBadge_pathOwnership\n  }\n  oldTreeEntry {\n    mode\n    path\n  }\n  newTreeEntry {\n    mode\n    path\n  }\n  status\n  linesAdded\n  linesDeleted\n  ...BlobActionsMenu_diffEntry\n  ...FileConversationsButton_diffEntry\n  ...ViewedCheckbox_diffEntry\n}\n\nfragment DiffFileHeaderListView_pullRequest on PullRequest {\n  ...BlobActionsMenu_pullRequest\n}\n\nfragment DiffFileHeaderListView_viewer on User {\n  ...CodeownersBadge_viewer\n  ...FileConversationsButton_viewer\n}\n\nfragment DiffLines_diffEntry on PullRequestDiffEntry {\n  id\n  diffLines(injectedContextLines: $injectedContextLines) {\n    left\n    right\n    blobLineNumber\n    html\n    type\n    text\n    threads(first: $inlineThreadCount) {\n      totalCount\n      totalCommentsCount\n      edges {\n        node {\n          diffSide\n          id\n          isOutdated\n          line\n          startDiffSide\n          startLine\n          comments(first: 50) {\n            totalCount\n            edges {\n              node {\n                author {\n                  __typename\n                  avatarUrl(size: 48)\n                  login\n                  id\n                }\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment DiffLines_viewer on User {\n  avatarUrl(size: 48)\n  isSiteAdmin\n  login\n  pullRequestUserPreferences {\n    diffView\n    tabSize\n  }\n}\n\nfragment DiffViewSettingsButton_pullRequest on PullRequest {\n  ...HideWhitespace_pullRequest\n}\n\nfragment DiffViewSettingsButton_user on User {\n  ...DiffViewToggle_user\n}\n\nfragment DiffViewToggle_user on User {\n  id\n  pullRequestUserPreferences {\n    diffView\n  }\n}\n\nfragment Diff_diffEntry on PullRequestDiffEntry {\n  diffEntryId: id\n  isBinary\n  isTooBig\n  linesChanged\n  pathDigest\n  viewerViewedState\n  path\n  status\n  truncatedReason\n  oldTreeEntry {\n    mode\n    lineCount\n  }\n  newTreeEntry {\n    mode\n    lineCount\n    isGenerated\n  }\n  diffLines(injectedContextLines: $injectedContextLines) {\n    blobLineNumber\n  }\n  ...DiffFileHeaderListView_diffEntry\n  ...DiffLines_diffEntry\n}\n\nfragment Diff_pullRequest on PullRequest {\n  ...DiffFileHeaderListView_pullRequest\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n  }\n}\n\nfragment Diff_viewer on User {\n  ...DiffFileHeaderListView_viewer\n  ...DiffLines_viewer\n}\n\nfragment DiffsWithComments_pullRequest on PullRequest {\n  id\n  ...Diffs_pullRequest\n  ...Diffs_pullRequestComparison\n  ...FilesChangedHeading_pullRequest\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    newCommit @include(if: $isSingleCommit) {\n      ...CommitDiffHeading_commit\n      id\n    }\n  }\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  number\n}\n\nfragment DiffsWithComments_viewer on User {\n  ...CommitDiffHeading_viewer\n  ...Diffs_viewer\n  ...FilesChangedHeading_viewer\n}\n\nfragment Diffs_pullRequest on PullRequest {\n  ...Diff_pullRequest\n}\n\nfragment Diffs_pullRequestComparison on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    diffEntries(first: $diffEntryCount, after: $diffEntryCursor) {\n      edges {\n        node {\n          pathDigest\n          path\n          isTooBig\n          viewerViewedState\n          diffLines(injectedContextLines: $injectedContextLines) {\n            __typename\n          }\n          ...Diff_diffEntry\n          id\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n  id\n}\n\nfragment Diffs_viewer on User {\n  ...Diff_viewer\n}\n\nfragment FileConversationsButton_diffEntry on PullRequestDiffEntry {\n  path\n  outdatedThreads: threads(first: 50, subjectType: LINE, outdatedFilter: ONLY_OUTDATED) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n  threads(first: 50, subjectType: FILE) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment FileConversationsButton_viewer on User {\n  login\n  avatarUrl(size: 48)\n}\n\nfragment FilesChangedHeading_pullRequest on PullRequest {\n  id\n  ...DiffViewSettingsButton_pullRequest\n  ...ViewedFileProgress_pullRequest\n  ...OpenCommentsPanelButton_pullRequest\n  ...OpenAnnotationsPanelButton_pullRequest\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n    linesAdded\n    linesDeleted\n  }\n}\n\nfragment FilesChangedHeading_viewer on User {\n  ...DiffViewSettingsButton_user\n}\n\nfragment HideWhitespace_pullRequest on PullRequest {\n  id\n  viewerPreferences {\n    ignoreWhitespace\n  }\n}\n\nfragment OpenAnnotationsPanelButton_pullRequest on PullRequest {\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment OpenCommentsPanelButton_pullRequest on PullRequest {\n  allThreads: threads(first: 50, isPositioned: false) {\n    totalCommentsCount\n  }\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment PullRequestFilesViewerContent_pullRequest on PullRequest {\n  ...DiffsWithComments_pullRequest\n  databaseId\n  id\n  headRefOid\n  viewerPendingReview {\n    id\n  }\n  repository {\n    databaseId\n    id\n    nameWithOwner\n    slashCommandsEnabled\n  }\n  isInMergeQueue\n  state\n  viewerCanComment\n  viewerCanApplySuggestion\n}\n\nfragment PullRequestFilesViewerContent_viewer on User {\n  ...DiffsWithComments_viewer\n}\n\nfragment ViewedCheckbox_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  viewerViewedState\n}\n\nfragment ViewedFileProgress_pullRequest on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    summary {\n      __typename\n    }\n  }\n  viewerViewedFiles\n}\n\nfragment useEmitPageViewEvent_pullRequest_2MGL5S on PullRequest {\n  comparison(endOid: $endOid, startOid: $startOid, singleCommitOid: $singleCommitOid) {\n    filesChanged\n    linesChanged\n  }\n}\n",
  "654a6f6bbf5fc3621a8206e706ac59d3": "query IssueCommentViewerCommentTestQuery(\n  $commentId: ID!\n) {\n  comment: node(id: $commentId) {\n    __typename\n    ... on IssueComment {\n      ...IssueCommentViewerCommentRow\n      ...IssueCommentViewerReactable\n    }\n    id\n  }\n}\n\nfragment IssueCommentHeader on IssueComment {\n  id\n  databaseId\n  url\n  createdAt\n  body\n  authorAssociation\n  viewerCanUpdate\n  viewerCanDelete\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n  isHidden: isMinimized\n  minimizedReason\n  createdViaEmail\n  viewerDidAuthor\n  authorToRepoOwnerSponsorship {\n    createdAt\n    isActive\n    id\n  }\n  author {\n    __typename\n    id\n    login\n  }\n  repository {\n    id\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n    isPrivate\n  }\n  issue {\n    number\n    id\n  }\n  ...MarkdownEditHistoryViewer_comment\n}\n\nfragment IssueCommentViewerCommentRow on IssueComment {\n  id\n  databaseId\n  ...IssueCommentViewerMarkdownViewer\n  ...IssueCommentHeader\n  author {\n    avatarUrl\n    login\n    __typename\n    id\n  }\n  issue {\n    id\n    locked\n  }\n  body\n  isHidden: isMinimized\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerMarkdownViewer on IssueComment {\n  id\n  body\n  bodyHTML(unfurlReferences: true)\n  bodyVersion\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n",
  "66b96898441528c3548b27fd804a291d": "mutation updatePullRequestReviewCommentMutation(\n  $input: UpdatePullRequestReviewCommentInput!\n) {\n  updatePullRequestReviewComment(input: $input) {\n    pullRequestReviewComment {\n      ...useFetchThread_PullRequestReviewComment\n      id\n    }\n  }\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "69eb206c1e07b3c8ca40ae90c1eeca9f": "mutation markFileAsViewedMutation(\n  $id: ID!\n  $path: String!\n) {\n  markFileAsViewed(input: {pullRequestId: $id, path: $path}) {\n    pullRequest {\n      viewerViewedFiles\n      comparison {\n        diffEntry(path: $path) {\n          viewerViewedState\n          id\n        }\n      }\n      id\n    }\n  }\n}\n",
  "6b17dc532a26d2eb3ab40f34bbb796b9": "query PullRequestMarkersCommentSidesheetQuery(\n  $owner: String!\n  $repo: String!\n  $number: Int!\n  $startOid: String\n  $endOid: String\n  $singleCommitOid: String\n) {\n  repository(owner: $owner, name: $repo) {\n    pullRequest(number: $number) {\n      ...CommentsSidesheet_pullRequest\n      ...PullRequestMarkers_pullRequest\n      id\n    }\n    id\n  }\n  viewer {\n    ...CommentsSidesheet_viewer\n    id\n  }\n}\n\nfragment CommentsFilter_pullRequestThreadEdge on PullRequestThreadEdge {\n  node {\n    id\n    isResolved\n    path\n    firstComment: comments(first: 1) {\n      edges {\n        node {\n          body\n          author {\n            __typename\n            login\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment CommentsSidesheet_pullRequest on PullRequest {\n  allThreads: threads(first: 50, isPositioned: false, orderBy: DIFF_POSITION) {\n    edges {\n      ...CommentsFilter_pullRequestThreadEdge\n      node {\n        id\n        ...ThreadPreview_pullRequestThread\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment CommentsSidesheet_viewer on User {\n  ...ThreadPreview_viewer\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment PullRequestMarkersAnnotations_pullRequest on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    annotations(last: 100) {\n      edges {\n        node {\n          annotationLevel\n          checkRun {\n            checkSuite {\n              app {\n                logoUrl\n                name\n                id\n              }\n              name\n              id\n            }\n            detailsUrl\n            name\n            id\n          }\n          databaseId\n          location {\n            end {\n              line\n            }\n            start {\n              line\n            }\n          }\n          message\n          path\n          pathDigest\n          rawDetails\n          title\n        }\n      }\n    }\n  }\n}\n\nfragment PullRequestMarkers_pullRequest on PullRequest {\n  allThreads: threads(first: 50, isPositioned: false, orderBy: DIFF_POSITION) {\n    edges {\n      node {\n        ...PullRequestMarkers_pullRequestThread\n        id\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n  ...PullRequestMarkersAnnotations_pullRequest\n}\n\nfragment PullRequestMarkers_pullRequestThread on PullRequestThread {\n  id\n  isResolved\n  pathDigest\n  path\n  line\n  firstComment: comments(first: 1) {\n    edges {\n      node {\n        databaseId\n        id\n      }\n    }\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment ThreadHeader_pullRequestThread on PullRequestThread {\n  id\n  isOutdated\n  isResolved\n  line\n  path\n}\n\nfragment ThreadPreview_pullRequestThread on PullRequestThread {\n  ...ThreadHeader_pullRequestThread\n  id\n  isOutdated\n  isResolved\n  path\n  subject {\n    __typename\n    ... on PullRequestDiffThread {\n      originalStartLine\n      originalEndLine\n      startDiffSide\n      endDiffSide\n      diffLines(maxContextLines: 3) {\n        left\n        right\n        html\n        text\n        type\n      }\n    }\n  }\n  threadPreviewComments: comments(first: 50) {\n    edges {\n      node {\n        author {\n          __typename\n          login\n          avatarUrl\n          id\n        }\n        id\n      }\n    }\n  }\n  firstComment: comments(first: 1) {\n    edges {\n      node {\n        id\n        ...useFetchThread_PullRequestReviewComment\n        ...MarkdownEditHistoryViewer_comment\n        ...ReactionViewerGroups\n        repository {\n          isPrivate\n          id\n        }\n        reference: pullRequest {\n          number\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment ThreadPreview_viewer on User {\n  pullRequestUserPreferences {\n    tabSize\n  }\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "6d15a55adbfc3ac86100b1f4bee25644": "query ReviewersPickerSearchQuery(\n  $pullRequestId: ID!\n  $query: String\n  $reviewersCount: Int = 100\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...ReviewersPickerCandidateReviewers_pullRequest_PlIk9\n    }\n    id\n  }\n}\n\nfragment ReviewersPickerCandidateReviewers_pullRequest_PlIk9 on PullRequest {\n  candidateReviewers(query: $query, first: $reviewersCount) {\n    edges {\n      node {\n        reviewer {\n          __typename\n          ... on Team {\n            __typename\n            id\n            combinedSlug\n            teamName: name\n            teamAvatarUrl: avatarUrl(size: 64)\n          }\n          ... on User {\n            __typename\n            id\n            login\n            name\n            avatarUrl(size: 64)\n          }\n          ... on Node {\n            __isNode: __typename\n            id\n          }\n        }\n      }\n    }\n  }\n  id\n}\n",
  "7277378540f4d2f3046c88b62cc85fed": "query FilesChangedHeadingTestQuery(\n  $pullRequestId: ID!\n  $startOid: String\n  $endOid: String\n  $singleCommitOid: String\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...FilesChangedHeading_pullRequest\n    }\n    id\n  }\n  viewer {\n    ...FilesChangedHeading_viewer\n    id\n  }\n}\n\nfragment DiffViewSettingsButton_pullRequest on PullRequest {\n  ...HideWhitespace_pullRequest\n}\n\nfragment DiffViewSettingsButton_user on User {\n  ...DiffViewToggle_user\n}\n\nfragment DiffViewToggle_user on User {\n  id\n  pullRequestUserPreferences {\n    diffView\n  }\n}\n\nfragment FilesChangedHeading_pullRequest on PullRequest {\n  id\n  ...DiffViewSettingsButton_pullRequest\n  ...ViewedFileProgress_pullRequest\n  ...OpenCommentsPanelButton_pullRequest\n  ...OpenAnnotationsPanelButton_pullRequest\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n    linesAdded\n    linesDeleted\n  }\n}\n\nfragment FilesChangedHeading_viewer on User {\n  ...DiffViewSettingsButton_user\n}\n\nfragment HideWhitespace_pullRequest on PullRequest {\n  id\n  viewerPreferences {\n    ignoreWhitespace\n  }\n}\n\nfragment OpenAnnotationsPanelButton_pullRequest on PullRequest {\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment OpenCommentsPanelButton_pullRequest on PullRequest {\n  allThreads: threads(first: 50, isPositioned: false) {\n    totalCommentsCount\n  }\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment ViewedFileProgress_pullRequest on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    summary {\n      __typename\n    }\n  }\n  viewerViewedFiles\n}\n",
  "732bc793056ea265e89686e93af244f1": "query IssueCommentHeaderNodeTestQuery(\n  $commentId: ID!\n) {\n  comment: node(id: $commentId) {\n    __typename\n    ... on Comment {\n      __isComment: __typename\n      ...IssueCommentHeader\n    }\n    id\n  }\n}\n\nfragment IssueCommentHeader on IssueComment {\n  id\n  databaseId\n  url\n  createdAt\n  body\n  authorAssociation\n  viewerCanUpdate\n  viewerCanDelete\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n  isHidden: isMinimized\n  minimizedReason\n  createdViaEmail\n  viewerDidAuthor\n  authorToRepoOwnerSponsorship {\n    createdAt\n    isActive\n    id\n  }\n  author {\n    __typename\n    id\n    login\n  }\n  repository {\n    id\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n    isPrivate\n  }\n  issue {\n    number\n    id\n  }\n  ...MarkdownEditHistoryViewer_comment\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n",
  "758cd7edf1b7eb2bbc5f3dffe75a688a": "mutation closePullRequestMutation(\n  $pullRequestId: ID!\n) {\n  closePullRequest(input: {pullRequestId: $pullRequestId}) {\n    pullRequest {\n      id\n      state\n      viewerCanReopen\n      viewerCanChangeBaseBranch\n      viewerCanDeleteHeadRef\n      viewerCanRestoreHeadRef\n    }\n  }\n}\n",
  "76e26d8a7cba9c12da2c5d5eeb373519": "query ReviewDismissedEventManualWithReasonStoryQuery(\n  $id: ID!\n) {\n  reviewDismissedEvent: node(id: $id) {\n    __typename\n    ...ReviewDismissedEvent_reviewDismissedEvent\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment ReviewDismissedEvent_reviewDismissedEvent on ReviewDismissedEvent {\n  actor {\n    __typename\n    login\n    ...TimelineRowEventActor\n    id\n  }\n  pullRequestCommit {\n    commit {\n      abbreviatedOid\n      id\n    }\n    resourcePath\n    id\n  }\n  review {\n    fullDatabaseId\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  dismissalMessageHTML\n  createdAt\n  databaseId\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "787913bd8524fcca4c9dc171cc5fb17b": "query MergedEventMergeQueueApiStoryQuery(\n  $id: ID!\n) {\n  mergedEvent: node(id: $id) {\n    __typename\n    ...MergedEvent_mergedEvent\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment MergedEvent_mergedEvent on MergedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  mergeCommit: commit {\n    abbreviatedOid\n    oid\n    id\n  }\n  mergeRefName\n  viaMergeQueue\n  viaMergeQueueAPI\n  createdAt\n  databaseId\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "789066a7aa87c08df26d09da2a1a3dd9": "query PullRequestActivityBackwardPaginationQuery(\n  $cursor: String = null\n  $last: Int\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    ...ActivityView_pullRequest_backwardPagination_2EV0Bx\n    id\n  }\n}\n\nfragment ActivityView_pullRequest_backwardPagination_2EV0Bx on PullRequest {\n  backwardTimeline: timelineItems(last: $last, before: $cursor, visibleEventsOnly: true, itemTypes: [ISSUE_COMMENT, PULL_REQUEST_REVIEW, PULL_REQUEST_COMMIT, BASE_REF_FORCE_PUSHED_EVENT, HEAD_REF_FORCE_PUSHED_EVENT, CLOSED_EVENT, REOPENED_EVENT, MERGED_EVENT, REVIEW_DISMISSED_EVENT, REVIEW_REQUESTED_EVENT]) {\n    edges {\n      node {\n        __typename\n        ...IssueComment_issueComment\n        ...ReactionViewerGroups\n        ...PullRequestReview_pullRequestReview\n        ... on IssueComment {\n          databaseId\n        }\n        ... on PullRequestReview {\n          databaseId\n        }\n        ... on PullRequestCommit {\n          ...PullRequestCommit_pullRequestCommit\n        }\n        ... on BaseRefForcePushedEvent {\n          databaseId\n          ...BaseRefForcePushedEvent_baseRefForcePushedEvent\n        }\n        ... on HeadRefForcePushedEvent {\n          databaseId\n          ...HeadRefForcePushedEvent_headRefForcePushedEvent\n        }\n        ... on ClosedEvent {\n          databaseId\n          ...ClosedEvent\n        }\n        ... on ReopenedEvent {\n          databaseId\n          ...ReopenedEvent\n        }\n        ... on MergedEvent {\n          databaseId\n          ...MergedEvent_mergedEvent\n        }\n        ... on ReviewDismissedEvent {\n          databaseId\n          ...ReviewDismissedEvent_reviewDismissedEvent\n        }\n        ... on ReviewRequestedEvent {\n          databaseId\n          ...ReviewRequestedEvent_reviewRequestedEvent\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasPreviousPage\n      startCursor\n    }\n  }\n  id\n}\n\nfragment BaseRefForcePushedEvent_baseRefForcePushedEvent on BaseRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment ClosedEvent on ClosedEvent {\n  databaseId\n  createdAt\n  stateReason\n  closingProjectItemStatus\n  closer {\n    __typename\n    ... on ProjectV2 {\n      url\n      title\n    }\n    ... on PullRequest {\n      url\n      number\n      repository {\n        name\n        owner {\n          __typename\n          login\n          id\n        }\n        id\n      }\n    }\n    ... on Commit {\n      url\n      abbreviatedOid\n      repository {\n        name\n        owner {\n          __typename\n          login\n          id\n        }\n        id\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment HeadRefForcePushedEvent_headRefForcePushedEvent on HeadRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment IssueCommentEditorBodyFragment on IssueComment {\n  id\n  body\n  bodyVersion\n  author {\n    __typename\n    login\n    avatarUrl\n    id\n  }\n  issue {\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  ...IssueCommentHeader\n}\n\nfragment IssueCommentEditor_repository on IssueComment {\n  repository {\n    slashCommandsEnabled\n    nameWithOwner\n    databaseId\n    id\n  }\n}\n\nfragment IssueCommentHeader on IssueComment {\n  id\n  databaseId\n  url\n  createdAt\n  body\n  authorAssociation\n  viewerCanUpdate\n  viewerCanDelete\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n  isHidden: isMinimized\n  minimizedReason\n  createdViaEmail\n  viewerDidAuthor\n  authorToRepoOwnerSponsorship {\n    createdAt\n    isActive\n    id\n  }\n  author {\n    __typename\n    id\n    login\n  }\n  repository {\n    id\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n    isPrivate\n  }\n  issue {\n    number\n    id\n  }\n  ...MarkdownEditHistoryViewer_comment\n}\n\nfragment IssueCommentViewerCommentRow on IssueComment {\n  id\n  databaseId\n  ...IssueCommentViewerMarkdownViewer\n  ...IssueCommentHeader\n  author {\n    avatarUrl\n    login\n    __typename\n    id\n  }\n  issue {\n    id\n    locked\n  }\n  body\n  isHidden: isMinimized\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerMarkdownViewer on IssueComment {\n  id\n  body\n  bodyHTML(unfurlReferences: true)\n  bodyVersion\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment IssueComment_issueComment on IssueComment {\n  ...IssueCommentViewerCommentRow\n  ...IssueCommentViewerReactable\n  ...IssueCommentEditor_repository\n  ...IssueCommentEditorBodyFragment\n  issue {\n    id\n  }\n  id\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment MergedEvent_mergedEvent on MergedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  mergeCommit: commit {\n    abbreviatedOid\n    oid\n    id\n  }\n  mergeRefName\n  viaMergeQueue\n  viaMergeQueueAPI\n  createdAt\n  databaseId\n}\n\nfragment PullRequestCommit_pullRequestCommit on PullRequestCommit {\n  commit {\n    abbreviatedOid\n    oid\n    message\n    authoredDate\n    verificationStatus\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment PullRequestReviewHeaderAndComment_pullRequestReview on PullRequestReview {\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n  id\n  databaseId\n  author {\n    __typename\n    id\n    avatarUrl(size: 64)\n    login\n    ...TimelineRowEventActor\n  }\n  authorAssociation\n  bodyHTML\n  bodyText\n  createdAt\n  pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  onBehalfOf(first: 10) {\n    edges {\n      node {\n        organization {\n          name\n          id\n        }\n        name\n        url\n        id\n      }\n    }\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  dismissedReviewState\n  state\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n}\n\nfragment PullRequestReview_pullRequestReview on PullRequestReview {\n  ...PullRequestReviewHeaderAndComment_pullRequestReview\n  databaseId\n  bodyText\n  id\n  pullRequestThreadsAndReplies(first: 100) {\n    edges {\n      node {\n        __typename\n        ... on PullRequestThread {\n          id\n          ...Thread_pullRequestThread\n          comments(first: 50) {\n            totalCount\n          }\n        }\n        ... on PullRequestReviewComment {\n          id\n          ...ReviewComment_pullRequestReviewComment\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment ReopenedEvent on ReopenedEvent {\n  databaseId\n  createdAt\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n}\n\nfragment ReviewComment_pullRequestReviewComment on PullRequestReviewComment {\n  id\n  currentDiffResourcePath\n  path\n  pullRequestThread {\n    id\n    isOutdated\n    isResolved\n  }\n  ...ReactionViewerGroups\n  ...useFetchThread_PullRequestReviewComment\n}\n\nfragment ReviewDismissedEvent_reviewDismissedEvent on ReviewDismissedEvent {\n  actor {\n    __typename\n    login\n    ...TimelineRowEventActor\n    id\n  }\n  pullRequestCommit {\n    commit {\n      abbreviatedOid\n      id\n    }\n    resourcePath\n    id\n  }\n  review {\n    fullDatabaseId\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  dismissalMessageHTML\n  createdAt\n  databaseId\n}\n\nfragment ReviewRequestedEvent_reviewRequestedEvent on ReviewRequestedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  requestedReviewAssignedFromTeamName\n  reviewRequest {\n    codeOwnersResourcePath\n    requestedReviewer {\n      __typename\n      ... on User {\n        login\n        resourcePath\n      }\n      ... on Team {\n        combinedSlug\n        resourcePath\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    id\n  }\n  createdAt\n  databaseId\n}\n\nfragment ThreadHeader_pullRequestThread on PullRequestThread {\n  id\n  isOutdated\n  isResolved\n  line\n  path\n}\n\nfragment Thread_pullRequestThread on PullRequestThread {\n  ...ThreadHeader_pullRequestThread\n  id\n  currentDiffResourcePath\n  isOutdated\n  isResolved\n  path\n  subject {\n    __typename\n    ... on PullRequestDiffThread {\n      originalStartLine\n      originalEndLine\n      startLine\n      endLine\n      startDiffSide\n      endDiffSide\n      diffLines(maxContextLines: 3) {\n        left\n        right\n        html\n        text\n        type\n      }\n    }\n  }\n  subjectType\n  viewerCanReply\n  comments(first: 50) {\n    edges {\n      node {\n        ...useFetchThread_PullRequestReviewComment\n        ...ReactionViewerGroups\n        id\n      }\n    }\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "7b9b837f8f120b20a48c13d983129e4c": "query DeferredCommitsDataLoaderQuery(\n  $owner: String!\n  $repo: String!\n  $number: Int!\n) {\n  viewer {\n    login\n    id\n  }\n  repository(owner: $owner, name: $repo) {\n    pullRequest(number: $number) {\n      commits(first: 50) {\n        edges {\n          node {\n            commit {\n              hasSignature\n              oid\n              verificationStatus\n              signature {\n                __typename\n                state\n                signer {\n                  login\n                  avatarUrl\n                  id\n                }\n                wasSignedByGitHub\n                ... on GpgSignature {\n                  __typename\n                  keyId\n                }\n                ... on SmimeSignature {\n                  __typename\n                  issuer {\n                    commonName\n                    emailAddress\n                    organization\n                    organizationUnit\n                  }\n                  subject {\n                    commonName\n                    emailAddress\n                    organization\n                    organizationUnit\n                  }\n                }\n                ... on SshSignature {\n                  __typename\n                  keyFingerprint\n                }\n              }\n              statusCheckRollup {\n                shortText\n                state\n                id\n              }\n              id\n            }\n            id\n          }\n        }\n      }\n      id\n    }\n    id\n  }\n}\n",
  "7ce70b8a70027411f1b9ed4eb2abaf04": "mutation dequeuePullRequestMutation(\n  $input: DequeuePullRequestInput!\n  $mergeMethod: PullRequestMergeMethod\n) {\n  dequeuePullRequest(input: $input) {\n    mergeQueueEntry {\n      pullRequest {\n        ...useLoadMergeBoxQuery_pullRequest\n        ...HeaderMetadata_pullRequest\n        id\n      }\n      id\n    }\n  }\n}\n\nfragment HeaderBranchInfo_pullRequest on PullRequest {\n  mergedAt\n  baseRefName\n  baseRef {\n    repository {\n      defaultBranch\n      name\n      owner {\n        __typename\n        login\n        id\n      }\n      id\n    }\n    id\n  }\n  headRefName\n  state\n  commits {\n    totalCount\n  }\n  baseRepository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    defaultBranchRef {\n      name\n      id\n    }\n    id\n  }\n  headRepository {\n    name\n    isFork\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  author {\n    __typename\n    login\n    id\n  }\n  viewerCanChangeBaseBranch\n}\n\nfragment HeaderMetadata_pullRequest on PullRequest {\n  ...HeaderBranchInfo_pullRequest\n  titleHTML\n  title\n  isDraft\n  number\n  state\n  isInMergeQueue\n  repository {\n    nameWithOwner\n    id\n  }\n}\n\nfragment useLoadMergeBoxQuery_pullRequest on PullRequest {\n  autoMergeRequest {\n    mergeMethod\n  }\n  baseRefName\n  commits {\n    totalCount\n  }\n  headRefOid\n  headRefName\n  headRepository {\n    owner {\n      __typename\n      login\n      id\n    }\n    name\n    id\n  }\n  id\n  isDraft\n  isInMergeQueue\n  latestOpinionatedReviews(first: 100) {\n    edges {\n      node {\n        authorCanPushToRepository\n        author {\n          __typename\n          login\n          avatarUrl\n          name\n          url\n          id\n        }\n        onBehalfOf(first: 10) {\n          edges {\n            node {\n              name\n              id\n            }\n          }\n        }\n        state\n        id\n      }\n    }\n  }\n  mergeQueueEntry {\n    position\n    state\n    id\n  }\n  mergeQueue {\n    url\n    id\n  }\n  mergeRequirements(mergeMethod: $mergeMethod) {\n    commitAuthor\n    commitMessageBody\n    commitMessageHeadline\n    state\n    conditions {\n      __typename\n      message\n      result\n      ... on PullRequestRulesCondition {\n        ruleRollups {\n          __typename\n          message\n          ruleType\n          result\n          ... on PullRequestRuleRollup {\n            failureReasons\n            requiredReviewers\n            requiresCodeowners\n          }\n        }\n      }\n      ... on PullRequestMergeConflictStateCondition {\n        __typename\n        conflicts\n        isConflictResolvableInWeb\n        result\n      }\n    }\n  }\n  mergeStateStatus\n  resourcePath\n  state\n  viewerCanAddAndRemoveFromMergeQueue\n  viewerCanDeleteHeadRef\n  viewerCanDisableAutoMerge\n  viewerCanEnableAutoMerge\n  viewerCanRestoreHeadRef\n  viewerCanUpdate\n  viewerCanUpdateBranch\n  viewerDidAuthor\n  viewerMergeActions {\n    name\n    isAllowable\n    mergeMethods {\n      name\n      isAllowable\n      isAllowableWithBypass\n    }\n  }\n  stateChannel: updatesChannel(name: STATE)\n  deployedChannel: updatesChannel(name: DEPLOYED)\n  reviewStateChannel: updatesChannel(name: REVIEW_STATE)\n  workflowsChannel: updatesChannel(name: WORKFLOWS)\n  mergeQueueChannel: updatesChannel(name: MERGE_QUEUE)\n  headRefChannel: updatesChannel(name: HEAD_REF)\n  baseRefChannel: updatesChannel(name: BASE_REF)\n  commitHeadShaChannel: updatesChannel(name: COMMIT_HEAD_SHA)\n  gitMergeStateChannel: updatesChannel(name: GIT_MERGE_STATE)\n}\n",
  "7d4f35f0d8f09a210fc0b0e155cfecb4": "subscription PullRequestHeaderWrapperTitleSubscription(\n  $id: ID!\n) {\n  pullRequestTitleUpdated(id: $id) {\n    id\n    title\n    titleHTML\n  }\n}\n",
  "82be959dc0703679700573d25580eded": "mutation createReviewsCollectionMutation(\n  $input: CreateSavedCollectionInput!\n  $maxSavedViews: Int!\n) {\n  createSavedCollection(input: $input) {\n    dashboard {\n      reviewsCollection {\n        id\n        color\n        description\n        icon\n        name\n        savedViews(first: $maxSavedViews, orderBy: {field: CREATED_AT, direction: ASC}) {\n          edges {\n            node {\n              id\n              name\n              query\n            }\n          }\n        }\n      }\n      id\n    }\n  }\n}\n",
  "831b62c6f7adf910fb7a952c06d34686": "mutation deletePullRequestHeadRefMutation(\n  $id: ID!\n) {\n  deletePullRequestHeadRef(input: {pullRequestId: $id}) {\n    pullRequest {\n      id\n      state\n      headRefName\n      headRepository {\n        owner {\n          __typename\n          login\n          id\n        }\n        name\n        id\n      }\n      viewerCanDeleteHeadRef\n      viewerCanRestoreHeadRef\n      viewerCanReopen\n    }\n  }\n}\n",
  "8a0640819be89a72ebfbeb065e4a91cf": "mutation reopenPullRequestMutation(\n  $pullRequestId: ID!\n) {\n  reopenPullRequest(input: {pullRequestId: $pullRequestId}) {\n    pullRequest {\n      id\n      state\n      viewerCanClose\n      viewerCanChangeBaseBranch\n    }\n  }\n}\n",
  "8b4ec6bca00e5aaa27d4b1e8d308c636": "mutation mergePullRequestMutation(\n  $input: MergePullRequestInput!\n) {\n  mergePullRequest(input: $input) {\n    pullRequest {\n      id\n      state\n      headRefName\n      headRepository {\n        owner {\n          __typename\n          login\n          id\n        }\n        name\n        id\n      }\n      viewerCanDeleteHeadRef\n      viewerCanRestoreHeadRef\n    }\n  }\n}\n",
  "8cb83dbd266a731642a384a679527411": "query ReviewRequestedEventCodeOwnerStoryQuery(\n  $id: ID!\n) {\n  reviewRequestedEvent: node(id: $id) {\n    __typename\n    ...ReviewRequestedEvent_reviewRequestedEvent\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment ReviewRequestedEvent_reviewRequestedEvent on ReviewRequestedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  requestedReviewAssignedFromTeamName\n  reviewRequest {\n    codeOwnersResourcePath\n    requestedReviewer {\n      __typename\n      ... on User {\n        login\n        resourcePath\n      }\n      ... on Team {\n        combinedSlug\n        resourcePath\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    id\n  }\n  createdAt\n  databaseId\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "8ef0753078e08d76768451ef2d539068": "query ReviewersPickerCandidateReviewersQuery(\n  $query: String\n  $reviewersCount: Int = 100\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    ...ReviewersPickerCandidateReviewers_pullRequest_PlIk9\n    id\n  }\n}\n\nfragment ReviewersPickerCandidateReviewers_pullRequest_PlIk9 on PullRequest {\n  candidateReviewers(query: $query, first: $reviewersCount) {\n    edges {\n      node {\n        reviewer {\n          __typename\n          ... on Team {\n            __typename\n            id\n            combinedSlug\n            teamName: name\n            teamAvatarUrl: avatarUrl(size: 64)\n          }\n          ... on User {\n            __typename\n            id\n            login\n            name\n            avatarUrl(size: 64)\n          }\n          ... on Node {\n            __isNode: __typename\n            id\n          }\n        }\n      }\n    }\n  }\n  id\n}\n",
  "903395820b5bceabc00e14bd865141b8": "query ReviewersPickerSuggestionsQuery(\n  $pullRequestId: ID!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...ReviewersPickerSuggestedReviewers_pullRequest\n    }\n    id\n  }\n}\n\nfragment ReviewersPickerSuggestedReviewers_pullRequest on PullRequest {\n  suggestedReviewers {\n    isAuthor\n    isCommenter\n    reviewer {\n      id\n      login\n      name\n      avatarUrl(size: 64)\n    }\n  }\n}\n",
  "93dc3b03583ff1e7ca5a159bb4220086": "mutation updateIssueCommentBodyMutation(\n  $input: UpdateIssueCommentInput!\n) {\n  updateIssueComment(input: $input) {\n    issueComment {\n      bodyVersion\n      ...IssueCommentViewerMarkdownViewer\n      id\n    }\n  }\n}\n\nfragment IssueCommentViewerMarkdownViewer on IssueComment {\n  id\n  body\n  bodyHTML(unfurlReferences: true)\n  bodyVersion\n  viewerCanUpdate\n}\n",
  "93e91b19670c70a26bb14a9385330ba3": "query PullRequestActivityForwardPaginationQuery(\n  $cursor: String = null\n  $first: Int\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    ...ActivityView_pullRequest_forwardPagination_19XkED\n    id\n  }\n}\n\nfragment ActivityView_pullRequest_forwardPagination_19XkED on PullRequest {\n  viewerCanComment\n  forwardTimeline: timelineItems(first: $first, after: $cursor, visibleEventsOnly: true, itemTypes: [ISSUE_COMMENT, PULL_REQUEST_REVIEW, PULL_REQUEST_COMMIT, BASE_REF_FORCE_PUSHED_EVENT, HEAD_REF_FORCE_PUSHED_EVENT, CLOSED_EVENT, REOPENED_EVENT, MERGED_EVENT, REVIEW_DISMISSED_EVENT, REVIEW_REQUESTED_EVENT]) {\n    totalCount\n    edges {\n      node {\n        __typename\n        ...IssueComment_issueComment\n        ...PullRequestReview_pullRequestReview\n        ...ReactionViewerGroups\n        ... on IssueComment {\n          databaseId\n        }\n        ... on PullRequestReview {\n          databaseId\n        }\n        ... on PullRequestCommit {\n          ...PullRequestCommit_pullRequestCommit\n        }\n        ... on BaseRefForcePushedEvent {\n          databaseId\n          ...BaseRefForcePushedEvent_baseRefForcePushedEvent\n        }\n        ... on HeadRefForcePushedEvent {\n          databaseId\n          ...HeadRefForcePushedEvent_headRefForcePushedEvent\n        }\n        ... on ClosedEvent {\n          databaseId\n          ...ClosedEvent\n        }\n        ... on ReopenedEvent {\n          databaseId\n          ...ReopenedEvent\n        }\n        ... on MergedEvent {\n          databaseId\n          ...MergedEvent_mergedEvent\n        }\n        ... on ReviewDismissedEvent {\n          databaseId\n          ...ReviewDismissedEvent_reviewDismissedEvent\n        }\n        ... on ReviewRequestedEvent {\n          databaseId\n          ...ReviewRequestedEvent_reviewRequestedEvent\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n  id\n}\n\nfragment BaseRefForcePushedEvent_baseRefForcePushedEvent on BaseRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment ClosedEvent on ClosedEvent {\n  databaseId\n  createdAt\n  stateReason\n  closingProjectItemStatus\n  closer {\n    __typename\n    ... on ProjectV2 {\n      url\n      title\n    }\n    ... on PullRequest {\n      url\n      number\n      repository {\n        name\n        owner {\n          __typename\n          login\n          id\n        }\n        id\n      }\n    }\n    ... on Commit {\n      url\n      abbreviatedOid\n      repository {\n        name\n        owner {\n          __typename\n          login\n          id\n        }\n        id\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment HeadRefForcePushedEvent_headRefForcePushedEvent on HeadRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment IssueCommentEditorBodyFragment on IssueComment {\n  id\n  body\n  bodyVersion\n  author {\n    __typename\n    login\n    avatarUrl\n    id\n  }\n  issue {\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  ...IssueCommentHeader\n}\n\nfragment IssueCommentEditor_repository on IssueComment {\n  repository {\n    slashCommandsEnabled\n    nameWithOwner\n    databaseId\n    id\n  }\n}\n\nfragment IssueCommentHeader on IssueComment {\n  id\n  databaseId\n  url\n  createdAt\n  body\n  authorAssociation\n  viewerCanUpdate\n  viewerCanDelete\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n  isHidden: isMinimized\n  minimizedReason\n  createdViaEmail\n  viewerDidAuthor\n  authorToRepoOwnerSponsorship {\n    createdAt\n    isActive\n    id\n  }\n  author {\n    __typename\n    id\n    login\n  }\n  repository {\n    id\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n    isPrivate\n  }\n  issue {\n    number\n    id\n  }\n  ...MarkdownEditHistoryViewer_comment\n}\n\nfragment IssueCommentViewerCommentRow on IssueComment {\n  id\n  databaseId\n  ...IssueCommentViewerMarkdownViewer\n  ...IssueCommentHeader\n  author {\n    avatarUrl\n    login\n    __typename\n    id\n  }\n  issue {\n    id\n    locked\n  }\n  body\n  isHidden: isMinimized\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerMarkdownViewer on IssueComment {\n  id\n  body\n  bodyHTML(unfurlReferences: true)\n  bodyVersion\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment IssueComment_issueComment on IssueComment {\n  ...IssueCommentViewerCommentRow\n  ...IssueCommentViewerReactable\n  ...IssueCommentEditor_repository\n  ...IssueCommentEditorBodyFragment\n  issue {\n    id\n  }\n  id\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment MergedEvent_mergedEvent on MergedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  mergeCommit: commit {\n    abbreviatedOid\n    oid\n    id\n  }\n  mergeRefName\n  viaMergeQueue\n  viaMergeQueueAPI\n  createdAt\n  databaseId\n}\n\nfragment PullRequestCommit_pullRequestCommit on PullRequestCommit {\n  commit {\n    abbreviatedOid\n    oid\n    message\n    authoredDate\n    verificationStatus\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment PullRequestReviewHeaderAndComment_pullRequestReview on PullRequestReview {\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n  id\n  databaseId\n  author {\n    __typename\n    id\n    avatarUrl(size: 64)\n    login\n    ...TimelineRowEventActor\n  }\n  authorAssociation\n  bodyHTML\n  bodyText\n  createdAt\n  pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  onBehalfOf(first: 10) {\n    edges {\n      node {\n        organization {\n          name\n          id\n        }\n        name\n        url\n        id\n      }\n    }\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  dismissedReviewState\n  state\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n}\n\nfragment PullRequestReview_pullRequestReview on PullRequestReview {\n  ...PullRequestReviewHeaderAndComment_pullRequestReview\n  databaseId\n  bodyText\n  id\n  pullRequestThreadsAndReplies(first: 100) {\n    edges {\n      node {\n        __typename\n        ... on PullRequestThread {\n          id\n          ...Thread_pullRequestThread\n          comments(first: 50) {\n            totalCount\n          }\n        }\n        ... on PullRequestReviewComment {\n          id\n          ...ReviewComment_pullRequestReviewComment\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment ReopenedEvent on ReopenedEvent {\n  databaseId\n  createdAt\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n}\n\nfragment ReviewComment_pullRequestReviewComment on PullRequestReviewComment {\n  id\n  currentDiffResourcePath\n  path\n  pullRequestThread {\n    id\n    isOutdated\n    isResolved\n  }\n  ...ReactionViewerGroups\n  ...useFetchThread_PullRequestReviewComment\n}\n\nfragment ReviewDismissedEvent_reviewDismissedEvent on ReviewDismissedEvent {\n  actor {\n    __typename\n    login\n    ...TimelineRowEventActor\n    id\n  }\n  pullRequestCommit {\n    commit {\n      abbreviatedOid\n      id\n    }\n    resourcePath\n    id\n  }\n  review {\n    fullDatabaseId\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  dismissalMessageHTML\n  createdAt\n  databaseId\n}\n\nfragment ReviewRequestedEvent_reviewRequestedEvent on ReviewRequestedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  requestedReviewAssignedFromTeamName\n  reviewRequest {\n    codeOwnersResourcePath\n    requestedReviewer {\n      __typename\n      ... on User {\n        login\n        resourcePath\n      }\n      ... on Team {\n        combinedSlug\n        resourcePath\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    id\n  }\n  createdAt\n  databaseId\n}\n\nfragment ThreadHeader_pullRequestThread on PullRequestThread {\n  id\n  isOutdated\n  isResolved\n  line\n  path\n}\n\nfragment Thread_pullRequestThread on PullRequestThread {\n  ...ThreadHeader_pullRequestThread\n  id\n  currentDiffResourcePath\n  isOutdated\n  isResolved\n  path\n  subject {\n    __typename\n    ... on PullRequestDiffThread {\n      originalStartLine\n      originalEndLine\n      startLine\n      endLine\n      startDiffSide\n      endDiffSide\n      diffLines(maxContextLines: 3) {\n        left\n        right\n        html\n        text\n        type\n      }\n    }\n  }\n  subjectType\n  viewerCanReply\n  comments(first: 50) {\n    edges {\n      node {\n        ...useFetchThread_PullRequestReviewComment\n        ...ReactionViewerGroups\n        id\n      }\n    }\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "95b9f64d570354a9c40ecf2149b11cb1": "query RefetchableSearchQuery(\n  $cursor: String = null\n  $first: Int\n  $labelPageSize: Int!\n  $query: String!\n) {\n  ...ListItems_query_LI8aT\n}\n\nfragment IssueItem_WbnLh on Issue {\n  id\n  __typename\n  title\n  titleHtml: titleHTML\n  ...IssuePullRequestTitle_WbnLh\n  ...IssuePullRequestDescription\n  ...IssuePullRequestStateIcon\n  ...IssueTypeIndicator\n}\n\nfragment IssuePullRequestDescription on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  ... on Issue {\n    createdAt\n    updatedAt\n    author {\n      __typename\n      login\n      avatarUrl\n      id\n    }\n    number\n    ...MilestoneMetadata\n  }\n  ... on PullRequest {\n    createdAt\n    updatedAt\n    author {\n      __typename\n      login\n      avatarUrl\n      id\n    }\n    number\n    ...MilestoneMetadata\n    reviewDecision\n  }\n}\n\nfragment IssuePullRequestStateIcon on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  __typename\n  ... on Issue {\n    state\n    stateReason\n  }\n  ... on PullRequest {\n    isDraft\n    isInMergeQueue\n    pullRequestState: state\n  }\n}\n\nfragment IssuePullRequestTitle_WbnLh on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  __typename\n  ... on Issue {\n    number\n    labels(first: $labelPageSize, orderBy: {field: NAME, direction: ASC}) {\n      nodes {\n        ...Label\n        name\n        id\n      }\n    }\n  }\n  ... on PullRequest {\n    number\n    labels(first: $labelPageSize, orderBy: {field: NAME, direction: ASC}) {\n      nodes {\n        ...Label\n        name\n        id\n      }\n    }\n  }\n}\n\nfragment IssueRow_bj3h3 on Issue {\n  ...IssueItem_WbnLh\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment IssueTypeIndicator on Issue {\n  issueType {\n    id\n    name\n    color\n  }\n}\n\nfragment Label on Label {\n  id\n  nameHTML\n  color\n  name\n  description\n}\n\nfragment ListItems_query_LI8aT on Query {\n  search(first: $first, after: $cursor, query: $query, type: ISSUE) {\n    edges {\n      node {\n        __typename\n        ... on Issue {\n          __typename\n          number\n          ...IssueRow_bj3h3\n        }\n        ... on PullRequest {\n          __typename\n          number\n          ...PullRequestRow_pullRequest_WbnLh\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      startCursor\n      endCursor\n      hasPreviousPage\n      hasNextPage\n    }\n    issueCount\n  }\n}\n\nfragment MilestoneMetadata on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  ... on Issue {\n    milestone {\n      title\n      url\n      id\n    }\n  }\n  ... on PullRequest {\n    milestone {\n      title\n      url\n      id\n    }\n  }\n}\n\nfragment PullRequestItem_WbnLh on PullRequest {\n  id\n  __typename\n  headCommit {\n    commit {\n      id\n      statusCheckRollup {\n        state\n        contexts {\n          checkRunCount\n          checkRunCountsByState {\n            count\n            state\n          }\n        }\n        id\n      }\n    }\n    id\n  }\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  title\n  titleHTML\n  ...IssuePullRequestTitle_WbnLh\n  ...IssuePullRequestDescription\n  ...IssuePullRequestStateIcon\n}\n\nfragment PullRequestRow_pullRequest_WbnLh on PullRequest {\n  __typename\n  id\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  ...PullRequestItem_WbnLh\n  headCommit {\n    commit {\n      id\n    }\n    id\n  }\n  number\n}\n",
  "988dd6bb9180a9aaf6aa1e5b469f0443": "mutation unminimizeCommentMutation(\n  $input: UnminimizeCommentInput!\n) {\n  unminimizeComment(input: $input) {\n    clientMutationId\n    unminimizedComment {\n      __typename\n      isMinimized\n      minimizedReason\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n  }\n}\n",
  "9b5561f2a9678569d7cc5b8b9161d2fc": "query ReviewDismissedEventSelfDismissalStoryQuery(\n  $id: ID!\n) {\n  reviewDismissedEvent: node(id: $id) {\n    __typename\n    ...ReviewDismissedEvent_reviewDismissedEvent\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment ReviewDismissedEvent_reviewDismissedEvent on ReviewDismissedEvent {\n  actor {\n    __typename\n    login\n    ...TimelineRowEventActor\n    id\n  }\n  pullRequestCommit {\n    commit {\n      abbreviatedOid\n      id\n    }\n    resourcePath\n    id\n  }\n  review {\n    fullDatabaseId\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  dismissalMessageHTML\n  createdAt\n  databaseId\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "a027d714e946ef70e4267563acd2c943": "query FilesChangedListingTestQuery(\n  $pullRequestId: ID!\n  $startOid: String\n  $endOid: String\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...FilesChangedListing_pullRequest\n    }\n    id\n  }\n}\n\nfragment FilesChangedListing_pullRequest on PullRequest {\n  comparison(endOid: $endOid, startOid: $startOid) {\n    linesAdded\n    linesDeleted\n    summary {\n      path\n      ...FilesChangedRow_pullRequestSummaryDelta\n    }\n  }\n  resourcePath\n}\n\nfragment FilesChangedRow_pullRequestSummaryDelta on PullRequestSummaryDelta {\n  additions\n  changeType\n  deletions\n  path\n  pathDigest\n  unresolvedCommentCount\n}\n",
  "a1977063ee6e8efda60e7d67ab0e512e": "query DetailsPaneQuery(\n  $owner: String!\n  $repo: String!\n  $number: Int!\n) {\n  repository(owner: $owner, name: $repo) {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    pullRequest(number: $number) {\n      number\n      ...DetailsPane_pullRequest\n      id\n    }\n    id\n  }\n}\n\nfragment ActionSection_pullRequest on PullRequest {\n  id\n  isDraft\n  baseRepository {\n    planSupportsDraftPullRequests: planSupports(feature: DRAFT_PRS)\n    id\n  }\n  state\n  viewerCanUpdate\n}\n\nfragment AssigneePickerAssignee on User {\n  id\n  login\n  name\n  avatarUrl(size: 64)\n}\n\nfragment AssigneesSection_pullrequest on PullRequest {\n  id\n  number\n  viewerCanAssign\n  baseRepository {\n    name\n    id\n  }\n  baseRepositoryOwner {\n    __typename\n    login\n    id\n  }\n  assignees(first: 20) {\n    nodes {\n      ...AssigneePickerAssignee\n      id\n    }\n  }\n  suggestedAssignees(first: 20) {\n    nodes {\n      ...AssigneePickerAssignee\n      id\n    }\n  }\n}\n\nfragment ClassicProjectItem on ProjectCard {\n  project {\n    name\n    url\n    ...SingleSelectColumnProject\n    id\n  }\n  column {\n    ...SingleSelectColumn\n    id\n  }\n}\n\nfragment DetailsPane_pullRequest on PullRequest {\n  ...Reviewers_pullRequest\n  ...AssigneesSection_pullrequest\n  ...LabelSection_pullRequest\n  ...ProjectsSectionFragment\n  ...ActionSection_pullRequest\n}\n\nfragment LabelPickerAssignedLabels on Labelable {\n  __isLabelable: __typename\n  labels(first: 100, orderBy: {field: NAME, direction: ASC}) {\n    edges {\n      node {\n        ...LabelPickerLabel\n        id\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n  ... on Node {\n    __isNode: __typename\n    id\n  }\n}\n\nfragment LabelPickerLabel on Label {\n  id\n  color\n  name\n  nameHTML\n  description\n  url\n}\n\nfragment LabelSection_pullRequest on PullRequest {\n  ...LabelPickerAssignedLabels\n  viewerCanUpdate\n  id\n}\n\nfragment ProjectItemSection on ProjectV2Item {\n  id\n  isArchived\n  project {\n    id\n  }\n  ...ProjectItemSectionView\n}\n\nfragment ProjectItemSectionView on ProjectV2Item {\n  id\n  isArchived\n  project {\n    id\n    title\n    template\n    viewerCanUpdate\n    url\n    field(name: \"Status\") {\n      __typename\n      ...SingleSelectFieldConfigFragment\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n  }\n  fieldValueByName(name: \"Status\") {\n    __typename\n    ...SingleSelectFieldFragment\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n}\n\nfragment ProjectPickerClassicProject on Project {\n  id\n  title: name\n  closed\n  number\n  url\n  viewerCanUpdate\n  columns(first: 10) {\n    nodes {\n      id\n      name\n    }\n  }\n  __typename\n}\n\nfragment ProjectPickerProject on ProjectV2 {\n  id\n  title\n  closed\n  number\n  url\n  viewerCanUpdate\n  __typename\n}\n\nfragment ProjectsSectionFragment on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  ... on Issue {\n    number\n    repository {\n      name\n      owner {\n        __typename\n        login\n        id\n      }\n      isArchived\n      id\n    }\n    id\n    projectItemsNext(first: 10) {\n      edges {\n        node {\n          id\n          ...ProjectItemSection\n          project {\n            ...ProjectPickerProject\n            closed\n            title\n            id\n          }\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n    projectCards(first: 10) {\n      edges {\n        node {\n          id\n          ...ClassicProjectItem\n          project {\n            id\n            closed\n            ...ProjectPickerClassicProject\n          }\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n    viewerCanUpdateMetadata\n  }\n  ... on PullRequest {\n    number\n    repository {\n      name\n      owner {\n        __typename\n        login\n        id\n      }\n      isArchived\n      id\n    }\n    id\n    projectItemsNext(first: 10) {\n      edges {\n        node {\n          id\n          ...ProjectItemSection\n          project {\n            closed\n            ...ProjectPickerProject\n            title\n            id\n          }\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n    projectCards(first: 10) {\n      edges {\n        node {\n          id\n          ...ClassicProjectItem\n          project {\n            id\n            closed\n            ...ProjectPickerClassicProject\n          }\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n    viewerCanUpdate\n  }\n}\n\nfragment ReviewDetails_pullRequest on PullRequest {\n  latestReviews(first: 100, preferOpinionatedReviews: true) {\n    edges {\n      node {\n        onBehalfOfReviewers {\n          asCodeowner\n          reviewer {\n            __typename\n            ... on Team {\n              __typename\n              combinedSlug\n            }\n            ... on User {\n              __typename\n              login\n            }\n            ... on Node {\n              __isNode: __typename\n              id\n            }\n          }\n        }\n        author {\n          __typename\n          avatarUrl\n          login\n          url\n          id\n        }\n        state\n        id\n      }\n    }\n  }\n}\n\nfragment ReviewRequestDetails_pullRequest on PullRequest {\n  id\n  reviewRequests(first: 100) {\n    edges {\n      node {\n        asCodeOwner\n        assignedFromReviewRequest {\n          requestedReviewer {\n            __typename\n            ... on Team {\n              id\n              __typename\n              name\n            }\n            ... on User {\n              id\n              login\n              __typename\n            }\n            ... on Node {\n              __isNode: __typename\n              id\n            }\n          }\n          asCodeOwner\n          id\n        }\n        requestedReviewer {\n          __typename\n          ... on User {\n            id\n            avatarUrl\n            login\n            url\n            __typename\n          }\n          ... on Team {\n            combinedSlug\n            id\n            teamAvatarUrl: avatarUrl\n            name\n            url\n            organization {\n              name\n              id\n            }\n            __typename\n          }\n          ... on Node {\n            __isNode: __typename\n            id\n          }\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment Reviewers_pullRequest on PullRequest {\n  ...ReviewRequestDetails_pullRequest\n  ...ReviewDetails_pullRequest\n  id\n  isDraft\n  state\n  viewerCanUpdate\n  codeowners {\n    __typename\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  latestReviews(first: 100, preferOpinionatedReviews: true) {\n    edges {\n      node {\n        author {\n          __typename\n          login\n          id\n        }\n        state\n        id\n      }\n    }\n  }\n  reviewRequests(first: 100) {\n    edges {\n      node {\n        requestedReviewer {\n          __typename\n          ... on User {\n            id\n            __typename\n          }\n          ... on Team {\n            id\n            __typename\n          }\n          ... on Node {\n            __isNode: __typename\n            id\n          }\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment SingleSelectColumn on ProjectColumn {\n  id\n  name\n}\n\nfragment SingleSelectColumnProject on Project {\n  id\n  name\n  columns(first: 10) {\n    nodes {\n      ...SingleSelectColumn\n      id\n    }\n  }\n}\n\nfragment SingleSelectFieldConfigFragment on ProjectV2SingleSelectField {\n  id\n  name\n  options {\n    ...SingleSelectFieldOptionFragment\n    id\n    name\n    description\n    color\n  }\n}\n\nfragment SingleSelectFieldFragment on ProjectV2ItemFieldSingleSelectValue {\n  id\n  optionId\n  name\n  nameHTML\n  color\n}\n\nfragment SingleSelectFieldOptionFragment on ProjectV2SingleSelectFieldOption {\n  id\n  optionId\n  name\n  nameHTML\n  color\n  descriptionHTML\n}\n",
  "a317e784102fb127000fbe1c2db878db": "query SearchQuery(\n  $query: String!\n  $first: Int\n  $labelPageSize: Int!\n) {\n  ...ListItems_query_3sS1EZ\n}\n\nfragment IssueItem_WbnLh on Issue {\n  id\n  __typename\n  title\n  titleHtml: titleHTML\n  ...IssuePullRequestTitle_WbnLh\n  ...IssuePullRequestDescription\n  ...IssuePullRequestStateIcon\n  ...IssueTypeIndicator\n}\n\nfragment IssuePullRequestDescription on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  ... on Issue {\n    createdAt\n    updatedAt\n    author {\n      __typename\n      login\n      avatarUrl\n      id\n    }\n    number\n    ...MilestoneMetadata\n  }\n  ... on PullRequest {\n    createdAt\n    updatedAt\n    author {\n      __typename\n      login\n      avatarUrl\n      id\n    }\n    number\n    ...MilestoneMetadata\n    reviewDecision\n  }\n}\n\nfragment IssuePullRequestStateIcon on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  __typename\n  ... on Issue {\n    state\n    stateReason\n  }\n  ... on PullRequest {\n    isDraft\n    isInMergeQueue\n    pullRequestState: state\n  }\n}\n\nfragment IssuePullRequestTitle_WbnLh on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  __typename\n  ... on Issue {\n    number\n    labels(first: $labelPageSize, orderBy: {field: NAME, direction: ASC}) {\n      nodes {\n        ...Label\n        name\n        id\n      }\n    }\n  }\n  ... on PullRequest {\n    number\n    labels(first: $labelPageSize, orderBy: {field: NAME, direction: ASC}) {\n      nodes {\n        ...Label\n        name\n        id\n      }\n    }\n  }\n}\n\nfragment IssueRow_bj3h3 on Issue {\n  ...IssueItem_WbnLh\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment IssueTypeIndicator on Issue {\n  issueType {\n    id\n    name\n    color\n  }\n}\n\nfragment Label on Label {\n  id\n  nameHTML\n  color\n  name\n  description\n}\n\nfragment ListItems_query_3sS1EZ on Query {\n  search(first: $first, query: $query, type: ISSUE) {\n    edges {\n      node {\n        __typename\n        ... on Issue {\n          __typename\n          number\n          ...IssueRow_bj3h3\n        }\n        ... on PullRequest {\n          __typename\n          number\n          ...PullRequestRow_pullRequest_WbnLh\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      startCursor\n      endCursor\n      hasPreviousPage\n      hasNextPage\n    }\n    issueCount\n  }\n}\n\nfragment MilestoneMetadata on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  ... on Issue {\n    milestone {\n      title\n      url\n      id\n    }\n  }\n  ... on PullRequest {\n    milestone {\n      title\n      url\n      id\n    }\n  }\n}\n\nfragment PullRequestItem_WbnLh on PullRequest {\n  id\n  __typename\n  headCommit {\n    commit {\n      id\n      statusCheckRollup {\n        state\n        contexts {\n          checkRunCount\n          checkRunCountsByState {\n            count\n            state\n          }\n        }\n        id\n      }\n    }\n    id\n  }\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  title\n  titleHTML\n  ...IssuePullRequestTitle_WbnLh\n  ...IssuePullRequestDescription\n  ...IssuePullRequestStateIcon\n}\n\nfragment PullRequestRow_pullRequest_WbnLh on PullRequest {\n  __typename\n  id\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  ...PullRequestItem_WbnLh\n  headCommit {\n    commit {\n      id\n    }\n    id\n  }\n  number\n}\n",
  "a852d1d92dbeb43d0074f3e0447b3c74": "query PullRequestViewerRefreshQuery(\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    ...PullRequestSummaryViewerContent_pullRequest\n    id\n  }\n}\n\nfragment Description_pullRequest on PullRequest {\n  id\n  databaseId\n  bodyVersion\n  ...IssueBodyHeader\n  repository {\n    databaseId\n    nameWithOwner\n    slashCommandsEnabled\n    id\n  }\n  viewerCanUpdate\n  locked\n  body\n  bodyHTML(unfurlReferences: true)\n  ...IssueBodyViewerReactable\n  ...IssueBodyViewer\n}\n\nfragment IssueBodyHeader on Comment {\n  __isComment: __typename\n  ...IssueBodyHeaderActions_comment\n  createdAt\n  viewerDidAuthor\n  author {\n    __typename\n    ...IssueBodyHeaderAuthor\n    ...IssueBodyHeaderActions\n    id\n  }\n}\n\nfragment IssueBodyHeaderActions on Actor {\n  __isActor: __typename\n  login\n  id\n}\n\nfragment IssueBodyHeaderActions_comment on Comment {\n  __isComment: __typename\n  body\n}\n\nfragment IssueBodyHeaderAuthor on Actor {\n  __isActor: __typename\n  login\n  avatarUrl\n  profileUrl\n}\n\nfragment IssueBodyViewer on Comment {\n  __isComment: __typename\n  id\n}\n\nfragment IssueBodyViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment PullRequestSummaryViewerContent_pullRequest on PullRequest {\n  ...Description_pullRequest\n  databaseId\n  id\n  viewerPendingReview {\n    id\n  }\n  headRefOid\n  repository {\n    databaseId\n    id\n    nameWithOwner\n    slashCommandsEnabled\n  }\n  isInMergeQueue\n  state\n  viewerCanComment\n  viewerCanApplySuggestion\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n",
  "a964c4b06cb9132c7bf9b2d0addbf574": "mutation addPullRequestReviewMutation(\n  $input: AddPullRequestReviewInput!\n) {\n  addPullRequestReview(input: $input) {\n    pullRequestReview {\n      url\n      ...PullRequestReview_pullRequestReview\n      pullRequest {\n        latestReviews(first: 100) {\n          edges {\n            node {\n              authorCanPushToRepository\n              author {\n                __typename\n                login\n                avatarUrl\n                name\n                url\n                id\n              }\n              onBehalfOf(first: 10) {\n                edges {\n                  node {\n                    name\n                    id\n                  }\n                }\n              }\n              onBehalfOfReviewers {\n                asCodeowner\n                reviewer {\n                  __typename\n                  ... on Team {\n                    __typename\n                    combinedSlug\n                  }\n                  ... on User {\n                    __typename\n                    login\n                  }\n                  ... on Node {\n                    __isNode: __typename\n                    id\n                  }\n                }\n              }\n              state\n              id\n            }\n          }\n        }\n        id\n      }\n      id\n    }\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment PullRequestReviewHeaderAndComment_pullRequestReview on PullRequestReview {\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n  id\n  databaseId\n  author {\n    __typename\n    id\n    avatarUrl(size: 64)\n    login\n    ...TimelineRowEventActor\n  }\n  authorAssociation\n  bodyHTML\n  bodyText\n  createdAt\n  pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  onBehalfOf(first: 10) {\n    edges {\n      node {\n        organization {\n          name\n          id\n        }\n        name\n        url\n        id\n      }\n    }\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  dismissedReviewState\n  state\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n}\n\nfragment PullRequestReview_pullRequestReview on PullRequestReview {\n  ...PullRequestReviewHeaderAndComment_pullRequestReview\n  databaseId\n  bodyText\n  id\n  pullRequestThreadsAndReplies(first: 100) {\n    edges {\n      node {\n        __typename\n        ... on PullRequestThread {\n          id\n          ...Thread_pullRequestThread\n          comments(first: 50) {\n            totalCount\n          }\n        }\n        ... on PullRequestReviewComment {\n          id\n          ...ReviewComment_pullRequestReviewComment\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment ReviewComment_pullRequestReviewComment on PullRequestReviewComment {\n  id\n  currentDiffResourcePath\n  path\n  pullRequestThread {\n    id\n    isOutdated\n    isResolved\n  }\n  ...ReactionViewerGroups\n  ...useFetchThread_PullRequestReviewComment\n}\n\nfragment ThreadHeader_pullRequestThread on PullRequestThread {\n  id\n  isOutdated\n  isResolved\n  line\n  path\n}\n\nfragment Thread_pullRequestThread on PullRequestThread {\n  ...ThreadHeader_pullRequestThread\n  id\n  currentDiffResourcePath\n  isOutdated\n  isResolved\n  path\n  subject {\n    __typename\n    ... on PullRequestDiffThread {\n      originalStartLine\n      originalEndLine\n      startLine\n      endLine\n      startDiffSide\n      endDiffSide\n      diffLines(maxContextLines: 3) {\n        left\n        right\n        html\n        text\n        type\n      }\n    }\n  }\n  subjectType\n  viewerCanReply\n  comments(first: 50) {\n    edges {\n      node {\n        ...useFetchThread_PullRequestReviewComment\n        ...ReactionViewerGroups\n        id\n      }\n    }\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "aa0f1b62aa625398ceccc09d124adfec": "query SectionQuery(\n  $query: String!\n  $first: Int\n  $labelPageSize: Int!\n) {\n  ...Section_query_3sS1EZ\n}\n\nfragment IssueItem_WbnLh on Issue {\n  id\n  __typename\n  title\n  titleHtml: titleHTML\n  ...IssuePullRequestTitle_WbnLh\n  ...IssuePullRequestDescription\n  ...IssuePullRequestStateIcon\n  ...IssueTypeIndicator\n}\n\nfragment IssuePullRequestDescription on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  ... on Issue {\n    createdAt\n    updatedAt\n    author {\n      __typename\n      login\n      avatarUrl\n      id\n    }\n    number\n    ...MilestoneMetadata\n  }\n  ... on PullRequest {\n    createdAt\n    updatedAt\n    author {\n      __typename\n      login\n      avatarUrl\n      id\n    }\n    number\n    ...MilestoneMetadata\n    reviewDecision\n  }\n}\n\nfragment IssuePullRequestStateIcon on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  __typename\n  ... on Issue {\n    state\n    stateReason\n  }\n  ... on PullRequest {\n    isDraft\n    isInMergeQueue\n    pullRequestState: state\n  }\n}\n\nfragment IssuePullRequestTitle_WbnLh on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  __typename\n  ... on Issue {\n    number\n    labels(first: $labelPageSize, orderBy: {field: NAME, direction: ASC}) {\n      nodes {\n        ...Label\n        name\n        id\n      }\n    }\n  }\n  ... on PullRequest {\n    number\n    labels(first: $labelPageSize, orderBy: {field: NAME, direction: ASC}) {\n      nodes {\n        ...Label\n        name\n        id\n      }\n    }\n  }\n}\n\nfragment IssueRow_bj3h3 on Issue {\n  ...IssueItem_WbnLh\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment IssueTypeIndicator on Issue {\n  issueType {\n    id\n    name\n    color\n  }\n}\n\nfragment Label on Label {\n  id\n  nameHTML\n  color\n  name\n  description\n}\n\nfragment MilestoneMetadata on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  ... on Issue {\n    milestone {\n      title\n      url\n      id\n    }\n  }\n  ... on PullRequest {\n    milestone {\n      title\n      url\n      id\n    }\n  }\n}\n\nfragment PullRequestItem_WbnLh on PullRequest {\n  id\n  __typename\n  headCommit {\n    commit {\n      id\n      statusCheckRollup {\n        state\n        contexts {\n          checkRunCount\n          checkRunCountsByState {\n            count\n            state\n          }\n        }\n        id\n      }\n    }\n    id\n  }\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  title\n  titleHTML\n  ...IssuePullRequestTitle_WbnLh\n  ...IssuePullRequestDescription\n  ...IssuePullRequestStateIcon\n}\n\nfragment PullRequestRow_pullRequest_WbnLh on PullRequest {\n  __typename\n  id\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  ...PullRequestItem_WbnLh\n  headCommit {\n    commit {\n      id\n    }\n    id\n  }\n  number\n}\n\nfragment Section_query_3sS1EZ on Query {\n  search(first: $first, query: $query, type: ISSUE) {\n    edges {\n      node {\n        __typename\n        ... on Issue {\n          __typename\n          number\n          ...IssueRow_bj3h3\n        }\n        ... on PullRequest {\n          __typename\n          number\n          ...PullRequestRow_pullRequest_WbnLh\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      startCursor\n      endCursor\n      hasPreviousPage\n      hasNextPage\n    }\n    issueCount\n  }\n}\n",
  "ac6126149270c573fc9c440cf09eb660": "query PullRequestSummaryViewerContentQuery(\n  $number: Int!\n  $owner: String!\n  $repo: String!\n) {\n  repository(owner: $owner, name: $repo) {\n    pullRequest(number: $number) {\n      ...PullRequestSummaryViewerContent_pullRequest\n      ...useEmitPageViewEvent_pullRequest\n      id\n    }\n    id\n  }\n}\n\nfragment Description_pullRequest on PullRequest {\n  id\n  databaseId\n  bodyVersion\n  ...IssueBodyHeader\n  repository {\n    databaseId\n    nameWithOwner\n    slashCommandsEnabled\n    id\n  }\n  viewerCanUpdate\n  locked\n  body\n  bodyHTML(unfurlReferences: true)\n  ...IssueBodyViewerReactable\n  ...IssueBodyViewer\n}\n\nfragment IssueBodyHeader on Comment {\n  __isComment: __typename\n  ...IssueBodyHeaderActions_comment\n  createdAt\n  viewerDidAuthor\n  author {\n    __typename\n    ...IssueBodyHeaderAuthor\n    ...IssueBodyHeaderActions\n    id\n  }\n}\n\nfragment IssueBodyHeaderActions on Actor {\n  __isActor: __typename\n  login\n  id\n}\n\nfragment IssueBodyHeaderActions_comment on Comment {\n  __isComment: __typename\n  body\n}\n\nfragment IssueBodyHeaderAuthor on Actor {\n  __isActor: __typename\n  login\n  avatarUrl\n  profileUrl\n}\n\nfragment IssueBodyViewer on Comment {\n  __isComment: __typename\n  id\n}\n\nfragment IssueBodyViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment PullRequestSummaryViewerContent_pullRequest on PullRequest {\n  ...Description_pullRequest\n  databaseId\n  id\n  viewerPendingReview {\n    id\n  }\n  headRefOid\n  repository {\n    databaseId\n    id\n    nameWithOwner\n    slashCommandsEnabled\n  }\n  isInMergeQueue\n  state\n  viewerCanComment\n  viewerCanApplySuggestion\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment useEmitPageViewEvent_pullRequest on PullRequest {\n  comparison {\n    filesChanged\n    linesChanged\n  }\n}\n",
  "ad148b84779ede5c0c552b797a3b73ef": "query useFetchThreadQuery(\n  $threadId: ID!\n  $includeAssociatedDiffLines: Boolean!\n) {\n  node(id: $threadId) {\n    __typename\n    ... on PullRequestThread {\n      id\n      isOutdated\n      isResolved\n      viewerCanReply\n      subjectType\n      subject {\n        __typename\n        ... on PullRequestDiffThread {\n          originalStartLine @include(if: $includeAssociatedDiffLines)\n          originalEndLine @include(if: $includeAssociatedDiffLines)\n          pullRequestCommit @include(if: $includeAssociatedDiffLines) {\n            commit {\n              abbreviatedOid\n              id\n            }\n            id\n          }\n          diffLines @include(if: $includeAssociatedDiffLines) {\n            left\n            right\n            html\n            text\n            type\n          }\n          startDiffSide\n          endDiffSide\n          startLine\n          endLine\n        }\n      }\n      comments(first: 50) {\n        edges {\n          node {\n            ...useFetchThread_PullRequestReviewComment\n            id\n            __typename\n          }\n          cursor\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "ad821ce81f5f7207291880b7f3504073": "query BaseRefForcePushedEventTestQuery(\n  $id: ID!\n) {\n  baseRefForcePushedEvent: node(id: $id) {\n    __typename\n    ...BaseRefForcePushedEvent_baseRefForcePushedEvent\n    id\n  }\n}\n\nfragment BaseRefForcePushedEvent_baseRefForcePushedEvent on BaseRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "adf74e9e7ad9189e6be1bfc6b3658285": "query DiffEntryWithContextLinesQuery(\n  $injectedContextLines: [DiffLineRange!]\n  $inlineThreadCount: Int\n  $id: ID!\n) {\n  node(id: $id) {\n    __typename\n    ...DiffLines_diffEntry\n    id\n  }\n}\n\nfragment DiffLines_diffEntry on PullRequestDiffEntry {\n  id\n  diffLines(injectedContextLines: $injectedContextLines) {\n    left\n    right\n    blobLineNumber\n    html\n    type\n    text\n    threads(first: $inlineThreadCount) {\n      totalCount\n      totalCommentsCount\n      edges {\n        node {\n          diffSide\n          id\n          isOutdated\n          line\n          startDiffSide\n          startLine\n          comments(first: 50) {\n            totalCount\n            edges {\n              node {\n                author {\n                  __typename\n                  avatarUrl(size: 48)\n                  login\n                  id\n                }\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
  "ae396d2b6d19214575d91a9e5fe00764": "query PullRequestActivityViewerContentQuery(\n  $number: Int!\n  $owner: String!\n  $repo: String!\n  $timelinePageSize: Int\n) {\n  viewer {\n    ...ActivityView_viewer\n    id\n  }\n  repository(owner: $owner, name: $repo) {\n    pullRequest(number: $number) {\n      id\n      repository {\n        id\n      }\n      headRefOid\n      isInMergeQueue\n      state\n      viewerCanComment\n      viewerCanApplySuggestion\n      ...ActivityView_pullRequest_3jKAAz\n      ...useEmitPageViewEvent_pullRequest\n    }\n    id\n  }\n}\n\nfragment ActivityView_PullRequestTimeline_pullRequest on PullRequest {\n  id\n  url\n  viewerCanComment\n  author {\n    __typename\n    login\n    id\n  }\n  repository {\n    url\n    id\n  }\n}\n\nfragment ActivityView_pullRequest_3jKAAz on PullRequest {\n  ...ActivityView_pullRequest_forwardPagination_4k2445\n  ...ActivityView_pullRequest_backwardPagination_2Dhmdq\n  ...PullRequestCommentComposer_pullRequest\n  ...ActivityView_PullRequestTimeline_pullRequest\n}\n\nfragment ActivityView_pullRequest_backwardPagination_2Dhmdq on PullRequest {\n  backwardTimeline: timelineItems(last: 0, visibleEventsOnly: true, itemTypes: [ISSUE_COMMENT, PULL_REQUEST_REVIEW, PULL_REQUEST_COMMIT, BASE_REF_FORCE_PUSHED_EVENT, HEAD_REF_FORCE_PUSHED_EVENT, CLOSED_EVENT, REOPENED_EVENT, MERGED_EVENT, REVIEW_DISMISSED_EVENT, REVIEW_REQUESTED_EVENT]) {\n    edges {\n      node {\n        __typename\n        ...IssueComment_issueComment\n        ...ReactionViewerGroups\n        ...PullRequestReview_pullRequestReview\n        ... on IssueComment {\n          databaseId\n        }\n        ... on PullRequestReview {\n          databaseId\n        }\n        ... on PullRequestCommit {\n          ...PullRequestCommit_pullRequestCommit\n        }\n        ... on BaseRefForcePushedEvent {\n          databaseId\n          ...BaseRefForcePushedEvent_baseRefForcePushedEvent\n        }\n        ... on HeadRefForcePushedEvent {\n          databaseId\n          ...HeadRefForcePushedEvent_headRefForcePushedEvent\n        }\n        ... on ClosedEvent {\n          databaseId\n          ...ClosedEvent\n        }\n        ... on ReopenedEvent {\n          databaseId\n          ...ReopenedEvent\n        }\n        ... on MergedEvent {\n          databaseId\n          ...MergedEvent_mergedEvent\n        }\n        ... on ReviewDismissedEvent {\n          databaseId\n          ...ReviewDismissedEvent_reviewDismissedEvent\n        }\n        ... on ReviewRequestedEvent {\n          databaseId\n          ...ReviewRequestedEvent_reviewRequestedEvent\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasPreviousPage\n      startCursor\n    }\n  }\n  id\n}\n\nfragment ActivityView_pullRequest_forwardPagination_4k2445 on PullRequest {\n  viewerCanComment\n  forwardTimeline: timelineItems(first: $timelinePageSize, visibleEventsOnly: true, itemTypes: [ISSUE_COMMENT, PULL_REQUEST_REVIEW, PULL_REQUEST_COMMIT, BASE_REF_FORCE_PUSHED_EVENT, HEAD_REF_FORCE_PUSHED_EVENT, CLOSED_EVENT, REOPENED_EVENT, MERGED_EVENT, REVIEW_DISMISSED_EVENT, REVIEW_REQUESTED_EVENT]) {\n    totalCount\n    edges {\n      node {\n        __typename\n        ...IssueComment_issueComment\n        ...PullRequestReview_pullRequestReview\n        ...ReactionViewerGroups\n        ... on IssueComment {\n          databaseId\n        }\n        ... on PullRequestReview {\n          databaseId\n        }\n        ... on PullRequestCommit {\n          ...PullRequestCommit_pullRequestCommit\n        }\n        ... on BaseRefForcePushedEvent {\n          databaseId\n          ...BaseRefForcePushedEvent_baseRefForcePushedEvent\n        }\n        ... on HeadRefForcePushedEvent {\n          databaseId\n          ...HeadRefForcePushedEvent_headRefForcePushedEvent\n        }\n        ... on ClosedEvent {\n          databaseId\n          ...ClosedEvent\n        }\n        ... on ReopenedEvent {\n          databaseId\n          ...ReopenedEvent\n        }\n        ... on MergedEvent {\n          databaseId\n          ...MergedEvent_mergedEvent\n        }\n        ... on ReviewDismissedEvent {\n          databaseId\n          ...ReviewDismissedEvent_reviewDismissedEvent\n        }\n        ... on ReviewRequestedEvent {\n          databaseId\n          ...ReviewRequestedEvent_reviewRequestedEvent\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n  id\n}\n\nfragment ActivityView_viewer on User {\n  login\n  ...Thread_viewer\n}\n\nfragment BaseRefForcePushedEvent_baseRefForcePushedEvent on BaseRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment ClosedEvent on ClosedEvent {\n  databaseId\n  createdAt\n  stateReason\n  closingProjectItemStatus\n  closer {\n    __typename\n    ... on ProjectV2 {\n      url\n      title\n    }\n    ... on PullRequest {\n      url\n      number\n      repository {\n        name\n        owner {\n          __typename\n          login\n          id\n        }\n        id\n      }\n    }\n    ... on Commit {\n      url\n      abbreviatedOid\n      repository {\n        name\n        owner {\n          __typename\n          login\n          id\n        }\n        id\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment HeadRefForcePushedEvent_headRefForcePushedEvent on HeadRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment IssueCommentEditorBodyFragment on IssueComment {\n  id\n  body\n  bodyVersion\n  author {\n    __typename\n    login\n    avatarUrl\n    id\n  }\n  issue {\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  ...IssueCommentHeader\n}\n\nfragment IssueCommentEditor_repository on IssueComment {\n  repository {\n    slashCommandsEnabled\n    nameWithOwner\n    databaseId\n    id\n  }\n}\n\nfragment IssueCommentHeader on IssueComment {\n  id\n  databaseId\n  url\n  createdAt\n  body\n  authorAssociation\n  viewerCanUpdate\n  viewerCanDelete\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n  isHidden: isMinimized\n  minimizedReason\n  createdViaEmail\n  viewerDidAuthor\n  authorToRepoOwnerSponsorship {\n    createdAt\n    isActive\n    id\n  }\n  author {\n    __typename\n    id\n    login\n  }\n  repository {\n    id\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n    isPrivate\n  }\n  issue {\n    number\n    id\n  }\n  ...MarkdownEditHistoryViewer_comment\n}\n\nfragment IssueCommentViewerCommentRow on IssueComment {\n  id\n  databaseId\n  ...IssueCommentViewerMarkdownViewer\n  ...IssueCommentHeader\n  author {\n    avatarUrl\n    login\n    __typename\n    id\n  }\n  issue {\n    id\n    locked\n  }\n  body\n  isHidden: isMinimized\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerMarkdownViewer on IssueComment {\n  id\n  body\n  bodyHTML(unfurlReferences: true)\n  bodyVersion\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment IssueComment_issueComment on IssueComment {\n  ...IssueCommentViewerCommentRow\n  ...IssueCommentViewerReactable\n  ...IssueCommentEditor_repository\n  ...IssueCommentEditorBodyFragment\n  issue {\n    id\n  }\n  id\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment MergedEvent_mergedEvent on MergedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  mergeCommit: commit {\n    abbreviatedOid\n    oid\n    id\n  }\n  mergeRefName\n  viaMergeQueue\n  viaMergeQueueAPI\n  createdAt\n  databaseId\n}\n\nfragment PullRequestCommentActionButtons_pullRequest on PullRequest {\n  viewerCanClose\n  viewerCanReopen\n  state\n  id\n}\n\nfragment PullRequestCommentComposer_pullRequest on PullRequest {\n  id\n  locked\n  viewerCanComment\n  viewerCanClose\n  viewerCanReopen\n  databaseId\n  repository {\n    databaseId\n    isArchived\n    nameWithOwner\n    slashCommandsEnabled\n    securityPolicyUrl\n    contributingFileUrl\n    codeOfConductFileUrl\n    visibility\n    id\n  }\n  state\n  ...PullRequestCommentActionButtons_pullRequest\n}\n\nfragment PullRequestCommit_pullRequestCommit on PullRequestCommit {\n  commit {\n    abbreviatedOid\n    oid\n    message\n    authoredDate\n    verificationStatus\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment PullRequestReviewHeaderAndComment_pullRequestReview on PullRequestReview {\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n  id\n  databaseId\n  author {\n    __typename\n    id\n    avatarUrl(size: 64)\n    login\n    ...TimelineRowEventActor\n  }\n  authorAssociation\n  bodyHTML\n  bodyText\n  createdAt\n  pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  onBehalfOf(first: 10) {\n    edges {\n      node {\n        organization {\n          name\n          id\n        }\n        name\n        url\n        id\n      }\n    }\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  dismissedReviewState\n  state\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n}\n\nfragment PullRequestReview_pullRequestReview on PullRequestReview {\n  ...PullRequestReviewHeaderAndComment_pullRequestReview\n  databaseId\n  bodyText\n  id\n  pullRequestThreadsAndReplies(first: 100) {\n    edges {\n      node {\n        __typename\n        ... on PullRequestThread {\n          id\n          ...Thread_pullRequestThread\n          comments(first: 50) {\n            totalCount\n          }\n        }\n        ... on PullRequestReviewComment {\n          id\n          ...ReviewComment_pullRequestReviewComment\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment ReopenedEvent on ReopenedEvent {\n  databaseId\n  createdAt\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n}\n\nfragment ReviewComment_pullRequestReviewComment on PullRequestReviewComment {\n  id\n  currentDiffResourcePath\n  path\n  pullRequestThread {\n    id\n    isOutdated\n    isResolved\n  }\n  ...ReactionViewerGroups\n  ...useFetchThread_PullRequestReviewComment\n}\n\nfragment ReviewDismissedEvent_reviewDismissedEvent on ReviewDismissedEvent {\n  actor {\n    __typename\n    login\n    ...TimelineRowEventActor\n    id\n  }\n  pullRequestCommit {\n    commit {\n      abbreviatedOid\n      id\n    }\n    resourcePath\n    id\n  }\n  review {\n    fullDatabaseId\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  dismissalMessageHTML\n  createdAt\n  databaseId\n}\n\nfragment ReviewRequestedEvent_reviewRequestedEvent on ReviewRequestedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  requestedReviewAssignedFromTeamName\n  reviewRequest {\n    codeOwnersResourcePath\n    requestedReviewer {\n      __typename\n      ... on User {\n        login\n        resourcePath\n      }\n      ... on Team {\n        combinedSlug\n        resourcePath\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    id\n  }\n  createdAt\n  databaseId\n}\n\nfragment ThreadHeader_pullRequestThread on PullRequestThread {\n  id\n  isOutdated\n  isResolved\n  line\n  path\n}\n\nfragment Thread_pullRequestThread on PullRequestThread {\n  ...ThreadHeader_pullRequestThread\n  id\n  currentDiffResourcePath\n  isOutdated\n  isResolved\n  path\n  subject {\n    __typename\n    ... on PullRequestDiffThread {\n      originalStartLine\n      originalEndLine\n      startLine\n      endLine\n      startDiffSide\n      endDiffSide\n      diffLines(maxContextLines: 3) {\n        left\n        right\n        html\n        text\n        type\n      }\n    }\n  }\n  subjectType\n  viewerCanReply\n  comments(first: 50) {\n    edges {\n      node {\n        ...useFetchThread_PullRequestReviewComment\n        ...ReactionViewerGroups\n        id\n      }\n    }\n  }\n}\n\nfragment Thread_viewer on User {\n  avatarUrl\n  login\n  isSiteAdmin\n  pullRequestUserPreferences {\n    tabSize\n    diffView\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n\nfragment useEmitPageViewEvent_pullRequest on PullRequest {\n  comparison {\n    filesChanged\n    linesChanged\n  }\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "aef2234fbaaddb2fdb0112d9293168c1": "query PullRequestSummaryViewerSecondaryContentQuery(\n  $number: Int!\n  $owner: String!\n  $repo: String!\n  $startOid: String\n  $endOid: String\n  $timelinePageSize: Int\n) {\n  viewer {\n    ...ActivityView_viewer\n    id\n  }\n  repository(owner: $owner, name: $repo) {\n    pullRequest(number: $number) {\n      id\n      ...FilesChangedListing_pullRequest\n      ...ActivityView_pullRequest_3jKAAz\n    }\n    id\n  }\n}\n\nfragment ActivityView_PullRequestTimeline_pullRequest on PullRequest {\n  id\n  url\n  viewerCanComment\n  author {\n    __typename\n    login\n    id\n  }\n  repository {\n    url\n    id\n  }\n}\n\nfragment ActivityView_pullRequest_3jKAAz on PullRequest {\n  ...ActivityView_pullRequest_forwardPagination_4k2445\n  ...ActivityView_pullRequest_backwardPagination_2Dhmdq\n  ...PullRequestCommentComposer_pullRequest\n  ...ActivityView_PullRequestTimeline_pullRequest\n}\n\nfragment ActivityView_pullRequest_backwardPagination_2Dhmdq on PullRequest {\n  backwardTimeline: timelineItems(last: 0, visibleEventsOnly: true, itemTypes: [ISSUE_COMMENT, PULL_REQUEST_REVIEW, PULL_REQUEST_COMMIT, BASE_REF_FORCE_PUSHED_EVENT, HEAD_REF_FORCE_PUSHED_EVENT, CLOSED_EVENT, REOPENED_EVENT, MERGED_EVENT, REVIEW_DISMISSED_EVENT, REVIEW_REQUESTED_EVENT]) {\n    edges {\n      node {\n        __typename\n        ...IssueComment_issueComment\n        ...ReactionViewerGroups\n        ...PullRequestReview_pullRequestReview\n        ... on IssueComment {\n          databaseId\n        }\n        ... on PullRequestReview {\n          databaseId\n        }\n        ... on PullRequestCommit {\n          ...PullRequestCommit_pullRequestCommit\n        }\n        ... on BaseRefForcePushedEvent {\n          databaseId\n          ...BaseRefForcePushedEvent_baseRefForcePushedEvent\n        }\n        ... on HeadRefForcePushedEvent {\n          databaseId\n          ...HeadRefForcePushedEvent_headRefForcePushedEvent\n        }\n        ... on ClosedEvent {\n          databaseId\n          ...ClosedEvent\n        }\n        ... on ReopenedEvent {\n          databaseId\n          ...ReopenedEvent\n        }\n        ... on MergedEvent {\n          databaseId\n          ...MergedEvent_mergedEvent\n        }\n        ... on ReviewDismissedEvent {\n          databaseId\n          ...ReviewDismissedEvent_reviewDismissedEvent\n        }\n        ... on ReviewRequestedEvent {\n          databaseId\n          ...ReviewRequestedEvent_reviewRequestedEvent\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasPreviousPage\n      startCursor\n    }\n  }\n  id\n}\n\nfragment ActivityView_pullRequest_forwardPagination_4k2445 on PullRequest {\n  viewerCanComment\n  forwardTimeline: timelineItems(first: $timelinePageSize, visibleEventsOnly: true, itemTypes: [ISSUE_COMMENT, PULL_REQUEST_REVIEW, PULL_REQUEST_COMMIT, BASE_REF_FORCE_PUSHED_EVENT, HEAD_REF_FORCE_PUSHED_EVENT, CLOSED_EVENT, REOPENED_EVENT, MERGED_EVENT, REVIEW_DISMISSED_EVENT, REVIEW_REQUESTED_EVENT]) {\n    totalCount\n    edges {\n      node {\n        __typename\n        ...IssueComment_issueComment\n        ...PullRequestReview_pullRequestReview\n        ...ReactionViewerGroups\n        ... on IssueComment {\n          databaseId\n        }\n        ... on PullRequestReview {\n          databaseId\n        }\n        ... on PullRequestCommit {\n          ...PullRequestCommit_pullRequestCommit\n        }\n        ... on BaseRefForcePushedEvent {\n          databaseId\n          ...BaseRefForcePushedEvent_baseRefForcePushedEvent\n        }\n        ... on HeadRefForcePushedEvent {\n          databaseId\n          ...HeadRefForcePushedEvent_headRefForcePushedEvent\n        }\n        ... on ClosedEvent {\n          databaseId\n          ...ClosedEvent\n        }\n        ... on ReopenedEvent {\n          databaseId\n          ...ReopenedEvent\n        }\n        ... on MergedEvent {\n          databaseId\n          ...MergedEvent_mergedEvent\n        }\n        ... on ReviewDismissedEvent {\n          databaseId\n          ...ReviewDismissedEvent_reviewDismissedEvent\n        }\n        ... on ReviewRequestedEvent {\n          databaseId\n          ...ReviewRequestedEvent_reviewRequestedEvent\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n  id\n}\n\nfragment ActivityView_viewer on User {\n  login\n  ...Thread_viewer\n}\n\nfragment BaseRefForcePushedEvent_baseRefForcePushedEvent on BaseRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment ClosedEvent on ClosedEvent {\n  databaseId\n  createdAt\n  stateReason\n  closingProjectItemStatus\n  closer {\n    __typename\n    ... on ProjectV2 {\n      url\n      title\n    }\n    ... on PullRequest {\n      url\n      number\n      repository {\n        name\n        owner {\n          __typename\n          login\n          id\n        }\n        id\n      }\n    }\n    ... on Commit {\n      url\n      abbreviatedOid\n      repository {\n        name\n        owner {\n          __typename\n          login\n          id\n        }\n        id\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment FilesChangedListing_pullRequest on PullRequest {\n  comparison(endOid: $endOid, startOid: $startOid) {\n    linesAdded\n    linesDeleted\n    summary {\n      path\n      ...FilesChangedRow_pullRequestSummaryDelta\n    }\n  }\n  resourcePath\n}\n\nfragment FilesChangedRow_pullRequestSummaryDelta on PullRequestSummaryDelta {\n  additions\n  changeType\n  deletions\n  path\n  pathDigest\n  unresolvedCommentCount\n}\n\nfragment HeadRefForcePushedEvent_headRefForcePushedEvent on HeadRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment IssueCommentEditorBodyFragment on IssueComment {\n  id\n  body\n  bodyVersion\n  author {\n    __typename\n    login\n    avatarUrl\n    id\n  }\n  issue {\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  ...IssueCommentHeader\n}\n\nfragment IssueCommentEditor_repository on IssueComment {\n  repository {\n    slashCommandsEnabled\n    nameWithOwner\n    databaseId\n    id\n  }\n}\n\nfragment IssueCommentHeader on IssueComment {\n  id\n  databaseId\n  url\n  createdAt\n  body\n  authorAssociation\n  viewerCanUpdate\n  viewerCanDelete\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n  isHidden: isMinimized\n  minimizedReason\n  createdViaEmail\n  viewerDidAuthor\n  authorToRepoOwnerSponsorship {\n    createdAt\n    isActive\n    id\n  }\n  author {\n    __typename\n    id\n    login\n  }\n  repository {\n    id\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n    isPrivate\n  }\n  issue {\n    number\n    id\n  }\n  ...MarkdownEditHistoryViewer_comment\n}\n\nfragment IssueCommentViewerCommentRow on IssueComment {\n  id\n  databaseId\n  ...IssueCommentViewerMarkdownViewer\n  ...IssueCommentHeader\n  author {\n    avatarUrl\n    login\n    __typename\n    id\n  }\n  issue {\n    id\n    locked\n  }\n  body\n  isHidden: isMinimized\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerMarkdownViewer on IssueComment {\n  id\n  body\n  bodyHTML(unfurlReferences: true)\n  bodyVersion\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment IssueComment_issueComment on IssueComment {\n  ...IssueCommentViewerCommentRow\n  ...IssueCommentViewerReactable\n  ...IssueCommentEditor_repository\n  ...IssueCommentEditorBodyFragment\n  issue {\n    id\n  }\n  id\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment MergedEvent_mergedEvent on MergedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  mergeCommit: commit {\n    abbreviatedOid\n    oid\n    id\n  }\n  mergeRefName\n  viaMergeQueue\n  viaMergeQueueAPI\n  createdAt\n  databaseId\n}\n\nfragment PullRequestCommentActionButtons_pullRequest on PullRequest {\n  viewerCanClose\n  viewerCanReopen\n  state\n  id\n}\n\nfragment PullRequestCommentComposer_pullRequest on PullRequest {\n  id\n  locked\n  viewerCanComment\n  viewerCanClose\n  viewerCanReopen\n  databaseId\n  repository {\n    databaseId\n    isArchived\n    nameWithOwner\n    slashCommandsEnabled\n    securityPolicyUrl\n    contributingFileUrl\n    codeOfConductFileUrl\n    visibility\n    id\n  }\n  state\n  ...PullRequestCommentActionButtons_pullRequest\n}\n\nfragment PullRequestCommit_pullRequestCommit on PullRequestCommit {\n  commit {\n    abbreviatedOid\n    oid\n    message\n    authoredDate\n    verificationStatus\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment PullRequestReviewHeaderAndComment_pullRequestReview on PullRequestReview {\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n  id\n  databaseId\n  author {\n    __typename\n    id\n    avatarUrl(size: 64)\n    login\n    ...TimelineRowEventActor\n  }\n  authorAssociation\n  bodyHTML\n  bodyText\n  createdAt\n  pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  onBehalfOf(first: 10) {\n    edges {\n      node {\n        organization {\n          name\n          id\n        }\n        name\n        url\n        id\n      }\n    }\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  dismissedReviewState\n  state\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n}\n\nfragment PullRequestReview_pullRequestReview on PullRequestReview {\n  ...PullRequestReviewHeaderAndComment_pullRequestReview\n  databaseId\n  bodyText\n  id\n  pullRequestThreadsAndReplies(first: 100) {\n    edges {\n      node {\n        __typename\n        ... on PullRequestThread {\n          id\n          ...Thread_pullRequestThread\n          comments(first: 50) {\n            totalCount\n          }\n        }\n        ... on PullRequestReviewComment {\n          id\n          ...ReviewComment_pullRequestReviewComment\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment ReopenedEvent on ReopenedEvent {\n  databaseId\n  createdAt\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n}\n\nfragment ReviewComment_pullRequestReviewComment on PullRequestReviewComment {\n  id\n  currentDiffResourcePath\n  path\n  pullRequestThread {\n    id\n    isOutdated\n    isResolved\n  }\n  ...ReactionViewerGroups\n  ...useFetchThread_PullRequestReviewComment\n}\n\nfragment ReviewDismissedEvent_reviewDismissedEvent on ReviewDismissedEvent {\n  actor {\n    __typename\n    login\n    ...TimelineRowEventActor\n    id\n  }\n  pullRequestCommit {\n    commit {\n      abbreviatedOid\n      id\n    }\n    resourcePath\n    id\n  }\n  review {\n    fullDatabaseId\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  dismissalMessageHTML\n  createdAt\n  databaseId\n}\n\nfragment ReviewRequestedEvent_reviewRequestedEvent on ReviewRequestedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  requestedReviewAssignedFromTeamName\n  reviewRequest {\n    codeOwnersResourcePath\n    requestedReviewer {\n      __typename\n      ... on User {\n        login\n        resourcePath\n      }\n      ... on Team {\n        combinedSlug\n        resourcePath\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    id\n  }\n  createdAt\n  databaseId\n}\n\nfragment ThreadHeader_pullRequestThread on PullRequestThread {\n  id\n  isOutdated\n  isResolved\n  line\n  path\n}\n\nfragment Thread_pullRequestThread on PullRequestThread {\n  ...ThreadHeader_pullRequestThread\n  id\n  currentDiffResourcePath\n  isOutdated\n  isResolved\n  path\n  subject {\n    __typename\n    ... on PullRequestDiffThread {\n      originalStartLine\n      originalEndLine\n      startLine\n      endLine\n      startDiffSide\n      endDiffSide\n      diffLines(maxContextLines: 3) {\n        left\n        right\n        html\n        text\n        type\n      }\n    }\n  }\n  subjectType\n  viewerCanReply\n  comments(first: 50) {\n    edges {\n      node {\n        ...useFetchThread_PullRequestReviewComment\n        ...ReactionViewerGroups\n        id\n      }\n    }\n  }\n}\n\nfragment Thread_viewer on User {\n  avatarUrl\n  login\n  isSiteAdmin\n  pullRequestUserPreferences {\n    tabSize\n    diffView\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "b0f125991160e607a64d9407db9c01b3": "mutation deleteIssueCommentMutation(\n  $input: DeleteIssueCommentInput!\n) {\n  deleteIssueComment(input: $input) {\n    clientMutationId\n    issueComment {\n      id\n    }\n  }\n}\n",
  "b104e6fdeae0d0d55a66898768241b2b": "mutation updatePullRequestBranchMutation(\n  $input: UpdatePullRequestBranchInput!\n  $mergeMethod: PullRequestMergeMethod\n) {\n  updatePullRequestBranch(input: $input) {\n    pullRequest {\n      ...useLoadMergeBoxQuery_pullRequest\n      id\n    }\n  }\n}\n\nfragment useLoadMergeBoxQuery_pullRequest on PullRequest {\n  autoMergeRequest {\n    mergeMethod\n  }\n  baseRefName\n  commits {\n    totalCount\n  }\n  headRefOid\n  headRefName\n  headRepository {\n    owner {\n      __typename\n      login\n      id\n    }\n    name\n    id\n  }\n  id\n  isDraft\n  isInMergeQueue\n  latestOpinionatedReviews(first: 100) {\n    edges {\n      node {\n        authorCanPushToRepository\n        author {\n          __typename\n          login\n          avatarUrl\n          name\n          url\n          id\n        }\n        onBehalfOf(first: 10) {\n          edges {\n            node {\n              name\n              id\n            }\n          }\n        }\n        state\n        id\n      }\n    }\n  }\n  mergeQueueEntry {\n    position\n    state\n    id\n  }\n  mergeQueue {\n    url\n    id\n  }\n  mergeRequirements(mergeMethod: $mergeMethod) {\n    commitAuthor\n    commitMessageBody\n    commitMessageHeadline\n    state\n    conditions {\n      __typename\n      message\n      result\n      ... on PullRequestRulesCondition {\n        ruleRollups {\n          __typename\n          message\n          ruleType\n          result\n          ... on PullRequestRuleRollup {\n            failureReasons\n            requiredReviewers\n            requiresCodeowners\n          }\n        }\n      }\n      ... on PullRequestMergeConflictStateCondition {\n        __typename\n        conflicts\n        isConflictResolvableInWeb\n        result\n      }\n    }\n  }\n  mergeStateStatus\n  resourcePath\n  state\n  viewerCanAddAndRemoveFromMergeQueue\n  viewerCanDeleteHeadRef\n  viewerCanDisableAutoMerge\n  viewerCanEnableAutoMerge\n  viewerCanRestoreHeadRef\n  viewerCanUpdate\n  viewerCanUpdateBranch\n  viewerDidAuthor\n  viewerMergeActions {\n    name\n    isAllowable\n    mergeMethods {\n      name\n      isAllowable\n      isAllowableWithBypass\n    }\n  }\n  stateChannel: updatesChannel(name: STATE)\n  deployedChannel: updatesChannel(name: DEPLOYED)\n  reviewStateChannel: updatesChannel(name: REVIEW_STATE)\n  workflowsChannel: updatesChannel(name: WORKFLOWS)\n  mergeQueueChannel: updatesChannel(name: MERGE_QUEUE)\n  headRefChannel: updatesChannel(name: HEAD_REF)\n  baseRefChannel: updatesChannel(name: BASE_REF)\n  commitHeadShaChannel: updatesChannel(name: COMMIT_HEAD_SHA)\n  gitMergeStateChannel: updatesChannel(name: GIT_MERGE_STATE)\n}\n",
  "b1fe9d0572d4f9142f3e0dbe540e3639": "mutation updatePullRequestMutation(\n  $input: UpdatePullRequestInput!\n) {\n  updatePullRequest(input: $input) {\n    pullRequest {\n      ...Description_pullRequest\n      id\n    }\n  }\n}\n\nfragment Description_pullRequest on PullRequest {\n  id\n  databaseId\n  bodyVersion\n  ...IssueBodyHeader\n  repository {\n    databaseId\n    nameWithOwner\n    slashCommandsEnabled\n    id\n  }\n  viewerCanUpdate\n  locked\n  body\n  bodyHTML(unfurlReferences: true)\n  ...IssueBodyViewerReactable\n  ...IssueBodyViewer\n}\n\nfragment IssueBodyHeader on Comment {\n  __isComment: __typename\n  ...IssueBodyHeaderActions_comment\n  createdAt\n  viewerDidAuthor\n  author {\n    __typename\n    ...IssueBodyHeaderAuthor\n    ...IssueBodyHeaderActions\n    id\n  }\n}\n\nfragment IssueBodyHeaderActions on Actor {\n  __isActor: __typename\n  login\n  id\n}\n\nfragment IssueBodyHeaderActions_comment on Comment {\n  __isComment: __typename\n  body\n}\n\nfragment IssueBodyHeaderAuthor on Actor {\n  __isActor: __typename\n  login\n  avatarUrl\n  profileUrl\n}\n\nfragment IssueBodyViewer on Comment {\n  __isComment: __typename\n  id\n}\n\nfragment IssueBodyViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n",
  "b41422b226bba3d19bb8acbc53414315": "mutation restorePullRequestHeadRefMutation(\n  $id: ID!\n) {\n  restorePullRequestHeadRef(input: {pullRequestId: $id}) {\n    pullRequest {\n      id\n      state\n      headRefName\n      headRepository {\n        owner {\n          __typename\n          login\n          id\n        }\n        name\n        id\n      }\n      viewerCanDeleteHeadRef\n      viewerCanRestoreHeadRef\n      viewerCanReopen\n    }\n  }\n}\n",
  "b8a88600703cb3e88f9090a1e90170ac": "mutation addPullRequestReviewThreadMutation(\n  $input: AddPullRequestReviewThreadInput!\n  $filePath: String\n) {\n  addPullRequestReviewThread(input: $input) {\n    pullRequestThread {\n      id\n      diffSide\n      isOutdated\n      line\n      startDiffSide\n      startLine\n      viewerCanReply\n      ...ThreadPreview_pullRequestThread\n      ...PullRequestMarkers_pullRequestThread\n      comments(first: 50) {\n        edges {\n          node {\n            ...useFetchThread_PullRequestReviewComment\n            id\n            __typename\n          }\n          cursor\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        totalCount\n      }\n      pullRequest {\n        threads(first: 50, isPositioned: false, subjectType: FILE, path: $filePath) {\n          totalCommentsCount\n          edges {\n            __typename\n            cursor\n            node {\n              __typename\n              id\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n        ...OpenCommentsPanelButton_pullRequest\n        viewerPendingReview {\n          id\n          ...PullRequestReview_pullRequestReview\n          comments {\n            totalCount\n          }\n        }\n        id\n      }\n    }\n    errors {\n      __typename\n      shortMessage\n    }\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment OpenCommentsPanelButton_pullRequest on PullRequest {\n  allThreads: threads(first: 50, isPositioned: false) {\n    totalCommentsCount\n  }\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment PullRequestMarkers_pullRequestThread on PullRequestThread {\n  id\n  isResolved\n  pathDigest\n  path\n  line\n  firstComment: comments(first: 1) {\n    edges {\n      node {\n        databaseId\n        id\n      }\n    }\n  }\n}\n\nfragment PullRequestReviewHeaderAndComment_pullRequestReview on PullRequestReview {\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n  id\n  databaseId\n  author {\n    __typename\n    id\n    avatarUrl(size: 64)\n    login\n    ...TimelineRowEventActor\n  }\n  authorAssociation\n  bodyHTML\n  bodyText\n  createdAt\n  pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  onBehalfOf(first: 10) {\n    edges {\n      node {\n        organization {\n          name\n          id\n        }\n        name\n        url\n        id\n      }\n    }\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  dismissedReviewState\n  state\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n}\n\nfragment PullRequestReview_pullRequestReview on PullRequestReview {\n  ...PullRequestReviewHeaderAndComment_pullRequestReview\n  databaseId\n  bodyText\n  id\n  pullRequestThreadsAndReplies(first: 100) {\n    edges {\n      node {\n        __typename\n        ... on PullRequestThread {\n          id\n          ...Thread_pullRequestThread\n          comments(first: 50) {\n            totalCount\n          }\n        }\n        ... on PullRequestReviewComment {\n          id\n          ...ReviewComment_pullRequestReviewComment\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment ReviewComment_pullRequestReviewComment on PullRequestReviewComment {\n  id\n  currentDiffResourcePath\n  path\n  pullRequestThread {\n    id\n    isOutdated\n    isResolved\n  }\n  ...ReactionViewerGroups\n  ...useFetchThread_PullRequestReviewComment\n}\n\nfragment ThreadHeader_pullRequestThread on PullRequestThread {\n  id\n  isOutdated\n  isResolved\n  line\n  path\n}\n\nfragment ThreadPreview_pullRequestThread on PullRequestThread {\n  ...ThreadHeader_pullRequestThread\n  id\n  isOutdated\n  isResolved\n  path\n  subject {\n    __typename\n    ... on PullRequestDiffThread {\n      originalStartLine\n      originalEndLine\n      startDiffSide\n      endDiffSide\n      diffLines(maxContextLines: 3) {\n        left\n        right\n        html\n        text\n        type\n      }\n    }\n  }\n  threadPreviewComments: comments(first: 50) {\n    edges {\n      node {\n        author {\n          __typename\n          login\n          avatarUrl\n          id\n        }\n        id\n      }\n    }\n  }\n  firstComment: comments(first: 1) {\n    edges {\n      node {\n        id\n        ...useFetchThread_PullRequestReviewComment\n        ...MarkdownEditHistoryViewer_comment\n        ...ReactionViewerGroups\n        repository {\n          isPrivate\n          id\n        }\n        reference: pullRequest {\n          number\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment Thread_pullRequestThread on PullRequestThread {\n  ...ThreadHeader_pullRequestThread\n  id\n  currentDiffResourcePath\n  isOutdated\n  isResolved\n  path\n  subject {\n    __typename\n    ... on PullRequestDiffThread {\n      originalStartLine\n      originalEndLine\n      startLine\n      endLine\n      startDiffSide\n      endDiffSide\n      diffLines(maxContextLines: 3) {\n        left\n        right\n        html\n        text\n        type\n      }\n    }\n  }\n  subjectType\n  viewerCanReply\n  comments(first: 50) {\n    edges {\n      node {\n        ...useFetchThread_PullRequestReviewComment\n        ...ReactionViewerGroups\n        id\n      }\n    }\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "bd2237f0aeda5e4d5d3a6b3a1195397f": "query FileConversationsButtonTestQuery(\n  $pullRequestId: ID!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      comparison {\n        diffEntries(first: 20) {\n          nodes {\n            ...FileConversationsButton_diffEntry\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n  viewer {\n    ...FileConversationsButton_viewer\n    id\n  }\n}\n\nfragment FileConversationsButton_diffEntry on PullRequestDiffEntry {\n  path\n  outdatedThreads: threads(first: 50, subjectType: LINE, outdatedFilter: ONLY_OUTDATED) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n  threads(first: 50, subjectType: FILE) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment FileConversationsButton_viewer on User {\n  login\n  avatarUrl(size: 48)\n}\n",
  "bd71f79d8bf315bc000626d1bfa4a953": "query CommitDiffHeadingTestQuery(\n  $commitId: ID!\n) {\n  commit: node(id: $commitId) {\n    __typename\n    ...CommitDiffHeading_commit\n    id\n  }\n  viewer {\n    ...CommitDiffHeading_viewer\n    id\n  }\n}\n\nfragment CommitDiffHeading_commit on Commit {\n  abbreviatedOid\n  authoredByCommitter\n  committedDate\n  committedViaWeb\n  hasSignature\n  messageHeadlineHTML\n  messageBodyHTML\n  oid\n  verificationStatus\n  authors(first: 3) {\n    edges {\n      node {\n        user {\n          avatarUrl\n          login\n          name\n          resourcePath\n          id\n        }\n      }\n    }\n  }\n  committer {\n    user {\n      avatarUrl\n      login\n      name\n      resourcePath\n      id\n    }\n  }\n  repository {\n    owner {\n      __typename\n      login\n      id\n    }\n    name\n    id\n  }\n  statusCheckRollup {\n    shortText\n    state\n    id\n  }\n  signature {\n    __typename\n    state\n    signer {\n      login\n      avatarUrl\n      id\n    }\n    wasSignedByGitHub\n    ... on GpgSignature {\n      __typename\n      keyId\n    }\n    ... on SmimeSignature {\n      __typename\n      issuer {\n        commonName\n        emailAddress\n        organization\n        organizationUnit\n      }\n      subject {\n        commonName\n        emailAddress\n        organization\n        organizationUnit\n      }\n    }\n    ... on SshSignature {\n      __typename\n      keyFingerprint\n    }\n  }\n}\n\nfragment CommitDiffHeading_viewer on User {\n  login\n}\n",
  "c30cc9ed82dd36123bd4173528be767d": "mutation MergeSection_enablePullRequestAutoMergeMutation(\n  $input: EnablePullRequestAutoMergeInput!\n) {\n  enablePullRequestAutoMerge(input: $input) {\n    pullRequest {\n      autoMergeRequest {\n        mergeMethod\n      }\n      viewerCanDisableAutoMerge\n      isInMergeQueue\n      id\n    }\n  }\n}\n",
  "c424ec3dba20babb2353e3a89cddf38c": "query CommitsDropdownTestQuery(\n  $pullRequestId: ID!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ...CommitsDropdown_pullRequest\n    id\n  }\n}\n\nfragment CommitsDropdown_pullRequest on PullRequest {\n  ...CommitsSelector_pullRequest\n  baseRefOid\n  commits(first: 100) {\n    edges {\n      node {\n        commit {\n          oid\n          id\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment CommitsSelector_pullRequest on PullRequest {\n  baseRefOid\n  commits(first: 100) {\n    edges {\n      node {\n        commit {\n          abbreviatedOid\n          committedDate\n          messageHeadline\n          oid\n          author {\n            actor {\n              __typename\n              login\n              id\n            }\n          }\n          id\n        }\n        id\n      }\n    }\n  }\n}\n",
  "c4519233ea4e3ea90360ce6a12e40207": "query CodeownersToBeAssignedQuery(\n  $pullRequestId: ID!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...CodeownersToBeAssigned_pullRequest\n    }\n    id\n  }\n}\n\nfragment CodeownersToBeAssigned_pullRequest on PullRequest {\n  codeowners {\n    __typename\n    ... on User {\n      avatarUrl\n      id\n      login\n      url\n      __typename\n    }\n    ... on Team {\n      teamAvatarUrl: avatarUrl\n      combinedSlug\n      id\n      name\n      url\n      organization {\n        name\n        id\n      }\n      __typename\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n}\n",
  "c4aa7b560d8ddc01b79a2e5432ad7ce6": "mutation updateSavedViewMutation(\n  $input: UpdateSavedViewInput!\n) {\n  updateSavedView(input: $input) {\n    savedView {\n      id\n      query\n      name\n    }\n  }\n}\n",
  "cc2dfdd4807633d71341d55e85bdcec5": "mutation blockUserFromOrganizationMutation(\n  $input: BlockUserFromOrganizationInput!\n) {\n  blockUserFromOrganization(input: $input) {\n    clientMutationId\n  }\n}\n",
  "cedc3455cf4c00cd3d46ae91848e9d5e": "query PullRequestReviewTestQuery(\n  $pullRequestReviewId: ID!\n) {\n  pullRequestReview: node(id: $pullRequestReviewId) {\n    __typename\n    ...PullRequestReview_pullRequestReview\n    id\n  }\n  viewer {\n    ...Thread_viewer\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment PullRequestReviewHeaderAndComment_pullRequestReview on PullRequestReview {\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n  id\n  databaseId\n  author {\n    __typename\n    id\n    avatarUrl(size: 64)\n    login\n    ...TimelineRowEventActor\n  }\n  authorAssociation\n  bodyHTML\n  bodyText\n  createdAt\n  pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  onBehalfOf(first: 10) {\n    edges {\n      node {\n        organization {\n          name\n          id\n        }\n        name\n        url\n        id\n      }\n    }\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  dismissedReviewState\n  state\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n}\n\nfragment PullRequestReview_pullRequestReview on PullRequestReview {\n  ...PullRequestReviewHeaderAndComment_pullRequestReview\n  databaseId\n  bodyText\n  id\n  pullRequestThreadsAndReplies(first: 100) {\n    edges {\n      node {\n        __typename\n        ... on PullRequestThread {\n          id\n          ...Thread_pullRequestThread\n          comments(first: 50) {\n            totalCount\n          }\n        }\n        ... on PullRequestReviewComment {\n          id\n          ...ReviewComment_pullRequestReviewComment\n        }\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment ReviewComment_pullRequestReviewComment on PullRequestReviewComment {\n  id\n  currentDiffResourcePath\n  path\n  pullRequestThread {\n    id\n    isOutdated\n    isResolved\n  }\n  ...ReactionViewerGroups\n  ...useFetchThread_PullRequestReviewComment\n}\n\nfragment ThreadHeader_pullRequestThread on PullRequestThread {\n  id\n  isOutdated\n  isResolved\n  line\n  path\n}\n\nfragment Thread_pullRequestThread on PullRequestThread {\n  ...ThreadHeader_pullRequestThread\n  id\n  currentDiffResourcePath\n  isOutdated\n  isResolved\n  path\n  subject {\n    __typename\n    ... on PullRequestDiffThread {\n      originalStartLine\n      originalEndLine\n      startLine\n      endLine\n      startDiffSide\n      endDiffSide\n      diffLines(maxContextLines: 3) {\n        left\n        right\n        html\n        text\n        type\n      }\n    }\n  }\n  subjectType\n  viewerCanReply\n  comments(first: 50) {\n    edges {\n      node {\n        ...useFetchThread_PullRequestReviewComment\n        ...ReactionViewerGroups\n        id\n      }\n    }\n  }\n}\n\nfragment Thread_viewer on User {\n  avatarUrl\n  login\n  isSiteAdmin\n  pullRequestUserPreferences {\n    tabSize\n    diffView\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n",
  "cfcd8cac039c644f757da61ea7831ab0": "mutation requestReviewsMutation(\n  $input: RequestReviewsInput!\n) {\n  requestReviews(input: $input) {\n    pullRequest {\n      ...ReviewRequestDetails_pullRequest\n      id\n    }\n  }\n}\n\nfragment ReviewRequestDetails_pullRequest on PullRequest {\n  id\n  reviewRequests(first: 100) {\n    edges {\n      node {\n        asCodeOwner\n        assignedFromReviewRequest {\n          requestedReviewer {\n            __typename\n            ... on Team {\n              id\n              __typename\n              name\n            }\n            ... on User {\n              id\n              login\n              __typename\n            }\n            ... on Node {\n              __isNode: __typename\n              id\n            }\n          }\n          asCodeOwner\n          id\n        }\n        requestedReviewer {\n          __typename\n          ... on User {\n            id\n            avatarUrl\n            login\n            url\n            __typename\n          }\n          ... on Team {\n            combinedSlug\n            id\n            teamAvatarUrl: avatarUrl\n            name\n            url\n            organization {\n              name\n              id\n            }\n            __typename\n          }\n          ... on Node {\n            __isNode: __typename\n            id\n          }\n        }\n        id\n      }\n    }\n  }\n}\n",
  "d20f12f4a00387b8eb9c301e73f5f31f": "query OpenCommentsPanelButtonTestQuery(\n  $pullRequestId: ID!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...OpenCommentsPanelButton_pullRequest\n    }\n    id\n  }\n}\n\nfragment OpenCommentsPanelButton_pullRequest on PullRequest {\n  allThreads: threads(first: 50, isPositioned: false) {\n    totalCommentsCount\n  }\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n",
  "d428ae3fc522474117ec5a6a4b300a04": "query PullRequestCommentComposerTestQuery(\n  $id: ID!\n) {\n  pullRequest: node(id: $id) {\n    __typename\n    ... on PullRequest {\n      backwardTimeline: timelineItems(last: 10, itemTypes: [ISSUE_COMMENT, PULL_REQUEST_REVIEW]) {\n        edges {\n          node {\n            __typename\n            ...IssueComment_issueComment\n            ...ReactionViewerGroups\n            ... on Node {\n              __isNode: __typename\n              id\n            }\n          }\n          cursor\n        }\n        pageInfo {\n          hasPreviousPage\n          startCursor\n        }\n      }\n      ...PullRequestCommentComposer_pullRequest\n    }\n    id\n  }\n}\n\nfragment IssueCommentEditorBodyFragment on IssueComment {\n  id\n  body\n  bodyVersion\n  author {\n    __typename\n    login\n    avatarUrl\n    id\n  }\n  issue {\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  ...IssueCommentHeader\n}\n\nfragment IssueCommentEditor_repository on IssueComment {\n  repository {\n    slashCommandsEnabled\n    nameWithOwner\n    databaseId\n    id\n  }\n}\n\nfragment IssueCommentHeader on IssueComment {\n  id\n  databaseId\n  url\n  createdAt\n  body\n  authorAssociation\n  viewerCanUpdate\n  viewerCanDelete\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n  isHidden: isMinimized\n  minimizedReason\n  createdViaEmail\n  viewerDidAuthor\n  authorToRepoOwnerSponsorship {\n    createdAt\n    isActive\n    id\n  }\n  author {\n    __typename\n    id\n    login\n  }\n  repository {\n    id\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n    isPrivate\n  }\n  issue {\n    number\n    id\n  }\n  ...MarkdownEditHistoryViewer_comment\n}\n\nfragment IssueCommentViewerCommentRow on IssueComment {\n  id\n  databaseId\n  ...IssueCommentViewerMarkdownViewer\n  ...IssueCommentHeader\n  author {\n    avatarUrl\n    login\n    __typename\n    id\n  }\n  issue {\n    id\n    locked\n  }\n  body\n  isHidden: isMinimized\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerMarkdownViewer on IssueComment {\n  id\n  body\n  bodyHTML(unfurlReferences: true)\n  bodyVersion\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment IssueComment_issueComment on IssueComment {\n  ...IssueCommentViewerCommentRow\n  ...IssueCommentViewerReactable\n  ...IssueCommentEditor_repository\n  ...IssueCommentEditorBodyFragment\n  issue {\n    id\n  }\n  id\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment PullRequestCommentActionButtons_pullRequest on PullRequest {\n  viewerCanClose\n  viewerCanReopen\n  state\n  id\n}\n\nfragment PullRequestCommentComposer_pullRequest on PullRequest {\n  id\n  locked\n  viewerCanComment\n  viewerCanClose\n  viewerCanReopen\n  databaseId\n  repository {\n    databaseId\n    isArchived\n    nameWithOwner\n    slashCommandsEnabled\n    securityPolicyUrl\n    contributingFileUrl\n    codeOfConductFileUrl\n    visibility\n    id\n  }\n  state\n  ...PullRequestCommentActionButtons_pullRequest\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n",
  "d821d9ea1c116ca7284a231f03813357": "query FileFilterQuery(\n  $owner: String!\n  $repo: String!\n  $number: Int!\n  $startOid: String\n  $endOid: String\n  $singleCommitOid: String\n) {\n  repository(owner: $owner, name: $repo) {\n    pullRequest(number: $number) {\n      comparison(endOid: $endOid, startOid: $startOid, singleCommitOid: $singleCommitOid) {\n        summary {\n          path\n          pathDigest\n          pathOwnership {\n            isOwnedByViewer\n          }\n          viewerViewedState\n        }\n      }\n      id\n    }\n    id\n  }\n}\n",
  "d846d130cdf969d19dc1bd9e1346dc8b": "query SuggestedReviewersQuery(\n  $pullRequestId: ID!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...SuggestedReviewers_pullRequest\n    }\n    id\n  }\n}\n\nfragment SuggestedReviewers_pullRequest on PullRequest {\n  id\n  state\n  suggestedReviewers {\n    reviewer {\n      id\n      avatarUrl\n      login\n      url\n    }\n  }\n  viewerCanUpdate\n}\n",
  "d99cd5cd67ee9032de1d77906324bdc4": "query HeadRefForcePushedEventStoryQuery(\n  $id: ID!\n) {\n  headRefForcePushedEvent: node(id: $id) {\n    __typename\n    ...HeadRefForcePushedEvent_headRefForcePushedEvent\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment HeadRefForcePushedEvent_headRefForcePushedEvent on HeadRefForcePushedEvent {\n  databaseId\n  refName\n  beforeCommit {\n    abbreviatedOid\n    oid\n    id\n  }\n  afterCommit {\n    abbreviatedOid\n    oid\n    authoredDate\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "dc5d2659a1a7ee448a5a195852254d85": "query BlobActionsMenuTestQuery(\n  $pullRequestId: ID!\n  $singleCommitOid: String\n  $endOid: String\n  $startOid: String\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...BlobActionsMenu_pullRequest\n      comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n        diffEntries(first: 20) {\n          nodes {\n            ...BlobActionsMenu_diffEntry\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment BlobActionsMenu_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  oid\n  status\n  isSubmodule\n  isBinary\n  isLfsPointer\n}\n\nfragment BlobActionsMenu_pullRequest on PullRequest {\n  id\n  number\n  headRefName\n  headRepository {\n    nameWithOwner\n    id\n  }\n  baseRepository {\n    nameWithOwner\n    id\n  }\n  viewerCanEditFiles\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n  }\n}\n",
  "dfe2daef1c505c94ba363c2d4334c83b": "mutation resolvePullRequestThreadMutation(\n  $id: ID!\n) {\n  resolvePullRequestThread(input: {threadId: $id}) {\n    thread {\n      resolvedByActor {\n        __typename\n        login\n        id\n      }\n      id\n      isResolved\n      viewerCanResolve\n      viewerCanUnresolve\n      path\n      comments {\n        totalCount\n      }\n    }\n  }\n}\n",
  "e5e0edb0e02ce6dfbed8262e1caf64bd": "query PullRequestCommitWithoutVerificationStoryQuery(\n  $id: ID!\n) {\n  pullRequestCommit: node(id: $id) {\n    __typename\n    ...PullRequestCommit_pullRequestCommit\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment PullRequestCommit_pullRequestCommit on PullRequestCommit {\n  commit {\n    abbreviatedOid\n    oid\n    message\n    authoredDate\n    verificationStatus\n    authors(first: 1) {\n      edges {\n        node {\n          user {\n            ...TimelineRowEventActor\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "e6c1fca01faedb32fffb77a1cdc54c61": "query DiffLinesTestQuery(\n  $injectedContextLines: [DiffLineRange!]\n  $inlineThreadCount: Int = 20\n) {\n  viewer {\n    ...DiffLines_viewer\n    id\n  }\n  pullRequest: node(id: \"test-id\") {\n    __typename\n    ... on PullRequest {\n      comparison {\n        diffEntries(first: 20) {\n          nodes {\n            ...DiffLines_diffEntry\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment DiffLines_diffEntry on PullRequestDiffEntry {\n  id\n  diffLines(injectedContextLines: $injectedContextLines) {\n    left\n    right\n    blobLineNumber\n    html\n    type\n    text\n    threads(first: $inlineThreadCount) {\n      totalCount\n      totalCommentsCount\n      edges {\n        node {\n          diffSide\n          id\n          isOutdated\n          line\n          startDiffSide\n          startLine\n          comments(first: 50) {\n            totalCount\n            edges {\n              node {\n                author {\n                  __typename\n                  avatarUrl(size: 48)\n                  login\n                  id\n                }\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment DiffLines_viewer on User {\n  avatarUrl(size: 48)\n  isSiteAdmin\n  login\n  pullRequestUserPreferences {\n    diffView\n    tabSize\n  }\n}\n",
  "e8df2ecef95b839e26dd1915df419f88": "mutation updateTitleAndBaseBranchMutation(\n  $id: ID!\n  $newTitle: String!\n  $newBaseBranch: String\n  $singleCommitOid: String = null\n  $diffEntryCount: Int = 5\n  $diffEntryCursor: String\n  $endOid: String = null\n  $injectedContextLines: [DiffLineRange!]\n  $inlineThreadCount: Int = 20\n  $startOid: String = null\n  $titleChanged: Boolean!\n  $baseBranchChanged: Boolean!\n  $isSingleCommit: Boolean = false\n) {\n  updatePullRequest(input: {pullRequestId: $id, title: $newTitle, baseRefName: $newBaseBranch}) {\n    pullRequest {\n      id\n      baseRefName @include(if: $baseBranchChanged)\n      ...DiffsWithComments_pullRequest @include(if: $baseBranchChanged)\n      ...FileTree_pullRequest @include(if: $baseBranchChanged)\n      title @include(if: $titleChanged)\n      titleHTML @include(if: $titleChanged)\n    }\n  }\n}\n\nfragment BlobActionsMenu_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  oid\n  status\n  isSubmodule\n  isBinary\n  isLfsPointer\n}\n\nfragment BlobActionsMenu_pullRequest on PullRequest {\n  id\n  number\n  headRefName\n  headRepository {\n    nameWithOwner\n    id\n  }\n  baseRepository {\n    nameWithOwner\n    id\n  }\n  viewerCanEditFiles\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n  }\n}\n\nfragment CodeownersBadge_pathOwnership on PathOwnership {\n  pathOwners {\n    name\n  }\n  ruleLineNumber\n  ruleUrl\n  isOwnedByViewer\n}\n\nfragment CommitDiffHeading_commit on Commit {\n  abbreviatedOid\n  authoredByCommitter\n  committedDate\n  committedViaWeb\n  hasSignature\n  messageHeadlineHTML\n  messageBodyHTML\n  oid\n  verificationStatus\n  authors(first: 3) {\n    edges {\n      node {\n        user {\n          avatarUrl\n          login\n          name\n          resourcePath\n          id\n        }\n      }\n    }\n  }\n  committer {\n    user {\n      avatarUrl\n      login\n      name\n      resourcePath\n      id\n    }\n  }\n  repository {\n    owner {\n      __typename\n      login\n      id\n    }\n    name\n    id\n  }\n  statusCheckRollup {\n    shortText\n    state\n    id\n  }\n  signature {\n    __typename\n    state\n    signer {\n      login\n      avatarUrl\n      id\n    }\n    wasSignedByGitHub\n    ... on GpgSignature {\n      __typename\n      keyId\n    }\n    ... on SmimeSignature {\n      __typename\n      issuer {\n        commonName\n        emailAddress\n        organization\n        organizationUnit\n      }\n      subject {\n        commonName\n        emailAddress\n        organization\n        organizationUnit\n      }\n    }\n    ... on SshSignature {\n      __typename\n      keyFingerprint\n    }\n  }\n}\n\nfragment DiffFileHeaderListView_diffEntry on PullRequestDiffEntry {\n  pathDigest\n  path\n  pathOwnership {\n    ...CodeownersBadge_pathOwnership\n  }\n  oldTreeEntry {\n    mode\n    path\n  }\n  newTreeEntry {\n    mode\n    path\n  }\n  status\n  linesAdded\n  linesDeleted\n  ...BlobActionsMenu_diffEntry\n  ...FileConversationsButton_diffEntry\n  ...ViewedCheckbox_diffEntry\n}\n\nfragment DiffFileHeaderListView_pullRequest on PullRequest {\n  ...BlobActionsMenu_pullRequest\n}\n\nfragment DiffLines_diffEntry on PullRequestDiffEntry {\n  id\n  diffLines(injectedContextLines: $injectedContextLines) {\n    left\n    right\n    blobLineNumber\n    html\n    type\n    text\n    threads(first: $inlineThreadCount) {\n      totalCount\n      totalCommentsCount\n      edges {\n        node {\n          diffSide\n          id\n          isOutdated\n          line\n          startDiffSide\n          startLine\n          comments(first: 50) {\n            totalCount\n            edges {\n              node {\n                author {\n                  __typename\n                  avatarUrl(size: 48)\n                  login\n                  id\n                }\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment DiffViewSettingsButton_pullRequest on PullRequest {\n  ...HideWhitespace_pullRequest\n}\n\nfragment Diff_diffEntry on PullRequestDiffEntry {\n  diffEntryId: id\n  isBinary\n  isTooBig\n  linesChanged\n  pathDigest\n  viewerViewedState\n  path\n  status\n  truncatedReason\n  oldTreeEntry {\n    mode\n    lineCount\n  }\n  newTreeEntry {\n    mode\n    lineCount\n    isGenerated\n  }\n  diffLines(injectedContextLines: $injectedContextLines) {\n    blobLineNumber\n  }\n  ...DiffFileHeaderListView_diffEntry\n  ...DiffLines_diffEntry\n}\n\nfragment Diff_pullRequest on PullRequest {\n  ...DiffFileHeaderListView_pullRequest\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n  }\n}\n\nfragment DiffsWithComments_pullRequest on PullRequest {\n  id\n  ...Diffs_pullRequest\n  ...Diffs_pullRequestComparison\n  ...FilesChangedHeading_pullRequest\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    newCommit @include(if: $isSingleCommit) {\n      ...CommitDiffHeading_commit\n      id\n    }\n  }\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  number\n}\n\nfragment Diffs_pullRequest on PullRequest {\n  ...Diff_pullRequest\n}\n\nfragment Diffs_pullRequestComparison on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    diffEntries(first: $diffEntryCount, after: $diffEntryCursor) {\n      edges {\n        node {\n          pathDigest\n          path\n          isTooBig\n          viewerViewedState\n          diffLines(injectedContextLines: $injectedContextLines) {\n            __typename\n          }\n          ...Diff_diffEntry\n          id\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n  id\n}\n\nfragment FileConversationsButton_diffEntry on PullRequestDiffEntry {\n  path\n  outdatedThreads: threads(first: 50, subjectType: LINE, outdatedFilter: ONLY_OUTDATED) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n  threads(first: 50, subjectType: FILE) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment FileTree_pullRequest on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    summary {\n      path\n      pathDigest\n      changeType\n      totalCommentsCount\n      totalAnnotationsCount\n    }\n  }\n}\n\nfragment FilesChangedHeading_pullRequest on PullRequest {\n  id\n  ...DiffViewSettingsButton_pullRequest\n  ...ViewedFileProgress_pullRequest\n  ...OpenCommentsPanelButton_pullRequest\n  ...OpenAnnotationsPanelButton_pullRequest\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n    linesAdded\n    linesDeleted\n  }\n}\n\nfragment HideWhitespace_pullRequest on PullRequest {\n  id\n  viewerPreferences {\n    ignoreWhitespace\n  }\n}\n\nfragment OpenAnnotationsPanelButton_pullRequest on PullRequest {\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment OpenCommentsPanelButton_pullRequest on PullRequest {\n  allThreads: threads(first: 50, isPositioned: false) {\n    totalCommentsCount\n  }\n  number\n  repository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment ViewedCheckbox_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  viewerViewedState\n}\n\nfragment ViewedFileProgress_pullRequest on PullRequest {\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    summary {\n      __typename\n    }\n  }\n  viewerViewedFiles\n}\n",
  "e92ae864ba92a505074377689fd3393d": "query DetailsPaneTestQuery {\n  pullRequest: node(id: \"test-id\") {\n    __typename\n    ... on PullRequest {\n      ...DetailsPane_pullRequest\n    }\n    id\n  }\n}\n\nfragment ActionSection_pullRequest on PullRequest {\n  id\n  isDraft\n  baseRepository {\n    planSupportsDraftPullRequests: planSupports(feature: DRAFT_PRS)\n    id\n  }\n  state\n  viewerCanUpdate\n}\n\nfragment AssigneePickerAssignee on User {\n  id\n  login\n  name\n  avatarUrl(size: 64)\n}\n\nfragment AssigneesSection_pullrequest on PullRequest {\n  id\n  number\n  viewerCanAssign\n  baseRepository {\n    name\n    id\n  }\n  baseRepositoryOwner {\n    __typename\n    login\n    id\n  }\n  assignees(first: 20) {\n    nodes {\n      ...AssigneePickerAssignee\n      id\n    }\n  }\n  suggestedAssignees(first: 20) {\n    nodes {\n      ...AssigneePickerAssignee\n      id\n    }\n  }\n}\n\nfragment ClassicProjectItem on ProjectCard {\n  project {\n    name\n    url\n    ...SingleSelectColumnProject\n    id\n  }\n  column {\n    ...SingleSelectColumn\n    id\n  }\n}\n\nfragment DetailsPane_pullRequest on PullRequest {\n  ...Reviewers_pullRequest\n  ...AssigneesSection_pullrequest\n  ...LabelSection_pullRequest\n  ...ProjectsSectionFragment\n  ...ActionSection_pullRequest\n}\n\nfragment LabelPickerAssignedLabels on Labelable {\n  __isLabelable: __typename\n  labels(first: 100, orderBy: {field: NAME, direction: ASC}) {\n    edges {\n      node {\n        ...LabelPickerLabel\n        id\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n  ... on Node {\n    __isNode: __typename\n    id\n  }\n}\n\nfragment LabelPickerLabel on Label {\n  id\n  color\n  name\n  nameHTML\n  description\n  url\n}\n\nfragment LabelSection_pullRequest on PullRequest {\n  ...LabelPickerAssignedLabels\n  viewerCanUpdate\n  id\n}\n\nfragment ProjectItemSection on ProjectV2Item {\n  id\n  isArchived\n  project {\n    id\n  }\n  ...ProjectItemSectionView\n}\n\nfragment ProjectItemSectionView on ProjectV2Item {\n  id\n  isArchived\n  project {\n    id\n    title\n    template\n    viewerCanUpdate\n    url\n    field(name: \"Status\") {\n      __typename\n      ...SingleSelectFieldConfigFragment\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n  }\n  fieldValueByName(name: \"Status\") {\n    __typename\n    ...SingleSelectFieldFragment\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n}\n\nfragment ProjectPickerClassicProject on Project {\n  id\n  title: name\n  closed\n  number\n  url\n  viewerCanUpdate\n  columns(first: 10) {\n    nodes {\n      id\n      name\n    }\n  }\n  __typename\n}\n\nfragment ProjectPickerProject on ProjectV2 {\n  id\n  title\n  closed\n  number\n  url\n  viewerCanUpdate\n  __typename\n}\n\nfragment ProjectsSectionFragment on IssueOrPullRequest {\n  __isIssueOrPullRequest: __typename\n  ... on Issue {\n    number\n    repository {\n      name\n      owner {\n        __typename\n        login\n        id\n      }\n      isArchived\n      id\n    }\n    id\n    projectItemsNext(first: 10) {\n      edges {\n        node {\n          id\n          ...ProjectItemSection\n          project {\n            ...ProjectPickerProject\n            closed\n            title\n            id\n          }\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n    projectCards(first: 10) {\n      edges {\n        node {\n          id\n          ...ClassicProjectItem\n          project {\n            id\n            closed\n            ...ProjectPickerClassicProject\n          }\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n    viewerCanUpdateMetadata\n  }\n  ... on PullRequest {\n    number\n    repository {\n      name\n      owner {\n        __typename\n        login\n        id\n      }\n      isArchived\n      id\n    }\n    id\n    projectItemsNext(first: 10) {\n      edges {\n        node {\n          id\n          ...ProjectItemSection\n          project {\n            closed\n            ...ProjectPickerProject\n            title\n            id\n          }\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n    projectCards(first: 10) {\n      edges {\n        node {\n          id\n          ...ClassicProjectItem\n          project {\n            id\n            closed\n            ...ProjectPickerClassicProject\n          }\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n    viewerCanUpdate\n  }\n}\n\nfragment ReviewDetails_pullRequest on PullRequest {\n  latestReviews(first: 100, preferOpinionatedReviews: true) {\n    edges {\n      node {\n        onBehalfOfReviewers {\n          asCodeowner\n          reviewer {\n            __typename\n            ... on Team {\n              __typename\n              combinedSlug\n            }\n            ... on User {\n              __typename\n              login\n            }\n            ... on Node {\n              __isNode: __typename\n              id\n            }\n          }\n        }\n        author {\n          __typename\n          avatarUrl\n          login\n          url\n          id\n        }\n        state\n        id\n      }\n    }\n  }\n}\n\nfragment ReviewRequestDetails_pullRequest on PullRequest {\n  id\n  reviewRequests(first: 100) {\n    edges {\n      node {\n        asCodeOwner\n        assignedFromReviewRequest {\n          requestedReviewer {\n            __typename\n            ... on Team {\n              id\n              __typename\n              name\n            }\n            ... on User {\n              id\n              login\n              __typename\n            }\n            ... on Node {\n              __isNode: __typename\n              id\n            }\n          }\n          asCodeOwner\n          id\n        }\n        requestedReviewer {\n          __typename\n          ... on User {\n            id\n            avatarUrl\n            login\n            url\n            __typename\n          }\n          ... on Team {\n            combinedSlug\n            id\n            teamAvatarUrl: avatarUrl\n            name\n            url\n            organization {\n              name\n              id\n            }\n            __typename\n          }\n          ... on Node {\n            __isNode: __typename\n            id\n          }\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment Reviewers_pullRequest on PullRequest {\n  ...ReviewRequestDetails_pullRequest\n  ...ReviewDetails_pullRequest\n  id\n  isDraft\n  state\n  viewerCanUpdate\n  codeowners {\n    __typename\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  latestReviews(first: 100, preferOpinionatedReviews: true) {\n    edges {\n      node {\n        author {\n          __typename\n          login\n          id\n        }\n        state\n        id\n      }\n    }\n  }\n  reviewRequests(first: 100) {\n    edges {\n      node {\n        requestedReviewer {\n          __typename\n          ... on User {\n            id\n            __typename\n          }\n          ... on Team {\n            id\n            __typename\n          }\n          ... on Node {\n            __isNode: __typename\n            id\n          }\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment SingleSelectColumn on ProjectColumn {\n  id\n  name\n}\n\nfragment SingleSelectColumnProject on Project {\n  id\n  name\n  columns(first: 10) {\n    nodes {\n      ...SingleSelectColumn\n      id\n    }\n  }\n}\n\nfragment SingleSelectFieldConfigFragment on ProjectV2SingleSelectField {\n  id\n  name\n  options {\n    ...SingleSelectFieldOptionFragment\n    id\n    name\n    description\n    color\n  }\n}\n\nfragment SingleSelectFieldFragment on ProjectV2ItemFieldSingleSelectValue {\n  id\n  optionId\n  name\n  nameHTML\n  color\n}\n\nfragment SingleSelectFieldOptionFragment on ProjectV2SingleSelectFieldOption {\n  id\n  optionId\n  name\n  nameHTML\n  color\n  descriptionHTML\n}\n",
  "ec6252bcd5af2a4fab688b0e24e99458": "query IssueCommentViewerGhostUserQuery(\n  $ghostLogin: String!\n) {\n  user(login: $ghostLogin) {\n    login\n    avatarUrl\n    __typename\n    id\n  }\n}\n",
  "ee4503390a5aed5b9db08096a1ccb0c3": "query ReviewRequestedEventAssignedFromTeamStoryQuery(\n  $id: ID!\n) {\n  reviewRequestedEvent: node(id: $id) {\n    __typename\n    ...ReviewRequestedEvent_reviewRequestedEvent\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment ReviewRequestedEvent_reviewRequestedEvent on ReviewRequestedEvent {\n  actor {\n    __typename\n    ...TimelineRowEventActor\n    id\n  }\n  requestedReviewAssignedFromTeamName\n  reviewRequest {\n    codeOwnersResourcePath\n    requestedReviewer {\n      __typename\n      ... on User {\n        login\n        resourcePath\n      }\n      ... on Team {\n        combinedSlug\n        resourcePath\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    id\n  }\n  createdAt\n  databaseId\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "f658f3af4f803726c6f2003d32c2b890": "query IssueCommentTestComponentQuery(\n  $commentId: ID!\n) {\n  comment: node(id: $commentId) {\n    __typename\n    ... on Comment {\n      __isComment: __typename\n      ...IssueComment_issueComment\n    }\n    id\n  }\n}\n\nfragment IssueCommentEditorBodyFragment on IssueComment {\n  id\n  body\n  bodyVersion\n  author {\n    __typename\n    login\n    avatarUrl\n    id\n  }\n  issue {\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  ...IssueCommentHeader\n}\n\nfragment IssueCommentEditor_repository on IssueComment {\n  repository {\n    slashCommandsEnabled\n    nameWithOwner\n    databaseId\n    id\n  }\n}\n\nfragment IssueCommentHeader on IssueComment {\n  id\n  databaseId\n  url\n  createdAt\n  body\n  authorAssociation\n  viewerCanUpdate\n  viewerCanDelete\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n  isHidden: isMinimized\n  minimizedReason\n  createdViaEmail\n  viewerDidAuthor\n  authorToRepoOwnerSponsorship {\n    createdAt\n    isActive\n    id\n  }\n  author {\n    __typename\n    id\n    login\n  }\n  repository {\n    id\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n    isPrivate\n  }\n  issue {\n    number\n    id\n  }\n  ...MarkdownEditHistoryViewer_comment\n}\n\nfragment IssueCommentViewerCommentRow on IssueComment {\n  id\n  databaseId\n  ...IssueCommentViewerMarkdownViewer\n  ...IssueCommentHeader\n  author {\n    avatarUrl\n    login\n    __typename\n    id\n  }\n  issue {\n    id\n    locked\n  }\n  body\n  isHidden: isMinimized\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerMarkdownViewer on IssueComment {\n  id\n  body\n  bodyHTML(unfurlReferences: true)\n  bodyVersion\n  viewerCanUpdate\n}\n\nfragment IssueCommentViewerReactable on Reactable {\n  __isReactable: __typename\n  ...ReactionViewerGroups\n}\n\nfragment IssueComment_issueComment on IssueComment {\n  ...IssueCommentViewerCommentRow\n  ...IssueCommentViewerReactable\n  ...IssueCommentEditor_repository\n  ...IssueCommentEditorBodyFragment\n  issue {\n    id\n  }\n  id\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n",
  "f67c0db7872c2754918cfcbcedb68a66": "query IssueCommentQuery(\n  $owner: String!\n  $repo: String!\n  $number: Int!\n) {\n  repository(owner: $owner, name: $repo) {\n    issue(number: $number) {\n      ...IssueCommentComposer\n      id\n    }\n    id\n  }\n}\n\nfragment IssueActions on Issue {\n  ...IssueActionsState\n}\n\nfragment IssueActionsState on Issue {\n  state\n  stateReason\n  id\n}\n\nfragment IssueCommentComposer on Issue {\n  id\n  locked\n  viewerCanComment\n  databaseId\n  repository {\n    id\n    databaseId\n    isArchived\n    nameWithOwner\n    viewerCanInteract\n    viewerInteractionLimitReasonHTML\n  }\n  ...IssueActions\n}\n",
  "f75807faed5fd2c0bcfb517b3163c3b3": "query PullRequestReviewHeaderAndCommentTestQuery(\n  $pullRequestReviewId: ID!\n) {\n  pullRequestReview: node(id: $pullRequestReviewId) {\n    __typename\n    ...PullRequestReviewHeaderAndComment_pullRequestReview\n    id\n  }\n}\n\nfragment EventActor on Actor {\n  __isActor: __typename\n  avatarUrl(size: 64)\n  login\n  __typename\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment PullRequestReviewHeaderAndComment_pullRequestReview on PullRequestReview {\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n  id\n  databaseId\n  author {\n    __typename\n    id\n    avatarUrl(size: 64)\n    login\n    ...TimelineRowEventActor\n  }\n  authorAssociation\n  bodyHTML\n  bodyText\n  createdAt\n  pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  onBehalfOf(first: 10) {\n    edges {\n      node {\n        organization {\n          name\n          id\n        }\n        name\n        url\n        id\n      }\n    }\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  dismissedReviewState\n  state\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanBlockFromOrg\n  viewerCanUnblockFromOrg\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment TimelineRowEventActor on Actor {\n  __isActor: __typename\n  ...EventActor\n}\n",
  "f84fb0c1a6ce60328957ca896c59e0e7": "query ReviewersPickerTestQuery {\n  pullRequest: node(id: \"test-id\") {\n    __typename\n    ... on PullRequest {\n      ...ReviewersPickerSuggestedReviewers_pullRequest\n      ...ReviewersPickerCandidateReviewers_pullRequest\n    }\n    id\n  }\n}\n\nfragment ReviewersPickerCandidateReviewers_pullRequest on PullRequest {\n  candidateReviewers(first: 100) {\n    edges {\n      node {\n        reviewer {\n          __typename\n          ... on Team {\n            __typename\n            id\n            combinedSlug\n            teamName: name\n            teamAvatarUrl: avatarUrl(size: 64)\n          }\n          ... on User {\n            __typename\n            id\n            login\n            name\n            avatarUrl(size: 64)\n          }\n          ... on Node {\n            __isNode: __typename\n            id\n          }\n        }\n      }\n    }\n  }\n  id\n}\n\nfragment ReviewersPickerSuggestedReviewers_pullRequest on PullRequest {\n  suggestedReviewers {\n    isAuthor\n    isCommenter\n    reviewer {\n      id\n      login\n      name\n      avatarUrl(size: 64)\n    }\n  }\n}\n",
  "f8780ab5958671e40dcfffd8d74dc0c8": "query DiffFileHeaderListViewTestQuery(\n  $pullRequestId: ID!\n  $singleCommitOid: String\n  $endOid: String\n  $startOid: String\n) {\n  viewer {\n    ...DiffFileHeaderListView_viewer\n    id\n  }\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...DiffFileHeaderListView_pullRequest\n      comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n        diffEntries(first: 20) {\n          nodes {\n            ...DiffFileHeaderListView_diffEntry\n            id\n          }\n        }\n      }\n    }\n    id\n  }\n}\n\nfragment BlobActionsMenu_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  oid\n  status\n  isSubmodule\n  isBinary\n  isLfsPointer\n}\n\nfragment BlobActionsMenu_pullRequest on PullRequest {\n  id\n  number\n  headRefName\n  headRepository {\n    nameWithOwner\n    id\n  }\n  baseRepository {\n    nameWithOwner\n    id\n  }\n  viewerCanEditFiles\n  comparison(startOid: $startOid, endOid: $endOid, singleCommitOid: $singleCommitOid) {\n    oldCommit {\n      oid\n      id\n    }\n    newCommit {\n      oid\n      id\n    }\n  }\n}\n\nfragment CodeownersBadge_pathOwnership on PathOwnership {\n  pathOwners {\n    name\n  }\n  ruleLineNumber\n  ruleUrl\n  isOwnedByViewer\n}\n\nfragment CodeownersBadge_viewer on User {\n  login\n}\n\nfragment DiffFileHeaderListView_diffEntry on PullRequestDiffEntry {\n  pathDigest\n  path\n  pathOwnership {\n    ...CodeownersBadge_pathOwnership\n  }\n  oldTreeEntry {\n    mode\n    path\n  }\n  newTreeEntry {\n    mode\n    path\n  }\n  status\n  linesAdded\n  linesDeleted\n  ...BlobActionsMenu_diffEntry\n  ...FileConversationsButton_diffEntry\n  ...ViewedCheckbox_diffEntry\n}\n\nfragment DiffFileHeaderListView_pullRequest on PullRequest {\n  ...BlobActionsMenu_pullRequest\n}\n\nfragment DiffFileHeaderListView_viewer on User {\n  ...CodeownersBadge_viewer\n  ...FileConversationsButton_viewer\n}\n\nfragment FileConversationsButton_diffEntry on PullRequestDiffEntry {\n  path\n  outdatedThreads: threads(first: 50, subjectType: LINE, outdatedFilter: ONLY_OUTDATED) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n  threads(first: 50, subjectType: FILE) {\n    totalCount\n    totalCommentsCount\n    edges {\n      node {\n        id\n        isOutdated\n        comments(first: 50) {\n          totalCount\n          edges {\n            node {\n              author {\n                __typename\n                avatarUrl(size: 48)\n                login\n                id\n              }\n              id\n            }\n          }\n        }\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment FileConversationsButton_viewer on User {\n  login\n  avatarUrl(size: 48)\n}\n\nfragment ViewedCheckbox_diffEntry on PullRequestDiffEntry {\n  id\n  path\n  viewerViewedState\n}\n",
  "f8df62fbac230e505908f6b4acbae71c": "query DiffViewSettingsButtonTestQuery(\n  $pullRequestId: ID!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...DiffViewSettingsButton_pullRequest\n    }\n    id\n  }\n  viewer {\n    ...DiffViewSettingsButton_user\n    id\n  }\n}\n\nfragment DiffViewSettingsButton_pullRequest on PullRequest {\n  ...HideWhitespace_pullRequest\n}\n\nfragment DiffViewSettingsButton_user on User {\n  ...DiffViewToggle_user\n}\n\nfragment DiffViewToggle_user on User {\n  id\n  pullRequestUserPreferences {\n    diffView\n  }\n}\n\nfragment HideWhitespace_pullRequest on PullRequest {\n  id\n  viewerPreferences {\n    ignoreWhitespace\n  }\n}\n",
  "f925addf58356efdbb54eff5c922647b": "query HeaderBranchInfoTestQuery(\n  $pullRequestId: ID!\n) {\n  pullRequest: node(id: $pullRequestId) {\n    __typename\n    ... on PullRequest {\n      ...HeaderBranchInfo_pullRequest\n    }\n    id\n  }\n}\n\nfragment HeaderBranchInfo_pullRequest on PullRequest {\n  mergedAt\n  baseRefName\n  baseRef {\n    repository {\n      defaultBranch\n      name\n      owner {\n        __typename\n        login\n        id\n      }\n      id\n    }\n    id\n  }\n  headRefName\n  state\n  commits {\n    totalCount\n  }\n  baseRepository {\n    name\n    owner {\n      __typename\n      login\n      id\n    }\n    defaultBranchRef {\n      name\n      id\n    }\n    id\n  }\n  headRepository {\n    name\n    isFork\n    owner {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  author {\n    __typename\n    login\n    id\n  }\n  viewerCanChangeBaseBranch\n}\n",
  "fb13205d648529a44da6255213776135": "mutation updatePreferredDiffViewMutation(\n  $preferredDiffView: String!\n) {\n  updatePreferredDiffView(input: {preferredDiffView: $preferredDiffView}) {\n    user {\n      pullRequestUserPreferences {\n        diffView\n      }\n      id\n    }\n  }\n}\n",
  "fc88c28f26f5c30399ecab53dad256c7": "mutation unmarkFileAsViewedMutation(\n  $id: ID!\n  $path: String!\n) {\n  unmarkFileAsViewed(input: {pullRequestId: $id, path: $path}) {\n    pullRequest {\n      viewerViewedFiles\n      comparison {\n        diffEntry(path: $path) {\n          viewerViewedState\n          id\n        }\n      }\n      id\n    }\n  }\n}\n",
  "ff3ad8237a65c59c7c9fb3ff15c330e2": "query ReviewCommentTestQuery(\n  $pullRequestReviewId: ID!\n) {\n  pullRequestReviewComment: node(id: $pullRequestReviewId) {\n    __typename\n    ...ReviewComment_pullRequestReviewComment\n    id\n  }\n}\n\nfragment MarkdownEditHistoryViewer_comment on Comment {\n  __isComment: __typename\n  id\n  viewerCanReadUserContentEdits\n  lastEditedAt\n  lastUserContentEdit {\n    editor {\n      __typename\n      url\n      login\n      id\n    }\n    id\n  }\n}\n\nfragment ReactionButton_Reaction on ReactionGroup {\n  content\n  reactors(first: 5) {\n    nodes {\n      __typename\n      ... on User {\n        login\n        __typename\n      }\n      ... on Bot {\n        login\n        __typename\n      }\n      ... on Organization {\n        login\n        __typename\n      }\n      ... on Mannequin {\n        login\n        __typename\n      }\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    totalCount\n  }\n  viewerHasReacted\n}\n\nfragment ReactionViewerGroups on Reactable {\n  __isReactable: __typename\n  reactionGroups {\n    ...ReactionButton_Reaction\n    ...ReactionsMenuItem_Reaction\n  }\n}\n\nfragment ReactionsMenuItem_Reaction on ReactionGroup {\n  content\n  viewerHasReacted\n}\n\nfragment ReviewComment_pullRequestReviewComment on PullRequestReviewComment {\n  id\n  currentDiffResourcePath\n  path\n  pullRequestThread {\n    id\n    isOutdated\n    isResolved\n  }\n  ...ReactionViewerGroups\n  ...useFetchThread_PullRequestReviewComment\n}\n\nfragment useFetchThread_PullRequestReviewComment on PullRequestReviewComment {\n  author {\n    __typename\n    avatarUrl\n    id\n    login\n    url\n  }\n  authorAssociation\n  bodyHTML\n  body\n  createdAt\n  currentDiffResourcePath\n  databaseId\n  id\n  isHidden: isMinimized\n  lastUserContentEdit {\n    editor {\n      __typename\n      login\n      url\n      id\n    }\n    id\n  }\n  minimizedReason\n  publishedAt\n  reference: pullRequest {\n    number\n    author {\n      __typename\n      login\n      id\n    }\n    id\n  }\n  repository {\n    id\n    isPrivate\n    name\n    owner {\n      __typename\n      id\n      login\n      url\n    }\n  }\n  state\n  subjectType\n  viewerDidAuthor\n  viewerCanBlockFromOrg\n  viewerCanMinimize\n  viewerCanReport\n  viewerCanReportToMaintainer\n  viewerCanSeeMinimizeButton\n  viewerCanSeeUnminimizeButton\n  viewerCanUnblockFromOrg\n  viewerRelationship\n  stafftoolsUrl\n  url\n  viewerCanDelete\n  viewerCanUpdate\n  ...MarkdownEditHistoryViewer_comment\n  ...ReactionViewerGroups\n}\n"
}
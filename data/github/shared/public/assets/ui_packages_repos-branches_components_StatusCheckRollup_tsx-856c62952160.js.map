{"version":3,"file":"chunk-ui_packages_repos-branches_components_StatusCheckRollup_tsx-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/commit-checks-status/components/CheckRunItem.tsx","ui/packages/commit-checks-status/components/ChecksStatusBadgeFooter.tsx","ui/packages/commit-checks-status/components/ChecksStatusBadgeHeader.tsx","ui/packages/commit-checks-status/CheckStatusDialog.tsx","ui/packages/commit-checks-status/ChecksStatusBadge.tsx","ui/packages/commit-checks-status/hooks/use-commit-checks-status-details.ts","ui/packages/repos-branches/components/StatusCheckRollup.tsx"],"sourcesContent":["import {GitHubAvatar} from '@github-ui/github-avatar'\nimport {\n  AlertIcon,\n  CheckIcon,\n  ClockIcon,\n  DotFillIcon,\n  IssueReopenedIcon,\n  SkipIcon,\n  SquareFillIcon,\n  StopIcon,\n  XIcon,\n} from '@primer/octicons-react'\nimport {Box, Link, Octicon, Text, Tooltip} from '@primer/react'\n\nimport type {CheckRun} from '../index'\n\nexport default function CheckRunItem({checkRun}: {checkRun: CheckRun}) {\n  const {icon, iconColor} = getOcticonFromIconString(checkRun.icon)\n  const inProgress = checkRun.state === 'in_progress'\n  return (\n    <Box\n      data-testid=\"check-run-item\"\n      as=\"li\"\n      sx={{\n        display: 'flex',\n        borderBottomWidth: '1px',\n        borderBottomStyle: 'solid',\n        borderBottomColor: 'border.default',\n        backgroundColor: 'canvas.subtle',\n        py: 2,\n        pr: 3,\n        pl: '12px',\n        alignItems: 'center',\n      }}\n    >\n      <Box sx={{alignSelf: 'center', display: 'flex'}}>\n        {inProgress ? (\n          getInProgressSpinner()\n        ) : (\n          <Octicon icon={icon} sx={{color: iconColor, margin: '0px 7px', alignSelf: 'center'}} />\n        )}\n        <Tooltip aria-label={checkRun.avatarDescription} direction=\"e\">\n          <Link href={checkRun.avatarUrl} sx={{mr: 2}} aria-label=\"Avatar\">\n            <GitHubAvatar square src={checkRun.avatarLogo} sx={{backgroundColor: checkRun.avatarBackgroundColor}} />\n          </Link>\n        </Tooltip>\n      </Box>\n      <Text sx={{fontSize: '13px', color: 'fg.muted'}}>\n        <Text sx={{fontWeight: 'bold', color: 'fg.default', mr: '2px'}}>{checkRun.name} </Text>\n        {checkRun.pending ? (\n          <Text sx={{fontStyle: 'italic'}}>{checkRun.additionalContext}</Text>\n        ) : (\n          checkRun.additionalContext\n        )}\n        {checkRun.description && (\n          <span>\n            {' '}\n            - {checkRun.pending ? <Text sx={{fontStyle: 'italic'}}>{checkRun.description}</Text> : checkRun.description}\n          </span>\n        )}\n      </Text>\n\n      <Link href={checkRun.targetUrl} sx={{pl: '12px', fontSize: '13px', marginLeft: 'auto'}}>\n        Details\n      </Link>\n    </Box>\n  )\n}\n\nfunction getOcticonFromIconString(icon: string) {\n  switch (icon) {\n    case 'check':\n      return {icon: CheckIcon, iconColor: 'success.fg'}\n    case 'dot-fill':\n      return {icon: DotFillIcon, iconColor: 'attention.fg'}\n    case 'stop':\n      return {icon: StopIcon, iconColor: 'muted.fg'}\n    case 'issue-reopened':\n      return {icon: IssueReopenedIcon, iconColor: 'muted.fg'}\n    case 'clock':\n      return {icon: ClockIcon, iconColor: 'attention.fg'}\n    case 'square-fill':\n      return {icon: SquareFillIcon, iconColor: 'fg.default'}\n    case 'skip':\n      return {icon: SkipIcon, iconColor: 'muted.fg'}\n    case 'alert':\n      return {icon: AlertIcon, iconColor: 'danger.fg'}\n    default:\n      return {icon: XIcon, iconColor: 'danger.fg'}\n  }\n}\n\nfunction getInProgressSpinner() {\n  return (\n    <Box sx={{height: '16px', width: '16px', minWidth: '16px', alignSelf: 'center', mx: '7px'}}>\n      <svg fill=\"none\" viewBox=\"0 0 16 16\" className=\"anim-rotate\" aria-hidden=\"true\" role=\"img\">\n        <path opacity=\".5\" d=\"M8 15A7 7 0 108 1a7 7 0 000 14v0z\" stroke=\"#dbab0a\" strokeWidth=\"2\" />\n        <path d=\"M15 8a7 7 0 01-7 7\" stroke=\"#dbab0a\" strokeWidth=\"2\" />\n        <path d=\"M8 12a4 4 0 100-8 4 4 0 000 8z\" fill=\"#dbab0a\" />\n      </svg>\n    </Box>\n  )\n}\n\ntry{ CheckRunItem.displayName ||= 'CheckRunItem' } catch {}","import {Box} from '@primer/react'\n\nimport CheckRunItem from './CheckRunItem'\nimport type {CheckRun} from '../index'\n\nexport default function ChecksStatusBadgeFooter({checkRuns}: {checkRuns: CheckRun[]}) {\n  return (\n    <Box\n      as=\"ul\"\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        maxHeight: ['230px', '380px'],\n        overflow: 'auto',\n      }}\n    >\n      {checkRuns.map((checkRun, i) => (\n        // This list will not change, so using the index for the key is safe\n        <CheckRunItem key={i} checkRun={checkRun} />\n      ))}\n    </Box>\n  )\n}\n\ntry{ ChecksStatusBadgeFooter.displayName ||= 'ChecksStatusBadgeFooter' } catch {}","import {Text} from '@primer/react'\n\nexport default function HeaderState({checksHeaderState}: {checksHeaderState: string}): JSX.Element {\n  switch (checksHeaderState) {\n    case 'SUCCEEDED':\n      return <Text sx={{fontWeight: 'bold', fontSize: 2}}>All checks have passed</Text>\n    case 'FAILED':\n      return (\n        <Text sx={{color: 'var(--fgColor-danger, var(--color-danger-fg))', fontWeight: 'bold', fontSize: 2}}>\n          All checks have failed\n        </Text>\n      )\n    case 'PENDING':\n      return (\n        <Text\n          sx={{\n            color: 'var(--fgColor-attention, var(--color-attention-fg))',\n            fontWeight: 'bold',\n            fontSize: 2,\n          }}\n        >\n          Some checks haven’t completed yet\n        </Text>\n      )\n    default:\n      return (\n        <Text sx={{color: 'var(--fgColor-danger, var(--color-danger-fg))', fontWeight: 'bold', fontSize: 2}}>\n          Some checks were not successful\n        </Text>\n      )\n  }\n}\n\ntry{ HeaderState.displayName ||= 'HeaderState' } catch {}","import {Box, Spinner} from '@primer/react'\nimport {Dialog} from '@primer/react/experimental'\n\nimport ChecksStatusBadgeFooter from './components/ChecksStatusBadgeFooter'\nimport HeaderState from './components/ChecksStatusBadgeHeader'\nimport type {CombinedStatusResult} from './index'\n\ninterface CheckStatusDialogProps {\n  combinedStatus?: CombinedStatusResult\n  isOpen: boolean\n  onDismiss: () => void\n}\n\nexport function CheckStatusDialog(props: CheckStatusDialogProps) {\n  const {combinedStatus, isOpen, onDismiss} = props\n\n  const title = combinedStatus ? <HeaderState checksHeaderState={combinedStatus.checksHeaderState} /> : 'Loading...'\n\n  return isOpen ? (\n    <Dialog\n      onClose={onDismiss}\n      sx={{\n        overflowY: 'auto',\n        backgroundColor: 'canvas.default',\n        boxShadow: 'none',\n        border: '1px solid',\n        borderColor: 'border.default',\n        borderBottom: 0,\n      }}\n      title={title}\n      subtitle={combinedStatus ? combinedStatus.checksStatusSummary : undefined}\n      width=\"xlarge\"\n      renderBody={() => (\n        <Dialog.Body sx={{padding: 0}}>\n          {combinedStatus ? (\n            <ChecksStatusBadgeFooter checkRuns={combinedStatus.checkRuns} />\n          ) : (\n            <Box sx={{display: 'flex', justifyContent: 'center', p: 2}}>\n              <Spinner size=\"medium\" />\n            </Box>\n          )}\n        </Dialog.Body>\n      )}\n    />\n  ) : null\n}\n\ntry{ CheckStatusDialog.displayName ||= 'CheckStatusDialog' } catch {}","import {\n  CheckCircleFillIcon,\n  CheckCircleIcon,\n  CheckIcon,\n  CircleIcon,\n  DotFillIcon,\n  type Icon,\n  QuestionIcon,\n  XCircleFillIcon,\n  XCircleIcon,\n  XIcon,\n} from '@primer/octicons-react'\nimport {Button, type ButtonProps, IconButton, Octicon, Tooltip} from '@primer/react'\nimport {useId, useRef, useState} from 'react'\nimport {clsx} from 'clsx'\n\nimport type {CombinedStatusResult} from './index'\nimport {CheckStatusDialog} from './CheckStatusDialog'\n\ninterface ChecksStatusBadgeProps {\n  statusRollup: string\n  combinedStatus?: CombinedStatusResult\n  variant?: 'circled' | 'filled' | 'default'\n  onWillOpenPopup?: () => void\n  disablePopover?: boolean\n  buttonSx?: ButtonProps['sx']\n  size?: ButtonProps['size']\n  descriptionText?: string\n}\n\ninterface IconProps {\n  icon: Icon\n  iconColor: string\n}\n\nconst ICON_STYLE = {\n  success: {\n    circled: CheckCircleIcon,\n    filled: CheckCircleFillIcon,\n    default: CheckIcon,\n    color: 'var(--bgColor-success-emphasis, var(--color-success-emphasis))',\n  },\n  pending: {\n    circled: CircleIcon,\n    filled: DotFillIcon,\n    default: DotFillIcon,\n    color: 'var(--bgColor-attention-emphasis, var(--color-scale-yellow-4))',\n  },\n  failure: {\n    circled: XCircleIcon,\n    filled: XCircleFillIcon,\n    default: XIcon,\n    color: 'var(--bgColor-danger-emphasis, var(--color-scale-red-4))',\n  },\n  error: {\n    circled: QuestionIcon,\n    filled: QuestionIcon,\n    default: QuestionIcon,\n    color: 'var(--fgColor-muted, var(--color-canvas-subtle))',\n  },\n}\n\ninterface IconOnlyStatusProps extends IconProps {\n  className?: string\n  descriptionText?: string\n  tooltipText?: string\n}\n\nfunction IconOnlyStatus({className, descriptionText, icon, iconColor, tooltipText}: IconOnlyStatusProps) {\n  const tooltipId = useId()\n\n  let iconElement = (\n    <Octicon\n      aria-labelledby={tooltipText ? tooltipId : undefined}\n      icon={icon}\n      aria-label={tooltipText ? undefined : descriptionText ? descriptionText : 'See all checks'}\n      sx={{color: iconColor}}\n    />\n  )\n\n  if (tooltipText) {\n    iconElement = (\n      <Tooltip id={tooltipId} aria-label={tooltipText} direction=\"e\">\n        {iconElement}\n      </Tooltip>\n    )\n  }\n\n  return (\n    <span className={clsx(className, 'd-flex flex-items-center gap-1')} data-testid=\"checks-status-badge-icon-only\">\n      {iconElement}\n      {descriptionText && <span> {descriptionText}</span>}\n    </span>\n  )\n}\n\nexport function ChecksStatusBadge(props: ChecksStatusBadgeProps) {\n  const {\n    statusRollup,\n    combinedStatus,\n    variant = 'default',\n    disablePopover,\n    buttonSx,\n    size = 'medium',\n    descriptionText = '',\n    onWillOpenPopup: fetchData,\n  } = props\n  const [isOpen, setIsOpen] = useState(false)\n  const tooltipId = useId()\n  const checkButtonRef = useRef<HTMLButtonElement>(null)\n  const iconStyle = ICON_STYLE[statusRollup as keyof typeof ICON_STYLE]\n  const {icon, iconColor} = {\n    icon: iconStyle?.[variant] || ICON_STYLE.error[variant],\n    iconColor: iconStyle?.color || ICON_STYLE.error.color,\n  }\n\n  if (statusRollup === 'error') {\n    return (\n      <IconOnlyStatus\n        className={!disablePopover ? 'p-1' : undefined}\n        descriptionText=\"?/?\"\n        icon={icon}\n        iconColor={iconColor}\n        tooltipText=\"There was an error retrieving checks status\"\n      />\n    )\n  }\n\n  if (disablePopover) {\n    return <IconOnlyStatus descriptionText={descriptionText} icon={icon} iconColor={iconColor} />\n  }\n\n  return (\n    <>\n      {descriptionText ? (\n        <Button\n          data-testid=\"checks-status-badge-button\"\n          leadingVisual={icon}\n          variant=\"invisible\"\n          size={size}\n          aria-label={combinedStatus?.checksStatusSummary ?? `Status checks: ${statusRollup}`}\n          sx={{\n            p: 1,\n            color: 'fg.default',\n            fontWeight: 'normal',\n            svg: {color: iconColor},\n            ...buttonSx,\n          }}\n          ref={checkButtonRef}\n          onClick={() => {\n            fetchData?.()\n            setIsOpen(true)\n          }}\n        >\n          {descriptionText}\n        </Button>\n      ) : (\n        <Tooltip\n          id={tooltipId}\n          aria-label={combinedStatus?.checksStatusSummary ?? statusRollup}\n          direction=\"se\"\n          sx={{mr: 2}}\n        >\n          {/* eslint-disable-next-line primer-react/a11y-remove-disable-tooltip */}\n          <IconButton\n            unsafeDisableTooltip={true}\n            data-testid=\"checks-status-badge-icon\"\n            icon={icon}\n            variant=\"invisible\"\n            size={size}\n            aria-labelledby={tooltipId}\n            sx={{\n              py: 0,\n              px: 0,\n              svg: {color: iconColor},\n              ':hover:not([disabled])': {bg: 'pageHeaderBg'},\n              ...buttonSx,\n            }}\n            ref={checkButtonRef}\n            onClick={() => {\n              fetchData?.()\n              setIsOpen(true)\n            }}\n          />\n        </Tooltip>\n      )}\n      {isOpen && (\n        <CheckStatusDialog\n          combinedStatus={combinedStatus}\n          isOpen={isOpen}\n          onDismiss={() => {\n            setIsOpen(false)\n            setTimeout(() => {\n              checkButtonRef.current?.focus()\n            }, 0)\n          }}\n        />\n      )}\n    </>\n  )\n}\n\ntry{ IconOnlyStatus.displayName ||= 'IconOnlyStatus' } catch {}\ntry{ ChecksStatusBadge.displayName ||= 'ChecksStatusBadge' } catch {}","import type {RepositoryNWO} from '@github-ui/current-repository'\nimport {commitStatusDetailsPath} from '@github-ui/paths'\nimport {verifiedFetchJSON} from '@github-ui/verified-fetch'\n\nimport {useCallback, useState} from 'react'\n\nimport type {CombinedStatusResult} from '../index'\n\nexport function useCommitChecksStatusDetails(\n  oid: string,\n  repo: RepositoryNWO,\n): [CombinedStatusResult | undefined, () => void] {\n  const [details, setDetails] = useState<CombinedStatusResult>()\n  const [oidToFetch, setOidToFetch] = useState<string>()\n\n  const fetchDetails = useCallback(async () => {\n    if (oidToFetch !== oid) {\n      setOidToFetch(oid)\n      // Forget previous details because latest commit may have refreshed, or we may be rendering another page\n      setDetails(undefined)\n\n      if (oid) {\n        const url = commitStatusDetailsPath(repo, oid)\n        const response = await verifiedFetchJSON(url)\n        setDetails(await response.json())\n      }\n    }\n  }, [oid, oidToFetch, repo])\n\n  return [details, fetchDetails]\n}\n","import {Box} from '@primer/react'\nimport {useCurrentRepository} from '@github-ui/current-repository'\nimport {ChecksStatusBadge, useCommitChecksStatusDetails} from '@github-ui/commit-checks-status'\n\nexport interface StatusCheckRollupProps {\n  oid: string\n  statusCheckRollup: {\n    state: string\n    shortText?: string\n  }\n}\n\nexport default function StatusCheckRollup({oid, statusCheckRollup: {state, shortText}}: StatusCheckRollupProps) {\n  const repo = useCurrentRepository()\n  const [details, fetchDetails] = useCommitChecksStatusDetails(oid, repo)\n\n  let checkStatusCount = ''\n  try {\n    checkStatusCount = shortText?.split('checks')[0]?.trim() || ''\n  } catch {\n    //noop\n  }\n\n  return (\n    <Box sx={{ml: -2}}>\n      <ChecksStatusBadge\n        statusRollup={state}\n        buttonSx={{fontSize: '12px'}}\n        combinedStatus={details}\n        descriptionText={checkStatusCount}\n        onWillOpenPopup={fetchDetails}\n      />\n    </Box>\n  )\n}\n\ntry{ StatusCheckRollup.displayName ||= 'StatusCheckRollup' } catch {}"],"names":["CheckRunItem","checkRun","icon","iconColor","getOcticonFromIconString","CheckIcon","DotFillIcon","StopIcon","IssueReopenedIcon","ClockIcon","SquareFillIcon","SkipIcon","AlertIcon","XIcon","inProgress","state","Box","data-testid","as","sx","display","borderBottomWidth","borderBottomStyle","borderBottomColor","backgroundColor","py","pr","pl","alignItems","alignSelf","height","width","minWidth","mx","svg","fill","viewBox","className","aria-hidden","role","path","opacity","d","stroke","strokeWidth","Octicon","color","margin","Tooltip","aria-label","avatarDescription","direction","Link","href","avatarUrl","mr","GitHubAvatar","square","src","avatarLogo","avatarBackgroundColor","Text","fontSize","fontWeight","name","pending","fontStyle","additionalContext","description","span","targetUrl","marginLeft","displayName","ChecksStatusBadgeFooter","checkRuns","flexDirection","maxHeight","overflow","map","i","HeaderState","checksHeaderState","CheckStatusDialog","props","combinedStatus","isOpen","onDismiss","title","Dialog","onClose","overflowY","boxShadow","border","borderColor","borderBottom","subtitle","checksStatusSummary","undefined","renderBody","Body","padding","justifyContent","p","Spinner","size","ICON_STYLE","success","circled","CheckCircleIcon","filled","CheckCircleFillIcon","default","CircleIcon","failure","XCircleIcon","XCircleFillIcon","error","QuestionIcon","IconOnlyStatus","descriptionText","tooltipText","tooltipId","useId","iconElement","aria-labelledby","id","clsx","ChecksStatusBadge","statusRollup","variant","disablePopover","buttonSx","onWillOpenPopup","fetchData","setIsOpen","useState","checkButtonRef","useRef","iconStyle","Button","leadingVisual","ref","onClick","IconButton","unsafeDisableTooltip","px","bg","setTimeout","current","focus","useCommitChecksStatusDetails","oid","repo","details","setDetails","oidToFetch","setOidToFetch","useCallback","url","commitStatusDetailsPath","response","verifiedFetchJSON","json","StatusCheckRollup","statusCheckRollup","shortText","useCurrentRepository","fetchDetails","checkStatusCount","split","trim","ml"],"sourceRoot":""}
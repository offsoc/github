# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Conduit::Feeds::V1::FeedItem`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Conduit::Feeds::V1::FeedItem`.

class MonolithTwirp::Conduit::Feeds::V1::FeedItem
  sig do
    params(
      action: T.nilable(T.any(Symbol, Integer)),
      actor: T.nilable(MonolithTwirp::Conduit::Feeds::V1::User),
      card_retrieved_id: T.nilable(String),
      discussion_subject: T.nilable(MonolithTwirp::Conduit::Feeds::V1::Discussion),
      event_id: T.nilable(Integer),
      event_type: T.nilable(String),
      feed_post_subject: T.nilable(MonolithTwirp::Conduit::Feeds::V1::FeedPost),
      gatherer: T.nilable(String),
      identifier: T.nilable(String),
      issue_comment_subject: T.nilable(MonolithTwirp::Conduit::Feeds::V1::IssueComment),
      issue_subject: T.nilable(MonolithTwirp::Conduit::Feeds::V1::Issue),
      pull_request_comment_subject: T.nilable(MonolithTwirp::Conduit::Feeds::V1::PullRequestComment),
      pull_request_subject: T.nilable(MonolithTwirp::Conduit::Feeds::V1::PullRequest),
      related_by: T.nilable(T.any(Symbol, Integer)),
      related_items: T.nilable(T.any(Google::Protobuf::RepeatedField[MonolithTwirp::Conduit::Feeds::V1::FeedItem], T::Array[MonolithTwirp::Conduit::Feeds::V1::FeedItem])),
      relationship: T.nilable(String),
      release_subject: T.nilable(MonolithTwirp::Conduit::Feeds::V1::Release),
      repository_subject: T.nilable(MonolithTwirp::Conduit::Feeds::V1::Repository),
      subject_type: T.nilable(T.any(Symbol, Integer)),
      time: T.nilable(Google::Protobuf::Timestamp),
      user_hidden: T.nilable(T::Boolean),
      user_list_item_subject: T.nilable(MonolithTwirp::Conduit::Feeds::V1::UserListItem),
      user_subject: T.nilable(MonolithTwirp::Conduit::Feeds::V1::User)
    ).void
  end
  def initialize(action: nil, actor: nil, card_retrieved_id: nil, discussion_subject: nil, event_id: nil, event_type: nil, feed_post_subject: nil, gatherer: nil, identifier: nil, issue_comment_subject: nil, issue_subject: nil, pull_request_comment_subject: nil, pull_request_subject: nil, related_by: nil, related_items: T.unsafe(nil), relationship: nil, release_subject: nil, repository_subject: nil, subject_type: nil, time: nil, user_hidden: nil, user_list_item_subject: nil, user_subject: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action=(value); end

  sig { returns(T.nilable(MonolithTwirp::Conduit::Feeds::V1::User)) }
  def actor; end

  sig { params(value: T.nilable(MonolithTwirp::Conduit::Feeds::V1::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def card_retrieved_id; end

  sig { params(value: String).void }
  def card_retrieved_id=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_card_retrieved_id; end

  sig { void }
  def clear_discussion_subject; end

  sig { void }
  def clear_event_id; end

  sig { void }
  def clear_event_type; end

  sig { void }
  def clear_feed_post_subject; end

  sig { void }
  def clear_gatherer; end

  sig { void }
  def clear_identifier; end

  sig { void }
  def clear_issue_comment_subject; end

  sig { void }
  def clear_issue_subject; end

  sig { void }
  def clear_pull_request_comment_subject; end

  sig { void }
  def clear_pull_request_subject; end

  sig { void }
  def clear_related_by; end

  sig { void }
  def clear_related_items; end

  sig { void }
  def clear_relationship; end

  sig { void }
  def clear_release_subject; end

  sig { void }
  def clear_repository_subject; end

  sig { void }
  def clear_subject_type; end

  sig { void }
  def clear_time; end

  sig { void }
  def clear_user_hidden; end

  sig { void }
  def clear_user_list_item_subject; end

  sig { void }
  def clear_user_subject; end

  sig { returns(T.nilable(MonolithTwirp::Conduit::Feeds::V1::Discussion)) }
  def discussion_subject; end

  sig { params(value: T.nilable(MonolithTwirp::Conduit::Feeds::V1::Discussion)).void }
  def discussion_subject=(value); end

  sig { returns(Integer) }
  def event_id; end

  sig { params(value: Integer).void }
  def event_id=(value); end

  sig { returns(String) }
  def event_type; end

  sig { params(value: String).void }
  def event_type=(value); end

  sig { returns(T.nilable(MonolithTwirp::Conduit::Feeds::V1::FeedPost)) }
  def feed_post_subject; end

  sig { params(value: T.nilable(MonolithTwirp::Conduit::Feeds::V1::FeedPost)).void }
  def feed_post_subject=(value); end

  sig { returns(String) }
  def gatherer; end

  sig { params(value: String).void }
  def gatherer=(value); end

  sig { returns(String) }
  def identifier; end

  sig { params(value: String).void }
  def identifier=(value); end

  sig { returns(T.nilable(MonolithTwirp::Conduit::Feeds::V1::IssueComment)) }
  def issue_comment_subject; end

  sig { params(value: T.nilable(MonolithTwirp::Conduit::Feeds::V1::IssueComment)).void }
  def issue_comment_subject=(value); end

  sig { returns(T.nilable(MonolithTwirp::Conduit::Feeds::V1::Issue)) }
  def issue_subject; end

  sig { params(value: T.nilable(MonolithTwirp::Conduit::Feeds::V1::Issue)).void }
  def issue_subject=(value); end

  sig { returns(T.nilable(MonolithTwirp::Conduit::Feeds::V1::PullRequestComment)) }
  def pull_request_comment_subject; end

  sig { params(value: T.nilable(MonolithTwirp::Conduit::Feeds::V1::PullRequestComment)).void }
  def pull_request_comment_subject=(value); end

  sig { returns(T.nilable(MonolithTwirp::Conduit::Feeds::V1::PullRequest)) }
  def pull_request_subject; end

  sig { params(value: T.nilable(MonolithTwirp::Conduit::Feeds::V1::PullRequest)).void }
  def pull_request_subject=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def related_by; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def related_by=(value); end

  sig { returns(Google::Protobuf::RepeatedField[MonolithTwirp::Conduit::Feeds::V1::FeedItem]) }
  def related_items; end

  sig { params(value: Google::Protobuf::RepeatedField[MonolithTwirp::Conduit::Feeds::V1::FeedItem]).void }
  def related_items=(value); end

  sig { returns(String) }
  def relationship; end

  sig { params(value: String).void }
  def relationship=(value); end

  sig { returns(T.nilable(MonolithTwirp::Conduit::Feeds::V1::Release)) }
  def release_subject; end

  sig { params(value: T.nilable(MonolithTwirp::Conduit::Feeds::V1::Release)).void }
  def release_subject=(value); end

  sig { returns(T.nilable(MonolithTwirp::Conduit::Feeds::V1::Repository)) }
  def repository_subject; end

  sig { params(value: T.nilable(MonolithTwirp::Conduit::Feeds::V1::Repository)).void }
  def repository_subject=(value); end

  sig { returns(T.nilable(Symbol)) }
  def subject; end

  sig { returns(T.any(Symbol, Integer)) }
  def subject_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def subject_type=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def time; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def time=(value); end

  sig { returns(T::Boolean) }
  def user_hidden; end

  sig { params(value: T::Boolean).void }
  def user_hidden=(value); end

  sig { returns(T.nilable(MonolithTwirp::Conduit::Feeds::V1::UserListItem)) }
  def user_list_item_subject; end

  sig { params(value: T.nilable(MonolithTwirp::Conduit::Feeds::V1::UserListItem)).void }
  def user_list_item_subject=(value); end

  sig { returns(T.nilable(MonolithTwirp::Conduit::Feeds::V1::User)) }
  def user_subject; end

  sig { params(value: T.nilable(MonolithTwirp::Conduit::Feeds::V1::User)).void }
  def user_subject=(value); end
end

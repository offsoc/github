# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `geo_pattern` gem.
# Please instead update this file by running `bin/tapioca gem geo_pattern`.

# source://geo_pattern//lib/geo_pattern/version.rb#3
module GeoPattern
  class << self
    # source://geo_pattern//lib/geo_pattern.rb#55
    def generate(string = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://geo_pattern//lib/geo_pattern/background.rb#4
class GeoPattern::Background
  include ::GeoPattern::Roles::ComparableMetadata
  extend ::GeoPattern::Roles::ComparableMetadata::ClassMethods
  extend ::Forwardable

  # @raise [ArgumentError]
  # @return [Background] a new instance of Background
  #
  # source://geo_pattern//lib/geo_pattern/background.rb#13
  def initialize(options); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def base_color(*args, **_arg1, &block); end

  # source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#26
  def base_color?(value); end

  # Returns the value of attribute color.
  #
  # source://geo_pattern//lib/geo_pattern/background.rb#9
  def color; end

  # source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#26
  def color?(value); end

  # Returns the value of attribute generator.
  #
  # source://geo_pattern//lib/geo_pattern/background.rb#9
  def generator; end

  # Returns the value of attribute image.
  #
  # source://geo_pattern//lib/geo_pattern/background.rb#9
  def image; end

  # Returns the value of attribute preset.
  #
  # source://geo_pattern//lib/geo_pattern/background.rb#9
  def preset; end
end

# Generating backgrounds
#
# source://geo_pattern//lib/geo_pattern/background_generators/solid_generator.rb#5
module GeoPattern::BackgroundGenerators; end

# Generating a solid background
#
# source://geo_pattern//lib/geo_pattern/background_generators/solid_generator.rb#7
class GeoPattern::BackgroundGenerators::SolidGenerator
  include ::GeoPattern::Roles::NamedGenerator

  # New generator
  #
  # @param seed [Seed] The seed used during generation the background
  # @param preset [ColorPreset] A preset of values which are used during generating the background
  # @return [SolidGenerator] a new instance of SolidGenerator
  #
  # source://geo_pattern//lib/geo_pattern/background_generators/solid_generator.rb#23
  def initialize(seed, preset); end

  # Generate the background for pattern
  #
  # @param pattern [#background=] The pattern for which the background should be generated
  #
  # source://geo_pattern//lib/geo_pattern/background_generators/solid_generator.rb#32
  def generate(pattern); end

  private

  # Returns the value of attribute color.
  #
  # source://geo_pattern//lib/geo_pattern/background_generators/solid_generator.rb#12
  def color; end

  # source://geo_pattern//lib/geo_pattern/background_generators/solid_generator.rb#47
  def color_for(seed, preset); end

  # source://geo_pattern//lib/geo_pattern/background_generators/solid_generator.rb#40
  def generate_background; end

  # Returns the value of attribute preset.
  #
  # source://geo_pattern//lib/geo_pattern/background_generators/solid_generator.rb#12
  def preset; end

  # Returns the value of attribute seed.
  #
  # source://geo_pattern//lib/geo_pattern/background_generators/solid_generator.rb#12
  def seed; end
end

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#5
GeoPattern::ChevronPattern = T.let(T.unsafe(nil), Symbol)

# source://geo_pattern//lib/geo_pattern/color.rb#4
class GeoPattern::Color
  # @return [Color] a new instance of Color
  #
  # source://geo_pattern//lib/geo_pattern/color.rb#11
  def initialize(html_color); end

  # source://geo_pattern//lib/geo_pattern/color.rb#23
  def to_html; end

  # source://geo_pattern//lib/geo_pattern/color.rb#15
  def to_svg; end

  private

  # Returns the value of attribute color.
  #
  # source://geo_pattern//lib/geo_pattern/color.rb#7
  def color; end

  # Sets the attribute color
  #
  # @param value the value to set the attribute color to.
  #
  # source://geo_pattern//lib/geo_pattern/color.rb#7
  def color=(_arg0); end
end

# Color generators
#
# source://geo_pattern//lib/geo_pattern/color_generators/simple_generator.rb#5
module GeoPattern::ColorGenerators; end

# Generate color based on Base Color and seed
#
# source://geo_pattern//lib/geo_pattern/color_generators/base_color_generator.rb#7
class GeoPattern::ColorGenerators::BaseColorGenerator
  # New
  #
  # @param color [String] HTML color string, #0a0a0a
  # @return [BaseColorGenerator] a new instance of BaseColorGenerator
  #
  # source://geo_pattern//lib/geo_pattern/color_generators/base_color_generator.rb#18
  def initialize(color, seed, creator = T.unsafe(nil)); end

  # Generator color
  #
  # source://geo_pattern//lib/geo_pattern/color_generators/base_color_generator.rb#25
  def generate; end

  private

  # Returns the value of attribute color.
  #
  # source://geo_pattern//lib/geo_pattern/color_generators/base_color_generator.rb#10
  def color; end

  # Returns the value of attribute creator.
  #
  # source://geo_pattern//lib/geo_pattern/color_generators/base_color_generator.rb#10
  def creator; end

  # Ruby implementation of Processing's map function
  # http://processing.org/reference/map_.html
  # v for value, d for desired
  #
  # source://geo_pattern//lib/geo_pattern/color_generators/base_color_generator.rb#48
  def map(value, v_min, v_max, d_min, d_max); end

  # Returns the value of attribute seed.
  #
  # source://geo_pattern//lib/geo_pattern/color_generators/base_color_generator.rb#10
  def seed; end

  # source://geo_pattern//lib/geo_pattern/color_generators/base_color_generator.rb#31
  def transform(color, seed); end
end

# Simple one
#
# source://geo_pattern//lib/geo_pattern/color_generators/simple_generator.rb#7
class GeoPattern::ColorGenerators::SimpleGenerator
  # New
  #
  # @param color [String] HTML color string, #0a0a0a
  # @return [SimpleGenerator] a new instance of SimpleGenerator
  #
  # source://geo_pattern//lib/geo_pattern/color_generators/simple_generator.rb#18
  def initialize(color, creator = T.unsafe(nil)); end

  # Generator color
  #
  # source://geo_pattern//lib/geo_pattern/color_generators/simple_generator.rb#24
  def generate; end

  private

  # Returns the value of attribute color.
  #
  # source://geo_pattern//lib/geo_pattern/color_generators/simple_generator.rb#10
  def color; end

  # Returns the value of attribute creator.
  #
  # source://geo_pattern//lib/geo_pattern/color_generators/simple_generator.rb#10
  def creator; end
end

# source://geo_pattern//lib/geo_pattern/color_preset.rb#6
class GeoPattern::ColorPreset
  # @return [ColorPreset] a new instance of ColorPreset
  #
  # source://geo_pattern//lib/geo_pattern/color_preset.rb#9
  def initialize(color: T.unsafe(nil), base_color: T.unsafe(nil)); end

  # Returns the value of attribute base_color.
  #
  # source://geo_pattern//lib/geo_pattern/color_preset.rb#7
  def base_color; end

  # Sets the attribute base_color
  #
  # @param value the value to set the attribute base_color to.
  #
  # source://geo_pattern//lib/geo_pattern/color_preset.rb#7
  def base_color=(_arg0); end

  # Returns the value of attribute color.
  #
  # source://geo_pattern//lib/geo_pattern/color_preset.rb#7
  def color; end

  # Sets the attribute color
  #
  # @param value the value to set the attribute color to.
  #
  # source://geo_pattern//lib/geo_pattern/color_preset.rb#7
  def color=(_arg0); end

  # Return mode
  #
  # @return [Symbol] The color mode
  #
  # source://geo_pattern//lib/geo_pattern/color_preset.rb#18
  def mode; end

  # Sets the attribute mode
  #
  # @param value the value to set the attribute mode to.
  #
  # source://geo_pattern//lib/geo_pattern/color_preset.rb#7
  def mode=(_arg0); end

  # @return [Boolean]
  #
  # source://geo_pattern//lib/geo_pattern/color_preset.rb#26
  def mode?(m); end
end

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#6
GeoPattern::ConcentricCirclesPattern = T.let(T.unsafe(nil), Symbol)

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#7
GeoPattern::DiamondPattern = T.let(T.unsafe(nil), Symbol)

# source://geo_pattern//lib/geo_pattern/helpers.rb#4
module GeoPattern::Helpers
  private

  # source://geo_pattern//lib/geo_pattern/helpers.rb#50
  def build_arguments(*methods); end

  # Removes the module part from the expression in the string.
  #
  # See also +deconstantize+.
  #
  # @see ActiveSupport It's MIT-Licensed
  #
  # source://geo_pattern//lib/geo_pattern/helpers.rb#40
  def demodulize(path); end

  # source://geo_pattern//lib/geo_pattern/helpers.rb#5
  def require_files_matching_pattern(pattern); end

  # Makes an underscored, lowercase form from the expression in the string.
  #
  # @see ActiveSupport It's MIT-Licensed
  #
  # source://geo_pattern//lib/geo_pattern/helpers.rb#14
  def underscore(camel_cased_word); end

  class << self
    # source://geo_pattern//lib/geo_pattern/helpers.rb#50
    def build_arguments(*methods); end

    # Removes the module part from the expression in the string.
    #
    # See also +deconstantize+.
    #
    # @see ActiveSupport It's MIT-Licensed
    #
    # source://geo_pattern//lib/geo_pattern/helpers.rb#40
    def demodulize(path); end

    # source://geo_pattern//lib/geo_pattern/helpers.rb#5
    def require_files_matching_pattern(pattern); end

    # Makes an underscored, lowercase form from the expression in the string.
    #
    # @see ActiveSupport It's MIT-Licensed
    #
    # source://geo_pattern//lib/geo_pattern/helpers.rb#14
    def underscore(camel_cased_word); end
  end
end

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#8
GeoPattern::HexagonPattern = T.let(T.unsafe(nil), Symbol)

# raised if an invalid pattern is requested
#
# source://geo_pattern//lib/geo_pattern/errors.rb#8
class GeoPattern::InvalidPatternError < ::GeoPattern::UserError; end

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#9
GeoPattern::MosaicSquaresPattern = T.let(T.unsafe(nil), Symbol)

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#10
GeoPattern::NestedSquaresPattern = T.let(T.unsafe(nil), Symbol)

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#11
GeoPattern::OctagonPattern = T.let(T.unsafe(nil), Symbol)

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#12
GeoPattern::OverlappingCirclesPattern = T.let(T.unsafe(nil), Symbol)

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#13
GeoPattern::OverlappingRingsPattern = T.let(T.unsafe(nil), Symbol)

# source://geo_pattern//lib/geo_pattern/pattern.rb#4
class GeoPattern::Pattern
  # @return [Pattern] a new instance of Pattern
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#13
  def initialize(svg_image = T.unsafe(nil)); end

  # Returns the value of attribute background.
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#11
  def background; end

  # Sets the attribute background
  #
  # @param value the value to set the attribute background to.
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#11
  def background=(_arg0); end

  # @deprecated
  # @see #to_base64
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#68
  def base64_string; end

  # Generate things for the pattern
  #
  # @param generator [#generate] The generator which should do things with this pattern - e.g. adding
  #   background or a structure
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#30
  def generate_me(generator); end

  # Returns the value of attribute height.
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#11
  def height; end

  # Sets the attribute height
  #
  # @param value the value to set the attribute height to.
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#11
  def height=(_arg0); end

  # Check if string is included in pattern
  #
  # @param string [String] The checked string
  # @return [Boolean]
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#21
  def include?(string); end

  # Returns the value of attribute structure.
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#11
  def structure; end

  # Sets the attribute structure
  #
  # @param value the value to set the attribute structure to.
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#11
  def structure=(_arg0); end

  # @deprecated
  # @see #to_svg
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#60
  def svg_string; end

  # Convert to base64
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#41
  def to_base64; end

  # Convert to data uri
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#46
  def to_data_uri; end

  # Convert pattern to svg
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#35
  def to_s; end

  # Convert pattern to svg
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#35
  def to_svg; end

  # @deprecated
  # @see #to_data_uri
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#52
  def uri_image; end

  # Returns the value of attribute width.
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#11
  def width; end

  # Sets the attribute width
  #
  # @param value the value to set the attribute width to.
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#11
  def width=(_arg0); end

  private

  # source://geo_pattern//lib/geo_pattern/pattern.rb#76
  def image; end

  # Returns the value of attribute svg_image.
  #
  # source://geo_pattern//lib/geo_pattern/pattern.rb#7
  def svg_image; end
end

# source://geo_pattern//lib/geo_pattern/pattern_generator.rb#4
class GeoPattern::PatternGenerator
  # @return [PatternGenerator] a new instance of PatternGenerator
  #
  # source://geo_pattern//lib/geo_pattern/pattern_generator.rb#11
  def initialize(string, generator: T.unsafe(nil), patterns: T.unsafe(nil), base_color: T.unsafe(nil), color: T.unsafe(nil)); end

  # source://geo_pattern//lib/geo_pattern/pattern_generator.rb#45
  def generate; end

  private

  # Returns the value of attribute background_generator.
  #
  # source://geo_pattern//lib/geo_pattern/pattern_generator.rb#7
  def background_generator; end

  # Returns the value of attribute structure_generator.
  #
  # source://geo_pattern//lib/geo_pattern/pattern_generator.rb#7
  def structure_generator; end
end

# source://geo_pattern//lib/geo_pattern/pattern_helpers.rb#4
module GeoPattern::PatternHelpers
  private

  # source://geo_pattern//lib/geo_pattern/pattern_helpers.rb#39
  def generate_rgb_string(rgb); end

  # source://geo_pattern//lib/geo_pattern/pattern_helpers.rb#5
  def hex_val(hash, index, length); end

  # source://geo_pattern//lib/geo_pattern/pattern_helpers.rb#20
  def html_to_rgb(color); end

  # source://geo_pattern//lib/geo_pattern/pattern_helpers.rb#24
  def html_to_rgb_for_string(seed, base_color); end

  # Ruby implementation of Processing's map function
  # http://processing.org/reference/map_.html
  # v for value, d for desired
  #
  # source://geo_pattern//lib/geo_pattern/pattern_helpers.rb#12
  def map(value, v_min, v_max, d_min, d_max); end

  class << self
    # source://geo_pattern//lib/geo_pattern/pattern_helpers.rb#39
    def generate_rgb_string(rgb); end

    # source://geo_pattern//lib/geo_pattern/pattern_helpers.rb#5
    def hex_val(hash, index, length); end

    # source://geo_pattern//lib/geo_pattern/pattern_helpers.rb#20
    def html_to_rgb(color); end

    # source://geo_pattern//lib/geo_pattern/pattern_helpers.rb#24
    def html_to_rgb_for_string(seed, base_color); end

    # Ruby implementation of Processing's map function
    # http://processing.org/reference/map_.html
    # v for value, d for desired
    #
    # source://geo_pattern//lib/geo_pattern/pattern_helpers.rb#12
    def map(value, v_min, v_max, d_min, d_max); end
  end
end

# source://geo_pattern//lib/geo_pattern/pattern_preset.rb#4
class GeoPattern::PatternPreset
  # @return [PatternPreset] a new instance of PatternPreset
  #
  # source://geo_pattern//lib/geo_pattern/pattern_preset.rb#11
  def initialize(options); end

  # source://geo_pattern//lib/geo_pattern/pattern_preset.rb#16
  def fill_color_dark; end

  # source://geo_pattern//lib/geo_pattern/pattern_preset.rb#16
  def fill_color_light; end

  # source://geo_pattern//lib/geo_pattern/pattern_preset.rb#16
  def opacity_max; end

  # source://geo_pattern//lib/geo_pattern/pattern_preset.rb#16
  def opacity_min; end

  # source://geo_pattern//lib/geo_pattern/pattern_preset.rb#16
  def stroke_color; end

  # source://geo_pattern//lib/geo_pattern/pattern_preset.rb#16
  def stroke_opacity; end

  # source://geo_pattern//lib/geo_pattern/pattern_preset.rb#21
  def update(opts); end

  private

  # Returns the value of attribute options.
  #
  # source://geo_pattern//lib/geo_pattern/pattern_preset.rb#7
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://geo_pattern//lib/geo_pattern/pattern_preset.rb#7
  def options=(_arg0); end
end

# source://geo_pattern//lib/geo_pattern/pattern_sieve.rb#4
class GeoPattern::PatternSieve
  # @return [PatternSieve] a new instance of PatternSieve
  #
  # source://geo_pattern//lib/geo_pattern/pattern_sieve.rb#11
  def initialize(requested_patterns, seed, pattern_store = T.unsafe(nil)); end

  # source://geo_pattern//lib/geo_pattern/pattern_sieve.rb#20
  def fetch; end

  private

  # Returns the value of attribute available_patterns.
  #
  # source://geo_pattern//lib/geo_pattern/pattern_sieve.rb#7
  def available_patterns; end

  # source://geo_pattern//lib/geo_pattern/pattern_sieve.rb#30
  def determine_available_patterns; end

  # source://geo_pattern//lib/geo_pattern/pattern_sieve.rb#26
  def determine_index; end

  # Returns the value of attribute index.
  #
  # source://geo_pattern//lib/geo_pattern/pattern_sieve.rb#7
  def index; end

  # Returns the value of attribute pattern_store.
  #
  # source://geo_pattern//lib/geo_pattern/pattern_sieve.rb#7
  def pattern_store; end

  # Returns the value of attribute requested_patterns.
  #
  # source://geo_pattern//lib/geo_pattern/pattern_sieve.rb#7
  def requested_patterns; end

  # Returns the value of attribute seed.
  #
  # source://geo_pattern//lib/geo_pattern/pattern_sieve.rb#7
  def seed; end
end

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#23
class GeoPattern::PatternStore
  # @return [PatternStore] a new instance of PatternStore
  #
  # source://geo_pattern//lib/geo_pattern/pattern_store.rb#30
  def initialize; end

  # source://geo_pattern//lib/geo_pattern/pattern_store.rb#51
  def [](pattern); end

  # source://geo_pattern//lib/geo_pattern/pattern_store.rb#57
  def all; end

  # @return [Boolean]
  #
  # source://geo_pattern//lib/geo_pattern/pattern_store.rb#61
  def known?(pattern); end

  private

  # Returns the value of attribute store.
  #
  # source://geo_pattern//lib/geo_pattern/pattern_store.rb#26
  def store; end
end

# source://geo_pattern//lib/geo_pattern/pattern_validator.rb#4
class GeoPattern::PatternValidator
  # @return [PatternValidator] a new instance of PatternValidator
  #
  # source://geo_pattern//lib/geo_pattern/pattern_validator.rb#11
  def initialize(pattern_store = T.unsafe(nil)); end

  # @raise [InvalidPatternError]
  #
  # source://geo_pattern//lib/geo_pattern/pattern_validator.rb#15
  def validate(requested_patterns); end

  private

  # Returns the value of attribute pattern_store.
  #
  # source://geo_pattern//lib/geo_pattern/pattern_validator.rb#7
  def pattern_store; end

  # @return [Boolean]
  #
  # source://geo_pattern//lib/geo_pattern/pattern_validator.rb#25
  def valid?(requested_patterns); end
end

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#14
GeoPattern::PlaidPattern = T.let(T.unsafe(nil), Symbol)

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#15
GeoPattern::PlusSignPattern = T.let(T.unsafe(nil), Symbol)

# Roles
#
# source://geo_pattern//lib/geo_pattern/roles/named_generator.rb#4
module GeoPattern::Roles; end

# A comparable metadata
#
# source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#7
module GeoPattern::Roles::ComparableMetadata
  mixes_in_class_methods ::GeoPattern::Roles::ComparableMetadata::ClassMethods

  # @return [Boolean]
  #
  # source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#12
  def generator?(value); end

  class << self
    # @private
    #
    # source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#8
    def included(base); end
  end
end

# Class Methods
#
# source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#22
module GeoPattern::Roles::ComparableMetadata::ClassMethods
  # Define comparators
  #
  # source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#24
  def def_comparators(*methods); end
end

# source://geo_pattern//lib/geo_pattern/roles/named_generator.rb#5
module GeoPattern::Roles::NamedGenerator
  # source://geo_pattern//lib/geo_pattern/roles/named_generator.rb#10
  def name; end

  # @return [Boolean]
  #
  # source://geo_pattern//lib/geo_pattern/roles/named_generator.rb#6
  def name?(other_name); end
end

# source://geo_pattern//lib/geo_pattern/seed.rb#4
class GeoPattern::Seed
  # @return [Seed] a new instance of Seed
  #
  # source://geo_pattern//lib/geo_pattern/seed.rb#11
  def initialize(string); end

  # source://geo_pattern//lib/geo_pattern/seed.rb#15
  def [](*args); end

  # source://geo_pattern//lib/geo_pattern/seed.rb#19
  def to_i(index, length); end

  private

  # Returns the value of attribute seed.
  #
  # source://geo_pattern//lib/geo_pattern/seed.rb#7
  def seed; end
end

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#16
GeoPattern::SineWavePattern = T.let(T.unsafe(nil), Symbol)

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#17
GeoPattern::SquarePattern = T.let(T.unsafe(nil), Symbol)

# source://geo_pattern//lib/geo_pattern/structure.rb#4
class GeoPattern::Structure
  include ::GeoPattern::Roles::ComparableMetadata
  extend ::GeoPattern::Roles::ComparableMetadata::ClassMethods
  extend ::Forwardable

  # @raise [ArgumentError]
  # @return [Structure] a new instance of Structure
  #
  # source://geo_pattern//lib/geo_pattern/structure.rb#13
  def initialize(options); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def fill_color_dark(*args, **_arg1, &block); end

  # source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#26
  def fill_color_dark?(value); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def fill_color_light(*args, **_arg1, &block); end

  # source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#26
  def fill_color_light?(value); end

  # Returns the value of attribute generator.
  #
  # source://geo_pattern//lib/geo_pattern/structure.rb#9
  def generator; end

  # Returns the value of attribute image.
  #
  # source://geo_pattern//lib/geo_pattern/structure.rb#9
  def image; end

  # Returns the value of attribute name.
  #
  # source://geo_pattern//lib/geo_pattern/structure.rb#9
  def name; end

  # source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#26
  def name?(value); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def opacity_max(*args, **_arg1, &block); end

  # source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#26
  def opacity_max?(value); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def opacity_min(*args, **_arg1, &block); end

  # source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#26
  def opacity_min?(value); end

  # Returns the value of attribute preset.
  #
  # source://geo_pattern//lib/geo_pattern/structure.rb#9
  def preset; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def stroke_color(*args, **_arg1, &block); end

  # source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#26
  def stroke_color?(value); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def stroke_opacity(*args, **_arg1, &block); end

  # source://geo_pattern//lib/geo_pattern/roles/comparable_metadata.rb#26
  def stroke_opacity?(value); end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#4
module GeoPattern::StructureGenerators; end

# source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#5
class GeoPattern::StructureGenerators::BaseGenerator
  include ::GeoPattern::Roles::NamedGenerator

  # @return [BaseGenerator] a new instance of BaseGenerator
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#15
  def initialize(seed, preset, svg = T.unsafe(nil)); end

  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#33
  def generate(pattern); end

  protected

  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#80
  def build_plus_shape(square_size); end

  private

  # Hook for generators
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#54
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#66
  def fill_color(val); end

  # Returns the value of attribute fill_color_dark.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#10
  def fill_color_dark; end

  # Returns the value of attribute fill_color_light.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#10
  def fill_color_light; end

  # Generate the structure
  #
  # @raise [NotImplementedError]
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#58
  def generate_structure; end

  # Returns the value of attribute height.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#11
  def height; end

  # Sets the attribute height
  #
  # @param value the value to set the attribute height to.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#11
  def height=(_arg0); end

  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#62
  def hex_val(index, len); end

  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#74
  def map(value, v_min, v_max, d_min, d_max); end

  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#70
  def opacity(val); end

  # Returns the value of attribute opacity_max.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#10
  def opacity_max; end

  # Returns the value of attribute opacity_min.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#10
  def opacity_min; end

  # Returns the value of attribute preset.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#10
  def preset; end

  # Returns the value of attribute seed.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#10
  def seed; end

  # Returns the value of attribute stroke_color.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#10
  def stroke_color; end

  # Returns the value of attribute stroke_opacity.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#10
  def stroke_opacity; end

  # Returns the value of attribute svg.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#10
  def svg; end

  # Set Svg Image
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#45
  def svg_image; end

  # Returns the value of attribute width.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#11
  def width; end

  # Sets the attribute width
  #
  # @param value the value to set the attribute width to.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/base_generator.rb#11
  def width=(_arg0); end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/chevrons_generator.rb#5
class GeoPattern::StructureGenerators::ChevronsGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/chevrons_generator.rb#10
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/chevrons_generator.rb#48
  def build_chevron_shape(width, height); end

  # Returns the value of attribute chevron.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/chevrons_generator.rb#8
  def chevron; end

  # Returns the value of attribute chevron_height.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/chevrons_generator.rb#8
  def chevron_height; end

  # Returns the value of attribute chevron_width.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/chevrons_generator.rb#8
  def chevron_width; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/chevrons_generator.rb#19
  def generate_structure; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/concentric_circles_generator.rb#5
class GeoPattern::StructureGenerators::ConcentricCirclesGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/concentric_circles_generator.rb#10
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/concentric_circles_generator.rb#18
  def generate_structure; end

  # Returns the value of attribute ring_size.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/concentric_circles_generator.rb#8
  def ring_size; end

  # Returns the value of attribute scale.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/concentric_circles_generator.rb#8
  def scale; end

  # Returns the value of attribute stroke_width.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/concentric_circles_generator.rb#8
  def stroke_width; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/diamonds_generator.rb#5
class GeoPattern::StructureGenerators::DiamondsGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/diamonds_generator.rb#10
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/diamonds_generator.rb#67
  def build_diamond_shape(width, height); end

  # Returns the value of attribute diamond.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/diamonds_generator.rb#8
  def diamond; end

  # Returns the value of attribute diamond_height.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/diamonds_generator.rb#8
  def diamond_height; end

  # Returns the value of attribute diamond_width.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/diamonds_generator.rb#8
  def diamond_width; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/diamonds_generator.rb#19
  def generate_structure; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/hexagons_generator.rb#5
class GeoPattern::StructureGenerators::HexagonsGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/hexagons_generator.rb#10
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/hexagons_generator.rb#61
  def build_hexagon_shape(side_length); end

  # source://geo_pattern//lib/geo_pattern/structure_generators/hexagons_generator.rb#21
  def generate_structure; end

  # Returns the value of attribute hex.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/hexagons_generator.rb#8
  def hex; end

  # Returns the value of attribute hex_height.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/hexagons_generator.rb#8
  def hex_height; end

  # Returns the value of attribute hex_width.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/hexagons_generator.rb#8
  def hex_width; end

  # Returns the value of attribute scale.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/hexagons_generator.rb#8
  def scale; end

  # Returns the value of attribute side_length.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/hexagons_generator.rb#8
  def side_length; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/mosaic_squares_generator.rb#5
class GeoPattern::StructureGenerators::MosaicSquaresGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/mosaic_squares_generator.rb#10
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/mosaic_squares_generator.rb#80
  def build_right_triangle_shape(side_length); end

  # source://geo_pattern//lib/geo_pattern/structure_generators/mosaic_squares_generator.rb#38
  def draw_inner_mosaic_tile(x, y, triangle_size, vals); end

  # source://geo_pattern//lib/geo_pattern/structure_generators/mosaic_squares_generator.rb#63
  def draw_outer_mosaic_tile(x, y, triangle_size, val); end

  # source://geo_pattern//lib/geo_pattern/structure_generators/mosaic_squares_generator.rb#16
  def generate_structure; end

  # Returns the value of attribute triangle_size.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/mosaic_squares_generator.rb#8
  def triangle_size; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/nested_squares_generator.rb#5
class GeoPattern::StructureGenerators::NestedSquaresGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/nested_squares_generator.rb#10
  def after_initialize; end

  # Returns the value of attribute block_size.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/nested_squares_generator.rb#8
  def block_size; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/nested_squares_generator.rb#17
  def generate_structure; end

  # Returns the value of attribute square_size.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/nested_squares_generator.rb#8
  def square_size; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/octagons_generator.rb#5
class GeoPattern::StructureGenerators::OctagonsGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/octagons_generator.rb#10
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/octagons_generator.rb#38
  def build_octogon_shape(square_size); end

  # source://geo_pattern//lib/geo_pattern/structure_generators/octagons_generator.rb#17
  def generate_structure; end

  # Returns the value of attribute square_size.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/octagons_generator.rb#8
  def square_size; end

  # Returns the value of attribute tile.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/octagons_generator.rb#8
  def tile; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/overlapping_circles_generator.rb#5
class GeoPattern::StructureGenerators::OverlappingCirclesGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/overlapping_circles_generator.rb#10
  def after_initialize; end

  # Returns the value of attribute diameter.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/overlapping_circles_generator.rb#8
  def diameter; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/overlapping_circles_generator.rb#18
  def generate_structure; end

  # Returns the value of attribute radius.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/overlapping_circles_generator.rb#8
  def radius; end

  # Returns the value of attribute scale.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/overlapping_circles_generator.rb#8
  def scale; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/overlapping_rings_generator.rb#5
class GeoPattern::StructureGenerators::OverlappingRingsGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/overlapping_rings_generator.rb#10
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/overlapping_rings_generator.rb#18
  def generate_structure; end

  # Returns the value of attribute ring_size.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/overlapping_rings_generator.rb#8
  def ring_size; end

  # Returns the value of attribute scale.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/overlapping_rings_generator.rb#8
  def scale; end

  # Returns the value of attribute stroke_width.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/overlapping_rings_generator.rb#8
  def stroke_width; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/plaid_generator.rb#5
class GeoPattern::StructureGenerators::PlaidGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/plaid_generator.rb#8
  def generate_structure; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/plus_signs_generator.rb#5
class GeoPattern::StructureGenerators::PlusSignsGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/plus_signs_generator.rb#10
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/plus_signs_generator.rb#18
  def generate_structure; end

  # Returns the value of attribute plus_shape.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/plus_signs_generator.rb#8
  def plus_shape; end

  # Returns the value of attribute plus_size.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/plus_signs_generator.rb#8
  def plus_size; end

  # Returns the value of attribute square_size.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/plus_signs_generator.rb#8
  def square_size; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/sine_waves_generator.rb#5
class GeoPattern::StructureGenerators::SineWavesGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/sine_waves_generator.rb#10
  def after_initialize; end

  # Returns the value of attribute amplitude.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/sine_waves_generator.rb#8
  def amplitude; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/sine_waves_generator.rb#19
  def generate_structure; end

  # Returns the value of attribute period.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/sine_waves_generator.rb#8
  def period; end

  # Returns the value of attribute wave_width.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/sine_waves_generator.rb#8
  def wave_width; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/squares_generator.rb#5
class GeoPattern::StructureGenerators::SquaresGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/squares_generator.rb#10
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/squares_generator.rb#16
  def generate_structure; end

  # Returns the value of attribute square_size.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/squares_generator.rb#8
  def square_size; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/tessellation_generator.rb#5
class GeoPattern::StructureGenerators::TessellationGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/tessellation_generator.rb#10
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/tessellation_generator.rb#99
  def build_rotated_triangle_shape(side_length, width); end

  # source://geo_pattern//lib/geo_pattern/structure_generators/tessellation_generator.rb#24
  def generate_structure; end

  # Returns the value of attribute hex_height.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/tessellation_generator.rb#8
  def hex_height; end

  # Returns the value of attribute hex_width.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/tessellation_generator.rb#8
  def hex_width; end

  # Returns the value of attribute side_length.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/tessellation_generator.rb#8
  def side_length; end

  # Returns the value of attribute tile_height.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/tessellation_generator.rb#8
  def tile_height; end

  # Returns the value of attribute tile_width.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/tessellation_generator.rb#8
  def tile_width; end

  # Returns the value of attribute triangle.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/tessellation_generator.rb#8
  def triangle; end

  # Returns the value of attribute triangle_height.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/tessellation_generator.rb#8
  def triangle_height; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/triangles_generator.rb#5
class GeoPattern::StructureGenerators::TrianglesGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/triangles_generator.rb#10
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/triangles_generator.rb#58
  def build_triangle_shape(side_length, height); end

  # source://geo_pattern//lib/geo_pattern/structure_generators/triangles_generator.rb#20
  def generate_structure; end

  # Returns the value of attribute scale.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/triangles_generator.rb#8
  def scale; end

  # Returns the value of attribute side_length.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/triangles_generator.rb#8
  def side_length; end

  # Returns the value of attribute triangle.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/triangles_generator.rb#8
  def triangle; end

  # Returns the value of attribute triangle_height.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/triangles_generator.rb#8
  def triangle_height; end
end

# source://geo_pattern//lib/geo_pattern/structure_generators/xes_generator.rb#5
class GeoPattern::StructureGenerators::XesGenerator < ::GeoPattern::StructureGenerators::BaseGenerator
  private

  # source://geo_pattern//lib/geo_pattern/structure_generators/xes_generator.rb#10
  def after_initialize; end

  # source://geo_pattern//lib/geo_pattern/structure_generators/xes_generator.rb#18
  def generate_structure; end

  # Returns the value of attribute square_size.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/xes_generator.rb#8
  def square_size; end

  # Returns the value of attribute x_shape.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/xes_generator.rb#8
  def x_shape; end

  # Returns the value of attribute x_size.
  #
  # source://geo_pattern//lib/geo_pattern/structure_generators/xes_generator.rb#8
  def x_size; end
end

# source://geo_pattern//lib/geo_pattern/svg_image.rb#4
class GeoPattern::SvgImage
  include ::Comparable

  # @return [SvgImage] a new instance of SvgImage
  #
  # source://geo_pattern//lib/geo_pattern/svg_image.rb#15
  def initialize; end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#53
  def <<(svg); end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#99
  def <=>(other); end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#49
  def body; end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#61
  def circle(cx, cy, r, args = T.unsafe(nil)); end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#73
  def group(elements, args = T.unsafe(nil)); end

  # Returns the value of attribute height.
  #
  # source://geo_pattern//lib/geo_pattern/svg_image.rb#13
  def height; end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#25
  def height=(height); end

  # Pattern includes string
  #
  # @param string [String] The string which should be included in the body of the SvgImage
  # @return [Boolean]
  #
  # source://geo_pattern//lib/geo_pattern/svg_image.rb#33
  def include?(string); end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#65
  def path(str, args = T.unsafe(nil)); end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#69
  def polyline(str, args = T.unsafe(nil)); end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#57
  def rect(x, y, width, height, args = T.unsafe(nil)); end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#41
  def svg_closer; end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#37
  def svg_header; end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#45
  def to_s; end

  # Returns the value of attribute width.
  #
  # source://geo_pattern//lib/geo_pattern/svg_image.rb#13
  def width; end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#21
  def width=(width); end

  # source://geo_pattern//lib/geo_pattern/svg_image.rb#79
  def write_args(args); end

  private

  # Returns the value of attribute svg_string.
  #
  # source://geo_pattern//lib/geo_pattern/svg_image.rb#9
  def svg_string; end

  class << self
    # source://geo_pattern//lib/geo_pattern/svg_image.rb#95
    def as_comment(str); end
  end
end

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#18
GeoPattern::TessellationPattern = T.let(T.unsafe(nil), Symbol)

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#19
GeoPattern::TrianglePattern = T.let(T.unsafe(nil), Symbol)

# user errors
#
# source://geo_pattern//lib/geo_pattern/errors.rb#5
class GeoPattern::UserError < ::StandardError; end

# source://geo_pattern//lib/geo_pattern/version.rb#4
GeoPattern::VERSION = T.let(T.unsafe(nil), String)

# source://geo_pattern//lib/geo_pattern/pattern_store.rb#20
GeoPattern::XesPattern = T.let(T.unsafe(nil), Symbol)

{"version":3,"file":"user-code-prompt-xxxxxxxxxxxx.js","mappings":"8HAIAA,CAAAA,EAAAA,E,OAAAA,EAAAA,EAAM,QAAS,sBAAuBC,QAMhCC,EALJ,IAAMC,EAAgBF,EAAME,aAAa,CACzC,GAAI,CAACA,EAAe,OAEpB,IAAMC,EAAqB,OAAW,sCAItC,OAAQ,IACN,IAAKH,cAAAA,EAAMI,IAAI,CAAkB,CAC/B,IAAMC,EAAgBH,EAAcI,YAAY,CAAC,iBACjDL,EAAeM,SAASC,aAAa,CAAC,CAAC,CAAC,EAAEH,EAAc,CAAC,EAEzD,KACF,CACA,KAAKF,EAAmBM,IAAI,CAACT,EAAMI,IAAI,EAAG,CACxC,IAAMM,EAAYR,EAAcI,YAAY,CAAC,aAC7CL,EAAeM,SAASC,aAAa,CAAC,CAAC,CAAC,EAAEE,EAAU,CAAC,CAGvD,CACF,CAEAT,GAAcU,OAChB,GAIAC,CAAAA,EAAAA,EAAAA,EAAAA,EAAQ,sBAAuB,CAC7BC,YAAaC,iBACbC,IAAIC,CAAE,EACJA,EAAGC,gBAAgB,CAAC,QAAS,QAcvBC,EAbJlB,EAAMmB,cAAc,GAIpB,GAAM,CAACC,cAAAA,CAAa,CAAC,CAFEpB,EAGvB,GAAI,CAACoB,EAAe,OAEpB,IAAMC,EAAWD,EAAcE,OAAO,CAAC,QAIvC,GAAKC,IADsBC,OAAO,mCACdf,IAAI,CAACY,IAIzB,IAAK,IAAMI,KAAclB,SAASmB,gBAAgB,CAAmB,4BAA6B,CAChG,GAAID,EAAWE,QAAQ,CAAE,SACzBT,EAAmBO,EAGnB,IAAMG,EAAQC,OAAOJ,EAAWK,EAAE,CAACC,KAAK,CAAC,IACzCN,CAAAA,EAAWO,KAAK,CAAGX,CAAQ,CAACO,EAAM,CAGpCV,GAAkBP,QACpB,EACF,CACF,E,oEC7CA,IAAIsB,EAAc,GACZC,EAAsD,IAAIC,EAAAA,CAAWA,CAE3E,SAASC,EAAYpC,CAAiB,EACpC,IAAMqC,EAAUrC,EAAMsC,MAAM,CAC5B,GAAID,aAAmBE,aAAeF,EAAQG,QAAQ,GAAKC,KAAKC,aAAa,CAC3E,IAAK,IAAMC,KAAST,EAAYU,OAAO,CAACP,GACtCM,EAAME,IAAI,CAACC,IAAI,CAAC,KAAMT,EAG5B,CAEO,SAASU,EAAQC,CAAgB,CAAEC,CAAgC,EACnEhB,IACHA,EAAc,GAGd1B,SAASU,gBAAgB,CAAC,QAASmB,EAAa,KAElDF,EAAYnB,GAAG,CAACiC,EAAUC,GAEtB1C,SAAS2C,aAAa,YAAYX,aAAehC,SAAS2C,aAAa,CAACN,OAAO,CAACI,IAClFC,EAAG1C,SAAS2C,aAAa,CAE7B,CAEO,SAASnD,EACdoD,CAA2C,CAC3CH,CAAgB,CAChBI,CAA+C,EAE/C,SAASC,EAAYrD,CAAY,EAC/B,IAAME,EAAgBF,EAAME,aAAa,CACpCA,IACLA,EAAcoD,mBAAmB,CAACH,EAAWC,GAC7ClD,EAAcoD,mBAAmB,CAAC,OAAQD,GAC5C,CAEAN,EAAQC,EAAU,SAAUO,CAAK,EAC/BA,EAAMtC,gBAAgB,CAACkC,EAAWC,GAClCG,EAAMtC,gBAAgB,CAAC,OAAQoC,EACjC,EACF,CAEO,SAASG,EAAQR,CAAgB,CAAEI,CAA2B,EACnE,SAASC,EAAYrD,CAAY,EAC/B,GAAM,CAACE,cAAAA,CAAa,CAAC,CAAGF,EACnBE,IAELA,EAAcoD,mBAAmB,CAAC,QAASF,GAC3ClD,EAAcoD,mBAAmB,CAAC,OAAQD,GAC5C,CAEAN,EAAQC,EAAU,SAAUO,CAAK,EAC/BA,EAAMtC,gBAAgB,CAAC,QAASmC,GAChCG,EAAMtC,gBAAgB,CAAC,OAAQoC,EACjC,EACF,C","sources":["app/assets/modules/user-code-prompt.ts","ui/packages/onfocus/onfocus.ts"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport {observe} from '@github/selector-observer'\nimport {onKey} from '@github-ui/onfocus'\n\nonKey('keyup', '.js-user-code-field', event => {\n  const currentTarget = event.currentTarget as HTMLElement\n  if (!currentTarget) return\n\n  const alphaNumericRegExp = new RegExp('^(Digit[0-9]|Key[A-Z]|Numpad[0-9])')\n\n  let inputElement\n\n  switch (true) {\n    case event.code === 'Backspace': {\n      const previousField = currentTarget.getAttribute('data-previous')\n      inputElement = document.querySelector(`#${previousField}`) as HTMLInputElement\n\n      break\n    }\n    case alphaNumericRegExp.test(event.code): {\n      const nextField = currentTarget.getAttribute('data-next')\n      inputElement = document.querySelector(`#${nextField}`) as HTMLInputElement\n\n      break\n    }\n  }\n\n  inputElement?.focus()\n})\n\n// Replace all of the input fields if data from the\n// clipboard matches the user code pattern.\nobserve('.js-user-code-field', {\n  constructor: HTMLInputElement,\n  add(el) {\n    el.addEventListener('paste', (event: Event) => {\n      event.preventDefault()\n\n      const clipboardEvent = event as ClipboardEvent\n\n      const {clipboardData} = clipboardEvent\n      if (!clipboardData) return\n\n      const userCode = clipboardData.getData('text')\n\n      // User code looks like A1B2-3CD4\n      const userCodeRegExp = new RegExp(/^[a-zA-Z|\\d]{4}-[a-zA-Z|\\d]{4}$/)\n      if (!userCodeRegExp.test(userCode)) return\n\n      let lastInputElement\n\n      for (const inputField of document.querySelectorAll<HTMLInputElement>('input.js-user-code-field')) {\n        if (inputField.readOnly) continue\n        lastInputElement = inputField\n\n        // An example ID would be user-code-0\n        const index = Number(inputField.id.slice(-1))\n        inputField.value = userCode[index]!\n      }\n\n      lastInputElement?.focus()\n    })\n  },\n})\n","// React to elements receiving focus\n//\n// Often we need to apply some behavior to form elements when they start getting\n// interacted with. We could use `observe`, but that can be expensive if there\n// are many such elements on the page, and when we aren't actually interested in\n// those elements until they receive focus.\n//\n// This is a lightweight and preferred alternative to the family of methods\n// from `github/focused` module.\n//\n// Examples\n//\n//   onFocus('.js-widget', element => {\n//     // ...\n//   })\n\nimport SelectorSet from 'selector-set'\n\nlet initialized = false\nconst selectorSet: SelectorSet<(el: HTMLElement) => void> = new SelectorSet()\n\nfunction handleFocus(event: FocusEvent) {\n  const focused = event.target\n  if (focused instanceof HTMLElement && focused.nodeType !== Node.DOCUMENT_NODE) {\n    for (const match of selectorSet.matches(focused)) {\n      match.data.call(null, focused)\n    }\n  }\n}\n\nexport function onFocus(selector: string, fn: (el: HTMLElement) => unknown) {\n  if (!initialized) {\n    initialized = true\n    // We use the \"focus\" event in the capture phase because Firefox\n    // historically had a limitation with \"focusin\" not bubbling.\n    document.addEventListener('focus', handleFocus, true)\n  }\n  selectorSet.add(selector, fn)\n\n  if (document.activeElement instanceof HTMLElement && document.activeElement.matches(selector)) {\n    fn(document.activeElement)\n  }\n}\n\nexport function onKey(\n  eventType: 'keydown' | 'keypress' | 'keyup',\n  selector: string,\n  inputHandler: (event: KeyboardEvent) => unknown,\n) {\n  function blurHandler(event: Event) {\n    const currentTarget = event.currentTarget as HTMLElement\n    if (!currentTarget) return\n    currentTarget.removeEventListener(eventType, inputHandler)\n    currentTarget.removeEventListener('blur', blurHandler)\n  }\n\n  onFocus(selector, function (field) {\n    field.addEventListener(eventType, inputHandler)\n    field.addEventListener('blur', blurHandler)\n  })\n}\n\nexport function onInput(selector: string, inputHandler: EventListener) {\n  function blurHandler(event: Event) {\n    const {currentTarget} = event\n    if (!currentTarget) return\n\n    currentTarget.removeEventListener('input', inputHandler)\n    currentTarget.removeEventListener('blur', blurHandler)\n  }\n\n  onFocus(selector, function (field) {\n    field.addEventListener('input', inputHandler)\n    field.addEventListener('blur', blurHandler)\n  })\n}\n"],"names":["onKey","event","inputElement","currentTarget","alphaNumericRegExp","code","previousField","getAttribute","document","querySelector","test","nextField","focus","observe","constructor","HTMLInputElement","add","el","addEventListener","lastInputElement","preventDefault","clipboardData","userCode","getData","userCodeRegExp","RegExp","inputField","querySelectorAll","readOnly","index","Number","id","slice","value","initialized","selectorSet","SelectorSet","handleFocus","focused","target","HTMLElement","nodeType","Node","DOCUMENT_NODE","match","matches","data","call","onFocus","selector","fn","activeElement","eventType","inputHandler","blurHandler","removeEventListener","field","onInput"],"sourceRoot":""}
import {
  ArchivedFilterProvider,
  AssigneeFilterProvider,
  AuthorFilterProvider,
  ClosedFilterProvider,
  CommenterFilterProvider,
  CommentsFilterProvider,
  CreatedFilterProvider,
  DraftFilterProvider,
  InBodyFilterProvider,
  InCommentsFilterProvider,
  InteractionsFilterProvider,
  InTitleFilterProvider,
  InvolvesFilterProvider,
  IsFilterProvider,
  LabelFilterProvider,
  LanguageFilterProvider,
  LinkedFilterProvider,
  MentionsFilterProvider,
  MergedFilterProvider,
  MilestoneFilterProvider,
  OrgFilterProvider,
  ProjectFilterProvider,
  ReactionsFilterProvider,
  ReasonFilterProvider,
  RepositoryFilterProvider,
  ReviewedByFilterProvider,
  ReviewFilterProvider,
  ReviewRequestedFilterProvider,
  SortFilterProvider,
  StateFilterProvider,
  StatusFilterProvider,
  UpdatedFilterProvider,
  UserFilterProvider,
  UserReviewRequestedFilterProvider,
} from '../../providers'
import {TeamFilterProvider, TeamReviewRequestedFilterProvider} from '../../providers/team'
import type {FilterProvider} from '../../types'
import {ProviderSupportStatus} from '../../types'

const defaultUserObject = {
  currentUserLogin: 'monalisa',
  currentUserAvatarUrl: 'https://avatars.githubusercontent.com/u/90914?v=4',
}

// ? Should we allow users to pass in overridden providers?
export const setupMockFilterProviders = (): FilterProvider[] => {
  return [
    new AssigneeFilterProvider(defaultUserObject, {priority: 1, filterTypes: {exclusive: true}}),
    new AuthorFilterProvider(defaultUserObject, {filterTypes: {multiKey: false}}),
    new CommenterFilterProvider(defaultUserObject),
    new InvolvesFilterProvider(defaultUserObject),
    new MentionsFilterProvider(defaultUserObject),
    new ReviewedByFilterProvider(defaultUserObject),
    new ReviewRequestedFilterProvider(defaultUserObject),
    new UserFilterProvider(defaultUserObject),
    new UserReviewRequestedFilterProvider(defaultUserObject),
    new ArchivedFilterProvider(),
    new ClosedFilterProvider(),
    new CommentsFilterProvider(),
    new CreatedFilterProvider(),
    new DraftFilterProvider(),
    new InteractionsFilterProvider(),
    new IsFilterProvider(['issue', 'pr', 'open']),
    new LinkedFilterProvider(['pr']),
    new MergedFilterProvider(),
    new StateFilterProvider('mixed', {
      filterTypes: {
        inclusive: true,
        exclusive: true,
        valueless: false,
        multiKey: false,
        multiValue: true,
      },
    }),
    new ReactionsFilterProvider(),
    new ReasonFilterProvider({filterTypes: {inclusive: false}}),
    new ReviewFilterProvider(),
    new StatusFilterProvider({filterTypes: {multiKey: true, multiValue: true, valueless: true}}),
    new LanguageFilterProvider({support: {status: ProviderSupportStatus.Deprecated}}),
    new UpdatedFilterProvider(),
    new ProjectFilterProvider(),
    new LabelFilterProvider({priority: 1, filterTypes: {exclusive: true}}),
    new TeamFilterProvider(),
    new TeamReviewRequestedFilterProvider(undefined, {support: {status: ProviderSupportStatus.Unsupported}}),
    new InBodyFilterProvider(),
    new InCommentsFilterProvider(),
    new InTitleFilterProvider(),
    new OrgFilterProvider(),
    new SortFilterProvider(['created', 'updated', 'reactions', 'comments', 'author-date', 'committer-date']),
    new MilestoneFilterProvider(),
    new RepositoryFilterProvider(),
  ]
}

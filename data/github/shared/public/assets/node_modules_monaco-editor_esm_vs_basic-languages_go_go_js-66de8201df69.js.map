{"version":3,"file":"chunk-node_modules_monaco-editor_esm_vs_basic-languages_go_go_js-xxxxxxxxxxxx.js","mappings":"kMAAA;;;;;+EAK+E,EAI/E,IAAIA,EAAO,CACTC,SAAU,CACRC,YAAa,KACbC,aAAc,CAAC,KAAM,KAAK,EAE5BC,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACDC,iBAAkB,CAChB,CAAEC,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAS,EAC1C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAS,EAC1C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,UAAU,EACtD,CACDC,iBAAkB,CAChB,CAAEH,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACxB,CAAED,KAAM,IAAKC,MAAO,GAAI,EACzB,EAECG,EAAW,CACbC,aAAc,GACdC,aAAc,MACdC,SAAU,CACR,QACA,OACA,OACA,QACA,WACA,UACA,QACA,OACA,cACA,MACA,OACA,KACA,OACA,KACA,SACA,YACA,MACA,UACA,QACA,SACA,SACA,SACA,SACA,OACA,MACA,OACA,OACA,QACA,QACA,SACA,SACA,SACA,OACA,QACA,QACA,QACA,UACA,UACA,YACA,aACA,OACA,OACA,OACA,MACA,UACA,SACA,MACD,CACDC,UAAW,CACT,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,MACA,IACA,IACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACD,CAEDC,QAAS,wBACTC,QAAS,wEAETC,UAAW,CACTC,KAAM,CAEJ,CACE,eACA,CACEC,MAAO,CACL,YAAa,CAAEC,MAAO,YAAa,EACnC,WAAY,YACd,CACF,EACD,CAED,CAAEC,QAAS,aAAc,EAEzB,CAAC,aAAc,aAAa,CAE5B,CAAC,WAAY,UAAU,CAEvB,CAAC,aAAc,YAAY,CAC3B,CAAC,mBAAoB,YAAY,CACjC,CACE,WACA,CACEF,MAAO,CACL,aAAc,YACd,WAAY,EACd,CACF,EACD,CAED,CAAC,yBAA0B,eAAe,CAC1C,CAAC,2BAA4B,eAAe,CAC5C,CAAC,gCAAiC,aAAa,CAC/C,CAAC,gBAAiB,eAAe,CACjC,CAAC,oBAAqB,gBAAgB,CACtC,CAAC,WAAY,SAAS,CACtB,CAAC,KAAM,SAAS,CAEhB,CAAC,QAAS,YAAY,CAEtB,CAAC,kBAAmB,iBAAiB,CAErC,CAAC,IAAK,SAAU,UAAU,CAC1B,CAAC,IAAK,SAAU,aAAa,CAE7B,CAAC,WAAY,SAAS,CACtB,CAAC,mBAAoB,CAAC,SAAU,gBAAiB,SAAS,CAAC,CAC3D,CAAC,IAAK,iBAAiB,CACxB,CACDG,WAAY,CACV,CAAC,aAAc,GAAG,CAClB,CAAC,eAAgB,cAAe,cAAc,CAC9C,CAAC,OAAQ,UAAW,WAAW,CAC/B,CAAC,UAAW,UAAU,CACvB,CACDC,QAAS,CACP,CAAC,UAAW,UAAU,CAGtB,CAAC,OAAQ,UAAW,OAAO,CAC3B,CAAC,QAAS,UAAU,CACrB,CAEDC,WAAY,CACV,CAAC,UAAW,cAAc,CAE1B,CAAC,OAAQ,sBAAsB,CAC/B,CAAC,OAAQ,cAAe,OAAO,CAC/B,CAAC,QAAS,cAAc,CACzB,CACDC,OAAQ,CACN,CAAC,UAAW,SAAS,CACrB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,MAAO,wBAAwB,CAChC,CAAC,IAAK,SAAU,OAAO,CACxB,CACDC,UAAW,CACT,CAAC,QAAS,SAAS,CACnB,CAAC,IAAK,SAAU,OAAO,CACxB,CAEL,C","sources":["node_modules/monaco-editor/esm/vs/basic-languages/go/go.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.49.0(383fdf3fc0e1e1a024068b8d0fd4f3dcbae74d04)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/go/go.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\", notIn: [\"string\"] },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".go\",\n  keywords: [\n    \"break\",\n    \"case\",\n    \"chan\",\n    \"const\",\n    \"continue\",\n    \"default\",\n    \"defer\",\n    \"else\",\n    \"fallthrough\",\n    \"for\",\n    \"func\",\n    \"go\",\n    \"goto\",\n    \"if\",\n    \"import\",\n    \"interface\",\n    \"map\",\n    \"package\",\n    \"range\",\n    \"return\",\n    \"select\",\n    \"struct\",\n    \"switch\",\n    \"type\",\n    \"var\",\n    \"bool\",\n    \"true\",\n    \"false\",\n    \"uint8\",\n    \"uint16\",\n    \"uint32\",\n    \"uint64\",\n    \"int8\",\n    \"int16\",\n    \"int32\",\n    \"int64\",\n    \"float32\",\n    \"float64\",\n    \"complex64\",\n    \"complex128\",\n    \"byte\",\n    \"rune\",\n    \"uint\",\n    \"int\",\n    \"uintptr\",\n    \"string\",\n    \"nil\"\n  ],\n  operators: [\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"<<\",\n    \">>\",\n    \"&^\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"/=\",\n    \"%=\",\n    \"&=\",\n    \"|=\",\n    \"^=\",\n    \"<<=\",\n    \">>=\",\n    \"&^=\",\n    \"&&\",\n    \"||\",\n    \"<-\",\n    \"++\",\n    \"--\",\n    \"==\",\n    \"<\",\n    \">\",\n    \"=\",\n    \"!\",\n    \"!=\",\n    \"<=\",\n    \">=\",\n    \":=\",\n    \"...\",\n    \"(\",\n    \")\",\n    \"\",\n    \"]\",\n    \"{\",\n    \"}\",\n    \",\",\n    \";\",\n    \".\",\n    \":\"\n  ],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // identifiers and keywords\n      [\n        /[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      // whitespace\n      { include: \"@whitespace\" },\n      // [[ attributes ]].\n      [/\\[\\[.*\\]\\]/, \"annotation\"],\n      // Preprocessor directive\n      [/^\\s*#\\w+/, \"keyword\"],\n      // delimiters and operators\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      // numbers\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, \"number.hex\"],\n      [/0[0-7']*[0-7]/, \"number.octal\"],\n      [/0[bB][0-1']*[0-1]/, \"number.binary\"],\n      [/\\d[\\d']*/, \"number\"],\n      [/\\d/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"],\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      // non-teminated string\n      [/\"/, \"string\", \"@string\"],\n      [/`/, \"string\", \"@rawstring\"],\n      // characters\n      [/'[^\\\\']'/, \"string\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'/, \"string.invalid\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@doccomment\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n      // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    //Identical copy of comment above, except for the addition of .doc\n    doccomment: [\n      [/[^\\/*]+/, \"comment.doc\"],\n      // [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\n      [/\\/\\*/, \"comment.doc.invalid\"],\n      [/\\*\\//, \"comment.doc\", \"@pop\"],\n      [/[\\/*]/, \"comment.doc\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string\", \"@pop\"]\n    ],\n    rawstring: [\n      [/[^\\`]/, \"string\"],\n      [/`/, \"string\", \"@pop\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","tokenizer","root","cases","token","include","whitespace","comment","doccomment","string","rawstring"],"sourceRoot":""}
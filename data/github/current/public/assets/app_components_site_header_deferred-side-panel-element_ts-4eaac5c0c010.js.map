{"version":3,"file":"chunk-app_components_site_header_deferred-side-panel-element_ts-xxxxxxxxxxxx.js","mappings":"kfAGA,YACMA,iCAAiCC,YAKrCC,WAAY,CAGN,CAAC,IAAI,CAACC,QAAQ,EAAI,IAAI,CAACA,QAAQ,CAACC,YAAY,CAAC,iBAEjD,IAAI,CAACD,QAAQ,CAACE,YAAY,CAAC,MAAO,IAAI,CAACC,GAAG,EAE1C,IAAI,CAACH,QAAQ,CAACI,gBAAgB,CAAC,2BAA4BC,IACzD,GAAIA,aAAiBC,aAAeD,EAAME,MAAM,CAACP,QAAQ,CAAE,CACzD,IAAMQ,EAAcH,EAAME,MAAM,CAACP,QAAQ,CACnCS,EAAY,IAAI,CAACT,QAAQ,CAACU,aAAa,CAAC,wBACxCC,EAAYH,EAAYE,aAAa,CAAC,wBAC5C,GAAI,GAAeC,EAUnB,IAAK,IAAMC,KANXP,EAAMQ,cAAc,GACpB,IAAI,CAACb,QAAQ,CAACc,eAAe,CAAC,OAC9B,IAAI,CAACd,QAAQ,CAACE,YAAY,CAAC,cAAe,IAC1CO,EAAUM,eAAe,IAAIJ,EAAUK,QAAQ,EAG9BP,EAAUQ,gBAAgB,CAAC,iDACtCL,EAAGM,YAAY,CAAC,0BAA4BP,EAAUQ,EAAE,EAC1DP,EAAGV,YAAY,CAAC,uBAAwBO,EAAUU,EAAE,EAElDP,EAAGM,YAAY,CAAC,yBAA2BP,EAAUQ,EAAE,EACzDP,EAAGV,YAAY,CAAC,sBAAuBO,EAAUU,EAAE,CAGzD,CACF,GACF,CACF,E,GArCGC,EAAAA,EAAIA,C,CADDvB,EAAAA,SAAAA,CAAAA,MAAAA,KAAAA,G,GAEHwB,EAAAA,EAAMA,C,CAFHxB,EAAAA,SAAAA,CAAAA,WAAAA,KAAAA,G,GAGHwB,EAAAA,EAAMA,C,CAHHxB,EAAAA,SAAAA,CAAAA,QAAAA,KAAAA,GAAAA,EAAAA,EAAAA,CADLyB,EAAAA,EAAUA,C,CACLzB,E","sources":["app/components/site/header/deferred-side-panel-element.ts"],"sourcesContent":["import {attr, controller, target} from '@github/catalyst'\nimport type {ModalDialogElement} from '@primer/view-components/app/components/primer/alpha/modal_dialog'\n\n@controller\nclass DeferredSidePanelElement extends HTMLElement {\n  @attr url: string\n  @target fragment: HTMLElement\n  @target panel: ModalDialogElement\n\n  loadPanel() {\n    // the fragment target gets removed from the document once the panel has loaded,\n    // so we don't need to run setup again even if this element is reconnected\n    if (!this.fragment || this.fragment.hasAttribute('data-loaded')) return\n\n    this.fragment.setAttribute('src', this.url)\n\n    this.fragment.addEventListener('include-fragment-replace', event => {\n      if (event instanceof CustomEvent && event.detail.fragment) {\n        const newFragment = event.detail.fragment\n        const oldDialog = this.fragment.querySelector('modal-dialog, dialog')\n        const newDialog = newFragment.querySelector('modal-dialog, dialog')\n        if (!oldDialog || !newDialog) return\n\n        // manually swap out the dialog contents,\n        // injecting the new dialog children into the old dialog\n        event.preventDefault()\n        this.fragment.removeAttribute('src')\n        this.fragment.setAttribute('data-loaded', '')\n        oldDialog.replaceChildren(...newDialog.children)\n        // Ensure the IDs are the same\n        // FIXME: if we applied well known IDs we could delete the below code.\n        for (const el of oldDialog.querySelectorAll('[data-close-dialog-id],[data-show-dialog-id]')) {\n          if (el.getAttribute('data-close-dialog-id') === newDialog.id) {\n            el.setAttribute('data-close-dialog-id', oldDialog.id)\n          }\n          if (el.getAttribute('data-show-dialog-id') === newDialog.id) {\n            el.setAttribute('data-show-dialog-id', oldDialog.id)\n          }\n        }\n      }\n    })\n  }\n}\n"],"names":["DeferredSidePanelElement","HTMLElement","loadPanel","fragment","hasAttribute","setAttribute","url","addEventListener","event","CustomEvent","detail","newFragment","oldDialog","querySelector","newDialog","el","preventDefault","removeAttribute","replaceChildren","children","querySelectorAll","getAttribute","id","attr","target","controller"],"sourceRoot":""}
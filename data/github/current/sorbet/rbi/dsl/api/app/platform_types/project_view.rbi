# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Api::App::PlatformTypes::ProjectView`.
# Please instead update this file by running `bin/tapioca dsl Api::App::PlatformTypes::ProjectView`.

class Api::App::PlatformTypes::ProjectView < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def created_at; end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(Integer)) }
  def database_id; end

  sig { returns(T::Boolean) }
  def database_id?; end

  sig { returns(T.nilable(String)) }
  def filter; end

  sig { returns(T::Boolean) }
  def filter?; end

  sig { returns(T.nilable(T::Array[Integer])) }
  def group_by; end

  sig { returns(T::Boolean) }
  def group_by?; end

  sig { returns(T::Array[Api::App::PlatformTypes::ProjectNextGroupedViewItems]) }
  def grouped_items; end

  sig { returns(T::Boolean) }
  def grouped_items?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(Api::App::PlatformTypes::ProjectNextItemConnection) }
  def items; end

  sig { returns(T::Boolean) }
  def items?; end

  sig { returns(String) }
  def layout; end

  sig { returns(T::Boolean) }
  def layout?; end

  sig { returns(String) }
  def name; end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(Integer) }
  def number; end

  sig { returns(T::Boolean) }
  def number?; end

  sig { returns(Api::App::PlatformTypes::ProjectNext) }
  def project; end

  sig { returns(T::Boolean) }
  def project?; end

  sig { returns(T.nilable(T::Array[Api::App::PlatformTypes::SortBy])) }
  def sort_by; end

  sig { returns(T::Boolean) }
  def sort_by?; end

  sig { returns(GraphQL::Client::Schema::ScalarType) }
  def updated_at; end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(T::Array[Integer])) }
  def vertical_group_by; end

  sig { returns(T::Boolean) }
  def vertical_group_by?; end

  sig { returns(T.nilable(T::Array[Integer])) }
  def visible_fields; end

  sig { returns(T::Boolean) }
  def visible_fields?; end
end

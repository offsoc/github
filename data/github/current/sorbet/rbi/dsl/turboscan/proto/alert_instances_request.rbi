# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Turboscan::Proto::AlertInstancesRequest`.
# Please instead update this file by running `bin/tapioca dsl Turboscan::Proto::AlertInstancesRequest`.

class Turboscan::Proto::AlertInstancesRequest
  sig do
    params(
      alert_number: T.nilable(Integer),
      branches_only: T.nilable(T::Boolean),
      limit: T.nilable(Integer),
      no_count: T.nilable(T::Boolean),
      numeric_page: T.nilable(Integer),
      ref_names_bytes: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      repository_id: T.nilable(Integer),
      skip_pagination: T.nilable(T::Boolean)
    ).void
  end
  def initialize(alert_number: nil, branches_only: nil, limit: nil, no_count: nil, numeric_page: nil, ref_names_bytes: T.unsafe(nil), repository_id: nil, skip_pagination: nil); end

  sig { returns(Integer) }
  def alert_number; end

  sig { params(value: Integer).void }
  def alert_number=(value); end

  sig { returns(T::Boolean) }
  def branches_only; end

  sig { params(value: T::Boolean).void }
  def branches_only=(value); end

  sig { void }
  def clear_alert_number; end

  sig { void }
  def clear_branches_only; end

  sig { void }
  def clear_limit; end

  sig { void }
  def clear_no_count; end

  sig { void }
  def clear_numeric_page; end

  sig { void }
  def clear_ref_names_bytes; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_skip_pagination; end

  sig { returns(Integer) }
  def limit; end

  sig { params(value: Integer).void }
  def limit=(value); end

  sig { returns(T::Boolean) }
  def no_count; end

  sig { params(value: T::Boolean).void }
  def no_count=(value); end

  sig { returns(Integer) }
  def numeric_page; end

  sig { params(value: Integer).void }
  def numeric_page=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def ref_names_bytes; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def ref_names_bytes=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T::Boolean) }
  def skip_pagination; end

  sig { params(value: T::Boolean).void }
  def skip_pagination=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MemberFeatureRequestMailer`.
# Please instead update this file by running `bin/tapioca dsl MemberFeatureRequestMailer`.

class MemberFeatureRequestMailer
  class << self
    sig { params(account: T.untyped, except: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def admin_emails(account, except: T.unsafe(nil)); end

    sig { params(_arg0: T.untyped, _arg1: T.untyped, _arg2: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_host_url(*_arg0, **_arg1, &_arg2); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_url(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def audio_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def audio_url(source, options = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def bcc_log; end

    sig { params(account: T.untyped, include_name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def billing_emails(account, include_name: T.unsafe(nil)); end

    sig { params(account: T.untyped, admins: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def build_admin_recipients_list(account, admins); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_extname(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_host(source = T.unsafe(nil), options = T.unsafe(nil)); end

    sig { params(source: ::String, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_path(source, options = T.unsafe(nil)); end

    sig { params(mail: T.untyped, premailer_options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def convert_to_premail(mail, premailer_options: T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def default_url_options; end

    sig { params(helper: T.untyped, pull_request_orchestration: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def expand_from_pull_request_orchestration(helper, pull_request_orchestration); end

    sig { params(helper: T.untyped, repository_orchestration: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def expand_from_repository_orchestration(helper, repository_orchestration); end

    sig { params(helper: T.untyped, subject: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def expand_nwo_from(helper, subject); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def font_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def font_url(source, options = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_abuse_reports_stafftools_repository_path(repo); end

    sig { params(transfer: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_accept_settings_app_transfer_path(transfer); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_billing_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_latest_runs_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_secrets_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_self_hosted_runners_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_variables_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_workflows_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_admin_disable_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_admin_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_analyze_language_stafftools_repository_path(repo); end

    sig { params(app: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_installation_action_path(app, user = T.unsafe(nil)); end

    sig { params(app: T.untyped, user: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_installation_permissions_path(app, user, **params); end

    sig { params(app: T.untyped, user: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_installation_permissions_url(app, user, **params); end

    sig { params(app: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_installations_path(app, user = T.unsafe(nil)); end

    sig { params(app: T.untyped, user: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_installations_suggestions_path(app, user, **params); end

    sig { params(app: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_path(app, user); end

    sig { params(app: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_select_target_path(app, **params); end

    sig { params(app: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_select_target_url(app, **params); end

    sig { params(app: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_url(app, user = T.unsafe(nil)); end

    sig { params(repo: T.untyped, id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_archive_stafftools_repository_large_file_path(repo, id); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_archive_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_cancel_access_request_stafftools_repository_path(repo); end

    sig { params(request: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_cancel_app_integration_installation_request_url(request, user); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_cancel_unlock_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_change_allow_force_push_stafftools_repository_path(repo); end

    sig { params(kind: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_change_disk_quota_stafftools_repository_path(kind, repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_change_max_object_size_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_change_timeout_stafftools_repository_large_files_path(repo); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_child_teams_stafftools_team_path(team); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_children_stafftools_repository_network_path(repo); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_cleanup_codespaces_path(pull); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_cleanup_pull_request_path(pull); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_clear_dependencies_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_clear_domain_stafftools_repository_pages_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_clear_generated_pages_stafftools_repository_pages_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_clear_snapshot_dependencies_stafftools_repository_path(repo); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_close_issue_path(issue); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_close_stafftools_repository_pull_request_path(pr); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_code_frequency_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_collaboration_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_collaborators_only_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_commit_activity_path(repo); end

    sig { params(repo: T.untyped, period: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_community_graph_path(repo, period = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_content_warning_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_contributors_graph_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_create_pull_request_path(repo); end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_advisory_comment_path(comment); end

    sig { params(advisory: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_advisory_path(advisory); end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_issue_comment_path(comment); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_issue_path(issue); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_path(repo); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_pull_request_path(pr); end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_pull_request_review_comment_path(comment); end

    sig { params(file: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_repository_file_path(file); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_team_path(team); end

    sig { params(key: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_user_gpg_key_path(key); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_delete_https_certificate_stafftools_repository_pages_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_deleted_stafftools_repository_reflog_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_dependabot_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_dependency_graph_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_deploy_keys_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_detect_manifests_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_disable_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_disk_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped, snapshot_id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_download_dependency_snapshot_stafftools_repository_path(repo, snapshot_id); end

    sig do
      params(
        app: T.untyped,
        installation: T.untyped,
        user: T.untyped,
        params: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def gh_edit_app_installation_path(app, installation, user, **params); end

    sig { params(app: T.untyped, installation: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_edit_app_installation_permissions_path(app, installation, user); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_enable_code_search_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_events_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped, snapshot_id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_exclude_dependency_snapshot_stafftools_repository_path(repo, snapshot_id); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_external_groups_stafftools_team_path(team); end

    sig { params(advisory: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_first_stafftools_repository_advisory_comments_path(advisory); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_first_stafftools_repository_issue_comments_path(issue); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_force_pushes_stafftools_repository_reflog_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_fsck_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_funding_links_disable_stafftools_repository_path(repo); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_generate_key_settings_app_path(app); end

    sig { params(options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_graphql_app_installation_permissions_path(**options); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_hide_from_google_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_https_status_stafftools_repository_pages_path(repo); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_integration_revoke_all_tokens_path(app); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_issue_path(issue); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_issues_assigned_path(repo, args); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_issues_created_by_path(repo, args); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_issues_mentioned_path(repo, args); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_issues_path(repo); end

    sig { params(label: T.untyped, repository: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_label_path(label, repository = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_labels_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_languages_stafftools_repository_path(repo); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_list_keys_settings_app_path(app); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_lock_for_migration_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_lock_stafftools_repository_path(repo); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_make_private_settings_app_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_make_public_settings_app_path(app); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_members_stafftools_team_path(team); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_merge_pull_request_path(pull); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_merge_stafftools_repository_pull_request_path(pr); end

    sig { params(milestone: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_milestone_issue_search_path(milestone); end

    sig { params(milestone: T.untyped, repository: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_milestone_path(milestone, repository = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_network_map_stafftools_repository_path(repo); end

    sig { params(app: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_new_app_installation_path(app, user = T.unsafe(nil)); end

    sig { params(app: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_new_app_installation_url(app, user = T.unsafe(nil)); end

    sig { params(context: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_new_settings_app_path(context); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_notifications_stafftools_repository_path(repo); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_open_issue_path(issue); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_open_stafftools_repository_pull_request_path(pr); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_overview_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pause_repo_invite_limit_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_permissions_stafftools_repository_path(repo); end

    sig { params(installation: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_permissions_update_request_settings_installation_path(installation); end

    sig { params(app: T.untyped, field: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_preview_permissions_note_apps_path(app, field:); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_preview_stafftools_repository_large_files_path(repo); end

    sig { params(pull: T.untyped, commit: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pull_request_commit_path(pull, commit); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pull_request_diff_path(pull); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pull_request_patch_path(pull); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pulls_assigned_path(repo, args); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pulls_mentioned_path(repo, args); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pulls_review_requested_path(repo, args); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_punch_card_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_code_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_commits_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_discussions_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_events_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_issues_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_objects_stafftools_repository_large_files_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_projects_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_releases_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_repository_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_stafftools_repository_pull_requests_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_wiki_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_rebuild_commit_contributions_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_redetect_license_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reflog_sync_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_blackbird_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_code_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_commits_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_discussions_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_issues_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_org_blackbird_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_projects_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_releases_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_repository_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_stafftools_repository_pull_requests_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_wiki_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_releases_stafftools_repository_path(repo); end

    sig { params(app: T.untyped, key: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_remove_key_settings_app_path(app, key); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_repo_graphs_path(repo); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_repositories_stafftools_team_path(team); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_request_access_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_request_https_certificate_stafftools_repository_pages_path(repo); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_requests_stafftools_team_path(team); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_require_login_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_require_opt_in_on_entire_network_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_require_opt_in_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_restore_objects_stafftools_repository_large_files_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_restore_page_stafftools_repository_pages_path(repo); end

    sig { params(repo: T.untyped, ref: T.untyped, oid: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_restore_stafftools_repository_reflog_path(repo, ref, oid); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_schedule_backup_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_schedule_wiki_backup_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_search_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_security_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_set_used_by_stafftools_repository_path(repo); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_advanced_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_beta_feature_toggle_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_beta_features_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_create_client_secret_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_installations_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_integration_agent_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_permissions_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_remove_client_secret_path(app); end

    sig { params(target: T.untyped, transfer: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_transfer_path(target, transfer); end

    sig { params(target: T.untyped, transfer: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_transfer_url(target, transfer); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_update_integration_agent_path(app); end

    sig { params(context: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_apps_path(context); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_apps_sign_agreement_path(app); end

    sig { params(installation: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_installation_path(installation, params = T.unsafe(nil)); end

    sig { params(installation: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_installation_repositories_path(installation, params = T.unsafe(nil)); end

    sig { params(target: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_installations_path(target); end

    sig do
      params(
        pull: T.untyped,
        commit: T.untyped,
        selected_check_run: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def gh_show_pull_request_check_sha_path(pull, commit, selected_check_run); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_show_pull_request_path(pull); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_siblings_stafftools_repository_network_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_size_disable_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_staff_override_unlock_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_staff_unlock_stafftools_repository_path(repo); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_reconcile_team_path(team); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repo_hooks_path(repo); end

    sig { params(repo: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_activity_path(repo, options = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_advisories_path(repo); end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_advisory_comment_path(comment); end

    sig { params(advisory: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_advisory_comments_path(advisory); end

    sig { params(advisory: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_advisory_path(advisory); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_collaborators_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_country_block_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_dmca_takedown_path(repo); end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_issue_comment_path(comment); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_issue_comments_path(issue); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_issue_path(issue); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_issue_subscriptions_path(issue); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_issues_path(repo); end

    sig { params(repo: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_large_files_path(repo, options = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_mirror_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_network_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_network_tree_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_notification_settings_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_projects_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_protected_branches_path(repo); end

    sig { params(pull_request_orchestration: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_request_orchestration_path(pull_request_orchestration); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_request_orchestrations_path(repo); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_request_path(pr); end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_request_review_comment_path(comment); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_request_review_comments_path(pr); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_request_subscriptions_path(pr); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_requests_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_redirects_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_reflog_path(repo); end

    sig { params(file: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_repository_file_path(file); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_repository_files_path(repo); end

    sig { params(repository_orchestration: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_repository_orchestration_path(repository_orchestration); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_repository_orchestrations_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_svn_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_vulnerability_alerts_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_watchers_path(repo); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_sync_team_path(team); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_team_path(team); end

    sig { params(key: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_user_gpg_key_path(key); end

    sig { params(user_or_bot: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_user_path(user_or_bot); end

    sig { params(entity: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_star_path(entity); end

    sig { params(entity: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stargazers_path(entity); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_status_stafftools_repository_pages_path(repo); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_subscribe_issue_path(issue); end

    sig { params(installation: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_suspend_settings_installation_path(installation); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_sync_search_index_stafftools_repository_pull_request(pr); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_sync_stafftools_repository_mirror_path(repo); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_sync_stafftools_repository_pull_request_path(pr); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_sync_stafftools_repository_reflog_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_toggle_allow_git_graph_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_toggle_anonymous_release_download_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_toggle_permission_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_toggle_public_push_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_toggle_token_scanning_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_traffic_path(repo); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_transfer_settings_app_path(app); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_transfer_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped, id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unarchive_stafftools_repository_large_file_path(repo, id); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unarchive_stafftools_repository_path(repo); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_undo_cleanup_pull_request_path(pull); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unlock_build_stafftools_repository_pages_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unlock_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unpublish_unsearchable_releases_stafftools_repository_path(repo, options = T.unsafe(nil)); end

    sig { params(entity: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unstar_path(entity); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unsubscribe_issue_path(issue); end

    sig { params(installation: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unsuspend_settings_installation_path(installation); end

    sig { params(app: T.untyped, installation: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_update_app_installation_path(app, installation, user = T.unsafe(nil)); end

    sig { params(app: T.untyped, installation: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_update_app_installation_permissions_path(app, installation, user = T.unsafe(nil)); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_update_permissions_settings_apps_path(app); end

    sig { params(installation: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_update_permissions_settings_installation_path(installation); end

    sig { params(installation: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_update_settings_installation_path(installation); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_user_pull_requests_path(repo, args); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_wiki_mark_as_broken_stafftools_repository_path(repo); end

    sig { params(page: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_wiki_path(page, repo = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_wiki_restore_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_wiki_schedule_maintenance_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_wikis_path(repo); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_guides; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_marketplace; end

    sig { params(from: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def github_noreply(from = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_opensource; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_partnerships; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_shop; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_trade_appeals; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_trade_sap_bis; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def image_base_url; end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def image_path(source, options = T.unsafe(nil)); end

    sig { params(path: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def image_url(path); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def javascript_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def javascript_url(source, options = T.unsafe(nil)); end

    sig { params(_arg0: T.untyped, _arg1: T.untyped, _arg2: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def mailer_asset_host_url(*_arg0, **_arg1, &_arg2); end

    sig { params(path: ::String).returns(::ActionMailer::MessageDelivery) }
    def mailer_static_asset_path(path); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def microsoft_trade_help; end

    sig { params(url: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def notification_signature(url); end

    sig { params(list: T.untyped, email: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def notifications_list_email(list, email); end

    sig { params(member_feature_request: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def notify_dismissal(member_feature_request); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_asset(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_audio(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_font(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_image(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_javascript(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_stylesheet(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_video(source, options = T.unsafe(nil)); end

    sig { params(args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def premail(*args); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def public_compute_asset_path(source, options = T.unsafe(nil)); end

    sig { params(email: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def quote_email_address(email); end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def quote_user_name(user); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def redalert; end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def safe_name?(name); end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def scrub_real_name(name); end

    sig { params(path: ::String).returns(::ActionMailer::MessageDelivery) }
    def static_asset_path(path); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stylesheet_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stylesheet_url(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_asset(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_audio(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_font(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_image(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_javascript(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_stylesheet(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_video(source, options = T.unsafe(nil)); end

    sig do
      params(
        user: T.untyped,
        email: T.untyped,
        allow_private: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def user_email(user, email = T.unsafe(nil), allow_private: T.unsafe(nil)); end

    sig { params(account: T.untyped, except: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def user_or_admin_recipients(account, except: T.unsafe(nil)); end

    sig { params(account: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def user_or_billing_recipients(account); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def video_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def video_url(source, options = T.unsafe(nil)); end
  end
end

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: services/credz.proto

require 'google/protobuf'

require 'google/protobuf/timestamp_pb'
Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("services/credz.proto", :syntax => :proto3) do
    add_message "git_hub.launch.services.credz.Repository" do
      optional :global_id, :string, 1
      optional :new_global_id, :string, 2
    end
    add_message "git_hub.launch.services.credz.User" do
      optional :global_id, :string, 1
      optional :new_global_id, :string, 2
    end
    add_message "git_hub.launch.services.credz.Organization" do
      optional :global_id, :string, 1
      optional :new_global_id, :string, 2
    end
    add_message "git_hub.launch.services.credz.Environment" do
      optional :global_id, :string, 1
      optional :repository_id, :int64, 2
      optional :new_global_id, :string, 3
    end
    add_message "git_hub.launch.services.credz.Error" do
      optional :error_number, :int64, 1
      optional :error_message, :string, 2
      optional :backtrace, :string, 3
    end
    add_message "git_hub.launch.services.credz.CredentialOwner" do
      oneof :owner do
        optional :repository, :message, 1, "git_hub.launch.services.credz.Repository"
        optional :user, :message, 2, "git_hub.launch.services.credz.User"
        optional :organization, :message, 3, "git_hub.launch.services.credz.Organization"
        optional :environment, :message, 4, "git_hub.launch.services.credz.Environment"
      end
    end
    add_message "git_hub.launch.services.credz.Credential" do
      optional :owner, :message, 1, "git_hub.launch.services.credz.CredentialOwner"
      optional :integration, :string, 5
      optional :name, :string, 7
      optional :value, :bytes, 4
      optional :length, :int64, 10
      optional :created_at, :message, 8, "google.protobuf.Timestamp"
      optional :updated_at, :message, 9, "google.protobuf.Timestamp"
      optional :visibility, :enum, 11, "git_hub.launch.services.credz.Visibility"
      repeated :selected_repositories, :message, 12, "git_hub.launch.services.credz.Repository"
      optional :selected_repositories_count, :int64, 13
      optional :integration_next_global_id, :string, 14
      optional :value_encrypted_with_next_global_id_scope, :bytes, 15
    end
    add_message "git_hub.launch.services.credz.StoreRequest" do
      optional :credential, :message, 1, "git_hub.launch.services.credz.Credential"
      optional :is_encrypted_with_next_global_id_scope, :bool, 2
    end
    add_message "git_hub.launch.services.credz.StoreResponse" do
      optional :stored, :bool, 1
      optional :updated, :bool, 4
      optional :credential, :message, 2, "git_hub.launch.services.credz.Credential"
      optional :error, :message, 3, "git_hub.launch.services.credz.Error"
    end
    add_message "git_hub.launch.services.credz.CreateRequest" do
      optional :credential, :message, 1, "git_hub.launch.services.credz.Credential"
      optional :is_encrypted_with_next_global_id_scope, :bool, 2
    end
    add_message "git_hub.launch.services.credz.CreateResponse" do
      optional :stored, :bool, 1
      optional :credential, :message, 2, "git_hub.launch.services.credz.Credential"
      optional :error, :message, 3, "git_hub.launch.services.credz.Error"
    end
    add_message "git_hub.launch.services.credz.UpdateRequest" do
      optional :credential, :message, 1, "git_hub.launch.services.credz.Credential"
      optional :is_encrypted_with_next_global_id_scope, :bool, 2
    end
    add_message "git_hub.launch.services.credz.UpdateResponse" do
      optional :updated, :bool, 1
      optional :credential, :message, 2, "git_hub.launch.services.credz.Credential"
      optional :error, :message, 3, "git_hub.launch.services.credz.Error"
    end
    add_message "git_hub.launch.services.credz.FetchRequest" do
      optional :repository, :message, 1, "git_hub.launch.services.credz.Repository"
      optional :credential, :message, 2, "git_hub.launch.services.credz.Credential"
      optional :include_value, :bool, 4
    end
    add_message "git_hub.launch.services.credz.FetchResponse" do
      optional :credential, :message, 1, "git_hub.launch.services.credz.Credential"
      optional :error, :message, 2, "git_hub.launch.services.credz.Error"
    end
    add_message "git_hub.launch.services.credz.ExistsRequest" do
      optional :repository, :message, 1, "git_hub.launch.services.credz.Repository"
      optional :credential, :message, 2, "git_hub.launch.services.credz.Credential"
    end
    add_message "git_hub.launch.services.credz.ExistsResponse" do
      optional :exists, :bool, 1
      optional :error, :message, 2, "git_hub.launch.services.credz.Error"
    end
    add_message "git_hub.launch.services.credz.DeleteRequest" do
      optional :repository, :message, 1, "git_hub.launch.services.credz.Repository"
      optional :credential, :message, 2, "git_hub.launch.services.credz.Credential"
    end
    add_message "git_hub.launch.services.credz.DeleteResponse" do
      optional :success, :bool, 1
      optional :error, :message, 2, "git_hub.launch.services.credz.Error"
    end
    add_message "git_hub.launch.services.credz.ListRequest" do
      optional :owner, :message, 1, "git_hub.launch.services.credz.CredentialOwner"
      optional :integration, :string, 2
      optional :include_value, :bool, 3
      optional :integration_next_global_id, :string, 4
    end
    add_message "git_hub.launch.services.credz.ListResponse" do
      optional :error, :message, 1, "git_hub.launch.services.credz.Error"
      repeated :credentials, :message, 2, "git_hub.launch.services.credz.Credential"
    end
    add_message "git_hub.launch.services.credz.ListSecretsForRepositoryRequest" do
      optional :repository, :message, 1, "git_hub.launch.services.credz.RepositoryWithOwner"
      optional :integration, :string, 2
      optional :is_private, :bool, 3
      optional :include_value, :bool, 4
      repeated :environments, :message, 5, "git_hub.launch.services.credz.CredentialOwner"
      optional :integration_next_global_id, :string, 6
    end
    add_message "git_hub.launch.services.credz.ListSecretsForRepositoryResponse" do
      optional :error, :message, 1, "git_hub.launch.services.credz.Error"
      repeated :repository_secrets, :message, 2, "git_hub.launch.services.credz.Credential"
      repeated :organization_secrets, :message, 3, "git_hub.launch.services.credz.Credential"
      repeated :environment_secrets, :message, 4, "git_hub.launch.services.credz.Credential"
    end
    add_message "git_hub.launch.services.credz.DeleteSecretsForOwnerRequest" do
      optional :owner, :message, 1, "git_hub.launch.services.credz.CredentialOwner"
    end
    add_message "git_hub.launch.services.credz.DeleteSecretsForOwnerResponse" do
      optional :deleted_secrets_count, :int64, 1
    end
    add_message "git_hub.launch.services.credz.SecretCount" do
      optional :owner_global_id, :string, 1
      optional :count, :int64, 2
      optional :owner_next_global_id, :string, 3
    end
    add_message "git_hub.launch.services.credz.SecretCountsRequest" do
      repeated :owner_global_ids, :string, 1
      optional :owner_type, :string, 2
      optional :integration, :string, 3
      repeated :owner_next_global_ids, :string, 4
      optional :integration_next_global_id, :string, 5
    end
    add_message "git_hub.launch.services.credz.SecretCountsResponse" do
      optional :error, :message, 1, "git_hub.launch.services.credz.Error"
      repeated :secret_counts, :message, 2, "git_hub.launch.services.credz.SecretCount"
    end
    add_message "git_hub.launch.services.credz.RepositoryWithOwner" do
      optional :repository, :message, 1, "git_hub.launch.services.credz.Repository"
      optional :owner, :message, 2, "git_hub.launch.services.credz.CredentialOwner"
    end
    add_enum "git_hub.launch.services.credz.Visibility" do
      value :VISIBILITY_OWNER, 0
      value :VISIBILITY_ALL_REPOSITORIES, 1
      value :VISIBILITY_PRIVATE_REPOSITORIES, 2
      value :VISIBILITY_SELECTED_REPOSITORIES, 3
    end
  end
end

module GitHub
  module Launch
    module Services
      module Credz
        Repository = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.Repository").msgclass
        User = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.User").msgclass
        Organization = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.Organization").msgclass
        Environment = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.Environment").msgclass
        Error = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.Error").msgclass
        CredentialOwner = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.CredentialOwner").msgclass
        Credential = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.Credential").msgclass
        StoreRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.StoreRequest").msgclass
        StoreResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.StoreResponse").msgclass
        CreateRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.CreateRequest").msgclass
        CreateResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.CreateResponse").msgclass
        UpdateRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.UpdateRequest").msgclass
        UpdateResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.UpdateResponse").msgclass
        FetchRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.FetchRequest").msgclass
        FetchResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.FetchResponse").msgclass
        ExistsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.ExistsRequest").msgclass
        ExistsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.ExistsResponse").msgclass
        DeleteRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.DeleteRequest").msgclass
        DeleteResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.DeleteResponse").msgclass
        ListRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.ListRequest").msgclass
        ListResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.ListResponse").msgclass
        ListSecretsForRepositoryRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.ListSecretsForRepositoryRequest").msgclass
        ListSecretsForRepositoryResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.ListSecretsForRepositoryResponse").msgclass
        DeleteSecretsForOwnerRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.DeleteSecretsForOwnerRequest").msgclass
        DeleteSecretsForOwnerResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.DeleteSecretsForOwnerResponse").msgclass
        SecretCount = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.SecretCount").msgclass
        SecretCountsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.SecretCountsRequest").msgclass
        SecretCountsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.SecretCountsResponse").msgclass
        RepositoryWithOwner = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.RepositoryWithOwner").msgclass
        Visibility = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.launch.services.credz.Visibility").enummodule
      end
    end
  end
end
